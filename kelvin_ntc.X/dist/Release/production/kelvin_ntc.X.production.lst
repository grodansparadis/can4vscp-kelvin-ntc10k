

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Mar 23 20:20:35 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119                           	psect	pa_nodes,global,class=CODE,delta=1
   120  0000                     tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           prodh	equ	0xFF4
   124                           prodl	equ	0xFF3
   125                           intcon	equ	0xFF2
   126                           wreg	equ	0xFE8
   127                           indf1	equ	0xFE7
   128                           fsr1h	equ	0xFE2
   129                           fsr1l	equ	0xFE1
   130                           indf2	equ	0xFDF
   131                           postinc2	equ	0xFDE
   132                           postdec2	equ	0xFDD
   133                           plusw2	equ	0xFDB
   134                           fsr2h	equ	0xFDA
   135                           fsr2l	equ	0xFD9
   136                           status	equ	0xFD8
   137                           
   138                           	psect	smallconst
   139  000600                     __psmallconst:
   140                           	opt stack 0
   141  000600                     _vscp_deviceURL:
   142                           	opt stack 0
   143  000600  77                 	db	119
   144  000601  77                 	db	119
   145  000602  77                 	db	119
   146  000603  2E                 	db	46
   147  000604  65                 	db	101
   148  000605  75                 	db	117
   149  000606  72                 	db	114
   150  000607  6F                 	db	111
   151  000608  73                 	db	115
   152  000609  6F                 	db	111
   153  00060A  75                 	db	117
   154  00060B  72                 	db	114
   155  00060C  63                 	db	99
   156  00060D  65                 	db	101
   157  00060E  2E                 	db	46
   158  00060F  73                 	db	115
   159  000610  65                 	db	101
   160  000611  2F                 	db	47
   161  000612  6E                 	db	110
   162  000613  74                 	db	116
   163  000614  63                 	db	99
   164  000615  31                 	db	49
   165  000616  30                 	db	48
   166  000617  4B                 	db	75
   167  000618  41                 	db	65
   168  000619  5F                 	db	95
   169  00061A  33                 	db	51
   170  00061B  2E                 	db	46
   171  00061C  78                 	db	120
   172  00061D  6D                 	db	109
   173  00061E  6C                 	db	108
   174  00061F  00                 	db	0
   175  000620                     __end_of_vscp_deviceURL:
   176                           	opt stack 0
   177  000620                     exp@coeff:
   178                           	opt stack 0
   179  000620  0000               	dw	0
   180  000622  3F80               	dw	16256
   181  000624  7218               	dw	29208
   182  000626  3F31               	dw	16177
   183  000628  FDF0               	dw	65008
   184  00062A  3E75               	dw	15989
   185  00062C  5847               	dw	22599
   186  00062E  3D63               	dw	15715
   187  000630  9558               	dw	38232
   188  000632  3C1D               	dw	15389
   189  000634  C482               	dw	50306
   190  000636  3AAE               	dw	15022
   191  000638  78A8               	dw	30888
   192  00063A  3921               	dw	14625
   193  00063C  93EF               	dw	37871
   194  00063E  3780               	dw	14208
   195  000640  92A0               	dw	37536
   196  000642  35A7               	dw	13735
   197  000644  5646               	dw	22086
   198  000646  3415               	dw	13333
   199  000648                     __end_ofexp@coeff:
   200                           	opt stack 0
   201  000648                     log@coeff:
   202                           	opt stack 0
   203  000648  0000               	dw	0
   204  00064A  0000               	dw	0
   205  00064C  FFC4               	dw	65476
   206  00064E  3F7F               	dw	16255
   207  000650  EF80               	dw	61312
   208  000652  BEFF               	dw	48895
   209  000654  E190               	dw	57744
   210  000656  3EA9               	dw	16041
   211  000658  82EC               	dw	33516
   212  00065A  BE76               	dw	48758
   213  00065C  AD82               	dw	44418
   214  00065E  3E2B               	dw	15915
   215  000660  3C0E               	dw	15374
   216  000662  BDC3               	dw	48579
   217  000664  D187               	dw	53639
   218  000666  3D13               	dw	15635
   219  000668  7841               	dw	30785
   220  00066A  BBD3               	dw	48083
   221  00066C                     __end_oflog@coeff:
   222                           	opt stack 0
   223  0000                     _ADCON0	set	4034
   224  0000                     _ADCON0bits	set	4034
   225  0000                     _ADCON1	set	4033
   226  0000                     _ADCON2	set	4032
   227  0000                     _ADRESH	set	4036
   228  0000                     _ADRESL	set	4035
   229  0000                     _BRGCON1	set	3952
   230  0000                     _BRGCON2	set	3953
   231  0000                     _BRGCON3	set	3954
   232  0000                     _BSEL0	set	3576
   233  0000                     _CANCON	set	3951
   234  0000                     _CIOCON	set	3955
   235  0000                     _ECANCON	set	3959
   236  0000                     _EEADR	set	4009
   237  0000                     _EECON1bits	set	4006
   238  0000                     _EECON2	set	4007
   239  0000                     _EEDATA	set	4008
   240  0000                     _INTCONbits	set	4082
   241  0000                     _MSEL0	set	3568
   242  0000                     _MSEL1	set	3569
   243  0000                     _MSEL2	set	3570
   244  0000                     _PIE1bits	set	3997
   245  0000                     _PIR1bits	set	3998
   246  0000                     _PIR2bits	set	4001
   247  0000                     _PORTC	set	3970
   248  0000                     _RXB1CONbits	set	3920
   249  0000                     _RXF0EIDH	set	3842
   250  0000                     _RXF0EIDL	set	3843
   251  0000                     _RXF0SIDH	set	3840
   252  0000                     _RXF0SIDL	set	3841
   253  0000                     _RXF1EIDH	set	3846
   254  0000                     _RXF1EIDL	set	3847
   255  0000                     _RXF1SIDH	set	3844
   256  0000                     _RXF1SIDL	set	3845
   257  0000                     _RXFBCON0	set	3552
   258  0000                     _RXFBCON1	set	3553
   259  0000                     _RXFBCON2	set	3554
   260  0000                     _RXFBCON3	set	3555
   261  0000                     _RXFBCON4	set	3556
   262  0000                     _RXFBCON5	set	3557
   263  0000                     _RXFBCON6	set	3558
   264  0000                     _RXFBCON7	set	3559
   265  0000                     _RXFCON0	set	3540
   266  0000                     _RXFCON1	set	3541
   267  0000                     _RXM0EIDH	set	3866
   268  0000                     _RXM0EIDL	set	3867
   269  0000                     _RXM0SIDH	set	3864
   270  0000                     _RXM0SIDL	set	3865
   271  0000                     _RXM1EIDH	set	3870
   272  0000                     _RXM1EIDL	set	3871
   273  0000                     _RXM1SIDH	set	3868
   274  0000                     _RXM1SIDL	set	3869
   275  0000                     _T0CON	set	4053
   276  0000                     _T0CONbits	set	4053
   277  0000                     _TMR0H	set	4055
   278  0000                     _TMR0L	set	4054
   279  0000                     _TRISA	set	3986
   280  0000                     _TRISB	set	3987
   281  0000                     _TRISC	set	3988
   282  0000                     _B0RXFUL	set	28935
   283  0000                     _B0TXEN	set	28610
   284  0000                     _B1RXFUL	set	29063
   285  0000                     _B1TXEN	set	28611
   286  0000                     _B2RXFUL	set	29191
   287  0000                     _B2TXEN	set	28612
   288  0000                     _B3RXFUL	set	29319
   289  0000                     _B3TXEN	set	28613
   290  0000                     _B4RXFUL	set	29447
   291  0000                     _B4TXEN	set	28614
   292  0000                     _B5RXFUL	set	29575
   293  0000                     _B5TXEN	set	28615
   294  0000                     _FIFOEMPTY	set	31655
   295  0000                     _IRXIF	set	32039
   296  0000                     _MDSEL0	set	31678
   297  0000                     _MDSEL1	set	31679
   298  0000                     _RXB0FILHIT0	set	31488
   299  0000                     _RXB0FUL	set	31495
   300  0000                     _RXB0IF	set	32032
   301  0000                     _RXB0OVFL	set	31655
   302  0000                     _RXB1IF	set	32033
   303  0000                     _RXB1OVFL	set	31654
   304  0000                     _RXM0EXIDM	set	30923
   305  0000                     _RXM1EXIDEN	set	30955
   306  0000                     _B0CON	set	3616
   307  0000                     _B1CON	set	3632
   308  0000                     _B2CON	set	3648
   309  0000                     _B3CON	set	3664
   310  0000                     _B4CON	set	3680
   311  0000                     _B5CON	set	3696
   312  0000                     _RXB0CON	set	3936
   313  0000                     _RXB1CON	set	3920
   314  0000                     _TXB0CON	set	3904
   315  0000                     _TXB1CON	set	3888
   316  0000                     _TXB2CON	set	3872
   317                           
   318                           ; #config settings
   319  00066C  00                 	db	0	; dummy byte at the end
   320  0000                     tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           prodh	equ	0xFF4
   324                           prodl	equ	0xFF3
   325                           intcon	equ	0xFF2
   326                           wreg	equ	0xFE8
   327                           indf1	equ	0xFE7
   328                           fsr1h	equ	0xFE2
   329                           fsr1l	equ	0xFE1
   330                           indf2	equ	0xFDF
   331                           postinc2	equ	0xFDE
   332                           postdec2	equ	0xFDD
   333                           plusw2	equ	0xFDB
   334                           fsr2h	equ	0xFDA
   335                           fsr2l	equ	0xFD9
   336                           status	equ	0xFD8
   337                           
   338                           	psect	cinit
   339  004EF6                     __pcinit:
   340                           	opt stack 0
   341  004EF6                     start_initialization:
   342                           	opt stack 0
   343  004EF6                     __initialization:
   344                           	opt stack 0
   345                           
   346                           ; Clear objects allocated to BIGRAM (960 bytes)
   347  004EF6  EE01  F09C         	lfsr	0,__pbssBIGRAM
   348  004EFA  EE13 F0C0          	lfsr	1,960
   349  004EFE                     clear_0:
   350  004EFE  6AEE               	clrf	postinc0,c
   351  004F00  50E5               	movf	postdec1,w,c
   352  004F02  50E1               	movf	fsr1l,w,c
   353  004F04  E1FC               	bnz	clear_0
   354  004F06  50E2               	movf	fsr1h,w,c
   355  004F08  E1FA               	bnz	clear_0
   356                           
   357                           ; Clear objects allocated to BANK1 (102 bytes)
   358  004F0A  EE01  F000         	lfsr	0,__pbssBANK1
   359  004F0E  0E66               	movlw	102
   360  004F10                     clear_1:
   361  004F10  6AEE               	clrf	postinc0,c
   362  004F12  06E8               	decf	wreg,f,c
   363  004F14  E1FD               	bnz	clear_1
   364                           
   365                           ; Clear objects allocated to BANK0 (36 bytes)
   366  004F16  EE00  F0B3         	lfsr	0,__pbssBANK0
   367  004F1A  0E24               	movlw	36
   368  004F1C                     clear_2:
   369  004F1C  6AEE               	clrf	postinc0,c
   370  004F1E  06E8               	decf	wreg,f,c
   371  004F20  E1FD               	bnz	clear_2
   372                           
   373                           ; Clear objects allocated to COMRAM (13 bytes)
   374  004F22  EE00  F046         	lfsr	0,__pbssCOMRAM
   375  004F26  0E0D               	movlw	13
   376  004F28                     clear_3:
   377  004F28  6AEE               	clrf	postinc0,c
   378  004F2A  06E8               	decf	wreg,f,c
   379  004F2C  E1FD               	bnz	clear_3
   380  004F2E                     end_of_initialization:
   381                           	opt stack 0
   382  004F2E                     __end_of__initialization:
   383                           	opt stack 0
   384  004F2E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   385  004F30  6EF8               	movwf	tblptru,c
   386  004F32  0100               	movlb	0
   387  004F34  EF5E  F01F         	goto	_main	;jump to C main() function
   388                           tblptru	equ	0xFF8
   389                           tblptrh	equ	0xFF7
   390                           tblptrl	equ	0xFF6
   391                           tablat	equ	0xFF5
   392                           prodh	equ	0xFF4
   393                           prodl	equ	0xFF3
   394                           intcon	equ	0xFF2
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           indf1	equ	0xFE7
   398                           postdec1	equ	0xFE5
   399                           fsr1h	equ	0xFE2
   400                           fsr1l	equ	0xFE1
   401                           indf2	equ	0xFDF
   402                           postinc2	equ	0xFDE
   403                           postdec2	equ	0xFDD
   404                           plusw2	equ	0xFDB
   405                           fsr2h	equ	0xFDA
   406                           fsr2l	equ	0xFD9
   407                           status	equ	0xFD8
   408                           
   409                           	psect	bssCOMRAM
   410  000046                     __pbssCOMRAM:
   411                           	opt stack 0
   412  000046                     _vscp_page_select:
   413                           	opt stack 0
   414  000046                     	ds	2
   415  000048                     __ECANRxFilterHitInfo:
   416                           	opt stack 0
   417  000048                     	ds	1
   418  000049                     _adc_series_counter:
   419                           	opt stack 0
   420  000049                     	ds	1
   421  00004A                     _sendTimer:
   422                           	opt stack 0
   423  00004A                     	ds	1
   424  00004B                     _vscp_alarmstatus:
   425                           	opt stack 0
   426  00004B                     	ds	1
   427  00004C                     _vscp_guid_reset:
   428                           	opt stack 0
   429  00004C                     	ds	1
   430  00004D                     _vscp_initledfunc:
   431                           	opt stack 0
   432  00004D                     	ds	1
   433  00004E                     _vscp_node_substate:
   434                           	opt stack 0
   435  00004E                     	ds	1
   436  00004F                     _vscp_probe_address:
   437                           	opt stack 0
   438  00004F                     	ds	1
   439  000050                     _vscp_probe_cnt:
   440                           	opt stack 0
   441  000050                     	ds	1
   442  000051                     _vscp_second:
   443                           	opt stack 0
   444  000051                     	ds	1
   445  000052                     _vscp_statuscnt:
   446                           	opt stack 0
   447  000052                     	ds	1
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           prodh	equ	0xFF4
   453                           prodl	equ	0xFF3
   454                           intcon	equ	0xFF2
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           indf1	equ	0xFE7
   458                           postdec1	equ	0xFE5
   459                           fsr1h	equ	0xFE2
   460                           fsr1l	equ	0xFE1
   461                           indf2	equ	0xFDF
   462                           postinc2	equ	0xFDE
   463                           postdec2	equ	0xFDD
   464                           plusw2	equ	0xFDB
   465                           fsr2h	equ	0xFDA
   466                           fsr2l	equ	0xFD9
   467                           status	equ	0xFD8
   468                           
   469                           	psect	bssBANK0
   470  0000B3                     __pbssBANK0:
   471                           	opt stack 0
   472  0000B3                     _adc_conversion_flags:
   473                           	opt stack 0
   474  0000B3                     	ds	1
   475  0000B4                     _high_alarm:
   476                           	opt stack 0
   477  0000B4                     	ds	1
   478  0000B5                     _low_alarm:
   479                           	opt stack 0
   480  0000B5                     	ds	1
   481  0000B6                     _seconds:
   482                           	opt stack 0
   483  0000B6                     	ds	1
   484  0000B7                     _vscp_hour:
   485                           	opt stack 0
   486  0000B7                     	ds	1
   487  0000B8                     _vscp_initbtncnt:
   488                           	opt stack 0
   489  0000B8                     	ds	1
   490  0000B9                     _vscp_minute:
   491                           	opt stack 0
   492  0000B9                     	ds	1
   493  0000BA                     _vscp_nickname:
   494                           	opt stack 0
   495  0000BA                     	ds	1
   496  0000BB                     _vscp_node_state:
   497                           	opt stack 0
   498  0000BB                     	ds	1
   499  0000BC                     _vscp_imsg:
   500                           	opt stack 0
   501  0000BC                     	ds	14
   502  0000CA                     _vscp_omsg:
   503                           	opt stack 0
   504  0000CA                     	ds	13
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           prodh	equ	0xFF4
   510                           prodl	equ	0xFF3
   511                           intcon	equ	0xFF2
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           indf1	equ	0xFE7
   515                           postdec1	equ	0xFE5
   516                           fsr1h	equ	0xFE2
   517                           fsr1l	equ	0xFE1
   518                           indf2	equ	0xFDF
   519                           postinc2	equ	0xFDE
   520                           postdec2	equ	0xFDD
   521                           plusw2	equ	0xFDB
   522                           fsr2h	equ	0xFDA
   523                           fsr2l	equ	0xFD9
   524                           status	equ	0xFD8
   525                           
   526                           	psect	bssBANK1
   527  000100                     __pbssBANK1:
   528                           	opt stack 0
   529  000100                     _current_temp:
   530                           	opt stack 0
   531  000100                     	ds	12
   532  00010C                     _seconds_temp:
   533                           	opt stack 0
   534  00010C                     	ds	6
   535  000112                     _measurement_clock:
   536                           	opt stack 0
   537  000112                     	ds	4
   538  000116                     _timeout_clock:
   539                           	opt stack 0
   540  000116                     	ds	4
   541  00011A                     _vscp_configtimer:
   542                           	opt stack 0
   543  00011A                     	ds	2
   544  00011C                     _vscp_timer:
   545                           	opt stack 0
   546  00011C                     	ds	2
   547  00011E                     _sh_coefficients:
   548                           	opt stack 0
   549  00011E                     	ds	72
   550                           tblptru	equ	0xFF8
   551                           tblptrh	equ	0xFF7
   552                           tblptrl	equ	0xFF6
   553                           tablat	equ	0xFF5
   554                           prodh	equ	0xFF4
   555                           prodl	equ	0xFF3
   556                           intcon	equ	0xFF2
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           indf1	equ	0xFE7
   560                           postdec1	equ	0xFE5
   561                           fsr1h	equ	0xFE2
   562                           fsr1l	equ	0xFE1
   563                           indf2	equ	0xFDF
   564                           postinc2	equ	0xFDE
   565                           postdec2	equ	0xFDD
   566                           plusw2	equ	0xFDB
   567                           fsr2h	equ	0xFDA
   568                           fsr2l	equ	0xFD9
   569                           status	equ	0xFD8
   570                           
   571                           	psect	bssBIGRAM
   572  00019C                     __pbssBIGRAM:
   573                           	opt stack 0
   574  00019C                     _adc:
   575                           	opt stack 0
   576  00019C                     	ds	960
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           prodh	equ	0xFF4
   582                           prodl	equ	0xFF3
   583                           intcon	equ	0xFF2
   584                           postinc0	equ	0xFEE
   585                           wreg	equ	0xFE8
   586                           indf1	equ	0xFE7
   587                           postdec1	equ	0xFE5
   588                           fsr1h	equ	0xFE2
   589                           fsr1l	equ	0xFE1
   590                           indf2	equ	0xFDF
   591                           postinc2	equ	0xFDE
   592                           postdec2	equ	0xFDD
   593                           plusw2	equ	0xFDB
   594                           fsr2h	equ	0xFDA
   595                           fsr2l	equ	0xFD9
   596                           status	equ	0xFD8
   597                           
   598                           	psect	cstackBANK1
   599  000166                     __pcstackBANK1:
   600                           	opt stack 0
   601  000166                     doWork@Rinf:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x0
   605  000166                     	ds	4
   606  00016A                     doWork@calVoltage:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x4
   610  00016A                     	ds	4
   611  00016E                     _doWork$2270:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x8
   615  00016E                     	ds	4
   616  000172                     _doWork$2271:
   617                           	opt stack 0
   618                           
   619                           ; 4 bytes @ 0xC
   620  000172                     	ds	4
   621  000176                     _doWork$2272:
   622                           	opt stack 0
   623                           
   624                           ; 4 bytes @ 0x10
   625  000176                     	ds	16
   626  000186                     doWork@v:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x20
   630  000186                     	ds	4
   631  00018A                     doWork@B:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x24
   635  00018A                     	ds	2
   636  00018C                     doWork@resistance:
   637                           	opt stack 0
   638                           
   639                           ; 4 bytes @ 0x26
   640  00018C                     	ds	4
   641  000190                     doWork@j:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x2A
   645  000190                     	ds	1
   646  000191                     doWork@avarage:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x2B
   650  000191                     	ds	4
   651  000195                     doWork@setpoint:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x2F
   655  000195                     	ds	2
   656  000197                     doWork@temp:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0x31
   660  000197                     	ds	4
   661  00019B                     doWork@i:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x35
   665  00019B                     	ds	1
   666                           tblptru	equ	0xFF8
   667                           tblptrh	equ	0xFF7
   668                           tblptrl	equ	0xFF6
   669                           tablat	equ	0xFF5
   670                           prodh	equ	0xFF4
   671                           prodl	equ	0xFF3
   672                           intcon	equ	0xFF2
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           indf1	equ	0xFE7
   676                           postdec1	equ	0xFE5
   677                           fsr1h	equ	0xFE2
   678                           fsr1l	equ	0xFE1
   679                           indf2	equ	0xFDF
   680                           postinc2	equ	0xFDE
   681                           postdec2	equ	0xFDD
   682                           plusw2	equ	0xFDB
   683                           fsr2h	equ	0xFDA
   684                           fsr2l	equ	0xFD9
   685                           status	equ	0xFD8
   686                           
   687                           	psect	cstackBANK0
   688  000060                     __pcstackBANK0:
   689                           	opt stack 0
   690  000060                     ?_sendVSCPFrame:
   691                           	opt stack 0
   692  000060                     ?___flmul:
   693                           	opt stack 0
   694  000060                     ?___asfldiv:
   695                           	opt stack 0
   696  000060                     sendVSCPFrame@vscpclass:
   697                           	opt stack 0
   698  000060                     ___asfldiv@f1p:
   699                           	opt stack 0
   700  000060                     ___flmul@f1:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0x0
   704  000060                     	ds	2
   705  000062                     sendVSCPFrame@vscptype:
   706                           	opt stack 0
   707  000062                     ___asfldiv@f2:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0x2
   711  000062                     	ds	1
   712  000063                     sendVSCPFrame@nodeid:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x3
   716  000063                     	ds	1
   717  000064                     sendVSCPFrame@priority:
   718                           	opt stack 0
   719  000064                     ___flmul@f2:
   720                           	opt stack 0
   721                           
   722                           ; 4 bytes @ 0x4
   723  000064                     	ds	1
   724  000065                     sendVSCPFrame@size:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x5
   728  000065                     	ds	1
   729  000066                     sendVSCPFrame@pData:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x6
   733  000066                     	ds	1
   734  000067                     ??_sendVSCPFrame:
   735                           
   736                           ; 0 bytes @ 0x7
   737  000067                     	ds	8
   738  00006F                     ___flmul@exp:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0xF
   742  00006F                     	ds	1
   743  000070                     ___flmul@f3_as_product:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x10
   747  000070                     	ds	4
   748  000074                     ___flmul@cntr:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x14
   752  000074                     	ds	1
   753  000075                     ___flmul@sign:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x15
   757  000075                     	ds	1
   758  000076                     ?_Celsius2Fahrenheit:
   759                           	opt stack 0
   760  000076                     ?___flsub:
   761                           	opt stack 0
   762  000076                     ?_eval_poly:
   763                           	opt stack 0
   764  000076                     ?___asflmul:
   765                           	opt stack 0
   766  000076                     ?___fltol:
   767                           	opt stack 0
   768  000076                     Celsius2Fahrenheit@tc:
   769                           	opt stack 0
   770  000076                     ___asflmul@multiplicand:
   771                           	opt stack 0
   772  000076                     ___flsub@f1:
   773                           	opt stack 0
   774  000076                     ___fltol@f1:
   775                           	opt stack 0
   776  000076                     eval_poly@x:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0x16
   780  000076                     	ds	4
   781  00007A                     ___fltol@sign1:
   782                           	opt stack 0
   783  00007A                     eval_poly@d:
   784                           	opt stack 0
   785  00007A                     ___flsub@f2:
   786                           	opt stack 0
   787                           
   788                           ; 4 bytes @ 0x1A
   789  00007A                     	ds	1
   790  00007B                     ___fltol@exp1:
   791                           	opt stack 0
   792  00007B                     eval_poly@n:
   793                           	opt stack 0
   794  00007B                     sendVSCPFrame@id:
   795                           	opt stack 0
   796                           
   797                           ; 4 bytes @ 0x1B
   798  00007B                     	ds	1
   799  00007C                     ?_setEventData:
   800                           	opt stack 0
   801  00007C                     ?___aldiv:
   802                           	opt stack 0
   803  00007C                     setEventData@v:
   804                           	opt stack 0
   805  00007C                     ___aldiv@dividend:
   806                           	opt stack 0
   807                           
   808                           ; 4 bytes @ 0x1C
   809  00007C                     	ds	1
   810  00007D                     eval_poly@res:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0x1D
   814  00007D                     	ds	1
   815  00007E                     ?___asflsub:
   816                           	opt stack 0
   817  00007E                     setEventData@unit:
   818                           	opt stack 0
   819  00007E                     ___asflsub@f1p:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x1E
   823  00007E                     	ds	1
   824  00007F                     ??_vscp_handleProtocolEvent:
   825  00007F                     ??_vscp_doOneSecondWork:
   826  00007F                     setEventData@newval:
   827                           	opt stack 0
   828                           
   829                           ; 4 bytes @ 0x1F
   830  00007F                     	ds	1
   831  000080                     ___aldiv@divisor:
   832                           	opt stack 0
   833  000080                     ___asflsub@f2:
   834                           	opt stack 0
   835                           
   836                           ; 4 bytes @ 0x20
   837  000080                     	ds	1
   838  000081                     ?_log:
   839                           	opt stack 0
   840  000081                     ?_ldexp:
   841                           	opt stack 0
   842  000081                     ldexp@value:
   843                           	opt stack 0
   844  000081                     log@x:
   845                           	opt stack 0
   846                           
   847                           ; 4 bytes @ 0x21
   848  000081                     	ds	2
   849  000083                     setEventData@ival:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x23
   853  000083                     	ds	1
   854  000084                     ___aldiv@counter:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x24
   858  000084                     	ds	1
   859  000085                     ??_sendTempEvent:
   860  000085                     ___aldiv@sign:
   861                           	opt stack 0
   862  000085                     ldexp@newexp:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x25
   866  000085                     	ds	1
   867  000086                     sendTempEvent@i:
   868                           	opt stack 0
   869  000086                     vscp_handleProtocolEvent@page_save:
   870                           	opt stack 0
   871  000086                     ___aldiv@quotient:
   872                           	opt stack 0
   873                           
   874                           ; 4 bytes @ 0x26
   875  000086                     	ds	1
   876  000087                     ??_handle_sync:
   877  000087                     ??_doOneSecondWork:
   878                           
   879                           ; 0 bytes @ 0x27
   880  000087                     	ds	1
   881  000088                     vscp_handleProtocolEvent@page_save_1167:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x28
   885  000088                     	ds	1
   886  000089                     doOneSecondWork@tmp:
   887                           	opt stack 0
   888  000089                     handle_sync@i:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x29
   892  000089                     	ds	1
   893  00008A                     ?___altofl:
   894                           	opt stack 0
   895  00008A                     doOneSecondWork@i:
   896                           	opt stack 0
   897  00008A                     vscp_handleProtocolEvent@offset:
   898                           	opt stack 0
   899  00008A                     ___altofl@c:
   900                           	opt stack 0
   901                           
   902                           ; 4 bytes @ 0x2A
   903  00008A                     	ds	1
   904  00008B                     vscp_handleProtocolEvent@pos:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x2B
   908  00008B                     	ds	1
   909  00008C                     vscp_handleProtocolEvent@bytes:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x2C
   913  00008C                     	ds	1
   914  00008D                     vscp_handleProtocolEvent@len:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x2D
   918  00008D                     	ds	1
   919  00008E                     vscp_handleProtocolEvent@pos_1156:
   920                           	opt stack 0
   921  00008E                     ___altofl@sign:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x2E
   925  00008E                     	ds	1
   926  00008F                     ?_floor:
   927                           	opt stack 0
   928  00008F                     vscp_handleProtocolEvent@len_1157:
   929                           	opt stack 0
   930  00008F                     floor@x:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x2F
   934  00008F                     	ds	1
   935  000090                     vscp_handleProtocolEvent@bytes_this_time:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x30
   939  000090                     	ds	1
   940  000091                     vscp_handleProtocolEvent@cb:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x31
   944  000091                     	ds	1
   945  000092                     vscp_handleProtocolEvent@i_1166:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x32
   949  000092                     	ds	1
   950  000093                     vscp_handleProtocolEvent@k:
   951                           	opt stack 0
   952  000093                     floor@i:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x33
   956  000093                     	ds	1
   957  000094                     vscp_handleProtocolEvent@bytes_1163:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x34
   961  000094                     	ds	1
   962  000095                     vscp_handleProtocolEvent@i_1155:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x35
   966  000095                     	ds	1
   967  000096                     vscp_handleProtocolEvent@byte:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x36
   971  000096                     	ds	1
   972  000097                     vscp_handleProtocolEvent@i_1158:
   973                           	opt stack 0
   974  000097                     floor@expon:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x37
   978  000097                     	ds	1
   979  000098                     vscp_handleProtocolEvent@i:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x38
   983  000098                     	ds	1
   984  000099                     ?_exp:
   985                           	opt stack 0
   986  000099                     vscp_handleProtocolEvent@j:
   987                           	opt stack 0
   988  000099                     exp@x:
   989                           	opt stack 0
   990                           
   991                           ; 4 bytes @ 0x39
   992  000099                     	ds	4
   993  00009D                     _exp$2276:
   994                           	opt stack 0
   995                           
   996                           ; 4 bytes @ 0x3D
   997  00009D                     	ds	4
   998  0000A1                     exp@exponent:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x41
  1002  0000A1                     	ds	2
  1003  0000A3                     exp@sign:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x43
  1007  0000A3                     	ds	1
  1008  0000A4                     ??_doWork:
  1009                           
  1010                           ; 0 bytes @ 0x44
  1011  0000A4                     	ds	14
  1012  0000B2                     main@i:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x52
  1016  0000B2                     	ds	1
  1017                           tblptru	equ	0xFF8
  1018                           tblptrh	equ	0xFF7
  1019                           tblptrl	equ	0xFF6
  1020                           tablat	equ	0xFF5
  1021                           prodh	equ	0xFF4
  1022                           prodl	equ	0xFF3
  1023                           intcon	equ	0xFF2
  1024                           postinc0	equ	0xFEE
  1025                           wreg	equ	0xFE8
  1026                           indf1	equ	0xFE7
  1027                           postdec1	equ	0xFE5
  1028                           fsr1h	equ	0xFE2
  1029                           fsr1l	equ	0xFE1
  1030                           indf2	equ	0xFDF
  1031                           postinc2	equ	0xFDE
  1032                           postdec2	equ	0xFDD
  1033                           plusw2	equ	0xFDB
  1034                           fsr2h	equ	0xFDA
  1035                           fsr2l	equ	0xFD9
  1036                           status	equ	0xFD8
  1037                           
  1038                           	psect	cstackCOMRAM
  1039  000001                     __pcstackCOMRAM:
  1040                           	opt stack 0
  1041  000001                     ?i1_WriteTimer0:
  1042                           	opt stack 0
  1043  000001                     i1WriteTimer0@timer0:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x0
  1047  000001                     	ds	2
  1048  000003                     i1WriteTimer0@timer:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x2
  1052  000003                     	ds	2
  1053  000005                     ??_interrupt_at_low_vector:
  1054                           
  1055                           ; 0 bytes @ 0x4
  1056  000005                     	ds	9
  1057  00000E                     ?_WriteTimer0:
  1058                           	opt stack 0
  1059  00000E                     ?_writeEEPROM:
  1060                           	opt stack 0
  1061  00000E                     ?_OpenADC:
  1062                           	opt stack 0
  1063  00000E                     ?__CANIDToRegs:
  1064                           	opt stack 0
  1065  00000E                     ?__RegsToCANID:
  1066                           	opt stack 0
  1067  00000E                     ??_vscp_getMDF_URL:
  1068  00000E                     ?___flge:
  1069                           	opt stack 0
  1070  00000E                     ?_readEEPROM:
  1071                           	opt stack 0
  1072  00000E                     ?___lbmod:
  1073                           	opt stack 0
  1074  00000E                     ?__ECANPointBuffer:
  1075                           	opt stack 0
  1076  00000E                     ?___flpack:
  1077                           	opt stack 0
  1078  00000E                     ?_frexp:
  1079                           	opt stack 0
  1080  00000E                     ?_vscp_getFamilyCode:
  1081                           	opt stack 0
  1082  00000E                     ?_vscp_getFamilyType:
  1083                           	opt stack 0
  1084  00000E                     ?___flneg:
  1085                           	opt stack 0
  1086  00000E                     vscp_getMatrixInfo@pData:
  1087                           	opt stack 0
  1088  00000E                     ECANSetOperationMode@mode:
  1089                           	opt stack 0
  1090  00000E                     OpenADC@config2:
  1091                           	opt stack 0
  1092  00000E                     OpenTimer0@config:
  1093                           	opt stack 0
  1094  00000E                     ___lbmod@divisor:
  1095                           	opt stack 0
  1096  00000E                     __CANIDToRegs@ptr:
  1097                           	opt stack 0
  1098  00000E                     __RegsToCANID@ptr:
  1099                           	opt stack 0
  1100  00000E                     writeEEPROM@address:
  1101                           	opt stack 0
  1102  00000E                     readEEPROM@address:
  1103                           	opt stack 0
  1104  00000E                     WriteTimer0@timer0:
  1105                           	opt stack 0
  1106  00000E                     ___flpack@arg:
  1107                           	opt stack 0
  1108  00000E                     ___flge@ff1:
  1109                           	opt stack 0
  1110  00000E                     ___flneg@f1:
  1111                           	opt stack 0
  1112  00000E                     frexp@value:
  1113                           	opt stack 0
  1114                           
  1115                           ; 4 bytes @ 0xD
  1116  00000E                     	ds	1
  1117  00000F                     vscp_getMDF_URL@idx:
  1118                           	opt stack 0
  1119  00000F                     vscp_getMatrixInfo@i:
  1120                           	opt stack 0
  1121  00000F                     OpenADC@portconfig:
  1122                           	opt stack 0
  1123  00000F                     ___lbmod@dividend:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0xE
  1127  00000F                     	ds	1
  1128  000010                     ??_OpenADC:
  1129  000010                     __RegsToCANID@val:
  1130                           	opt stack 0
  1131  000010                     writeEEPROM@data:
  1132                           	opt stack 0
  1133  000010                     ___lbmod@counter:
  1134                           	opt stack 0
  1135  000010                     WriteTimer0@timer:
  1136                           	opt stack 0
  1137  000010                     __CANIDToRegs@val:
  1138                           	opt stack 0
  1139                           
  1140                           ; 4 bytes @ 0xF
  1141  000010                     	ds	1
  1142  000011                     ?_vscp_setGUID:
  1143                           	opt stack 0
  1144  000011                     ?_vscp_setUserID:
  1145                           	opt stack 0
  1146  000011                     ?_vscp_setManufacturerId:
  1147                           	opt stack 0
  1148  000011                     init_app_eeprom@i:
  1149                           	opt stack 0
  1150  000011                     vscp_setGUID@data:
  1151                           	opt stack 0
  1152  000011                     vscp_setUserID@data:
  1153                           	opt stack 0
  1154  000011                     vscp_setManufacturerId@data:
  1155                           	opt stack 0
  1156  000011                     vscp_goBootloaderMode@algorithm:
  1157                           	opt stack 0
  1158  000011                     vscp_writeNicknamePermanent@nickname:
  1159                           	opt stack 0
  1160  000011                     vscp_setSegmentCRC@crc:
  1161                           	opt stack 0
  1162  000011                     vscp_setControlByte@ctrl:
  1163                           	opt stack 0
  1164  000011                     __RegsToCANID@type:
  1165                           	opt stack 0
  1166  000011                     __ECANPointBuffer@b:
  1167                           	opt stack 0
  1168  000011                     readEEPROM@data:
  1169                           	opt stack 0
  1170  000011                     ___lbmod@rem:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x10
  1174  000011                     	ds	1
  1175  000012                     ??__RegsToCANID:
  1176  000012                     ?_getCalibrationValue:
  1177                           	opt stack 0
  1178  000012                     ?___wmul:
  1179                           	opt stack 0
  1180  000012                     vscp_readAppReg@pos:
  1181                           	opt stack 0
  1182  000012                     vscp_getGUID@idx:
  1183                           	opt stack 0
  1184  000012                     vscp_setGUID@idx:
  1185                           	opt stack 0
  1186  000012                     vscp_getUserID@idx:
  1187                           	opt stack 0
  1188  000012                     vscp_setUserID@idx:
  1189                           	opt stack 0
  1190  000012                     vscp_getManufacturerId@idx:
  1191                           	opt stack 0
  1192  000012                     vscp_setManufacturerId@idx:
  1193                           	opt stack 0
  1194  000012                     vscp_handleDropNickname@bytes:
  1195                           	opt stack 0
  1196  000012                     OpenADC@config:
  1197                           	opt stack 0
  1198  000012                     ___flpack@exp:
  1199                           	opt stack 0
  1200  000012                     __ECANPointBuffer@pt:
  1201                           	opt stack 0
  1202  000012                     frexp@eptr:
  1203                           	opt stack 0
  1204  000012                     ___wmul@multiplier:
  1205                           	opt stack 0
  1206  000012                     ___flge@ff2:
  1207                           	opt stack 0
  1208                           
  1209                           ; 4 bytes @ 0x11
  1210  000012                     	ds	1
  1211  000013                     vscp_readAppReg@reg:
  1212                           	opt stack 0
  1213  000013                     vscp_readStdReg@rv:
  1214                           	opt stack 0
  1215  000013                     ___flpack@sign:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x12
  1219  000013                     	ds	1
  1220  000014                     ??_getCalibrationValue:
  1221  000014                     ??___flpack:
  1222  000014                     ??_frexp:
  1223  000014                     vscp_readAppReg@rv:
  1224                           	opt stack 0
  1225  000014                     __CANIDToRegs@type:
  1226                           	opt stack 0
  1227  000014                     __RegsToCANID@Value:
  1228                           	opt stack 0
  1229  000014                     vscp_readStdReg@reg:
  1230                           	opt stack 0
  1231  000014                     ___wmul@multiplicand:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x13
  1235  000014                     	ds	1
  1236  000015                     ??__CANIDToRegs:
  1237  000015                     ?_ECANReceiveMessage:
  1238                           	opt stack 0
  1239  000015                     ECANReceiveMessage@data:
  1240                           	opt stack 0
  1241  000015                     vscp_readRegister@reg:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x14
  1245  000015                     	ds	1
  1246  000016                     ECANReceiveMessage@dataLen:
  1247                           	opt stack 0
  1248  000016                     ___wmul@product:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x15
  1252  000016                     	ds	1
  1253  000017                     ECANReceiveMessage@msgFlags:
  1254                           	opt stack 0
  1255  000017                     __CANIDToRegs@Value:
  1256                           	opt stack 0
  1257  000017                     getCalibrationValue@cal:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x16
  1261  000017                     	ds	1
  1262  000018                     ??_writeCoeffs2Ram:
  1263  000018                     ?_ECANSendMessage:
  1264                           	opt stack 0
  1265  000018                     ?___awtofl:
  1266                           	opt stack 0
  1267  000018                     ?___lwtofl:
  1268                           	opt stack 0
  1269  000018                     ECANReceiveMessage@savedPtr:
  1270                           	opt stack 0
  1271  000018                     ___awtofl@c:
  1272                           	opt stack 0
  1273  000018                     ___lwtofl@c:
  1274                           	opt stack 0
  1275  000018                     ECANSendMessage@id:
  1276                           	opt stack 0
  1277                           
  1278                           ; 4 bytes @ 0x17
  1279  000018                     	ds	1
  1280  000019                     getCalibrationValue@i:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x18
  1284  000019                     	ds	1
  1285  00001A                     ECANReceiveMessage@id:
  1286                           	opt stack 0
  1287  00001A                     writeCoeffs2Ram@c:
  1288                           	opt stack 0
  1289                           
  1290                           ; 3 bytes @ 0x19
  1291  00001A                     	ds	1
  1292  00001B                     ECANReceiveMessage@i:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x1A
  1296  00001B                     	ds	1
  1297  00001C                     ECANSendMessage@data:
  1298                           	opt stack 0
  1299  00001C                     ECANReceiveMessage@mode:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0x1B
  1303  00001C                     	ds	1
  1304  00001D                     ?___fladd:
  1305                           	opt stack 0
  1306  00001D                     ECANSendMessage@dataLen:
  1307                           	opt stack 0
  1308  00001D                     ECANReceiveMessage@temp:
  1309                           	opt stack 0
  1310  00001D                     writeCoeffs2Ram@i:
  1311                           	opt stack 0
  1312  00001D                     ___fladd@f1:
  1313                           	opt stack 0
  1314                           
  1315                           ; 4 bytes @ 0x1C
  1316  00001D                     	ds	1
  1317  00001E                     ECANSendMessage@msgFlags:
  1318                           	opt stack 0
  1319  00001E                     ___awtofl@sign:
  1320                           	opt stack 0
  1321  00001E                     ECANReceiveMessage@ptr:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0x1D
  1325  00001E                     	ds	1
  1326  00001F                     ??_ECANSendMessage:
  1327  00001F                     writeCoeffs2Ram@j:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x1E
  1331  00001F                     	ds	1
  1332  000020                     ?_getCANFrame:
  1333                           	opt stack 0
  1334  000020                     getCANFrame@pdlc:
  1335                           	opt stack 0
  1336  000020                     ECANSendMessage@pb:
  1337                           	opt stack 0
  1338                           
  1339                           ; 18 bytes @ 0x1F
  1340  000020                     	ds	1
  1341  000021                     ?_vscp_writeAppReg:
  1342                           	opt stack 0
  1343  000021                     init_app_ram@i:
  1344                           	opt stack 0
  1345  000021                     vscp_writeAppReg@val:
  1346                           	opt stack 0
  1347  000021                     getCANFrame@pdata:
  1348                           	opt stack 0
  1349  000021                     ___fladd@f2:
  1350                           	opt stack 0
  1351                           
  1352                           ; 4 bytes @ 0x20
  1353  000021                     	ds	1
  1354  000022                     ?_vscp_writeStdReg:
  1355                           	opt stack 0
  1356  000022                     vscp_writeAppReg@pos:
  1357                           	opt stack 0
  1358  000022                     getCANFrame@pid:
  1359                           	opt stack 0
  1360  000022                     vscp_writeStdReg@value:
  1361                           	opt stack 0
  1362                           
  1363                           ; 1 bytes @ 0x21
  1364  000022                     	ds	1
  1365  000023                     ??_vscp_writeStdReg:
  1366  000023                     vscp_writeAppReg@reg:
  1367                           	opt stack 0
  1368  000023                     getCANFrame@flags:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x22
  1372  000023                     	ds	1
  1373  000024                     ?_getVSCPFrame:
  1374                           	opt stack 0
  1375  000024                     vscp_writeAppReg@rv:
  1376                           	opt stack 0
  1377  000024                     getVSCPFrame@pvscptype:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x23
  1381  000024                     	ds	1
  1382  000025                     ??___fladd:
  1383  000025                     getVSCPFrame@pNodeId:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x24
  1387  000025                     	ds	1
  1388  000026                     getVSCPFrame@pPriority:
  1389                           	opt stack 0
  1390                           
  1391                           ; 1 bytes @ 0x25
  1392  000026                     	ds	1
  1393  000027                     getVSCPFrame@pSize:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x26
  1397  000027                     	ds	1
  1398  000028                     getVSCPFrame@pData:
  1399                           	opt stack 0
  1400  000028                     vscp_writeStdReg@code:
  1401                           	opt stack 0
  1402                           
  1403                           ; 4 bytes @ 0x27
  1404  000028                     	ds	1
  1405  000029                     ??_getVSCPFrame:
  1406  000029                     ___fladd@sign:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x28
  1410  000029                     	ds	1
  1411  00002A                     ___fladd@exp2:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x29
  1415  00002A                     	ds	1
  1416  00002B                     ___fladd@exp1:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x2A
  1420  00002B                     	ds	1
  1421  00002C                     ?_Celsius2Kelvin:
  1422                           	opt stack 0
  1423  00002C                     ?___fldiv:
  1424                           	opt stack 0
  1425  00002C                     ?___asfladd:
  1426                           	opt stack 0
  1427  00002C                     ___asfladd@f1p:
  1428                           	opt stack 0
  1429  00002C                     Celsius2Kelvin@tc:
  1430                           	opt stack 0
  1431  00002C                     vscp_writeStdReg@code_1147:
  1432                           	opt stack 0
  1433  00002C                     ___fldiv@f1:
  1434                           	opt stack 0
  1435                           
  1436                           ; 4 bytes @ 0x2B
  1437  00002C                     	ds	1
  1438  00002D                     getVSCPFrame@pvscpclass:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x2C
  1442  00002D                     	ds	1
  1443  00002E                     getVSCPFrame@id:
  1444                           	opt stack 0
  1445  00002E                     ___asfladd@f2:
  1446                           	opt stack 0
  1447                           
  1448                           ; 4 bytes @ 0x2D
  1449  00002E                     	ds	2
  1450  000030                     vscp_writeStdReg@idx:
  1451                           	opt stack 0
  1452  000030                     ___fldiv@f2:
  1453                           	opt stack 0
  1454                           
  1455                           ; 4 bytes @ 0x2F
  1456  000030                     	ds	1
  1457  000031                     vscp_writeStdReg@idx_1148:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x30
  1461  000031                     	ds	1
  1462  000032                     ECANSendMessage@mode:
  1463                           	opt stack 0
  1464  000032                     vscp_writeStdReg@rv:
  1465                           	opt stack 0
  1466  000032                     vscp_getEvent@rv:
  1467                           	opt stack 0
  1468                           
  1469                           ; 1 bytes @ 0x31
  1470  000032                     	ds	1
  1471  000033                     ECANSendMessage@buffers:
  1472                           	opt stack 0
  1473  000033                     vscp_writeStdReg@reg:
  1474                           	opt stack 0
  1475                           
  1476                           ; 1 bytes @ 0x32
  1477  000033                     	ds	1
  1478  000034                     ?_vscp_writeRegister:
  1479                           	opt stack 0
  1480  000034                     ECANSendMessage@j:
  1481                           	opt stack 0
  1482  000034                     vscp_writeRegister@value:
  1483                           	opt stack 0
  1484                           
  1485                           ; 1 bytes @ 0x33
  1486  000034                     	ds	1
  1487  000035                     ECANSendMessage@tempBSEL0:
  1488                           	opt stack 0
  1489  000035                     vscp_writeRegister@reg:
  1490                           	opt stack 0
  1491                           
  1492                           ; 1 bytes @ 0x34
  1493  000035                     	ds	1
  1494  000036                     ECANSendMessage@tempPtr:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x35
  1498  000036                     	ds	2
  1499  000038                     ECANSendMessage@temp:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x37
  1503  000038                     	ds	1
  1504  000039                     ECANSendMessage@i:
  1505                           	opt stack 0
  1506                           
  1507                           ; 1 bytes @ 0x38
  1508  000039                     	ds	1
  1509  00003A                     ECANSendMessage@ptr:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x39
  1513  00003A                     	ds	1
  1514  00003B                     ___fldiv@f3:
  1515                           	opt stack 0
  1516                           
  1517                           ; 4 bytes @ 0x3A
  1518  00003B                     	ds	1
  1519  00003C                     ?_sendCANFrame:
  1520                           	opt stack 0
  1521  00003C                     sendCANFrame@id:
  1522                           	opt stack 0
  1523                           
  1524                           ; 4 bytes @ 0x3B
  1525  00003C                     	ds	3
  1526  00003F                     ___fldiv@cntr:
  1527                           	opt stack 0
  1528                           
  1529                           ; 1 bytes @ 0x3E
  1530  00003F                     	ds	1
  1531  000040                     sendCANFrame@dlc:
  1532                           	opt stack 0
  1533  000040                     ___fldiv@exp:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0x3F
  1537  000040                     	ds	1
  1538  000041                     sendCANFrame@pdata:
  1539                           	opt stack 0
  1540  000041                     ___fldiv@sign:
  1541                           	opt stack 0
  1542                           
  1543                           ; 1 bytes @ 0x40
  1544  000041                     	ds	1
  1545  000042                     ??_eval_poly:
  1546  000042                     ??___fltol:
  1547  000042                     sendCANFrame@rv:
  1548                           	opt stack 0
  1549  000042                     ___asflmul@mp:
  1550                           	opt stack 0
  1551                           
  1552                           ; 1 bytes @ 0x41
  1553  000042                     	ds	1
  1554  000043                     ??_ldexp:
  1555  000043                     vscp_sendEvent@rv:
  1556                           	opt stack 0
  1557  000043                     log@exponent:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x42
  1561  000043                     	ds	1
  1562  000044                     ?_vscp_sendHeartBeat:
  1563                           	opt stack 0
  1564  000044                     ??_vscp_newNodeOnline:
  1565  000044                     vscp_sendHeartBeat@subzone:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x43
  1569  000044                     	ds	1
  1570  000045                     vscp_sendHeartBeat@zone:
  1571                           	opt stack 0
  1572                           
  1573                           ; 1 bytes @ 0x44
  1574  000045                     	ds	1
  1575  000046                     tblptru	equ	0xFF8
  1576                           tblptrh	equ	0xFF7
  1577                           tblptrl	equ	0xFF6
  1578                           tablat	equ	0xFF5
  1579                           prodh	equ	0xFF4
  1580                           prodl	equ	0xFF3
  1581                           intcon	equ	0xFF2
  1582                           postinc0	equ	0xFEE
  1583                           wreg	equ	0xFE8
  1584                           indf1	equ	0xFE7
  1585                           postdec1	equ	0xFE5
  1586                           fsr1h	equ	0xFE2
  1587                           fsr1l	equ	0xFE1
  1588                           indf2	equ	0xFDF
  1589                           postinc2	equ	0xFDE
  1590                           postdec2	equ	0xFDD
  1591                           plusw2	equ	0xFDB
  1592                           fsr2h	equ	0xFDA
  1593                           fsr2l	equ	0xFD9
  1594                           status	equ	0xFD8
  1595                           
  1596                           ; 0 bytes @ 0x45
  1597 ;;
  1598 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1599 ;;
  1600 ;; *************** function _main *****************
  1601 ;; Defined at:
  1602 ;;		line 300 in file "../main.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  i               1   82[BANK0 ] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;		None               void
  1609 ;; Registers used:
  1610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : E/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1616 ;;      Params:         0       0       0       0       0       0       0
  1617 ;;      Locals:         0       1       0       0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0
  1619 ;;      Totals:         0       1       0       0       0       0       0
  1620 ;;Total ram usage:        1 bytes
  1621 ;; Hardware stack levels required when called:    9
  1622 ;; This function calls:
  1623 ;;		_init
  1624 ;;		_vscp_check_pstorage
  1625 ;;		_init_app_eeprom
  1626 ;;		_vscp_init
  1627 ;;		_writeEEPROM
  1628 ;;		_vscp_getEvent
  1629 ;;		_vscp_goActiveState
  1630 ;;		_vscp_handleProbeState
  1631 ;;		_vscp_handleProtocolEvent
  1632 ;;		_handle_sync
  1633 ;;		_vscp_error
  1634 ;;		_doOneSecondWork
  1635 ;;		_vscp_doOneSecondWork
  1636 ;;		_doWork
  1637 ;; This function is called by:
  1638 ;;		Startup code after reset
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           	psect	text0
  1643  003EBC                     __ptext0:
  1644                           	opt stack 0
  1645  003EBC                     _main:
  1646                           	opt stack 22
  1647                           
  1648                           ;main.c: 301: unsigned char i;
  1649                           ;main.c: 303: init();
  1650                           
  1651                           ;incstack = 0
  1652                           ;incstack = 0
  1653  003EBC  ECF7  F027         	call	_init	;wreg free
  1654                           
  1655                           ;main.c: 307: if (!vscp_check_pstorage()) {
  1656  003EC0  EC44  F029         	call	_vscp_check_pstorage	;wreg free
  1657  003EC4  0900               	iorlw	0
  1658  003EC6  B4D8               	btfsc	status,2,c
  1659                           
  1660                           ;main.c: 310: init_app_eeprom();
  1661  003EC8  EC9C  F011         	call	_init_app_eeprom	;wreg free
  1662                           
  1663                           ;main.c: 312: }
  1664                           ;main.c: 314: vscp_init();
  1665  003ECC  EC33  F027         	call	_vscp_init	;wreg free
  1666  003ED0                     l168:
  1667  003ED0  0004               	clrwdt		;# 
  1668                           
  1669                           ;main.c: 320: if ((vscp_initbtncnt > 250) &&
  1670                           ;main.c: 321: (0x01 != vscp_node_state)) {
  1671  003ED2  0EFA               	movlw	250
  1672  003ED4  0100               	movlb	0	; () banked
  1673  003ED6  65B8               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1674  003ED8  D00C               	goto	l11964
  1675                           
  1676                           ; BSR set to: 0
  1677  003EDA  05BB               	decf	_vscp_node_state& (0+255),w,b
  1678  003EDC  E00A               	bz	l11964
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 324: vscp_nickname = 0xff;
  1682  003EDE  69BA               	setf	_vscp_nickname& (0+255),b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 325: writeEEPROM(0x01, 0xff);
  1686  003EE0  6A0F               	clrf	?_writeEEPROM+1,c
  1687  003EE2  0E01               	movlw	1
  1688  003EE4  6E0E               	movwf	?_writeEEPROM,c
  1689  003EE6  0EFF               	movlw	255
  1690  003EE8  6810               	setf	?_writeEEPROM+2,c
  1691  003EEA  EC0D  F029         	call	_writeEEPROM	;wreg free
  1692                           
  1693                           ;main.c: 326: vscp_init();
  1694  003EEE  EC33  F027         	call	_vscp_init	;wreg free
  1695  003EF2                     l11964:
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;main.c: 328: }
  1699                           ;main.c: 332: vscp_imsg.flags = 0;
  1700  003EF2  6BBC               	clrf	_vscp_imsg& (0+255),b
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;main.c: 333: vscp_getEvent();
  1704  003EF4  ECBD  F028         	call	_vscp_getEvent	;wreg free
  1705                           
  1706                           ;main.c: 336: switch (vscp_node_state) {
  1707  003EF8  D024               	goto	l11994
  1708  003EFA                     l11968:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;main.c: 341: if (0xff == vscp_nickname) {
  1712  003EFA  29BA               	incf	_vscp_nickname& (0+255),w,b
  1713  003EFC  E103               	bnz	l11972
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;main.c: 343: vscp_node_state = 0x01;
  1717  003EFE  0E01               	movlw	1
  1718  003F00  6FBB               	movwf	_vscp_node_state& (0+255),b
  1719                           
  1720                           ;main.c: 344: }
  1721  003F02  D02B               	goto	l11996
  1722  003F04                     l11972:
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;main.c: 345: else {
  1726                           ;main.c: 347: vscp_node_state = 0x03;
  1727  003F04  0E03               	movlw	3
  1728  003F06  6FBB               	movwf	_vscp_node_state& (0+255),b
  1729  003F08                     l11974:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 348: vscp_goActiveState();
  1733  003F08  EC78  F029         	call	_vscp_goActiveState	;wreg free
  1734  003F0C  D026               	goto	l11996
  1735  003F0E                     l11976:
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;main.c: 353: vscp_handleProbeState();
  1739  003F0E  ECAD  F020         	call	_vscp_handleProbeState	;wreg free
  1740                           
  1741                           ;main.c: 354: break;
  1742  003F12  D023               	goto	l11996
  1743  003F14                     l177:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 363: if (vscp_imsg.flags & 0x80) {
  1747  003F14  AFBC               	btfss	_vscp_imsg& (0+255),7,b
  1748  003F16  D021               	goto	l11996
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 365: if (0 == vscp_imsg.vscp_class) {
  1752  003F18  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  1753  003F1A  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1754  003F1C  E103               	bnz	l11984
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;main.c: 368: vscp_handleProtocolEvent();
  1758  003F1E  EC1C  F015         	call	_vscp_handleProtocolEvent	;wreg free
  1759                           
  1760                           ;main.c: 370: }
  1761  003F22  D01B               	goto	l11996
  1762  003F24                     l11984:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;main.c: 371: else if ((30 == vscp_imsg.vscp_class) &&
  1766                           ;main.c: 372: (26 == vscp_imsg.vscp_type)) {
  1767  003F24  51BE               	movf	(_vscp_imsg+2)& (0+255),w,b
  1768  003F26  0A1E               	xorlw	30
  1769  003F28  11BF               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1770  003F2A  E117               	bnz	l11996
  1771                           
  1772                           ; BSR set to: 0
  1773  003F2C  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  1774  003F2E  0A1A               	xorlw	26
  1775  003F30  E114               	bnz	l11996
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;main.c: 373: handle_sync();
  1779  003F32  ECA9  F024         	call	_handle_sync	;wreg free
  1780  003F36  D011               	goto	l11996
  1781  003F38                     l11990:
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;main.c: 380: vscp_error();
  1785  003F38  EC62  F02A         	call	_vscp_error	;wreg free
  1786                           
  1787                           ;main.c: 381: break;
  1788  003F3C  D00E               	goto	l11996
  1789  003F3E                     l183:
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;main.c: 384: vscp_node_state = 0x00;
  1793  003F3E  6BBB               	clrf	_vscp_node_state& (0+255),b
  1794                           
  1795                           ;main.c: 385: break;
  1796  003F40  D00C               	goto	l11996
  1797  003F42                     l11994:
  1798  003F42  0100               	movlb	0	; () banked
  1799  003F44  51BB               	movf	_vscp_node_state& (0+255),w,b
  1800                           
  1801                           ; Switch size 1, requested type "space"
  1802                           ; Number of cases is 5, Range of values is 0 to 4
  1803                           ; switch strategies available:
  1804                           ; Name         Instructions Cycles
  1805                           ; simple_byte           16     9 (average)
  1806                           ;	Chosen strategy is simple_byte
  1807  003F46  E0D9               	bz	l11968
  1808  003F48  0A01               	xorlw	1	; case 1
  1809  003F4A  E0E1               	bz	l11976
  1810  003F4C  0A03               	xorlw	3	; case 2
  1811  003F4E  E0DC               	bz	l11974
  1812  003F50  0A01               	xorlw	1	; case 3
  1813  003F52  E0E0               	bz	l177
  1814  003F54  0A07               	xorlw	7	; case 4
  1815  003F56  E0F0               	bz	l11990
  1816  003F58  D7F2               	goto	l183
  1817  003F5A                     l11996:
  1818                           
  1819                           ;main.c: 391: if ( measurement_clock > 1000 ) {
  1820  003F5A  0EE9               	movlw	233
  1821  003F5C  0101               	movlb	1	; () banked
  1822  003F5E  5D12               	subwf	_measurement_clock& (0+255),w,b
  1823  003F60  0E03               	movlw	3
  1824  003F62  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b
  1825  003F64  0E00               	movlw	0
  1826  003F66  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b
  1827  003F68  0E00               	movlw	0
  1828  003F6A  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b
  1829  003F6C  E3B1               	bnc	l168
  1830                           
  1831                           ; BSR set to: 1
  1832                           ;main.c: 393: measurement_clock = 0;
  1833  003F6E  6B12               	clrf	_measurement_clock& (0+255),b
  1834  003F70  6B13               	clrf	(_measurement_clock+1)& (0+255),b
  1835  003F72  6B14               	clrf	(_measurement_clock+2)& (0+255),b
  1836  003F74  6B15               	clrf	(_measurement_clock+3)& (0+255),b
  1837                           
  1838                           ; BSR set to: 1
  1839                           ;main.c: 394: doOneSecondWork();
  1840  003F76  EC13  F01A         	call	_doOneSecondWork	;wreg free
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;main.c: 395: seconds++;
  1844  003F7A  2BB6               	incf	_seconds& (0+255),f,b
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 396: sendTimer++;
  1848  003F7C  2A4A               	incf	_sendTimer,f,c
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;main.c: 400: if (0x03 == vscp_node_state) {
  1852  003F7E  51BB               	movf	_vscp_node_state& (0+255),w,b
  1853  003F80  0A03               	xorlw	3
  1854  003F82  E10D               	bnz	l12020
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;main.c: 401: for (i = 0; i < 6; i++) {
  1858  003F84  6BB2               	clrf	main@i& (0+255),b
  1859  003F86                     l12014:
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;main.c: 402: seconds_temp[i]++;
  1863  003F86  0E0C               	movlw	low _seconds_temp
  1864  003F88  0100               	movlb	0	; () banked
  1865  003F8A  25B2               	addwf	main@i& (0+255),w,b
  1866  003F8C  6ED9               	movwf	fsr2l,c
  1867  003F8E  6ADA               	clrf	fsr2h,c
  1868  003F90  0E01               	movlw	high _seconds_temp
  1869  003F92  22DA               	addwfc	fsr2h,f,c
  1870  003F94  2ADF               	incf	indf2,f,c
  1871                           
  1872                           ; BSR set to: 1
  1873  003F96  2BB2               	incf	main@i& (0+255),f,b
  1874                           
  1875                           ; BSR set to: 0
  1876  003F98  0E05               	movlw	5
  1877  003F9A  65B2               	cpfsgt	main@i& (0+255),b
  1878  003F9C  D7F4               	goto	l12014
  1879  003F9E                     l12020:
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;main.c: 403: }
  1883                           ;main.c: 404: }
  1884                           ;main.c: 406: if (seconds > 60) {
  1885  003F9E  0E3C               	movlw	60
  1886  003FA0  65B6               	cpfsgt	_seconds& (0+255),b
  1887  003FA2  D001               	goto	l12024
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;main.c: 407: seconds = 0;
  1891  003FA4  6BB6               	clrf	_seconds& (0+255),b
  1892  003FA6                     l12024:
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 408: }
  1896                           ;main.c: 411: vscp_doOneSecondWork();
  1897  003FA6  EC7B  F026         	call	_vscp_doOneSecondWork	;wreg free
  1898                           
  1899                           ;main.c: 414: doWork();
  1900  003FAA  ECB4  F009         	call	_doWork	;wreg free
  1901  003FAE  D790               	goto	l168
  1902  003FB0                     __end_of_main:
  1903                           	opt stack 0
  1904                           tblptru	equ	0xFF8
  1905                           tblptrh	equ	0xFF7
  1906                           tblptrl	equ	0xFF6
  1907                           tablat	equ	0xFF5
  1908                           prodh	equ	0xFF4
  1909                           prodl	equ	0xFF3
  1910                           intcon	equ	0xFF2
  1911                           postinc0	equ	0xFEE
  1912                           wreg	equ	0xFE8
  1913                           indf1	equ	0xFE7
  1914                           postdec1	equ	0xFE5
  1915                           fsr1h	equ	0xFE2
  1916                           fsr1l	equ	0xFE1
  1917                           indf2	equ	0xFDF
  1918                           postinc2	equ	0xFDE
  1919                           postdec2	equ	0xFDD
  1920                           plusw2	equ	0xFDB
  1921                           fsr2h	equ	0xFDA
  1922                           fsr2l	equ	0xFD9
  1923                           status	equ	0xFD8
  1924                           
  1925 ;; *************** function _doWork *****************
  1926 ;; Defined at:
  1927 ;;		line 429 in file "../main.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;		None
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;  temp            4   49[BANK1 ] unsigned char 
  1932 ;;  avarage         4   43[BANK1 ] unsigned char 
  1933 ;;  resistance      4   38[BANK1 ] unsigned char 
  1934 ;;  v               4   32[BANK1 ] unsigned char 
  1935 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1936 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1937 ;;  setpoint        2   47[BANK1 ] int 
  1938 ;;  B               2   36[BANK1 ] unsigned short 
  1939 ;;  i               1   53[BANK1 ] unsigned char 
  1940 ;;  j               1   42[BANK1 ] unsigned char 
  1941 ;; Return value:  Size  Location     Type
  1942 ;;		None               void
  1943 ;; Registers used:
  1944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1945 ;; Tracked objects:
  1946 ;;		On entry : F/0
  1947 ;;		On exit  : E/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1950 ;;      Params:         0       0       0       0       0       0       0
  1951 ;;      Locals:         0       0      54       0       0       0       0
  1952 ;;      Temps:          0      14       0       0       0       0       0
  1953 ;;      Totals:         0      14      54       0       0       0       0
  1954 ;;Total ram usage:       68 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; Hardware stack levels required when called:    7
  1957 ;; This function calls:
  1958 ;;		_writeEEPROM
  1959 ;;		_readEEPROM
  1960 ;;		_exp
  1961 ;;		_log
  1962 ;;		_getCalibrationValue
  1963 ;;		_vscp_sendEvent
  1964 ;;		___aldiv
  1965 ;;		___altofl
  1966 ;;		___asfladd
  1967 ;;		___fladd
  1968 ;;		___asfldiv
  1969 ;;		___fldiv
  1970 ;;		___flmul
  1971 ;;		___asflsub
  1972 ;;		___flsub
  1973 ;;		___fltol
  1974 ;;		___lwtofl
  1975 ;;		___wmul
  1976 ;; This function is called by:
  1977 ;;		_main
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text1
  1982  001368                     __ptext1:
  1983                           	opt stack 0
  1984  001368                     _doWork:
  1985                           	opt stack 23
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;main.c: 430: uint8_t i, j;
  1989                           ;main.c: 431: uint16_t B;
  1990                           ;main.c: 432: double avarage;
  1991                           ;main.c: 433: double resistance;
  1992                           ;main.c: 434: double Rinf;
  1993                           ;main.c: 435: double temp;
  1994                           ;main.c: 436: double v;
  1995                           ;main.c: 437: double calVoltage;
  1996                           ;main.c: 438: int setpoint;
  1997                           ;main.c: 440: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1998                           ;main.c: 441: readEEPROM(0xF3));
  1999                           
  2000                           ;incstack = 0
  2001                           ;incstack = 0
  2002  001368  6A0F               	clrf	?_readEEPROM+1,c
  2003  00136A  0EF3               	movlw	243
  2004  00136C  6E0E               	movwf	?_readEEPROM,c
  2005  00136E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2006  001372  0100               	movlb	0	; () banked
  2007  001374  6FA4               	movwf	??_doWork& (0+255),b
  2008  001376  6A0F               	clrf	?_readEEPROM+1,c
  2009  001378  0EF2               	movlw	242
  2010  00137A  6E0E               	movwf	?_readEEPROM,c
  2011  00137C  EC1C  F02A         	call	_readEEPROM	;wreg free
  2012  001380  6E19               	movwf	?___lwtofl+1,c
  2013  001382  0100               	movlb	0	; () banked
  2014  001384  51A4               	movf	??_doWork& (0+255),w,b
  2015  001386  6E18               	movwf	?___lwtofl,c
  2016  001388  EC93  F028         	call	___lwtofl	;wreg free
  2017  00138C  C01B  F16D         	movff	?___lwtofl+3,doWork@calVoltage+3
  2018  001390  C01A  F16C         	movff	?___lwtofl+2,doWork@calVoltage+2
  2019  001394  C019  F16B         	movff	?___lwtofl+1,doWork@calVoltage+1
  2020  001398  C018  F16A         	movff	?___lwtofl,doWork@calVoltage
  2021                           
  2022                           ;main.c: 446: for (i = 0; i < 6; i++) {
  2023  00139C  0101               	movlb	1	; () banked
  2024  00139E  6B9B               	clrf	doWork@i& (0+255),b
  2025  0013A0                     l12034:
  2026                           
  2027                           ; BSR set to: 1
  2028                           ;main.c: 448: if (adc_conversion_flags & 1 << i) {
  2029  0013A0  ECE1  F00D         	call	PL40	;call to abstracted procedure
  2030  0013A4  D002               	goto	u10444
  2031  0013A6                     u10445:
  2032  0013A6  90D8               	bcf	status,0,c
  2033  0013A8  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2034  0013AA                     u10444:
  2035  0013AA  2FA4               	decfsz	??_doWork& (0+255),f,b
  2036  0013AC  D7FC               	goto	u10445
  2037  0013AE  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2038  0013B0  15B3               	andwf	_adc_conversion_flags& (0+255),w,b
  2039  0013B2  E101 D23F          	bz	l12094
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;main.c: 451: avarage = 0;
  2043  0013B6  0101               	movlb	1	; () banked
  2044  0013B8  6B91               	clrf	doWork@avarage& (0+255),b
  2045  0013BA  6B92               	clrf	(doWork@avarage+1)& (0+255),b
  2046  0013BC  6B93               	clrf	(doWork@avarage+2)& (0+255),b
  2047  0013BE  6B94               	clrf	(doWork@avarage+3)& (0+255),b
  2048                           
  2049                           ;main.c: 452: for (j = 0; j < 80; j++) {
  2050  0013C0  6B90               	clrf	doWork@j& (0+255),b
  2051  0013C2                     l12042:
  2052                           
  2053                           ; BSR set to: 1
  2054                           ;main.c: 453: avarage += ((uint16_t) adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  2055  0013C2  0E01               	movlw	high doWork@avarage
  2056  0013C4  6E2D               	movwf	?___asfladd+1,c
  2057  0013C6  0E91               	movlw	low doWork@avarage
  2058  0013C8  6E2C               	movwf	?___asfladd,c
  2059  0013CA  90D8               	bcf	status,0,c
  2060  0013CC  359B               	rlcf	doWork@i& (0+255),w,b
  2061  0013CE  0100               	movlb	0	; () banked
  2062  0013D0  6FA4               	movwf	??_doWork& (0+255),b
  2063  0013D2  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2064  0013D4  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2065  0013D6  0101               	movlb	1	; () banked
  2066  0013D8  5190               	movf	doWork@j& (0+255),w,b
  2067  0013DA  0D0C               	mullw	12
  2068  0013DC  0E9D               	movlw	low (_adc+1)
  2069  0013DE  24F3               	addwf	prodl,w,c
  2070  0013E0  0100               	movlb	0	; () banked
  2071  0013E2  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2072  0013E4  0E01               	movlw	high (_adc+1)
  2073  0013E6  20F4               	addwfc	prodh,w,c
  2074  0013E8  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2075  0013EA  51A4               	movf	??_doWork& (0+255),w,b
  2076  0013EC  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  2077  0013EE  6ED9               	movwf	fsr2l,c
  2078  0013F0  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2079  0013F2  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  2080  0013F4  6EDA               	movwf	fsr2h,c
  2081  0013F6  50DF               	movf	indf2,w,c
  2082  0013F8  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2083  0013FA  90D8               	bcf	status,0,c
  2084  0013FC  0101               	movlb	1	; () banked
  2085  0013FE  359B               	rlcf	doWork@i& (0+255),w,b
  2086  001400  0100               	movlb	0	; () banked
  2087  001402  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2088  001404  6BAA               	clrf	(??_doWork+6)& (0+255),b
  2089  001406  37AA               	rlcf	(??_doWork+6)& (0+255),f,b
  2090  001408  0101               	movlb	1	; () banked
  2091  00140A  5190               	movf	doWork@j& (0+255),w,b
  2092  00140C  0D0C               	mullw	12
  2093  00140E  0E9C               	movlw	low _adc
  2094  001410  24F3               	addwf	prodl,w,c
  2095  001412  0100               	movlb	0	; () banked
  2096  001414  6FAB               	movwf	(??_doWork+7)& (0+255),b
  2097  001416  0E01               	movlw	high _adc
  2098  001418  20F4               	addwfc	prodh,w,c
  2099  00141A  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2100  00141C  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2101  00141E  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  2102  001420  6ED9               	movwf	fsr2l,c
  2103  001422  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2104  001424  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  2105  001426  6EDA               	movwf	fsr2h,c
  2106  001428  50DF               	movf	indf2,w,c
  2107  00142A  6E19               	movwf	?___lwtofl+1,c
  2108  00142C  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2109  00142E  6E18               	movwf	?___lwtofl,c
  2110  001430  EC93  F028         	call	___lwtofl	;wreg free
  2111  001434  C01B  F031         	movff	?___lwtofl+3,?___asfladd+5
  2112  001438  C01A  F030         	movff	?___lwtofl+2,?___asfladd+4
  2113  00143C  C019  F02F         	movff	?___lwtofl+1,?___asfladd+3
  2114  001440  C018  F02E         	movff	?___lwtofl,?___asfladd+2
  2115  001444  ECC6  F026         	call	___asfladd	;wreg free
  2116  001448  0101               	movlb	1	; () banked
  2117  00144A  2B90               	incf	doWork@j& (0+255),f,b
  2118                           
  2119                           ; BSR set to: 1
  2120  00144C  0E4F               	movlw	79
  2121  00144E  6590               	cpfsgt	doWork@j& (0+255),b
  2122  001450  D7B8               	goto	l12042
  2123                           
  2124                           ; BSR set to: 1
  2125                           ;main.c: 457: if (1) {
  2126  001452  0E01               	movlw	high doWork@avarage
  2127  001454  0100               	movlb	0	; () banked
  2128  001456  6F61               	movwf	(?___asfldiv+1)& (0+255),b
  2129  001458  0E91               	movlw	low doWork@avarage
  2130  00145A  6F60               	movwf	?___asfldiv& (0+255),b
  2131  00145C  6B62               	clrf	(?___asfldiv+2)& (0+255),b
  2132  00145E  6B63               	clrf	(?___asfldiv+3)& (0+255),b
  2133  001460  0EA0               	movlw	160
  2134  001462  6F64               	movwf	(?___asfldiv+4)& (0+255),b
  2135  001464  0E42               	movlw	66
  2136  001466  6F65               	movwf	(?___asfldiv+5)& (0+255),b
  2137  001468  ECA1  F026         	call	___asfldiv	;wreg free
  2138                           
  2139                           ;main.c: 465: B = (uint16_t) readEEPROM(2 * i + 0x4F)*256 +
  2140                           ;main.c: 466: readEEPROM(2 * i + 0x50);
  2141  00146C  0101               	movlb	1	; () banked
  2142  00146E  519B               	movf	doWork@i& (0+255),w,b
  2143  001470  0D02               	mullw	2
  2144  001472  0E50               	movlw	80
  2145  001474  24F3               	addwf	prodl,w,c
  2146  001476  6E0E               	movwf	?_readEEPROM,c
  2147  001478  0E00               	movlw	0
  2148  00147A  20F4               	addwfc	prodh,w,c
  2149  00147C  6E0F               	movwf	?_readEEPROM+1,c
  2150  00147E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2151  001482  0100               	movlb	0	; () banked
  2152  001484  6FA4               	movwf	??_doWork& (0+255),b
  2153  001486  0101               	movlb	1	; () banked
  2154  001488  519B               	movf	doWork@i& (0+255),w,b
  2155  00148A  0D02               	mullw	2
  2156  00148C  0E4F               	movlw	79
  2157  00148E  24F3               	addwf	prodl,w,c
  2158  001490  6E0E               	movwf	?_readEEPROM,c
  2159  001492  0E00               	movlw	0
  2160  001494  20F4               	addwfc	prodh,w,c
  2161  001496  6E0F               	movwf	?_readEEPROM+1,c
  2162  001498  EC1C  F02A         	call	_readEEPROM	;wreg free
  2163  00149C  0101               	movlb	1	; () banked
  2164  00149E  6F8B               	movwf	(doWork@B+1)& (0+255),b
  2165  0014A0  0100               	movlb	0	; () banked
  2166  0014A2  51A4               	movf	??_doWork& (0+255),w,b
  2167  0014A4  0101               	movlb	1	; () banked
  2168  0014A6  6F8A               	movwf	doWork@B& (0+255),b
  2169                           
  2170                           ; BSR set to: 1
  2171                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2172  0014A8  0E33               	movlw	51
  2173  0014AA  6E30               	movwf	?___fldiv+4,c
  2174  0014AC  0E13               	movlw	19
  2175  0014AE  6E31               	movwf	?___fldiv+5,c
  2176  0014B0  0E95               	movlw	149
  2177  0014B2  6E32               	movwf	?___fldiv+6,c
  2178  0014B4  0EC3               	movlw	195
  2179  0014B6  6E33               	movwf	?___fldiv+7,c
  2180  0014B8  C18A  F018         	movff	doWork@B,?___lwtofl
  2181  0014BC  C18B  F019         	movff	doWork@B+1,?___lwtofl+1
  2182  0014C0  EC93  F028         	call	___lwtofl	;wreg free
  2183  0014C4  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2184  0014C8  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2185  0014CC  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2186  0014D0  C018  F02C         	movff	?___lwtofl,?___fldiv
  2187  0014D4  ECD6  F022         	call	___fldiv	;wreg free
  2188  0014D8  C02F  F171         	movff	?___fldiv+3,_doWork$2270+3
  2189  0014DC  C02E  F170         	movff	?___fldiv+2,_doWork$2270+2
  2190  0014E0  C02D  F16F         	movff	?___fldiv+1,_doWork$2270+1
  2191  0014E4  C02C  F16E         	movff	?___fldiv,_doWork$2270
  2192                           
  2193                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2194  0014E8  C16E  F099         	movff	_doWork$2270,?_exp
  2195  0014EC  C16F  F09A         	movff	_doWork$2270+1,?_exp+1
  2196  0014F0  C170  F09B         	movff	_doWork$2270+2,?_exp+2
  2197  0014F4  C171  F09C         	movff	_doWork$2270+3,?_exp+3
  2198  0014F8  EC21  F019         	call	_exp	;wreg free
  2199  0014FC  C09C  F175         	movff	?_exp+3,_doWork$2271+3
  2200  001500  C09B  F174         	movff	?_exp+2,_doWork$2271+2
  2201  001504  C09A  F173         	movff	?_exp+1,_doWork$2271+1
  2202  001508  C099  F172         	movff	?_exp,_doWork$2271
  2203                           
  2204                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2205  00150C  C172  F060         	movff	_doWork$2271,?___flmul
  2206  001510  C173  F061         	movff	_doWork$2271+1,?___flmul+1
  2207  001514  C174  F062         	movff	_doWork$2271+2,?___flmul+2
  2208  001518  C175  F063         	movff	_doWork$2271+3,?___flmul+3
  2209  00151C  DB59               	call	PL58	;call to abstracted procedure
  2210  00151E  EC4A  F020         	call	___flmul	;wreg free
  2211  001522  C063  F169         	movff	?___flmul+3,doWork@Rinf+3
  2212  001526  C062  F168         	movff	?___flmul+2,doWork@Rinf+2
  2213  00152A  C061  F167         	movff	?___flmul+1,doWork@Rinf+1
  2214  00152E  C060  F166         	movff	?___flmul,doWork@Rinf
  2215                           
  2216                           ;main.c: 471: v = 5.0 * (double) avarage / 1025;
  2217  001532  0100               	movlb	0	; () banked
  2218  001534  6B64               	clrf	(?___flmul+4)& (0+255),b
  2219  001536  6B65               	clrf	(?___flmul+5)& (0+255),b
  2220  001538  0EA0               	movlw	160
  2221  00153A  6F66               	movwf	(?___flmul+6)& (0+255),b
  2222  00153C  0E40               	movlw	64
  2223  00153E  6F67               	movwf	(?___flmul+7)& (0+255),b
  2224  001540  C191  F060         	movff	doWork@avarage,?___flmul
  2225  001544  C192  F061         	movff	doWork@avarage+1,?___flmul+1
  2226  001548  C193  F062         	movff	doWork@avarage+2,?___flmul+2
  2227  00154C  C194  F063         	movff	doWork@avarage+3,?___flmul+3
  2228  001550  EC4A  F020         	call	___flmul	;wreg free
  2229  001554  C063  F02F         	movff	?___flmul+3,?___fldiv+3
  2230  001558  C062  F02E         	movff	?___flmul+2,?___fldiv+2
  2231  00155C  C061  F02D         	movff	?___flmul+1,?___fldiv+1
  2232  001560  C060  F02C         	movff	?___flmul,?___fldiv
  2233  001564  6A30               	clrf	?___fldiv+4,c
  2234  001566  0E20               	movlw	32
  2235  001568  6E31               	movwf	?___fldiv+5,c
  2236  00156A  0E80               	movlw	128
  2237  00156C  6E32               	movwf	?___fldiv+6,c
  2238  00156E  0E44               	movlw	68
  2239  001570  6E33               	movwf	?___fldiv+7,c
  2240  001572  ECD6  F022         	call	___fldiv	;wreg free
  2241  001576  C02F  F189         	movff	?___fldiv+3,doWork@v+3
  2242  00157A  C02E  F188         	movff	?___fldiv+2,doWork@v+2
  2243  00157E  C02D  F187         	movff	?___fldiv+1,doWork@v+1
  2244  001582  C02C  F186         	movff	?___fldiv,doWork@v
  2245                           
  2246                           ;main.c: 473: resistance = (calVoltage - 10000.0 * v) / v;
  2247  001586  DB24               	call	PL58	;call to abstracted procedure
  2248  001588  C186  F060         	movff	doWork@v,?___flmul
  2249  00158C  C187  F061         	movff	doWork@v+1,?___flmul+1
  2250  001590  C188  F062         	movff	doWork@v+2,?___flmul+2
  2251  001594  C189  F063         	movff	doWork@v+3,?___flmul+3
  2252  001598  EC4A  F020         	call	___flmul	;wreg free
  2253  00159C  C063  F07D         	movff	?___flmul+3,?___flsub+7
  2254  0015A0  C062  F07C         	movff	?___flmul+2,?___flsub+6
  2255  0015A4  C061  F07B         	movff	?___flmul+1,?___flsub+5
  2256  0015A8  C060  F07A         	movff	?___flmul,?___flsub+4
  2257  0015AC  C16A  F076         	movff	doWork@calVoltage,?___flsub
  2258  0015B0  C16B  F077         	movff	doWork@calVoltage+1,?___flsub+1
  2259  0015B4  C16C  F078         	movff	doWork@calVoltage+2,?___flsub+2
  2260  0015B8  C16D  F079         	movff	doWork@calVoltage+3,?___flsub+3
  2261  0015BC  ECBB  F027         	call	___flsub	;wreg free
  2262  0015C0  C079  F02F         	movff	?___flsub+3,?___fldiv+3
  2263  0015C4  C078  F02E         	movff	?___flsub+2,?___fldiv+2
  2264  0015C8  C077  F02D         	movff	?___flsub+1,?___fldiv+1
  2265  0015CC  C076  F02C         	movff	?___flsub,?___fldiv
  2266  0015D0  C186  F030         	movff	doWork@v,?___fldiv+4
  2267  0015D4  C187  F031         	movff	doWork@v+1,?___fldiv+5
  2268  0015D8  C188  F032         	movff	doWork@v+2,?___fldiv+6
  2269  0015DC  C189  F033         	movff	doWork@v+3,?___fldiv+7
  2270  0015E0  ECD6  F022         	call	___fldiv	;wreg free
  2271  0015E4  C02F  F18F         	movff	?___fldiv+3,doWork@resistance+3
  2272  0015E8  C02E  F18E         	movff	?___fldiv+2,doWork@resistance+2
  2273  0015EC  C02D  F18D         	movff	?___fldiv+1,doWork@resistance+1
  2274  0015F0  C02C  F18C         	movff	?___fldiv,doWork@resistance
  2275                           
  2276                           ;main.c: 475: temp = ((double) B) / log(resistance / Rinf);
  2277  0015F4  C166  F030         	movff	doWork@Rinf,?___fldiv+4
  2278  0015F8  C167  F031         	movff	doWork@Rinf+1,?___fldiv+5
  2279  0015FC  C168  F032         	movff	doWork@Rinf+2,?___fldiv+6
  2280  001600  C169  F033         	movff	doWork@Rinf+3,?___fldiv+7
  2281  001604  C18C  F02C         	movff	doWork@resistance,?___fldiv
  2282  001608  C18D  F02D         	movff	doWork@resistance+1,?___fldiv+1
  2283  00160C  C18E  F02E         	movff	doWork@resistance+2,?___fldiv+2
  2284  001610  C18F  F02F         	movff	doWork@resistance+3,?___fldiv+3
  2285  001614  ECD6  F022         	call	___fldiv	;wreg free
  2286  001618  C02F  F084         	movff	?___fldiv+3,?_log+3
  2287  00161C  C02E  F083         	movff	?___fldiv+2,?_log+2
  2288  001620  C02D  F082         	movff	?___fldiv+1,?_log+1
  2289  001624  C02C  F081         	movff	?___fldiv,?_log
  2290  001628  EC30  F01D         	call	_log	;wreg free
  2291  00162C  C084  F179         	movff	?_log+3,_doWork$2272+3
  2292  001630  C083  F178         	movff	?_log+2,_doWork$2272+2
  2293  001634  C082  F177         	movff	?_log+1,_doWork$2272+1
  2294  001638  C081  F176         	movff	?_log,_doWork$2272
  2295                           
  2296                           ;main.c: 475: temp = ((double) B) / log(resistance / Rinf);
  2297  00163C  C18A  F018         	movff	doWork@B,?___lwtofl
  2298  001640  C18B  F019         	movff	doWork@B+1,?___lwtofl+1
  2299  001644  EC93  F028         	call	___lwtofl	;wreg free
  2300  001648  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2301  00164C  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2302  001650  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2303  001654  C018  F02C         	movff	?___lwtofl,?___fldiv
  2304  001658  C176  F030         	movff	_doWork$2272,?___fldiv+4
  2305  00165C  C177  F031         	movff	_doWork$2272+1,?___fldiv+5
  2306  001660  C178  F032         	movff	_doWork$2272+2,?___fldiv+6
  2307  001664  C179  F033         	movff	_doWork$2272+3,?___fldiv+7
  2308  001668  ECD6  F022         	call	___fldiv	;wreg free
  2309  00166C  C02F  F19A         	movff	?___fldiv+3,doWork@temp+3
  2310  001670  C02E  F199         	movff	?___fldiv+2,doWork@temp+2
  2311  001674  C02D  F198         	movff	?___fldiv+1,doWork@temp+1
  2312  001678  C02C  F197         	movff	?___fldiv,doWork@temp
  2313                           
  2314                           ;main.c: 477: temp -= 273.15;
  2315  00167C  0E01               	movlw	high doWork@temp
  2316  00167E  0100               	movlb	0	; () banked
  2317  001680  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  2318  001682  0E97               	movlw	low doWork@temp
  2319  001684  6F7E               	movwf	?___asflsub& (0+255),b
  2320  001686  0E33               	movlw	51
  2321  001688  6F80               	movwf	(?___asflsub+2)& (0+255),b
  2322  00168A  0E93               	movlw	147
  2323  00168C  6F81               	movwf	(?___asflsub+3)& (0+255),b
  2324  00168E  0E88               	movlw	136
  2325  001690  6F82               	movwf	(?___asflsub+4)& (0+255),b
  2326  001692  0E43               	movlw	67
  2327  001694  6F83               	movwf	(?___asflsub+5)& (0+255),b
  2328  001696  EC08  F026         	call	___asflsub	;wreg free
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;main.c: 492: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2332  00169A  0101               	movlb	1	; () banked
  2333  00169C  DA25               	call	PL2	;call to abstracted procedure
  2334  00169E  CFDE F0A4          	movff	postinc2,??_doWork
  2335  0016A2  CFDD F0A5          	movff	postdec2,??_doWork+1
  2336  0016A6  C0A4  F0A6         	movff	??_doWork,??_doWork+2
  2337  0016AA  C0A5  F0A7         	movff	??_doWork+1,??_doWork+3
  2338  0016AE  0E00               	movlw	0
  2339  0016B0  0100               	movlb	0	; () banked
  2340  0016B2  BFA7               	btfsc	(??_doWork+3)& (0+255),7,b
  2341  0016B4  0EFF               	movlw	255
  2342  0016B6  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2343  0016B8  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2344  0016BA  0101               	movlb	1	; () banked
  2345  0016BC  519B               	movf	doWork@i& (0+255),w,b
  2346  0016BE  ECEB  F026         	call	_getCalibrationValue
  2347  0016C2  C012  F0AA         	movff	?_getCalibrationValue,??_doWork+6
  2348  0016C6  C013  F0AB         	movff	?_getCalibrationValue+1,??_doWork+7
  2349  0016CA  0E00               	movlw	0
  2350  0016CC  0100               	movlb	0	; () banked
  2351  0016CE  BFAB               	btfsc	(??_doWork+7)& (0+255),7,b
  2352  0016D0  0EFF               	movlw	255
  2353  0016D2  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2354  0016D4  6FAD               	movwf	(??_doWork+9)& (0+255),b
  2355  0016D6  6B64               	clrf	(?___flmul+4)& (0+255),b
  2356  0016D8  6B65               	clrf	(?___flmul+5)& (0+255),b
  2357  0016DA  0EC8               	movlw	200
  2358  0016DC  6F66               	movwf	(?___flmul+6)& (0+255),b
  2359  0016DE  0E42               	movlw	66
  2360  0016E0  6F67               	movwf	(?___flmul+7)& (0+255),b
  2361  0016E2  C197  F060         	movff	doWork@temp,?___flmul
  2362  0016E6  C198  F061         	movff	doWork@temp+1,?___flmul+1
  2363  0016EA  C199  F062         	movff	doWork@temp+2,?___flmul+2
  2364  0016EE  C19A  F063         	movff	doWork@temp+3,?___flmul+3
  2365  0016F2  EC4A  F020         	call	___flmul	;wreg free
  2366  0016F6  C063  F079         	movff	?___flmul+3,?___fltol+3
  2367  0016FA  C062  F078         	movff	?___flmul+2,?___fltol+2
  2368  0016FE  C061  F077         	movff	?___flmul+1,?___fltol+1
  2369  001702  C060  F076         	movff	?___flmul,?___fltol
  2370  001706  ECCC  F023         	call	___fltol	;wreg free
  2371  00170A  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2372  00170C  2576               	addwf	?___fltol& (0+255),w,b
  2373  00170E  6FAE               	movwf	(??_doWork+10)& (0+255),b
  2374  001710  51AB               	movf	(??_doWork+7)& (0+255),w,b
  2375  001712  2177               	addwfc	(?___fltol+1)& (0+255),w,b
  2376  001714  6FAF               	movwf	(??_doWork+11)& (0+255),b
  2377  001716  51AC               	movf	(??_doWork+8)& (0+255),w,b
  2378  001718  2178               	addwfc	(?___fltol+2)& (0+255),w,b
  2379  00171A  6FB0               	movwf	(??_doWork+12)& (0+255),b
  2380  00171C  51AD               	movf	(??_doWork+9)& (0+255),w,b
  2381  00171E  2179               	addwfc	(?___fltol+3)& (0+255),w,b
  2382  001720  6FB1               	movwf	(??_doWork+13)& (0+255),b
  2383  001722  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2384  001724  25AE               	addwf	(??_doWork+10)& (0+255),w,b
  2385  001726  6F7C               	movwf	?___aldiv& (0+255),b
  2386  001728  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2387  00172A  21AF               	addwfc	(??_doWork+11)& (0+255),w,b
  2388  00172C  6F7D               	movwf	(?___aldiv+1)& (0+255),b
  2389  00172E  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2390  001730  21B0               	addwfc	(??_doWork+12)& (0+255),w,b
  2391  001732  6F7E               	movwf	(?___aldiv+2)& (0+255),b
  2392  001734  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2393  001736  21B1               	addwfc	(??_doWork+13)& (0+255),w,b
  2394  001738  6F7F               	movwf	(?___aldiv+3)& (0+255),b
  2395  00173A  0E02               	movlw	2
  2396  00173C  6F80               	movwf	(?___aldiv+4)& (0+255),b
  2397  00173E  0E00               	movlw	0
  2398  001740  6B81               	clrf	(?___aldiv+5)& (0+255),b
  2399  001742  6B82               	clrf	(?___aldiv+6)& (0+255),b
  2400  001744  6B83               	clrf	(?___aldiv+7)& (0+255),b
  2401  001746  EC0F  F021         	call	___aldiv	;wreg free
  2402  00174A  0101               	movlb	1	; () banked
  2403  00174C  D9CD               	call	PL2	;call to abstracted procedure
  2404  00174E  C07C  FFDE         	movff	?___aldiv,postinc2
  2405  001752  C07D  FFDD         	movff	?___aldiv+1,postdec2
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;main.c: 513: }
  2409                           ;main.c: 515: if (current_temp[ i ] <
  2410                           ;main.c: 516: (int16_t) (readEEPROM(2 * i + 0x7F)*256 +
  2411                           ;main.c: 517: readEEPROM(2 * i + 0x80))) {
  2412                           
  2413                           ;main.c: 494: }
  2414  001756  519B               	movf	doWork@i& (0+255),w,b
  2415  001758  0D02               	mullw	2
  2416  00175A  0E7F               	movlw	127
  2417  00175C  24F3               	addwf	prodl,w,c
  2418  00175E  6E0E               	movwf	?_readEEPROM,c
  2419  001760  0E00               	movlw	0
  2420  001762  20F4               	addwfc	prodh,w,c
  2421  001764  6E0F               	movwf	?_readEEPROM+1,c
  2422  001766  EC1C  F02A         	call	_readEEPROM	;wreg free
  2423  00176A  0100               	movlb	0	; () banked
  2424  00176C  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2425  00176E  6BA4               	clrf	??_doWork& (0+255),b
  2426  001770  0101               	movlb	1	; () banked
  2427  001772  519B               	movf	doWork@i& (0+255),w,b
  2428  001774  0D02               	mullw	2
  2429  001776  0E80               	movlw	128
  2430  001778  24F3               	addwf	prodl,w,c
  2431  00177A  6E0E               	movwf	?_readEEPROM,c
  2432  00177C  0E00               	movlw	0
  2433  00177E  20F4               	addwfc	prodh,w,c
  2434  001780  6E0F               	movwf	?_readEEPROM+1,c
  2435  001782  EC1C  F02A         	call	_readEEPROM	;wreg free
  2436  001786  0100               	movlb	0	; () banked
  2437  001788  27A4               	addwf	??_doWork& (0+255),f,b
  2438  00178A  0E00               	movlw	0
  2439  00178C  23A5               	addwfc	(??_doWork+1)& (0+255),f,b
  2440  00178E  0101               	movlb	1	; () banked
  2441  001790  D9AB               	call	PL2	;call to abstracted procedure
  2442  001792  CFDE F0A6          	movff	postinc2,??_doWork+2
  2443  001796  CFDD F0A7          	movff	postdec2,??_doWork+3
  2444  00179A  0100               	movlb	0	; () banked
  2445  00179C  DA22               	call	PL60	;call to abstracted procedure
  2446  00179E  E20F               	bc	l201
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;main.c: 519: writeEEPROM(2 * i + 0x7F, current_temp[ i ] >> 8);
  2450  0017A0  D9AC               	call	PL6	;call to abstracted procedure
  2451  0017A2  0E7F               	movlw	127
  2452  0017A4  D9B2               	call	PL8	;call to abstracted procedure
  2453  0017A6  D9A0               	call	PL2	;call to abstracted procedure
  2454  0017A8  D9F3               	call	PL30	;call to abstracted procedure
  2455  0017AA  EC0D  F029         	call	_writeEEPROM	;wreg free
  2456                           
  2457                           ;main.c: 520: writeEEPROM(2 * i + 0x80, 0xff & current_temp[ i ]);
  2458  0017AE  D9A5               	call	PL6	;call to abstracted procedure
  2459  0017B0  0E80               	movlw	128
  2460  0017B2  D9AB               	call	PL8	;call to abstracted procedure
  2461  0017B4  D999               	call	PL2	;call to abstracted procedure
  2462  0017B6  50DF               	movf	indf2,w,c
  2463  0017B8  6E10               	movwf	?_writeEEPROM+2,c
  2464  0017BA  EC0D  F029         	call	_writeEEPROM	;wreg free
  2465  0017BE                     l201:
  2466                           
  2467                           ;main.c: 521: }
  2468                           ;main.c: 524: if (current_temp[ i ] >
  2469                           ;main.c: 525: (int16_t) (readEEPROM(2 * i + 0x8B)*256 +
  2470                           ;main.c: 526: readEEPROM(2 * i + 0x8C))) {
  2471  0017BE  0101               	movlb	1	; () banked
  2472  0017C0  D993               	call	PL2	;call to abstracted procedure
  2473  0017C2  CFDE F0A4          	movff	postinc2,??_doWork
  2474  0017C6  CFDD F0A5          	movff	postdec2,??_doWork+1
  2475  0017CA  519B               	movf	doWork@i& (0+255),w,b
  2476  0017CC  0D02               	mullw	2
  2477  0017CE  0E8B               	movlw	139
  2478  0017D0  24F3               	addwf	prodl,w,c
  2479  0017D2  6E0E               	movwf	?_readEEPROM,c
  2480  0017D4  0E00               	movlw	0
  2481  0017D6  20F4               	addwfc	prodh,w,c
  2482  0017D8  6E0F               	movwf	?_readEEPROM+1,c
  2483  0017DA  EC1C  F02A         	call	_readEEPROM	;wreg free
  2484  0017DE  0100               	movlb	0	; () banked
  2485  0017E0  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2486  0017E2  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2487  0017E4  0101               	movlb	1	; () banked
  2488  0017E6  519B               	movf	doWork@i& (0+255),w,b
  2489  0017E8  0D02               	mullw	2
  2490  0017EA  0E8C               	movlw	140
  2491  0017EC  24F3               	addwf	prodl,w,c
  2492  0017EE  6E0E               	movwf	?_readEEPROM,c
  2493  0017F0  0E00               	movlw	0
  2494  0017F2  20F4               	addwfc	prodh,w,c
  2495  0017F4  6E0F               	movwf	?_readEEPROM+1,c
  2496  0017F6  EC1C  F02A         	call	_readEEPROM	;wreg free
  2497  0017FA  0100               	movlb	0	; () banked
  2498  0017FC  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2499  0017FE  0E00               	movlw	0
  2500  001800  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2501  001802  D9EF               	call	PL60	;call to abstracted procedure
  2502  001804  E20F               	bc	l12092
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;main.c: 528: writeEEPROM(2 * i + 0x8B, current_temp[ i ] >> 8);
  2506  001806  D979               	call	PL6	;call to abstracted procedure
  2507  001808  0E8B               	movlw	139
  2508  00180A  D97F               	call	PL8	;call to abstracted procedure
  2509  00180C  D96D               	call	PL2	;call to abstracted procedure
  2510  00180E  D9C0               	call	PL30	;call to abstracted procedure
  2511  001810  EC0D  F029         	call	_writeEEPROM	;wreg free
  2512                           
  2513                           ;main.c: 529: writeEEPROM(2 * i + 0x8C, 0xff & current_temp[ i ]);
  2514  001814  D972               	call	PL6	;call to abstracted procedure
  2515  001816  0E8C               	movlw	140
  2516  001818  D978               	call	PL8	;call to abstracted procedure
  2517  00181A  D966               	call	PL2	;call to abstracted procedure
  2518  00181C  50DF               	movf	indf2,w,c
  2519  00181E  6E10               	movwf	?_writeEEPROM+2,c
  2520  001820  EC0D  F029         	call	_writeEEPROM	;wreg free
  2521  001824                     l12092:
  2522                           
  2523                           ;main.c: 530: }
  2524                           ;main.c: 533: adc_conversion_flags &= ~(1 << i);
  2525  001824  D9CE               	call	PL40	;call to abstracted procedure
  2526  001826  D002               	goto	u10494
  2527  001828                     u10495:
  2528  001828  90D8               	bcf	status,0,c
  2529  00182A  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2530  00182C                     u10494:
  2531  00182C  2FA4               	decfsz	??_doWork& (0+255),f,b
  2532  00182E  D7FC               	goto	u10495
  2533  001830  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2534  001832  17B3               	andwf	_adc_conversion_flags& (0+255),f,b
  2535  001834                     l12094:
  2536                           
  2537                           ; BSR set to: 0
  2538  001834  0101               	movlb	1	; () banked
  2539  001836  2B9B               	incf	doWork@i& (0+255),f,b
  2540                           
  2541                           ; BSR set to: 1
  2542  001838  0E05               	movlw	5
  2543  00183A  659B               	cpfsgt	doWork@i& (0+255),b
  2544  00183C  D5B1               	goto	l12034
  2545                           
  2546                           ; BSR set to: 1
  2547                           ;main.c: 535: }
  2548                           ;main.c: 536: }
  2549                           ;main.c: 539: if (0x03 == vscp_node_state) {
  2550  00183E  0100               	movlb	0	; () banked
  2551  001840  51BB               	movf	_vscp_node_state& (0+255),w,b
  2552  001842  0A03               	xorlw	3
  2553  001844  E001 D14F          	bnz	l224
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;main.c: 542: for (i = 0; i < 6; i++) {
  2557  001848  0101               	movlb	1	; () banked
  2558  00184A  6B9B               	clrf	doWork@i& (0+255),b
  2559  00184C                     l12106:
  2560                           
  2561                           ; BSR set to: 1
  2562                           ;main.c: 545: if (low_alarm & 1 << i) {
  2563  00184C  D9BA               	call	PL40	;call to abstracted procedure
  2564  00184E  D002               	goto	u10524
  2565  001850                     u10525:
  2566  001850  90D8               	bcf	status,0,c
  2567  001852  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2568  001854                     u10524:
  2569  001854  2FA4               	decfsz	??_doWork& (0+255),f,b
  2570  001856  D7FC               	goto	u10525
  2571  001858  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2572  00185A  15B5               	andwf	_low_alarm& (0+255),w,b
  2573  00185C  E03A               	bz	l12114
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;main.c: 548: setpoint =
  2577                           ;main.c: 549: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2578                           ;main.c: 550: readEEPROM(2 * i + 0x5C) +
  2579                           ;main.c: 551: readEEPROM(i + 0x97)*100);
  2580  00185E  D94D               	call	PL6	;call to abstracted procedure
  2581  001860  0E5C               	movlw	92
  2582  001862  25A4               	addwf	??_doWork& (0+255),w,b
  2583  001864  6E0E               	movwf	?_readEEPROM,c
  2584  001866  0E00               	movlw	0
  2585  001868  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2586  00186A  6E0F               	movwf	?_readEEPROM+1,c
  2587  00186C  EC1C  F02A         	call	_readEEPROM	;wreg free
  2588  001870  0100               	movlb	0	; () banked
  2589  001872  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2590  001874  90D8               	bcf	status,0,c
  2591  001876  0101               	movlb	1	; () banked
  2592  001878  359B               	rlcf	doWork@i& (0+255),w,b
  2593  00187A  0100               	movlb	0	; () banked
  2594  00187C  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2595  00187E  6BA8               	clrf	(??_doWork+4)& (0+255),b
  2596  001880  37A8               	rlcf	(??_doWork+4)& (0+255),f,b
  2597  001882  0E5B               	movlw	91
  2598  001884  25A7               	addwf	(??_doWork+3)& (0+255),w,b
  2599  001886  6E0E               	movwf	?_readEEPROM,c
  2600  001888  0E00               	movlw	0
  2601  00188A  21A8               	addwfc	(??_doWork+4)& (0+255),w,b
  2602  00188C  6E0F               	movwf	?_readEEPROM+1,c
  2603  00188E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2604  001892  0100               	movlb	0	; () banked
  2605  001894  6FAA               	movwf	(??_doWork+6)& (0+255),b
  2606  001896  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2607  001898  0E97               	movlw	151
  2608  00189A  D93E               	call	PL10	;call to abstracted procedure
  2609  00189C  EC1C  F02A         	call	_readEEPROM	;wreg free
  2610  0018A0  0D64               	mullw	100
  2611  0018A2  0100               	movlb	0	; () banked
  2612  0018A4  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2613  0018A6  24F3               	addwf	prodl,w,c
  2614  0018A8  6FAB               	movwf	(??_doWork+7)& (0+255),b
  2615  0018AA  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2616  0018AC  20F4               	addwfc	prodh,w,c
  2617  0018AE  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2618  0018B0  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2619  0018B2  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  2620  0018B4  0101               	movlb	1	; () banked
  2621  0018B6  6F95               	movwf	doWork@setpoint& (0+255),b
  2622  0018B8  0100               	movlb	0	; () banked
  2623  0018BA  0E00               	movlw	0
  2624  0018BC  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  2625  0018BE  0101               	movlb	1	; () banked
  2626  0018C0  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  2627                           
  2628                           ; BSR set to: 1
  2629                           ;main.c: 556: if (current_temp[ i ] > setpoint) {
  2630  0018C2  D912               	call	PL2	;call to abstracted procedure
  2631  0018C4  CFDE F0A4          	movff	postinc2,??_doWork
  2632  0018C8  D955               	call	PL22	;call to abstracted procedure
  2633  0018CA  E261               	bc	l208
  2634  0018CC                     l12112:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;main.c: 559: low_alarm &= ~(1 << i);
  2638  0018CC  D96E               	call	PL38	;call to abstracted procedure
  2639  0018CE  17B5               	andwf	_low_alarm& (0+255),f,b
  2640  0018D0  D05E               	goto	l208
  2641  0018D2                     l12114:
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;main.c: 564: else {
  2645                           ;main.c: 568: setpoint =
  2646                           ;main.c: 569: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2647                           ;main.c: 570: readEEPROM(2 * i + 0x5C));
  2648  0018D2  0101               	movlb	1	; () banked
  2649  0018D4  519B               	movf	doWork@i& (0+255),w,b
  2650  0018D6  0D02               	mullw	2
  2651  0018D8  0E5C               	movlw	92
  2652  0018DA  24F3               	addwf	prodl,w,c
  2653  0018DC  6E0E               	movwf	?_readEEPROM,c
  2654  0018DE  0E00               	movlw	0
  2655  0018E0  20F4               	addwfc	prodh,w,c
  2656  0018E2  6E0F               	movwf	?_readEEPROM+1,c
  2657  0018E4  EC1C  F02A         	call	_readEEPROM	;wreg free
  2658  0018E8  0100               	movlb	0	; () banked
  2659  0018EA  6FA4               	movwf	??_doWork& (0+255),b
  2660  0018EC  0101               	movlb	1	; () banked
  2661  0018EE  519B               	movf	doWork@i& (0+255),w,b
  2662  0018F0  0D02               	mullw	2
  2663  0018F2  0E5B               	movlw	91
  2664  0018F4  24F3               	addwf	prodl,w,c
  2665  0018F6  6E0E               	movwf	?_readEEPROM,c
  2666  0018F8  0E00               	movlw	0
  2667  0018FA  20F4               	addwfc	prodh,w,c
  2668  0018FC  6E0F               	movwf	?_readEEPROM+1,c
  2669  0018FE  EC1C  F02A         	call	_readEEPROM	;wreg free
  2670  001902  D911               	call	PL12	;call to abstracted procedure
  2671                           
  2672                           ; BSR set to: 1
  2673                           ;main.c: 572: if (current_temp[ i ] < setpoint) {
  2674  001904  D8F1               	call	PL2	;call to abstracted procedure
  2675  001906  D91C               	call	PL14	;call to abstracted procedure
  2676  001908  E242               	bc	l208
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;main.c: 575: low_alarm |= (1 << i);
  2680  00190A  C19B  F0A4         	movff	doWork@i,??_doWork
  2681  00190E  0E01               	movlw	1
  2682  001910  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2683  001912  2BA4               	incf	??_doWork& (0+255),f,b
  2684  001914  D002               	goto	u10574
  2685  001916                     u10575:
  2686  001916  90D8               	bcf	status,0,c
  2687  001918  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2688  00191A                     u10574:
  2689  00191A  2FA4               	decfsz	??_doWork& (0+255),f,b
  2690  00191C  D7FC               	goto	u10575
  2691  00191E  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2692  001920  13B5               	iorwf	_low_alarm& (0+255),f,b
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;main.c: 580: vscp_alarmstatus |= 1;
  2696  001922  804B               	bsf	_vscp_alarmstatus,0,c
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 583: if (readEEPROM(i + 0x43) & (1<<3)) {
  2700  001924  0E43               	movlw	67
  2701  001926  D8F8               	call	PL10	;call to abstracted procedure
  2702  001928  EC1C  F02A         	call	_readEEPROM	;wreg free
  2703  00192C  0100               	movlb	0	; () banked
  2704  00192E  6FA4               	movwf	??_doWork& (0+255),b
  2705  001930  A7A4               	btfss	??_doWork& (0+255),3,b
  2706  001932  D02D               	goto	l208
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;main.c: 585: vscp_omsg.vscp_class = 1;
  2710  001934  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2711                           
  2712                           ;main.c: 586: vscp_omsg.vscp_type = 2;
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;main.c: 587: vscp_omsg.priority = 0x00;
  2716                           
  2717                           ;main.c: 588: vscp_omsg.flags = 0x80 + 3;
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;main.c: 591: if (readEEPROM(i + 0x43) & (1<<5)) {
  2721  001936  D916               	call	PL20	;call to abstracted procedure
  2722  001938  D8EF               	call	PL10	;call to abstracted procedure
  2723  00193A  EC1C  F02A         	call	_readEEPROM	;wreg free
  2724  00193E  0100               	movlb	0	; () banked
  2725  001940  6FA4               	movwf	??_doWork& (0+255),b
  2726  001942  ABA4               	btfss	??_doWork& (0+255),5,b
  2727  001944  D012               	goto	l12136
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;main.c: 593: if (readEEPROM(i + 0x43) & (1<<6)) {
  2731  001946  0E43               	movlw	67
  2732  001948  D8E7               	call	PL10	;call to abstracted procedure
  2733  00194A  EC1C  F02A         	call	_readEEPROM	;wreg free
  2734  00194E  0100               	movlb	0	; () banked
  2735  001950  6FA4               	movwf	??_doWork& (0+255),b
  2736  001952  ADA4               	btfss	??_doWork& (0+255),6,b
  2737  001954  D005               	goto	l12134
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 594: vscp_omsg.vscp_class = 30;
  2741  001956  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2742  001958  0E1E               	movlw	30
  2743  00195A  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2744                           
  2745                           ;main.c: 595: vscp_omsg.vscp_type = 5;
  2746  00195C  0E05               	movlw	5
  2747  00195E  D004               	goto	L1
  2748  001960                     l12134:
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;main.c: 597: else {
  2752                           ;main.c: 598: vscp_omsg.vscp_class = 30;
  2753  001960  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2754  001962  0E1E               	movlw	30
  2755  001964  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2756                           
  2757                           ;main.c: 599: vscp_omsg.vscp_type = 6;
  2758  001966  0E06               	movlw	6
  2759  001968                     L1:
  2760  001968  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  2761  00196A                     l12136:
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 600: }
  2765                           ;main.c: 602: }
  2766                           ;main.c: 604: vscp_omsg.data[ 0 ] = i;
  2767  00196A  C19B  F0CF         	movff	doWork@i,_vscp_omsg+5
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;main.c: 605: vscp_omsg.data[ 1 ] =
  2771                           ;main.c: 606: readEEPROM(2 * i + 0x73);
  2772  00196E  D8C5               	call	PL6	;call to abstracted procedure
  2773  001970  D948               	call	PL78	;call to abstracted procedure
  2774  001972  EC1C  F02A         	call	_readEEPROM	;wreg free
  2775  001976  0100               	movlb	0	; () banked
  2776  001978  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;main.c: 607: vscp_omsg.data[ 2 ] =
  2780                           ;main.c: 608: readEEPROM(2 * i + 0x74);
  2781  00197A  D8BF               	call	PL6	;call to abstracted procedure
  2782  00197C  D93B               	call	PL76	;call to abstracted procedure
  2783  00197E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2784  001982  0100               	movlb	0	; () banked
  2785  001984  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 611: if (!vscp_sendEvent()) {
  2789  001986  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  2790  00198A  0900               	iorlw	0
  2791  00198C  E09F               	bz	l12112
  2792  00198E                     l208:
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;main.c: 615: }
  2796                           ;main.c: 616: }
  2797                           ;main.c: 617: }
  2798                           ;main.c: 618: }
  2799                           ;main.c: 621: if ( high_alarm & (1 << i ) ) {
  2800  00198E  C19B  F0A4         	movff	doWork@i,??_doWork
  2801  001992  0E01               	movlw	1
  2802  001994  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2803  001996  2BA4               	incf	??_doWork& (0+255),f,b
  2804  001998  D002               	goto	u10624
  2805  00199A                     u10625:
  2806  00199A  90D8               	bcf	status,0,c
  2807  00199C  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2808  00199E                     u10624:
  2809  00199E  2FA4               	decfsz	??_doWork& (0+255),f,b
  2810  0019A0  D7FC               	goto	u10625
  2811  0019A2  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2812  0019A4  15B4               	andwf	_high_alarm& (0+255),w,b
  2813  0019A6  E03A               	bz	l12152
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 625: setpoint =
  2817                           ;main.c: 626: (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2818                           ;main.c: 627: readEEPROM(2 * i + 0x68) -
  2819                           ;main.c: 628: readEEPROM(i + 0x97)*100);
  2820  0019A8  D8A8               	call	PL6	;call to abstracted procedure
  2821  0019AA  0E67               	movlw	103
  2822  0019AC  25A4               	addwf	??_doWork& (0+255),w,b
  2823  0019AE  6E0E               	movwf	?_readEEPROM,c
  2824  0019B0  0E00               	movlw	0
  2825  0019B2  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2826  0019B4  6E0F               	movwf	?_readEEPROM+1,c
  2827  0019B6  EC1C  F02A         	call	_readEEPROM	;wreg free
  2828  0019BA  0100               	movlb	0	; () banked
  2829  0019BC  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2830  0019BE  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2831  0019C0  90D8               	bcf	status,0,c
  2832  0019C2  0101               	movlb	1	; () banked
  2833  0019C4  359B               	rlcf	doWork@i& (0+255),w,b
  2834  0019C6  0100               	movlb	0	; () banked
  2835  0019C8  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2836  0019CA  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2837  0019CC  37A9               	rlcf	(??_doWork+5)& (0+255),f,b
  2838  0019CE  0E68               	movlw	104
  2839  0019D0  25A8               	addwf	(??_doWork+4)& (0+255),w,b
  2840  0019D2  6E0E               	movwf	?_readEEPROM,c
  2841  0019D4  0E00               	movlw	0
  2842  0019D6  21A9               	addwfc	(??_doWork+5)& (0+255),w,b
  2843  0019D8  6E0F               	movwf	?_readEEPROM+1,c
  2844  0019DA  EC1C  F02A         	call	_readEEPROM	;wreg free
  2845  0019DE  0100               	movlb	0	; () banked
  2846  0019E0  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2847  0019E2  0E00               	movlw	0
  2848  0019E4  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2849  0019E6  0E97               	movlw	151
  2850  0019E8  D897               	call	PL10	;call to abstracted procedure
  2851  0019EA  EC1C  F02A         	call	_readEEPROM	;wreg free
  2852  0019EE  6E12               	movwf	?___wmul,c
  2853  0019F0  6A13               	clrf	?___wmul+1,c
  2854  0019F2  6815               	setf	?___wmul+3,c
  2855  0019F4  0E9C               	movlw	156
  2856  0019F6  6E14               	movwf	?___wmul+2,c
  2857  0019F8  EC4C  F028         	call	___wmul	;wreg free
  2858  0019FC  5012               	movf	?___wmul,w,c
  2859  0019FE  0100               	movlb	0	; () banked
  2860  001A00  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  2861  001A02  0101               	movlb	1	; () banked
  2862  001A04  6F95               	movwf	doWork@setpoint& (0+255),b
  2863  001A06  5013               	movf	?___wmul+1,w,c
  2864  001A08  0100               	movlb	0	; () banked
  2865  001A0A  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  2866  001A0C  0101               	movlb	1	; () banked
  2867  001A0E  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  2868                           
  2869                           ; BSR set to: 1
  2870                           ;main.c: 631: if (current_temp[ i ] < setpoint) {
  2871  001A10  D86B               	call	PL2	;call to abstracted procedure
  2872  001A12  D896               	call	PL14	;call to abstracted procedure
  2873  001A14  E263               	bc	l12184
  2874  001A16                     l12150:
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;main.c: 634: high_alarm &= ~(1 << i);
  2878  001A16  D8C9               	call	PL38	;call to abstracted procedure
  2879  001A18  17B4               	andwf	_high_alarm& (0+255),f,b
  2880  001A1A  D060               	goto	l12184
  2881  001A1C                     l12152:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 639: else {
  2885                           ;main.c: 644: setpoint = (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2886                           ;main.c: 645: readEEPROM(2 * i + 0x68));
  2887  001A1C  0101               	movlb	1	; () banked
  2888  001A1E  519B               	movf	doWork@i& (0+255),w,b
  2889  001A20  0D02               	mullw	2
  2890  001A22  0E68               	movlw	104
  2891  001A24  24F3               	addwf	prodl,w,c
  2892  001A26  6E0E               	movwf	?_readEEPROM,c
  2893  001A28  0E00               	movlw	0
  2894  001A2A  20F4               	addwfc	prodh,w,c
  2895  001A2C  6E0F               	movwf	?_readEEPROM+1,c
  2896  001A2E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2897  001A32  0100               	movlb	0	; () banked
  2898  001A34  6FA4               	movwf	??_doWork& (0+255),b
  2899  001A36  0101               	movlb	1	; () banked
  2900  001A38  519B               	movf	doWork@i& (0+255),w,b
  2901  001A3A  0D02               	mullw	2
  2902  001A3C  0E67               	movlw	103
  2903  001A3E  24F3               	addwf	prodl,w,c
  2904  001A40  6E0E               	movwf	?_readEEPROM,c
  2905  001A42  0E00               	movlw	0
  2906  001A44  20F4               	addwfc	prodh,w,c
  2907  001A46  6E0F               	movwf	?_readEEPROM+1,c
  2908  001A48  EC1C  F02A         	call	_readEEPROM	;wreg free
  2909  001A4C  D86C               	call	PL12	;call to abstracted procedure
  2910                           
  2911                           ; BSR set to: 1
  2912                           ;main.c: 647: if (current_temp[ i ] > setpoint) {
  2913  001A4E  D84C               	call	PL2	;call to abstracted procedure
  2914  001A50  CFDE F0A4          	movff	postinc2,??_doWork
  2915  001A54  D88F               	call	PL22	;call to abstracted procedure
  2916  001A56  E242               	bc	l12184
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 650: high_alarm |= (1 << i);
  2920  001A58  C19B  F0A4         	movff	doWork@i,??_doWork
  2921  001A5C  0E01               	movlw	1
  2922  001A5E  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2923  001A60  2BA4               	incf	??_doWork& (0+255),f,b
  2924  001A62  D002               	goto	u10674
  2925  001A64                     u10675:
  2926  001A64  90D8               	bcf	status,0,c
  2927  001A66  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2928  001A68                     u10674:
  2929  001A68  2FA4               	decfsz	??_doWork& (0+255),f,b
  2930  001A6A  D7FC               	goto	u10675
  2931  001A6C  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2932  001A6E  13B4               	iorwf	_high_alarm& (0+255),f,b
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;main.c: 656: vscp_alarmstatus |= 2;
  2936  001A70  824B               	bsf	_vscp_alarmstatus,1,c
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;main.c: 659: if (readEEPROM(i + 0x43) & (1<<4)) {
  2940  001A72  0E43               	movlw	67
  2941  001A74  D851               	call	PL10	;call to abstracted procedure
  2942  001A76  EC1C  F02A         	call	_readEEPROM	;wreg free
  2943  001A7A  0100               	movlb	0	; () banked
  2944  001A7C  6FA4               	movwf	??_doWork& (0+255),b
  2945  001A7E  A9A4               	btfss	??_doWork& (0+255),4,b
  2946  001A80  D02D               	goto	l12184
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;main.c: 661: vscp_omsg.vscp_class = 1;
  2950  001A82  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2951                           
  2952                           ;main.c: 662: vscp_omsg.vscp_type = 2;
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;main.c: 663: vscp_omsg.priority = 0x00;
  2956                           
  2957                           ;main.c: 664: vscp_omsg.flags = 0x80 + 3;
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;main.c: 666: if (readEEPROM(i + 0x43) & (1<<5)) {
  2961  001A84  D86F               	call	PL20	;call to abstracted procedure
  2962  001A86  D848               	call	PL10	;call to abstracted procedure
  2963  001A88  EC1C  F02A         	call	_readEEPROM	;wreg free
  2964  001A8C  0100               	movlb	0	; () banked
  2965  001A8E  6FA4               	movwf	??_doWork& (0+255),b
  2966  001A90  ABA4               	btfss	??_doWork& (0+255),5,b
  2967  001A92  D012               	goto	l12174
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;main.c: 667: if (readEEPROM(i + 0x43) & (1<<6)) {
  2971  001A94  0E43               	movlw	67
  2972  001A96  D840               	call	PL10	;call to abstracted procedure
  2973  001A98  EC1C  F02A         	call	_readEEPROM	;wreg free
  2974  001A9C  0100               	movlb	0	; () banked
  2975  001A9E  6FA4               	movwf	??_doWork& (0+255),b
  2976  001AA0  ADA4               	btfss	??_doWork& (0+255),6,b
  2977  001AA2  D005               	goto	l12172
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;main.c: 668: vscp_omsg.vscp_class = 30;
  2981  001AA4  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2982  001AA6  0E1E               	movlw	30
  2983  001AA8  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2984                           
  2985                           ;main.c: 669: vscp_omsg.vscp_type = 6;
  2986  001AAA  0E06               	movlw	6
  2987  001AAC  D004               	goto	L2
  2988  001AAE                     l12172:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;main.c: 671: vscp_omsg.vscp_class = 30;
  2992  001AAE  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2993  001AB0  0E1E               	movlw	30
  2994  001AB2  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2995                           
  2996                           ;main.c: 672: vscp_omsg.vscp_type = 5;
  2997  001AB4  0E05               	movlw	5
  2998  001AB6                     L2:
  2999  001AB6  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3000  001AB8                     l12174:
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;main.c: 673: }
  3004                           ;main.c: 674: }
  3005                           ;main.c: 676: vscp_omsg.data[ 0 ] = i;
  3006  001AB8  C19B  F0CF         	movff	doWork@i,_vscp_omsg+5
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;main.c: 677: vscp_omsg.data[ 1 ] =
  3010                           ;main.c: 678: readEEPROM(2 * i +
  3011                           ;main.c: 679: 0x73);
  3012  001ABC  D81E               	call	PL6	;call to abstracted procedure
  3013  001ABE  D8A1               	call	PL78	;call to abstracted procedure
  3014  001AC0  EC1C  F02A         	call	_readEEPROM	;wreg free
  3015  001AC4  0100               	movlb	0	; () banked
  3016  001AC6  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;main.c: 680: vscp_omsg.data[ 2 ] =
  3020                           ;main.c: 681: readEEPROM(2 * i +
  3021                           ;main.c: 682: 0x74);
  3022  001AC8  D818               	call	PL6	;call to abstracted procedure
  3023  001ACA  D894               	call	PL76	;call to abstracted procedure
  3024  001ACC  EC1C  F02A         	call	_readEEPROM	;wreg free
  3025  001AD0  0100               	movlb	0	; () banked
  3026  001AD2  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;main.c: 685: if (!vscp_sendEvent()) {
  3030  001AD4  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  3031  001AD8  0900               	iorlw	0
  3032  001ADA  E09D               	bz	l12150
  3033  001ADC                     l12184:
  3034                           
  3035                           ; BSR set to: 0
  3036  001ADC  0101               	movlb	1	; () banked
  3037  001ADE  2B9B               	incf	doWork@i& (0+255),f,b
  3038  001AE0  0E05               	movlw	5
  3039  001AE2  659B               	cpfsgt	doWork@i& (0+255),b
  3040  001AE4  D6B3               	goto	l12106
  3041  001AE6                     l224:
  3042  001AE6  0012               	return	
  3043  001AE8                     __end_of_doWork:
  3044                           	opt stack 0
  3045  001AE8                     PL2:
  3046                           	opt stack 23
  3047  001AE8  519B               	movf	doWork@i& (0+255),w,b
  3048  001AEA  0D02               	mullw	2
  3049  001AEC  0E00               	movlw	low _current_temp
  3050  001AEE  24F3               	addwf	prodl,w,c
  3051  001AF0  6ED9               	movwf	fsr2l,c
  3052  001AF2  0E01               	movlw	high _current_temp
  3053  001AF4  20F4               	addwfc	prodh,w,c
  3054  001AF6  6EDA               	movwf	fsr2h,c
  3055  001AF8  0012               	return	
  3056  001AFA                     __end_ofPL2:
  3057                           	opt stack 0
  3058  001AFA                     PL6:
  3059                           	opt stack 23
  3060  001AFA  90D8               	bcf	status,0,c
  3061  001AFC  0101               	movlb	1	; () banked
  3062  001AFE  359B               	rlcf	doWork@i& (0+255),w,b
  3063  001B00  0100               	movlb	0	; () banked
  3064  001B02  6FA4               	movwf	??_doWork& (0+255),b
  3065  001B04  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3066  001B06  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3067  001B08  0012               	return	
  3068  001B0A                     __end_ofPL6:
  3069                           	opt stack 0
  3070  001B0A                     PL8:
  3071                           	opt stack 23
  3072  001B0A  25A4               	addwf	??_doWork& (0+255),w,b
  3073  001B0C  6E0E               	movwf	?_writeEEPROM,c
  3074  001B0E  0E00               	movlw	0
  3075  001B10  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3076  001B12  6E0F               	movwf	?_writeEEPROM+1,c
  3077  001B14  0101               	movlb	1	; () banked
  3078  001B16  0012               	return	
  3079  001B18                     __end_ofPL8:
  3080                           	opt stack 0
  3081  001B18                     PL10:
  3082                           	opt stack 23
  3083  001B18  0101               	movlb	1	; () banked
  3084  001B1A  259B               	addwf	doWork@i& (0+255),w,b
  3085  001B1C  6E0E               	movwf	?_readEEPROM,c
  3086  001B1E  6A0F               	clrf	?_readEEPROM+1,c
  3087  001B20  0E00               	movlw	0
  3088  001B22  220F               	addwfc	?_readEEPROM+1,f,c
  3089  001B24  0C00               	retlw	0
  3090  001B26                     __end_ofPL10:
  3091                           	opt stack 0
  3092  001B26                     PL12:
  3093                           	opt stack 23
  3094  001B26  0100               	movlb	0	; () banked
  3095  001B28  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3096  001B2A  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3097  001B2C  51A4               	movf	??_doWork& (0+255),w,b
  3098  001B2E  25A5               	addwf	(??_doWork+1)& (0+255),w,b
  3099  001B30  0101               	movlb	1	; () banked
  3100  001B32  6F95               	movwf	doWork@setpoint& (0+255),b
  3101  001B34  0100               	movlb	0	; () banked
  3102  001B36  0E00               	movlw	0
  3103  001B38  21A6               	addwfc	(??_doWork+2)& (0+255),w,b
  3104  001B3A  0101               	movlb	1	; () banked
  3105  001B3C  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  3106  001B3E  0012               	return	
  3107  001B40                     __end_ofPL12:
  3108                           	opt stack 0
  3109  001B40                     PL14:
  3110                           	opt stack 23
  3111  001B40  CFDE F0A4          	movff	postinc2,??_doWork
  3112  001B44  CFDD F0A5          	movff	postdec2,??_doWork+1
  3113  001B48  0100               	movlb	0	; () banked
  3114  001B4A  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3115  001B4C  0A80               	xorlw	128
  3116  001B4E  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3117  001B50  0101               	movlb	1	; () banked
  3118  001B52  5195               	movf	doWork@setpoint& (0+255),w,b
  3119  001B54  0100               	movlb	0	; () banked
  3120  001B56  5DA4               	subwf	??_doWork& (0+255),w,b
  3121  001B58  0101               	movlb	1	; () banked
  3122  001B5A  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  3123  001B5C  0A80               	xorlw	128
  3124  001B5E  0100               	movlb	0	; () banked
  3125  001B60  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3126  001B62  0012               	return	
  3127  001B64                     __end_ofPL14:
  3128                           	opt stack 0
  3129  001B64                     PL20:
  3130                           	opt stack 23
  3131  001B64  0E01               	movlw	1
  3132  001B66  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3133  001B68  0E02               	movlw	2
  3134  001B6A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3135  001B6C  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  3136  001B6E  0E83               	movlw	131
  3137  001B70  6FCA               	movwf	_vscp_omsg& (0+255),b
  3138  001B72  0C43               	retlw	67
  3139  001B74                     __end_ofPL20:
  3140                           	opt stack 0
  3141  001B74                     PL22:
  3142                           	opt stack 23
  3143  001B74  CFDD F0A5          	movff	postdec2,??_doWork+1
  3144  001B78  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  3145  001B7A  0A80               	xorlw	128
  3146  001B7C  0100               	movlb	0	; () banked
  3147  001B7E  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3148  001B80  51A4               	movf	??_doWork& (0+255),w,b
  3149  001B82  0101               	movlb	1	; () banked
  3150  001B84  5D95               	subwf	doWork@setpoint& (0+255),w,b
  3151  001B86  0100               	movlb	0	; () banked
  3152  001B88  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3153  001B8A  0A80               	xorlw	128
  3154  001B8C  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3155  001B8E  0012               	return	
  3156  001B90                     __end_ofPL22:
  3157                           	opt stack 0
  3158  001B90                     PL30:
  3159                           	opt stack 23
  3160  001B90  CFDE F0A6          	movff	postinc2,??_doWork+2
  3161  001B94  CFDD F0A7          	movff	postdec2,??_doWork+3
  3162  001B98  C0A7  F0A6         	movff	??_doWork+3,??_doWork+2
  3163  001B9C  0100               	movlb	0	; () banked
  3164  001B9E  6BA7               	clrf	(??_doWork+3)& (0+255),b
  3165  001BA0  BFA6               	btfsc	(??_doWork+2)& (0+255),7,b
  3166  001BA2  69A7               	setf	(??_doWork+3)& (0+255),b
  3167  001BA4  51A6               	movf	(??_doWork+2)& (0+255),w,b
  3168  001BA6  6E10               	movwf	?_writeEEPROM+2,c
  3169  001BA8  0012               	return	
  3170  001BAA                     __end_ofPL30:
  3171                           	opt stack 0
  3172  001BAA                     PL38:
  3173                           	opt stack 23
  3174  001BAA  C19B  F0A4         	movff	doWork@i,??_doWork
  3175  001BAE  0E01               	movlw	1
  3176  001BB0  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3177  001BB2  2BA4               	incf	??_doWork& (0+255),f,b
  3178  001BB4  D002               	goto	u10554
  3179  001BB6                     u10555:
  3180  001BB6  90D8               	bcf	status,0,c
  3181  001BB8  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3182  001BBA                     u10554:
  3183  001BBA  2FA4               	decfsz	??_doWork& (0+255),f,b
  3184  001BBC  D7FC               	goto	u10555
  3185  001BBE  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  3186  001BC0  0012               	return	
  3187  001BC2                     __end_ofPL38:
  3188                           	opt stack 0
  3189  001BC2                     PL40:
  3190                           	opt stack 23
  3191  001BC2  C19B  F0A4         	movff	doWork@i,??_doWork
  3192  001BC6  0E01               	movlw	1
  3193  001BC8  0100               	movlb	0	; () banked
  3194  001BCA  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3195  001BCC  2BA4               	incf	??_doWork& (0+255),f,b
  3196  001BCE  0C01               	retlw	1
  3197  001BD0                     __end_ofPL40:
  3198                           	opt stack 0
  3199  001BD0                     PL58:
  3200                           	opt stack 23
  3201  001BD0  0100               	movlb	0	; () banked
  3202  001BD2  6B64               	clrf	(?___flmul+4)& (0+255),b
  3203  001BD4  0E40               	movlw	64
  3204  001BD6  6F65               	movwf	(?___flmul+5)& (0+255),b
  3205  001BD8  0E1C               	movlw	28
  3206  001BDA  6F66               	movwf	(?___flmul+6)& (0+255),b
  3207  001BDC  0E46               	movlw	70
  3208  001BDE  6F67               	movwf	(?___flmul+7)& (0+255),b
  3209  001BE0  0C46               	retlw	70
  3210  001BE2                     __end_ofPL58:
  3211                           	opt stack 0
  3212  001BE2                     PL60:
  3213                           	opt stack 23
  3214  001BE2  51A7               	movf	(??_doWork+3)& (0+255),w,b
  3215  001BE4  0A80               	xorlw	128
  3216  001BE6  6FA8               	movwf	(??_doWork+4)& (0+255),b
  3217  001BE8  51A4               	movf	??_doWork& (0+255),w,b
  3218  001BEA  5DA6               	subwf	(??_doWork+2)& (0+255),w,b
  3219  001BEC  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3220  001BEE  0A80               	xorlw	128
  3221  001BF0  59A8               	subwfb	(??_doWork+4)& (0+255),w,b
  3222  001BF2  0012               	return	
  3223  001BF4                     __end_ofPL60:
  3224                           	opt stack 0
  3225  001BF4                     PL76:
  3226                           	opt stack 23
  3227  001BF4  0E74               	movlw	116
  3228  001BF6  25A4               	addwf	??_doWork& (0+255),w,b
  3229  001BF8  6E0E               	movwf	?_readEEPROM,c
  3230  001BFA  0E00               	movlw	0
  3231  001BFC  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3232  001BFE  6E0F               	movwf	?_readEEPROM+1,c
  3233  001C00  0012               	return	
  3234  001C02                     __end_ofPL76:
  3235                           	opt stack 0
  3236  001C02                     PL78:
  3237                           	opt stack 23
  3238  001C02  0E73               	movlw	115
  3239  001C04  25A4               	addwf	??_doWork& (0+255),w,b
  3240  001C06  6E0E               	movwf	?_readEEPROM,c
  3241  001C08  0E00               	movlw	0
  3242  001C0A  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3243  001C0C  6E0F               	movwf	?_readEEPROM+1,c
  3244  001C0E  0012               	return	
  3245  001C10                     __end_ofPL78:
  3246                           	opt stack 0
  3247                           tblptru	equ	0xFF8
  3248                           tblptrh	equ	0xFF7
  3249                           tblptrl	equ	0xFF6
  3250                           tablat	equ	0xFF5
  3251                           prodh	equ	0xFF4
  3252                           prodl	equ	0xFF3
  3253                           intcon	equ	0xFF2
  3254                           postinc0	equ	0xFEE
  3255                           wreg	equ	0xFE8
  3256                           indf1	equ	0xFE7
  3257                           postdec1	equ	0xFE5
  3258                           fsr1h	equ	0xFE2
  3259                           fsr1l	equ	0xFE1
  3260                           indf2	equ	0xFDF
  3261                           postinc2	equ	0xFDE
  3262                           postdec2	equ	0xFDD
  3263                           plusw2	equ	0xFDB
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function ___lwtofl *****************
  3269 ;; Defined at:
  3270 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  c               2   23[COMRAM] unsigned int 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  4   23[COMRAM] unsigned int 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3284 ;;      Params:         4       0       0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0
  3287 ;;      Totals:         4       0       0       0       0       0       0
  3288 ;;Total ram usage:        4 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    3
  3291 ;; This function calls:
  3292 ;;		___flpack
  3293 ;; This function is called by:
  3294 ;;		_doWork
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text2
  3299  005126                     __ptext2:
  3300                           	opt stack 0
  3301  005126                     ___lwtofl:
  3302                           	opt stack 26
  3303                           
  3304                           ;incstack = 0
  3305                           ;incstack = 0
  3306  005126  C018  F00E         	movff	___lwtofl@c,?___flpack
  3307  00512A  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  3308  00512E  6A10               	clrf	?___flpack+2,c
  3309  005130  6A11               	clrf	?___flpack+3,c
  3310  005132  0E96               	movlw	150
  3311  005134  6E12               	movwf	?___flpack+4,c
  3312  005136  0E00               	movlw	0
  3313  005138  6A13               	clrf	?___flpack+5,c
  3314  00513A  EC6D  F021         	call	___flpack	;wreg free
  3315  00513E  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  3316  005142  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  3317  005146  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  3318  00514A  C00E  F018         	movff	?___flpack,?___lwtofl
  3319  00514E  0012               	return	
  3320  005150                     __end_of___lwtofl:
  3321                           	opt stack 0
  3322                           tblptru	equ	0xFF8
  3323                           tblptrh	equ	0xFF7
  3324                           tblptrl	equ	0xFF6
  3325                           tablat	equ	0xFF5
  3326                           prodh	equ	0xFF4
  3327                           prodl	equ	0xFF3
  3328                           intcon	equ	0xFF2
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           indf1	equ	0xFE7
  3332                           postdec1	equ	0xFE5
  3333                           fsr1h	equ	0xFE2
  3334                           fsr1l	equ	0xFE1
  3335                           indf2	equ	0xFDF
  3336                           postinc2	equ	0xFDE
  3337                           postdec2	equ	0xFDD
  3338                           plusw2	equ	0xFDB
  3339                           fsr2h	equ	0xFDA
  3340                           fsr2l	equ	0xFD9
  3341                           status	equ	0xFD8
  3342                           
  3343 ;; *************** function ___asfldiv *****************
  3344 ;; Defined at:
  3345 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;  f1p             2    0[BANK0 ] PTR 
  3348 ;;		 -> doWork@avarage(4), 
  3349 ;;  f2              4    2[BANK0 ] PTR 
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  4    0[BANK0 ] PTR 
  3354 ;; Registers used:
  3355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : F/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3361 ;;      Params:         0       6       0       0       0       0       0
  3362 ;;      Locals:         0       0       0       0       0       0       0
  3363 ;;      Temps:          0       0       0       0       0       0       0
  3364 ;;      Totals:         0       6       0       0       0       0       0
  3365 ;;Total ram usage:        6 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    4
  3368 ;; This function calls:
  3369 ;;		___fldiv
  3370 ;; This function is called by:
  3371 ;;		_doWork
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text3
  3376  004D42                     __ptext3:
  3377                           	opt stack 0
  3378  004D42                     ___asfldiv:
  3379                           	opt stack 25
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;	Return value of ___asfldiv is never used
  3383                           
  3384                           ;incstack = 0
  3385                           ;incstack = 0
  3386  004D42  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3387  004D46  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3388  004D4A  CFDE F02C          	movff	postinc2,?___fldiv
  3389  004D4E  CFDE F02D          	movff	postinc2,?___fldiv+1
  3390  004D52  CFDE F02E          	movff	postinc2,?___fldiv+2
  3391  004D56  CFDE F02F          	movff	postinc2,?___fldiv+3
  3392  004D5A  C062  F030         	movff	___asfldiv@f2,?___fldiv+4
  3393  004D5E  C063  F031         	movff	___asfldiv@f2+1,?___fldiv+5
  3394  004D62  C064  F032         	movff	___asfldiv@f2+2,?___fldiv+6
  3395  004D66  C065  F033         	movff	___asfldiv@f2+3,?___fldiv+7
  3396  004D6A  ECD6  F022         	call	___fldiv	;wreg free
  3397  004D6E  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3398  004D72  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3399  004D76  C02C  FFDE         	movff	?___fldiv,postinc2
  3400  004D7A  C02D  FFDE         	movff	?___fldiv+1,postinc2
  3401  004D7E  C02E  FFDE         	movff	?___fldiv+2,postinc2
  3402  004D82  C02F  FFDD         	movff	?___fldiv+3,postdec2
  3403  004D86  06D9               	decf	fsr2l,f,c
  3404  004D88  06D9               	decf	fsr2l,f,c
  3405  004D8A  0012               	return	
  3406  004D8C                     __end_of___asfldiv:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           intcon	equ	0xFF2
  3415                           postinc0	equ	0xFEE
  3416                           wreg	equ	0xFE8
  3417                           indf1	equ	0xFE7
  3418                           postdec1	equ	0xFE5
  3419                           fsr1h	equ	0xFE2
  3420                           fsr1l	equ	0xFE1
  3421                           indf2	equ	0xFDF
  3422                           postinc2	equ	0xFDE
  3423                           postdec2	equ	0xFDD
  3424                           plusw2	equ	0xFDB
  3425                           fsr2h	equ	0xFDA
  3426                           fsr2l	equ	0xFD9
  3427                           status	equ	0xFD8
  3428                           
  3429 ;; *************** function ___asfladd *****************
  3430 ;; Defined at:
  3431 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  f1p             2   43[COMRAM] PTR 
  3434 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  3435 ;;  f2              4   45[COMRAM] PTR 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  4   43[COMRAM] PTR 
  3440 ;; Registers used:
  3441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3447 ;;      Params:         6       0       0       0       0       0       0
  3448 ;;      Locals:         0       0       0       0       0       0       0
  3449 ;;      Temps:          0       0       0       0       0       0       0
  3450 ;;      Totals:         6       0       0       0       0       0       0
  3451 ;;Total ram usage:        6 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    4
  3454 ;; This function calls:
  3455 ;;		___fladd
  3456 ;; This function is called by:
  3457 ;;		_doWork
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text4
  3462  004D8C                     __ptext4:
  3463                           	opt stack 0
  3464  004D8C                     ___asfladd:
  3465                           	opt stack 25
  3466                           
  3467                           ;	Return value of ___asfladd is never used
  3468                           
  3469                           ;incstack = 0
  3470                           ;incstack = 0
  3471  004D8C  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3472  004D90  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3473  004D94  CFDE F01D          	movff	postinc2,?___fladd
  3474  004D98  CFDE F01E          	movff	postinc2,?___fladd+1
  3475  004D9C  CFDE F01F          	movff	postinc2,?___fladd+2
  3476  004DA0  CFDE F020          	movff	postinc2,?___fladd+3
  3477  004DA4  C02E  F021         	movff	___asfladd@f2,?___fladd+4
  3478  004DA8  C02F  F022         	movff	___asfladd@f2+1,?___fladd+5
  3479  004DAC  C030  F023         	movff	___asfladd@f2+2,?___fladd+6
  3480  004DB0  C031  F024         	movff	___asfladd@f2+3,?___fladd+7
  3481  004DB4  EC85  F01C         	call	___fladd	;wreg free
  3482  004DB8  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3483  004DBC  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3484  004DC0  C01D  FFDE         	movff	?___fladd,postinc2
  3485  004DC4  C01E  FFDE         	movff	?___fladd+1,postinc2
  3486  004DC8  C01F  FFDE         	movff	?___fladd+2,postinc2
  3487  004DCC  C020  FFDD         	movff	?___fladd+3,postdec2
  3488  004DD0  06D9               	decf	fsr2l,f,c
  3489  004DD2  06D9               	decf	fsr2l,f,c
  3490  004DD4  0012               	return	
  3491  004DD6                     __end_of___asfladd:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           postinc0	equ	0xFEE
  3501                           wreg	equ	0xFE8
  3502                           indf1	equ	0xFE7
  3503                           postdec1	equ	0xFE5
  3504                           fsr1h	equ	0xFE2
  3505                           fsr1l	equ	0xFE1
  3506                           indf2	equ	0xFDF
  3507                           postinc2	equ	0xFDE
  3508                           postdec2	equ	0xFDD
  3509                           plusw2	equ	0xFDB
  3510                           fsr2h	equ	0xFDA
  3511                           fsr2l	equ	0xFD9
  3512                           status	equ	0xFD8
  3513                           
  3514 ;; *************** function ___aldiv *****************
  3515 ;; Defined at:
  3516 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;  dividend        4   28[BANK0 ] long 
  3519 ;;  divisor         4   32[BANK0 ] long 
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;  quotient        4   38[BANK0 ] long 
  3522 ;;  sign            1   37[BANK0 ] unsigned char 
  3523 ;;  counter         1   36[BANK0 ] unsigned char 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  4   28[BANK0 ] long 
  3526 ;; Registers used:
  3527 ;;		wreg, status,2, status,0
  3528 ;; Tracked objects:
  3529 ;;		On entry : F/0
  3530 ;;		On exit  : F/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3533 ;;      Params:         0       8       0       0       0       0       0
  3534 ;;      Locals:         0       6       0       0       0       0       0
  3535 ;;      Temps:          0       0       0       0       0       0       0
  3536 ;;      Totals:         0      14       0       0       0       0       0
  3537 ;;Total ram usage:       14 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    2
  3540 ;; This function calls:
  3541 ;;		Nothing
  3542 ;; This function is called by:
  3543 ;;		_doWork
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           	psect	text5
  3548  00421E                     __ptext5:
  3549                           	opt stack 0
  3550  00421E                     ___aldiv:
  3551                           	opt stack 27
  3552                           
  3553                           ; BSR set to: 0
  3554                           
  3555                           ;incstack = 0
  3556                           ;incstack = 0
  3557  00421E  6B85               	clrf	___aldiv@sign& (0+255),b
  3558  004220  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3559  004222  D00A               	goto	l11458
  3560                           
  3561                           ; BSR set to: 0
  3562  004224  1F83               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3563  004226  1F82               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3564  004228  1F81               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3565  00422A  6D80               	negf	___aldiv@divisor& (0+255),b
  3566  00422C  0E00               	movlw	0
  3567  00422E  2381               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3568  004230  2382               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3569  004232  2383               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3570                           
  3571                           ; BSR set to: 0
  3572  004234  0E01               	movlw	1
  3573  004236  6F85               	movwf	___aldiv@sign& (0+255),b
  3574  004238                     l11458:
  3575                           
  3576                           ; BSR set to: 0
  3577  004238  AF7F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3578  00423A  D00A               	goto	l11464
  3579                           
  3580                           ; BSR set to: 0
  3581  00423C  1F7F               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3582  00423E  1F7E               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3583  004240  1F7D               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3584  004242  6D7C               	negf	___aldiv@dividend& (0+255),b
  3585  004244  0E00               	movlw	0
  3586  004246  237D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3587  004248  237E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3588  00424A  237F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3589                           
  3590                           ; BSR set to: 0
  3591  00424C  0E01               	movlw	1
  3592  00424E  1B85               	xorwf	___aldiv@sign& (0+255),f,b
  3593  004250                     l11464:
  3594                           
  3595                           ; BSR set to: 0
  3596  004250  6B86               	clrf	___aldiv@quotient& (0+255),b
  3597  004252  6B87               	clrf	(___aldiv@quotient+1)& (0+255),b
  3598  004254  6B88               	clrf	(___aldiv@quotient+2)& (0+255),b
  3599  004256  6B89               	clrf	(___aldiv@quotient+3)& (0+255),b
  3600                           
  3601                           ; BSR set to: 0
  3602  004258  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3603  00425A  1180               	iorwf	___aldiv@divisor& (0+255),w,b
  3604  00425C  1181               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3605  00425E  1182               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3606  004260  E029               	bz	l11486
  3607                           
  3608                           ; BSR set to: 0
  3609  004262  0E01               	movlw	1
  3610  004264  6F84               	movwf	___aldiv@counter& (0+255),b
  3611  004266  D006               	goto	l11472
  3612  004268                     l11470:
  3613                           
  3614                           ; BSR set to: 0
  3615  004268  90D8               	bcf	status,0,c
  3616  00426A  3780               	rlcf	___aldiv@divisor& (0+255),f,b
  3617  00426C  3781               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3618  00426E  3782               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3619  004270  3783               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3620  004272  2B84               	incf	___aldiv@counter& (0+255),f,b
  3621  004274                     l11472:
  3622                           
  3623                           ; BSR set to: 0
  3624  004274  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3625  004276  D7F8               	goto	l11470
  3626  004278                     l11474:
  3627                           
  3628                           ; BSR set to: 0
  3629  004278  90D8               	bcf	status,0,c
  3630  00427A  3786               	rlcf	___aldiv@quotient& (0+255),f,b
  3631  00427C  3787               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3632  00427E  3788               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3633  004280  3789               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3634                           
  3635                           ; BSR set to: 0
  3636  004282  5180               	movf	___aldiv@divisor& (0+255),w,b
  3637  004284  5D7C               	subwf	___aldiv@dividend& (0+255),w,b
  3638  004286  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3639  004288  597D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3640  00428A  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3641  00428C  597E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3642  00428E  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3643  004290  597F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3644  004292  E309               	bnc	l11482
  3645                           
  3646                           ; BSR set to: 0
  3647  004294  5180               	movf	___aldiv@divisor& (0+255),w,b
  3648  004296  5F7C               	subwf	___aldiv@dividend& (0+255),f,b
  3649  004298  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3650  00429A  5B7D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3651  00429C  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3652  00429E  5B7E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3653  0042A0  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3654  0042A2  5B7F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3655                           
  3656                           ; BSR set to: 0
  3657  0042A4  8186               	bsf	___aldiv@quotient& (0+255),0,b
  3658  0042A6                     l11482:
  3659                           
  3660                           ; BSR set to: 0
  3661  0042A6  90D8               	bcf	status,0,c
  3662  0042A8  3383               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3663  0042AA  3382               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3664  0042AC  3381               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3665  0042AE  3380               	rrcf	___aldiv@divisor& (0+255),f,b
  3666                           
  3667                           ; BSR set to: 0
  3668  0042B0  2F84               	decfsz	___aldiv@counter& (0+255),f,b
  3669  0042B2  D7E2               	goto	l11474
  3670  0042B4                     l11486:
  3671                           
  3672                           ; BSR set to: 0
  3673  0042B4  5185               	movf	___aldiv@sign& (0+255),w,b
  3674  0042B6  E008               	bz	l11490
  3675                           
  3676                           ; BSR set to: 0
  3677  0042B8  1F89               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3678  0042BA  1F88               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3679  0042BC  1F87               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3680  0042BE  6D86               	negf	___aldiv@quotient& (0+255),b
  3681  0042C0  0E00               	movlw	0
  3682  0042C2  2387               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3683  0042C4  2388               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3684  0042C6  2389               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3685  0042C8                     l11490:
  3686                           
  3687                           ; BSR set to: 0
  3688  0042C8  C086  F07C         	movff	___aldiv@quotient,?___aldiv
  3689  0042CC  C087  F07D         	movff	___aldiv@quotient+1,?___aldiv+1
  3690  0042D0  C088  F07E         	movff	___aldiv@quotient+2,?___aldiv+2
  3691  0042D4  C089  F07F         	movff	___aldiv@quotient+3,?___aldiv+3
  3692                           
  3693                           ; BSR set to: 0
  3694  0042D8  0012               	return	
  3695  0042DA                     __end_of___aldiv:
  3696                           	opt stack 0
  3697                           tblptru	equ	0xFF8
  3698                           tblptrh	equ	0xFF7
  3699                           tblptrl	equ	0xFF6
  3700                           tablat	equ	0xFF5
  3701                           prodh	equ	0xFF4
  3702                           prodl	equ	0xFF3
  3703                           intcon	equ	0xFF2
  3704                           postinc0	equ	0xFEE
  3705                           wreg	equ	0xFE8
  3706                           indf1	equ	0xFE7
  3707                           postdec1	equ	0xFE5
  3708                           fsr1h	equ	0xFE2
  3709                           fsr1l	equ	0xFE1
  3710                           indf2	equ	0xFDF
  3711                           postinc2	equ	0xFDE
  3712                           postdec2	equ	0xFDD
  3713                           plusw2	equ	0xFDB
  3714                           fsr2h	equ	0xFDA
  3715                           fsr2l	equ	0xFD9
  3716                           status	equ	0xFD8
  3717                           
  3718 ;; *************** function _getCalibrationValue *****************
  3719 ;; Defined at:
  3720 ;;		line 872 in file "../main.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;  i               1    wreg     unsigned char 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  i               1   24[COMRAM] unsigned char 
  3725 ;;  cal             2   22[COMRAM] short 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  2   17[COMRAM] short 
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : F/1
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3735 ;;      Params:         2       0       0       0       0       0       0
  3736 ;;      Locals:         3       0       0       0       0       0       0
  3737 ;;      Temps:          3       0       0       0       0       0       0
  3738 ;;      Totals:         8       0       0       0       0       0       0
  3739 ;;Total ram usage:        8 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    3
  3742 ;; This function calls:
  3743 ;;		_readEEPROM
  3744 ;; This function is called by:
  3745 ;;		_doWork
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           	psect	text6
  3750  004DD6                     __ptext6:
  3751                           	opt stack 0
  3752  004DD6                     _getCalibrationValue:
  3753                           	opt stack 26
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;incstack = 0
  3757                           ;incstack = 0
  3758                           ;getCalibrationValue@i stored from wreg
  3759  004DD6  CFE8 F019          	movff	wreg,getCalibrationValue@i
  3760                           
  3761                           ; BSR set to: 1
  3762                           ;main.c: 873: int16_t cal;
  3763                           ;main.c: 875: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3764                           ;main.c: 876: readEEPROM(2 * i + 0x9F);
  3765  004DDA  5019               	movf	getCalibrationValue@i,w,c
  3766  004DDC  0D02               	mullw	2
  3767  004DDE  0E9F               	movlw	159
  3768  004DE0  24F3               	addwf	prodl,w,c
  3769  004DE2  6E0E               	movwf	?_readEEPROM,c
  3770  004DE4  0E00               	movlw	0
  3771  004DE6  20F4               	addwfc	prodh,w,c
  3772  004DE8  6E0F               	movwf	?_readEEPROM+1,c
  3773  004DEA  EC1C  F02A         	call	_readEEPROM	;wreg free
  3774  004DEE  6E14               	movwf	??_getCalibrationValue& (0+255),c
  3775  004DF0  5019               	movf	getCalibrationValue@i,w,c
  3776  004DF2  0D02               	mullw	2
  3777  004DF4  0E9E               	movlw	158
  3778  004DF6  24F3               	addwf	prodl,w,c
  3779  004DF8  6E0E               	movwf	?_readEEPROM,c
  3780  004DFA  0E00               	movlw	0
  3781  004DFC  20F4               	addwfc	prodh,w,c
  3782  004DFE  6E0F               	movwf	?_readEEPROM+1,c
  3783  004E00  EC1C  F02A         	call	_readEEPROM	;wreg free
  3784  004E04  6E16               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3785  004E06  6A15               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3786  004E08  5014               	movf	??_getCalibrationValue,w,c
  3787  004E0A  2415               	addwf	??_getCalibrationValue+1,w,c
  3788  004E0C  6E17               	movwf	getCalibrationValue@cal,c
  3789  004E0E  0E00               	movlw	0
  3790  004E10  2016               	addwfc	??_getCalibrationValue+2,w,c
  3791  004E12  6E18               	movwf	getCalibrationValue@cal+1,c
  3792                           
  3793                           ;main.c: 878: return cal;
  3794  004E14  C017  F012         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3795  004E18  C018  F013         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3796  004E1C  0012               	return	
  3797  004E1E                     __end_of_getCalibrationValue:
  3798                           	opt stack 0
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           intcon	equ	0xFF2
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           indf1	equ	0xFE7
  3809                           postdec1	equ	0xFE5
  3810                           fsr1h	equ	0xFE2
  3811                           fsr1l	equ	0xFE1
  3812                           indf2	equ	0xFDF
  3813                           postinc2	equ	0xFDE
  3814                           postdec2	equ	0xFDD
  3815                           plusw2	equ	0xFDB
  3816                           fsr2h	equ	0xFDA
  3817                           fsr2l	equ	0xFD9
  3818                           status	equ	0xFD8
  3819                           
  3820 ;; *************** function _log *****************
  3821 ;; Defined at:
  3822 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;  x               4   33[BANK0 ] short 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  exponent        2   66[COMRAM] int 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  4   33[BANK0 ] int 
  3829 ;; Registers used:
  3830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/1
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3836 ;;      Params:         0       4       0       0       0       0       0
  3837 ;;      Locals:         2       0       0       0       0       0       0
  3838 ;;      Temps:          0       0       0       0       0       0       0
  3839 ;;      Totals:         2       4       0       0       0       0       0
  3840 ;;Total ram usage:        6 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; Hardware stack levels required when called:    5
  3843 ;; This function calls:
  3844 ;;		___fladd
  3845 ;;		___flmul
  3846 ;;		___awtofl
  3847 ;;		_eval_poly
  3848 ;;		_frexp
  3849 ;; This function is called by:
  3850 ;;		_doWork
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text7
  3855  003A60                     __ptext7:
  3856                           	opt stack 0
  3857  003A60                     _log:
  3858                           	opt stack 24
  3859                           
  3860                           ;incstack = 0
  3861                           ;incstack = 0
  3862  003A60  0100               	movlb	0	; () banked
  3863  003A62  BF84               	btfsc	(log@x+3)& (0+255),7,b
  3864  003A64  D007               	goto	u8780
  3865                           
  3866                           ; BSR set to: 0
  3867                           
  3868                           ; BSR set to: 0
  3869  003A66  EE20  F081         	lfsr	2,log@x
  3870  003A6A  50DE               	movf	postinc2,w,c
  3871  003A6C  10DE               	iorwf	postinc2,w,c
  3872  003A6E  10DE               	iorwf	postinc2,w,c
  3873  003A70  10DE               	iorwf	postinc2,w,c
  3874  003A72  E105               	bnz	l10442
  3875  003A74                     u8780:
  3876                           
  3877                           ; BSR set to: 0
  3878  003A74  6B81               	clrf	?_log& (0+255),b
  3879  003A76  6B82               	clrf	(?_log+1)& (0+255),b
  3880  003A78  6B83               	clrf	(?_log+2)& (0+255),b
  3881  003A7A  6B84               	clrf	(?_log+3)& (0+255),b
  3882  003A7C  D087               	goto	l1853
  3883  003A7E                     l10442:
  3884                           
  3885                           ; BSR set to: 0
  3886  003A7E  6B64               	clrf	(?___flmul+4)& (0+255),b
  3887  003A80  6B65               	clrf	(?___flmul+5)& (0+255),b
  3888  003A82  6B66               	clrf	(?___flmul+6)& (0+255),b
  3889  003A84  0E40               	movlw	64
  3890  003A86  6F67               	movwf	(?___flmul+7)& (0+255),b
  3891  003A88  0E43               	movlw	low log@exponent
  3892  003A8A  6E12               	movwf	?_frexp+4,c
  3893  003A8C  0E00               	movlw	high log@exponent
  3894  003A8E  6E13               	movwf	?_frexp+5,c
  3895  003A90  0E0F               	movlw	15
  3896  003A92  6E13               	movwf	?_frexp+5,c
  3897  003A94  0E5F               	movlw	__accesstop+-1
  3898  003A96  6412               	cpfsgt	?_frexp+4,c
  3899  003A98  6A13               	clrf	?_frexp+5,c
  3900  003A9A  C081  F00E         	movff	log@x,?_frexp
  3901  003A9E  C082  F00F         	movff	log@x+1,?_frexp+1
  3902  003AA2  C083  F010         	movff	log@x+2,?_frexp+2
  3903  003AA6  C084  F011         	movff	log@x+3,?_frexp+3
  3904  003AAA  EC66  F024         	call	_frexp	;wreg free
  3905  003AAE  C011  F063         	movff	?_frexp+3,?___flmul+3
  3906  003AB2  C010  F062         	movff	?_frexp+2,?___flmul+2
  3907  003AB6  C00F  F061         	movff	?_frexp+1,?___flmul+1
  3908  003ABA  C00E  F060         	movff	?_frexp,?___flmul
  3909  003ABE  EC4A  F020         	call	___flmul	;wreg free
  3910  003AC2  C063  F020         	movff	?___flmul+3,?___fladd+3
  3911  003AC6  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3912  003ACA  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3913  003ACE  C060  F01D         	movff	?___flmul,?___fladd
  3914  003AD2  6A21               	clrf	?___fladd+4,c
  3915  003AD4  6A22               	clrf	?___fladd+5,c
  3916  003AD6  0E80               	movlw	128
  3917  003AD8  6E23               	movwf	?___fladd+6,c
  3918  003ADA  0EBF               	movlw	191
  3919  003ADC  6E24               	movwf	?___fladd+7,c
  3920  003ADE  EC85  F01C         	call	___fladd	;wreg free
  3921  003AE2  C020  F084         	movff	?___fladd+3,log@x+3
  3922  003AE6  C01F  F083         	movff	?___fladd+2,log@x+2
  3923  003AEA  C01E  F082         	movff	?___fladd+1,log@x+1
  3924  003AEE  C01D  F081         	movff	?___fladd,log@x
  3925  003AF2  0643               	decf	log@exponent,f,c
  3926  003AF4  A0D8               	btfss	status,0,c
  3927  003AF6  0644               	decf	log@exponent+1,f,c
  3928  003AF8  C081  F076         	movff	log@x,?_eval_poly
  3929  003AFC  C082  F077         	movff	log@x+1,?_eval_poly+1
  3930  003B00  C083  F078         	movff	log@x+2,?_eval_poly+2
  3931  003B04  C084  F079         	movff	log@x+3,?_eval_poly+3
  3932  003B08  0E48               	movlw	low log@coeff
  3933  003B0A  0100               	movlb	0	; () banked
  3934  003B0C  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3935  003B0E  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3936  003B10  0E08               	movlw	8
  3937  003B12  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3938  003B14  ECCB  F021         	call	_eval_poly	;wreg free
  3939  003B18  C079  F084         	movff	?_eval_poly+3,log@x+3
  3940  003B1C  C078  F083         	movff	?_eval_poly+2,log@x+2
  3941  003B20  C077  F082         	movff	?_eval_poly+1,log@x+1
  3942  003B24  C076  F081         	movff	?_eval_poly,log@x
  3943                           
  3944                           ; BSR set to: 0
  3945  003B28  0E18               	movlw	24
  3946  003B2A  6F64               	movwf	(?___flmul+4)& (0+255),b
  3947  003B2C  0E72               	movlw	114
  3948  003B2E  6F65               	movwf	(?___flmul+5)& (0+255),b
  3949  003B30  0E31               	movlw	49
  3950  003B32  6F66               	movwf	(?___flmul+6)& (0+255),b
  3951  003B34  0E3F               	movlw	63
  3952  003B36  6F67               	movwf	(?___flmul+7)& (0+255),b
  3953  003B38  C043  F018         	movff	log@exponent,?___awtofl
  3954  003B3C  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3955  003B40  EC15  F028         	call	___awtofl	;wreg free
  3956  003B44  C01B  F063         	movff	?___awtofl+3,?___flmul+3
  3957  003B48  C01A  F062         	movff	?___awtofl+2,?___flmul+2
  3958  003B4C  C019  F061         	movff	?___awtofl+1,?___flmul+1
  3959  003B50  C018  F060         	movff	?___awtofl,?___flmul
  3960  003B54  EC4A  F020         	call	___flmul	;wreg free
  3961  003B58  C063  F020         	movff	?___flmul+3,?___fladd+3
  3962  003B5C  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3963  003B60  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3964  003B64  C060  F01D         	movff	?___flmul,?___fladd
  3965  003B68  C081  F021         	movff	log@x,?___fladd+4
  3966  003B6C  C082  F022         	movff	log@x+1,?___fladd+5
  3967  003B70  C083  F023         	movff	log@x+2,?___fladd+6
  3968  003B74  C084  F024         	movff	log@x+3,?___fladd+7
  3969  003B78  EC85  F01C         	call	___fladd	;wreg free
  3970  003B7C  C020  F084         	movff	?___fladd+3,?_log+3
  3971  003B80  C01F  F083         	movff	?___fladd+2,?_log+2
  3972  003B84  C01E  F082         	movff	?___fladd+1,?_log+1
  3973  003B88  C01D  F081         	movff	?___fladd,?_log
  3974  003B8C                     l1853:
  3975  003B8C  0012               	return	
  3976  003B8E                     __end_of_log:
  3977                           	opt stack 0
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           prodh	equ	0xFF4
  3983                           prodl	equ	0xFF3
  3984                           intcon	equ	0xFF2
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           indf1	equ	0xFE7
  3988                           postdec1	equ	0xFE5
  3989                           fsr1h	equ	0xFE2
  3990                           fsr1l	equ	0xFE1
  3991                           indf2	equ	0xFDF
  3992                           postinc2	equ	0xFDE
  3993                           postdec2	equ	0xFDD
  3994                           plusw2	equ	0xFDB
  3995                           fsr2h	equ	0xFDA
  3996                           fsr2l	equ	0xFD9
  3997                           status	equ	0xFD8
  3998                           
  3999 ;; *************** function _exp *****************
  4000 ;; Defined at:
  4001 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  x               4   57[BANK0 ] int 
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;  exponent        2   65[BANK0 ] int 
  4006 ;;  sign            1   67[BANK0 ] unsigned char 
  4007 ;; Return value:  Size  Location     Type
  4008 ;;                  4   57[BANK0 ] unsigned char 
  4009 ;; Registers used:
  4010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/1
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4016 ;;      Params:         0       4       0       0       0       0       0
  4017 ;;      Locals:         0       7       0       0       0       0       0
  4018 ;;      Temps:          0       0       0       0       0       0       0
  4019 ;;      Totals:         0      11       0       0       0       0       0
  4020 ;;Total ram usage:       11 bytes
  4021 ;; Hardware stack levels used:    1
  4022 ;; Hardware stack levels required when called:    6
  4023 ;; This function calls:
  4024 ;;		___fldiv
  4025 ;;		___asflmul
  4026 ;;		___asflsub
  4027 ;;		___awtofl
  4028 ;;		_floor
  4029 ;;		_eval_poly
  4030 ;;		_ldexp
  4031 ;;		___flge
  4032 ;;		___flneg
  4033 ;;		___fltol
  4034 ;; This function is called by:
  4035 ;;		_doWork
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text8
  4040  003242                     __ptext8:
  4041                           	opt stack 0
  4042  003242                     _exp:
  4043                           	opt stack 23
  4044                           
  4045                           ;incstack = 0
  4046                           ;incstack = 0
  4047  003242  0100               	movlb	0	; () banked
  4048  003244  EE20  F099         	lfsr	2,exp@x
  4049  003248  50DE               	movf	postinc2,w,c
  4050  00324A  10DE               	iorwf	postinc2,w,c
  4051  00324C  10DE               	iorwf	postinc2,w,c
  4052  00324E  10DE               	iorwf	postinc2,w,c
  4053  003250  E107               	bnz	l10404
  4054                           
  4055                           ; BSR set to: 0
  4056  003252  0E00               	movlw	0
  4057  003254  6F99               	movwf	?_exp& (0+255),b
  4058  003256  6F9A               	movwf	(?_exp+1)& (0+255),b
  4059  003258  0E80               	movlw	128
  4060  00325A  6F9B               	movwf	(?_exp+2)& (0+255),b
  4061  00325C  0E3F               	movlw	63
  4062  00325E  D018               	goto	L3
  4063  003260                     l10404:
  4064                           
  4065                           ; BSR set to: 0
  4066  003260  0E18               	movlw	24
  4067  003262  6E0E               	movwf	?___flge,c
  4068  003264  0E72               	movlw	114
  4069  003266  6E0F               	movwf	?___flge+1,c
  4070  003268  0E31               	movlw	49
  4071  00326A  6E10               	movwf	?___flge+2,c
  4072  00326C  0E44               	movlw	68
  4073  00326E  6E11               	movwf	?___flge+3,c
  4074  003270  C099  F012         	movff	exp@x,?___flge+4
  4075  003274  C09A  F013         	movff	exp@x+1,?___flge+5
  4076  003278  C09B  F014         	movff	exp@x+2,?___flge+6
  4077  00327C  C09C  F015         	movff	exp@x+3,?___flge+7
  4078  003280  EC2F  F026         	call	___flge	;wreg free
  4079  003284  E207               	bc	l10410
  4080  003286  0100               	movlb	0	; () banked
  4081  003288  6999               	setf	?_exp& (0+255),b
  4082  00328A  699A               	setf	(?_exp+1)& (0+255),b
  4083  00328C  0E7F               	movlw	127
  4084  00328E  6F9B               	movwf	(?_exp+2)& (0+255),b
  4085  003290                     L3:
  4086  003290  6F9C               	movwf	(?_exp+3)& (0+255),b
  4087  003292  D0C8               	goto	l1561
  4088  003294                     l10410:
  4089  003294  C099  F00E         	movff	exp@x,?___flge
  4090  003298  C09A  F00F         	movff	exp@x+1,?___flge+1
  4091  00329C  C09B  F010         	movff	exp@x+2,?___flge+2
  4092  0032A0  C09C  F011         	movff	exp@x+3,?___flge+3
  4093  0032A4  0E87               	movlw	135
  4094  0032A6  6E12               	movwf	?___flge+4,c
  4095  0032A8  0E48               	movlw	72
  4096  0032AA  6E13               	movwf	?___flge+5,c
  4097  0032AC  0E3A               	movlw	58
  4098  0032AE  6E14               	movwf	?___flge+6,c
  4099  0032B0  0EC4               	movlw	196
  4100  0032B2  6E15               	movwf	?___flge+7,c
  4101  0032B4  EC2F  F026         	call	___flge	;wreg free
  4102  0032B8  E202               	bc	l10414
  4103  0032BA  0100               	movlb	0	; () banked
  4104  0032BC  D08D               	goto	u8760
  4105  0032BE                     l10414:
  4106  0032BE  0100               	movlb	0	; () banked
  4107  0032C0  0E01               	movlw	1
  4108  0032C2  AF9C               	btfss	(exp@x+3)& (0+255),7,b
  4109  0032C4  0E00               	movlw	0
  4110  0032C6  6FA3               	movwf	exp@sign& (0+255),b
  4111  0032C8  51A3               	movf	exp@sign& (0+255),w,b
  4112  0032CA  E012               	bz	l1564
  4113                           
  4114                           ; BSR set to: 0
  4115  0032CC  C099  F00E         	movff	exp@x,?___flneg
  4116  0032D0  C09A  F00F         	movff	exp@x+1,?___flneg+1
  4117  0032D4  C09B  F010         	movff	exp@x+2,?___flneg+2
  4118  0032D8  C09C  F011         	movff	exp@x+3,?___flneg+3
  4119  0032DC  EC20  F029         	call	___flneg	;wreg free
  4120  0032E0  C011  F09C         	movff	?___flneg+3,exp@x+3
  4121  0032E4  C010  F09B         	movff	?___flneg+2,exp@x+2
  4122  0032E8  C00F  F09A         	movff	?___flneg+1,exp@x+1
  4123  0032EC  C00E  F099         	movff	?___flneg,exp@x
  4124  0032F0                     l1564:
  4125                           
  4126                           ; BSR set to: 0
  4127  0032F0  0E3B               	movlw	59
  4128  0032F2  6F76               	movwf	?___asflmul& (0+255),b
  4129  0032F4  0EAA               	movlw	170
  4130  0032F6  6F77               	movwf	(?___asflmul+1)& (0+255),b
  4131  0032F8  0EB8               	movlw	184
  4132  0032FA  6F78               	movwf	(?___asflmul+2)& (0+255),b
  4133  0032FC  0E3F               	movlw	63
  4134  0032FE  6F79               	movwf	(?___asflmul+3)& (0+255),b
  4135  003300  0E99               	movlw	exp@x& (0+255)
  4136  003302  EC55  F026         	call	___asflmul
  4137  003306  C099  F08F         	movff	exp@x,?_floor
  4138  00330A  C09A  F090         	movff	exp@x+1,?_floor+1
  4139  00330E  C09B  F091         	movff	exp@x+2,?_floor+2
  4140  003312  C09C  F092         	movff	exp@x+3,?_floor+3
  4141  003316  ECE0  F01E         	call	_floor	;wreg free
  4142  00331A  C092  F0A0         	movff	?_floor+3,_exp$2276+3
  4143  00331E  C091  F09F         	movff	?_floor+2,_exp$2276+2
  4144  003322  C090  F09E         	movff	?_floor+1,_exp$2276+1
  4145  003326  C08F  F09D         	movff	?_floor,_exp$2276
  4146  00332A  C09D  F076         	movff	_exp$2276,?___fltol
  4147  00332E  C09E  F077         	movff	_exp$2276+1,?___fltol+1
  4148  003332  C09F  F078         	movff	_exp$2276+2,?___fltol+2
  4149  003336  C0A0  F079         	movff	_exp$2276+3,?___fltol+3
  4150  00333A  ECCC  F023         	call	___fltol	;wreg free
  4151  00333E  C076  F0A1         	movff	?___fltol,exp@exponent
  4152  003342  C077  F0A2         	movff	?___fltol+1,exp@exponent+1
  4153                           
  4154                           ; BSR set to: 0
  4155  003346  0E00               	movlw	high exp@x
  4156  003348  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  4157  00334A  0E99               	movlw	low exp@x
  4158  00334C  6F7E               	movwf	?___asflsub& (0+255),b
  4159  00334E  C0A1  F018         	movff	exp@exponent,?___awtofl
  4160  003352  C0A2  F019         	movff	exp@exponent+1,?___awtofl+1
  4161  003356  EC15  F028         	call	___awtofl	;wreg free
  4162  00335A  C01B  F083         	movff	?___awtofl+3,?___asflsub+5
  4163  00335E  C01A  F082         	movff	?___awtofl+2,?___asflsub+4
  4164  003362  C019  F081         	movff	?___awtofl+1,?___asflsub+3
  4165  003366  C018  F080         	movff	?___awtofl,?___asflsub+2
  4166  00336A  EC08  F026         	call	___asflsub	;wreg free
  4167                           
  4168                           ; BSR set to: 0
  4169  00336E  C099  F076         	movff	exp@x,?_eval_poly
  4170  003372  C09A  F077         	movff	exp@x+1,?_eval_poly+1
  4171  003376  C09B  F078         	movff	exp@x+2,?_eval_poly+2
  4172  00337A  C09C  F079         	movff	exp@x+3,?_eval_poly+3
  4173  00337E  0E20               	movlw	low exp@coeff
  4174  003380  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  4175  003382  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  4176  003384  0E09               	movlw	9
  4177  003386  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  4178  003388  ECCB  F021         	call	_eval_poly	;wreg free
  4179  00338C  C079  F084         	movff	?_eval_poly+3,?_ldexp+3
  4180  003390  C078  F083         	movff	?_eval_poly+2,?_ldexp+2
  4181  003394  C077  F082         	movff	?_eval_poly+1,?_ldexp+1
  4182  003398  C076  F081         	movff	?_eval_poly,?_ldexp
  4183  00339C  C0A1  F085         	movff	exp@exponent,?_ldexp+4
  4184  0033A0  C0A2  F086         	movff	exp@exponent+1,?_ldexp+5
  4185  0033A4  EC2A  F023         	call	_ldexp	;wreg free
  4186  0033A8  C084  F09C         	movff	?_ldexp+3,exp@x+3
  4187  0033AC  C083  F09B         	movff	?_ldexp+2,exp@x+2
  4188  0033B0  C082  F09A         	movff	?_ldexp+1,exp@x+1
  4189  0033B4  C081  F099         	movff	?_ldexp,exp@x
  4190                           
  4191                           ; BSR set to: 0
  4192  0033B8  51A3               	movf	exp@sign& (0+255),w,b
  4193  0033BA  E02C               	bz	l1565
  4194                           
  4195                           ; BSR set to: 0
  4196  0033BC  EE20  F099         	lfsr	2,exp@x
  4197  0033C0  0EFF               	movlw	255
  4198  0033C2  18DE               	xorwf	postinc2,w,c
  4199  0033C4  0EFF               	movlw	255
  4200  0033C6  B4D8               	btfsc	status,2,c
  4201  0033C8  18DE               	xorwf	postinc2,w,c
  4202  0033CA  0E7F               	movlw	127
  4203  0033CC  B4D8               	btfsc	status,2,c
  4204  0033CE  18DE               	xorwf	postinc2,w,c
  4205  0033D0  0E7F               	movlw	127
  4206  0033D2  B4D8               	btfsc	status,2,c
  4207  0033D4  18DE               	xorwf	postinc2,w,c
  4208  0033D6  E105               	bnz	l10430
  4209  0033D8                     u8760:
  4210                           
  4211                           ; BSR set to: 0
  4212  0033D8  6B99               	clrf	?_exp& (0+255),b
  4213  0033DA  6B9A               	clrf	(?_exp+1)& (0+255),b
  4214  0033DC  6B9B               	clrf	(?_exp+2)& (0+255),b
  4215  0033DE  6B9C               	clrf	(?_exp+3)& (0+255),b
  4216  0033E0  D021               	goto	l1561
  4217  0033E2                     l10430:
  4218                           
  4219                           ; BSR set to: 0
  4220  0033E2  6A2C               	clrf	?___fldiv,c
  4221  0033E4  6A2D               	clrf	?___fldiv+1,c
  4222  0033E6  0E80               	movlw	128
  4223  0033E8  6E2E               	movwf	?___fldiv+2,c
  4224  0033EA  0E3F               	movlw	63
  4225  0033EC  6E2F               	movwf	?___fldiv+3,c
  4226  0033EE  C099  F030         	movff	exp@x,?___fldiv+4
  4227  0033F2  C09A  F031         	movff	exp@x+1,?___fldiv+5
  4228  0033F6  C09B  F032         	movff	exp@x+2,?___fldiv+6
  4229  0033FA  C09C  F033         	movff	exp@x+3,?___fldiv+7
  4230  0033FE  ECD6  F022         	call	___fldiv	;wreg free
  4231  003402  C02F  F09C         	movff	?___fldiv+3,?_exp+3
  4232  003406  C02E  F09B         	movff	?___fldiv+2,?_exp+2
  4233  00340A  C02D  F09A         	movff	?___fldiv+1,?_exp+1
  4234  00340E  C02C  F099         	movff	?___fldiv,?_exp
  4235  003412  D008               	goto	l1561
  4236  003414                     l1565:
  4237                           
  4238                           ; BSR set to: 0
  4239  003414  C099  F099         	movff	exp@x,?_exp
  4240  003418  C09A  F09A         	movff	exp@x+1,?_exp+1
  4241  00341C  C09B  F09B         	movff	exp@x+2,?_exp+2
  4242  003420  C09C  F09C         	movff	exp@x+3,?_exp+3
  4243  003424                     l1561:
  4244  003424  0012               	return	
  4245  003426                     __end_of_exp:
  4246                           	opt stack 0
  4247                           tblptru	equ	0xFF8
  4248                           tblptrh	equ	0xFF7
  4249                           tblptrl	equ	0xFF6
  4250                           tablat	equ	0xFF5
  4251                           prodh	equ	0xFF4
  4252                           prodl	equ	0xFF3
  4253                           intcon	equ	0xFF2
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           indf1	equ	0xFE7
  4257                           postdec1	equ	0xFE5
  4258                           fsr1h	equ	0xFE2
  4259                           fsr1l	equ	0xFE1
  4260                           indf2	equ	0xFDF
  4261                           postinc2	equ	0xFDE
  4262                           postdec2	equ	0xFDD
  4263                           plusw2	equ	0xFDB
  4264                           fsr2h	equ	0xFDA
  4265                           fsr2l	equ	0xFD9
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function ___flneg *****************
  4269 ;; Defined at:
  4270 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  f1              4   13[COMRAM] unsigned char 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;		None
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  4   13[COMRAM] unsigned char 
  4277 ;; Registers used:
  4278 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4279 ;; Tracked objects:
  4280 ;;		On entry : F/0
  4281 ;;		On exit  : F/0
  4282 ;;		Unchanged: F/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4284 ;;      Params:         4       0       0       0       0       0       0
  4285 ;;      Locals:         0       0       0       0       0       0       0
  4286 ;;      Temps:          0       0       0       0       0       0       0
  4287 ;;      Totals:         4       0       0       0       0       0       0
  4288 ;;Total ram usage:        4 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    2
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_exp
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text9
  4299  005240                     __ptext9:
  4300                           	opt stack 0
  4301  005240                     ___flneg:
  4302                           	opt stack 26
  4303                           
  4304                           ; BSR set to: 0
  4305                           
  4306                           ;incstack = 0
  4307                           ;incstack = 0
  4308  005240  EE20  F00E         	lfsr	2,___flneg@f1
  4309  005244  50DE               	movf	postinc2,w,c
  4310  005246  10DE               	iorwf	postinc2,w,c
  4311  005248  10DE               	iorwf	postinc2,w,c
  4312  00524A  10DE               	iorwf	postinc2,w,c
  4313  00524C  E002               	bz	l11760
  4314                           
  4315                           ; BSR set to: 0
  4316  00524E  0E80               	movlw	128
  4317  005250  1A11               	xorwf	___flneg@f1+3,f,c
  4318  005252                     l11760:
  4319                           
  4320                           ; BSR set to: 0
  4321  005252  C00E  F00E         	movff	___flneg@f1,?___flneg
  4322  005256  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  4323  00525A  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  4324  00525E  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  4325                           
  4326                           ; BSR set to: 0
  4327  005262  0012               	return	
  4328  005264                     __end_of___flneg:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           indf1	equ	0xFE7
  4340                           postdec1	equ	0xFE5
  4341                           fsr1h	equ	0xFE2
  4342                           fsr1l	equ	0xFE1
  4343                           indf2	equ	0xFDF
  4344                           postinc2	equ	0xFDE
  4345                           postdec2	equ	0xFDD
  4346                           plusw2	equ	0xFDB
  4347                           fsr2h	equ	0xFDA
  4348                           fsr2l	equ	0xFD9
  4349                           status	equ	0xFD8
  4350                           
  4351 ;; *************** function _ldexp *****************
  4352 ;; Defined at:
  4353 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  value           4   33[BANK0 ] unsigned char 
  4356 ;;  newexp          2   37[BANK0 ] int 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;		None
  4359 ;; Return value:  Size  Location     Type
  4360 ;;                  4   33[BANK0 ] int 
  4361 ;; Registers used:
  4362 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4363 ;; Tracked objects:
  4364 ;;		On entry : F/0
  4365 ;;		On exit  : F/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4368 ;;      Params:         0       6       0       0       0       0       0
  4369 ;;      Locals:         0       0       0       0       0       0       0
  4370 ;;      Temps:          3       0       0       0       0       0       0
  4371 ;;      Totals:         3       6       0       0       0       0       0
  4372 ;;Total ram usage:        9 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    2
  4375 ;; This function calls:
  4376 ;;		Nothing
  4377 ;; This function is called by:
  4378 ;;		_exp
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text10
  4383  004654                     __ptext10:
  4384                           	opt stack 0
  4385  004654                     _ldexp:
  4386                           	opt stack 26
  4387                           
  4388                           ; BSR set to: 0
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;incstack = 0
  4392                           ;incstack = 0
  4393  004654  EE20  F081         	lfsr	2,ldexp@value
  4394  004658  50DE               	movf	postinc2,w,c
  4395  00465A  10DE               	iorwf	postinc2,w,c
  4396  00465C  10DE               	iorwf	postinc2,w,c
  4397  00465E  10DE               	iorwf	postinc2,w,c
  4398  004660  E014               	bz	u10170
  4399                           
  4400                           ; BSR set to: 0
  4401                           
  4402                           ; BSR set to: 0
  4403  004662  5184               	movf	(ldexp@value+3)& (0+255),w,b
  4404  004664  0B7F               	andlw	127
  4405  004666  6E43               	movwf	??_ldexp& (0+255),c
  4406  004668  90D8               	bcf	status,0,c
  4407  00466A  3443               	rlcf	??_ldexp,w,c
  4408  00466C  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4409  00466E  6A45               	clrf	(??_ldexp+2)& (0+255),c
  4410  004670  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  4411  004672  5044               	movf	??_ldexp+1,w,c
  4412  004674  2785               	addwf	ldexp@newexp& (0+255),f,b
  4413  004676  5045               	movf	??_ldexp+2,w,c
  4414  004678  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4415  00467A  3583               	rlcf	(ldexp@value+2)& (0+255),w,b
  4416  00467C  36E8               	rlcf	wreg,f,c
  4417  00467E  0B01               	andlw	1
  4418  004680  2785               	addwf	ldexp@newexp& (0+255),f,b
  4419  004682  0E00               	movlw	0
  4420  004684  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4421                           
  4422                           ; BSR set to: 0
  4423  004686  AF86               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4424  004688  D005               	goto	l11722
  4425  00468A                     u10170:
  4426                           
  4427                           ; BSR set to: 0
  4428  00468A  6B81               	clrf	?_ldexp& (0+255),b
  4429  00468C  6B82               	clrf	(?_ldexp+1)& (0+255),b
  4430  00468E  6B83               	clrf	(?_ldexp+2)& (0+255),b
  4431  004690  6B84               	clrf	(?_ldexp+3)& (0+255),b
  4432  004692  D031               	goto	l1686
  4433  004694                     l11722:
  4434                           
  4435                           ; BSR set to: 0
  4436  004694  5186               	movf	(ldexp@newexp+1)& (0+255),w,b
  4437  004696  0A80               	xorlw	128
  4438  004698  0F7F               	addlw	-129
  4439  00469A  0E00               	movlw	0
  4440  00469C  B4D8               	btfsc	status,2,c
  4441  00469E  5D85               	subwf	ldexp@newexp& (0+255),w,b
  4442  0046A0  E30E               	bnc	l11736
  4443                           
  4444                           ; BSR set to: 0
  4445  0046A2  AF84               	btfss	(ldexp@value+3)& (0+255),7,b
  4446  0046A4  D006               	goto	l11732
  4447                           
  4448                           ; BSR set to: 0
  4449  0046A6  6981               	setf	?_ldexp& (0+255),b
  4450  0046A8  6982               	setf	(?_ldexp+1)& (0+255),b
  4451  0046AA  0E7F               	movlw	127
  4452  0046AC  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4453  0046AE  0EFF               	movlw	255
  4454  0046B0  D004               	goto	L4
  4455  0046B2                     l11732:
  4456                           
  4457                           ; BSR set to: 0
  4458  0046B2  6981               	setf	?_ldexp& (0+255),b
  4459  0046B4  6982               	setf	(?_ldexp+1)& (0+255),b
  4460  0046B6  0E7F               	movlw	127
  4461  0046B8  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4462  0046BA                     L4:
  4463  0046BA  6F84               	movwf	(?_ldexp+3)& (0+255),b
  4464  0046BC  D01C               	goto	l1686
  4465  0046BE                     l11736:
  4466                           
  4467                           ; BSR set to: 0
  4468  0046BE  3586               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4469  0046C0  3186               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4470  0046C2  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4471  0046C4  3185               	rrcf	ldexp@newexp& (0+255),w,b
  4472  0046C6  6E43               	movwf	??_ldexp& (0+255),c
  4473  0046C8  1984               	xorwf	(ldexp@value+3)& (0+255),w,b
  4474  0046CA  0B80               	andlw	-128
  4475  0046CC  1843               	xorwf	??_ldexp,w,c
  4476  0046CE  6F84               	movwf	(ldexp@value+3)& (0+255),b
  4477  0046D0  C085  F043         	movff	ldexp@newexp,??_ldexp
  4478  0046D4  0E01               	movlw	1
  4479  0046D6  1643               	andwf	??_ldexp,f,c
  4480  0046D8  3243               	rrcf	??_ldexp,f,c
  4481  0046DA  3243               	rrcf	??_ldexp,f,c
  4482  0046DC  5183               	movf	(ldexp@value+2)& (0+255),w,b
  4483  0046DE  1843               	xorwf	??_ldexp,w,c
  4484  0046E0  0B7F               	andlw	-129
  4485  0046E2  1843               	xorwf	??_ldexp,w,c
  4486  0046E4  6F83               	movwf	(ldexp@value+2)& (0+255),b
  4487                           
  4488                           ; BSR set to: 0
  4489  0046E6  C081  F081         	movff	ldexp@value,?_ldexp
  4490  0046EA  C082  F082         	movff	ldexp@value+1,?_ldexp+1
  4491  0046EE  C083  F083         	movff	ldexp@value+2,?_ldexp+2
  4492  0046F2  C084  F084         	movff	ldexp@value+3,?_ldexp+3
  4493  0046F6                     l1686:
  4494                           
  4495                           ; BSR set to: 0
  4496  0046F6  0012               	return	
  4497  0046F8                     __end_of_ldexp:
  4498                           	opt stack 0
  4499                           tblptru	equ	0xFF8
  4500                           tblptrh	equ	0xFF7
  4501                           tblptrl	equ	0xFF6
  4502                           tablat	equ	0xFF5
  4503                           prodh	equ	0xFF4
  4504                           prodl	equ	0xFF3
  4505                           intcon	equ	0xFF2
  4506                           postinc0	equ	0xFEE
  4507                           wreg	equ	0xFE8
  4508                           indf1	equ	0xFE7
  4509                           postdec1	equ	0xFE5
  4510                           fsr1h	equ	0xFE2
  4511                           fsr1l	equ	0xFE1
  4512                           indf2	equ	0xFDF
  4513                           postinc2	equ	0xFDE
  4514                           postdec2	equ	0xFDD
  4515                           plusw2	equ	0xFDB
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _eval_poly *****************
  4521 ;; Defined at:
  4522 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  x               4   22[BANK0 ] int 
  4525 ;;  d               1   26[BANK0 ] PTR const 
  4526 ;;		 -> log@coeff(36), exp@coeff(40), 
  4527 ;;  n               2   27[BANK0 ] int 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  res             4   29[BANK0 ] int 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  4   22[BANK0 ] int 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : F/0
  4536 ;;		On exit  : F/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         0       7       0       0       0       0       0
  4540 ;;      Locals:         0       4       0       0       0       0       0
  4541 ;;      Temps:          1       0       0       0       0       0       0
  4542 ;;      Totals:         1      11       0       0       0       0       0
  4543 ;;Total ram usage:       12 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    4
  4546 ;; This function calls:
  4547 ;;		___fladd
  4548 ;;		___flmul
  4549 ;; This function is called by:
  4550 ;;		_exp
  4551 ;;		_log
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text11
  4556  004396                     __ptext11:
  4557                           	opt stack 0
  4558  004396                     _eval_poly:
  4559                           	opt stack 24
  4560                           
  4561                           ; BSR set to: 0
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;incstack = 0
  4565                           ;incstack = 0
  4566  004396  517B               	movf	eval_poly@n& (0+255),w,b
  4567  004398  D84E               	call	PL44	;call to abstracted procedure
  4568  00439A  CFF5 F07D          	movff	tablat,eval_poly@res
  4569  00439E  0009               	tblrd		*+
  4570  0043A0  CFF5 F07E          	movff	tablat,eval_poly@res+1
  4571  0043A4  0009               	tblrd		*+
  4572  0043A6  CFF5 F07F          	movff	tablat,eval_poly@res+2
  4573  0043AA  000A               	tblrd		*-
  4574  0043AC  CFF5 F080          	movff	tablat,eval_poly@res+3
  4575  0043B0  D035               	goto	l11708
  4576  0043B2                     l11706:
  4577                           
  4578                           ; BSR set to: 0
  4579  0043B2  C07D  F064         	movff	eval_poly@res,?___flmul+4
  4580  0043B6  C07E  F065         	movff	eval_poly@res+1,?___flmul+5
  4581  0043BA  C07F  F066         	movff	eval_poly@res+2,?___flmul+6
  4582  0043BE  C080  F067         	movff	eval_poly@res+3,?___flmul+7
  4583  0043C2  C076  F060         	movff	eval_poly@x,?___flmul
  4584  0043C6  C077  F061         	movff	eval_poly@x+1,?___flmul+1
  4585  0043CA  C078  F062         	movff	eval_poly@x+2,?___flmul+2
  4586  0043CE  C079  F063         	movff	eval_poly@x+3,?___flmul+3
  4587  0043D2  EC4A  F020         	call	___flmul	;wreg free
  4588  0043D6  C063  F020         	movff	?___flmul+3,?___fladd+3
  4589  0043DA  C062  F01F         	movff	?___flmul+2,?___fladd+2
  4590  0043DE  C061  F01E         	movff	?___flmul+1,?___fladd+1
  4591  0043E2  C060  F01D         	movff	?___flmul,?___fladd
  4592  0043E6  0100               	movlb	0	; () banked
  4593  0043E8  077B               	decf	eval_poly@n& (0+255),f,b
  4594  0043EA  A0D8               	btfss	status,0,c
  4595  0043EC  077C               	decf	(eval_poly@n+1)& (0+255),f,b
  4596  0043EE  517B               	movf	eval_poly@n& (0+255),w,b
  4597  0043F0  D822               	call	PL44	;call to abstracted procedure
  4598  0043F2  CFF5 F021          	movff	tablat,?___fladd+4
  4599  0043F6  0009               	tblrd		*+
  4600  0043F8  CFF5 F022          	movff	tablat,?___fladd+5
  4601  0043FC  0009               	tblrd		*+
  4602  0043FE  CFF5 F023          	movff	tablat,?___fladd+6
  4603  004402  000A               	tblrd		*-
  4604  004404  CFF5 F024          	movff	tablat,?___fladd+7
  4605  004408  EC85  F01C         	call	___fladd	;wreg free
  4606  00440C  C020  F080         	movff	?___fladd+3,eval_poly@res+3
  4607  004410  C01F  F07F         	movff	?___fladd+2,eval_poly@res+2
  4608  004414  C01E  F07E         	movff	?___fladd+1,eval_poly@res+1
  4609  004418  C01D  F07D         	movff	?___fladd,eval_poly@res
  4610  00441C                     l11708:
  4611  00441C  0100               	movlb	0	; () banked
  4612  00441E  517C               	movf	(eval_poly@n+1)& (0+255),w,b
  4613  004420  117B               	iorwf	eval_poly@n& (0+255),w,b
  4614  004422  E1C7               	bnz	l11706
  4615                           
  4616                           ; BSR set to: 0
  4617  004424  C07D  F076         	movff	eval_poly@res,?_eval_poly
  4618  004428  C07E  F077         	movff	eval_poly@res+1,?_eval_poly+1
  4619  00442C  C07F  F078         	movff	eval_poly@res+2,?_eval_poly+2
  4620  004430  C080  F079         	movff	eval_poly@res+3,?_eval_poly+3
  4621                           
  4622                           ; BSR set to: 0
  4623  004434  0012               	return	
  4624  004436                     __end_of_eval_poly:
  4625                           	opt stack 0
  4626  004436                     PL44:
  4627                           	opt stack 24
  4628  004436  0D04               	mullw	4
  4629  004438  517A               	movf	eval_poly@d& (0+255),w,b
  4630  00443A  24F3               	addwf	prodl,w,c
  4631  00443C  6E42               	movwf	??_eval_poly& (0+255),c
  4632  00443E  C042  FFF6         	movff	??_eval_poly,tblptrl
  4633  004442  0E06               	movlw	high __smallconst
  4634  004444  6EF7               	movwf	tblptrh,c
  4635  004446  0009               	tblrd		*+
  4636  004448  0012               	return	
  4637  00444A                     __end_ofPL44:
  4638                           	opt stack 0
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           prodh	equ	0xFF4
  4644                           prodl	equ	0xFF3
  4645                           intcon	equ	0xFF2
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           indf1	equ	0xFE7
  4649                           postdec1	equ	0xFE5
  4650                           fsr1h	equ	0xFE2
  4651                           fsr1l	equ	0xFE1
  4652                           indf2	equ	0xFDF
  4653                           postinc2	equ	0xFDE
  4654                           postdec2	equ	0xFDD
  4655                           plusw2	equ	0xFDB
  4656                           fsr2h	equ	0xFDA
  4657                           fsr2l	equ	0xFD9
  4658                           status	equ	0xFD8
  4659                           
  4660 ;; *************** function _floor *****************
  4661 ;; Defined at:
  4662 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;  x               4   47[BANK0 ] int 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  i               4   51[BANK0 ] int 
  4667 ;;  expon           2   55[BANK0 ] int 
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  4   47[BANK0 ] int 
  4670 ;; Registers used:
  4671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4672 ;; Tracked objects:
  4673 ;;		On entry : F/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4677 ;;      Params:         0       4       0       0       0       0       0
  4678 ;;      Locals:         0       6       0       0       0       0       0
  4679 ;;      Temps:          0       0       0       0       0       0       0
  4680 ;;      Totals:         0      10       0       0       0       0       0
  4681 ;;Total ram usage:       10 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    4
  4684 ;; This function calls:
  4685 ;;		___altofl
  4686 ;;		___fladd
  4687 ;;		___flge
  4688 ;;		_frexp
  4689 ;;		___fltol
  4690 ;; This function is called by:
  4691 ;;		_exp
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text12
  4696  003DC0                     __ptext12:
  4697                           	opt stack 0
  4698  003DC0                     _floor:
  4699                           	opt stack 24
  4700                           
  4701                           ; BSR set to: 0
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;incstack = 0
  4705                           ;incstack = 0
  4706  003DC0  C08F  F00E         	movff	floor@x,?_frexp
  4707  003DC4  C090  F00F         	movff	floor@x+1,?_frexp+1
  4708  003DC8  C091  F010         	movff	floor@x+2,?_frexp+2
  4709  003DCC  C092  F011         	movff	floor@x+3,?_frexp+3
  4710  003DD0  0E00               	movlw	high floor@expon
  4711  003DD2  6E13               	movwf	?_frexp+5,c
  4712  003DD4  0E97               	movlw	low floor@expon
  4713  003DD6  6E12               	movwf	?_frexp+4,c
  4714  003DD8  EC66  F024         	call	_frexp	;wreg free
  4715                           
  4716                           ; BSR set to: 0
  4717  003DDC  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  4718  003DDE  D00F               	goto	l11694
  4719                           
  4720                           ; BSR set to: 0
  4721  003DE0  AF92               	btfss	(floor@x+3)& (0+255),7,b
  4722  003DE2  D008               	goto	l1654
  4723                           
  4724                           ; BSR set to: 0
  4725  003DE4  0E00               	movlw	0
  4726  003DE6  6F8F               	movwf	?_floor& (0+255),b
  4727  003DE8  6F90               	movwf	(?_floor+1)& (0+255),b
  4728  003DEA  0E80               	movlw	128
  4729  003DEC  6F91               	movwf	(?_floor+2)& (0+255),b
  4730  003DEE  0EBF               	movlw	191
  4731  003DF0  6F92               	movwf	(?_floor+3)& (0+255),b
  4732  003DF2  D063               	goto	l1655
  4733  003DF4                     l1654:
  4734                           
  4735                           ; BSR set to: 0
  4736  003DF4  6B8F               	clrf	?_floor& (0+255),b
  4737  003DF6  6B90               	clrf	(?_floor+1)& (0+255),b
  4738  003DF8  6B91               	clrf	(?_floor+2)& (0+255),b
  4739  003DFA  6B92               	clrf	(?_floor+3)& (0+255),b
  4740  003DFC  D05E               	goto	l1655
  4741  003DFE                     l11694:
  4742                           
  4743                           ; BSR set to: 0
  4744  003DFE  0E1D               	movlw	29
  4745  003E00  5D97               	subwf	floor@expon& (0+255),w,b
  4746  003E02  0E00               	movlw	0
  4747  003E04  5998               	subwfb	(floor@expon+1)& (0+255),w,b
  4748  003E06  E309               	bnc	l11698
  4749                           
  4750                           ; BSR set to: 0
  4751  003E08  C08F  F08F         	movff	floor@x,?_floor
  4752  003E0C  C090  F090         	movff	floor@x+1,?_floor+1
  4753  003E10  C091  F091         	movff	floor@x+2,?_floor+2
  4754  003E14  C092  F092         	movff	floor@x+3,?_floor+3
  4755  003E18  D050               	goto	l1655
  4756  003E1A                     l11698:
  4757                           
  4758                           ; BSR set to: 0
  4759  003E1A  C08F  F076         	movff	floor@x,?___fltol
  4760  003E1E  C090  F077         	movff	floor@x+1,?___fltol+1
  4761  003E22  C091  F078         	movff	floor@x+2,?___fltol+2
  4762  003E26  C092  F079         	movff	floor@x+3,?___fltol+3
  4763  003E2A  ECCC  F023         	call	___fltol	;wreg free
  4764  003E2E  C079  F08D         	movff	?___fltol+3,?___altofl+3
  4765  003E32  C078  F08C         	movff	?___fltol+2,?___altofl+2
  4766  003E36  C077  F08B         	movff	?___fltol+1,?___altofl+1
  4767  003E3A  C076  F08A         	movff	?___fltol,?___altofl
  4768  003E3E  EC0F  F027         	call	___altofl	;wreg free
  4769  003E42  C08D  F096         	movff	?___altofl+3,floor@i+3
  4770  003E46  C08C  F095         	movff	?___altofl+2,floor@i+2
  4771  003E4A  C08B  F094         	movff	?___altofl+1,floor@i+1
  4772  003E4E  C08A  F093         	movff	?___altofl,floor@i
  4773  003E52  C08F  F00E         	movff	floor@x,?___flge
  4774  003E56  C090  F00F         	movff	floor@x+1,?___flge+1
  4775  003E5A  C091  F010         	movff	floor@x+2,?___flge+2
  4776  003E5E  C092  F011         	movff	floor@x+3,?___flge+3
  4777  003E62  C093  F012         	movff	floor@i,?___flge+4
  4778  003E66  C094  F013         	movff	floor@i+1,?___flge+5
  4779  003E6A  C095  F014         	movff	floor@i+2,?___flge+6
  4780  003E6E  C096  F015         	movff	floor@i+3,?___flge+7
  4781  003E72  EC2F  F026         	call	___flge	;wreg free
  4782  003E76  E219               	bc	l1657
  4783  003E78  C093  F01D         	movff	floor@i,?___fladd
  4784  003E7C  C094  F01E         	movff	floor@i+1,?___fladd+1
  4785  003E80  C095  F01F         	movff	floor@i+2,?___fladd+2
  4786  003E84  C096  F020         	movff	floor@i+3,?___fladd+3
  4787  003E88  6A21               	clrf	?___fladd+4,c
  4788  003E8A  6A22               	clrf	?___fladd+5,c
  4789  003E8C  0E80               	movlw	128
  4790  003E8E  6E23               	movwf	?___fladd+6,c
  4791  003E90  0EBF               	movlw	191
  4792  003E92  6E24               	movwf	?___fladd+7,c
  4793  003E94  EC85  F01C         	call	___fladd	;wreg free
  4794  003E98  C020  F092         	movff	?___fladd+3,?_floor+3
  4795  003E9C  C01F  F091         	movff	?___fladd+2,?_floor+2
  4796  003EA0  C01E  F090         	movff	?___fladd+1,?_floor+1
  4797  003EA4  C01D  F08F         	movff	?___fladd,?_floor
  4798  003EA8  D008               	goto	l1655
  4799  003EAA                     l1657:
  4800  003EAA  C093  F08F         	movff	floor@i,?_floor
  4801  003EAE  C094  F090         	movff	floor@i+1,?_floor+1
  4802  003EB2  C095  F091         	movff	floor@i+2,?_floor+2
  4803  003EB6  C096  F092         	movff	floor@i+3,?_floor+3
  4804  003EBA                     l1655:
  4805  003EBA  0012               	return	
  4806  003EBC                     __end_of_floor:
  4807                           	opt stack 0
  4808                           tblptru	equ	0xFF8
  4809                           tblptrh	equ	0xFF7
  4810                           tblptrl	equ	0xFF6
  4811                           tablat	equ	0xFF5
  4812                           prodh	equ	0xFF4
  4813                           prodl	equ	0xFF3
  4814                           intcon	equ	0xFF2
  4815                           postinc0	equ	0xFEE
  4816                           wreg	equ	0xFE8
  4817                           indf1	equ	0xFE7
  4818                           postdec1	equ	0xFE5
  4819                           fsr1h	equ	0xFE2
  4820                           fsr1l	equ	0xFE1
  4821                           indf2	equ	0xFDF
  4822                           postinc2	equ	0xFDE
  4823                           postdec2	equ	0xFDD
  4824                           plusw2	equ	0xFDB
  4825                           fsr2h	equ	0xFDA
  4826                           fsr2l	equ	0xFD9
  4827                           status	equ	0xFD8
  4828                           
  4829 ;; *************** function ___fltol *****************
  4830 ;; Defined at:
  4831 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;  f1              4   22[BANK0 ] int 
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;  exp1            1   27[BANK0 ] unsigned char 
  4836 ;;  sign1           1   26[BANK0 ] unsigned char 
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  4   22[BANK0 ] long 
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : F/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4846 ;;      Params:         0       4       0       0       0       0       0
  4847 ;;      Locals:         0       2       0       0       0       0       0
  4848 ;;      Temps:          4       0       0       0       0       0       0
  4849 ;;      Totals:         4       6       0       0       0       0       0
  4850 ;;Total ram usage:       10 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    2
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_doWork
  4857 ;;		_setEventData
  4858 ;;		_exp
  4859 ;;		_floor
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text13
  4864  004798                     __ptext13:
  4865                           	opt stack 0
  4866  004798                     ___fltol:
  4867                           	opt stack 27
  4868                           
  4869                           ;incstack = 0
  4870                           ;incstack = 0
  4871  004798  0100               	movlb	0	; () banked
  4872  00479A  3578               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4873  00479C  3579               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4874  00479E  6F7B               	movwf	___fltol@exp1& (0+255),b
  4875  0047A0  677B               	tstfsz	___fltol@exp1& (0+255),b
  4876  0047A2  D005               	goto	l11788
  4877  0047A4                     l11786:
  4878                           
  4879                           ; BSR set to: 0
  4880  0047A4  6B76               	clrf	?___fltol& (0+255),b
  4881  0047A6  6B77               	clrf	(?___fltol+1)& (0+255),b
  4882  0047A8  6B78               	clrf	(?___fltol+2)& (0+255),b
  4883  0047AA  6B79               	clrf	(?___fltol+3)& (0+255),b
  4884  0047AC  D043               	goto	l1666
  4885  0047AE                     l11788:
  4886                           
  4887                           ; BSR set to: 0
  4888  0047AE  C076  F042         	movff	___fltol@f1,??___fltol
  4889  0047B2  C077  F043         	movff	___fltol@f1+1,??___fltol+1
  4890  0047B6  C078  F044         	movff	___fltol@f1+2,??___fltol+2
  4891  0047BA  C079  F045         	movff	___fltol@f1+3,??___fltol+3
  4892  0047BE  0E20               	movlw	32
  4893  0047C0  D005               	goto	u10260
  4894  0047C2                     u10265:
  4895  0047C2  90D8               	bcf	status,0,c
  4896  0047C4  3245               	rrcf	??___fltol+3,f,c
  4897  0047C6  3244               	rrcf	??___fltol+2,f,c
  4898  0047C8  3243               	rrcf	??___fltol+1,f,c
  4899  0047CA  3242               	rrcf	??___fltol,f,c
  4900  0047CC                     u10260:
  4901  0047CC  2EE8               	decfsz	wreg,f,c
  4902  0047CE  D7F9               	goto	u10265
  4903  0047D0  5042               	movf	??___fltol,w,c
  4904  0047D2  6F7A               	movwf	___fltol@sign1& (0+255),b
  4905                           
  4906                           ; BSR set to: 0
  4907  0047D4  8F78               	bsf	(___fltol@f1+2)& (0+255),7,b
  4908                           
  4909                           ; BSR set to: 0
  4910  0047D6  6B79               	clrf	(___fltol@f1+3)& (0+255),b
  4911                           
  4912                           ; BSR set to: 0
  4913  0047D8  0E96               	movlw	150
  4914  0047DA  5F7B               	subwf	___fltol@exp1& (0+255),f,b
  4915                           
  4916                           ; BSR set to: 0
  4917  0047DC  AF7B               	btfss	___fltol@exp1& (0+255),7,b
  4918  0047DE  D00C               	goto	l11806
  4919                           
  4920                           ; BSR set to: 0
  4921  0047E0  517B               	movf	___fltol@exp1& (0+255),w,b
  4922  0047E2  0A80               	xorlw	128
  4923  0047E4  0F97               	addlw	151
  4924  0047E6  E3DE               	bnc	l11786
  4925  0047E8                     l11802:
  4926                           
  4927                           ; BSR set to: 0
  4928  0047E8  90D8               	bcf	status,0,c
  4929  0047EA  3379               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4930  0047EC  3378               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4931  0047EE  3377               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4932  0047F0  3376               	rrcf	___fltol@f1& (0+255),f,b
  4933                           
  4934                           ; BSR set to: 0
  4935  0047F2  3F7B               	incfsz	___fltol@exp1& (0+255),f,b
  4936  0047F4  D7F9               	goto	l11802
  4937  0047F6  D00C               	goto	l11814
  4938  0047F8                     l11806:
  4939                           
  4940                           ; BSR set to: 0
  4941  0047F8  0E1F               	movlw	31
  4942  0047FA  657B               	cpfsgt	___fltol@exp1& (0+255),b
  4943  0047FC  D007               	goto	l11812
  4944  0047FE  D7D2               	goto	l11786
  4945  004800                     l11810:
  4946                           
  4947                           ; BSR set to: 0
  4948  004800  90D8               	bcf	status,0,c
  4949  004802  3776               	rlcf	___fltol@f1& (0+255),f,b
  4950  004804  3777               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4951  004806  3778               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4952  004808  3779               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4953  00480A  077B               	decf	___fltol@exp1& (0+255),f,b
  4954  00480C                     l11812:
  4955                           
  4956                           ; BSR set to: 0
  4957  00480C  677B               	tstfsz	___fltol@exp1& (0+255),b
  4958  00480E  D7F8               	goto	l11810
  4959  004810                     l11814:
  4960                           
  4961                           ; BSR set to: 0
  4962  004810  517A               	movf	___fltol@sign1& (0+255),w,b
  4963  004812  E008               	bz	l11818
  4964                           
  4965                           ; BSR set to: 0
  4966  004814  1F79               	comf	(___fltol@f1+3)& (0+255),f,b
  4967  004816  1F78               	comf	(___fltol@f1+2)& (0+255),f,b
  4968  004818  1F77               	comf	(___fltol@f1+1)& (0+255),f,b
  4969  00481A  6D76               	negf	___fltol@f1& (0+255),b
  4970  00481C  0E00               	movlw	0
  4971  00481E  2377               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4972  004820  2378               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4973  004822  2379               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4974  004824                     l11818:
  4975                           
  4976                           ; BSR set to: 0
  4977  004824  C076  F076         	movff	___fltol@f1,?___fltol
  4978  004828  C077  F077         	movff	___fltol@f1+1,?___fltol+1
  4979  00482C  C078  F078         	movff	___fltol@f1+2,?___fltol+2
  4980  004830  C079  F079         	movff	___fltol@f1+3,?___fltol+3
  4981  004834                     l1666:
  4982                           
  4983                           ; BSR set to: 0
  4984  004834  0012               	return	
  4985  004836                     __end_of___fltol:
  4986                           	opt stack 0
  4987                           tblptru	equ	0xFF8
  4988                           tblptrh	equ	0xFF7
  4989                           tblptrl	equ	0xFF6
  4990                           tablat	equ	0xFF5
  4991                           prodh	equ	0xFF4
  4992                           prodl	equ	0xFF3
  4993                           intcon	equ	0xFF2
  4994                           postinc0	equ	0xFEE
  4995                           wreg	equ	0xFE8
  4996                           indf1	equ	0xFE7
  4997                           postdec1	equ	0xFE5
  4998                           fsr1h	equ	0xFE2
  4999                           fsr1l	equ	0xFE1
  5000                           indf2	equ	0xFDF
  5001                           postinc2	equ	0xFDE
  5002                           postdec2	equ	0xFDD
  5003                           plusw2	equ	0xFDB
  5004                           fsr2h	equ	0xFDA
  5005                           fsr2l	equ	0xFD9
  5006                           status	equ	0xFD8
  5007                           
  5008 ;; *************** function _frexp *****************
  5009 ;; Defined at:
  5010 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;  value           4   13[COMRAM] long 
  5013 ;;  eptr            2   17[COMRAM] PTR int 
  5014 ;;		 -> log@exponent(2), floor@expon(2), 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;		None
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  4   13[COMRAM] PTR int 
  5019 ;; Registers used:
  5020 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5021 ;; Tracked objects:
  5022 ;;		On entry : F/0
  5023 ;;		On exit  : F/0
  5024 ;;		Unchanged: F/0
  5025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5026 ;;      Params:         6       0       0       0       0       0       0
  5027 ;;      Locals:         0       0       0       0       0       0       0
  5028 ;;      Temps:          3       0       0       0       0       0       0
  5029 ;;      Totals:         9       0       0       0       0       0       0
  5030 ;;Total ram usage:        9 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    2
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		_floor
  5037 ;;		_log
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           	psect	text14
  5042  0048CC                     __ptext14:
  5043                           	opt stack 0
  5044  0048CC                     _frexp:
  5045                           	opt stack 26
  5046                           
  5047                           ; BSR set to: 0
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;incstack = 0
  5051                           ;incstack = 0
  5052  0048CC  EE20  F00E         	lfsr	2,frexp@value
  5053  0048D0  50DE               	movf	postinc2,w,c
  5054  0048D2  10DE               	iorwf	postinc2,w,c
  5055  0048D4  10DE               	iorwf	postinc2,w,c
  5056  0048D6  10DE               	iorwf	postinc2,w,c
  5057  0048D8  E10C               	bnz	l11772
  5058                           
  5059                           ; BSR set to: 0
  5060  0048DA  C012  FFD9         	movff	frexp@eptr,fsr2l
  5061  0048DE  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5062  0048E2  0E00               	movlw	0
  5063  0048E4  6ADE               	clrf	postinc2,c
  5064  0048E6  6ADD               	clrf	postdec2,c
  5065                           
  5066                           ; BSR set to: 0
  5067  0048E8  6A0E               	clrf	?_frexp,c
  5068  0048EA  6A0F               	clrf	?_frexp+1,c
  5069  0048EC  6A10               	clrf	?_frexp+2,c
  5070  0048EE  6A11               	clrf	?_frexp+3,c
  5071  0048F0  D02F               	goto	l1682
  5072  0048F2                     l11772:
  5073                           
  5074                           ; BSR set to: 0
  5075  0048F2  5011               	movf	frexp@value+3,w,c
  5076  0048F4  0B7F               	andlw	127
  5077  0048F6  6E14               	movwf	??_frexp& (0+255),c
  5078  0048F8  90D8               	bcf	status,0,c
  5079  0048FA  3414               	rlcf	??_frexp,w,c
  5080  0048FC  6E15               	movwf	(??_frexp+1)& (0+255),c
  5081  0048FE  6A16               	clrf	(??_frexp+2)& (0+255),c
  5082  004900  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  5083  004902  C012  FFD9         	movff	frexp@eptr,fsr2l
  5084  004906  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5085  00490A  C015  FFDE         	movff	??_frexp+1,postinc2
  5086  00490E  C016  FFDD         	movff	??_frexp+2,postdec2
  5087  004912  3410               	rlcf	frexp@value+2,w,c
  5088  004914  36E8               	rlcf	wreg,f,c
  5089  004916  0B01               	andlw	1
  5090  004918  C012  FFD9         	movff	frexp@eptr,fsr2l
  5091  00491C  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5092  004920  12DE               	iorwf	postinc2,f,c
  5093  004922  0E00               	movlw	0
  5094  004924  12DD               	iorwf	postdec2,f,c
  5095                           
  5096                           ; BSR set to: 0
  5097  004926  C012  FFD9         	movff	frexp@eptr,fsr2l
  5098  00492A  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5099  00492E  0E82               	movlw	130
  5100  004930  26DE               	addwf	postinc2,f,c
  5101  004932  0EFF               	movlw	255
  5102  004934  22DD               	addwfc	postdec2,f,c
  5103                           
  5104                           ; BSR set to: 0
  5105  004936  5011               	movf	frexp@value+3,w,c
  5106  004938  0B80               	andlw	-128
  5107  00493A  093F               	iorlw	63
  5108  00493C  6E11               	movwf	frexp@value+3,c
  5109                           
  5110                           ; BSR set to: 0
  5111  00493E  9E10               	bcf	frexp@value+2,7,c
  5112                           
  5113                           ; BSR set to: 0
  5114  004940  C00E  F00E         	movff	frexp@value,?_frexp
  5115  004944  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  5116  004948  C010  F010         	movff	frexp@value+2,?_frexp+2
  5117  00494C  C011  F011         	movff	frexp@value+3,?_frexp+3
  5118  004950                     l1682:
  5119                           
  5120                           ; BSR set to: 0
  5121  004950  0012               	return	
  5122  004952                     __end_of_frexp:
  5123                           	opt stack 0
  5124                           tblptru	equ	0xFF8
  5125                           tblptrh	equ	0xFF7
  5126                           tblptrl	equ	0xFF6
  5127                           tablat	equ	0xFF5
  5128                           prodh	equ	0xFF4
  5129                           prodl	equ	0xFF3
  5130                           intcon	equ	0xFF2
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           indf1	equ	0xFE7
  5134                           postdec1	equ	0xFE5
  5135                           fsr1h	equ	0xFE2
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           plusw2	equ	0xFDB
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function ___flge *****************
  5146 ;; Defined at:
  5147 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;  ff1             4   13[COMRAM] PTR int 
  5150 ;;  ff2             4   17[COMRAM] PTR int 
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;		None
  5153 ;; Return value:  Size  Location     Type
  5154 ;;		None               void
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5162 ;;      Params:         8       0       0       0       0       0       0
  5163 ;;      Locals:         0       0       0       0       0       0       0
  5164 ;;      Temps:          0       0       0       0       0       0       0
  5165 ;;      Totals:         8       0       0       0       0       0       0
  5166 ;;Total ram usage:        8 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    2
  5169 ;; This function calls:
  5170 ;;		Nothing
  5171 ;; This function is called by:
  5172 ;;		_exp
  5173 ;;		_floor
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text15
  5178  004C5E                     __ptext15:
  5179                           	opt stack 0
  5180  004C5E                     ___flge:
  5181                           	opt stack 26
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;incstack = 0
  5185                           ;incstack = 0
  5186  004C5E  AE11               	btfss	___flge@ff1+3,7,c
  5187  004C60  D009               	goto	l11746
  5188  004C62  6C0E               	negf	___flge@ff1,c
  5189  004C64  1E0F               	comf	___flge@ff1+1,f,c
  5190  004C66  B0D8               	btfsc	status,0,c
  5191  004C68  2A0F               	incf	___flge@ff1+1,f,c
  5192  004C6A  1E10               	comf	___flge@ff1+2,f,c
  5193  004C6C  B0D8               	btfsc	status,0,c
  5194  004C6E  2A10               	incf	___flge@ff1+2,f,c
  5195  004C70  0E80               	movlw	128
  5196  004C72  5611               	subfwb	___flge@ff1+3,f,c
  5197  004C74                     l11746:
  5198  004C74  AE15               	btfss	___flge@ff2+3,7,c
  5199  004C76  D009               	goto	l1613
  5200  004C78  6C12               	negf	___flge@ff2,c
  5201  004C7A  1E13               	comf	___flge@ff2+1,f,c
  5202  004C7C  B0D8               	btfsc	status,0,c
  5203  004C7E  2A13               	incf	___flge@ff2+1,f,c
  5204  004C80  1E14               	comf	___flge@ff2+2,f,c
  5205  004C82  B0D8               	btfsc	status,0,c
  5206  004C84  2A14               	incf	___flge@ff2+2,f,c
  5207  004C86  0E80               	movlw	128
  5208  004C88  5615               	subfwb	___flge@ff2+3,f,c
  5209  004C8A                     l1613:
  5210  004C8A  0E80               	movlw	128
  5211  004C8C  1A11               	xorwf	___flge@ff1+3,f,c
  5212  004C8E  1A15               	xorwf	___flge@ff2+3,f,c
  5213  004C90  5012               	movf	___flge@ff2,w,c
  5214  004C92  5C0E               	subwf	___flge@ff1,w,c
  5215  004C94  5013               	movf	___flge@ff2+1,w,c
  5216  004C96  580F               	subwfb	___flge@ff1+1,w,c
  5217  004C98  5014               	movf	___flge@ff2+2,w,c
  5218  004C9A  5810               	subwfb	___flge@ff1+2,w,c
  5219  004C9C  5015               	movf	___flge@ff2+3,w,c
  5220  004C9E  5811               	subwfb	___flge@ff1+3,w,c
  5221  004CA0  E202               	bc	l11752
  5222  004CA2  90D8               	bcf	status,0,c
  5223  004CA4  D001               	goto	l1614
  5224  004CA6                     l11752:
  5225  004CA6  80D8               	bsf	status,0,c
  5226  004CA8                     l1614:
  5227  004CA8  0012               	return	
  5228  004CAA                     __end_of___flge:
  5229                           	opt stack 0
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodh	equ	0xFF4
  5235                           prodl	equ	0xFF3
  5236                           intcon	equ	0xFF2
  5237                           postinc0	equ	0xFEE
  5238                           wreg	equ	0xFE8
  5239                           indf1	equ	0xFE7
  5240                           postdec1	equ	0xFE5
  5241                           fsr1h	equ	0xFE2
  5242                           fsr1l	equ	0xFE1
  5243                           indf2	equ	0xFDF
  5244                           postinc2	equ	0xFDE
  5245                           postdec2	equ	0xFDD
  5246                           plusw2	equ	0xFDB
  5247                           fsr2h	equ	0xFDA
  5248                           fsr2l	equ	0xFD9
  5249                           status	equ	0xFD8
  5250                           
  5251 ;; *************** function ___altofl *****************
  5252 ;; Defined at:
  5253 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;  c               4   42[BANK0 ] long 
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;  sign            1   46[BANK0 ] unsigned char 
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  4   42[BANK0 ] unsigned char 
  5260 ;; Registers used:
  5261 ;;		wreg, status,2, status,0, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : F/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5267 ;;      Params:         0       4       0       0       0       0       0
  5268 ;;      Locals:         0       1       0       0       0       0       0
  5269 ;;      Temps:          0       0       0       0       0       0       0
  5270 ;;      Totals:         0       5       0       0       0       0       0
  5271 ;;Total ram usage:        5 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    3
  5274 ;; This function calls:
  5275 ;;		___flpack
  5276 ;; This function is called by:
  5277 ;;		_doWork
  5278 ;;		_floor
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text16
  5283  004E1E                     __ptext16:
  5284                           	opt stack 0
  5285  004E1E                     ___altofl:
  5286                           	opt stack 26
  5287                           
  5288                           ; BSR set to: 0
  5289                           
  5290                           ;incstack = 0
  5291                           ;incstack = 0
  5292  004E1E  6B8E               	clrf	___altofl@sign& (0+255),b
  5293  004E20  AF8D               	btfss	(___altofl@c+3)& (0+255),7,b
  5294  004E22  D00A               	goto	l11500
  5295                           
  5296                           ; BSR set to: 0
  5297  004E24  1F8D               	comf	(___altofl@c+3)& (0+255),f,b
  5298  004E26  1F8C               	comf	(___altofl@c+2)& (0+255),f,b
  5299  004E28  1F8B               	comf	(___altofl@c+1)& (0+255),f,b
  5300  004E2A  6D8A               	negf	___altofl@c& (0+255),b
  5301  004E2C  0E00               	movlw	0
  5302  004E2E  238B               	addwfc	(___altofl@c+1)& (0+255),f,b
  5303  004E30  238C               	addwfc	(___altofl@c+2)& (0+255),f,b
  5304  004E32  238D               	addwfc	(___altofl@c+3)& (0+255),f,b
  5305                           
  5306                           ; BSR set to: 0
  5307  004E34  0E01               	movlw	1
  5308  004E36  6F8E               	movwf	___altofl@sign& (0+255),b
  5309  004E38                     l11500:
  5310                           
  5311                           ; BSR set to: 0
  5312  004E38  C08A  F00E         	movff	___altofl@c,?___flpack
  5313  004E3C  C08B  F00F         	movff	___altofl@c+1,?___flpack+1
  5314  004E40  C08C  F010         	movff	___altofl@c+2,?___flpack+2
  5315  004E44  C08D  F011         	movff	___altofl@c+3,?___flpack+3
  5316  004E48  0E96               	movlw	150
  5317  004E4A  6E12               	movwf	?___flpack+4,c
  5318  004E4C  C08E  F013         	movff	___altofl@sign,?___flpack+5
  5319  004E50  EC6D  F021         	call	___flpack	;wreg free
  5320  004E54  C011  F08D         	movff	?___flpack+3,?___altofl+3
  5321  004E58  C010  F08C         	movff	?___flpack+2,?___altofl+2
  5322  004E5C  C00F  F08B         	movff	?___flpack+1,?___altofl+1
  5323  004E60  C00E  F08A         	movff	?___flpack,?___altofl
  5324  004E64  0012               	return	
  5325  004E66                     __end_of___altofl:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           intcon	equ	0xFF2
  5334                           postinc0	equ	0xFEE
  5335                           wreg	equ	0xFE8
  5336                           indf1	equ	0xFE7
  5337                           postdec1	equ	0xFE5
  5338                           fsr1h	equ	0xFE2
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           postdec2	equ	0xFDD
  5343                           plusw2	equ	0xFDB
  5344                           fsr2h	equ	0xFDA
  5345                           fsr2l	equ	0xFD9
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function ___asflsub *****************
  5349 ;; Defined at:
  5350 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  f1p             2   30[BANK0 ] PTR 
  5353 ;;		 -> exp@x(4), doWork@temp(4), 
  5354 ;;  f2              4   32[BANK0 ] PTR 
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;		None
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  4   30[BANK0 ] PTR 
  5359 ;; Registers used:
  5360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : F/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5366 ;;      Params:         0       6       0       0       0       0       0
  5367 ;;      Locals:         0       0       0       0       0       0       0
  5368 ;;      Temps:          0       0       0       0       0       0       0
  5369 ;;      Totals:         0       6       0       0       0       0       0
  5370 ;;Total ram usage:        6 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    5
  5373 ;; This function calls:
  5374 ;;		___flsub
  5375 ;; This function is called by:
  5376 ;;		_doWork
  5377 ;;		_exp
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text17
  5382  004C10                     __ptext17:
  5383                           	opt stack 0
  5384  004C10                     ___asflsub:
  5385                           	opt stack 24
  5386                           
  5387                           ;	Return value of ___asflsub is never used
  5388                           
  5389                           ;incstack = 0
  5390                           ;incstack = 0
  5391  004C10  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5392  004C14  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5393  004C18  0100               	movlb	0	; () banked
  5394  004C1A  CFDE F076          	movff	postinc2,?___flsub
  5395  004C1E  CFDE F077          	movff	postinc2,?___flsub+1
  5396  004C22  CFDE F078          	movff	postinc2,?___flsub+2
  5397  004C26  CFDE F079          	movff	postinc2,?___flsub+3
  5398  004C2A  C080  F07A         	movff	___asflsub@f2,?___flsub+4
  5399  004C2E  C081  F07B         	movff	___asflsub@f2+1,?___flsub+5
  5400  004C32  C082  F07C         	movff	___asflsub@f2+2,?___flsub+6
  5401  004C36  C083  F07D         	movff	___asflsub@f2+3,?___flsub+7
  5402  004C3A  ECBB  F027         	call	___flsub	;wreg free
  5403  004C3E  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5404  004C42  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5405  004C46  0100               	movlb	0	; () banked
  5406  004C48  C076  FFDE         	movff	?___flsub,postinc2
  5407  004C4C  C077  FFDE         	movff	?___flsub+1,postinc2
  5408  004C50  C078  FFDE         	movff	?___flsub+2,postinc2
  5409  004C54  C079  FFDD         	movff	?___flsub+3,postdec2
  5410  004C58  06D9               	decf	fsr2l,f,c
  5411  004C5A  06D9               	decf	fsr2l,f,c
  5412                           
  5413                           ; BSR set to: 0
  5414  004C5C  0012               	return	
  5415  004C5E                     __end_of___asflsub:
  5416                           	opt stack 0
  5417                           tblptru	equ	0xFF8
  5418                           tblptrh	equ	0xFF7
  5419                           tblptrl	equ	0xFF6
  5420                           tablat	equ	0xFF5
  5421                           prodh	equ	0xFF4
  5422                           prodl	equ	0xFF3
  5423                           intcon	equ	0xFF2
  5424                           postinc0	equ	0xFEE
  5425                           wreg	equ	0xFE8
  5426                           indf1	equ	0xFE7
  5427                           postdec1	equ	0xFE5
  5428                           fsr1h	equ	0xFE2
  5429                           fsr1l	equ	0xFE1
  5430                           indf2	equ	0xFDF
  5431                           postinc2	equ	0xFDE
  5432                           postdec2	equ	0xFDD
  5433                           plusw2	equ	0xFDB
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8
  5437                           
  5438 ;; *************** function ___flsub *****************
  5439 ;; Defined at:
  5440 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;  f1              4   22[BANK0 ] PTR 
  5443 ;;  f2              4   26[BANK0 ] PTR 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;		None
  5446 ;; Return value:  Size  Location     Type
  5447 ;;                  4   22[BANK0 ] PTR 
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0, cstack
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5455 ;;      Params:         0       8       0       0       0       0       0
  5456 ;;      Locals:         0       0       0       0       0       0       0
  5457 ;;      Temps:          0       0       0       0       0       0       0
  5458 ;;      Totals:         0       8       0       0       0       0       0
  5459 ;;Total ram usage:        8 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; Hardware stack levels required when called:    4
  5462 ;; This function calls:
  5463 ;;		___fladd
  5464 ;; This function is called by:
  5465 ;;		_doWork
  5466 ;;		___asflsub
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text18
  5471  004F76                     __ptext18:
  5472                           	opt stack 0
  5473  004F76                     ___flsub:
  5474                           	opt stack 25
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;incstack = 0
  5478                           ;incstack = 0
  5479  004F76  0100               	movlb	0	; () banked
  5480  004F78  0E80               	movlw	128
  5481  004F7A  1B7D               	xorwf	(___flsub@f2+3)& (0+255),f,b
  5482                           
  5483                           ; BSR set to: 0
  5484  004F7C  C076  F01D         	movff	___flsub@f1,?___fladd
  5485  004F80  C077  F01E         	movff	___flsub@f1+1,?___fladd+1
  5486  004F84  C078  F01F         	movff	___flsub@f1+2,?___fladd+2
  5487  004F88  C079  F020         	movff	___flsub@f1+3,?___fladd+3
  5488  004F8C  C07A  F021         	movff	___flsub@f2,?___fladd+4
  5489  004F90  C07B  F022         	movff	___flsub@f2+1,?___fladd+5
  5490  004F94  C07C  F023         	movff	___flsub@f2+2,?___fladd+6
  5491  004F98  C07D  F024         	movff	___flsub@f2+3,?___fladd+7
  5492  004F9C  EC85  F01C         	call	___fladd	;wreg free
  5493  004FA0  C020  F079         	movff	?___fladd+3,?___flsub+3
  5494  004FA4  C01F  F078         	movff	?___fladd+2,?___flsub+2
  5495  004FA8  C01E  F077         	movff	?___fladd+1,?___flsub+1
  5496  004FAC  C01D  F076         	movff	?___fladd,?___flsub
  5497  004FB0  0012               	return	
  5498  004FB2                     __end_of___flsub:
  5499                           	opt stack 0
  5500                           tblptru	equ	0xFF8
  5501                           tblptrh	equ	0xFF7
  5502                           tblptrl	equ	0xFF6
  5503                           tablat	equ	0xFF5
  5504                           prodh	equ	0xFF4
  5505                           prodl	equ	0xFF3
  5506                           intcon	equ	0xFF2
  5507                           postinc0	equ	0xFEE
  5508                           wreg	equ	0xFE8
  5509                           indf1	equ	0xFE7
  5510                           postdec1	equ	0xFE5
  5511                           fsr1h	equ	0xFE2
  5512                           fsr1l	equ	0xFE1
  5513                           indf2	equ	0xFDF
  5514                           postinc2	equ	0xFDE
  5515                           postdec2	equ	0xFDD
  5516                           plusw2	equ	0xFDB
  5517                           fsr2h	equ	0xFDA
  5518                           fsr2l	equ	0xFD9
  5519                           status	equ	0xFD8
  5520                           
  5521 ;; *************** function ___asflmul *****************
  5522 ;; Defined at:
  5523 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  mp              1    wreg     PTR 
  5526 ;;		 -> exp@x(4), 
  5527 ;;  multiplicand    4   22[BANK0 ] PTR 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  mp              1   65[COMRAM] PTR 
  5530 ;;		 -> exp@x(4), 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  4   22[BANK0 ] PTR 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : F/0
  5537 ;;		On exit  : F/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5540 ;;      Params:         0       4       0       0       0       0       0
  5541 ;;      Locals:         1       0       0       0       0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0
  5543 ;;      Totals:         1       4       0       0       0       0       0
  5544 ;;Total ram usage:        5 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    4
  5547 ;; This function calls:
  5548 ;;		___flmul
  5549 ;; This function is called by:
  5550 ;;		_exp
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text19
  5555  004CAA                     __ptext19:
  5556                           	opt stack 0
  5557  004CAA                     ___asflmul:
  5558                           	opt stack 24
  5559                           
  5560                           ;incstack = 0
  5561                           ;incstack = 0
  5562                           ;___asflmul@mp stored from wreg
  5563  004CAA  CFE8 F042          	movff	wreg,___asflmul@mp
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;	Return value of ___asflmul is never used
  5567  004CAE  5042               	movf	___asflmul@mp,w,c
  5568  004CB0  6ED9               	movwf	fsr2l,c
  5569  004CB2  6ADA               	clrf	fsr2h,c
  5570  004CB4  CFDE F060          	movff	postinc2,?___flmul
  5571  004CB8  CFDE F061          	movff	postinc2,?___flmul+1
  5572  004CBC  CFDE F062          	movff	postinc2,?___flmul+2
  5573  004CC0  CFDE F063          	movff	postinc2,?___flmul+3
  5574  004CC4  C076  F064         	movff	___asflmul@multiplicand,?___flmul+4
  5575  004CC8  C077  F065         	movff	___asflmul@multiplicand+1,?___flmul+5
  5576  004CCC  C078  F066         	movff	___asflmul@multiplicand+2,?___flmul+6
  5577  004CD0  C079  F067         	movff	___asflmul@multiplicand+3,?___flmul+7
  5578  004CD4  EC4A  F020         	call	___flmul	;wreg free
  5579  004CD8  5042               	movf	___asflmul@mp,w,c
  5580  004CDA  6ED9               	movwf	fsr2l,c
  5581  004CDC  6ADA               	clrf	fsr2h,c
  5582  004CDE  0100               	movlb	0	; () banked
  5583  004CE0  C060  FFDE         	movff	?___flmul,postinc2
  5584  004CE4  C061  FFDE         	movff	?___flmul+1,postinc2
  5585  004CE8  C062  FFDE         	movff	?___flmul+2,postinc2
  5586  004CEC  C063  FFDD         	movff	?___flmul+3,postdec2
  5587  004CF0  06D9               	decf	fsr2l,f,c
  5588  004CF2  06D9               	decf	fsr2l,f,c
  5589                           
  5590                           ; BSR set to: 0
  5591  004CF4  0012               	return	
  5592  004CF6                     __end_of___asflmul:
  5593                           	opt stack 0
  5594                           tblptru	equ	0xFF8
  5595                           tblptrh	equ	0xFF7
  5596                           tblptrl	equ	0xFF6
  5597                           tablat	equ	0xFF5
  5598                           prodh	equ	0xFF4
  5599                           prodl	equ	0xFF3
  5600                           intcon	equ	0xFF2
  5601                           postinc0	equ	0xFEE
  5602                           wreg	equ	0xFE8
  5603                           indf1	equ	0xFE7
  5604                           postdec1	equ	0xFE5
  5605                           fsr1h	equ	0xFE2
  5606                           fsr1l	equ	0xFE1
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           plusw2	equ	0xFDB
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function ___fldiv *****************
  5616 ;; Defined at:
  5617 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  f1              4   43[COMRAM] PTR 
  5620 ;;  f2              4   47[COMRAM] PTR 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  f3              4   58[COMRAM] PTR 
  5623 ;;  sign            1   64[COMRAM] unsigned char 
  5624 ;;  exp             1   63[COMRAM] unsigned char 
  5625 ;;  cntr            1   62[COMRAM] unsigned char 
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  4   43[COMRAM] unsigned char 
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/1
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5635 ;;      Params:         8       0       0       0       0       0       0
  5636 ;;      Locals:        14       0       0       0       0       0       0
  5637 ;;      Temps:          0       0       0       0       0       0       0
  5638 ;;      Totals:        22       0       0       0       0       0       0
  5639 ;;Total ram usage:       22 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    3
  5642 ;; This function calls:
  5643 ;;		___flpack
  5644 ;; This function is called by:
  5645 ;;		_doWork
  5646 ;;		_Celsius2Fahrenheit
  5647 ;;		___asfldiv
  5648 ;;		_exp
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text20
  5653  0045AC                     __ptext20:
  5654                           	opt stack 0
  5655  0045AC                     ___fldiv:
  5656                           	opt stack 26
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;incstack = 0
  5660                           ;incstack = 0
  5661  0045AC  342E               	rlcf	(___fldiv@f1+2)& (0+255),w,c
  5662  0045AE  342F               	rlcf	(___fldiv@f1+3)& (0+255),w,c
  5663  0045B0  6E40               	movwf	___fldiv@exp,c
  5664  0045B2  6640               	tstfsz	___fldiv@exp& (0+255),c
  5665  0045B4  D001               	goto	l11584
  5666  0045B6  D005               	goto	u10040
  5667  0045B8                     l11584:
  5668  0045B8  3432               	rlcf	(___fldiv@f2+2)& (0+255),w,c
  5669  0045BA  3433               	rlcf	(___fldiv@f2+3)& (0+255),w,c
  5670  0045BC  6E41               	movwf	___fldiv@sign,c
  5671  0045BE  6641               	tstfsz	___fldiv@sign& (0+255),c
  5672  0045C0  D005               	goto	l11588
  5673  0045C2                     u10040:
  5674  0045C2  6A2C               	clrf	?___fldiv,c
  5675  0045C4  6A2D               	clrf	?___fldiv+1,c
  5676  0045C6  6A2E               	clrf	?___fldiv+2,c
  5677  0045C8  6A2F               	clrf	?___fldiv+3,c
  5678  0045CA  D043               	goto	l1605
  5679  0045CC                     l11588:
  5680  0045CC  5041               	movf	___fldiv@sign,w,c
  5681  0045CE  0F89               	addlw	137
  5682  0045D0  5E40               	subwf	___fldiv@exp,f,c
  5683  0045D2  C02F  F041         	movff	___fldiv@f1+3,___fldiv@sign
  5684  0045D6  5033               	movf	(___fldiv@f2+3)& (0+255),w,c
  5685  0045D8  1A41               	xorwf	___fldiv@sign,f,c
  5686  0045DA  0E80               	movlw	128
  5687  0045DC  1641               	andwf	___fldiv@sign,f,c
  5688  0045DE  8E2E               	bsf	___fldiv@f1+2,7,c
  5689  0045E0  6A2F               	clrf	___fldiv@f1+3,c
  5690  0045E2  8E32               	bsf	___fldiv@f2+2,7,c
  5691  0045E4  6A33               	clrf	___fldiv@f2+3,c
  5692  0045E6  0E20               	movlw	32
  5693  0045E8  6E3F               	movwf	___fldiv@cntr,c
  5694  0045EA                     l11600:
  5695  0045EA  90D8               	bcf	status,0,c
  5696  0045EC  363B               	rlcf	___fldiv@f3,f,c
  5697  0045EE  363C               	rlcf	___fldiv@f3+1,f,c
  5698  0045F0  363D               	rlcf	___fldiv@f3+2,f,c
  5699  0045F2  363E               	rlcf	___fldiv@f3+3,f,c
  5700  0045F4  5030               	movf	___fldiv@f2,w,c
  5701  0045F6  5C2C               	subwf	___fldiv@f1,w,c
  5702  0045F8  5031               	movf	___fldiv@f2+1,w,c
  5703  0045FA  582D               	subwfb	___fldiv@f1+1,w,c
  5704  0045FC  5032               	movf	___fldiv@f2+2,w,c
  5705  0045FE  582E               	subwfb	___fldiv@f1+2,w,c
  5706  004600  5033               	movf	___fldiv@f2+3,w,c
  5707  004602  582F               	subwfb	___fldiv@f1+3,w,c
  5708  004604  E309               	bnc	l11608
  5709  004606  5030               	movf	___fldiv@f2,w,c
  5710  004608  5E2C               	subwf	___fldiv@f1,f,c
  5711  00460A  5031               	movf	___fldiv@f2+1,w,c
  5712  00460C  5A2D               	subwfb	___fldiv@f1+1,f,c
  5713  00460E  5032               	movf	___fldiv@f2+2,w,c
  5714  004610  5A2E               	subwfb	___fldiv@f1+2,f,c
  5715  004612  5033               	movf	___fldiv@f2+3,w,c
  5716  004614  5A2F               	subwfb	___fldiv@f1+3,f,c
  5717  004616  803B               	bsf	___fldiv@f3,0,c
  5718  004618                     l11608:
  5719  004618  90D8               	bcf	status,0,c
  5720  00461A  362C               	rlcf	___fldiv@f1,f,c
  5721  00461C  362D               	rlcf	___fldiv@f1+1,f,c
  5722  00461E  362E               	rlcf	___fldiv@f1+2,f,c
  5723  004620  362F               	rlcf	___fldiv@f1+3,f,c
  5724  004622  2E3F               	decfsz	___fldiv@cntr,f,c
  5725  004624  D7E2               	goto	l11600
  5726  004626  C03B  F00E         	movff	___fldiv@f3,?___flpack
  5727  00462A  C03C  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5728  00462E  C03D  F010         	movff	___fldiv@f3+2,?___flpack+2
  5729  004632  C03E  F011         	movff	___fldiv@f3+3,?___flpack+3
  5730  004636  C040  F012         	movff	___fldiv@exp,?___flpack+4
  5731  00463A  C041  F013         	movff	___fldiv@sign,?___flpack+5
  5732  00463E  EC6D  F021         	call	___flpack	;wreg free
  5733  004642  C011  F02F         	movff	?___flpack+3,?___fldiv+3
  5734  004646  C010  F02E         	movff	?___flpack+2,?___fldiv+2
  5735  00464A  C00F  F02D         	movff	?___flpack+1,?___fldiv+1
  5736  00464E  C00E  F02C         	movff	?___flpack,?___fldiv
  5737  004652                     l1605:
  5738  004652  0012               	return	
  5739  004654                     __end_of___fldiv:
  5740                           	opt stack 0
  5741                           tblptru	equ	0xFF8
  5742                           tblptrh	equ	0xFF7
  5743                           tblptrl	equ	0xFF6
  5744                           tablat	equ	0xFF5
  5745                           prodh	equ	0xFF4
  5746                           prodl	equ	0xFF3
  5747                           intcon	equ	0xFF2
  5748                           postinc0	equ	0xFEE
  5749                           wreg	equ	0xFE8
  5750                           indf1	equ	0xFE7
  5751                           postdec1	equ	0xFE5
  5752                           fsr1h	equ	0xFE2
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           plusw2	equ	0xFDB
  5758                           fsr2h	equ	0xFDA
  5759                           fsr2l	equ	0xFD9
  5760                           status	equ	0xFD8
  5761                           
  5762 ;; *************** function _vscp_doOneSecondWork *****************
  5763 ;; Defined at:
  5764 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;		None
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;		None
  5769 ;; Return value:  Size  Location     Type
  5770 ;;		None               void
  5771 ;; Registers used:
  5772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : F/0
  5775 ;;		On exit  : F/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5778 ;;      Params:         0       0       0       0       0       0       0
  5779 ;;      Locals:         0       0       0       0       0       0       0
  5780 ;;      Temps:          0       1       0       0       0       0       0
  5781 ;;      Totals:         0       1       0       0       0       0       0
  5782 ;;Total ram usage:        1 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    8
  5785 ;; This function calls:
  5786 ;;		_vscp_getZone
  5787 ;;		_vscp_getSubzone
  5788 ;;		_vscp_sendHeartBeat
  5789 ;; This function is called by:
  5790 ;;		_main
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text21
  5795  004CF6                     __ptext21:
  5796                           	opt stack 0
  5797  004CF6                     _vscp_doOneSecondWork:
  5798                           	opt stack 22
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;vscp_firmware.c: 518: ++vscp_second;
  5802                           
  5803                           ;incstack = 0
  5804                           ;incstack = 0
  5805  004CF6  2A51               	incf	_vscp_second,f,c
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  5809  004CF8  0E3B               	movlw	59
  5810  004CFA  6451               	cpfsgt	_vscp_second,c
  5811  004CFC  D00C               	goto	l10214
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;vscp_firmware.c: 521: vscp_second = 0;
  5815  004CFE  6A51               	clrf	_vscp_second,c
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;vscp_firmware.c: 522: vscp_minute++;
  5819  004D00  2BB9               	incf	_vscp_minute& (0+255),f,b
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  5823  004D02  51BB               	movf	_vscp_node_state& (0+255),w,b
  5824  004D04  0A03               	xorlw	3
  5825  004D06  E107               	bnz	l10214
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  5829                           ;vscp_firmware.c: 527: vscp_getSubzone());
  5830  004D08  EC40  F02A         	call	_vscp_getSubzone	;wreg free
  5831  004D0C  6E44               	movwf	?_vscp_sendHeartBeat,c
  5832  004D0E  EC45  F02A         	call	_vscp_getZone	;wreg free
  5833  004D12  ECFA  F028         	call	_vscp_sendHeartBeat
  5834  004D16                     l10214:
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;vscp_firmware.c: 528: }
  5838                           ;vscp_firmware.c: 529: }
  5839                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  5840  004D16  0E3B               	movlw	59
  5841  004D18  65B9               	cpfsgt	_vscp_minute& (0+255),b
  5842  004D1A  D002               	goto	l10220
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;vscp_firmware.c: 532: vscp_minute = 0;
  5846  004D1C  6BB9               	clrf	_vscp_minute& (0+255),b
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;vscp_firmware.c: 533: vscp_hour++;
  5850  004D1E  2BB7               	incf	_vscp_hour& (0+255),f,b
  5851  004D20                     l10220:
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;vscp_firmware.c: 534: }
  5855                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  5856  004D20  0E17               	movlw	23
  5857  004D22  65B7               	cpfsgt	_vscp_hour& (0+255),b
  5858  004D24  D001               	goto	l10224
  5859                           
  5860                           ; BSR set to: 0
  5861  004D26  6BB7               	clrf	_vscp_hour& (0+255),b
  5862  004D28                     l10224:
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  5866  004D28  51BB               	movf	_vscp_node_state& (0+255),w,b
  5867  004D2A  0A03               	xorlw	3
  5868  004D2C  E109               	bnz	l1103
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  5872  004D2E  2A4C               	incf	_vscp_guid_reset,f,c
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  5876  004D30  C04C  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5877  004D34  0E0F               	movlw	15
  5878  004D36  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5879  004D38  0E02               	movlw	2
  5880  004D3A  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5881  004D3C  B0D8               	btfsc	status,0,c
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  5885  004D3E  6A4C               	clrf	_vscp_guid_reset,c
  5886  004D40                     l1103:
  5887                           
  5888                           ; BSR set to: 0
  5889  004D40  0012               	return	
  5890  004D42                     __end_of_vscp_doOneSecondWork:
  5891                           	opt stack 0
  5892                           tblptru	equ	0xFF8
  5893                           tblptrh	equ	0xFF7
  5894                           tblptrl	equ	0xFF6
  5895                           tablat	equ	0xFF5
  5896                           prodh	equ	0xFF4
  5897                           prodl	equ	0xFF3
  5898                           intcon	equ	0xFF2
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           indf1	equ	0xFE7
  5902                           postdec1	equ	0xFE5
  5903                           fsr1h	equ	0xFE2
  5904                           fsr1l	equ	0xFE1
  5905                           indf2	equ	0xFDF
  5906                           postinc2	equ	0xFDE
  5907                           postdec2	equ	0xFDD
  5908                           plusw2	equ	0xFDB
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8
  5912                           
  5913 ;; *************** function _vscp_sendHeartBeat *****************
  5914 ;; Defined at:
  5915 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  zone            1    wreg     unsigned char 
  5918 ;;  subzone         1   67[COMRAM] unsigned char 
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  zone            1   68[COMRAM] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;		None               void
  5923 ;; Registers used:
  5924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : F/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5930 ;;      Params:         1       0       0       0       0       0       0
  5931 ;;      Locals:         1       0       0       0       0       0       0
  5932 ;;      Temps:          0       0       0       0       0       0       0
  5933 ;;      Totals:         2       0       0       0       0       0       0
  5934 ;;Total ram usage:        2 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    7
  5937 ;; This function calls:
  5938 ;;		_vscp_sendEvent
  5939 ;; This function is called by:
  5940 ;;		_vscp_doOneSecondWork
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text22
  5945  0051F4                     __ptext22:
  5946                           	opt stack 0
  5947  0051F4                     _vscp_sendHeartBeat:
  5948                           	opt stack 22
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;incstack = 0
  5952                           ;incstack = 0
  5953                           ;vscp_sendHeartBeat@zone stored from wreg
  5954  0051F4  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5955                           
  5956                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  5957  0051F8  0E83               	movlw	131
  5958  0051FA  0100               	movlb	0	; () banked
  5959  0051FC  6FCA               	movwf	_vscp_omsg& (0+255),b
  5960                           
  5961                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  5962  0051FE  0E07               	movlw	7
  5963  005200  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  5964                           
  5965                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  5966  005202  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  5967  005204  0E14               	movlw	20
  5968  005206  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  5969                           
  5970                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  5971  005208  0E09               	movlw	9
  5972  00520A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  5976  00520C  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  5980  00520E  C045  F0D0         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  5984  005212  C044  F0D1         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;vscp_firmware.c: 380: vscp_sendEvent();
  5988  005216  EFE6  F028         	goto	_vscp_sendEvent	;wreg free
  5989  00521A                     __end_of_vscp_sendHeartBeat:
  5990                           	opt stack 0
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon	equ	0xFF2
  5998                           postinc0	equ	0xFEE
  5999                           wreg	equ	0xFE8
  6000                           indf1	equ	0xFE7
  6001                           postdec1	equ	0xFE5
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           postinc2	equ	0xFDE
  6006                           postdec2	equ	0xFDD
  6007                           plusw2	equ	0xFDB
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _vscp_getSubzone *****************
  6013 ;; Defined at:
  6014 ;;		line 2730 in file "../main.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      unsigned char 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : F/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6028 ;;      Params:         0       0       0       0       0       0       0
  6029 ;;      Locals:         0       0       0       0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0
  6031 ;;      Totals:         0       0       0       0       0       0       0
  6032 ;;Total ram usage:        0 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    3
  6035 ;; This function calls:
  6036 ;;		_readEEPROM
  6037 ;; This function is called by:
  6038 ;;		_vscp_doOneSecondWork
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text23
  6043  005480                     __ptext23:
  6044                           	opt stack 0
  6045  005480                     _vscp_getSubzone:
  6046                           	opt stack 26
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;main.c: 2731: return readEEPROM(0x42);
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;incstack = 0
  6053                           ;incstack = 0
  6054  005480  6A0F               	clrf	?_readEEPROM+1,c
  6055  005482  0E42               	movlw	66
  6056  005484  6E0E               	movwf	?_readEEPROM,c
  6057  005486  EF1C  F02A         	goto	_readEEPROM	;wreg free
  6058  00548A                     __end_of_vscp_getSubzone:
  6059                           	opt stack 0
  6060                           tblptru	equ	0xFF8
  6061                           tblptrh	equ	0xFF7
  6062                           tblptrl	equ	0xFF6
  6063                           tablat	equ	0xFF5
  6064                           prodh	equ	0xFF4
  6065                           prodl	equ	0xFF3
  6066                           intcon	equ	0xFF2
  6067                           postinc0	equ	0xFEE
  6068                           wreg	equ	0xFE8
  6069                           indf1	equ	0xFE7
  6070                           postdec1	equ	0xFE5
  6071                           fsr1h	equ	0xFE2
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           postdec2	equ	0xFDD
  6076                           plusw2	equ	0xFDB
  6077                           fsr2h	equ	0xFDA
  6078                           fsr2l	equ	0xFD9
  6079                           status	equ	0xFD8
  6080                           
  6081 ;; *************** function _vscp_getZone *****************
  6082 ;; Defined at:
  6083 ;;		line 2721 in file "../main.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;		None
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;		None
  6088 ;; Return value:  Size  Location     Type
  6089 ;;                  1    wreg      unsigned char 
  6090 ;; Registers used:
  6091 ;;		wreg, status,2, cstack
  6092 ;; Tracked objects:
  6093 ;;		On entry : 0/0
  6094 ;;		On exit  : 0/0
  6095 ;;		Unchanged: 0/0
  6096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6097 ;;      Params:         0       0       0       0       0       0       0
  6098 ;;      Locals:         0       0       0       0       0       0       0
  6099 ;;      Temps:          0       0       0       0       0       0       0
  6100 ;;      Totals:         0       0       0       0       0       0       0
  6101 ;;Total ram usage:        0 bytes
  6102 ;; Hardware stack levels used:    1
  6103 ;; Hardware stack levels required when called:    3
  6104 ;; This function calls:
  6105 ;;		_readEEPROM
  6106 ;; This function is called by:
  6107 ;;		_vscp_doOneSecondWork
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           	psect	text24
  6112  00548A                     __ptext24:
  6113                           	opt stack 0
  6114  00548A                     _vscp_getZone:
  6115                           	opt stack 26
  6116                           
  6117                           ;main.c: 2722: return readEEPROM(0x41);
  6118                           
  6119                           ;incstack = 0
  6120                           ;incstack = 0
  6121  00548A  6A0F               	clrf	?_readEEPROM+1,c
  6122  00548C  0E41               	movlw	65
  6123  00548E  6E0E               	movwf	?_readEEPROM,c
  6124  005490  EF1C  F02A         	goto	_readEEPROM	;wreg free
  6125  005494                     __end_of_vscp_getZone:
  6126                           	opt stack 0
  6127                           tblptru	equ	0xFF8
  6128                           tblptrh	equ	0xFF7
  6129                           tblptrl	equ	0xFF6
  6130                           tablat	equ	0xFF5
  6131                           prodh	equ	0xFF4
  6132                           prodl	equ	0xFF3
  6133                           intcon	equ	0xFF2
  6134                           postinc0	equ	0xFEE
  6135                           wreg	equ	0xFE8
  6136                           indf1	equ	0xFE7
  6137                           postdec1	equ	0xFE5
  6138                           fsr1h	equ	0xFE2
  6139                           fsr1l	equ	0xFE1
  6140                           indf2	equ	0xFDF
  6141                           postinc2	equ	0xFDE
  6142                           postdec2	equ	0xFDD
  6143                           plusw2	equ	0xFDB
  6144                           fsr2h	equ	0xFDA
  6145                           fsr2l	equ	0xFD9
  6146                           status	equ	0xFD8
  6147                           
  6148 ;; *************** function _doOneSecondWork *****************
  6149 ;; Defined at:
  6150 ;;		line 702 in file "../main.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  i               1   42[BANK0 ] unsigned char 
  6155 ;;  tmp             1   41[BANK0 ] unsigned char 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;		None               void
  6158 ;; Registers used:
  6159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : F/1
  6162 ;;		On exit  : F/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6165 ;;      Params:         0       0       0       0       0       0       0
  6166 ;;      Locals:         0       2       0       0       0       0       0
  6167 ;;      Temps:          0       2       0       0       0       0       0
  6168 ;;      Totals:         0       4       0       0       0       0       0
  6169 ;;Total ram usage:        4 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    8
  6172 ;; This function calls:
  6173 ;;		_readEEPROM
  6174 ;;		_vscp_sendEvent
  6175 ;;		_sendTempEvent
  6176 ;; This function is called by:
  6177 ;;		_main
  6178 ;; This function uses a non-reentrant model
  6179 ;;
  6180                           
  6181                           	psect	text25
  6182  003426                     __ptext25:
  6183                           	opt stack 0
  6184  003426                     _doOneSecondWork:
  6185                           	opt stack 22
  6186                           
  6187                           ; BSR set to: 1
  6188                           ;main.c: 704: uint8_t tmp;
  6189                           ;main.c: 705: uint8_t i;
  6190                           ;main.c: 708: if ( 0x03 == vscp_node_state ) {
  6191                           
  6192                           ;incstack = 0
  6193                           ;incstack = 0
  6194  003426  0100               	movlb	0	; () banked
  6195  003428  51BB               	movf	_vscp_node_state& (0+255),w,b
  6196  00342A  0A03               	xorlw	3
  6197  00342C  E001 D0B8          	bnz	l245
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;main.c: 710: for (i = 0; i < 6; i++) {
  6201  003430  6B8A               	clrf	doOneSecondWork@i& (0+255),b
  6202  003432                     l10134:
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;main.c: 713: tmp = readEEPROM(0x49 + i);
  6206  003432  0E49               	movlw	73
  6207  003434  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6208  003436  6E0E               	movwf	?_readEEPROM,c
  6209  003438  6A0F               	clrf	?_readEEPROM+1,c
  6210  00343A  0E00               	movlw	0
  6211  00343C  220F               	addwfc	?_readEEPROM+1,f,c
  6212  00343E  EC1C  F02A         	call	_readEEPROM	;wreg free
  6213  003442  0100               	movlb	0	; () banked
  6214  003444  6F89               	movwf	doOneSecondWork@tmp& (0+255),b
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;main.c: 714: if (tmp && (seconds_temp[i] > tmp)) {
  6218  003446  5189               	movf	doOneSecondWork@tmp& (0+255),w,b
  6219  003448  E016               	bz	l10144
  6220                           
  6221                           ; BSR set to: 0
  6222  00344A  0E0C               	movlw	low _seconds_temp
  6223  00344C  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6224  00344E  6ED9               	movwf	fsr2l,c
  6225  003450  6ADA               	clrf	fsr2h,c
  6226  003452  0E01               	movlw	high _seconds_temp
  6227  003454  22DA               	addwfc	fsr2h,f,c
  6228  003456  50DF               	movf	indf2,w,c
  6229  003458  6189               	cpfslt	doOneSecondWork@tmp& (0+255),b
  6230  00345A  D00D               	goto	l10144
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;main.c: 717: if ( sendTempEvent( i ) ) {
  6234  00345C  518A               	movf	doOneSecondWork@i& (0+255),w,b
  6235  00345E  ECEA  F024         	call	_sendTempEvent
  6236  003462  0900               	iorlw	0
  6237  003464  E008               	bz	l10144
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;main.c: 718: seconds_temp[i] = 0;
  6241  003466  0E0C               	movlw	low _seconds_temp
  6242  003468  0100               	movlb	0	; () banked
  6243  00346A  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6244  00346C  6ED9               	movwf	fsr2l,c
  6245  00346E  6ADA               	clrf	fsr2h,c
  6246  003470  0E01               	movlw	high _seconds_temp
  6247  003472  22DA               	addwfc	fsr2h,f,c
  6248  003474  6ADF               	clrf	indf2,c
  6249  003476                     l10144:
  6250                           
  6251                           ;main.c: 719: }
  6252                           ;main.c: 721: }
  6253                           ;main.c: 724: if (0x80 & readEEPROM(0x43 + i)) {
  6254  003476  0E43               	movlw	67
  6255  003478  0100               	movlb	0	; () banked
  6256  00347A  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6257  00347C  6E0E               	movwf	?_readEEPROM,c
  6258  00347E  6A0F               	clrf	?_readEEPROM+1,c
  6259  003480  0E00               	movlw	0
  6260  003482  220F               	addwfc	?_readEEPROM+1,f,c
  6261  003484  EC1C  F02A         	call	_readEEPROM	;wreg free
  6262  003488  0100               	movlb	0	; () banked
  6263  00348A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6264  00348C  AF87               	btfss	??_doOneSecondWork& (0+255),7,b
  6265  00348E  D084               	goto	l10198
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;main.c: 727: if (low_alarm & (1 << i)) {
  6269  003490  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6270  003494  0E01               	movlw	1
  6271  003496  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6272  003498  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6273  00349A  D002               	goto	u8244
  6274  00349C                     u8245:
  6275  00349C  90D8               	bcf	status,0,c
  6276  00349E  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6277  0034A0                     u8244:
  6278  0034A0  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6279  0034A2  D7FC               	goto	u8245
  6280  0034A4  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6281  0034A6  15B5               	andwf	_low_alarm& (0+255),w,b
  6282  0034A8  E035               	bz	l10172
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;main.c: 730: if (readEEPROM(i + 0x43) & (1<<3)) {
  6286  0034AA  D88A               	call	PL24	;call to abstracted procedure
  6287  0034AC  EC1C  F02A         	call	_readEEPROM	;wreg free
  6288  0034B0  0100               	movlb	0	; () banked
  6289  0034B2  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6290  0034B4  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  6291  0034B6  D02E               	goto	l10172
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;main.c: 733: vscp_omsg.priority = 0x00;
  6295  0034B8  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;main.c: 734: vscp_omsg.flags = 0x80 + 3;
  6299  0034BA  0E83               	movlw	131
  6300  0034BC  6FCA               	movwf	_vscp_omsg& (0+255),b
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;main.c: 736: if (readEEPROM(i + 0x43) & (1<<5)) {
  6304  0034BE  D880               	call	PL24	;call to abstracted procedure
  6305  0034C0  EC1C  F02A         	call	_readEEPROM	;wreg free
  6306  0034C4  0100               	movlb	0	; () banked
  6307  0034C6  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6308  0034C8  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6309  0034CA  D016               	goto	l10162
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;main.c: 738: if (readEEPROM(i + 0x43) & (1<<6)) {
  6313  0034CC  0E43               	movlw	67
  6314  0034CE  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6315  0034D0  6E0E               	movwf	?_readEEPROM,c
  6316  0034D2  6A0F               	clrf	?_readEEPROM+1,c
  6317  0034D4  0E00               	movlw	0
  6318  0034D6  220F               	addwfc	?_readEEPROM+1,f,c
  6319  0034D8  EC1C  F02A         	call	_readEEPROM	;wreg free
  6320  0034DC  0100               	movlb	0	; () banked
  6321  0034DE  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6322  0034E0  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6323  0034E2  D005               	goto	l10160
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;main.c: 739: vscp_omsg.vscp_class = 30;
  6327  0034E4  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6328  0034E6  0E1E               	movlw	30
  6329  0034E8  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6330                           
  6331                           ;main.c: 740: vscp_omsg.vscp_type = 5;
  6332  0034EA  0E05               	movlw	5
  6333  0034EC  D009               	goto	L6
  6334  0034EE                     l10160:
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;main.c: 742: else {
  6338                           ;main.c: 743: vscp_omsg.vscp_class = 30;
  6339  0034EE  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6340  0034F0  0E1E               	movlw	30
  6341  0034F2  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6342                           
  6343                           ;main.c: 744: vscp_omsg.vscp_type = 6;
  6344  0034F4  0E06               	movlw	6
  6345  0034F6  D004               	goto	L6
  6346  0034F8                     l10162:
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;main.c: 748: else {
  6350                           ;main.c: 750: vscp_omsg.vscp_class = 1;
  6351  0034F8  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6352  0034FA  0E01               	movlw	1
  6353  0034FC  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6354                           
  6355                           ;main.c: 751: vscp_omsg.vscp_type = 2;
  6356  0034FE  0E02               	movlw	2
  6357  003500                     L6:
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;main.c: 752: }
  6361                           ;main.c: 754: vscp_omsg.data[ 0 ] = i;
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;main.c: 755: vscp_omsg.data[ 1 ] =
  6365                           ;main.c: 756: readEEPROM(2 * i + 0x73);
  6366  003500  D850               	call	PL18	;call to abstracted procedure
  6367  003502  EC1C  F02A         	call	_readEEPROM	;wreg free
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;main.c: 757: vscp_omsg.data[ 2 ] =
  6371                           ;main.c: 758: readEEPROM(2 * i + 0x74);
  6372  003506  D863               	call	PL28	;call to abstracted procedure
  6373  003508  EC1C  F02A         	call	_readEEPROM	;wreg free
  6374  00350C  0100               	movlb	0	; () banked
  6375  00350E  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;main.c: 763: vscp_sendEvent();
  6379  003510  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  6380  003514                     l10172:
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;main.c: 765: }
  6384                           ;main.c: 766: }
  6385                           ;main.c: 769: if (high_alarm & (1 << i)) {
  6386  003514  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6387  003518  0E01               	movlw	1
  6388  00351A  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6389  00351C  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6390  00351E  D002               	goto	u8294
  6391  003520                     u8295:
  6392  003520  90D8               	bcf	status,0,c
  6393  003522  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6394  003524                     u8294:
  6395  003524  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6396  003526  D7FC               	goto	u8295
  6397  003528  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6398  00352A  15B4               	andwf	_high_alarm& (0+255),w,b
  6399  00352C  E035               	bz	l10198
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;main.c: 772: if ((readEEPROM(i + 0x43) & (1<<4))) {
  6403  00352E  D848               	call	PL24	;call to abstracted procedure
  6404  003530  EC1C  F02A         	call	_readEEPROM	;wreg free
  6405  003534  0100               	movlb	0	; () banked
  6406  003536  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6407  003538  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  6408  00353A  D02E               	goto	l10198
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;main.c: 774: vscp_omsg.priority = 0x00;
  6412  00353C  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;main.c: 775: vscp_omsg.flags = 0x80 + 3;
  6416  00353E  0E83               	movlw	131
  6417  003540  6FCA               	movwf	_vscp_omsg& (0+255),b
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;main.c: 777: if (readEEPROM(i + 0x43) & (1<<5)) {
  6421  003542  D83E               	call	PL24	;call to abstracted procedure
  6422  003544  EC1C  F02A         	call	_readEEPROM	;wreg free
  6423  003548  0100               	movlb	0	; () banked
  6424  00354A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6425  00354C  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6426  00354E  D016               	goto	l10188
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;main.c: 778: if (readEEPROM(i + 0x43) & (1<<6)) {
  6430  003550  0E43               	movlw	67
  6431  003552  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6432  003554  6E0E               	movwf	?_readEEPROM,c
  6433  003556  6A0F               	clrf	?_readEEPROM+1,c
  6434  003558  0E00               	movlw	0
  6435  00355A  220F               	addwfc	?_readEEPROM+1,f,c
  6436  00355C  EC1C  F02A         	call	_readEEPROM	;wreg free
  6437  003560  0100               	movlb	0	; () banked
  6438  003562  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6439  003564  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6440  003566  D005               	goto	l10186
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;main.c: 779: vscp_omsg.vscp_class = 30;
  6444  003568  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6445  00356A  0E1E               	movlw	30
  6446  00356C  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6447                           
  6448                           ;main.c: 780: vscp_omsg.vscp_type = 6;
  6449  00356E  0E06               	movlw	6
  6450  003570  D009               	goto	L7
  6451  003572                     l10186:
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;main.c: 782: else {
  6455                           ;main.c: 783: vscp_omsg.vscp_class = 30;
  6456  003572  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6457  003574  0E1E               	movlw	30
  6458  003576  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6459                           
  6460                           ;main.c: 784: vscp_omsg.vscp_type = 5;
  6461  003578  0E05               	movlw	5
  6462  00357A  D004               	goto	L7
  6463  00357C                     l10188:
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;main.c: 787: else {
  6467                           ;main.c: 789: vscp_omsg.vscp_class = 1;
  6468  00357C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6469  00357E  0E01               	movlw	1
  6470  003580  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6471                           
  6472                           ;main.c: 790: vscp_omsg.vscp_type = 2;
  6473  003582  0E02               	movlw	2
  6474  003584                     L7:
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;main.c: 791: }
  6478                           ;main.c: 793: vscp_omsg.data[ 0 ] = i;
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;main.c: 794: vscp_omsg.data[ 1 ] = readEEPROM(2 * i +
  6482                           ;main.c: 795: 0x73);
  6483  003584  D80E               	call	PL18	;call to abstracted procedure
  6484  003586  EC1C  F02A         	call	_readEEPROM	;wreg free
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;main.c: 796: vscp_omsg.data[ 2 ] = readEEPROM(2 * i +
  6488                           ;main.c: 797: 0x74);
  6489  00358A  D821               	call	PL28	;call to abstracted procedure
  6490  00358C  EC1C  F02A         	call	_readEEPROM	;wreg free
  6491  003590  0100               	movlb	0	; () banked
  6492  003592  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;main.c: 802: vscp_sendEvent();
  6496  003594  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  6497  003598                     l10198:
  6498                           
  6499                           ; BSR set to: 0
  6500  003598  2B8A               	incf	doOneSecondWork@i& (0+255),f,b
  6501                           
  6502                           ; BSR set to: 0
  6503  00359A  0E05               	movlw	5
  6504  00359C  658A               	cpfsgt	doOneSecondWork@i& (0+255),b
  6505  00359E  D749               	goto	l10134
  6506  0035A0                     l245:
  6507                           
  6508                           ; BSR set to: 0
  6509  0035A0  0012               	return	
  6510  0035A2                     __end_of_doOneSecondWork:
  6511                           	opt stack 0
  6512  0035A2                     PL18:
  6513                           	opt stack 22
  6514  0035A2  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6515  0035A4  C08A  F0CF         	movff	doOneSecondWork@i,_vscp_omsg+5
  6516  0035A8  90D8               	bcf	status,0,c
  6517  0035AA  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6518  0035AC  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6519  0035AE  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6520  0035B0  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6521  0035B2  0E73               	movlw	115
  6522  0035B4  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6523  0035B6  6E0E               	movwf	?_readEEPROM,c
  6524  0035B8  0E00               	movlw	0
  6525  0035BA  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6526  0035BC  6E0F               	movwf	?_readEEPROM+1,c
  6527  0035BE  0012               	return	
  6528  0035C0                     __end_ofPL18:
  6529                           	opt stack 0
  6530  0035C0                     PL24:
  6531                           	opt stack 22
  6532  0035C0  0E43               	movlw	67
  6533  0035C2  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6534  0035C4  6E0E               	movwf	?_readEEPROM,c
  6535  0035C6  6A0F               	clrf	?_readEEPROM+1,c
  6536  0035C8  0E00               	movlw	0
  6537  0035CA  220F               	addwfc	?_readEEPROM+1,f,c
  6538  0035CC  0C00               	retlw	0
  6539  0035CE                     __end_ofPL24:
  6540                           	opt stack 0
  6541  0035CE                     PL28:
  6542                           	opt stack 22
  6543  0035CE  0100               	movlb	0	; () banked
  6544  0035D0  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6545  0035D2  90D8               	bcf	status,0,c
  6546  0035D4  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6547  0035D6  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6548  0035D8  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6549  0035DA  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6550  0035DC  0E74               	movlw	116
  6551  0035DE  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6552  0035E0  6E0E               	movwf	?_readEEPROM,c
  6553  0035E2  0E00               	movlw	0
  6554  0035E4  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6555  0035E6  6E0F               	movwf	?_readEEPROM+1,c
  6556  0035E8  0012               	return	
  6557  0035EA                     __end_ofPL28:
  6558                           	opt stack 0
  6559                           tblptru	equ	0xFF8
  6560                           tblptrh	equ	0xFF7
  6561                           tblptrl	equ	0xFF6
  6562                           tablat	equ	0xFF5
  6563                           prodh	equ	0xFF4
  6564                           prodl	equ	0xFF3
  6565                           intcon	equ	0xFF2
  6566                           postinc0	equ	0xFEE
  6567                           wreg	equ	0xFE8
  6568                           indf1	equ	0xFE7
  6569                           postdec1	equ	0xFE5
  6570                           fsr1h	equ	0xFE2
  6571                           fsr1l	equ	0xFE1
  6572                           indf2	equ	0xFDF
  6573                           postinc2	equ	0xFDE
  6574                           postdec2	equ	0xFDD
  6575                           plusw2	equ	0xFDB
  6576                           fsr2h	equ	0xFDA
  6577                           fsr2l	equ	0xFD9
  6578                           status	equ	0xFD8
  6579                           
  6580 ;; *************** function _vscp_error *****************
  6581 ;; Defined at:
  6582 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;		None
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;		None
  6587 ;; Return value:  Size  Location     Type
  6588 ;;		None               void
  6589 ;; Registers used:
  6590 ;;		None
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6596 ;;      Params:         0       0       0       0       0       0       0
  6597 ;;      Locals:         0       0       0       0       0       0       0
  6598 ;;      Temps:          0       0       0       0       0       0       0
  6599 ;;      Totals:         0       0       0       0       0       0       0
  6600 ;;Total ram usage:        0 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    2
  6603 ;; This function calls:
  6604 ;;		Nothing
  6605 ;; This function is called by:
  6606 ;;		_main
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text26
  6611  0054C4                     __ptext26:
  6612                           	opt stack 0
  6613  0054C4                     _vscp_error:
  6614                           	opt stack 28
  6615                           
  6616                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;incstack = 0
  6620                           ;incstack = 0
  6621  0054C4  6A4D               	clrf	_vscp_initledfunc,c
  6622  0054C6  0012               	return	
  6623  0054C8                     __end_of_vscp_error:
  6624                           	opt stack 0
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodh	equ	0xFF4
  6630                           prodl	equ	0xFF3
  6631                           intcon	equ	0xFF2
  6632                           postinc0	equ	0xFEE
  6633                           wreg	equ	0xFE8
  6634                           indf1	equ	0xFE7
  6635                           postdec1	equ	0xFE5
  6636                           fsr1h	equ	0xFE2
  6637                           fsr1l	equ	0xFE1
  6638                           indf2	equ	0xFDF
  6639                           postinc2	equ	0xFDE
  6640                           postdec2	equ	0xFDD
  6641                           plusw2	equ	0xFDB
  6642                           fsr2h	equ	0xFDA
  6643                           fsr2l	equ	0xFD9
  6644                           status	equ	0xFD8
  6645                           
  6646 ;; *************** function _handle_sync *****************
  6647 ;; Defined at:
  6648 ;;		line 1249 in file "../main.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;  i               1   41[BANK0 ] unsigned char 
  6653 ;; Return value:  Size  Location     Type
  6654 ;;		None               void
  6655 ;; Registers used:
  6656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6657 ;; Tracked objects:
  6658 ;;		On entry : F/0
  6659 ;;		On exit  : F/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6662 ;;      Params:         0       0       0       0       0       0       0
  6663 ;;      Locals:         0       1       0       0       0       0       0
  6664 ;;      Temps:          0       2       0       0       0       0       0
  6665 ;;      Totals:         0       3       0       0       0       0       0
  6666 ;;Total ram usage:        3 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    8
  6669 ;; This function calls:
  6670 ;;		_readEEPROM
  6671 ;;		_sendTempEvent
  6672 ;; This function is called by:
  6673 ;;		_main
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text27
  6678  004952                     __ptext27:
  6679                           	opt stack 0
  6680  004952                     _handle_sync:
  6681                           	opt stack 22
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;main.c: 1250: uint8_t i;
  6685                           ;main.c: 1253: for (i = 0; i < 6; i++) {
  6686                           
  6687                           ;incstack = 0
  6688                           ;incstack = 0
  6689  004952  6B89               	clrf	handle_sync@i& (0+255),b
  6690  004954                     l10108:
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;main.c: 1255: if ((0xff != vscp_imsg.data[ 1 ] ||
  6694                           ;main.c: 1256: (readEEPROM(2 * i + 0x73) != vscp_imsg.data[ 1 ])) &&
  6695                           ;main.c: 1257: (0xff != vscp_imsg.data[ 2 ] ||
  6696                           ;main.c: 1258: (readEEPROM(2 * i + 0x74) != vscp_imsg.data[ 2 ]))) {
  6697  004954  29C3               	incf	(_vscp_imsg+7)& (0+255),w,b
  6698  004956  E110               	bnz	l10112
  6699                           
  6700                           ; BSR set to: 0
  6701  004958  90D8               	bcf	status,0,c
  6702  00495A  3589               	rlcf	handle_sync@i& (0+255),w,b
  6703  00495C  6F87               	movwf	??_handle_sync& (0+255),b
  6704  00495E  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6705  004960  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6706  004962  0E73               	movlw	115
  6707  004964  2587               	addwf	??_handle_sync& (0+255),w,b
  6708  004966  6E0E               	movwf	?_readEEPROM,c
  6709  004968  0E00               	movlw	0
  6710  00496A  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6711  00496C  6E0F               	movwf	?_readEEPROM+1,c
  6712  00496E  EC1C  F02A         	call	_readEEPROM	;wreg free
  6713  004972  0100               	movlb	0	; () banked
  6714  004974  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6715  004976  E028               	bz	l10122
  6716  004978                     l10112:
  6717                           
  6718                           ; BSR set to: 0
  6719  004978  29C4               	incf	(_vscp_imsg+8)& (0+255),w,b
  6720  00497A  E110               	bnz	l295
  6721                           
  6722                           ; BSR set to: 0
  6723  00497C  90D8               	bcf	status,0,c
  6724  00497E  3589               	rlcf	handle_sync@i& (0+255),w,b
  6725  004980  6F87               	movwf	??_handle_sync& (0+255),b
  6726  004982  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6727  004984  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6728  004986  0E74               	movlw	116
  6729  004988  2587               	addwf	??_handle_sync& (0+255),w,b
  6730  00498A  6E0E               	movwf	?_readEEPROM,c
  6731  00498C  0E00               	movlw	0
  6732  00498E  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6733  004990  6E0F               	movwf	?_readEEPROM+1,c
  6734  004992  EC1C  F02A         	call	_readEEPROM	;wreg free
  6735  004996  0100               	movlb	0	; () banked
  6736  004998  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6737  00499A  E016               	bz	l10122
  6738  00499C                     l295:
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;main.c: 1261: timeout_clock = 0;
  6742  00499C  0101               	movlb	1	; () banked
  6743  00499E  6B16               	clrf	_timeout_clock& (0+255),b
  6744  0049A0  6B17               	clrf	(_timeout_clock+1)& (0+255),b
  6745  0049A2  6B18               	clrf	(_timeout_clock+2)& (0+255),b
  6746  0049A4  6B19               	clrf	(_timeout_clock+3)& (0+255),b
  6747                           
  6748                           ;main.c: 1262: while (!sendTempEvent(i)) {
  6749  0049A6  D00A               	goto	l10120
  6750  0049A8                     l10116:
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;main.c: 1263: if (timeout_clock > 1000) break;
  6754  0049A8  0EE9               	movlw	233
  6755  0049AA  0101               	movlb	1	; () banked
  6756  0049AC  5D16               	subwf	_timeout_clock& (0+255),w,b
  6757  0049AE  0E03               	movlw	3
  6758  0049B0  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b
  6759  0049B2  0E00               	movlw	0
  6760  0049B4  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b
  6761  0049B6  0E00               	movlw	0
  6762  0049B8  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b
  6763  0049BA  E206               	bc	l10122
  6764  0049BC                     l10120:
  6765                           
  6766                           ; BSR set to: 1
  6767  0049BC  0100               	movlb	0	; () banked
  6768  0049BE  5189               	movf	handle_sync@i& (0+255),w,b
  6769  0049C0  ECEA  F024         	call	_sendTempEvent
  6770  0049C4  0900               	iorlw	0
  6771  0049C6  E0F0               	bz	l10116
  6772  0049C8                     l10122:
  6773  0049C8  0100               	movlb	0	; () banked
  6774  0049CA  2B89               	incf	handle_sync@i& (0+255),f,b
  6775                           
  6776                           ; BSR set to: 0
  6777  0049CC  0E05               	movlw	5
  6778  0049CE  6589               	cpfsgt	handle_sync@i& (0+255),b
  6779  0049D0  D7C1               	goto	l10108
  6780                           
  6781                           ; BSR set to: 0
  6782  0049D2  0C05               	retlw	5
  6783  0049D4                     __end_of_handle_sync:
  6784                           	opt stack 0
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           postinc0	equ	0xFEE
  6793                           wreg	equ	0xFE8
  6794                           indf1	equ	0xFE7
  6795                           postdec1	equ	0xFE5
  6796                           fsr1h	equ	0xFE2
  6797                           fsr1l	equ	0xFE1
  6798                           indf2	equ	0xFDF
  6799                           postinc2	equ	0xFDE
  6800                           postdec2	equ	0xFDD
  6801                           plusw2	equ	0xFDB
  6802                           fsr2h	equ	0xFDA
  6803                           fsr2l	equ	0xFD9
  6804                           status	equ	0xFD8
  6805                           
  6806 ;; *************** function _sendTempEvent *****************
  6807 ;; Defined at:
  6808 ;;		line 815 in file "../main.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;  i               1    wreg     unsigned char 
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;  i               1   38[BANK0 ] unsigned char 
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      unsigned char 
  6815 ;; Registers used:
  6816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : F/0
  6819 ;;		On exit  : F/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6822 ;;      Params:         0       0       0       0       0       0       0
  6823 ;;      Locals:         0       1       0       0       0       0       0
  6824 ;;      Temps:          0       1       0       0       0       0       0
  6825 ;;      Totals:         0       2       0       0       0       0       0
  6826 ;;Total ram usage:        2 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:    7
  6829 ;; This function calls:
  6830 ;;		_readEEPROM
  6831 ;;		_vscp_sendEvent
  6832 ;;		_setEventData
  6833 ;; This function is called by:
  6834 ;;		_doOneSecondWork
  6835 ;;		_handle_sync
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text28
  6840  0049D4                     __ptext28:
  6841                           	opt stack 0
  6842  0049D4                     _sendTempEvent:
  6843                           	opt stack 22
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;incstack = 0
  6847                           ;incstack = 0
  6848                           ;sendTempEvent@i stored from wreg
  6849  0049D4  CFE8 F086          	movff	wreg,sendTempEvent@i
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;main.c: 816: vscp_omsg.priority = 0x03;
  6853  0049D8  0E03               	movlw	3
  6854  0049DA  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  6855                           
  6856                           ;main.c: 817: vscp_omsg.flags = 0x80 + 4;
  6857  0049DC  0E84               	movlw	132
  6858  0049DE  6FCA               	movwf	_vscp_omsg& (0+255),b
  6859                           
  6860                           ;main.c: 818: vscp_omsg.vscp_class = 10;
  6861  0049E0  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6862  0049E2  0E0A               	movlw	10
  6863  0049E4  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6864                           
  6865                           ;main.c: 819: vscp_omsg.vscp_type = 6;
  6866  0049E6  0E06               	movlw	6
  6867  0049E8  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;main.c: 822: vscp_omsg.data[ 0 ] = 0x80 |
  6871                           ;main.c: 823: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6872                           ;main.c: 824: i;
  6873  0049EA  D82C               	call	PL70	;call to abstracted procedure
  6874  0049EC  EC1C  F02A         	call	_readEEPROM	;wreg free
  6875  0049F0  0100               	movlb	0	; () banked
  6876  0049F2  6F85               	movwf	??_sendTempEvent& (0+255),b
  6877  0049F4  0E03               	movlw	3
  6878  0049F6  1785               	andwf	??_sendTempEvent& (0+255),f,b
  6879  0049F8  90D8               	bcf	status,0,c
  6880  0049FA  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6881  0049FC  90D8               	bcf	status,0,c
  6882  0049FE  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6883  004A00  90D8               	bcf	status,0,c
  6884  004A02  3585               	rlcf	??_sendTempEvent& (0+255),w,b
  6885  004A04  1186               	iorwf	sendTempEvent@i& (0+255),w,b
  6886  004A06  0980               	iorlw	128
  6887  004A08  6FCF               	movwf	(_vscp_omsg+5)& (0+255),b
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;main.c: 826: vscp_omsg.data[ 1 ] = 0x82;
  6891  004A0A  0E82               	movlw	130
  6892  004A0C  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;main.c: 828: setEventData( current_temp[i],
  6896                           ;main.c: 829: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6897  004A0E  5186               	movf	sendTempEvent@i& (0+255),w,b
  6898  004A10  0D02               	mullw	2
  6899  004A12  0E00               	movlw	low _current_temp
  6900  004A14  24F3               	addwf	prodl,w,c
  6901  004A16  6ED9               	movwf	fsr2l,c
  6902  004A18  0E01               	movlw	high _current_temp
  6903  004A1A  20F4               	addwfc	prodh,w,c
  6904  004A1C  6EDA               	movwf	fsr2h,c
  6905  004A1E  CFDE F07C          	movff	postinc2,?_setEventData
  6906  004A22  CFDD F07D          	movff	postdec2,?_setEventData+1
  6907  004A26  D80E               	call	PL70	;call to abstracted procedure
  6908  004A28  EC1C  F02A         	call	_readEEPROM	;wreg free
  6909  004A2C  0B03               	andlw	3
  6910  004A2E  0100               	movlb	0	; () banked
  6911  004A30  6F7E               	movwf	(?_setEventData+2)& (0+255),b
  6912  004A32  EC7E  F022         	call	_setEventData	;wreg free
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;main.c: 832: if (!vscp_sendEvent()) {
  6916  004A36  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  6917  004A3A  0900               	iorlw	0
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;main.c: 833: return 0;
  6921  004A3C  0E00               	movlw	0
  6922  004A3E  A4D8               	btfss	status,2,c
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;main.c: 834: }
  6926                           ;main.c: 836: return 1;
  6927  004A40  0E01               	movlw	1
  6928                           
  6929                           ; BSR set to: 0
  6930  004A42  0012               	return	
  6931  004A44                     __end_of_sendTempEvent:
  6932                           	opt stack 0
  6933  004A44                     PL70:
  6934                           	opt stack 22
  6935  004A44  0E43               	movlw	67
  6936  004A46  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6937  004A48  6E0E               	movwf	?_readEEPROM,c
  6938  004A4A  6A0F               	clrf	?_readEEPROM+1,c
  6939  004A4C  0E00               	movlw	0
  6940  004A4E  220F               	addwfc	?_readEEPROM+1,f,c
  6941  004A50  0C00               	retlw	0
  6942  004A52                     __end_ofPL70:
  6943                           	opt stack 0
  6944                           tblptru	equ	0xFF8
  6945                           tblptrh	equ	0xFF7
  6946                           tblptrl	equ	0xFF6
  6947                           tablat	equ	0xFF5
  6948                           prodh	equ	0xFF4
  6949                           prodl	equ	0xFF3
  6950                           intcon	equ	0xFF2
  6951                           postinc0	equ	0xFEE
  6952                           wreg	equ	0xFE8
  6953                           indf1	equ	0xFE7
  6954                           postdec1	equ	0xFE5
  6955                           fsr1h	equ	0xFE2
  6956                           fsr1l	equ	0xFE1
  6957                           indf2	equ	0xFDF
  6958                           postinc2	equ	0xFDE
  6959                           postdec2	equ	0xFDD
  6960                           plusw2	equ	0xFDB
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function _setEventData *****************
  6966 ;; Defined at:
  6967 ;;		line 844 in file "../main.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  v               2   28[BANK0 ] int 
  6970 ;;  unit            1   30[BANK0 ] unsigned char 
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  newval          4   31[BANK0 ] unsigned char 
  6973 ;;  ival            2   35[BANK0 ] int 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;		None               void
  6976 ;; Registers used:
  6977 ;;		wreg, status,2, status,0, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : F/0
  6980 ;;		On exit  : F/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6983 ;;      Params:         0       3       0       0       0       0       0
  6984 ;;      Locals:         0       6       0       0       0       0       0
  6985 ;;      Temps:          0       0       0       0       0       0       0
  6986 ;;      Totals:         0       9       0       0       0       0       0
  6987 ;;Total ram usage:        9 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    5
  6990 ;; This function calls:
  6991 ;;		_Celsius2Kelvin
  6992 ;;		_Celsius2Fahrenheit
  6993 ;;		___awtofl
  6994 ;;		___fltol
  6995 ;; This function is called by:
  6996 ;;		_sendTempEvent
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text29
  7001  0044FC                     __ptext29:
  7002                           	opt stack 0
  7003  0044FC                     _setEventData:
  7004                           	opt stack 23
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;main.c: 845: double newval;
  7008                           ;main.c: 846: int ival;
  7009                           ;main.c: 848: if (0 == unit) {
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;incstack = 0
  7013                           ;incstack = 0
  7014  0044FC  677E               	tstfsz	setEventData@unit& (0+255),b
  7015  0044FE  D019               	goto	l10486
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;main.c: 850: newval = Celsius2Kelvin(v);
  7019  004500  C07C  F018         	movff	setEventData@v,?___awtofl
  7020  004504  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  7021  004508  EC15  F028         	call	___awtofl	;wreg free
  7022  00450C  C01B  F02F         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  7023  004510  C01A  F02E         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  7024  004514  C019  F02D         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  7025  004518  C018  F02C         	movff	?___awtofl,?_Celsius2Kelvin
  7026  00451C  EC32  F028         	call	_Celsius2Kelvin	;wreg free
  7027  004520  C02F  F082         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  7028  004524  C02E  F081         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  7029  004528  C02D  F080         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  7030  00452C  C02C  F07F         	movff	?_Celsius2Kelvin,setEventData@newval
  7031                           
  7032                           ;main.c: 851: } else if (2 == unit) {
  7033  004530  D02A               	goto	l253
  7034  004532                     l10486:
  7035                           
  7036                           ; BSR set to: 0
  7037  004532  517E               	movf	setEventData@unit& (0+255),w,b
  7038  004534  0A02               	xorlw	2
  7039  004536  E119               	bnz	l10490
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;main.c: 853: newval = Celsius2Fahrenheit(v);
  7043  004538  C07C  F018         	movff	setEventData@v,?___awtofl
  7044  00453C  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  7045  004540  EC15  F028         	call	___awtofl	;wreg free
  7046  004544  C01B  F079         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  7047  004548  C01A  F078         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  7048  00454C  C019  F077         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  7049  004550  C018  F076         	movff	?___awtofl,?_Celsius2Fahrenheit
  7050  004554  ECA0  F025         	call	_Celsius2Fahrenheit	;wreg free
  7051  004558  C079  F082         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  7052  00455C  C078  F081         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  7053  004560  C077  F080         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  7054  004564  C076  F07F         	movff	?_Celsius2Fahrenheit,setEventData@newval
  7055                           
  7056                           ;main.c: 854: } else {
  7057  004568  D00E               	goto	l253
  7058  00456A                     l10490:
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;main.c: 856: newval = v;
  7062  00456A  C07C  F018         	movff	setEventData@v,?___awtofl
  7063  00456E  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  7064  004572  EC15  F028         	call	___awtofl	;wreg free
  7065  004576  C01B  F082         	movff	?___awtofl+3,setEventData@newval+3
  7066  00457A  C01A  F081         	movff	?___awtofl+2,setEventData@newval+2
  7067  00457E  C019  F080         	movff	?___awtofl+1,setEventData@newval+1
  7068  004582  C018  F07F         	movff	?___awtofl,setEventData@newval
  7069  004586                     l253:
  7070                           
  7071                           ;main.c: 857: }
  7072                           ;main.c: 859: ival = (int) newval;
  7073  004586  C07F  F076         	movff	setEventData@newval,?___fltol
  7074  00458A  C080  F077         	movff	setEventData@newval+1,?___fltol+1
  7075  00458E  C081  F078         	movff	setEventData@newval+2,?___fltol+2
  7076  004592  C082  F079         	movff	setEventData@newval+3,?___fltol+3
  7077  004596  ECCC  F023         	call	___fltol	;wreg free
  7078  00459A  C076  F083         	movff	?___fltol,setEventData@ival
  7079  00459E  C077  F084         	movff	?___fltol+1,setEventData@ival+1
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;main.c: 861: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7083  0045A2  5184               	movf	(setEventData@ival+1)& (0+255),w,b
  7084  0045A4  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;main.c: 862: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7088  0045A6  C083  F0D2         	movff	setEventData@ival,_vscp_omsg+8
  7089                           
  7090                           ; BSR set to: 0
  7091  0045AA  0012               	return	
  7092  0045AC                     __end_of_setEventData:
  7093                           	opt stack 0
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon	equ	0xFF2
  7101                           postinc0	equ	0xFEE
  7102                           wreg	equ	0xFE8
  7103                           indf1	equ	0xFE7
  7104                           postdec1	equ	0xFE5
  7105                           fsr1h	equ	0xFE2
  7106                           fsr1l	equ	0xFE1
  7107                           indf2	equ	0xFDF
  7108                           postinc2	equ	0xFDE
  7109                           postdec2	equ	0xFDD
  7110                           plusw2	equ	0xFDB
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function _Celsius2Fahrenheit *****************
  7116 ;; Defined at:
  7117 ;;		line 41 in file "../ntc.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  tc              4   22[BANK0 ] int 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  4   22[BANK0 ] int 
  7124 ;; Registers used:
  7125 ;;		wreg, status,2, status,0, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7131 ;;      Params:         0       4       0       0       0       0       0
  7132 ;;      Locals:         0       0       0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0
  7134 ;;      Totals:         0       4       0       0       0       0       0
  7135 ;;Total ram usage:        4 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    4
  7138 ;; This function calls:
  7139 ;;		___fladd
  7140 ;;		___fldiv
  7141 ;;		___flmul
  7142 ;; This function is called by:
  7143 ;;		_setEventData
  7144 ;; This function uses a non-reentrant model
  7145 ;;
  7146                           
  7147                           	psect	text30
  7148  004B40                     __ptext30:
  7149                           	opt stack 0
  7150  004B40                     _Celsius2Fahrenheit:
  7151                           	opt stack 23
  7152                           
  7153                           ;ntc.c: 42: return ( (9 * tc + 16000) / 5);
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;incstack = 0
  7157                           ;incstack = 0
  7158  004B40  6A21               	clrf	?___fladd+4,c
  7159  004B42  6A22               	clrf	?___fladd+5,c
  7160  004B44  0E7A               	movlw	122
  7161  004B46  6E23               	movwf	?___fladd+6,c
  7162  004B48  0E46               	movlw	70
  7163  004B4A  6E24               	movwf	?___fladd+7,c
  7164  004B4C  0100               	movlb	0	; () banked
  7165  004B4E  6B64               	clrf	(?___flmul+4)& (0+255),b
  7166  004B50  6B65               	clrf	(?___flmul+5)& (0+255),b
  7167  004B52  0E10               	movlw	16
  7168  004B54  6F66               	movwf	(?___flmul+6)& (0+255),b
  7169  004B56  0E41               	movlw	65
  7170  004B58  6F67               	movwf	(?___flmul+7)& (0+255),b
  7171  004B5A  C076  F060         	movff	Celsius2Fahrenheit@tc,?___flmul
  7172  004B5E  C077  F061         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7173  004B62  C078  F062         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7174  004B66  C079  F063         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7175  004B6A  EC4A  F020         	call	___flmul	;wreg free
  7176  004B6E  C063  F020         	movff	?___flmul+3,?___fladd+3
  7177  004B72  C062  F01F         	movff	?___flmul+2,?___fladd+2
  7178  004B76  C061  F01E         	movff	?___flmul+1,?___fladd+1
  7179  004B7A  C060  F01D         	movff	?___flmul,?___fladd
  7180  004B7E  EC85  F01C         	call	___fladd	;wreg free
  7181  004B82  C020  F02F         	movff	?___fladd+3,?___fldiv+3
  7182  004B86  C01F  F02E         	movff	?___fladd+2,?___fldiv+2
  7183  004B8A  C01E  F02D         	movff	?___fladd+1,?___fldiv+1
  7184  004B8E  C01D  F02C         	movff	?___fladd,?___fldiv
  7185  004B92  6A30               	clrf	?___fldiv+4,c
  7186  004B94  6A31               	clrf	?___fldiv+5,c
  7187  004B96  0EA0               	movlw	160
  7188  004B98  6E32               	movwf	?___fldiv+6,c
  7189  004B9A  0E40               	movlw	64
  7190  004B9C  6E33               	movwf	?___fldiv+7,c
  7191  004B9E  ECD6  F022         	call	___fldiv	;wreg free
  7192  004BA2  C02F  F079         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7193  004BA6  C02E  F078         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7194  004BAA  C02D  F077         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7195  004BAE  C02C  F076         	movff	?___fldiv,?_Celsius2Fahrenheit
  7196  004BB2  0012               	return	
  7197  004BB4                     __end_of_Celsius2Fahrenheit:
  7198                           	opt stack 0
  7199                           tblptru	equ	0xFF8
  7200                           tblptrh	equ	0xFF7
  7201                           tblptrl	equ	0xFF6
  7202                           tablat	equ	0xFF5
  7203                           prodh	equ	0xFF4
  7204                           prodl	equ	0xFF3
  7205                           intcon	equ	0xFF2
  7206                           postinc0	equ	0xFEE
  7207                           wreg	equ	0xFE8
  7208                           indf1	equ	0xFE7
  7209                           postdec1	equ	0xFE5
  7210                           fsr1h	equ	0xFE2
  7211                           fsr1l	equ	0xFE1
  7212                           indf2	equ	0xFDF
  7213                           postinc2	equ	0xFDE
  7214                           postdec2	equ	0xFDD
  7215                           plusw2	equ	0xFDB
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220 ;; *************** function ___fladd *****************
  7221 ;; Defined at:
  7222 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;  f1              4   28[COMRAM] int 
  7225 ;;  f2              4   32[COMRAM] int 
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;  exp1            1   42[COMRAM] unsigned char 
  7228 ;;  exp2            1   41[COMRAM] unsigned char 
  7229 ;;  sign            1   40[COMRAM] unsigned char 
  7230 ;; Return value:  Size  Location     Type
  7231 ;;                  4   28[COMRAM] unsigned char 
  7232 ;; Registers used:
  7233 ;;		wreg, status,2, status,0, cstack
  7234 ;; Tracked objects:
  7235 ;;		On entry : 0/0
  7236 ;;		On exit  : 0/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7239 ;;      Params:         8       0       0       0       0       0       0
  7240 ;;      Locals:         6       0       0       0       0       0       0
  7241 ;;      Temps:          1       0       0       0       0       0       0
  7242 ;;      Totals:        15       0       0       0       0       0       0
  7243 ;;Total ram usage:       15 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:    3
  7246 ;; This function calls:
  7247 ;;		___flpack
  7248 ;; This function is called by:
  7249 ;;		_doWork
  7250 ;;		_Celsius2Fahrenheit
  7251 ;;		_Celsius2Kelvin
  7252 ;;		___asfladd
  7253 ;;		_floor
  7254 ;;		___flsub
  7255 ;;		_log
  7256 ;;		_eval_poly
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           	psect	text31
  7261  00390A                     __ptext31:
  7262                           	opt stack 0
  7263  00390A                     ___fladd:
  7264                           	opt stack 25
  7265                           
  7266                           ;incstack = 0
  7267                           ;incstack = 0
  7268  00390A  341F               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7269  00390C  3420               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7270  00390E  6E2B               	movwf	___fladd@exp1,c
  7271  003910  3423               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7272  003912  3424               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7273  003914  6E2A               	movwf	___fladd@exp2,c
  7274  003916  502B               	movf	___fladd@exp1,w,c
  7275  003918  E009               	bz	l1573
  7276  00391A  502A               	movf	___fladd@exp2,w,c
  7277  00391C  602B               	cpfslt	___fladd@exp1,c
  7278  00391E  D00F               	goto	l11514
  7279  003920  502B               	movf	___fladd@exp1,w,c
  7280  003922  5C2A               	subwf	___fladd@exp2,w,c
  7281  003924  6E25               	movwf	??___fladd& (0+255),c
  7282  003926  0E21               	movlw	33
  7283  003928  5C25               	subwf	??___fladd,w,c
  7284  00392A  E309               	bnc	l11514
  7285  00392C                     l1573:
  7286  00392C  C021  F01D         	movff	___fladd@f2,?___fladd
  7287  003930  C022  F01E         	movff	___fladd@f2+1,?___fladd+1
  7288  003934  C023  F01F         	movff	___fladd@f2+2,?___fladd+2
  7289  003938  C024  F020         	movff	___fladd@f2+3,?___fladd+3
  7290  00393C  D087               	goto	l1574
  7291  00393E                     l11514:
  7292  00393E  502A               	movf	___fladd@exp2,w,c
  7293  003940  E009               	bz	l1577
  7294  003942  502B               	movf	___fladd@exp1,w,c
  7295  003944  602A               	cpfslt	___fladd@exp2,c
  7296  003946  D00F               	goto	l11520
  7297  003948  502A               	movf	___fladd@exp2,w,c
  7298  00394A  5C2B               	subwf	___fladd@exp1,w,c
  7299  00394C  6E25               	movwf	??___fladd& (0+255),c
  7300  00394E  0E21               	movlw	33
  7301  003950  5C25               	subwf	??___fladd,w,c
  7302  003952  E309               	bnc	l11520
  7303  003954                     l1577:
  7304  003954  C01D  F01D         	movff	___fladd@f1,?___fladd
  7305  003958  C01E  F01E         	movff	___fladd@f1+1,?___fladd+1
  7306  00395C  C01F  F01F         	movff	___fladd@f1+2,?___fladd+2
  7307  003960  C020  F020         	movff	___fladd@f1+3,?___fladd+3
  7308  003964  D073               	goto	l1574
  7309  003966                     l11520:
  7310  003966  0E06               	movlw	6
  7311  003968  6E29               	movwf	___fladd@sign,c
  7312  00396A  BE20               	btfsc	___fladd@f1+3,7,c
  7313  00396C  8E29               	bsf	___fladd@sign,7,c
  7314  00396E  BE24               	btfsc	___fladd@f2+3,7,c
  7315  003970  8C29               	bsf	___fladd@sign,6,c
  7316  003972  8E1F               	bsf	___fladd@f1+2,7,c
  7317  003974  6A20               	clrf	___fladd@f1+3,c
  7318  003976  8E23               	bsf	___fladd@f2+2,7,c
  7319  003978  6A24               	clrf	___fladd@f2+3,c
  7320  00397A  502A               	movf	___fladd@exp2,w,c
  7321  00397C  602B               	cpfslt	___fladd@exp1,c
  7322  00397E  D018               	goto	l11546
  7323  003980                     l11536:
  7324  003980  90D8               	bcf	status,0,c
  7325  003982  3621               	rlcf	___fladd@f2,f,c
  7326  003984  3622               	rlcf	___fladd@f2+1,f,c
  7327  003986  3623               	rlcf	___fladd@f2+2,f,c
  7328  003988  3624               	rlcf	___fladd@f2+3,f,c
  7329  00398A  062A               	decf	___fladd@exp2,f,c
  7330  00398C  502A               	movf	___fladd@exp2,w,c
  7331  00398E  182B               	xorwf	___fladd@exp1,w,c
  7332  003990  E00B               	bz	l11544
  7333  003992  0629               	decf	___fladd@sign,f,c
  7334  003994  5029               	movf	___fladd@sign& (0+255),w,c
  7335  003996  0B07               	andlw	7
  7336  003998  E007               	bz	l11544
  7337  00399A  D7F2               	goto	l11536
  7338  00399C                     l11542:
  7339  00399C  90D8               	bcf	status,0,c
  7340  00399E  3220               	rrcf	___fladd@f1+3,f,c
  7341  0039A0  321F               	rrcf	___fladd@f1+2,f,c
  7342  0039A2  321E               	rrcf	___fladd@f1+1,f,c
  7343  0039A4  321D               	rrcf	___fladd@f1,f,c
  7344  0039A6  2A2B               	incf	___fladd@exp1,f,c
  7345  0039A8                     l11544:
  7346  0039A8  502A               	movf	___fladd@exp2,w,c
  7347  0039AA  622B               	cpfseq	___fladd@exp1,c
  7348  0039AC  D7F7               	goto	l11542
  7349  0039AE  D01A               	goto	l1588
  7350  0039B0                     l11546:
  7351  0039B0  502B               	movf	___fladd@exp1,w,c
  7352  0039B2  602A               	cpfslt	___fladd@exp2,c
  7353  0039B4  D017               	goto	l1588
  7354  0039B6                     l11548:
  7355  0039B6  90D8               	bcf	status,0,c
  7356  0039B8  361D               	rlcf	___fladd@f1,f,c
  7357  0039BA  361E               	rlcf	___fladd@f1+1,f,c
  7358  0039BC  361F               	rlcf	___fladd@f1+2,f,c
  7359  0039BE  3620               	rlcf	___fladd@f1+3,f,c
  7360  0039C0  062B               	decf	___fladd@exp1,f,c
  7361  0039C2  502A               	movf	___fladd@exp2,w,c
  7362  0039C4  182B               	xorwf	___fladd@exp1,w,c
  7363  0039C6  E00B               	bz	l11556
  7364  0039C8  0629               	decf	___fladd@sign,f,c
  7365  0039CA  5029               	movf	___fladd@sign& (0+255),w,c
  7366  0039CC  0B07               	andlw	7
  7367  0039CE  E007               	bz	l11556
  7368  0039D0  D7F2               	goto	l11548
  7369  0039D2                     l11554:
  7370  0039D2  90D8               	bcf	status,0,c
  7371  0039D4  3224               	rrcf	___fladd@f2+3,f,c
  7372  0039D6  3223               	rrcf	___fladd@f2+2,f,c
  7373  0039D8  3222               	rrcf	___fladd@f2+1,f,c
  7374  0039DA  3221               	rrcf	___fladd@f2,f,c
  7375  0039DC  2A2A               	incf	___fladd@exp2,f,c
  7376  0039DE                     l11556:
  7377  0039DE  502A               	movf	___fladd@exp2,w,c
  7378  0039E0  622B               	cpfseq	___fladd@exp1,c
  7379  0039E2  D7F7               	goto	l11554
  7380  0039E4                     l1588:
  7381  0039E4  AE29               	btfss	___fladd@sign,7,c
  7382  0039E6  D009               	goto	l11560
  7383  0039E8  1E1D               	comf	___fladd@f1,f,c
  7384  0039EA  1E1E               	comf	___fladd@f1+1,f,c
  7385  0039EC  1E1F               	comf	___fladd@f1+2,f,c
  7386  0039EE  1E20               	comf	___fladd@f1+3,f,c
  7387  0039F0  2A1D               	incf	___fladd@f1,f,c
  7388  0039F2  0E00               	movlw	0
  7389  0039F4  221E               	addwfc	___fladd@f1+1,f,c
  7390  0039F6  221F               	addwfc	___fladd@f1+2,f,c
  7391  0039F8  2220               	addwfc	___fladd@f1+3,f,c
  7392  0039FA                     l11560:
  7393  0039FA  AC29               	btfss	___fladd@sign,6,c
  7394  0039FC  D002               	goto	l11564
  7395  0039FE  1E21               	comf	___fladd@f2,f,c
  7396  003A00  D826               	call	PL62	;call to abstracted procedure
  7397  003A02                     l11564:
  7398  003A02  6A29               	clrf	___fladd@sign,c
  7399  003A04  501D               	movf	___fladd@f1,w,c
  7400  003A06  2621               	addwf	___fladd@f2,f,c
  7401  003A08  501E               	movf	___fladd@f1+1,w,c
  7402  003A0A  2222               	addwfc	___fladd@f2+1,f,c
  7403  003A0C  501F               	movf	___fladd@f1+2,w,c
  7404  003A0E  2223               	addwfc	___fladd@f2+2,f,c
  7405  003A10  5020               	movf	___fladd@f1+3,w,c
  7406  003A12  2224               	addwfc	___fladd@f2+3,f,c
  7407  003A14  AE24               	btfss	___fladd@f2+3,7,c
  7408  003A16  D004               	goto	l11572
  7409  003A18  1E21               	comf	___fladd@f2,f,c
  7410  003A1A  D819               	call	PL62	;call to abstracted procedure
  7411  003A1C  0E01               	movlw	1
  7412  003A1E  6E29               	movwf	___fladd@sign,c
  7413  003A20                     l11572:
  7414  003A20  C021  F00E         	movff	___fladd@f2,?___flpack
  7415  003A24  C022  F00F         	movff	___fladd@f2+1,?___flpack+1
  7416  003A28  C023  F010         	movff	___fladd@f2+2,?___flpack+2
  7417  003A2C  C024  F011         	movff	___fladd@f2+3,?___flpack+3
  7418  003A30  C02B  F012         	movff	___fladd@exp1,?___flpack+4
  7419  003A34  C029  F013         	movff	___fladd@sign,?___flpack+5
  7420  003A38  EC6D  F021         	call	___flpack	;wreg free
  7421  003A3C  C011  F020         	movff	?___flpack+3,?___fladd+3
  7422  003A40  C010  F01F         	movff	?___flpack+2,?___fladd+2
  7423  003A44  C00F  F01E         	movff	?___flpack+1,?___fladd+1
  7424  003A48  C00E  F01D         	movff	?___flpack,?___fladd
  7425  003A4C                     l1574:
  7426  003A4C  0012               	return	
  7427  003A4E                     __end_of___fladd:
  7428                           	opt stack 0
  7429  003A4E                     PL62:
  7430                           	opt stack 25
  7431  003A4E  1E22               	comf	___fladd@f2+1,f,c
  7432  003A50  1E23               	comf	___fladd@f2+2,f,c
  7433  003A52  1E24               	comf	___fladd@f2+3,f,c
  7434  003A54  2A21               	incf	___fladd@f2,f,c
  7435  003A56  0E00               	movlw	0
  7436  003A58  2222               	addwfc	___fladd@f2+1,f,c
  7437  003A5A  2223               	addwfc	___fladd@f2+2,f,c
  7438  003A5C  2224               	addwfc	___fladd@f2+3,f,c
  7439  003A5E  0C00               	retlw	0
  7440  003A60                     __end_ofPL62:
  7441                           	opt stack 0
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           indf1	equ	0xFE7
  7452                           postdec1	equ	0xFE5
  7453                           fsr1h	equ	0xFE2
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           postdec2	equ	0xFDD
  7458                           plusw2	equ	0xFDB
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463 ;; *************** function _Celsius2Kelvin *****************
  7464 ;; Defined at:
  7465 ;;		line 60 in file "../ntc.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;  tc              4   43[COMRAM] unsigned char 
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;		None
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  4   43[COMRAM] unsigned char 
  7472 ;; Registers used:
  7473 ;;		wreg, status,2, status,0, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7479 ;;      Params:         4       0       0       0       0       0       0
  7480 ;;      Locals:         0       0       0       0       0       0       0
  7481 ;;      Temps:          0       0       0       0       0       0       0
  7482 ;;      Totals:         4       0       0       0       0       0       0
  7483 ;;Total ram usage:        4 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    4
  7486 ;; This function calls:
  7487 ;;		___fladd
  7488 ;; This function is called by:
  7489 ;;		_setEventData
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text32
  7494  005064                     __ptext32:
  7495                           	opt stack 0
  7496  005064                     _Celsius2Kelvin:
  7497                           	opt stack 23
  7498                           
  7499                           ;ntc.c: 61: return (27316.0 + tc);
  7500                           
  7501                           ;incstack = 0
  7502                           ;incstack = 0
  7503  005064  C02C  F01D         	movff	Celsius2Kelvin@tc,?___fladd
  7504  005068  C02D  F01E         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7505  00506C  C02E  F01F         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7506  005070  C02F  F020         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7507  005074  6A21               	clrf	?___fladd+4,c
  7508  005076  0E68               	movlw	104
  7509  005078  6E22               	movwf	?___fladd+5,c
  7510  00507A  0ED5               	movlw	213
  7511  00507C  6E23               	movwf	?___fladd+6,c
  7512  00507E  0E46               	movlw	70
  7513  005080  6E24               	movwf	?___fladd+7,c
  7514  005082  EC85  F01C         	call	___fladd	;wreg free
  7515  005086  C020  F02F         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7516  00508A  C01F  F02E         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7517  00508E  C01E  F02D         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7518  005092  C01D  F02C         	movff	?___fladd,?_Celsius2Kelvin
  7519  005096  0012               	return	
  7520  005098                     __end_of_Celsius2Kelvin:
  7521                           	opt stack 0
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           prodh	equ	0xFF4
  7527                           prodl	equ	0xFF3
  7528                           intcon	equ	0xFF2
  7529                           postinc0	equ	0xFEE
  7530                           wreg	equ	0xFE8
  7531                           indf1	equ	0xFE7
  7532                           postdec1	equ	0xFE5
  7533                           fsr1h	equ	0xFE2
  7534                           fsr1l	equ	0xFE1
  7535                           indf2	equ	0xFDF
  7536                           postinc2	equ	0xFDE
  7537                           postdec2	equ	0xFDD
  7538                           plusw2	equ	0xFDB
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543 ;; *************** function _vscp_handleProtocolEvent *****************
  7544 ;; Defined at:
  7545 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;		None
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;  bytes           1   44[BANK0 ] unsigned char 
  7550 ;;  page_save       2   40[BANK0 ] unsigned short 
  7551 ;;  i               1   50[BANK0 ] unsigned char 
  7552 ;;  page_save       2   38[BANK0 ] unsigned short 
  7553 ;;  byte            1   54[BANK0 ] unsigned char 
  7554 ;;  bytes           1   52[BANK0 ] unsigned char 
  7555 ;;  cb              1   49[BANK0 ] unsigned char 
  7556 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7557 ;;  j               1   57[BANK0 ] unsigned char 
  7558 ;;  i               1   55[BANK0 ] unsigned char 
  7559 ;;  k               1   51[BANK0 ] unsigned char 
  7560 ;;  i               1   53[BANK0 ] unsigned char 
  7561 ;;  len             1   47[BANK0 ] unsigned char 
  7562 ;;  pos             1   46[BANK0 ] unsigned char 
  7563 ;;  i               1   56[BANK0 ] unsigned char 
  7564 ;;  len             1   45[BANK0 ] unsigned char 
  7565 ;;  pos             1   43[BANK0 ] unsigned char 
  7566 ;;  offset          1   42[BANK0 ] unsigned char 
  7567 ;; Return value:  Size  Location     Type
  7568 ;;		None               void
  7569 ;; Registers used:
  7570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : F/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7576 ;;      Params:         0       0       0       0       0       0       0
  7577 ;;      Locals:         0      20       0       0       0       0       0
  7578 ;;      Temps:          0       7       0       0       0       0       0
  7579 ;;      Totals:         0      27       0       0       0       0       0
  7580 ;;Total ram usage:       27 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    8
  7583 ;; This function calls:
  7584 ;;		_vscp_init
  7585 ;;		_vscp_sendEvent
  7586 ;;		_vscp_readAppReg
  7587 ;;		_vscp_writeAppReg
  7588 ;;		_vscp_getGUID
  7589 ;;		_vscp_getMDF_URL
  7590 ;;		_vscp_getMatrixInfo
  7591 ;;		_vscp_goBootloaderMode
  7592 ;;		_vscp_handleHeartbeat
  7593 ;;		_vscp_handleSetNickname
  7594 ;;		_vscp_handleDropNickname
  7595 ;;		_vscp_newNodeOnline
  7596 ;;		_vscp_readRegister
  7597 ;;		_vscp_readStdReg
  7598 ;;		_vscp_writeRegister
  7599 ;;		_vscp_writeStdReg
  7600 ;;		___lbmod
  7601 ;; This function is called by:
  7602 ;;		_main
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text33
  7607  002A38                     __ptext33:
  7608                           	opt stack 0
  7609  002A38                     _vscp_handleProtocolEvent:
  7610                           	opt stack 22
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  7614                           
  7615                           ;incstack = 0
  7616                           ;incstack = 0
  7617  002A38  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  7618  002A3A  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7619  002A3C  E101 D2AA          	bz	l10094
  7620  002A40  D2D9               	goto	l1270
  7621  002A42                     l9682:
  7622                           
  7623                           ; BSR set to: 0
  7624                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  7625  002A42  EC9C  F027         	call	_vscp_handleHeartbeat	;wreg free
  7626                           
  7627                           ;vscp_firmware.c: 796: break;
  7628  002A46  D2D6               	goto	l1270
  7629  002A48                     l9684:
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  7633  002A48  ECA8  F028         	call	_vscp_newNodeOnline	;wreg free
  7634                           
  7635                           ;vscp_firmware.c: 801: break;
  7636  002A4C  D2D3               	goto	l1270
  7637  002A4E                     l9686:
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  7641  002A4E  EC32  F029         	call	_vscp_handleSetNickname	;wreg free
  7642                           
  7643                           ;vscp_firmware.c: 806: break;
  7644  002A52  D2D0               	goto	l1270
  7645  002A54                     l9688:
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  7649  002A54  EC65  F028         	call	_vscp_handleDropNickname	;wreg free
  7650                           
  7651                           ;vscp_firmware.c: 811: break;
  7652  002A58  D2CD               	goto	l1270
  7653  002A5A                     l9690:
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  7657                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7658  002A5A  51BC               	movf	_vscp_imsg& (0+255),w,b
  7659  002A5C  0B0F               	andlw	15
  7660  002A5E  0A02               	xorlw	2
  7661  002A60  E001 D2C8          	bnz	l1270
  7662                           
  7663                           ; BSR set to: 0
  7664  002A64  51BA               	movf	_vscp_nickname& (0+255),w,b
  7665  002A66  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7666  002A6A  62DF               	cpfseq	indf2,c
  7667  002A6C  D2C3               	goto	l1270
  7668                           
  7669                           ; BSR set to: 0
  7670                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  7671  002A6E  0E80               	movlw	128
  7672  002A70  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7673  002A72  D012               	goto	l9710
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7677  002A74  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7678  002A76  EC08  F00E         	call	_vscp_readAppReg
  7679  002A7A                     L8:
  7680  002A7A  0100               	movlb	0	; () banked
  7681  002A7C  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7685  002A7E  C0C3  F0CF         	movff	_vscp_imsg+7,_vscp_omsg+5
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  7689  002A82  0E03               	movlw	3
  7690  002A84  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  7694  002A86  0E82               	movlw	130
  7695  002A88  6FCA               	movwf	_vscp_omsg& (0+255),b
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  7699  002A8A  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  7700  002A8C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  7704  002A8E  0E0A               	movlw	10
  7705  002A90  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  7706  002A92                     l9708:
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;vscp_firmware.c: 832: vscp_sendEvent();
  7710  002A92  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  7711                           
  7712                           ;vscp_firmware.c: 833: } else {
  7713  002A96  D2AE               	goto	l1270
  7714  002A98                     l9710:
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  7718                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7719  002A98  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7720  002A9A  ECD8  F01F         	call	_vscp_readStdReg
  7721  002A9E  D7ED               	goto	L8
  7722  002AA0                     l9724:
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7726                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7727  002AA0  51BC               	movf	_vscp_imsg& (0+255),w,b
  7728  002AA2  0B0F               	andlw	15
  7729  002AA4  0A03               	xorlw	3
  7730  002AA6  E001 D2A5          	bnz	l1270
  7731                           
  7732                           ; BSR set to: 0
  7733  002AAA  51BA               	movf	_vscp_nickname& (0+255),w,b
  7734  002AAC  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7735  002AB0  62DF               	cpfseq	indf2,c
  7736  002AB2  D2A0               	goto	l1270
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  7740  002AB4  0E80               	movlw	128
  7741  002AB6  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7742  002AB8  D006               	goto	l9744
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  7746                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7747  002ABA  C0C4  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7748  002ABE  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7749  002AC0  EC37  F003         	call	_vscp_writeAppReg
  7750  002AC4  D7DA               	goto	L8
  7751  002AC6                     l9744:
  7752                           
  7753                           ; BSR set to: 0
  7754                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  7755                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7756  002AC6  C0C4  F022         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7757  002ACA  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7758  002ACC  ECF5  F01A         	call	_vscp_writeStdReg
  7759  002AD0  D7D4               	goto	L8
  7760  002AD2                     l9758:
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7764                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7765                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7766                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7767                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7768                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7769                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7770  002AD2  51BA               	movf	_vscp_nickname& (0+255),w,b
  7771  002AD4  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7772  002AD8  62DF               	cpfseq	indf2,c
  7773  002ADA  D28C               	goto	l1270
  7774                           
  7775                           ; BSR set to: 0
  7776  002ADC  0E00               	movlw	0
  7777  002ADE  EC00  F02A         	call	_vscp_getGUID
  7778  002AE2  0100               	movlb	0	; () banked
  7779  002AE4  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7780  002AE6  E001 D285          	bnz	l1270
  7781                           
  7782                           ; BSR set to: 0
  7783  002AEA  0E03               	movlw	3
  7784  002AEC  EC00  F02A         	call	_vscp_getGUID
  7785  002AF0  0100               	movlb	0	; () banked
  7786  002AF2  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7787  002AF4  E001 D27E          	bnz	l1270
  7788                           
  7789                           ; BSR set to: 0
  7790  002AF8  0E05               	movlw	5
  7791  002AFA  EC00  F02A         	call	_vscp_getGUID
  7792  002AFE  0100               	movlb	0	; () banked
  7793  002B00  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7794  002B02  E001 D277          	bnz	l1270
  7795                           
  7796                           ; BSR set to: 0
  7797  002B06  0E07               	movlw	7
  7798  002B08  EC00  F02A         	call	_vscp_getGUID
  7799  002B0C  0100               	movlb	0	; () banked
  7800  002B0E  19C7               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7801  002B10  E001 D270          	bnz	l1270
  7802                           
  7803                           ; BSR set to: 0
  7804  002B14  5047               	movf	_vscp_page_select+1,w,c
  7805  002B16  19C8               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7806  002B18  E001 D26C          	bnz	l1270
  7807                           
  7808                           ; BSR set to: 0
  7809  002B1C  5046               	movf	_vscp_page_select,w,c
  7810  002B1E  EE20  F0C9         	lfsr	2,_vscp_imsg+13
  7811  002B22  62DF               	cpfseq	indf2,c
  7812  002B24  D267               	goto	l1270
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7816  002B26  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7817  002B28  ECD4  F029         	call	_vscp_goBootloaderMode
  7818  002B2C  D263               	goto	l1270
  7819  002B2E                     l9774:
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7823                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7824                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7825                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7826  002B2E  0E00               	movlw	0
  7827  002B30  EC00  F02A         	call	_vscp_getGUID
  7828  002B34  0100               	movlb	0	; () banked
  7829  002B36  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7830  002B38  E173               	bnz	l9818
  7831                           
  7832                           ; BSR set to: 0
  7833  002B3A  0E01               	movlw	1
  7834  002B3C  EC00  F02A         	call	_vscp_getGUID
  7835  002B40  0100               	movlb	0	; () banked
  7836  002B42  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7837  002B44  E16D               	bnz	l9818
  7838                           
  7839                           ; BSR set to: 0
  7840  002B46  0E02               	movlw	2
  7841  002B48  EC00  F02A         	call	_vscp_getGUID
  7842  002B4C  0100               	movlb	0	; () banked
  7843  002B4E  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7844  002B50  E167               	bnz	l9818
  7845                           
  7846                           ; BSR set to: 0
  7847  002B52  0E03               	movlw	3
  7848  002B54  EC00  F02A         	call	_vscp_getGUID
  7849  002B58  0100               	movlb	0	; () banked
  7850  002B5A  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7851  002B5C  E161               	bnz	l9818
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  7855  002B5E  884C               	bsf	_vscp_guid_reset,4,c
  7856  002B60  D05F               	goto	l9818
  7857  002B62                     l9784:
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7861                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7862                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7863                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7864  002B62  0E04               	movlw	4
  7865  002B64  EC00  F02A         	call	_vscp_getGUID
  7866  002B68  0100               	movlb	0	; () banked
  7867  002B6A  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7868  002B6C  E159               	bnz	l9818
  7869                           
  7870                           ; BSR set to: 0
  7871  002B6E  0E05               	movlw	5
  7872  002B70  EC00  F02A         	call	_vscp_getGUID
  7873  002B74  0100               	movlb	0	; () banked
  7874  002B76  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7875  002B78  E153               	bnz	l9818
  7876                           
  7877                           ; BSR set to: 0
  7878  002B7A  0E06               	movlw	6
  7879  002B7C  EC00  F02A         	call	_vscp_getGUID
  7880  002B80  0100               	movlb	0	; () banked
  7881  002B82  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7882  002B84  E14D               	bnz	l9818
  7883                           
  7884                           ; BSR set to: 0
  7885  002B86  0E07               	movlw	7
  7886  002B88  EC00  F02A         	call	_vscp_getGUID
  7887  002B8C  0100               	movlb	0	; () banked
  7888  002B8E  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7889  002B90  E147               	bnz	l9818
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  7893  002B92  8A4C               	bsf	_vscp_guid_reset,5,c
  7894  002B94  D045               	goto	l9818
  7895  002B96                     l9794:
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7899                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7900                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7901                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7902  002B96  0E08               	movlw	8
  7903  002B98  EC00  F02A         	call	_vscp_getGUID
  7904  002B9C  0100               	movlb	0	; () banked
  7905  002B9E  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7906  002BA0  E13F               	bnz	l9818
  7907                           
  7908                           ; BSR set to: 0
  7909  002BA2  0E09               	movlw	9
  7910  002BA4  EC00  F02A         	call	_vscp_getGUID
  7911  002BA8  0100               	movlb	0	; () banked
  7912  002BAA  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7913  002BAC  E139               	bnz	l9818
  7914                           
  7915                           ; BSR set to: 0
  7916  002BAE  0E0A               	movlw	10
  7917  002BB0  EC00  F02A         	call	_vscp_getGUID
  7918  002BB4  0100               	movlb	0	; () banked
  7919  002BB6  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7920  002BB8  E133               	bnz	l9818
  7921                           
  7922                           ; BSR set to: 0
  7923  002BBA  0E0B               	movlw	11
  7924  002BBC  EC00  F02A         	call	_vscp_getGUID
  7925  002BC0  0100               	movlb	0	; () banked
  7926  002BC2  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7927  002BC4  E12D               	bnz	l9818
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  7931  002BC6  8C4C               	bsf	_vscp_guid_reset,6,c
  7932  002BC8  D02B               	goto	l9818
  7933  002BCA                     l9804:
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7937                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7938                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7939                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7940  002BCA  0E0C               	movlw	12
  7941  002BCC  EC00  F02A         	call	_vscp_getGUID
  7942  002BD0  0100               	movlb	0	; () banked
  7943  002BD2  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7944  002BD4  E125               	bnz	l9818
  7945                           
  7946                           ; BSR set to: 0
  7947  002BD6  0E0D               	movlw	13
  7948  002BD8  EC00  F02A         	call	_vscp_getGUID
  7949  002BDC  0100               	movlb	0	; () banked
  7950  002BDE  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7951  002BE0  E11F               	bnz	l9818
  7952                           
  7953                           ; BSR set to: 0
  7954  002BE2  0E0E               	movlw	14
  7955  002BE4  EC00  F02A         	call	_vscp_getGUID
  7956  002BE8  0100               	movlb	0	; () banked
  7957  002BEA  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7958  002BEC  E119               	bnz	l9818
  7959                           
  7960                           ; BSR set to: 0
  7961  002BEE  0E0F               	movlw	15
  7962  002BF0  EC00  F02A         	call	_vscp_getGUID
  7963  002BF4  0100               	movlb	0	; () banked
  7964  002BF6  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7965  002BF8  E113               	bnz	l9818
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  7969  002BFA  8E4C               	bsf	_vscp_guid_reset,7,c
  7970  002BFC  D011               	goto	l9818
  7971  002BFE                     l1211:
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  7975  002BFE  6A4C               	clrf	_vscp_guid_reset,c
  7976                           
  7977                           ;vscp_firmware.c: 952: break;
  7978  002C00  D00F               	goto	l9818
  7979  002C02                     l9816:
  7980                           
  7981                           ; BSR set to: 0
  7982  002C02  39C2               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7983  002C04  0B0F               	andlw	15
  7984  002C06  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7985  002C08  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7986                           
  7987                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7988                           ; Switch size 1, requested type "space"
  7989                           ; Number of cases is 1, Range of values is 0 to 0
  7990                           ; switch strategies available:
  7991                           ; Name         Instructions Cycles
  7992                           ; simple_byte            4     3 (average)
  7993                           ;	Chosen strategy is simple_byte
  7994  002C0A  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7995  002C0C  E1F8               	bnz	l1211
  7996                           
  7997                           ; BSR set to: 0
  7998                           ; Switch size 1, requested type "space"
  7999                           ; Number of cases is 4, Range of values is 0 to 3
  8000                           ; switch strategies available:
  8001                           ; Name         Instructions Cycles
  8002                           ; simple_byte           13     7 (average)
  8003                           ;	Chosen strategy is simple_byte
  8004  002C0E  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  8005  002C10  E08E               	bz	l9774
  8006  002C12  0A01               	xorlw	1	; case 1
  8007  002C14  E0A6               	bz	l9784
  8008  002C16  0A03               	xorlw	3	; case 2
  8009  002C18  E0BE               	bz	l9794
  8010  002C1A  0A01               	xorlw	1	; case 3
  8011  002C1C  E0D6               	bz	l9804
  8012  002C1E  D7EF               	goto	l1211
  8013  002C20                     l9818:
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  8017  002C20  504C               	movf	_vscp_guid_reset,w,c
  8018  002C22  0BF0               	andlw	240
  8019  002C24  0AF0               	xorlw	240
  8020  002C26  E001 D1E5          	bnz	l1270
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;vscp_firmware.c: 957: vscp_init();
  8024  002C2A  EC33  F027         	call	_vscp_init	;wreg free
  8025  002C2E  D1E2               	goto	l1270
  8026  002C30                     l9822:
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8030  002C30  51BA               	movf	_vscp_nickname& (0+255),w,b
  8031  002C32  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8032  002C36  62DF               	cpfseq	indf2,c
  8033  002C38  D1DD               	goto	l1270
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;vscp_firmware.c: 965: uint8_t i;
  8037                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  8038  002C3A  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  8039                           
  8040                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  8041  002C3C  C0C3  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  8042                           
  8043                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  8044  002C40  C0C4  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  8045                           
  8046                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  8047  002C44  6B98               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  8048  002C46  D044               	goto	l9854
  8049  002C48                     l9826:
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  8053  002C48  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  8054  002C4A  2598               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8055  002C4C  EC96  F029         	call	_vscp_readRegister
  8056  002C50  0100               	movlb	0	; () banked
  8057  002C52  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8058  002C54  0E07               	movlw	7
  8059  002C56  6E0E               	movwf	?___lbmod,c
  8060  002C58  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8061  002C5A  ECD2  F028         	call	___lbmod
  8062  002C5E  0100               	movlb	0	; () banked
  8063  002C60  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8064  002C62  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8065  002C64  0FD0               	addlw	low (_vscp_omsg+6)
  8066  002C66  6ED9               	movwf	fsr2l,c
  8067  002C68  6ADA               	clrf	fsr2h,c
  8068  002C6A  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;vscp_firmware.c: 973: if ((i % 7) == 6 || i == (len - 1)) {
  8072  002C6E  0E07               	movlw	7
  8073  002C70  6E0E               	movwf	?___lbmod,c
  8074  002C72  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8075  002C74  ECD2  F028         	call	___lbmod
  8076  002C78  0A06               	xorlw	6
  8077  002C7A  E00B               	bz	l9832
  8078  002C7C  0EFF               	movlw	255
  8079  002C7E  0100               	movlb	0	; () banked
  8080  002C80  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8081  002C82  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8082  002C84  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8083  002C86  0EFF               	movlw	255
  8084  002C88  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8085  002C8A  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8086  002C8C  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8087  002C8E  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8088  002C90  E11E               	bnz	l9852
  8089  002C92                     l9832:
  8090                           
  8091                           ;vscp_firmware.c: 974: uint8_t bytes;
  8092                           ;vscp_firmware.c: 976: if ((i % 7) == 6) bytes = 7;
  8093  002C92  0E07               	movlw	7
  8094  002C94  6E0E               	movwf	?___lbmod,c
  8095  002C96  0100               	movlb	0	; () banked
  8096  002C98  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8097  002C9A  ECD2  F028         	call	___lbmod
  8098  002C9E  0A06               	xorlw	6
  8099  002CA0  E103               	bnz	l9836
  8100  002CA2  0E07               	movlw	7
  8101  002CA4  0100               	movlb	0	; () banked
  8102  002CA6  D009               	goto	L9
  8103  002CA8                     l9836:
  8104                           
  8105                           ;vscp_firmware.c: 977: else bytes = (i % 7) + 1;
  8106  002CA8  0E07               	movlw	7
  8107  002CAA  6E0E               	movwf	?___lbmod,c
  8108  002CAC  0100               	movlb	0	; () banked
  8109  002CAE  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8110  002CB0  ECD2  F028         	call	___lbmod
  8111  002CB4  0100               	movlb	0	; () banked
  8112  002CB6  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8113  002CB8  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8114  002CBA                     L9:
  8115  002CBA  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;vscp_firmware.c: 979: vscp_omsg.flags = 0x80 + bytes + 1;
  8119  002CBC  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8120  002CBE  0F81               	addlw	129
  8121  002CC0  6FCA               	movwf	_vscp_omsg& (0+255),b
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;vscp_firmware.c: 980: vscp_omsg.priority = 0x03;
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;vscp_firmware.c: 981: vscp_omsg.vscp_class = 0;
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;vscp_firmware.c: 982: vscp_omsg.vscp_type = 26;
  8131  002CC2  D9AF               	call	PL80	;call to abstracted procedure
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;vscp_firmware.c: 983: vscp_omsg.data[ 0 ] = pos;
  8135  002CC4  C08B  F0CF         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;vscp_firmware.c: 986: vscp_sendEvent();
  8139  002CC8  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;vscp_firmware.c: 987: pos++;
  8143  002CCC  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8144  002CCE                     l9852:
  8145                           
  8146                           ; BSR set to: 0
  8147  002CCE  2B98               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8148  002CD0                     l9854:
  8149                           
  8150                           ; BSR set to: 0
  8151  002CD0  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8152  002CD2  5D98               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8153  002CD4  E301 D18E          	bc	l1270
  8154  002CD8  D7B7               	goto	l9826
  8155  002CDA                     l9856:
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;vscp_firmware.c: 995: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8159  002CDA  51BA               	movf	_vscp_nickname& (0+255),w,b
  8160  002CDC  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8161  002CE0  62DF               	cpfseq	indf2,c
  8162  002CE2  D188               	goto	l1270
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;vscp_firmware.c: 996: uint8_t i;
  8166                           ;vscp_firmware.c: 997: uint8_t pos = vscp_imsg.data[ 1 ];
  8167  002CE4  C0C3  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1156
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;vscp_firmware.c: 998: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8171  002CE8  51BC               	movf	_vscp_imsg& (0+255),w,b
  8172  002CEA  0FFE               	addlw	254
  8173  002CEC  0B07               	andlw	7
  8174  002CEE  6F8F               	movwf	vscp_handleProtocolEvent@len_1157& (0+255),b
  8175                           
  8176                           ; BSR set to: 0
  8177                           ;vscp_firmware.c: 1000: for (i = 0; i < len; i++) {
  8178  002CF0  6B95               	clrf	vscp_handleProtocolEvent@i_1155& (0+255),b
  8179  002CF2  D018               	goto	l9870
  8180  002CF4                     l9864:
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;vscp_firmware.c: 1002: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8184  002CF4  5195               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8185  002CF6  0FC4               	addlw	low (_vscp_imsg+8)
  8186  002CF8  6ED9               	movwf	fsr2l,c
  8187  002CFA  6ADA               	clrf	fsr2h,c
  8188  002CFC  50DF               	movf	indf2,w,c
  8189  002CFE  6E34               	movwf	?_vscp_writeRegister,c
  8190  002D00  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8191  002D02  2595               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8192  002D04  EC56  F029         	call	_vscp_writeRegister
  8193                           
  8194                           ;vscp_firmware.c: 1003: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8195  002D08  0100               	movlb	0	; () banked
  8196  002D0A  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8197  002D0C  2595               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8198  002D0E  EC96  F029         	call	_vscp_readRegister
  8199  002D12  0100               	movlb	0	; () banked
  8200  002D14  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8201  002D16  5195               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8202  002D18  0FD0               	addlw	low (_vscp_omsg+6)
  8203  002D1A  6ED9               	movwf	fsr2l,c
  8204  002D1C  6ADA               	clrf	fsr2h,c
  8205  002D1E  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8206                           
  8207                           ; BSR set to: 0
  8208  002D22  2B95               	incf	vscp_handleProtocolEvent@i_1155& (0+255),f,b
  8209  002D24                     l9870:
  8210                           
  8211                           ; BSR set to: 0
  8212  002D24  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8213  002D26  5D95               	subwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8214  002D28  E3E5               	bnc	l9864
  8215                           
  8216                           ; BSR set to: 0
  8217                           ;vscp_firmware.c: 1004: }
  8218                           ;vscp_firmware.c: 1006: vscp_omsg.priority = 0x03;
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;vscp_firmware.c: 1007: vscp_omsg.vscp_class = 0;
  8222                           
  8223                           ;vscp_firmware.c: 1008: vscp_omsg.vscp_type = 26;
  8224  002D2A  D97B               	call	PL80	;call to abstracted procedure
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;vscp_firmware.c: 1009: vscp_omsg.data[ 0 ] = 0;
  8228  002D2C  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;vscp_firmware.c: 1010: vscp_omsg.flags = 0x80 + len + 1;
  8232  002D2E  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8233  002D30  0F81               	addlw	129
  8234  002D32  6FCA               	movwf	_vscp_omsg& (0+255),b
  8235  002D34  D6AE               	goto	l9708
  8236  002D36                     l9882:
  8237                           
  8238                           ; BSR set to: 0
  8239                           ;vscp_firmware.c: 1020: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8240  002D36  51BA               	movf	_vscp_nickname& (0+255),w,b
  8241  002D38  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8242  002D3C  62DF               	cpfseq	indf2,c
  8243  002D3E  D15A               	goto	l1270
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;vscp_firmware.c: 1022: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8247                           ;vscp_firmware.c: 1023: vscp_imsg.data[ 1 ],
  8248                           ;vscp_firmware.c: 1024: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8249  002D40  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8250  002D42  EC08  F00E         	call	_vscp_readAppReg
  8251  002D46  0100               	movlb	0	; () banked
  8252  002D48  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8253  002D4A  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8254  002D4C  6E21               	movwf	?_vscp_writeAppReg,c
  8255  002D4E  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8256  002D50  EC37  F003         	call	_vscp_writeAppReg
  8257  002D54  D692               	goto	L8
  8258  002D56                     l9898:
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;vscp_firmware.c: 1040: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8262  002D56  51BA               	movf	_vscp_nickname& (0+255),w,b
  8263  002D58  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8264  002D5C  62DF               	cpfseq	indf2,c
  8265  002D5E  D14A               	goto	l1270
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;vscp_firmware.c: 1042: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8269                           ;vscp_firmware.c: 1043: vscp_imsg.data[ 1 ],
  8270                           ;vscp_firmware.c: 1044: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8271  002D60  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8272  002D62  EC08  F00E         	call	_vscp_readAppReg
  8273  002D66  0100               	movlb	0	; () banked
  8274  002D68  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8275  002D6A  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8276  002D6C  6E21               	movwf	?_vscp_writeAppReg,c
  8277  002D6E  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8278  002D70  EC37  F003         	call	_vscp_writeAppReg
  8279  002D74  D682               	goto	L8
  8280  002D76                     l9914:
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;vscp_firmware.c: 1060: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8284                           ;vscp_firmware.c: 1061: (0xff == vscp_imsg.data[ 0 ])) {
  8285  002D76  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
  8286  002D78  19BA               	xorwf	_vscp_nickname& (0+255),w,b
  8287  002D7A  E003               	bz	l1235
  8288                           
  8289                           ; BSR set to: 0
  8290  002D7C  29C2               	incf	(_vscp_imsg+6)& (0+255),w,b
  8291  002D7E  E001 D139          	bnz	l1270
  8292  002D82                     l1235:
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;vscp_firmware.c: 1063: uint8_t i, j, k = 0;
  8296  002D82  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;vscp_firmware.c: 1067: vscp_omsg.priority = 0x03;
  8300  002D84  0E03               	movlw	3
  8301  002D86  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8302                           
  8303                           ;vscp_firmware.c: 1068: vscp_omsg.flags = 0x80 + 8;
  8304  002D88  0E88               	movlw	136
  8305  002D8A  6FCA               	movwf	_vscp_omsg& (0+255),b
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;vscp_firmware.c: 1069: vscp_omsg.vscp_class = 0;
  8309  002D8C  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8310  002D8E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8311                           
  8312                           ;vscp_firmware.c: 1070: vscp_omsg.vscp_type = 32;
  8313  002D90  0E20               	movlw	32
  8314  002D92  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8315                           
  8316                           ; BSR set to: 0
  8317                           ;vscp_firmware.c: 1072: for (i = 0; i < 3; i++)
  8318  002D94  6B97               	clrf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8319  002D96                     l1236:
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;vscp_firmware.c: 1073: {
  8323                           ;vscp_firmware.c: 1074: vscp_omsg.data[0] = i;
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;vscp_firmware.c: 1076: for (j = 1; j < 8; j++) {
  8327  002D96  D94C               	call	PL88	;call to abstracted procedure
  8328  002D98                     l9934:
  8329                           
  8330                           ; BSR set to: 0
  8331                           ;vscp_firmware.c: 1077: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8332  002D98  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8333  002D9A  0FCF               	addlw	low (_vscp_omsg+5)
  8334  002D9C  6ED9               	movwf	fsr2l,c
  8335  002D9E  6ADA               	clrf	fsr2h,c
  8336  002DA0  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8337  002DA2  080F               	sublw	15
  8338  002DA4  EC00  F02A         	call	_vscp_getGUID
  8339  002DA8  6EDF               	movwf	indf2,c
  8340  002DAA  0100               	movlb	0	; () banked
  8341  002DAC  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;vscp_firmware.c: 1078: if (k > 16)
  8345  002DAE  0E10               	movlw	16
  8346  002DB0  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8347  002DB2  D001               	goto	l9942
  8348  002DB4  D004               	goto	l9946
  8349  002DB6                     l9942:
  8350                           
  8351                           ; BSR set to: 0
  8352  002DB6  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8353                           
  8354                           ; BSR set to: 0
  8355  002DB8  0E07               	movlw	7
  8356  002DBA  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8357  002DBC  D7ED               	goto	l9934
  8358  002DBE                     l9946:
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;vscp_firmware.c: 1080: }
  8362                           ;vscp_firmware.c: 1082: if (k > 16)
  8363  002DBE  0E10               	movlw	16
  8364  002DC0  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8365  002DC2  D001               	goto	l9950
  8366  002DC4  D006               	goto	l1237
  8367  002DC6                     l9950:
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;vscp_firmware.c: 1085: vscp_sendEvent();
  8371  002DC6  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8372                           
  8373                           ; BSR set to: 0
  8374  002DCA  2B97               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8375                           
  8376                           ; BSR set to: 0
  8377  002DCC  0E02               	movlw	2
  8378  002DCE  6597               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8379  002DD0  D7E2               	goto	l1236
  8380  002DD2                     l1237:
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;vscp_firmware.c: 1086: }
  8384                           ;vscp_firmware.c: 1088: for (j = 0; j < 5; j++)
  8385  002DD2  6B99               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8386  002DD4                     l9960:
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;vscp_firmware.c: 1089: {
  8390                           ;vscp_firmware.c: 1090: if (vscp_getMDF_URL(j) > 0)
  8391  002DD4  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8392  002DD6  ECC8  F029         	call	_vscp_getMDF_URL
  8393  002DDA  0900               	iorlw	0
  8394  002DDC  E008               	bz	l9964
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;vscp_firmware.c: 1091: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8398  002DDE  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8399  002DE0  0FD2               	addlw	low (_vscp_omsg+8)
  8400  002DE2  6ED9               	movwf	fsr2l,c
  8401  002DE4  6ADA               	clrf	fsr2h,c
  8402  002DE6  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8403  002DE8  ECC8  F029         	call	_vscp_getMDF_URL
  8404  002DEC  D005               	goto	L10
  8405  002DEE                     l9964:
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;vscp_firmware.c: 1092: else
  8409                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = 0;
  8410  002DEE  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8411  002DF0  0FD2               	addlw	low (_vscp_omsg+8)
  8412  002DF2  6ED9               	movwf	fsr2l,c
  8413  002DF4  6ADA               	clrf	fsr2h,c
  8414  002DF6  0E00               	movlw	0
  8415  002DF8                     L10:
  8416  002DF8  6EDF               	movwf	indf2,c
  8417                           
  8418                           ; BSR set to: 0
  8419  002DFA  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8420                           
  8421                           ; BSR set to: 0
  8422  002DFC  0E04               	movlw	4
  8423  002DFE  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8424  002E00  D7E9               	goto	l9960
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;vscp_firmware.c: 1094: }
  8428                           ;vscp_firmware.c: 1096: vscp_sendEvent();
  8429  002E02  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;vscp_firmware.c: 1098: k = 5;
  8433  002E06  0E05               	movlw	5
  8434  002E08  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;vscp_firmware.c: 1099: for (i = 3; i < 7; i++)
  8438  002E0A  0E03               	movlw	3
  8439  002E0C  6F97               	movwf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8440  002E0E                     l1246:
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;vscp_firmware.c: 1100: {
  8444                           ;vscp_firmware.c: 1101: vscp_omsg.data[0] = i;
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;vscp_firmware.c: 1103: for (j = 1; j < 8; j++) {
  8448  002E0E  D910               	call	PL88	;call to abstracted procedure
  8449  002E10                     l9986:
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;vscp_firmware.c: 1104: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8453  002E10  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8454  002E12  0FCF               	addlw	low (_vscp_omsg+5)
  8455  002E14  6ED9               	movwf	fsr2l,c
  8456  002E16  6ADA               	clrf	fsr2h,c
  8457  002E18  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8458  002E1A  ECC8  F029         	call	_vscp_getMDF_URL
  8459  002E1E  6EDF               	movwf	indf2,c
  8460                           
  8461                           ; BSR set to: 0
  8462  002E20  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8463                           
  8464                           ; BSR set to: 0
  8465  002E22  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8466                           
  8467                           ; BSR set to: 0
  8468  002E24  0E07               	movlw	7
  8469  002E26  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8470  002E28  D7F3               	goto	l9986
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;vscp_firmware.c: 1105: }
  8474                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  8475  002E2A  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8476                           
  8477                           ; BSR set to: 0
  8478  002E2E  2B97               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8479                           
  8480                           ; BSR set to: 0
  8481  002E30  0E06               	movlw	6
  8482  002E32  6597               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8483  002E34  D7EC               	goto	l1246
  8484  002E36  D0DE               	goto	l1270
  8485  002E38                     l10000:
  8486                           
  8487                           ; BSR set to: 0
  8488                           ;vscp_firmware.c: 1115: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8489  002E38  51BA               	movf	_vscp_nickname& (0+255),w,b
  8490  002E3A  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8491  002E3E  62DF               	cpfseq	indf2,c
  8492  002E40  D0D9               	goto	l1270
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;vscp_firmware.c: 1117: vscp_omsg.priority = 0x03;
  8496  002E42  0E03               	movlw	3
  8497  002E44  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8498                           
  8499                           ;vscp_firmware.c: 1118: vscp_omsg.flags = 0x80 + 7;
  8500  002E46  0E87               	movlw	135
  8501  002E48  6FCA               	movwf	_vscp_omsg& (0+255),b
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;vscp_firmware.c: 1119: vscp_omsg.vscp_class = 0;
  8505  002E4A  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8506  002E4C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8507                           
  8508                           ;vscp_firmware.c: 1120: vscp_omsg.vscp_type = 34;
  8509  002E4E  0E22               	movlw	34
  8510  002E50  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;vscp_firmware.c: 1122: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8514  002E52  0ECF               	movlw	(_vscp_omsg+5)& (0+255)
  8515  002E54  ECA3  F029         	call	_vscp_getMatrixInfo
  8516  002E58  D61C               	goto	l9708
  8517  002E5A                     l10010:
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;vscp_firmware.c: 1138: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8521  002E5A  51BA               	movf	_vscp_nickname& (0+255),w,b
  8522  002E5C  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8523  002E60  62DF               	cpfseq	indf2,c
  8524  002E62  D0C8               	goto	l1270
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;vscp_firmware.c: 1140: uint16_t page_save;
  8528                           ;vscp_firmware.c: 1141: uint8_t byte = 0, bytes = 0;
  8529  002E64  6B96               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;vscp_firmware.c: 1142: uint8_t bytes_this_time, cb;
  8533                           ;vscp_firmware.c: 1146: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8534  002E66  C0BC  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8535  002E6A  0E0F               	movlw	15
  8536  002E6C  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8537  002E6E  0E04               	movlw	4
  8538  002E70  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8539  002E72  E304               	bnc	l10018
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;vscp_firmware.c: 1149: bytes = vscp_imsg.data[4];
  8543  002E74  C0C6  F094         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1163
  8544                           
  8545                           ;vscp_firmware.c: 1151: if ( 0 == bytes ) {
  8546  002E78  6794               	tstfsz	vscp_handleProtocolEvent@bytes_1163& (0+255),b
  8547  002E7A  D002               	goto	l10022
  8548  002E7C                     l10018:
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;vscp_firmware.c: 1152: bytes = 1;
  8552  002E7C  0E01               	movlw	1
  8553  002E7E  6F94               	movwf	vscp_handleProtocolEvent@bytes_1163& (0+255),b
  8554  002E80                     l10022:
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;vscp_firmware.c: 1157: }
  8558                           ;vscp_firmware.c: 1160: page_save = vscp_page_select;
  8559  002E80  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8560  002E84  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;vscp_firmware.c: 1165: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8564  002E88  D8B6               	call	PL34	;call to abstracted procedure
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;vscp_firmware.c: 1168: vscp_omsg.priority = 0x03;
  8568  002E8A  0E03               	movlw	3
  8569  002E8C  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;vscp_firmware.c: 1169: vscp_omsg.vscp_class = 0;
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;vscp_firmware.c: 1170: vscp_omsg.vscp_type = 39;
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;vscp_firmware.c: 1171: vscp_omsg.data[0] = 0;
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;vscp_firmware.c: 1172: vscp_omsg.data[1] = vscp_imsg.data[1];
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;vscp_firmware.c: 1173: vscp_omsg.data[2] = vscp_imsg.data[2];
  8585  002E8E  D8BF               	call	PL42	;call to abstracted procedure
  8586  002E90                     l10038:
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;vscp_firmware.c: 1177: if ( ( bytes - byte ) >= 4 ) {
  8590  002E90  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8591  002E92  C094  F07F         	movff	vscp_handleProtocolEvent@bytes_1163,??_vscp_handleProtocolEvent
  8592  002E96  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8593  002E98  5F7F               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8594  002E9A  0E00               	movlw	0
  8595  002E9C  5B80               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8596  002E9E  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8597  002EA0  0A80               	xorlw	128
  8598  002EA2  0F80               	addlw	-128
  8599  002EA4  0E04               	movlw	4
  8600  002EA6  B4D8               	btfsc	status,2,c
  8601  002EA8  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8602  002EAA  E302               	bnc	l10042
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;vscp_firmware.c: 1178: bytes_this_time = 4;
  8606  002EAC  0E04               	movlw	4
  8607  002EAE  D002               	goto	L12
  8608  002EB0                     l10042:
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;vscp_firmware.c: 1180: else {
  8612                           ;vscp_firmware.c: 1181: bytes_this_time = (bytes - byte);
  8613  002EB0  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8614  002EB2  5D94               	subwf	vscp_handleProtocolEvent@bytes_1163& (0+255),w,b
  8615  002EB4                     L12:
  8616  002EB4  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;vscp_firmware.c: 1182: }
  8620                           ;vscp_firmware.c: 1185: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8621  002EB6  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8622  002EB8  0F84               	addlw	132
  8623  002EBA  6FCA               	movwf	_vscp_omsg& (0+255),b
  8624                           
  8625                           ;vscp_firmware.c: 1186: vscp_omsg.data[3] =
  8626                           ;vscp_firmware.c: 1187: vscp_imsg.data[3] + byte;
  8627  002EBC  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8628  002EBE  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8629  002EC0  6FD2               	movwf	(_vscp_omsg+8)& (0+255),b
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;vscp_firmware.c: 1190: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8633  002EC2  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8634  002EC4  D00E               	goto	l10050
  8635  002EC6                     l10046:
  8636                           
  8637                           ; BSR set to: 0
  8638                           ;vscp_firmware.c: 1191: vscp_omsg.data[ (4 + cb) ] =
  8639                           ;vscp_firmware.c: 1192: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8640  002EC6  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8641  002EC8  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8642  002ECA  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8643  002ECC  EC96  F029         	call	_vscp_readRegister
  8644  002ED0  0100               	movlb	0	; () banked
  8645  002ED2  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8646  002ED4  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8647  002ED6  0FD3               	addlw	low (_vscp_omsg+9)
  8648  002ED8  6ED9               	movwf	fsr2l,c
  8649  002EDA  6ADA               	clrf	fsr2h,c
  8650  002EDC  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8651                           
  8652                           ; BSR set to: 0
  8653  002EE0  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8654  002EE2                     l10050:
  8655                           
  8656                           ; BSR set to: 0
  8657  002EE2  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8658  002EE4  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8659  002EE6  E3EF               	bnc	l10046
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;vscp_firmware.c: 1193: }
  8663                           ;vscp_firmware.c: 1196: vscp_sendEvent();
  8664  002EE8  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;vscp_firmware.c: 1199: byte += bytes_this_time;
  8668  002EEC  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8669  002EEE  2796               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;vscp_firmware.c: 1202: vscp_omsg.data[0] += 1;
  8673  002EF0  2BCF               	incf	(_vscp_omsg+5)& (0+255),f,b
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;vscp_firmware.c: 1204: } while (byte < bytes);
  8677  002EF2  5194               	movf	vscp_handleProtocolEvent@bytes_1163& (0+255),w,b
  8678  002EF4  5D96               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8679  002EF6  E3CC               	bnc	l10038
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;vscp_firmware.c: 1207: vscp_page_select = page_save;
  8683  002EF8  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8684  002EFC  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8685  002F00  D079               	goto	l1270
  8686  002F02                     l10060:
  8687                           
  8688                           ; BSR set to: 0
  8689                           ;vscp_firmware.c: 1214: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8690  002F02  51BA               	movf	_vscp_nickname& (0+255),w,b
  8691  002F04  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8692  002F08  62DF               	cpfseq	indf2,c
  8693  002F0A  D074               	goto	l1270
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;vscp_firmware.c: 1216: uint8_t i;
  8697                           ;vscp_firmware.c: 1217: uint16_t page_save;
  8698                           ;vscp_firmware.c: 1220: page_save = vscp_page_select;
  8699  002F0C  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1167
  8700  002F10  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1167+1
  8701                           
  8702                           ; BSR set to: 0
  8703                           ;vscp_firmware.c: 1224: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8704  002F14  D870               	call	PL34	;call to abstracted procedure
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;vscp_firmware.c: 1226: for (i = vscp_imsg.data[ 3 ];
  8708  002F16  C0C5  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1166
  8709                           
  8710                           ;vscp_firmware.c: 1229: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8711                           ;vscp_firmware.c: 1230: i++) {
  8712  002F1A  D014               	goto	l10072
  8713  002F1C                     l10068:
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;vscp_firmware.c: 1231: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8717                           ;vscp_firmware.c: 1232: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8718  002F1C  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8719  002F1E  08C6               	sublw	low (_vscp_imsg+10)
  8720  002F20  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8721  002F22  6ED9               	movwf	fsr2l,c
  8722  002F24  6ADA               	clrf	fsr2h,c
  8723  002F26  50DF               	movf	indf2,w,c
  8724  002F28  6E34               	movwf	?_vscp_writeRegister,c
  8725  002F2A  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8726  002F2C  EC56  F029         	call	_vscp_writeRegister
  8727  002F30  0100               	movlb	0	; () banked
  8728  002F32  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8729  002F34  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8730  002F36  08D3               	sublw	low (_vscp_omsg+9)
  8731  002F38  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8732  002F3A  6ED9               	movwf	fsr2l,c
  8733  002F3C  6ADA               	clrf	fsr2h,c
  8734  002F3E  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8735                           
  8736                           ; BSR set to: 0
  8737  002F42  2B92               	incf	vscp_handleProtocolEvent@i_1166& (0+255),f,b
  8738  002F44                     l10072:
  8739                           
  8740                           ; BSR set to: 0
  8741  002F44  51BC               	movf	_vscp_imsg& (0+255),w,b
  8742  002F46  0B0F               	andlw	15
  8743  002F48  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8744  002F4A  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8745  002F4C  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8746  002F4E  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8747  002F50  0E00               	movlw	0
  8748  002F52  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8749  002F54  0EFC               	movlw	252
  8750  002F56  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8751  002F58  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8752  002F5A  0EFF               	movlw	255
  8753  002F5C  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8754  002F5E  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8755  002F60  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8756  002F62  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8757  002F64  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8758  002F66  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8759  002F68  0A80               	xorlw	128
  8760  002F6A  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8761  002F6C  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8762  002F6E  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8763  002F70  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8764  002F72  0A80               	xorlw	128
  8765  002F74  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8766  002F76  E3D2               	bnc	l10068
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;vscp_firmware.c: 1233: }
  8770                           ;vscp_firmware.c: 1236: vscp_page_select = page_save;
  8771  002F78  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1167,_vscp_page_select
  8772  002F7C  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1167+1,_vscp_page_select+1
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;vscp_firmware.c: 1238: vscp_omsg.priority = 0x03;
  8776  002F80  0E03               	movlw	3
  8777  002F82  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;vscp_firmware.c: 1239: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8781  002F84  51BC               	movf	_vscp_imsg& (0+255),w,b
  8782  002F86  0B0F               	andlw	15
  8783  002F88  0F80               	addlw	128
  8784  002F8A  6FCA               	movwf	_vscp_omsg& (0+255),b
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;vscp_firmware.c: 1240: vscp_omsg.vscp_class = 0;
  8788                           
  8789                           ; BSR set to: 0
  8790                           ;vscp_firmware.c: 1241: vscp_omsg.vscp_type = 39;
  8791                           
  8792                           ; BSR set to: 0
  8793                           ;vscp_firmware.c: 1242: vscp_omsg.data[0] = 0;
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;vscp_firmware.c: 1243: vscp_omsg.data[1] = vscp_imsg.data[1];
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;vscp_firmware.c: 1244: vscp_omsg.data[2] = vscp_imsg.data[2];
  8800  002F8C  D840               	call	PL42	;call to abstracted procedure
  8801                           
  8802                           ; BSR set to: 0
  8803                           ;vscp_firmware.c: 1245: vscp_omsg.data[3] = vscp_imsg.data[3];
  8804  002F8E  C0C5  F0D2         	movff	_vscp_imsg+9,_vscp_omsg+8
  8805  002F92  D57F               	goto	l9708
  8806  002F94                     l10094:
  8807                           
  8808                           ; BSR set to: 0
  8809  002F94  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  8810                           
  8811                           ; Switch size 1, requested type "space"
  8812                           ; Number of cases is 16, Range of values is 1 to 38
  8813                           ; switch strategies available:
  8814                           ; Name         Instructions Cycles
  8815                           ; simple_byte           49    25 (average)
  8816                           ;	Chosen strategy is simple_byte
  8817  002F96  0A01               	xorlw	1	; case 1
  8818  002F98  E101 D553          	bz	l9682
  8819  002F9C  0A03               	xorlw	3	; case 2
  8820  002F9E  E101 D553          	bz	l9684
  8821  002FA2  0A04               	xorlw	4	; case 6
  8822  002FA4  E101 D553          	bz	l9686
  8823  002FA8  0A0E               	xorlw	14	; case 8
  8824  002FAA  E101 D553          	bz	l9688
  8825  002FAE  0A01               	xorlw	1	; case 9
  8826  002FB0  E101 D553          	bz	l9690
  8827  002FB4  0A02               	xorlw	2	; case 11
  8828  002FB6  E101 D573          	bz	l9724
  8829  002FBA  0A07               	xorlw	7	; case 12
  8830  002FBC  E101 D589          	bz	l9758
  8831  002FC0  0A1B               	xorlw	27	; case 23
  8832  002FC2  E101 D61E          	bz	l9816
  8833  002FC6  0A0F               	xorlw	15	; case 24
  8834  002FC8  E101 D632          	bz	l9822
  8835  002FCC  0A01               	xorlw	1	; case 25
  8836  002FCE  E101 D684          	bz	l9856
  8837  002FD2  0A04               	xorlw	4	; case 29
  8838  002FD4  E101 D6AF          	bz	l9882
  8839  002FD8  0A03               	xorlw	3	; case 30
  8840  002FDA  E101 D6BC          	bz	l9898
  8841  002FDE  0A01               	xorlw	1	; case 31
  8842  002FE0  E101 D6C9          	bz	l9914
  8843  002FE4  0A3E               	xorlw	62	; case 33
  8844  002FE6  E101 D727          	bz	l10000
  8845  002FEA  0A04               	xorlw	4	; case 37
  8846  002FEC  E101 D735          	bz	l10010
  8847  002FF0  0A03               	xorlw	3	; case 38
  8848  002FF2  E087               	bz	l10060
  8849  002FF4                     l1270:
  8850  002FF4  0012               	return	
  8851  002FF6                     __end_of_vscp_handleProtocolEvent:
  8852                           	opt stack 0
  8853  002FF6                     PL34:
  8854                           	opt stack 22
  8855  002FF6  51C4               	movf	(_vscp_imsg+8)& (0+255),w,b
  8856  002FF8  C0C3  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8857  002FFC  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8858  002FFE  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8859  003002  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8860  003004  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8861  003006  6E46               	movwf	_vscp_page_select,c
  8862  003008  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8863  00300A  6E47               	movwf	_vscp_page_select+1,c
  8864  00300C  0012               	return	
  8865  00300E                     __end_ofPL34:
  8866                           	opt stack 0
  8867  00300E                     PL42:
  8868                           	opt stack 22
  8869  00300E  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8870  003010  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8871  003012  0E27               	movlw	39
  8872  003014  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8873  003016  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8874  003018  C0C3  F0D0         	movff	_vscp_imsg+7,_vscp_omsg+6
  8875  00301C  C0C4  F0D1         	movff	_vscp_imsg+8,_vscp_omsg+7
  8876  003020  0012               	return	
  8877  003022                     __end_ofPL42:
  8878                           	opt stack 0
  8879  003022                     PL80:
  8880                           	opt stack 22
  8881  003022  0E03               	movlw	3
  8882  003024  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8883  003026  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8884  003028  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8885  00302A  0E1A               	movlw	26
  8886  00302C  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8887  00302E  0C1A               	retlw	26
  8888  003030                     __end_ofPL80:
  8889                           	opt stack 0
  8890  003030                     PL88:
  8891                           	opt stack 22
  8892  003030  C097  F0CF         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8893  003034  0E01               	movlw	1
  8894  003036  6F99               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8895  003038  0C01               	retlw	1
  8896  00303A                     __end_ofPL88:
  8897                           	opt stack 0
  8898                           tblptru	equ	0xFF8
  8899                           tblptrh	equ	0xFF7
  8900                           tblptrl	equ	0xFF6
  8901                           tablat	equ	0xFF5
  8902                           prodh	equ	0xFF4
  8903                           prodl	equ	0xFF3
  8904                           intcon	equ	0xFF2
  8905                           postinc0	equ	0xFEE
  8906                           wreg	equ	0xFE8
  8907                           indf1	equ	0xFE7
  8908                           postdec1	equ	0xFE5
  8909                           fsr1h	equ	0xFE2
  8910                           fsr1l	equ	0xFE1
  8911                           indf2	equ	0xFDF
  8912                           postinc2	equ	0xFDE
  8913                           postdec2	equ	0xFDD
  8914                           plusw2	equ	0xFDB
  8915                           fsr2h	equ	0xFDA
  8916                           fsr2l	equ	0xFD9
  8917                           status	equ	0xFD8
  8918                           
  8919 ;; *************** function ___lbmod *****************
  8920 ;; Defined at:
  8921 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;  dividend        1    wreg     unsigned char 
  8924 ;;  divisor         1   13[COMRAM] unsigned char 
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;  dividend        1   14[COMRAM] unsigned char 
  8927 ;;  rem             1   16[COMRAM] unsigned char 
  8928 ;;  counter         1   15[COMRAM] unsigned char 
  8929 ;; Return value:  Size  Location     Type
  8930 ;;                  1    wreg      unsigned char 
  8931 ;; Registers used:
  8932 ;;		wreg, status,2, status,0
  8933 ;; Tracked objects:
  8934 ;;		On entry : F/0
  8935 ;;		On exit  : 0/0
  8936 ;;		Unchanged: 0/0
  8937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8938 ;;      Params:         1       0       0       0       0       0       0
  8939 ;;      Locals:         3       0       0       0       0       0       0
  8940 ;;      Temps:          0       0       0       0       0       0       0
  8941 ;;      Totals:         4       0       0       0       0       0       0
  8942 ;;Total ram usage:        4 bytes
  8943 ;; Hardware stack levels used:    1
  8944 ;; Hardware stack levels required when called:    2
  8945 ;; This function calls:
  8946 ;;		Nothing
  8947 ;; This function is called by:
  8948 ;;		_vscp_handleProtocolEvent
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           	psect	text34
  8953  0051A4                     __ptext34:
  8954                           	opt stack 0
  8955  0051A4                     ___lbmod:
  8956                           	opt stack 27
  8957                           
  8958                           ;incstack = 0
  8959                           ;incstack = 0
  8960                           ;___lbmod@dividend stored from wreg
  8961  0051A4  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8962                           
  8963                           ; BSR set to: 0
  8964  0051A8  0E08               	movlw	8
  8965  0051AA  6E10               	movwf	___lbmod@counter,c
  8966                           
  8967                           ; BSR set to: 0
  8968  0051AC  6A11               	clrf	___lbmod@rem,c
  8969  0051AE                     l9118:
  8970  0051AE  90D8               	bcf	status,0,c
  8971  0051B0  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8972  0051B2  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8973  0051B4  6E11               	movwf	___lbmod@rem,c
  8974  0051B6  90D8               	bcf	status,0,c
  8975  0051B8  360F               	rlcf	___lbmod@dividend,f,c
  8976  0051BA  500E               	movf	___lbmod@divisor,w,c
  8977  0051BC  5C11               	subwf	___lbmod@rem,w,c
  8978  0051BE  E302               	bnc	l9126
  8979  0051C0  500E               	movf	___lbmod@divisor,w,c
  8980  0051C2  5E11               	subwf	___lbmod@rem,f,c
  8981  0051C4                     l9126:
  8982  0051C4  2E10               	decfsz	___lbmod@counter,f,c
  8983  0051C6  D7F3               	goto	l9118
  8984  0051C8  5011               	movf	___lbmod@rem,w,c
  8985  0051CA  0012               	return	
  8986  0051CC                     __end_of___lbmod:
  8987                           	opt stack 0
  8988                           tblptru	equ	0xFF8
  8989                           tblptrh	equ	0xFF7
  8990                           tblptrl	equ	0xFF6
  8991                           tablat	equ	0xFF5
  8992                           prodh	equ	0xFF4
  8993                           prodl	equ	0xFF3
  8994                           intcon	equ	0xFF2
  8995                           postinc0	equ	0xFEE
  8996                           wreg	equ	0xFE8
  8997                           indf1	equ	0xFE7
  8998                           postdec1	equ	0xFE5
  8999                           fsr1h	equ	0xFE2
  9000                           fsr1l	equ	0xFE1
  9001                           indf2	equ	0xFDF
  9002                           postinc2	equ	0xFDE
  9003                           postdec2	equ	0xFDD
  9004                           plusw2	equ	0xFDB
  9005                           fsr2h	equ	0xFDA
  9006                           fsr2l	equ	0xFD9
  9007                           status	equ	0xFD8
  9008                           
  9009 ;; *************** function _vscp_writeRegister *****************
  9010 ;; Defined at:
  9011 ;;		line 678 in file "../../vscp_firmware/common/vscp_firmware.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;  reg             1    wreg     unsigned char 
  9014 ;;  value           1   51[COMRAM] unsigned char 
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;  reg             1   52[COMRAM] unsigned char 
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  1    wreg      unsigned char 
  9019 ;; Registers used:
  9020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9021 ;; Tracked objects:
  9022 ;;		On entry : F/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9026 ;;      Params:         1       0       0       0       0       0       0
  9027 ;;      Locals:         1       0       0       0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0
  9029 ;;      Totals:         2       0       0       0       0       0       0
  9030 ;;Total ram usage:        2 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; Hardware stack levels required when called:    7
  9033 ;; This function calls:
  9034 ;;		_vscp_writeAppReg
  9035 ;;		_vscp_writeStdReg
  9036 ;; This function is called by:
  9037 ;;		_vscp_handleProtocolEvent
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text35
  9042  0052AC                     __ptext35:
  9043                           	opt stack 0
  9044  0052AC                     _vscp_writeRegister:
  9045                           	opt stack 22
  9046                           
  9047                           ;incstack = 0
  9048                           ;incstack = 0
  9049                           ;vscp_writeRegister@reg stored from wreg
  9050  0052AC  CFE8 F035          	movff	wreg,vscp_writeRegister@reg
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;vscp_firmware.c: 679: if (reg >= 0x80) {
  9054  0052B0  0E7F               	movlw	127
  9055  0052B2  6435               	cpfsgt	vscp_writeRegister@reg,c
  9056  0052B4  D006               	goto	l11334
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;vscp_firmware.c: 680: return vscp_writeStdReg(reg, value);
  9060  0052B6  C034  F022         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9061  0052BA  5035               	movf	vscp_writeRegister@reg,w,c
  9062  0052BC  ECF5  F01A         	call	_vscp_writeStdReg
  9063  0052C0  D005               	goto	l1147
  9064  0052C2                     l11334:
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;vscp_firmware.c: 682: return vscp_writeAppReg(reg, value);
  9068  0052C2  C034  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9069  0052C6  5035               	movf	vscp_writeRegister@reg,w,c
  9070  0052C8  EC37  F003         	call	_vscp_writeAppReg
  9071  0052CC                     l1147:
  9072  0052CC  0012               	return	
  9073  0052CE                     __end_of_vscp_writeRegister:
  9074                           	opt stack 0
  9075                           tblptru	equ	0xFF8
  9076                           tblptrh	equ	0xFF7
  9077                           tblptrl	equ	0xFF6
  9078                           tablat	equ	0xFF5
  9079                           prodh	equ	0xFF4
  9080                           prodl	equ	0xFF3
  9081                           intcon	equ	0xFF2
  9082                           postinc0	equ	0xFEE
  9083                           wreg	equ	0xFE8
  9084                           indf1	equ	0xFE7
  9085                           postdec1	equ	0xFE5
  9086                           fsr1h	equ	0xFE2
  9087                           fsr1l	equ	0xFE1
  9088                           indf2	equ	0xFDF
  9089                           postinc2	equ	0xFDE
  9090                           postdec2	equ	0xFDD
  9091                           plusw2	equ	0xFDB
  9092                           fsr2h	equ	0xFDA
  9093                           fsr2l	equ	0xFD9
  9094                           status	equ	0xFD8
  9095                           
  9096 ;; *************** function _vscp_writeStdReg *****************
  9097 ;; Defined at:
  9098 ;;		line 691 in file "../../vscp_firmware/common/vscp_firmware.c"
  9099 ;; Parameters:    Size  Location     Type
  9100 ;;  reg             1    wreg     unsigned char 
  9101 ;;  value           1   33[COMRAM] unsigned char 
  9102 ;; Auto vars:     Size  Location     Type
  9103 ;;  reg             1   50[COMRAM] unsigned char 
  9104 ;;  code            4   43[COMRAM] unsigned long 
  9105 ;;  idx             1   48[COMRAM] unsigned char 
  9106 ;;  code            4   39[COMRAM] unsigned long 
  9107 ;;  idx             1   47[COMRAM] unsigned char 
  9108 ;;  rv              1   49[COMRAM] unsigned char 
  9109 ;; Return value:  Size  Location     Type
  9110 ;;                  1    wreg      unsigned char 
  9111 ;; Registers used:
  9112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9113 ;; Tracked objects:
  9114 ;;		On entry : F/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9118 ;;      Params:         1       0       0       0       0       0       0
  9119 ;;      Locals:        12       0       0       0       0       0       0
  9120 ;;      Temps:          5       0       0       0       0       0       0
  9121 ;;      Totals:        18       0       0       0       0       0       0
  9122 ;;Total ram usage:       18 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    6
  9125 ;; This function calls:
  9126 ;;		_vscp_getGUID
  9127 ;;		_vscp_setGUID
  9128 ;;		_vscp_getUserID
  9129 ;;		_vscp_setUserID
  9130 ;;		_vscp_getManufacturerId
  9131 ;;		_vscp_setManufacturerId
  9132 ;;		_vscp_getFamilyCode
  9133 ;;		_vscp_getFamilyType
  9134 ;;		_vscp_restoreDefaults
  9135 ;; This function is called by:
  9136 ;;		_vscp_writeRegister
  9137 ;;		_vscp_handleProtocolEvent
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           	psect	text36
  9142  0035EA                     __ptext36:
  9143                           	opt stack 0
  9144  0035EA                     _vscp_writeStdReg:
  9145                           	opt stack 23
  9146                           
  9147                           ;incstack = 0
  9148                           ;incstack = 0
  9149                           ;vscp_writeStdReg@reg stored from wreg
  9150  0035EA  CFE8 F033          	movff	wreg,vscp_writeStdReg@reg
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;vscp_firmware.c: 692: uint8_t rv = ~value;
  9154  0035EE  1C22               	comf	vscp_writeStdReg@value,w,c
  9155  0035F0  6E32               	movwf	vscp_writeStdReg@rv,c
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;vscp_firmware.c: 694: if ((reg > (0x82 + 1)) &&
  9159                           ;vscp_firmware.c: 695: (reg < 0x89)) {
  9160  0035F2  0E83               	movlw	131
  9161  0035F4  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9162  0035F6  D00E               	goto	l11346
  9163                           
  9164                           ; BSR set to: 0
  9165  0035F8  0E89               	movlw	137
  9166  0035FA  6033               	cpfslt	vscp_writeStdReg@reg,c
  9167  0035FC  D00B               	goto	l11346
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;vscp_firmware.c: 698: vscp_setUserID((reg - 0x84), value);
  9171  0035FE  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9172  003602  5033               	movf	vscp_writeStdReg@reg,w,c
  9173  003604  0F7C               	addlw	124
  9174  003606  ECBC  F029         	call	_vscp_setUserID
  9175                           
  9176                           ;vscp_firmware.c: 699: rv = vscp_getUserID((reg - 0x84));
  9177  00360A  5033               	movf	vscp_writeStdReg@reg,w,c
  9178  00360C  0F7C               	addlw	124
  9179  00360E  ECF6  F029         	call	_vscp_getUserID
  9180  003612  D077               	goto	L17
  9181  003614                     l11346:
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;vscp_firmware.c: 702: else if (0x92 == reg) {
  9185  003614  5033               	movf	vscp_writeStdReg@reg,w,c
  9186  003616  0A92               	xorlw	146
  9187  003618  E10D               	bnz	l11352
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;vscp_firmware.c: 705: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9191  00361A  5022               	movf	vscp_writeStdReg@value,w,c
  9192  00361C  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9193  00361E  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9194  003620  5046               	movf	_vscp_page_select,w,c
  9195  003622  6E25               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9196  003624  6A26               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9197  003626  1023               	iorwf	??_vscp_writeStdReg,w,c
  9198  003628  6E46               	movwf	_vscp_page_select,c
  9199  00362A  5024               	movf	??_vscp_writeStdReg+1,w,c
  9200  00362C  1026               	iorwf	??_vscp_writeStdReg+3,w,c
  9201  00362E  6E47               	movwf	_vscp_page_select+1,c
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;vscp_firmware.c: 706: rv = (vscp_page_select >> 8) & 0xff;
  9205  003630  5047               	movf	_vscp_page_select+1,w,c
  9206  003632  D067               	goto	L17
  9207  003634                     l11352:
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;vscp_firmware.c: 708: else if (0x93 == reg) {
  9211  003634  5033               	movf	vscp_writeStdReg@reg,w,c
  9212  003636  0A93               	xorlw	147
  9213  003638  E10B               	bnz	l11358
  9214                           
  9215                           ; BSR set to: 0
  9216                           ;vscp_firmware.c: 711: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9217  00363A  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9218  00363C  5047               	movf	_vscp_page_select+1,w,c
  9219  00363E  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9220  003640  5022               	movf	vscp_writeStdReg@value,w,c
  9221  003642  1023               	iorwf	??_vscp_writeStdReg,w,c
  9222  003644  6E46               	movwf	_vscp_page_select,c
  9223  003646  5024               	movf	??_vscp_writeStdReg+1,w,c
  9224  003648  6E47               	movwf	_vscp_page_select+1,c
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;vscp_firmware.c: 712: rv = (vscp_page_select & 0xff);
  9228  00364A  C046  F032         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9229                           
  9230                           ;vscp_firmware.c: 713: }
  9231  00364E  D098               	goto	l11420
  9232  003650                     l11358:
  9233                           
  9234                           ; BSR set to: 0
  9235                           ;vscp_firmware.c: 718: else if ((reg > 0x88) && (reg < 0x91)) {
  9236  003650  0E88               	movlw	136
  9237  003652  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9238  003654  D019               	goto	l11370
  9239                           
  9240                           ; BSR set to: 0
  9241  003656  0E91               	movlw	145
  9242  003658  6033               	cpfslt	vscp_writeStdReg@reg,c
  9243  00365A  D016               	goto	l11370
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;vscp_firmware.c: 720: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9247                           ;vscp_firmware.c: 721: (0xff != (vscp_page_select & 0xff))) {
  9248  00365C  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9249  003660  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9250  003664  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9251  003666  2824               	incf	??_vscp_writeStdReg+1,w,c
  9252  003668  E102               	bnz	l11366
  9253                           
  9254                           ; BSR set to: 0
  9255  00366A  2846               	incf	_vscp_page_select,w,c
  9256  00366C  E002               	bz	l11368
  9257  00366E                     l11366:
  9258                           
  9259                           ; BSR set to: 0
  9260                           ;vscp_firmware.c: 723: rv = ~value;
  9261  00366E  1C22               	comf	vscp_writeStdReg@value,w,c
  9262  003670  D048               	goto	L17
  9263  003672                     l11368:
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;vscp_firmware.c: 726: vscp_setManufacturerId(reg - 0x89, value);
  9267  003672  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9268  003676  5033               	movf	vscp_writeStdReg@reg,w,c
  9269  003678  0F77               	addlw	119
  9270  00367A  ECB0  F029         	call	_vscp_setManufacturerId
  9271                           
  9272                           ;vscp_firmware.c: 727: rv = vscp_getManufacturerId(reg - 0x89);
  9273  00367E  5033               	movf	vscp_writeStdReg@reg,w,c
  9274  003680  0F77               	addlw	119
  9275  003682  ECEC  F029         	call	_vscp_getManufacturerId
  9276  003686  D03D               	goto	L17
  9277  003688                     l11370:
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;vscp_firmware.c: 730: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9281  003688  0ECF               	movlw	207
  9282  00368A  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9283  00368C  D017               	goto	l11382
  9284                           
  9285                           ; BSR set to: 0
  9286  00368E  0EE0               	movlw	224
  9287  003690  6033               	cpfslt	vscp_writeStdReg@reg,c
  9288  003692  D014               	goto	l11382
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;vscp_firmware.c: 732: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9292                           ;vscp_firmware.c: 733: (0xff != (vscp_page_select & 0xff))) {
  9293  003694  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9294  003698  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9295  00369C  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9296  00369E  2824               	incf	??_vscp_writeStdReg+1,w,c
  9297  0036A0  E1E6               	bnz	l11366
  9298                           
  9299                           ; BSR set to: 0
  9300  0036A2  2846               	incf	_vscp_page_select,w,c
  9301  0036A4  E1E4               	bnz	l11366
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;vscp_firmware.c: 737: else {
  9305                           ;vscp_firmware.c: 738: vscp_setGUID(reg - 0xD0, value);
  9306  0036A6  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9307  0036AA  5033               	movf	vscp_writeStdReg@reg,w,c
  9308  0036AC  0F30               	addlw	48
  9309  0036AE  EC67  F029         	call	_vscp_setGUID
  9310                           
  9311                           ;vscp_firmware.c: 739: rv = vscp_getGUID(reg - 0xD0);
  9312  0036B2  5033               	movf	vscp_writeStdReg@reg,w,c
  9313  0036B4  0F30               	addlw	48
  9314  0036B6  EC00  F02A         	call	_vscp_getGUID
  9315  0036BA  D023               	goto	L17
  9316  0036BC                     l11382:
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;vscp_firmware.c: 743: else if ( ( reg >= 0x9A ) &&
  9320                           ;vscp_firmware.c: 744: ( reg < 0x9E ) ) {
  9321  0036BC  0E99               	movlw	153
  9322  0036BE  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9323  0036C0  D022               	goto	l11392
  9324                           
  9325                           ; BSR set to: 0
  9326  0036C2  0E9E               	movlw	158
  9327  0036C4  6033               	cpfslt	vscp_writeStdReg@reg,c
  9328  0036C6  D01F               	goto	l11392
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;vscp_firmware.c: 746: uint32_t code = vscp_getFamilyCode();
  9332  0036C8  EC4F  F02A         	call	_vscp_getFamilyCode	;wreg free
  9333  0036CC  C011  F02B         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  9334  0036D0  C010  F02A         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  9335  0036D4  C00F  F029         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  9336  0036D8  C00E  F028         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  9337                           
  9338                           ; BSR set to: 0
  9339                           ;vscp_firmware.c: 747: uint8_t idx = reg - 0x9A;
  9340  0036DC  5033               	movf	vscp_writeStdReg@reg,w,c
  9341  0036DE  0F66               	addlw	102
  9342  0036E0  6E30               	movwf	vscp_writeStdReg@idx,c
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;vscp_firmware.c: 748: rv = code >> (((3-idx)*8) & 0xff);
  9346  0036E2  5030               	movf	vscp_writeStdReg@idx,w,c
  9347  0036E4  D84F               	call	PL54	;call to abstracted procedure
  9348  0036E6  C028  F024         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  9349  0036EA  C029  F025         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  9350  0036EE  C02A  F026         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  9351  0036F2  C02B  F027         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  9352  0036F6  2AE8               	incf	wreg,f,c
  9353  0036F8  D001               	goto	u9620
  9354  0036FA                     u9625:
  9355  0036FA  D84E               	call	PL84	;call to abstracted procedure
  9356  0036FC                     u9620:
  9357  0036FC  2EE8               	decfsz	wreg,f,c
  9358  0036FE  D7FD               	goto	u9625
  9359  003700  D024               	goto	L18
  9360  003702                     L17:
  9361  003702  6E32               	movwf	vscp_writeStdReg@rv,c
  9362                           
  9363                           ;vscp_firmware.c: 749: }
  9364  003704  D03D               	goto	l11420
  9365  003706                     l11392:
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;vscp_firmware.c: 750: else if ( ( reg >= 0x9E ) &&
  9369                           ;vscp_firmware.c: 751: ( reg < 0xA2 ) ) {
  9370  003706  0E9D               	movlw	157
  9371  003708  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9372  00370A  D021               	goto	l11402
  9373                           
  9374                           ; BSR set to: 0
  9375  00370C  0EA2               	movlw	162
  9376  00370E  6033               	cpfslt	vscp_writeStdReg@reg,c
  9377  003710  D01E               	goto	l11402
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;vscp_firmware.c: 753: uint32_t code = vscp_getFamilyType();
  9381  003712  EC4A  F02A         	call	_vscp_getFamilyType	;wreg free
  9382  003716  C011  F02F         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1147+3
  9383  00371A  C010  F02E         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1147+2
  9384  00371E  C00F  F02D         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1147+1
  9385  003722  C00E  F02C         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1147
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;vscp_firmware.c: 754: uint8_t idx = reg - 0x9E;
  9389  003726  5033               	movf	vscp_writeStdReg@reg,w,c
  9390  003728  0F62               	addlw	98
  9391  00372A  6E31               	movwf	vscp_writeStdReg@idx_1148,c
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;vscp_firmware.c: 755: rv = code >> (((3-idx)*8) & 0xff);
  9395  00372C  5031               	movf	vscp_writeStdReg@idx_1148,w,c
  9396  00372E  D82A               	call	PL54	;call to abstracted procedure
  9397  003730  C02C  F024         	movff	vscp_writeStdReg@code_1147,??_vscp_writeStdReg+1
  9398  003734  C02D  F025         	movff	vscp_writeStdReg@code_1147+1,??_vscp_writeStdReg+2
  9399  003738  C02E  F026         	movff	vscp_writeStdReg@code_1147+2,??_vscp_writeStdReg+3
  9400  00373C  C02F  F027         	movff	vscp_writeStdReg@code_1147+3,??_vscp_writeStdReg+4
  9401  003740  2AE8               	incf	wreg,f,c
  9402  003742  D001               	goto	u9650
  9403  003744                     u9655:
  9404  003744  D829               	call	PL84	;call to abstracted procedure
  9405  003746                     u9650:
  9406  003746  2EE8               	decfsz	wreg,f,c
  9407  003748  D7FD               	goto	u9655
  9408  00374A                     L18:
  9409  00374A  5024               	movf	??_vscp_writeStdReg+1,w,c
  9410  00374C  D7DA               	goto	L17
  9411  00374E                     l11402:
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  9415  00374E  5033               	movf	vscp_writeStdReg@reg,w,c
  9416  003750  0AA2               	xorlw	162
  9417  003752  E18D               	bnz	l11366
  9418                           
  9419                           ; BSR set to: 0
  9420                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  9421  003754  5022               	movf	vscp_writeStdReg@value,w,c
  9422  003756  0A55               	xorlw	85
  9423  003758  E105               	bnz	l11410
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  9427  00375A  0101               	movlb	1	; () banked
  9428  00375C  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9429  00375E  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9430                           
  9431                           ; BSR set to: 1
  9432                           ;vscp_firmware.c: 760: rv = 0x55;
  9433  003760  0E55               	movlw	85
  9434  003762  D7CF               	goto	L17
  9435  003764                     l11410:
  9436                           
  9437                           ; BSR set to: 0
  9438                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  9439  003764  5022               	movf	vscp_writeStdReg@value,w,c
  9440  003766  0AAA               	xorlw	170
  9441  003768  E10B               	bnz	l11420
  9442                           
  9443                           ; BSR set to: 0
  9444                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  9445  00376A  0EE8               	movlw	232
  9446  00376C  0101               	movlb	1	; () banked
  9447  00376E  5D1A               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9448  003770  0E03               	movlw	3
  9449  003772  591B               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9450  003774  E204               	bc	l1177
  9451                           
  9452                           ; BSR set to: 1
  9453                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  9454  003776  EC5E  F02A         	call	_vscp_restoreDefaults	;wreg free
  9455                           
  9456                           ; BSR set to: 1
  9457                           ;vscp_firmware.c: 765: rv = 0xaa;
  9458  00377A  0EAA               	movlw	170
  9459  00377C  D7C2               	goto	L17
  9460  00377E                     l1177:
  9461                           
  9462                           ; BSR set to: 1
  9463                           ;vscp_firmware.c: 767: else {
  9464                           ;vscp_firmware.c: 768: rv = 0;
  9465  00377E  6A32               	clrf	vscp_writeStdReg@rv,c
  9466  003780                     l11420:
  9467                           
  9468                           ;vscp_firmware.c: 776: }
  9469                           ;vscp_firmware.c: 778: return rv;
  9470  003780  5032               	movf	vscp_writeStdReg@rv,w,c
  9471  003782  0012               	return	
  9472  003784                     __end_of_vscp_writeStdReg:
  9473                           	opt stack 0
  9474  003784                     PL54:
  9475                           	opt stack 23
  9476  003784  0803               	sublw	3
  9477  003786  6E23               	movwf	??_vscp_writeStdReg& (0+255),c
  9478  003788  90D8               	bcf	status,0,c
  9479  00378A  3623               	rlcf	??_vscp_writeStdReg,f,c
  9480  00378C  90D8               	bcf	status,0,c
  9481  00378E  3623               	rlcf	??_vscp_writeStdReg,f,c
  9482  003790  90D8               	bcf	status,0,c
  9483  003792  3623               	rlcf	??_vscp_writeStdReg,f,c
  9484  003794  5023               	movf	??_vscp_writeStdReg,w,c
  9485  003796  0012               	return	
  9486  003798                     __end_ofPL54:
  9487                           	opt stack 0
  9488  003798                     PL84:
  9489                           	opt stack 23
  9490  003798  90D8               	bcf	status,0,c
  9491  00379A  3227               	rrcf	??_vscp_writeStdReg+4,f,c
  9492  00379C  3226               	rrcf	??_vscp_writeStdReg+3,f,c
  9493  00379E  3225               	rrcf	??_vscp_writeStdReg+2,f,c
  9494  0037A0  3224               	rrcf	??_vscp_writeStdReg+1,f,c
  9495  0037A2  0012               	return	
  9496  0037A4                     __end_ofPL84:
  9497                           	opt stack 0
  9498                           tblptru	equ	0xFF8
  9499                           tblptrh	equ	0xFF7
  9500                           tblptrl	equ	0xFF6
  9501                           tablat	equ	0xFF5
  9502                           prodh	equ	0xFF4
  9503                           prodl	equ	0xFF3
  9504                           intcon	equ	0xFF2
  9505                           postinc0	equ	0xFEE
  9506                           wreg	equ	0xFE8
  9507                           indf1	equ	0xFE7
  9508                           postdec1	equ	0xFE5
  9509                           fsr1h	equ	0xFE2
  9510                           fsr1l	equ	0xFE1
  9511                           indf2	equ	0xFDF
  9512                           postinc2	equ	0xFDE
  9513                           postdec2	equ	0xFDD
  9514                           plusw2	equ	0xFDB
  9515                           fsr2h	equ	0xFDA
  9516                           fsr2l	equ	0xFD9
  9517                           status	equ	0xFD8
  9518                           
  9519 ;; *************** function _vscp_restoreDefaults *****************
  9520 ;; Defined at:
  9521 ;;		line 2830 in file "../main.c"
  9522 ;; Parameters:    Size  Location     Type
  9523 ;;		None
  9524 ;; Auto vars:     Size  Location     Type
  9525 ;;		None
  9526 ;; Return value:  Size  Location     Type
  9527 ;;		None               void
  9528 ;; Registers used:
  9529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9530 ;; Tracked objects:
  9531 ;;		On entry : F/1
  9532 ;;		On exit  : F/1
  9533 ;;		Unchanged: 0/0
  9534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9535 ;;      Params:         0       0       0       0       0       0       0
  9536 ;;      Locals:         0       0       0       0       0       0       0
  9537 ;;      Temps:          0       0       0       0       0       0       0
  9538 ;;      Totals:         0       0       0       0       0       0       0
  9539 ;;Total ram usage:        0 bytes
  9540 ;; Hardware stack levels used:    1
  9541 ;; Hardware stack levels required when called:    5
  9542 ;; This function calls:
  9543 ;;		_init_app_eeprom
  9544 ;;		_init_app_ram
  9545 ;; This function is called by:
  9546 ;;		_vscp_writeStdReg
  9547 ;; This function uses a non-reentrant model
  9548 ;;
  9549                           
  9550                           	psect	text37
  9551  0054BC                     __ptext37:
  9552                           	opt stack 0
  9553  0054BC                     _vscp_restoreDefaults:
  9554                           	opt stack 23
  9555                           
  9556                           ; BSR set to: 1
  9557                           ;main.c: 2831: init_app_eeprom();
  9558                           
  9559                           ;incstack = 0
  9560                           ;incstack = 0
  9561  0054BC  EC9C  F011         	call	_init_app_eeprom	;wreg free
  9562                           
  9563                           ;main.c: 2832: init_app_ram();
  9564  0054C0  EF57  F027         	goto	_init_app_ram	;wreg free
  9565  0054C4                     __end_of_vscp_restoreDefaults:
  9566                           	opt stack 0
  9567                           tblptru	equ	0xFF8
  9568                           tblptrh	equ	0xFF7
  9569                           tblptrl	equ	0xFF6
  9570                           tablat	equ	0xFF5
  9571                           prodh	equ	0xFF4
  9572                           prodl	equ	0xFF3
  9573                           intcon	equ	0xFF2
  9574                           postinc0	equ	0xFEE
  9575                           wreg	equ	0xFE8
  9576                           indf1	equ	0xFE7
  9577                           postdec1	equ	0xFE5
  9578                           fsr1h	equ	0xFE2
  9579                           fsr1l	equ	0xFE1
  9580                           indf2	equ	0xFDF
  9581                           postinc2	equ	0xFDE
  9582                           postdec2	equ	0xFDD
  9583                           plusw2	equ	0xFDB
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function _init_app_eeprom *****************
  9589 ;; Defined at:
  9590 ;;		line 1020 in file "../main.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  i               1   16[COMRAM] unsigned char 
  9595 ;; Return value:  Size  Location     Type
  9596 ;;		None               void
  9597 ;; Registers used:
  9598 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/1
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9604 ;;      Params:         0       0       0       0       0       0       0
  9605 ;;      Locals:         1       0       0       0       0       0       0
  9606 ;;      Temps:          0       0       0       0       0       0       0
  9607 ;;      Totals:         1       0       0       0       0       0       0
  9608 ;;Total ram usage:        1 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    3
  9611 ;; This function calls:
  9612 ;;		_writeEEPROM
  9613 ;; This function is called by:
  9614 ;;		_main
  9615 ;;		_vscp_restoreDefaults
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text38
  9620  002338                     __ptext38:
  9621                           	opt stack 0
  9622  002338                     _init_app_eeprom:
  9623                           	opt stack 24
  9624                           
  9625                           ;main.c: 1021: writeEEPROM(0x43, 0b00000001);
  9626                           
  9627                           ; BSR set to: 1
  9628                           ;incstack = 0
  9629                           ;incstack = 0
  9630  002338  6A0F               	clrf	?_writeEEPROM+1,c
  9631  00233A  0E43               	movlw	67
  9632  00233C  6E0E               	movwf	?_writeEEPROM,c
  9633  00233E  0E01               	movlw	1
  9634  002340  6E10               	movwf	?_writeEEPROM+2,c
  9635  002342  EC0D  F029         	call	_writeEEPROM	;wreg free
  9636                           
  9637                           ;main.c: 1022: writeEEPROM(0x44, 0b00000001);
  9638  002346  6A0F               	clrf	?_writeEEPROM+1,c
  9639  002348  0E44               	movlw	68
  9640  00234A  6E0E               	movwf	?_writeEEPROM,c
  9641  00234C  0E01               	movlw	1
  9642  00234E  6E10               	movwf	?_writeEEPROM+2,c
  9643  002350  EC0D  F029         	call	_writeEEPROM	;wreg free
  9644                           
  9645                           ;main.c: 1023: writeEEPROM(0x45, 0b00000001);
  9646  002354  6A0F               	clrf	?_writeEEPROM+1,c
  9647  002356  0E45               	movlw	69
  9648  002358  6E0E               	movwf	?_writeEEPROM,c
  9649  00235A  0E01               	movlw	1
  9650  00235C  6E10               	movwf	?_writeEEPROM+2,c
  9651  00235E  EC0D  F029         	call	_writeEEPROM	;wreg free
  9652                           
  9653                           ;main.c: 1024: writeEEPROM(0x46, 0b00000001);
  9654  002362  6A0F               	clrf	?_writeEEPROM+1,c
  9655  002364  0E46               	movlw	70
  9656  002366  6E0E               	movwf	?_writeEEPROM,c
  9657  002368  0E01               	movlw	1
  9658  00236A  6E10               	movwf	?_writeEEPROM+2,c
  9659  00236C  EC0D  F029         	call	_writeEEPROM	;wreg free
  9660                           
  9661                           ;main.c: 1025: writeEEPROM(0x47, 0b00000001);
  9662  002370  6A0F               	clrf	?_writeEEPROM+1,c
  9663  002372  0E47               	movlw	71
  9664  002374  6E0E               	movwf	?_writeEEPROM,c
  9665  002376  0E01               	movlw	1
  9666  002378  6E10               	movwf	?_writeEEPROM+2,c
  9667  00237A  EC0D  F029         	call	_writeEEPROM	;wreg free
  9668                           
  9669                           ;main.c: 1026: writeEEPROM(0x48, 0b00000001);
  9670  00237E  6A0F               	clrf	?_writeEEPROM+1,c
  9671  002380  0E48               	movlw	72
  9672  002382  6E0E               	movwf	?_writeEEPROM,c
  9673  002384  0E01               	movlw	1
  9674  002386  6E10               	movwf	?_writeEEPROM+2,c
  9675  002388  EC0D  F029         	call	_writeEEPROM	;wreg free
  9676                           
  9677                           ;main.c: 1028: writeEEPROM(0x49, 30);
  9678  00238C  6A0F               	clrf	?_writeEEPROM+1,c
  9679  00238E  0E49               	movlw	73
  9680  002390  6E0E               	movwf	?_writeEEPROM,c
  9681  002392  0E1E               	movlw	30
  9682  002394  6E10               	movwf	?_writeEEPROM+2,c
  9683  002396  EC0D  F029         	call	_writeEEPROM	;wreg free
  9684                           
  9685                           ;main.c: 1029: writeEEPROM(0x4A, 0);
  9686  00239A  6A0F               	clrf	?_writeEEPROM+1,c
  9687  00239C  0E4A               	movlw	74
  9688  00239E  6E0E               	movwf	?_writeEEPROM,c
  9689  0023A0  0E00               	movlw	0
  9690  0023A2  6A10               	clrf	?_writeEEPROM+2,c
  9691  0023A4  EC0D  F029         	call	_writeEEPROM	;wreg free
  9692                           
  9693                           ;main.c: 1030: writeEEPROM(0x4B, 0);
  9694  0023A8  6A0F               	clrf	?_writeEEPROM+1,c
  9695  0023AA  0E4B               	movlw	75
  9696  0023AC  6E0E               	movwf	?_writeEEPROM,c
  9697  0023AE  0E00               	movlw	0
  9698  0023B0  6A10               	clrf	?_writeEEPROM+2,c
  9699  0023B2  EC0D  F029         	call	_writeEEPROM	;wreg free
  9700                           
  9701                           ;main.c: 1031: writeEEPROM(0x4C, 0);
  9702  0023B6  6A0F               	clrf	?_writeEEPROM+1,c
  9703  0023B8  0E4C               	movlw	76
  9704  0023BA  6E0E               	movwf	?_writeEEPROM,c
  9705  0023BC  0E00               	movlw	0
  9706  0023BE  6A10               	clrf	?_writeEEPROM+2,c
  9707  0023C0  EC0D  F029         	call	_writeEEPROM	;wreg free
  9708                           
  9709                           ;main.c: 1032: writeEEPROM(0x4D, 0);
  9710  0023C4  6A0F               	clrf	?_writeEEPROM+1,c
  9711  0023C6  0E4D               	movlw	77
  9712  0023C8  6E0E               	movwf	?_writeEEPROM,c
  9713  0023CA  0E00               	movlw	0
  9714  0023CC  6A10               	clrf	?_writeEEPROM+2,c
  9715  0023CE  EC0D  F029         	call	_writeEEPROM	;wreg free
  9716                           
  9717                           ;main.c: 1033: writeEEPROM(0x4E, 0);
  9718  0023D2  6A0F               	clrf	?_writeEEPROM+1,c
  9719  0023D4  0E4E               	movlw	78
  9720  0023D6  6E0E               	movwf	?_writeEEPROM,c
  9721  0023D8  0E00               	movlw	0
  9722  0023DA  6A10               	clrf	?_writeEEPROM+2,c
  9723  0023DC  EC0D  F029         	call	_writeEEPROM	;wreg free
  9724                           
  9725                           ;main.c: 1037: writeEEPROM(0x4F, 0x0F);
  9726  0023E0  6A0F               	clrf	?_writeEEPROM+1,c
  9727  0023E2  0E4F               	movlw	79
  9728  0023E4  6E0E               	movwf	?_writeEEPROM,c
  9729  0023E6  0E0F               	movlw	15
  9730  0023E8  6E10               	movwf	?_writeEEPROM+2,c
  9731  0023EA  EC0D  F029         	call	_writeEEPROM	;wreg free
  9732                           
  9733                           ;main.c: 1038: writeEEPROM(0x50, 0x68);
  9734  0023EE  6A0F               	clrf	?_writeEEPROM+1,c
  9735  0023F0  0E50               	movlw	80
  9736  0023F2  6E0E               	movwf	?_writeEEPROM,c
  9737  0023F4  0E68               	movlw	104
  9738  0023F6  6E10               	movwf	?_writeEEPROM+2,c
  9739  0023F8  EC0D  F029         	call	_writeEEPROM	;wreg free
  9740                           
  9741                           ;main.c: 1040: writeEEPROM(0x51, 0x0D);
  9742  0023FC  6A0F               	clrf	?_writeEEPROM+1,c
  9743  0023FE  0E51               	movlw	81
  9744  002400  6E0E               	movwf	?_writeEEPROM,c
  9745  002402  0E0D               	movlw	13
  9746  002404  6E10               	movwf	?_writeEEPROM+2,c
  9747  002406  EC0D  F029         	call	_writeEEPROM	;wreg free
  9748                           
  9749                           ;main.c: 1041: writeEEPROM(0x52, 0x7F);
  9750  00240A  6A0F               	clrf	?_writeEEPROM+1,c
  9751  00240C  0E52               	movlw	82
  9752  00240E  6E0E               	movwf	?_writeEEPROM,c
  9753  002410  0E7F               	movlw	127
  9754  002412  6E10               	movwf	?_writeEEPROM+2,c
  9755  002414  EC0D  F029         	call	_writeEEPROM	;wreg free
  9756                           
  9757                           ;main.c: 1043: writeEEPROM(0x53, 0x0D);
  9758  002418  6A0F               	clrf	?_writeEEPROM+1,c
  9759  00241A  0E53               	movlw	83
  9760  00241C  6E0E               	movwf	?_writeEEPROM,c
  9761  00241E  0E0D               	movlw	13
  9762  002420  6E10               	movwf	?_writeEEPROM+2,c
  9763  002422  EC0D  F029         	call	_writeEEPROM	;wreg free
  9764                           
  9765                           ;main.c: 1044: writeEEPROM(0x54, 0x7F);
  9766  002426  6A0F               	clrf	?_writeEEPROM+1,c
  9767  002428  0E54               	movlw	84
  9768  00242A  6E0E               	movwf	?_writeEEPROM,c
  9769  00242C  0E7F               	movlw	127
  9770  00242E  6E10               	movwf	?_writeEEPROM+2,c
  9771  002430  EC0D  F029         	call	_writeEEPROM	;wreg free
  9772                           
  9773                           ;main.c: 1046: writeEEPROM(0x55, 0x0D);
  9774  002434  6A0F               	clrf	?_writeEEPROM+1,c
  9775  002436  0E55               	movlw	85
  9776  002438  6E0E               	movwf	?_writeEEPROM,c
  9777  00243A  0E0D               	movlw	13
  9778  00243C  6E10               	movwf	?_writeEEPROM+2,c
  9779  00243E  EC0D  F029         	call	_writeEEPROM	;wreg free
  9780                           
  9781                           ;main.c: 1047: writeEEPROM(0x56, 0x7F);
  9782  002442  6A0F               	clrf	?_writeEEPROM+1,c
  9783  002444  0E56               	movlw	86
  9784  002446  6E0E               	movwf	?_writeEEPROM,c
  9785  002448  0E7F               	movlw	127
  9786  00244A  6E10               	movwf	?_writeEEPROM+2,c
  9787  00244C  EC0D  F029         	call	_writeEEPROM	;wreg free
  9788                           
  9789                           ;main.c: 1049: writeEEPROM(0x57, 0x0D);
  9790  002450  6A0F               	clrf	?_writeEEPROM+1,c
  9791  002452  0E57               	movlw	87
  9792  002454  6E0E               	movwf	?_writeEEPROM,c
  9793  002456  0E0D               	movlw	13
  9794  002458  6E10               	movwf	?_writeEEPROM+2,c
  9795  00245A  EC0D  F029         	call	_writeEEPROM	;wreg free
  9796                           
  9797                           ;main.c: 1050: writeEEPROM(0x58, 0x7F);
  9798  00245E  6A0F               	clrf	?_writeEEPROM+1,c
  9799  002460  0E58               	movlw	88
  9800  002462  6E0E               	movwf	?_writeEEPROM,c
  9801  002464  0E7F               	movlw	127
  9802  002466  6E10               	movwf	?_writeEEPROM+2,c
  9803  002468  EC0D  F029         	call	_writeEEPROM	;wreg free
  9804                           
  9805                           ;main.c: 1052: writeEEPROM(0x59, 0x0D);
  9806  00246C  6A0F               	clrf	?_writeEEPROM+1,c
  9807  00246E  0E59               	movlw	89
  9808  002470  6E0E               	movwf	?_writeEEPROM,c
  9809  002472  0E0D               	movlw	13
  9810  002474  6E10               	movwf	?_writeEEPROM+2,c
  9811  002476  EC0D  F029         	call	_writeEEPROM	;wreg free
  9812                           
  9813                           ;main.c: 1053: writeEEPROM(0x5A, 0x7F);
  9814  00247A  6A0F               	clrf	?_writeEEPROM+1,c
  9815  00247C  0E5A               	movlw	90
  9816  00247E  6E0E               	movwf	?_writeEEPROM,c
  9817  002480  0E7F               	movlw	127
  9818  002482  6E10               	movwf	?_writeEEPROM+2,c
  9819  002484  EC0D  F029         	call	_writeEEPROM	;wreg free
  9820                           
  9821                           ;main.c: 1057: writeEEPROM(0x5B, 0x80);
  9822  002488  6A0F               	clrf	?_writeEEPROM+1,c
  9823  00248A  0E5B               	movlw	91
  9824  00248C  6E0E               	movwf	?_writeEEPROM,c
  9825  00248E  0E80               	movlw	128
  9826  002490  6E10               	movwf	?_writeEEPROM+2,c
  9827  002492  EC0D  F029         	call	_writeEEPROM	;wreg free
  9828                           
  9829                           ;main.c: 1058: writeEEPROM(0x5C, 0xff);
  9830  002496  6A0F               	clrf	?_writeEEPROM+1,c
  9831  002498  0E5C               	movlw	92
  9832  00249A  6E0E               	movwf	?_writeEEPROM,c
  9833  00249C  0EFF               	movlw	255
  9834  00249E  6810               	setf	?_writeEEPROM+2,c
  9835  0024A0  EC0D  F029         	call	_writeEEPROM	;wreg free
  9836                           
  9837                           ;main.c: 1060: writeEEPROM(0x5D, 0x80);
  9838  0024A4  6A0F               	clrf	?_writeEEPROM+1,c
  9839  0024A6  0E5D               	movlw	93
  9840  0024A8  6E0E               	movwf	?_writeEEPROM,c
  9841  0024AA  0E80               	movlw	128
  9842  0024AC  6E10               	movwf	?_writeEEPROM+2,c
  9843  0024AE  EC0D  F029         	call	_writeEEPROM	;wreg free
  9844                           
  9845                           ;main.c: 1061: writeEEPROM(0x5E, 0xff);
  9846  0024B2  6A0F               	clrf	?_writeEEPROM+1,c
  9847  0024B4  0E5E               	movlw	94
  9848  0024B6  6E0E               	movwf	?_writeEEPROM,c
  9849  0024B8  0EFF               	movlw	255
  9850  0024BA  6810               	setf	?_writeEEPROM+2,c
  9851  0024BC  EC0D  F029         	call	_writeEEPROM	;wreg free
  9852                           
  9853                           ;main.c: 1063: writeEEPROM(0x5F, 0x80);
  9854  0024C0  6A0F               	clrf	?_writeEEPROM+1,c
  9855  0024C2  0E5F               	movlw	95
  9856  0024C4  6E0E               	movwf	?_writeEEPROM,c
  9857  0024C6  0E80               	movlw	128
  9858  0024C8  6E10               	movwf	?_writeEEPROM+2,c
  9859  0024CA  EC0D  F029         	call	_writeEEPROM	;wreg free
  9860                           
  9861                           ;main.c: 1064: writeEEPROM(0x60, 0xff);
  9862  0024CE  6A0F               	clrf	?_writeEEPROM+1,c
  9863  0024D0  0E60               	movlw	96
  9864  0024D2  6E0E               	movwf	?_writeEEPROM,c
  9865  0024D4  0EFF               	movlw	255
  9866  0024D6  6810               	setf	?_writeEEPROM+2,c
  9867  0024D8  EC0D  F029         	call	_writeEEPROM	;wreg free
  9868                           
  9869                           ;main.c: 1066: writeEEPROM(0x61, 0x80);
  9870  0024DC  6A0F               	clrf	?_writeEEPROM+1,c
  9871  0024DE  0E61               	movlw	97
  9872  0024E0  6E0E               	movwf	?_writeEEPROM,c
  9873  0024E2  0E80               	movlw	128
  9874  0024E4  6E10               	movwf	?_writeEEPROM+2,c
  9875  0024E6  EC0D  F029         	call	_writeEEPROM	;wreg free
  9876                           
  9877                           ;main.c: 1067: writeEEPROM(0x62, 0xff);
  9878  0024EA  6A0F               	clrf	?_writeEEPROM+1,c
  9879  0024EC  0E62               	movlw	98
  9880  0024EE  6E0E               	movwf	?_writeEEPROM,c
  9881  0024F0  0EFF               	movlw	255
  9882  0024F2  6810               	setf	?_writeEEPROM+2,c
  9883  0024F4  EC0D  F029         	call	_writeEEPROM	;wreg free
  9884                           
  9885                           ;main.c: 1069: writeEEPROM(0x63, 0x80);
  9886  0024F8  6A0F               	clrf	?_writeEEPROM+1,c
  9887  0024FA  0E63               	movlw	99
  9888  0024FC  6E0E               	movwf	?_writeEEPROM,c
  9889  0024FE  0E80               	movlw	128
  9890  002500  6E10               	movwf	?_writeEEPROM+2,c
  9891  002502  EC0D  F029         	call	_writeEEPROM	;wreg free
  9892                           
  9893                           ;main.c: 1070: writeEEPROM(0x64, 0xff);
  9894  002506  6A0F               	clrf	?_writeEEPROM+1,c
  9895  002508  0E64               	movlw	100
  9896  00250A  6E0E               	movwf	?_writeEEPROM,c
  9897  00250C  0EFF               	movlw	255
  9898  00250E  6810               	setf	?_writeEEPROM+2,c
  9899  002510  EC0D  F029         	call	_writeEEPROM	;wreg free
  9900                           
  9901                           ;main.c: 1072: writeEEPROM(0x65, 0x80);
  9902  002514  6A0F               	clrf	?_writeEEPROM+1,c
  9903  002516  0E65               	movlw	101
  9904  002518  6E0E               	movwf	?_writeEEPROM,c
  9905  00251A  0E80               	movlw	128
  9906  00251C  6E10               	movwf	?_writeEEPROM+2,c
  9907  00251E  EC0D  F029         	call	_writeEEPROM	;wreg free
  9908                           
  9909                           ;main.c: 1073: writeEEPROM(0x66, 0xff);
  9910  002522  6A0F               	clrf	?_writeEEPROM+1,c
  9911  002524  0E66               	movlw	102
  9912  002526  6E0E               	movwf	?_writeEEPROM,c
  9913  002528  0EFF               	movlw	255
  9914  00252A  6810               	setf	?_writeEEPROM+2,c
  9915  00252C  EC0D  F029         	call	_writeEEPROM	;wreg free
  9916                           
  9917                           ;main.c: 1077: writeEEPROM(0x67, 0x7f);
  9918  002530  6A0F               	clrf	?_writeEEPROM+1,c
  9919  002532  0E67               	movlw	103
  9920  002534  6E0E               	movwf	?_writeEEPROM,c
  9921  002536  0E7F               	movlw	127
  9922  002538  6E10               	movwf	?_writeEEPROM+2,c
  9923  00253A  EC0D  F029         	call	_writeEEPROM	;wreg free
  9924                           
  9925                           ;main.c: 1078: writeEEPROM(0x68, 0xff);
  9926  00253E  6A0F               	clrf	?_writeEEPROM+1,c
  9927  002540  0E68               	movlw	104
  9928  002542  6E0E               	movwf	?_writeEEPROM,c
  9929  002544  0EFF               	movlw	255
  9930  002546  6810               	setf	?_writeEEPROM+2,c
  9931  002548  EC0D  F029         	call	_writeEEPROM	;wreg free
  9932                           
  9933                           ;main.c: 1080: writeEEPROM(0x69, 0x7f);
  9934  00254C  6A0F               	clrf	?_writeEEPROM+1,c
  9935  00254E  0E69               	movlw	105
  9936  002550  6E0E               	movwf	?_writeEEPROM,c
  9937  002552  0E7F               	movlw	127
  9938  002554  6E10               	movwf	?_writeEEPROM+2,c
  9939  002556  EC0D  F029         	call	_writeEEPROM	;wreg free
  9940                           
  9941                           ;main.c: 1081: writeEEPROM(0x6A, 0xff);
  9942  00255A  6A0F               	clrf	?_writeEEPROM+1,c
  9943  00255C  0E6A               	movlw	106
  9944  00255E  6E0E               	movwf	?_writeEEPROM,c
  9945  002560  0EFF               	movlw	255
  9946  002562  6810               	setf	?_writeEEPROM+2,c
  9947  002564  EC0D  F029         	call	_writeEEPROM	;wreg free
  9948                           
  9949                           ;main.c: 1083: writeEEPROM(0x6B, 0x7f);
  9950  002568  6A0F               	clrf	?_writeEEPROM+1,c
  9951  00256A  0E6B               	movlw	107
  9952  00256C  6E0E               	movwf	?_writeEEPROM,c
  9953  00256E  0E7F               	movlw	127
  9954  002570  6E10               	movwf	?_writeEEPROM+2,c
  9955  002572  EC0D  F029         	call	_writeEEPROM	;wreg free
  9956                           
  9957                           ;main.c: 1084: writeEEPROM(0x6C, 0xff);
  9958  002576  6A0F               	clrf	?_writeEEPROM+1,c
  9959  002578  0E6C               	movlw	108
  9960  00257A  6E0E               	movwf	?_writeEEPROM,c
  9961  00257C  0EFF               	movlw	255
  9962  00257E  6810               	setf	?_writeEEPROM+2,c
  9963  002580  EC0D  F029         	call	_writeEEPROM	;wreg free
  9964                           
  9965                           ;main.c: 1086: writeEEPROM(0x6D, 0x7f);
  9966  002584  6A0F               	clrf	?_writeEEPROM+1,c
  9967  002586  0E6D               	movlw	109
  9968  002588  6E0E               	movwf	?_writeEEPROM,c
  9969  00258A  0E7F               	movlw	127
  9970  00258C  6E10               	movwf	?_writeEEPROM+2,c
  9971  00258E  EC0D  F029         	call	_writeEEPROM	;wreg free
  9972                           
  9973                           ;main.c: 1087: writeEEPROM(0x6E, 0xff);
  9974  002592  6A0F               	clrf	?_writeEEPROM+1,c
  9975  002594  0E6E               	movlw	110
  9976  002596  6E0E               	movwf	?_writeEEPROM,c
  9977  002598  0EFF               	movlw	255
  9978  00259A  6810               	setf	?_writeEEPROM+2,c
  9979  00259C  EC0D  F029         	call	_writeEEPROM	;wreg free
  9980                           
  9981                           ;main.c: 1089: writeEEPROM(0x6F, 0x7f);
  9982  0025A0  6A0F               	clrf	?_writeEEPROM+1,c
  9983  0025A2  0E6F               	movlw	111
  9984  0025A4  6E0E               	movwf	?_writeEEPROM,c
  9985  0025A6  0E7F               	movlw	127
  9986  0025A8  6E10               	movwf	?_writeEEPROM+2,c
  9987  0025AA  EC0D  F029         	call	_writeEEPROM	;wreg free
  9988                           
  9989                           ;main.c: 1090: writeEEPROM(0x70, 0xff);
  9990  0025AE  6A0F               	clrf	?_writeEEPROM+1,c
  9991  0025B0  0E70               	movlw	112
  9992  0025B2  6E0E               	movwf	?_writeEEPROM,c
  9993  0025B4  0EFF               	movlw	255
  9994  0025B6  6810               	setf	?_writeEEPROM+2,c
  9995  0025B8  EC0D  F029         	call	_writeEEPROM	;wreg free
  9996                           
  9997                           ;main.c: 1092: writeEEPROM(0x71, 0x7f);
  9998  0025BC  6A0F               	clrf	?_writeEEPROM+1,c
  9999  0025BE  0E71               	movlw	113
 10000  0025C0  6E0E               	movwf	?_writeEEPROM,c
 10001  0025C2  0E7F               	movlw	127
 10002  0025C4  6E10               	movwf	?_writeEEPROM+2,c
 10003  0025C6  EC0D  F029         	call	_writeEEPROM	;wreg free
 10004                           
 10005                           ;main.c: 1093: writeEEPROM(0x72, 0xff);
 10006  0025CA  6A0F               	clrf	?_writeEEPROM+1,c
 10007  0025CC  0E72               	movlw	114
 10008  0025CE  6E0E               	movwf	?_writeEEPROM,c
 10009  0025D0  0EFF               	movlw	255
 10010  0025D2  6810               	setf	?_writeEEPROM+2,c
 10011  0025D4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10012                           
 10013                           ;main.c: 1097: writeEEPROM(0x73, 0);
 10014  0025D8  6A0F               	clrf	?_writeEEPROM+1,c
 10015  0025DA  0E73               	movlw	115
 10016  0025DC  6E0E               	movwf	?_writeEEPROM,c
 10017  0025DE  0E00               	movlw	0
 10018  0025E0  6A10               	clrf	?_writeEEPROM+2,c
 10019  0025E2  EC0D  F029         	call	_writeEEPROM	;wreg free
 10020                           
 10021                           ;main.c: 1098: writeEEPROM(0x74, 0);
 10022  0025E6  6A0F               	clrf	?_writeEEPROM+1,c
 10023  0025E8  0E74               	movlw	116
 10024  0025EA  6E0E               	movwf	?_writeEEPROM,c
 10025  0025EC  0E00               	movlw	0
 10026  0025EE  6A10               	clrf	?_writeEEPROM+2,c
 10027  0025F0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10028                           
 10029                           ;main.c: 1100: writeEEPROM(0x75, 0);
 10030  0025F4  6A0F               	clrf	?_writeEEPROM+1,c
 10031  0025F6  0E75               	movlw	117
 10032  0025F8  6E0E               	movwf	?_writeEEPROM,c
 10033  0025FA  0E00               	movlw	0
 10034  0025FC  6A10               	clrf	?_writeEEPROM+2,c
 10035  0025FE  EC0D  F029         	call	_writeEEPROM	;wreg free
 10036                           
 10037                           ;main.c: 1101: writeEEPROM(0x76, 0);
 10038  002602  6A0F               	clrf	?_writeEEPROM+1,c
 10039  002604  0E76               	movlw	118
 10040  002606  6E0E               	movwf	?_writeEEPROM,c
 10041  002608  0E00               	movlw	0
 10042  00260A  6A10               	clrf	?_writeEEPROM+2,c
 10043  00260C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10044                           
 10045                           ;main.c: 1103: writeEEPROM(0x77, 0);
 10046  002610  6A0F               	clrf	?_writeEEPROM+1,c
 10047  002612  0E77               	movlw	119
 10048  002614  6E0E               	movwf	?_writeEEPROM,c
 10049  002616  0E00               	movlw	0
 10050  002618  6A10               	clrf	?_writeEEPROM+2,c
 10051  00261A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10052                           
 10053                           ;main.c: 1104: writeEEPROM(0x78, 0);
 10054  00261E  6A0F               	clrf	?_writeEEPROM+1,c
 10055  002620  0E78               	movlw	120
 10056  002622  6E0E               	movwf	?_writeEEPROM,c
 10057  002624  0E00               	movlw	0
 10058  002626  6A10               	clrf	?_writeEEPROM+2,c
 10059  002628  EC0D  F029         	call	_writeEEPROM	;wreg free
 10060                           
 10061                           ;main.c: 1106: writeEEPROM(0x79, 0);
 10062  00262C  6A0F               	clrf	?_writeEEPROM+1,c
 10063  00262E  0E79               	movlw	121
 10064  002630  6E0E               	movwf	?_writeEEPROM,c
 10065  002632  0E00               	movlw	0
 10066  002634  6A10               	clrf	?_writeEEPROM+2,c
 10067  002636  EC0D  F029         	call	_writeEEPROM	;wreg free
 10068                           
 10069                           ;main.c: 1107: writeEEPROM(0x7A, 0);
 10070  00263A  6A0F               	clrf	?_writeEEPROM+1,c
 10071  00263C  0E7A               	movlw	122
 10072  00263E  6E0E               	movwf	?_writeEEPROM,c
 10073  002640  0E00               	movlw	0
 10074  002642  6A10               	clrf	?_writeEEPROM+2,c
 10075  002644  EC0D  F029         	call	_writeEEPROM	;wreg free
 10076                           
 10077                           ;main.c: 1109: writeEEPROM(0x7B, 0);
 10078  002648  6A0F               	clrf	?_writeEEPROM+1,c
 10079  00264A  0E7B               	movlw	123
 10080  00264C  6E0E               	movwf	?_writeEEPROM,c
 10081  00264E  0E00               	movlw	0
 10082  002650  6A10               	clrf	?_writeEEPROM+2,c
 10083  002652  EC0D  F029         	call	_writeEEPROM	;wreg free
 10084                           
 10085                           ;main.c: 1110: writeEEPROM(0x7C, 0);
 10086  002656  6A0F               	clrf	?_writeEEPROM+1,c
 10087  002658  0E7C               	movlw	124
 10088  00265A  6E0E               	movwf	?_writeEEPROM,c
 10089  00265C  0E00               	movlw	0
 10090  00265E  6A10               	clrf	?_writeEEPROM+2,c
 10091  002660  EC0D  F029         	call	_writeEEPROM	;wreg free
 10092                           
 10093                           ;main.c: 1112: writeEEPROM(0x7D, 0);
 10094  002664  6A0F               	clrf	?_writeEEPROM+1,c
 10095  002666  0E7D               	movlw	125
 10096  002668  6E0E               	movwf	?_writeEEPROM,c
 10097  00266A  0E00               	movlw	0
 10098  00266C  6A10               	clrf	?_writeEEPROM+2,c
 10099  00266E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10100                           
 10101                           ;main.c: 1113: writeEEPROM(0x7E, 0);
 10102  002672  6A0F               	clrf	?_writeEEPROM+1,c
 10103  002674  0E7E               	movlw	126
 10104  002676  6E0E               	movwf	?_writeEEPROM,c
 10105  002678  0E00               	movlw	0
 10106  00267A  6A10               	clrf	?_writeEEPROM+2,c
 10107  00267C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10108                           
 10109                           ;main.c: 1117: writeEEPROM(0x7F, 0x7f);
 10110  002680  6A0F               	clrf	?_writeEEPROM+1,c
 10111  002682  0E7F               	movlw	127
 10112  002684  6E0E               	movwf	?_writeEEPROM,c
 10113  002686  6E10               	movwf	?_writeEEPROM+2,c
 10114  002688  EC0D  F029         	call	_writeEEPROM	;wreg free
 10115                           
 10116                           ;main.c: 1118: writeEEPROM(0x80, 0xff);
 10117  00268C  6A0F               	clrf	?_writeEEPROM+1,c
 10118  00268E  0E80               	movlw	128
 10119  002690  6E0E               	movwf	?_writeEEPROM,c
 10120  002692  0EFF               	movlw	255
 10121  002694  6810               	setf	?_writeEEPROM+2,c
 10122  002696  EC0D  F029         	call	_writeEEPROM	;wreg free
 10123                           
 10124                           ;main.c: 1120: writeEEPROM(0x81, 0x7f);
 10125  00269A  6A0F               	clrf	?_writeEEPROM+1,c
 10126  00269C  0E81               	movlw	129
 10127  00269E  6E0E               	movwf	?_writeEEPROM,c
 10128  0026A0  0E7F               	movlw	127
 10129  0026A2  6E10               	movwf	?_writeEEPROM+2,c
 10130  0026A4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10131                           
 10132                           ;main.c: 1121: writeEEPROM(0x82, 0xff);
 10133  0026A8  6A0F               	clrf	?_writeEEPROM+1,c
 10134  0026AA  0E82               	movlw	130
 10135  0026AC  6E0E               	movwf	?_writeEEPROM,c
 10136  0026AE  0EFF               	movlw	255
 10137  0026B0  6810               	setf	?_writeEEPROM+2,c
 10138  0026B2  EC0D  F029         	call	_writeEEPROM	;wreg free
 10139                           
 10140                           ;main.c: 1123: writeEEPROM(0x83, 0x7f);
 10141  0026B6  6A0F               	clrf	?_writeEEPROM+1,c
 10142  0026B8  0E83               	movlw	131
 10143  0026BA  6E0E               	movwf	?_writeEEPROM,c
 10144  0026BC  0E7F               	movlw	127
 10145  0026BE  6E10               	movwf	?_writeEEPROM+2,c
 10146  0026C0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10147                           
 10148                           ;main.c: 1124: writeEEPROM(0x84, 0xff);
 10149  0026C4  6A0F               	clrf	?_writeEEPROM+1,c
 10150  0026C6  0E84               	movlw	132
 10151  0026C8  6E0E               	movwf	?_writeEEPROM,c
 10152  0026CA  0EFF               	movlw	255
 10153  0026CC  6810               	setf	?_writeEEPROM+2,c
 10154  0026CE  EC0D  F029         	call	_writeEEPROM	;wreg free
 10155                           
 10156                           ;main.c: 1126: writeEEPROM(0x85, 0x7f);
 10157  0026D2  6A0F               	clrf	?_writeEEPROM+1,c
 10158  0026D4  0E85               	movlw	133
 10159  0026D6  6E0E               	movwf	?_writeEEPROM,c
 10160  0026D8  0E7F               	movlw	127
 10161  0026DA  6E10               	movwf	?_writeEEPROM+2,c
 10162  0026DC  EC0D  F029         	call	_writeEEPROM	;wreg free
 10163                           
 10164                           ;main.c: 1127: writeEEPROM(0x86, 0xff);
 10165  0026E0  6A0F               	clrf	?_writeEEPROM+1,c
 10166  0026E2  0E86               	movlw	134
 10167  0026E4  6E0E               	movwf	?_writeEEPROM,c
 10168  0026E6  0EFF               	movlw	255
 10169  0026E8  6810               	setf	?_writeEEPROM+2,c
 10170  0026EA  EC0D  F029         	call	_writeEEPROM	;wreg free
 10171                           
 10172                           ;main.c: 1129: writeEEPROM(0x87, 0x7f);
 10173  0026EE  6A0F               	clrf	?_writeEEPROM+1,c
 10174  0026F0  0E87               	movlw	135
 10175  0026F2  6E0E               	movwf	?_writeEEPROM,c
 10176  0026F4  0E7F               	movlw	127
 10177  0026F6  6E10               	movwf	?_writeEEPROM+2,c
 10178  0026F8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10179                           
 10180                           ;main.c: 1130: writeEEPROM(0x88, 0xff);
 10181  0026FC  6A0F               	clrf	?_writeEEPROM+1,c
 10182  0026FE  0E88               	movlw	136
 10183  002700  6E0E               	movwf	?_writeEEPROM,c
 10184  002702  0EFF               	movlw	255
 10185  002704  6810               	setf	?_writeEEPROM+2,c
 10186  002706  EC0D  F029         	call	_writeEEPROM	;wreg free
 10187                           
 10188                           ;main.c: 1132: writeEEPROM(0x89, 0x7f);
 10189  00270A  6A0F               	clrf	?_writeEEPROM+1,c
 10190  00270C  0E89               	movlw	137
 10191  00270E  6E0E               	movwf	?_writeEEPROM,c
 10192  002710  0E7F               	movlw	127
 10193  002712  6E10               	movwf	?_writeEEPROM+2,c
 10194  002714  EC0D  F029         	call	_writeEEPROM	;wreg free
 10195                           
 10196                           ;main.c: 1133: writeEEPROM(0x8A, 0xff);
 10197  002718  6A0F               	clrf	?_writeEEPROM+1,c
 10198  00271A  0E8A               	movlw	138
 10199  00271C  6E0E               	movwf	?_writeEEPROM,c
 10200  00271E  0EFF               	movlw	255
 10201  002720  6810               	setf	?_writeEEPROM+2,c
 10202  002722  EC0D  F029         	call	_writeEEPROM	;wreg free
 10203                           
 10204                           ;main.c: 1137: writeEEPROM(0x8B, 0x80);
 10205  002726  6A0F               	clrf	?_writeEEPROM+1,c
 10206  002728  0E8B               	movlw	139
 10207  00272A  6E0E               	movwf	?_writeEEPROM,c
 10208  00272C  0E80               	movlw	128
 10209  00272E  6E10               	movwf	?_writeEEPROM+2,c
 10210  002730  EC0D  F029         	call	_writeEEPROM	;wreg free
 10211                           
 10212                           ;main.c: 1138: writeEEPROM(0x8C, 0x00);
 10213  002734  6A0F               	clrf	?_writeEEPROM+1,c
 10214  002736  0E8C               	movlw	140
 10215  002738  6E0E               	movwf	?_writeEEPROM,c
 10216  00273A  0E00               	movlw	0
 10217  00273C  6A10               	clrf	?_writeEEPROM+2,c
 10218  00273E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10219                           
 10220                           ;main.c: 1140: writeEEPROM(0x8D, 0x80);
 10221  002742  6A0F               	clrf	?_writeEEPROM+1,c
 10222  002744  0E8D               	movlw	141
 10223  002746  6E0E               	movwf	?_writeEEPROM,c
 10224  002748  0E80               	movlw	128
 10225  00274A  6E10               	movwf	?_writeEEPROM+2,c
 10226  00274C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10227                           
 10228                           ;main.c: 1141: writeEEPROM(0x8E, 0x00);
 10229  002750  6A0F               	clrf	?_writeEEPROM+1,c
 10230  002752  0E8E               	movlw	142
 10231  002754  6E0E               	movwf	?_writeEEPROM,c
 10232  002756  0E00               	movlw	0
 10233  002758  6A10               	clrf	?_writeEEPROM+2,c
 10234  00275A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10235                           
 10236                           ;main.c: 1143: writeEEPROM(0x8F, 0x80);
 10237  00275E  6A0F               	clrf	?_writeEEPROM+1,c
 10238  002760  0E8F               	movlw	143
 10239  002762  6E0E               	movwf	?_writeEEPROM,c
 10240  002764  0E80               	movlw	128
 10241  002766  6E10               	movwf	?_writeEEPROM+2,c
 10242  002768  EC0D  F029         	call	_writeEEPROM	;wreg free
 10243                           
 10244                           ;main.c: 1144: writeEEPROM(0x90, 0x00);
 10245  00276C  6A0F               	clrf	?_writeEEPROM+1,c
 10246  00276E  0E90               	movlw	144
 10247  002770  6E0E               	movwf	?_writeEEPROM,c
 10248  002772  0E00               	movlw	0
 10249  002774  6A10               	clrf	?_writeEEPROM+2,c
 10250  002776  EC0D  F029         	call	_writeEEPROM	;wreg free
 10251                           
 10252                           ;main.c: 1146: writeEEPROM(0x91, 0x80);
 10253  00277A  6A0F               	clrf	?_writeEEPROM+1,c
 10254  00277C  0E91               	movlw	145
 10255  00277E  6E0E               	movwf	?_writeEEPROM,c
 10256  002780  0E80               	movlw	128
 10257  002782  6E10               	movwf	?_writeEEPROM+2,c
 10258  002784  EC0D  F029         	call	_writeEEPROM	;wreg free
 10259                           
 10260                           ;main.c: 1147: writeEEPROM(0x92, 0x00);
 10261  002788  6A0F               	clrf	?_writeEEPROM+1,c
 10262  00278A  0E92               	movlw	146
 10263  00278C  6E0E               	movwf	?_writeEEPROM,c
 10264  00278E  0E00               	movlw	0
 10265  002790  6A10               	clrf	?_writeEEPROM+2,c
 10266  002792  EC0D  F029         	call	_writeEEPROM	;wreg free
 10267                           
 10268                           ;main.c: 1149: writeEEPROM(0x93, 0x80);
 10269  002796  6A0F               	clrf	?_writeEEPROM+1,c
 10270  002798  0E93               	movlw	147
 10271  00279A  6E0E               	movwf	?_writeEEPROM,c
 10272  00279C  0E80               	movlw	128
 10273  00279E  6E10               	movwf	?_writeEEPROM+2,c
 10274  0027A0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10275                           
 10276                           ;main.c: 1150: writeEEPROM(0x94, 0x00);
 10277  0027A4  6A0F               	clrf	?_writeEEPROM+1,c
 10278  0027A6  0E94               	movlw	148
 10279  0027A8  6E0E               	movwf	?_writeEEPROM,c
 10280  0027AA  0E00               	movlw	0
 10281  0027AC  6A10               	clrf	?_writeEEPROM+2,c
 10282  0027AE  EC0D  F029         	call	_writeEEPROM	;wreg free
 10283                           
 10284                           ;main.c: 1152: writeEEPROM(0x95, 0x80);
 10285  0027B2  6A0F               	clrf	?_writeEEPROM+1,c
 10286  0027B4  0E95               	movlw	149
 10287  0027B6  6E0E               	movwf	?_writeEEPROM,c
 10288  0027B8  0E80               	movlw	128
 10289  0027BA  6E10               	movwf	?_writeEEPROM+2,c
 10290  0027BC  EC0D  F029         	call	_writeEEPROM	;wreg free
 10291                           
 10292                           ;main.c: 1153: writeEEPROM(0x96, 0x00);
 10293  0027C0  6A0F               	clrf	?_writeEEPROM+1,c
 10294  0027C2  0E96               	movlw	150
 10295  0027C4  6E0E               	movwf	?_writeEEPROM,c
 10296  0027C6  0E00               	movlw	0
 10297  0027C8  6A10               	clrf	?_writeEEPROM+2,c
 10298  0027CA  EC0D  F029         	call	_writeEEPROM	;wreg free
 10299                           
 10300                           ;main.c: 1157: writeEEPROM(0x97, 2);
 10301  0027CE  6A0F               	clrf	?_writeEEPROM+1,c
 10302  0027D0  0E97               	movlw	151
 10303  0027D2  6E0E               	movwf	?_writeEEPROM,c
 10304  0027D4  0E02               	movlw	2
 10305  0027D6  6E10               	movwf	?_writeEEPROM+2,c
 10306  0027D8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10307                           
 10308                           ;main.c: 1158: writeEEPROM(0x98, 2);
 10309  0027DC  6A0F               	clrf	?_writeEEPROM+1,c
 10310  0027DE  0E98               	movlw	152
 10311  0027E0  6E0E               	movwf	?_writeEEPROM,c
 10312  0027E2  0E02               	movlw	2
 10313  0027E4  6E10               	movwf	?_writeEEPROM+2,c
 10314  0027E6  EC0D  F029         	call	_writeEEPROM	;wreg free
 10315                           
 10316                           ;main.c: 1159: writeEEPROM(0x99, 2);
 10317  0027EA  6A0F               	clrf	?_writeEEPROM+1,c
 10318  0027EC  0E99               	movlw	153
 10319  0027EE  6E0E               	movwf	?_writeEEPROM,c
 10320  0027F0  0E02               	movlw	2
 10321  0027F2  6E10               	movwf	?_writeEEPROM+2,c
 10322  0027F4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10323                           
 10324                           ;main.c: 1160: writeEEPROM(0x9A, 2);
 10325  0027F8  6A0F               	clrf	?_writeEEPROM+1,c
 10326  0027FA  0E9A               	movlw	154
 10327  0027FC  6E0E               	movwf	?_writeEEPROM,c
 10328  0027FE  0E02               	movlw	2
 10329  002800  6E10               	movwf	?_writeEEPROM+2,c
 10330  002802  EC0D  F029         	call	_writeEEPROM	;wreg free
 10331                           
 10332                           ;main.c: 1161: writeEEPROM(0x9B, 2);
 10333  002806  6A0F               	clrf	?_writeEEPROM+1,c
 10334  002808  0E9B               	movlw	155
 10335  00280A  6E0E               	movwf	?_writeEEPROM,c
 10336  00280C  0E02               	movlw	2
 10337  00280E  6E10               	movwf	?_writeEEPROM+2,c
 10338  002810  EC0D  F029         	call	_writeEEPROM	;wreg free
 10339                           
 10340                           ;main.c: 1162: writeEEPROM(0x9C, 2);
 10341  002814  6A0F               	clrf	?_writeEEPROM+1,c
 10342  002816  0E9C               	movlw	156
 10343  002818  6E0E               	movwf	?_writeEEPROM,c
 10344  00281A  0E02               	movlw	2
 10345  00281C  6E10               	movwf	?_writeEEPROM+2,c
 10346  00281E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10347                           
 10348                           ;main.c: 1166: writeEEPROM(0xF2, 0xc3);
 10349  002822  6A0F               	clrf	?_writeEEPROM+1,c
 10350  002824  0EF2               	movlw	242
 10351  002826  6E0E               	movwf	?_writeEEPROM,c
 10352  002828  0EC3               	movlw	195
 10353  00282A  6E10               	movwf	?_writeEEPROM+2,c
 10354  00282C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10355                           
 10356                           ;main.c: 1167: writeEEPROM(0xF3, 0x50);
 10357  002830  6A0F               	clrf	?_writeEEPROM+1,c
 10358  002832  0EF3               	movlw	243
 10359  002834  6E0E               	movwf	?_writeEEPROM,c
 10360  002836  0E50               	movlw	80
 10361  002838  6E10               	movwf	?_writeEEPROM+2,c
 10362  00283A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10363                           
 10364                           ;main.c: 1171: writeEEPROM(0x9E, 0);
 10365  00283E  6A0F               	clrf	?_writeEEPROM+1,c
 10366  002840  0E9E               	movlw	158
 10367  002842  6E0E               	movwf	?_writeEEPROM,c
 10368  002844  0E00               	movlw	0
 10369  002846  6A10               	clrf	?_writeEEPROM+2,c
 10370  002848  EC0D  F029         	call	_writeEEPROM	;wreg free
 10371                           
 10372                           ;main.c: 1172: writeEEPROM(0x9F, 0);
 10373  00284C  6A0F               	clrf	?_writeEEPROM+1,c
 10374  00284E  0E9F               	movlw	159
 10375  002850  6E0E               	movwf	?_writeEEPROM,c
 10376  002852  0E00               	movlw	0
 10377  002854  6A10               	clrf	?_writeEEPROM+2,c
 10378  002856  EC0D  F029         	call	_writeEEPROM	;wreg free
 10379                           
 10380                           ;main.c: 1173: writeEEPROM(0xA0, 0);
 10381  00285A  6A0F               	clrf	?_writeEEPROM+1,c
 10382  00285C  0EA0               	movlw	160
 10383  00285E  6E0E               	movwf	?_writeEEPROM,c
 10384  002860  0E00               	movlw	0
 10385  002862  6A10               	clrf	?_writeEEPROM+2,c
 10386  002864  EC0D  F029         	call	_writeEEPROM	;wreg free
 10387                           
 10388                           ;main.c: 1174: writeEEPROM(0xA1, 0);
 10389  002868  6A0F               	clrf	?_writeEEPROM+1,c
 10390  00286A  0EA1               	movlw	161
 10391  00286C  6E0E               	movwf	?_writeEEPROM,c
 10392  00286E  0E00               	movlw	0
 10393  002870  6A10               	clrf	?_writeEEPROM+2,c
 10394  002872  EC0D  F029         	call	_writeEEPROM	;wreg free
 10395                           
 10396                           ;main.c: 1175: writeEEPROM(0xA2, 0);
 10397  002876  6A0F               	clrf	?_writeEEPROM+1,c
 10398  002878  0EA2               	movlw	162
 10399  00287A  6E0E               	movwf	?_writeEEPROM,c
 10400  00287C  0E00               	movlw	0
 10401  00287E  6A10               	clrf	?_writeEEPROM+2,c
 10402  002880  EC0D  F029         	call	_writeEEPROM	;wreg free
 10403                           
 10404                           ;main.c: 1176: writeEEPROM(0xA3, 0);
 10405  002884  6A0F               	clrf	?_writeEEPROM+1,c
 10406  002886  0EA3               	movlw	163
 10407  002888  6E0E               	movwf	?_writeEEPROM,c
 10408  00288A  0E00               	movlw	0
 10409  00288C  6A10               	clrf	?_writeEEPROM+2,c
 10410  00288E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10411                           
 10412                           ;main.c: 1177: writeEEPROM(0xA4, 0);
 10413  002892  6A0F               	clrf	?_writeEEPROM+1,c
 10414  002894  0EA4               	movlw	164
 10415  002896  6E0E               	movwf	?_writeEEPROM,c
 10416  002898  0E00               	movlw	0
 10417  00289A  6A10               	clrf	?_writeEEPROM+2,c
 10418  00289C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10419                           
 10420                           ;main.c: 1178: writeEEPROM(0xA5, 0);
 10421  0028A0  6A0F               	clrf	?_writeEEPROM+1,c
 10422  0028A2  0EA5               	movlw	165
 10423  0028A4  6E0E               	movwf	?_writeEEPROM,c
 10424  0028A6  0E00               	movlw	0
 10425  0028A8  6A10               	clrf	?_writeEEPROM+2,c
 10426  0028AA  EC0D  F029         	call	_writeEEPROM	;wreg free
 10427                           
 10428                           ;main.c: 1179: writeEEPROM(0xA6, 0);
 10429  0028AE  6A0F               	clrf	?_writeEEPROM+1,c
 10430  0028B0  0EA6               	movlw	166
 10431  0028B2  6E0E               	movwf	?_writeEEPROM,c
 10432  0028B4  0E00               	movlw	0
 10433  0028B6  6A10               	clrf	?_writeEEPROM+2,c
 10434  0028B8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10435                           
 10436                           ;main.c: 1180: writeEEPROM(0xA7, 0);
 10437  0028BC  6A0F               	clrf	?_writeEEPROM+1,c
 10438  0028BE  0EA7               	movlw	167
 10439  0028C0  6E0E               	movwf	?_writeEEPROM,c
 10440  0028C2  0E00               	movlw	0
 10441  0028C4  6A10               	clrf	?_writeEEPROM+2,c
 10442  0028C6  EC0D  F029         	call	_writeEEPROM	;wreg free
 10443                           
 10444                           ;main.c: 1181: writeEEPROM(0xA8, 0);
 10445  0028CA  6A0F               	clrf	?_writeEEPROM+1,c
 10446  0028CC  0EA8               	movlw	168
 10447  0028CE  6E0E               	movwf	?_writeEEPROM,c
 10448  0028D0  0E00               	movlw	0
 10449  0028D2  6A10               	clrf	?_writeEEPROM+2,c
 10450  0028D4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10451                           
 10452                           ;main.c: 1182: writeEEPROM(0xA9, 0);
 10453  0028D8  6A0F               	clrf	?_writeEEPROM+1,c
 10454  0028DA  0EA9               	movlw	169
 10455  0028DC  6E0E               	movwf	?_writeEEPROM,c
 10456  0028DE  0E00               	movlw	0
 10457  0028E0  6A10               	clrf	?_writeEEPROM+2,c
 10458  0028E2  EC0D  F029         	call	_writeEEPROM	;wreg free
 10459                           
 10460                           ;main.c: 1186: writeEEPROM(0xAA, 0);
 10461  0028E6  6A0F               	clrf	?_writeEEPROM+1,c
 10462  0028E8  0EAA               	movlw	170
 10463  0028EA  6E0E               	movwf	?_writeEEPROM,c
 10464  0028EC  0E00               	movlw	0
 10465  0028EE  6A10               	clrf	?_writeEEPROM+2,c
 10466  0028F0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10467                           
 10468                           ;main.c: 1187: writeEEPROM(0xAB, 0);
 10469  0028F4  6A0F               	clrf	?_writeEEPROM+1,c
 10470  0028F6  0EAB               	movlw	171
 10471  0028F8  6E0E               	movwf	?_writeEEPROM,c
 10472  0028FA  0E00               	movlw	0
 10473  0028FC  6A10               	clrf	?_writeEEPROM+2,c
 10474  0028FE  EC0D  F029         	call	_writeEEPROM	;wreg free
 10475                           
 10476                           ;main.c: 1188: writeEEPROM(0xAC, 0);
 10477  002902  6A0F               	clrf	?_writeEEPROM+1,c
 10478  002904  0EAC               	movlw	172
 10479  002906  6E0E               	movwf	?_writeEEPROM,c
 10480  002908  0E00               	movlw	0
 10481  00290A  6A10               	clrf	?_writeEEPROM+2,c
 10482  00290C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10483                           
 10484                           ;main.c: 1189: writeEEPROM(0xAD, 0);
 10485  002910  6A0F               	clrf	?_writeEEPROM+1,c
 10486  002912  0EAD               	movlw	173
 10487  002914  6E0E               	movwf	?_writeEEPROM,c
 10488  002916  0E00               	movlw	0
 10489  002918  6A10               	clrf	?_writeEEPROM+2,c
 10490  00291A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10491                           
 10492                           ;main.c: 1190: writeEEPROM(0xAE, 0);
 10493  00291E  6A0F               	clrf	?_writeEEPROM+1,c
 10494  002920  0EAE               	movlw	174
 10495  002922  6E0E               	movwf	?_writeEEPROM,c
 10496  002924  0E00               	movlw	0
 10497  002926  6A10               	clrf	?_writeEEPROM+2,c
 10498  002928  EC0D  F029         	call	_writeEEPROM	;wreg free
 10499                           
 10500                           ;main.c: 1191: writeEEPROM(0xAF, 0);
 10501  00292C  6A0F               	clrf	?_writeEEPROM+1,c
 10502  00292E  0EAF               	movlw	175
 10503  002930  6E0E               	movwf	?_writeEEPROM,c
 10504  002932  0E00               	movlw	0
 10505  002934  6A10               	clrf	?_writeEEPROM+2,c
 10506  002936  EC0D  F029         	call	_writeEEPROM	;wreg free
 10507                           
 10508                           ;main.c: 1192: writeEEPROM(0xB0, 0);
 10509  00293A  6A0F               	clrf	?_writeEEPROM+1,c
 10510  00293C  0EB0               	movlw	176
 10511  00293E  6E0E               	movwf	?_writeEEPROM,c
 10512  002940  0E00               	movlw	0
 10513  002942  6A10               	clrf	?_writeEEPROM+2,c
 10514  002944  EC0D  F029         	call	_writeEEPROM	;wreg free
 10515                           
 10516                           ;main.c: 1193: writeEEPROM(0xB1, 0);
 10517  002948  6A0F               	clrf	?_writeEEPROM+1,c
 10518  00294A  0EB1               	movlw	177
 10519  00294C  6E0E               	movwf	?_writeEEPROM,c
 10520  00294E  0E00               	movlw	0
 10521  002950  6A10               	clrf	?_writeEEPROM+2,c
 10522  002952  EC0D  F029         	call	_writeEEPROM	;wreg free
 10523                           
 10524                           ;main.c: 1194: writeEEPROM(0xB2, 0);
 10525  002956  6A0F               	clrf	?_writeEEPROM+1,c
 10526  002958  0EB2               	movlw	178
 10527  00295A  6E0E               	movwf	?_writeEEPROM,c
 10528  00295C  0E00               	movlw	0
 10529  00295E  6A10               	clrf	?_writeEEPROM+2,c
 10530  002960  EC0D  F029         	call	_writeEEPROM	;wreg free
 10531                           
 10532                           ;main.c: 1195: writeEEPROM(0xB3, 0);
 10533  002964  6A0F               	clrf	?_writeEEPROM+1,c
 10534  002966  0EB3               	movlw	179
 10535  002968  6E0E               	movwf	?_writeEEPROM,c
 10536  00296A  0E00               	movlw	0
 10537  00296C  6A10               	clrf	?_writeEEPROM+2,c
 10538  00296E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10539                           
 10540                           ;main.c: 1196: writeEEPROM(0xB4, 0);
 10541  002972  6A0F               	clrf	?_writeEEPROM+1,c
 10542  002974  0EB4               	movlw	180
 10543  002976  6E0E               	movwf	?_writeEEPROM,c
 10544  002978  0E00               	movlw	0
 10545  00297A  6A10               	clrf	?_writeEEPROM+2,c
 10546  00297C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10547                           
 10548                           ;main.c: 1197: writeEEPROM(0xB5, 0);
 10549  002980  6A0F               	clrf	?_writeEEPROM+1,c
 10550  002982  0EB5               	movlw	181
 10551  002984  6E0E               	movwf	?_writeEEPROM,c
 10552  002986  0E00               	movlw	0
 10553  002988  6A10               	clrf	?_writeEEPROM+2,c
 10554  00298A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10555                           
 10556                           ;main.c: 1201: for (uint8_t i = 0; i < 6; i++) {
 10557  00298E  6A11               	clrf	init_app_eeprom@i,c
 10558  002990                     l9570:
 10559                           
 10560                           ;main.c: 1202: writeEEPROM(0xB6 + i * 12, 0);
 10561  002990  5011               	movf	init_app_eeprom@i,w,c
 10562  002992  0D0C               	mullw	12
 10563  002994  0EB6               	movlw	182
 10564  002996  D849               	call	PL4	;call to abstracted procedure
 10565  002998  EC0D  F029         	call	_writeEEPROM	;wreg free
 10566                           
 10567                           ;main.c: 1203: writeEEPROM(0xB7 + i * 12, 0);
 10568  00299C  5011               	movf	init_app_eeprom@i,w,c
 10569  00299E  0D0C               	mullw	12
 10570  0029A0  0EB7               	movlw	183
 10571  0029A2  D843               	call	PL4	;call to abstracted procedure
 10572  0029A4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10573                           
 10574                           ;main.c: 1204: writeEEPROM(0xB8 + i * 12, 0);
 10575  0029A8  5011               	movf	init_app_eeprom@i,w,c
 10576  0029AA  0D0C               	mullw	12
 10577  0029AC  0EB8               	movlw	184
 10578  0029AE  D83D               	call	PL4	;call to abstracted procedure
 10579  0029B0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10580                           
 10581                           ;main.c: 1205: writeEEPROM(0xB9 + i * 12, 0);
 10582  0029B4  5011               	movf	init_app_eeprom@i,w,c
 10583  0029B6  0D0C               	mullw	12
 10584  0029B8  0EB9               	movlw	185
 10585  0029BA  D837               	call	PL4	;call to abstracted procedure
 10586  0029BC  EC0D  F029         	call	_writeEEPROM	;wreg free
 10587                           
 10588                           ;main.c: 1206: writeEEPROM(0xBA + i * 12, 0);
 10589  0029C0  5011               	movf	init_app_eeprom@i,w,c
 10590  0029C2  0D0C               	mullw	12
 10591  0029C4  0EBA               	movlw	186
 10592  0029C6  D831               	call	PL4	;call to abstracted procedure
 10593  0029C8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10594                           
 10595                           ;main.c: 1207: writeEEPROM(0xBB + i * 12, 0);
 10596  0029CC  5011               	movf	init_app_eeprom@i,w,c
 10597  0029CE  0D0C               	mullw	12
 10598  0029D0  0EBB               	movlw	187
 10599  0029D2  D82B               	call	PL4	;call to abstracted procedure
 10600  0029D4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10601                           
 10602                           ;main.c: 1208: writeEEPROM(0xBC + i * 12, 0);
 10603  0029D8  5011               	movf	init_app_eeprom@i,w,c
 10604  0029DA  0D0C               	mullw	12
 10605  0029DC  0EBC               	movlw	188
 10606  0029DE  D825               	call	PL4	;call to abstracted procedure
 10607  0029E0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10608                           
 10609                           ;main.c: 1209: writeEEPROM(0xBD + i * 12, 0);
 10610  0029E4  5011               	movf	init_app_eeprom@i,w,c
 10611  0029E6  0D0C               	mullw	12
 10612  0029E8  0EBD               	movlw	189
 10613  0029EA  D81F               	call	PL4	;call to abstracted procedure
 10614  0029EC  EC0D  F029         	call	_writeEEPROM	;wreg free
 10615                           
 10616                           ;main.c: 1210: writeEEPROM(0xBE + i * 12, 0);
 10617  0029F0  5011               	movf	init_app_eeprom@i,w,c
 10618  0029F2  0D0C               	mullw	12
 10619  0029F4  0EBE               	movlw	190
 10620  0029F6  D819               	call	PL4	;call to abstracted procedure
 10621  0029F8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10622                           
 10623                           ;main.c: 1211: writeEEPROM(0xBF + i * 12, 0);
 10624  0029FC  5011               	movf	init_app_eeprom@i,w,c
 10625  0029FE  0D0C               	mullw	12
 10626  002A00  0EBF               	movlw	191
 10627  002A02  D813               	call	PL4	;call to abstracted procedure
 10628  002A04  EC0D  F029         	call	_writeEEPROM	;wreg free
 10629                           
 10630                           ;main.c: 1212: writeEEPROM(0xC0 + i * 12, 0);
 10631  002A08  5011               	movf	init_app_eeprom@i,w,c
 10632  002A0A  0D0C               	mullw	12
 10633  002A0C  0EC0               	movlw	192
 10634  002A0E  D80D               	call	PL4	;call to abstracted procedure
 10635  002A10  EC0D  F029         	call	_writeEEPROM	;wreg free
 10636                           
 10637                           ;main.c: 1213: writeEEPROM(0xC1 + i * 12, 0);
 10638  002A14  5011               	movf	init_app_eeprom@i,w,c
 10639  002A16  0D0C               	mullw	12
 10640  002A18  0EC1               	movlw	193
 10641  002A1A  D807               	call	PL4	;call to abstracted procedure
 10642  002A1C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10643  002A20  2A11               	incf	init_app_eeprom@i,f,c
 10644  002A22  0E05               	movlw	5
 10645  002A24  6411               	cpfsgt	init_app_eeprom@i,c
 10646  002A26  D7B4               	goto	l9570
 10647  002A28  0C05               	retlw	5
 10648  002A2A                     __end_of_init_app_eeprom:
 10649                           	opt stack 0
 10650  002A2A                     PL4:
 10651                           	opt stack 24
 10652  002A2A  24F3               	addwf	prodl,w,c
 10653  002A2C  6E0E               	movwf	?_writeEEPROM,c
 10654  002A2E  0E00               	movlw	0
 10655  002A30  20F4               	addwfc	prodh,w,c
 10656  002A32  6E0F               	movwf	?_writeEEPROM+1,c
 10657  002A34  6A10               	clrf	?_writeEEPROM+2,c
 10658  002A36  0C00               	retlw	0
 10659  002A38                     __end_ofPL4:
 10660                           	opt stack 0
 10661                           tblptru	equ	0xFF8
 10662                           tblptrh	equ	0xFF7
 10663                           tblptrl	equ	0xFF6
 10664                           tablat	equ	0xFF5
 10665                           prodh	equ	0xFF4
 10666                           prodl	equ	0xFF3
 10667                           intcon	equ	0xFF2
 10668                           postinc0	equ	0xFEE
 10669                           wreg	equ	0xFE8
 10670                           indf1	equ	0xFE7
 10671                           postdec1	equ	0xFE5
 10672                           fsr1h	equ	0xFE2
 10673                           fsr1l	equ	0xFE1
 10674                           indf2	equ	0xFDF
 10675                           postinc2	equ	0xFDE
 10676                           postdec2	equ	0xFDD
 10677                           plusw2	equ	0xFDB
 10678                           fsr2h	equ	0xFDA
 10679                           fsr2l	equ	0xFD9
 10680                           status	equ	0xFD8
 10681                           
 10682 ;; *************** function _vscp_getFamilyType *****************
 10683 ;; Defined at:
 10684 ;;		line 2821 in file "../main.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;		None
 10687 ;; Auto vars:     Size  Location     Type
 10688 ;;		None
 10689 ;; Return value:  Size  Location     Type
 10690 ;;                  4   13[COMRAM] unsigned long 
 10691 ;; Registers used:
 10692 ;;		None
 10693 ;; Tracked objects:
 10694 ;;		On entry : F/0
 10695 ;;		On exit  : F/0
 10696 ;;		Unchanged: F/0
 10697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10698 ;;      Params:         4       0       0       0       0       0       0
 10699 ;;      Locals:         0       0       0       0       0       0       0
 10700 ;;      Temps:          0       0       0       0       0       0       0
 10701 ;;      Totals:         4       0       0       0       0       0       0
 10702 ;;Total ram usage:        4 bytes
 10703 ;; Hardware stack levels used:    1
 10704 ;; Hardware stack levels required when called:    2
 10705 ;; This function calls:
 10706 ;;		Nothing
 10707 ;; This function is called by:
 10708 ;;		_vscp_writeStdReg
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           	psect	text39
 10713  005494                     __ptext39:
 10714                           	opt stack 0
 10715  005494                     _vscp_getFamilyType:
 10716                           	opt stack 26
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;main.c: 2822: return 0;
 10720                           
 10721                           ;incstack = 0
 10722                           ;incstack = 0
 10723  005494  6A0E               	clrf	?_vscp_getFamilyType,c
 10724  005496  6A0F               	clrf	?_vscp_getFamilyType+1,c
 10725  005498  6A10               	clrf	?_vscp_getFamilyType+2,c
 10726  00549A  6A11               	clrf	?_vscp_getFamilyType+3,c
 10727                           
 10728                           ; BSR set to: 0
 10729  00549C  0012               	return	
 10730  00549E                     __end_of_vscp_getFamilyType:
 10731                           	opt stack 0
 10732                           tblptru	equ	0xFF8
 10733                           tblptrh	equ	0xFF7
 10734                           tblptrl	equ	0xFF6
 10735                           tablat	equ	0xFF5
 10736                           prodh	equ	0xFF4
 10737                           prodl	equ	0xFF3
 10738                           intcon	equ	0xFF2
 10739                           postinc0	equ	0xFEE
 10740                           wreg	equ	0xFE8
 10741                           indf1	equ	0xFE7
 10742                           postdec1	equ	0xFE5
 10743                           fsr1h	equ	0xFE2
 10744                           fsr1l	equ	0xFE1
 10745                           indf2	equ	0xFDF
 10746                           postinc2	equ	0xFDE
 10747                           postdec2	equ	0xFDD
 10748                           plusw2	equ	0xFDB
 10749                           fsr2h	equ	0xFDA
 10750                           fsr2l	equ	0xFD9
 10751                           status	equ	0xFD8
 10752                           
 10753 ;; *************** function _vscp_getFamilyCode *****************
 10754 ;; Defined at:
 10755 ;;		line 2811 in file "../main.c"
 10756 ;; Parameters:    Size  Location     Type
 10757 ;;		None
 10758 ;; Auto vars:     Size  Location     Type
 10759 ;;		None
 10760 ;; Return value:  Size  Location     Type
 10761 ;;                  4   13[COMRAM] unsigned long 
 10762 ;; Registers used:
 10763 ;;		None
 10764 ;; Tracked objects:
 10765 ;;		On entry : F/0
 10766 ;;		On exit  : F/0
 10767 ;;		Unchanged: F/0
 10768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10769 ;;      Params:         4       0       0       0       0       0       0
 10770 ;;      Locals:         0       0       0       0       0       0       0
 10771 ;;      Temps:          0       0       0       0       0       0       0
 10772 ;;      Totals:         4       0       0       0       0       0       0
 10773 ;;Total ram usage:        4 bytes
 10774 ;; Hardware stack levels used:    1
 10775 ;; Hardware stack levels required when called:    2
 10776 ;; This function calls:
 10777 ;;		Nothing
 10778 ;; This function is called by:
 10779 ;;		_vscp_writeStdReg
 10780 ;; This function uses a non-reentrant model
 10781 ;;
 10782                           
 10783                           	psect	text40
 10784  00549E                     __ptext40:
 10785                           	opt stack 0
 10786  00549E                     _vscp_getFamilyCode:
 10787                           	opt stack 26
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;main.c: 2812: return 0L;
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;incstack = 0
 10794                           ;incstack = 0
 10795  00549E  6A0E               	clrf	?_vscp_getFamilyCode,c
 10796  0054A0  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 10797  0054A2  6A10               	clrf	?_vscp_getFamilyCode+2,c
 10798  0054A4  6A11               	clrf	?_vscp_getFamilyCode+3,c
 10799                           
 10800                           ; BSR set to: 0
 10801  0054A6  0012               	return	
 10802  0054A8                     __end_of_vscp_getFamilyCode:
 10803                           	opt stack 0
 10804                           tblptru	equ	0xFF8
 10805                           tblptrh	equ	0xFF7
 10806                           tblptrl	equ	0xFF6
 10807                           tablat	equ	0xFF5
 10808                           prodh	equ	0xFF4
 10809                           prodl	equ	0xFF3
 10810                           intcon	equ	0xFF2
 10811                           postinc0	equ	0xFEE
 10812                           wreg	equ	0xFE8
 10813                           indf1	equ	0xFE7
 10814                           postdec1	equ	0xFE5
 10815                           fsr1h	equ	0xFE2
 10816                           fsr1l	equ	0xFE1
 10817                           indf2	equ	0xFDF
 10818                           postinc2	equ	0xFDE
 10819                           postdec2	equ	0xFDD
 10820                           plusw2	equ	0xFDB
 10821                           fsr2h	equ	0xFDA
 10822                           fsr2l	equ	0xFD9
 10823                           status	equ	0xFD8
 10824                           
 10825 ;; *************** function _vscp_setManufacturerId *****************
 10826 ;; Defined at:
 10827 ;;		line 2647 in file "../main.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;  idx             1    wreg     unsigned char 
 10830 ;;  data            1   16[COMRAM] unsigned char 
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;  idx             1   17[COMRAM] unsigned char 
 10833 ;; Return value:  Size  Location     Type
 10834 ;;		None               void
 10835 ;; Registers used:
 10836 ;;		wreg, status,2, status,0, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : F/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10842 ;;      Params:         1       0       0       0       0       0       0
 10843 ;;      Locals:         1       0       0       0       0       0       0
 10844 ;;      Temps:          0       0       0       0       0       0       0
 10845 ;;      Totals:         2       0       0       0       0       0       0
 10846 ;;Total ram usage:        2 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    3
 10849 ;; This function calls:
 10850 ;;		_writeEEPROM
 10851 ;; This function is called by:
 10852 ;;		_vscp_writeStdReg
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           	psect	text41
 10857  005360                     __ptext41:
 10858                           	opt stack 0
 10859  005360                     _vscp_setManufacturerId:
 10860                           	opt stack 25
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;incstack = 0
 10864                           ;incstack = 0
 10865                           ;vscp_setManufacturerId@idx stored from wreg
 10866  005360  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;main.c: 2648: writeEEPROM(0x09 + idx, data);
 10870  005364  0E09               	movlw	9
 10871  005366  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10872  005368  6E0E               	movwf	?_writeEEPROM,c
 10873  00536A  6A0F               	clrf	?_writeEEPROM+1,c
 10874  00536C  0E00               	movlw	0
 10875  00536E  220F               	addwfc	?_writeEEPROM+1,f,c
 10876  005370  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10877  005374  EF0D  F029         	goto	_writeEEPROM	;wreg free
 10878  005378                     __end_of_vscp_setManufacturerId:
 10879                           	opt stack 0
 10880                           tblptru	equ	0xFF8
 10881                           tblptrh	equ	0xFF7
 10882                           tblptrl	equ	0xFF6
 10883                           tablat	equ	0xFF5
 10884                           prodh	equ	0xFF4
 10885                           prodl	equ	0xFF3
 10886                           intcon	equ	0xFF2
 10887                           postinc0	equ	0xFEE
 10888                           wreg	equ	0xFE8
 10889                           indf1	equ	0xFE7
 10890                           postdec1	equ	0xFE5
 10891                           fsr1h	equ	0xFE2
 10892                           fsr1l	equ	0xFE1
 10893                           indf2	equ	0xFDF
 10894                           postinc2	equ	0xFDE
 10895                           postdec2	equ	0xFDD
 10896                           plusw2	equ	0xFDB
 10897                           fsr2h	equ	0xFDA
 10898                           fsr2l	equ	0xFD9
 10899                           status	equ	0xFD8
 10900                           
 10901 ;; *************** function _vscp_setUserID *****************
 10902 ;; Defined at:
 10903 ;;		line 2625 in file "../main.c"
 10904 ;; Parameters:    Size  Location     Type
 10905 ;;  idx             1    wreg     unsigned char 
 10906 ;;  data            1   16[COMRAM] unsigned char 
 10907 ;; Auto vars:     Size  Location     Type
 10908 ;;  idx             1   17[COMRAM] unsigned char 
 10909 ;; Return value:  Size  Location     Type
 10910 ;;		None               void
 10911 ;; Registers used:
 10912 ;;		wreg, status,2, status,0, cstack
 10913 ;; Tracked objects:
 10914 ;;		On entry : F/0
 10915 ;;		On exit  : 0/0
 10916 ;;		Unchanged: 0/0
 10917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10918 ;;      Params:         1       0       0       0       0       0       0
 10919 ;;      Locals:         1       0       0       0       0       0       0
 10920 ;;      Temps:          0       0       0       0       0       0       0
 10921 ;;      Totals:         2       0       0       0       0       0       0
 10922 ;;Total ram usage:        2 bytes
 10923 ;; Hardware stack levels used:    1
 10924 ;; Hardware stack levels required when called:    3
 10925 ;; This function calls:
 10926 ;;		_writeEEPROM
 10927 ;; This function is called by:
 10928 ;;		_vscp_writeStdReg
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932                           	psect	text42
 10933  005378                     __ptext42:
 10934                           	opt stack 0
 10935  005378                     _vscp_setUserID:
 10936                           	opt stack 25
 10937                           
 10938                           ;incstack = 0
 10939                           ;incstack = 0
 10940                           ;vscp_setUserID@idx stored from wreg
 10941  005378  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;main.c: 2626: writeEEPROM(idx + 0x04, data);
 10945  00537C  0E04               	movlw	4
 10946  00537E  2412               	addwf	vscp_setUserID@idx,w,c
 10947  005380  6E0E               	movwf	?_writeEEPROM,c
 10948  005382  6A0F               	clrf	?_writeEEPROM+1,c
 10949  005384  0E00               	movlw	0
 10950  005386  220F               	addwfc	?_writeEEPROM+1,f,c
 10951  005388  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10952  00538C  EF0D  F029         	goto	_writeEEPROM	;wreg free
 10953  005390                     __end_of_vscp_setUserID:
 10954                           	opt stack 0
 10955                           tblptru	equ	0xFF8
 10956                           tblptrh	equ	0xFF7
 10957                           tblptrl	equ	0xFF6
 10958                           tablat	equ	0xFF5
 10959                           prodh	equ	0xFF4
 10960                           prodl	equ	0xFF3
 10961                           intcon	equ	0xFF2
 10962                           postinc0	equ	0xFEE
 10963                           wreg	equ	0xFE8
 10964                           indf1	equ	0xFE7
 10965                           postdec1	equ	0xFE5
 10966                           fsr1h	equ	0xFE2
 10967                           fsr1l	equ	0xFE1
 10968                           indf2	equ	0xFDF
 10969                           postinc2	equ	0xFDE
 10970                           postdec2	equ	0xFDD
 10971                           plusw2	equ	0xFDB
 10972                           fsr2h	equ	0xFDA
 10973                           fsr2l	equ	0xFD9
 10974                           status	equ	0xFD8
 10975                           
 10976 ;; *************** function _vscp_setGUID *****************
 10977 ;; Defined at:
 10978 ;;		line 2594 in file "../main.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;  idx             1    wreg     unsigned char 
 10981 ;;  data            1   16[COMRAM] unsigned char 
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;  idx             1   17[COMRAM] unsigned char 
 10984 ;; Return value:  Size  Location     Type
 10985 ;;		None               void
 10986 ;; Registers used:
 10987 ;;		wreg, status,2, status,0, cstack
 10988 ;; Tracked objects:
 10989 ;;		On entry : F/0
 10990 ;;		On exit  : 0/0
 10991 ;;		Unchanged: 0/0
 10992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10993 ;;      Params:         1       0       0       0       0       0       0
 10994 ;;      Locals:         1       0       0       0       0       0       0
 10995 ;;      Temps:          0       0       0       0       0       0       0
 10996 ;;      Totals:         2       0       0       0       0       0       0
 10997 ;;Total ram usage:        2 bytes
 10998 ;; Hardware stack levels used:    1
 10999 ;; Hardware stack levels required when called:    3
 11000 ;; This function calls:
 11001 ;;		_writeEEPROM
 11002 ;; This function is called by:
 11003 ;;		_vscp_writeStdReg
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           	psect	text43
 11008  0052CE                     __ptext43:
 11009                           	opt stack 0
 11010  0052CE                     _vscp_setGUID:
 11011                           	opt stack 25
 11012                           
 11013                           ;incstack = 0
 11014                           ;incstack = 0
 11015                           ;vscp_setGUID@idx stored from wreg
 11016  0052CE  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;main.c: 2595: if ( idx>15 ) return;
 11020  0052D2  0E0F               	movlw	15
 11021  0052D4  6412               	cpfsgt	vscp_setGUID@idx,c
 11022  0052D6  D001               	goto	l11010
 11023  0052D8  D00A               	goto	l552
 11024  0052DA                     l11010:
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;main.c: 2596: writeEEPROM( 0x11 + idx, data );
 11028  0052DA  0E11               	movlw	17
 11029  0052DC  2412               	addwf	vscp_setGUID@idx,w,c
 11030  0052DE  6E0E               	movwf	?_writeEEPROM,c
 11031  0052E0  6A0F               	clrf	?_writeEEPROM+1,c
 11032  0052E2  0E00               	movlw	0
 11033  0052E4  220F               	addwfc	?_writeEEPROM+1,f,c
 11034  0052E6  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 11035  0052EA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11036  0052EE                     l552:
 11037  0052EE  0012               	return	
 11038  0052F0                     __end_of_vscp_setGUID:
 11039                           	opt stack 0
 11040                           tblptru	equ	0xFF8
 11041                           tblptrh	equ	0xFF7
 11042                           tblptrl	equ	0xFF6
 11043                           tablat	equ	0xFF5
 11044                           prodh	equ	0xFF4
 11045                           prodl	equ	0xFF3
 11046                           intcon	equ	0xFF2
 11047                           postinc0	equ	0xFEE
 11048                           wreg	equ	0xFE8
 11049                           indf1	equ	0xFE7
 11050                           postdec1	equ	0xFE5
 11051                           fsr1h	equ	0xFE2
 11052                           fsr1l	equ	0xFE1
 11053                           indf2	equ	0xFDF
 11054                           postinc2	equ	0xFDE
 11055                           postdec2	equ	0xFDD
 11056                           plusw2	equ	0xFDB
 11057                           fsr2h	equ	0xFDA
 11058                           fsr2l	equ	0xFD9
 11059                           status	equ	0xFD8
 11060                           
 11061 ;; *************** function _vscp_writeAppReg *****************
 11062 ;; Defined at:
 11063 ;;		line 1887 in file "../main.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;  reg             1    wreg     unsigned char 
 11066 ;;  val             1   32[COMRAM] unsigned char 
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;  reg             1   34[COMRAM] unsigned char 
 11069 ;;  pos             1   33[COMRAM] unsigned char 
 11070 ;;  rv              1   35[COMRAM] unsigned char 
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  1    wreg      unsigned char 
 11073 ;; Registers used:
 11074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11075 ;; Tracked objects:
 11076 ;;		On entry : F/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11080 ;;      Params:         1       0       0       0       0       0       0
 11081 ;;      Locals:         3       0       0       0       0       0       0
 11082 ;;      Temps:          0       0       0       0       0       0       0
 11083 ;;      Totals:         4       0       0       0       0       0       0
 11084 ;;Total ram usage:        4 bytes
 11085 ;; Hardware stack levels used:    1
 11086 ;; Hardware stack levels required when called:    4
 11087 ;; This function calls:
 11088 ;;		_writeEEPROM
 11089 ;;		_readEEPROM
 11090 ;;		_writeCoeffs2Ram
 11091 ;; This function is called by:
 11092 ;;		_vscp_writeRegister
 11093 ;;		_vscp_handleProtocolEvent
 11094 ;; This function uses a non-reentrant model
 11095 ;;
 11096                           
 11097                           	psect	text44
 11098  00066E                     __ptext44:
 11099                           	opt stack 0
 11100  00066E                     _vscp_writeAppReg:
 11101                           	opt stack 24
 11102                           
 11103                           ;incstack = 0
 11104                           ;incstack = 0
 11105                           ;vscp_writeAppReg@reg stored from wreg
 11106  00066E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;main.c: 1888: uint8_t rv;
 11110                           ;main.c: 1895: rv = ~val;
 11111  000672  1C21               	comf	vscp_writeAppReg@val,w,c
 11112  000674  6E24               	movwf	vscp_writeAppReg@rv,c
 11113                           
 11114                           ;main.c: 1897: if (0 == vscp_page_select) {
 11115  000676  5047               	movf	_vscp_page_select+1,w,c
 11116  000678  1046               	iorwf	_vscp_page_select,w,c
 11117  00067A  E102 EF37  F008    	bz	l10972
 11118  000680  EF71  F009         	goto	l10974
 11119  000684                     l10782:
 11120                           
 11121                           ; BSR set to: 0
 11122                           ;main.c: 1903: writeEEPROM(0x41, val);
 11123  000684  6A0F               	clrf	?_writeEEPROM+1,c
 11124  000686  0E41               	movlw	65
 11125  000688  6E0E               	movwf	?_writeEEPROM,c
 11126  00068A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11127  00068E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11128                           
 11129                           ;main.c: 1904: rv = readEEPROM(0x41);
 11130  000692  6A0F               	clrf	?_readEEPROM+1,c
 11131  000694  0E41               	movlw	65
 11132  000696  6E0E               	movwf	?_readEEPROM,c
 11133  000698  EC1C  F02A         	call	_readEEPROM	;wreg free
 11134  00069C  EFA9  F009         	goto	L19
 11135  0006A0                     l10784:
 11136                           
 11137                           ; BSR set to: 0
 11138                           ;main.c: 1909: writeEEPROM(0x42, val);
 11139  0006A0  6A0F               	clrf	?_writeEEPROM+1,c
 11140  0006A2  0E42               	movlw	66
 11141  0006A4  6E0E               	movwf	?_writeEEPROM,c
 11142  0006A6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11143  0006AA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11144                           
 11145                           ;main.c: 1910: rv = readEEPROM(0x42);
 11146  0006AE  6A0F               	clrf	?_readEEPROM+1,c
 11147  0006B0  0E42               	movlw	66
 11148  0006B2  6E0E               	movwf	?_readEEPROM,c
 11149  0006B4  EC1C  F02A         	call	_readEEPROM	;wreg free
 11150  0006B8  EFA9  F009         	goto	L19
 11151  0006BC                     l10786:
 11152                           
 11153                           ; BSR set to: 0
 11154                           ;main.c: 1919: writeEEPROM(0x43, val);
 11155  0006BC  6A0F               	clrf	?_writeEEPROM+1,c
 11156  0006BE  0E43               	movlw	67
 11157  0006C0  6E0E               	movwf	?_writeEEPROM,c
 11158  0006C2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11159  0006C6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11160                           
 11161                           ;main.c: 1920: rv = readEEPROM(0x43);
 11162  0006CA  6A0F               	clrf	?_readEEPROM+1,c
 11163  0006CC  0E43               	movlw	67
 11164  0006CE  6E0E               	movwf	?_readEEPROM,c
 11165  0006D0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11166  0006D4  EFA9  F009         	goto	L19
 11167  0006D8                     l10788:
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;main.c: 1925: writeEEPROM(0x44, val);
 11171  0006D8  6A0F               	clrf	?_writeEEPROM+1,c
 11172  0006DA  0E44               	movlw	68
 11173  0006DC  6E0E               	movwf	?_writeEEPROM,c
 11174  0006DE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11175  0006E2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11176                           
 11177                           ;main.c: 1926: rv = readEEPROM(0x44);
 11178  0006E6  6A0F               	clrf	?_readEEPROM+1,c
 11179  0006E8  0E44               	movlw	68
 11180  0006EA  6E0E               	movwf	?_readEEPROM,c
 11181  0006EC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11182  0006F0  EFA9  F009         	goto	L19
 11183  0006F4                     l10790:
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;main.c: 1931: writeEEPROM(0x45, val);
 11187  0006F4  6A0F               	clrf	?_writeEEPROM+1,c
 11188  0006F6  0E45               	movlw	69
 11189  0006F8  6E0E               	movwf	?_writeEEPROM,c
 11190  0006FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11191  0006FE  EC0D  F029         	call	_writeEEPROM	;wreg free
 11192                           
 11193                           ;main.c: 1932: rv = readEEPROM(0x45);
 11194  000702  6A0F               	clrf	?_readEEPROM+1,c
 11195  000704  0E45               	movlw	69
 11196  000706  6E0E               	movwf	?_readEEPROM,c
 11197  000708  EC1C  F02A         	call	_readEEPROM	;wreg free
 11198  00070C  EFA9  F009         	goto	L19
 11199  000710                     l10792:
 11200                           
 11201                           ; BSR set to: 0
 11202                           ;main.c: 1937: writeEEPROM(0x46, val);
 11203  000710  6A0F               	clrf	?_writeEEPROM+1,c
 11204  000712  0E46               	movlw	70
 11205  000714  6E0E               	movwf	?_writeEEPROM,c
 11206  000716  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11207  00071A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11208                           
 11209                           ;main.c: 1938: rv = readEEPROM(0x46);
 11210  00071E  6A0F               	clrf	?_readEEPROM+1,c
 11211  000720  0E46               	movlw	70
 11212  000722  6E0E               	movwf	?_readEEPROM,c
 11213  000724  EC1C  F02A         	call	_readEEPROM	;wreg free
 11214  000728  EFA9  F009         	goto	L19
 11215  00072C                     l10794:
 11216                           
 11217                           ; BSR set to: 0
 11218                           ;main.c: 1943: writeEEPROM(0x47, val);
 11219  00072C  6A0F               	clrf	?_writeEEPROM+1,c
 11220  00072E  0E47               	movlw	71
 11221  000730  6E0E               	movwf	?_writeEEPROM,c
 11222  000732  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11223  000736  EC0D  F029         	call	_writeEEPROM	;wreg free
 11224                           
 11225                           ;main.c: 1944: rv = readEEPROM(0x47);
 11226  00073A  6A0F               	clrf	?_readEEPROM+1,c
 11227  00073C  0E47               	movlw	71
 11228  00073E  6E0E               	movwf	?_readEEPROM,c
 11229  000740  EC1C  F02A         	call	_readEEPROM	;wreg free
 11230  000744  EFA9  F009         	goto	L19
 11231  000748                     l10796:
 11232                           
 11233                           ; BSR set to: 0
 11234                           ;main.c: 1949: writeEEPROM(0x48, val);
 11235  000748  6A0F               	clrf	?_writeEEPROM+1,c
 11236  00074A  0E48               	movlw	72
 11237  00074C  6E0E               	movwf	?_writeEEPROM,c
 11238  00074E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11239  000752  EC0D  F029         	call	_writeEEPROM	;wreg free
 11240                           
 11241                           ;main.c: 1950: rv = readEEPROM(0x48);
 11242  000756  6A0F               	clrf	?_readEEPROM+1,c
 11243  000758  0E48               	movlw	72
 11244  00075A  6E0E               	movwf	?_readEEPROM,c
 11245  00075C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11246  000760  EFA9  F009         	goto	L19
 11247  000764                     l10798:
 11248                           
 11249                           ; BSR set to: 0
 11250                           ;main.c: 1959: writeEEPROM(0x49, val);
 11251  000764  6A0F               	clrf	?_writeEEPROM+1,c
 11252  000766  0E49               	movlw	73
 11253  000768  6E0E               	movwf	?_writeEEPROM,c
 11254  00076A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11255  00076E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11256                           
 11257                           ;main.c: 1960: rv = readEEPROM(0x49);
 11258  000772  6A0F               	clrf	?_readEEPROM+1,c
 11259  000774  0E49               	movlw	73
 11260  000776  6E0E               	movwf	?_readEEPROM,c
 11261  000778  EC1C  F02A         	call	_readEEPROM	;wreg free
 11262  00077C  EFA9  F009         	goto	L19
 11263  000780                     l10800:
 11264                           
 11265                           ; BSR set to: 0
 11266                           ;main.c: 1965: writeEEPROM(0x4A, val);
 11267  000780  6A0F               	clrf	?_writeEEPROM+1,c
 11268  000782  0E4A               	movlw	74
 11269  000784  6E0E               	movwf	?_writeEEPROM,c
 11270  000786  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11271  00078A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11272                           
 11273                           ;main.c: 1966: rv = readEEPROM(0x4A);
 11274  00078E  6A0F               	clrf	?_readEEPROM+1,c
 11275  000790  0E4A               	movlw	74
 11276  000792  6E0E               	movwf	?_readEEPROM,c
 11277  000794  EC1C  F02A         	call	_readEEPROM	;wreg free
 11278  000798  EFA9  F009         	goto	L19
 11279  00079C                     l10802:
 11280                           
 11281                           ; BSR set to: 0
 11282                           ;main.c: 1971: writeEEPROM(0x4B, val);
 11283  00079C  6A0F               	clrf	?_writeEEPROM+1,c
 11284  00079E  0E4B               	movlw	75
 11285  0007A0  6E0E               	movwf	?_writeEEPROM,c
 11286  0007A2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11287  0007A6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11288                           
 11289                           ;main.c: 1972: rv = readEEPROM(0x4B);
 11290  0007AA  6A0F               	clrf	?_readEEPROM+1,c
 11291  0007AC  0E4B               	movlw	75
 11292  0007AE  6E0E               	movwf	?_readEEPROM,c
 11293  0007B0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11294  0007B4  EFA9  F009         	goto	L19
 11295  0007B8                     l10804:
 11296                           
 11297                           ; BSR set to: 0
 11298                           ;main.c: 1977: writeEEPROM(0x4C, val);
 11299  0007B8  6A0F               	clrf	?_writeEEPROM+1,c
 11300  0007BA  0E4C               	movlw	76
 11301  0007BC  6E0E               	movwf	?_writeEEPROM,c
 11302  0007BE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11303  0007C2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11304                           
 11305                           ;main.c: 1978: rv = readEEPROM(0x4C);
 11306  0007C6  6A0F               	clrf	?_readEEPROM+1,c
 11307  0007C8  0E4C               	movlw	76
 11308  0007CA  6E0E               	movwf	?_readEEPROM,c
 11309  0007CC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11310  0007D0  EFA9  F009         	goto	L19
 11311  0007D4                     l10806:
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;main.c: 1983: writeEEPROM(0x4D, val);
 11315  0007D4  6A0F               	clrf	?_writeEEPROM+1,c
 11316  0007D6  0E4D               	movlw	77
 11317  0007D8  6E0E               	movwf	?_writeEEPROM,c
 11318  0007DA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11319  0007DE  EC0D  F029         	call	_writeEEPROM	;wreg free
 11320                           
 11321                           ;main.c: 1984: rv = readEEPROM(0x4D);
 11322  0007E2  6A0F               	clrf	?_readEEPROM+1,c
 11323  0007E4  0E4D               	movlw	77
 11324  0007E6  6E0E               	movwf	?_readEEPROM,c
 11325  0007E8  EC1C  F02A         	call	_readEEPROM	;wreg free
 11326  0007EC  EFA9  F009         	goto	L19
 11327  0007F0                     l10808:
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;main.c: 1989: writeEEPROM(0x4E, val);
 11331  0007F0  6A0F               	clrf	?_writeEEPROM+1,c
 11332  0007F2  0E4E               	movlw	78
 11333  0007F4  6E0E               	movwf	?_writeEEPROM,c
 11334  0007F6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11335  0007FA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11336                           
 11337                           ;main.c: 1990: rv = readEEPROM(0x4E);
 11338  0007FE  6A0F               	clrf	?_readEEPROM+1,c
 11339  000800  0E4E               	movlw	78
 11340  000802  6E0E               	movwf	?_readEEPROM,c
 11341  000804  EC1C  F02A         	call	_readEEPROM	;wreg free
 11342  000808  EFA9  F009         	goto	L19
 11343  00080C                     l10810:
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;main.c: 1999: writeEEPROM(0x4F, val);
 11347  00080C  6A0F               	clrf	?_writeEEPROM+1,c
 11348  00080E  0E4F               	movlw	79
 11349  000810  6E0E               	movwf	?_writeEEPROM,c
 11350  000812  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11351  000816  EC0D  F029         	call	_writeEEPROM	;wreg free
 11352                           
 11353                           ;main.c: 2000: rv = readEEPROM(0x4F);
 11354  00081A  6A0F               	clrf	?_readEEPROM+1,c
 11355  00081C  0E4F               	movlw	79
 11356  00081E  6E0E               	movwf	?_readEEPROM,c
 11357  000820  EC1C  F02A         	call	_readEEPROM	;wreg free
 11358  000824  EFA9  F009         	goto	L19
 11359  000828                     l10812:
 11360                           
 11361                           ; BSR set to: 0
 11362                           ;main.c: 2005: writeEEPROM(0x50, val);
 11363  000828  6A0F               	clrf	?_writeEEPROM+1,c
 11364  00082A  0E50               	movlw	80
 11365  00082C  6E0E               	movwf	?_writeEEPROM,c
 11366  00082E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11367  000832  EC0D  F029         	call	_writeEEPROM	;wreg free
 11368                           
 11369                           ;main.c: 2006: rv = readEEPROM(0x50);
 11370  000836  6A0F               	clrf	?_readEEPROM+1,c
 11371  000838  0E50               	movlw	80
 11372  00083A  6E0E               	movwf	?_readEEPROM,c
 11373  00083C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11374  000840  EFA9  F009         	goto	L19
 11375  000844                     l10814:
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;main.c: 2011: writeEEPROM(0x51, val);
 11379  000844  6A0F               	clrf	?_writeEEPROM+1,c
 11380  000846  0E51               	movlw	81
 11381  000848  6E0E               	movwf	?_writeEEPROM,c
 11382  00084A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11383  00084E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11384                           
 11385                           ;main.c: 2012: rv = readEEPROM(0x51);
 11386  000852  6A0F               	clrf	?_readEEPROM+1,c
 11387  000854  0E51               	movlw	81
 11388  000856  6E0E               	movwf	?_readEEPROM,c
 11389  000858  EC1C  F02A         	call	_readEEPROM	;wreg free
 11390  00085C  EFA9  F009         	goto	L19
 11391  000860                     l10816:
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;main.c: 2017: writeEEPROM(0x52, val);
 11395  000860  6A0F               	clrf	?_writeEEPROM+1,c
 11396  000862  0E52               	movlw	82
 11397  000864  6E0E               	movwf	?_writeEEPROM,c
 11398  000866  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11399  00086A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11400                           
 11401                           ;main.c: 2018: rv = readEEPROM(0x52);
 11402  00086E  6A0F               	clrf	?_readEEPROM+1,c
 11403  000870  0E52               	movlw	82
 11404  000872  6E0E               	movwf	?_readEEPROM,c
 11405  000874  EC1C  F02A         	call	_readEEPROM	;wreg free
 11406  000878  EFA9  F009         	goto	L19
 11407  00087C                     l10818:
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;main.c: 2023: writeEEPROM(0x53, val);
 11411  00087C  6A0F               	clrf	?_writeEEPROM+1,c
 11412  00087E  0E53               	movlw	83
 11413  000880  6E0E               	movwf	?_writeEEPROM,c
 11414  000882  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11415  000886  EC0D  F029         	call	_writeEEPROM	;wreg free
 11416                           
 11417                           ;main.c: 2024: rv = readEEPROM(0x53);
 11418  00088A  6A0F               	clrf	?_readEEPROM+1,c
 11419  00088C  0E53               	movlw	83
 11420  00088E  6E0E               	movwf	?_readEEPROM,c
 11421  000890  EC1C  F02A         	call	_readEEPROM	;wreg free
 11422  000894  EFA9  F009         	goto	L19
 11423  000898                     l10820:
 11424                           
 11425                           ; BSR set to: 0
 11426                           ;main.c: 2029: writeEEPROM(0x54, val);
 11427  000898  6A0F               	clrf	?_writeEEPROM+1,c
 11428  00089A  0E54               	movlw	84
 11429  00089C  6E0E               	movwf	?_writeEEPROM,c
 11430  00089E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11431  0008A2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11432                           
 11433                           ;main.c: 2030: rv = readEEPROM(0x54);
 11434  0008A6  6A0F               	clrf	?_readEEPROM+1,c
 11435  0008A8  0E54               	movlw	84
 11436  0008AA  6E0E               	movwf	?_readEEPROM,c
 11437  0008AC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11438  0008B0  EFA9  F009         	goto	L19
 11439  0008B4                     l10822:
 11440                           
 11441                           ; BSR set to: 0
 11442                           ;main.c: 2035: writeEEPROM(0x55, val);
 11443  0008B4  6A0F               	clrf	?_writeEEPROM+1,c
 11444  0008B6  0E55               	movlw	85
 11445  0008B8  6E0E               	movwf	?_writeEEPROM,c
 11446  0008BA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11447  0008BE  EC0D  F029         	call	_writeEEPROM	;wreg free
 11448                           
 11449                           ;main.c: 2036: rv = readEEPROM(0x55);
 11450  0008C2  6A0F               	clrf	?_readEEPROM+1,c
 11451  0008C4  0E55               	movlw	85
 11452  0008C6  6E0E               	movwf	?_readEEPROM,c
 11453  0008C8  EC1C  F02A         	call	_readEEPROM	;wreg free
 11454  0008CC  EFA9  F009         	goto	L19
 11455  0008D0                     l10824:
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;main.c: 2041: writeEEPROM(0x56, val);
 11459  0008D0  6A0F               	clrf	?_writeEEPROM+1,c
 11460  0008D2  0E56               	movlw	86
 11461  0008D4  6E0E               	movwf	?_writeEEPROM,c
 11462  0008D6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11463  0008DA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11464                           
 11465                           ;main.c: 2042: rv = readEEPROM(0x56);
 11466  0008DE  6A0F               	clrf	?_readEEPROM+1,c
 11467  0008E0  0E56               	movlw	86
 11468  0008E2  6E0E               	movwf	?_readEEPROM,c
 11469  0008E4  EC1C  F02A         	call	_readEEPROM	;wreg free
 11470  0008E8  EFA9  F009         	goto	L19
 11471  0008EC                     l10826:
 11472                           
 11473                           ; BSR set to: 0
 11474                           ;main.c: 2047: writeEEPROM(0x57, val);
 11475  0008EC  6A0F               	clrf	?_writeEEPROM+1,c
 11476  0008EE  0E57               	movlw	87
 11477  0008F0  6E0E               	movwf	?_writeEEPROM,c
 11478  0008F2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11479  0008F6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11480                           
 11481                           ;main.c: 2048: rv = readEEPROM(0x57);
 11482  0008FA  6A0F               	clrf	?_readEEPROM+1,c
 11483  0008FC  0E57               	movlw	87
 11484  0008FE  6E0E               	movwf	?_readEEPROM,c
 11485  000900  EC1C  F02A         	call	_readEEPROM	;wreg free
 11486  000904  EFA9  F009         	goto	L19
 11487  000908                     l10828:
 11488                           
 11489                           ; BSR set to: 0
 11490                           ;main.c: 2053: writeEEPROM(0x58, val);
 11491  000908  6A0F               	clrf	?_writeEEPROM+1,c
 11492  00090A  0E58               	movlw	88
 11493  00090C  6E0E               	movwf	?_writeEEPROM,c
 11494  00090E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11495  000912  EC0D  F029         	call	_writeEEPROM	;wreg free
 11496                           
 11497                           ;main.c: 2054: rv = readEEPROM(0x58);
 11498  000916  6A0F               	clrf	?_readEEPROM+1,c
 11499  000918  0E58               	movlw	88
 11500  00091A  6E0E               	movwf	?_readEEPROM,c
 11501  00091C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11502  000920  EFA9  F009         	goto	L19
 11503  000924                     l10830:
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;main.c: 2059: writeEEPROM(0x59, val);
 11507  000924  6A0F               	clrf	?_writeEEPROM+1,c
 11508  000926  0E59               	movlw	89
 11509  000928  6E0E               	movwf	?_writeEEPROM,c
 11510  00092A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11511  00092E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11512                           
 11513                           ;main.c: 2060: rv = readEEPROM(0x59);
 11514  000932  6A0F               	clrf	?_readEEPROM+1,c
 11515  000934  0E59               	movlw	89
 11516  000936  6E0E               	movwf	?_readEEPROM,c
 11517  000938  EC1C  F02A         	call	_readEEPROM	;wreg free
 11518  00093C  EFA9  F009         	goto	L19
 11519  000940                     l10832:
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;main.c: 2065: writeEEPROM(0x5A, val);
 11523  000940  6A0F               	clrf	?_writeEEPROM+1,c
 11524  000942  0E5A               	movlw	90
 11525  000944  6E0E               	movwf	?_writeEEPROM,c
 11526  000946  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11527  00094A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11528                           
 11529                           ;main.c: 2066: rv = readEEPROM(0x5A);
 11530  00094E  6A0F               	clrf	?_readEEPROM+1,c
 11531  000950  0E5A               	movlw	90
 11532  000952  6E0E               	movwf	?_readEEPROM,c
 11533  000954  EC1C  F02A         	call	_readEEPROM	;wreg free
 11534  000958  EFA9  F009         	goto	L19
 11535  00095C                     l10834:
 11536                           
 11537                           ; BSR set to: 0
 11538                           ;main.c: 2075: writeEEPROM(0x5B, val);
 11539  00095C  6A0F               	clrf	?_writeEEPROM+1,c
 11540  00095E  0E5B               	movlw	91
 11541  000960  6E0E               	movwf	?_writeEEPROM,c
 11542  000962  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11543  000966  EC0D  F029         	call	_writeEEPROM	;wreg free
 11544                           
 11545                           ;main.c: 2076: rv = readEEPROM(0x5B);
 11546  00096A  6A0F               	clrf	?_readEEPROM+1,c
 11547  00096C  0E5B               	movlw	91
 11548  00096E  6E0E               	movwf	?_readEEPROM,c
 11549  000970  EC1C  F02A         	call	_readEEPROM	;wreg free
 11550  000974  EFA9  F009         	goto	L19
 11551  000978                     l10836:
 11552                           
 11553                           ; BSR set to: 0
 11554                           ;main.c: 2081: writeEEPROM(0x5C, val);
 11555  000978  6A0F               	clrf	?_writeEEPROM+1,c
 11556  00097A  0E5C               	movlw	92
 11557  00097C  6E0E               	movwf	?_writeEEPROM,c
 11558  00097E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11559  000982  EC0D  F029         	call	_writeEEPROM	;wreg free
 11560                           
 11561                           ;main.c: 2082: rv = readEEPROM(0x5C);
 11562  000986  6A0F               	clrf	?_readEEPROM+1,c
 11563  000988  0E5C               	movlw	92
 11564  00098A  6E0E               	movwf	?_readEEPROM,c
 11565  00098C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11566  000990  EFA9  F009         	goto	L19
 11567  000994                     l10838:
 11568                           
 11569                           ; BSR set to: 0
 11570                           ;main.c: 2087: writeEEPROM(0x5D, val);
 11571  000994  6A0F               	clrf	?_writeEEPROM+1,c
 11572  000996  0E5D               	movlw	93
 11573  000998  6E0E               	movwf	?_writeEEPROM,c
 11574  00099A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11575  00099E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11576                           
 11577                           ;main.c: 2088: rv = readEEPROM(0x5D);
 11578  0009A2  6A0F               	clrf	?_readEEPROM+1,c
 11579  0009A4  0E5D               	movlw	93
 11580  0009A6  6E0E               	movwf	?_readEEPROM,c
 11581  0009A8  EC1C  F02A         	call	_readEEPROM	;wreg free
 11582  0009AC  EFA9  F009         	goto	L19
 11583  0009B0                     l10840:
 11584                           
 11585                           ; BSR set to: 0
 11586                           ;main.c: 2093: writeEEPROM(0x5E, val);
 11587  0009B0  6A0F               	clrf	?_writeEEPROM+1,c
 11588  0009B2  0E5E               	movlw	94
 11589  0009B4  6E0E               	movwf	?_writeEEPROM,c
 11590  0009B6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11591  0009BA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11592                           
 11593                           ;main.c: 2094: rv = readEEPROM(0x5E);
 11594  0009BE  6A0F               	clrf	?_readEEPROM+1,c
 11595  0009C0  0E5E               	movlw	94
 11596  0009C2  6E0E               	movwf	?_readEEPROM,c
 11597  0009C4  EC1C  F02A         	call	_readEEPROM	;wreg free
 11598  0009C8  EFA9  F009         	goto	L19
 11599  0009CC                     l10842:
 11600                           
 11601                           ; BSR set to: 0
 11602                           ;main.c: 2099: writeEEPROM(0x5F, val);
 11603  0009CC  6A0F               	clrf	?_writeEEPROM+1,c
 11604  0009CE  0E5F               	movlw	95
 11605  0009D0  6E0E               	movwf	?_writeEEPROM,c
 11606  0009D2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11607  0009D6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11608                           
 11609                           ;main.c: 2100: rv = readEEPROM(0x5F);
 11610  0009DA  6A0F               	clrf	?_readEEPROM+1,c
 11611  0009DC  0E5F               	movlw	95
 11612  0009DE  6E0E               	movwf	?_readEEPROM,c
 11613  0009E0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11614  0009E4  EFA9  F009         	goto	L19
 11615  0009E8                     l10844:
 11616                           
 11617                           ; BSR set to: 0
 11618                           ;main.c: 2105: writeEEPROM(0x60, val);
 11619  0009E8  6A0F               	clrf	?_writeEEPROM+1,c
 11620  0009EA  0E60               	movlw	96
 11621  0009EC  6E0E               	movwf	?_writeEEPROM,c
 11622  0009EE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11623  0009F2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11624                           
 11625                           ;main.c: 2106: rv = readEEPROM(0x60);
 11626  0009F6  6A0F               	clrf	?_readEEPROM+1,c
 11627  0009F8  0E60               	movlw	96
 11628  0009FA  6E0E               	movwf	?_readEEPROM,c
 11629  0009FC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11630  000A00  EFA9  F009         	goto	L19
 11631  000A04                     l10846:
 11632                           
 11633                           ; BSR set to: 0
 11634                           ;main.c: 2111: writeEEPROM(0x61, val);
 11635  000A04  6A0F               	clrf	?_writeEEPROM+1,c
 11636  000A06  0E61               	movlw	97
 11637  000A08  6E0E               	movwf	?_writeEEPROM,c
 11638  000A0A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11639  000A0E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11640                           
 11641                           ;main.c: 2112: rv = readEEPROM(0x61);
 11642  000A12  6A0F               	clrf	?_readEEPROM+1,c
 11643  000A14  0E61               	movlw	97
 11644  000A16  6E0E               	movwf	?_readEEPROM,c
 11645  000A18  EC1C  F02A         	call	_readEEPROM	;wreg free
 11646  000A1C  EFA9  F009         	goto	L19
 11647  000A20                     l10848:
 11648                           
 11649                           ; BSR set to: 0
 11650                           ;main.c: 2117: writeEEPROM(0x62, val);
 11651  000A20  6A0F               	clrf	?_writeEEPROM+1,c
 11652  000A22  0E62               	movlw	98
 11653  000A24  6E0E               	movwf	?_writeEEPROM,c
 11654  000A26  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11655  000A2A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11656                           
 11657                           ;main.c: 2118: rv = readEEPROM(0x62);
 11658  000A2E  6A0F               	clrf	?_readEEPROM+1,c
 11659  000A30  0E62               	movlw	98
 11660  000A32  6E0E               	movwf	?_readEEPROM,c
 11661  000A34  EC1C  F02A         	call	_readEEPROM	;wreg free
 11662  000A38  EFA9  F009         	goto	L19
 11663  000A3C                     l10850:
 11664                           
 11665                           ; BSR set to: 0
 11666                           ;main.c: 2123: writeEEPROM(0x63, val);
 11667  000A3C  6A0F               	clrf	?_writeEEPROM+1,c
 11668  000A3E  0E63               	movlw	99
 11669  000A40  6E0E               	movwf	?_writeEEPROM,c
 11670  000A42  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11671  000A46  EC0D  F029         	call	_writeEEPROM	;wreg free
 11672                           
 11673                           ;main.c: 2124: rv = readEEPROM(0x63);
 11674  000A4A  6A0F               	clrf	?_readEEPROM+1,c
 11675  000A4C  0E63               	movlw	99
 11676  000A4E  6E0E               	movwf	?_readEEPROM,c
 11677  000A50  EC1C  F02A         	call	_readEEPROM	;wreg free
 11678  000A54  EFA9  F009         	goto	L19
 11679  000A58                     l10852:
 11680                           
 11681                           ; BSR set to: 0
 11682                           ;main.c: 2129: writeEEPROM(0x64, val);
 11683  000A58  6A0F               	clrf	?_writeEEPROM+1,c
 11684  000A5A  0E64               	movlw	100
 11685  000A5C  6E0E               	movwf	?_writeEEPROM,c
 11686  000A5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11687  000A62  EC0D  F029         	call	_writeEEPROM	;wreg free
 11688                           
 11689                           ;main.c: 2130: rv = readEEPROM(0x64);
 11690  000A66  6A0F               	clrf	?_readEEPROM+1,c
 11691  000A68  0E64               	movlw	100
 11692  000A6A  6E0E               	movwf	?_readEEPROM,c
 11693  000A6C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11694  000A70  EFA9  F009         	goto	L19
 11695  000A74                     l10854:
 11696                           
 11697                           ; BSR set to: 0
 11698                           ;main.c: 2135: writeEEPROM(0x65, val);
 11699  000A74  6A0F               	clrf	?_writeEEPROM+1,c
 11700  000A76  0E65               	movlw	101
 11701  000A78  6E0E               	movwf	?_writeEEPROM,c
 11702  000A7A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11703  000A7E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11704                           
 11705                           ;main.c: 2136: rv = readEEPROM(0x65);
 11706  000A82  6A0F               	clrf	?_readEEPROM+1,c
 11707  000A84  0E65               	movlw	101
 11708  000A86  6E0E               	movwf	?_readEEPROM,c
 11709  000A88  EC1C  F02A         	call	_readEEPROM	;wreg free
 11710  000A8C  EFA9  F009         	goto	L19
 11711  000A90                     l10856:
 11712                           
 11713                           ; BSR set to: 0
 11714                           ;main.c: 2141: writeEEPROM(0x66, val);
 11715  000A90  6A0F               	clrf	?_writeEEPROM+1,c
 11716  000A92  0E66               	movlw	102
 11717  000A94  6E0E               	movwf	?_writeEEPROM,c
 11718  000A96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11719  000A9A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11720                           
 11721                           ;main.c: 2142: rv = readEEPROM(0x66);
 11722  000A9E  6A0F               	clrf	?_readEEPROM+1,c
 11723  000AA0  0E66               	movlw	102
 11724  000AA2  6E0E               	movwf	?_readEEPROM,c
 11725  000AA4  EC1C  F02A         	call	_readEEPROM	;wreg free
 11726  000AA8  EFA9  F009         	goto	L19
 11727  000AAC                     l10858:
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;main.c: 2151: writeEEPROM(0x67, val);
 11731  000AAC  6A0F               	clrf	?_writeEEPROM+1,c
 11732  000AAE  0E67               	movlw	103
 11733  000AB0  6E0E               	movwf	?_writeEEPROM,c
 11734  000AB2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11735  000AB6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11736                           
 11737                           ;main.c: 2152: rv = readEEPROM(0x67);
 11738  000ABA  6A0F               	clrf	?_readEEPROM+1,c
 11739  000ABC  0E67               	movlw	103
 11740  000ABE  6E0E               	movwf	?_readEEPROM,c
 11741  000AC0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11742  000AC4  EFA9  F009         	goto	L19
 11743  000AC8                     l10860:
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;main.c: 2157: writeEEPROM(0x68, val);
 11747  000AC8  6A0F               	clrf	?_writeEEPROM+1,c
 11748  000ACA  0E68               	movlw	104
 11749  000ACC  6E0E               	movwf	?_writeEEPROM,c
 11750  000ACE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11751  000AD2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11752                           
 11753                           ;main.c: 2158: rv = readEEPROM(0x68);
 11754  000AD6  6A0F               	clrf	?_readEEPROM+1,c
 11755  000AD8  0E68               	movlw	104
 11756  000ADA  6E0E               	movwf	?_readEEPROM,c
 11757  000ADC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11758  000AE0  EFA9  F009         	goto	L19
 11759  000AE4                     l10862:
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;main.c: 2163: writeEEPROM(0x69, val);
 11763  000AE4  6A0F               	clrf	?_writeEEPROM+1,c
 11764  000AE6  0E69               	movlw	105
 11765  000AE8  6E0E               	movwf	?_writeEEPROM,c
 11766  000AEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11767  000AEE  EC0D  F029         	call	_writeEEPROM	;wreg free
 11768                           
 11769                           ;main.c: 2164: rv = readEEPROM(0x69);
 11770  000AF2  6A0F               	clrf	?_readEEPROM+1,c
 11771  000AF4  0E69               	movlw	105
 11772  000AF6  6E0E               	movwf	?_readEEPROM,c
 11773  000AF8  EC1C  F02A         	call	_readEEPROM	;wreg free
 11774  000AFC  EFA9  F009         	goto	L19
 11775  000B00                     l10864:
 11776                           
 11777                           ; BSR set to: 0
 11778                           ;main.c: 2169: writeEEPROM(0x6A, val);
 11779  000B00  6A0F               	clrf	?_writeEEPROM+1,c
 11780  000B02  0E6A               	movlw	106
 11781  000B04  6E0E               	movwf	?_writeEEPROM,c
 11782  000B06  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11783  000B0A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11784                           
 11785                           ;main.c: 2170: rv = readEEPROM(0x6A);
 11786  000B0E  6A0F               	clrf	?_readEEPROM+1,c
 11787  000B10  0E6A               	movlw	106
 11788  000B12  6E0E               	movwf	?_readEEPROM,c
 11789  000B14  EC1C  F02A         	call	_readEEPROM	;wreg free
 11790  000B18  EFA9  F009         	goto	L19
 11791  000B1C                     l10866:
 11792                           
 11793                           ; BSR set to: 0
 11794                           ;main.c: 2175: writeEEPROM(0x6B, val);
 11795  000B1C  6A0F               	clrf	?_writeEEPROM+1,c
 11796  000B1E  0E6B               	movlw	107
 11797  000B20  6E0E               	movwf	?_writeEEPROM,c
 11798  000B22  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11799  000B26  EC0D  F029         	call	_writeEEPROM	;wreg free
 11800                           
 11801                           ;main.c: 2176: rv = readEEPROM(0x6B);
 11802  000B2A  6A0F               	clrf	?_readEEPROM+1,c
 11803  000B2C  0E6B               	movlw	107
 11804  000B2E  6E0E               	movwf	?_readEEPROM,c
 11805  000B30  EC1C  F02A         	call	_readEEPROM	;wreg free
 11806  000B34  EFA9  F009         	goto	L19
 11807  000B38                     l10868:
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;main.c: 2181: writeEEPROM(0x6C, val);
 11811  000B38  6A0F               	clrf	?_writeEEPROM+1,c
 11812  000B3A  0E6C               	movlw	108
 11813  000B3C  6E0E               	movwf	?_writeEEPROM,c
 11814  000B3E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11815  000B42  EC0D  F029         	call	_writeEEPROM	;wreg free
 11816                           
 11817                           ;main.c: 2182: rv = readEEPROM(0x6C);
 11818  000B46  6A0F               	clrf	?_readEEPROM+1,c
 11819  000B48  0E6C               	movlw	108
 11820  000B4A  6E0E               	movwf	?_readEEPROM,c
 11821  000B4C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11822  000B50  EFA9  F009         	goto	L19
 11823  000B54                     l10870:
 11824                           
 11825                           ; BSR set to: 0
 11826                           ;main.c: 2187: writeEEPROM(0x6D, val);
 11827  000B54  6A0F               	clrf	?_writeEEPROM+1,c
 11828  000B56  0E6D               	movlw	109
 11829  000B58  6E0E               	movwf	?_writeEEPROM,c
 11830  000B5A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11831  000B5E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11832                           
 11833                           ;main.c: 2188: rv = readEEPROM(0x6D);
 11834  000B62  6A0F               	clrf	?_readEEPROM+1,c
 11835  000B64  0E6D               	movlw	109
 11836  000B66  6E0E               	movwf	?_readEEPROM,c
 11837  000B68  EC1C  F02A         	call	_readEEPROM	;wreg free
 11838  000B6C  D3F2               	goto	L19
 11839  000B6E                     l10872:
 11840                           
 11841                           ; BSR set to: 0
 11842                           ;main.c: 2193: writeEEPROM(0x6E, val);
 11843  000B6E  6A0F               	clrf	?_writeEEPROM+1,c
 11844  000B70  0E6E               	movlw	110
 11845  000B72  6E0E               	movwf	?_writeEEPROM,c
 11846  000B74  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11847  000B78  EC0D  F029         	call	_writeEEPROM	;wreg free
 11848                           
 11849                           ;main.c: 2194: rv = readEEPROM(0x6E);
 11850  000B7C  6A0F               	clrf	?_readEEPROM+1,c
 11851  000B7E  0E6E               	movlw	110
 11852  000B80  6E0E               	movwf	?_readEEPROM,c
 11853  000B82  EC1C  F02A         	call	_readEEPROM	;wreg free
 11854  000B86  D3E5               	goto	L19
 11855  000B88                     l10874:
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;main.c: 2199: writeEEPROM(0x6F, val);
 11859  000B88  6A0F               	clrf	?_writeEEPROM+1,c
 11860  000B8A  0E6F               	movlw	111
 11861  000B8C  6E0E               	movwf	?_writeEEPROM,c
 11862  000B8E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11863  000B92  EC0D  F029         	call	_writeEEPROM	;wreg free
 11864                           
 11865                           ;main.c: 2200: rv = readEEPROM(0x6F);
 11866  000B96  6A0F               	clrf	?_readEEPROM+1,c
 11867  000B98  0E6F               	movlw	111
 11868  000B9A  6E0E               	movwf	?_readEEPROM,c
 11869  000B9C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11870  000BA0  D3D8               	goto	L19
 11871  000BA2                     l10876:
 11872                           
 11873                           ; BSR set to: 0
 11874                           ;main.c: 2205: writeEEPROM(0x70, val);
 11875  000BA2  6A0F               	clrf	?_writeEEPROM+1,c
 11876  000BA4  0E70               	movlw	112
 11877  000BA6  6E0E               	movwf	?_writeEEPROM,c
 11878  000BA8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11879  000BAC  EC0D  F029         	call	_writeEEPROM	;wreg free
 11880                           
 11881                           ;main.c: 2206: rv = readEEPROM(0x70);
 11882  000BB0  6A0F               	clrf	?_readEEPROM+1,c
 11883  000BB2  0E70               	movlw	112
 11884  000BB4  6E0E               	movwf	?_readEEPROM,c
 11885  000BB6  EC1C  F02A         	call	_readEEPROM	;wreg free
 11886  000BBA  D3CB               	goto	L19
 11887  000BBC                     l10878:
 11888                           
 11889                           ; BSR set to: 0
 11890                           ;main.c: 2211: writeEEPROM(0x71, val);
 11891  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 11892  000BBE  0E71               	movlw	113
 11893  000BC0  6E0E               	movwf	?_writeEEPROM,c
 11894  000BC2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11895  000BC6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11896                           
 11897                           ;main.c: 2212: rv = readEEPROM(0x71);
 11898  000BCA  6A0F               	clrf	?_readEEPROM+1,c
 11899  000BCC  0E71               	movlw	113
 11900  000BCE  6E0E               	movwf	?_readEEPROM,c
 11901  000BD0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11902  000BD4  D3BE               	goto	L19
 11903  000BD6                     l10880:
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;main.c: 2217: writeEEPROM(0x72, val);
 11907  000BD6  6A0F               	clrf	?_writeEEPROM+1,c
 11908  000BD8  0E72               	movlw	114
 11909  000BDA  6E0E               	movwf	?_writeEEPROM,c
 11910  000BDC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11911  000BE0  EC0D  F029         	call	_writeEEPROM	;wreg free
 11912                           
 11913                           ;main.c: 2218: rv = readEEPROM(0x72);
 11914  000BE4  6A0F               	clrf	?_readEEPROM+1,c
 11915  000BE6  0E72               	movlw	114
 11916  000BE8  6E0E               	movwf	?_readEEPROM,c
 11917  000BEA  EC1C  F02A         	call	_readEEPROM	;wreg free
 11918  000BEE  D3B1               	goto	L19
 11919  000BF0                     l10882:
 11920                           
 11921                           ; BSR set to: 0
 11922                           ;main.c: 2227: writeEEPROM(0x73, val);
 11923  000BF0  6A0F               	clrf	?_writeEEPROM+1,c
 11924  000BF2  0E73               	movlw	115
 11925  000BF4  6E0E               	movwf	?_writeEEPROM,c
 11926  000BF6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11927  000BFA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11928                           
 11929                           ;main.c: 2228: rv = readEEPROM(0x73);
 11930  000BFE  6A0F               	clrf	?_readEEPROM+1,c
 11931  000C00  0E73               	movlw	115
 11932  000C02  6E0E               	movwf	?_readEEPROM,c
 11933  000C04  EC1C  F02A         	call	_readEEPROM	;wreg free
 11934  000C08  D3A4               	goto	L19
 11935  000C0A                     l10884:
 11936                           
 11937                           ; BSR set to: 0
 11938                           ;main.c: 2233: writeEEPROM(0x74, val);
 11939  000C0A  6A0F               	clrf	?_writeEEPROM+1,c
 11940  000C0C  0E74               	movlw	116
 11941  000C0E  6E0E               	movwf	?_writeEEPROM,c
 11942  000C10  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11943  000C14  EC0D  F029         	call	_writeEEPROM	;wreg free
 11944                           
 11945                           ;main.c: 2234: rv = readEEPROM(0x74);
 11946  000C18  6A0F               	clrf	?_readEEPROM+1,c
 11947  000C1A  0E74               	movlw	116
 11948  000C1C  6E0E               	movwf	?_readEEPROM,c
 11949  000C1E  EC1C  F02A         	call	_readEEPROM	;wreg free
 11950  000C22  D397               	goto	L19
 11951  000C24                     l10886:
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;main.c: 2239: writeEEPROM(0x75, val);
 11955  000C24  6A0F               	clrf	?_writeEEPROM+1,c
 11956  000C26  0E75               	movlw	117
 11957  000C28  6E0E               	movwf	?_writeEEPROM,c
 11958  000C2A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11959  000C2E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11960                           
 11961                           ;main.c: 2240: rv = readEEPROM(0x75);
 11962  000C32  6A0F               	clrf	?_readEEPROM+1,c
 11963  000C34  0E75               	movlw	117
 11964  000C36  6E0E               	movwf	?_readEEPROM,c
 11965  000C38  EC1C  F02A         	call	_readEEPROM	;wreg free
 11966  000C3C  D38A               	goto	L19
 11967  000C3E                     l10888:
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;main.c: 2245: writeEEPROM(0x76, val);
 11971  000C3E  6A0F               	clrf	?_writeEEPROM+1,c
 11972  000C40  0E76               	movlw	118
 11973  000C42  6E0E               	movwf	?_writeEEPROM,c
 11974  000C44  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11975  000C48  EC0D  F029         	call	_writeEEPROM	;wreg free
 11976                           
 11977                           ;main.c: 2246: rv = readEEPROM(0x76);
 11978  000C4C  6A0F               	clrf	?_readEEPROM+1,c
 11979  000C4E  0E76               	movlw	118
 11980  000C50  6E0E               	movwf	?_readEEPROM,c
 11981  000C52  EC1C  F02A         	call	_readEEPROM	;wreg free
 11982  000C56  D37D               	goto	L19
 11983  000C58                     l10890:
 11984                           
 11985                           ; BSR set to: 0
 11986                           ;main.c: 2251: writeEEPROM(0x77, val);
 11987  000C58  6A0F               	clrf	?_writeEEPROM+1,c
 11988  000C5A  0E77               	movlw	119
 11989  000C5C  6E0E               	movwf	?_writeEEPROM,c
 11990  000C5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11991  000C62  EC0D  F029         	call	_writeEEPROM	;wreg free
 11992                           
 11993                           ;main.c: 2252: rv = readEEPROM(0x77);
 11994  000C66  6A0F               	clrf	?_readEEPROM+1,c
 11995  000C68  0E77               	movlw	119
 11996  000C6A  6E0E               	movwf	?_readEEPROM,c
 11997  000C6C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11998  000C70  D370               	goto	L19
 11999  000C72                     l10892:
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;main.c: 2257: writeEEPROM(0x78, val);
 12003  000C72  6A0F               	clrf	?_writeEEPROM+1,c
 12004  000C74  0E78               	movlw	120
 12005  000C76  6E0E               	movwf	?_writeEEPROM,c
 12006  000C78  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12007  000C7C  EC0D  F029         	call	_writeEEPROM	;wreg free
 12008                           
 12009                           ;main.c: 2258: rv = readEEPROM(0x78);
 12010  000C80  6A0F               	clrf	?_readEEPROM+1,c
 12011  000C82  0E78               	movlw	120
 12012  000C84  6E0E               	movwf	?_readEEPROM,c
 12013  000C86  EC1C  F02A         	call	_readEEPROM	;wreg free
 12014  000C8A  D363               	goto	L19
 12015  000C8C                     l10894:
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;main.c: 2263: writeEEPROM(0x79, val);
 12019  000C8C  6A0F               	clrf	?_writeEEPROM+1,c
 12020  000C8E  0E79               	movlw	121
 12021  000C90  6E0E               	movwf	?_writeEEPROM,c
 12022  000C92  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12023  000C96  EC0D  F029         	call	_writeEEPROM	;wreg free
 12024                           
 12025                           ;main.c: 2264: rv = readEEPROM(0x79);
 12026  000C9A  6A0F               	clrf	?_readEEPROM+1,c
 12027  000C9C  0E79               	movlw	121
 12028  000C9E  6E0E               	movwf	?_readEEPROM,c
 12029  000CA0  EC1C  F02A         	call	_readEEPROM	;wreg free
 12030  000CA4  D356               	goto	L19
 12031  000CA6                     l10896:
 12032                           
 12033                           ; BSR set to: 0
 12034                           ;main.c: 2269: writeEEPROM(0x7A, val);
 12035  000CA6  6A0F               	clrf	?_writeEEPROM+1,c
 12036  000CA8  0E7A               	movlw	122
 12037  000CAA  6E0E               	movwf	?_writeEEPROM,c
 12038  000CAC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12039  000CB0  EC0D  F029         	call	_writeEEPROM	;wreg free
 12040                           
 12041                           ;main.c: 2270: rv = readEEPROM(0x7A);
 12042  000CB4  6A0F               	clrf	?_readEEPROM+1,c
 12043  000CB6  0E7A               	movlw	122
 12044  000CB8  6E0E               	movwf	?_readEEPROM,c
 12045  000CBA  EC1C  F02A         	call	_readEEPROM	;wreg free
 12046  000CBE  D349               	goto	L19
 12047  000CC0                     l10898:
 12048                           
 12049                           ; BSR set to: 0
 12050                           ;main.c: 2275: writeEEPROM(0x7B, val);
 12051  000CC0  6A0F               	clrf	?_writeEEPROM+1,c
 12052  000CC2  0E7B               	movlw	123
 12053  000CC4  6E0E               	movwf	?_writeEEPROM,c
 12054  000CC6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12055  000CCA  EC0D  F029         	call	_writeEEPROM	;wreg free
 12056                           
 12057                           ;main.c: 2276: rv = readEEPROM(0x7B);
 12058  000CCE  6A0F               	clrf	?_readEEPROM+1,c
 12059  000CD0  0E7B               	movlw	123
 12060  000CD2  6E0E               	movwf	?_readEEPROM,c
 12061  000CD4  EC1C  F02A         	call	_readEEPROM	;wreg free
 12062  000CD8  D33C               	goto	L19
 12063  000CDA                     l10900:
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;main.c: 2281: writeEEPROM(0x7C, val);
 12067  000CDA  6A0F               	clrf	?_writeEEPROM+1,c
 12068  000CDC  0E7C               	movlw	124
 12069  000CDE  6E0E               	movwf	?_writeEEPROM,c
 12070  000CE0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12071  000CE4  EC0D  F029         	call	_writeEEPROM	;wreg free
 12072                           
 12073                           ;main.c: 2282: rv = readEEPROM(0x7C);
 12074  000CE8  6A0F               	clrf	?_readEEPROM+1,c
 12075  000CEA  0E7C               	movlw	124
 12076  000CEC  6E0E               	movwf	?_readEEPROM,c
 12077  000CEE  EC1C  F02A         	call	_readEEPROM	;wreg free
 12078  000CF2  D32F               	goto	L19
 12079  000CF4                     l10902:
 12080                           
 12081                           ; BSR set to: 0
 12082                           ;main.c: 2287: writeEEPROM(0x7D, val);
 12083  000CF4  6A0F               	clrf	?_writeEEPROM+1,c
 12084  000CF6  0E7D               	movlw	125
 12085  000CF8  6E0E               	movwf	?_writeEEPROM,c
 12086  000CFA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12087  000CFE  EC0D  F029         	call	_writeEEPROM	;wreg free
 12088                           
 12089                           ;main.c: 2288: rv = readEEPROM(0x7D);
 12090  000D02  6A0F               	clrf	?_readEEPROM+1,c
 12091  000D04  0E7D               	movlw	125
 12092  000D06  6E0E               	movwf	?_readEEPROM,c
 12093  000D08  EC1C  F02A         	call	_readEEPROM	;wreg free
 12094  000D0C  D322               	goto	L19
 12095  000D0E                     l10904:
 12096                           
 12097                           ; BSR set to: 0
 12098                           ;main.c: 2293: writeEEPROM(0x7E, val);
 12099  000D0E  6A0F               	clrf	?_writeEEPROM+1,c
 12100  000D10  0E7E               	movlw	126
 12101  000D12  6E0E               	movwf	?_writeEEPROM,c
 12102  000D14  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12103  000D18  EC0D  F029         	call	_writeEEPROM	;wreg free
 12104                           
 12105                           ;main.c: 2294: rv = readEEPROM(0x7E);
 12106  000D1C  6A0F               	clrf	?_readEEPROM+1,c
 12107  000D1E  0E7E               	movlw	126
 12108  000D20  6E0E               	movwf	?_readEEPROM,c
 12109  000D22  EC1C  F02A         	call	_readEEPROM	;wreg free
 12110  000D26  D315               	goto	L19
 12111  000D28                     l10906:
 12112                           
 12113                           ; BSR set to: 0
 12114                           ;main.c: 2303: writeEEPROM(0x7F, val );
 12115  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 12116  000D2A  0E7F               	movlw	127
 12117  000D2C  6E0E               	movwf	?_writeEEPROM,c
 12118  000D2E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12119  000D32  EC0D  F029         	call	_writeEEPROM	;wreg free
 12120                           
 12121                           ;main.c: 2304: rv = readEEPROM(0x7F);
 12122  000D36  6A0F               	clrf	?_readEEPROM+1,c
 12123  000D38  0E7F               	movlw	127
 12124  000D3A  6E0E               	movwf	?_readEEPROM,c
 12125  000D3C  EC1C  F02A         	call	_readEEPROM	;wreg free
 12126  000D40  D308               	goto	L19
 12127  000D42                     l10908:
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;main.c: 2309: writeEEPROM(0x80, val );
 12131  000D42  6A0F               	clrf	?_writeEEPROM+1,c
 12132  000D44  0E80               	movlw	128
 12133  000D46  6E0E               	movwf	?_writeEEPROM,c
 12134  000D48  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12135  000D4C  EC0D  F029         	call	_writeEEPROM	;wreg free
 12136                           
 12137                           ;main.c: 2310: rv = readEEPROM(0x80);
 12138  000D50  6A0F               	clrf	?_readEEPROM+1,c
 12139  000D52  0E80               	movlw	128
 12140  000D54  6E0E               	movwf	?_readEEPROM,c
 12141  000D56  EC1C  F02A         	call	_readEEPROM	;wreg free
 12142  000D5A  D2FB               	goto	L19
 12143  000D5C                     l10910:
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;main.c: 2315: writeEEPROM(0x81, val );
 12147  000D5C  6A0F               	clrf	?_writeEEPROM+1,c
 12148  000D5E  0E81               	movlw	129
 12149  000D60  6E0E               	movwf	?_writeEEPROM,c
 12150  000D62  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12151  000D66  EC0D  F029         	call	_writeEEPROM	;wreg free
 12152                           
 12153                           ;main.c: 2316: rv = readEEPROM(0x81);
 12154  000D6A  6A0F               	clrf	?_readEEPROM+1,c
 12155  000D6C  0E81               	movlw	129
 12156  000D6E  6E0E               	movwf	?_readEEPROM,c
 12157  000D70  EC1C  F02A         	call	_readEEPROM	;wreg free
 12158  000D74  D2EE               	goto	L19
 12159  000D76                     l10912:
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;main.c: 2321: writeEEPROM(0x82, val );
 12163  000D76  6A0F               	clrf	?_writeEEPROM+1,c
 12164  000D78  0E82               	movlw	130
 12165  000D7A  6E0E               	movwf	?_writeEEPROM,c
 12166  000D7C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12167  000D80  EC0D  F029         	call	_writeEEPROM	;wreg free
 12168                           
 12169                           ;main.c: 2322: rv = readEEPROM(0x82);
 12170  000D84  6A0F               	clrf	?_readEEPROM+1,c
 12171  000D86  0E82               	movlw	130
 12172  000D88  6E0E               	movwf	?_readEEPROM,c
 12173  000D8A  EC1C  F02A         	call	_readEEPROM	;wreg free
 12174  000D8E  D2E1               	goto	L19
 12175  000D90                     l10914:
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;main.c: 2327: writeEEPROM(0x83, val );
 12179  000D90  6A0F               	clrf	?_writeEEPROM+1,c
 12180  000D92  0E83               	movlw	131
 12181  000D94  6E0E               	movwf	?_writeEEPROM,c
 12182  000D96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12183  000D9A  EC0D  F029         	call	_writeEEPROM	;wreg free
 12184                           
 12185                           ;main.c: 2328: rv = readEEPROM(0x83);
 12186  000D9E  6A0F               	clrf	?_readEEPROM+1,c
 12187  000DA0  0E83               	movlw	131
 12188  000DA2  6E0E               	movwf	?_readEEPROM,c
 12189  000DA4  EC1C  F02A         	call	_readEEPROM	;wreg free
 12190  000DA8  D2D4               	goto	L19
 12191  000DAA                     l10916:
 12192                           
 12193                           ; BSR set to: 0
 12194                           ;main.c: 2333: writeEEPROM(0x84, val );
 12195  000DAA  6A0F               	clrf	?_writeEEPROM+1,c
 12196  000DAC  0E84               	movlw	132
 12197  000DAE  6E0E               	movwf	?_writeEEPROM,c
 12198  000DB0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12199  000DB4  EC0D  F029         	call	_writeEEPROM	;wreg free
 12200                           
 12201                           ;main.c: 2334: rv = readEEPROM(0x84);
 12202  000DB8  6A0F               	clrf	?_readEEPROM+1,c
 12203  000DBA  0E84               	movlw	132
 12204  000DBC  6E0E               	movwf	?_readEEPROM,c
 12205  000DBE  EC1C  F02A         	call	_readEEPROM	;wreg free
 12206  000DC2  D2C7               	goto	L19
 12207  000DC4                     l10918:
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;main.c: 2339: writeEEPROM(0x85, val );
 12211  000DC4  6A0F               	clrf	?_writeEEPROM+1,c
 12212  000DC6  0E85               	movlw	133
 12213  000DC8  6E0E               	movwf	?_writeEEPROM,c
 12214  000DCA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12215  000DCE  EC0D  F029         	call	_writeEEPROM	;wreg free
 12216                           
 12217                           ;main.c: 2340: rv = readEEPROM(0x85);
 12218  000DD2  6A0F               	clrf	?_readEEPROM+1,c
 12219  000DD4  0E85               	movlw	133
 12220  000DD6  6E0E               	movwf	?_readEEPROM,c
 12221  000DD8  EC1C  F02A         	call	_readEEPROM	;wreg free
 12222  000DDC  D2BA               	goto	L19
 12223  000DDE                     l10920:
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;main.c: 2345: writeEEPROM(0x86, val );
 12227  000DDE  6A0F               	clrf	?_writeEEPROM+1,c
 12228  000DE0  0E86               	movlw	134
 12229  000DE2  6E0E               	movwf	?_writeEEPROM,c
 12230  000DE4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12231  000DE8  EC0D  F029         	call	_writeEEPROM	;wreg free
 12232                           
 12233                           ;main.c: 2346: rv = readEEPROM(0x86);
 12234  000DEC  6A0F               	clrf	?_readEEPROM+1,c
 12235  000DEE  0E86               	movlw	134
 12236  000DF0  6E0E               	movwf	?_readEEPROM,c
 12237  000DF2  EC1C  F02A         	call	_readEEPROM	;wreg free
 12238  000DF6  D2AD               	goto	L19
 12239  000DF8                     l10922:
 12240                           
 12241                           ; BSR set to: 0
 12242                           ;main.c: 2351: writeEEPROM(0x87, val );
 12243  000DF8  6A0F               	clrf	?_writeEEPROM+1,c
 12244  000DFA  0E87               	movlw	135
 12245  000DFC  6E0E               	movwf	?_writeEEPROM,c
 12246  000DFE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12247  000E02  EC0D  F029         	call	_writeEEPROM	;wreg free
 12248                           
 12249                           ;main.c: 2352: rv = readEEPROM(0x87);
 12250  000E06  6A0F               	clrf	?_readEEPROM+1,c
 12251  000E08  0E87               	movlw	135
 12252  000E0A  6E0E               	movwf	?_readEEPROM,c
 12253  000E0C  EC1C  F02A         	call	_readEEPROM	;wreg free
 12254  000E10  D2A0               	goto	L19
 12255  000E12                     l10924:
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;main.c: 2357: writeEEPROM(0x88, val );
 12259  000E12  6A0F               	clrf	?_writeEEPROM+1,c
 12260  000E14  0E88               	movlw	136
 12261  000E16  6E0E               	movwf	?_writeEEPROM,c
 12262  000E18  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12263  000E1C  EC0D  F029         	call	_writeEEPROM	;wreg free
 12264                           
 12265                           ;main.c: 2358: rv = readEEPROM(0x88);
 12266  000E20  6A0F               	clrf	?_readEEPROM+1,c
 12267  000E22  0E88               	movlw	136
 12268  000E24  6E0E               	movwf	?_readEEPROM,c
 12269  000E26  EC1C  F02A         	call	_readEEPROM	;wreg free
 12270  000E2A  D293               	goto	L19
 12271  000E2C                     l10926:
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;main.c: 2363: writeEEPROM(0x89, val );
 12275  000E2C  6A0F               	clrf	?_writeEEPROM+1,c
 12276  000E2E  0E89               	movlw	137
 12277  000E30  6E0E               	movwf	?_writeEEPROM,c
 12278  000E32  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12279  000E36  EC0D  F029         	call	_writeEEPROM	;wreg free
 12280                           
 12281                           ;main.c: 2364: rv = readEEPROM(0x89);
 12282  000E3A  6A0F               	clrf	?_readEEPROM+1,c
 12283  000E3C  0E89               	movlw	137
 12284  000E3E  6E0E               	movwf	?_readEEPROM,c
 12285  000E40  EC1C  F02A         	call	_readEEPROM	;wreg free
 12286  000E44  D286               	goto	L19
 12287  000E46                     l10928:
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;main.c: 2369: writeEEPROM(0x8A, val );
 12291  000E46  6A0F               	clrf	?_writeEEPROM+1,c
 12292  000E48  0E8A               	movlw	138
 12293  000E4A  6E0E               	movwf	?_writeEEPROM,c
 12294  000E4C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12295  000E50  EC0D  F029         	call	_writeEEPROM	;wreg free
 12296                           
 12297                           ;main.c: 2370: rv = readEEPROM(0x8A);
 12298  000E54  6A0F               	clrf	?_readEEPROM+1,c
 12299  000E56  0E8A               	movlw	138
 12300  000E58  6E0E               	movwf	?_readEEPROM,c
 12301  000E5A  EC1C  F02A         	call	_readEEPROM	;wreg free
 12302  000E5E  D279               	goto	L19
 12303  000E60                     l10930:
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;main.c: 2379: writeEEPROM(0x8B, val );
 12307  000E60  6A0F               	clrf	?_writeEEPROM+1,c
 12308  000E62  0E8B               	movlw	139
 12309  000E64  6E0E               	movwf	?_writeEEPROM,c
 12310  000E66  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12311  000E6A  EC0D  F029         	call	_writeEEPROM	;wreg free
 12312                           
 12313                           ;main.c: 2380: rv = readEEPROM(0x8B);
 12314  000E6E  6A0F               	clrf	?_readEEPROM+1,c
 12315  000E70  0E8B               	movlw	139
 12316  000E72  6E0E               	movwf	?_readEEPROM,c
 12317  000E74  EC1C  F02A         	call	_readEEPROM	;wreg free
 12318  000E78  D26C               	goto	L19
 12319  000E7A                     l10932:
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;main.c: 2385: writeEEPROM(0x8C, val );
 12323  000E7A  6A0F               	clrf	?_writeEEPROM+1,c
 12324  000E7C  0E8C               	movlw	140
 12325  000E7E  6E0E               	movwf	?_writeEEPROM,c
 12326  000E80  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12327  000E84  EC0D  F029         	call	_writeEEPROM	;wreg free
 12328                           
 12329                           ;main.c: 2386: rv = readEEPROM(0x8C);
 12330  000E88  6A0F               	clrf	?_readEEPROM+1,c
 12331  000E8A  0E8C               	movlw	140
 12332  000E8C  6E0E               	movwf	?_readEEPROM,c
 12333  000E8E  EC1C  F02A         	call	_readEEPROM	;wreg free
 12334  000E92  D25F               	goto	L19
 12335  000E94                     l10934:
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;main.c: 2391: writeEEPROM(0x8D, val );
 12339  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 12340  000E96  0E8D               	movlw	141
 12341  000E98  6E0E               	movwf	?_writeEEPROM,c
 12342  000E9A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12343  000E9E  EC0D  F029         	call	_writeEEPROM	;wreg free
 12344                           
 12345                           ;main.c: 2392: rv = readEEPROM(0x8D);
 12346  000EA2  6A0F               	clrf	?_readEEPROM+1,c
 12347  000EA4  0E8D               	movlw	141
 12348  000EA6  6E0E               	movwf	?_readEEPROM,c
 12349  000EA8  EC1C  F02A         	call	_readEEPROM	;wreg free
 12350  000EAC  D252               	goto	L19
 12351  000EAE                     l10936:
 12352                           
 12353                           ; BSR set to: 0
 12354                           ;main.c: 2397: writeEEPROM(0x8E, val );
 12355  000EAE  6A0F               	clrf	?_writeEEPROM+1,c
 12356  000EB0  0E8E               	movlw	142
 12357  000EB2  6E0E               	movwf	?_writeEEPROM,c
 12358  000EB4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12359  000EB8  EC0D  F029         	call	_writeEEPROM	;wreg free
 12360                           
 12361                           ;main.c: 2398: rv = readEEPROM(0x8E);
 12362  000EBC  6A0F               	clrf	?_readEEPROM+1,c
 12363  000EBE  0E8E               	movlw	142
 12364  000EC0  6E0E               	movwf	?_readEEPROM,c
 12365  000EC2  EC1C  F02A         	call	_readEEPROM	;wreg free
 12366  000EC6  D245               	goto	L19
 12367  000EC8                     l10938:
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;main.c: 2403: writeEEPROM(0x8F, val );
 12371  000EC8  6A0F               	clrf	?_writeEEPROM+1,c
 12372  000ECA  0E8F               	movlw	143
 12373  000ECC  6E0E               	movwf	?_writeEEPROM,c
 12374  000ECE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12375  000ED2  EC0D  F029         	call	_writeEEPROM	;wreg free
 12376                           
 12377                           ;main.c: 2404: rv = readEEPROM(0x8F);
 12378  000ED6  6A0F               	clrf	?_readEEPROM+1,c
 12379  000ED8  0E8F               	movlw	143
 12380  000EDA  6E0E               	movwf	?_readEEPROM,c
 12381  000EDC  EC1C  F02A         	call	_readEEPROM	;wreg free
 12382  000EE0  D238               	goto	L19
 12383  000EE2                     l10940:
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;main.c: 2409: writeEEPROM(0x90, val );
 12387  000EE2  6A0F               	clrf	?_writeEEPROM+1,c
 12388  000EE4  0E90               	movlw	144
 12389  000EE6  6E0E               	movwf	?_writeEEPROM,c
 12390  000EE8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12391  000EEC  EC0D  F029         	call	_writeEEPROM	;wreg free
 12392                           
 12393                           ;main.c: 2410: rv = readEEPROM(0x90);
 12394  000EF0  6A0F               	clrf	?_readEEPROM+1,c
 12395  000EF2  0E90               	movlw	144
 12396  000EF4  6E0E               	movwf	?_readEEPROM,c
 12397  000EF6  EC1C  F02A         	call	_readEEPROM	;wreg free
 12398  000EFA  D22B               	goto	L19
 12399  000EFC                     l10942:
 12400                           
 12401                           ; BSR set to: 0
 12402                           ;main.c: 2415: writeEEPROM(0x91, val );
 12403  000EFC  6A0F               	clrf	?_writeEEPROM+1,c
 12404  000EFE  0E91               	movlw	145
 12405  000F00  6E0E               	movwf	?_writeEEPROM,c
 12406  000F02  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12407  000F06  EC0D  F029         	call	_writeEEPROM	;wreg free
 12408                           
 12409                           ;main.c: 2416: rv = readEEPROM(0x91);
 12410  000F0A  6A0F               	clrf	?_readEEPROM+1,c
 12411  000F0C  0E91               	movlw	145
 12412  000F0E  6E0E               	movwf	?_readEEPROM,c
 12413  000F10  EC1C  F02A         	call	_readEEPROM	;wreg free
 12414  000F14  D21E               	goto	L19
 12415  000F16                     l10944:
 12416                           
 12417                           ; BSR set to: 0
 12418                           ;main.c: 2421: writeEEPROM(0x92, val );
 12419  000F16  6A0F               	clrf	?_writeEEPROM+1,c
 12420  000F18  0E92               	movlw	146
 12421  000F1A  6E0E               	movwf	?_writeEEPROM,c
 12422  000F1C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12423  000F20  EC0D  F029         	call	_writeEEPROM	;wreg free
 12424                           
 12425                           ;main.c: 2422: rv = readEEPROM(0x92);
 12426  000F24  6A0F               	clrf	?_readEEPROM+1,c
 12427  000F26  0E92               	movlw	146
 12428  000F28  6E0E               	movwf	?_readEEPROM,c
 12429  000F2A  EC1C  F02A         	call	_readEEPROM	;wreg free
 12430  000F2E  D211               	goto	L19
 12431  000F30                     l10946:
 12432                           
 12433                           ; BSR set to: 0
 12434                           ;main.c: 2427: writeEEPROM(0x93, val );
 12435  000F30  6A0F               	clrf	?_writeEEPROM+1,c
 12436  000F32  0E93               	movlw	147
 12437  000F34  6E0E               	movwf	?_writeEEPROM,c
 12438  000F36  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12439  000F3A  EC0D  F029         	call	_writeEEPROM	;wreg free
 12440                           
 12441                           ;main.c: 2428: rv = readEEPROM(0x93);
 12442  000F3E  6A0F               	clrf	?_readEEPROM+1,c
 12443  000F40  0E93               	movlw	147
 12444  000F42  6E0E               	movwf	?_readEEPROM,c
 12445  000F44  EC1C  F02A         	call	_readEEPROM	;wreg free
 12446  000F48  D204               	goto	L19
 12447  000F4A                     l10948:
 12448                           
 12449                           ; BSR set to: 0
 12450                           ;main.c: 2433: writeEEPROM(0x94, val );
 12451  000F4A  6A0F               	clrf	?_writeEEPROM+1,c
 12452  000F4C  0E94               	movlw	148
 12453  000F4E  6E0E               	movwf	?_writeEEPROM,c
 12454  000F50  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12455  000F54  EC0D  F029         	call	_writeEEPROM	;wreg free
 12456                           
 12457                           ;main.c: 2434: rv = readEEPROM(0x94);
 12458  000F58  6A0F               	clrf	?_readEEPROM+1,c
 12459  000F5A  0E94               	movlw	148
 12460  000F5C  6E0E               	movwf	?_readEEPROM,c
 12461  000F5E  EC1C  F02A         	call	_readEEPROM	;wreg free
 12462  000F62  D1F7               	goto	L19
 12463  000F64                     l10950:
 12464                           
 12465                           ; BSR set to: 0
 12466                           ;main.c: 2439: writeEEPROM(0x95, val );
 12467  000F64  6A0F               	clrf	?_writeEEPROM+1,c
 12468  000F66  0E95               	movlw	149
 12469  000F68  6E0E               	movwf	?_writeEEPROM,c
 12470  000F6A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12471  000F6E  EC0D  F029         	call	_writeEEPROM	;wreg free
 12472                           
 12473                           ;main.c: 2440: rv = readEEPROM(0x95);
 12474  000F72  6A0F               	clrf	?_readEEPROM+1,c
 12475  000F74  0E95               	movlw	149
 12476  000F76  6E0E               	movwf	?_readEEPROM,c
 12477  000F78  EC1C  F02A         	call	_readEEPROM	;wreg free
 12478  000F7C  D1EA               	goto	L19
 12479  000F7E                     l10952:
 12480                           
 12481                           ; BSR set to: 0
 12482                           ;main.c: 2445: writeEEPROM(0x96, val );
 12483  000F7E  6A0F               	clrf	?_writeEEPROM+1,c
 12484  000F80  0E96               	movlw	150
 12485  000F82  6E0E               	movwf	?_writeEEPROM,c
 12486  000F84  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12487  000F88  EC0D  F029         	call	_writeEEPROM	;wreg free
 12488                           
 12489                           ;main.c: 2446: rv = readEEPROM(0x96);
 12490  000F8C  6A0F               	clrf	?_readEEPROM+1,c
 12491  000F8E  0E96               	movlw	150
 12492  000F90  6E0E               	movwf	?_readEEPROM,c
 12493  000F92  EC1C  F02A         	call	_readEEPROM	;wreg free
 12494  000F96  D1DD               	goto	L19
 12495  000F98                     l10954:
 12496                           
 12497                           ; BSR set to: 0
 12498                           ;main.c: 2455: writeEEPROM(0x97, val);
 12499  000F98  6A0F               	clrf	?_writeEEPROM+1,c
 12500  000F9A  0E97               	movlw	151
 12501  000F9C  6E0E               	movwf	?_writeEEPROM,c
 12502  000F9E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12503  000FA2  EC0D  F029         	call	_writeEEPROM	;wreg free
 12504                           
 12505                           ;main.c: 2456: rv = readEEPROM(0x97);
 12506  000FA6  6A0F               	clrf	?_readEEPROM+1,c
 12507  000FA8  0E97               	movlw	151
 12508  000FAA  6E0E               	movwf	?_readEEPROM,c
 12509  000FAC  EC1C  F02A         	call	_readEEPROM	;wreg free
 12510  000FB0  D1D0               	goto	L19
 12511  000FB2                     l10956:
 12512                           
 12513                           ; BSR set to: 0
 12514                           ;main.c: 2461: writeEEPROM(0x98, val);
 12515  000FB2  6A0F               	clrf	?_writeEEPROM+1,c
 12516  000FB4  0E98               	movlw	152
 12517  000FB6  6E0E               	movwf	?_writeEEPROM,c
 12518  000FB8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12519  000FBC  EC0D  F029         	call	_writeEEPROM	;wreg free
 12520                           
 12521                           ;main.c: 2462: rv = readEEPROM(0x98);
 12522  000FC0  6A0F               	clrf	?_readEEPROM+1,c
 12523  000FC2  0E98               	movlw	152
 12524  000FC4  6E0E               	movwf	?_readEEPROM,c
 12525  000FC6  EC1C  F02A         	call	_readEEPROM	;wreg free
 12526  000FCA  D1C3               	goto	L19
 12527  000FCC                     l10958:
 12528                           
 12529                           ; BSR set to: 0
 12530                           ;main.c: 2467: writeEEPROM(0x99, val);
 12531  000FCC  6A0F               	clrf	?_writeEEPROM+1,c
 12532  000FCE  0E99               	movlw	153
 12533  000FD0  6E0E               	movwf	?_writeEEPROM,c
 12534  000FD2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12535  000FD6  EC0D  F029         	call	_writeEEPROM	;wreg free
 12536  000FDA  6A0F               	clrf	?_readEEPROM+1,c
 12537  000FDC  0E99               	movlw	153
 12538  000FDE  6E0E               	movwf	?_readEEPROM,c
 12539  000FE0  EC1C  F02A         	call	_readEEPROM	;wreg free
 12540  000FE4                     l519:
 12541                           
 12542                           ;main.c: 2472: writeEEPROM(0x9A, val);
 12543  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 12544  000FE6  0E9A               	movlw	154
 12545  000FE8  6E0E               	movwf	?_writeEEPROM,c
 12546  000FEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12547  000FEE  EC0D  F029         	call	_writeEEPROM	;wreg free
 12548                           
 12549                           ;main.c: 2473: rv = readEEPROM(0x9A);
 12550  000FF2  6A0F               	clrf	?_readEEPROM+1,c
 12551  000FF4  0E9A               	movlw	154
 12552  000FF6  6E0E               	movwf	?_readEEPROM,c
 12553  000FF8  EC1C  F02A         	call	_readEEPROM	;wreg free
 12554  000FFC  D1AA               	goto	L19
 12555  000FFE                     l10960:
 12556                           
 12557                           ; BSR set to: 0
 12558                           ;main.c: 2478: writeEEPROM(0x9B, val);
 12559  000FFE  6A0F               	clrf	?_writeEEPROM+1,c
 12560  001000  0E9B               	movlw	155
 12561  001002  6E0E               	movwf	?_writeEEPROM,c
 12562  001004  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12563  001008  EC0D  F029         	call	_writeEEPROM	;wreg free
 12564                           
 12565                           ;main.c: 2479: rv = readEEPROM(0x9B);
 12566  00100C  6A0F               	clrf	?_readEEPROM+1,c
 12567  00100E  0E9B               	movlw	155
 12568  001010  6E0E               	movwf	?_readEEPROM,c
 12569  001012  EC1C  F02A         	call	_readEEPROM	;wreg free
 12570  001016  D19D               	goto	L19
 12571  001018                     l10962:
 12572                           
 12573                           ; BSR set to: 0
 12574                           ;main.c: 2484: writeEEPROM(0x9C, val);
 12575  001018  6A0F               	clrf	?_writeEEPROM+1,c
 12576  00101A  0E9C               	movlw	156
 12577  00101C  6E0E               	movwf	?_writeEEPROM,c
 12578  00101E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12579  001022  EC0D  F029         	call	_writeEEPROM	;wreg free
 12580                           
 12581                           ;main.c: 2485: rv = readEEPROM(0x9C);
 12582  001026  6A0F               	clrf	?_readEEPROM+1,c
 12583  001028  0E9C               	movlw	156
 12584  00102A  6E0E               	movwf	?_readEEPROM,c
 12585  00102C  EC1C  F02A         	call	_readEEPROM	;wreg free
 12586  001030  D190               	goto	L19
 12587  001032                     l522:
 12588                           
 12589                           ; BSR set to: 0
 12590                           ;main.c: 2490: rv = 0;
 12591  001032  6A24               	clrf	vscp_writeAppReg@rv,c
 12592                           
 12593                           ;main.c: 2491: break;
 12594  001034  D18F               	goto	l10998
 12595  001036                     l10964:
 12596                           
 12597                           ; BSR set to: 0
 12598                           ;main.c: 2499: writeEEPROM(0xF2, val);
 12599  001036  6A0F               	clrf	?_writeEEPROM+1,c
 12600  001038  0EF2               	movlw	242
 12601  00103A  6E0E               	movwf	?_writeEEPROM,c
 12602  00103C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12603  001040  EC0D  F029         	call	_writeEEPROM	;wreg free
 12604                           
 12605                           ;main.c: 2500: rv = readEEPROM(0xF2);
 12606  001044  6A0F               	clrf	?_readEEPROM+1,c
 12607  001046  0EF2               	movlw	242
 12608  001048  6E0E               	movwf	?_readEEPROM,c
 12609  00104A  EC1C  F02A         	call	_readEEPROM	;wreg free
 12610  00104E  D181               	goto	L19
 12611  001050                     l10966:
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;main.c: 2504: writeEEPROM(0xF3, val);
 12615  001050  6A0F               	clrf	?_writeEEPROM+1,c
 12616  001052  0EF3               	movlw	243
 12617  001054  6E0E               	movwf	?_writeEEPROM,c
 12618  001056  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12619  00105A  EC0D  F029         	call	_writeEEPROM	;wreg free
 12620                           
 12621                           ;main.c: 2505: rv = readEEPROM(0xF3);
 12622  00105E  6A0F               	clrf	?_readEEPROM+1,c
 12623  001060  0EF3               	movlw	243
 12624  001062  6E0E               	movwf	?_readEEPROM,c
 12625  001064  EC1C  F02A         	call	_readEEPROM	;wreg free
 12626  001068  D174               	goto	L19
 12627  00106A                     l10968:
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;main.c: 2509: rv = ~val;
 12631  00106A  1C21               	comf	vscp_writeAppReg@val,w,c
 12632  00106C  D172               	goto	L19
 12633  00106E                     l10972:
 12634                           
 12635                           ; BSR set to: 0
 12636  00106E  5023               	movf	vscp_writeAppReg@reg,w,c
 12637                           
 12638                           ; Switch size 1, requested type "space"
 12639                           ; Number of cases is 96, Range of values is 0 to 119
 12640                           ; switch strategies available:
 12641                           ; Name         Instructions Cycles
 12642                           ; simple_byte          289   145 (average)
 12643                           ;	Chosen strategy is simple_byte
 12644  001070  E102 EF42  F003    	bz	l10782
 12645  001076  0A01               	xorlw	1	; case 1
 12646  001078  E102 EF50  F003    	bz	l10784
 12647  00107E  0A03               	xorlw	3	; case 2
 12648  001080  E102 EF5E  F003    	bz	l10786
 12649  001086  0A01               	xorlw	1	; case 3
 12650  001088  E102 EF6C  F003    	bz	l10788
 12651  00108E  0A07               	xorlw	7	; case 4
 12652  001090  E102 EF7A  F003    	bz	l10790
 12653  001096  0A01               	xorlw	1	; case 5
 12654  001098  E102 EF88  F003    	bz	l10792
 12655  00109E  0A03               	xorlw	3	; case 6
 12656  0010A0  E102 EF96  F003    	bz	l10794
 12657  0010A6  0A01               	xorlw	1	; case 7
 12658  0010A8  E102 EFA4  F003    	bz	l10796
 12659  0010AE  0A13               	xorlw	19	; case 20
 12660  0010B0  E102 EFB2  F003    	bz	l10798
 12661  0010B6  0A01               	xorlw	1	; case 21
 12662  0010B8  E102 EFC0  F003    	bz	l10800
 12663  0010BE  0A03               	xorlw	3	; case 22
 12664  0010C0  E102 EFCE  F003    	bz	l10802
 12665  0010C6  0A01               	xorlw	1	; case 23
 12666  0010C8  E102 EFDC  F003    	bz	l10804
 12667  0010CE  0A0F               	xorlw	15	; case 24
 12668  0010D0  E102 EFEA  F003    	bz	l10806
 12669  0010D6  0A01               	xorlw	1	; case 25
 12670  0010D8  E102 EFF8  F003    	bz	l10808
 12671  0010DE  0A3F               	xorlw	63	; case 38
 12672  0010E0  E102 EF06  F004    	bz	l10810
 12673  0010E6  0A01               	xorlw	1	; case 39
 12674  0010E8  E102 EF14  F004    	bz	l10812
 12675  0010EE  0A0F               	xorlw	15	; case 40
 12676  0010F0  E102 EF22  F004    	bz	l10814
 12677  0010F6  0A01               	xorlw	1	; case 41
 12678  0010F8  E102 EF30  F004    	bz	l10816
 12679  0010FE  0A03               	xorlw	3	; case 42
 12680  001100  E102 EF3E  F004    	bz	l10818
 12681  001106  0A01               	xorlw	1	; case 43
 12682  001108  E102 EF4C  F004    	bz	l10820
 12683  00110E  0A07               	xorlw	7	; case 44
 12684  001110  E102 EF5A  F004    	bz	l10822
 12685  001116  0A01               	xorlw	1	; case 45
 12686  001118  E102 EF68  F004    	bz	l10824
 12687  00111E  0A03               	xorlw	3	; case 46
 12688  001120  E102 EF76  F004    	bz	l10826
 12689  001126  0A01               	xorlw	1	; case 47
 12690  001128  E102 EF84  F004    	bz	l10828
 12691  00112E  0A1F               	xorlw	31	; case 48
 12692  001130  E102 EF92  F004    	bz	l10830
 12693  001136  0A01               	xorlw	1	; case 49
 12694  001138  E101 D402          	bz	l10832
 12695  00113C  0A03               	xorlw	3	; case 50
 12696  00113E  E101 D40D          	bz	l10834
 12697  001142  0A01               	xorlw	1	; case 51
 12698  001144  E101 D418          	bz	l10836
 12699  001148  0A07               	xorlw	7	; case 52
 12700  00114A  E101 D423          	bz	l10838
 12701  00114E  0A01               	xorlw	1	; case 53
 12702  001150  E101 D42E          	bz	l10840
 12703  001154  0A03               	xorlw	3	; case 54
 12704  001156  E101 D439          	bz	l10842
 12705  00115A  0A01               	xorlw	1	; case 55
 12706  00115C  E101 D444          	bz	l10844
 12707  001160  0A0F               	xorlw	15	; case 56
 12708  001162  E101 D44F          	bz	l10846
 12709  001166  0A01               	xorlw	1	; case 57
 12710  001168  E101 D45A          	bz	l10848
 12711  00116C  0A03               	xorlw	3	; case 58
 12712  00116E  E101 D465          	bz	l10850
 12713  001172  0A01               	xorlw	1	; case 59
 12714  001174  E101 D470          	bz	l10852
 12715  001178  0A07               	xorlw	7	; case 60
 12716  00117A  E101 D47B          	bz	l10854
 12717  00117E  0A01               	xorlw	1	; case 61
 12718  001180  E101 D486          	bz	l10856
 12719  001184  0A03               	xorlw	3	; case 62
 12720  001186  E101 D491          	bz	l10858
 12721  00118A  0A01               	xorlw	1	; case 63
 12722  00118C  E101 D49C          	bz	l10860
 12723  001190  0A7F               	xorlw	127	; case 64
 12724  001192  E101 D4A7          	bz	l10862
 12725  001196  0A01               	xorlw	1	; case 65
 12726  001198  E101 D4B2          	bz	l10864
 12727  00119C  0A03               	xorlw	3	; case 66
 12728  00119E  E101 D4BD          	bz	l10866
 12729  0011A2  0A01               	xorlw	1	; case 67
 12730  0011A4  E101 D4C8          	bz	l10868
 12731  0011A8  0A07               	xorlw	7	; case 68
 12732  0011AA  E101 D4D3          	bz	l10870
 12733  0011AE  0A01               	xorlw	1	; case 69
 12734  0011B0  E101 D4DD          	bz	l10872
 12735  0011B4  0A03               	xorlw	3	; case 70
 12736  0011B6  E101 D4E7          	bz	l10874
 12737  0011BA  0A01               	xorlw	1	; case 71
 12738  0011BC  E101 D4F1          	bz	l10876
 12739  0011C0  0A0F               	xorlw	15	; case 72
 12740  0011C2  E101 D4FB          	bz	l10878
 12741  0011C6  0A01               	xorlw	1	; case 73
 12742  0011C8  E101 D505          	bz	l10880
 12743  0011CC  0A03               	xorlw	3	; case 74
 12744  0011CE  E101 D50F          	bz	l10882
 12745  0011D2  0A01               	xorlw	1	; case 75
 12746  0011D4  E101 D519          	bz	l10884
 12747  0011D8  0A07               	xorlw	7	; case 76
 12748  0011DA  E101 D523          	bz	l10886
 12749  0011DE  0A01               	xorlw	1	; case 77
 12750  0011E0  E101 D52D          	bz	l10888
 12751  0011E4  0A03               	xorlw	3	; case 78
 12752  0011E6  E101 D537          	bz	l10890
 12753  0011EA  0A01               	xorlw	1	; case 79
 12754  0011EC  E101 D541          	bz	l10892
 12755  0011F0  0A1F               	xorlw	31	; case 80
 12756  0011F2  E101 D54B          	bz	l10894
 12757  0011F6  0A01               	xorlw	1	; case 81
 12758  0011F8  E101 D555          	bz	l10896
 12759  0011FC  0A03               	xorlw	3	; case 82
 12760  0011FE  E101 D55F          	bz	l10898
 12761  001202  0A01               	xorlw	1	; case 83
 12762  001204  E101 D569          	bz	l10900
 12763  001208  0A07               	xorlw	7	; case 84
 12764  00120A  E101 D573          	bz	l10902
 12765  00120E  0A01               	xorlw	1	; case 85
 12766  001210  E101 D57D          	bz	l10904
 12767  001214  0A03               	xorlw	3	; case 86
 12768  001216  E101 D587          	bz	l10906
 12769  00121A  0A01               	xorlw	1	; case 87
 12770  00121C  E101 D591          	bz	l10908
 12771  001220  0A0F               	xorlw	15	; case 88
 12772  001222  E101 D59B          	bz	l10910
 12773  001226  0A01               	xorlw	1	; case 89
 12774  001228  E101 D5A5          	bz	l10912
 12775  00122C  0A03               	xorlw	3	; case 90
 12776  00122E  E101 D5AF          	bz	l10914
 12777  001232  0A01               	xorlw	1	; case 91
 12778  001234  E101 D5B9          	bz	l10916
 12779  001238  0A07               	xorlw	7	; case 92
 12780  00123A  E101 D5C3          	bz	l10918
 12781  00123E  0A01               	xorlw	1	; case 93
 12782  001240  E101 D5CD          	bz	l10920
 12783  001244  0A03               	xorlw	3	; case 94
 12784  001246  E101 D5D7          	bz	l10922
 12785  00124A  0A01               	xorlw	1	; case 95
 12786  00124C  E101 D5E1          	bz	l10924
 12787  001250  0A3F               	xorlw	63	; case 96
 12788  001252  E101 D5EB          	bz	l10926
 12789  001256  0A01               	xorlw	1	; case 97
 12790  001258  E101 D5F5          	bz	l10928
 12791  00125C  0A03               	xorlw	3	; case 98
 12792  00125E  E101 D5FF          	bz	l10930
 12793  001262  0A01               	xorlw	1	; case 99
 12794  001264  E101 D609          	bz	l10932
 12795  001268  0A07               	xorlw	7	; case 100
 12796  00126A  E101 D613          	bz	l10934
 12797  00126E  0A01               	xorlw	1	; case 101
 12798  001270  E101 D61D          	bz	l10936
 12799  001274  0A03               	xorlw	3	; case 102
 12800  001276  E101 D627          	bz	l10938
 12801  00127A  0A01               	xorlw	1	; case 103
 12802  00127C  E101 D631          	bz	l10940
 12803  001280  0A0F               	xorlw	15	; case 104
 12804  001282  E101 D63B          	bz	l10942
 12805  001286  0A01               	xorlw	1	; case 105
 12806  001288  E101 D645          	bz	l10944
 12807  00128C  0A03               	xorlw	3	; case 106
 12808  00128E  E101 D64F          	bz	l10946
 12809  001292  0A01               	xorlw	1	; case 107
 12810  001294  E101 D659          	bz	l10948
 12811  001298  0A07               	xorlw	7	; case 108
 12812  00129A  E101 D663          	bz	l10950
 12813  00129E  0A01               	xorlw	1	; case 109
 12814  0012A0  E101 D66D          	bz	l10952
 12815  0012A4  0A03               	xorlw	3	; case 110
 12816  0012A6  E101 D677          	bz	l10954
 12817  0012AA  0A01               	xorlw	1	; case 111
 12818  0012AC  E101 D681          	bz	l10956
 12819  0012B0  0A1F               	xorlw	31	; case 112
 12820  0012B2  E101 D68B          	bz	l10958
 12821  0012B6  0A01               	xorlw	1	; case 113
 12822  0012B8  E101 D694          	bz	l519
 12823  0012BC  0A03               	xorlw	3	; case 114
 12824  0012BE  E101 D69E          	bz	l10960
 12825  0012C2  0A01               	xorlw	1	; case 115
 12826  0012C4  E101 D6A8          	bz	l10962
 12827  0012C8  0A07               	xorlw	7	; case 116
 12828  0012CA  E101 D6B2          	bz	l522
 12829  0012CE  0A01               	xorlw	1	; case 117
 12830  0012D0  E101 D6AF          	bz	l522
 12831  0012D4  0A03               	xorlw	3	; case 118
 12832  0012D6  E101 D6AE          	bz	l10964
 12833  0012DA  0A01               	xorlw	1	; case 119
 12834  0012DC  E101 D6B8          	bz	l10966
 12835  0012E0  D6C4               	goto	l10968
 12836  0012E2                     l10974:
 12837                           
 12838                           ; BSR set to: 0
 12839                           ;main.c: 2513: else if (1 == vscp_page_select) {
 12840  0012E2  0446               	decf	_vscp_page_select,w,c
 12841  0012E4  1047               	iorwf	_vscp_page_select+1,w,c
 12842  0012E6  E136               	bnz	l10998
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;main.c: 2516: if (reg < 72) {
 12846  0012E8  0E48               	movlw	72
 12847  0012EA  6023               	cpfslt	vscp_writeAppReg@reg,c
 12848  0012EC  D010               	goto	l10982
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;main.c: 2517: writeEEPROM(0xAA + reg, val);
 12852  0012EE  0EAA               	movlw	170
 12853  0012F0  D833               	call	PL66	;call to abstracted procedure
 12854  0012F2  EC0D  F029         	call	_writeEEPROM	;wreg free
 12855                           
 12856                           ;main.c: 2518: rv = readEEPROM(0xAA + reg );
 12857  0012F6  0EAA               	movlw	170
 12858  0012F8  2423               	addwf	vscp_writeAppReg@reg,w,c
 12859  0012FA  6E0E               	movwf	?_readEEPROM,c
 12860  0012FC  6A0F               	clrf	?_readEEPROM+1,c
 12861  0012FE  0E00               	movlw	0
 12862  001300  220F               	addwfc	?_readEEPROM+1,f,c
 12863  001302  EC1C  F02A         	call	_readEEPROM	;wreg free
 12864  001306  6E24               	movwf	vscp_writeAppReg@rv,c
 12865                           
 12866                           ;main.c: 2519: writeCoeffs2Ram();
 12867  001308  EC7C  F023         	call	_writeCoeffs2Ram	;wreg free
 12868                           
 12869                           ;main.c: 2520: }
 12870  00130C  D023               	goto	l10998
 12871  00130E                     l10982:
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;main.c: 2522: else if (reg < 84) {
 12875  00130E  0E54               	movlw	84
 12876  001310  6023               	cpfslt	vscp_writeAppReg@reg,c
 12877  001312  D010               	goto	l10994
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;main.c: 2524: uint8_t pos = reg - 72;
 12881  001314  5023               	movf	vscp_writeAppReg@reg,w,c
 12882  001316  0FB8               	addlw	184
 12883  001318  6E22               	movwf	vscp_writeAppReg@pos,c
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;main.c: 2525: if ( pos % 2 ) {
 12887  00131A  A022               	btfss	vscp_writeAppReg@pos,0,c
 12888  00131C  D002               	goto	l10990
 12889                           
 12890                           ; BSR set to: 0
 12891                           ;main.c: 2526: pos--;
 12892  00131E  0622               	decf	vscp_writeAppReg@pos,f,c
 12893                           
 12894                           ;main.c: 2527: }
 12895  001320  D001               	goto	l10992
 12896  001322                     l10990:
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;main.c: 2528: else {
 12900                           ;main.c: 2529: pos++;
 12901  001322  2A22               	incf	vscp_writeAppReg@pos,f,c
 12902  001324                     l10992:
 12903                           
 12904                           ; BSR set to: 0
 12905                           ;main.c: 2530: }
 12906                           ;main.c: 2531: rv = adc[ pos ];
 12907  001324  0E9C               	movlw	low _adc
 12908  001326  2422               	addwf	vscp_writeAppReg@pos,w,c
 12909  001328  6ED9               	movwf	fsr2l,c
 12910  00132A  6ADA               	clrf	fsr2h,c
 12911  00132C  0E01               	movlw	high _adc
 12912  00132E  22DA               	addwfc	fsr2h,f,c
 12913  001330  50DF               	movf	indf2,w,c
 12914  001332  D00F               	goto	L19
 12915  001334                     l10994:
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;main.c: 2534: else if (reg < 98) {
 12919  001334  0E62               	movlw	98
 12920  001336  6023               	cpfslt	vscp_writeAppReg@reg,c
 12921  001338  D00D               	goto	l10998
 12922                           
 12923                           ; BSR set to: 0
 12924                           ;main.c: 2535: writeEEPROM( 0x9E + reg - 84, val );
 12925  00133A  0E4A               	movlw	74
 12926  00133C  D80D               	call	PL66	;call to abstracted procedure
 12927  00133E  EC0D  F029         	call	_writeEEPROM	;wreg free
 12928                           
 12929                           ;main.c: 2536: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12930  001342  0E4A               	movlw	74
 12931  001344  2423               	addwf	vscp_writeAppReg@reg,w,c
 12932  001346  6E0E               	movwf	?_readEEPROM,c
 12933  001348  6A0F               	clrf	?_readEEPROM+1,c
 12934  00134A  0E00               	movlw	0
 12935  00134C  220F               	addwfc	?_readEEPROM+1,f,c
 12936  00134E  EC1C  F02A         	call	_readEEPROM	;wreg free
 12937  001352                     L19:
 12938  001352  6E24               	movwf	vscp_writeAppReg@rv,c
 12939  001354                     l10998:
 12940                           
 12941                           ;main.c: 2537: }
 12942                           ;main.c: 2538: }
 12943                           ;main.c: 2540: return rv;
 12944  001354  5024               	movf	vscp_writeAppReg@rv,w,c
 12945  001356  0012               	return	
 12946  001358                     __end_of_vscp_writeAppReg:
 12947                           	opt stack 0
 12948  001358                     PL66:
 12949                           	opt stack 24
 12950  001358  2423               	addwf	vscp_writeAppReg@reg,w,c
 12951  00135A  6E0E               	movwf	?_writeEEPROM,c
 12952  00135C  6A0F               	clrf	?_writeEEPROM+1,c
 12953  00135E  0E00               	movlw	0
 12954  001360  220F               	addwfc	?_writeEEPROM+1,f,c
 12955  001362  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12956  001366  0C00               	retlw	0
 12957  001368                     __end_ofPL66:
 12958                           	opt stack 0
 12959                           tblptru	equ	0xFF8
 12960                           tblptrh	equ	0xFF7
 12961                           tblptrl	equ	0xFF6
 12962                           tablat	equ	0xFF5
 12963                           prodh	equ	0xFF4
 12964                           prodl	equ	0xFF3
 12965                           intcon	equ	0xFF2
 12966                           postinc0	equ	0xFEE
 12967                           wreg	equ	0xFE8
 12968                           indf1	equ	0xFE7
 12969                           postdec1	equ	0xFE5
 12970                           fsr1h	equ	0xFE2
 12971                           fsr1l	equ	0xFE1
 12972                           indf2	equ	0xFDF
 12973                           postinc2	equ	0xFDE
 12974                           postdec2	equ	0xFDD
 12975                           plusw2	equ	0xFDB
 12976                           fsr2h	equ	0xFDA
 12977                           fsr2l	equ	0xFD9
 12978                           status	equ	0xFD8
 12979                           
 12980 ;; *************** function _vscp_readRegister *****************
 12981 ;; Defined at:
 12982 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;  reg             1    wreg     unsigned char 
 12985 ;; Auto vars:     Size  Location     Type
 12986 ;;  reg             1   20[COMRAM] unsigned char 
 12987 ;; Return value:  Size  Location     Type
 12988 ;;                  1    wreg      unsigned char 
 12989 ;; Registers used:
 12990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12991 ;; Tracked objects:
 12992 ;;		On entry : F/0
 12993 ;;		On exit  : 0/0
 12994 ;;		Unchanged: 0/0
 12995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12996 ;;      Params:         0       0       0       0       0       0       0
 12997 ;;      Locals:         1       0       0       0       0       0       0
 12998 ;;      Temps:          0       0       0       0       0       0       0
 12999 ;;      Totals:         1       0       0       0       0       0       0
 13000 ;;Total ram usage:        1 bytes
 13001 ;; Hardware stack levels used:    1
 13002 ;; Hardware stack levels required when called:    5
 13003 ;; This function calls:
 13004 ;;		_vscp_readAppReg
 13005 ;;		_vscp_readStdReg
 13006 ;; This function is called by:
 13007 ;;		_vscp_handleProtocolEvent
 13008 ;; This function uses a non-reentrant model
 13009 ;;
 13010                           
 13011                           	psect	text45
 13012  00532C                     __ptext45:
 13013                           	opt stack 0
 13014  00532C                     _vscp_readRegister:
 13015                           	opt stack 24
 13016                           
 13017                           ;incstack = 0
 13018                           ;incstack = 0
 13019                           ;vscp_readRegister@reg stored from wreg
 13020  00532C  CFE8 F015          	movff	wreg,vscp_readRegister@reg
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
 13024  005330  0E7F               	movlw	127
 13025  005332  6415               	cpfsgt	vscp_readRegister@reg,c
 13026  005334  D004               	goto	l11246
 13027                           
 13028                           ; BSR set to: 0
 13029                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
 13030  005336  5015               	movf	vscp_readRegister@reg,w,c
 13031  005338  ECD8  F01F         	call	_vscp_readStdReg
 13032  00533C  D003               	goto	l1107
 13033  00533E                     l11246:
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
 13037  00533E  5015               	movf	vscp_readRegister@reg,w,c
 13038  005340  EC08  F00E         	call	_vscp_readAppReg
 13039  005344                     l1107:
 13040  005344  0012               	return	
 13041  005346                     __end_of_vscp_readRegister:
 13042                           	opt stack 0
 13043                           tblptru	equ	0xFF8
 13044                           tblptrh	equ	0xFF7
 13045                           tblptrl	equ	0xFF6
 13046                           tablat	equ	0xFF5
 13047                           prodh	equ	0xFF4
 13048                           prodl	equ	0xFF3
 13049                           intcon	equ	0xFF2
 13050                           postinc0	equ	0xFEE
 13051                           wreg	equ	0xFE8
 13052                           indf1	equ	0xFE7
 13053                           postdec1	equ	0xFE5
 13054                           fsr1h	equ	0xFE2
 13055                           fsr1l	equ	0xFE1
 13056                           indf2	equ	0xFDF
 13057                           postinc2	equ	0xFDE
 13058                           postdec2	equ	0xFDD
 13059                           plusw2	equ	0xFDB
 13060                           fsr2h	equ	0xFDA
 13061                           fsr2l	equ	0xFD9
 13062                           status	equ	0xFD8
 13063                           
 13064 ;; *************** function _vscp_readStdReg *****************
 13065 ;; Defined at:
 13066 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
 13067 ;; Parameters:    Size  Location     Type
 13068 ;;  reg             1    wreg     unsigned char 
 13069 ;; Auto vars:     Size  Location     Type
 13070 ;;  reg             1   19[COMRAM] unsigned char 
 13071 ;;  rv              1   18[COMRAM] unsigned char 
 13072 ;; Return value:  Size  Location     Type
 13073 ;;                  1    wreg      unsigned char 
 13074 ;; Registers used:
 13075 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13076 ;; Tracked objects:
 13077 ;;		On entry : F/0
 13078 ;;		On exit  : 0/0
 13079 ;;		Unchanged: 0/0
 13080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13081 ;;      Params:         0       0       0       0       0       0       0
 13082 ;;      Locals:         2       0       0       0       0       0       0
 13083 ;;      Temps:          0       0       0       0       0       0       0
 13084 ;;      Totals:         2       0       0       0       0       0       0
 13085 ;;Total ram usage:        2 bytes
 13086 ;; Hardware stack levels used:    1
 13087 ;; Hardware stack levels required when called:    4
 13088 ;; This function calls:
 13089 ;;		_vscp_getMajorVersion
 13090 ;;		_vscp_getMinorVersion
 13091 ;;		_vscp_getSubMinorVersion
 13092 ;;		_vscp_getGUID
 13093 ;;		_vscp_getMDF_URL
 13094 ;;		_vscp_getUserID
 13095 ;;		_vscp_getManufacturerId
 13096 ;;		_vscp_getBootLoaderAlgorithm
 13097 ;;		_vscp_getBufferSize
 13098 ;;		_vscp_getRegisterPagesUsed
 13099 ;; This function is called by:
 13100 ;;		_vscp_readRegister
 13101 ;;		_vscp_handleProtocolEvent
 13102 ;; This function uses a non-reentrant model
 13103 ;;
 13104                           
 13105                           	psect	text46
 13106  003FB0                     __ptext46:
 13107                           	opt stack 0
 13108  003FB0                     _vscp_readStdReg:
 13109                           	opt stack 25
 13110                           
 13111                           ;incstack = 0
 13112                           ;incstack = 0
 13113                           ;vscp_readStdReg@reg stored from wreg
 13114  003FB0  CFE8 F014          	movff	wreg,vscp_readStdReg@reg
 13115                           
 13116                           ; BSR set to: 0
 13117                           ;vscp_firmware.c: 569: if (0x80 == reg) {
 13118                           
 13119                           ; BSR set to: 0
 13120  003FB4  5014               	movf	vscp_readStdReg@reg,w,c
 13121  003FB6  0A80               	xorlw	128
 13122  003FB8  E104               	bnz	l11256
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
 13126  003FBA  C04B  F013         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 13127                           
 13128                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
 13129  003FBE  6A4B               	clrf	_vscp_alarmstatus,c
 13130                           
 13131                           ;vscp_firmware.c: 575: }
 13132  003FC0  D067               	goto	l11322
 13133  003FC2                     l11256:
 13134                           
 13135                           ; BSR set to: 0
 13136                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
 13137  003FC2  5014               	movf	vscp_readStdReg@reg,w,c
 13138  003FC4  0A81               	xorlw	129
 13139  003FC6  E102               	bnz	l11260
 13140                           
 13141                           ; BSR set to: 0
 13142                           ;vscp_firmware.c: 579: rv = 1;
 13143  003FC8  0E01               	movlw	1
 13144  003FCA  D061               	goto	L20
 13145  003FCC                     l11260:
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
 13149  003FCC  5014               	movf	vscp_readStdReg@reg,w,c
 13150  003FCE  0A82               	xorlw	130
 13151  003FD0  E102               	bnz	l11264
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;vscp_firmware.c: 585: rv = 5;
 13155  003FD2  0E05               	movlw	5
 13156  003FD4  D05C               	goto	L20
 13157  003FD6                     l11264:
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
 13161  003FD6  5014               	movf	vscp_readStdReg@reg,w,c
 13162  003FD8  0A83               	xorlw	131
 13163  003FDA  E102               	bnz	l11268
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;vscp_firmware.c: 591: rv = 0;
 13167  003FDC  6A13               	clrf	vscp_readStdReg@rv,c
 13168                           
 13169                           ;vscp_firmware.c: 593: }
 13170  003FDE  D058               	goto	l11322
 13171  003FE0                     l11268:
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
 13175  003FE0  5014               	movf	vscp_readStdReg@reg,w,c
 13176  003FE2  0A94               	xorlw	148
 13177  003FE4  E103               	bnz	l11272
 13178                           
 13179                           ; BSR set to: 0
 13180                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
 13181  003FE6  EC6D  F02A         	call	_vscp_getMajorVersion	;wreg free
 13182  003FEA  D051               	goto	L20
 13183  003FEC                     l11272:
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
 13187  003FEC  5014               	movf	vscp_readStdReg@reg,w,c
 13188  003FEE  0A95               	xorlw	149
 13189  003FF0  E103               	bnz	l11276
 13190                           
 13191                           ; BSR set to: 0
 13192                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
 13193  003FF2  EC6C  F02A         	call	_vscp_getMinorVersion	;wreg free
 13194  003FF6  D04B               	goto	L20
 13195  003FF8                     l11276:
 13196                           
 13197                           ; BSR set to: 0
 13198                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
 13199  003FF8  5014               	movf	vscp_readStdReg@reg,w,c
 13200  003FFA  0A96               	xorlw	150
 13201  003FFC  E103               	bnz	l11280
 13202                           
 13203                           ; BSR set to: 0
 13204                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
 13205  003FFE  EC6B  F02A         	call	_vscp_getSubMinorVersion	;wreg free
 13206  004002  D045               	goto	L20
 13207  004004                     l11280:
 13208                           
 13209                           ; BSR set to: 0
 13210                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
 13211  004004  0E89               	movlw	137
 13212  004006  6014               	cpfslt	vscp_readStdReg@reg,c
 13213  004008  D005               	goto	l11284
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
 13217  00400A  5014               	movf	vscp_readStdReg@reg,w,c
 13218  00400C  0F7C               	addlw	124
 13219  00400E  ECF6  F029         	call	_vscp_getUserID
 13220  004012  D03D               	goto	L20
 13221  004014                     l11284:
 13222                           
 13223                           ; BSR set to: 0
 13224                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
 13225                           ;vscp_firmware.c: 619: (reg < 0x91)) {
 13226  004014  0E88               	movlw	136
 13227  004016  6414               	cpfsgt	vscp_readStdReg@reg,c
 13228  004018  D008               	goto	l11290
 13229                           
 13230                           ; BSR set to: 0
 13231  00401A  0E91               	movlw	145
 13232  00401C  6014               	cpfslt	vscp_readStdReg@reg,c
 13233  00401E  D005               	goto	l11290
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
 13237  004020  5014               	movf	vscp_readStdReg@reg,w,c
 13238  004022  0F77               	addlw	119
 13239  004024  ECEC  F029         	call	_vscp_getManufacturerId
 13240  004028  D032               	goto	L20
 13241  00402A                     l11290:
 13242                           
 13243                           ; BSR set to: 0
 13244                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
 13245  00402A  5014               	movf	vscp_readStdReg@reg,w,c
 13246  00402C  0A91               	xorlw	145
 13247  00402E  E103               	bnz	l11294
 13248                           
 13249                           ; BSR set to: 0
 13250                           ;vscp_firmware.c: 628: rv = vscp_nickname;
 13251  004030  C0BA  F013         	movff	_vscp_nickname,vscp_readStdReg@rv
 13252                           
 13253                           ;vscp_firmware.c: 630: }
 13254  004034  D02D               	goto	l11322
 13255  004036                     l11294:
 13256                           
 13257                           ; BSR set to: 0
 13258                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
 13259  004036  5014               	movf	vscp_readStdReg@reg,w,c
 13260  004038  0A93               	xorlw	147
 13261  00403A  E103               	bnz	l11298
 13262                           
 13263                           ; BSR set to: 0
 13264                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
 13265  00403C  C046  F013         	movff	_vscp_page_select,vscp_readStdReg@rv
 13266                           
 13267                           ;vscp_firmware.c: 636: }
 13268  004040  D027               	goto	l11322
 13269  004042                     l11298:
 13270                           
 13271                           ; BSR set to: 0
 13272                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
 13273  004042  5014               	movf	vscp_readStdReg@reg,w,c
 13274  004044  0A92               	xorlw	146
 13275  004046  E102               	bnz	l11302
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
 13279  004048  5047               	movf	_vscp_page_select+1,w,c
 13280  00404A  D021               	goto	L20
 13281  00404C                     l11302:
 13282                           
 13283                           ; BSR set to: 0
 13284                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
 13285  00404C  5014               	movf	vscp_readStdReg@reg,w,c
 13286  00404E  0A97               	xorlw	151
 13287  004050  E103               	bnz	l11306
 13288                           
 13289                           ; BSR set to: 0
 13290                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
 13291  004052  EC6A  F02A         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13292  004056  D01B               	goto	L20
 13293  004058                     l11306:
 13294                           
 13295                           ; BSR set to: 0
 13296                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
 13297  004058  5014               	movf	vscp_readStdReg@reg,w,c
 13298  00405A  0A98               	xorlw	152
 13299  00405C  E103               	bnz	l11310
 13300                           
 13301                           ; BSR set to: 0
 13302                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
 13303  00405E  EC69  F02A         	call	_vscp_getBufferSize	;wreg free
 13304  004062  D015               	goto	L20
 13305  004064                     l11310:
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
 13309  004064  5014               	movf	vscp_readStdReg@reg,w,c
 13310  004066  0A99               	xorlw	153
 13311  004068  E103               	bnz	l11314
 13312                           
 13313                           ; BSR set to: 0
 13314                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
 13315  00406A  EC68  F02A         	call	_vscp_getRegisterPagesUsed	;wreg free
 13316  00406E  D00F               	goto	L20
 13317  004070                     l11314:
 13318                           
 13319                           ; BSR set to: 0
 13320                           ;vscp_firmware.c: 656: else if ((reg > (0xD0 - 1)) &&
 13321                           ;vscp_firmware.c: 657: (reg < 0xE0)) {
 13322  004070  0ECF               	movlw	207
 13323  004072  6414               	cpfsgt	vscp_readStdReg@reg,c
 13324  004074  D008               	goto	l11320
 13325                           
 13326                           ; BSR set to: 0
 13327  004076  0EE0               	movlw	224
 13328  004078  6014               	cpfslt	vscp_readStdReg@reg,c
 13329  00407A  D005               	goto	l11320
 13330                           
 13331                           ; BSR set to: 0
 13332                           ;vscp_firmware.c: 660: rv = vscp_getGUID(reg - 0xD0);
 13333  00407C  5014               	movf	vscp_readStdReg@reg,w,c
 13334  00407E  0F30               	addlw	48
 13335  004080  EC00  F02A         	call	_vscp_getGUID
 13336  004084  D004               	goto	L20
 13337  004086                     l11320:
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;vscp_firmware.c: 663: else {
 13341                           ;vscp_firmware.c: 666: rv = vscp_getMDF_URL(reg - 0xE0);
 13342  004086  5014               	movf	vscp_readStdReg@reg,w,c
 13343  004088  0F20               	addlw	32
 13344  00408A  ECC8  F029         	call	_vscp_getMDF_URL
 13345  00408E                     L20:
 13346  00408E  6E13               	movwf	vscp_readStdReg@rv,c
 13347  004090                     l11322:
 13348                           
 13349                           ;vscp_firmware.c: 668: }
 13350                           ;vscp_firmware.c: 670: return rv;
 13351  004090  5013               	movf	vscp_readStdReg@rv,w,c
 13352  004092  0012               	return	
 13353  004094                     __end_of_vscp_readStdReg:
 13354                           	opt stack 0
 13355                           tblptru	equ	0xFF8
 13356                           tblptrh	equ	0xFF7
 13357                           tblptrl	equ	0xFF6
 13358                           tablat	equ	0xFF5
 13359                           prodh	equ	0xFF4
 13360                           prodl	equ	0xFF3
 13361                           intcon	equ	0xFF2
 13362                           postinc0	equ	0xFEE
 13363                           wreg	equ	0xFE8
 13364                           indf1	equ	0xFE7
 13365                           postdec1	equ	0xFE5
 13366                           fsr1h	equ	0xFE2
 13367                           fsr1l	equ	0xFE1
 13368                           indf2	equ	0xFDF
 13369                           postinc2	equ	0xFDE
 13370                           postdec2	equ	0xFDD
 13371                           plusw2	equ	0xFDB
 13372                           fsr2h	equ	0xFDA
 13373                           fsr2l	equ	0xFD9
 13374                           status	equ	0xFD8
 13375                           
 13376 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13377 ;; Defined at:
 13378 ;;		line 2712 in file "../main.c"
 13379 ;; Parameters:    Size  Location     Type
 13380 ;;		None
 13381 ;; Auto vars:     Size  Location     Type
 13382 ;;		None
 13383 ;; Return value:  Size  Location     Type
 13384 ;;                  1    wreg      unsigned char 
 13385 ;; Registers used:
 13386 ;;		wreg
 13387 ;; Tracked objects:
 13388 ;;		On entry : F/0
 13389 ;;		On exit  : F/0
 13390 ;;		Unchanged: F/0
 13391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13392 ;;      Params:         0       0       0       0       0       0       0
 13393 ;;      Locals:         0       0       0       0       0       0       0
 13394 ;;      Temps:          0       0       0       0       0       0       0
 13395 ;;      Totals:         0       0       0       0       0       0       0
 13396 ;;Total ram usage:        0 bytes
 13397 ;; Hardware stack levels used:    1
 13398 ;; Hardware stack levels required when called:    2
 13399 ;; This function calls:
 13400 ;;		Nothing
 13401 ;; This function is called by:
 13402 ;;		_vscp_readStdReg
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           	psect	text47
 13407  0054D0                     __ptext47:
 13408                           	opt stack 0
 13409  0054D0                     _vscp_getRegisterPagesUsed:
 13410                           	opt stack 26
 13411                           
 13412                           ; BSR set to: 0
 13413                           
 13414                           ; BSR set to: 0
 13415                           ;main.c: 2713: return 1;
 13416                           
 13417                           ;incstack = 0
 13418                           ;incstack = 0
 13419  0054D0  0C01               	retlw	1
 13420  0054D2                     __end_of_vscp_getRegisterPagesUsed:
 13421                           	opt stack 0
 13422                           tblptru	equ	0xFF8
 13423                           tblptrh	equ	0xFF7
 13424                           tblptrl	equ	0xFF6
 13425                           tablat	equ	0xFF5
 13426                           prodh	equ	0xFF4
 13427                           prodl	equ	0xFF3
 13428                           intcon	equ	0xFF2
 13429                           postinc0	equ	0xFEE
 13430                           wreg	equ	0xFE8
 13431                           indf1	equ	0xFE7
 13432                           postdec1	equ	0xFE5
 13433                           fsr1h	equ	0xFE2
 13434                           fsr1l	equ	0xFE1
 13435                           indf2	equ	0xFDF
 13436                           postinc2	equ	0xFDE
 13437                           postdec2	equ	0xFDD
 13438                           plusw2	equ	0xFDB
 13439                           fsr2h	equ	0xFDA
 13440                           fsr2l	equ	0xFD9
 13441                           status	equ	0xFD8
 13442                           
 13443 ;; *************** function _vscp_getBufferSize *****************
 13444 ;; Defined at:
 13445 ;;		line 2665 in file "../main.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;		None
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  1    wreg      unsigned char 
 13452 ;; Registers used:
 13453 ;;		wreg
 13454 ;; Tracked objects:
 13455 ;;		On entry : F/0
 13456 ;;		On exit  : F/0
 13457 ;;		Unchanged: F/0
 13458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13459 ;;      Params:         0       0       0       0       0       0       0
 13460 ;;      Locals:         0       0       0       0       0       0       0
 13461 ;;      Temps:          0       0       0       0       0       0       0
 13462 ;;      Totals:         0       0       0       0       0       0       0
 13463 ;;Total ram usage:        0 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    2
 13466 ;; This function calls:
 13467 ;;		Nothing
 13468 ;; This function is called by:
 13469 ;;		_vscp_readStdReg
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           	psect	text48
 13474  0054D2                     __ptext48:
 13475                           	opt stack 0
 13476  0054D2                     _vscp_getBufferSize:
 13477                           	opt stack 26
 13478                           
 13479                           ; BSR set to: 0
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;main.c: 2666: return 8;
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;incstack = 0
 13486                           ;incstack = 0
 13487  0054D2  0C08               	retlw	8
 13488  0054D4                     __end_of_vscp_getBufferSize:
 13489                           	opt stack 0
 13490                           tblptru	equ	0xFF8
 13491                           tblptrh	equ	0xFF7
 13492                           tblptrl	equ	0xFF6
 13493                           tablat	equ	0xFF5
 13494                           prodh	equ	0xFF4
 13495                           prodl	equ	0xFF3
 13496                           intcon	equ	0xFF2
 13497                           postinc0	equ	0xFEE
 13498                           wreg	equ	0xFE8
 13499                           indf1	equ	0xFE7
 13500                           postdec1	equ	0xFE5
 13501                           fsr1h	equ	0xFE2
 13502                           fsr1l	equ	0xFE1
 13503                           indf2	equ	0xFDF
 13504                           postinc2	equ	0xFDE
 13505                           postdec2	equ	0xFDD
 13506                           plusw2	equ	0xFDB
 13507                           fsr2h	equ	0xFDA
 13508                           fsr2l	equ	0xFD9
 13509                           status	equ	0xFD8
 13510                           
 13511 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13512 ;; Defined at:
 13513 ;;		line 2656 in file "../main.c"
 13514 ;; Parameters:    Size  Location     Type
 13515 ;;		None
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;		None
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  1    wreg      unsigned char 
 13520 ;; Registers used:
 13521 ;;		wreg
 13522 ;; Tracked objects:
 13523 ;;		On entry : F/0
 13524 ;;		On exit  : F/0
 13525 ;;		Unchanged: F/0
 13526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13527 ;;      Params:         0       0       0       0       0       0       0
 13528 ;;      Locals:         0       0       0       0       0       0       0
 13529 ;;      Temps:          0       0       0       0       0       0       0
 13530 ;;      Totals:         0       0       0       0       0       0       0
 13531 ;;Total ram usage:        0 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:    2
 13534 ;; This function calls:
 13535 ;;		Nothing
 13536 ;; This function is called by:
 13537 ;;		_vscp_readStdReg
 13538 ;; This function uses a non-reentrant model
 13539 ;;
 13540                           
 13541                           	psect	text49
 13542  0054D4                     __ptext49:
 13543                           	opt stack 0
 13544  0054D4                     _vscp_getBootLoaderAlgorithm:
 13545                           	opt stack 26
 13546                           
 13547                           ; BSR set to: 0
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;main.c: 2657: return 0x01;
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;incstack = 0
 13554                           ;incstack = 0
 13555  0054D4  0C01               	retlw	1
 13556  0054D6                     __end_of_vscp_getBootLoaderAlgorithm:
 13557                           	opt stack 0
 13558                           tblptru	equ	0xFF8
 13559                           tblptrh	equ	0xFF7
 13560                           tblptrl	equ	0xFF6
 13561                           tablat	equ	0xFF5
 13562                           prodh	equ	0xFF4
 13563                           prodl	equ	0xFF3
 13564                           intcon	equ	0xFF2
 13565                           postinc0	equ	0xFEE
 13566                           wreg	equ	0xFE8
 13567                           indf1	equ	0xFE7
 13568                           postdec1	equ	0xFE5
 13569                           fsr1h	equ	0xFE2
 13570                           fsr1l	equ	0xFE1
 13571                           indf2	equ	0xFDF
 13572                           postinc2	equ	0xFDE
 13573                           postdec2	equ	0xFDD
 13574                           plusw2	equ	0xFDB
 13575                           fsr2h	equ	0xFDA
 13576                           fsr2l	equ	0xFD9
 13577                           status	equ	0xFD8
 13578                           
 13579 ;; *************** function _vscp_getManufacturerId *****************
 13580 ;; Defined at:
 13581 ;;		line 2636 in file "../main.c"
 13582 ;; Parameters:    Size  Location     Type
 13583 ;;  idx             1    wreg     unsigned char 
 13584 ;; Auto vars:     Size  Location     Type
 13585 ;;  idx             1   17[COMRAM] unsigned char 
 13586 ;; Return value:  Size  Location     Type
 13587 ;;                  1    wreg      unsigned char 
 13588 ;; Registers used:
 13589 ;;		wreg, status,2, status,0, cstack
 13590 ;; Tracked objects:
 13591 ;;		On entry : 0/0
 13592 ;;		On exit  : 0/0
 13593 ;;		Unchanged: 0/0
 13594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13595 ;;      Params:         0       0       0       0       0       0       0
 13596 ;;      Locals:         1       0       0       0       0       0       0
 13597 ;;      Temps:          0       0       0       0       0       0       0
 13598 ;;      Totals:         1       0       0       0       0       0       0
 13599 ;;Total ram usage:        1 bytes
 13600 ;; Hardware stack levels used:    1
 13601 ;; Hardware stack levels required when called:    3
 13602 ;; This function calls:
 13603 ;;		_readEEPROM
 13604 ;; This function is called by:
 13605 ;;		_vscp_readStdReg
 13606 ;;		_vscp_writeStdReg
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           	psect	text50
 13611  0053D8                     __ptext50:
 13612                           	opt stack 0
 13613  0053D8                     _vscp_getManufacturerId:
 13614                           	opt stack 25
 13615                           
 13616                           ; BSR set to: 0
 13617                           ;incstack = 0
 13618                           ;incstack = 0
 13619                           ;vscp_getManufacturerId@idx stored from wreg
 13620  0053D8  CFE8 F012          	movff	wreg,vscp_getManufacturerId@idx
 13621                           
 13622                           ;main.c: 2637: return readEEPROM(0x09 + idx);
 13623  0053DC  0E09               	movlw	9
 13624  0053DE  2412               	addwf	vscp_getManufacturerId@idx,w,c
 13625  0053E0  6E0E               	movwf	?_readEEPROM,c
 13626  0053E2  6A0F               	clrf	?_readEEPROM+1,c
 13627  0053E4  0E00               	movlw	0
 13628  0053E6  220F               	addwfc	?_readEEPROM+1,f,c
 13629  0053E8  EF1C  F02A         	goto	_readEEPROM	;wreg free
 13630  0053EC                     __end_of_vscp_getManufacturerId:
 13631                           	opt stack 0
 13632                           tblptru	equ	0xFF8
 13633                           tblptrh	equ	0xFF7
 13634                           tblptrl	equ	0xFF6
 13635                           tablat	equ	0xFF5
 13636                           prodh	equ	0xFF4
 13637                           prodl	equ	0xFF3
 13638                           intcon	equ	0xFF2
 13639                           postinc0	equ	0xFEE
 13640                           wreg	equ	0xFE8
 13641                           indf1	equ	0xFE7
 13642                           postdec1	equ	0xFE5
 13643                           fsr1h	equ	0xFE2
 13644                           fsr1l	equ	0xFE1
 13645                           indf2	equ	0xFDF
 13646                           postinc2	equ	0xFDE
 13647                           postdec2	equ	0xFDD
 13648                           plusw2	equ	0xFDB
 13649                           fsr2h	equ	0xFDA
 13650                           fsr2l	equ	0xFD9
 13651                           status	equ	0xFD8
 13652                           
 13653 ;; *************** function _vscp_getUserID *****************
 13654 ;; Defined at:
 13655 ;;		line 2616 in file "../main.c"
 13656 ;; Parameters:    Size  Location     Type
 13657 ;;  idx             1    wreg     unsigned char 
 13658 ;; Auto vars:     Size  Location     Type
 13659 ;;  idx             1   17[COMRAM] unsigned char 
 13660 ;; Return value:  Size  Location     Type
 13661 ;;                  1    wreg      unsigned char 
 13662 ;; Registers used:
 13663 ;;		wreg, status,2, status,0, cstack
 13664 ;; Tracked objects:
 13665 ;;		On entry : 0/0
 13666 ;;		On exit  : 0/0
 13667 ;;		Unchanged: 0/0
 13668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13669 ;;      Params:         0       0       0       0       0       0       0
 13670 ;;      Locals:         1       0       0       0       0       0       0
 13671 ;;      Temps:          0       0       0       0       0       0       0
 13672 ;;      Totals:         1       0       0       0       0       0       0
 13673 ;;Total ram usage:        1 bytes
 13674 ;; Hardware stack levels used:    1
 13675 ;; Hardware stack levels required when called:    3
 13676 ;; This function calls:
 13677 ;;		_readEEPROM
 13678 ;; This function is called by:
 13679 ;;		_vscp_readStdReg
 13680 ;;		_vscp_writeStdReg
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           	psect	text51
 13685  0053EC                     __ptext51:
 13686                           	opt stack 0
 13687  0053EC                     _vscp_getUserID:
 13688                           	opt stack 25
 13689                           
 13690                           ;incstack = 0
 13691                           ;incstack = 0
 13692                           ;vscp_getUserID@idx stored from wreg
 13693  0053EC  CFE8 F012          	movff	wreg,vscp_getUserID@idx
 13694                           
 13695                           ;main.c: 2617: return readEEPROM(0x04 + idx);
 13696  0053F0  0E04               	movlw	4
 13697  0053F2  2412               	addwf	vscp_getUserID@idx,w,c
 13698  0053F4  6E0E               	movwf	?_readEEPROM,c
 13699  0053F6  6A0F               	clrf	?_readEEPROM+1,c
 13700  0053F8  0E00               	movlw	0
 13701  0053FA  220F               	addwfc	?_readEEPROM+1,f,c
 13702  0053FC  EF1C  F02A         	goto	_readEEPROM	;wreg free
 13703  005400                     __end_of_vscp_getUserID:
 13704                           	opt stack 0
 13705                           tblptru	equ	0xFF8
 13706                           tblptrh	equ	0xFF7
 13707                           tblptrl	equ	0xFF6
 13708                           tablat	equ	0xFF5
 13709                           prodh	equ	0xFF4
 13710                           prodl	equ	0xFF3
 13711                           intcon	equ	0xFF2
 13712                           postinc0	equ	0xFEE
 13713                           wreg	equ	0xFE8
 13714                           indf1	equ	0xFE7
 13715                           postdec1	equ	0xFE5
 13716                           fsr1h	equ	0xFE2
 13717                           fsr1l	equ	0xFE1
 13718                           indf2	equ	0xFDF
 13719                           postinc2	equ	0xFDE
 13720                           postdec2	equ	0xFDD
 13721                           plusw2	equ	0xFDB
 13722                           fsr2h	equ	0xFDA
 13723                           fsr2l	equ	0xFD9
 13724                           status	equ	0xFD8
 13725                           
 13726 ;; *************** function _vscp_getMDF_URL *****************
 13727 ;; Defined at:
 13728 ;;		line 2607 in file "../main.c"
 13729 ;; Parameters:    Size  Location     Type
 13730 ;;  idx             1    wreg     unsigned char 
 13731 ;; Auto vars:     Size  Location     Type
 13732 ;;  idx             1   14[COMRAM] unsigned char 
 13733 ;; Return value:  Size  Location     Type
 13734 ;;                  1    wreg      unsigned char 
 13735 ;; Registers used:
 13736 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13737 ;; Tracked objects:
 13738 ;;		On entry : F/0
 13739 ;;		On exit  : F/0
 13740 ;;		Unchanged: F/0
 13741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13742 ;;      Params:         0       0       0       0       0       0       0
 13743 ;;      Locals:         1       0       0       0       0       0       0
 13744 ;;      Temps:          1       0       0       0       0       0       0
 13745 ;;      Totals:         2       0       0       0       0       0       0
 13746 ;;Total ram usage:        2 bytes
 13747 ;; Hardware stack levels used:    1
 13748 ;; Hardware stack levels required when called:    2
 13749 ;; This function calls:
 13750 ;;		Nothing
 13751 ;; This function is called by:
 13752 ;;		_vscp_readStdReg
 13753 ;;		_vscp_handleProtocolEvent
 13754 ;; This function uses a non-reentrant model
 13755 ;;
 13756                           
 13757                           	psect	text52
 13758  005390                     __ptext52:
 13759                           	opt stack 0
 13760  005390                     _vscp_getMDF_URL:
 13761                           	opt stack 26
 13762                           
 13763                           ;incstack = 0
 13764                           ;incstack = 0
 13765                           ;vscp_getMDF_URL@idx stored from wreg
 13766  005390  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13767                           
 13768                           ; BSR set to: 0
 13769                           ;main.c: 2608: return vscp_deviceURL[ idx ];
 13770  005394  500F               	movf	vscp_getMDF_URL@idx,w,c
 13771  005396  0F00               	addlw	low _vscp_deviceURL
 13772  005398  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13773  00539A  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13774  00539E  0E06               	movlw	high __smallconst
 13775  0053A0  6EF7               	movwf	tblptrh,c
 13776  0053A2  0008               	tblrd		*
 13777  0053A4  50F5               	movf	tablat,w,c
 13778                           
 13779                           ; BSR set to: 0
 13780  0053A6  0012               	return	
 13781  0053A8                     __end_of_vscp_getMDF_URL:
 13782                           	opt stack 0
 13783                           tblptru	equ	0xFF8
 13784                           tblptrh	equ	0xFF7
 13785                           tblptrl	equ	0xFF6
 13786                           tablat	equ	0xFF5
 13787                           prodh	equ	0xFF4
 13788                           prodl	equ	0xFF3
 13789                           intcon	equ	0xFF2
 13790                           postinc0	equ	0xFEE
 13791                           wreg	equ	0xFE8
 13792                           indf1	equ	0xFE7
 13793                           postdec1	equ	0xFE5
 13794                           fsr1h	equ	0xFE2
 13795                           fsr1l	equ	0xFE1
 13796                           indf2	equ	0xFDF
 13797                           postinc2	equ	0xFDE
 13798                           postdec2	equ	0xFDD
 13799                           plusw2	equ	0xFDB
 13800                           fsr2h	equ	0xFDA
 13801                           fsr2l	equ	0xFD9
 13802                           status	equ	0xFD8
 13803                           
 13804 ;; *************** function _vscp_getGUID *****************
 13805 ;; Defined at:
 13806 ;;		line 2584 in file "../main.c"
 13807 ;; Parameters:    Size  Location     Type
 13808 ;;  idx             1    wreg     unsigned char 
 13809 ;; Auto vars:     Size  Location     Type
 13810 ;;  idx             1   17[COMRAM] unsigned char 
 13811 ;; Return value:  Size  Location     Type
 13812 ;;                  1    wreg      unsigned char 
 13813 ;; Registers used:
 13814 ;;		wreg, status,2, status,0, cstack
 13815 ;; Tracked objects:
 13816 ;;		On entry : 0/0
 13817 ;;		On exit  : 0/0
 13818 ;;		Unchanged: 0/0
 13819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13820 ;;      Params:         0       0       0       0       0       0       0
 13821 ;;      Locals:         1       0       0       0       0       0       0
 13822 ;;      Temps:          0       0       0       0       0       0       0
 13823 ;;      Totals:         1       0       0       0       0       0       0
 13824 ;;Total ram usage:        1 bytes
 13825 ;; Hardware stack levels used:    1
 13826 ;; Hardware stack levels required when called:    3
 13827 ;; This function calls:
 13828 ;;		_readEEPROM
 13829 ;; This function is called by:
 13830 ;;		_vscp_readStdReg
 13831 ;;		_vscp_writeStdReg
 13832 ;;		_vscp_handleProtocolEvent
 13833 ;; This function uses a non-reentrant model
 13834 ;;
 13835                           
 13836                           	psect	text53
 13837  005400                     __ptext53:
 13838                           	opt stack 0
 13839  005400                     _vscp_getGUID:
 13840                           	opt stack 25
 13841                           
 13842                           ; BSR set to: 0
 13843                           ;incstack = 0
 13844                           ;incstack = 0
 13845                           ;vscp_getGUID@idx stored from wreg
 13846  005400  CFE8 F012          	movff	wreg,vscp_getGUID@idx
 13847                           
 13848                           ;main.c: 2585: return readEEPROM(0x11 + idx);
 13849  005404  0E11               	movlw	17
 13850  005406  2412               	addwf	vscp_getGUID@idx,w,c
 13851  005408  6E0E               	movwf	?_readEEPROM,c
 13852  00540A  6A0F               	clrf	?_readEEPROM+1,c
 13853  00540C  0E00               	movlw	0
 13854  00540E  220F               	addwfc	?_readEEPROM+1,f,c
 13855  005410  EF1C  F02A         	goto	_readEEPROM	;wreg free
 13856  005414                     __end_of_vscp_getGUID:
 13857                           	opt stack 0
 13858                           tblptru	equ	0xFF8
 13859                           tblptrh	equ	0xFF7
 13860                           tblptrl	equ	0xFF6
 13861                           tablat	equ	0xFF5
 13862                           prodh	equ	0xFF4
 13863                           prodl	equ	0xFF3
 13864                           intcon	equ	0xFF2
 13865                           postinc0	equ	0xFEE
 13866                           wreg	equ	0xFE8
 13867                           indf1	equ	0xFE7
 13868                           postdec1	equ	0xFE5
 13869                           fsr1h	equ	0xFE2
 13870                           fsr1l	equ	0xFE1
 13871                           indf2	equ	0xFDF
 13872                           postinc2	equ	0xFDE
 13873                           postdec2	equ	0xFDD
 13874                           plusw2	equ	0xFDB
 13875                           fsr2h	equ	0xFDA
 13876                           fsr2l	equ	0xFD9
 13877                           status	equ	0xFD8
 13878                           
 13879 ;; *************** function _vscp_getSubMinorVersion *****************
 13880 ;; Defined at:
 13881 ;;		line 2573 in file "../main.c"
 13882 ;; Parameters:    Size  Location     Type
 13883 ;;		None
 13884 ;; Auto vars:     Size  Location     Type
 13885 ;;		None
 13886 ;; Return value:  Size  Location     Type
 13887 ;;                  1    wreg      unsigned char 
 13888 ;; Registers used:
 13889 ;;		wreg
 13890 ;; Tracked objects:
 13891 ;;		On entry : F/0
 13892 ;;		On exit  : F/0
 13893 ;;		Unchanged: F/0
 13894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13895 ;;      Params:         0       0       0       0       0       0       0
 13896 ;;      Locals:         0       0       0       0       0       0       0
 13897 ;;      Temps:          0       0       0       0       0       0       0
 13898 ;;      Totals:         0       0       0       0       0       0       0
 13899 ;;Total ram usage:        0 bytes
 13900 ;; Hardware stack levels used:    1
 13901 ;; Hardware stack levels required when called:    2
 13902 ;; This function calls:
 13903 ;;		Nothing
 13904 ;; This function is called by:
 13905 ;;		_vscp_readStdReg
 13906 ;; This function uses a non-reentrant model
 13907 ;;
 13908                           
 13909                           	psect	text54
 13910  0054D6                     __ptext54:
 13911                           	opt stack 0
 13912  0054D6                     _vscp_getSubMinorVersion:
 13913                           	opt stack 26
 13914                           
 13915                           ; BSR set to: 0
 13916                           
 13917                           ; BSR set to: 0
 13918                           ;main.c: 2574: return 1;
 13919                           
 13920                           ;incstack = 0
 13921                           ;incstack = 0
 13922  0054D6  0C01               	retlw	1
 13923  0054D8                     __end_of_vscp_getSubMinorVersion:
 13924                           	opt stack 0
 13925                           tblptru	equ	0xFF8
 13926                           tblptrh	equ	0xFF7
 13927                           tblptrl	equ	0xFF6
 13928                           tablat	equ	0xFF5
 13929                           prodh	equ	0xFF4
 13930                           prodl	equ	0xFF3
 13931                           intcon	equ	0xFF2
 13932                           postinc0	equ	0xFEE
 13933                           wreg	equ	0xFE8
 13934                           indf1	equ	0xFE7
 13935                           postdec1	equ	0xFE5
 13936                           fsr1h	equ	0xFE2
 13937                           fsr1l	equ	0xFE1
 13938                           indf2	equ	0xFDF
 13939                           postinc2	equ	0xFDE
 13940                           postdec2	equ	0xFDD
 13941                           plusw2	equ	0xFDB
 13942                           fsr2h	equ	0xFDA
 13943                           fsr2l	equ	0xFD9
 13944                           status	equ	0xFD8
 13945                           
 13946 ;; *************** function _vscp_getMinorVersion *****************
 13947 ;; Defined at:
 13948 ;;		line 2564 in file "../main.c"
 13949 ;; Parameters:    Size  Location     Type
 13950 ;;		None
 13951 ;; Auto vars:     Size  Location     Type
 13952 ;;		None
 13953 ;; Return value:  Size  Location     Type
 13954 ;;                  1    wreg      unsigned char 
 13955 ;; Registers used:
 13956 ;;		wreg
 13957 ;; Tracked objects:
 13958 ;;		On entry : F/0
 13959 ;;		On exit  : F/0
 13960 ;;		Unchanged: F/0
 13961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13962 ;;      Params:         0       0       0       0       0       0       0
 13963 ;;      Locals:         0       0       0       0       0       0       0
 13964 ;;      Temps:          0       0       0       0       0       0       0
 13965 ;;      Totals:         0       0       0       0       0       0       0
 13966 ;;Total ram usage:        0 bytes
 13967 ;; Hardware stack levels used:    1
 13968 ;; Hardware stack levels required when called:    2
 13969 ;; This function calls:
 13970 ;;		Nothing
 13971 ;; This function is called by:
 13972 ;;		_vscp_readStdReg
 13973 ;; This function uses a non-reentrant model
 13974 ;;
 13975                           
 13976                           	psect	text55
 13977  0054D8                     __ptext55:
 13978                           	opt stack 0
 13979  0054D8                     _vscp_getMinorVersion:
 13980                           	opt stack 26
 13981                           
 13982                           ; BSR set to: 0
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;main.c: 2565: return 2;
 13986                           
 13987                           ; BSR set to: 0
 13988                           ;incstack = 0
 13989                           ;incstack = 0
 13990  0054D8  0C02               	retlw	2
 13991  0054DA                     __end_of_vscp_getMinorVersion:
 13992                           	opt stack 0
 13993                           tblptru	equ	0xFF8
 13994                           tblptrh	equ	0xFF7
 13995                           tblptrl	equ	0xFF6
 13996                           tablat	equ	0xFF5
 13997                           prodh	equ	0xFF4
 13998                           prodl	equ	0xFF3
 13999                           intcon	equ	0xFF2
 14000                           postinc0	equ	0xFEE
 14001                           wreg	equ	0xFE8
 14002                           indf1	equ	0xFE7
 14003                           postdec1	equ	0xFE5
 14004                           fsr1h	equ	0xFE2
 14005                           fsr1l	equ	0xFE1
 14006                           indf2	equ	0xFDF
 14007                           postinc2	equ	0xFDE
 14008                           postdec2	equ	0xFDD
 14009                           plusw2	equ	0xFDB
 14010                           fsr2h	equ	0xFDA
 14011                           fsr2l	equ	0xFD9
 14012                           status	equ	0xFD8
 14013                           
 14014 ;; *************** function _vscp_getMajorVersion *****************
 14015 ;; Defined at:
 14016 ;;		line 2555 in file "../main.c"
 14017 ;; Parameters:    Size  Location     Type
 14018 ;;		None
 14019 ;; Auto vars:     Size  Location     Type
 14020 ;;		None
 14021 ;; Return value:  Size  Location     Type
 14022 ;;                  1    wreg      unsigned char 
 14023 ;; Registers used:
 14024 ;;		wreg
 14025 ;; Tracked objects:
 14026 ;;		On entry : F/0
 14027 ;;		On exit  : F/0
 14028 ;;		Unchanged: F/0
 14029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14030 ;;      Params:         0       0       0       0       0       0       0
 14031 ;;      Locals:         0       0       0       0       0       0       0
 14032 ;;      Temps:          0       0       0       0       0       0       0
 14033 ;;      Totals:         0       0       0       0       0       0       0
 14034 ;;Total ram usage:        0 bytes
 14035 ;; Hardware stack levels used:    1
 14036 ;; Hardware stack levels required when called:    2
 14037 ;; This function calls:
 14038 ;;		Nothing
 14039 ;; This function is called by:
 14040 ;;		_vscp_readStdReg
 14041 ;; This function uses a non-reentrant model
 14042 ;;
 14043                           
 14044                           	psect	text56
 14045  0054DA                     __ptext56:
 14046                           	opt stack 0
 14047  0054DA                     _vscp_getMajorVersion:
 14048                           	opt stack 26
 14049                           
 14050                           ; BSR set to: 0
 14051                           
 14052                           ; BSR set to: 0
 14053                           ;main.c: 2556: return 1;
 14054                           
 14055                           ; BSR set to: 0
 14056                           ;incstack = 0
 14057                           ;incstack = 0
 14058  0054DA  0C01               	retlw	1
 14059  0054DC                     __end_of_vscp_getMajorVersion:
 14060                           	opt stack 0
 14061                           tblptru	equ	0xFF8
 14062                           tblptrh	equ	0xFF7
 14063                           tblptrl	equ	0xFF6
 14064                           tablat	equ	0xFF5
 14065                           prodh	equ	0xFF4
 14066                           prodl	equ	0xFF3
 14067                           intcon	equ	0xFF2
 14068                           postinc0	equ	0xFEE
 14069                           wreg	equ	0xFE8
 14070                           indf1	equ	0xFE7
 14071                           postdec1	equ	0xFE5
 14072                           fsr1h	equ	0xFE2
 14073                           fsr1l	equ	0xFE1
 14074                           indf2	equ	0xFDF
 14075                           postinc2	equ	0xFDE
 14076                           postdec2	equ	0xFDD
 14077                           plusw2	equ	0xFDB
 14078                           fsr2h	equ	0xFDA
 14079                           fsr2l	equ	0xFD9
 14080                           status	equ	0xFD8
 14081                           
 14082 ;; *************** function _vscp_newNodeOnline *****************
 14083 ;; Defined at:
 14084 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
 14085 ;; Parameters:    Size  Location     Type
 14086 ;;		None
 14087 ;; Auto vars:     Size  Location     Type
 14088 ;;		None
 14089 ;; Return value:  Size  Location     Type
 14090 ;;		None               void
 14091 ;; Registers used:
 14092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14093 ;; Tracked objects:
 14094 ;;		On entry : F/0
 14095 ;;		On exit  : F/0
 14096 ;;		Unchanged: 0/0
 14097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14098 ;;      Params:         0       0       0       0       0       0       0
 14099 ;;      Locals:         0       0       0       0       0       0       0
 14100 ;;      Temps:          1       0       0       0       0       0       0
 14101 ;;      Totals:         1       0       0       0       0       0       0
 14102 ;;Total ram usage:        1 bytes
 14103 ;; Hardware stack levels used:    1
 14104 ;; Hardware stack levels required when called:    7
 14105 ;; This function calls:
 14106 ;;		_vscp_sendEvent
 14107 ;; This function is called by:
 14108 ;;		_vscp_handleProtocolEvent
 14109 ;; This function uses a non-reentrant model
 14110 ;;
 14111                           
 14112                           	psect	text57
 14113  005150                     __ptext57:
 14114                           	opt stack 0
 14115  005150                     _vscp_newNodeOnline:
 14116                           	opt stack 22
 14117                           
 14118                           ; BSR set to: 0
 14119                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 14120                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;incstack = 0
 14124                           ;incstack = 0
 14125  005150  C0BC  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14126  005154  0E0F               	movlw	15
 14127  005156  1644               	andwf	??_vscp_newNodeOnline,f,c
 14128  005158  0444               	decf	??_vscp_newNodeOnline,w,c
 14129  00515A  E10E               	bnz	l1094
 14130                           
 14131                           ; BSR set to: 0
 14132  00515C  51BA               	movf	_vscp_nickname& (0+255),w,b
 14133  00515E  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14134  005162  62DF               	cpfseq	indf2,c
 14135  005164  D009               	goto	l1094
 14136                           
 14137                           ; BSR set to: 0
 14138                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
 14139  005166  0E80               	movlw	128
 14140  005168  6FCA               	movwf	_vscp_omsg& (0+255),b
 14141                           
 14142                           ; BSR set to: 0
 14143                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
 14144  00516A  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14145                           
 14146                           ; BSR set to: 0
 14147                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
 14148  00516C  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14149  00516E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14150                           
 14151                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
 14152  005170  0E03               	movlw	3
 14153  005172  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;vscp_firmware.c: 506: vscp_sendEvent();
 14157  005174  ECE6  F028         	call	_vscp_sendEvent	;wreg free
 14158  005178                     l1094:
 14159                           
 14160                           ; BSR set to: 0
 14161  005178  0012               	return	
 14162  00517A                     __end_of_vscp_newNodeOnline:
 14163                           	opt stack 0
 14164                           tblptru	equ	0xFF8
 14165                           tblptrh	equ	0xFF7
 14166                           tblptrl	equ	0xFF6
 14167                           tablat	equ	0xFF5
 14168                           prodh	equ	0xFF4
 14169                           prodl	equ	0xFF3
 14170                           intcon	equ	0xFF2
 14171                           postinc0	equ	0xFEE
 14172                           wreg	equ	0xFE8
 14173                           indf1	equ	0xFE7
 14174                           postdec1	equ	0xFE5
 14175                           fsr1h	equ	0xFE2
 14176                           fsr1l	equ	0xFE1
 14177                           indf2	equ	0xFDF
 14178                           postinc2	equ	0xFDE
 14179                           postdec2	equ	0xFDD
 14180                           plusw2	equ	0xFDB
 14181                           fsr2h	equ	0xFDA
 14182                           fsr2l	equ	0xFD9
 14183                           status	equ	0xFD8
 14184                           
 14185 ;; *************** function _vscp_handleDropNickname *****************
 14186 ;; Defined at:
 14187 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
 14188 ;; Parameters:    Size  Location     Type
 14189 ;;		None
 14190 ;; Auto vars:     Size  Location     Type
 14191 ;;  bytes           1   17[COMRAM] unsigned char 
 14192 ;; Return value:  Size  Location     Type
 14193 ;;		None               void
 14194 ;; Registers used:
 14195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14196 ;; Tracked objects:
 14197 ;;		On entry : F/0
 14198 ;;		On exit  : F/0
 14199 ;;		Unchanged: 0/0
 14200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14201 ;;      Params:         0       0       0       0       0       0       0
 14202 ;;      Locals:         1       0       0       0       0       0       0
 14203 ;;      Temps:          0       0       0       0       0       0       0
 14204 ;;      Totals:         1       0       0       0       0       0       0
 14205 ;;Total ram usage:        1 bytes
 14206 ;; Hardware stack levels used:    1
 14207 ;; Hardware stack levels required when called:    5
 14208 ;; This function calls:
 14209 ;;		_vscp_init
 14210 ;;		_vscp_writeNicknamePermanent
 14211 ;; This function is called by:
 14212 ;;		_vscp_handleProtocolEvent
 14213 ;; This function uses a non-reentrant model
 14214 ;;
 14215                           
 14216                           	psect	text58
 14217  0050CA                     __ptext58:
 14218                           	opt stack 0
 14219  0050CA                     _vscp_handleDropNickname:
 14220                           	opt stack 24
 14221                           
 14222                           ; BSR set to: 0
 14223                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14224                           
 14225                           ; BSR set to: 0
 14226                           ;incstack = 0
 14227                           ;incstack = 0
 14228  0050CA  51BC               	movf	_vscp_imsg& (0+255),w,b
 14229  0050CC  0B0F               	andlw	15
 14230  0050CE  6E12               	movwf	vscp_handleDropNickname@bytes,c
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14234  0050D0  5012               	movf	vscp_handleDropNickname@bytes,w,c
 14235  0050D2  E012               	bz	l1090
 14236                           
 14237                           ; BSR set to: 0
 14238  0050D4  51BA               	movf	_vscp_nickname& (0+255),w,b
 14239  0050D6  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14240  0050DA  62DF               	cpfseq	indf2,c
 14241  0050DC  D00D               	goto	l1090
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14245  0050DE  0412               	decf	vscp_handleDropNickname@bytes,w,c
 14246  0050E0  E005               	bz	l1089
 14247                           
 14248                           ; BSR set to: 0
 14249  0050E2  0E01               	movlw	1
 14250  0050E4  6412               	cpfsgt	vscp_handleDropNickname@bytes,c
 14251  0050E6  D008               	goto	l1090
 14252                           
 14253                           ; BSR set to: 0
 14254  0050E8  67C3               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14255  0050EA  D006               	goto	l1090
 14256  0050EC                     l1089:
 14257                           
 14258                           ; BSR set to: 0
 14259                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
 14260  0050EC  69BA               	setf	_vscp_nickname& (0+255),b
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
 14264  0050EE  0EFF               	movlw	255
 14265  0050F0  EC25  F02A         	call	_vscp_writeNicknamePermanent
 14266                           
 14267                           ;vscp_firmware.c: 473: vscp_init();
 14268  0050F4  EC33  F027         	call	_vscp_init	;wreg free
 14269  0050F8                     l1090:
 14270                           
 14271                           ; BSR set to: 0
 14272  0050F8  0012               	return	
 14273  0050FA                     __end_of_vscp_handleDropNickname:
 14274                           	opt stack 0
 14275                           tblptru	equ	0xFF8
 14276                           tblptrh	equ	0xFF7
 14277                           tblptrl	equ	0xFF6
 14278                           tablat	equ	0xFF5
 14279                           prodh	equ	0xFF4
 14280                           prodl	equ	0xFF3
 14281                           intcon	equ	0xFF2
 14282                           postinc0	equ	0xFEE
 14283                           wreg	equ	0xFE8
 14284                           indf1	equ	0xFE7
 14285                           postdec1	equ	0xFE5
 14286                           fsr1h	equ	0xFE2
 14287                           fsr1l	equ	0xFE1
 14288                           indf2	equ	0xFDF
 14289                           postinc2	equ	0xFDE
 14290                           postdec2	equ	0xFDD
 14291                           plusw2	equ	0xFDB
 14292                           fsr2h	equ	0xFDA
 14293                           fsr2l	equ	0xFD9
 14294                           status	equ	0xFD8
 14295                           
 14296 ;; *************** function _vscp_init *****************
 14297 ;; Defined at:
 14298 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
 14299 ;; Parameters:    Size  Location     Type
 14300 ;;		None
 14301 ;; Auto vars:     Size  Location     Type
 14302 ;;		None
 14303 ;; Return value:  Size  Location     Type
 14304 ;;		None               void
 14305 ;; Registers used:
 14306 ;;		wreg, status,2, cstack
 14307 ;; Tracked objects:
 14308 ;;		On entry : 0/1
 14309 ;;		On exit  : F/0
 14310 ;;		Unchanged: 0/0
 14311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14312 ;;      Params:         0       0       0       0       0       0       0
 14313 ;;      Locals:         0       0       0       0       0       0       0
 14314 ;;      Temps:          0       0       0       0       0       0       0
 14315 ;;      Totals:         0       0       0       0       0       0       0
 14316 ;;Total ram usage:        0 bytes
 14317 ;; Hardware stack levels used:    1
 14318 ;; Hardware stack levels required when called:    4
 14319 ;; This function calls:
 14320 ;;		_vscp_readNicknamePermanent
 14321 ;; This function is called by:
 14322 ;;		_main
 14323 ;;		_vscp_handleDropNickname
 14324 ;;		_vscp_handleProtocolEvent
 14325 ;; This function uses a non-reentrant model
 14326 ;;
 14327                           
 14328                           	psect	text59
 14329  004E66                     __ptext59:
 14330                           	opt stack 0
 14331  004E66                     _vscp_init:
 14332                           	opt stack 24
 14333                           
 14334                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
 14335                           
 14336                           ; BSR set to: 0
 14337                           ;incstack = 0
 14338                           ;incstack = 0
 14339  004E66  0E02               	movlw	2
 14340  004E68  6E4D               	movwf	_vscp_initledfunc,c
 14341                           
 14342                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
 14343  004E6A  EC54  F02A         	call	_vscp_readNicknamePermanent	;wreg free
 14344  004E6E  0100               	movlb	0	; () banked
 14345  004E70  6FBA               	movwf	_vscp_nickname& (0+255),b
 14346                           
 14347                           ; BSR set to: 0
 14348                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
 14349  004E72  67BA               	tstfsz	_vscp_nickname& (0+255),b
 14350  004E74  D001               	goto	l1031
 14351                           
 14352                           ; BSR set to: 0
 14353  004E76  69BA               	setf	_vscp_nickname& (0+255),b
 14354  004E78                     l1031:
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
 14358  004E78  6BBC               	clrf	_vscp_imsg& (0+255),b
 14359                           
 14360                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
 14361  004E7A  6BBD               	clrf	(_vscp_imsg+1)& (0+255),b
 14362                           
 14363                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
 14364  004E7C  6BBE               	clrf	(_vscp_imsg+2)& (0+255),b
 14365  004E7E  6BBF               	clrf	(_vscp_imsg+3)& (0+255),b
 14366                           
 14367                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
 14368  004E80  6BC0               	clrf	(_vscp_imsg+4)& (0+255),b
 14369                           
 14370                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
 14371  004E82  6BCA               	clrf	_vscp_omsg& (0+255),b
 14372                           
 14373                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
 14374  004E84  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14375                           
 14376                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
 14377  004E86  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14378  004E88  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14379                           
 14380                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
 14381  004E8A  6BCE               	clrf	(_vscp_omsg+4)& (0+255),b
 14382                           
 14383                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
 14384  004E8C  6A4B               	clrf	_vscp_alarmstatus,c
 14385                           
 14386                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
 14387  004E8E  6A4F               	clrf	_vscp_probe_address,c
 14388                           
 14389                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
 14390  004E90  6BBB               	clrf	_vscp_node_state& (0+255),b
 14391                           
 14392                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
 14393  004E92  6A4E               	clrf	_vscp_node_substate,c
 14394                           
 14395                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
 14396  004E94  6A50               	clrf	_vscp_probe_cnt,c
 14397                           
 14398                           ;vscp_firmware.c: 148: vscp_page_select = 0;
 14399  004E96  6A46               	clrf	_vscp_page_select,c
 14400  004E98  6A47               	clrf	_vscp_page_select+1,c
 14401                           
 14402                           ;vscp_firmware.c: 151: vscp_timer = 0;
 14403  004E9A  0101               	movlb	1	; () banked
 14404  004E9C  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14405  004E9E  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14406                           
 14407                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
 14408  004EA0  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14409  004EA2  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14410                           
 14411                           ;vscp_firmware.c: 153: vscp_second = 0;
 14412  004EA4  6A51               	clrf	_vscp_second,c
 14413                           
 14414                           ;vscp_firmware.c: 154: vscp_minute = 0;
 14415  004EA6  0100               	movlb	0	; () banked
 14416  004EA8  6BB9               	clrf	_vscp_minute& (0+255),b
 14417                           
 14418                           ;vscp_firmware.c: 155: vscp_hour = 0;
 14419  004EAA  6BB7               	clrf	_vscp_hour& (0+255),b
 14420                           
 14421                           ; BSR set to: 0
 14422  004EAC  0012               	return	
 14423  004EAE                     __end_of_vscp_init:
 14424                           	opt stack 0
 14425                           tblptru	equ	0xFF8
 14426                           tblptrh	equ	0xFF7
 14427                           tblptrl	equ	0xFF6
 14428                           tablat	equ	0xFF5
 14429                           prodh	equ	0xFF4
 14430                           prodl	equ	0xFF3
 14431                           intcon	equ	0xFF2
 14432                           postinc0	equ	0xFEE
 14433                           wreg	equ	0xFE8
 14434                           indf1	equ	0xFE7
 14435                           postdec1	equ	0xFE5
 14436                           fsr1h	equ	0xFE2
 14437                           fsr1l	equ	0xFE1
 14438                           indf2	equ	0xFDF
 14439                           postinc2	equ	0xFDE
 14440                           postdec2	equ	0xFDD
 14441                           plusw2	equ	0xFDB
 14442                           fsr2h	equ	0xFDA
 14443                           fsr2l	equ	0xFD9
 14444                           status	equ	0xFD8
 14445                           
 14446 ;; *************** function _vscp_readNicknamePermanent *****************
 14447 ;; Defined at:
 14448 ;;		line 2756 in file "../main.c"
 14449 ;; Parameters:    Size  Location     Type
 14450 ;;		None
 14451 ;; Auto vars:     Size  Location     Type
 14452 ;;		None
 14453 ;; Return value:  Size  Location     Type
 14454 ;;                  1    wreg      unsigned char 
 14455 ;; Registers used:
 14456 ;;		wreg, status,2, cstack
 14457 ;; Tracked objects:
 14458 ;;		On entry : 0/1
 14459 ;;		On exit  : 0/0
 14460 ;;		Unchanged: 0/0
 14461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14462 ;;      Params:         0       0       0       0       0       0       0
 14463 ;;      Locals:         0       0       0       0       0       0       0
 14464 ;;      Temps:          0       0       0       0       0       0       0
 14465 ;;      Totals:         0       0       0       0       0       0       0
 14466 ;;Total ram usage:        0 bytes
 14467 ;; Hardware stack levels used:    1
 14468 ;; Hardware stack levels required when called:    3
 14469 ;; This function calls:
 14470 ;;		_readEEPROM
 14471 ;; This function is called by:
 14472 ;;		_vscp_init
 14473 ;; This function uses a non-reentrant model
 14474 ;;
 14475                           
 14476                           	psect	text60
 14477  0054A8                     __ptext60:
 14478                           	opt stack 0
 14479  0054A8                     _vscp_readNicknamePermanent:
 14480                           	opt stack 24
 14481                           
 14482                           ;main.c: 2757: return readEEPROM( 0x01 );
 14483                           
 14484                           ; BSR set to: 0
 14485                           ;incstack = 0
 14486                           ;incstack = 0
 14487  0054A8  6A0F               	clrf	?_readEEPROM+1,c
 14488  0054AA  0E01               	movlw	1
 14489  0054AC  6E0E               	movwf	?_readEEPROM,c
 14490  0054AE  EF1C  F02A         	goto	_readEEPROM	;wreg free
 14491  0054B2                     __end_of_vscp_readNicknamePermanent:
 14492                           	opt stack 0
 14493                           tblptru	equ	0xFF8
 14494                           tblptrh	equ	0xFF7
 14495                           tblptrl	equ	0xFF6
 14496                           tablat	equ	0xFF5
 14497                           prodh	equ	0xFF4
 14498                           prodl	equ	0xFF3
 14499                           intcon	equ	0xFF2
 14500                           postinc0	equ	0xFEE
 14501                           wreg	equ	0xFE8
 14502                           indf1	equ	0xFE7
 14503                           postdec1	equ	0xFE5
 14504                           fsr1h	equ	0xFE2
 14505                           fsr1l	equ	0xFE1
 14506                           indf2	equ	0xFDF
 14507                           postinc2	equ	0xFDE
 14508                           postdec2	equ	0xFDD
 14509                           plusw2	equ	0xFDB
 14510                           fsr2h	equ	0xFDA
 14511                           fsr2l	equ	0xFD9
 14512                           status	equ	0xFD8
 14513                           
 14514 ;; *************** function _vscp_handleSetNickname *****************
 14515 ;; Defined at:
 14516 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
 14517 ;; Parameters:    Size  Location     Type
 14518 ;;		None
 14519 ;; Auto vars:     Size  Location     Type
 14520 ;;		None
 14521 ;; Return value:  Size  Location     Type
 14522 ;;		None               void
 14523 ;; Registers used:
 14524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14525 ;; Tracked objects:
 14526 ;;		On entry : F/0
 14527 ;;		On exit  : 0/0
 14528 ;;		Unchanged: 0/0
 14529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14530 ;;      Params:         0       0       0       0       0       0       0
 14531 ;;      Locals:         0       0       0       0       0       0       0
 14532 ;;      Temps:          0       0       0       0       0       0       0
 14533 ;;      Totals:         0       0       0       0       0       0       0
 14534 ;;Total ram usage:        0 bytes
 14535 ;; Hardware stack levels used:    1
 14536 ;; Hardware stack levels required when called:    4
 14537 ;; This function calls:
 14538 ;;		_vscp_writeNicknamePermanent
 14539 ;;		_vscp_setSegmentCRC
 14540 ;; This function is called by:
 14541 ;;		_vscp_handleProtocolEvent
 14542 ;; This function uses a non-reentrant model
 14543 ;;
 14544                           
 14545                           	psect	text61
 14546  005264                     __ptext61:
 14547                           	opt stack 0
 14548  005264                     _vscp_handleSetNickname:
 14549                           	opt stack 25
 14550                           
 14551                           ; BSR set to: 0
 14552                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 14553                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14554                           
 14555                           ;incstack = 0
 14556                           ;incstack = 0
 14557  005264  51BC               	movf	_vscp_imsg& (0+255),w,b
 14558  005266  0B0F               	andlw	15
 14559  005268  0A02               	xorlw	2
 14560  00526A  E10D               	bnz	l1083
 14561                           
 14562                           ; BSR set to: 0
 14563  00526C  51BA               	movf	_vscp_nickname& (0+255),w,b
 14564  00526E  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14565  005272  62DF               	cpfseq	indf2,c
 14566  005274  D008               	goto	l1083
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
 14570  005276  C0C3  F0BA         	movff	_vscp_imsg+7,_vscp_nickname
 14571                           
 14572                           ; BSR set to: 0
 14573                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
 14574  00527A  51BA               	movf	_vscp_nickname& (0+255),w,b
 14575  00527C  EC25  F02A         	call	_vscp_writeNicknamePermanent
 14576                           
 14577                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
 14578  005280  0E40               	movlw	64
 14579  005282  EC13  F02A         	call	_vscp_setSegmentCRC
 14580  005286                     l1083:
 14581  005286  0012               	return	
 14582  005288                     __end_of_vscp_handleSetNickname:
 14583                           	opt stack 0
 14584                           tblptru	equ	0xFF8
 14585                           tblptrh	equ	0xFF7
 14586                           tblptrl	equ	0xFF6
 14587                           tablat	equ	0xFF5
 14588                           prodh	equ	0xFF4
 14589                           prodl	equ	0xFF3
 14590                           intcon	equ	0xFF2
 14591                           postinc0	equ	0xFEE
 14592                           wreg	equ	0xFE8
 14593                           indf1	equ	0xFE7
 14594                           postdec1	equ	0xFE5
 14595                           fsr1h	equ	0xFE2
 14596                           fsr1l	equ	0xFE1
 14597                           indf2	equ	0xFDF
 14598                           postinc2	equ	0xFDE
 14599                           postdec2	equ	0xFDD
 14600                           plusw2	equ	0xFDB
 14601                           fsr2h	equ	0xFDA
 14602                           fsr2l	equ	0xFD9
 14603                           status	equ	0xFD8
 14604                           
 14605 ;; *************** function _vscp_handleHeartbeat *****************
 14606 ;; Defined at:
 14607 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
 14608 ;; Parameters:    Size  Location     Type
 14609 ;;		None
 14610 ;; Auto vars:     Size  Location     Type
 14611 ;;		None
 14612 ;; Return value:  Size  Location     Type
 14613 ;;		None               void
 14614 ;; Registers used:
 14615 ;;		wreg, status,2, status,0, cstack
 14616 ;; Tracked objects:
 14617 ;;		On entry : F/0
 14618 ;;		On exit  : 0/0
 14619 ;;		Unchanged: 0/0
 14620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14621 ;;      Params:         0       0       0       0       0       0       0
 14622 ;;      Locals:         0       0       0       0       0       0       0
 14623 ;;      Temps:          0       0       0       0       0       0       0
 14624 ;;      Totals:         0       0       0       0       0       0       0
 14625 ;;Total ram usage:        0 bytes
 14626 ;; Hardware stack levels used:    1
 14627 ;; Hardware stack levels required when called:    4
 14628 ;; This function calls:
 14629 ;;		_vscp_writeNicknamePermanent
 14630 ;;		_vscp_getSegmentCRC
 14631 ;;		_vscp_setSegmentCRC
 14632 ;; This function is called by:
 14633 ;;		_vscp_handleProtocolEvent
 14634 ;; This function uses a non-reentrant model
 14635 ;;
 14636                           
 14637                           	psect	text62
 14638  004F38                     __ptext62:
 14639                           	opt stack 0
 14640  004F38                     _vscp_handleHeartbeat:
 14641                           	opt stack 25
 14642                           
 14643                           ; BSR set to: 0
 14644                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
 14645                           
 14646                           ;incstack = 0
 14647                           ;incstack = 0
 14648  004F38  EC59  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14649  004F3C  0900               	iorlw	0
 14650  004F3E  E116               	bnz	l11202
 14651                           
 14652                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14653                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14654  004F40  0100               	movlb	0	; () banked
 14655  004F42  51BC               	movf	_vscp_imsg& (0+255),w,b
 14656  004F44  0B0F               	andlw	15
 14657  004F46  0A05               	xorlw	5
 14658  004F48  E115               	bnz	l1079
 14659                           
 14660                           ; BSR set to: 0
 14661  004F4A  EC59  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14662  004F4E  0100               	movlb	0	; () banked
 14663  004F50  19C2               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14664  004F52  E010               	bz	l1079
 14665                           
 14666                           ; BSR set to: 0
 14667                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14668  004F54  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14669  004F56  EC13  F02A         	call	_vscp_setSegmentCRC
 14670                           
 14671                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
 14672  004F5A  0100               	movlb	0	; () banked
 14673  004F5C  69BA               	setf	_vscp_nickname& (0+255),b
 14674                           
 14675                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
 14676  004F5E  0EFF               	movlw	255
 14677  004F60  EC25  F02A         	call	_vscp_writeNicknamePermanent
 14678                           
 14679                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
 14680  004F64  0E01               	movlw	1
 14681  004F66  0100               	movlb	0	; () banked
 14682  004F68  6FBB               	movwf	_vscp_node_state& (0+255),b
 14683  004F6A  D004               	goto	l1079
 14684  004F6C                     l11202:
 14685                           
 14686                           ;vscp_firmware.c: 403: else {
 14687                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14688  004F6C  0100               	movlb	0	; () banked
 14689  004F6E  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14690  004F70  EC13  F02A         	call	_vscp_setSegmentCRC
 14691  004F74                     l1079:
 14692  004F74  0012               	return	
 14693  004F76                     __end_of_vscp_handleHeartbeat:
 14694                           	opt stack 0
 14695                           tblptru	equ	0xFF8
 14696                           tblptrh	equ	0xFF7
 14697                           tblptrl	equ	0xFF6
 14698                           tablat	equ	0xFF5
 14699                           prodh	equ	0xFF4
 14700                           prodl	equ	0xFF3
 14701                           intcon	equ	0xFF2
 14702                           postinc0	equ	0xFEE
 14703                           wreg	equ	0xFE8
 14704                           indf1	equ	0xFE7
 14705                           postdec1	equ	0xFE5
 14706                           fsr1h	equ	0xFE2
 14707                           fsr1l	equ	0xFE1
 14708                           indf2	equ	0xFDF
 14709                           postinc2	equ	0xFDE
 14710                           postdec2	equ	0xFDD
 14711                           plusw2	equ	0xFDB
 14712                           fsr2h	equ	0xFDA
 14713                           fsr2l	equ	0xFD9
 14714                           status	equ	0xFD8
 14715                           
 14716 ;; *************** function _vscp_goBootloaderMode *****************
 14717 ;; Defined at:
 14718 ;;		line 2739 in file "../main.c"
 14719 ;; Parameters:    Size  Location     Type
 14720 ;;  algorithm       1    wreg     unsigned char 
 14721 ;; Auto vars:     Size  Location     Type
 14722 ;;  algorithm       1   16[COMRAM] unsigned char 
 14723 ;; Return value:  Size  Location     Type
 14724 ;;		None               void
 14725 ;; Registers used:
 14726 ;;		wreg, status,2, status,0, cstack
 14727 ;; Tracked objects:
 14728 ;;		On entry : F/0
 14729 ;;		On exit  : 0/0
 14730 ;;		Unchanged: 0/0
 14731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14732 ;;      Params:         0       0       0       0       0       0       0
 14733 ;;      Locals:         1       0       0       0       0       0       0
 14734 ;;      Temps:          0       0       0       0       0       0       0
 14735 ;;      Totals:         1       0       0       0       0       0       0
 14736 ;;Total ram usage:        1 bytes
 14737 ;; Hardware stack levels used:    1
 14738 ;; Hardware stack levels required when called:    3
 14739 ;; This function calls:
 14740 ;;		_writeEEPROM
 14741 ;; This function is called by:
 14742 ;;		_vscp_handleProtocolEvent
 14743 ;; This function uses a non-reentrant model
 14744 ;;
 14745                           
 14746                           	psect	text63
 14747  0053A8                     __ptext63:
 14748                           	opt stack 0
 14749  0053A8                     _vscp_goBootloaderMode:
 14750                           	opt stack 26
 14751                           
 14752                           ;incstack = 0
 14753                           ;incstack = 0
 14754                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14755  0053A8  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14756                           
 14757                           ; BSR set to: 0
 14758                           ;main.c: 2740: if ( 0x01 == algorithm ) return;
 14759  0053AC  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14760  0053AE  E007               	bz	l594
 14761                           
 14762                           ; BSR set to: 0
 14763                           ;main.c: 2744: writeEEPROM(0x00, 0xff);
 14764  0053B0  6A0F               	clrf	?_writeEEPROM+1,c
 14765  0053B2  6A0E               	clrf	?_writeEEPROM,c
 14766  0053B4  0EFF               	movlw	255
 14767  0053B6  6810               	setf	?_writeEEPROM+2,c
 14768  0053B8  EC0D  F029         	call	_writeEEPROM	;wreg free
 14769  0053BC  00FF               	reset		;# 
 14770  0053BE                     l594:
 14771  0053BE  0012               	return	
 14772  0053C0                     __end_of_vscp_goBootloaderMode:
 14773                           	opt stack 0
 14774                           tblptru	equ	0xFF8
 14775                           tblptrh	equ	0xFF7
 14776                           tblptrl	equ	0xFF6
 14777                           tablat	equ	0xFF5
 14778                           prodh	equ	0xFF4
 14779                           prodl	equ	0xFF3
 14780                           intcon	equ	0xFF2
 14781                           postinc0	equ	0xFEE
 14782                           wreg	equ	0xFE8
 14783                           indf1	equ	0xFE7
 14784                           postdec1	equ	0xFE5
 14785                           fsr1h	equ	0xFE2
 14786                           fsr1l	equ	0xFE1
 14787                           indf2	equ	0xFDF
 14788                           postinc2	equ	0xFDE
 14789                           postdec2	equ	0xFDD
 14790                           plusw2	equ	0xFDB
 14791                           fsr2h	equ	0xFDA
 14792                           fsr2l	equ	0xFD9
 14793                           status	equ	0xFD8
 14794                           
 14795 ;; *************** function _vscp_getMatrixInfo *****************
 14796 ;; Defined at:
 14797 ;;		line 2674 in file "../main.c"
 14798 ;; Parameters:    Size  Location     Type
 14799 ;;  pData           1    wreg     PTR unsigned char 
 14800 ;;		 -> vscp_omsg(13), 
 14801 ;; Auto vars:     Size  Location     Type
 14802 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14803 ;;		 -> vscp_omsg(13), 
 14804 ;;  i               1   14[COMRAM] unsigned char 
 14805 ;; Return value:  Size  Location     Type
 14806 ;;		None               void
 14807 ;; Registers used:
 14808 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14809 ;; Tracked objects:
 14810 ;;		On entry : F/0
 14811 ;;		On exit  : F/0
 14812 ;;		Unchanged: F/0
 14813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14814 ;;      Params:         0       0       0       0       0       0       0
 14815 ;;      Locals:         2       0       0       0       0       0       0
 14816 ;;      Temps:          0       0       0       0       0       0       0
 14817 ;;      Totals:         2       0       0       0       0       0       0
 14818 ;;Total ram usage:        2 bytes
 14819 ;; Hardware stack levels used:    1
 14820 ;; Hardware stack levels required when called:    2
 14821 ;; This function calls:
 14822 ;;		Nothing
 14823 ;; This function is called by:
 14824 ;;		_vscp_handleProtocolEvent
 14825 ;; This function uses a non-reentrant model
 14826 ;;
 14827                           
 14828                           	psect	text64
 14829  005346                     __ptext64:
 14830                           	opt stack 0
 14831  005346                     _vscp_getMatrixInfo:
 14832                           	opt stack 27
 14833                           
 14834                           ;incstack = 0
 14835                           ;incstack = 0
 14836                           ;vscp_getMatrixInfo@pData stored from wreg
 14837  005346  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14838                           
 14839                           ; BSR set to: 0
 14840                           ;main.c: 2675: uint8_t i;
 14841                           ;main.c: 2679: for (i = 0; i < 8; i++) {
 14842  00534A  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14843  00534C                     l8066:
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;main.c: 2680: pData[ i ] = 0;
 14847  00534C  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14848  00534E  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14849  005350  6ED9               	movwf	fsr2l,c
 14850  005352  6ADA               	clrf	fsr2h,c
 14851  005354  6ADF               	clrf	indf2,c
 14852                           
 14853                           ; BSR set to: 0
 14854  005356  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14855                           
 14856                           ; BSR set to: 0
 14857  005358  0E07               	movlw	7
 14858  00535A  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14859  00535C  D7F7               	goto	l8066
 14860                           
 14861                           ; BSR set to: 0
 14862  00535E  0C07               	retlw	7
 14863  005360                     __end_of_vscp_getMatrixInfo:
 14864                           	opt stack 0
 14865                           tblptru	equ	0xFF8
 14866                           tblptrh	equ	0xFF7
 14867                           tblptrl	equ	0xFF6
 14868                           tablat	equ	0xFF5
 14869                           prodh	equ	0xFF4
 14870                           prodl	equ	0xFF3
 14871                           intcon	equ	0xFF2
 14872                           postinc0	equ	0xFEE
 14873                           wreg	equ	0xFE8
 14874                           indf1	equ	0xFE7
 14875                           postdec1	equ	0xFE5
 14876                           fsr1h	equ	0xFE2
 14877                           fsr1l	equ	0xFE1
 14878                           indf2	equ	0xFDF
 14879                           postinc2	equ	0xFDE
 14880                           postdec2	equ	0xFDD
 14881                           plusw2	equ	0xFDB
 14882                           fsr2h	equ	0xFDA
 14883                           fsr2l	equ	0xFD9
 14884                           status	equ	0xFD8
 14885                           
 14886 ;; *************** function _vscp_handleProbeState *****************
 14887 ;; Defined at:
 14888 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
 14889 ;; Parameters:    Size  Location     Type
 14890 ;;		None
 14891 ;; Auto vars:     Size  Location     Type
 14892 ;;		None
 14893 ;; Return value:  Size  Location     Type
 14894 ;;		None               void
 14895 ;; Registers used:
 14896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14897 ;; Tracked objects:
 14898 ;;		On entry : 0/0
 14899 ;;		On exit  : F/0
 14900 ;;		Unchanged: 0/0
 14901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14902 ;;      Params:         0       0       0       0       0       0       0
 14903 ;;      Locals:         0       0       0       0       0       0       0
 14904 ;;      Temps:          0       0       0       0       0       0       0
 14905 ;;      Totals:         0       0       0       0       0       0       0
 14906 ;;Total ram usage:        0 bytes
 14907 ;; Hardware stack levels used:    1
 14908 ;; Hardware stack levels required when called:    8
 14909 ;; This function calls:
 14910 ;;		_vscp_goActiveState
 14911 ;;		_vscp_sendEvent
 14912 ;;		_vscp_writeNicknamePermanent
 14913 ;;		_vscp_setSegmentCRC
 14914 ;; This function is called by:
 14915 ;;		_main
 14916 ;; This function uses a non-reentrant model
 14917 ;;
 14918                           
 14919                           	psect	text65
 14920  00415A                     __ptext65:
 14921                           	opt stack 0
 14922  00415A                     _vscp_handleProbeState:
 14923                           	opt stack 22
 14924                           
 14925                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
 14926                           
 14927                           ; BSR set to: 0
 14928                           ;incstack = 0
 14929                           ;incstack = 0
 14930  00415A  D058               	goto	l9676
 14931  00415C                     l9606:
 14932                           
 14933                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
 14934  00415C  284F               	incf	_vscp_probe_address,w,c
 14935  00415E  E012               	bz	l9622
 14936                           
 14937                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
 14938  004160  0E81               	movlw	129
 14939  004162  0100               	movlb	0	; () banked
 14940  004164  6FCA               	movwf	_vscp_omsg& (0+255),b
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
 14944  004166  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14945                           
 14946                           ; BSR set to: 0
 14947                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
 14948  004168  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14949  00416A  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14950                           
 14951                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
 14952  00416C  0E02               	movlw	2
 14953  00416E  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14954                           
 14955                           ; BSR set to: 0
 14956                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14957  004170  C04F  F0CF         	movff	_vscp_probe_address,_vscp_omsg+5
 14958                           
 14959                           ; BSR set to: 0
 14960                           ;vscp_firmware.c: 214: vscp_sendEvent();
 14961  004174  ECE6  F028         	call	_vscp_sendEvent	;wreg free
 14962                           
 14963                           ; BSR set to: 0
 14964                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
 14965  004178  0E01               	movlw	1
 14966  00417A  6E4E               	movwf	_vscp_node_substate,c
 14967  00417C                     l9620:
 14968                           
 14969                           ; BSR set to: 0
 14970                           ;vscp_firmware.c: 217: vscp_timer = 0;
 14971  00417C  0101               	movlb	1	; () banked
 14972  00417E  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14973  004180  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14974                           
 14975                           ;vscp_firmware.c: 219: } else {
 14976  004182  D04A               	goto	l1046
 14977  004184                     l9622:
 14978                           
 14979                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
 14980  004184  0E04               	movlw	4
 14981  004186  0100               	movlb	0	; () banked
 14982  004188  6FBB               	movwf	_vscp_node_state& (0+255),b
 14983                           
 14984                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
 14985  00418A  0E81               	movlw	129
 14986  00418C  6FCA               	movwf	_vscp_omsg& (0+255),b
 14987                           
 14988                           ; BSR set to: 0
 14989                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
 14990  00418E  69CF               	setf	(_vscp_omsg+5)& (0+255),b
 14991                           
 14992                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
 14993  004190  0E07               	movlw	7
 14994  004192  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
 14995                           
 14996                           ; BSR set to: 0
 14997                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
 14998  004194  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14999  004196  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 15000                           
 15001                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
 15002  004198  0E03               	movlw	3
 15003  00419A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 15004                           
 15005                           ; BSR set to: 0
 15006                           ;vscp_firmware.c: 232: vscp_sendEvent();
 15007  00419C  ECE6  F028         	call	_vscp_sendEvent	;wreg free
 15008  0041A0  D03B               	goto	l1046
 15009  0041A2                     l1047:
 15010                           
 15011                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
 15012  0041A2  0100               	movlb	0	; () banked
 15013  0041A4  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 15014  0041A6  D00F               	goto	l9646
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
 15018                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
 15019  0041A8  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
 15020  0041AA  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15021  0041AC  E135               	bnz	l1046
 15022                           
 15023                           ; BSR set to: 0
 15024  0041AE  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
 15025  0041B0  0A03               	xorlw	3
 15026  0041B2  E132               	bnz	l1046
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
 15030  0041B4  664F               	tstfsz	_vscp_probe_address,c
 15031  0041B6  D003               	goto	l9640
 15032                           
 15033                           ; BSR set to: 0
 15034                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
 15035  0041B8  0E02               	movlw	2
 15036  0041BA  6FBB               	movwf	_vscp_node_state& (0+255),b
 15037  0041BC  D7DF               	goto	l9620
 15038  0041BE                     l9640:
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;vscp_firmware.c: 256: vscp_probe_address++;
 15042  0041BE  2A4F               	incf	_vscp_probe_address,f,c
 15043                           
 15044                           ; BSR set to: 0
 15045                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
 15046  0041C0  6A4E               	clrf	_vscp_node_substate,c
 15047  0041C2                     l9644:
 15048                           
 15049                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
 15050  0041C2  6A50               	clrf	_vscp_probe_cnt,c
 15051  0041C4  D029               	goto	l1046
 15052  0041C6                     l9646:
 15053                           
 15054                           ; BSR set to: 0
 15055                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
 15056  0041C6  0EE9               	movlw	233
 15057  0041C8  0101               	movlb	1	; () banked
 15058  0041CA  5D1C               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15059  0041CC  0E03               	movlw	3
 15060  0041CE  591D               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15061  0041D0  E323               	bnc	l1046
 15062                           
 15063                           ; BSR set to: 1
 15064                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
 15065  0041D2  2A50               	incf	_vscp_probe_cnt,f,c
 15066                           
 15067                           ; BSR set to: 1
 15068                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
 15069  0041D4  0E02               	movlw	2
 15070  0041D6  6450               	cpfsgt	_vscp_probe_cnt,c
 15071  0041D8  D017               	goto	l1054
 15072                           
 15073                           ; BSR set to: 1
 15074                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
 15075  0041DA  664F               	tstfsz	_vscp_probe_address,c
 15076  0041DC  D005               	goto	l1055
 15077                           
 15078                           ; BSR set to: 1
 15079                           ;vscp_firmware.c: 274: vscp_probe_address++;
 15080  0041DE  2A4F               	incf	_vscp_probe_address,f,c
 15081                           
 15082                           ; BSR set to: 1
 15083                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
 15084  0041E0  6A4E               	clrf	_vscp_node_substate,c
 15085                           
 15086                           ; BSR set to: 1
 15087                           ;vscp_firmware.c: 276: vscp_timer = 0;
 15088  0041E2  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 15089  0041E4  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15090  0041E6  D7ED               	goto	l9644
 15091  0041E8                     l1055:
 15092                           
 15093                           ; BSR set to: 1
 15094                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
 15095  0041E8  C04F  F0BA         	movff	_vscp_probe_address,_vscp_nickname
 15096                           
 15097                           ; BSR set to: 1
 15098                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
 15099  0041EC  0E03               	movlw	3
 15100  0041EE  0100               	movlb	0	; () banked
 15101  0041F0  6FBB               	movwf	_vscp_node_state& (0+255),b
 15102                           
 15103                           ; BSR set to: 0
 15104                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 15105  0041F2  6A4E               	clrf	_vscp_node_substate,c
 15106                           
 15107                           ; BSR set to: 0
 15108                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
 15109  0041F4  51BA               	movf	_vscp_nickname& (0+255),w,b
 15110  0041F6  EC25  F02A         	call	_vscp_writeNicknamePermanent
 15111                           
 15112                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
 15113  0041FA  0E40               	movlw	64
 15114  0041FC  EC13  F02A         	call	_vscp_setSegmentCRC
 15115                           
 15116                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
 15117  004200  6A50               	clrf	_vscp_probe_cnt,c
 15118                           
 15119                           ;vscp_firmware.c: 290: vscp_goActiveState();
 15120  004202  EC78  F029         	call	_vscp_goActiveState	;wreg free
 15121  004206  D008               	goto	l1046
 15122  004208                     l1054:
 15123                           
 15124                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 15125  004208  6A4E               	clrf	_vscp_node_substate,c
 15126  00420A  D006               	goto	l1046
 15127  00420C                     l9676:
 15128  00420C  504E               	movf	_vscp_node_substate,w,c
 15129                           
 15130                           ; Switch size 1, requested type "space"
 15131                           ; Number of cases is 3, Range of values is 0 to 2
 15132                           ; switch strategies available:
 15133                           ; Name         Instructions Cycles
 15134                           ; simple_byte           10     6 (average)
 15135                           ;	Chosen strategy is simple_byte
 15136  00420E  E0A6               	bz	l9606
 15137  004210  0A01               	xorlw	1	; case 1
 15138  004212  E0C7               	bz	l1047
 15139  004214  0A03               	xorlw	3	; case 2
 15140  004216  E1F8               	bnz	l1054
 15141  004218                     l1046:
 15142                           
 15143                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
 15144  004218  0100               	movlb	0	; () banked
 15145  00421A  6BBC               	clrf	_vscp_imsg& (0+255),b
 15146                           
 15147                           ; BSR set to: 0
 15148  00421C  0012               	return	
 15149  00421E                     __end_of_vscp_handleProbeState:
 15150                           	opt stack 0
 15151                           tblptru	equ	0xFF8
 15152                           tblptrh	equ	0xFF7
 15153                           tblptrl	equ	0xFF6
 15154                           tablat	equ	0xFF5
 15155                           prodh	equ	0xFF4
 15156                           prodl	equ	0xFF3
 15157                           intcon	equ	0xFF2
 15158                           postinc0	equ	0xFEE
 15159                           wreg	equ	0xFE8
 15160                           indf1	equ	0xFE7
 15161                           postdec1	equ	0xFE5
 15162                           fsr1h	equ	0xFE2
 15163                           fsr1l	equ	0xFE1
 15164                           indf2	equ	0xFDF
 15165                           postinc2	equ	0xFDE
 15166                           postdec2	equ	0xFDD
 15167                           plusw2	equ	0xFDB
 15168                           fsr2h	equ	0xFDA
 15169                           fsr2l	equ	0xFD9
 15170                           status	equ	0xFD8
 15171                           
 15172 ;; *************** function _vscp_goActiveState *****************
 15173 ;; Defined at:
 15174 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
 15175 ;; Parameters:    Size  Location     Type
 15176 ;;		None
 15177 ;; Auto vars:     Size  Location     Type
 15178 ;;		None
 15179 ;; Return value:  Size  Location     Type
 15180 ;;		None               void
 15181 ;; Registers used:
 15182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15183 ;; Tracked objects:
 15184 ;;		On entry : 0/0
 15185 ;;		On exit  : F/0
 15186 ;;		Unchanged: 0/0
 15187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15188 ;;      Params:         0       0       0       0       0       0       0
 15189 ;;      Locals:         0       0       0       0       0       0       0
 15190 ;;      Temps:          0       0       0       0       0       0       0
 15191 ;;      Totals:         0       0       0       0       0       0       0
 15192 ;;Total ram usage:        0 bytes
 15193 ;; Hardware stack levels used:    1
 15194 ;; Hardware stack levels required when called:    7
 15195 ;; This function calls:
 15196 ;;		_vscp_sendEvent
 15197 ;; This function is called by:
 15198 ;;		_main
 15199 ;;		_vscp_handleProbeState
 15200 ;; This function uses a non-reentrant model
 15201 ;;
 15202                           
 15203                           	psect	text66
 15204  0052F0                     __ptext66:
 15205                           	opt stack 0
 15206  0052F0                     _vscp_goActiveState:
 15207                           	opt stack 22
 15208                           
 15209                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
 15210                           
 15211                           ; BSR set to: 0
 15212                           ;incstack = 0
 15213                           ;incstack = 0
 15214  0052F0  0E81               	movlw	129
 15215  0052F2  0100               	movlb	0	; () banked
 15216  0052F4  6FCA               	movwf	_vscp_omsg& (0+255),b
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
 15220  0052F6  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 15221                           
 15222                           ; BSR set to: 0
 15223                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
 15224  0052F8  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 15225  0052FA  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 15226                           
 15227                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
 15228  0052FC  0E02               	movlw	2
 15229  0052FE  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 15230                           
 15231                           ; BSR set to: 0
 15232                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
 15233  005300  C0BA  F0CF         	movff	_vscp_nickname,_vscp_omsg+5
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;vscp_firmware.c: 358: vscp_sendEvent();
 15237  005304  ECE6  F028         	call	_vscp_sendEvent	;wreg free
 15238                           
 15239                           ; BSR set to: 0
 15240                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
 15241  005308  0E01               	movlw	1
 15242  00530A  6E4D               	movwf	_vscp_initledfunc,c
 15243                           
 15244                           ; BSR set to: 0
 15245  00530C  0C01               	retlw	1
 15246  00530E                     __end_of_vscp_goActiveState:
 15247                           	opt stack 0
 15248                           tblptru	equ	0xFF8
 15249                           tblptrh	equ	0xFF7
 15250                           tblptrl	equ	0xFF6
 15251                           tablat	equ	0xFF5
 15252                           prodh	equ	0xFF4
 15253                           prodl	equ	0xFF3
 15254                           intcon	equ	0xFF2
 15255                           postinc0	equ	0xFEE
 15256                           wreg	equ	0xFE8
 15257                           indf1	equ	0xFE7
 15258                           postdec1	equ	0xFE5
 15259                           fsr1h	equ	0xFE2
 15260                           fsr1l	equ	0xFE1
 15261                           indf2	equ	0xFDF
 15262                           postinc2	equ	0xFDE
 15263                           postdec2	equ	0xFDD
 15264                           plusw2	equ	0xFDB
 15265                           fsr2h	equ	0xFDA
 15266                           fsr2l	equ	0xFD9
 15267                           status	equ	0xFD8
 15268                           
 15269 ;; *************** function _vscp_sendEvent *****************
 15270 ;; Defined at:
 15271 ;;		line 1270 in file "../../vscp_firmware/common/vscp_firmware.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;		None
 15274 ;; Auto vars:     Size  Location     Type
 15275 ;;  rv              1   66[COMRAM] unsigned char 
 15276 ;; Return value:  Size  Location     Type
 15277 ;;                  1    wreg      unsigned char 
 15278 ;; Registers used:
 15279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15280 ;; Tracked objects:
 15281 ;;		On entry : F/0
 15282 ;;		On exit  : F/0
 15283 ;;		Unchanged: 0/0
 15284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15285 ;;      Params:         0       0       0       0       0       0       0
 15286 ;;      Locals:         1       0       0       0       0       0       0
 15287 ;;      Temps:          0       0       0       0       0       0       0
 15288 ;;      Totals:         1       0       0       0       0       0       0
 15289 ;;Total ram usage:        1 bytes
 15290 ;; Hardware stack levels used:    1
 15291 ;; Hardware stack levels required when called:    6
 15292 ;; This function calls:
 15293 ;;		_sendVSCPFrame
 15294 ;; This function is called by:
 15295 ;;		_doWork
 15296 ;;		_doOneSecondWork
 15297 ;;		_sendTempEvent
 15298 ;;		_vscp_handleProbeState
 15299 ;;		_vscp_goActiveState
 15300 ;;		_vscp_sendHeartBeat
 15301 ;;		_vscp_newNodeOnline
 15302 ;;		_vscp_handleProtocolEvent
 15303 ;; This function uses a non-reentrant model
 15304 ;;
 15305                           
 15306                           	psect	text67
 15307  0051CC                     __ptext67:
 15308                           	opt stack 0
 15309  0051CC                     _vscp_sendEvent:
 15310                           	opt stack 23
 15311                           
 15312                           ; BSR set to: 0
 15313                           ;vscp_firmware.c: 1279: vscp_errorcnt++;
 15314                           
 15315                           ; BSR set to: 0
 15316                           ;incstack = 0
 15317                           ;incstack = 0
 15318  0051CC  C0CC  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15319  0051D0  C0CD  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15320  0051D4  C0CE  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15321  0051D8  C0BA  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15322  0051DC  C0CB  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15323  0051E0  51CA               	movf	_vscp_omsg& (0+255),w,b
 15324  0051E2  0B0F               	andlw	15
 15325  0051E4  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15326  0051E6  0ECF               	movlw	low (_vscp_omsg+5)
 15327  0051E8  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15328  0051EA  EC25  F022         	call	_sendVSCPFrame	;wreg free
 15329  0051EE  6E43               	movwf	vscp_sendEvent@rv,c
 15330                           
 15331                           ; BSR set to: 0
 15332                           ;vscp_firmware.c: 1280: }
 15333                           ;vscp_firmware.c: 1282: return rv;
 15334  0051F0  5043               	movf	vscp_sendEvent@rv,w,c
 15335                           
 15336                           ; BSR set to: 0
 15337  0051F2  0012               	return	
 15338  0051F4                     __end_of_vscp_sendEvent:
 15339                           	opt stack 0
 15340                           tblptru	equ	0xFF8
 15341                           tblptrh	equ	0xFF7
 15342                           tblptrl	equ	0xFF6
 15343                           tablat	equ	0xFF5
 15344                           prodh	equ	0xFF4
 15345                           prodl	equ	0xFF3
 15346                           intcon	equ	0xFF2
 15347                           postinc0	equ	0xFEE
 15348                           wreg	equ	0xFE8
 15349                           indf1	equ	0xFE7
 15350                           postdec1	equ	0xFE5
 15351                           fsr1h	equ	0xFE2
 15352                           fsr1l	equ	0xFE1
 15353                           indf2	equ	0xFDF
 15354                           postinc2	equ	0xFDE
 15355                           postdec2	equ	0xFDD
 15356                           plusw2	equ	0xFDB
 15357                           fsr2h	equ	0xFDA
 15358                           fsr2l	equ	0xFD9
 15359                           status	equ	0xFD8
 15360                           
 15361 ;; *************** function _sendVSCPFrame *****************
 15362 ;; Defined at:
 15363 ;;		line 2845 in file "../main.c"
 15364 ;; Parameters:    Size  Location     Type
 15365 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15366 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15367 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15368 ;;  priority        1    4[BANK0 ] unsigned char 
 15369 ;;  size            1    5[BANK0 ] unsigned char 
 15370 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15371 ;;		 -> vscp_omsg(13), 
 15372 ;; Auto vars:     Size  Location     Type
 15373 ;;  id              4   27[BANK0 ] unsigned long 
 15374 ;; Return value:  Size  Location     Type
 15375 ;;                  1    wreg      unsigned char 
 15376 ;; Registers used:
 15377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15378 ;; Tracked objects:
 15379 ;;		On entry : F/0
 15380 ;;		On exit  : F/0
 15381 ;;		Unchanged: 0/0
 15382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15383 ;;      Params:         0       7       0       0       0       0       0
 15384 ;;      Locals:         0       4       0       0       0       0       0
 15385 ;;      Temps:          0      20       0       0       0       0       0
 15386 ;;      Totals:         0      31       0       0       0       0       0
 15387 ;;Total ram usage:       31 bytes
 15388 ;; Hardware stack levels used:    1
 15389 ;; Hardware stack levels required when called:    5
 15390 ;; This function calls:
 15391 ;;		_sendCANFrame
 15392 ;; This function is called by:
 15393 ;;		_vscp_sendEvent
 15394 ;; This function uses a non-reentrant model
 15395 ;;
 15396                           
 15397                           	psect	text68
 15398  00444A                     __ptext68:
 15399                           	opt stack 0
 15400  00444A                     _sendVSCPFrame:
 15401                           	opt stack 23
 15402                           
 15403                           ; BSR set to: 0
 15404                           ;main.c: 2846: uint32_t id = ((uint32_t) priority << 26) |
 15405                           ;main.c: 2847: ((uint32_t) vscpclass << 16) |
 15406                           ;main.c: 2848: ((uint32_t) vscptype << 8) |
 15407                           ;main.c: 2849: nodeid;
 15408                           
 15409                           ; BSR set to: 0
 15410                           ;incstack = 0
 15411                           ;incstack = 0
 15412  00444A  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15413  00444E  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15414  004450  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15415  004452  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15416  004454  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15417  004458  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15418  00445C  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15419  004460  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15420  004462  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15421  004464  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15422  004466  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15423  004468  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15424  00446A  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15425  00446C  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15426  00446E  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15427  004472  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15428  004476  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15429  004478  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15430  00447A  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15431  00447E  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15432  004480  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15433  004482  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15434  004484  0E1A               	movlw	26
 15435  004486                     u8995:
 15436  004486  90D8               	bcf	status,0,c
 15437  004488  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15438  00448A  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15439  00448C  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15440  00448E  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15441  004490  2EE8               	decfsz	wreg,f,c
 15442  004492  D7F9               	goto	u8995
 15443  004494  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15444  004496  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15445  004498  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15446  00449A  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15447  00449C  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15448  00449E  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15449  0044A0  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15450  0044A2  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15451  0044A4  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15452  0044A6  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15453  0044A8  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15454  0044AA  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15455  0044AC  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15456  0044AE  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15457  0044B0  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15458  0044B2  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15459  0044B4  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15460  0044B6  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15461  0044B8  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15462  0044BA  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15463  0044BC  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15464  0044BE  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15465  0044C0  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15466  0044C2  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15467  0044C4  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15468  0044C6  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15469  0044C8  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15470  0044CA  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15471  0044CC  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15472  0044CE  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15473  0044D0  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15474  0044D2  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15475  0044D4  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15476                           
 15477                           ; BSR set to: 0
 15478                           ;main.c: 2853: vscp_errorcnt++;
 15479  0044D6  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15480  0044DA  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15481  0044DE  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15482  0044E2  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15483  0044E6  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15484  0044EA  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15485  0044EE  ECD9  F027         	call	_sendCANFrame	;wreg free
 15486  0044F2  0900               	iorlw	0
 15487                           
 15488                           ; BSR set to: 0
 15489                           ;main.c: 2854: return 0;
 15490  0044F4  0E00               	movlw	0
 15491  0044F6  A4D8               	btfss	status,2,c
 15492                           
 15493                           ; BSR set to: 0
 15494                           ;main.c: 2855: }
 15495                           ;main.c: 2857: return 1;
 15496  0044F8  0E01               	movlw	1
 15497                           
 15498                           ; BSR set to: 0
 15499  0044FA  0012               	return	
 15500  0044FC                     __end_of_sendVSCPFrame:
 15501                           	opt stack 0
 15502                           tblptru	equ	0xFF8
 15503                           tblptrh	equ	0xFF7
 15504                           tblptrl	equ	0xFF6
 15505                           tablat	equ	0xFF5
 15506                           prodh	equ	0xFF4
 15507                           prodl	equ	0xFF3
 15508                           intcon	equ	0xFF2
 15509                           postinc0	equ	0xFEE
 15510                           wreg	equ	0xFE8
 15511                           indf1	equ	0xFE7
 15512                           postdec1	equ	0xFE5
 15513                           fsr1h	equ	0xFE2
 15514                           fsr1l	equ	0xFE1
 15515                           indf2	equ	0xFDF
 15516                           postinc2	equ	0xFDE
 15517                           postdec2	equ	0xFDD
 15518                           plusw2	equ	0xFDB
 15519                           fsr2h	equ	0xFDA
 15520                           fsr2l	equ	0xFD9
 15521                           status	equ	0xFD8
 15522                           
 15523 ;; *************** function _sendCANFrame *****************
 15524 ;; Defined at:
 15525 ;;		line 2892 in file "../main.c"
 15526 ;; Parameters:    Size  Location     Type
 15527 ;;  id              4   59[COMRAM] unsigned long 
 15528 ;;  dlc             1   63[COMRAM] unsigned char 
 15529 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15530 ;;		 -> vscp_omsg(13), 
 15531 ;; Auto vars:     Size  Location     Type
 15532 ;;  rv              1   65[COMRAM] unsigned char 
 15533 ;; Return value:  Size  Location     Type
 15534 ;;                  1    wreg      unsigned char 
 15535 ;; Registers used:
 15536 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15537 ;; Tracked objects:
 15538 ;;		On entry : F/0
 15539 ;;		On exit  : F/0
 15540 ;;		Unchanged: 0/0
 15541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15542 ;;      Params:         6       0       0       0       0       0       0
 15543 ;;      Locals:         1       0       0       0       0       0       0
 15544 ;;      Temps:          0       0       0       0       0       0       0
 15545 ;;      Totals:         7       0       0       0       0       0       0
 15546 ;;Total ram usage:        7 bytes
 15547 ;; Hardware stack levels used:    1
 15548 ;; Hardware stack levels required when called:    4
 15549 ;; This function calls:
 15550 ;;		_ECANSendMessage
 15551 ;; This function is called by:
 15552 ;;		_sendVSCPFrame
 15553 ;; This function uses a non-reentrant model
 15554 ;;
 15555                           
 15556                           	psect	text69
 15557  004FB2                     __ptext69:
 15558                           	opt stack 0
 15559  004FB2                     _sendCANFrame:
 15560                           	opt stack 23
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;main.c: 2893: uint8_t rv = 0;
 15564                           
 15565                           ; BSR set to: 0
 15566                           ;incstack = 0
 15567                           ;incstack = 0
 15568  004FB2  6A42               	clrf	sendCANFrame@rv,c
 15569                           
 15570                           ;main.c: 2894: sendTimer = 0;
 15571  004FB4  6A4A               	clrf	_sendTimer,c
 15572                           
 15573                           ;main.c: 2896: while ( sendTimer < 1 ) {
 15574  004FB6  D015               	goto	l11074
 15575  004FB8                     l11070:
 15576                           
 15577                           ;main.c: 2897: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15578  004FB8  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15579  004FBC  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15580  004FC0  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15581  004FC4  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15582  004FC8  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15583  004FCC  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15584  004FD0  0E20               	movlw	32
 15585  004FD2  6E1E               	movwf	?_ECANSendMessage+6,c
 15586  004FD4  ECD2  F01B         	call	_ECANSendMessage	;wreg free
 15587  004FD8  0900               	iorlw	0
 15588  004FDA  E003               	bz	l11074
 15589                           
 15590                           ;main.c: 2898: rv = 1;
 15591  004FDC  0E01               	movlw	1
 15592  004FDE  6E42               	movwf	sendCANFrame@rv,c
 15593                           
 15594                           ;main.c: 2899: break;
 15595  004FE0  D002               	goto	l635
 15596  004FE2                     l11074:
 15597  004FE2  504A               	movf	_sendTimer,w,c
 15598  004FE4  E0E9               	bz	l11070
 15599  004FE6                     l635:
 15600                           
 15601                           ;main.c: 2900: }
 15602                           ;main.c: 2901: }
 15603                           ;main.c: 2903: vscp_omsg.flags = 0;
 15604  004FE6  0100               	movlb	0	; () banked
 15605  004FE8  6BCA               	clrf	_vscp_omsg& (0+255),b
 15606                           
 15607                           ; BSR set to: 0
 15608                           ;main.c: 2905: return rv;
 15609  004FEA  5042               	movf	sendCANFrame@rv,w,c
 15610                           
 15611                           ; BSR set to: 0
 15612  004FEC  0012               	return	
 15613  004FEE                     __end_of_sendCANFrame:
 15614                           	opt stack 0
 15615                           tblptru	equ	0xFF8
 15616                           tblptrh	equ	0xFF7
 15617                           tblptrl	equ	0xFF6
 15618                           tablat	equ	0xFF5
 15619                           prodh	equ	0xFF4
 15620                           prodl	equ	0xFF3
 15621                           intcon	equ	0xFF2
 15622                           postinc0	equ	0xFEE
 15623                           wreg	equ	0xFE8
 15624                           indf1	equ	0xFE7
 15625                           postdec1	equ	0xFE5
 15626                           fsr1h	equ	0xFE2
 15627                           fsr1l	equ	0xFE1
 15628                           indf2	equ	0xFDF
 15629                           postinc2	equ	0xFDE
 15630                           postdec2	equ	0xFDD
 15631                           plusw2	equ	0xFDB
 15632                           fsr2h	equ	0xFDA
 15633                           fsr2l	equ	0xFD9
 15634                           status	equ	0xFD8
 15635                           
 15636 ;; *************** function _ECANSendMessage *****************
 15637 ;; Defined at:
 15638 ;;		line 617 in file "../ECAN.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;  id              4   23[COMRAM] unsigned long 
 15641 ;;  data            1   27[COMRAM] PTR unsigned char 
 15642 ;;		 -> vscp_omsg(13), 
 15643 ;;  dataLen         1   28[COMRAM] unsigned char 
 15644 ;;  msgFlags        1   29[COMRAM] enum E16306
 15645 ;; Auto vars:     Size  Location     Type
 15646 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15647 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15648 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15649 ;;		 -> B0CON(1), 
 15650 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15651 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15652 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15653 ;;		 -> B0CON(1), 
 15654 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15655 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15656 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15657 ;;		 -> B0CON(1), 
 15658 ;;  i               1   56[COMRAM] unsigned char 
 15659 ;;  temp            1   55[COMRAM] unsigned char 
 15660 ;;  tempBSEL0       1   52[COMRAM] struct .
 15661 ;;  j               1   51[COMRAM] unsigned char 
 15662 ;;  buffers         1   50[COMRAM] unsigned char 
 15663 ;;  mode            1   49[COMRAM] unsigned char 
 15664 ;; Return value:  Size  Location     Type
 15665 ;;                  1    wreg      enum E15660
 15666 ;; Registers used:
 15667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15668 ;; Tracked objects:
 15669 ;;		On entry : 0/0
 15670 ;;		On exit  : 0/0
 15671 ;;		Unchanged: 0/0
 15672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15673 ;;      Params:         7       0       0       0       0       0       0
 15674 ;;      Locals:        28       0       0       0       0       0       0
 15675 ;;      Temps:          1       0       0       0       0       0       0
 15676 ;;      Totals:        36       0       0       0       0       0       0
 15677 ;;Total ram usage:       36 bytes
 15678 ;; Hardware stack levels used:    1
 15679 ;; Hardware stack levels required when called:    3
 15680 ;; This function calls:
 15681 ;;		__CANIDToRegs
 15682 ;; This function is called by:
 15683 ;;		_sendCANFrame
 15684 ;; This function uses a non-reentrant model
 15685 ;;
 15686                           
 15687                           	psect	text70
 15688  0037A4                     __ptext70:
 15689                           	opt stack 0
 15690  0037A4                     _ECANSendMessage:
 15691                           	opt stack 23
 15692                           
 15693                           ;ECAN.c: 619: BYTE mode;
 15694                           ;ECAN.c: 620: BYTE buffers;
 15695                           ;ECAN.c: 628: BYTE i,j;
 15696                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15697                           ;ECAN.c: 630: BYTE* pb[9];
 15698                           ;ECAN.c: 631: BYTE temp;
 15699                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15700                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15701                           
 15702                           ; BSR set to: 0
 15703                           ;incstack = 0
 15704                           ;incstack = 0
 15705  0037A4  0E0F               	movlw	15	;volatile
 15706  0037A6  6E21               	movwf	ECANSendMessage@pb+1,c
 15707  0037A8  0E40               	movlw	64	;volatile
 15708  0037AA  6E20               	movwf	ECANSendMessage@pb,c
 15709                           
 15710                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15711  0037AC  0E0F               	movlw	15	;volatile
 15712  0037AE  6E23               	movwf	ECANSendMessage@pb+3,c
 15713  0037B0  0E30               	movlw	48	;volatile
 15714  0037B2  6E22               	movwf	ECANSendMessage@pb+2,c
 15715                           
 15716                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15717  0037B4  0E0F               	movlw	15	;volatile
 15718  0037B6  6E25               	movwf	ECANSendMessage@pb+5,c
 15719  0037B8  0E20               	movlw	32	;volatile
 15720  0037BA  6E24               	movwf	ECANSendMessage@pb+4,c
 15721                           
 15722                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15723  0037BC  0E0E               	movlw	14	;volatile
 15724  0037BE  6E27               	movwf	ECANSendMessage@pb+7,c
 15725  0037C0  0E20               	movlw	32	;volatile
 15726  0037C2  6E26               	movwf	ECANSendMessage@pb+6,c
 15727                           
 15728                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15729  0037C4  0E0E               	movlw	14	;volatile
 15730  0037C6  6E29               	movwf	ECANSendMessage@pb+9,c
 15731  0037C8  0E30               	movlw	48	;volatile
 15732  0037CA  6E28               	movwf	ECANSendMessage@pb+8,c
 15733                           
 15734                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15735  0037CC  0E0E               	movlw	14	;volatile
 15736  0037CE  6E2B               	movwf	ECANSendMessage@pb+11,c
 15737  0037D0  0E40               	movlw	64	;volatile
 15738  0037D2  6E2A               	movwf	ECANSendMessage@pb+10,c
 15739                           
 15740                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15741  0037D4  0E0E               	movlw	14	;volatile
 15742  0037D6  6E2D               	movwf	ECANSendMessage@pb+13,c
 15743  0037D8  0E50               	movlw	80	;volatile
 15744  0037DA  6E2C               	movwf	ECANSendMessage@pb+12,c
 15745                           
 15746                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15747  0037DC  0E0E               	movlw	14	;volatile
 15748  0037DE  6E2F               	movwf	ECANSendMessage@pb+15,c
 15749  0037E0  0E60               	movlw	96	;volatile
 15750  0037E2  6E2E               	movwf	ECANSendMessage@pb+14,c
 15751                           
 15752                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15753  0037E4  0E0E               	movlw	14	;volatile
 15754  0037E6  6E31               	movwf	ECANSendMessage@pb+17,c
 15755  0037E8  0E70               	movlw	112	;volatile
 15756  0037EA  6E30               	movwf	ECANSendMessage@pb+16,c
 15757                           
 15758                           ; BSR set to: 14
 15759                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15760  0037EC  5077               	movf	3959,w,c	;volatile
 15761  0037EE  0BC0               	andlw	192
 15762  0037F0  6E32               	movwf	ECANSendMessage@mode,c
 15763                           
 15764                           ; BSR set to: 14
 15765                           ;ECAN.c: 660: if ( mode == 0x00 )
 15766  0037F2  6632               	tstfsz	ECANSendMessage@mode,c
 15767  0037F4  D002               	goto	l11088
 15768                           
 15769                           ; BSR set to: 14
 15770                           ;ECAN.c: 661: buffers = 2;
 15771  0037F6  0E02               	movlw	2
 15772  0037F8  D001               	goto	L21
 15773  0037FA                     l11088:
 15774                           
 15775                           ; BSR set to: 14
 15776                           ;ECAN.c: 662: else
 15777                           ;ECAN.c: 663: buffers = 8;
 15778  0037FA  0E08               	movlw	8
 15779  0037FC                     L21:
 15780  0037FC  6E33               	movwf	ECANSendMessage@buffers,c
 15781                           
 15782                           ; BSR set to: 14
 15783                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15784  0037FE  010D               	movlb	13	; () banked
 15785  003800  90D8               	bcf	status,0,c
 15786  003802  31F8               	rrcf	248,w,b	;volatile
 15787  003804  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15788                           
 15789                           ; BSR set to: 13
 15790                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15791  003806  6A39               	clrf	ECANSendMessage@i,c
 15792  003808  D07B               	goto	l11148
 15793  00380A                     l11094:
 15794                           
 15795                           ;ECAN.c: 688: {
 15796                           ;ECAN.c: 693: ptr = pb[i];
 15797  00380A  5039               	movf	ECANSendMessage@i,w,c
 15798  00380C  0D02               	mullw	2
 15799  00380E  50F3               	movf	prodl,w,c
 15800  003810  0F20               	addlw	low ECANSendMessage@pb
 15801  003812  6ED9               	movwf	fsr2l,c
 15802  003814  6ADA               	clrf	fsr2h,c
 15803  003816  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15804  00381A  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15805                           
 15806                           ;ECAN.c: 694: tempPtr = ptr;
 15807  00381E  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15808  003822  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15809                           
 15810                           ;ECAN.c: 702: if ( i > 2 )
 15811  003826  0E02               	movlw	2
 15812  003828  6439               	cpfsgt	ECANSendMessage@i,c
 15813  00382A  D004               	goto	l11106
 15814                           
 15815                           ;ECAN.c: 703: {
 15816                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15817  00382C  90D8               	bcf	status,0,c
 15818  00382E  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15819                           
 15820                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15821  003830  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15822  003832  D065               	goto	l11146
 15823  003834                     l11106:
 15824                           
 15825                           ;ECAN.c: 714: }
 15826                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15827  003834  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15828  003838  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15829  00383C  50DF               	movf	indf2,w,c
 15830  00383E  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15831  003840  B61F               	btfsc	??_ECANSendMessage,3,c
 15832  003842  D05D               	goto	l11146
 15833                           
 15834                           ;ECAN.c: 721: {
 15835                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15836  003844  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15837  003848  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15838  00384C  0EFC               	movlw	252
 15839  00384E  16DF               	andwf	indf2,f,c
 15840                           
 15841                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15842  003850  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15843  003854  0E03               	movlw	3
 15844  003856  161F               	andwf	??_ECANSendMessage,f,c
 15845  003858  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15846  00385C  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15847  003860  501F               	movf	??_ECANSendMessage,w,c
 15848  003862  12DF               	iorwf	indf2,f,c
 15849                           
 15850                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15851  003864  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15852  003866  D004               	goto	l823
 15853                           
 15854                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15855  003868  501D               	movf	ECANSendMessage@dataLen,w,c
 15856  00386A  0940               	iorlw	64
 15857  00386C  6E38               	movwf	ECANSendMessage@temp,c
 15858  00386E  D002               	goto	l11116
 15859  003870                     l823:
 15860                           
 15861                           ;ECAN.c: 729: else
 15862                           ;ECAN.c: 730: temp = dataLen;
 15863  003870  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15864  003874                     l11116:
 15865                           
 15866                           ;ECAN.c: 732: *(ptr+5) = temp;
 15867  003874  EE20 F005          	lfsr	2,5
 15868  003878  503A               	movf	ECANSendMessage@ptr,w,c
 15869  00387A  26D9               	addwf	fsr2l,f,c
 15870  00387C  503B               	movf	ECANSendMessage@ptr+1,w,c
 15871  00387E  22DA               	addwfc	fsr2h,f,c
 15872  003880  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15873                           
 15874                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15875  003884  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15876  003886  D003               	goto	l825
 15877                           
 15878                           ;ECAN.c: 736: temp = 1;
 15879  003888  0E01               	movlw	1
 15880  00388A  6E38               	movwf	ECANSendMessage@temp,c
 15881  00388C  D001               	goto	l11122
 15882  00388E                     l825:
 15883                           
 15884                           ;ECAN.c: 738: else
 15885                           ;ECAN.c: 739: temp = 0;
 15886  00388E  6A38               	clrf	ECANSendMessage@temp,c
 15887  003890                     l11122:
 15888                           
 15889                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15890  003890  283A               	incf	ECANSendMessage@ptr,w,c
 15891  003892  6E0E               	movwf	?__CANIDToRegs,c
 15892  003894  0E00               	movlw	0
 15893  003896  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15894  003898  6E0F               	movwf	?__CANIDToRegs+1,c
 15895  00389A  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15896  00389E  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15897  0038A2  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15898  0038A6  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15899  0038AA  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15900  0038AE  EC56  F01E         	call	__CANIDToRegs	;wreg free
 15901                           
 15902                           ;ECAN.c: 745: ptr += 6;
 15903  0038B2  0E06               	movlw	6
 15904  0038B4  263A               	addwf	ECANSendMessage@ptr,f,c
 15905  0038B6  0E00               	movlw	0
 15906  0038B8  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15907                           
 15908                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15909  0038BA  6A34               	clrf	ECANSendMessage@j,c
 15910  0038BC  D00D               	goto	l11136
 15911  0038BE                     l11128:
 15912                           
 15913                           ;ECAN.c: 748: *ptr++ = *data++;
 15914  0038BE  501C               	movf	ECANSendMessage@data,w,c
 15915  0038C0  6ED9               	movwf	fsr2l,c
 15916  0038C2  6ADA               	clrf	fsr2h,c
 15917  0038C4  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15918  0038C8  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15919  0038CC  CFDF FFE7          	movff	indf2,indf1
 15920  0038D0  2A1C               	incf	ECANSendMessage@data,f,c
 15921  0038D2  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15922  0038D4  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15923  0038D6  2A34               	incf	ECANSendMessage@j,f,c
 15924  0038D8                     l11136:
 15925  0038D8  501D               	movf	ECANSendMessage@dataLen,w,c
 15926  0038DA  5C34               	subwf	ECANSendMessage@j,w,c
 15927  0038DC  E3F0               	bnc	l11128
 15928                           
 15929                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15930  0038DE  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15931  0038E2  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15932  0038E6  50DF               	movf	indf2,w,c
 15933  0038E8  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15934  0038EA  B41F               	btfsc	??_ECANSendMessage,2,c
 15935  0038EC  D006               	goto	l11142
 15936                           
 15937                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15938  0038EE  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15939  0038F2  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15940  0038F6  0E00               	movlw	0
 15941  0038F8  86DB               	bsf	plusw2,3,c
 15942  0038FA                     l11142:
 15943                           
 15944                           ;ECAN.c: 755: return TRUE;
 15945  0038FA  0E01               	movlw	1
 15946  0038FC  D005               	goto	l831
 15947  0038FE                     l11146:
 15948  0038FE  2A39               	incf	ECANSendMessage@i,f,c
 15949  003900                     l11148:
 15950  003900  5033               	movf	ECANSendMessage@buffers,w,c
 15951  003902  5C39               	subwf	ECANSendMessage@i,w,c
 15952  003904  E382               	bnc	l11094
 15953                           
 15954                           ;ECAN.c: 756: }
 15955                           ;ECAN.c: 757: }
 15956                           ;ECAN.c: 760: return FALSE;
 15957  003906  0E00               	movlw	0
 15958  003908                     l831:
 15959  003908  0012               	return	
 15960  00390A                     __end_of_ECANSendMessage:
 15961                           	opt stack 0
 15962                           tblptru	equ	0xFF8
 15963                           tblptrh	equ	0xFF7
 15964                           tblptrl	equ	0xFF6
 15965                           tablat	equ	0xFF5
 15966                           prodh	equ	0xFF4
 15967                           prodl	equ	0xFF3
 15968                           intcon	equ	0xFF2
 15969                           postinc0	equ	0xFEE
 15970                           wreg	equ	0xFE8
 15971                           indf1	equ	0xFE7
 15972                           postdec1	equ	0xFE5
 15973                           fsr1h	equ	0xFE2
 15974                           fsr1l	equ	0xFE1
 15975                           indf2	equ	0xFDF
 15976                           postinc2	equ	0xFDE
 15977                           postdec2	equ	0xFDD
 15978                           plusw2	equ	0xFDB
 15979                           fsr2h	equ	0xFDA
 15980                           fsr2l	equ	0xFD9
 15981                           status	equ	0xFD8
 15982                           
 15983 ;; *************** function __CANIDToRegs *****************
 15984 ;; Defined at:
 15985 ;;		line 1099 in file "../ECAN.c"
 15986 ;; Parameters:    Size  Location     Type
 15987 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 15988 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15989 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15990 ;;		 -> B0CON(1), 
 15991 ;;  val             4   15[COMRAM] unsigned long 
 15992 ;;  type            1   19[COMRAM] unsigned char 
 15993 ;; Auto vars:     Size  Location     Type
 15994 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 15995 ;;		 -> _CANIDToRegs@val(4), 
 15996 ;; Return value:  Size  Location     Type
 15997 ;;		None               void
 15998 ;; Registers used:
 15999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16000 ;; Tracked objects:
 16001 ;;		On entry : 0/D
 16002 ;;		On exit  : 0/0
 16003 ;;		Unchanged: 0/0
 16004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16005 ;;      Params:         7       0       0       0       0       0       0
 16006 ;;      Locals:         1       0       0       0       0       0       0
 16007 ;;      Temps:          2       0       0       0       0       0       0
 16008 ;;      Totals:        10       0       0       0       0       0       0
 16009 ;;Total ram usage:       10 bytes
 16010 ;; Hardware stack levels used:    1
 16011 ;; Hardware stack levels required when called:    2
 16012 ;; This function calls:
 16013 ;;		Nothing
 16014 ;; This function is called by:
 16015 ;;		_ECANSendMessage
 16016 ;; This function uses a non-reentrant model
 16017 ;;
 16018                           
 16019                           	psect	text71
 16020  003CAC                     __ptext71:
 16021                           	opt stack 0
 16022  003CAC                     __CANIDToRegs:
 16023                           	opt stack 23
 16024                           
 16025                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16026                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16027                           
 16028                           ;incstack = 0
 16029                           ;incstack = 0
 16030  003CAC  0E10               	movlw	low __CANIDToRegs@val
 16031  003CAE  6E17               	movwf	__CANIDToRegs@Value,c
 16032                           
 16033                           ;ECAN.c: 1104: if ( type == 0 )
 16034  003CB0  6614               	tstfsz	__CANIDToRegs@type,c
 16035  003CB2  D022               	goto	l11164
 16036                           
 16037                           ;ECAN.c: 1105: {
 16038                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16039  003CB4  5017               	movf	__CANIDToRegs@Value,w,c
 16040  003CB6  6ED9               	movwf	fsr2l,c
 16041  003CB8  6ADA               	clrf	fsr2h,c
 16042  003CBA  50DF               	movf	indf2,w,c
 16043  003CBC  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16044  003CBE  90D8               	bcf	status,0,c
 16045  003CC0  3215               	rrcf	??__CANIDToRegs,f,c
 16046  003CC2  90D8               	bcf	status,0,c
 16047  003CC4  3215               	rrcf	??__CANIDToRegs,f,c
 16048  003CC6  90D8               	bcf	status,0,c
 16049  003CC8  3015               	rrcf	??__CANIDToRegs,w,c
 16050                           
 16051                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16052  003CCA  D862               	call	PL36	;call to abstracted procedure
 16053  003CCC  2AD9               	incf	fsr2l,f,c
 16054  003CCE  6ADA               	clrf	fsr2h,c
 16055  003CD0  D872               	call	PL82	;call to abstracted procedure
 16056  003CD2                     u9135:
 16057  003CD2  90D8               	bcf	status,0,c
 16058  003CD4  3615               	rlcf	??__CANIDToRegs,f,c
 16059  003CD6  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16060  003CD8  D7FC               	goto	u9135
 16061  003CDA  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16062                           
 16063                           ;ECAN.c: 1109: ptr++;
 16064                           
 16065                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16066  003CDE  D846               	call	PL16	;call to abstracted procedure
 16067  003CE0  D86A               	call	PL82	;call to abstracted procedure
 16068  003CE2                     u9145:
 16069  003CE2  90D8               	bcf	status,0,c
 16070  003CE4  3615               	rlcf	??__CANIDToRegs,f,c
 16071  003CE6  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16072  003CE8  D7FC               	goto	u9145
 16073  003CEA  5015               	movf	??__CANIDToRegs,w,c
 16074  003CEC  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16075  003CF0  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16076  003CF4  6EDF               	movwf	indf2,c
 16077                           
 16078                           ;ECAN.c: 1111: }
 16079  003CF6  D039               	goto	l885
 16080  003CF8                     l11164:
 16081                           
 16082                           ;ECAN.c: 1112: else
 16083                           ;ECAN.c: 1113: {
 16084                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16085  003CF8  5017               	movf	__CANIDToRegs@Value,w,c
 16086  003CFA  D842               	call	PL32	;call to abstracted procedure
 16087  003CFC  0E05               	movlw	5
 16088  003CFE  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16089  003D00                     u9155:
 16090  003D00  90D8               	bcf	status,0,c
 16091  003D02  3215               	rrcf	??__CANIDToRegs,f,c
 16092  003D04  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16093  003D06  D7FC               	goto	u9155
 16094  003D08  5015               	movf	??__CANIDToRegs,w,c
 16095                           
 16096                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16097  003D0A  D842               	call	PL36	;call to abstracted procedure
 16098  003D0C  0E03               	movlw	3
 16099  003D0E  D849               	call	PL50	;call to abstracted procedure
 16100  003D10  3615               	rlcf	??__CANIDToRegs,f,c
 16101  003D12  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16102                           
 16103                           ;ECAN.c: 1117: ptr++;
 16104                           
 16105                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16106  003D16  D82A               	call	PL16	;call to abstracted procedure
 16107  003D18  0E02               	movlw	2
 16108  003D1A  D843               	call	PL50	;call to abstracted procedure
 16109  003D1C  3415               	rlcf	??__CANIDToRegs,w,c
 16110  003D1E  0BE0               	andlw	224
 16111  003D20  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16112  003D24  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16113  003D28  6EDF               	movwf	indf2,c
 16114                           
 16115                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16116  003D2A  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16117  003D2E  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16118  003D32  0E00               	movlw	0
 16119  003D34  86DB               	bsf	plusw2,3,c
 16120                           
 16121                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16122  003D36  5017               	movf	__CANIDToRegs@Value,w,c
 16123  003D38  D823               	call	PL32	;call to abstracted procedure
 16124  003D3A  0E03               	movlw	3
 16125  003D3C  1615               	andwf	??__CANIDToRegs,f,c
 16126  003D3E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16127                           
 16128                           ;ECAN.c: 1122: ptr++;
 16129                           
 16130                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16131  003D42  D814               	call	PL16	;call to abstracted procedure
 16132  003D44  2AD9               	incf	fsr2l,f,c
 16133  003D46  6ADA               	clrf	fsr2h,c
 16134  003D48  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16135  003D4C  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16136  003D50  CFDF FFE7          	movff	indf2,indf1
 16137                           
 16138                           ;ECAN.c: 1124: ptr++;
 16139  003D54  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16140  003D56  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16141                           
 16142                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16143  003D58  5017               	movf	__CANIDToRegs@Value,w,c
 16144  003D5A  6ED9               	movwf	fsr2l,c
 16145  003D5C  6ADA               	clrf	fsr2h,c
 16146  003D5E  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16147  003D62  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16148  003D66  CFDF FFE7          	movff	indf2,indf1
 16149  003D6A                     l885:
 16150  003D6A  0012               	return	
 16151  003D6C                     __end_of__CANIDToRegs:
 16152                           	opt stack 0
 16153  003D6C                     PL16:
 16154                           	opt stack 23
 16155  003D6C  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16156  003D70  5015               	movf	??__CANIDToRegs,w,c
 16157  003D72  12DF               	iorwf	indf2,f,c
 16158  003D74  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16159  003D76  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16160  003D78  5017               	movf	__CANIDToRegs@Value,w,c
 16161  003D7A  6ED9               	movwf	fsr2l,c
 16162  003D7C  6ADA               	clrf	fsr2h,c
 16163  003D7E  0012               	return	
 16164  003D80                     __end_ofPL16:
 16165                           	opt stack 0
 16166  003D80                     PL32:
 16167                           	opt stack 23
 16168  003D80  6ED9               	movwf	fsr2l,c
 16169  003D82  6ADA               	clrf	fsr2h,c
 16170  003D84  0E02               	movlw	2
 16171  003D86  26D9               	addwf	fsr2l,f,c
 16172  003D88  6ADA               	clrf	fsr2h,c
 16173  003D8A  50DF               	movf	indf2,w,c
 16174  003D8C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16175  003D8E  0012               	return	
 16176  003D90                     __end_ofPL32:
 16177                           	opt stack 0
 16178  003D90                     PL36:
 16179                           	opt stack 23
 16180  003D90  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16181  003D94  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16182  003D98  6EDF               	movwf	indf2,c
 16183  003D9A  5017               	movf	__CANIDToRegs@Value,w,c
 16184  003D9C  6ED9               	movwf	fsr2l,c
 16185  003D9E  6ADA               	clrf	fsr2h,c
 16186  003DA0  0012               	return	
 16187  003DA2                     __end_ofPL36:
 16188                           	opt stack 0
 16189  003DA2                     PL50:
 16190                           	opt stack 23
 16191  003DA2  26D9               	addwf	fsr2l,f,c
 16192  003DA4  6ADA               	clrf	fsr2h,c
 16193  003DA6  50DF               	movf	indf2,w,c
 16194  003DA8  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16195  003DAA  90D8               	bcf	status,0,c
 16196  003DAC  3615               	rlcf	??__CANIDToRegs,f,c
 16197  003DAE  90D8               	bcf	status,0,c
 16198  003DB0  3615               	rlcf	??__CANIDToRegs,f,c
 16199  003DB2  90D8               	bcf	status,0,c
 16200  003DB4  0012               	return	
 16201  003DB6                     __end_ofPL50:
 16202                           	opt stack 0
 16203  003DB6                     PL82:
 16204                           	opt stack 23
 16205  003DB6  50DF               	movf	indf2,w,c
 16206  003DB8  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16207  003DBA  0E05               	movlw	5
 16208  003DBC  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16209  003DBE  0C05               	retlw	5
 16210  003DC0                     __end_ofPL82:
 16211                           	opt stack 0
 16212                           tblptru	equ	0xFF8
 16213                           tblptrh	equ	0xFF7
 16214                           tblptrl	equ	0xFF6
 16215                           tablat	equ	0xFF5
 16216                           prodh	equ	0xFF4
 16217                           prodl	equ	0xFF3
 16218                           intcon	equ	0xFF2
 16219                           postinc0	equ	0xFEE
 16220                           wreg	equ	0xFE8
 16221                           indf1	equ	0xFE7
 16222                           postdec1	equ	0xFE5
 16223                           fsr1h	equ	0xFE2
 16224                           fsr1l	equ	0xFE1
 16225                           indf2	equ	0xFDF
 16226                           postinc2	equ	0xFDE
 16227                           postdec2	equ	0xFDD
 16228                           plusw2	equ	0xFDB
 16229                           fsr2h	equ	0xFDA
 16230                           fsr2l	equ	0xFD9
 16231                           status	equ	0xFD8
 16232                           
 16233 ;; *************** function _vscp_getEvent *****************
 16234 ;; Defined at:
 16235 ;;		line 1290 in file "../../vscp_firmware/common/vscp_firmware.c"
 16236 ;; Parameters:    Size  Location     Type
 16237 ;;		None
 16238 ;; Auto vars:     Size  Location     Type
 16239 ;;  rv              1   49[COMRAM] unsigned char 
 16240 ;; Return value:  Size  Location     Type
 16241 ;;                  1    wreg      unsigned char 
 16242 ;; Registers used:
 16243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16244 ;; Tracked objects:
 16245 ;;		On entry : F/0
 16246 ;;		On exit  : 0/0
 16247 ;;		Unchanged: 0/0
 16248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16249 ;;      Params:         0       0       0       0       0       0       0
 16250 ;;      Locals:         1       0       0       0       0       0       0
 16251 ;;      Temps:          0       0       0       0       0       0       0
 16252 ;;      Totals:         1       0       0       0       0       0       0
 16253 ;;Total ram usage:        1 bytes
 16254 ;; Hardware stack levels used:    1
 16255 ;; Hardware stack levels required when called:    6
 16256 ;; This function calls:
 16257 ;;		_getVSCPFrame
 16258 ;; This function is called by:
 16259 ;;		_main
 16260 ;; This function uses a non-reentrant model
 16261 ;;
 16262                           
 16263                           	psect	text72
 16264  00517A                     __ptext72:
 16265                           	opt stack 0
 16266  00517A                     _vscp_getEvent:
 16267                           	opt stack 24
 16268                           
 16269                           ; BSR set to: 0
 16270                           ;vscp_firmware.c: 1291: int8_t rv;
 16271                           ;vscp_firmware.c: 1297: if (vscp_imsg.flags & 0x80) return !0;
 16272                           
 16273                           ;incstack = 0
 16274                           ;incstack = 0
 16275  00517A  BFBC               	btfsc	_vscp_imsg& (0+255),7,b
 16276  00517C  D012               	goto	l1278
 16277                           
 16278                           ; BSR set to: 0
 16279                           ;vscp_firmware.c: 1300: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 16280                           ;vscp_firmware.c: 1301: &vscp_imsg.vscp_type,
 16281                           ;vscp_firmware.c: 1302: &vscp_imsg.oaddr,
 16282                           ;vscp_firmware.c: 1303: &vscp_imsg.priority,
 16283                           ;vscp_firmware.c: 1304: &vscp_imsg.flags,
 16284                           ;vscp_firmware.c: 1305: vscp_imsg.data))) {
 16285  00517E  0EC0               	movlw	low (_vscp_imsg+4)
 16286  005180  6E24               	movwf	?_getVSCPFrame,c
 16287  005182  0EC1               	movlw	low (_vscp_imsg+5)
 16288  005184  6E25               	movwf	?_getVSCPFrame+1,c
 16289  005186  0EBD               	movlw	low (_vscp_imsg+1)
 16290  005188  6E26               	movwf	?_getVSCPFrame+2,c
 16291  00518A  0EBC               	movlw	low _vscp_imsg
 16292  00518C  6E27               	movwf	?_getVSCPFrame+3,c
 16293  00518E  0EC2               	movlw	low (_vscp_imsg+6)
 16294  005190  6E28               	movwf	?_getVSCPFrame+4,c
 16295  005192  0EBE               	movlw	(_vscp_imsg+2)& (0+255)
 16296  005194  EC29  F025         	call	_getVSCPFrame
 16297  005198  6E32               	movwf	vscp_getEvent@rv,c
 16298  00519A  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16299  00519C  E002               	bz	l1278
 16300                           
 16301                           ;vscp_firmware.c: 1307: vscp_imsg.flags |= 0x80;
 16302  00519E  0100               	movlb	0	; () banked
 16303  0051A0  8FBC               	bsf	_vscp_imsg& (0+255),7,b
 16304  0051A2                     l1278:
 16305  0051A2  0012               	return	
 16306  0051A4                     __end_of_vscp_getEvent:
 16307                           	opt stack 0
 16308                           tblptru	equ	0xFF8
 16309                           tblptrh	equ	0xFF7
 16310                           tblptrl	equ	0xFF6
 16311                           tablat	equ	0xFF5
 16312                           prodh	equ	0xFF4
 16313                           prodl	equ	0xFF3
 16314                           intcon	equ	0xFF2
 16315                           postinc0	equ	0xFEE
 16316                           wreg	equ	0xFE8
 16317                           indf1	equ	0xFE7
 16318                           postdec1	equ	0xFE5
 16319                           fsr1h	equ	0xFE2
 16320                           fsr1l	equ	0xFE1
 16321                           indf2	equ	0xFDF
 16322                           postinc2	equ	0xFDE
 16323                           postdec2	equ	0xFDD
 16324                           plusw2	equ	0xFDB
 16325                           fsr2h	equ	0xFDA
 16326                           fsr2l	equ	0xFD9
 16327                           status	equ	0xFD8
 16328                           
 16329 ;; *************** function _getVSCPFrame *****************
 16330 ;; Defined at:
 16331 ;;		line 2871 in file "../main.c"
 16332 ;; Parameters:    Size  Location     Type
 16333 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16334 ;;		 -> vscp_imsg(14), 
 16335 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16336 ;;		 -> vscp_imsg(14), 
 16337 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16338 ;;		 -> vscp_imsg(14), 
 16339 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16340 ;;		 -> vscp_imsg(14), 
 16341 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16342 ;;		 -> vscp_imsg(14), 
 16343 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16344 ;;		 -> vscp_imsg(14), 
 16345 ;; Auto vars:     Size  Location     Type
 16346 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16347 ;;		 -> vscp_imsg(14), 
 16348 ;;  id              4   45[COMRAM] unsigned long 
 16349 ;; Return value:  Size  Location     Type
 16350 ;;                  1    wreg      unsigned char 
 16351 ;; Registers used:
 16352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16353 ;; Tracked objects:
 16354 ;;		On entry : F/0
 16355 ;;		On exit  : 0/0
 16356 ;;		Unchanged: 0/0
 16357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16358 ;;      Params:         5       0       0       0       0       0       0
 16359 ;;      Locals:         5       0       0       0       0       0       0
 16360 ;;      Temps:          4       0       0       0       0       0       0
 16361 ;;      Totals:        14       0       0       0       0       0       0
 16362 ;;Total ram usage:       14 bytes
 16363 ;; Hardware stack levels used:    1
 16364 ;; Hardware stack levels required when called:    5
 16365 ;; This function calls:
 16366 ;;		_getCANFrame
 16367 ;; This function is called by:
 16368 ;;		_vscp_getEvent
 16369 ;; This function uses a non-reentrant model
 16370 ;;
 16371                           
 16372                           	psect	text73
 16373  004A52                     __ptext73:
 16374                           	opt stack 0
 16375  004A52                     _getVSCPFrame:
 16376                           	opt stack 24
 16377                           
 16378                           ;incstack = 0
 16379                           ;incstack = 0
 16380                           ;getVSCPFrame@pvscpclass stored from wreg
 16381  004A52  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16382                           
 16383                           ; BSR set to: 0
 16384                           ;main.c: 2872: uint32_t id;
 16385                           ;main.c: 2874: if (!getCANFrame(&id, pSize, pData)) {
 16386  004A56  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16387  004A5A  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16388  004A5E  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16389  004A60  EC7D  F028         	call	_getCANFrame
 16390  004A64  0900               	iorlw	0
 16391  004A66  E102               	bnz	l8142
 16392                           
 16393                           ;main.c: 2875: return 0;
 16394  004A68  0E00               	movlw	0
 16395  004A6A  D02E               	goto	l629
 16396  004A6C                     l8142:
 16397                           
 16398                           ;main.c: 2876: }
 16399                           ;main.c: 2878: *pNodeId = id & 0x0ff;
 16400  004A6C  5025               	movf	getVSCPFrame@pNodeId,w,c
 16401  004A6E  6ED9               	movwf	fsr2l,c
 16402  004A70  6ADA               	clrf	fsr2h,c
 16403  004A72  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16404                           
 16405                           ;main.c: 2879: *pvscptype = (id >> 8) & 0xff;
 16406  004A76  5024               	movf	getVSCPFrame@pvscptype,w,c
 16407  004A78  6ED9               	movwf	fsr2l,c
 16408  004A7A  6ADA               	clrf	fsr2h,c
 16409  004A7C  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16410                           
 16411                           ;main.c: 2880: *pvscpclass = (id >> 16) & 0x1ff;
 16412  004A80  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16413  004A82  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16414  004A84  0E01               	movlw	1
 16415  004A86  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16416  004A88  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16417  004A8A  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16418  004A8C  6ED9               	movwf	fsr2l,c
 16419  004A8E  6ADA               	clrf	fsr2h,c
 16420  004A90  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16421  004A94  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16422                           
 16423                           ;main.c: 2881: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16424  004A98  5026               	movf	getVSCPFrame@pPriority,w,c
 16425  004A9A  6ED9               	movwf	fsr2l,c
 16426  004A9C  6ADA               	clrf	fsr2h,c
 16427  004A9E  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16428  004AA2  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16429  004AA6  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16430  004AAA  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16431  004AAE  0E1B               	movlw	27
 16432  004AB0  D005               	goto	u5450
 16433  004AB2                     u5455:
 16434  004AB2  90D8               	bcf	status,0,c
 16435  004AB4  322C               	rrcf	??_getVSCPFrame+3,f,c
 16436  004AB6  322B               	rrcf	??_getVSCPFrame+2,f,c
 16437  004AB8  322A               	rrcf	??_getVSCPFrame+1,f,c
 16438  004ABA  3229               	rrcf	??_getVSCPFrame,f,c
 16439  004ABC                     u5450:
 16440  004ABC  2EE8               	decfsz	wreg,f,c
 16441  004ABE  D7F9               	goto	u5455
 16442  004AC0  5029               	movf	??_getVSCPFrame,w,c
 16443  004AC2  0B07               	andlw	7
 16444  004AC4  6EDF               	movwf	indf2,c
 16445                           
 16446                           ;main.c: 2883: return 1;
 16447  004AC6  0E01               	movlw	1
 16448  004AC8                     l629:
 16449  004AC8  0012               	return	
 16450  004ACA                     __end_of_getVSCPFrame:
 16451                           	opt stack 0
 16452                           tblptru	equ	0xFF8
 16453                           tblptrh	equ	0xFF7
 16454                           tblptrl	equ	0xFF6
 16455                           tablat	equ	0xFF5
 16456                           prodh	equ	0xFF4
 16457                           prodl	equ	0xFF3
 16458                           intcon	equ	0xFF2
 16459                           postinc0	equ	0xFEE
 16460                           wreg	equ	0xFE8
 16461                           indf1	equ	0xFE7
 16462                           postdec1	equ	0xFE5
 16463                           fsr1h	equ	0xFE2
 16464                           fsr1l	equ	0xFE1
 16465                           indf2	equ	0xFDF
 16466                           postinc2	equ	0xFDE
 16467                           postdec2	equ	0xFDD
 16468                           plusw2	equ	0xFDB
 16469                           fsr2h	equ	0xFDA
 16470                           fsr2l	equ	0xFD9
 16471                           status	equ	0xFD8
 16472                           
 16473 ;; *************** function _getCANFrame *****************
 16474 ;; Defined at:
 16475 ;;		line 2913 in file "../main.c"
 16476 ;; Parameters:    Size  Location     Type
 16477 ;;  pid             1    wreg     PTR unsigned long 
 16478 ;;		 -> getVSCPFrame@id(4), 
 16479 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16480 ;;		 -> vscp_imsg(14), 
 16481 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16482 ;;		 -> vscp_imsg(14), 
 16483 ;; Auto vars:     Size  Location     Type
 16484 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16485 ;;		 -> getVSCPFrame@id(4), 
 16486 ;;  flags           1   34[COMRAM] enum E16409
 16487 ;; Return value:  Size  Location     Type
 16488 ;;                  1    wreg      unsigned char 
 16489 ;; Registers used:
 16490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16491 ;; Tracked objects:
 16492 ;;		On entry : F/0
 16493 ;;		On exit  : 0/0
 16494 ;;		Unchanged: 0/0
 16495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16496 ;;      Params:         2       0       0       0       0       0       0
 16497 ;;      Locals:         2       0       0       0       0       0       0
 16498 ;;      Temps:          0       0       0       0       0       0       0
 16499 ;;      Totals:         4       0       0       0       0       0       0
 16500 ;;Total ram usage:        4 bytes
 16501 ;; Hardware stack levels used:    1
 16502 ;; Hardware stack levels required when called:    4
 16503 ;; This function calls:
 16504 ;;		_ECANReceiveMessage
 16505 ;; This function is called by:
 16506 ;;		_getVSCPFrame
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510                           	psect	text74
 16511  0050FA                     __ptext74:
 16512                           	opt stack 0
 16513  0050FA                     _getCANFrame:
 16514                           	opt stack 24
 16515                           
 16516                           ;incstack = 0
 16517                           ;incstack = 0
 16518                           ;getCANFrame@pid stored from wreg
 16519  0050FA  CFE8 F022          	movff	wreg,getCANFrame@pid
 16520                           
 16521                           ; BSR set to: 0
 16522                           ;main.c: 2914: ECAN_RX_MSG_FLAGS flags;
 16523                           ;main.c: 2918: if (vscp_imsg.flags & 0x80) return 0;
 16524  0050FE  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 16525  005100  D002               	goto	l8158
 16526  005102                     l8154:
 16527  005102  0E00               	movlw	0
 16528  005104  D00F               	goto	l640
 16529  005106                     l8158:
 16530                           
 16531                           ; BSR set to: 0
 16532                           ;main.c: 2920: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16533  005106  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16534  00510A  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16535  00510E  0E23               	movlw	low getCANFrame@flags
 16536  005110  6E17               	movwf	?_ECANReceiveMessage+2,c
 16537  005112  5022               	movf	getCANFrame@pid,w,c
 16538  005114  EC1D  F018         	call	_ECANReceiveMessage
 16539  005118  0900               	iorlw	0
 16540  00511A  E0F3               	bz	l8154
 16541                           
 16542                           ;main.c: 2922: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16543  00511C  AC23               	btfss	getCANFrame@flags,6,c
 16544                           
 16545                           ;main.c: 2925: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16546  00511E  AA23               	btfss	getCANFrame@flags,5,c
 16547  005120  D7F0               	goto	l8154
 16548                           
 16549                           ;main.c: 2927: return 1;
 16550  005122  0E01               	movlw	1
 16551  005124                     l640:
 16552  005124  0012               	return	
 16553  005126                     __end_of_getCANFrame:
 16554                           	opt stack 0
 16555                           tblptru	equ	0xFF8
 16556                           tblptrh	equ	0xFF7
 16557                           tblptrl	equ	0xFF6
 16558                           tablat	equ	0xFF5
 16559                           prodh	equ	0xFF4
 16560                           prodl	equ	0xFF3
 16561                           intcon	equ	0xFF2
 16562                           postinc0	equ	0xFEE
 16563                           wreg	equ	0xFE8
 16564                           indf1	equ	0xFE7
 16565                           postdec1	equ	0xFE5
 16566                           fsr1h	equ	0xFE2
 16567                           fsr1l	equ	0xFE1
 16568                           indf2	equ	0xFDF
 16569                           postinc2	equ	0xFDE
 16570                           postdec2	equ	0xFDD
 16571                           plusw2	equ	0xFDB
 16572                           fsr2h	equ	0xFDA
 16573                           fsr2l	equ	0xFD9
 16574                           status	equ	0xFD8
 16575                           
 16576 ;; *************** function _ECANReceiveMessage *****************
 16577 ;; Defined at:
 16578 ;;		line 803 in file "../ECAN.c"
 16579 ;; Parameters:    Size  Location     Type
 16580 ;;  id              1    wreg     PTR unsigned long 
 16581 ;;		 -> getVSCPFrame@id(4), 
 16582 ;;  data            1   20[COMRAM] PTR unsigned char 
 16583 ;;		 -> vscp_imsg(14), 
 16584 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16585 ;;		 -> vscp_imsg(14), 
 16586 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 16587 ;;		 -> getCANFrame@flags(1), 
 16588 ;; Auto vars:     Size  Location     Type
 16589 ;;  id              1   25[COMRAM] PTR unsigned long 
 16590 ;;		 -> getVSCPFrame@id(4), 
 16591 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16592 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16593 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16594 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16595 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16596 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16597 ;;  temp            1   28[COMRAM] struct .
 16598 ;;  mode            1   27[COMRAM] unsigned char 
 16599 ;;  i               1   26[COMRAM] unsigned char 
 16600 ;; Return value:  Size  Location     Type
 16601 ;;                  1    wreg      enum E15660
 16602 ;; Registers used:
 16603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16604 ;; Tracked objects:
 16605 ;;		On entry : F/0
 16606 ;;		On exit  : 0/0
 16607 ;;		Unchanged: 0/0
 16608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16609 ;;      Params:         3       0       0       0       0       0       0
 16610 ;;      Locals:         8       0       0       0       0       0       0
 16611 ;;      Temps:          0       0       0       0       0       0       0
 16612 ;;      Totals:        11       0       0       0       0       0       0
 16613 ;;Total ram usage:       11 bytes
 16614 ;; Hardware stack levels used:    1
 16615 ;; Hardware stack levels required when called:    3
 16616 ;; This function calls:
 16617 ;;		__ECANPointBuffer
 16618 ;;		__RegsToCANID
 16619 ;; This function is called by:
 16620 ;;		_getCANFrame
 16621 ;; This function uses a non-reentrant model
 16622 ;;
 16623                           
 16624                           	psect	text75
 16625  00303A                     __ptext75:
 16626                           	opt stack 0
 16627  00303A                     _ECANReceiveMessage:
 16628                           	opt stack 24
 16629                           
 16630                           ;incstack = 0
 16631                           ;incstack = 0
 16632                           ;ECANReceiveMessage@id stored from wreg
 16633  00303A  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16634                           
 16635                           ; BSR set to: 0
 16636                           ;ECAN.c: 805: BYTE mode;
 16637                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16638                           ;ECAN.c: 809: char i;
 16639                           ;ECAN.c: 810: BYTE_VAL temp;
 16640                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16641  00303E  6A48               	clrf	__ECANRxFilterHitInfo,c
 16642                           
 16643                           ; BSR set to: 0
 16644                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16645  003040  5077               	movf	3959,w,c	;volatile
 16646  003042  0BC0               	andlw	192
 16647  003044  6E1C               	movwf	ECANReceiveMessage@mode,c
 16648                           
 16649                           ; BSR set to: 0
 16650                           ;ECAN.c: 816: if ( mode == 0x00 )
 16651  003046  661C               	tstfsz	ECANReceiveMessage@mode,c
 16652  003048  D032               	goto	l8290
 16653                           
 16654                           ; BSR set to: 0
 16655                           ;ECAN.c: 822: {
 16656                           ;ECAN.c: 824: if ( RXB0FUL )
 16657  00304A  AE60               	btfss	3936,7,c	;volatile
 16658  00304C  D012               	goto	l836
 16659                           
 16660                           ; BSR set to: 0
 16661                           ;ECAN.c: 825: {
 16662                           ;ECAN.c: 827: RXB0IF = 0;
 16663  00304E  90A4               	bcf	4004,0,c	;volatile
 16664                           
 16665                           ;ECAN.c: 830: if ( RXB0OVFL )
 16666  003050  AE74               	btfss	3956,7,c	;volatile
 16667  003052  D006               	goto	l8266
 16668                           
 16669                           ; BSR set to: 0
 16670                           ;ECAN.c: 831: {
 16671                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16672  003054  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16673  003056  6ED9               	movwf	fsr2l,c
 16674  003058  6ADA               	clrf	fsr2h,c
 16675  00305A  0E00               	movlw	0
 16676  00305C  86DB               	bsf	plusw2,3,c
 16677                           
 16678                           ; BSR set to: 0
 16679                           ;ECAN.c: 833: RXB0OVFL = 0;
 16680  00305E  9E74               	bcf	3956,7,c	;volatile
 16681  003060                     l8266:
 16682                           
 16683                           ; BSR set to: 0
 16684                           ;ECAN.c: 834: }
 16685                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16686  003060  A060               	btfss	3936,0,c	;volatile
 16687  003062  D002               	bra	u5625
 16688  003064  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16689  003066  D001               	bra	u5627
 16690  003068                     u5625:
 16691  003068  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16692  00306A                     u5627:
 16693                           
 16694                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16695  00306A  0E0F               	movlw	15	;volatile
 16696  00306C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16697  00306E  0E60               	movlw	96	;volatile
 16698  003070  D01A               	goto	L22
 16699  003072                     l836:
 16700                           
 16701                           ; BSR set to: 0
 16702                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16703  003072  010F               	movlb	15	; () banked
 16704  003074  AF50               	btfss	80,7,b	;volatile
 16705  003076  D019               	goto	l8284
 16706                           
 16707                           ; BSR set to: 15
 16708                           ;ECAN.c: 842: {
 16709                           ;ECAN.c: 844: RXB1IF = 0;
 16710  003078  92A4               	bcf	4004,1,c	;volatile
 16711                           
 16712                           ;ECAN.c: 847: if ( RXB1OVFL )
 16713  00307A  AC74               	btfss	3956,6,c	;volatile
 16714  00307C  D006               	goto	l8276
 16715                           
 16716                           ; BSR set to: 15
 16717                           ;ECAN.c: 848: {
 16718                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16719  00307E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16720  003080  6ED9               	movwf	fsr2l,c
 16721  003082  6ADA               	clrf	fsr2h,c
 16722  003084  0E00               	movlw	0
 16723  003086  86DB               	bsf	plusw2,3,c
 16724                           
 16725                           ; BSR set to: 15
 16726                           ;ECAN.c: 850: RXB1OVFL = 0;
 16727  003088  9C74               	bcf	3956,6,c	;volatile
 16728  00308A                     l8276:
 16729                           
 16730                           ; BSR set to: 15
 16731                           ;ECAN.c: 851: }
 16732                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16733  00308A  5150               	movf	80,w,b	;volatile
 16734  00308C  0B07               	andlw	7
 16735  00308E  6E48               	movwf	__ECANRxFilterHitInfo,c
 16736                           
 16737                           ; BSR set to: 15
 16738                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16739  003090  0E02               	movlw	2
 16740  003092  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16741  003094  D005               	goto	l8282
 16742                           
 16743                           ; BSR set to: 15
 16744                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16745  003096  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16746  003098  6ED9               	movwf	fsr2l,c
 16747  00309A  6ADA               	clrf	fsr2h,c
 16748  00309C  0E00               	movlw	0
 16749  00309E  8EDB               	bsf	plusw2,7,c
 16750  0030A0                     l8282:
 16751                           
 16752                           ; BSR set to: 15
 16753                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16754  0030A0  0E0F               	movlw	15	;volatile
 16755  0030A2  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16756  0030A4  0E50               	movlw	80	;volatile
 16757  0030A6                     L22:
 16758  0030A6  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16759                           
 16760                           ;ECAN.c: 860: }
 16761  0030A8  D065               	goto	l8344
 16762  0030AA                     l8284:
 16763                           
 16764                           ;ECAN.c: 861: else
 16765                           ;ECAN.c: 862: return FALSE;
 16766  0030AA  0E00               	movlw	0
 16767  0030AC  D0C2               	goto	l843
 16768  0030AE                     l8290:
 16769                           
 16770                           ; BSR set to: 0
 16771                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16772  0030AE  501C               	movf	ECANReceiveMessage@mode,w,c
 16773  0030B0  0A40               	xorlw	64
 16774  0030B2  E146               	bnz	l846
 16775                           
 16776                           ; BSR set to: 0
 16777                           ;ECAN.c: 875: {
 16778                           ;ECAN.c: 876: if ( RXB0FUL )
 16779  0030B4  AE60               	btfss	3936,7,c	;volatile
 16780  0030B6  D004               	goto	l847
 16781                           
 16782                           ; BSR set to: 0
 16783                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16784  0030B8  0E0F               	movlw	15	;volatile
 16785  0030BA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16786  0030BC  0E60               	movlw	96	;volatile
 16787  0030BE  D03E               	goto	L29
 16788  0030C0                     l847:
 16789                           
 16790                           ; BSR set to: 0
 16791                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16792  0030C0  010F               	movlb	15	; () banked
 16793  0030C2  AF50               	btfss	80,7,b	;volatile
 16794  0030C4  D004               	goto	l849
 16795                           
 16796                           ; BSR set to: 15
 16797                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16798  0030C6  0E0F               	movlw	15	;volatile
 16799  0030C8  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16800  0030CA  0E50               	movlw	80	;volatile
 16801  0030CC  D037               	goto	L29
 16802  0030CE                     l849:
 16803                           
 16804                           ; BSR set to: 15
 16805                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16806  0030CE  010D               	movlb	13
 16807  0030D0  B5F8               	btfsc	248,2,b	;volatile
 16808  0030D2  D007               	goto	l851
 16809  0030D4  010E               	movlb	14
 16810  0030D6  AF20               	btfss	32,7,b	;volatile
 16811  0030D8  D004               	goto	l851
 16812                           
 16813                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16814  0030DA  0E0E               	movlw	14	;volatile
 16815  0030DC  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16816  0030DE  0E20               	movlw	32	;volatile
 16817  0030E0  D02D               	goto	L29
 16818  0030E2                     l851:
 16819                           
 16820                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16821  0030E2  010D               	movlb	13
 16822  0030E4  B7F8               	btfsc	248,3,b	;volatile
 16823  0030E6  D007               	goto	l853
 16824  0030E8  010E               	movlb	14
 16825  0030EA  AF30               	btfss	48,7,b	;volatile
 16826  0030EC  D004               	goto	l853
 16827                           
 16828                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16829  0030EE  0E0E               	movlw	14	;volatile
 16830  0030F0  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16831  0030F2  0E30               	movlw	48	;volatile
 16832  0030F4  D023               	goto	L29
 16833  0030F6                     l853:
 16834                           
 16835                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16836  0030F6  010D               	movlb	13
 16837  0030F8  B9F8               	btfsc	248,4,b	;volatile
 16838  0030FA  D007               	goto	l855
 16839  0030FC  010E               	movlb	14
 16840  0030FE  AF40               	btfss	64,7,b	;volatile
 16841  003100  D004               	goto	l855
 16842                           
 16843                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16844  003102  0E0E               	movlw	14	;volatile
 16845  003104  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16846  003106  0E40               	movlw	64	;volatile
 16847  003108  D019               	goto	L29
 16848  00310A                     l855:
 16849                           
 16850                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16851  00310A  010D               	movlb	13
 16852  00310C  BBF8               	btfsc	248,5,b	;volatile
 16853  00310E  D005               	goto	l857
 16854  003110  010E               	movlb	14
 16855  003112  AF50               	btfss	80,7,b	;volatile
 16856  003114  D002               	goto	l857
 16857                           
 16858                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16859  003116  0E0E               	movlw	14	;volatile
 16860  003118  D7D7               	goto	L30
 16861  00311A                     l857:
 16862                           
 16863                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16864  00311A  010D               	movlb	13
 16865  00311C  BDF8               	btfsc	248,6,b	;volatile
 16866  00311E  D005               	goto	l859
 16867  003120  010E               	movlb	14
 16868  003122  AF60               	btfss	96,7,b	;volatile
 16869  003124  D002               	goto	l859
 16870                           
 16871                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16872  003126  0E0E               	movlw	14	;volatile
 16873  003128  D7C8               	goto	L31
 16874  00312A                     l859:
 16875                           
 16876                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16877  00312A  010D               	movlb	13
 16878  00312C  BFF8               	btfsc	248,7,b	;volatile
 16879  00312E  D7BD               	goto	l8284
 16880  003130  010E               	movlb	14
 16881  003132  AF70               	btfss	112,7,b	;volatile
 16882  003134  D7BA               	goto	l8284
 16883                           
 16884                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16885  003136  0E0E               	movlw	14	;volatile
 16886  003138  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16887  00313A  0E70               	movlw	112	;volatile
 16888  00313C                     L29:
 16889  00313C  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16890  00313E  D00A               	goto	l8334
 16891  003140                     l846:
 16892                           
 16893                           ; BSR set to: 0
 16894                           ;ECAN.c: 910: else
 16895                           ;ECAN.c: 915: {
 16896                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16897  003140  AE74               	btfss	3956,7,c	;volatile
 16898  003142  D7B3               	goto	l8284
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;ECAN.c: 917: {
 16902                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16903  003144  506F               	movf	3951,w,c	;volatile
 16904  003146  0B07               	andlw	7
 16905  003148  EC65  F025         	call	__ECANPointBuffer
 16906  00314C  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16907  003150  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16908  003154                     l8334:
 16909                           
 16910                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16911  003154  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16912  003158  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16913  00315C  50DF               	movf	indf2,w,c
 16914  00315E  0B1F               	andlw	31
 16915  003160  6E48               	movwf	__ECANRxFilterHitInfo,c
 16916                           
 16917                           ;ECAN.c: 932: RXB1IF = 0;
 16918  003162  92A4               	bcf	4004,1,c	;volatile
 16919                           
 16920                           ;ECAN.c: 934: if ( RXB1OVFL )
 16921  003164  AC74               	btfss	3956,6,c	;volatile
 16922  003166  D006               	goto	l8344
 16923                           
 16924                           ;ECAN.c: 935: {
 16925                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16926  003168  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16927  00316A  6ED9               	movwf	fsr2l,c
 16928  00316C  6ADA               	clrf	fsr2h,c
 16929  00316E  0E00               	movlw	0
 16930  003170  86DB               	bsf	plusw2,3,c
 16931                           
 16932                           ;ECAN.c: 937: RXB1OVFL = 0;
 16933  003172  9C74               	bcf	3956,6,c	;volatile
 16934  003174                     l8344:
 16935                           
 16936                           ;ECAN.c: 942: savedPtr = ptr;
 16937  003174  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16938  003178  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16939                           
 16940                           ;ECAN.c: 943: *msgFlags = 0;
 16941  00317C  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16942  00317E  6ED9               	movwf	fsr2l,c
 16943  003180  6ADA               	clrf	fsr2h,c
 16944  003182  6ADF               	clrf	indf2,c
 16945                           
 16946                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16947  003184  EE20 F005          	lfsr	2,5
 16948  003188  D855               	call	PL74	;call to abstracted procedure
 16949                           
 16950                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16951  00318A  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16952  00318C  6ED9               	movwf	fsr2l,c
 16953  00318E  6ADA               	clrf	fsr2h,c
 16954  003190  501D               	movf	ECANReceiveMessage@temp,w,c
 16955  003192  0B0F               	andlw	15
 16956  003194  6EDF               	movwf	indf2,c
 16957                           
 16958                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16959  003196  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 16960  003198  D005               	goto	l867
 16961                           
 16962                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 16963  00319A  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16964  00319C  6ED9               	movwf	fsr2l,c
 16965  00319E  6ADA               	clrf	fsr2h,c
 16966  0031A0  0E00               	movlw	0
 16967  0031A2  8CDB               	bsf	plusw2,6,c
 16968  0031A4                     l867:
 16969                           
 16970                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 16971  0031A4  EE20 F002          	lfsr	2,2
 16972  0031A8  D845               	call	PL74	;call to abstracted procedure
 16973                           
 16974                           ;ECAN.c: 955: if ( temp.bits.b3 )
 16975  0031AA  A61D               	btfss	ECANReceiveMessage@temp,3,c
 16976  0031AC  D008               	goto	l868
 16977                           
 16978                           ;ECAN.c: 956: {
 16979                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 16980  0031AE  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16981  0031B0  6ED9               	movwf	fsr2l,c
 16982  0031B2  6ADA               	clrf	fsr2h,c
 16983  0031B4  0E00               	movlw	0
 16984  0031B6  8ADB               	bsf	plusw2,5,c
 16985                           
 16986                           ;ECAN.c: 958: temp.Val = 1;
 16987  0031B8  0E01               	movlw	1
 16988  0031BA  6E1D               	movwf	ECANReceiveMessage@temp,c
 16989                           
 16990                           ;ECAN.c: 959: }
 16991  0031BC  D001               	goto	l8362
 16992  0031BE                     l868:
 16993                           
 16994                           ;ECAN.c: 960: else
 16995                           ;ECAN.c: 961: temp.Val = 0;
 16996  0031BE  6A1D               	clrf	ECANReceiveMessage@temp,c
 16997  0031C0                     l8362:
 16998                           
 16999                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17000  0031C0  281E               	incf	ECANReceiveMessage@ptr,w,c
 17001  0031C2  6E0E               	movwf	?__RegsToCANID,c
 17002  0031C4  0E00               	movlw	0
 17003  0031C6  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17004  0031C8  6E0F               	movwf	?__RegsToCANID+1,c
 17005  0031CA  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17006  0031CE  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17007  0031D2  ECC7  F01D         	call	__RegsToCANID	;wreg free
 17008                           
 17009                           ;ECAN.c: 966: ptr += 6;
 17010  0031D6  0E06               	movlw	6
 17011  0031D8  261E               	addwf	ECANReceiveMessage@ptr,f,c
 17012  0031DA  0E00               	movlw	0
 17013  0031DC  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17014                           
 17015                           ;ECAN.c: 967: temp.Val = *dataLen;
 17016  0031DE  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17017  0031E0  6ED9               	movwf	fsr2l,c
 17018  0031E2  6ADA               	clrf	fsr2h,c
 17019  0031E4  50DF               	movf	indf2,w,c
 17020  0031E6  6E1D               	movwf	ECANReceiveMessage@temp,c
 17021                           
 17022                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17023  0031E8  6A1B               	clrf	ECANReceiveMessage@i,c
 17024  0031EA  D00D               	goto	l8378
 17025  0031EC                     l8370:
 17026                           
 17027                           ;ECAN.c: 969: *data++ = *ptr++;
 17028  0031EC  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17029  0031F0  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17030  0031F4  5015               	movf	ECANReceiveMessage@data,w,c
 17031  0031F6  6EE1               	movwf	fsr1l,c
 17032  0031F8  6AE2               	clrf	fsr1h,c
 17033  0031FA  CFDF FFE7          	movff	indf2,indf1
 17034  0031FE  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 17035  003200  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 17036  003202  2A15               	incf	ECANReceiveMessage@data,f,c
 17037  003204  2A1B               	incf	ECANReceiveMessage@i,f,c
 17038  003206                     l8378:
 17039  003206  501D               	movf	ECANReceiveMessage@temp,w,c
 17040  003208  5C1B               	subwf	ECANReceiveMessage@i,w,c
 17041  00320A  E3F0               	bnc	l8370
 17042                           
 17043                           ;ECAN.c: 972: if ( IRXIF )
 17044  00320C  AEA4               	btfss	4004,7,c	;volatile
 17045  00320E  D006               	goto	l8384
 17046                           
 17047                           ;ECAN.c: 973: {
 17048                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17049  003210  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17050  003212  6ED9               	movwf	fsr2l,c
 17051  003214  6ADA               	clrf	fsr2h,c
 17052  003216  0E00               	movlw	0
 17053  003218  88DB               	bsf	plusw2,4,c
 17054                           
 17055                           ;ECAN.c: 975: IRXIF = 0;
 17056  00321A  9EA4               	bcf	4004,7,c	;volatile
 17057  00321C                     l8384:
 17058                           
 17059                           ;ECAN.c: 976: }
 17060                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17061  00321C  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17062  003220  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17063  003224  0E7F               	movlw	127
 17064  003226  16DF               	andwf	indf2,f,c
 17065                           
 17066                           ;ECAN.c: 983: if ( mode == 0x80 )
 17067  003228  501C               	movf	ECANReceiveMessage@mode,w,c
 17068  00322A  0A80               	xorlw	128
 17069  00322C  B4D8               	btfsc	status,2,c
 17070                           
 17071                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17072  00322E  9E74               	bcf	3956,7,c	;volatile
 17073                           
 17074                           ;ECAN.c: 990: return TRUE;
 17075  003230  0E01               	movlw	1
 17076  003232                     l843:
 17077  003232  0012               	return	
 17078  003234                     __end_of_ECANReceiveMessage:
 17079                           	opt stack 0
 17080  003234                     PL74:
 17081                           	opt stack 24
 17082  003234  501E               	movf	ECANReceiveMessage@ptr,w,c
 17083  003236  26D9               	addwf	fsr2l,f,c
 17084  003238  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 17085  00323A  22DA               	addwfc	fsr2h,f,c
 17086  00323C  50DF               	movf	indf2,w,c
 17087  00323E  6E1D               	movwf	ECANReceiveMessage@temp,c
 17088  003240  0012               	return	
 17089  003242                     __end_ofPL74:
 17090                           	opt stack 0
 17091                           tblptru	equ	0xFF8
 17092                           tblptrh	equ	0xFF7
 17093                           tblptrl	equ	0xFF6
 17094                           tablat	equ	0xFF5
 17095                           prodh	equ	0xFF4
 17096                           prodl	equ	0xFF3
 17097                           intcon	equ	0xFF2
 17098                           postinc0	equ	0xFEE
 17099                           wreg	equ	0xFE8
 17100                           indf1	equ	0xFE7
 17101                           postdec1	equ	0xFE5
 17102                           fsr1h	equ	0xFE2
 17103                           fsr1l	equ	0xFE1
 17104                           indf2	equ	0xFDF
 17105                           postinc2	equ	0xFDE
 17106                           postdec2	equ	0xFDD
 17107                           plusw2	equ	0xFDB
 17108                           fsr2h	equ	0xFDA
 17109                           fsr2l	equ	0xFD9
 17110                           status	equ	0xFD8
 17111                           
 17112 ;; *************** function __RegsToCANID *****************
 17113 ;; Defined at:
 17114 ;;		line 1156 in file "../ECAN.c"
 17115 ;; Parameters:    Size  Location     Type
 17116 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17117 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17118 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17119 ;;  val             1   15[COMRAM] PTR unsigned long 
 17120 ;;		 -> getVSCPFrame@id(4), 
 17121 ;;  type            1   16[COMRAM] unsigned char 
 17122 ;; Auto vars:     Size  Location     Type
 17123 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17124 ;;		 -> getVSCPFrame@id(4), 
 17125 ;; Return value:  Size  Location     Type
 17126 ;;		None               void
 17127 ;; Registers used:
 17128 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17129 ;; Tracked objects:
 17130 ;;		On entry : 0/0
 17131 ;;		On exit  : 0/0
 17132 ;;		Unchanged: 0/0
 17133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17134 ;;      Params:         4       0       0       0       0       0       0
 17135 ;;      Locals:         1       0       0       0       0       0       0
 17136 ;;      Temps:          2       0       0       0       0       0       0
 17137 ;;      Totals:         7       0       0       0       0       0       0
 17138 ;;Total ram usage:        7 bytes
 17139 ;; Hardware stack levels used:    1
 17140 ;; Hardware stack levels required when called:    2
 17141 ;; This function calls:
 17142 ;;		Nothing
 17143 ;; This function is called by:
 17144 ;;		_ECANReceiveMessage
 17145 ;; This function uses a non-reentrant model
 17146 ;;
 17147                           
 17148                           	psect	text76
 17149  003B8E                     __ptext76:
 17150                           	opt stack 0
 17151  003B8E                     __RegsToCANID:
 17152                           	opt stack 24
 17153                           
 17154                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17155                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17156                           
 17157                           ;incstack = 0
 17158                           ;incstack = 0
 17159  003B8E  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17160                           
 17161                           ;ECAN.c: 1161: if ( type == 0 )
 17162  003B92  6611               	tstfsz	__RegsToCANID@type,c
 17163  003B94  D02B               	goto	l8458
 17164                           
 17165                           ;ECAN.c: 1162: {
 17166                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17167  003B96  5014               	movf	__RegsToCANID@Value,w,c
 17168  003B98  6ED9               	movwf	fsr2l,c
 17169  003B9A  D862               	call	PL46	;call to abstracted procedure
 17170  003B9C  3612               	rlcf	??__RegsToCANID,f,c
 17171  003B9E  90D8               	bcf	status,0,c
 17172  003BA0  3612               	rlcf	??__RegsToCANID,f,c
 17173  003BA2  90D8               	bcf	status,0,c
 17174  003BA4  3412               	rlcf	??__RegsToCANID,w,c
 17175  003BA6  6EDF               	movwf	indf2,c
 17176                           
 17177                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17178  003BA8  5014               	movf	__RegsToCANID@Value,w,c
 17179  003BAA  6ED9               	movwf	fsr2l,c
 17180  003BAC  6ADA               	clrf	fsr2h,c
 17181  003BAE  2AD9               	incf	fsr2l,f,c
 17182  003BB0  6ADA               	clrf	fsr2h,c
 17183  003BB2  D873               	call	PL56	;call to abstracted procedure
 17184  003BB4                     u5945:
 17185  003BB4  90D8               	bcf	status,0,c
 17186  003BB6  3212               	rrcf	??__RegsToCANID,f,c
 17187  003BB8  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17188  003BBA  D7FC               	goto	u5945
 17189  003BBC  5012               	movf	??__RegsToCANID,w,c
 17190                           
 17191                           ;ECAN.c: 1166: ptr++;
 17192                           
 17193                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17194  003BBE  D859               	call	PL48	;call to abstracted procedure
 17195  003BC0  0E05               	movlw	5
 17196  003BC2  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17197  003BC4                     u5955:
 17198  003BC4  90D8               	bcf	status,0,c
 17199  003BC6  3212               	rrcf	??__RegsToCANID,f,c
 17200  003BC8  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17201  003BCA  D7FC               	goto	u5955
 17202  003BCC  5014               	movf	__RegsToCANID@Value,w,c
 17203  003BCE  6ED9               	movwf	fsr2l,c
 17204  003BD0  6ADA               	clrf	fsr2h,c
 17205  003BD2  5012               	movf	??__RegsToCANID,w,c
 17206  003BD4  12DF               	iorwf	indf2,f,c
 17207                           
 17208                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17209  003BD6  D83D               	call	PL26	;call to abstracted procedure
 17210  003BD8  6ADF               	clrf	indf2,c
 17211                           
 17212                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17213  003BDA  5014               	movf	__RegsToCANID@Value,w,c
 17214  003BDC  6ED9               	movwf	fsr2l,c
 17215  003BDE  6ADA               	clrf	fsr2h,c
 17216  003BE0  0E03               	movlw	3
 17217  003BE2  26D9               	addwf	fsr2l,f,c
 17218  003BE4  6ADA               	clrf	fsr2h,c
 17219  003BE6  0E00               	movlw	0
 17220  003BE8  6EDF               	movwf	indf2,c
 17221                           
 17222                           ;ECAN.c: 1170: }
 17223  003BEA  D032               	goto	l890
 17224  003BEC                     l8458:
 17225                           
 17226                           ;ECAN.c: 1171: else
 17227                           ;ECAN.c: 1172: {
 17228                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17229  003BEC  D832               	call	PL26	;call to abstracted procedure
 17230  003BEE  D855               	call	PL56	;call to abstracted procedure
 17231  003BF0                     u5965:
 17232  003BF0  90D8               	bcf	status,0,c
 17233  003BF2  3612               	rlcf	??__RegsToCANID,f,c
 17234  003BF4  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17235  003BF6  D7FC               	goto	u5965
 17236  003BF8  5012               	movf	??__RegsToCANID,w,c
 17237  003BFA  6EDF               	movwf	indf2,c
 17238                           
 17239                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17240  003BFC  5014               	movf	__RegsToCANID@Value,w,c
 17241  003BFE  6ED9               	movwf	fsr2l,c
 17242  003C00  6ADA               	clrf	fsr2h,c
 17243  003C02  0E03               	movlw	3
 17244  003C04  26D9               	addwf	fsr2l,f,c
 17245  003C06  D82C               	call	PL46	;call to abstracted procedure
 17246  003C08  3212               	rrcf	??__RegsToCANID,f,c
 17247  003C0A  90D8               	bcf	status,0,c
 17248  003C0C  3212               	rrcf	??__RegsToCANID,f,c
 17249  003C0E  90D8               	bcf	status,0,c
 17250  003C10  3012               	rrcf	??__RegsToCANID,w,c
 17251                           
 17252                           ;ECAN.c: 1176: ptr++;
 17253                           
 17254                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17255  003C12  D82F               	call	PL48	;call to abstracted procedure
 17256  003C14  0E03               	movlw	3
 17257  003C16  1612               	andwf	??__RegsToCANID,f,c
 17258  003C18  D81C               	call	PL26	;call to abstracted procedure
 17259  003C1A  5012               	movf	??__RegsToCANID,w,c
 17260  003C1C  12DF               	iorwf	indf2,f,c
 17261                           
 17262                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17263  003C1E  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17264  003C22  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17265  003C26  50DF               	movf	indf2,w,c
 17266  003C28  6E12               	movwf	??__RegsToCANID& (0+255),c
 17267  003C2A  90D8               	bcf	status,0,c
 17268  003C2C  3212               	rrcf	??__RegsToCANID,f,c
 17269  003C2E  90D8               	bcf	status,0,c
 17270  003C30  3212               	rrcf	??__RegsToCANID,f,c
 17271  003C32  90D8               	bcf	status,0,c
 17272  003C34  3212               	rrcf	??__RegsToCANID,f,c
 17273  003C36  0E1C               	movlw	28
 17274  003C38  1612               	andwf	??__RegsToCANID,f,c
 17275  003C3A  D80B               	call	PL26	;call to abstracted procedure
 17276  003C3C  5012               	movf	??__RegsToCANID,w,c
 17277  003C3E  12DF               	iorwf	indf2,f,c
 17278                           
 17279                           ;ECAN.c: 1180: ptr++;
 17280                           
 17281                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17282  003C40  D822               	call	PL52	;call to abstracted procedure
 17283  003C42  2AE1               	incf	fsr1l,f,c
 17284  003C44  6AE2               	clrf	fsr1h,c
 17285  003C46  CFDF FFE7          	movff	indf2,indf1
 17286                           
 17287                           ;ECAN.c: 1182: ptr++;
 17288                           
 17289                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17290  003C4A  D81D               	call	PL52	;call to abstracted procedure
 17291  003C4C  CFDF FFE7          	movff	indf2,indf1
 17292  003C50                     l890:
 17293  003C50  0012               	return	
 17294  003C52                     __end_of__RegsToCANID:
 17295                           	opt stack 0
 17296  003C52                     PL26:
 17297                           	opt stack 24
 17298  003C52  5014               	movf	__RegsToCANID@Value,w,c
 17299  003C54  6ED9               	movwf	fsr2l,c
 17300  003C56  6ADA               	clrf	fsr2h,c
 17301  003C58  0E02               	movlw	2
 17302  003C5A  26D9               	addwf	fsr2l,f,c
 17303  003C5C  6ADA               	clrf	fsr2h,c
 17304  003C5E  0012               	return	
 17305  003C60                     __end_ofPL26:
 17306                           	opt stack 0
 17307  003C60                     PL46:
 17308                           	opt stack 24
 17309  003C60  6ADA               	clrf	fsr2h,c
 17310  003C62  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17311  003C66  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17312  003C6A  50E7               	movf	indf1,w,c
 17313  003C6C  6E12               	movwf	??__RegsToCANID& (0+255),c
 17314  003C6E  90D8               	bcf	status,0,c
 17315  003C70  0012               	return	
 17316  003C72                     __end_ofPL46:
 17317                           	opt stack 0
 17318  003C72                     PL48:
 17319                           	opt stack 24
 17320  003C72  6EDF               	movwf	indf2,c
 17321  003C74  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17322  003C76  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17323  003C78  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17324  003C7C  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17325  003C80  50DF               	movf	indf2,w,c
 17326  003C82  6E12               	movwf	??__RegsToCANID& (0+255),c
 17327  003C84  0012               	return	
 17328  003C86                     __end_ofPL48:
 17329                           	opt stack 0
 17330  003C86                     PL52:
 17331                           	opt stack 24
 17332  003C86  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17333  003C88  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17334  003C8A  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17335  003C8E  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17336  003C92  5014               	movf	__RegsToCANID@Value,w,c
 17337  003C94  6EE1               	movwf	fsr1l,c
 17338  003C96  6AE2               	clrf	fsr1h,c
 17339  003C98  0012               	return	
 17340  003C9A                     __end_ofPL52:
 17341                           	opt stack 0
 17342  003C9A                     PL56:
 17343                           	opt stack 24
 17344  003C9A  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17345  003C9E  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17346  003CA2  50E7               	movf	indf1,w,c
 17347  003CA4  6E12               	movwf	??__RegsToCANID& (0+255),c
 17348  003CA6  0E05               	movlw	5
 17349  003CA8  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17350  003CAA  0C05               	retlw	5
 17351  003CAC                     __end_ofPL56:
 17352                           	opt stack 0
 17353                           tblptru	equ	0xFF8
 17354                           tblptrh	equ	0xFF7
 17355                           tblptrl	equ	0xFF6
 17356                           tablat	equ	0xFF5
 17357                           prodh	equ	0xFF4
 17358                           prodl	equ	0xFF3
 17359                           intcon	equ	0xFF2
 17360                           postinc0	equ	0xFEE
 17361                           wreg	equ	0xFE8
 17362                           indf1	equ	0xFE7
 17363                           postdec1	equ	0xFE5
 17364                           fsr1h	equ	0xFE2
 17365                           fsr1l	equ	0xFE1
 17366                           indf2	equ	0xFDF
 17367                           postinc2	equ	0xFDE
 17368                           postdec2	equ	0xFDD
 17369                           plusw2	equ	0xFDB
 17370                           fsr2h	equ	0xFDA
 17371                           fsr2l	equ	0xFD9
 17372                           status	equ	0xFD8
 17373                           
 17374 ;; *************** function __ECANPointBuffer *****************
 17375 ;; Defined at:
 17376 ;;		line 1207 in file "../ECAN.c"
 17377 ;; Parameters:    Size  Location     Type
 17378 ;;  b               1    wreg     unsigned char 
 17379 ;; Auto vars:     Size  Location     Type
 17380 ;;  b               1   16[COMRAM] unsigned char 
 17381 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17382 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17383 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17384 ;; Return value:  Size  Location     Type
 17385 ;;                  2   13[COMRAM] PTR unsigned char 
 17386 ;; Registers used:
 17387 ;;		wreg, status,2, status,0
 17388 ;; Tracked objects:
 17389 ;;		On entry : F/0
 17390 ;;		On exit  : 0/0
 17391 ;;		Unchanged: 0/0
 17392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17393 ;;      Params:         3       0       0       0       0       0       0
 17394 ;;      Locals:         3       0       0       0       0       0       0
 17395 ;;      Temps:          0       0       0       0       0       0       0
 17396 ;;      Totals:         6       0       0       0       0       0       0
 17397 ;;Total ram usage:        6 bytes
 17398 ;; Hardware stack levels used:    1
 17399 ;; Hardware stack levels required when called:    2
 17400 ;; This function calls:
 17401 ;;		Nothing
 17402 ;; This function is called by:
 17403 ;;		_ECANReceiveMessage
 17404 ;; This function uses a non-reentrant model
 17405 ;;
 17406                           
 17407                           	psect	text77
 17408  004ACA                     __ptext77:
 17409                           	opt stack 0
 17410  004ACA                     __ECANPointBuffer:
 17411                           	opt stack 24
 17412                           
 17413                           ;incstack = 0
 17414                           ;incstack = 0
 17415                           ;__ECANPointBuffer@b stored from wreg
 17416  004ACA  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17417                           
 17418                           ; BSR set to: 0
 17419                           ;ECAN.c: 1208: BYTE* pt;
 17420                           ;ECAN.c: 1210: switch(b)
 17421  004ACE  D024               	goto	l8444
 17422  004AD0                     l8426:
 17423                           
 17424                           ; BSR set to: 0
 17425                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17426  004AD0  0E0F               	movlw	15	;volatile
 17427  004AD2  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17428  004AD4  0E60               	movlw	96	;volatile
 17429  004AD6  D01E               	goto	L38
 17430  004AD8                     l8428:
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17434  004AD8  010F               	movlb	15	; () banked
 17435  004ADA  0E0F               	movlw	15	;volatile
 17436  004ADC  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17437  004ADE  0E50               	movlw	80	;volatile
 17438  004AE0  D019               	goto	L38
 17439  004AE2                     l8430:
 17440                           
 17441                           ; BSR set to: 0
 17442                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17443  004AE2  010E               	movlb	14	; () banked
 17444  004AE4  0E0E               	movlw	14	;volatile
 17445  004AE6  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17446  004AE8  0E20               	movlw	32	;volatile
 17447  004AEA  D014               	goto	L38
 17448  004AEC                     l8432:
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17452  004AEC  010E               	movlb	14	; () banked
 17453  004AEE  0E0E               	movlw	14	;volatile
 17454  004AF0  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17455  004AF2  0E30               	movlw	48	;volatile
 17456  004AF4  D00F               	goto	L38
 17457  004AF6                     l8434:
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17461  004AF6  010E               	movlb	14	; () banked
 17462  004AF8  0E0E               	movlw	14	;volatile
 17463  004AFA  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17464  004AFC  0E40               	movlw	64	;volatile
 17465  004AFE  D00A               	goto	L38
 17466  004B00                     l8436:
 17467                           
 17468                           ; BSR set to: 0
 17469                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17470  004B00  010E               	movlb	14	; () banked
 17471  004B02  0E0E               	movlw	14	;volatile
 17472  004B04  D7EB               	goto	L39
 17473  004B06                     l8438:
 17474                           
 17475                           ; BSR set to: 0
 17476                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17477  004B06  010E               	movlb	14	; () banked
 17478  004B08  0E0E               	movlw	14	;volatile
 17479  004B0A  D7E3               	goto	L40
 17480  004B0C                     l8440:
 17481                           
 17482                           ; BSR set to: 0
 17483                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17484  004B0C  010E               	movlb	14	; () banked
 17485  004B0E  0E0E               	movlw	14	;volatile
 17486  004B10  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17487  004B12  0E70               	movlw	112	;volatile
 17488  004B14                     L38:
 17489  004B14  6E12               	movwf	__ECANPointBuffer@pt,c
 17490                           
 17491                           ;ECAN.c: 1235: break;
 17492  004B16  D00F               	goto	l895
 17493  004B18                     l8444:
 17494                           
 17495                           ; BSR set to: 0
 17496  004B18  5011               	movf	__ECANPointBuffer@b,w,c
 17497                           
 17498                           ; Switch size 1, requested type "space"
 17499                           ; Number of cases is 7, Range of values is 0 to 6
 17500                           ; switch strategies available:
 17501                           ; Name         Instructions Cycles
 17502                           ; simple_byte           22    12 (average)
 17503                           ;	Chosen strategy is simple_byte
 17504  004B1A  E0DA               	bz	l8426
 17505  004B1C  0A01               	xorlw	1	; case 1
 17506  004B1E  E0DC               	bz	l8428
 17507  004B20  0A03               	xorlw	3	; case 2
 17508  004B22  E0DF               	bz	l8430
 17509  004B24  0A01               	xorlw	1	; case 3
 17510  004B26  E0E2               	bz	l8432
 17511  004B28  0A07               	xorlw	7	; case 4
 17512  004B2A  E0E5               	bz	l8434
 17513  004B2C  0A01               	xorlw	1	; case 5
 17514  004B2E  E0E8               	bz	l8436
 17515  004B30  0A03               	xorlw	3	; case 6
 17516  004B32  E0E9               	bz	l8438
 17517  004B34  D7EB               	goto	l8440
 17518  004B36                     l895:
 17519                           
 17520                           ;ECAN.c: 1237: return (pt);
 17521  004B36  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17522  004B3A  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17523  004B3E  0012               	return	
 17524  004B40                     __end_of__ECANPointBuffer:
 17525                           	opt stack 0
 17526                           tblptru	equ	0xFF8
 17527                           tblptrh	equ	0xFF7
 17528                           tblptrl	equ	0xFF6
 17529                           tablat	equ	0xFF5
 17530                           prodh	equ	0xFF4
 17531                           prodl	equ	0xFF3
 17532                           intcon	equ	0xFF2
 17533                           postinc0	equ	0xFEE
 17534                           wreg	equ	0xFE8
 17535                           indf1	equ	0xFE7
 17536                           postdec1	equ	0xFE5
 17537                           fsr1h	equ	0xFE2
 17538                           fsr1l	equ	0xFE1
 17539                           indf2	equ	0xFDF
 17540                           postinc2	equ	0xFDE
 17541                           postdec2	equ	0xFDD
 17542                           plusw2	equ	0xFDB
 17543                           fsr2h	equ	0xFDA
 17544                           fsr2l	equ	0xFD9
 17545                           status	equ	0xFD8
 17546                           
 17547 ;; *************** function _vscp_check_pstorage *****************
 17548 ;; Defined at:
 17549 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 17550 ;; Parameters:    Size  Location     Type
 17551 ;;		None
 17552 ;; Auto vars:     Size  Location     Type
 17553 ;;		None
 17554 ;; Return value:  Size  Location     Type
 17555 ;;                  1    wreg      unsigned char 
 17556 ;; Registers used:
 17557 ;;		wreg, status,2, status,0, cstack
 17558 ;; Tracked objects:
 17559 ;;		On entry : 1/1
 17560 ;;		On exit  : 0/0
 17561 ;;		Unchanged: 0/0
 17562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17563 ;;      Params:         0       0       0       0       0       0       0
 17564 ;;      Locals:         0       0       0       0       0       0       0
 17565 ;;      Temps:          0       0       0       0       0       0       0
 17566 ;;      Totals:         0       0       0       0       0       0       0
 17567 ;;Total ram usage:        0 bytes
 17568 ;; Hardware stack levels used:    1
 17569 ;; Hardware stack levels required when called:    4
 17570 ;; This function calls:
 17571 ;;		_vscp_writeNicknamePermanent
 17572 ;;		_vscp_getSegmentCRC
 17573 ;;		_vscp_setSegmentCRC
 17574 ;;		_vscp_setControlByte
 17575 ;; This function is called by:
 17576 ;;		_main
 17577 ;; This function uses a non-reentrant model
 17578 ;;
 17579                           
 17580                           	psect	text78
 17581  005288                     __ptext78:
 17582                           	opt stack 0
 17583  005288                     _vscp_check_pstorage:
 17584                           	opt stack 26
 17585                           
 17586                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17587                           
 17588                           ;incstack = 0
 17589                           ;incstack = 0
 17590  005288  EC59  F02A         	call	_vscp_getSegmentCRC	;wreg free
 17591  00528C  0BC0               	andlw	192
 17592  00528E  0A40               	xorlw	64
 17593  005290  E102               	bnz	l9556
 17594                           
 17595                           ;vscp_firmware.c: 170: return !0;
 17596  005292  0E01               	movlw	1
 17597  005294  D00A               	goto	l1036
 17598  005296                     l9556:
 17599                           
 17600                           ;vscp_firmware.c: 171: }
 17601                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 17602  005296  0EFF               	movlw	255
 17603  005298  EC25  F02A         	call	_vscp_writeNicknamePermanent
 17604                           
 17605                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 17606  00529C  0E00               	movlw	0
 17607  00529E  EC13  F02A         	call	_vscp_setSegmentCRC
 17608                           
 17609                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 17610  0052A2  0EA0               	movlw	160
 17611  0052A4  EC0A  F02A         	call	_vscp_setControlByte
 17612                           
 17613                           ;vscp_firmware.c: 183: return 0;
 17614  0052A8  0E00               	movlw	0
 17615  0052AA                     l1036:
 17616  0052AA  0012               	return	
 17617  0052AC                     __end_of_vscp_check_pstorage:
 17618                           	opt stack 0
 17619                           tblptru	equ	0xFF8
 17620                           tblptrh	equ	0xFF7
 17621                           tblptrl	equ	0xFF6
 17622                           tablat	equ	0xFF5
 17623                           prodh	equ	0xFF4
 17624                           prodl	equ	0xFF3
 17625                           intcon	equ	0xFF2
 17626                           postinc0	equ	0xFEE
 17627                           wreg	equ	0xFE8
 17628                           indf1	equ	0xFE7
 17629                           postdec1	equ	0xFE5
 17630                           fsr1h	equ	0xFE2
 17631                           fsr1l	equ	0xFE1
 17632                           indf2	equ	0xFDF
 17633                           postinc2	equ	0xFDE
 17634                           postdec2	equ	0xFDD
 17635                           plusw2	equ	0xFDB
 17636                           fsr2h	equ	0xFDA
 17637                           fsr2l	equ	0xFD9
 17638                           status	equ	0xFD8
 17639                           
 17640 ;; *************** function _vscp_setControlByte *****************
 17641 ;; Defined at:
 17642 ;;		line 2792 in file "../main.c"
 17643 ;; Parameters:    Size  Location     Type
 17644 ;;  ctrl            1    wreg     unsigned char 
 17645 ;; Auto vars:     Size  Location     Type
 17646 ;;  ctrl            1   16[COMRAM] unsigned char 
 17647 ;; Return value:  Size  Location     Type
 17648 ;;		None               void
 17649 ;; Registers used:
 17650 ;;		wreg, status,2, cstack
 17651 ;; Tracked objects:
 17652 ;;		On entry : 0/1
 17653 ;;		On exit  : 0/0
 17654 ;;		Unchanged: 0/0
 17655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17656 ;;      Params:         0       0       0       0       0       0       0
 17657 ;;      Locals:         1       0       0       0       0       0       0
 17658 ;;      Temps:          0       0       0       0       0       0       0
 17659 ;;      Totals:         1       0       0       0       0       0       0
 17660 ;;Total ram usage:        1 bytes
 17661 ;; Hardware stack levels used:    1
 17662 ;; Hardware stack levels required when called:    3
 17663 ;; This function calls:
 17664 ;;		_writeEEPROM
 17665 ;; This function is called by:
 17666 ;;		_vscp_check_pstorage
 17667 ;; This function uses a non-reentrant model
 17668 ;;
 17669                           
 17670                           	psect	text79
 17671  005414                     __ptext79:
 17672                           	opt stack 0
 17673  005414                     _vscp_setControlByte:
 17674                           	opt stack 26
 17675                           
 17676                           ;incstack = 0
 17677                           ;incstack = 0
 17678                           ;vscp_setControlByte@ctrl stored from wreg
 17679  005414  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17680                           
 17681                           ;main.c: 2793: writeEEPROM(0x03, ctrl);
 17682  005418  6A0F               	clrf	?_writeEEPROM+1,c
 17683  00541A  0E03               	movlw	3
 17684  00541C  6E0E               	movwf	?_writeEEPROM,c
 17685  00541E  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17686  005422  EF0D  F029         	goto	_writeEEPROM	;wreg free
 17687  005426                     __end_of_vscp_setControlByte:
 17688                           	opt stack 0
 17689                           tblptru	equ	0xFF8
 17690                           tblptrh	equ	0xFF7
 17691                           tblptrl	equ	0xFF6
 17692                           tablat	equ	0xFF5
 17693                           prodh	equ	0xFF4
 17694                           prodl	equ	0xFF3
 17695                           intcon	equ	0xFF2
 17696                           postinc0	equ	0xFEE
 17697                           wreg	equ	0xFE8
 17698                           indf1	equ	0xFE7
 17699                           postdec1	equ	0xFE5
 17700                           fsr1h	equ	0xFE2
 17701                           fsr1l	equ	0xFE1
 17702                           indf2	equ	0xFDF
 17703                           postinc2	equ	0xFDE
 17704                           postdec2	equ	0xFDD
 17705                           plusw2	equ	0xFDB
 17706                           fsr2h	equ	0xFDA
 17707                           fsr2l	equ	0xFD9
 17708                           status	equ	0xFD8
 17709                           
 17710 ;; *************** function _vscp_setSegmentCRC *****************
 17711 ;; Defined at:
 17712 ;;		line 2783 in file "../main.c"
 17713 ;; Parameters:    Size  Location     Type
 17714 ;;  crc             1    wreg     unsigned char 
 17715 ;; Auto vars:     Size  Location     Type
 17716 ;;  crc             1   16[COMRAM] unsigned char 
 17717 ;; Return value:  Size  Location     Type
 17718 ;;		None               void
 17719 ;; Registers used:
 17720 ;;		wreg, status,2, cstack
 17721 ;; Tracked objects:
 17722 ;;		On entry : 0/0
 17723 ;;		On exit  : 0/0
 17724 ;;		Unchanged: 0/0
 17725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17726 ;;      Params:         0       0       0       0       0       0       0
 17727 ;;      Locals:         1       0       0       0       0       0       0
 17728 ;;      Temps:          0       0       0       0       0       0       0
 17729 ;;      Totals:         1       0       0       0       0       0       0
 17730 ;;Total ram usage:        1 bytes
 17731 ;; Hardware stack levels used:    1
 17732 ;; Hardware stack levels required when called:    3
 17733 ;; This function calls:
 17734 ;;		_writeEEPROM
 17735 ;; This function is called by:
 17736 ;;		_vscp_check_pstorage
 17737 ;;		_vscp_handleProbeState
 17738 ;;		_vscp_handleHeartbeat
 17739 ;;		_vscp_handleSetNickname
 17740 ;; This function uses a non-reentrant model
 17741 ;;
 17742                           
 17743                           	psect	text80
 17744  005426                     __ptext80:
 17745                           	opt stack 0
 17746  005426                     _vscp_setSegmentCRC:
 17747                           	opt stack 25
 17748                           
 17749                           ;incstack = 0
 17750                           ;incstack = 0
 17751                           ;vscp_setSegmentCRC@crc stored from wreg
 17752  005426  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17753                           
 17754                           ;main.c: 2784: writeEEPROM(0x02, crc);
 17755  00542A  6A0F               	clrf	?_writeEEPROM+1,c
 17756  00542C  0E02               	movlw	2
 17757  00542E  6E0E               	movwf	?_writeEEPROM,c
 17758  005430  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17759  005434  EF0D  F029         	goto	_writeEEPROM	;wreg free
 17760  005438                     __end_of_vscp_setSegmentCRC:
 17761                           	opt stack 0
 17762                           tblptru	equ	0xFF8
 17763                           tblptrh	equ	0xFF7
 17764                           tblptrl	equ	0xFF6
 17765                           tablat	equ	0xFF5
 17766                           prodh	equ	0xFF4
 17767                           prodl	equ	0xFF3
 17768                           intcon	equ	0xFF2
 17769                           postinc0	equ	0xFEE
 17770                           wreg	equ	0xFE8
 17771                           indf1	equ	0xFE7
 17772                           postdec1	equ	0xFE5
 17773                           fsr1h	equ	0xFE2
 17774                           fsr1l	equ	0xFE1
 17775                           indf2	equ	0xFDF
 17776                           postinc2	equ	0xFDE
 17777                           postdec2	equ	0xFDD
 17778                           plusw2	equ	0xFDB
 17779                           fsr2h	equ	0xFDA
 17780                           fsr2l	equ	0xFD9
 17781                           status	equ	0xFD8
 17782                           
 17783 ;; *************** function _vscp_getSegmentCRC *****************
 17784 ;; Defined at:
 17785 ;;		line 2774 in file "../main.c"
 17786 ;; Parameters:    Size  Location     Type
 17787 ;;		None
 17788 ;; Auto vars:     Size  Location     Type
 17789 ;;		None
 17790 ;; Return value:  Size  Location     Type
 17791 ;;                  1    wreg      unsigned char 
 17792 ;; Registers used:
 17793 ;;		wreg, status,2, cstack
 17794 ;; Tracked objects:
 17795 ;;		On entry : 0/0
 17796 ;;		On exit  : 0/0
 17797 ;;		Unchanged: 0/0
 17798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17799 ;;      Params:         0       0       0       0       0       0       0
 17800 ;;      Locals:         0       0       0       0       0       0       0
 17801 ;;      Temps:          0       0       0       0       0       0       0
 17802 ;;      Totals:         0       0       0       0       0       0       0
 17803 ;;Total ram usage:        0 bytes
 17804 ;; Hardware stack levels used:    1
 17805 ;; Hardware stack levels required when called:    3
 17806 ;; This function calls:
 17807 ;;		_readEEPROM
 17808 ;; This function is called by:
 17809 ;;		_vscp_check_pstorage
 17810 ;;		_vscp_handleHeartbeat
 17811 ;; This function uses a non-reentrant model
 17812 ;;
 17813                           
 17814                           	psect	text81
 17815  0054B2                     __ptext81:
 17816                           	opt stack 0
 17817  0054B2                     _vscp_getSegmentCRC:
 17818                           	opt stack 25
 17819                           
 17820                           ;main.c: 2775: return readEEPROM(0x02);
 17821                           
 17822                           ;incstack = 0
 17823                           ;incstack = 0
 17824  0054B2  6A0F               	clrf	?_readEEPROM+1,c
 17825  0054B4  0E02               	movlw	2
 17826  0054B6  6E0E               	movwf	?_readEEPROM,c
 17827  0054B8  EF1C  F02A         	goto	_readEEPROM	;wreg free
 17828  0054BC                     __end_of_vscp_getSegmentCRC:
 17829                           	opt stack 0
 17830                           tblptru	equ	0xFF8
 17831                           tblptrh	equ	0xFF7
 17832                           tblptrl	equ	0xFF6
 17833                           tablat	equ	0xFF5
 17834                           prodh	equ	0xFF4
 17835                           prodl	equ	0xFF3
 17836                           intcon	equ	0xFF2
 17837                           postinc0	equ	0xFEE
 17838                           wreg	equ	0xFE8
 17839                           indf1	equ	0xFE7
 17840                           postdec1	equ	0xFE5
 17841                           fsr1h	equ	0xFE2
 17842                           fsr1l	equ	0xFE1
 17843                           indf2	equ	0xFDF
 17844                           postinc2	equ	0xFDE
 17845                           postdec2	equ	0xFDD
 17846                           plusw2	equ	0xFDB
 17847                           fsr2h	equ	0xFDA
 17848                           fsr2l	equ	0xFD9
 17849                           status	equ	0xFD8
 17850                           
 17851 ;; *************** function _readEEPROM *****************
 17852 ;; Defined at:
 17853 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 17854 ;; Parameters:    Size  Location     Type
 17855 ;;  address         2   13[COMRAM] unsigned short 
 17856 ;; Auto vars:     Size  Location     Type
 17857 ;;  data            1   16[COMRAM] unsigned char 
 17858 ;; Return value:  Size  Location     Type
 17859 ;;                  1    wreg      unsigned char 
 17860 ;; Registers used:
 17861 ;;		wreg, status,2
 17862 ;; Tracked objects:
 17863 ;;		On entry : 0/0
 17864 ;;		On exit  : 0/0
 17865 ;;		Unchanged: 0/0
 17866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17867 ;;      Params:         2       0       0       0       0       0       0
 17868 ;;      Locals:         2       0       0       0       0       0       0
 17869 ;;      Temps:          0       0       0       0       0       0       0
 17870 ;;      Totals:         4       0       0       0       0       0       0
 17871 ;;Total ram usage:        4 bytes
 17872 ;; Hardware stack levels used:    1
 17873 ;; Hardware stack levels required when called:    2
 17874 ;; This function calls:
 17875 ;;		Nothing
 17876 ;; This function is called by:
 17877 ;;		_doWork
 17878 ;;		_doOneSecondWork
 17879 ;;		_sendTempEvent
 17880 ;;		_getCalibrationValue
 17881 ;;		_writeCoeffs2Ram
 17882 ;;		_handle_sync
 17883 ;;		_vscp_readAppReg
 17884 ;;		_vscp_writeAppReg
 17885 ;;		_vscp_getGUID
 17886 ;;		_vscp_getUserID
 17887 ;;		_vscp_getManufacturerId
 17888 ;;		_vscp_getZone
 17889 ;;		_vscp_getSubzone
 17890 ;;		_vscp_readNicknamePermanent
 17891 ;;		_vscp_getSegmentCRC
 17892 ;; This function uses a non-reentrant model
 17893 ;;
 17894                           
 17895                           	psect	text82
 17896  005438                     __ptext82:
 17897                           	opt stack 0
 17898  005438                     _readEEPROM:
 17899                           	opt stack 26
 17900                           
 17901                           ;eeprom.c: 93: uint8_t data;
 17902                           ;eeprom.c: 98: EEADR = address & 0xff;
 17903                           
 17904                           ;incstack = 0
 17905                           ;incstack = 0
 17906  005438  C00E  FFA9         	movff	readEEPROM@address,4009	;volatile
 17907                           
 17908                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 17909  00543C  9EA6               	bcf	4006,7,c	;volatile
 17910                           
 17911                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 17912  00543E  9CA6               	bcf	4006,6,c	;volatile
 17913                           
 17914                           ;eeprom.c: 101: EECON1bits.RD = 1;
 17915  005440  80A6               	bsf	4006,0,c	;volatile
 17916                           
 17917                           ;eeprom.c: 102: data = EEDATA;
 17918  005442  CFA8 F011          	movff	4008,readEEPROM@data	;volatile
 17919                           
 17920                           ;eeprom.c: 104: return data;
 17921  005446  5011               	movf	readEEPROM@data,w,c
 17922  005448  0012               	return	
 17923  00544A                     __end_of_readEEPROM:
 17924                           	opt stack 0
 17925                           tblptru	equ	0xFF8
 17926                           tblptrh	equ	0xFF7
 17927                           tblptrl	equ	0xFF6
 17928                           tablat	equ	0xFF5
 17929                           prodh	equ	0xFF4
 17930                           prodl	equ	0xFF3
 17931                           intcon	equ	0xFF2
 17932                           postinc0	equ	0xFEE
 17933                           wreg	equ	0xFE8
 17934                           indf1	equ	0xFE7
 17935                           postdec1	equ	0xFE5
 17936                           fsr1h	equ	0xFE2
 17937                           fsr1l	equ	0xFE1
 17938                           indf2	equ	0xFDF
 17939                           postinc2	equ	0xFDE
 17940                           postdec2	equ	0xFDD
 17941                           plusw2	equ	0xFDB
 17942                           fsr2h	equ	0xFDA
 17943                           fsr2l	equ	0xFD9
 17944                           status	equ	0xFD8
 17945                           
 17946 ;; *************** function _vscp_writeNicknamePermanent *****************
 17947 ;; Defined at:
 17948 ;;		line 2765 in file "../main.c"
 17949 ;; Parameters:    Size  Location     Type
 17950 ;;  nickname        1    wreg     unsigned char 
 17951 ;; Auto vars:     Size  Location     Type
 17952 ;;  nickname        1   16[COMRAM] unsigned char 
 17953 ;; Return value:  Size  Location     Type
 17954 ;;		None               void
 17955 ;; Registers used:
 17956 ;;		wreg, status,2, cstack
 17957 ;; Tracked objects:
 17958 ;;		On entry : 0/0
 17959 ;;		On exit  : 0/0
 17960 ;;		Unchanged: 0/0
 17961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17962 ;;      Params:         0       0       0       0       0       0       0
 17963 ;;      Locals:         1       0       0       0       0       0       0
 17964 ;;      Temps:          0       0       0       0       0       0       0
 17965 ;;      Totals:         1       0       0       0       0       0       0
 17966 ;;Total ram usage:        1 bytes
 17967 ;; Hardware stack levels used:    1
 17968 ;; Hardware stack levels required when called:    3
 17969 ;; This function calls:
 17970 ;;		_writeEEPROM
 17971 ;; This function is called by:
 17972 ;;		_vscp_check_pstorage
 17973 ;;		_vscp_handleProbeState
 17974 ;;		_vscp_handleHeartbeat
 17975 ;;		_vscp_handleSetNickname
 17976 ;;		_vscp_handleDropNickname
 17977 ;; This function uses a non-reentrant model
 17978 ;;
 17979                           
 17980                           	psect	text83
 17981  00544A                     __ptext83:
 17982                           	opt stack 0
 17983  00544A                     _vscp_writeNicknamePermanent:
 17984                           	opt stack 25
 17985                           
 17986                           ;incstack = 0
 17987                           ;incstack = 0
 17988                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 17989  00544A  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 17990                           
 17991                           ;main.c: 2766: writeEEPROM( 0x01, nickname );
 17992  00544E  6A0F               	clrf	?_writeEEPROM+1,c
 17993  005450  0E01               	movlw	1
 17994  005452  6E0E               	movwf	?_writeEEPROM,c
 17995  005454  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 17996  005458  EF0D  F029         	goto	_writeEEPROM	;wreg free
 17997  00545C                     __end_of_vscp_writeNicknamePermanent:
 17998                           	opt stack 0
 17999                           tblptru	equ	0xFF8
 18000                           tblptrh	equ	0xFF7
 18001                           tblptrl	equ	0xFF6
 18002                           tablat	equ	0xFF5
 18003                           prodh	equ	0xFF4
 18004                           prodl	equ	0xFF3
 18005                           intcon	equ	0xFF2
 18006                           postinc0	equ	0xFEE
 18007                           wreg	equ	0xFE8
 18008                           indf1	equ	0xFE7
 18009                           postdec1	equ	0xFE5
 18010                           fsr1h	equ	0xFE2
 18011                           fsr1l	equ	0xFE1
 18012                           indf2	equ	0xFDF
 18013                           postinc2	equ	0xFDE
 18014                           postdec2	equ	0xFDD
 18015                           plusw2	equ	0xFDB
 18016                           fsr2h	equ	0xFDA
 18017                           fsr2l	equ	0xFD9
 18018                           status	equ	0xFD8
 18019                           
 18020 ;; *************** function _writeEEPROM *****************
 18021 ;; Defined at:
 18022 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 18023 ;; Parameters:    Size  Location     Type
 18024 ;;  address         2   13[COMRAM] unsigned short 
 18025 ;;  data            1   15[COMRAM] unsigned char 
 18026 ;; Auto vars:     Size  Location     Type
 18027 ;;		None
 18028 ;; Return value:  Size  Location     Type
 18029 ;;		None               void
 18030 ;; Registers used:
 18031 ;;		wreg, status,2
 18032 ;; Tracked objects:
 18033 ;;		On entry : 0/0
 18034 ;;		On exit  : 0/0
 18035 ;;		Unchanged: 0/0
 18036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18037 ;;      Params:         3       0       0       0       0       0       0
 18038 ;;      Locals:         0       0       0       0       0       0       0
 18039 ;;      Temps:          0       0       0       0       0       0       0
 18040 ;;      Totals:         3       0       0       0       0       0       0
 18041 ;;Total ram usage:        3 bytes
 18042 ;; Hardware stack levels used:    1
 18043 ;; Hardware stack levels required when called:    2
 18044 ;; This function calls:
 18045 ;;		Nothing
 18046 ;; This function is called by:
 18047 ;;		_main
 18048 ;;		_doWork
 18049 ;;		_init_app_eeprom
 18050 ;;		_vscp_writeAppReg
 18051 ;;		_vscp_setGUID
 18052 ;;		_vscp_setUserID
 18053 ;;		_vscp_setManufacturerId
 18054 ;;		_vscp_goBootloaderMode
 18055 ;;		_vscp_writeNicknamePermanent
 18056 ;;		_vscp_setSegmentCRC
 18057 ;;		_vscp_setControlByte
 18058 ;; This function uses a non-reentrant model
 18059 ;;
 18060                           
 18061                           	psect	text84
 18062  00521A                     __ptext84:
 18063                           	opt stack 0
 18064  00521A                     _writeEEPROM:
 18065                           	opt stack 27
 18066                           
 18067                           ;eeprom.c: 29: EEADR = address & 0xff;
 18068                           
 18069                           ;incstack = 0
 18070                           ;incstack = 0
 18071  00521A  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 18072                           
 18073                           ;eeprom.c: 30: EEDATA = data;
 18074  00521E  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18075                           
 18076                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 18077  005222  9EA6               	bcf	4006,7,c	;volatile
 18078                           
 18079                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 18080  005224  9CA6               	bcf	4006,6,c	;volatile
 18081                           
 18082                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 18083  005226  84A6               	bsf	4006,2,c	;volatile
 18084                           
 18085                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 18086  005228  9EF2               	bcf	intcon,7,c	;volatile
 18087                           
 18088                           ;eeprom.c: 37: EECON2 = 0x55;
 18089  00522A  0E55               	movlw	85
 18090  00522C  6EA7               	movwf	4007,c	;volatile
 18091                           
 18092                           ;eeprom.c: 38: EECON2 = 0xaa;
 18093  00522E  0EAA               	movlw	170
 18094  005230  6EA7               	movwf	4007,c	;volatile
 18095                           
 18096                           ;eeprom.c: 39: EECON1bits.WR = 1;
 18097  005232  82A6               	bsf	4006,1,c	;volatile
 18098                           
 18099                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 18100  005234  8EF2               	bsf	intcon,7,c	;volatile
 18101  005236                     l918:
 18102  005236  A8A1               	btfss	4001,4,c	;volatile
 18103  005238  D7FE               	goto	l918
 18104                           
 18105                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 18106  00523A  98A1               	bcf	4001,4,c	;volatile
 18107                           
 18108                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 18109  00523C  94A6               	bcf	4006,2,c	;volatile
 18110  00523E  0012               	return	
 18111  005240                     __end_of_writeEEPROM:
 18112                           	opt stack 0
 18113                           tblptru	equ	0xFF8
 18114                           tblptrh	equ	0xFF7
 18115                           tblptrl	equ	0xFF6
 18116                           tablat	equ	0xFF5
 18117                           prodh	equ	0xFF4
 18118                           prodl	equ	0xFF3
 18119                           intcon	equ	0xFF2
 18120                           postinc0	equ	0xFEE
 18121                           wreg	equ	0xFE8
 18122                           indf1	equ	0xFE7
 18123                           postdec1	equ	0xFE5
 18124                           fsr1h	equ	0xFE2
 18125                           fsr1l	equ	0xFE1
 18126                           indf2	equ	0xFDF
 18127                           postinc2	equ	0xFDE
 18128                           postdec2	equ	0xFDD
 18129                           plusw2	equ	0xFDB
 18130                           fsr2h	equ	0xFDA
 18131                           fsr2l	equ	0xFD9
 18132                           status	equ	0xFD8
 18133                           
 18134 ;; *************** function _init *****************
 18135 ;; Defined at:
 18136 ;;		line 886 in file "../main.c"
 18137 ;; Parameters:    Size  Location     Type
 18138 ;;		None
 18139 ;; Auto vars:     Size  Location     Type
 18140 ;;		None
 18141 ;; Return value:  Size  Location     Type
 18142 ;;		None               void
 18143 ;; Registers used:
 18144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18145 ;; Tracked objects:
 18146 ;;		On entry : 0/0
 18147 ;;		On exit  : 1/1
 18148 ;;		Unchanged: 0/0
 18149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18150 ;;      Params:         0       0       0       0       0       0       0
 18151 ;;      Locals:         0       0       0       0       0       0       0
 18152 ;;      Temps:          0       0       0       0       0       0       0
 18153 ;;      Totals:         0       0       0       0       0       0       0
 18154 ;;Total ram usage:        0 bytes
 18155 ;; Hardware stack levels used:    1
 18156 ;; Hardware stack levels required when called:    5
 18157 ;; This function calls:
 18158 ;;		_WriteTimer0
 18159 ;;		_ConvertADC
 18160 ;;		_init_app_ram
 18161 ;;		_OpenTimer0
 18162 ;;		_OpenADC
 18163 ;;		_ECANInitialize
 18164 ;; This function is called by:
 18165 ;;		_main
 18166 ;; This function uses a non-reentrant model
 18167 ;;
 18168                           
 18169                           	psect	text85
 18170  004FEE                     __ptext85:
 18171                           	opt stack 0
 18172  004FEE                     _init:
 18173                           	opt stack 25
 18174                           
 18175                           ;main.c: 890: init_app_ram();
 18176                           
 18177                           ;incstack = 0
 18178                           ;incstack = 0
 18179  004FEE  EC57  F027         	call	_init_app_ram	;wreg free
 18180                           
 18181                           ; BSR set to: 1
 18182                           ;main.c: 898: TRISA = 0x07;
 18183  004FF2  0E07               	movlw	7
 18184  004FF4  6E92               	movwf	3986,c	;volatile
 18185                           
 18186                           ; BSR set to: 1
 18187                           ;main.c: 909: TRISB = 0x1B;
 18188  004FF6  0E1B               	movlw	27
 18189  004FF8  6E93               	movwf	3987,c	;volatile
 18190                           
 18191                           ; BSR set to: 1
 18192                           ;main.c: 919: TRISC = 0x01;
 18193  004FFA  0E01               	movlw	1
 18194  004FFC  6E94               	movwf	3988,c	;volatile
 18195                           
 18196                           ; BSR set to: 1
 18197                           ;main.c: 920: PORTC = 0x00;
 18198  004FFE  6A82               	clrf	3970,c	;volatile
 18199                           
 18200                           ; BSR set to: 1
 18201                           ;main.c: 922: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18202  005000  0E92               	movlw	146
 18203  005002  EC87  F029         	call	_OpenTimer0
 18204                           
 18205                           ; BSR set to: 1
 18206                           ;main.c: 923: WriteTimer0(0xfb1d);
 18207  005006  0EFB               	movlw	251
 18208  005008  6E0F               	movwf	?_WriteTimer0+1,c
 18209  00500A  0E1D               	movlw	29
 18210  00500C  6E0E               	movwf	?_WriteTimer0,c
 18211  00500E  EC2E  F02A         	call	_WriteTimer0	;wreg free
 18212                           
 18213                           ; BSR set to: 1
 18214                           ;main.c: 925: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18215                           ;main.c: 926: 0b10000111 & 0b11111111 & 0b11110100 &
 18216                           ;main.c: 927: 0b11111110 & 0b11111101,
 18217                           ;main.c: 928: 15);
 18218  005012  0E84               	movlw	132
 18219  005014  6E0E               	movwf	?_OpenADC,c
 18220  005016  0E0F               	movlw	15
 18221  005018  6E0F               	movwf	?_OpenADC+1,c
 18222  00501A  0EEF               	movlw	239
 18223  00501C  ECDA  F025         	call	_OpenADC
 18224                           
 18225                           ; BSR set to: 1
 18226                           ;main.c: 931: ECANInitialize();
 18227  005020  EC1B  F024         	call	_ECANInitialize	;wreg free
 18228                           
 18229                           ;main.c: 955: INTCONbits.GIE = 1;
 18230  005024  8EF2               	bsf	intcon,7,c	;volatile
 18231                           
 18232                           ;main.c: 957: ConvertADC();
 18233  005026  EF64  F02A         	goto	_ConvertADC	;wreg free
 18234  00502A                     __end_of_init:
 18235                           	opt stack 0
 18236                           tblptru	equ	0xFF8
 18237                           tblptrh	equ	0xFF7
 18238                           tblptrl	equ	0xFF6
 18239                           tablat	equ	0xFF5
 18240                           prodh	equ	0xFF4
 18241                           prodl	equ	0xFF3
 18242                           intcon	equ	0xFF2
 18243                           postinc0	equ	0xFEE
 18244                           wreg	equ	0xFE8
 18245                           indf1	equ	0xFE7
 18246                           postdec1	equ	0xFE5
 18247                           fsr1h	equ	0xFE2
 18248                           fsr1l	equ	0xFE1
 18249                           indf2	equ	0xFDF
 18250                           postinc2	equ	0xFDE
 18251                           postdec2	equ	0xFDD
 18252                           plusw2	equ	0xFDB
 18253                           fsr2h	equ	0xFDA
 18254                           fsr2l	equ	0xFD9
 18255                           status	equ	0xFD8
 18256                           
 18257 ;; *************** function _ECANInitialize *****************
 18258 ;; Defined at:
 18259 ;;		line 168 in file "../ECAN.c"
 18260 ;; Parameters:    Size  Location     Type
 18261 ;;		None
 18262 ;; Auto vars:     Size  Location     Type
 18263 ;;		None
 18264 ;; Return value:  Size  Location     Type
 18265 ;;		None               void
 18266 ;; Registers used:
 18267 ;;		wreg, status,2, status,0, cstack
 18268 ;; Tracked objects:
 18269 ;;		On entry : F/1
 18270 ;;		On exit  : 1/1
 18271 ;;		Unchanged: 0/0
 18272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18273 ;;      Params:         0       0       0       0       0       0       0
 18274 ;;      Locals:         0       0       0       0       0       0       0
 18275 ;;      Temps:          0       0       0       0       0       0       0
 18276 ;;      Totals:         0       0       0       0       0       0       0
 18277 ;;Total ram usage:        0 bytes
 18278 ;; Hardware stack levels used:    1
 18279 ;; Hardware stack levels required when called:    3
 18280 ;; This function calls:
 18281 ;;		_ECANSetOperationMode
 18282 ;; This function is called by:
 18283 ;;		_init
 18284 ;; This function uses a non-reentrant model
 18285 ;;
 18286                           
 18287                           	psect	text86
 18288  004836                     __ptext86:
 18289                           	opt stack 0
 18290  004836                     _ECANInitialize:
 18291                           	opt stack 26
 18292                           
 18293                           ; BSR set to: 1
 18294                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18295                           
 18296                           ;incstack = 0
 18297                           ;incstack = 0
 18298  004836  0E80               	movlw	128
 18299  004838  ECE0  F029         	call	_ECANSetOperationMode
 18300                           
 18301                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18302  00483C  0E09               	movlw	9
 18303  00483E  6E70               	movwf	3952,c	;volatile
 18304                           
 18305                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18306  004840  0EFC               	movlw	252
 18307  004842  6E71               	movwf	3953,c	;volatile
 18308                           
 18309                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18310                           ;ECAN.c: 181: (0 << 6) |
 18311                           ;ECAN.c: 182: (2-1);
 18312  004844  0E01               	movlw	1
 18313  004846  6E72               	movwf	3954,c	;volatile
 18314                           
 18315                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18316  004848  0E20               	movlw	32
 18317  00484A  6E73               	movwf	3955,c	;volatile
 18318                           
 18319                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18320  00484C  8E77               	bsf	3959,7,c	;volatile
 18321                           
 18322                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18323  00484E  9C77               	bcf	3959,6,c	;volatile
 18324                           
 18325                           ;ECAN.c: 205: RXB0CON = 0;
 18326  004850  6A60               	clrf	3936,c	;volatile
 18327                           
 18328                           ;ECAN.c: 211: RXB1CON = 0;
 18329  004852  010F               	movlb	15	; () banked
 18330  004854  6B50               	clrf	80,b	;volatile
 18331                           
 18332                           ; BSR set to: 15
 18333                           ;ECAN.c: 221: B0CON = 0;
 18334  004856  010E               	movlb	14	; () banked
 18335  004858  6B20               	clrf	32,b	;volatile
 18336                           
 18337                           ; BSR set to: 14
 18338                           ;ECAN.c: 231: B1CON = 0;
 18339  00485A  6B30               	clrf	48,b	;volatile
 18340                           
 18341                           ; BSR set to: 14
 18342                           ;ECAN.c: 241: B2CON = 0;
 18343  00485C  6B40               	clrf	64,b	;volatile
 18344                           
 18345                           ; BSR set to: 14
 18346                           ;ECAN.c: 254: B3CON = 0 << 2;
 18347  00485E  6B50               	clrf	80,b	;volatile
 18348                           
 18349                           ; BSR set to: 14
 18350                           ;ECAN.c: 264: B4CON = 0 << 2;
 18351  004860  6B60               	clrf	96,b	;volatile
 18352                           
 18353                           ; BSR set to: 14
 18354                           ;ECAN.c: 274: B5CON = 0 << 2;
 18355  004862  6B70               	clrf	112,b	;volatile
 18356                           
 18357                           ; BSR set to: 14
 18358                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18359  004864  0EE0               	movlw	224
 18360  004866  010D               	movlb	13	; () banked
 18361  004868  6FF8               	movwf	248,b	;volatile
 18362                           
 18363                           ; BSR set to: 13
 18364                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18365  00486A  010F               	movlb	15	; () banked
 18366  00486C  6B00               	clrf	0,b	;volatile
 18367                           
 18368                           ; BSR set to: 15
 18369  00486E  0E08               	movlw	8
 18370  004870  6F01               	movwf	1,b	;volatile
 18371                           
 18372                           ; BSR set to: 15
 18373  004872  6B02               	clrf	2,b	;volatile
 18374                           
 18375                           ; BSR set to: 15
 18376  004874  6B03               	clrf	3,b	;volatile
 18377                           
 18378                           ; BSR set to: 15
 18379                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18380  004876  6B04               	clrf	4,b	;volatile
 18381                           
 18382                           ; BSR set to: 15
 18383  004878  0EE8               	movlw	232
 18384  00487A  6F05               	movwf	5,b	;volatile
 18385                           
 18386                           ; BSR set to: 15
 18387  00487C  0E1A               	movlw	26
 18388  00487E  6F06               	movwf	6,b	;volatile
 18389                           
 18390                           ; BSR set to: 15
 18391  004880  6B07               	clrf	7,b	;volatile
 18392                           
 18393                           ; BSR set to: 15
 18394                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18395  004882  0E03               	movlw	3
 18396  004884  010D               	movlb	13	; () banked
 18397  004886  6FD4               	movwf	212,b	;volatile
 18398                           
 18399                           ; BSR set to: 13
 18400                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18401  004888  6BD5               	clrf	213,b	;volatile
 18402                           
 18403                           ; BSR set to: 13
 18404                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18405  00488A  6BE0               	clrf	224,b	;volatile
 18406                           
 18407                           ; BSR set to: 13
 18408                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18409  00488C  0E11               	movlw	17
 18410  00488E  6FE1               	movwf	225,b	;volatile
 18411                           
 18412                           ; BSR set to: 13
 18413                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18414  004890  6FE2               	movwf	226,b	;volatile
 18415                           
 18416                           ; BSR set to: 13
 18417                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18418  004892  6BE3               	clrf	227,b	;volatile
 18419                           
 18420                           ; BSR set to: 13
 18421                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18422  004894  6BE4               	clrf	228,b	;volatile
 18423                           
 18424                           ; BSR set to: 13
 18425                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18426  004896  6BE5               	clrf	229,b	;volatile
 18427                           
 18428                           ; BSR set to: 13
 18429                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18430  004898  6BE6               	clrf	230,b	;volatile
 18431                           
 18432                           ; BSR set to: 13
 18433                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18434  00489A  6BE7               	clrf	231,b	;volatile
 18435                           
 18436                           ; BSR set to: 13
 18437                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18438  00489C  0E54               	movlw	84
 18439  00489E  6FF0               	movwf	240,b	;volatile
 18440                           
 18441                           ; BSR set to: 13
 18442                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18443  0048A0  0E05               	movlw	5
 18444  0048A2  6FF1               	movwf	241,b	;volatile
 18445                           
 18446                           ; BSR set to: 13
 18447                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18448  0048A4  6BF2               	clrf	242,b	;volatile
 18449                           
 18450                           ; BSR set to: 13
 18451                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18452  0048A6  6BF2               	clrf	242,b	;volatile
 18453                           
 18454                           ; BSR set to: 13
 18455                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18456  0048A8  0E0F               	movlw	15
 18457  0048AA  010F               	movlb	15	; () banked
 18458  0048AC  6F18               	movwf	24,b	;volatile
 18459                           
 18460                           ; BSR set to: 15
 18461  0048AE  0EE0               	movlw	224
 18462  0048B0  6F19               	movwf	25,b	;volatile
 18463                           
 18464                           ; BSR set to: 15
 18465  0048B2  6B1A               	clrf	26,b	;volatile
 18466                           
 18467                           ; BSR set to: 15
 18468  0048B4  6B1B               	clrf	27,b	;volatile
 18469                           
 18470                           ; BSR set to: 15
 18471                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18472  0048B6  8719               	bsf	25,3,b	;volatile
 18473                           
 18474                           ; BSR set to: 15
 18475                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18476  0048B8  0E0F               	movlw	15
 18477  0048BA  6F1C               	movwf	28,b	;volatile
 18478                           
 18479                           ; BSR set to: 15
 18480  0048BC  0EE0               	movlw	224
 18481  0048BE  6F1D               	movwf	29,b	;volatile
 18482                           
 18483                           ; BSR set to: 15
 18484  0048C0  691E               	setf	30,b	;volatile
 18485                           
 18486                           ; BSR set to: 15
 18487  0048C2  6B1F               	clrf	31,b	;volatile
 18488                           
 18489                           ; BSR set to: 15
 18490                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18491  0048C4  871D               	bsf	29,3,b	;volatile
 18492                           
 18493                           ; BSR set to: 15
 18494                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18495  0048C6  0E00               	movlw	0
 18496  0048C8  EFE0  F029         	goto	_ECANSetOperationMode
 18497  0048CC                     __end_of_ECANInitialize:
 18498                           	opt stack 0
 18499                           tblptru	equ	0xFF8
 18500                           tblptrh	equ	0xFF7
 18501                           tblptrl	equ	0xFF6
 18502                           tablat	equ	0xFF5
 18503                           prodh	equ	0xFF4
 18504                           prodl	equ	0xFF3
 18505                           intcon	equ	0xFF2
 18506                           postinc0	equ	0xFEE
 18507                           wreg	equ	0xFE8
 18508                           indf1	equ	0xFE7
 18509                           postdec1	equ	0xFE5
 18510                           fsr1h	equ	0xFE2
 18511                           fsr1l	equ	0xFE1
 18512                           indf2	equ	0xFDF
 18513                           postinc2	equ	0xFDE
 18514                           postdec2	equ	0xFDD
 18515                           plusw2	equ	0xFDB
 18516                           fsr2h	equ	0xFDA
 18517                           fsr2l	equ	0xFD9
 18518                           status	equ	0xFD8
 18519                           
 18520 ;; *************** function _ECANSetOperationMode *****************
 18521 ;; Defined at:
 18522 ;;		line 1012 in file "../ECAN.c"
 18523 ;; Parameters:    Size  Location     Type
 18524 ;;  mode            1    wreg     enum E16337
 18525 ;; Auto vars:     Size  Location     Type
 18526 ;;  mode            1   13[COMRAM] enum E16337
 18527 ;; Return value:  Size  Location     Type
 18528 ;;		None               void
 18529 ;; Registers used:
 18530 ;;		wreg, status,2, status,0
 18531 ;; Tracked objects:
 18532 ;;		On entry : 1/1
 18533 ;;		On exit  : 1/1
 18534 ;;		Unchanged: 1/0
 18535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18536 ;;      Params:         0       0       0       0       0       0       0
 18537 ;;      Locals:         1       0       0       0       0       0       0
 18538 ;;      Temps:          0       0       0       0       0       0       0
 18539 ;;      Totals:         1       0       0       0       0       0       0
 18540 ;;Total ram usage:        1 bytes
 18541 ;; Hardware stack levels used:    1
 18542 ;; Hardware stack levels required when called:    2
 18543 ;; This function calls:
 18544 ;;		Nothing
 18545 ;; This function is called by:
 18546 ;;		_ECANInitialize
 18547 ;; This function uses a non-reentrant model
 18548 ;;
 18549                           
 18550                           	psect	text87
 18551  0053C0                     __ptext87:
 18552                           	opt stack 0
 18553  0053C0                     _ECANSetOperationMode:
 18554                           	opt stack 26
 18555                           
 18556                           ;incstack = 0
 18557                           ;incstack = 0
 18558                           ;ECANSetOperationMode@mode stored from wreg
 18559  0053C0  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18560                           
 18561                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18562  0053C4  0E1F               	movlw	31
 18563  0053C6  166F               	andwf	3951,f,c	;volatile
 18564                           
 18565                           ;ECAN.c: 1014: CANCON |= mode;
 18566  0053C8  500E               	movf	ECANSetOperationMode@mode,w,c
 18567  0053CA  126F               	iorwf	3951,f,c	;volatile
 18568  0053CC                     l8396:
 18569  0053CC  506F               	movf	3951,w,c	;volatile
 18570  0053CE  0BE0               	andlw	224
 18571  0053D0  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18572  0053D2  B4D8               	btfsc	status,2,c
 18573  0053D4  0012               	return	
 18574  0053D6  D7FA               	goto	l8396
 18575  0053D8                     __end_of_ECANSetOperationMode:
 18576                           	opt stack 0
 18577                           tblptru	equ	0xFF8
 18578                           tblptrh	equ	0xFF7
 18579                           tblptrl	equ	0xFF6
 18580                           tablat	equ	0xFF5
 18581                           prodh	equ	0xFF4
 18582                           prodl	equ	0xFF3
 18583                           intcon	equ	0xFF2
 18584                           postinc0	equ	0xFEE
 18585                           wreg	equ	0xFE8
 18586                           indf1	equ	0xFE7
 18587                           postdec1	equ	0xFE5
 18588                           fsr1h	equ	0xFE2
 18589                           fsr1l	equ	0xFE1
 18590                           indf2	equ	0xFDF
 18591                           postinc2	equ	0xFDE
 18592                           postdec2	equ	0xFDD
 18593                           plusw2	equ	0xFDB
 18594                           fsr2h	equ	0xFDA
 18595                           fsr2l	equ	0xFD9
 18596                           status	equ	0xFD8
 18597                           
 18598 ;; *************** function _OpenADC *****************
 18599 ;; Defined at:
 18600 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18601 ;; Parameters:    Size  Location     Type
 18602 ;;  config          1    wreg     unsigned char 
 18603 ;;  config2         1   13[COMRAM] unsigned char 
 18604 ;;  portconfig      1   14[COMRAM] unsigned char 
 18605 ;; Auto vars:     Size  Location     Type
 18606 ;;  config          1   17[COMRAM] unsigned char 
 18607 ;; Return value:  Size  Location     Type
 18608 ;;		None               void
 18609 ;; Registers used:
 18610 ;;		wreg, status,2, status,0
 18611 ;; Tracked objects:
 18612 ;;		On entry : F/1
 18613 ;;		On exit  : F/1
 18614 ;;		Unchanged: F/0
 18615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18616 ;;      Params:         2       0       0       0       0       0       0
 18617 ;;      Locals:         1       0       0       0       0       0       0
 18618 ;;      Temps:          2       0       0       0       0       0       0
 18619 ;;      Totals:         5       0       0       0       0       0       0
 18620 ;;Total ram usage:        5 bytes
 18621 ;; Hardware stack levels used:    1
 18622 ;; Hardware stack levels required when called:    2
 18623 ;; This function calls:
 18624 ;;		Nothing
 18625 ;; This function is called by:
 18626 ;;		_init
 18627 ;; This function uses a non-reentrant model
 18628 ;;
 18629                           
 18630                           	psect	text88
 18631  004BB4                     __ptext88:
 18632                           	opt stack 0
 18633  004BB4                     _OpenADC:
 18634                           	opt stack 27
 18635                           
 18636                           ;incstack = 0
 18637                           ;incstack = 0
 18638                           ;OpenADC@config stored from wreg
 18639  004BB4  CFE8 F012          	movff	wreg,OpenADC@config
 18640                           
 18641                           ; BSR set to: 1
 18642  004BB8  6AC2               	clrf	4034,c	;volatile
 18643  004BBA  6AC0               	clrf	4032,c	;volatile
 18644                           
 18645                           ; BSR set to: 1
 18646  004BBC  90D8               	bcf	status,0,c
 18647  004BBE  300E               	rrcf	OpenADC@config2,w,c
 18648  004BC0  0B3C               	andlw	60
 18649  004BC2  6EC2               	movwf	4034,c	;volatile
 18650  004BC4  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18651  004BC8  3A10               	swapf	??_OpenADC,f,c
 18652  004BCA  0EF0               	movlw	240
 18653  004BCC  1610               	andwf	??_OpenADC,f,c
 18654  004BCE  0E30               	movlw	48
 18655  004BD0  1610               	andwf	??_OpenADC,f,c
 18656  004BD2  500F               	movf	OpenADC@portconfig,w,c
 18657  004BD4  0B0F               	andlw	15
 18658  004BD6  1010               	iorwf	??_OpenADC,w,c
 18659  004BD8  6EC1               	movwf	4033,c	;volatile
 18660  004BDA  C012  F010         	movff	OpenADC@config,??_OpenADC
 18661  004BDE  90D8               	bcf	status,0,c
 18662  004BE0  3610               	rlcf	??_OpenADC,f,c
 18663  004BE2  90D8               	bcf	status,0,c
 18664  004BE4  3610               	rlcf	??_OpenADC,f,c
 18665  004BE6  0E38               	movlw	56
 18666  004BE8  1610               	andwf	??_OpenADC,f,c
 18667  004BEA  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18668  004BEE  3A11               	swapf	??_OpenADC+1,f,c
 18669  004BF0  0E0F               	movlw	15
 18670  004BF2  1611               	andwf	??_OpenADC+1,f,c
 18671  004BF4  0E07               	movlw	7
 18672  004BF6  1611               	andwf	??_OpenADC+1,f,c
 18673  004BF8  5012               	movf	OpenADC@config,w,c
 18674  004BFA  0B80               	andlw	128
 18675  004BFC  1011               	iorwf	??_OpenADC+1,w,c
 18676  004BFE  1010               	iorwf	??_OpenADC,w,c
 18677  004C00  6EC0               	movwf	4032,c	;volatile
 18678                           
 18679                           ; BSR set to: 1
 18680  004C02  AE0E               	btfss	OpenADC@config2,7,c
 18681  004C04  D003               	goto	l1301
 18682                           
 18683                           ; BSR set to: 1
 18684  004C06  9C9E               	bcf	3998,6,c	;volatile
 18685  004C08  8C9D               	bsf	3997,6,c	;volatile
 18686  004C0A  8CF2               	bsf	intcon,6,c	;volatile
 18687  004C0C                     l1301:
 18688                           
 18689                           ; BSR set to: 1
 18690  004C0C  80C2               	bsf	4034,0,c	;volatile
 18691                           
 18692                           ; BSR set to: 1
 18693  004C0E  0012               	return	
 18694  004C10                     __end_of_OpenADC:
 18695                           	opt stack 0
 18696                           tblptru	equ	0xFF8
 18697                           tblptrh	equ	0xFF7
 18698                           tblptrl	equ	0xFF6
 18699                           tablat	equ	0xFF5
 18700                           prodh	equ	0xFF4
 18701                           prodl	equ	0xFF3
 18702                           intcon	equ	0xFF2
 18703                           postinc0	equ	0xFEE
 18704                           wreg	equ	0xFE8
 18705                           indf1	equ	0xFE7
 18706                           postdec1	equ	0xFE5
 18707                           fsr1h	equ	0xFE2
 18708                           fsr1l	equ	0xFE1
 18709                           indf2	equ	0xFDF
 18710                           postinc2	equ	0xFDE
 18711                           postdec2	equ	0xFDD
 18712                           plusw2	equ	0xFDB
 18713                           fsr2h	equ	0xFDA
 18714                           fsr2l	equ	0xFD9
 18715                           status	equ	0xFD8
 18716                           
 18717 ;; *************** function _OpenTimer0 *****************
 18718 ;; Defined at:
 18719 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18720 ;; Parameters:    Size  Location     Type
 18721 ;;  config          1    wreg     unsigned char 
 18722 ;; Auto vars:     Size  Location     Type
 18723 ;;  config          1   13[COMRAM] unsigned char 
 18724 ;; Return value:  Size  Location     Type
 18725 ;;		None               void
 18726 ;; Registers used:
 18727 ;;		wreg, status,2, status,0
 18728 ;; Tracked objects:
 18729 ;;		On entry : F/1
 18730 ;;		On exit  : F/1
 18731 ;;		Unchanged: F/0
 18732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18733 ;;      Params:         0       0       0       0       0       0       0
 18734 ;;      Locals:         1       0       0       0       0       0       0
 18735 ;;      Temps:          0       0       0       0       0       0       0
 18736 ;;      Totals:         1       0       0       0       0       0       0
 18737 ;;Total ram usage:        1 bytes
 18738 ;; Hardware stack levels used:    1
 18739 ;; Hardware stack levels required when called:    2
 18740 ;; This function calls:
 18741 ;;		Nothing
 18742 ;; This function is called by:
 18743 ;;		_init
 18744 ;; This function uses a non-reentrant model
 18745 ;;
 18746                           
 18747                           	psect	text89
 18748  00530E                     __ptext89:
 18749                           	opt stack 0
 18750  00530E                     _OpenTimer0:
 18751                           	opt stack 27
 18752                           
 18753                           ; BSR set to: 1
 18754                           ;incstack = 0
 18755                           ;incstack = 0
 18756                           ;OpenTimer0@config stored from wreg
 18757  00530E  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18758                           
 18759                           ; BSR set to: 1
 18760  005312  500E               	movf	OpenTimer0@config,w,c
 18761  005314  0B7F               	andlw	127
 18762  005316  6ED5               	movwf	4053,c	;volatile
 18763                           
 18764                           ; BSR set to: 1
 18765  005318  6AD7               	clrf	4055,c	;volatile
 18766                           
 18767                           ; BSR set to: 1
 18768  00531A  6AD6               	clrf	4054,c	;volatile
 18769                           
 18770                           ; BSR set to: 1
 18771  00531C  94F2               	bcf	intcon,2,c	;volatile
 18772                           
 18773                           ; BSR set to: 1
 18774  00531E  AE0E               	btfss	OpenTimer0@config,7,c
 18775  005320  D002               	goto	l1315
 18776                           
 18777                           ; BSR set to: 1
 18778  005322  8AF2               	bsf	intcon,5,c	;volatile
 18779  005324  D001               	goto	l1316
 18780  005326                     l1315:
 18781                           
 18782                           ; BSR set to: 1
 18783  005326  9AF2               	bcf	intcon,5,c	;volatile
 18784  005328                     l1316:
 18785                           
 18786                           ; BSR set to: 1
 18787  005328  8ED5               	bsf	4053,7,c	;volatile
 18788                           
 18789                           ; BSR set to: 1
 18790  00532A  0012               	return	
 18791  00532C                     __end_of_OpenTimer0:
 18792                           	opt stack 0
 18793                           tblptru	equ	0xFF8
 18794                           tblptrh	equ	0xFF7
 18795                           tblptrl	equ	0xFF6
 18796                           tablat	equ	0xFF5
 18797                           prodh	equ	0xFF4
 18798                           prodl	equ	0xFF3
 18799                           intcon	equ	0xFF2
 18800                           postinc0	equ	0xFEE
 18801                           wreg	equ	0xFE8
 18802                           indf1	equ	0xFE7
 18803                           postdec1	equ	0xFE5
 18804                           fsr1h	equ	0xFE2
 18805                           fsr1l	equ	0xFE1
 18806                           indf2	equ	0xFDF
 18807                           postinc2	equ	0xFDE
 18808                           postdec2	equ	0xFDD
 18809                           plusw2	equ	0xFDB
 18810                           fsr2h	equ	0xFDA
 18811                           fsr2l	equ	0xFD9
 18812                           status	equ	0xFD8
 18813                           
 18814 ;; *************** function _init_app_ram *****************
 18815 ;; Defined at:
 18816 ;;		line 985 in file "../main.c"
 18817 ;; Parameters:    Size  Location     Type
 18818 ;;		None
 18819 ;; Auto vars:     Size  Location     Type
 18820 ;;  i               1   32[COMRAM] unsigned char 
 18821 ;; Return value:  Size  Location     Type
 18822 ;;		None               void
 18823 ;; Registers used:
 18824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18825 ;; Tracked objects:
 18826 ;;		On entry : 0/1
 18827 ;;		On exit  : F/1
 18828 ;;		Unchanged: 0/0
 18829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18830 ;;      Params:         0       0       0       0       0       0       0
 18831 ;;      Locals:         1       0       0       0       0       0       0
 18832 ;;      Temps:          0       0       0       0       0       0       0
 18833 ;;      Totals:         1       0       0       0       0       0       0
 18834 ;;Total ram usage:        1 bytes
 18835 ;; Hardware stack levels used:    1
 18836 ;; Hardware stack levels required when called:    4
 18837 ;; This function calls:
 18838 ;;		_writeCoeffs2Ram
 18839 ;; This function is called by:
 18840 ;;		_init
 18841 ;;		_vscp_restoreDefaults
 18842 ;; This function uses a non-reentrant model
 18843 ;;
 18844                           
 18845                           	psect	text90
 18846  004EAE                     __ptext90:
 18847                           	opt stack 0
 18848  004EAE                     _init_app_ram:
 18849                           	opt stack 23
 18850                           
 18851                           ;main.c: 986: char i;
 18852                           ;main.c: 988: measurement_clock = 0;
 18853                           
 18854                           ; BSR set to: 1
 18855                           ;incstack = 0
 18856                           ;incstack = 0
 18857  004EAE  0101               	movlb	1	; () banked
 18858  004EB0  6B12               	clrf	_measurement_clock& (0+255),b
 18859  004EB2  6B13               	clrf	(_measurement_clock+1)& (0+255),b
 18860  004EB4  6B14               	clrf	(_measurement_clock+2)& (0+255),b
 18861  004EB6  6B15               	clrf	(_measurement_clock+3)& (0+255),b
 18862                           
 18863                           ;main.c: 989: seconds = 0;
 18864  004EB8  0100               	movlb	0	; () banked
 18865  004EBA  6BB6               	clrf	_seconds& (0+255),b
 18866                           
 18867                           ;main.c: 992: for (i = 0; i < 6; i++) {
 18868  004EBC  6A21               	clrf	init_app_ram@i,c
 18869  004EBE                     l10510:
 18870                           
 18871                           ;main.c: 993: seconds_temp[i] = 0;
 18872  004EBE  0E0C               	movlw	low _seconds_temp
 18873  004EC0  2421               	addwf	init_app_ram@i,w,c
 18874  004EC2  6ED9               	movwf	fsr2l,c
 18875  004EC4  6ADA               	clrf	fsr2h,c
 18876  004EC6  0E01               	movlw	high _seconds_temp
 18877  004EC8  22DA               	addwfc	fsr2h,f,c
 18878  004ECA  6ADF               	clrf	indf2,c
 18879                           
 18880                           ; BSR set to: 1
 18881                           ;main.c: 994: current_temp[i] = 0;
 18882  004ECC  5021               	movf	init_app_ram@i,w,c
 18883  004ECE  0D02               	mullw	2
 18884  004ED0  0E00               	movlw	low _current_temp
 18885  004ED2  24F3               	addwf	prodl,w,c
 18886  004ED4  6ED9               	movwf	fsr2l,c
 18887  004ED6  0E01               	movlw	high _current_temp
 18888  004ED8  20F4               	addwfc	prodh,w,c
 18889  004EDA  6EDA               	movwf	fsr2h,c
 18890  004EDC  6ADE               	clrf	postinc2,c
 18891  004EDE  6ADD               	clrf	postdec2,c
 18892                           
 18893                           ; BSR set to: 1
 18894  004EE0  2A21               	incf	init_app_ram@i,f,c
 18895                           
 18896                           ; BSR set to: 1
 18897  004EE2  0E05               	movlw	5
 18898  004EE4  6421               	cpfsgt	init_app_ram@i,c
 18899  004EE6  D7EB               	goto	l10510
 18900                           
 18901                           ; BSR set to: 1
 18902                           ;main.c: 995: }
 18903                           ;main.c: 998: adc_conversion_flags = 0;
 18904  004EE8  0100               	movlb	0	; () banked
 18905  004EEA  6BB3               	clrf	_adc_conversion_flags& (0+255),b
 18906                           
 18907                           ;main.c: 1001: adc_series_counter = 0;
 18908  004EEC  6A49               	clrf	_adc_series_counter,c
 18909                           
 18910                           ;main.c: 1004: low_alarm = 0;
 18911  004EEE  6BB5               	clrf	_low_alarm& (0+255),b
 18912                           
 18913                           ;main.c: 1007: high_alarm = 0;
 18914  004EF0  6BB4               	clrf	_high_alarm& (0+255),b
 18915                           
 18916                           ; BSR set to: 0
 18917                           ;main.c: 1010: writeCoeffs2Ram();
 18918  004EF2  EF7C  F023         	goto	_writeCoeffs2Ram	;wreg free
 18919  004EF6                     __end_of_init_app_ram:
 18920                           	opt stack 0
 18921                           tblptru	equ	0xFF8
 18922                           tblptrh	equ	0xFF7
 18923                           tblptrl	equ	0xFF6
 18924                           tablat	equ	0xFF5
 18925                           prodh	equ	0xFF4
 18926                           prodl	equ	0xFF3
 18927                           intcon	equ	0xFF2
 18928                           postinc0	equ	0xFEE
 18929                           wreg	equ	0xFE8
 18930                           indf1	equ	0xFE7
 18931                           postdec1	equ	0xFE5
 18932                           fsr1h	equ	0xFE2
 18933                           fsr1l	equ	0xFE1
 18934                           indf2	equ	0xFDF
 18935                           postinc2	equ	0xFDE
 18936                           postdec2	equ	0xFDD
 18937                           plusw2	equ	0xFDB
 18938                           fsr2h	equ	0xFDA
 18939                           fsr2l	equ	0xFD9
 18940                           status	equ	0xFD8
 18941                           
 18942 ;; *************** function _writeCoeffs2Ram *****************
 18943 ;; Defined at:
 18944 ;;		line 967 in file "../main.c"
 18945 ;; Parameters:    Size  Location     Type
 18946 ;;		None
 18947 ;; Auto vars:     Size  Location     Type
 18948 ;;  c               3   25[COMRAM] unsigned char [3]
 18949 ;;  j               2   30[COMRAM] int 
 18950 ;;  i               2   28[COMRAM] int 
 18951 ;; Return value:  Size  Location     Type
 18952 ;;		None               void
 18953 ;; Registers used:
 18954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18955 ;; Tracked objects:
 18956 ;;		On entry : 0/0
 18957 ;;		On exit  : F/1
 18958 ;;		Unchanged: 0/0
 18959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18960 ;;      Params:         0       0       0       0       0       0       0
 18961 ;;      Locals:         7       0       0       0       0       0       0
 18962 ;;      Temps:          2       0       0       0       0       0       0
 18963 ;;      Totals:         9       0       0       0       0       0       0
 18964 ;;Total ram usage:        9 bytes
 18965 ;; Hardware stack levels used:    1
 18966 ;; Hardware stack levels required when called:    3
 18967 ;; This function calls:
 18968 ;;		_readEEPROM
 18969 ;;		___wmul
 18970 ;; This function is called by:
 18971 ;;		_init_app_ram
 18972 ;;		_vscp_writeAppReg
 18973 ;; This function uses a non-reentrant model
 18974 ;;
 18975                           
 18976                           	psect	text91
 18977  0046F8                     __ptext91:
 18978                           	opt stack 0
 18979  0046F8                     _writeCoeffs2Ram:
 18980                           	opt stack 23
 18981                           
 18982                           ;main.c: 968: int i, j;
 18983                           ;main.c: 969: uint8_t c[3];
 18984                           ;main.c: 971: for (i = 0; i < 6; i++) {
 18985                           
 18986                           ; BSR set to: 1
 18987                           ;incstack = 0
 18988                           ;incstack = 0
 18989  0046F8  6A1D               	clrf	writeCoeffs2Ram@i,c
 18990  0046FA  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 18991  0046FC                     l10526:
 18992                           
 18993                           ;main.c: 972: for (j = 2; j > 0; j--) {
 18994  0046FC  6A20               	clrf	writeCoeffs2Ram@j+1,c
 18995  0046FE  0E02               	movlw	2
 18996  004700  6E1F               	movwf	writeCoeffs2Ram@j,c
 18997  004702                     l10532:
 18998                           
 18999                           ;main.c: 974: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 19000  004702  501F               	movf	writeCoeffs2Ram@j,w,c
 19001  004704  0802               	sublw	2
 19002  004706  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 19003  004708  5018               	movf	??_writeCoeffs2Ram,w,c
 19004  00470A  0F1A               	addlw	low writeCoeffs2Ram@c
 19005  00470C  6ED9               	movwf	fsr2l,c
 19006  00470E  6ADA               	clrf	fsr2h,c
 19007  004710  C01D  F012         	movff	writeCoeffs2Ram@i,?___wmul
 19008  004714  C01E  F013         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 19009  004718  6A15               	clrf	?___wmul+3,c
 19010  00471A  0E03               	movlw	3
 19011  00471C  6E14               	movwf	?___wmul+2,c
 19012  00471E  EC4C  F028         	call	___wmul	;wreg free
 19013  004722  501F               	movf	writeCoeffs2Ram@j,w,c
 19014  004724  2612               	addwf	?___wmul,f,c
 19015  004726  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19016  004728  2213               	addwfc	?___wmul+1,f,c
 19017  00472A  0EAA               	movlw	170
 19018  00472C  2412               	addwf	?___wmul,w,c
 19019  00472E  6E0E               	movwf	?_readEEPROM,c
 19020  004730  0E00               	movlw	0
 19021  004732  2013               	addwfc	?___wmul+1,w,c
 19022  004734  6E0F               	movwf	?_readEEPROM+1,c
 19023  004736  EC1C  F02A         	call	_readEEPROM	;wreg free
 19024  00473A  6EDF               	movwf	indf2,c
 19025  00473C  061F               	decf	writeCoeffs2Ram@j,f,c
 19026  00473E  A0D8               	btfss	status,0,c
 19027  004740  0620               	decf	writeCoeffs2Ram@j+1,f,c
 19028  004742  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19029  004744  0A80               	xorlw	128
 19030  004746  0F80               	addlw	-128
 19031  004748  0E01               	movlw	1
 19032  00474A  B4D8               	btfsc	status,2,c
 19033  00474C  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 19034  00474E  E2D9               	bc	l10532
 19035                           
 19036                           ;main.c: 975: }
 19037                           ;main.c: 976: sh_coefficients[i] = *((double*) c);
 19038  004750  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 19039  004754  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 19040  004758  90D8               	bcf	status,0,c
 19041  00475A  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19042  00475C  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19043  00475E  90D8               	bcf	status,0,c
 19044  004760  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19045  004762  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19046  004764  0101               	movlb	1	; () banked
 19047  004766  0E1E               	movlw	low _sh_coefficients
 19048  004768  2418               	addwf	??_writeCoeffs2Ram,w,c
 19049  00476A  6ED9               	movwf	fsr2l,c
 19050  00476C  0E01               	movlw	high _sh_coefficients
 19051  00476E  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 19052  004770  6EDA               	movwf	fsr2h,c
 19053  004772  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 19054  004776  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 19055  00477A  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 19056  00477E  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 19057                           
 19058                           ; BSR set to: 1
 19059  004782  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 19060  004784  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 19061                           
 19062                           ; BSR set to: 1
 19063  004786  501E               	movf	writeCoeffs2Ram@i+1,w,c
 19064  004788  0A80               	xorlw	128
 19065  00478A  0F80               	addlw	-128
 19066  00478C  0E06               	movlw	6
 19067  00478E  B4D8               	btfsc	status,2,c
 19068  004790  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 19069  004792  B0D8               	btfsc	status,0,c
 19070                           
 19071                           ; BSR set to: 1
 19072  004794  0012               	return	
 19073  004796  D7B2               	goto	l10526
 19074  004798                     __end_of_writeCoeffs2Ram:
 19075                           	opt stack 0
 19076                           tblptru	equ	0xFF8
 19077                           tblptrh	equ	0xFF7
 19078                           tblptrl	equ	0xFF6
 19079                           tablat	equ	0xFF5
 19080                           prodh	equ	0xFF4
 19081                           prodl	equ	0xFF3
 19082                           intcon	equ	0xFF2
 19083                           postinc0	equ	0xFEE
 19084                           wreg	equ	0xFE8
 19085                           indf1	equ	0xFE7
 19086                           postdec1	equ	0xFE5
 19087                           fsr1h	equ	0xFE2
 19088                           fsr1l	equ	0xFE1
 19089                           indf2	equ	0xFDF
 19090                           postinc2	equ	0xFDE
 19091                           postdec2	equ	0xFDD
 19092                           plusw2	equ	0xFDB
 19093                           fsr2h	equ	0xFDA
 19094                           fsr2l	equ	0xFD9
 19095                           status	equ	0xFD8
 19096                           
 19097 ;; *************** function ___wmul *****************
 19098 ;; Defined at:
 19099 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 19100 ;; Parameters:    Size  Location     Type
 19101 ;;  multiplier      2   17[COMRAM] unsigned int 
 19102 ;;  multiplicand    2   19[COMRAM] unsigned int 
 19103 ;; Auto vars:     Size  Location     Type
 19104 ;;  product         2   21[COMRAM] unsigned int 
 19105 ;; Return value:  Size  Location     Type
 19106 ;;                  2   17[COMRAM] unsigned int 
 19107 ;; Registers used:
 19108 ;;		wreg, status,2, status,0, prodl, prodh
 19109 ;; Tracked objects:
 19110 ;;		On entry : 0/1
 19111 ;;		On exit  : 0/0
 19112 ;;		Unchanged: 0/0
 19113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19114 ;;      Params:         4       0       0       0       0       0       0
 19115 ;;      Locals:         2       0       0       0       0       0       0
 19116 ;;      Temps:          0       0       0       0       0       0       0
 19117 ;;      Totals:         6       0       0       0       0       0       0
 19118 ;;Total ram usage:        6 bytes
 19119 ;; Hardware stack levels used:    1
 19120 ;; Hardware stack levels required when called:    2
 19121 ;; This function calls:
 19122 ;;		Nothing
 19123 ;; This function is called by:
 19124 ;;		_doWork
 19125 ;;		_writeCoeffs2Ram
 19126 ;; This function uses a non-reentrant model
 19127 ;;
 19128                           
 19129                           	psect	text92
 19130  005098                     __ptext92:
 19131                           	opt stack 0
 19132  005098                     ___wmul:
 19133                           	opt stack 27
 19134                           
 19135                           ; BSR set to: 1
 19136                           ;incstack = 0
 19137                           ;incstack = 0
 19138  005098  5012               	movf	___wmul@multiplier,w,c
 19139  00509A  0214               	mulwf	___wmul@multiplicand,c
 19140  00509C  CFF3 F016          	movff	prodl,___wmul@product
 19141  0050A0  CFF4 F017          	movff	prodh,___wmul@product+1
 19142  0050A4  5012               	movf	___wmul@multiplier,w,c
 19143  0050A6  0215               	mulwf	___wmul@multiplicand+1,c
 19144  0050A8  D808               	call	PL64	;call to abstracted procedure
 19145  0050AA  5013               	movf	___wmul@multiplier+1,w,c
 19146  0050AC  0214               	mulwf	___wmul@multiplicand,c
 19147  0050AE  D805               	call	PL64	;call to abstracted procedure
 19148  0050B0  C016  F012         	movff	___wmul@product,?___wmul
 19149  0050B4  C017  F013         	movff	___wmul@product+1,?___wmul+1
 19150  0050B8  0012               	return	
 19151  0050BA                     __end_of___wmul:
 19152                           	opt stack 0
 19153  0050BA                     PL64:
 19154                           	opt stack 27
 19155  0050BA  CFF3 FFF4          	movff	prodl,prodh
 19156  0050BE  6AF3               	clrf	prodl,c
 19157  0050C0  50F3               	movf	prodl,w,c
 19158  0050C2  2616               	addwf	___wmul@product,f,c
 19159  0050C4  50F4               	movf	prodh,w,c
 19160  0050C6  2217               	addwfc	___wmul@product+1,f,c
 19161  0050C8  0012               	return	
 19162  0050CA                     __end_ofPL64:
 19163                           	opt stack 0
 19164                           tblptru	equ	0xFF8
 19165                           tblptrh	equ	0xFF7
 19166                           tblptrl	equ	0xFF6
 19167                           tablat	equ	0xFF5
 19168                           prodh	equ	0xFF4
 19169                           prodl	equ	0xFF3
 19170                           intcon	equ	0xFF2
 19171                           postinc0	equ	0xFEE
 19172                           wreg	equ	0xFE8
 19173                           indf1	equ	0xFE7
 19174                           postdec1	equ	0xFE5
 19175                           fsr1h	equ	0xFE2
 19176                           fsr1l	equ	0xFE1
 19177                           indf2	equ	0xFDF
 19178                           postinc2	equ	0xFDE
 19179                           postdec2	equ	0xFDD
 19180                           plusw2	equ	0xFDB
 19181                           fsr2h	equ	0xFDA
 19182                           fsr2l	equ	0xFD9
 19183                           status	equ	0xFD8
 19184                           
 19185 ;; *************** function _ConvertADC *****************
 19186 ;; Defined at:
 19187 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19188 ;; Parameters:    Size  Location     Type
 19189 ;;		None
 19190 ;; Auto vars:     Size  Location     Type
 19191 ;;		None
 19192 ;; Return value:  Size  Location     Type
 19193 ;;		None               void
 19194 ;; Registers used:
 19195 ;;		None
 19196 ;; Tracked objects:
 19197 ;;		On entry : 1/1
 19198 ;;		On exit  : 1/1
 19199 ;;		Unchanged: 1/0
 19200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19201 ;;      Params:         0       0       0       0       0       0       0
 19202 ;;      Locals:         0       0       0       0       0       0       0
 19203 ;;      Temps:          0       0       0       0       0       0       0
 19204 ;;      Totals:         0       0       0       0       0       0       0
 19205 ;;Total ram usage:        0 bytes
 19206 ;; Hardware stack levels used:    1
 19207 ;; Hardware stack levels required when called:    2
 19208 ;; This function calls:
 19209 ;;		Nothing
 19210 ;; This function is called by:
 19211 ;;		_init
 19212 ;; This function uses a non-reentrant model
 19213 ;;
 19214                           
 19215                           	psect	text93
 19216  0054C8                     __ptext93:
 19217                           	opt stack 0
 19218  0054C8                     _ConvertADC:
 19219                           	opt stack 27
 19220                           
 19221                           ;incstack = 0
 19222                           ;incstack = 0
 19223  0054C8  82C2               	bsf	4034,1,c	;volatile
 19224  0054CA  0012               	return	
 19225  0054CC                     __end_of_ConvertADC:
 19226                           	opt stack 0
 19227                           tblptru	equ	0xFF8
 19228                           tblptrh	equ	0xFF7
 19229                           tblptrl	equ	0xFF6
 19230                           tablat	equ	0xFF5
 19231                           prodh	equ	0xFF4
 19232                           prodl	equ	0xFF3
 19233                           intcon	equ	0xFF2
 19234                           postinc0	equ	0xFEE
 19235                           wreg	equ	0xFE8
 19236                           indf1	equ	0xFE7
 19237                           postdec1	equ	0xFE5
 19238                           fsr1h	equ	0xFE2
 19239                           fsr1l	equ	0xFE1
 19240                           indf2	equ	0xFDF
 19241                           postinc2	equ	0xFDE
 19242                           postdec2	equ	0xFDD
 19243                           plusw2	equ	0xFDB
 19244                           fsr2h	equ	0xFDA
 19245                           fsr2l	equ	0xFD9
 19246                           status	equ	0xFD8
 19247                           
 19248 ;; *************** function _WriteTimer0 *****************
 19249 ;; Defined at:
 19250 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19251 ;; Parameters:    Size  Location     Type
 19252 ;;  timer0          2   13[COMRAM] unsigned int 
 19253 ;; Auto vars:     Size  Location     Type
 19254 ;;  timer           2   15[COMRAM] struct Timers
 19255 ;; Return value:  Size  Location     Type
 19256 ;;		None               void
 19257 ;; Registers used:
 19258 ;;		None
 19259 ;; Tracked objects:
 19260 ;;		On entry : F/1
 19261 ;;		On exit  : F/1
 19262 ;;		Unchanged: F/0
 19263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19264 ;;      Params:         2       0       0       0       0       0       0
 19265 ;;      Locals:         2       0       0       0       0       0       0
 19266 ;;      Temps:          0       0       0       0       0       0       0
 19267 ;;      Totals:         4       0       0       0       0       0       0
 19268 ;;Total ram usage:        4 bytes
 19269 ;; Hardware stack levels used:    1
 19270 ;; Hardware stack levels required when called:    2
 19271 ;; This function calls:
 19272 ;;		Nothing
 19273 ;; This function is called by:
 19274 ;;		_init
 19275 ;; This function uses a non-reentrant model
 19276 ;;
 19277                           
 19278                           	psect	text94
 19279  00545C                     __ptext94:
 19280                           	opt stack 0
 19281  00545C                     _WriteTimer0:
 19282                           	opt stack 27
 19283                           
 19284                           ; BSR set to: 1
 19285                           
 19286                           ;incstack = 0
 19287                           ;incstack = 0
 19288  00545C  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19289  005460  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19290  005464  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19291  005468  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19292                           
 19293                           ; BSR set to: 1
 19294  00546C  0012               	return	
 19295  00546E                     __end_of_WriteTimer0:
 19296                           	opt stack 0
 19297                           tblptru	equ	0xFF8
 19298                           tblptrh	equ	0xFF7
 19299                           tblptrl	equ	0xFF6
 19300                           tablat	equ	0xFF5
 19301                           prodh	equ	0xFF4
 19302                           prodl	equ	0xFF3
 19303                           intcon	equ	0xFF2
 19304                           postinc0	equ	0xFEE
 19305                           wreg	equ	0xFE8
 19306                           indf1	equ	0xFE7
 19307                           postdec1	equ	0xFE5
 19308                           fsr1h	equ	0xFE2
 19309                           fsr1l	equ	0xFE1
 19310                           indf2	equ	0xFDF
 19311                           postinc2	equ	0xFDE
 19312                           postdec2	equ	0xFDD
 19313                           plusw2	equ	0xFDB
 19314                           fsr2h	equ	0xFDA
 19315                           fsr2l	equ	0xFD9
 19316                           status	equ	0xFD8
 19317                           
 19318 ;; *************** function ___awtofl *****************
 19319 ;; Defined at:
 19320 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19321 ;; Parameters:    Size  Location     Type
 19322 ;;  c               2   23[COMRAM] int 
 19323 ;; Auto vars:     Size  Location     Type
 19324 ;;  f1              4    0        int 
 19325 ;;  sign            1   29[COMRAM] unsigned char 
 19326 ;; Return value:  Size  Location     Type
 19327 ;;                  4   23[COMRAM] unsigned char 
 19328 ;; Registers used:
 19329 ;;		wreg, status,2, status,0, cstack
 19330 ;; Tracked objects:
 19331 ;;		On entry : F/0
 19332 ;;		On exit  : 0/0
 19333 ;;		Unchanged: 0/0
 19334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19335 ;;      Params:         4       0       0       0       0       0       0
 19336 ;;      Locals:         3       0       0       0       0       0       0
 19337 ;;      Temps:          0       0       0       0       0       0       0
 19338 ;;      Totals:         7       0       0       0       0       0       0
 19339 ;;Total ram usage:        7 bytes
 19340 ;; Hardware stack levels used:    1
 19341 ;; Hardware stack levels required when called:    3
 19342 ;; This function calls:
 19343 ;;		___flpack
 19344 ;; This function is called by:
 19345 ;;		_setEventData
 19346 ;;		_exp
 19347 ;;		_log
 19348 ;; This function uses a non-reentrant model
 19349 ;;
 19350                           
 19351                           	psect	text95
 19352  00502A                     __ptext95:
 19353                           	opt stack 0
 19354  00502A                     ___awtofl:
 19355                           	opt stack 25
 19356                           
 19357                           ; BSR set to: 0
 19358                           
 19359                           ; BSR set to: 1
 19360                           ;incstack = 0
 19361                           ;incstack = 0
 19362  00502A  6A1E               	clrf	___awtofl@sign,c
 19363  00502C  AE19               	btfss	___awtofl@c+1,7,c
 19364  00502E  D005               	goto	l11680
 19365                           
 19366                           ; BSR set to: 0
 19367  005030  6C18               	negf	___awtofl@c,c
 19368  005032  1E19               	comf	___awtofl@c+1,f,c
 19369  005034  B0D8               	btfsc	status,0,c
 19370  005036  2A19               	incf	___awtofl@c+1,f,c
 19371  005038  2A1E               	incf	___awtofl@sign,f,c
 19372  00503A                     l11680:
 19373                           
 19374                           ; BSR set to: 0
 19375  00503A  C018  F00E         	movff	___awtofl@c,?___flpack
 19376  00503E  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19377  005042  6A10               	clrf	?___flpack+2,c
 19378  005044  6A11               	clrf	?___flpack+3,c
 19379  005046  0E96               	movlw	150
 19380  005048  6E12               	movwf	?___flpack+4,c
 19381  00504A  C01E  F013         	movff	___awtofl@sign,?___flpack+5
 19382  00504E  EC6D  F021         	call	___flpack	;wreg free
 19383  005052  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19384  005056  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19385  00505A  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19386  00505E  C00E  F018         	movff	?___flpack,?___awtofl
 19387  005062  0012               	return	
 19388  005064                     __end_of___awtofl:
 19389                           	opt stack 0
 19390                           tblptru	equ	0xFF8
 19391                           tblptrh	equ	0xFF7
 19392                           tblptrl	equ	0xFF6
 19393                           tablat	equ	0xFF5
 19394                           prodh	equ	0xFF4
 19395                           prodl	equ	0xFF3
 19396                           intcon	equ	0xFF2
 19397                           postinc0	equ	0xFEE
 19398                           wreg	equ	0xFE8
 19399                           indf1	equ	0xFE7
 19400                           postdec1	equ	0xFE5
 19401                           fsr1h	equ	0xFE2
 19402                           fsr1l	equ	0xFE1
 19403                           indf2	equ	0xFDF
 19404                           postinc2	equ	0xFDE
 19405                           postdec2	equ	0xFDD
 19406                           plusw2	equ	0xFDB
 19407                           fsr2h	equ	0xFDA
 19408                           fsr2l	equ	0xFD9
 19409                           status	equ	0xFD8
 19410                           
 19411 ;; *************** function ___flmul *****************
 19412 ;; Defined at:
 19413 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19414 ;; Parameters:    Size  Location     Type
 19415 ;;  f1              4    0[BANK0 ] unsigned char 
 19416 ;;  f2              4    4[BANK0 ] unsigned char 
 19417 ;; Auto vars:     Size  Location     Type
 19418 ;;  f3_as_produc    4   16[BANK0 ] unsigned long 
 19419 ;;  sign            1   21[BANK0 ] unsigned char 
 19420 ;;  cntr            1   20[BANK0 ] unsigned char 
 19421 ;;  exp             1   15[BANK0 ] unsigned char 
 19422 ;; Return value:  Size  Location     Type
 19423 ;;                  4    0[BANK0 ] unsigned char 
 19424 ;; Registers used:
 19425 ;;		wreg, status,2, status,0, cstack
 19426 ;; Tracked objects:
 19427 ;;		On entry : 0/0
 19428 ;;		On exit  : 0/0
 19429 ;;		Unchanged: 0/0
 19430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19431 ;;      Params:         0       8       0       0       0       0       0
 19432 ;;      Locals:         0      14       0       0       0       0       0
 19433 ;;      Temps:          0       0       0       0       0       0       0
 19434 ;;      Totals:         0      22       0       0       0       0       0
 19435 ;;Total ram usage:       22 bytes
 19436 ;; Hardware stack levels used:    1
 19437 ;; Hardware stack levels required when called:    3
 19438 ;; This function calls:
 19439 ;;		___flpack
 19440 ;; This function is called by:
 19441 ;;		_doWork
 19442 ;;		_Celsius2Fahrenheit
 19443 ;;		___asflmul
 19444 ;;		_log
 19445 ;;		_eval_poly
 19446 ;; This function uses a non-reentrant model
 19447 ;;
 19448                           
 19449                           	psect	text96
 19450  004094                     __ptext96:
 19451                           	opt stack 0
 19452  004094                     ___flmul:
 19453                           	opt stack 26
 19454                           
 19455                           ;incstack = 0
 19456                           ;incstack = 0
 19457  004094  0100               	movlb	0	; () banked
 19458  004096  3562               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19459  004098  3563               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19460  00409A  6F6F               	movwf	___flmul@exp& (0+255),b
 19461  00409C  676F               	tstfsz	___flmul@exp& (0+255),b
 19462  00409E  D001               	goto	l11624
 19463  0040A0  D006               	goto	u10070
 19464  0040A2                     l11624:
 19465                           
 19466                           ; BSR set to: 0
 19467  0040A2  0100               	movlb	0	; () banked
 19468  0040A4  3566               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19469  0040A6  3567               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19470  0040A8  6F75               	movwf	___flmul@sign& (0+255),b
 19471  0040AA  6775               	tstfsz	___flmul@sign& (0+255),b
 19472  0040AC  D005               	goto	l11628
 19473  0040AE                     u10070:
 19474                           
 19475                           ; BSR set to: 0
 19476  0040AE  6B60               	clrf	?___flmul& (0+255),b
 19477  0040B0  6B61               	clrf	(?___flmul+1)& (0+255),b
 19478  0040B2  6B62               	clrf	(?___flmul+2)& (0+255),b
 19479  0040B4  6B63               	clrf	(?___flmul+3)& (0+255),b
 19480  0040B6  D041               	goto	l1620
 19481  0040B8                     l11628:
 19482                           
 19483                           ; BSR set to: 0
 19484  0040B8  5175               	movf	___flmul@sign& (0+255),w,b
 19485  0040BA  0F7B               	addlw	123
 19486  0040BC  276F               	addwf	___flmul@exp& (0+255),f,b
 19487                           
 19488                           ; BSR set to: 0
 19489  0040BE  C063  F075         	movff	___flmul@f1+3,___flmul@sign
 19490  0040C2  0100               	movlb	0	; () banked
 19491  0040C4  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19492  0040C6  1B75               	xorwf	___flmul@sign& (0+255),f,b
 19493  0040C8  0E80               	movlw	128
 19494  0040CA  1775               	andwf	___flmul@sign& (0+255),f,b
 19495                           
 19496                           ; BSR set to: 0
 19497  0040CC  8F62               	bsf	(___flmul@f1+2)& (0+255),7,b
 19498                           
 19499                           ; BSR set to: 0
 19500  0040CE  8F66               	bsf	(___flmul@f2+2)& (0+255),7,b
 19501  0040D0  6B67               	clrf	(___flmul@f2+3)& (0+255),b
 19502                           
 19503                           ; BSR set to: 0
 19504  0040D2  6B70               	clrf	___flmul@f3_as_product& (0+255),b
 19505  0040D4  6B71               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 19506  0040D6  6B72               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 19507  0040D8  6B73               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 19508                           
 19509                           ; BSR set to: 0
 19510  0040DA  0E07               	movlw	7
 19511  0040DC  6F74               	movwf	___flmul@cntr& (0+255),b
 19512  0040DE                     l11640:
 19513                           
 19514                           ; BSR set to: 0
 19515  0040DE  A160               	btfss	___flmul@f1& (0+255),0,b
 19516  0040E0  D002               	goto	l11644
 19517                           
 19518                           ; BSR set to: 0
 19519  0040E2  5164               	movf	___flmul@f2& (0+255),w,b
 19520  0040E4  D82B               	call	PL68	;call to abstracted procedure
 19521  0040E6                     l11644:
 19522                           
 19523                           ; BSR set to: 0
 19524                           
 19525                           ; BSR set to: 0
 19526  0040E6  D832               	call	PL72	;call to abstracted procedure
 19527  0040E8  3764               	rlcf	___flmul@f2& (0+255),f,b
 19528  0040EA  3765               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19529  0040EC  3766               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19530  0040EE  3767               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19531                           
 19532                           ; BSR set to: 0
 19533  0040F0  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19534  0040F2  D7F5               	goto	l11640
 19535                           
 19536                           ; BSR set to: 0
 19537  0040F4  0E11               	movlw	17
 19538  0040F6  6F74               	movwf	___flmul@cntr& (0+255),b
 19539  0040F8                     l11652:
 19540                           
 19541                           ; BSR set to: 0
 19542  0040F8  A160               	btfss	___flmul@f1& (0+255),0,b
 19543  0040FA  D002               	goto	l11656
 19544                           
 19545                           ; BSR set to: 0
 19546  0040FC  5164               	movf	___flmul@f2& (0+255),w,b
 19547  0040FE  D81E               	call	PL68	;call to abstracted procedure
 19548  004100                     l11656:
 19549                           
 19550                           ; BSR set to: 0
 19551                           
 19552                           ; BSR set to: 0
 19553  004100  D825               	call	PL72	;call to abstracted procedure
 19554  004102  3373               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19555  004104  3372               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19556  004106  3371               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19557  004108  3370               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19558                           
 19559                           ; BSR set to: 0
 19560  00410A  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19561  00410C  D7F5               	goto	l11652
 19562                           
 19563                           ; BSR set to: 0
 19564  00410E  C070  F00E         	movff	___flmul@f3_as_product,?___flpack
 19565  004112  C071  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19566  004116  C072  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19567  00411A  C073  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19568  00411E  C06F  F012         	movff	___flmul@exp,?___flpack+4
 19569  004122  C075  F013         	movff	___flmul@sign,?___flpack+5
 19570  004126  EC6D  F021         	call	___flpack	;wreg free
 19571  00412A  C011  F063         	movff	?___flpack+3,?___flmul+3
 19572  00412E  C010  F062         	movff	?___flpack+2,?___flmul+2
 19573  004132  C00F  F061         	movff	?___flpack+1,?___flmul+1
 19574  004136  C00E  F060         	movff	?___flpack,?___flmul
 19575  00413A                     l1620:
 19576  00413A  0012               	return	
 19577  00413C                     __end_of___flmul:
 19578                           	opt stack 0
 19579  00413C                     PL68:
 19580                           	opt stack 26
 19581  00413C  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19582  00413E  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19583  004140  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19584  004142  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19585  004144  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19586  004146  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19587  004148  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19588  00414A  0012               	return	
 19589  00414C                     __end_ofPL68:
 19590                           	opt stack 0
 19591  00414C                     PL72:
 19592                           	opt stack 26
 19593  00414C  90D8               	bcf	status,0,c
 19594  00414E  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19595  004150  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19596  004152  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19597  004154  3360               	rrcf	___flmul@f1& (0+255),f,b
 19598  004156  90D8               	bcf	status,0,c
 19599  004158  0012               	return	
 19600  00415A                     __end_ofPL72:
 19601                           	opt stack 0
 19602                           tblptru	equ	0xFF8
 19603                           tblptrh	equ	0xFF7
 19604                           tblptrl	equ	0xFF6
 19605                           tablat	equ	0xFF5
 19606                           prodh	equ	0xFF4
 19607                           prodl	equ	0xFF3
 19608                           intcon	equ	0xFF2
 19609                           postinc0	equ	0xFEE
 19610                           wreg	equ	0xFE8
 19611                           indf1	equ	0xFE7
 19612                           postdec1	equ	0xFE5
 19613                           fsr1h	equ	0xFE2
 19614                           fsr1l	equ	0xFE1
 19615                           indf2	equ	0xFDF
 19616                           postinc2	equ	0xFDE
 19617                           postdec2	equ	0xFDD
 19618                           plusw2	equ	0xFDB
 19619                           fsr2h	equ	0xFDA
 19620                           fsr2l	equ	0xFD9
 19621                           status	equ	0xFD8
 19622                           
 19623 ;; *************** function ___flpack *****************
 19624 ;; Defined at:
 19625 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19626 ;; Parameters:    Size  Location     Type
 19627 ;;  arg             4   13[COMRAM] unsigned long 
 19628 ;;  exp             1   17[COMRAM] unsigned char 
 19629 ;;  sign            1   18[COMRAM] unsigned char 
 19630 ;; Auto vars:     Size  Location     Type
 19631 ;;		None
 19632 ;; Return value:  Size  Location     Type
 19633 ;;                  4   13[COMRAM] unsigned char 
 19634 ;; Registers used:
 19635 ;;		wreg, status,2, status,0
 19636 ;; Tracked objects:
 19637 ;;		On entry : 0/0
 19638 ;;		On exit  : 0/0
 19639 ;;		Unchanged: 0/0
 19640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19641 ;;      Params:         6       0       0       0       0       0       0
 19642 ;;      Locals:         0       0       0       0       0       0       0
 19643 ;;      Temps:          4       0       0       0       0       0       0
 19644 ;;      Totals:        10       0       0       0       0       0       0
 19645 ;;Total ram usage:       10 bytes
 19646 ;; Hardware stack levels used:    1
 19647 ;; Hardware stack levels required when called:    2
 19648 ;; This function calls:
 19649 ;;		Nothing
 19650 ;; This function is called by:
 19651 ;;		___altofl
 19652 ;;		___awtofl
 19653 ;;		___fladd
 19654 ;;		___fldiv
 19655 ;;		___flmul
 19656 ;;		___lwtofl
 19657 ;; This function uses a non-reentrant model
 19658 ;;
 19659                           
 19660                           	psect	text97
 19661  0042DA                     __ptext97:
 19662                           	opt stack 0
 19663  0042DA                     ___flpack:
 19664                           	opt stack 26
 19665                           
 19666                           ;incstack = 0
 19667                           ;incstack = 0
 19668  0042DA  5012               	movf	___flpack@exp,w,c
 19669  0042DC  E005               	bz	l1535
 19670  0042DE  5011               	movf	___flpack@arg+3,w,c
 19671  0042E0  100E               	iorwf	___flpack@arg,w,c
 19672  0042E2  100F               	iorwf	___flpack@arg+1,w,c
 19673  0042E4  1010               	iorwf	___flpack@arg+2,w,c
 19674  0042E6  E107               	bnz	l11430
 19675  0042E8                     l1535:
 19676  0042E8  6A0E               	clrf	?___flpack,c
 19677  0042EA  6A0F               	clrf	?___flpack+1,c
 19678  0042EC  6A10               	clrf	?___flpack+2,c
 19679  0042EE  6A11               	clrf	?___flpack+3,c
 19680  0042F0  D04B               	goto	l1536
 19681  0042F2                     l11428:
 19682  0042F2  2A12               	incf	___flpack@exp,f,c
 19683  0042F4  D84A               	call	PL86	;call to abstracted procedure
 19684  0042F6                     l11430:
 19685  0042F6  6A14               	clrf	??___flpack& (0+255),c
 19686  0042F8  6A15               	clrf	(??___flpack+1)& (0+255),c
 19687  0042FA  6A16               	clrf	(??___flpack+2)& (0+255),c
 19688  0042FC  0EFE               	movlw	254
 19689  0042FE  1411               	andwf	___flpack@arg+3,w,c
 19690  004300  6E17               	movwf	(??___flpack+3)& (0+255),c
 19691  004302  5017               	movf	??___flpack+3,w,c
 19692  004304  1014               	iorwf	??___flpack,w,c
 19693  004306  1015               	iorwf	??___flpack+1,w,c
 19694  004308  1016               	iorwf	??___flpack+2,w,c
 19695  00430A  E008               	bz	l1540
 19696  00430C  D7F2               	goto	l11428
 19697  00430E                     l11432:
 19698  00430E  2A12               	incf	___flpack@exp,f,c
 19699  004310  2A0E               	incf	___flpack@arg,f,c
 19700  004312  0E00               	movlw	0
 19701  004314  220F               	addwfc	___flpack@arg+1,f,c
 19702  004316  2210               	addwfc	___flpack@arg+2,f,c
 19703  004318  2211               	addwfc	___flpack@arg+3,f,c
 19704  00431A  D837               	call	PL86	;call to abstracted procedure
 19705  00431C                     l1540:
 19706  00431C  6A14               	clrf	??___flpack& (0+255),c
 19707  00431E  6A15               	clrf	(??___flpack+1)& (0+255),c
 19708  004320  6A16               	clrf	(??___flpack+2)& (0+255),c
 19709  004322  5011               	movf	___flpack@arg+3,w,c
 19710  004324  6E17               	movwf	(??___flpack+3)& (0+255),c
 19711  004326  5017               	movf	??___flpack+3,w,c
 19712  004328  1014               	iorwf	??___flpack,w,c
 19713  00432A  1015               	iorwf	??___flpack+1,w,c
 19714  00432C  1016               	iorwf	??___flpack+2,w,c
 19715  00432E  E007               	bz	l11440
 19716  004330  D7EE               	goto	l11432
 19717  004332                     l11438:
 19718  004332  0612               	decf	___flpack@exp,f,c
 19719  004334  90D8               	bcf	status,0,c
 19720  004336  360E               	rlcf	___flpack@arg,f,c
 19721  004338  360F               	rlcf	___flpack@arg+1,f,c
 19722  00433A  3610               	rlcf	___flpack@arg+2,f,c
 19723  00433C  3611               	rlcf	___flpack@arg+3,f,c
 19724  00433E                     l11440:
 19725  00433E  AE10               	btfss	___flpack@arg+2,7,c
 19726  004340  D7F8               	goto	l11438
 19727  004342  B012               	btfsc	___flpack@exp,0,c
 19728  004344  D002               	goto	l1546
 19729  004346  0E7F               	movlw	127
 19730  004348  1610               	andwf	___flpack@arg+2,f,c
 19731  00434A                     l1546:
 19732  00434A  90D8               	bcf	status,0,c
 19733  00434C  3212               	rrcf	___flpack@exp,f,c
 19734  00434E  C012  F014         	movff	___flpack@exp,??___flpack
 19735  004352  6A15               	clrf	(??___flpack+1)& (0+255),c
 19736  004354  6A16               	clrf	(??___flpack+2)& (0+255),c
 19737  004356  6A17               	clrf	(??___flpack+3)& (0+255),c
 19738  004358  C014  F017         	movff	??___flpack,??___flpack+3
 19739  00435C  6A16               	clrf	??___flpack+2,c
 19740  00435E  6A15               	clrf	??___flpack+1,c
 19741  004360  6A14               	clrf	??___flpack,c
 19742  004362  5014               	movf	??___flpack,w,c
 19743  004364  120E               	iorwf	___flpack@arg,f,c
 19744  004366  5015               	movf	??___flpack+1,w,c
 19745  004368  120F               	iorwf	___flpack@arg+1,f,c
 19746  00436A  5016               	movf	??___flpack+2,w,c
 19747  00436C  1210               	iorwf	___flpack@arg+2,f,c
 19748  00436E  5017               	movf	??___flpack+3,w,c
 19749  004370  1211               	iorwf	___flpack@arg+3,f,c
 19750  004372  5013               	movf	___flpack@sign,w,c
 19751  004374  A4D8               	btfss	status,2,c
 19752  004376  8E11               	bsf	___flpack@arg+3,7,c
 19753  004378  C00E  F00E         	movff	___flpack@arg,?___flpack
 19754  00437C  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19755  004380  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19756  004384  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19757  004388                     l1536:
 19758  004388  0012               	return	
 19759  00438A                     __end_of___flpack:
 19760                           	opt stack 0
 19761  00438A                     PL86:
 19762                           	opt stack 26
 19763  00438A  90D8               	bcf	status,0,c
 19764  00438C  3211               	rrcf	___flpack@arg+3,f,c
 19765  00438E  3210               	rrcf	___flpack@arg+2,f,c
 19766  004390  320F               	rrcf	___flpack@arg+1,f,c
 19767  004392  320E               	rrcf	___flpack@arg,f,c
 19768  004394  0012               	return	
 19769  004396                     __end_ofPL86:
 19770                           	opt stack 0
 19771                           tblptru	equ	0xFF8
 19772                           tblptrh	equ	0xFF7
 19773                           tblptrl	equ	0xFF6
 19774                           tablat	equ	0xFF5
 19775                           prodh	equ	0xFF4
 19776                           prodl	equ	0xFF3
 19777                           intcon	equ	0xFF2
 19778                           postinc0	equ	0xFEE
 19779                           wreg	equ	0xFE8
 19780                           indf1	equ	0xFE7
 19781                           postdec1	equ	0xFE5
 19782                           fsr1h	equ	0xFE2
 19783                           fsr1l	equ	0xFE1
 19784                           indf2	equ	0xFDF
 19785                           postinc2	equ	0xFDE
 19786                           postdec2	equ	0xFDD
 19787                           plusw2	equ	0xFDB
 19788                           fsr2h	equ	0xFDA
 19789                           fsr2l	equ	0xFD9
 19790                           status	equ	0xFD8
 19791                           
 19792 ;; *************** function _vscp_readAppReg *****************
 19793 ;; Defined at:
 19794 ;;		line 1274 in file "../main.c"
 19795 ;; Parameters:    Size  Location     Type
 19796 ;;  reg             1    wreg     unsigned char 
 19797 ;; Auto vars:     Size  Location     Type
 19798 ;;  reg             1   18[COMRAM] unsigned char 
 19799 ;;  pos             1   17[COMRAM] unsigned char 
 19800 ;;  rv              1   19[COMRAM] unsigned char 
 19801 ;; Return value:  Size  Location     Type
 19802 ;;                  1    wreg      unsigned char 
 19803 ;; Registers used:
 19804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19805 ;; Tracked objects:
 19806 ;;		On entry : F/0
 19807 ;;		On exit  : 0/0
 19808 ;;		Unchanged: 0/0
 19809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19810 ;;      Params:         0       0       0       0       0       0       0
 19811 ;;      Locals:         3       0       0       0       0       0       0
 19812 ;;      Temps:          0       0       0       0       0       0       0
 19813 ;;      Totals:         3       0       0       0       0       0       0
 19814 ;;Total ram usage:        3 bytes
 19815 ;; Hardware stack levels used:    1
 19816 ;; Hardware stack levels required when called:    3
 19817 ;; This function calls:
 19818 ;;		_readEEPROM
 19819 ;; This function is called by:
 19820 ;;		_vscp_readRegister
 19821 ;;		_vscp_handleProtocolEvent
 19822 ;; This function uses a non-reentrant model
 19823 ;;
 19824                           
 19825                           	psect	text98
 19826  001C10                     __ptext98:
 19827                           	opt stack 0
 19828  001C10                     _vscp_readAppReg:
 19829                           	opt stack 25
 19830                           
 19831                           ;incstack = 0
 19832                           ;incstack = 0
 19833                           ;vscp_readAppReg@reg stored from wreg
 19834  001C10  CFE8 F013          	movff	wreg,vscp_readAppReg@reg
 19835                           
 19836                           ; BSR set to: 0
 19837                           ;main.c: 1275: uint8_t rv;
 19838                           ;main.c: 1280: if (0 == vscp_page_select) {
 19839  001C14  5047               	movf	_vscp_page_select+1,w,c
 19840  001C16  1046               	iorwf	_vscp_page_select,w,c
 19841  001C18  E101 D219          	bz	l10750
 19842  001C1C  D35D               	goto	l10752
 19843  001C1E                     l10548:
 19844                           
 19845                           ; BSR set to: 0
 19846                           ;main.c: 1286: rv = readEEPROM(0x41);
 19847  001C1E  6A0F               	clrf	?_readEEPROM+1,c
 19848  001C20  0E41               	movlw	65
 19849  001C22  6E0E               	movwf	?_readEEPROM,c
 19850  001C24  EC1C  F02A         	call	_readEEPROM	;wreg free
 19851  001C28  D384               	goto	L41
 19852  001C2A                     l10550:
 19853                           
 19854                           ; BSR set to: 0
 19855                           ;main.c: 1291: rv = readEEPROM(0x42);
 19856  001C2A  6A0F               	clrf	?_readEEPROM+1,c
 19857  001C2C  0E42               	movlw	66
 19858  001C2E  6E0E               	movwf	?_readEEPROM,c
 19859  001C30  EC1C  F02A         	call	_readEEPROM	;wreg free
 19860  001C34  D37E               	goto	L41
 19861  001C36                     l10552:
 19862                           
 19863                           ; BSR set to: 0
 19864                           ;main.c: 1296: rv = readEEPROM(0x43);
 19865  001C36  6A0F               	clrf	?_readEEPROM+1,c
 19866  001C38  0E43               	movlw	67
 19867  001C3A  6E0E               	movwf	?_readEEPROM,c
 19868  001C3C  EC1C  F02A         	call	_readEEPROM	;wreg free
 19869  001C40  D378               	goto	L41
 19870  001C42                     l10554:
 19871                           
 19872                           ; BSR set to: 0
 19873                           ;main.c: 1301: rv = readEEPROM(0x44);
 19874  001C42  6A0F               	clrf	?_readEEPROM+1,c
 19875  001C44  0E44               	movlw	68
 19876  001C46  6E0E               	movwf	?_readEEPROM,c
 19877  001C48  EC1C  F02A         	call	_readEEPROM	;wreg free
 19878  001C4C  D372               	goto	L41
 19879  001C4E                     l10556:
 19880                           
 19881                           ; BSR set to: 0
 19882                           ;main.c: 1306: rv = readEEPROM(0x45);
 19883  001C4E  6A0F               	clrf	?_readEEPROM+1,c
 19884  001C50  0E45               	movlw	69
 19885  001C52  6E0E               	movwf	?_readEEPROM,c
 19886  001C54  EC1C  F02A         	call	_readEEPROM	;wreg free
 19887  001C58  D36C               	goto	L41
 19888  001C5A                     l10558:
 19889                           
 19890                           ; BSR set to: 0
 19891                           ;main.c: 1311: rv = readEEPROM(0x46);
 19892  001C5A  6A0F               	clrf	?_readEEPROM+1,c
 19893  001C5C  0E46               	movlw	70
 19894  001C5E  6E0E               	movwf	?_readEEPROM,c
 19895  001C60  EC1C  F02A         	call	_readEEPROM	;wreg free
 19896  001C64  D366               	goto	L41
 19897  001C66                     l10560:
 19898                           
 19899                           ; BSR set to: 0
 19900                           ;main.c: 1316: rv = readEEPROM(0x47);
 19901  001C66  6A0F               	clrf	?_readEEPROM+1,c
 19902  001C68  0E47               	movlw	71
 19903  001C6A  6E0E               	movwf	?_readEEPROM,c
 19904  001C6C  EC1C  F02A         	call	_readEEPROM	;wreg free
 19905  001C70  D360               	goto	L41
 19906  001C72                     l10562:
 19907                           
 19908                           ; BSR set to: 0
 19909                           ;main.c: 1321: rv = readEEPROM(0x48);
 19910  001C72  6A0F               	clrf	?_readEEPROM+1,c
 19911  001C74  0E48               	movlw	72
 19912  001C76  6E0E               	movwf	?_readEEPROM,c
 19913  001C78  EC1C  F02A         	call	_readEEPROM	;wreg free
 19914  001C7C  D35A               	goto	L41
 19915  001C7E                     l10564:
 19916                           
 19917                           ; BSR set to: 0
 19918                           ;main.c: 1326: rv = ((current_temp[0] & 0xff00) >> 8);
 19919  001C7E  0101               	movlb	1	; () banked
 19920  001C80  5101               	movf	(_current_temp+1)& (0+255),w,b
 19921  001C82  D357               	goto	L41
 19922  001C84                     l315:
 19923                           
 19924                           ; BSR set to: 0
 19925                           ;main.c: 1331: rv = (current_temp[0] & 0x00ff);
 19926  001C84  C100  F014         	movff	_current_temp,vscp_readAppReg@rv
 19927                           
 19928                           ;main.c: 1332: break;
 19929  001C88  D355               	goto	l10774
 19930  001C8A                     l10566:
 19931                           
 19932                           ; BSR set to: 0
 19933                           ;main.c: 1336: rv = ((current_temp[1] & 0xff00) >> 8);
 19934  001C8A  0101               	movlb	1	; () banked
 19935  001C8C  5103               	movf	(_current_temp+3)& (0+255),w,b
 19936  001C8E  D351               	goto	L41
 19937  001C90                     l317:
 19938                           
 19939                           ; BSR set to: 0
 19940                           ;main.c: 1341: rv = (current_temp[1] & 0x00ff);
 19941  001C90  C102  F014         	movff	_current_temp+2,vscp_readAppReg@rv
 19942                           
 19943                           ;main.c: 1342: break;
 19944  001C94  D34F               	goto	l10774
 19945  001C96                     l10568:
 19946                           
 19947                           ; BSR set to: 0
 19948                           ;main.c: 1346: rv = ((current_temp[2] & 0xff00) >> 8);
 19949  001C96  0101               	movlb	1	; () banked
 19950  001C98  5105               	movf	(_current_temp+5)& (0+255),w,b
 19951  001C9A  D34B               	goto	L41
 19952  001C9C                     l319:
 19953                           
 19954                           ; BSR set to: 0
 19955                           ;main.c: 1351: rv = (current_temp[2] & 0x00ff);
 19956  001C9C  C104  F014         	movff	_current_temp+4,vscp_readAppReg@rv
 19957                           
 19958                           ;main.c: 1352: break;
 19959  001CA0  D349               	goto	l10774
 19960  001CA2                     l10570:
 19961                           
 19962                           ; BSR set to: 0
 19963                           ;main.c: 1356: rv = ((current_temp[3] & 0xff00) >> 8);
 19964  001CA2  0101               	movlb	1	; () banked
 19965  001CA4  5107               	movf	(_current_temp+7)& (0+255),w,b
 19966  001CA6  D345               	goto	L41
 19967  001CA8                     l321:
 19968                           
 19969                           ; BSR set to: 0
 19970                           ;main.c: 1361: rv = (current_temp[3] & 0x00ff);
 19971  001CA8  C106  F014         	movff	_current_temp+6,vscp_readAppReg@rv
 19972                           
 19973                           ;main.c: 1362: break;
 19974  001CAC  D343               	goto	l10774
 19975  001CAE                     l10572:
 19976                           
 19977                           ; BSR set to: 0
 19978                           ;main.c: 1366: rv = ((current_temp[4] & 0xff00) >> 8);
 19979  001CAE  0101               	movlb	1	; () banked
 19980  001CB0  5109               	movf	(_current_temp+9)& (0+255),w,b
 19981  001CB2  D33F               	goto	L41
 19982  001CB4                     l323:
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;main.c: 1371: rv = (current_temp[4] & 0x00ff);
 19986  001CB4  C108  F014         	movff	_current_temp+8,vscp_readAppReg@rv
 19987                           
 19988                           ;main.c: 1372: break;
 19989  001CB8  D33D               	goto	l10774
 19990  001CBA                     l10576:
 19991                           
 19992                           ; BSR set to: 0
 19993                           ;main.c: 1386: rv = readEEPROM(0x49);
 19994  001CBA  6A0F               	clrf	?_readEEPROM+1,c
 19995  001CBC  0E49               	movlw	73
 19996  001CBE  6E0E               	movwf	?_readEEPROM,c
 19997  001CC0  EC1C  F02A         	call	_readEEPROM	;wreg free
 19998  001CC4  D336               	goto	L41
 19999  001CC6                     l10578:
 20000                           
 20001                           ; BSR set to: 0
 20002                           ;main.c: 1391: rv = readEEPROM(0x4A);
 20003  001CC6  6A0F               	clrf	?_readEEPROM+1,c
 20004  001CC8  0E4A               	movlw	74
 20005  001CCA  6E0E               	movwf	?_readEEPROM,c
 20006  001CCC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20007  001CD0  D330               	goto	L41
 20008  001CD2                     l10580:
 20009                           
 20010                           ; BSR set to: 0
 20011                           ;main.c: 1396: rv = readEEPROM(0x4B);
 20012  001CD2  6A0F               	clrf	?_readEEPROM+1,c
 20013  001CD4  0E4B               	movlw	75
 20014  001CD6  6E0E               	movwf	?_readEEPROM,c
 20015  001CD8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20016  001CDC  D32A               	goto	L41
 20017  001CDE                     l10582:
 20018                           
 20019                           ; BSR set to: 0
 20020                           ;main.c: 1401: rv = readEEPROM(0x4C);
 20021  001CDE  6A0F               	clrf	?_readEEPROM+1,c
 20022  001CE0  0E4C               	movlw	76
 20023  001CE2  6E0E               	movwf	?_readEEPROM,c
 20024  001CE4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20025  001CE8  D324               	goto	L41
 20026  001CEA                     l10584:
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;main.c: 1406: rv = readEEPROM(0x4D);
 20030  001CEA  6A0F               	clrf	?_readEEPROM+1,c
 20031  001CEC  0E4D               	movlw	77
 20032  001CEE  6E0E               	movwf	?_readEEPROM,c
 20033  001CF0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20034  001CF4  D31E               	goto	L41
 20035  001CF6                     l10586:
 20036                           
 20037                           ; BSR set to: 0
 20038                           ;main.c: 1411: rv = readEEPROM(0x4E);
 20039  001CF6  6A0F               	clrf	?_readEEPROM+1,c
 20040  001CF8  0E4E               	movlw	78
 20041  001CFA  6E0E               	movwf	?_readEEPROM,c
 20042  001CFC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20043  001D00  D318               	goto	L41
 20044  001D02                     l10588:
 20045                           
 20046                           ; BSR set to: 0
 20047                           ;main.c: 1418: rv = readEEPROM(0x4F);
 20048  001D02  6A0F               	clrf	?_readEEPROM+1,c
 20049  001D04  0E4F               	movlw	79
 20050  001D06  6E0E               	movwf	?_readEEPROM,c
 20051  001D08  EC1C  F02A         	call	_readEEPROM	;wreg free
 20052  001D0C  D312               	goto	L41
 20053  001D0E                     l10590:
 20054                           
 20055                           ; BSR set to: 0
 20056                           ;main.c: 1423: rv = readEEPROM(0x50);
 20057  001D0E  6A0F               	clrf	?_readEEPROM+1,c
 20058  001D10  0E50               	movlw	80
 20059  001D12  6E0E               	movwf	?_readEEPROM,c
 20060  001D14  EC1C  F02A         	call	_readEEPROM	;wreg free
 20061  001D18  D30C               	goto	L41
 20062  001D1A                     l10592:
 20063                           
 20064                           ; BSR set to: 0
 20065                           ;main.c: 1428: rv = readEEPROM(0x51);
 20066  001D1A  6A0F               	clrf	?_readEEPROM+1,c
 20067  001D1C  0E51               	movlw	81
 20068  001D1E  6E0E               	movwf	?_readEEPROM,c
 20069  001D20  EC1C  F02A         	call	_readEEPROM	;wreg free
 20070  001D24  D306               	goto	L41
 20071  001D26                     l10594:
 20072                           
 20073                           ; BSR set to: 0
 20074                           ;main.c: 1433: rv = readEEPROM(0x52);
 20075  001D26  6A0F               	clrf	?_readEEPROM+1,c
 20076  001D28  0E52               	movlw	82
 20077  001D2A  6E0E               	movwf	?_readEEPROM,c
 20078  001D2C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20079  001D30  D300               	goto	L41
 20080  001D32                     l10596:
 20081                           
 20082                           ; BSR set to: 0
 20083                           ;main.c: 1438: rv = readEEPROM(0x53);
 20084  001D32  6A0F               	clrf	?_readEEPROM+1,c
 20085  001D34  0E53               	movlw	83
 20086  001D36  6E0E               	movwf	?_readEEPROM,c
 20087  001D38  EC1C  F02A         	call	_readEEPROM	;wreg free
 20088  001D3C  D2FA               	goto	L41
 20089  001D3E                     l10598:
 20090                           
 20091                           ; BSR set to: 0
 20092                           ;main.c: 1443: rv = readEEPROM(0x54);
 20093  001D3E  6A0F               	clrf	?_readEEPROM+1,c
 20094  001D40  0E54               	movlw	84
 20095  001D42  6E0E               	movwf	?_readEEPROM,c
 20096  001D44  EC1C  F02A         	call	_readEEPROM	;wreg free
 20097  001D48  D2F4               	goto	L41
 20098  001D4A                     l10600:
 20099                           
 20100                           ; BSR set to: 0
 20101                           ;main.c: 1448: rv = readEEPROM(0x55);
 20102  001D4A  6A0F               	clrf	?_readEEPROM+1,c
 20103  001D4C  0E55               	movlw	85
 20104  001D4E  6E0E               	movwf	?_readEEPROM,c
 20105  001D50  EC1C  F02A         	call	_readEEPROM	;wreg free
 20106  001D54  D2EE               	goto	L41
 20107  001D56                     l10602:
 20108                           
 20109                           ; BSR set to: 0
 20110                           ;main.c: 1453: rv = readEEPROM(0x56);
 20111  001D56  6A0F               	clrf	?_readEEPROM+1,c
 20112  001D58  0E56               	movlw	86
 20113  001D5A  6E0E               	movwf	?_readEEPROM,c
 20114  001D5C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20115  001D60  D2E8               	goto	L41
 20116  001D62                     l10604:
 20117                           
 20118                           ; BSR set to: 0
 20119                           ;main.c: 1458: rv = readEEPROM(0x57);
 20120  001D62  6A0F               	clrf	?_readEEPROM+1,c
 20121  001D64  0E57               	movlw	87
 20122  001D66  6E0E               	movwf	?_readEEPROM,c
 20123  001D68  EC1C  F02A         	call	_readEEPROM	;wreg free
 20124  001D6C  D2E2               	goto	L41
 20125  001D6E                     l10606:
 20126                           
 20127                           ; BSR set to: 0
 20128                           ;main.c: 1463: rv = readEEPROM(0x58);
 20129  001D6E  6A0F               	clrf	?_readEEPROM+1,c
 20130  001D70  0E58               	movlw	88
 20131  001D72  6E0E               	movwf	?_readEEPROM,c
 20132  001D74  EC1C  F02A         	call	_readEEPROM	;wreg free
 20133  001D78  D2DC               	goto	L41
 20134  001D7A                     l10608:
 20135                           
 20136                           ; BSR set to: 0
 20137                           ;main.c: 1468: rv = readEEPROM(0x59);
 20138  001D7A  6A0F               	clrf	?_readEEPROM+1,c
 20139  001D7C  0E59               	movlw	89
 20140  001D7E  6E0E               	movwf	?_readEEPROM,c
 20141  001D80  EC1C  F02A         	call	_readEEPROM	;wreg free
 20142  001D84  D2D6               	goto	L41
 20143  001D86                     l10610:
 20144                           
 20145                           ; BSR set to: 0
 20146                           ;main.c: 1473: rv = readEEPROM(0x5A);
 20147  001D86  6A0F               	clrf	?_readEEPROM+1,c
 20148  001D88  0E5A               	movlw	90
 20149  001D8A  6E0E               	movwf	?_readEEPROM,c
 20150  001D8C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20151  001D90  D2D0               	goto	L41
 20152  001D92                     l10612:
 20153                           
 20154                           ; BSR set to: 0
 20155                           ;main.c: 1482: rv = readEEPROM(0x5B);
 20156  001D92  6A0F               	clrf	?_readEEPROM+1,c
 20157  001D94  0E5B               	movlw	91
 20158  001D96  6E0E               	movwf	?_readEEPROM,c
 20159  001D98  EC1C  F02A         	call	_readEEPROM	;wreg free
 20160  001D9C  D2CA               	goto	L41
 20161  001D9E                     l10614:
 20162                           
 20163                           ; BSR set to: 0
 20164                           ;main.c: 1487: rv = readEEPROM(0x5C);
 20165  001D9E  6A0F               	clrf	?_readEEPROM+1,c
 20166  001DA0  0E5C               	movlw	92
 20167  001DA2  6E0E               	movwf	?_readEEPROM,c
 20168  001DA4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20169  001DA8  D2C4               	goto	L41
 20170  001DAA                     l10616:
 20171                           
 20172                           ; BSR set to: 0
 20173                           ;main.c: 1492: rv = readEEPROM(0x5D);
 20174  001DAA  6A0F               	clrf	?_readEEPROM+1,c
 20175  001DAC  0E5D               	movlw	93
 20176  001DAE  6E0E               	movwf	?_readEEPROM,c
 20177  001DB0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20178  001DB4  D2BE               	goto	L41
 20179  001DB6                     l10618:
 20180                           
 20181                           ; BSR set to: 0
 20182                           ;main.c: 1497: rv = readEEPROM(0x5E);
 20183  001DB6  6A0F               	clrf	?_readEEPROM+1,c
 20184  001DB8  0E5E               	movlw	94
 20185  001DBA  6E0E               	movwf	?_readEEPROM,c
 20186  001DBC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20187  001DC0  D2B8               	goto	L41
 20188  001DC2                     l10620:
 20189                           
 20190                           ; BSR set to: 0
 20191                           ;main.c: 1502: rv = readEEPROM(0x5F);
 20192  001DC2  6A0F               	clrf	?_readEEPROM+1,c
 20193  001DC4  0E5F               	movlw	95
 20194  001DC6  6E0E               	movwf	?_readEEPROM,c
 20195  001DC8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20196  001DCC  D2B2               	goto	L41
 20197  001DCE                     l10622:
 20198                           
 20199                           ; BSR set to: 0
 20200                           ;main.c: 1507: rv = readEEPROM(0x60);
 20201  001DCE  6A0F               	clrf	?_readEEPROM+1,c
 20202  001DD0  0E60               	movlw	96
 20203  001DD2  6E0E               	movwf	?_readEEPROM,c
 20204  001DD4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20205  001DD8  D2AC               	goto	L41
 20206  001DDA                     l10624:
 20207                           
 20208                           ; BSR set to: 0
 20209                           ;main.c: 1512: rv = readEEPROM(0x61);
 20210  001DDA  6A0F               	clrf	?_readEEPROM+1,c
 20211  001DDC  0E61               	movlw	97
 20212  001DDE  6E0E               	movwf	?_readEEPROM,c
 20213  001DE0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20214  001DE4  D2A6               	goto	L41
 20215  001DE6                     l10626:
 20216                           
 20217                           ; BSR set to: 0
 20218                           ;main.c: 1517: rv = readEEPROM(0x62);
 20219  001DE6  6A0F               	clrf	?_readEEPROM+1,c
 20220  001DE8  0E62               	movlw	98
 20221  001DEA  6E0E               	movwf	?_readEEPROM,c
 20222  001DEC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20223  001DF0  D2A0               	goto	L41
 20224  001DF2                     l10628:
 20225                           
 20226                           ; BSR set to: 0
 20227                           ;main.c: 1522: rv = readEEPROM(0x63);
 20228  001DF2  6A0F               	clrf	?_readEEPROM+1,c
 20229  001DF4  0E63               	movlw	99
 20230  001DF6  6E0E               	movwf	?_readEEPROM,c
 20231  001DF8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20232  001DFC  D29A               	goto	L41
 20233  001DFE                     l10630:
 20234                           
 20235                           ; BSR set to: 0
 20236                           ;main.c: 1527: rv = readEEPROM(0x64);
 20237  001DFE  6A0F               	clrf	?_readEEPROM+1,c
 20238  001E00  0E64               	movlw	100
 20239  001E02  6E0E               	movwf	?_readEEPROM,c
 20240  001E04  EC1C  F02A         	call	_readEEPROM	;wreg free
 20241  001E08  D294               	goto	L41
 20242  001E0A                     l10632:
 20243                           
 20244                           ; BSR set to: 0
 20245                           ;main.c: 1532: rv = readEEPROM(0x65);
 20246  001E0A  6A0F               	clrf	?_readEEPROM+1,c
 20247  001E0C  0E65               	movlw	101
 20248  001E0E  6E0E               	movwf	?_readEEPROM,c
 20249  001E10  EC1C  F02A         	call	_readEEPROM	;wreg free
 20250  001E14  D28E               	goto	L41
 20251  001E16                     l10634:
 20252                           
 20253                           ; BSR set to: 0
 20254                           ;main.c: 1537: rv = readEEPROM(0x66);
 20255  001E16  6A0F               	clrf	?_readEEPROM+1,c
 20256  001E18  0E66               	movlw	102
 20257  001E1A  6E0E               	movwf	?_readEEPROM,c
 20258  001E1C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20259  001E20  D288               	goto	L41
 20260  001E22                     l10636:
 20261                           
 20262                           ; BSR set to: 0
 20263                           ;main.c: 1547: rv = readEEPROM(0x67);
 20264  001E22  6A0F               	clrf	?_readEEPROM+1,c
 20265  001E24  0E67               	movlw	103
 20266  001E26  6E0E               	movwf	?_readEEPROM,c
 20267  001E28  EC1C  F02A         	call	_readEEPROM	;wreg free
 20268  001E2C  D282               	goto	L41
 20269  001E2E                     l10638:
 20270                           
 20271                           ; BSR set to: 0
 20272                           ;main.c: 1552: rv = readEEPROM(0x68);
 20273  001E2E  6A0F               	clrf	?_readEEPROM+1,c
 20274  001E30  0E68               	movlw	104
 20275  001E32  6E0E               	movwf	?_readEEPROM,c
 20276  001E34  EC1C  F02A         	call	_readEEPROM	;wreg free
 20277  001E38  D27C               	goto	L41
 20278  001E3A                     l10640:
 20279                           
 20280                           ; BSR set to: 0
 20281                           ;main.c: 1557: rv = readEEPROM(0x69);
 20282  001E3A  6A0F               	clrf	?_readEEPROM+1,c
 20283  001E3C  0E69               	movlw	105
 20284  001E3E  6E0E               	movwf	?_readEEPROM,c
 20285  001E40  EC1C  F02A         	call	_readEEPROM	;wreg free
 20286  001E44  D276               	goto	L41
 20287  001E46                     l10642:
 20288                           
 20289                           ; BSR set to: 0
 20290                           ;main.c: 1562: rv = readEEPROM(0x6A);
 20291  001E46  6A0F               	clrf	?_readEEPROM+1,c
 20292  001E48  0E6A               	movlw	106
 20293  001E4A  6E0E               	movwf	?_readEEPROM,c
 20294  001E4C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20295  001E50  D270               	goto	L41
 20296  001E52                     l10644:
 20297                           
 20298                           ; BSR set to: 0
 20299                           ;main.c: 1567: rv = readEEPROM(0x6B);
 20300  001E52  6A0F               	clrf	?_readEEPROM+1,c
 20301  001E54  0E6B               	movlw	107
 20302  001E56  6E0E               	movwf	?_readEEPROM,c
 20303  001E58  EC1C  F02A         	call	_readEEPROM	;wreg free
 20304  001E5C  D26A               	goto	L41
 20305  001E5E                     l10646:
 20306                           
 20307                           ; BSR set to: 0
 20308                           ;main.c: 1572: rv = readEEPROM(0x6C);
 20309  001E5E  6A0F               	clrf	?_readEEPROM+1,c
 20310  001E60  0E6C               	movlw	108
 20311  001E62  6E0E               	movwf	?_readEEPROM,c
 20312  001E64  EC1C  F02A         	call	_readEEPROM	;wreg free
 20313  001E68  D264               	goto	L41
 20314  001E6A                     l10648:
 20315                           
 20316                           ; BSR set to: 0
 20317                           ;main.c: 1577: rv = readEEPROM(0x6D);
 20318  001E6A  6A0F               	clrf	?_readEEPROM+1,c
 20319  001E6C  0E6D               	movlw	109
 20320  001E6E  6E0E               	movwf	?_readEEPROM,c
 20321  001E70  EC1C  F02A         	call	_readEEPROM	;wreg free
 20322  001E74  D25E               	goto	L41
 20323  001E76                     l10650:
 20324                           
 20325                           ; BSR set to: 0
 20326                           ;main.c: 1582: rv = readEEPROM(0x6E);
 20327  001E76  6A0F               	clrf	?_readEEPROM+1,c
 20328  001E78  0E6E               	movlw	110
 20329  001E7A  6E0E               	movwf	?_readEEPROM,c
 20330  001E7C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20331  001E80  D258               	goto	L41
 20332  001E82                     l10652:
 20333                           
 20334                           ; BSR set to: 0
 20335                           ;main.c: 1587: rv = readEEPROM(0x6F);
 20336  001E82  6A0F               	clrf	?_readEEPROM+1,c
 20337  001E84  0E6F               	movlw	111
 20338  001E86  6E0E               	movwf	?_readEEPROM,c
 20339  001E88  EC1C  F02A         	call	_readEEPROM	;wreg free
 20340  001E8C  D252               	goto	L41
 20341  001E8E                     l10654:
 20342                           
 20343                           ; BSR set to: 0
 20344                           ;main.c: 1592: rv = readEEPROM(0x70);
 20345  001E8E  6A0F               	clrf	?_readEEPROM+1,c
 20346  001E90  0E70               	movlw	112
 20347  001E92  6E0E               	movwf	?_readEEPROM,c
 20348  001E94  EC1C  F02A         	call	_readEEPROM	;wreg free
 20349  001E98  D24C               	goto	L41
 20350  001E9A                     l10656:
 20351                           
 20352                           ; BSR set to: 0
 20353                           ;main.c: 1597: rv = readEEPROM(0x71);
 20354  001E9A  6A0F               	clrf	?_readEEPROM+1,c
 20355  001E9C  0E71               	movlw	113
 20356  001E9E  6E0E               	movwf	?_readEEPROM,c
 20357  001EA0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20358  001EA4  D246               	goto	L41
 20359  001EA6                     l10658:
 20360                           
 20361                           ; BSR set to: 0
 20362                           ;main.c: 1602: rv = readEEPROM(0x72);
 20363  001EA6  6A0F               	clrf	?_readEEPROM+1,c
 20364  001EA8  0E72               	movlw	114
 20365  001EAA  6E0E               	movwf	?_readEEPROM,c
 20366  001EAC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20367  001EB0  D240               	goto	L41
 20368  001EB2                     l10660:
 20369                           
 20370                           ; BSR set to: 0
 20371                           ;main.c: 1611: rv = readEEPROM(0x73);
 20372  001EB2  6A0F               	clrf	?_readEEPROM+1,c
 20373  001EB4  0E73               	movlw	115
 20374  001EB6  6E0E               	movwf	?_readEEPROM,c
 20375  001EB8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20376  001EBC  D23A               	goto	L41
 20377  001EBE                     l10662:
 20378                           
 20379                           ; BSR set to: 0
 20380                           ;main.c: 1616: rv = readEEPROM(0x74);
 20381  001EBE  6A0F               	clrf	?_readEEPROM+1,c
 20382  001EC0  0E74               	movlw	116
 20383  001EC2  6E0E               	movwf	?_readEEPROM,c
 20384  001EC4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20385  001EC8  D234               	goto	L41
 20386  001ECA                     l10684:
 20387                           
 20388                           ; BSR set to: 0
 20389                           ;main.c: 1675: rv = readEEPROM(0x7F);
 20390  001ECA  6A0F               	clrf	?_readEEPROM+1,c
 20391  001ECC  0E7F               	movlw	127
 20392  001ECE  6E0E               	movwf	?_readEEPROM,c
 20393  001ED0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20394  001ED4  D22E               	goto	L41
 20395  001ED6                     l10686:
 20396                           
 20397                           ; BSR set to: 0
 20398                           ;main.c: 1680: rv = readEEPROM(0x80);
 20399  001ED6  6A0F               	clrf	?_readEEPROM+1,c
 20400  001ED8  0E80               	movlw	128
 20401  001EDA  6E0E               	movwf	?_readEEPROM,c
 20402  001EDC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20403  001EE0  D228               	goto	L41
 20404  001EE2                     l10688:
 20405                           
 20406                           ; BSR set to: 0
 20407                           ;main.c: 1685: rv = readEEPROM(0x81);
 20408  001EE2  6A0F               	clrf	?_readEEPROM+1,c
 20409  001EE4  0E81               	movlw	129
 20410  001EE6  6E0E               	movwf	?_readEEPROM,c
 20411  001EE8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20412  001EEC  D222               	goto	L41
 20413  001EEE                     l10690:
 20414                           
 20415                           ; BSR set to: 0
 20416                           ;main.c: 1690: rv = readEEPROM(0x82);
 20417  001EEE  6A0F               	clrf	?_readEEPROM+1,c
 20418  001EF0  0E82               	movlw	130
 20419  001EF2  6E0E               	movwf	?_readEEPROM,c
 20420  001EF4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20421  001EF8  D21C               	goto	L41
 20422  001EFA                     l10692:
 20423                           
 20424                           ; BSR set to: 0
 20425                           ;main.c: 1695: rv = readEEPROM(0x83);
 20426  001EFA  6A0F               	clrf	?_readEEPROM+1,c
 20427  001EFC  0E83               	movlw	131
 20428  001EFE  6E0E               	movwf	?_readEEPROM,c
 20429  001F00  EC1C  F02A         	call	_readEEPROM	;wreg free
 20430  001F04  D216               	goto	L41
 20431  001F06                     l10694:
 20432                           
 20433                           ; BSR set to: 0
 20434                           ;main.c: 1700: rv = readEEPROM(0x84);
 20435  001F06  6A0F               	clrf	?_readEEPROM+1,c
 20436  001F08  0E84               	movlw	132
 20437  001F0A  6E0E               	movwf	?_readEEPROM,c
 20438  001F0C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20439  001F10  D210               	goto	L41
 20440  001F12                     l10696:
 20441                           
 20442                           ; BSR set to: 0
 20443                           ;main.c: 1705: rv = readEEPROM(0x85);
 20444  001F12  6A0F               	clrf	?_readEEPROM+1,c
 20445  001F14  0E85               	movlw	133
 20446  001F16  6E0E               	movwf	?_readEEPROM,c
 20447  001F18  EC1C  F02A         	call	_readEEPROM	;wreg free
 20448  001F1C  D20A               	goto	L41
 20449  001F1E                     l10698:
 20450                           
 20451                           ; BSR set to: 0
 20452                           ;main.c: 1710: rv = readEEPROM(0x86);
 20453  001F1E  6A0F               	clrf	?_readEEPROM+1,c
 20454  001F20  0E86               	movlw	134
 20455  001F22  6E0E               	movwf	?_readEEPROM,c
 20456  001F24  EC1C  F02A         	call	_readEEPROM	;wreg free
 20457  001F28  D204               	goto	L41
 20458  001F2A                     l10700:
 20459                           
 20460                           ; BSR set to: 0
 20461                           ;main.c: 1715: rv = readEEPROM(0x87);
 20462  001F2A  6A0F               	clrf	?_readEEPROM+1,c
 20463  001F2C  0E87               	movlw	135
 20464  001F2E  6E0E               	movwf	?_readEEPROM,c
 20465  001F30  EC1C  F02A         	call	_readEEPROM	;wreg free
 20466  001F34  D1FE               	goto	L41
 20467  001F36                     l10702:
 20468                           
 20469                           ; BSR set to: 0
 20470                           ;main.c: 1720: rv = readEEPROM(0x88);
 20471  001F36  6A0F               	clrf	?_readEEPROM+1,c
 20472  001F38  0E88               	movlw	136
 20473  001F3A  6E0E               	movwf	?_readEEPROM,c
 20474  001F3C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20475  001F40  D1F8               	goto	L41
 20476  001F42                     l10704:
 20477                           
 20478                           ; BSR set to: 0
 20479                           ;main.c: 1725: rv = readEEPROM(0x89);
 20480  001F42  6A0F               	clrf	?_readEEPROM+1,c
 20481  001F44  0E89               	movlw	137
 20482  001F46  6E0E               	movwf	?_readEEPROM,c
 20483  001F48  EC1C  F02A         	call	_readEEPROM	;wreg free
 20484  001F4C  D1F2               	goto	L41
 20485  001F4E                     l10706:
 20486                           
 20487                           ; BSR set to: 0
 20488                           ;main.c: 1730: rv = readEEPROM(0x8A);
 20489  001F4E  6A0F               	clrf	?_readEEPROM+1,c
 20490  001F50  0E8A               	movlw	138
 20491  001F52  6E0E               	movwf	?_readEEPROM,c
 20492  001F54  EC1C  F02A         	call	_readEEPROM	;wreg free
 20493  001F58  D1EC               	goto	L41
 20494  001F5A                     l10708:
 20495                           
 20496                           ; BSR set to: 0
 20497                           ;main.c: 1739: rv = readEEPROM(0x8B);
 20498  001F5A  6A0F               	clrf	?_readEEPROM+1,c
 20499  001F5C  0E8B               	movlw	139
 20500  001F5E  6E0E               	movwf	?_readEEPROM,c
 20501  001F60  EC1C  F02A         	call	_readEEPROM	;wreg free
 20502  001F64  D1E6               	goto	L41
 20503  001F66                     l10710:
 20504                           
 20505                           ; BSR set to: 0
 20506                           ;main.c: 1744: rv = readEEPROM(0x8C);
 20507  001F66  6A0F               	clrf	?_readEEPROM+1,c
 20508  001F68  0E8C               	movlw	140
 20509  001F6A  6E0E               	movwf	?_readEEPROM,c
 20510  001F6C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20511  001F70  D1E0               	goto	L41
 20512  001F72                     l10712:
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;main.c: 1749: rv = readEEPROM(0x8D);
 20516  001F72  6A0F               	clrf	?_readEEPROM+1,c
 20517  001F74  0E8D               	movlw	141
 20518  001F76  6E0E               	movwf	?_readEEPROM,c
 20519  001F78  EC1C  F02A         	call	_readEEPROM	;wreg free
 20520  001F7C  D1DA               	goto	L41
 20521  001F7E                     l10714:
 20522                           
 20523                           ; BSR set to: 0
 20524                           ;main.c: 1754: rv = readEEPROM(0x8E);
 20525  001F7E  6A0F               	clrf	?_readEEPROM+1,c
 20526  001F80  0E8E               	movlw	142
 20527  001F82  6E0E               	movwf	?_readEEPROM,c
 20528  001F84  EC1C  F02A         	call	_readEEPROM	;wreg free
 20529  001F88  D1D4               	goto	L41
 20530  001F8A                     l10716:
 20531                           
 20532                           ; BSR set to: 0
 20533                           ;main.c: 1759: rv = readEEPROM(0x8F);
 20534  001F8A  6A0F               	clrf	?_readEEPROM+1,c
 20535  001F8C  0E8F               	movlw	143
 20536  001F8E  6E0E               	movwf	?_readEEPROM,c
 20537  001F90  EC1C  F02A         	call	_readEEPROM	;wreg free
 20538  001F94  D1CE               	goto	L41
 20539  001F96                     l10718:
 20540                           
 20541                           ; BSR set to: 0
 20542                           ;main.c: 1764: rv = readEEPROM(0x90);
 20543  001F96  6A0F               	clrf	?_readEEPROM+1,c
 20544  001F98  0E90               	movlw	144
 20545  001F9A  6E0E               	movwf	?_readEEPROM,c
 20546  001F9C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20547  001FA0  D1C8               	goto	L41
 20548  001FA2                     l10720:
 20549                           
 20550                           ; BSR set to: 0
 20551                           ;main.c: 1769: rv = readEEPROM(0x91);
 20552  001FA2  6A0F               	clrf	?_readEEPROM+1,c
 20553  001FA4  0E91               	movlw	145
 20554  001FA6  6E0E               	movwf	?_readEEPROM,c
 20555  001FA8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20556  001FAC  D1C2               	goto	L41
 20557  001FAE                     l10722:
 20558                           
 20559                           ; BSR set to: 0
 20560                           ;main.c: 1774: rv = readEEPROM(0x92);
 20561  001FAE  6A0F               	clrf	?_readEEPROM+1,c
 20562  001FB0  0E92               	movlw	146
 20563  001FB2  6E0E               	movwf	?_readEEPROM,c
 20564  001FB4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20565  001FB8  D1BC               	goto	L41
 20566  001FBA                     l10724:
 20567                           
 20568                           ; BSR set to: 0
 20569                           ;main.c: 1779: rv = readEEPROM(0x93);
 20570  001FBA  6A0F               	clrf	?_readEEPROM+1,c
 20571  001FBC  0E93               	movlw	147
 20572  001FBE  6E0E               	movwf	?_readEEPROM,c
 20573  001FC0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20574  001FC4  D1B6               	goto	L41
 20575  001FC6                     l10726:
 20576                           
 20577                           ; BSR set to: 0
 20578                           ;main.c: 1784: rv = readEEPROM(0x94);
 20579  001FC6  6A0F               	clrf	?_readEEPROM+1,c
 20580  001FC8  0E94               	movlw	148
 20581  001FCA  6E0E               	movwf	?_readEEPROM,c
 20582  001FCC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20583  001FD0  D1B0               	goto	L41
 20584  001FD2                     l10728:
 20585                           
 20586                           ; BSR set to: 0
 20587                           ;main.c: 1789: rv = readEEPROM(0x95);
 20588  001FD2  6A0F               	clrf	?_readEEPROM+1,c
 20589  001FD4  0E95               	movlw	149
 20590  001FD6  6E0E               	movwf	?_readEEPROM,c
 20591  001FD8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20592  001FDC  D1AA               	goto	L41
 20593  001FDE                     l10730:
 20594                           
 20595                           ; BSR set to: 0
 20596                           ;main.c: 1794: rv = readEEPROM(0x96);
 20597  001FDE  6A0F               	clrf	?_readEEPROM+1,c
 20598  001FE0  0E96               	movlw	150
 20599  001FE2  6E0E               	movwf	?_readEEPROM,c
 20600  001FE4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20601  001FE8  D1A4               	goto	L41
 20602  001FEA                     l10732:
 20603                           
 20604                           ; BSR set to: 0
 20605                           ;main.c: 1804: rv = readEEPROM(0x97);
 20606  001FEA  6A0F               	clrf	?_readEEPROM+1,c
 20607  001FEC  0E97               	movlw	151
 20608  001FEE  6E0E               	movwf	?_readEEPROM,c
 20609  001FF0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20610  001FF4  D19E               	goto	L41
 20611  001FF6                     l10734:
 20612                           
 20613                           ; BSR set to: 0
 20614                           ;main.c: 1809: rv = readEEPROM(0x98);
 20615  001FF6  6A0F               	clrf	?_readEEPROM+1,c
 20616  001FF8  0E98               	movlw	152
 20617  001FFA  6E0E               	movwf	?_readEEPROM,c
 20618  001FFC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20619  002000  D198               	goto	L41
 20620  002002                     l10736:
 20621                           
 20622                           ; BSR set to: 0
 20623                           ;main.c: 1814: rv = readEEPROM(0x99);
 20624  002002  6A0F               	clrf	?_readEEPROM+1,c
 20625  002004  0E99               	movlw	153
 20626  002006  6E0E               	movwf	?_readEEPROM,c
 20627  002008  EC1C  F02A         	call	_readEEPROM	;wreg free
 20628  00200C  D192               	goto	L41
 20629  00200E                     l10738:
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;main.c: 1819: rv = readEEPROM(0x9A);
 20633  00200E  6A0F               	clrf	?_readEEPROM+1,c
 20634  002010  0E9A               	movlw	154
 20635  002012  6E0E               	movwf	?_readEEPROM,c
 20636  002014  EC1C  F02A         	call	_readEEPROM	;wreg free
 20637  002018  D18C               	goto	L41
 20638  00201A                     l10740:
 20639                           
 20640                           ; BSR set to: 0
 20641                           ;main.c: 1824: rv = readEEPROM(0x9B);
 20642  00201A  6A0F               	clrf	?_readEEPROM+1,c
 20643  00201C  0E9B               	movlw	155
 20644  00201E  6E0E               	movwf	?_readEEPROM,c
 20645  002020  EC1C  F02A         	call	_readEEPROM	;wreg free
 20646  002024  D186               	goto	L41
 20647  002026                     l10742:
 20648                           
 20649                           ; BSR set to: 0
 20650                           ;main.c: 1829: rv = readEEPROM(0x9C);
 20651  002026  6A0F               	clrf	?_readEEPROM+1,c
 20652  002028  0E9C               	movlw	156
 20653  00202A  6E0E               	movwf	?_readEEPROM,c
 20654  00202C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20655  002030  D180               	goto	L41
 20656  002032                     l410:
 20657                           
 20658                           ; BSR set to: 0
 20659                           ;main.c: 1834: rv = 0;
 20660  002032  6A14               	clrf	vscp_readAppReg@rv,c
 20661                           
 20662                           ;main.c: 1835: break;
 20663  002034  D17F               	goto	l10774
 20664  002036                     l10744:
 20665                           
 20666                           ; BSR set to: 0
 20667                           ;main.c: 1843: rv = readEEPROM(0xF2);
 20668  002036  6A0F               	clrf	?_readEEPROM+1,c
 20669  002038  0EF2               	movlw	242
 20670  00203A  6E0E               	movwf	?_readEEPROM,c
 20671  00203C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20672  002040  D178               	goto	L41
 20673  002042                     l10746:
 20674                           
 20675                           ; BSR set to: 0
 20676                           ;main.c: 1847: rv = readEEPROM(0xF3);
 20677  002042  6A0F               	clrf	?_readEEPROM+1,c
 20678  002044  0EF3               	movlw	243
 20679  002046  6E0E               	movwf	?_readEEPROM,c
 20680  002048  EC1C  F02A         	call	_readEEPROM	;wreg free
 20681  00204C  D172               	goto	L41
 20682  00204E                     l10750:
 20683                           
 20684                           ; BSR set to: 0
 20685  00204E  5013               	movf	vscp_readAppReg@reg,w,c
 20686                           
 20687                           ; Switch size 1, requested type "space"
 20688                           ; Number of cases is 108, Range of values is 0 to 119
 20689                           ; switch strategies available:
 20690                           ; Name         Instructions Cycles
 20691                           ; simple_byte          325   163 (average)
 20692                           ;	Chosen strategy is simple_byte
 20693  002050  E101 D5E5          	bz	l10548
 20694  002054  0A01               	xorlw	1	; case 1
 20695  002056  E101 D5E8          	bz	l10550
 20696  00205A  0A03               	xorlw	3	; case 2
 20697  00205C  E101 D5EB          	bz	l10552
 20698  002060  0A01               	xorlw	1	; case 3
 20699  002062  E101 D5EE          	bz	l10554
 20700  002066  0A07               	xorlw	7	; case 4
 20701  002068  E101 D5F1          	bz	l10556
 20702  00206C  0A01               	xorlw	1	; case 5
 20703  00206E  E101 D5F4          	bz	l10558
 20704  002072  0A03               	xorlw	3	; case 6
 20705  002074  E101 D5F7          	bz	l10560
 20706  002078  0A01               	xorlw	1	; case 7
 20707  00207A  E101 D5FA          	bz	l10562
 20708  00207E  0A0F               	xorlw	15	; case 8
 20709  002080  E101 D5FD          	bz	l10564
 20710  002084  0A01               	xorlw	1	; case 9
 20711  002086  E101 D5FD          	bz	l315
 20712  00208A  0A03               	xorlw	3	; case 10
 20713  00208C  E101 D5FD          	bz	l10566
 20714  002090  0A01               	xorlw	1	; case 11
 20715  002092  E101 D5FD          	bz	l317
 20716  002096  0A07               	xorlw	7	; case 12
 20717  002098  E101 D5FD          	bz	l10568
 20718  00209C  0A01               	xorlw	1	; case 13
 20719  00209E  E101 D5FD          	bz	l319
 20720  0020A2  0A03               	xorlw	3	; case 14
 20721  0020A4  E101 D5FD          	bz	l10570
 20722  0020A8  0A01               	xorlw	1	; case 15
 20723  0020AA  E101 D5FD          	bz	l321
 20724  0020AE  0A1F               	xorlw	31	; case 16
 20725  0020B0  E101 D5FD          	bz	l10572
 20726  0020B4  0A01               	xorlw	1	; case 17
 20727  0020B6  E101 D5FD          	bz	l323
 20728  0020BA  0A03               	xorlw	3	; case 18
 20729  0020BC  E101 D5F7          	bz	l10572
 20730  0020C0  0A01               	xorlw	1	; case 19
 20731  0020C2  E101 D5F7          	bz	l323
 20732  0020C6  0A07               	xorlw	7	; case 20
 20733  0020C8  E101 D5F7          	bz	l10576
 20734  0020CC  0A01               	xorlw	1	; case 21
 20735  0020CE  E101 D5FA          	bz	l10578
 20736  0020D2  0A03               	xorlw	3	; case 22
 20737  0020D4  E101 D5FD          	bz	l10580
 20738  0020D8  0A01               	xorlw	1	; case 23
 20739  0020DA  E101 D600          	bz	l10582
 20740  0020DE  0A0F               	xorlw	15	; case 24
 20741  0020E0  E101 D603          	bz	l10584
 20742  0020E4  0A01               	xorlw	1	; case 25
 20743  0020E6  E101 D606          	bz	l10586
 20744  0020EA  0A3F               	xorlw	63	; case 38
 20745  0020EC  E101 D609          	bz	l10588
 20746  0020F0  0A01               	xorlw	1	; case 39
 20747  0020F2  E101 D60C          	bz	l10590
 20748  0020F6  0A0F               	xorlw	15	; case 40
 20749  0020F8  E101 D60F          	bz	l10592
 20750  0020FC  0A01               	xorlw	1	; case 41
 20751  0020FE  E101 D612          	bz	l10594
 20752  002102  0A03               	xorlw	3	; case 42
 20753  002104  E101 D615          	bz	l10596
 20754  002108  0A01               	xorlw	1	; case 43
 20755  00210A  E101 D618          	bz	l10598
 20756  00210E  0A07               	xorlw	7	; case 44
 20757  002110  E101 D61B          	bz	l10600
 20758  002114  0A01               	xorlw	1	; case 45
 20759  002116  E101 D61E          	bz	l10602
 20760  00211A  0A03               	xorlw	3	; case 46
 20761  00211C  E101 D621          	bz	l10604
 20762  002120  0A01               	xorlw	1	; case 47
 20763  002122  E101 D624          	bz	l10606
 20764  002126  0A1F               	xorlw	31	; case 48
 20765  002128  E101 D627          	bz	l10608
 20766  00212C  0A01               	xorlw	1	; case 49
 20767  00212E  E101 D62A          	bz	l10610
 20768  002132  0A03               	xorlw	3	; case 50
 20769  002134  E101 D62D          	bz	l10612
 20770  002138  0A01               	xorlw	1	; case 51
 20771  00213A  E101 D630          	bz	l10614
 20772  00213E  0A07               	xorlw	7	; case 52
 20773  002140  E101 D633          	bz	l10616
 20774  002144  0A01               	xorlw	1	; case 53
 20775  002146  E101 D636          	bz	l10618
 20776  00214A  0A03               	xorlw	3	; case 54
 20777  00214C  E101 D639          	bz	l10620
 20778  002150  0A01               	xorlw	1	; case 55
 20779  002152  E101 D63C          	bz	l10622
 20780  002156  0A0F               	xorlw	15	; case 56
 20781  002158  E101 D63F          	bz	l10624
 20782  00215C  0A01               	xorlw	1	; case 57
 20783  00215E  E101 D642          	bz	l10626
 20784  002162  0A03               	xorlw	3	; case 58
 20785  002164  E101 D645          	bz	l10628
 20786  002168  0A01               	xorlw	1	; case 59
 20787  00216A  E101 D648          	bz	l10630
 20788  00216E  0A07               	xorlw	7	; case 60
 20789  002170  E101 D64B          	bz	l10632
 20790  002174  0A01               	xorlw	1	; case 61
 20791  002176  E101 D64E          	bz	l10634
 20792  00217A  0A03               	xorlw	3	; case 62
 20793  00217C  E101 D651          	bz	l10636
 20794  002180  0A01               	xorlw	1	; case 63
 20795  002182  E101 D654          	bz	l10638
 20796  002186  0A7F               	xorlw	127	; case 64
 20797  002188  E101 D657          	bz	l10640
 20798  00218C  0A01               	xorlw	1	; case 65
 20799  00218E  E101 D65A          	bz	l10642
 20800  002192  0A03               	xorlw	3	; case 66
 20801  002194  E101 D65D          	bz	l10644
 20802  002198  0A01               	xorlw	1	; case 67
 20803  00219A  E101 D660          	bz	l10646
 20804  00219E  0A07               	xorlw	7	; case 68
 20805  0021A0  E101 D663          	bz	l10648
 20806  0021A4  0A01               	xorlw	1	; case 69
 20807  0021A6  E101 D666          	bz	l10650
 20808  0021AA  0A03               	xorlw	3	; case 70
 20809  0021AC  E101 D669          	bz	l10652
 20810  0021B0  0A01               	xorlw	1	; case 71
 20811  0021B2  E101 D66C          	bz	l10654
 20812  0021B6  0A0F               	xorlw	15	; case 72
 20813  0021B8  E101 D66F          	bz	l10656
 20814  0021BC  0A01               	xorlw	1	; case 73
 20815  0021BE  E101 D672          	bz	l10658
 20816  0021C2  0A03               	xorlw	3	; case 74
 20817  0021C4  E101 D675          	bz	l10660
 20818  0021C8  0A01               	xorlw	1	; case 75
 20819  0021CA  E101 D678          	bz	l10662
 20820  0021CE  0A07               	xorlw	7	; case 76
 20821  0021D0  E101 D66F          	bz	l10660
 20822  0021D4  0A01               	xorlw	1	; case 77
 20823  0021D6  E101 D672          	bz	l10662
 20824  0021DA  0A03               	xorlw	3	; case 78
 20825  0021DC  E101 D669          	bz	l10660
 20826  0021E0  0A01               	xorlw	1	; case 79
 20827  0021E2  E101 D66C          	bz	l10662
 20828  0021E6  0A1F               	xorlw	31	; case 80
 20829  0021E8  E101 D663          	bz	l10660
 20830  0021EC  0A01               	xorlw	1	; case 81
 20831  0021EE  E101 D666          	bz	l10662
 20832  0021F2  0A03               	xorlw	3	; case 82
 20833  0021F4  E101 D65D          	bz	l10660
 20834  0021F8  0A01               	xorlw	1	; case 83
 20835  0021FA  E101 D660          	bz	l10662
 20836  0021FE  0A07               	xorlw	7	; case 84
 20837  002200  E101 D657          	bz	l10660
 20838  002204  0A01               	xorlw	1	; case 85
 20839  002206  E101 D65A          	bz	l10662
 20840  00220A  0A03               	xorlw	3	; case 86
 20841  00220C  E101 D65D          	bz	l10684
 20842  002210  0A01               	xorlw	1	; case 87
 20843  002212  E101 D660          	bz	l10686
 20844  002216  0A0F               	xorlw	15	; case 88
 20845  002218  E101 D663          	bz	l10688
 20846  00221C  0A01               	xorlw	1	; case 89
 20847  00221E  E101 D666          	bz	l10690
 20848  002222  0A03               	xorlw	3	; case 90
 20849  002224  E101 D669          	bz	l10692
 20850  002228  0A01               	xorlw	1	; case 91
 20851  00222A  E101 D66C          	bz	l10694
 20852  00222E  0A07               	xorlw	7	; case 92
 20853  002230  E101 D66F          	bz	l10696
 20854  002234  0A01               	xorlw	1	; case 93
 20855  002236  E101 D672          	bz	l10698
 20856  00223A  0A03               	xorlw	3	; case 94
 20857  00223C  E101 D675          	bz	l10700
 20858  002240  0A01               	xorlw	1	; case 95
 20859  002242  E101 D678          	bz	l10702
 20860  002246  0A3F               	xorlw	63	; case 96
 20861  002248  E101 D67B          	bz	l10704
 20862  00224C  0A01               	xorlw	1	; case 97
 20863  00224E  E101 D67E          	bz	l10706
 20864  002252  0A03               	xorlw	3	; case 98
 20865  002254  E101 D681          	bz	l10708
 20866  002258  0A01               	xorlw	1	; case 99
 20867  00225A  E101 D684          	bz	l10710
 20868  00225E  0A07               	xorlw	7	; case 100
 20869  002260  E101 D687          	bz	l10712
 20870  002264  0A01               	xorlw	1	; case 101
 20871  002266  E101 D68A          	bz	l10714
 20872  00226A  0A03               	xorlw	3	; case 102
 20873  00226C  E101 D68D          	bz	l10716
 20874  002270  0A01               	xorlw	1	; case 103
 20875  002272  E101 D690          	bz	l10718
 20876  002276  0A0F               	xorlw	15	; case 104
 20877  002278  E101 D693          	bz	l10720
 20878  00227C  0A01               	xorlw	1	; case 105
 20879  00227E  E101 D696          	bz	l10722
 20880  002282  0A03               	xorlw	3	; case 106
 20881  002284  E101 D699          	bz	l10724
 20882  002288  0A01               	xorlw	1	; case 107
 20883  00228A  E101 D69C          	bz	l10726
 20884  00228E  0A07               	xorlw	7	; case 108
 20885  002290  E101 D69F          	bz	l10728
 20886  002294  0A01               	xorlw	1	; case 109
 20887  002296  E101 D6A2          	bz	l10730
 20888  00229A  0A03               	xorlw	3	; case 110
 20889  00229C  E101 D6A5          	bz	l10732
 20890  0022A0  0A01               	xorlw	1	; case 111
 20891  0022A2  E101 D6A8          	bz	l10734
 20892  0022A6  0A1F               	xorlw	31	; case 112
 20893  0022A8  E101 D6AB          	bz	l10736
 20894  0022AC  0A01               	xorlw	1	; case 113
 20895  0022AE  E101 D6AE          	bz	l10738
 20896  0022B2  0A03               	xorlw	3	; case 114
 20897  0022B4  E101 D6B1          	bz	l10740
 20898  0022B8  0A01               	xorlw	1	; case 115
 20899  0022BA  E101 D6B4          	bz	l10742
 20900  0022BE  0A07               	xorlw	7	; case 116
 20901  0022C0  E101 D6B7          	bz	l410
 20902  0022C4  0A01               	xorlw	1	; case 117
 20903  0022C6  E101 D6B4          	bz	l410
 20904  0022CA  0A03               	xorlw	3	; case 118
 20905  0022CC  E101 D6B3          	bz	l10744
 20906  0022D0  0A01               	xorlw	1	; case 119
 20907  0022D2  E101 D6B6          	bz	l10746
 20908  0022D6  D6AD               	goto	l410
 20909  0022D8                     l10752:
 20910                           
 20911                           ; BSR set to: 0
 20912                           ;main.c: 1855: else if (1 == vscp_page_select) {
 20913  0022D8  0446               	decf	_vscp_page_select,w,c
 20914  0022DA  1047               	iorwf	_vscp_page_select+1,w,c
 20915  0022DC  E12B               	bnz	l10774
 20916                           
 20917                           ; BSR set to: 0
 20918                           ;main.c: 1857: if (reg < 72) {
 20919  0022DE  0E48               	movlw	72
 20920  0022E0  6013               	cpfslt	vscp_readAppReg@reg,c
 20921  0022E2  D009               	goto	l10758
 20922                           
 20923                           ; BSR set to: 0
 20924                           ;main.c: 1858: rv = readEEPROM(0xAA + reg ) ;
 20925  0022E4  0EAA               	movlw	170
 20926  0022E6  2413               	addwf	vscp_readAppReg@reg,w,c
 20927  0022E8  6E0E               	movwf	?_readEEPROM,c
 20928  0022EA  6A0F               	clrf	?_readEEPROM+1,c
 20929  0022EC  0E00               	movlw	0
 20930  0022EE  220F               	addwfc	?_readEEPROM+1,f,c
 20931  0022F0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20932  0022F4  D01E               	goto	L41
 20933  0022F6                     l10758:
 20934                           
 20935                           ; BSR set to: 0
 20936                           ;main.c: 1861: else if (reg < 84) {
 20937  0022F6  0E54               	movlw	84
 20938  0022F8  6013               	cpfslt	vscp_readAppReg@reg,c
 20939  0022FA  D010               	goto	l10770
 20940                           
 20941                           ; BSR set to: 0
 20942                           ;main.c: 1863: uint8_t pos = reg - 72;
 20943  0022FC  5013               	movf	vscp_readAppReg@reg,w,c
 20944  0022FE  0FB8               	addlw	184
 20945  002300  6E12               	movwf	vscp_readAppReg@pos,c
 20946                           
 20947                           ; BSR set to: 0
 20948                           ;main.c: 1864: if ( pos % 2 ) {
 20949  002302  A012               	btfss	vscp_readAppReg@pos,0,c
 20950  002304  D002               	goto	l10766
 20951                           
 20952                           ; BSR set to: 0
 20953                           ;main.c: 1865: pos--;
 20954  002306  0612               	decf	vscp_readAppReg@pos,f,c
 20955                           
 20956                           ;main.c: 1866: }
 20957  002308  D001               	goto	l10768
 20958  00230A                     l10766:
 20959                           
 20960                           ; BSR set to: 0
 20961                           ;main.c: 1867: else {
 20962                           ;main.c: 1868: pos++;
 20963  00230A  2A12               	incf	vscp_readAppReg@pos,f,c
 20964  00230C                     l10768:
 20965                           
 20966                           ; BSR set to: 0
 20967                           ;main.c: 1869: }
 20968                           ;main.c: 1870: rv = adc[ pos ];
 20969  00230C  0E9C               	movlw	low _adc
 20970  00230E  2412               	addwf	vscp_readAppReg@pos,w,c
 20971  002310  6ED9               	movwf	fsr2l,c
 20972  002312  6ADA               	clrf	fsr2h,c
 20973  002314  0E01               	movlw	high _adc
 20974  002316  22DA               	addwfc	fsr2h,f,c
 20975  002318  50DF               	movf	indf2,w,c
 20976  00231A  D00B               	goto	L41
 20977  00231C                     l10770:
 20978                           
 20979                           ; BSR set to: 0
 20980                           ;main.c: 1873: else if (reg < 98) {
 20981  00231C  0E62               	movlw	98
 20982  00231E  6013               	cpfslt	vscp_readAppReg@reg,c
 20983  002320  D009               	goto	l10774
 20984                           
 20985                           ; BSR set to: 0
 20986                           ;main.c: 1874: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20987  002322  0E4A               	movlw	74
 20988  002324  2413               	addwf	vscp_readAppReg@reg,w,c
 20989  002326  6E0E               	movwf	?_readEEPROM,c
 20990  002328  6A0F               	clrf	?_readEEPROM+1,c
 20991  00232A  0E00               	movlw	0
 20992  00232C  220F               	addwfc	?_readEEPROM+1,f,c
 20993  00232E  EC1C  F02A         	call	_readEEPROM	;wreg free
 20994  002332                     L41:
 20995  002332  6E14               	movwf	vscp_readAppReg@rv,c
 20996  002334                     l10774:
 20997                           
 20998                           ;main.c: 1875: }
 20999                           ;main.c: 1876: }
 21000                           ;main.c: 1878: return rv;
 21001  002334  5014               	movf	vscp_readAppReg@rv,w,c
 21002  002336  0012               	return	
 21003  002338                     __end_of_vscp_readAppReg:
 21004                           	opt stack 0
 21005                           tblptru	equ	0xFF8
 21006                           tblptrh	equ	0xFF7
 21007                           tblptrl	equ	0xFF6
 21008                           tablat	equ	0xFF5
 21009                           prodh	equ	0xFF4
 21010                           prodl	equ	0xFF3
 21011                           intcon	equ	0xFF2
 21012                           postinc0	equ	0xFEE
 21013                           wreg	equ	0xFE8
 21014                           indf1	equ	0xFE7
 21015                           postdec1	equ	0xFE5
 21016                           fsr1h	equ	0xFE2
 21017                           fsr1l	equ	0xFE1
 21018                           indf2	equ	0xFDF
 21019                           postinc2	equ	0xFDE
 21020                           postdec2	equ	0xFDD
 21021                           plusw2	equ	0xFDB
 21022                           fsr2h	equ	0xFDA
 21023                           fsr2l	equ	0xFD9
 21024                           status	equ	0xFD8
 21025                           
 21026 ;; *************** function _interrupt_at_low_vector *****************
 21027 ;; Defined at:
 21028 ;;		line 134 in file "../main.c"
 21029 ;; Parameters:    Size  Location     Type
 21030 ;;		None
 21031 ;; Auto vars:     Size  Location     Type
 21032 ;;		None
 21033 ;; Return value:  Size  Location     Type
 21034 ;;		None               void
 21035 ;; Registers used:
 21036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21037 ;; Tracked objects:
 21038 ;;		On entry : 0/0
 21039 ;;		On exit  : 0/0
 21040 ;;		Unchanged: 0/0
 21041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21042 ;;      Params:         0       0       0       0       0       0       0
 21043 ;;      Locals:         0       0       0       0       0       0       0
 21044 ;;      Temps:          9       0       0       0       0       0       0
 21045 ;;      Totals:         9       0       0       0       0       0       0
 21046 ;;Total ram usage:        9 bytes
 21047 ;; Hardware stack levels used:    1
 21048 ;; Hardware stack levels required when called:    1
 21049 ;; This function calls:
 21050 ;;		i1_ConvertADC
 21051 ;;		i1_WriteTimer0
 21052 ;; This function is called by:
 21053 ;;		Interrupt level 1
 21054 ;; This function uses a non-reentrant model
 21055 ;;
 21056                           
 21057                           	psect	intcodelo
 21058  000018                     __pintcodelo:
 21059                           	opt stack 0
 21060  000018                     _interrupt_at_low_vector:
 21061                           	opt stack 22
 21062                           
 21063                           ;incstack = 0
 21064  000018  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 21065  00001C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 21066  000020  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 21067  000024  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 21068  000028  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 21069  00002C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 21070  000030  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 21071  000034                     
 21072                           ;main.c: 136: if (INTCONbits.TMR0IF) {
 21073  000034  A4F2               	btfss	intcon,2,c	;volatile
 21074  000036  D001               	goto	i1u714_21
 21075  000038  D001               	goto	i1u714_20
 21076  00003A                     i1u714_21:
 21077  00003A  D045               	goto	i1l9188
 21078  00003C                     i1u714_20:
 21079  00003C                     
 21080                           ;main.c: 139: WriteTimer0(0xfb1d);
 21081  00003C  0EFB               	movlw	251
 21082  00003E  6E02               	movwf	?i1_WriteTimer0+1,c
 21083  000040  0E1D               	movlw	29
 21084  000042  6E01               	movwf	?i1_WriteTimer0,c
 21085  000044  EC37  F02A         	call	i1_WriteTimer0	;wreg free
 21086  000048                     
 21087                           ;main.c: 141: vscp_timer++;
 21088  000048  0101               	movlb	1	; () banked
 21089  00004A  4B1C               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 21090  00004C  2B1D               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 21091  00004E                     
 21092                           ; BSR set to: 1
 21093                           ;main.c: 142: vscp_configtimer++;
 21094  00004E  4B1A               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 21095  000050  2B1B               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 21096  000052                     
 21097                           ; BSR set to: 1
 21098                           ;main.c: 143: measurement_clock++;
 21099  000052  0E01               	movlw	1
 21100  000054  2712               	addwf	_measurement_clock& (0+255),f,b
 21101  000056  0E00               	movlw	0
 21102  000058  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b
 21103  00005A  0E00               	movlw	0
 21104  00005C  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b
 21105  00005E  0E00               	movlw	0
 21106  000060  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b
 21107  000062                     
 21108                           ; BSR set to: 1
 21109                           ;main.c: 144: timeout_clock++;
 21110  000062  0E01               	movlw	1
 21111  000064  2716               	addwf	_timeout_clock& (0+255),f,b
 21112  000066  0E00               	movlw	0
 21113  000068  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b
 21114  00006A  0E00               	movlw	0
 21115  00006C  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b
 21116  00006E  0E00               	movlw	0
 21117  000070  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b
 21118  000072                     
 21119                           ; BSR set to: 1
 21120                           ;main.c: 147: if (!(PORTC & 0x01)) {
 21121  000072  B082               	btfsc	3970,0,c	;volatile
 21122  000074  D001               	goto	i1u715_21
 21123  000076  D001               	goto	i1u715_20
 21124  000078                     i1u715_21:
 21125  000078  D003               	goto	i1l138
 21126  00007A                     i1u715_20:
 21127  00007A                     
 21128                           ; BSR set to: 1
 21129                           ;main.c: 149: vscp_initbtncnt++;
 21130  00007A  0100               	movlb	0	; () banked
 21131  00007C  2BB8               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21132                           
 21133                           ;main.c: 150: }
 21134  00007E  D002               	goto	i1l9162
 21135  000080                     i1l138:
 21136                           
 21137                           ; BSR set to: 1
 21138                           ;main.c: 151: else {
 21139                           ;main.c: 152: vscp_initbtncnt = 0;
 21140  000080  0100               	movlb	0	; () banked
 21141  000082  6BB8               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21142  000084                     i1l9162:
 21143                           
 21144                           ; BSR set to: 0
 21145                           ;main.c: 153: }
 21146                           ;main.c: 156: vscp_statuscnt++;
 21147  000084  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21148  000086                     
 21149                           ; BSR set to: 0
 21150                           ;main.c: 157: if ( ( 0x02 ==
 21151                           ;main.c: 158: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21152  000086  504D               	movf	_vscp_initledfunc,w,c
 21153  000088  0A02               	xorlw	2
 21154  00008A  A4D8               	btfss	status,2,c
 21155  00008C  D001               	goto	i1u716_21
 21156  00008E  D001               	goto	i1u716_20
 21157  000090                     i1u716_21:
 21158  000090  D00E               	goto	i1l9176
 21159  000092                     i1u716_20:
 21160  000092                     
 21161                           ; BSR set to: 0
 21162  000092  0E64               	movlw	100
 21163  000094  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21164  000096  D001               	goto	i1u717_21
 21165  000098  D001               	goto	i1u717_20
 21166  00009A                     i1u717_21:
 21167  00009A  D009               	goto	i1l9176
 21168  00009C                     i1u717_20:
 21169  00009C                     
 21170                           ; BSR set to: 0
 21171                           ;main.c: 159: if ( PORTC & 0x02 ) {
 21172  00009C  A282               	btfss	3970,1,c	;volatile
 21173  00009E  D001               	goto	i1u718_21
 21174  0000A0  D001               	goto	i1u718_20
 21175  0000A2                     i1u718_21:
 21176  0000A2  D002               	goto	i1l9172
 21177  0000A4                     i1u718_20:
 21178  0000A4                     i1l9170:
 21179                           
 21180                           ; BSR set to: 0
 21181                           ;main.c: 160: PORTC &= ~0x02;
 21182  0000A4  9282               	bcf	3970,1,c	;volatile
 21183                           
 21184                           ;main.c: 161: }
 21185  0000A6  D001               	goto	i1l9174
 21186  0000A8                     i1l9172:
 21187                           
 21188                           ; BSR set to: 0
 21189                           ;main.c: 162: else {
 21190                           ;main.c: 163: PORTC |= 0x02;
 21191  0000A8  8282               	bsf	3970,1,c	;volatile
 21192  0000AA                     i1l9174:
 21193                           
 21194                           ; BSR set to: 0
 21195                           ;main.c: 164: }
 21196                           ;main.c: 165: vscp_statuscnt = 0;
 21197  0000AA  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21198                           
 21199                           ;main.c: 166: }
 21200  0000AC  D00B               	goto	i1l9186
 21201  0000AE                     i1l9176:
 21202                           
 21203                           ; BSR set to: 0
 21204                           ;main.c: 167: else if (0x01 == vscp_initledfunc) {
 21205  0000AE  044D               	decf	_vscp_initledfunc,w,c
 21206  0000B0  A4D8               	btfss	status,2,c
 21207  0000B2  D001               	goto	i1u719_21
 21208  0000B4  D001               	goto	i1u719_20
 21209  0000B6                     i1u719_21:
 21210  0000B6  D001               	goto	i1l144
 21211  0000B8                     i1u719_20:
 21212  0000B8  D7F7               	goto	i1l9172
 21213  0000BA                     i1l144:
 21214                           
 21215                           ; BSR set to: 0
 21216                           ;main.c: 171: else if (0x00 == vscp_initledfunc) {
 21217  0000BA  664D               	tstfsz	_vscp_initledfunc,c
 21218  0000BC  D001               	goto	i1u720_21
 21219  0000BE  D001               	goto	i1u720_20
 21220  0000C0                     i1u720_21:
 21221  0000C0  D001               	goto	i1l9186
 21222  0000C2                     i1u720_20:
 21223  0000C2  D7F0               	goto	i1l9170
 21224  0000C4                     i1l9186:
 21225                           
 21226                           ; BSR set to: 0
 21227                           ;main.c: 174: }
 21228                           ;main.c: 176: INTCONbits.TMR0IF = 0;
 21229  0000C4  94F2               	bcf	intcon,2,c	;volatile
 21230  0000C6                     i1l9188:
 21231                           
 21232                           ;main.c: 178: }
 21233                           ;main.c: 181: if ( PIR1bits.ADIF ) {
 21234  0000C6  AC9E               	btfss	3998,6,c	;volatile
 21235  0000C8  D001               	goto	i1u721_21
 21236  0000CA  D001               	goto	i1u721_20
 21237  0000CC                     i1u721_21:
 21238  0000CC  D0E5               	goto	i1l164
 21239  0000CE                     i1u721_20:
 21240  0000CE  D0C4               	goto	i1l9250
 21241  0000D0                     i1l9192:
 21242                           
 21243                           ;main.c: 187: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21244  0000D0  5049               	movf	_adc_series_counter,w,c
 21245  0000D2  0D0C               	mullw	12
 21246  0000D4  0E9C               	movlw	low _adc
 21247  0000D6  24F3               	addwf	prodl,w,c
 21248  0000D8  6ED9               	movwf	fsr2l,c
 21249  0000DA  0E01               	movlw	high _adc
 21250  0000DC  20F4               	addwfc	prodh,w,c
 21251  0000DE  6EDA               	movwf	fsr2h,c
 21252  0000E0  CFC4 FFDF          	movff	4036,indf2	;volatile
 21253                           
 21254                           ;main.c: 188: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21255  0000E4  5049               	movf	_adc_series_counter,w,c
 21256  0000E6  0D0C               	mullw	12
 21257  0000E8  0E9D               	movlw	low (_adc+1)
 21258  0000EA  24F3               	addwf	prodl,w,c
 21259  0000EC  6ED9               	movwf	fsr2l,c
 21260  0000EE  0E01               	movlw	high (_adc+1)
 21261  0000F0  20F4               	addwfc	prodh,w,c
 21262  0000F2  6EDA               	movwf	fsr2h,c
 21263  0000F4  CFC3 FFDF          	movff	4035,indf2	;volatile
 21264  0000F8                     
 21265                           ;main.c: 190: ADCON0 = (2<<2) + 1;
 21266  0000F8  0E09               	movlw	9
 21267  0000FA  6EC2               	movwf	4034,c	;volatile
 21268  0000FC                     
 21269                           ;main.c: 194: if ((80 - 1) == adc_series_counter) {
 21270  0000FC  5049               	movf	_adc_series_counter,w,c
 21271  0000FE  0A4F               	xorlw	79
 21272  000100  A4D8               	btfss	status,2,c
 21273  000102  D001               	goto	i1u722_21
 21274  000104  D001               	goto	i1u722_20
 21275  000106                     i1u722_21:
 21276  000106  D0C5               	goto	i1l9252
 21277  000108                     i1u722_20:
 21278  000108                     
 21279                           ;main.c: 195: adc_conversion_flags |= 1;
 21280  000108  0100               	movlb	0	; () banked
 21281  00010A  81B3               	bsf	_adc_conversion_flags& (0+255),0,b
 21282  00010C  D0C2               	goto	i1l9252
 21283  00010E                     i1l9200:
 21284                           
 21285                           ;main.c: 201: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21286  00010E  5049               	movf	_adc_series_counter,w,c
 21287  000110  0D0C               	mullw	12
 21288  000112  0E9E               	movlw	low (_adc+2)
 21289  000114  24F3               	addwf	prodl,w,c
 21290  000116  6ED9               	movwf	fsr2l,c
 21291  000118  0E01               	movlw	high (_adc+2)
 21292  00011A  20F4               	addwfc	prodh,w,c
 21293  00011C  6EDA               	movwf	fsr2h,c
 21294  00011E  CFC4 FFDF          	movff	4036,indf2	;volatile
 21295                           
 21296                           ;main.c: 202: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21297  000122  5049               	movf	_adc_series_counter,w,c
 21298  000124  0D0C               	mullw	12
 21299  000126  0E9F               	movlw	low (_adc+3)
 21300  000128  24F3               	addwf	prodl,w,c
 21301  00012A  6ED9               	movwf	fsr2l,c
 21302  00012C  0E01               	movlw	high (_adc+3)
 21303  00012E  20F4               	addwfc	prodh,w,c
 21304  000130  6EDA               	movwf	fsr2h,c
 21305  000132  CFC3 FFDF          	movff	4035,indf2	;volatile
 21306  000136                     
 21307                           ;main.c: 205: ADCON0 = (1<<2) + 1;
 21308  000136  0E05               	movlw	5
 21309  000138  6EC2               	movwf	4034,c	;volatile
 21310  00013A                     
 21311                           ;main.c: 209: if ((80 - 1) == adc_series_counter) {
 21312  00013A  5049               	movf	_adc_series_counter,w,c
 21313  00013C  0A4F               	xorlw	79
 21314  00013E  A4D8               	btfss	status,2,c
 21315  000140  D001               	goto	i1u723_21
 21316  000142  D001               	goto	i1u723_20
 21317  000144                     i1u723_21:
 21318  000144  D0A6               	goto	i1l9252
 21319  000146                     i1u723_20:
 21320  000146                     
 21321                           ;main.c: 210: adc_conversion_flags |= 1 << 1;
 21322  000146  0100               	movlb	0	; () banked
 21323  000148  83B3               	bsf	_adc_conversion_flags& (0+255),1,b
 21324  00014A  D0A3               	goto	i1l9252
 21325  00014C                     i1l9208:
 21326                           
 21327                           ;main.c: 216: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21328  00014C  5049               	movf	_adc_series_counter,w,c
 21329  00014E  0D0C               	mullw	12
 21330  000150  0EA0               	movlw	low (_adc+4)
 21331  000152  24F3               	addwf	prodl,w,c
 21332  000154  6ED9               	movwf	fsr2l,c
 21333  000156  0E01               	movlw	high (_adc+4)
 21334  000158  20F4               	addwfc	prodh,w,c
 21335  00015A  6EDA               	movwf	fsr2h,c
 21336  00015C  CFC4 FFDF          	movff	4036,indf2	;volatile
 21337                           
 21338                           ;main.c: 217: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21339  000160  5049               	movf	_adc_series_counter,w,c
 21340  000162  0D0C               	mullw	12
 21341  000164  0EA1               	movlw	low (_adc+5)
 21342  000166  24F3               	addwf	prodl,w,c
 21343  000168  6ED9               	movwf	fsr2l,c
 21344  00016A  0E01               	movlw	high (_adc+5)
 21345  00016C  20F4               	addwfc	prodh,w,c
 21346  00016E  6EDA               	movwf	fsr2h,c
 21347  000170  CFC3 FFDF          	movff	4035,indf2	;volatile
 21348  000174                     
 21349                           ;main.c: 220: ADCON0 = (0<<2) + 1;
 21350  000174  0E01               	movlw	1
 21351  000176  6EC2               	movwf	4034,c	;volatile
 21352  000178                     
 21353                           ;main.c: 224: if ((80 - 1) == adc_series_counter) {
 21354  000178  5049               	movf	_adc_series_counter,w,c
 21355  00017A  0A4F               	xorlw	79
 21356  00017C  A4D8               	btfss	status,2,c
 21357  00017E  D001               	goto	i1u724_21
 21358  000180  D001               	goto	i1u724_20
 21359  000182                     i1u724_21:
 21360  000182  D087               	goto	i1l9252
 21361  000184                     i1u724_20:
 21362  000184                     
 21363                           ;main.c: 225: adc_conversion_flags |= 1 << 2;
 21364  000184  0100               	movlb	0	; () banked
 21365  000186  85B3               	bsf	_adc_conversion_flags& (0+255),2,b
 21366  000188  D084               	goto	i1l9252
 21367  00018A                     i1l9216:
 21368                           
 21369                           ;main.c: 231: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21370  00018A  5049               	movf	_adc_series_counter,w,c
 21371  00018C  0D0C               	mullw	12
 21372  00018E  0EA2               	movlw	low (_adc+6)
 21373  000190  24F3               	addwf	prodl,w,c
 21374  000192  6ED9               	movwf	fsr2l,c
 21375  000194  0E01               	movlw	high (_adc+6)
 21376  000196  20F4               	addwfc	prodh,w,c
 21377  000198  6EDA               	movwf	fsr2h,c
 21378  00019A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21379                           
 21380                           ;main.c: 232: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21381  00019E  5049               	movf	_adc_series_counter,w,c
 21382  0001A0  0D0C               	mullw	12
 21383  0001A2  0EA3               	movlw	low (_adc+7)
 21384  0001A4  24F3               	addwf	prodl,w,c
 21385  0001A6  6ED9               	movwf	fsr2l,c
 21386  0001A8  0E01               	movlw	high (_adc+7)
 21387  0001AA  20F4               	addwfc	prodh,w,c
 21388  0001AC  6EDA               	movwf	fsr2h,c
 21389  0001AE  CFC3 FFDF          	movff	4035,indf2	;volatile
 21390  0001B2                     
 21391                           ;main.c: 234: ADCON0 = (9<<2) + 1;
 21392  0001B2  0E25               	movlw	37
 21393  0001B4  6EC2               	movwf	4034,c	;volatile
 21394  0001B6                     
 21395                           ;main.c: 238: if ((80 - 1) == adc_series_counter) {
 21396  0001B6  5049               	movf	_adc_series_counter,w,c
 21397  0001B8  0A4F               	xorlw	79
 21398  0001BA  A4D8               	btfss	status,2,c
 21399  0001BC  D001               	goto	i1u725_21
 21400  0001BE  D001               	goto	i1u725_20
 21401  0001C0                     i1u725_21:
 21402  0001C0  D068               	goto	i1l9252
 21403  0001C2                     i1u725_20:
 21404  0001C2                     
 21405                           ;main.c: 239: adc_conversion_flags |= 1 << 3;
 21406  0001C2  0100               	movlb	0	; () banked
 21407  0001C4  87B3               	bsf	_adc_conversion_flags& (0+255),3,b
 21408  0001C6  D065               	goto	i1l9252
 21409  0001C8                     i1l9224:
 21410                           
 21411                           ;main.c: 245: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21412  0001C8  5049               	movf	_adc_series_counter,w,c
 21413  0001CA  0D0C               	mullw	12
 21414  0001CC  0EA4               	movlw	low (_adc+8)
 21415  0001CE  24F3               	addwf	prodl,w,c
 21416  0001D0  6ED9               	movwf	fsr2l,c
 21417  0001D2  0E01               	movlw	high (_adc+8)
 21418  0001D4  20F4               	addwfc	prodh,w,c
 21419  0001D6  6EDA               	movwf	fsr2h,c
 21420  0001D8  CFC4 FFDF          	movff	4036,indf2	;volatile
 21421                           
 21422                           ;main.c: 246: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21423  0001DC  5049               	movf	_adc_series_counter,w,c
 21424  0001DE  0D0C               	mullw	12
 21425  0001E0  0EA5               	movlw	low (_adc+9)
 21426  0001E2  24F3               	addwf	prodl,w,c
 21427  0001E4  6ED9               	movwf	fsr2l,c
 21428  0001E6  0E01               	movlw	high (_adc+9)
 21429  0001E8  20F4               	addwfc	prodh,w,c
 21430  0001EA  6EDA               	movwf	fsr2h,c
 21431  0001EC  CFC3 FFDF          	movff	4035,indf2	;volatile
 21432  0001F0                     
 21433                           ;main.c: 248: ADCON0 = (8<<2) + 1;
 21434  0001F0  0E21               	movlw	33
 21435  0001F2  6EC2               	movwf	4034,c	;volatile
 21436  0001F4                     
 21437                           ;main.c: 252: if ((80 - 1) == adc_series_counter) {
 21438  0001F4  5049               	movf	_adc_series_counter,w,c
 21439  0001F6  0A4F               	xorlw	79
 21440  0001F8  A4D8               	btfss	status,2,c
 21441  0001FA  D001               	goto	i1u726_21
 21442  0001FC  D001               	goto	i1u726_20
 21443  0001FE                     i1u726_21:
 21444  0001FE  D049               	goto	i1l9252
 21445  000200                     i1u726_20:
 21446  000200                     
 21447                           ;main.c: 253: adc_conversion_flags |= 1 << 4;
 21448  000200  0100               	movlb	0	; () banked
 21449  000202  89B3               	bsf	_adc_conversion_flags& (0+255),4,b
 21450  000204  D046               	goto	i1l9252
 21451  000206                     i1l9232:
 21452                           
 21453                           ;main.c: 259: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21454  000206  5049               	movf	_adc_series_counter,w,c
 21455  000208  0D0C               	mullw	12
 21456  00020A  0EA6               	movlw	low (_adc+10)
 21457  00020C  24F3               	addwf	prodl,w,c
 21458  00020E  6ED9               	movwf	fsr2l,c
 21459  000210  0E01               	movlw	high (_adc+10)
 21460  000212  20F4               	addwfc	prodh,w,c
 21461  000214  6EDA               	movwf	fsr2h,c
 21462  000216  CFC4 FFDF          	movff	4036,indf2	;volatile
 21463                           
 21464                           ;main.c: 260: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21465  00021A  5049               	movf	_adc_series_counter,w,c
 21466  00021C  0D0C               	mullw	12
 21467  00021E  0EA7               	movlw	low (_adc+11)
 21468  000220  24F3               	addwf	prodl,w,c
 21469  000222  6ED9               	movwf	fsr2l,c
 21470  000224  0E01               	movlw	high (_adc+11)
 21471  000226  20F4               	addwfc	prodh,w,c
 21472  000228  6EDA               	movwf	fsr2h,c
 21473  00022A  CFC3 FFDF          	movff	4035,indf2	;volatile
 21474  00022E                     
 21475                           ;main.c: 262: ADCON0 = (10<<2) + 1;
 21476  00022E  0E29               	movlw	41
 21477  000230  6EC2               	movwf	4034,c	;volatile
 21478  000232                     
 21479                           ;main.c: 266: if ((80 - 1) == adc_series_counter) {
 21480  000232  5049               	movf	_adc_series_counter,w,c
 21481  000234  0A4F               	xorlw	79
 21482  000236  A4D8               	btfss	status,2,c
 21483  000238  D001               	goto	i1u727_21
 21484  00023A  D001               	goto	i1u727_20
 21485  00023C                     i1u727_21:
 21486  00023C  D002               	goto	i1l161
 21487  00023E                     i1u727_20:
 21488  00023E                     
 21489                           ;main.c: 267: adc_conversion_flags |= 1 << 5;
 21490  00023E  0100               	movlb	0	; () banked
 21491  000240  8BB3               	bsf	_adc_conversion_flags& (0+255),5,b
 21492  000242                     i1l161:
 21493                           
 21494                           ;main.c: 268: }
 21495                           ;main.c: 271: adc_series_counter++;
 21496  000242  2A49               	incf	_adc_series_counter,f,c
 21497  000244                     
 21498                           ;main.c: 272: if (adc_series_counter >= 80) {
 21499  000244  0E4F               	movlw	79
 21500  000246  6449               	cpfsgt	_adc_series_counter,c
 21501  000248  D001               	goto	i1u728_21
 21502  00024A  D001               	goto	i1u728_20
 21503  00024C                     i1u728_21:
 21504  00024C  D022               	goto	i1l9252
 21505  00024E                     i1u728_20:
 21506  00024E                     i1l9242:
 21507                           
 21508                           ;main.c: 273: adc_series_counter = 0;
 21509  00024E  6A49               	clrf	_adc_series_counter,c
 21510  000250  D020               	goto	i1l9252
 21511  000252                     i1l9244:
 21512                           
 21513                           ;main.c: 279: ADCON0 = (10<<2) + 1;
 21514  000252  0E29               	movlw	41
 21515  000254  6EC2               	movwf	4034,c	;volatile
 21516  000256  D7FB               	goto	i1l9242
 21517  000258                     i1l9250:
 21518  000258  50C2               	movf	4034,w,c	;volatile
 21519  00025A  0B3C               	andlw	60
 21520  00025C  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21521  00025E  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21522                           
 21523                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21524                           ; Switch size 1, requested type "space"
 21525                           ; Number of cases is 1, Range of values is 0 to 0
 21526                           ; switch strategies available:
 21527                           ; Name         Instructions Cycles
 21528                           ; simple_byte            4     3 (average)
 21529                           ;	Chosen strategy is simple_byte
 21530  000260  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21531  000262  0A00               	xorlw	0	; case 0
 21532  000264  B4D8               	btfsc	status,2,c
 21533  000266  D001               	goto	i1l12242
 21534  000268  D7F4               	goto	i1l9244
 21535  00026A                     i1l12242:
 21536                           
 21537                           ; Switch size 1, requested type "space"
 21538                           ; Number of cases is 6, Range of values is 0 to 40
 21539                           ; switch strategies available:
 21540                           ; Name         Instructions Cycles
 21541                           ; simple_byte           19    10 (average)
 21542                           ;	Chosen strategy is simple_byte
 21543  00026A  5005               	movf	??_interrupt_at_low_vector,w,c
 21544  00026C  0A00               	xorlw	0	; case 0
 21545  00026E  B4D8               	btfsc	status,2,c
 21546  000270  D78C               	goto	i1l9216
 21547  000272  0A04               	xorlw	4	; case 4
 21548  000274  B4D8               	btfsc	status,2,c
 21549  000276  D76A               	goto	i1l9208
 21550  000278  0A0C               	xorlw	12	; case 8
 21551  00027A  B4D8               	btfsc	status,2,c
 21552  00027C  D748               	goto	i1l9200
 21553  00027E  0A28               	xorlw	40	; case 32
 21554  000280  B4D8               	btfsc	status,2,c
 21555  000282  D7C1               	goto	i1l9232
 21556  000284  0A04               	xorlw	4	; case 36
 21557  000286  B4D8               	btfsc	status,2,c
 21558  000288  D79F               	goto	i1l9224
 21559  00028A  0A0C               	xorlw	12	; case 40
 21560  00028C  B4D8               	btfsc	status,2,c
 21561  00028E  D720               	goto	i1l9192
 21562  000290  D7E0               	goto	i1l9244
 21563  000292                     i1l9252:
 21564                           
 21565                           ;main.c: 285: ConvertADC();
 21566  000292  EC66  F02A         	call	i1_ConvertADC	;wreg free
 21567  000296                     
 21568                           ;main.c: 287: PIR1bits.ADIF = 0;
 21569  000296  9C9E               	bcf	3998,6,c	;volatile
 21570  000298                     i1l164:
 21571  000298  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21572  00029C  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21573  0002A0  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21574  0002A4  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21575  0002A8  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21576  0002AC  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21577  0002B0  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21578  0002B4  0010               	retfie	
 21579  0002B6                     __end_of_interrupt_at_low_vector:
 21580                           	opt stack 0
 21581                           tblptru	equ	0xFF8
 21582                           tblptrh	equ	0xFF7
 21583                           tblptrl	equ	0xFF6
 21584                           tablat	equ	0xFF5
 21585                           prodh	equ	0xFF4
 21586                           prodl	equ	0xFF3
 21587                           intcon	equ	0xFF2
 21588                           postinc0	equ	0xFEE
 21589                           wreg	equ	0xFE8
 21590                           indf1	equ	0xFE7
 21591                           postdec1	equ	0xFE5
 21592                           fsr1h	equ	0xFE2
 21593                           fsr1l	equ	0xFE1
 21594                           bsr	equ	0xFE0
 21595                           indf2	equ	0xFDF
 21596                           postinc2	equ	0xFDE
 21597                           postdec2	equ	0xFDD
 21598                           plusw2	equ	0xFDB
 21599                           fsr2h	equ	0xFDA
 21600                           fsr2l	equ	0xFD9
 21601                           status	equ	0xFD8
 21602                           
 21603 ;; *************** function i1_WriteTimer0 *****************
 21604 ;; Defined at:
 21605 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21606 ;; Parameters:    Size  Location     Type
 21607 ;;  timer0          2    0[COMRAM] unsigned int 
 21608 ;; Auto vars:     Size  Location     Type
 21609 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21610 ;; Return value:  Size  Location     Type
 21611 ;;		None               void
 21612 ;; Registers used:
 21613 ;;		None
 21614 ;; Tracked objects:
 21615 ;;		On entry : 0/0
 21616 ;;		On exit  : 0/0
 21617 ;;		Unchanged: 0/0
 21618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21619 ;;      Params:         2       0       0       0       0       0       0
 21620 ;;      Locals:         2       0       0       0       0       0       0
 21621 ;;      Temps:          0       0       0       0       0       0       0
 21622 ;;      Totals:         4       0       0       0       0       0       0
 21623 ;;Total ram usage:        4 bytes
 21624 ;; Hardware stack levels used:    1
 21625 ;; This function calls:
 21626 ;;		Nothing
 21627 ;; This function is called by:
 21628 ;;		_interrupt_at_low_vector
 21629 ;; This function uses a non-reentrant model
 21630 ;;
 21631                           
 21632                           	psect	text100
 21633  00546E                     __ptext100:
 21634                           	opt stack 0
 21635  00546E                     i1_WriteTimer0:
 21636                           	opt stack 22
 21637                           
 21638                           ;incstack = 0
 21639                           ;incstack = 0
 21640  00546E  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21641  005472  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21642  005476  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21643  00547A  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21644  00547E  0012               	return	
 21645  005480                     __end_ofi1_WriteTimer0:
 21646                           	opt stack 0
 21647                           tblptru	equ	0xFF8
 21648                           tblptrh	equ	0xFF7
 21649                           tblptrl	equ	0xFF6
 21650                           tablat	equ	0xFF5
 21651                           prodh	equ	0xFF4
 21652                           prodl	equ	0xFF3
 21653                           intcon	equ	0xFF2
 21654                           postinc0	equ	0xFEE
 21655                           wreg	equ	0xFE8
 21656                           indf1	equ	0xFE7
 21657                           postdec1	equ	0xFE5
 21658                           fsr1h	equ	0xFE2
 21659                           fsr1l	equ	0xFE1
 21660                           bsr	equ	0xFE0
 21661                           indf2	equ	0xFDF
 21662                           postinc2	equ	0xFDE
 21663                           postdec2	equ	0xFDD
 21664                           plusw2	equ	0xFDB
 21665                           fsr2h	equ	0xFDA
 21666                           fsr2l	equ	0xFD9
 21667                           status	equ	0xFD8
 21668                           
 21669 ;; *************** function i1_ConvertADC *****************
 21670 ;; Defined at:
 21671 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21672 ;; Parameters:    Size  Location     Type
 21673 ;;		None
 21674 ;; Auto vars:     Size  Location     Type
 21675 ;;		None
 21676 ;; Return value:  Size  Location     Type
 21677 ;;		None               void
 21678 ;; Registers used:
 21679 ;;		None
 21680 ;; Tracked objects:
 21681 ;;		On entry : 0/0
 21682 ;;		On exit  : 0/0
 21683 ;;		Unchanged: 0/0
 21684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21685 ;;      Params:         0       0       0       0       0       0       0
 21686 ;;      Locals:         0       0       0       0       0       0       0
 21687 ;;      Temps:          0       0       0       0       0       0       0
 21688 ;;      Totals:         0       0       0       0       0       0       0
 21689 ;;Total ram usage:        0 bytes
 21690 ;; Hardware stack levels used:    1
 21691 ;; This function calls:
 21692 ;;		Nothing
 21693 ;; This function is called by:
 21694 ;;		_interrupt_at_low_vector
 21695 ;; This function uses a non-reentrant model
 21696 ;;
 21697                           
 21698                           	psect	text101
 21699  0054CC                     __ptext101:
 21700                           	opt stack 0
 21701  0054CC                     i1_ConvertADC:
 21702                           	opt stack 22
 21703                           
 21704                           ;incstack = 0
 21705                           ;incstack = 0
 21706  0054CC  82C2               	bsf	4034,1,c	;volatile
 21707  0054CE  0012               	return	
 21708  0054D0                     __end_ofi1_ConvertADC:
 21709                           	opt stack 0
 21710                           tblptru	equ	0xFF8
 21711                           tblptrh	equ	0xFF7
 21712                           tblptrl	equ	0xFF6
 21713                           tablat	equ	0xFF5
 21714                           prodh	equ	0xFF4
 21715                           prodl	equ	0xFF3
 21716                           intcon	equ	0xFF2
 21717                           postinc0	equ	0xFEE
 21718                           wreg	equ	0xFE8
 21719                           indf1	equ	0xFE7
 21720                           postdec1	equ	0xFE5
 21721                           fsr1h	equ	0xFE2
 21722                           fsr1l	equ	0xFE1
 21723                           bsr	equ	0xFE0
 21724                           indf2	equ	0xFDF
 21725                           postinc2	equ	0xFDE
 21726                           postdec2	equ	0xFDD
 21727                           plusw2	equ	0xFDB
 21728                           fsr2h	equ	0xFDA
 21729                           fsr2l	equ	0xFD9
 21730                           status	equ	0xFD8
 21731                           tblptru	equ	0xFF8
 21732                           tblptrh	equ	0xFF7
 21733                           tblptrl	equ	0xFF6
 21734                           tablat	equ	0xFF5
 21735                           prodh	equ	0xFF4
 21736                           prodl	equ	0xFF3
 21737                           intcon	equ	0xFF2
 21738                           postinc0	equ	0xFEE
 21739                           wreg	equ	0xFE8
 21740                           indf1	equ	0xFE7
 21741                           postdec1	equ	0xFE5
 21742                           fsr1h	equ	0xFE2
 21743                           fsr1l	equ	0xFE1
 21744                           bsr	equ	0xFE0
 21745                           indf2	equ	0xFDF
 21746                           postinc2	equ	0xFDE
 21747                           postdec2	equ	0xFDD
 21748                           plusw2	equ	0xFDB
 21749                           fsr2h	equ	0xFDA
 21750                           fsr2l	equ	0xFD9
 21751                           status	equ	0xFD8
 21752                           
 21753                           	psect	text102
 21754  000000                     __ptext102:
 21755                           	opt stack 0
 21756                           tblptru	equ	0xFF8
 21757                           tblptrh	equ	0xFF7
 21758                           tblptrl	equ	0xFF6
 21759                           tablat	equ	0xFF5
 21760                           prodh	equ	0xFF4
 21761                           prodl	equ	0xFF3
 21762                           intcon	equ	0xFF2
 21763                           postinc0	equ	0xFEE
 21764                           wreg	equ	0xFE8
 21765                           indf1	equ	0xFE7
 21766                           postdec1	equ	0xFE5
 21767                           fsr1h	equ	0xFE2
 21768                           fsr1l	equ	0xFE1
 21769                           bsr	equ	0xFE0
 21770                           indf2	equ	0xFDF
 21771                           postinc2	equ	0xFDE
 21772                           postdec2	equ	0xFDD
 21773                           plusw2	equ	0xFDB
 21774                           fsr2h	equ	0xFDA
 21775                           fsr2l	equ	0xFD9
 21776                           status	equ	0xFD8
 21777                           
 21778                           	psect	rparam
 21779  0000                     tblptru	equ	0xFF8
 21780                           tblptrh	equ	0xFF7
 21781                           tblptrl	equ	0xFF6
 21782                           tablat	equ	0xFF5
 21783                           prodh	equ	0xFF4
 21784                           prodl	equ	0xFF3
 21785                           intcon	equ	0xFF2
 21786                           postinc0	equ	0xFEE
 21787                           wreg	equ	0xFE8
 21788                           indf1	equ	0xFE7
 21789                           postdec1	equ	0xFE5
 21790                           fsr1h	equ	0xFE2
 21791                           fsr1l	equ	0xFE1
 21792                           bsr	equ	0xFE0
 21793                           indf2	equ	0xFDF
 21794                           postinc2	equ	0xFDE
 21795                           postdec2	equ	0xFDD
 21796                           plusw2	equ	0xFDB
 21797                           fsr2h	equ	0xFDA
 21798                           fsr2l	equ	0xFD9
 21799                           status	equ	0xFD8
 21800                           tblptru	equ	0xFF8
 21801                           tblptrh	equ	0xFF7
 21802                           tblptrl	equ	0xFF6
 21803                           tablat	equ	0xFF5
 21804                           prodh	equ	0xFF4
 21805                           prodl	equ	0xFF3
 21806                           intcon	equ	0xFF2
 21807                           postinc0	equ	0xFEE
 21808                           wreg	equ	0xFE8
 21809                           indf1	equ	0xFE7
 21810                           postdec1	equ	0xFE5
 21811                           fsr1h	equ	0xFE2
 21812                           fsr1l	equ	0xFE1
 21813                           bsr	equ	0xFE0
 21814                           indf2	equ	0xFDF
 21815                           postinc2	equ	0xFDE
 21816                           postdec2	equ	0xFDD
 21817                           plusw2	equ	0xFDB
 21818                           fsr2h	equ	0xFDA
 21819                           fsr2l	equ	0xFD9
 21820                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     83     119
    BANK1           256     54     156
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___fltol
    ___lwtofl->___flpack
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___altofl->___fltol
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _vscp_readRegister->_vscp_readAppReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_writeCoeffs2Ram
    _writeCoeffs2Ram->___wmul
    ___wmul->_readEEPROM
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___flmul
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   93267
                                             82 BANK0      1     1      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              68    68      0   34702
                                             68 BANK0     14    14      0
                                              0 BANK1     54    54      0
                        _writeEEPROM
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                     _vscp_sendEvent
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             23 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     855
                                              0 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             43 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             28 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             17 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             66 COMRAM     2     2      0
                                             33 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             57 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             33 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             65 COMRAM     1     1      0
                                             22 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             47 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             65 COMRAM     4     4      0
                                             22 BANK0      6     2      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             42 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             30 BANK0      6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             22 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             65 COMRAM     1     1      0
                                             22 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             43 COMRAM    22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                      4     4      0   10599
                                             39 BANK0      4     4      0
                         _readEEPROM
                     _vscp_sendEvent
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7768
                                             39 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7542
                                             37 BANK0      2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             28 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             28 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             43 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   26960
                                             31 BANK0     27    27      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    7784
                                             51 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    3152
                                             33 COMRAM    18    17      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1260
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      1     1      0     502
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     155
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4477
                                             32 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1890
                                             20 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             18 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     254
                                             17 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     186
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     251
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4726
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     344
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1070
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0     758
                                             32 COMRAM     1     1      0
                    _writeCoeffs2Ram
 ---------------------------------------------------------------------------------
 (5) _writeCoeffs2Ram                                      9     9      0     628
                                             23 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     232
                                             17 COMRAM     6     2      4
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     7     3      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              0 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             17 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _writeCoeffs2Ram
           _readEEPROM
           ___wmul
             _readEEPROM (ARG)
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _writeCoeffs2Ram
               _readEEPROM
               ___wmul
                 _readEEPROM (ARG)
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _writeCoeffs2Ram
             _readEEPROM
             ___wmul
               _readEEPROM (ARG)
     ___lbmod
   _handle_sync
     _readEEPROM
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
   _doWork
     _writeEEPROM
     _readEEPROM
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
       ___flpack (ARG)
     ___wmul
       _readEEPROM (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     36      9C       7       60.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     53      77       5       74.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     165       3        0.0%
DATA                 0      0     530      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Mar 23 20:20:35 2015

                          ___asfldiv@f1p 0060                            ___altofl@sign 008E  
                           ___fldiv@cntr 003F                  __end_of_vscp_readAppReg 2338  
                           ___fldiv@sign 0041                    __end_of_sendVSCPFrame 44FC  
                           ___asflmul@mp 0042                             ___asflsub@f2 0080  
                                     PL2 1AE8                                       PL4 2A2A  
                                     PL6 1AFA                                       PL8 1B0A  
                            __CFG_CPB$ON 000000             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 000E                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 0011                      ___wmul@multiplicand 0014  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 4094  
                          ___asflsub@f1p 007E                             ___flpack@arg 000E  
                                    PL10 1B18                                      PL20 1B64  
                                    PL12 1B26                                      PL30 1B90  
                                    PL22 1B74                                      PL14 1B40  
                                    PL40 1BC2                                      PL32 3D80  
                                    PL24 35C0                                      PL16 3D6C  
                                    PL50 3DA2                                      PL42 300E  
                                    PL34 2FF6                                      PL26 3C52  
                                    PL18 35A2                                      PL60 1BE2  
                                    PL52 3C86                                      PL44 4436  
                                    PL36 3D90                                      PL28 35CE  
                                    PL70 4A44                                      PL62 3A4E  
                                    PL54 3784                                      PL46 3C60  
                                    PL38 1BAA                              __CFG_LVP$ON 000000  
                                    PL80 3022                                      PL72 414C  
                                    PL64 50BA                                      PL56 3C9A  
                                    PL48 3C72                                      PL82 3DB6  
                                    PL74 3234                                      PL66 1358  
                                    PL58 1BD0                                      PL84 3798  
                                    PL76 1BF4                                      PL68 413C  
                                    PL86 438A                                      PL78 1C02  
                                    PL88 3030                             ___flpack@exp 0012  
                         _Celsius2Kelvin 5064                              __CFG_WDT$ON 000000  
                                    l201 17BE                                      l208 198E  
                                    l224 1AE6                                      l321 1CA8  
                                    l410 2032                                      l323 1CB4  
                                    l315 1C84                                      l317 1C90  
                                    l253 4586                                      l245 35A0  
                                    l319 1C9C                                      l183 3F3E  
                                    l168 3ED0                                      l177 3F14  
                                    l522 1032                                      l519 0FE4  
                                    l295 499C                                      l640 5124  
                                    l552 52EE                                      l635 4FE6  
                                    l629 4AC8                                      l831 3908  
                                    l823 3870                                      l825 388E  
                                    l594 53BE                                      l851 30E2  
                                    l843 3232                                      l836 3072  
                                    l853 30F6                                      l918 5236  
                                    l846 3140                       vscp_readStdReg@reg 0014  
                                    l855 310A                                      l847 30C0  
                                    l857 311A                                      l849 30CE  
                                    l890 3C50                                      l867 31A4  
                                    l859 312A                                      l868 31BE  
                                    l885 3D6A                                      l895 4B36  
         __size_of_vscp_handleProbeState 00C4                         setEventData@ival 0083  
                         getVSCPFrame@id 002E            __end_of_vscp_handleProbeState 421E  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                       setEventData@unit 007E                                      _adc 019C  
                                    _exp 3242                                      _log 3A60  
                                    fsr2 000FD9                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 0074  
                           ___flmul@sign 0075                            ___flpack@sign 0013  
                           ___fltol@exp1 007B                                     l1031 4E78  
                                   l1103 4D40                                     l1107 5344  
                                   l1211 2BFE                                     l1036 52AA  
                                   l1301 4C0C                                     l1054 4208  
                                   l1046 4218                                     l1055 41E8  
                                   l1047 41A2                                     l1090 50F8  
                                   l1315 5326                                     l1083 5286  
                                   l1147 52CC                                     l1235 2D82  
                                   l1316 5328                                     l1236 2D96  
                                   l1237 2DD2                                     l1094 5178  
                                   l1246 2E0E                                     l1270 2FF4  
                                   l1079 4F74                                     l1089 50EC  
                                   l1177 377E                                     l1540 431C  
                                   l1620 413A                                     l1605 4652  
                                   l1613 4C8A                                     l1278 51A2  
                                   l1614 4CA8                                     l1535 42E8  
                                   l1536 4388                                     l1561 3424  
                                   l1546 434A                                     l1564 32F0  
                                   l1573 392C                                     l1565 3414  
                                   l1574 3A4C                                     l1654 3DF4  
                                   l1655 3EBA                                     l1577 3954  
                                   l1657 3EAA                                     l1682 4950  
                                   l1666 4834                                     l1588 39E4  
                                   l1853 3B8C                                     l1686 46F6  
                __end_of_doOneSecondWork 35A2                vscp_getManufacturerId@idx 0012  
                                   ?_exp 0099                                     ?_log 0081  
                                   l8142 4A6C                                     l8154 5102  
                                   l8066 534C                                     l8430 4AE2  
                                   l8334 3154                                     l8158 5106  
                                   l9126 51C4                                     l9118 51AE  
                                   l8440 4B0C                                     l8432 4AEC  
                                   l8344 3174                                     l8434 4AF6  
                                   l8426 4AD0                                     l8370 31EC  
                                   l8362 31C0                                     l8282 30A0  
                                   l8266 3060                                     l8290 30AE  
                                   l8436 4B00                                     l8428 4AD8  
                                   l8444 4B18                                     l8276 308A  
                                   l8284 30AA                                     l8438 4B06  
                                   l8384 321C                                     l8458 3BEC  
                                   l8378 3206                                     l8396 53CC  
                                   l9620 417C                                     l9622 4184  
                                   l9606 415C                                     l9710 2A98  
                                   l9640 41BE                                     l9570 2990  
                                   l9556 5296                                     l9644 41C2  
                                   l9804 2BCA                                     l9724 2AA0  
                                   l9708 2A92                                     l9646 41C6  
                                   l9822 2C30                                     l9832 2C92  
                                   l9816 2C02                                     l9744 2AC6  
                                   l9914 2D76                                     l9826 2C48  
                                   l9818 2C20                                     l9690 2A5A  
                                   l9682 2A42                                     l9676 420C  
                                   l9836 2CA8                                     l9852 2CCE  
                                   l9684 2A48                                     l9950 2DC6  
                                   l9942 2DB6                                     l9934 2D98  
                                   l9870 2D24                                     l9854 2CD0  
                                   l9774 2B2E                                     l9758 2AD2  
                                   l9686 2A4E                                     l9960 2DD4  
                                   l9864 2CF4                                     l9856 2CDA  
                                   l9784 2B62                                     l9688 2A54  
                                   l9946 2DBE                                     l9882 2D36  
                                   l9794 2B96                                     l9964 2DEE  
                                   l9986 2E10                                     l9898 2D56  
            __size_of_vscp_getMatrixInfo 001A                           sendCANFrame@id 003C  
                                   u5450 4ABC                                     u5455 4AB2  
                                   u5625 3068                                     u5627 306A  
                                   u8244 34A0                                     u8245 349C  
                                   u9135 3CD2                                     u5945 3BB4  
                                   u9145 3CE2                                     u5955 3BC4  
                                   u9155 3D00                                     u5965 3BF0  
                                   u8294 3524                                     u8295 3520  
                         sendCANFrame@rv 0042                                     u9620 36FC  
                                   u8760 33D8                                     u9625 36FA  
                                   u9650 3746                                     u8780 3A74  
                                   u9655 3744                                     u8995 4486  
                       ??_ECANInitialize 000F                vscp_setManufacturerId@idx 0012  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 3EBC                                     _init 4FEE  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 0099                                     log@x 0081  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 066E                              _vscp_minute 00B9  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 02B6  
          __size_of_vscp_doOneSecondWork 004C                        vscp_getUserID@idx 0012  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 35EA  
                            _writeEEPROM 521A                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 4C10  
                        _sh_coefficients 011E                     __end_of_getVSCPFrame 4ACA  
                                  ??_exp 0046                                    ??_log 0043  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 5098  
                   __size_of_getCANFrame 002C                                    l10000 2E38  
                                  l10010 2E5A                                    l10022 2E80  
                                  l10120 49BC                                    l10112 4978  
                                  l11010 52DA                                    l10050 2EE2  
                                  l10042 2EB0                                    l10018 2E7C  
                                  l10122 49C8                                    l10060 2F02  
                                  l10116 49A8                                    l10108 4954  
                                  l10220 4D20                                    l10046 2EC6  
                                  l10038 2E90                                    l10134 3432  
                                  l10214 4D16                                    l10072 2F44  
                                  l10160 34EE                                    l10144 3476  
                                  l10224 4D28                                    l11122 3890  
                                  l11106 3834                                    l11202 4F6C  
                                  l10162 34F8                                    l10410 3294  
                                  l11116 3874                                    l10068 2F1C  
                                  l10172 3514                                    l10404 3260  
                                  l12020 3F9E                                    l10510 4EBE  
                                  l11142 38FA                                    l11070 4FB8  
                                  l11310 4064                                    l11302 404C  
                                  l10094 2F94                                    l10430 33E2  
                                  l10414 32BE                                    l12014 3F86  
                                  l10600 1D4A                                    l11128 38BE  
                                  l11136 38D8                                    l11320 4086  
                                  l12112 18CC                                    l12024 3FA6  
                                  _B0CON 000E20                                    l10610 1D86  
                                  l10602 1D56                                    l11146 38FE  
                                  l11074 4FE2                                    l11314 4070  
                                  l11306 4058                                    l11322 4090  
                                  l11410 3764                                    l11402 374E  
                                  l10186 3572                                    l10442 3A7E  
                                  l12114 18D2                                    l12106 184C  
                                  l12042 13C2                                    l12034 13A0  
                                  l10700 1F2A                                    l10620 1DC2  
                                  l10612 1D92                                    l10604 1D62  
                                  l10532 4702                                    l11164 3CF8  
                                  l11148 3900                                    l11260 3FCC  
                                  l11420 3780                                    l10188 357C  
                                  l11500 4E38                                    l10710 1F66  
                                  l10702 1F36                                    l10630 1DFE  
                                  l10622 1DCE                                    l10614 1D9E  
                                  l10606 1D6E                                    l10550 1C2A  
                                  l11430 42F6                                    l10526 46FC  
                                  l11094 380A                                    l11246 533E  
                                  l11334 52C2                                    l10198 3598  
                                  l12150 1A16                                    l12134 1960  
                                  l10720 1FA2                                    l10712 1F72  
                                  l10704 1F42                                    l10640 1E3A  
                                  l10632 1E0A                                    l10624 1DDA  
                                  l10616 1DAA                                    l10608 1D7A  
                                  l10560 1C66                                    l10552 1C36  
                                  l11440 433E                                    l11432 430E  
                                  l11088 37FA                                    l11280 4004  
                                  l11272 3FEC                                    l11264 3FD6  
                                  l11256 3FC2                                    l10800 0780  
                                  l11352 3634                                    l11520 3966  
                                  l11600 45EA                                    l12152 1A1C  
                                  l12136 196A                                    _B1CON 000E30  
                                  l10730 1FDE                                    l10722 1FAE  
                                  l10714 1F7E                                    l10706 1F4E  
                                  l10650 1E76                                    l10642 1E46  
                                  l10634 1E16                                    l10626 1DE6  
                                  l10618 1DB6                                    l10570 1CA2  
                                  l10562 1C72                                    l10554 1C42  
                                  l11290 402A                                    l10810 080C  
                                  l10802 079C                                    l11370 3688  
                                  l11346 3614                                    l11514 393E  
                                  l10490 456A                                    l10740 201A  
                                  l10732 1FEA                                    l10724 1FBA  
                                  l10716 1F8A                                    l10708 1F5A  
                                  l10660 1EB2                                    l10652 1E82  
                                  l10644 1E52                                    l10636 1E22  
                                  l10628 1DF2                                    l10580 1CD2  
                                  l10572 1CAE                                    l10564 1C7E  
                                  l10556 1C4E                                    l10548 1C1E  
                                  l11428 42F2                                    l11284 4014  
                                  l11276 3FF8                                    l11268 3FE0  
                                  l10900 0CDA                                    l10820 0898  
                                  l10812 0828                                    l10804 07B8  
                                  l12172 1AAE                                    l12092 1824  
                                  l10742 2026                                    l10734 1FF6  
                                  l10726 1FC6                                    l10718 1F96  
                                  l10662 1EBE                                    l10654 1E8E  
                                  l10646 1E5E                                    l10638 1E2E  
                                  l10590 1D0E                                    l10582 1CDE  
                                  l10566 1C8A                                    l10558 1C5A  
                                  l10750 204E                                    l11438 4332  
                                  l11294 4036                                    l10910 0D5C  
                                  l10902 0CF4                                    l10830 0924  
                                  l10822 08B4                                    l10814 0844  
                                  l10806 07D4                                    l11382 36BC  
                                  l11366 366E                                    l11358 3650  
                                  l11542 399C                                    l10486 4532  
                                  l11470 4268                                    l12174 1AB8  
                                  l12094 1834                                    l10744 2036  
                                  l10736 2002                                    l10728 1FD2  
                                  l10656 1E9A                                    l10648 1E6A  
                                  l10592 1D1A                                    l10584 1CEA  
                                  l10576 1CBA                                    l10568 1C96  
                                  l10752 22D8                                    l11640 40DE  
                                  l11624 40A2                                    l10920 0DDE  
                                  l10912 0D76                                    l10904 0D0E  
                                  l10840 09B0                                    l10832 0940  
                                  l10824 08D0                                    l10816 0860  
                                  l10808 07F0                                    l11392 3706  
                                  l11368 3672                                    l11560 39FA  
                                  l11544 39A8                                    l11536 3980  
                                  l11608 4618                                    l11472 4274  
                                  l11464 4250                                    l12184 1ADC  
                                  _B2CON 000E40                                    l10770 231C  
                                  l10746 2042                                    l10738 200E  
                                  l10690 1EEE                                    l10658 1EA6  
                                  l10594 1D26                                    l10586 1CF6  
                                  l10578 1CC6                                    l11298 4042  
                                  l10930 0E60                                    l10922 0DF8  
                                  l10914 0D90                                    l10906 0D28  
                                  l10850 0A3C                                    l10842 09CC  
                                  l10834 095C                                    l10826 08EC  
                                  l10818 087C                                    l11554 39D2  
                                  l11546 39B0                                    l11810 4800  
                                  l11802 47E8                                    l11706 43B2  
                                  l11722 4694                                    l11490 42C8  
                                  l11482 42A6                                    l11474 4278  
                                  l11458 4238                                    l10692 1EFA  
                                  l10684 1ECA                                    l10596 1D32  
                                  l10588 1D02                                    l11652 40F8  
                                  l11644 40E6                                    l11628 40B8  
                                  l10940 0EE2                                    l10932 0E7A  
                                  l10924 0E12                                    l10916 0DAA  
                                  l10908 0D42                                    l10860 0AC8  
                                  l10852 0A58                                    l10844 09E8  
                                  l10836 0978                                    l10828 0908  
                                  l11572 3A20                                    l11564 3A02  
                                  l11556 39DE                                    l11548 39B6  
                                  l11812 480C                                    l11708 441C  
                                  l11732 46B2                                    l10766 230A  
                                  l10758 22F6                                    l10694 1F06  
                                  l10686 1ED6                                    l10598 1D3E  
                                  l10774 2334                                    l10950 0F64  
                                  l10942 0EFC                                    l10934 0E94  
                                  l10926 0E2C                                    l10918 0DC4  
                                  l10870 0B54                                    l10862 0AE4  
                                  l10854 0A74                                    l10846 0A04  
                                  l10838 0994                                    l10790 06F4  
                                  l10782 0684                                    l11814 4810  
                                  l11806 47F8                                    l11486 42B4  
                                  l10768 230C                                    l10696 1F12  
                                  l10688 1EE2                                    l11656 4100  
                                  l11680 503A                                    l10960 0FFE  
                                  l10952 0F7E                                    l10944 0F16  
                                  l10936 0EAE                                    l10928 0E46  
                                  l10880 0BD6                                    l10872 0B6E  
                                  l10864 0B00                                    l10856 0A90  
                                  l10848 0A20                                    l10792 0710  
                                  l10784 06A0                                    l11584 45B8  
                                  l11752 4CA6                                    l11736 46BE  
                                  l11760 5252                                    _B3CON 000E50  
                                  l10698 1F1E                                    l10962 1018  
                                  l10954 0F98                                    l10946 0F30  
                                  l10938 0EC8                                    l10890 0C58  
                                  l10882 0BF0                                    l10874 0B88  
                                  l10866 0B1C                                    l10858 0AAC  
                                  l10794 072C                                    l10786 06BC  
                                  l11746 4C74                                    l11818 4824  
                                  l10964 1036                                    l10956 0FB2  
                                  l10948 0F4A                                    l10892 0C72  
                                  l10884 0C0A                                    l10876 0BA2  
                                  l10868 0B38                                    l10796 0748  
                                  l10788 06D8                                    l10972 106E  
                                  l11588 45CC                                    l11772 48F2  
                                  l10990 1322                                    l10982 130E  
                                  l10966 1050                                    l10958 0FCC  
                                  l10894 0C8C                                    l10886 0C24  
                                  l10878 0BBC                                    l10798 0764  
                                  l10974 12E2                                    l11694 3DFE  
                                  l10992 1324                                    l10968 106A  
                                  l10896 0CA6                                    l10888 0C3E  
                                  _B4CON 000E60                                    l10994 1334  
                                  l10898 0CC0                                    l11786 47A4  
                                  l11698 3E1A            __size_of_vscp_getMajorVersion 0002  
                                  l11788 47AE                                    l11972 3F04  
                                  l11964 3EF2                                    l10998 1354  
                                  l11990 3F38                                    l11974 3F08  
                                  l11984 3F24                                    l11976 3F0E  
                                  l11968 3EFA                                    _B5CON 000E70  
                                  l11994 3F42                                    l11996 3F5A  
             __end_of_vscp_goActiveState 530E                            ___fltol@sign1 007A  
                        __end_of___aldiv 42DA            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 3A4E  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                          __end_of___fldiv 4654  
                          i1_WriteTimer0 546E                          __end_of___flneg 5264  
                                  _EEADR 000FA9                          __end_of___lbmod 51CC  
                        __end_of___flmul 413C                          __end_of___flsub 4FB2  
                        __end_of___fltol 4836                  _vscp_handleDropNickname 50CA  
                                  _BSEL0 000DF8                                    u10040 45C2  
                                  u10070 40AE                                    u10170 468A  
                                  u10260 47CC                                    _T0CON 000FD5  
                                  u10265 47C2                                    u10524 1854  
                                  u10444 13AA                                    u10525 1850  
                                  u10445 13A6                                    u10624 199E  
                                  u10625 199A                                    u10554 1BBA  
                                  u10555 1BB6                                    u10574 191A  
                                  u10494 182C                                    u10575 1916  
                                  u10495 1828                                    u10674 1A68  
                                  u10675 1A64                                    i1l144 00BA  
                                  i1l161 0242                                    i1l138 0080  
                                  i1l164 0298                          sendCANFrame@dlc 0040  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                      ??_writeCoeffs2Ram 0018                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 54B2  
             _vscp_readNicknamePermanent 54A8                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                       setEventData@newval 007F  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                          ___awtofl@sign 001E                           __CFG_EBTR3$OFF 000000  
                  __end_of_sendTempEvent 4A44                             _vscp_getGUID 5400  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                                  _floor 3DC0                                    _ldexp 4654  
                           _vscp_getZone 548A                                    _frexp 48CC  
                     vscp_writeAppReg@rv 0024                _vscp_getRegisterPagesUsed 54D0  
                 __size_of_vscp_getEvent 002A                                    main@i 00B2  
                             _ConvertADC 54C8                             _vscp_setGUID 52CE  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 54D6  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 521A                              exp@exponent 00A1  
                            ldexp@newexp 0085                     _ECANSetOperationMode 53C0  
                        __initialization 4EF6                              log@exponent 0043  
                           __end_of_main 3FB0                             __end_of_init 502A  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                        ?_Celsius2Kelvin 002C                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001F                           ?i1_WriteTimer0 0001  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 0024  
                 ??_vscp_restoreDefaults 0022                                   ??_main 0046  
                                 ??_init 0022            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 0012                 ??_vscp_setManufacturerId 0012  
               _vscp_handleProtocolEvent 2A38                            __activetblptr 000002  
                      __RegsToCANID@type 0011               ECANReceiveMessage@msgFlags 0017  
                       doWork@calVoltage 016A                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_floor 008F  
                                 ?_ldexp 0081                     __size_of_handle_sync 0082  
                                 ?_frexp 000E                         __end_of___altofl 4E66  
             ECANReceiveMessage@savedPtr 0018                                   _CANCON 000F6F  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                         __end_of___flpack 438A  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                       __end_of___awtofl 5064                          __CFG_BBSIZ$1024 000000  
                       ?_doOneSecondWork 0001                       vscp_writeStdReg@rv 0032  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 530E  
                                 i1l9200 010E                                   i1l9210 0174  
                                 i1l9202 0136                                   i1l9220 01B6  
                                 i1l9212 0178                                   i1l9204 013A  
                                 i1l9230 0200                                   i1l9222 01C2  
                                 i1l9214 0184                                   i1l9206 0146  
                                 i1l9150 0048                                   i1l9240 0244  
                                 i1l9232 0206                                   i1l9224 01C8  
                                 i1l9216 018A                                   i1l9208 014C  
                                 i1l9160 007A                                   i1l9152 004E  
                                 i1l9242 024E                                   i1l9234 022E  
                                 i1l9226 01F0                                   i1l9218 01B2  
                                 i1l9250 0258                                   i1l9170 00A4  
                                 i1l9162 0084                                   i1l9154 0052  
                                 i1l9146 0034                                   i1l9244 0252  
                                 i1l9236 0232                                   i1l9228 01F4  
                                 i1l9252 0292                                   i1l9172 00A8  
                                 i1l9164 0086                                   i1l9156 0062  
                                 i1l9148 003C                                   i1l9254 0296  
                                 i1l9238 023E                                   i1l9174 00AA  
                                 i1l9166 0092                                   i1l9158 0072  
                                 i1l9192 00D0                                   i1l9168 009C  
                                 i1l9176 00AE                                   i1l9194 00F8  
                                 i1l9186 00C4                                   i1l9196 00FC  
                                 i1l9188 00C6                                   i1l9198 0108  
                        _init_app_eeprom 2338                         __end_of___lwtofl 5150  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                         __CFG_WDTPS$128 000000                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001C                   ECANReceiveMessage@temp 001D  
                      getVSCPFrame@pData 0028                        getVSCPFrame@pSize 0027  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 5150  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1167 0088                                   ___flge 4C5E  
                         getCANFrame@pid 0022                                ??___aldiv 0046  
                              ??___fladd 0025                                   ___wmul 5098  
                              ??___fldiv 0034                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0042                                ??___flsub 0042  
                              ??___fltol 0042                            _vscp_getEvent 517A  
                                 _doWork 1368                         OpenTimer0@config 000E  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 0012  
                    vscp_writeAppReg@reg 0023               __end_of_vscp_setSegmentCRC 5438  
                    vscp_writeAppReg@val 0021                      vscp_writeAppReg@pos 0022  
                                 clear_0 4EFE                                   clear_1 4F10  
                                 clear_2 4F1C                                   clear_3 4F28  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 0096  
                                 floor@i 0093                                   floor@x 008F  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 00BA  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 0011                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0021  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004A                       __size_of___asfldiv 004A  
                     __size_of___asflmul 004C                               ___fladd@f1 001D  
                             ___fladd@f2 0021                       __size_of___asflsub 004E  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0648                         __end_oflog@coeff 066C  
                        ___lbmod@divisor 000E                               ___altofl@c 008A  
                             ___fldiv@f1 002C                               ___fldiv@f2 0030  
                             ___fldiv@f3 003B                               __accesstop 0060  
                __end_of__initialization 4F2E                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 4B40                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                               ___flmul@f1 0060  
                             ___flmul@f2 0064                             eval_poly@res 007D  
                             ___flsub@f1 0076                               ___flsub@f2 007A  
                             ___fltol@f1 0076                          writeEEPROM@data 0010  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 52AC  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0028                      ?_Celsius2Fahrenheit 0076  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0076              __end_of_vscp_check_pstorage 52AC  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 3EBC                            __end_of_ldexp 46F8  
                          __end_of_frexp 4952                      ?_vscp_writeRegister 0034  
                             __end_ofPL2 1AFA                               __end_ofPL4 2A38  
                             __end_ofPL6 1B0A                               __end_ofPL8 1B18  
                         ??_sendCANFrame 0042                               ___lwtofl@c 0018  
             __end_of_vscp_getFamilyCode 54A8                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 01FA             __size_of_getCalibrationValue 0048  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 549E  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0034  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 1358  
                 getVSCPFrame@pvscpclass 002D                  __end_of_init_app_eeprom 2A2A  
                   ??_Celsius2Fahrenheit 0042              __end_of_vscp_setControlByte 5426  
               __end_of_vscp_writeStdReg 3784                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 0043  
                                ??_frexp 0014                            ?_setEventData 007C  
                   ??_vscp_writeRegister 0035          __end_of_vscp_handleDropNickname 50FA  
                           _getVSCPFrame 4A52                               __pbssBANK0 00B3  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 00A0               __end_of_vscp_getBufferSize 54D4  
                       Celsius2Kelvin@tc 002C                    vscp_writeRegister@reg 0035  
                 ??_ECANSetOperationMode 000E       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 46F8  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 54D8  
               ECANSetOperationMode@mode 000E                                  ?___wmul 0012  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                           doWork@setpoint 0195  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0011                                  _B5RXFUL 007387  
                      __end_of___asfladd 4DD6                        __end_of___asfldiv 4D8C  
                       WriteTimer0@timer 0010                                ?___altofl 008A  
                      __end_of___asflmul 4CF6                                  _ECANCON 000F77  
                      __end_of___asflsub 4C5E                                ?___flpack 000E  
                          ??_WriteTimer0 0010                         doWork@resistance 018C  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                    sendVSCPFrame@priority 0064  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72                                ?___lwtofl 0018  
                    vscp_writeStdReg@idx 0030                      vscp_writeStdReg@reg 0033  
           __end_of_vscp_doOneSecondWork 4D42                                  i1l12242 026A  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00B4  
        __end_of_interrupt_at_low_vector 02B6                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 415A                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 4ACA               __end_of_vscp_getMatrixInfo 5360  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                           ??_setEventData 0046  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                          setEventData@v 007C                       _vscp_goActiveState 52F0  
                 __size_of_sendVSCPFrame 00B2             __end_of_vscp_getMajorVersion 54DC  
                     __size_of_vscp_init 0048                vscp_writeStdReg@code_1147 002C  
                             _readEEPROM 5438                   _vscp_getManufacturerId 53D8  
                 _vscp_setManufacturerId 5360                          _ECANSendMessage 37A4  
                    ?_vscp_goActiveState 0001                                  _OpenADC 4BB4  
                                __Hparam 0000                          ??_vscp_getEvent 0032  
                       ??_Celsius2Kelvin 0030                                  __Lparam 0000  
                     _vscp_node_substate 004E               __end_of_vscp_getSegmentCRC 54BC  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
               vscp_writeStdReg@idx_1148 0031        __end_of_vscp_getRegisterPagesUsed 54D2  
               __size_of_vscp_getMDF_URL 0018                                  ___aldiv 421E  
                        __size_of___flge 004C                                  ___fladd 390A  
                                ___fldiv 45AC                                  ___flneg 5240  
                                ___lbmod 51A4                                  ___flmul 4094  
                                ___flsub 4F76                                  ___fltol 4798  
                        __size_of___wmul 0022                          getCANFrame@pdlc 0020  
                              _FIFOEMPTY 007BA7                            ?i1_ConvertADC 0001  
                        __size_of_doWork 0780                             __psmallconst 0600  
                             ??___altofl 0046                     __end_of_init_app_ram 4EF6  
                             ??___flpack 0014                       _vscp_sendHeartBeat 51F4  
                                __pcinit 4EF6                               ??___awtofl 001C  
                         _vscp_deviceURL 0600                        __end_of_eval_poly 4436  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 3EBC                                  __ptext1 1368  
                                __ptext2 5126                                  __ptext3 4D42  
                                __ptext4 4D8C                                  __ptext5 421E  
                                __ptext6 4DD6                                  __ptext7 3A60  
                                __ptext8 3242                                  __ptext9 5240  
                             ??___lwtofl 001C                           _vscp_getUserID 53EC  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 0044  
                           __size_of_exp 01E4                             __size_of_log 012E  
                  vscp_writeStdReg@value 0022                         ___aldiv@dividend 007C  
                    ?_vscp_sendHeartBeat 0044                 ??_vscp_handleSetNickname 0012  
                                _seconds 00B6                                  doWork@B 018A  
                                doWork@i 019B                                  doWork@j 0190  
                                doWork@v 0186                      __end_of_WriteTimer0 546E  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 0014  
                     vscp_getMDF_URL@idx 000F                           OpenADC@config2 000E  
          vscp_handleProtocolEvent@bytes 008C                     end_of_initialization 4F2E  
                                exp@sign 00A3             __end_of_vscp_handleHeartbeat 4F76  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                __end_of_writeCoeffs2Ram 4798                     __end_of_sendCANFrame 4FEE  
                             doWork@Rinf 0166                       doOneSecondWork@tmp 0089  
                             doWork@temp 0197                vscp_handleProtocolEvent@i 0098  
              vscp_handleProtocolEvent@j 0099                vscp_handleProtocolEvent@k 0093  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 51CC  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 0086                                  postdec1 000FE5  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                 __size_of_sendTempEvent 0070                           _vscp_setUserID 5378  
                                postinc0 000FEE                                  postinc2 000FDE  
                         ??i1_ConvertADC 0001                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 545C              _vscp_writeNicknamePermanent 544A  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 444A  
                 __end_of_vscp_getUserID 5400             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 4EAE  
                         _vscp_probe_cnt 0050                      __end_of_getCANFrame 5126  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 0087                 __size_of_vscp_readAppReg 0728  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001A  
                       writeCoeffs2Ram@i 001D                         writeCoeffs2Ram@j 001F  
                            ___fldiv@exp 0040                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 00E4                       _vscp_setSegmentCRC 5426  
                      readEEPROM@address 000E                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 0091                  __end_of_ECANSendMessage 390A  
                      vscp_readStdReg@rv 0013                              ___lbmod@rem 0011  
                            ___flmul@exp 006F                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 3C52                      _getCalibrationValue 4DD6  
                            ?_readEEPROM 000E                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 51F4                               _vscp_error 54C4  
                   _vscp_doOneSecondWork 4CF6                       i1WriteTimer0@timer 0003  
                             _vscp_timer 011C                   __end_of_vscp_setUserID 5390  
               __size_of_doOneSecondWork 017C                   vscp_sendHeartBeat@zone 0045  
                   __end_of_setEventData 45AC                           ?_sendVSCPFrame 0060  
                         __end_of___flge 4CAA                     __size_of_writeEEPROM 0026  
                         __end_of___wmul 50BA                          ?_vscp_getUserID 0001  
                         __end_of_doWork 1AE8             __end_of_vscp_getMinorVersion 54DA  
                            _WriteTimer0 545C                     _vscp_getMajorVersion 54DA  
                     __end_of_ConvertADC 54CC                     ?_getCalibrationValue 0012  
                   ??_vscp_setSegmentCRC 0011                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 0097  
                            __end_ofPL10 1B26                              __end_ofPL20 1B74  
                            __end_ofPL12 1B40                        ?_vscp_writeAppReg 0021  
                            __end_ofPL30 1BAA                              __end_ofPL22 1B90  
                            __end_ofPL14 1B64                              __end_ofPL40 1BD0  
                            __end_ofPL32 3D90                              __end_ofPL24 35CE  
                            __end_ofPL16 3D80                              __end_ofPL50 3DB6  
                            __end_ofPL42 3022                              __end_ofPL34 300E  
                            __end_ofPL26 3C60                              __end_ofPL18 35C0  
                            __end_ofPL60 1BF4                              __end_ofPL52 3C9A  
                            __end_ofPL44 444A                              __end_ofPL36 3DA2  
                            __end_ofPL28 35EA                              __end_ofPL70 4A52  
                            __end_ofPL62 3A60                              __end_ofPL54 3798  
                            __end_ofPL46 3C72                              __end_ofPL38 1BC2  
                            __end_ofPL80 3030                              __end_ofPL72 415A  
                            __end_ofPL64 50CA                              __end_ofPL56 3CAC  
                            __end_ofPL48 3C86                              __end_ofPL82 3DC0  
                            __end_ofPL74 3242                              __end_ofPL66 1368  
                            __end_ofPL58 1BE2                              __end_ofPL84 37A4  
                            __end_ofPL76 1C02                              __end_ofPL68 414C  
                            __end_ofPL86 4396                              __end_ofPL78 1C10  
                            __end_ofPL88 303A                      start_initialization 4EF6  
                             eval_poly@d 007A                               eval_poly@n 007B  
                             eval_poly@x 0076                               ldexp@value 0081  
        __size_of_vscp_handleSetNickname 0024                              __end_of_exp 3426  
                            __end_of_log 3B8E                       ??_vscp_writeAppReg 0022  
                          _sendTempEvent 49D4                        ?_vscp_writeStdReg 0022  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 0023  
                     _vscp_getFamilyCode 549E                      __end_of_handle_sync 49D4  
                         ??__CANIDToRegs 0015                       _vscp_getFamilyType 5494  
                             frexp@value 000E                      sendVSCPFrame@nodeid 0063  
                       ?_writeCoeffs2Ram 0001                        _vscp_readRegister 532C  
                   Celsius2Fahrenheit@tc 0076                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 0090                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 001E                      ?_vscp_getFamilyCode 000E  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 2FF6  
                        ?_vscp_setUserID 0011                      ?_vscp_getFamilyType 000E  
                  __size_of_init_app_ram 0048                 ?_vscp_handleDropNickname 0001  
                 getCalibrationValue@cal 0017                        ??_vscp_getSubzone 0012  
                               ??___flge 0016                 __end_of__ECANPointBuffer 4B40  
                      __CANIDToRegs@type 0014                              _getCANFrame 50FA  
                               ??___wmul 0016                                 ??_doWork 00A4  
                     _vscp_getBufferSize 54D2              vscp_handleProtocolEvent@len 008D  
            vscp_handleProtocolEvent@pos 008B               __end_of_ECANReceiveMessage 3234  
                    ??_vscp_readRegister 0015           __size_of_vscp_goBootloaderMode 0018  
                  ?_vscp_getMajorVersion 0001                    ??_getCalibrationValue 0014  
                  __end_ofi1_WriteTimer0 5480            __end_of_vscp_goBootloaderMode 53C0  
                   _vscp_handleHeartbeat 4F38                       __end_of_OpenTimer0 532C  
                      __size_of___altofl 0048                        __size_of___flpack 00B0  
                              ___asfladd 4D8C                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                      __size_of_readEEPROM 0012  
                              ___asfldiv 4D42                              __pbssBIGRAM 019C  
                              ___asflmul 4CAA                                ___asflsub 4C10  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 0166                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004B              __size_of_Celsius2Fahrenheit 0074  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 003C  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 54D0                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 0012                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 5346                             _init_app_ram 4EAE  
                   getCalibrationValue@i 0019                              _doWork$2270 016E  
                            _doWork$2271 0172                              _doWork$2272 0176  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 0191  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 0013  
                   ??_vscp_getBufferSize 000E                             _current_temp 0100  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5346  
                 _vscp_handleSetNickname 5264            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 4836  
                               ?___aldiv 007C                                 ?___fladd 001D  
                               ?___fldiv 002C                                __ptext100 546E  
                              __ptext101 54CC                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 0060                                 ?___flsub 0076  
                               ?___fltol 0076                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 0012                              __pintcodelo 0018  
                      ??_doOneSecondWork 0087                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1157 008F               vscp_setManufacturerId@data 0011  
                           _sendCANFrame 4FB2                              __smallconst 0600  
                             ?___asfladd 002C                        WriteTimer0@timer0 000E  
                             ?___asfldiv 0060                               ?___asflmul 0076  
                             ?___asflsub 007E                       _vscp_getSegmentCRC 54B2  
                         ??_vscp_getGUID 0012                                _eval_poly 4396  
                            _handle_sync 4952                           ??_vscp_getZone 0012  
         __end_of_vscp_getManufacturerId 53EC           __end_of_vscp_setManufacturerId 5378  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1156 008E  
                         __size_of_floor 00FC                           __size_of_ldexp 00A4  
                         ??_vscp_setGUID 0012                           __size_of_frexp 0086  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 011A                     vscp_writeStdReg@code 0028  
                        ___aldiv@divisor 0080                          ___aldiv@counter 0084  
                         ___wmul@product 0016                   ??_vscp_doOneSecondWork 007F  
                 sendVSCPFrame@vscpclass 0060                            OpenADC@config 0012  
                   _vscp_getMinorVersion 54D8                                _sendTimer 004A  
                               _PIE1bits 000F9D                                _low_alarm 00B5  
                  __size_of_setEventData 00B0                   __end_of_ECANInitialize 48CC  
                               i1u720_20 00C2                                 i1u720_21 00C0  
                               i1u721_20 00CE                                 i1u721_21 00CC  
                               i1u722_20 0108                                 i1u714_20 003C  
                               i1u722_21 0106                                 i1u714_21 003A  
                               i1u723_20 0146                                 i1u715_20 007A  
                               i1u723_21 0144                                 i1u715_21 0078  
                               i1u724_20 0184                                 i1u716_20 0092  
                               i1u724_21 0182                                 i1u716_21 0090  
                               i1u725_20 01C2                                 i1u717_20 009C  
                               i1u725_21 01C0                                 i1u717_21 009A  
                               i1u726_20 0200                                 i1u718_20 00A4  
                               i1u726_21 01FE                                 i1u718_21 00A2  
                               i1u727_20 023E                                 i1u719_20 00B8  
                               i1u727_21 023C                                 i1u719_21 00B6  
                               i1u728_20 024E                                 i1u728_21 024C  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 51A4                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 0012                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 3D6C  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 0012  
                           __RegsToCANID 3B8E                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0085              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 0076                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 4E66                                _vscp_imsg 00BC  
                              _vscp_hour 00B7                                _vscp_omsg 00CA  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 05BE  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 44FC               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0112                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 0010                 __size_of_init_app_eeprom 06F2  
           __end_of_vscp_restoreDefaults 54C4                                frexp@eptr 0012  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 010C              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 005C                         ??_vscp_getUserID 0012  
                        _vscp_getMDF_URL 5390                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                       __size_of___aldiv 00BC                         __size_of___fladd 0144  
                       __size_of___fldiv 00A8                         __size_of___flneg 0024  
                       _vscp_initledfunc 004D                         __size_of___lbmod 0028  
                       __size_of___flmul 00A8                   ??_vscp_handleHeartbeat 0012  
                       __size_of___flsub 003C                         __size_of___fltol 009E  
                               ___altofl 4E1E                                 ___flpack 42DA  
                       getCANFrame@flags 0023                             ?_WriteTimer0 000E  
                               ___awtofl 502A                         getCANFrame@pdata 0021  
                               ___lwtofl 5126                           sendTempEvent@i 0086  
                __size_of_Celsius2Kelvin 0034                              ??___asfladd 0032  
                            ??___asfldiv 0042                              ??___asflmul 0042  
                               _exp$2276 009D                              ??___asflsub 0042  
                     __end_of_readEEPROM 544A                    __size_ofi1_ConvertADC 0004  
                             ?_vscp_init 0001                                 __ptext10 4654  
                               __ptext11 4396                                 __ptext20 45AC  
                               __ptext12 3DC0                                 __ptext21 4CF6  
                               __ptext13 4798                                 __ptext30 4B40  
                               __ptext22 51F4                                 __ptext14 48CC  
                               __ptext31 390A                                 __ptext23 5480  
                               __ptext15 4C5E                                 __ptext40 549E  
                               __ptext32 5064                                 __ptext24 548A  
                               __ptext16 4E1E                                 __ptext41 5360  
                               __ptext33 2A38                                 __ptext25 3426  
                               __ptext17 4C10                                 __ptext50 53D8  
                               __ptext42 5378                                 __ptext34 51A4  
                               __ptext26 54C4                                 __ptext18 4F76  
                               __ptext51 53EC                                 __ptext43 52CE  
                               __ptext35 52AC                                 __ptext27 4952  
                               __ptext19 4CAA                                 __ptext60 54A8  
                               __ptext52 5390                                 __ptext44 066E  
                               __ptext36 35EA                                 __ptext28 49D4  
                               __ptext61 5264                                 __ptext53 5400  
                               __ptext45 532C                                 __ptext37 54BC  
                               __ptext29 44FC                                 __ptext70 37A4  
                               __ptext62 4F38                                 __ptext54 54D6  
                               __ptext46 3FB0                                 __ptext38 2338  
                               __ptext71 3CAC                                 __ptext63 53A8  
                               __ptext55 54D8                                 __ptext47 54D0  
                               __ptext39 5494                                 __ptext80 5426  
                               __ptext72 517A                                 __ptext64 5346  
                               __ptext56 54DA                                 __ptext48 54D2  
                               __ptext81 54B2                                 __ptext73 4A52  
                               __ptext65 415A                                 __ptext57 5150  
                               __ptext49 54D4                                 __ptext90 4EAE  
                               __ptext82 5438                                 __ptext74 50FA  
                               __ptext66 52F0                                 __ptext58 50CA  
                               __ptext91 46F8                                 __ptext83 544A  
                               __ptext75 303A                                 __ptext67 51CC  
                               __ptext59 4E66                                 __ptext92 5098  
                               __ptext84 521A                                 __ptext76 3B8E  
                               __ptext68 444A                                 __ptext93 54C8  
                               __ptext85 4FEE                                 __ptext77 4ACA  
                               __ptext69 4FB2                                 __ptext94 545C  
                               __ptext86 4836                                 __ptext78 5288  
                               __ptext95 502A                                 __ptext87 53C0  
                               __ptext79 5414                                 __ptext96 4094  
                               __ptext88 4BB4                                 __ptext97 42DA  
                               __ptext89 530E                                 __ptext98 1C10  
         vscp_goBootloaderMode@algorithm 0011                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5480                         ??_vscp_setUserID 0012  
                          __size_of_main 00F4                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0CEA                      _vscp_check_pstorage 5288  
                          init_app_ram@i 0021           vscp_handleProtocolEvent@i_1155 0095  
         vscp_handleProtocolEvent@i_1158 0097           vscp_handleProtocolEvent@i_1166 0092  
                       doOneSecondWork@i 008A                     __end_of_vscp_getGUID 5414  
                          ??_writeEEPROM 0011                __size_of_vscp_writeStdReg 019A  
                    ECANSendMessage@data 001C                 ECANSendMessage@tempBSEL0 0035  
                           ?_getCANFrame 0020                      ECANSendMessage@mode 0032  
                   __end_of_vscp_getZone 5494                      ECANSendMessage@temp 0038  
                      ?__ECANPointBuffer 000E                        vscp_setUserID@idx 0012  
                   __end_of_vscp_setGUID 52F0                       vscp_readAppReg@reg 0013  
                     vscp_readAppReg@pos 0012                             i1_ConvertADC 54CC  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 008A                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                         init_app_eeprom@i 0011  
                    _vscp_setControlByte 5414                                 exp@coeff 0620  
                  ___flmul@f3_as_product 0070                                 log@coeff 0648  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 1C10  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
                            ??_eval_poly 0042             ??_vscp_readNicknamePermanent 0012  
                    ECANReceiveMessage@i 001B                          _vscp_guid_reset 004C  
                        _vscp_readStdReg 3FB0             vscp_handleDropNickname@bytes 0012  
             __end_of_vscp_newNodeOnline 517A                       _ECANReceiveMessage 303A  
                         ??_getVSCPFrame 0029                          _vscp_initbtncnt 00B8  
                        sendVSCPFrame@id 007B                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 53A8                     ?_vscp_setControlByte 0001  
                          _timeout_clock 0116                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 00BB                             handle_sync@i 0089  
                        _doOneSecondWork 3426                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0011              __end_of_getCalibrationValue 4E1E  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0011  
                  __size_of__CANIDToRegs 00C0                           readEEPROM@data 0011  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 54D6              _vscp_getBootLoaderAlgorithm 54D4  
       __size_of_interrupt_at_low_vector 029E                   ECANSendMessage@dataLen 001D  
                    __end_of_writeEEPROM 5240                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 0018                    ??_vscp_check_pstorage 0012  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 53A8  
             __end_of_Celsius2Fahrenheit 4BB4             __end_of_ECANSetOperationMode 53D8  
                   _vscp_restoreDefaults 54BC              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 0012                  __end_of_vscp_getSubzone 548A  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 0085                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 52CE                       __end_of_vscp_error 54C8  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 00B3  
         __end_of_vscp_handleSetNickname 5288       vscp_handleProtocolEvent@bytes_1163 0094  
                  ??_vscp_setControlByte 0011                     vscp_readRegister@reg 0015  
                           ___fladd@exp1 002B                             ___fladd@exp2 002A  
                           ___fladd@sign 0029                             __CANIDToRegs 3CAC  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 0086  
                          ___asfladd@f1p 002C              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 002E                 __size_of_ECANSendMessage 0166  
                           ___asfldiv@f2 0062  

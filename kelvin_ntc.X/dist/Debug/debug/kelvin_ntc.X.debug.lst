

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Sep 13 21:16:59 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   120                           	psect	pa_nodes,global,class=CODE,delta=1
   121  0000                     tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           prodh	equ	0xFF4
   125                           prodl	equ	0xFF3
   126                           intcon	equ	0xFF2
   127                           wreg	equ	0xFE8
   128                           indf1	equ	0xFE7
   129                           fsr1h	equ	0xFE2
   130                           fsr1l	equ	0xFE1
   131                           indf2	equ	0xFDF
   132                           postinc2	equ	0xFDE
   133                           postdec2	equ	0xFDD
   134                           plusw2	equ	0xFDB
   135                           fsr2h	equ	0xFDA
   136                           fsr2l	equ	0xFD9
   137                           status	equ	0xFD8
   138                           
   139                           	psect	smallconst
   140  000600                     __psmallconst:
   141                           	opt stack 0
   142  000600                     _vscp_deviceURL:
   143                           	opt stack 0
   144  000600  77                 	db	119
   145  000601  77                 	db	119
   146  000602  77                 	db	119
   147  000603  2E                 	db	46
   148  000604  65                 	db	101
   149  000605  75                 	db	117
   150  000606  72                 	db	114
   151  000607  6F                 	db	111
   152  000608  73                 	db	115
   153  000609  6F                 	db	111
   154  00060A  75                 	db	117
   155  00060B  72                 	db	114
   156  00060C  63                 	db	99
   157  00060D  65                 	db	101
   158  00060E  2E                 	db	46
   159  00060F  73                 	db	115
   160  000610  65                 	db	101
   161  000611  2F                 	db	47
   162  000612  6E                 	db	110
   163  000613  74                 	db	116
   164  000614  63                 	db	99
   165  000615  31                 	db	49
   166  000616  30                 	db	48
   167  000617  4B                 	db	75
   168  000618  41                 	db	65
   169  000619  5F                 	db	95
   170  00061A  33                 	db	51
   171  00061B  2E                 	db	46
   172  00061C  78                 	db	120
   173  00061D  6D                 	db	109
   174  00061E  6C                 	db	108
   175  00061F  00                 	db	0
   176  000620                     __end_of_vscp_deviceURL:
   177                           	opt stack 0
   178  000620                     exp@coeff:
   179                           	opt stack 0
   180  000620  0000               	dw	0
   181  000622  3F80               	dw	16256
   182  000624  7218               	dw	29208
   183  000626  3F31               	dw	16177
   184  000628  FDF0               	dw	65008
   185  00062A  3E75               	dw	15989
   186  00062C  5847               	dw	22599
   187  00062E  3D63               	dw	15715
   188  000630  9558               	dw	38232
   189  000632  3C1D               	dw	15389
   190  000634  C482               	dw	50306
   191  000636  3AAE               	dw	15022
   192  000638  78A8               	dw	30888
   193  00063A  3921               	dw	14625
   194  00063C  93EF               	dw	37871
   195  00063E  3780               	dw	14208
   196  000640  92A0               	dw	37536
   197  000642  35A7               	dw	13735
   198  000644  5646               	dw	22086
   199  000646  3415               	dw	13333
   200  000648                     __end_ofexp@coeff:
   201                           	opt stack 0
   202  000648                     log@coeff:
   203                           	opt stack 0
   204  000648  0000               	dw	0
   205  00064A  0000               	dw	0
   206  00064C  FFC4               	dw	65476
   207  00064E  3F7F               	dw	16255
   208  000650  EF80               	dw	61312
   209  000652  BEFF               	dw	48895
   210  000654  E190               	dw	57744
   211  000656  3EA9               	dw	16041
   212  000658  82EC               	dw	33516
   213  00065A  BE76               	dw	48758
   214  00065C  AD82               	dw	44418
   215  00065E  3E2B               	dw	15915
   216  000660  3C0E               	dw	15374
   217  000662  BDC3               	dw	48579
   218  000664  D187               	dw	53639
   219  000666  3D13               	dw	15635
   220  000668  7841               	dw	30785
   221  00066A  BBD3               	dw	48083
   222  00066C                     __end_oflog@coeff:
   223                           	opt stack 0
   224  0000                     _ADCON0	set	4034
   225  0000                     _ADCON0bits	set	4034
   226  0000                     _ADCON1	set	4033
   227  0000                     _ADCON2	set	4032
   228  0000                     _ADRESH	set	4036
   229  0000                     _ADRESL	set	4035
   230  0000                     _BRGCON1	set	3952
   231  0000                     _BRGCON2	set	3953
   232  0000                     _BRGCON3	set	3954
   233  0000                     _BSEL0	set	3576
   234  0000                     _CANCON	set	3951
   235  0000                     _CIOCON	set	3955
   236  0000                     _ECANCON	set	3959
   237  0000                     _EEADR	set	4009
   238  0000                     _EECON1bits	set	4006
   239  0000                     _EECON2	set	4007
   240  0000                     _EEDATA	set	4008
   241  0000                     _INTCONbits	set	4082
   242  0000                     _MSEL0	set	3568
   243  0000                     _MSEL1	set	3569
   244  0000                     _MSEL2	set	3570
   245  0000                     _PIE1bits	set	3997
   246  0000                     _PIR1bits	set	3998
   247  0000                     _PIR2bits	set	4001
   248  0000                     _PORTC	set	3970
   249  0000                     _RXB1CONbits	set	3920
   250  0000                     _RXF0EIDH	set	3842
   251  0000                     _RXF0EIDL	set	3843
   252  0000                     _RXF0SIDH	set	3840
   253  0000                     _RXF0SIDL	set	3841
   254  0000                     _RXF1EIDH	set	3846
   255  0000                     _RXF1EIDL	set	3847
   256  0000                     _RXF1SIDH	set	3844
   257  0000                     _RXF1SIDL	set	3845
   258  0000                     _RXFBCON0	set	3552
   259  0000                     _RXFBCON1	set	3553
   260  0000                     _RXFBCON2	set	3554
   261  0000                     _RXFBCON3	set	3555
   262  0000                     _RXFBCON4	set	3556
   263  0000                     _RXFBCON5	set	3557
   264  0000                     _RXFBCON6	set	3558
   265  0000                     _RXFBCON7	set	3559
   266  0000                     _RXFCON0	set	3540
   267  0000                     _RXFCON1	set	3541
   268  0000                     _RXM0EIDH	set	3866
   269  0000                     _RXM0EIDL	set	3867
   270  0000                     _RXM0SIDH	set	3864
   271  0000                     _RXM0SIDL	set	3865
   272  0000                     _RXM1EIDH	set	3870
   273  0000                     _RXM1EIDL	set	3871
   274  0000                     _RXM1SIDH	set	3868
   275  0000                     _RXM1SIDL	set	3869
   276  0000                     _T0CON	set	4053
   277  0000                     _T0CONbits	set	4053
   278  0000                     _TMR0H	set	4055
   279  0000                     _TMR0L	set	4054
   280  0000                     _TRISA	set	3986
   281  0000                     _TRISB	set	3987
   282  0000                     _TRISC	set	3988
   283  0000                     _B0RXFUL	set	28935
   284  0000                     _B0TXEN	set	28610
   285  0000                     _B1RXFUL	set	29063
   286  0000                     _B1TXEN	set	28611
   287  0000                     _B2RXFUL	set	29191
   288  0000                     _B2TXEN	set	28612
   289  0000                     _B3RXFUL	set	29319
   290  0000                     _B3TXEN	set	28613
   291  0000                     _B4RXFUL	set	29447
   292  0000                     _B4TXEN	set	28614
   293  0000                     _B5RXFUL	set	29575
   294  0000                     _B5TXEN	set	28615
   295  0000                     _FIFOEMPTY	set	31655
   296  0000                     _IRXIF	set	32039
   297  0000                     _MDSEL0	set	31678
   298  0000                     _MDSEL1	set	31679
   299  0000                     _RXB0FILHIT0	set	31488
   300  0000                     _RXB0FUL	set	31495
   301  0000                     _RXB0IF	set	32032
   302  0000                     _RXB0OVFL	set	31655
   303  0000                     _RXB1IF	set	32033
   304  0000                     _RXB1OVFL	set	31654
   305  0000                     _RXM0EXIDM	set	30923
   306  0000                     _RXM1EXIDEN	set	30955
   307  0000                     _B0CON	set	3616
   308  0000                     _B1CON	set	3632
   309  0000                     _B2CON	set	3648
   310  0000                     _B3CON	set	3664
   311  0000                     _B4CON	set	3680
   312  0000                     _B5CON	set	3696
   313  0000                     _RXB0CON	set	3936
   314  0000                     _RXB1CON	set	3920
   315  0000                     _TXB0CON	set	3904
   316  0000                     _TXB1CON	set	3888
   317  0000                     _TXB2CON	set	3872
   318  00066C  00                 	db	0	; dummy byte at the end
   319  0000                     tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           prodh	equ	0xFF4
   323                           prodl	equ	0xFF3
   324                           intcon	equ	0xFF2
   325                           wreg	equ	0xFE8
   326                           indf1	equ	0xFE7
   327                           fsr1h	equ	0xFE2
   328                           fsr1l	equ	0xFE1
   329                           indf2	equ	0xFDF
   330                           postinc2	equ	0xFDE
   331                           postdec2	equ	0xFDD
   332                           plusw2	equ	0xFDB
   333                           fsr2h	equ	0xFDA
   334                           fsr2l	equ	0xFD9
   335                           status	equ	0xFD8
   336                           
   337                           	psect	nvBANK1
   338  000184                     __pnvBANK1:
   339                           	opt stack 0
   340  000184                     ___DCDelay:
   341                           	opt stack 0
   342  000184                     	ds	1
   343                           
   344                           ; #config settings
   345  0000                     tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           prodh	equ	0xFF4
   349                           prodl	equ	0xFF3
   350                           intcon	equ	0xFF2
   351                           wreg	equ	0xFE8
   352                           indf1	equ	0xFE7
   353                           fsr1h	equ	0xFE2
   354                           fsr1l	equ	0xFE1
   355                           indf2	equ	0xFDF
   356                           postinc2	equ	0xFDE
   357                           postdec2	equ	0xFDD
   358                           plusw2	equ	0xFDB
   359                           fsr2h	equ	0xFDA
   360                           fsr2l	equ	0xFD9
   361                           status	equ	0xFD8
   362                           
   363                           	psect	cinit
   364  004F72                     __pcinit:
   365                           	opt stack 0
   366  004F72                     start_initialization:
   367                           	opt stack 0
   368  004F72                     __initialization:
   369                           	opt stack 0
   370                           
   371                           ; Clear objects allocated to BIGRAM (960 bytes)
   372  004F72  EE01  F085         	lfsr	0,__pbssBIGRAM
   373  004F76  EE13 F0C0          	lfsr	1,960
   374  004F7A                     clear_0:
   375  004F7A  6AEE               	clrf	postinc0,c
   376  004F7C  50E5               	movf	postdec1,w,c
   377  004F7E  50E1               	movf	fsr1l,w,c
   378  004F80  E1FC               	bnz	clear_0
   379  004F82  50E2               	movf	fsr1h,w,c
   380  004F84  E1FA               	bnz	clear_0
   381                           
   382                           ; Clear objects allocated to BANK1 (78 bytes)
   383  004F86  EE01  F000         	lfsr	0,__pbssBANK1
   384  004F8A  0E4E               	movlw	78
   385  004F8C                     clear_1:
   386  004F8C  6AEE               	clrf	postinc0,c
   387  004F8E  06E8               	decf	wreg,f,c
   388  004F90  E1FD               	bnz	clear_1
   389                           
   390                           ; Clear objects allocated to BANK0 (65 bytes)
   391  004F92  EE00  F060         	lfsr	0,__pbssBANK0
   392  004F96  0E41               	movlw	65
   393  004F98                     clear_2:
   394  004F98  6AEE               	clrf	postinc0,c
   395  004F9A  06E8               	decf	wreg,f,c
   396  004F9C  E1FD               	bnz	clear_2
   397                           
   398                           ; Clear objects allocated to COMRAM (13 bytes)
   399  004F9E  EE00  F046         	lfsr	0,__pbssCOMRAM
   400  004FA2  0E0D               	movlw	13
   401  004FA4                     clear_3:
   402  004FA4  6AEE               	clrf	postinc0,c
   403  004FA6  06E8               	decf	wreg,f,c
   404  004FA8  E1FD               	bnz	clear_3
   405  004FAA                     end_of_initialization:
   406                           	opt stack 0
   407  004FAA                     __end_of__initialization:
   408                           	opt stack 0
   409  004FAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   410  004FAC  6EF8               	movwf	tblptru,c
   411  004FAE  0100               	movlb	0
   412  004FB0  EF3A  F020         	goto	_main	;jump to C main() function
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           prodh	equ	0xFF4
   418                           prodl	equ	0xFF3
   419                           intcon	equ	0xFF2
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           indf1	equ	0xFE7
   423                           postdec1	equ	0xFE5
   424                           fsr1h	equ	0xFE2
   425                           fsr1l	equ	0xFE1
   426                           indf2	equ	0xFDF
   427                           postinc2	equ	0xFDE
   428                           postdec2	equ	0xFDD
   429                           plusw2	equ	0xFDB
   430                           fsr2h	equ	0xFDA
   431                           fsr2l	equ	0xFD9
   432                           status	equ	0xFD8
   433                           
   434                           	psect	bssCOMRAM
   435  000046                     __pbssCOMRAM:
   436                           	opt stack 0
   437  000046                     _vscp_page_select:
   438                           	opt stack 0
   439  000046                     	ds	2
   440  000048                     __ECANRxFilterHitInfo:
   441                           	opt stack 0
   442  000048                     	ds	1
   443  000049                     _adc_series_counter:
   444                           	opt stack 0
   445  000049                     	ds	1
   446  00004A                     _vscp_alarmstatus:
   447                           	opt stack 0
   448  00004A                     	ds	1
   449  00004B                     _vscp_guid_reset:
   450                           	opt stack 0
   451  00004B                     	ds	1
   452  00004C                     _vscp_initledfunc:
   453                           	opt stack 0
   454  00004C                     	ds	1
   455  00004D                     _vscp_minute:
   456                           	opt stack 0
   457  00004D                     	ds	1
   458  00004E                     _vscp_node_substate:
   459                           	opt stack 0
   460  00004E                     	ds	1
   461  00004F                     _vscp_probe_address:
   462                           	opt stack 0
   463  00004F                     	ds	1
   464  000050                     _vscp_probe_cnt:
   465                           	opt stack 0
   466  000050                     	ds	1
   467  000051                     _vscp_second:
   468                           	opt stack 0
   469  000051                     	ds	1
   470  000052                     _vscp_statuscnt:
   471                           	opt stack 0
   472  000052                     	ds	1
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           prodh	equ	0xFF4
   478                           prodl	equ	0xFF3
   479                           intcon	equ	0xFF2
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           indf1	equ	0xFE7
   483                           postdec1	equ	0xFE5
   484                           fsr1h	equ	0xFE2
   485                           fsr1l	equ	0xFE1
   486                           indf2	equ	0xFDF
   487                           postinc2	equ	0xFDE
   488                           postdec2	equ	0xFDD
   489                           plusw2	equ	0xFDB
   490                           fsr2h	equ	0xFDA
   491                           fsr2l	equ	0xFD9
   492                           status	equ	0xFD8
   493                           
   494                           	psect	bssBANK0
   495  000060                     __pbssBANK0:
   496                           	opt stack 0
   497  000060                     _current_temp:
   498                           	opt stack 0
   499  000060                     	ds	12
   500  00006C                     _measurement_clock:
   501                           	opt stack 0
   502  00006C                     	ds	4
   503  000070                     _timeout_clock:
   504                           	opt stack 0
   505  000070                     	ds	4
   506  000074                     _vscp_configtimer:
   507                           	opt stack 0
   508  000074                     	ds	2
   509  000076                     _vscp_timer:
   510                           	opt stack 0
   511  000076                     	ds	2
   512  000078                     __IT_INT_MASK:
   513                           	opt stack 0
   514  000078                     	ds	1
   515  000079                     __IT_SAVE_BSR:
   516                           	opt stack 0
   517  000079                     	ds	1
   518  00007A                     __IT_SAVE_STATUS:
   519                           	opt stack 0
   520  00007A                     	ds	1
   521  00007B                     __IT_SAVE_WREG:
   522                           	opt stack 0
   523  00007B                     	ds	1
   524  00007C                     ___DCByte:
   525                           	opt stack 0
   526  00007C                     	ds	1
   527  00007D                     _adc_conversion_flags:
   528                           	opt stack 0
   529  00007D                     	ds	1
   530  00007E                     _high_alarm:
   531                           	opt stack 0
   532  00007E                     	ds	1
   533  00007F                     _low_alarm:
   534                           	opt stack 0
   535  00007F                     	ds	1
   536  000080                     _seconds:
   537                           	opt stack 0
   538  000080                     	ds	1
   539  000081                     _sendTimer:
   540                           	opt stack 0
   541  000081                     	ds	1
   542  000082                     _vscp_hour:
   543                           	opt stack 0
   544  000082                     	ds	1
   545  000083                     _vscp_initbtncnt:
   546                           	opt stack 0
   547  000083                     	ds	1
   548  000084                     _vscp_nickname:
   549                           	opt stack 0
   550  000084                     	ds	1
   551  000085                     _vscp_node_state:
   552                           	opt stack 0
   553  000085                     	ds	1
   554  000086                     _vscp_imsg:
   555                           	opt stack 0
   556  000086                     	ds	14
   557  000094                     _vscp_omsg:
   558                           	opt stack 0
   559  000094                     	ds	13
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           prodh	equ	0xFF4
   565                           prodl	equ	0xFF3
   566                           intcon	equ	0xFF2
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           indf1	equ	0xFE7
   570                           postdec1	equ	0xFE5
   571                           fsr1h	equ	0xFE2
   572                           fsr1l	equ	0xFE1
   573                           indf2	equ	0xFDF
   574                           postinc2	equ	0xFDE
   575                           postdec2	equ	0xFDD
   576                           plusw2	equ	0xFDB
   577                           fsr2h	equ	0xFDA
   578                           fsr2l	equ	0xFD9
   579                           status	equ	0xFD8
   580                           
   581                           	psect	bssBANK1
   582  000100                     __pbssBANK1:
   583                           	opt stack 0
   584  000100                     _seconds_temp:
   585                           	opt stack 0
   586  000100                     	ds	6
   587  000106                     _sh_coefficients:
   588                           	opt stack 0
   589  000106                     	ds	72
   590                           tblptru	equ	0xFF8
   591                           tblptrh	equ	0xFF7
   592                           tblptrl	equ	0xFF6
   593                           tablat	equ	0xFF5
   594                           prodh	equ	0xFF4
   595                           prodl	equ	0xFF3
   596                           intcon	equ	0xFF2
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           indf1	equ	0xFE7
   600                           postdec1	equ	0xFE5
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           indf2	equ	0xFDF
   604                           postinc2	equ	0xFDE
   605                           postdec2	equ	0xFDD
   606                           plusw2	equ	0xFDB
   607                           fsr2h	equ	0xFDA
   608                           fsr2l	equ	0xFD9
   609                           status	equ	0xFD8
   610                           
   611                           	psect	bssBIGRAM
   612  000185                     __pbssBIGRAM:
   613                           	opt stack 0
   614  000185                     _adc:
   615                           	opt stack 0
   616  000185                     	ds	960
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           prodh	equ	0xFF4
   622                           prodl	equ	0xFF3
   623                           intcon	equ	0xFF2
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           indf1	equ	0xFE7
   627                           postdec1	equ	0xFE5
   628                           fsr1h	equ	0xFE2
   629                           fsr1l	equ	0xFE1
   630                           indf2	equ	0xFDF
   631                           postinc2	equ	0xFDE
   632                           postdec2	equ	0xFDD
   633                           plusw2	equ	0xFDB
   634                           fsr2h	equ	0xFDA
   635                           fsr2l	equ	0xFD9
   636                           status	equ	0xFD8
   637                           
   638                           	psect	cstackBANK1
   639  00014E                     __pcstackBANK1:
   640                           	opt stack 0
   641  00014E                     doWork@Rinf:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x0
   645  00014E                     	ds	4
   646  000152                     doWork@calVoltage:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x4
   650  000152                     	ds	4
   651  000156                     _doWork$2278:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x8
   655  000156                     	ds	4
   656  00015A                     _doWork$2279:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0xC
   660  00015A                     	ds	4
   661  00015E                     _doWork$2280:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x10
   665  00015E                     	ds	16
   666  00016E                     doWork@v:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x20
   670  00016E                     	ds	4
   671  000172                     doWork@B:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x24
   675  000172                     	ds	2
   676  000174                     doWork@resistance:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x26
   680  000174                     	ds	4
   681  000178                     doWork@j:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x2A
   685  000178                     	ds	1
   686  000179                     doWork@setpoint:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x2B
   690  000179                     	ds	2
   691  00017B                     doWork@avarage:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0x2D
   695  00017B                     	ds	4
   696  00017F                     doWork@temp:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x31
   700  00017F                     	ds	4
   701  000183                     doWork@i:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x35
   705  000183                     	ds	1
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           prodh	equ	0xFF4
   711                           prodl	equ	0xFF3
   712                           intcon	equ	0xFF2
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           indf1	equ	0xFE7
   716                           postdec1	equ	0xFE5
   717                           fsr1h	equ	0xFE2
   718                           fsr1l	equ	0xFE1
   719                           indf2	equ	0xFDF
   720                           postinc2	equ	0xFDE
   721                           postdec2	equ	0xFDD
   722                           plusw2	equ	0xFDB
   723                           fsr2h	equ	0xFDA
   724                           fsr2l	equ	0xFD9
   725                           status	equ	0xFD8
   726                           
   727                           	psect	cstackBANK0
   728  0000A1                     __pcstackBANK0:
   729                           	opt stack 0
   730  0000A1                     ?_sendVSCPFrame:
   731                           	opt stack 0
   732  0000A1                     ?___fladd:
   733                           	opt stack 0
   734  0000A1                     ___aldiv@counter:
   735                           	opt stack 0
   736  0000A1                     sendVSCPFrame@vscpclass:
   737                           	opt stack 0
   738  0000A1                     ___fladd@f1:
   739                           	opt stack 0
   740                           
   741                           ; 4 bytes @ 0x0
   742  0000A1                     	ds	1
   743  0000A2                     ___aldiv@sign:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x1
   747  0000A2                     	ds	1
   748  0000A3                     sendVSCPFrame@vscptype:
   749                           	opt stack 0
   750  0000A3                     ___aldiv@quotient:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x2
   754  0000A3                     	ds	1
   755  0000A4                     sendVSCPFrame@nodeid:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x3
   759  0000A4                     	ds	1
   760  0000A5                     sendVSCPFrame@priority:
   761                           	opt stack 0
   762  0000A5                     ___fladd@f2:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0x4
   766  0000A5                     	ds	1
   767  0000A6                     sendVSCPFrame@size:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x5
   771  0000A6                     	ds	1
   772  0000A7                     ?___altofl:
   773                           	opt stack 0
   774  0000A7                     sendVSCPFrame@pData:
   775                           	opt stack 0
   776  0000A7                     ___altofl@c:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0x6
   780  0000A7                     	ds	1
   781  0000A8                     ??_sendVSCPFrame:
   782                           
   783                           ; 0 bytes @ 0x7
   784  0000A8                     	ds	1
   785  0000A9                     ?___flsub:
   786                           	opt stack 0
   787  0000A9                     ___flsub@f1:
   788                           	opt stack 0
   789  0000A9                     eval_poly@res:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0x8
   793  0000A9                     	ds	2
   794  0000AB                     ___altofl@sign:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0xA
   798  0000AB                     	ds	1
   799  0000AC                     ?_floor:
   800                           	opt stack 0
   801  0000AC                     floor@x:
   802                           	opt stack 0
   803                           
   804                           ; 4 bytes @ 0xB
   805  0000AC                     	ds	1
   806  0000AD                     ?_ldexp:
   807                           	opt stack 0
   808  0000AD                     ___flsub@f2:
   809                           	opt stack 0
   810  0000AD                     ldexp@value:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0xC
   814  0000AD                     	ds	3
   815  0000B0                     floor@i:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0xF
   819  0000B0                     	ds	1
   820  0000B1                     ?___fldiv:
   821                           	opt stack 0
   822  0000B1                     ldexp@newexp:
   823                           	opt stack 0
   824  0000B1                     ___fldiv@f1:
   825                           	opt stack 0
   826                           
   827                           ; 4 bytes @ 0x10
   828  0000B1                     	ds	3
   829  0000B4                     floor@expon:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x13
   833  0000B4                     	ds	1
   834  0000B5                     ___fldiv@f2:
   835                           	opt stack 0
   836                           
   837                           ; 4 bytes @ 0x14
   838  0000B5                     	ds	7
   839  0000BC                     sendVSCPFrame@id:
   840                           	opt stack 0
   841                           
   842                           ; 4 bytes @ 0x1B
   843  0000BC                     	ds	4
   844  0000C0                     ??_vscp_handleProtocolEvent:
   845  0000C0                     ??_vscp_doOneSecondWork:
   846  0000C0                     ___fldiv@cntr:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x1F
   850  0000C0                     	ds	1
   851  0000C1                     ___fldiv@f3:
   852                           	opt stack 0
   853                           
   854                           ; 4 bytes @ 0x20
   855  0000C1                     	ds	4
   856  0000C5                     ___fldiv@exp:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x24
   860  0000C5                     	ds	1
   861  0000C6                     ___fldiv@sign:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x25
   865  0000C6                     	ds	1
   866  0000C7                     ?_exp:
   867                           	opt stack 0
   868  0000C7                     ?_log:
   869                           	opt stack 0
   870  0000C7                     ?_Celsius2Fahrenheit:
   871                           	opt stack 0
   872  0000C7                     ?___asfldiv:
   873                           	opt stack 0
   874  0000C7                     vscp_handleProtocolEvent@page_save:
   875                           	opt stack 0
   876  0000C7                     ___asfldiv@f1p:
   877                           	opt stack 0
   878  0000C7                     Celsius2Fahrenheit@tc:
   879                           	opt stack 0
   880  0000C7                     exp@x:
   881                           	opt stack 0
   882  0000C7                     log@x:
   883                           	opt stack 0
   884                           
   885                           ; 4 bytes @ 0x26
   886  0000C7                     	ds	2
   887  0000C9                     vscp_handleProtocolEvent@page_save_1167:
   888                           	opt stack 0
   889  0000C9                     ___asfldiv@f2:
   890                           	opt stack 0
   891                           
   892                           ; 4 bytes @ 0x28
   893  0000C9                     	ds	2
   894  0000CB                     ?_setEventData:
   895                           	opt stack 0
   896  0000CB                     vscp_handleProtocolEvent@offset:
   897                           	opt stack 0
   898  0000CB                     setEventData@v:
   899                           	opt stack 0
   900  0000CB                     _exp$2284:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x2A
   904  0000CB                     	ds	1
   905  0000CC                     vscp_handleProtocolEvent@pos:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x2B
   909  0000CC                     	ds	1
   910  0000CD                     setEventData@unit:
   911                           	opt stack 0
   912  0000CD                     vscp_handleProtocolEvent@bytes:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x2C
   916  0000CD                     	ds	1
   917  0000CE                     vscp_handleProtocolEvent@len:
   918                           	opt stack 0
   919  0000CE                     setEventData@newval:
   920                           	opt stack 0
   921                           
   922                           ; 4 bytes @ 0x2D
   923  0000CE                     	ds	1
   924  0000CF                     vscp_handleProtocolEvent@pos_1156:
   925                           	opt stack 0
   926  0000CF                     exp@exponent:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x2E
   930  0000CF                     	ds	1
   931  0000D0                     vscp_handleProtocolEvent@len_1157:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x2F
   935  0000D0                     	ds	1
   936  0000D1                     vscp_handleProtocolEvent@bytes_this_time:
   937                           	opt stack 0
   938  0000D1                     exp@sign:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x30
   942  0000D1                     	ds	1
   943  0000D2                     ??_doWork:
   944  0000D2                     vscp_handleProtocolEvent@cb:
   945                           	opt stack 0
   946  0000D2                     setEventData@ival:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x31
   950  0000D2                     	ds	1
   951  0000D3                     vscp_handleProtocolEvent@i_1166:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x32
   955  0000D3                     	ds	1
   956  0000D4                     ??_handle_sync:
   957  0000D4                     ??_doOneSecondWork:
   958  0000D4                     vscp_handleProtocolEvent@k:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x33
   962  0000D4                     	ds	1
   963  0000D5                     vscp_handleProtocolEvent@i_1155:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x34
   967  0000D5                     	ds	1
   968  0000D6                     doOneSecondWork@tmp:
   969                           	opt stack 0
   970  0000D6                     handle_sync@i:
   971                           	opt stack 0
   972  0000D6                     vscp_handleProtocolEvent@byte:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x35
   976  0000D6                     	ds	1
   977  0000D7                     doOneSecondWork@i:
   978                           	opt stack 0
   979  0000D7                     vscp_handleProtocolEvent@bytes_1162:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x36
   983  0000D7                     	ds	2
   984  0000D9                     vscp_handleProtocolEvent@i_1158:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x38
   988  0000D9                     	ds	1
   989  0000DA                     vscp_handleProtocolEvent@i:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x39
   993  0000DA                     	ds	1
   994  0000DB                     vscp_handleProtocolEvent@j:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x3A
   998  0000DB                     	ds	5
   999  0000E0                     main@i:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x3F
  1003  0000E0                     	ds	1
  1004                           tblptru	equ	0xFF8
  1005                           tblptrh	equ	0xFF7
  1006                           tblptrl	equ	0xFF6
  1007                           tablat	equ	0xFF5
  1008                           prodh	equ	0xFF4
  1009                           prodl	equ	0xFF3
  1010                           intcon	equ	0xFF2
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           indf1	equ	0xFE7
  1014                           postdec1	equ	0xFE5
  1015                           fsr1h	equ	0xFE2
  1016                           fsr1l	equ	0xFE1
  1017                           indf2	equ	0xFDF
  1018                           postinc2	equ	0xFDE
  1019                           postdec2	equ	0xFDD
  1020                           plusw2	equ	0xFDB
  1021                           fsr2h	equ	0xFDA
  1022                           fsr2l	equ	0xFD9
  1023                           status	equ	0xFD8
  1024                           
  1025                           	psect	cstackCOMRAM
  1026  000001                     __pcstackCOMRAM:
  1027                           	opt stack 0
  1028  000001                     ?i1_WriteTimer0:
  1029                           	opt stack 0
  1030  000001                     i1WriteTimer0@timer0:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x0
  1034  000001                     	ds	2
  1035  000003                     i1WriteTimer0@timer:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x2
  1039  000003                     	ds	2
  1040  000005                     ??_interrupt_at_low_vector:
  1041                           
  1042                           ; 0 bytes @ 0x4
  1043  000005                     	ds	9
  1044  00000E                     ?_WriteTimer0:
  1045                           	opt stack 0
  1046  00000E                     ?_writeEEPROM:
  1047                           	opt stack 0
  1048  00000E                     ?_OpenADC:
  1049                           	opt stack 0
  1050  00000E                     ?__CANIDToRegs:
  1051                           	opt stack 0
  1052  00000E                     ?__RegsToCANID:
  1053                           	opt stack 0
  1054  00000E                     ??_vscp_getMDF_URL:
  1055  00000E                     ?___flge:
  1056                           	opt stack 0
  1057  00000E                     ?_readEEPROM:
  1058                           	opt stack 0
  1059  00000E                     ?___lbmod:
  1060                           	opt stack 0
  1061  00000E                     ?__ECANPointBuffer:
  1062                           	opt stack 0
  1063  00000E                     ?___flpack:
  1064                           	opt stack 0
  1065  00000E                     ?_frexp:
  1066                           	opt stack 0
  1067  00000E                     ?_vscp_getFamilyCode:
  1068                           	opt stack 0
  1069  00000E                     ?_vscp_getFamilyType:
  1070                           	opt stack 0
  1071  00000E                     ?___flneg:
  1072                           	opt stack 0
  1073  00000E                     vscp_getMatrixInfo@pData:
  1074                           	opt stack 0
  1075  00000E                     ECANSetOperationMode@mode:
  1076                           	opt stack 0
  1077  00000E                     OpenADC@config2:
  1078                           	opt stack 0
  1079  00000E                     OpenTimer0@config:
  1080                           	opt stack 0
  1081  00000E                     ___lbmod@divisor:
  1082                           	opt stack 0
  1083  00000E                     __CANIDToRegs@ptr:
  1084                           	opt stack 0
  1085  00000E                     __RegsToCANID@ptr:
  1086                           	opt stack 0
  1087  00000E                     writeEEPROM@address:
  1088                           	opt stack 0
  1089  00000E                     readEEPROM@address:
  1090                           	opt stack 0
  1091  00000E                     WriteTimer0@timer0:
  1092                           	opt stack 0
  1093  00000E                     ___flpack@arg:
  1094                           	opt stack 0
  1095  00000E                     ___flge@ff1:
  1096                           	opt stack 0
  1097  00000E                     ___flneg@f1:
  1098                           	opt stack 0
  1099  00000E                     frexp@value:
  1100                           	opt stack 0
  1101                           
  1102                           ; 4 bytes @ 0xD
  1103  00000E                     	ds	1
  1104  00000F                     vscp_getMDF_URL@idx:
  1105                           	opt stack 0
  1106  00000F                     vscp_getMatrixInfo@i:
  1107                           	opt stack 0
  1108  00000F                     OpenADC@portconfig:
  1109                           	opt stack 0
  1110  00000F                     ___lbmod@dividend:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0xE
  1114  00000F                     	ds	1
  1115  000010                     ??_OpenADC:
  1116  000010                     __RegsToCANID@val:
  1117                           	opt stack 0
  1118  000010                     writeEEPROM@data:
  1119                           	opt stack 0
  1120  000010                     ___lbmod@counter:
  1121                           	opt stack 0
  1122  000010                     WriteTimer0@timer:
  1123                           	opt stack 0
  1124  000010                     __CANIDToRegs@val:
  1125                           	opt stack 0
  1126                           
  1127                           ; 4 bytes @ 0xF
  1128  000010                     	ds	1
  1129  000011                     ?_vscp_setGUID:
  1130                           	opt stack 0
  1131  000011                     ?_vscp_setUserID:
  1132                           	opt stack 0
  1133  000011                     ?_vscp_setManufacturerId:
  1134                           	opt stack 0
  1135  000011                     init_app_eeprom@i:
  1136                           	opt stack 0
  1137  000011                     vscp_setGUID@data:
  1138                           	opt stack 0
  1139  000011                     vscp_setUserID@data:
  1140                           	opt stack 0
  1141  000011                     vscp_setManufacturerId@data:
  1142                           	opt stack 0
  1143  000011                     vscp_goBootloaderMode@algorithm:
  1144                           	opt stack 0
  1145  000011                     vscp_writeNicknamePermanent@nickname:
  1146                           	opt stack 0
  1147  000011                     vscp_setSegmentCRC@crc:
  1148                           	opt stack 0
  1149  000011                     vscp_setControlByte@ctrl:
  1150                           	opt stack 0
  1151  000011                     __RegsToCANID@type:
  1152                           	opt stack 0
  1153  000011                     __ECANPointBuffer@b:
  1154                           	opt stack 0
  1155  000011                     readEEPROM@data:
  1156                           	opt stack 0
  1157  000011                     ___lbmod@rem:
  1158                           	opt stack 0
  1159                           
  1160                           ; 1 bytes @ 0x10
  1161  000011                     	ds	1
  1162  000012                     ??__RegsToCANID:
  1163  000012                     ?_getCalibrationValue:
  1164                           	opt stack 0
  1165  000012                     ?___wmul:
  1166                           	opt stack 0
  1167  000012                     vscp_readAppReg@pos:
  1168                           	opt stack 0
  1169  000012                     vscp_getGUID@idx:
  1170                           	opt stack 0
  1171  000012                     vscp_setGUID@idx:
  1172                           	opt stack 0
  1173  000012                     vscp_getUserID@idx:
  1174                           	opt stack 0
  1175  000012                     vscp_setUserID@idx:
  1176                           	opt stack 0
  1177  000012                     vscp_getManufacturerId@idx:
  1178                           	opt stack 0
  1179  000012                     vscp_setManufacturerId@idx:
  1180                           	opt stack 0
  1181  000012                     vscp_handleDropNickname@bytes:
  1182                           	opt stack 0
  1183  000012                     OpenADC@config:
  1184                           	opt stack 0
  1185  000012                     ___flpack@exp:
  1186                           	opt stack 0
  1187  000012                     __ECANPointBuffer@pt:
  1188                           	opt stack 0
  1189  000012                     frexp@eptr:
  1190                           	opt stack 0
  1191  000012                     ___wmul@multiplier:
  1192                           	opt stack 0
  1193  000012                     ___flge@ff2:
  1194                           	opt stack 0
  1195                           
  1196                           ; 4 bytes @ 0x11
  1197  000012                     	ds	1
  1198  000013                     ??_vscp_readStdReg:
  1199  000013                     vscp_readAppReg@reg:
  1200                           	opt stack 0
  1201  000013                     ___flpack@sign:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x12
  1205  000013                     	ds	1
  1206  000014                     ??_getCalibrationValue:
  1207  000014                     ??___flpack:
  1208  000014                     ??_frexp:
  1209  000014                     vscp_readAppReg@rv:
  1210                           	opt stack 0
  1211  000014                     __CANIDToRegs@type:
  1212                           	opt stack 0
  1213  000014                     __RegsToCANID@Value:
  1214                           	opt stack 0
  1215  000014                     ___wmul@multiplicand:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x13
  1219  000014                     	ds	1
  1220  000015                     ??__CANIDToRegs:
  1221  000015                     ?_ECANReceiveMessage:
  1222                           	opt stack 0
  1223  000015                     ECANReceiveMessage@data:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x14
  1227  000015                     	ds	1
  1228  000016                     ECANReceiveMessage@dataLen:
  1229                           	opt stack 0
  1230  000016                     ___wmul@product:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x15
  1234  000016                     	ds	1
  1235  000017                     ECANReceiveMessage@msgFlags:
  1236                           	opt stack 0
  1237  000017                     __CANIDToRegs@Value:
  1238                           	opt stack 0
  1239  000017                     getCalibrationValue@cal:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x16
  1243  000017                     	ds	1
  1244  000018                     ??_writeCoeffs2Ram:
  1245  000018                     ?_ECANSendMessage:
  1246                           	opt stack 0
  1247  000018                     ?___awtofl:
  1248                           	opt stack 0
  1249  000018                     ?___lwtofl:
  1250                           	opt stack 0
  1251  000018                     ECANReceiveMessage@savedPtr:
  1252                           	opt stack 0
  1253  000018                     ___awtofl@c:
  1254                           	opt stack 0
  1255  000018                     ___lwtofl@c:
  1256                           	opt stack 0
  1257  000018                     ECANSendMessage@id:
  1258                           	opt stack 0
  1259  000018                     vscp_readStdReg@code:
  1260                           	opt stack 0
  1261                           
  1262                           ; 4 bytes @ 0x17
  1263  000018                     	ds	1
  1264  000019                     getCalibrationValue@i:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x18
  1268  000019                     	ds	1
  1269  00001A                     ECANReceiveMessage@id:
  1270                           	opt stack 0
  1271  00001A                     writeCoeffs2Ram@c:
  1272                           	opt stack 0
  1273                           
  1274                           ; 3 bytes @ 0x19
  1275  00001A                     	ds	1
  1276  00001B                     ECANReceiveMessage@i:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x1A
  1280  00001B                     	ds	1
  1281  00001C                     ECANSendMessage@data:
  1282                           	opt stack 0
  1283  00001C                     ECANReceiveMessage@mode:
  1284                           	opt stack 0
  1285  00001C                     vscp_readStdReg@code_1140:
  1286                           	opt stack 0
  1287                           
  1288                           ; 4 bytes @ 0x1B
  1289  00001C                     	ds	1
  1290  00001D                     ECANSendMessage@dataLen:
  1291                           	opt stack 0
  1292  00001D                     ECANReceiveMessage@temp:
  1293                           	opt stack 0
  1294  00001D                     ___awtofl@sign:
  1295                           	opt stack 0
  1296  00001D                     writeCoeffs2Ram@i:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x1C
  1300  00001D                     	ds	1
  1301  00001E                     ?___flmul:
  1302                           	opt stack 0
  1303  00001E                     ECANSendMessage@msgFlags:
  1304                           	opt stack 0
  1305  00001E                     ECANReceiveMessage@ptr:
  1306                           	opt stack 0
  1307  00001E                     ___flmul@f1:
  1308                           	opt stack 0
  1309                           
  1310                           ; 4 bytes @ 0x1D
  1311  00001E                     	ds	1
  1312  00001F                     ??_ECANSendMessage:
  1313  00001F                     writeCoeffs2Ram@j:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x1E
  1317  00001F                     	ds	1
  1318  000020                     ?_getCANFrame:
  1319                           	opt stack 0
  1320  000020                     getCANFrame@pdlc:
  1321                           	opt stack 0
  1322  000020                     vscp_readStdReg@idx:
  1323                           	opt stack 0
  1324  000020                     ECANSendMessage@pb:
  1325                           	opt stack 0
  1326                           
  1327                           ; 18 bytes @ 0x1F
  1328  000020                     	ds	1
  1329  000021                     ?_vscp_writeAppReg:
  1330                           	opt stack 0
  1331  000021                     init_app_ram@i:
  1332                           	opt stack 0
  1333  000021                     vscp_writeAppReg@val:
  1334                           	opt stack 0
  1335  000021                     getCANFrame@pdata:
  1336                           	opt stack 0
  1337  000021                     vscp_readStdReg@idx_1141:
  1338                           	opt stack 0
  1339                           
  1340                           ; 1 bytes @ 0x20
  1341  000021                     	ds	1
  1342  000022                     ?_vscp_writeStdReg:
  1343                           	opt stack 0
  1344  000022                     vscp_writeAppReg@pos:
  1345                           	opt stack 0
  1346  000022                     getCANFrame@pid:
  1347                           	opt stack 0
  1348  000022                     vscp_readStdReg@rv:
  1349                           	opt stack 0
  1350  000022                     vscp_writeStdReg@value:
  1351                           	opt stack 0
  1352  000022                     ___flmul@f2:
  1353                           	opt stack 0
  1354                           
  1355                           ; 4 bytes @ 0x21
  1356  000022                     	ds	1
  1357  000023                     ??_vscp_writeStdReg:
  1358  000023                     vscp_writeAppReg@reg:
  1359                           	opt stack 0
  1360  000023                     getCANFrame@flags:
  1361                           	opt stack 0
  1362  000023                     vscp_readStdReg@reg:
  1363                           	opt stack 0
  1364                           
  1365                           ; 1 bytes @ 0x22
  1366  000023                     	ds	1
  1367  000024                     ?_getVSCPFrame:
  1368                           	opt stack 0
  1369  000024                     vscp_writeAppReg@rv:
  1370                           	opt stack 0
  1371  000024                     getVSCPFrame@pvscptype:
  1372                           	opt stack 0
  1373  000024                     vscp_readRegister@reg:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x23
  1377  000024                     	ds	1
  1378  000025                     getVSCPFrame@pNodeId:
  1379                           	opt stack 0
  1380                           
  1381                           ; 1 bytes @ 0x24
  1382  000025                     	ds	1
  1383  000026                     getVSCPFrame@pPriority:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x25
  1387  000026                     	ds	1
  1388  000027                     getVSCPFrame@pSize:
  1389                           	opt stack 0
  1390  000027                     vscp_writeStdReg@rv:
  1391                           	opt stack 0
  1392                           
  1393                           ; 1 bytes @ 0x26
  1394  000027                     	ds	1
  1395  000028                     getVSCPFrame@pData:
  1396                           	opt stack 0
  1397  000028                     vscp_writeStdReg@reg:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x27
  1401  000028                     	ds	1
  1402  000029                     ??_getVSCPFrame:
  1403  000029                     ?_vscp_writeRegister:
  1404                           	opt stack 0
  1405  000029                     vscp_writeRegister@value:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x28
  1409  000029                     	ds	1
  1410  00002A                     vscp_writeRegister@reg:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x29
  1414  00002A                     	ds	3
  1415  00002D                     getVSCPFrame@pvscpclass:
  1416                           	opt stack 0
  1417  00002D                     ___flmul@exp:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x2C
  1421  00002D                     	ds	1
  1422  00002E                     getVSCPFrame@id:
  1423                           	opt stack 0
  1424  00002E                     ___flmul@f3_as_product:
  1425                           	opt stack 0
  1426                           
  1427                           ; 4 bytes @ 0x2D
  1428  00002E                     	ds	4
  1429  000032                     ECANSendMessage@mode:
  1430                           	opt stack 0
  1431  000032                     vscp_getEvent@rv:
  1432                           	opt stack 0
  1433  000032                     ___flmul@cntr:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x31
  1437  000032                     	ds	1
  1438  000033                     ECANSendMessage@buffers:
  1439                           	opt stack 0
  1440  000033                     ___flmul@sign:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x32
  1444  000033                     	ds	1
  1445  000034                     ??___fladd:
  1446  000034                     ?___asflmul:
  1447                           	opt stack 0
  1448  000034                     ?___fltol:
  1449                           	opt stack 0
  1450  000034                     ECANSendMessage@j:
  1451                           	opt stack 0
  1452  000034                     ___asflmul@multiplicand:
  1453                           	opt stack 0
  1454  000034                     ___fltol@f1:
  1455                           	opt stack 0
  1456                           
  1457                           ; 4 bytes @ 0x33
  1458  000034                     	ds	1
  1459  000035                     ECANSendMessage@tempBSEL0:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x34
  1463  000035                     	ds	1
  1464  000036                     ECANSendMessage@tempPtr:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x35
  1468  000036                     	ds	2
  1469  000038                     ??___fltol:
  1470  000038                     ECANSendMessage@temp:
  1471                           	opt stack 0
  1472  000038                     ___asflmul@mp:
  1473                           	opt stack 0
  1474  000038                     ___fladd@sign:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x37
  1478  000038                     	ds	1
  1479  000039                     ECANSendMessage@i:
  1480                           	opt stack 0
  1481  000039                     ___fladd@exp2:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x38
  1485  000039                     	ds	1
  1486  00003A                     ___fladd@exp1:
  1487                           	opt stack 0
  1488  00003A                     ECANSendMessage@ptr:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x39
  1492  00003A                     	ds	1
  1493  00003B                     ?_Celsius2Kelvin:
  1494                           	opt stack 0
  1495  00003B                     ?_eval_poly:
  1496                           	opt stack 0
  1497  00003B                     ?___asfladd:
  1498                           	opt stack 0
  1499  00003B                     ?___asflsub:
  1500                           	opt stack 0
  1501  00003B                     ___asfladd@f1p:
  1502                           	opt stack 0
  1503  00003B                     ___asflsub@f1p:
  1504                           	opt stack 0
  1505  00003B                     Celsius2Kelvin@tc:
  1506                           	opt stack 0
  1507  00003B                     eval_poly@x:
  1508                           	opt stack 0
  1509                           
  1510                           ; 4 bytes @ 0x3A
  1511  00003B                     	ds	1
  1512  00003C                     ?_sendCANFrame:
  1513                           	opt stack 0
  1514  00003C                     ___fltol@sign1:
  1515                           	opt stack 0
  1516  00003C                     sendCANFrame@id:
  1517                           	opt stack 0
  1518                           
  1519                           ; 4 bytes @ 0x3B
  1520  00003C                     	ds	1
  1521  00003D                     ___fltol@exp1:
  1522                           	opt stack 0
  1523  00003D                     ___asfladd@f2:
  1524                           	opt stack 0
  1525  00003D                     ___asflsub@f2:
  1526                           	opt stack 0
  1527                           
  1528                           ; 4 bytes @ 0x3C
  1529  00003D                     	ds	1
  1530  00003E                     ?___aldiv:
  1531                           	opt stack 0
  1532  00003E                     ___aldiv@dividend:
  1533                           	opt stack 0
  1534                           
  1535                           ; 4 bytes @ 0x3D
  1536  00003E                     	ds	1
  1537  00003F                     eval_poly@d:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x3E
  1541  00003F                     	ds	1
  1542  000040                     sendCANFrame@dlc:
  1543                           	opt stack 0
  1544  000040                     eval_poly@n:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x3F
  1548  000040                     	ds	1
  1549  000041                     sendCANFrame@pdata:
  1550                           	opt stack 0
  1551                           
  1552                           ; 1 bytes @ 0x40
  1553  000041                     	ds	1
  1554  000042                     ??_eval_poly:
  1555  000042                     ___aldiv@divisor:
  1556                           	opt stack 0
  1557                           
  1558                           ; 4 bytes @ 0x41
  1559  000042                     	ds	1
  1560  000043                     ??_ldexp:
  1561  000043                     vscp_sendEvent@rv:
  1562                           	opt stack 0
  1563  000043                     log@exponent:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x42
  1567  000043                     	ds	1
  1568  000044                     ??_sendTempEvent:
  1569  000044                     ?_vscp_sendHeartBeat:
  1570                           	opt stack 0
  1571  000044                     ??_vscp_newNodeOnline:
  1572  000044                     vscp_sendHeartBeat@subzone:
  1573                           	opt stack 0
  1574                           
  1575                           ; 1 bytes @ 0x43
  1576  000044                     	ds	1
  1577  000045                     sendTempEvent@i:
  1578                           	opt stack 0
  1579  000045                     vscp_sendHeartBeat@zone:
  1580                           	opt stack 0
  1581                           
  1582                           ; 1 bytes @ 0x44
  1583  000045                     	ds	1
  1584  000046                     tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           prodh	equ	0xFF4
  1589                           prodl	equ	0xFF3
  1590                           intcon	equ	0xFF2
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           indf1	equ	0xFE7
  1594                           postdec1	equ	0xFE5
  1595                           fsr1h	equ	0xFE2
  1596                           fsr1l	equ	0xFE1
  1597                           indf2	equ	0xFDF
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           plusw2	equ	0xFDB
  1601                           fsr2h	equ	0xFDA
  1602                           fsr2l	equ	0xFD9
  1603                           status	equ	0xFD8
  1604                           
  1605                           ; 0 bytes @ 0x45
  1606 ;;
  1607 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1608 ;;
  1609 ;; *************** function _main *****************
  1610 ;; Defined at:
  1611 ;;		line 302 in file "../main.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  i               1   63[BANK0 ] unsigned char 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;		None               void
  1618 ;; Registers used:
  1619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : E/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1625 ;;      Params:         0       0       0       0       0       0       0
  1626 ;;      Locals:         0       1       0       0       0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0
  1628 ;;      Totals:         0       1       0       0       0       0       0
  1629 ;;Total ram usage:        1 bytes
  1630 ;; Hardware stack levels required when called:    9
  1631 ;; This function calls:
  1632 ;;		_init
  1633 ;;		_vscp_check_pstorage
  1634 ;;		_init_app_eeprom
  1635 ;;		_vscp_init
  1636 ;;		_writeEEPROM
  1637 ;;		_vscp_getEvent
  1638 ;;		_vscp_goActiveState
  1639 ;;		_vscp_handleProbeState
  1640 ;;		_vscp_handleProtocolEvent
  1641 ;;		_handle_sync
  1642 ;;		_vscp_error
  1643 ;;		_doOneSecondWork
  1644 ;;		_vscp_doOneSecondWork
  1645 ;;		_doWork
  1646 ;; This function is called by:
  1647 ;;		Startup code after reset
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text0
  1652  004074                     __ptext0:
  1653                           	opt stack 0
  1654  004074                     _main:
  1655                           	opt stack 21
  1656                           
  1657                           ;main.c: 303: unsigned char i;
  1658                           ;main.c: 305: init();
  1659                           
  1660                           ;incstack = 0
  1661                           ;incstack = 0
  1662  004074  EC38  F028         	call	_init	;wreg free
  1663                           
  1664                           ;main.c: 309: if (!vscp_check_pstorage()) {
  1665  004078  EC9C  F029         	call	_vscp_check_pstorage	;wreg free
  1666  00407C  0900               	iorlw	0
  1667  00407E  B4D8               	btfsc	status,2,c
  1668                           
  1669                           ;main.c: 312: init_app_eeprom();
  1670  004080  ECDA  F011         	call	_init_app_eeprom	;wreg free
  1671                           
  1672                           ;main.c: 314: }
  1673                           ;main.c: 316: vscp_init();
  1674  004084  EC97  F027         	call	_vscp_init	;wreg free
  1675  004088                     l168:
  1676  004088  0004               	clrwdt		;# 
  1677                           
  1678                           ;main.c: 322: if ((vscp_initbtncnt > 250) &&
  1679                           ;main.c: 323: (0x01 != vscp_node_state)) {
  1680  00408A  0EFA               	movlw	250
  1681  00408C  0100               	movlb	0	; () banked
  1682  00408E  6583               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1683  004090  D00C               	goto	l13748
  1684                           
  1685                           ; BSR set to: 0
  1686  004092  0585               	decf	_vscp_node_state& (0+255),w,b
  1687  004094  E00A               	bz	l13748
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 326: vscp_nickname = 0xff;
  1691  004096  6984               	setf	_vscp_nickname& (0+255),b
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;main.c: 327: writeEEPROM(0x01, 0xff);
  1695  004098  6A0F               	clrf	?_writeEEPROM+1,c
  1696  00409A  0E01               	movlw	1
  1697  00409C  6E0E               	movwf	?_writeEEPROM,c
  1698  00409E  0EFF               	movlw	255
  1699  0040A0  6810               	setf	?_writeEEPROM+2,c
  1700  0040A2  EC65  F029         	call	_writeEEPROM	;wreg free
  1701                           
  1702                           ;main.c: 328: vscp_init();
  1703  0040A6  EC97  F027         	call	_vscp_init	;wreg free
  1704  0040AA                     l13748:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 330: }
  1708                           ;main.c: 334: vscp_imsg.flags = 0;
  1709  0040AA  6B86               	clrf	_vscp_imsg& (0+255),b
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;main.c: 335: vscp_getEvent();
  1713  0040AC  EC15  F029         	call	_vscp_getEvent	;wreg free
  1714                           
  1715                           ;main.c: 338: switch (vscp_node_state) {
  1716  0040B0  D024               	goto	l13778
  1717  0040B2                     l13752:
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 343: if (0xff == vscp_nickname) {
  1721  0040B2  2984               	incf	_vscp_nickname& (0+255),w,b
  1722  0040B4  E103               	bnz	l13756
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;main.c: 345: vscp_node_state = 0x01;
  1726  0040B6  0E01               	movlw	1
  1727  0040B8  6F85               	movwf	_vscp_node_state& (0+255),b
  1728                           
  1729                           ;main.c: 346: }
  1730  0040BA  D02B               	goto	l13780
  1731  0040BC                     l13756:
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;main.c: 347: else {
  1735                           ;main.c: 349: vscp_node_state = 0x03;
  1736  0040BC  0E03               	movlw	3
  1737  0040BE  6F85               	movwf	_vscp_node_state& (0+255),b
  1738  0040C0                     l13758:
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 350: vscp_goActiveState();
  1742  0040C0  ECD0  F029         	call	_vscp_goActiveState	;wreg free
  1743  0040C4  D026               	goto	l13780
  1744  0040C6                     l13760:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;main.c: 355: vscp_handleProbeState();
  1748  0040C6  EC13  F021         	call	_vscp_handleProbeState	;wreg free
  1749                           
  1750                           ;main.c: 356: break;
  1751  0040CA  D023               	goto	l13780
  1752  0040CC                     l177:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;main.c: 365: if (vscp_imsg.flags & 0x80) {
  1756  0040CC  AF86               	btfss	_vscp_imsg& (0+255),7,b
  1757  0040CE  D021               	goto	l13780
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 367: if ( 0 == vscp_imsg.vscp_class ) {
  1761  0040D0  5189               	movf	(_vscp_imsg+3)& (0+255),w,b
  1762  0040D2  1188               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1763  0040D4  E103               	bnz	l13768
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;main.c: 370: vscp_handleProtocolEvent();
  1767  0040D6  EC68  F015         	call	_vscp_handleProtocolEvent	;wreg free
  1768                           
  1769                           ;main.c: 372: }
  1770  0040DA  D01B               	goto	l13780
  1771  0040DC                     l13768:
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;main.c: 373: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1775                           ;main.c: 374: ( 26 == vscp_imsg.vscp_type ) ) {
  1776  0040DC  5188               	movf	(_vscp_imsg+2)& (0+255),w,b
  1777  0040DE  0A1E               	xorlw	30
  1778  0040E0  1189               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1779  0040E2  E117               	bnz	l13780
  1780                           
  1781                           ; BSR set to: 0
  1782  0040E4  518A               	movf	(_vscp_imsg+4)& (0+255),w,b
  1783  0040E6  0A1A               	xorlw	26
  1784  0040E8  E114               	bnz	l13780
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;main.c: 375: handle_sync();
  1788  0040EA  EC0F  F025         	call	_handle_sync	;wreg free
  1789  0040EE  D011               	goto	l13780
  1790  0040F0                     l13774:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;main.c: 382: vscp_error();
  1794  0040F0  ECBB  F02A         	call	_vscp_error	;wreg free
  1795                           
  1796                           ;main.c: 383: break;
  1797  0040F4  D00E               	goto	l13780
  1798  0040F6                     l183:
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;main.c: 386: vscp_node_state = 0x00;
  1802  0040F6  6B85               	clrf	_vscp_node_state& (0+255),b
  1803                           
  1804                           ;main.c: 387: break;
  1805  0040F8  D00C               	goto	l13780
  1806  0040FA                     l13778:
  1807  0040FA  0100               	movlb	0	; () banked
  1808  0040FC  5185               	movf	_vscp_node_state& (0+255),w,b
  1809                           
  1810                           ; Switch size 1, requested type "space"
  1811                           ; Number of cases is 5, Range of values is 0 to 4
  1812                           ; switch strategies available:
  1813                           ; Name         Instructions Cycles
  1814                           ; simple_byte           16     9 (average)
  1815                           ;	Chosen strategy is simple_byte
  1816  0040FE  E0D9               	bz	l13752
  1817  004100  0A01               	xorlw	1	; case 1
  1818  004102  E0E1               	bz	l13760
  1819  004104  0A03               	xorlw	3	; case 2
  1820  004106  E0DC               	bz	l13758
  1821  004108  0A01               	xorlw	1	; case 3
  1822  00410A  E0E0               	bz	l177
  1823  00410C  0A07               	xorlw	7	; case 4
  1824  00410E  E0F0               	bz	l13774
  1825  004110  D7F2               	goto	l183
  1826  004112                     l13780:
  1827                           
  1828                           ;main.c: 393: if ( measurement_clock > 1000 ) {
  1829  004112  0EE9               	movlw	233
  1830  004114  0100               	movlb	0	; () banked
  1831  004116  5D6C               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1832  004118  0E03               	movlw	3
  1833  00411A  596D               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1834  00411C  0E00               	movlw	0
  1835  00411E  596E               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1836  004120  0E00               	movlw	0
  1837  004122  596F               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1838  004124  E3B1               	bnc	l168
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;main.c: 395: measurement_clock = 0;
  1842  004126  6B6C               	clrf	_measurement_clock& (0+255),b	;volatile
  1843  004128  6B6D               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1844  00412A  6B6E               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1845  00412C  6B6F               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;main.c: 396: doOneSecondWork();
  1849  00412E  EC71  F01A         	call	_doOneSecondWork	;wreg free
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;main.c: 397: seconds++;
  1853  004132  2B80               	incf	_seconds& (0+255),f,b
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;main.c: 401: if (0x03 == vscp_node_state) {
  1857  004134  5185               	movf	_vscp_node_state& (0+255),w,b
  1858  004136  0A03               	xorlw	3
  1859  004138  E10D               	bnz	l13802
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;main.c: 402: for (i = 0; i < 6; i++) {
  1863  00413A  6BE0               	clrf	main@i& (0+255),b
  1864  00413C                     l13796:
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 403: seconds_temp[i]++;
  1868  00413C  0E00               	movlw	low _seconds_temp
  1869  00413E  0100               	movlb	0	; () banked
  1870  004140  25E0               	addwf	main@i& (0+255),w,b
  1871  004142  6ED9               	movwf	fsr2l,c
  1872  004144  6ADA               	clrf	fsr2h,c
  1873  004146  0E01               	movlw	high _seconds_temp
  1874  004148  22DA               	addwfc	fsr2h,f,c
  1875  00414A  2ADF               	incf	indf2,f,c
  1876                           
  1877                           ; BSR set to: 1
  1878  00414C  2BE0               	incf	main@i& (0+255),f,b
  1879                           
  1880                           ; BSR set to: 0
  1881  00414E  0E05               	movlw	5
  1882  004150  65E0               	cpfsgt	main@i& (0+255),b
  1883  004152  D7F4               	goto	l13796
  1884  004154                     l13802:
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 404: }
  1888                           ;main.c: 405: }
  1889                           ;main.c: 407: if (seconds > 60) {
  1890  004154  0E3C               	movlw	60
  1891  004156  6580               	cpfsgt	_seconds& (0+255),b
  1892  004158  D001               	goto	l13806
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 408: seconds = 0;
  1896  00415A  6B80               	clrf	_seconds& (0+255),b
  1897  00415C                     l13806:
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 409: }
  1901                           ;main.c: 412: vscp_doOneSecondWork();
  1902  00415C  EC03  F027         	call	_vscp_doOneSecondWork	;wreg free
  1903                           
  1904                           ;main.c: 415: doWork();
  1905  004160  ECB4  F009         	call	_doWork	;wreg free
  1906  004164  D791               	goto	l168
  1907  004166                     __end_of_main:
  1908                           	opt stack 0
  1909                           tblptru	equ	0xFF8
  1910                           tblptrh	equ	0xFF7
  1911                           tblptrl	equ	0xFF6
  1912                           tablat	equ	0xFF5
  1913                           prodh	equ	0xFF4
  1914                           prodl	equ	0xFF3
  1915                           intcon	equ	0xFF2
  1916                           postinc0	equ	0xFEE
  1917                           wreg	equ	0xFE8
  1918                           indf1	equ	0xFE7
  1919                           postdec1	equ	0xFE5
  1920                           fsr1h	equ	0xFE2
  1921                           fsr1l	equ	0xFE1
  1922                           indf2	equ	0xFDF
  1923                           postinc2	equ	0xFDE
  1924                           postdec2	equ	0xFDD
  1925                           plusw2	equ	0xFDB
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _doWork *****************
  1931 ;; Defined at:
  1932 ;;		line 430 in file "../main.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  temp            4   49[BANK1 ] unsigned char 
  1937 ;;  avarage         4   45[BANK1 ] unsigned char 
  1938 ;;  resistance      4   38[BANK1 ] unsigned char 
  1939 ;;  v               4   32[BANK1 ] unsigned char 
  1940 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1941 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1942 ;;  setpoint        2   43[BANK1 ] int 
  1943 ;;  B               2   36[BANK1 ] unsigned short 
  1944 ;;  i               1   53[BANK1 ] unsigned char 
  1945 ;;  j               1   42[BANK1 ] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;		None               void
  1948 ;; Registers used:
  1949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1950 ;; Tracked objects:
  1951 ;;		On entry : F/0
  1952 ;;		On exit  : E/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1955 ;;      Params:         0       0       0       0       0       0       0
  1956 ;;      Locals:         0       0      54       0       0       0       0
  1957 ;;      Temps:          0      14       0       0       0       0       0
  1958 ;;      Totals:         0      14      54       0       0       0       0
  1959 ;;Total ram usage:       68 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    7
  1962 ;; This function calls:
  1963 ;;		_writeEEPROM
  1964 ;;		_readEEPROM
  1965 ;;		_exp
  1966 ;;		_log
  1967 ;;		_getCalibrationValue
  1968 ;;		_vscp_sendEvent
  1969 ;;		___aldiv
  1970 ;;		___altofl
  1971 ;;		___asfladd
  1972 ;;		___fladd
  1973 ;;		___asfldiv
  1974 ;;		___fldiv
  1975 ;;		___flmul
  1976 ;;		___asflsub
  1977 ;;		___flsub
  1978 ;;		___fltol
  1979 ;;		___lwtofl
  1980 ;;		___wmul
  1981 ;; This function is called by:
  1982 ;;		_main
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text1
  1987  001368                     __ptext1:
  1988                           	opt stack 0
  1989  001368                     _doWork:
  1990                           	opt stack 22
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;main.c: 431: uint8_t i, j;
  1994                           ;main.c: 432: uint16_t B;
  1995                           ;main.c: 433: double avarage;
  1996                           ;main.c: 434: double resistance;
  1997                           ;main.c: 435: double Rinf;
  1998                           ;main.c: 436: double temp;
  1999                           ;main.c: 437: double v;
  2000                           ;main.c: 438: double calVoltage;
  2001                           ;main.c: 439: int setpoint;
  2002                           ;main.c: 441: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  2003                           ;main.c: 442: readEEPROM(0xF3));
  2004                           
  2005                           ;incstack = 0
  2006                           ;incstack = 0
  2007  001368  6A0F               	clrf	?_readEEPROM+1,c
  2008  00136A  0EF3               	movlw	243
  2009  00136C  6E0E               	movwf	?_readEEPROM,c
  2010  00136E  EC62  F02A         	call	_readEEPROM	;wreg free
  2011  001372  0100               	movlb	0	; () banked
  2012  001374  6FD2               	movwf	??_doWork& (0+255),b
  2013  001376  6A0F               	clrf	?_readEEPROM+1,c
  2014  001378  0EF2               	movlw	242
  2015  00137A  6E0E               	movwf	?_readEEPROM,c
  2016  00137C  EC62  F02A         	call	_readEEPROM	;wreg free
  2017  001380  6E19               	movwf	?___lwtofl+1,c
  2018  001382  0100               	movlb	0	; () banked
  2019  001384  51D2               	movf	??_doWork& (0+255),w,b
  2020  001386  6E18               	movwf	?___lwtofl,c
  2021  001388  ECEB  F028         	call	___lwtofl	;wreg free
  2022  00138C  C01B  F155         	movff	?___lwtofl+3,doWork@calVoltage+3
  2023  001390  C01A  F154         	movff	?___lwtofl+2,doWork@calVoltage+2
  2024  001394  C019  F153         	movff	?___lwtofl+1,doWork@calVoltage+1
  2025  001398  C018  F152         	movff	?___lwtofl,doWork@calVoltage
  2026                           
  2027                           ;main.c: 447: for (i = 0; i < 6; i++) {
  2028  00139C  0101               	movlb	1	; () banked
  2029  00139E  6B83               	clrf	doWork@i& (0+255),b
  2030  0013A0                     l13916:
  2031                           
  2032                           ; BSR set to: 1
  2033                           ;main.c: 449: if (adc_conversion_flags & 1 << i) {
  2034  0013A0  ECE9  F00D         	call	PL44	;call to abstracted procedure
  2035  0013A4  D002               	goto	u13024
  2036  0013A6                     u13025:
  2037  0013A6  90D8               	bcf	status,0,c
  2038  0013A8  37D3               	rlcf	(??_doWork+1)& (0+255),f,b
  2039  0013AA                     u13024:
  2040  0013AA  2FD2               	decfsz	??_doWork& (0+255),f,b
  2041  0013AC  D7FC               	goto	u13025
  2042  0013AE  51D3               	movf	(??_doWork+1)& (0+255),w,b
  2043  0013B0  157D               	andwf	_adc_conversion_flags& (0+255),w,b
  2044  0013B2  E101 D239          	bz	l13976
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 452: avarage = 0;
  2048  0013B6  0101               	movlb	1	; () banked
  2049  0013B8  6B7B               	clrf	doWork@avarage& (0+255),b
  2050  0013BA  6B7C               	clrf	(doWork@avarage+1)& (0+255),b
  2051  0013BC  6B7D               	clrf	(doWork@avarage+2)& (0+255),b
  2052  0013BE  6B7E               	clrf	(doWork@avarage+3)& (0+255),b
  2053                           
  2054                           ;main.c: 453: for (j = 0; j < 80; j++) {
  2055  0013C0  6B78               	clrf	doWork@j& (0+255),b
  2056  0013C2                     l13924:
  2057                           
  2058                           ; BSR set to: 1
  2059                           ;main.c: 454: avarage += ((uint16_t) adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  2060  0013C2  0E01               	movlw	high doWork@avarage
  2061  0013C4  6E3C               	movwf	?___asfladd+1,c
  2062  0013C6  0E7B               	movlw	low doWork@avarage
  2063  0013C8  6E3B               	movwf	?___asfladd,c
  2064  0013CA  90D8               	bcf	status,0,c
  2065  0013CC  3583               	rlcf	doWork@i& (0+255),w,b
  2066  0013CE  0100               	movlb	0	; () banked
  2067  0013D0  6FD2               	movwf	??_doWork& (0+255),b
  2068  0013D2  6BD3               	clrf	(??_doWork+1)& (0+255),b
  2069  0013D4  37D3               	rlcf	(??_doWork+1)& (0+255),f,b
  2070  0013D6  0101               	movlb	1	; () banked
  2071  0013D8  5178               	movf	doWork@j& (0+255),w,b
  2072  0013DA  0D0C               	mullw	12
  2073  0013DC  0E86               	movlw	low (_adc+1)
  2074  0013DE  24F3               	addwf	prodl,w,c
  2075  0013E0  0100               	movlb	0	; () banked
  2076  0013E2  6FD4               	movwf	(??_doWork+2)& (0+255),b
  2077  0013E4  0E01               	movlw	high (_adc+1)
  2078  0013E6  20F4               	addwfc	prodh,w,c
  2079  0013E8  6FD5               	movwf	(??_doWork+3)& (0+255),b
  2080  0013EA  51D2               	movf	??_doWork& (0+255),w,b
  2081  0013EC  25D4               	addwf	(??_doWork+2)& (0+255),w,b
  2082  0013EE  6ED9               	movwf	fsr2l,c
  2083  0013F0  51D3               	movf	(??_doWork+1)& (0+255),w,b
  2084  0013F2  21D5               	addwfc	(??_doWork+3)& (0+255),w,b
  2085  0013F4  6EDA               	movwf	fsr2h,c
  2086  0013F6  50DF               	movf	indf2,w,c
  2087  0013F8  6FD6               	movwf	(??_doWork+4)& (0+255),b
  2088  0013FA  90D8               	bcf	status,0,c
  2089  0013FC  0101               	movlb	1	; () banked
  2090  0013FE  3583               	rlcf	doWork@i& (0+255),w,b
  2091  001400  0100               	movlb	0	; () banked
  2092  001402  6FD7               	movwf	(??_doWork+5)& (0+255),b
  2093  001404  6BD8               	clrf	(??_doWork+6)& (0+255),b
  2094  001406  37D8               	rlcf	(??_doWork+6)& (0+255),f,b
  2095  001408  0101               	movlb	1	; () banked
  2096  00140A  5178               	movf	doWork@j& (0+255),w,b
  2097  00140C  0D0C               	mullw	12
  2098  00140E  0E85               	movlw	low _adc
  2099  001410  24F3               	addwf	prodl,w,c
  2100  001412  0100               	movlb	0	; () banked
  2101  001414  6FD9               	movwf	(??_doWork+7)& (0+255),b
  2102  001416  0E01               	movlw	high _adc
  2103  001418  20F4               	addwfc	prodh,w,c
  2104  00141A  6FDA               	movwf	(??_doWork+8)& (0+255),b
  2105  00141C  51D7               	movf	(??_doWork+5)& (0+255),w,b
  2106  00141E  25D9               	addwf	(??_doWork+7)& (0+255),w,b
  2107  001420  6ED9               	movwf	fsr2l,c
  2108  001422  51D8               	movf	(??_doWork+6)& (0+255),w,b
  2109  001424  21DA               	addwfc	(??_doWork+8)& (0+255),w,b
  2110  001426  6EDA               	movwf	fsr2h,c
  2111  001428  50DF               	movf	indf2,w,c
  2112  00142A  6E19               	movwf	?___lwtofl+1,c
  2113  00142C  51D6               	movf	(??_doWork+4)& (0+255),w,b
  2114  00142E  6E18               	movwf	?___lwtofl,c
  2115  001430  ECEB  F028         	call	___lwtofl	;wreg free
  2116  001434  C01B  F040         	movff	?___lwtofl+3,?___asfladd+5
  2117  001438  C01A  F03F         	movff	?___lwtofl+2,?___asfladd+4
  2118  00143C  C019  F03E         	movff	?___lwtofl+1,?___asfladd+3
  2119  001440  C018  F03D         	movff	?___lwtofl,?___asfladd+2
  2120  001444  EC69  F026         	call	___asfladd	;wreg free
  2121                           
  2122                           ; BSR set to: 0
  2123  001448  0101               	movlb	1	; () banked
  2124  00144A  2B78               	incf	doWork@j& (0+255),f,b
  2125                           
  2126                           ; BSR set to: 1
  2127  00144C  0E4F               	movlw	79
  2128  00144E  6578               	cpfsgt	doWork@j& (0+255),b
  2129  001450  D7B8               	goto	l13924
  2130                           
  2131                           ; BSR set to: 1
  2132                           ;main.c: 458: if (1) {
  2133  001452  0E01               	movlw	high doWork@avarage
  2134  001454  0100               	movlb	0	; () banked
  2135  001456  6FC8               	movwf	(?___asfldiv+1)& (0+255),b
  2136  001458  0E7B               	movlw	low doWork@avarage
  2137  00145A  6FC7               	movwf	?___asfldiv& (0+255),b
  2138  00145C  6BC9               	clrf	(?___asfldiv+2)& (0+255),b
  2139  00145E  6BCA               	clrf	(?___asfldiv+3)& (0+255),b
  2140  001460  0EA0               	movlw	160
  2141  001462  6FCB               	movwf	(?___asfldiv+4)& (0+255),b
  2142  001464  0E42               	movlw	66
  2143  001466  6FCC               	movwf	(?___asfldiv+5)& (0+255),b
  2144  001468  ECB7  F026         	call	___asfldiv	;wreg free
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;main.c: 466: B = (uint16_t) readEEPROM(2 * i + 0x4F)*256 +
  2148                           ;main.c: 467: readEEPROM(2 * i + 0x50);
  2149  00146C  0101               	movlb	1	; () banked
  2150  00146E  5183               	movf	doWork@i& (0+255),w,b
  2151  001470  0D02               	mullw	2
  2152  001472  0E50               	movlw	80
  2153  001474  24F3               	addwf	prodl,w,c
  2154  001476  6E0E               	movwf	?_readEEPROM,c
  2155  001478  0E00               	movlw	0
  2156  00147A  20F4               	addwfc	prodh,w,c
  2157  00147C  6E0F               	movwf	?_readEEPROM+1,c
  2158  00147E  EC62  F02A         	call	_readEEPROM	;wreg free
  2159  001482  0100               	movlb	0	; () banked
  2160  001484  6FD2               	movwf	??_doWork& (0+255),b
  2161  001486  0101               	movlb	1	; () banked
  2162  001488  5183               	movf	doWork@i& (0+255),w,b
  2163  00148A  0D02               	mullw	2
  2164  00148C  0E4F               	movlw	79
  2165  00148E  24F3               	addwf	prodl,w,c
  2166  001490  6E0E               	movwf	?_readEEPROM,c
  2167  001492  0E00               	movlw	0
  2168  001494  20F4               	addwfc	prodh,w,c
  2169  001496  6E0F               	movwf	?_readEEPROM+1,c
  2170  001498  EC62  F02A         	call	_readEEPROM	;wreg free
  2171  00149C  0101               	movlb	1	; () banked
  2172  00149E  6F73               	movwf	(doWork@B+1)& (0+255),b
  2173  0014A0  0100               	movlb	0	; () banked
  2174  0014A2  51D2               	movf	??_doWork& (0+255),w,b
  2175  0014A4  0101               	movlb	1	; () banked
  2176  0014A6  6F72               	movwf	doWork@B& (0+255),b
  2177                           
  2178                           ; BSR set to: 1
  2179                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2180  0014A8  0E33               	movlw	51
  2181  0014AA  0100               	movlb	0	; () banked
  2182  0014AC  6FB5               	movwf	(?___fldiv+4)& (0+255),b
  2183  0014AE  0E13               	movlw	19
  2184  0014B0  6FB6               	movwf	(?___fldiv+5)& (0+255),b
  2185  0014B2  0E95               	movlw	149
  2186  0014B4  6FB7               	movwf	(?___fldiv+6)& (0+255),b
  2187  0014B6  0EC3               	movlw	195
  2188  0014B8  6FB8               	movwf	(?___fldiv+7)& (0+255),b
  2189  0014BA  C172  F018         	movff	doWork@B,?___lwtofl
  2190  0014BE  C173  F019         	movff	doWork@B+1,?___lwtofl+1
  2191  0014C2  ECEB  F028         	call	___lwtofl	;wreg free
  2192  0014C6  C01B  F0B4         	movff	?___lwtofl+3,?___fldiv+3
  2193  0014CA  C01A  F0B3         	movff	?___lwtofl+2,?___fldiv+2
  2194  0014CE  C019  F0B2         	movff	?___lwtofl+1,?___fldiv+1
  2195  0014D2  C018  F0B1         	movff	?___lwtofl,?___fldiv
  2196  0014D6  EC39  F023         	call	___fldiv	;wreg free
  2197  0014DA  C0B4  F159         	movff	?___fldiv+3,_doWork$2278+3
  2198  0014DE  C0B3  F158         	movff	?___fldiv+2,_doWork$2278+2
  2199  0014E2  C0B2  F157         	movff	?___fldiv+1,_doWork$2278+1
  2200  0014E6  C0B1  F156         	movff	?___fldiv,_doWork$2278
  2201                           
  2202                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2203  0014EA  C156  F0C7         	movff	_doWork$2278,?_exp
  2204  0014EE  C157  F0C8         	movff	_doWork$2278+1,?_exp+1
  2205  0014F2  C158  F0C9         	movff	_doWork$2278+2,?_exp+2
  2206  0014F6  C159  F0CA         	movff	_doWork$2278+3,?_exp+3
  2207  0014FA  EC7E  F019         	call	_exp	;wreg free
  2208  0014FE  C0CA  F15D         	movff	?_exp+3,_doWork$2279+3
  2209  001502  C0C9  F15C         	movff	?_exp+2,_doWork$2279+2
  2210  001506  C0C8  F15B         	movff	?_exp+1,_doWork$2279+1
  2211  00150A  C0C7  F15A         	movff	?_exp,_doWork$2279
  2212                           
  2213                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2214  00150E  C15A  F01E         	movff	_doWork$2279,?___flmul
  2215  001512  C15B  F01F         	movff	_doWork$2279+1,?___flmul+1
  2216  001516  C15C  F020         	movff	_doWork$2279+2,?___flmul+2
  2217  00151A  C15D  F021         	movff	_doWork$2279+3,?___flmul+3
  2218  00151E  DB69               	call	PL70	;call to abstracted procedure
  2219  001520  ECB3  F020         	call	___flmul	;wreg free
  2220  001524  C021  F151         	movff	?___flmul+3,doWork@Rinf+3
  2221  001528  C020  F150         	movff	?___flmul+2,doWork@Rinf+2
  2222  00152C  C01F  F14F         	movff	?___flmul+1,doWork@Rinf+1
  2223  001530  C01E  F14E         	movff	?___flmul,doWork@Rinf
  2224                           
  2225                           ;main.c: 472: v = 5.0 * (double) avarage / 1025;
  2226  001534  6A22               	clrf	?___flmul+4,c
  2227  001536  6A23               	clrf	?___flmul+5,c
  2228  001538  0EA0               	movlw	160
  2229  00153A  6E24               	movwf	?___flmul+6,c
  2230  00153C  0E40               	movlw	64
  2231  00153E  6E25               	movwf	?___flmul+7,c
  2232  001540  C17B  F01E         	movff	doWork@avarage,?___flmul
  2233  001544  C17C  F01F         	movff	doWork@avarage+1,?___flmul+1
  2234  001548  C17D  F020         	movff	doWork@avarage+2,?___flmul+2
  2235  00154C  C17E  F021         	movff	doWork@avarage+3,?___flmul+3
  2236  001550  ECB3  F020         	call	___flmul	;wreg free
  2237  001554  C021  F0B4         	movff	?___flmul+3,?___fldiv+3
  2238  001558  C020  F0B3         	movff	?___flmul+2,?___fldiv+2
  2239  00155C  C01F  F0B2         	movff	?___flmul+1,?___fldiv+1
  2240  001560  C01E  F0B1         	movff	?___flmul,?___fldiv
  2241  001564  0100               	movlb	0	; () banked
  2242  001566  6BB5               	clrf	(?___fldiv+4)& (0+255),b
  2243  001568  0E20               	movlw	32
  2244  00156A  6FB6               	movwf	(?___fldiv+5)& (0+255),b
  2245  00156C  0E80               	movlw	128
  2246  00156E  6FB7               	movwf	(?___fldiv+6)& (0+255),b
  2247  001570  0E44               	movlw	68
  2248  001572  6FB8               	movwf	(?___fldiv+7)& (0+255),b
  2249  001574  EC39  F023         	call	___fldiv	;wreg free
  2250  001578  C0B4  F171         	movff	?___fldiv+3,doWork@v+3
  2251  00157C  C0B3  F170         	movff	?___fldiv+2,doWork@v+2
  2252  001580  C0B2  F16F         	movff	?___fldiv+1,doWork@v+1
  2253  001584  C0B1  F16E         	movff	?___fldiv,doWork@v
  2254                           
  2255                           ;main.c: 474: resistance = (calVoltage - 10000.0 * v) / v;
  2256  001588  DB34               	call	PL70	;call to abstracted procedure
  2257  00158A  C16E  F01E         	movff	doWork@v,?___flmul
  2258  00158E  C16F  F01F         	movff	doWork@v+1,?___flmul+1
  2259  001592  C170  F020         	movff	doWork@v+2,?___flmul+2
  2260  001596  C171  F021         	movff	doWork@v+3,?___flmul+3
  2261  00159A  ECB3  F020         	call	___flmul	;wreg free
  2262  00159E  C021  F0B0         	movff	?___flmul+3,?___flsub+7
  2263  0015A2  C020  F0AF         	movff	?___flmul+2,?___flsub+6
  2264  0015A6  C01F  F0AE         	movff	?___flmul+1,?___flsub+5
  2265  0015AA  C01E  F0AD         	movff	?___flmul,?___flsub+4
  2266  0015AE  C152  F0A9         	movff	doWork@calVoltage,?___flsub
  2267  0015B2  C153  F0AA         	movff	doWork@calVoltage+1,?___flsub+1
  2268  0015B6  C154  F0AB         	movff	doWork@calVoltage+2,?___flsub+2
  2269  0015BA  C155  F0AC         	movff	doWork@calVoltage+3,?___flsub+3
  2270  0015BE  EC1A  F028         	call	___flsub	;wreg free
  2271  0015C2  C0AC  F0B4         	movff	?___flsub+3,?___fldiv+3
  2272  0015C6  C0AB  F0B3         	movff	?___flsub+2,?___fldiv+2
  2273  0015CA  C0AA  F0B2         	movff	?___flsub+1,?___fldiv+1
  2274  0015CE  C0A9  F0B1         	movff	?___flsub,?___fldiv
  2275  0015D2  C16E  F0B5         	movff	doWork@v,?___fldiv+4
  2276  0015D6  C16F  F0B6         	movff	doWork@v+1,?___fldiv+5
  2277  0015DA  C170  F0B7         	movff	doWork@v+2,?___fldiv+6
  2278  0015DE  C171  F0B8         	movff	doWork@v+3,?___fldiv+7
  2279  0015E2  EC39  F023         	call	___fldiv	;wreg free
  2280  0015E6  C0B4  F177         	movff	?___fldiv+3,doWork@resistance+3
  2281  0015EA  C0B3  F176         	movff	?___fldiv+2,doWork@resistance+2
  2282  0015EE  C0B2  F175         	movff	?___fldiv+1,doWork@resistance+1
  2283  0015F2  C0B1  F174         	movff	?___fldiv,doWork@resistance
  2284                           
  2285                           ;main.c: 476: temp = ((double) B) / log(resistance / Rinf);
  2286  0015F6  C14E  F0B5         	movff	doWork@Rinf,?___fldiv+4
  2287  0015FA  C14F  F0B6         	movff	doWork@Rinf+1,?___fldiv+5
  2288  0015FE  C150  F0B7         	movff	doWork@Rinf+2,?___fldiv+6
  2289  001602  C151  F0B8         	movff	doWork@Rinf+3,?___fldiv+7
  2290  001606  C174  F0B1         	movff	doWork@resistance,?___fldiv
  2291  00160A  C175  F0B2         	movff	doWork@resistance+1,?___fldiv+1
  2292  00160E  C176  F0B3         	movff	doWork@resistance+2,?___fldiv+2
  2293  001612  C177  F0B4         	movff	doWork@resistance+3,?___fldiv+3
  2294  001616  EC39  F023         	call	___fldiv	;wreg free
  2295  00161A  C0B4  F0CA         	movff	?___fldiv+3,?_log+3
  2296  00161E  C0B3  F0C9         	movff	?___fldiv+2,?_log+2
  2297  001622  C0B2  F0C8         	movff	?___fldiv+1,?_log+1
  2298  001626  C0B1  F0C7         	movff	?___fldiv,?_log
  2299  00162A  EC87  F01D         	call	_log	;wreg free
  2300  00162E  C0CA  F161         	movff	?_log+3,_doWork$2280+3
  2301  001632  C0C9  F160         	movff	?_log+2,_doWork$2280+2
  2302  001636  C0C8  F15F         	movff	?_log+1,_doWork$2280+1
  2303  00163A  C0C7  F15E         	movff	?_log,_doWork$2280
  2304                           
  2305                           ;main.c: 476: temp = ((double) B) / log(resistance / Rinf);
  2306  00163E  C172  F018         	movff	doWork@B,?___lwtofl
  2307  001642  C173  F019         	movff	doWork@B+1,?___lwtofl+1
  2308  001646  ECEB  F028         	call	___lwtofl	;wreg free
  2309  00164A  C01B  F0B4         	movff	?___lwtofl+3,?___fldiv+3
  2310  00164E  C01A  F0B3         	movff	?___lwtofl+2,?___fldiv+2
  2311  001652  C019  F0B2         	movff	?___lwtofl+1,?___fldiv+1
  2312  001656  C018  F0B1         	movff	?___lwtofl,?___fldiv
  2313  00165A  C15E  F0B5         	movff	_doWork$2280,?___fldiv+4
  2314  00165E  C15F  F0B6         	movff	_doWork$2280+1,?___fldiv+5
  2315  001662  C160  F0B7         	movff	_doWork$2280+2,?___fldiv+6
  2316  001666  C161  F0B8         	movff	_doWork$2280+3,?___fldiv+7
  2317  00166A  EC39  F023         	call	___fldiv	;wreg free
  2318  00166E  C0B4  F182         	movff	?___fldiv+3,doWork@temp+3
  2319  001672  C0B3  F181         	movff	?___fldiv+2,doWork@temp+2
  2320  001676  C0B2  F180         	movff	?___fldiv+1,doWork@temp+1
  2321  00167A  C0B1  F17F         	movff	?___fldiv,doWork@temp
  2322                           
  2323                           ;main.c: 478: temp -= 273.15;
  2324  00167E  0101               	movlb	1	; () banked
  2325  001680  0E01               	movlw	high doWork@temp
  2326  001682  6E3C               	movwf	?___asflsub+1,c
  2327  001684  0E7F               	movlw	low doWork@temp
  2328  001686  6E3B               	movwf	?___asflsub,c
  2329  001688  0E33               	movlw	51
  2330  00168A  6E3D               	movwf	?___asflsub+2,c
  2331  00168C  0E93               	movlw	147
  2332  00168E  6E3E               	movwf	?___asflsub+3,c
  2333  001690  0E88               	movlw	136
  2334  001692  6E3F               	movwf	?___asflsub+4,c
  2335  001694  0E43               	movlw	67
  2336  001696  6E40               	movwf	?___asflsub+5,c
  2337  001698  EC90  F026         	call	___asflsub	;wreg free
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;main.c: 493: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2341  00169C  0101               	movlb	1	; () banked
  2342  00169E  DA2E               	call	PL8	;call to abstracted procedure
  2343  0016A0  CFDE F0D2          	movff	postinc2,??_doWork
  2344  0016A4  CFDD F0D3          	movff	postdec2,??_doWork+1
  2345  0016A8  C0D2  F0D4         	movff	??_doWork,??_doWork+2
  2346  0016AC  C0D3  F0D5         	movff	??_doWork+1,??_doWork+3
  2347  0016B0  0E00               	movlw	0
  2348  0016B2  BFD5               	btfsc	(??_doWork+3)& (0+255),7,b
  2349  0016B4  0EFF               	movlw	255
  2350  0016B6  6FD6               	movwf	(??_doWork+4)& (0+255),b
  2351  0016B8  6FD7               	movwf	(??_doWork+5)& (0+255),b
  2352  0016BA  0101               	movlb	1	; () banked
  2353  0016BC  5183               	movf	doWork@i& (0+255),w,b
  2354  0016BE  EC73  F027         	call	_getCalibrationValue
  2355  0016C2  C012  F0D8         	movff	?_getCalibrationValue,??_doWork+6
  2356  0016C6  C013  F0D9         	movff	?_getCalibrationValue+1,??_doWork+7
  2357  0016CA  0E00               	movlw	0
  2358  0016CC  0100               	movlb	0	; () banked
  2359  0016CE  BFD9               	btfsc	(??_doWork+7)& (0+255),7,b
  2360  0016D0  0EFF               	movlw	255
  2361  0016D2  6FDA               	movwf	(??_doWork+8)& (0+255),b
  2362  0016D4  6FDB               	movwf	(??_doWork+9)& (0+255),b
  2363  0016D6  6A22               	clrf	?___flmul+4,c
  2364  0016D8  6A23               	clrf	?___flmul+5,c
  2365  0016DA  0EC8               	movlw	200
  2366  0016DC  6E24               	movwf	?___flmul+6,c
  2367  0016DE  0E42               	movlw	66
  2368  0016E0  6E25               	movwf	?___flmul+7,c
  2369  0016E2  C17F  F01E         	movff	doWork@temp,?___flmul
  2370  0016E6  C180  F01F         	movff	doWork@temp+1,?___flmul+1
  2371  0016EA  C181  F020         	movff	doWork@temp+2,?___flmul+2
  2372  0016EE  C182  F021         	movff	doWork@temp+3,?___flmul+3
  2373  0016F2  ECB3  F020         	call	___flmul	;wreg free
  2374  0016F6  C021  F037         	movff	?___flmul+3,?___fltol+3
  2375  0016FA  C020  F036         	movff	?___flmul+2,?___fltol+2
  2376  0016FE  C01F  F035         	movff	?___flmul+1,?___fltol+1
  2377  001702  C01E  F034         	movff	?___flmul,?___fltol
  2378  001706  EC33  F024         	call	___fltol	;wreg free
  2379  00170A  0100               	movlb	0	; () banked
  2380  00170C  51D8               	movf	(??_doWork+6)& (0+255),w,b
  2381  00170E  2434               	addwf	?___fltol,w,c
  2382  001710  6FDC               	movwf	(??_doWork+10)& (0+255),b
  2383  001712  51D9               	movf	(??_doWork+7)& (0+255),w,b
  2384  001714  2035               	addwfc	?___fltol+1,w,c
  2385  001716  6FDD               	movwf	(??_doWork+11)& (0+255),b
  2386  001718  51DA               	movf	(??_doWork+8)& (0+255),w,b
  2387  00171A  2036               	addwfc	?___fltol+2,w,c
  2388  00171C  6FDE               	movwf	(??_doWork+12)& (0+255),b
  2389  00171E  51DB               	movf	(??_doWork+9)& (0+255),w,b
  2390  001720  2037               	addwfc	?___fltol+3,w,c
  2391  001722  6FDF               	movwf	(??_doWork+13)& (0+255),b
  2392  001724  51D4               	movf	(??_doWork+2)& (0+255),w,b
  2393  001726  25DC               	addwf	(??_doWork+10)& (0+255),w,b
  2394  001728  6E3E               	movwf	?___aldiv,c
  2395  00172A  51D5               	movf	(??_doWork+3)& (0+255),w,b
  2396  00172C  21DD               	addwfc	(??_doWork+11)& (0+255),w,b
  2397  00172E  6E3F               	movwf	?___aldiv+1,c
  2398  001730  51D6               	movf	(??_doWork+4)& (0+255),w,b
  2399  001732  21DE               	addwfc	(??_doWork+12)& (0+255),w,b
  2400  001734  6E40               	movwf	?___aldiv+2,c
  2401  001736  51D7               	movf	(??_doWork+5)& (0+255),w,b
  2402  001738  21DF               	addwfc	(??_doWork+13)& (0+255),w,b
  2403  00173A  6E41               	movwf	?___aldiv+3,c
  2404  00173C  0E02               	movlw	2
  2405  00173E  6E42               	movwf	?___aldiv+4,c
  2406  001740  0E00               	movlw	0
  2407  001742  6A43               	clrf	?___aldiv+5,c
  2408  001744  6A44               	clrf	?___aldiv+6,c
  2409  001746  6A45               	clrf	?___aldiv+7,c
  2410  001748  EC72  F021         	call	___aldiv	;wreg free
  2411  00174C  D9DF               	call	PL10	;call to abstracted procedure
  2412  00174E  C03E  FFDE         	movff	?___aldiv,postinc2
  2413  001752  C03F  FFDD         	movff	?___aldiv+1,postdec2
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;main.c: 514: }
  2417                           ;main.c: 517: if (current_temp[ i ] <
  2418                           ;main.c: 518: (int16_t) (readEEPROM(2 * i + 0x7F)*256 +
  2419                           ;main.c: 519: readEEPROM(2 * i + 0x80))) {
  2420                           
  2421                           ;main.c: 495: }
  2422  001756  5183               	movf	doWork@i& (0+255),w,b
  2423  001758  0D02               	mullw	2
  2424  00175A  0E7F               	movlw	127
  2425  00175C  24F3               	addwf	prodl,w,c
  2426  00175E  6E0E               	movwf	?_readEEPROM,c
  2427  001760  0E00               	movlw	0
  2428  001762  20F4               	addwfc	prodh,w,c
  2429  001764  6E0F               	movwf	?_readEEPROM+1,c
  2430  001766  EC62  F02A         	call	_readEEPROM	;wreg free
  2431  00176A  0100               	movlb	0	; () banked
  2432  00176C  6FD3               	movwf	(??_doWork+1)& (0+255),b
  2433  00176E  6BD2               	clrf	??_doWork& (0+255),b
  2434  001770  0101               	movlb	1	; () banked
  2435  001772  5183               	movf	doWork@i& (0+255),w,b
  2436  001774  0D02               	mullw	2
  2437  001776  0E80               	movlw	128
  2438  001778  24F3               	addwf	prodl,w,c
  2439  00177A  6E0E               	movwf	?_readEEPROM,c
  2440  00177C  0E00               	movlw	0
  2441  00177E  20F4               	addwfc	prodh,w,c
  2442  001780  6E0F               	movwf	?_readEEPROM+1,c
  2443  001782  EC62  F02A         	call	_readEEPROM	;wreg free
  2444  001786  0100               	movlb	0	; () banked
  2445  001788  27D2               	addwf	??_doWork& (0+255),f,b
  2446  00178A  0E00               	movlw	0
  2447  00178C  23D3               	addwfc	(??_doWork+1)& (0+255),f,b
  2448  00178E  0101               	movlb	1	; () banked
  2449  001790  D9B5               	call	PL8	;call to abstracted procedure
  2450  001792  CFDE F0D4          	movff	postinc2,??_doWork+2
  2451  001796  CFDD F0D5          	movff	postdec2,??_doWork+3
  2452  00179A  DA22               	call	PL60	;call to abstracted procedure
  2453  00179C  E20D               	bc	l201
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;main.c: 521: writeEEPROM(2 * i + 0x7F, current_temp[ i ] >> 8);
  2457  00179E  D998               	call	PL4	;call to abstracted procedure
  2458  0017A0  0E7F               	movlw	127
  2459  0017A2  D99E               	call	PL6	;call to abstracted procedure
  2460  0017A4  D9FE               	call	PL34	;call to abstracted procedure
  2461  0017A6  EC65  F029         	call	_writeEEPROM	;wreg free
  2462                           
  2463                           ;main.c: 522: writeEEPROM(2 * i + 0x80, 0xff & current_temp[ i ]);
  2464  0017AA  D992               	call	PL4	;call to abstracted procedure
  2465  0017AC  0E80               	movlw	128
  2466  0017AE  D998               	call	PL6	;call to abstracted procedure
  2467  0017B0  50DF               	movf	indf2,w,c
  2468  0017B2  6E10               	movwf	?_writeEEPROM+2,c
  2469  0017B4  EC65  F029         	call	_writeEEPROM	;wreg free
  2470  0017B8                     l201:
  2471                           
  2472                           ;main.c: 523: }
  2473                           ;main.c: 526: if (current_temp[ i ] >
  2474                           ;main.c: 527: (int16_t) (readEEPROM(2 * i + 0x8B)*256 +
  2475                           ;main.c: 528: readEEPROM(2 * i + 0x8C))) {
  2476  0017B8  D9A9               	call	PL10	;call to abstracted procedure
  2477  0017BA  CFDE F0D2          	movff	postinc2,??_doWork
  2478  0017BE  CFDD F0D3          	movff	postdec2,??_doWork+1
  2479  0017C2  5183               	movf	doWork@i& (0+255),w,b
  2480  0017C4  0D02               	mullw	2
  2481  0017C6  0E8B               	movlw	139
  2482  0017C8  24F3               	addwf	prodl,w,c
  2483  0017CA  6E0E               	movwf	?_readEEPROM,c
  2484  0017CC  0E00               	movlw	0
  2485  0017CE  20F4               	addwfc	prodh,w,c
  2486  0017D0  6E0F               	movwf	?_readEEPROM+1,c
  2487  0017D2  EC62  F02A         	call	_readEEPROM	;wreg free
  2488  0017D6  0100               	movlb	0	; () banked
  2489  0017D8  6FD5               	movwf	(??_doWork+3)& (0+255),b
  2490  0017DA  6BD4               	clrf	(??_doWork+2)& (0+255),b
  2491  0017DC  0101               	movlb	1	; () banked
  2492  0017DE  5183               	movf	doWork@i& (0+255),w,b
  2493  0017E0  0D02               	mullw	2
  2494  0017E2  0E8C               	movlw	140
  2495  0017E4  24F3               	addwf	prodl,w,c
  2496  0017E6  6E0E               	movwf	?_readEEPROM,c
  2497  0017E8  0E00               	movlw	0
  2498  0017EA  20F4               	addwfc	prodh,w,c
  2499  0017EC  6E0F               	movwf	?_readEEPROM+1,c
  2500  0017EE  EC62  F02A         	call	_readEEPROM	;wreg free
  2501  0017F2  0100               	movlb	0	; () banked
  2502  0017F4  27D4               	addwf	(??_doWork+2)& (0+255),f,b
  2503  0017F6  0E00               	movlw	0
  2504  0017F8  23D5               	addwfc	(??_doWork+3)& (0+255),f,b
  2505  0017FA  D9F2               	call	PL60	;call to abstracted procedure
  2506  0017FC  E20D               	bc	l13974
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;main.c: 530: writeEEPROM(2 * i + 0x8B, current_temp[ i ] >> 8);
  2510  0017FE  D968               	call	PL4	;call to abstracted procedure
  2511  001800  0E8B               	movlw	139
  2512  001802  D96E               	call	PL6	;call to abstracted procedure
  2513  001804  D9CE               	call	PL34	;call to abstracted procedure
  2514  001806  EC65  F029         	call	_writeEEPROM	;wreg free
  2515                           
  2516                           ;main.c: 531: writeEEPROM(2 * i + 0x8C, 0xff & current_temp[ i ]);
  2517  00180A  D962               	call	PL4	;call to abstracted procedure
  2518  00180C  0E8C               	movlw	140
  2519  00180E  D968               	call	PL6	;call to abstracted procedure
  2520  001810  50DF               	movf	indf2,w,c
  2521  001812  6E10               	movwf	?_writeEEPROM+2,c
  2522  001814  EC65  F029         	call	_writeEEPROM	;wreg free
  2523  001818                     l13974:
  2524                           
  2525                           ;main.c: 532: }
  2526                           ;main.c: 535: adc_conversion_flags &= ~(1 << i);
  2527  001818  D9DC               	call	PL44	;call to abstracted procedure
  2528  00181A  D002               	goto	u13074
  2529  00181C                     u13075:
  2530  00181C  90D8               	bcf	status,0,c
  2531  00181E  37D3               	rlcf	(??_doWork+1)& (0+255),f,b
  2532  001820                     u13074:
  2533  001820  2FD2               	decfsz	??_doWork& (0+255),f,b
  2534  001822  D7FC               	goto	u13075
  2535  001824  1DD3               	comf	(??_doWork+1)& (0+255),w,b
  2536  001826  177D               	andwf	_adc_conversion_flags& (0+255),f,b
  2537  001828                     l13976:
  2538                           
  2539                           ; BSR set to: 0
  2540  001828  0101               	movlb	1	; () banked
  2541  00182A  2B83               	incf	doWork@i& (0+255),f,b
  2542                           
  2543                           ; BSR set to: 1
  2544  00182C  0E05               	movlw	5
  2545  00182E  6583               	cpfsgt	doWork@i& (0+255),b
  2546  001830  D5B7               	goto	l13916
  2547                           
  2548                           ; BSR set to: 1
  2549                           ;main.c: 537: }
  2550                           ;main.c: 538: }
  2551                           ;main.c: 541: if (0x03 == vscp_node_state) {
  2552  001832  0100               	movlb	0	; () banked
  2553  001834  5185               	movf	_vscp_node_state& (0+255),w,b
  2554  001836  0A03               	xorlw	3
  2555  001838  E001 D149          	bnz	l224
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 544: for (i = 0; i < 6; i++) {
  2559  00183C  0101               	movlb	1	; () banked
  2560  00183E  6B83               	clrf	doWork@i& (0+255),b
  2561  001840                     l13988:
  2562                           
  2563                           ; BSR set to: 1
  2564                           ;main.c: 547: if (low_alarm & 1 << i) {
  2565  001840  D9C8               	call	PL44	;call to abstracted procedure
  2566  001842  D002               	goto	u13104
  2567  001844                     u13105:
  2568  001844  90D8               	bcf	status,0,c
  2569  001846  37D3               	rlcf	(??_doWork+1)& (0+255),f,b
  2570  001848                     u13104:
  2571  001848  2FD2               	decfsz	??_doWork& (0+255),f,b
  2572  00184A  D7FC               	goto	u13105
  2573  00184C  51D3               	movf	(??_doWork+1)& (0+255),w,b
  2574  00184E  157F               	andwf	_low_alarm& (0+255),w,b
  2575  001850  E035               	bz	l13996
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 550: setpoint =
  2579                           ;main.c: 551: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2580                           ;main.c: 552: readEEPROM(2 * i + 0x5C) +
  2581                           ;main.c: 553: readEEPROM(i + 0x97)*100);
  2582  001852  D93E               	call	PL4	;call to abstracted procedure
  2583  001854  0E5C               	movlw	92
  2584  001856  25D2               	addwf	??_doWork& (0+255),w,b
  2585  001858  6E0E               	movwf	?_readEEPROM,c
  2586  00185A  0E00               	movlw	0
  2587  00185C  21D3               	addwfc	(??_doWork+1)& (0+255),w,b
  2588  00185E  6E0F               	movwf	?_readEEPROM+1,c
  2589  001860  EC62  F02A         	call	_readEEPROM	;wreg free
  2590  001864  0100               	movlb	0	; () banked
  2591  001866  6FD4               	movwf	(??_doWork+2)& (0+255),b
  2592  001868  90D8               	bcf	status,0,c
  2593  00186A  0101               	movlb	1	; () banked
  2594  00186C  3583               	rlcf	doWork@i& (0+255),w,b
  2595  00186E  0100               	movlb	0	; () banked
  2596  001870  6FD5               	movwf	(??_doWork+3)& (0+255),b
  2597  001872  6BD6               	clrf	(??_doWork+4)& (0+255),b
  2598  001874  37D6               	rlcf	(??_doWork+4)& (0+255),f,b
  2599  001876  0E5B               	movlw	91
  2600  001878  25D5               	addwf	(??_doWork+3)& (0+255),w,b
  2601  00187A  6E0E               	movwf	?_readEEPROM,c
  2602  00187C  0E00               	movlw	0
  2603  00187E  21D6               	addwfc	(??_doWork+4)& (0+255),w,b
  2604  001880  6E0F               	movwf	?_readEEPROM+1,c
  2605  001882  EC62  F02A         	call	_readEEPROM	;wreg free
  2606  001886  0100               	movlb	0	; () banked
  2607  001888  6FD8               	movwf	(??_doWork+6)& (0+255),b
  2608  00188A  6BD7               	clrf	(??_doWork+5)& (0+255),b
  2609  00188C  0E97               	movlw	151
  2610  00188E  D946               	call	PL12	;call to abstracted procedure
  2611  001890  EC62  F02A         	call	_readEEPROM	;wreg free
  2612  001894  0D64               	mullw	100
  2613  001896  0100               	movlb	0	; () banked
  2614  001898  51D7               	movf	(??_doWork+5)& (0+255),w,b
  2615  00189A  24F3               	addwf	prodl,w,c
  2616  00189C  6FD9               	movwf	(??_doWork+7)& (0+255),b
  2617  00189E  51D8               	movf	(??_doWork+6)& (0+255),w,b
  2618  0018A0  20F4               	addwfc	prodh,w,c
  2619  0018A2  6FDA               	movwf	(??_doWork+8)& (0+255),b
  2620  0018A4  51D4               	movf	(??_doWork+2)& (0+255),w,b
  2621  0018A6  25D9               	addwf	(??_doWork+7)& (0+255),w,b
  2622  0018A8  0101               	movlb	1	; () banked
  2623  0018AA  6F79               	movwf	doWork@setpoint& (0+255),b
  2624  0018AC  0100               	movlb	0	; () banked
  2625  0018AE  0E00               	movlw	0
  2626  0018B0  21DA               	addwfc	(??_doWork+8)& (0+255),w,b
  2627                           
  2628                           ; BSR set to: 1
  2629                           ;main.c: 558: if (current_temp[ i ] > setpoint) {
  2630  0018B2  D93B               	call	PL14	;call to abstracted procedure
  2631  0018B4  E263               	bc	l208
  2632  0018B6                     l13994:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 561: low_alarm &= ~(1 << i);
  2636  0018B6  D981               	call	PL36	;call to abstracted procedure
  2637  0018B8  177F               	andwf	_low_alarm& (0+255),f,b
  2638  0018BA  D060               	goto	l208
  2639  0018BC                     l13996:
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;main.c: 566: else {
  2643                           ;main.c: 570: setpoint =
  2644                           ;main.c: 571: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2645                           ;main.c: 572: readEEPROM(2 * i + 0x5C));
  2646  0018BC  0101               	movlb	1	; () banked
  2647  0018BE  5183               	movf	doWork@i& (0+255),w,b
  2648  0018C0  0D02               	mullw	2
  2649  0018C2  0E5C               	movlw	92
  2650  0018C4  24F3               	addwf	prodl,w,c
  2651  0018C6  6E0E               	movwf	?_readEEPROM,c
  2652  0018C8  0E00               	movlw	0
  2653  0018CA  20F4               	addwfc	prodh,w,c
  2654  0018CC  6E0F               	movwf	?_readEEPROM+1,c
  2655  0018CE  EC62  F02A         	call	_readEEPROM	;wreg free
  2656  0018D2  0100               	movlb	0	; () banked
  2657  0018D4  6FD2               	movwf	??_doWork& (0+255),b
  2658  0018D6  0101               	movlb	1	; () banked
  2659  0018D8  5183               	movf	doWork@i& (0+255),w,b
  2660  0018DA  0D02               	mullw	2
  2661  0018DC  0E5B               	movlw	91
  2662  0018DE  24F3               	addwf	prodl,w,c
  2663  0018E0  6E0E               	movwf	?_readEEPROM,c
  2664  0018E2  0E00               	movlw	0
  2665  0018E4  20F4               	addwfc	prodh,w,c
  2666  0018E6  6E0F               	movwf	?_readEEPROM+1,c
  2667  0018E8  EC62  F02A         	call	_readEEPROM	;wreg free
  2668  0018EC  D947               	call	PL20	;call to abstracted procedure
  2669  0018EE  0101               	movlb	1	; () banked
  2670  0018F0  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  2671                           
  2672                           ; BSR set to: 1
  2673                           ;main.c: 574: if (current_temp[ i ] < setpoint) {
  2674  0018F2  D904               	call	PL8	;call to abstracted procedure
  2675  0018F4  D932               	call	PL16	;call to abstracted procedure
  2676  0018F6  E242               	bc	l208
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;main.c: 577: low_alarm |= (1 << i);
  2680  0018F8  C183  F0D2         	movff	doWork@i,??_doWork
  2681  0018FC  0E01               	movlw	1
  2682  0018FE  6FD3               	movwf	(??_doWork+1)& (0+255),b
  2683  001900  2BD2               	incf	??_doWork& (0+255),f,b
  2684  001902  D002               	goto	u13154
  2685  001904                     u13155:
  2686  001904  90D8               	bcf	status,0,c
  2687  001906  37D3               	rlcf	(??_doWork+1)& (0+255),f,b
  2688  001908                     u13154:
  2689  001908  2FD2               	decfsz	??_doWork& (0+255),f,b
  2690  00190A  D7FC               	goto	u13155
  2691  00190C  51D3               	movf	(??_doWork+1)& (0+255),w,b
  2692  00190E  137F               	iorwf	_low_alarm& (0+255),f,b
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;main.c: 582: vscp_alarmstatus |= 1;
  2696  001910  804A               	bsf	_vscp_alarmstatus,0,c
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 585: if (readEEPROM(i + 0x43) & (1<<3)) {
  2700  001912  0E43               	movlw	67
  2701  001914  D903               	call	PL12	;call to abstracted procedure
  2702  001916  EC62  F02A         	call	_readEEPROM	;wreg free
  2703  00191A  0100               	movlb	0	; () banked
  2704  00191C  6FD2               	movwf	??_doWork& (0+255),b
  2705  00191E  A7D2               	btfss	??_doWork& (0+255),3,b
  2706  001920  D02D               	goto	l208
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;main.c: 587: vscp_omsg.vscp_class = 1;
  2710  001922  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  2711                           
  2712                           ;main.c: 588: vscp_omsg.vscp_type = 2;
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;main.c: 589: vscp_omsg.priority = 0x00;
  2716                           
  2717                           ;main.c: 590: vscp_omsg.flags = 0x80 + 3;
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;main.c: 593: if (readEEPROM(i + 0x43) & (1<<5)) {
  2721  001924  D936               	call	PL24	;call to abstracted procedure
  2722  001926  D8FA               	call	PL12	;call to abstracted procedure
  2723  001928  EC62  F02A         	call	_readEEPROM	;wreg free
  2724  00192C  0100               	movlb	0	; () banked
  2725  00192E  6FD2               	movwf	??_doWork& (0+255),b
  2726  001930  ABD2               	btfss	??_doWork& (0+255),5,b
  2727  001932  D012               	goto	l14018
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;main.c: 595: if (readEEPROM(i + 0x43) & (1<<6)) {
  2731  001934  0E43               	movlw	67
  2732  001936  D8F2               	call	PL12	;call to abstracted procedure
  2733  001938  EC62  F02A         	call	_readEEPROM	;wreg free
  2734  00193C  0100               	movlb	0	; () banked
  2735  00193E  6FD2               	movwf	??_doWork& (0+255),b
  2736  001940  ADD2               	btfss	??_doWork& (0+255),6,b
  2737  001942  D005               	goto	l14016
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 596: vscp_omsg.vscp_class = 30;
  2741  001944  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  2742  001946  0E1E               	movlw	30
  2743  001948  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  2744                           
  2745                           ;main.c: 597: vscp_omsg.vscp_type = 5;
  2746  00194A  0E05               	movlw	5
  2747  00194C  D004               	goto	L1
  2748  00194E                     l14016:
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;main.c: 599: else {
  2752                           ;main.c: 600: vscp_omsg.vscp_class = 30;
  2753  00194E  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  2754  001950  0E1E               	movlw	30
  2755  001952  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  2756                           
  2757                           ;main.c: 601: vscp_omsg.vscp_type = 6;
  2758  001954  0E06               	movlw	6
  2759  001956                     L1:
  2760  001956  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  2761  001958                     l14018:
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 602: }
  2765                           ;main.c: 604: }
  2766                           ;main.c: 606: vscp_omsg.data[ 0 ] = i;
  2767  001958  C183  F099         	movff	doWork@i,_vscp_omsg+5
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;main.c: 607: vscp_omsg.data[ 1 ] =
  2771                           ;main.c: 608: readEEPROM(2 * i + 0x73);
  2772  00195C  D8B9               	call	PL4	;call to abstracted procedure
  2773  00195E  D958               	call	PL80	;call to abstracted procedure
  2774  001960  EC62  F02A         	call	_readEEPROM	;wreg free
  2775  001964  0100               	movlb	0	; () banked
  2776  001966  6F9A               	movwf	(_vscp_omsg+6)& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;main.c: 609: vscp_omsg.data[ 2 ] =
  2780                           ;main.c: 610: readEEPROM(2 * i + 0x74);
  2781  001968  D8B3               	call	PL4	;call to abstracted procedure
  2782  00196A  D94B               	call	PL78	;call to abstracted procedure
  2783  00196C  EC62  F02A         	call	_readEEPROM	;wreg free
  2784  001970  0100               	movlb	0	; () banked
  2785  001972  6F9B               	movwf	(_vscp_omsg+7)& (0+255),b
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 613: if (!vscp_sendEvent()) {
  2789  001974  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  2790  001978  0900               	iorlw	0
  2791  00197A  E09D               	bz	l13994
  2792  00197C                     l208:
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;main.c: 617: }
  2796                           ;main.c: 618: }
  2797                           ;main.c: 619: }
  2798                           ;main.c: 620: }
  2799                           ;main.c: 623: if ( high_alarm & (1 << i ) ) {
  2800  00197C  C183  F0D2         	movff	doWork@i,??_doWork
  2801  001980  0E01               	movlw	1
  2802  001982  6FD3               	movwf	(??_doWork+1)& (0+255),b
  2803  001984  2BD2               	incf	??_doWork& (0+255),f,b
  2804  001986  D002               	goto	u13204
  2805  001988                     u13205:
  2806  001988  90D8               	bcf	status,0,c
  2807  00198A  37D3               	rlcf	(??_doWork+1)& (0+255),f,b
  2808  00198C                     u13204:
  2809  00198C  2FD2               	decfsz	??_doWork& (0+255),f,b
  2810  00198E  D7FC               	goto	u13205
  2811  001990  51D3               	movf	(??_doWork+1)& (0+255),w,b
  2812  001992  157E               	andwf	_high_alarm& (0+255),w,b
  2813  001994  E03A               	bz	l14034
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 627: setpoint =
  2817                           ;main.c: 628: (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2818                           ;main.c: 629: readEEPROM(2 * i + 0x68) -
  2819                           ;main.c: 630: readEEPROM(i + 0x97)*100);
  2820  001996  D89C               	call	PL4	;call to abstracted procedure
  2821  001998  0E67               	movlw	103
  2822  00199A  25D2               	addwf	??_doWork& (0+255),w,b
  2823  00199C  6E0E               	movwf	?_readEEPROM,c
  2824  00199E  0E00               	movlw	0
  2825  0019A0  21D3               	addwfc	(??_doWork+1)& (0+255),w,b
  2826  0019A2  6E0F               	movwf	?_readEEPROM+1,c
  2827  0019A4  EC62  F02A         	call	_readEEPROM	;wreg free
  2828  0019A8  0100               	movlb	0	; () banked
  2829  0019AA  6FD5               	movwf	(??_doWork+3)& (0+255),b
  2830  0019AC  6BD4               	clrf	(??_doWork+2)& (0+255),b
  2831  0019AE  90D8               	bcf	status,0,c
  2832  0019B0  0101               	movlb	1	; () banked
  2833  0019B2  3583               	rlcf	doWork@i& (0+255),w,b
  2834  0019B4  0100               	movlb	0	; () banked
  2835  0019B6  6FD6               	movwf	(??_doWork+4)& (0+255),b
  2836  0019B8  6BD7               	clrf	(??_doWork+5)& (0+255),b
  2837  0019BA  37D7               	rlcf	(??_doWork+5)& (0+255),f,b
  2838  0019BC  0E68               	movlw	104
  2839  0019BE  25D6               	addwf	(??_doWork+4)& (0+255),w,b
  2840  0019C0  6E0E               	movwf	?_readEEPROM,c
  2841  0019C2  0E00               	movlw	0
  2842  0019C4  21D7               	addwfc	(??_doWork+5)& (0+255),w,b
  2843  0019C6  6E0F               	movwf	?_readEEPROM+1,c
  2844  0019C8  EC62  F02A         	call	_readEEPROM	;wreg free
  2845  0019CC  0100               	movlb	0	; () banked
  2846  0019CE  27D4               	addwf	(??_doWork+2)& (0+255),f,b
  2847  0019D0  0E00               	movlw	0
  2848  0019D2  23D5               	addwfc	(??_doWork+3)& (0+255),f,b
  2849  0019D4  0E97               	movlw	151
  2850  0019D6  D8A2               	call	PL12	;call to abstracted procedure
  2851  0019D8  EC62  F02A         	call	_readEEPROM	;wreg free
  2852  0019DC  6E12               	movwf	?___wmul,c
  2853  0019DE  6A13               	clrf	?___wmul+1,c
  2854  0019E0  6815               	setf	?___wmul+3,c
  2855  0019E2  0E9C               	movlw	156
  2856  0019E4  6E14               	movwf	?___wmul+2,c
  2857  0019E6  EC8E  F028         	call	___wmul	;wreg free
  2858  0019EA  5012               	movf	?___wmul,w,c
  2859  0019EC  0100               	movlb	0	; () banked
  2860  0019EE  25D4               	addwf	(??_doWork+2)& (0+255),w,b
  2861  0019F0  0101               	movlb	1	; () banked
  2862  0019F2  6F79               	movwf	doWork@setpoint& (0+255),b
  2863  0019F4  5013               	movf	?___wmul+1,w,c
  2864  0019F6  0100               	movlb	0	; () banked
  2865  0019F8  21D5               	addwfc	(??_doWork+3)& (0+255),w,b
  2866  0019FA  0101               	movlb	1	; () banked
  2867  0019FC  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  2868                           
  2869                           ; BSR set to: 1
  2870                           ;main.c: 633: if (current_temp[ i ] < setpoint) {
  2871  0019FE  D87E               	call	PL8	;call to abstracted procedure
  2872  001A00  D8AC               	call	PL16	;call to abstracted procedure
  2873  001A02  E260               	bc	l14066
  2874  001A04                     l14032:
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;main.c: 636: high_alarm &= ~(1 << i);
  2878  001A04  D8DA               	call	PL36	;call to abstracted procedure
  2879  001A06  177E               	andwf	_high_alarm& (0+255),f,b
  2880  001A08  D05D               	goto	l14066
  2881  001A0A                     l14034:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 641: else {
  2885                           ;main.c: 646: setpoint = (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2886                           ;main.c: 647: readEEPROM(2 * i + 0x68));
  2887  001A0A  0101               	movlb	1	; () banked
  2888  001A0C  5183               	movf	doWork@i& (0+255),w,b
  2889  001A0E  0D02               	mullw	2
  2890  001A10  0E68               	movlw	104
  2891  001A12  24F3               	addwf	prodl,w,c
  2892  001A14  6E0E               	movwf	?_readEEPROM,c
  2893  001A16  0E00               	movlw	0
  2894  001A18  20F4               	addwfc	prodh,w,c
  2895  001A1A  6E0F               	movwf	?_readEEPROM+1,c
  2896  001A1C  EC62  F02A         	call	_readEEPROM	;wreg free
  2897  001A20  0100               	movlb	0	; () banked
  2898  001A22  6FD2               	movwf	??_doWork& (0+255),b
  2899  001A24  0101               	movlb	1	; () banked
  2900  001A26  5183               	movf	doWork@i& (0+255),w,b
  2901  001A28  0D02               	mullw	2
  2902  001A2A  0E67               	movlw	103
  2903  001A2C  24F3               	addwf	prodl,w,c
  2904  001A2E  6E0E               	movwf	?_readEEPROM,c
  2905  001A30  0E00               	movlw	0
  2906  001A32  20F4               	addwfc	prodh,w,c
  2907  001A34  6E0F               	movwf	?_readEEPROM+1,c
  2908  001A36  EC62  F02A         	call	_readEEPROM	;wreg free
  2909  001A3A  D8A0               	call	PL20	;call to abstracted procedure
  2910                           
  2911                           ; BSR set to: 1
  2912                           ;main.c: 649: if (current_temp[ i ] > setpoint) {
  2913  001A3C  D876               	call	PL14	;call to abstracted procedure
  2914  001A3E  E242               	bc	l14066
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;main.c: 652: high_alarm |= (1 << i);
  2918  001A40  C183  F0D2         	movff	doWork@i,??_doWork
  2919  001A44  0E01               	movlw	1
  2920  001A46  6FD3               	movwf	(??_doWork+1)& (0+255),b
  2921  001A48  2BD2               	incf	??_doWork& (0+255),f,b
  2922  001A4A  D002               	goto	u13254
  2923  001A4C                     u13255:
  2924  001A4C  90D8               	bcf	status,0,c
  2925  001A4E  37D3               	rlcf	(??_doWork+1)& (0+255),f,b
  2926  001A50                     u13254:
  2927  001A50  2FD2               	decfsz	??_doWork& (0+255),f,b
  2928  001A52  D7FC               	goto	u13255
  2929  001A54  51D3               	movf	(??_doWork+1)& (0+255),w,b
  2930  001A56  137E               	iorwf	_high_alarm& (0+255),f,b
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;main.c: 658: vscp_alarmstatus |= 2;
  2934  001A58  824A               	bsf	_vscp_alarmstatus,1,c
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;main.c: 661: if (readEEPROM(i + 0x43) & (1<<4)) {
  2938  001A5A  0E43               	movlw	67
  2939  001A5C  D85F               	call	PL12	;call to abstracted procedure
  2940  001A5E  EC62  F02A         	call	_readEEPROM	;wreg free
  2941  001A62  0100               	movlb	0	; () banked
  2942  001A64  6FD2               	movwf	??_doWork& (0+255),b
  2943  001A66  A9D2               	btfss	??_doWork& (0+255),4,b
  2944  001A68  D02D               	goto	l14066
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;main.c: 663: vscp_omsg.vscp_class = 1;
  2948  001A6A  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  2949                           
  2950                           ;main.c: 664: vscp_omsg.vscp_type = 2;
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 665: vscp_omsg.priority = 0x00;
  2954                           
  2955                           ;main.c: 666: vscp_omsg.flags = 0x80 + 3;
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;main.c: 668: if (readEEPROM(i + 0x43) & (1<<5)) {
  2959  001A6C  D892               	call	PL24	;call to abstracted procedure
  2960  001A6E  D856               	call	PL12	;call to abstracted procedure
  2961  001A70  EC62  F02A         	call	_readEEPROM	;wreg free
  2962  001A74  0100               	movlb	0	; () banked
  2963  001A76  6FD2               	movwf	??_doWork& (0+255),b
  2964  001A78  ABD2               	btfss	??_doWork& (0+255),5,b
  2965  001A7A  D012               	goto	l14056
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;main.c: 669: if (readEEPROM(i + 0x43) & (1<<6)) {
  2969  001A7C  0E43               	movlw	67
  2970  001A7E  D84E               	call	PL12	;call to abstracted procedure
  2971  001A80  EC62  F02A         	call	_readEEPROM	;wreg free
  2972  001A84  0100               	movlb	0	; () banked
  2973  001A86  6FD2               	movwf	??_doWork& (0+255),b
  2974  001A88  ADD2               	btfss	??_doWork& (0+255),6,b
  2975  001A8A  D005               	goto	l14054
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;main.c: 670: vscp_omsg.vscp_class = 30;
  2979  001A8C  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  2980  001A8E  0E1E               	movlw	30
  2981  001A90  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  2982                           
  2983                           ;main.c: 671: vscp_omsg.vscp_type = 6;
  2984  001A92  0E06               	movlw	6
  2985  001A94  D004               	goto	L2
  2986  001A96                     l14054:
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;main.c: 673: vscp_omsg.vscp_class = 30;
  2990  001A96  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  2991  001A98  0E1E               	movlw	30
  2992  001A9A  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  2993                           
  2994                           ;main.c: 674: vscp_omsg.vscp_type = 5;
  2995  001A9C  0E05               	movlw	5
  2996  001A9E                     L2:
  2997  001A9E  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  2998  001AA0                     l14056:
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;main.c: 675: }
  3002                           ;main.c: 676: }
  3003                           ;main.c: 678: vscp_omsg.data[ 0 ] = i;
  3004  001AA0  C183  F099         	movff	doWork@i,_vscp_omsg+5
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;main.c: 679: vscp_omsg.data[ 1 ] =
  3008                           ;main.c: 680: readEEPROM(2 * i +
  3009                           ;main.c: 681: 0x73);
  3010  001AA4  D815               	call	PL4	;call to abstracted procedure
  3011  001AA6  D8B4               	call	PL80	;call to abstracted procedure
  3012  001AA8  EC62  F02A         	call	_readEEPROM	;wreg free
  3013  001AAC  0100               	movlb	0	; () banked
  3014  001AAE  6F9A               	movwf	(_vscp_omsg+6)& (0+255),b
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;main.c: 682: vscp_omsg.data[ 2 ] =
  3018                           ;main.c: 683: readEEPROM(2 * i +
  3019                           ;main.c: 684: 0x74);
  3020  001AB0  D80F               	call	PL4	;call to abstracted procedure
  3021  001AB2  D8A7               	call	PL78	;call to abstracted procedure
  3022  001AB4  EC62  F02A         	call	_readEEPROM	;wreg free
  3023  001AB8  0100               	movlb	0	; () banked
  3024  001ABA  6F9B               	movwf	(_vscp_omsg+7)& (0+255),b
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;main.c: 687: if (!vscp_sendEvent()) {
  3028  001ABC  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  3029  001AC0  0900               	iorlw	0
  3030  001AC2  E0A0               	bz	l14032
  3031  001AC4                     l14066:
  3032                           
  3033                           ; BSR set to: 0
  3034  001AC4  0101               	movlb	1	; () banked
  3035  001AC6  2B83               	incf	doWork@i& (0+255),f,b
  3036  001AC8  0E05               	movlw	5
  3037  001ACA  6583               	cpfsgt	doWork@i& (0+255),b
  3038  001ACC  D6B9               	goto	l13988
  3039  001ACE                     l224:
  3040  001ACE  0012               	return	
  3041  001AD0                     __end_of_doWork:
  3042                           	opt stack 0
  3043  001AD0                     PL4:
  3044                           	opt stack 22
  3045  001AD0  90D8               	bcf	status,0,c
  3046  001AD2  0101               	movlb	1	; () banked
  3047  001AD4  3583               	rlcf	doWork@i& (0+255),w,b
  3048  001AD6  0100               	movlb	0	; () banked
  3049  001AD8  6FD2               	movwf	??_doWork& (0+255),b
  3050  001ADA  6BD3               	clrf	(??_doWork+1)& (0+255),b
  3051  001ADC  37D3               	rlcf	(??_doWork+1)& (0+255),f,b
  3052  001ADE  0012               	return	
  3053  001AE0                     __end_ofPL4:
  3054                           	opt stack 0
  3055  001AE0                     PL6:
  3056                           	opt stack 22
  3057  001AE0  25D2               	addwf	??_doWork& (0+255),w,b
  3058  001AE2  6E0E               	movwf	?_writeEEPROM,c
  3059  001AE4  0E00               	movlw	0
  3060  001AE6  21D3               	addwfc	(??_doWork+1)& (0+255),w,b
  3061  001AE8  6E0F               	movwf	?_writeEEPROM+1,c
  3062  001AEA  0101               	movlb	1	; () banked
  3063  001AEC  5183               	movf	doWork@i& (0+255),w,b
  3064  001AEE  0D02               	mullw	2
  3065  001AF0  50F3               	movf	prodl,w,c
  3066  001AF2  0100               	movlb	0	; () banked
  3067  001AF4  0F60               	addlw	low _current_temp
  3068  001AF6  6ED9               	movwf	fsr2l,c
  3069  001AF8  6ADA               	clrf	fsr2h,c
  3070  001AFA  0012               	return	
  3071  001AFC                     __end_ofPL6:
  3072                           	opt stack 0
  3073  001AFC                     PL8:
  3074                           	opt stack 22
  3075  001AFC  5183               	movf	doWork@i& (0+255),w,b
  3076  001AFE  0D02               	mullw	2
  3077  001B00  50F3               	movf	prodl,w,c
  3078  001B02  0100               	movlb	0	; () banked
  3079  001B04  0F60               	addlw	low _current_temp
  3080  001B06  6ED9               	movwf	fsr2l,c
  3081  001B08  6ADA               	clrf	fsr2h,c
  3082  001B0A  0012               	return	
  3083  001B0C                     __end_ofPL8:
  3084                           	opt stack 0
  3085  001B0C                     PL10:
  3086                           	opt stack 22
  3087  001B0C  0101               	movlb	1	; () banked
  3088  001B0E  5183               	movf	doWork@i& (0+255),w,b
  3089  001B10  0D02               	mullw	2
  3090  001B12  50F3               	movf	prodl,w,c
  3091  001B14  0F60               	addlw	low _current_temp
  3092  001B16  6ED9               	movwf	fsr2l,c
  3093  001B18  6ADA               	clrf	fsr2h,c
  3094  001B1A  0012               	return	
  3095  001B1C                     __end_ofPL10:
  3096                           	opt stack 0
  3097  001B1C                     PL12:
  3098                           	opt stack 22
  3099  001B1C  0101               	movlb	1	; () banked
  3100  001B1E  2583               	addwf	doWork@i& (0+255),w,b
  3101  001B20  6E0E               	movwf	?_readEEPROM,c
  3102  001B22  6A0F               	clrf	?_readEEPROM+1,c
  3103  001B24  0E00               	movlw	0
  3104  001B26  220F               	addwfc	?_readEEPROM+1,f,c
  3105  001B28  0C00               	retlw	0
  3106  001B2A                     __end_ofPL12:
  3107                           	opt stack 0
  3108  001B2A                     PL14:
  3109                           	opt stack 22
  3110  001B2A  0101               	movlb	1	; () banked
  3111  001B2C  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  3112  001B2E  5183               	movf	doWork@i& (0+255),w,b
  3113  001B30  0D02               	mullw	2
  3114  001B32  50F3               	movf	prodl,w,c
  3115  001B34  0F60               	addlw	low _current_temp
  3116  001B36  6ED9               	movwf	fsr2l,c
  3117  001B38  6ADA               	clrf	fsr2h,c
  3118  001B3A  CFDE F0D2          	movff	postinc2,??_doWork
  3119  001B3E  CFDD F0D3          	movff	postdec2,??_doWork+1
  3120  001B42  517A               	movf	(doWork@setpoint+1)& (0+255),w,b
  3121  001B44  0A80               	xorlw	128
  3122  001B46  0100               	movlb	0	; () banked
  3123  001B48  6FD4               	movwf	(??_doWork+2)& (0+255),b
  3124  001B4A  51D2               	movf	??_doWork& (0+255),w,b
  3125  001B4C  0101               	movlb	1	; () banked
  3126  001B4E  5D79               	subwf	doWork@setpoint& (0+255),w,b
  3127  001B50  0100               	movlb	0	; () banked
  3128  001B52  51D3               	movf	(??_doWork+1)& (0+255),w,b
  3129  001B54  0A80               	xorlw	128
  3130  001B56  59D4               	subwfb	(??_doWork+2)& (0+255),w,b
  3131  001B58  0012               	return	
  3132  001B5A                     __end_ofPL14:
  3133                           	opt stack 0
  3134  001B5A                     PL16:
  3135                           	opt stack 22
  3136  001B5A  CFDE F0D2          	movff	postinc2,??_doWork
  3137  001B5E  CFDD F0D3          	movff	postdec2,??_doWork+1
  3138  001B62  51D3               	movf	(??_doWork+1)& (0+255),w,b
  3139  001B64  0A80               	xorlw	128
  3140  001B66  6FD4               	movwf	(??_doWork+2)& (0+255),b
  3141  001B68  0101               	movlb	1	; () banked
  3142  001B6A  5179               	movf	doWork@setpoint& (0+255),w,b
  3143  001B6C  0100               	movlb	0	; () banked
  3144  001B6E  5DD2               	subwf	??_doWork& (0+255),w,b
  3145  001B70  0101               	movlb	1	; () banked
  3146  001B72  517A               	movf	(doWork@setpoint+1)& (0+255),w,b
  3147  001B74  0A80               	xorlw	128
  3148  001B76  0100               	movlb	0	; () banked
  3149  001B78  59D4               	subwfb	(??_doWork+2)& (0+255),w,b
  3150  001B7A  0012               	return	
  3151  001B7C                     __end_ofPL16:
  3152                           	opt stack 0
  3153  001B7C                     PL20:
  3154                           	opt stack 22
  3155  001B7C  0100               	movlb	0	; () banked
  3156  001B7E  6FD4               	movwf	(??_doWork+2)& (0+255),b
  3157  001B80  6BD3               	clrf	(??_doWork+1)& (0+255),b
  3158  001B82  51D2               	movf	??_doWork& (0+255),w,b
  3159  001B84  25D3               	addwf	(??_doWork+1)& (0+255),w,b
  3160  001B86  0101               	movlb	1	; () banked
  3161  001B88  6F79               	movwf	doWork@setpoint& (0+255),b
  3162  001B8A  0100               	movlb	0	; () banked
  3163  001B8C  0E00               	movlw	0
  3164  001B8E  21D4               	addwfc	(??_doWork+2)& (0+255),w,b
  3165  001B90  0012               	return	
  3166  001B92                     __end_ofPL20:
  3167                           	opt stack 0
  3168  001B92                     PL24:
  3169                           	opt stack 22
  3170  001B92  0E01               	movlw	1
  3171  001B94  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  3172  001B96  0E02               	movlw	2
  3173  001B98  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  3174  001B9A  6B95               	clrf	(_vscp_omsg+1)& (0+255),b
  3175  001B9C  0E83               	movlw	131
  3176  001B9E  6F94               	movwf	_vscp_omsg& (0+255),b
  3177  001BA0  0C43               	retlw	67
  3178  001BA2                     __end_ofPL24:
  3179                           	opt stack 0
  3180  001BA2                     PL34:
  3181                           	opt stack 22
  3182  001BA2  CFDE F0D4          	movff	postinc2,??_doWork+2
  3183  001BA6  CFDD F0D5          	movff	postdec2,??_doWork+3
  3184  001BAA  C0D5  F0D4         	movff	??_doWork+3,??_doWork+2
  3185  001BAE  6BD5               	clrf	(??_doWork+3)& (0+255),b
  3186  001BB0  BFD4               	btfsc	(??_doWork+2)& (0+255),7,b
  3187  001BB2  69D5               	setf	(??_doWork+3)& (0+255),b
  3188  001BB4  51D4               	movf	(??_doWork+2)& (0+255),w,b
  3189  001BB6  6E10               	movwf	?_writeEEPROM+2,c
  3190  001BB8  0012               	return	
  3191  001BBA                     __end_ofPL34:
  3192                           	opt stack 0
  3193  001BBA                     PL36:
  3194                           	opt stack 22
  3195  001BBA  C183  F0D2         	movff	doWork@i,??_doWork
  3196  001BBE  0E01               	movlw	1
  3197  001BC0  6FD3               	movwf	(??_doWork+1)& (0+255),b
  3198  001BC2  2BD2               	incf	??_doWork& (0+255),f,b
  3199  001BC4  D002               	goto	u13134
  3200  001BC6                     u13135:
  3201  001BC6  90D8               	bcf	status,0,c
  3202  001BC8  37D3               	rlcf	(??_doWork+1)& (0+255),f,b
  3203  001BCA                     u13134:
  3204  001BCA  2FD2               	decfsz	??_doWork& (0+255),f,b
  3205  001BCC  D7FC               	goto	u13135
  3206  001BCE  1DD3               	comf	(??_doWork+1)& (0+255),w,b
  3207  001BD0  0012               	return	
  3208  001BD2                     __end_ofPL36:
  3209                           	opt stack 0
  3210  001BD2                     PL44:
  3211                           	opt stack 22
  3212  001BD2  C183  F0D2         	movff	doWork@i,??_doWork
  3213  001BD6  0E01               	movlw	1
  3214  001BD8  0100               	movlb	0	; () banked
  3215  001BDA  6FD3               	movwf	(??_doWork+1)& (0+255),b
  3216  001BDC  2BD2               	incf	??_doWork& (0+255),f,b
  3217  001BDE  0C01               	retlw	1
  3218  001BE0                     __end_ofPL44:
  3219                           	opt stack 0
  3220  001BE0                     PL60:
  3221                           	opt stack 22
  3222  001BE0  51D5               	movf	(??_doWork+3)& (0+255),w,b
  3223  001BE2  0A80               	xorlw	128
  3224  001BE4  6FD6               	movwf	(??_doWork+4)& (0+255),b
  3225  001BE6  51D2               	movf	??_doWork& (0+255),w,b
  3226  001BE8  5DD4               	subwf	(??_doWork+2)& (0+255),w,b
  3227  001BEA  51D3               	movf	(??_doWork+1)& (0+255),w,b
  3228  001BEC  0A80               	xorlw	128
  3229  001BEE  59D6               	subwfb	(??_doWork+4)& (0+255),w,b
  3230  001BF0  0012               	return	
  3231  001BF2                     __end_ofPL60:
  3232                           	opt stack 0
  3233  001BF2                     PL70:
  3234                           	opt stack 22
  3235  001BF2  6A22               	clrf	?___flmul+4,c
  3236  001BF4  0E40               	movlw	64
  3237  001BF6  6E23               	movwf	?___flmul+5,c
  3238  001BF8  0E1C               	movlw	28
  3239  001BFA  6E24               	movwf	?___flmul+6,c
  3240  001BFC  0E46               	movlw	70
  3241  001BFE  6E25               	movwf	?___flmul+7,c
  3242  001C00  0C46               	retlw	70
  3243  001C02                     __end_ofPL70:
  3244                           	opt stack 0
  3245  001C02                     PL78:
  3246                           	opt stack 22
  3247  001C02  0E74               	movlw	116
  3248  001C04  25D2               	addwf	??_doWork& (0+255),w,b
  3249  001C06  6E0E               	movwf	?_readEEPROM,c
  3250  001C08  0E00               	movlw	0
  3251  001C0A  21D3               	addwfc	(??_doWork+1)& (0+255),w,b
  3252  001C0C  6E0F               	movwf	?_readEEPROM+1,c
  3253  001C0E  0012               	return	
  3254  001C10                     __end_ofPL78:
  3255                           	opt stack 0
  3256  001C10                     PL80:
  3257                           	opt stack 22
  3258  001C10  0E73               	movlw	115
  3259  001C12  25D2               	addwf	??_doWork& (0+255),w,b
  3260  001C14  6E0E               	movwf	?_readEEPROM,c
  3261  001C16  0E00               	movlw	0
  3262  001C18  21D3               	addwfc	(??_doWork+1)& (0+255),w,b
  3263  001C1A  6E0F               	movwf	?_readEEPROM+1,c
  3264  001C1C  0012               	return	
  3265  001C1E                     __end_ofPL80:
  3266                           	opt stack 0
  3267                           tblptru	equ	0xFF8
  3268                           tblptrh	equ	0xFF7
  3269                           tblptrl	equ	0xFF6
  3270                           tablat	equ	0xFF5
  3271                           prodh	equ	0xFF4
  3272                           prodl	equ	0xFF3
  3273                           intcon	equ	0xFF2
  3274                           postinc0	equ	0xFEE
  3275                           wreg	equ	0xFE8
  3276                           indf1	equ	0xFE7
  3277                           postdec1	equ	0xFE5
  3278                           fsr1h	equ	0xFE2
  3279                           fsr1l	equ	0xFE1
  3280                           indf2	equ	0xFDF
  3281                           postinc2	equ	0xFDE
  3282                           postdec2	equ	0xFDD
  3283                           plusw2	equ	0xFDB
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function ___lwtofl *****************
  3289 ;; Defined at:
  3290 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  c               2   23[COMRAM] unsigned int 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;		None
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  4   23[COMRAM] unsigned int 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, status,0, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3304 ;;      Params:         4       0       0       0       0       0       0
  3305 ;;      Locals:         0       0       0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0
  3307 ;;      Totals:         4       0       0       0       0       0       0
  3308 ;;Total ram usage:        4 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    3
  3311 ;; This function calls:
  3312 ;;		___flpack
  3313 ;; This function is called by:
  3314 ;;		_doWork
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text2
  3319  0051D6                     __ptext2:
  3320                           	opt stack 0
  3321  0051D6                     ___lwtofl:
  3322                           	opt stack 25
  3323                           
  3324                           ;incstack = 0
  3325                           ;incstack = 0
  3326  0051D6  C018  F00E         	movff	___lwtofl@c,?___flpack
  3327  0051DA  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  3328  0051DE  6A10               	clrf	?___flpack+2,c
  3329  0051E0  6A11               	clrf	?___flpack+3,c
  3330  0051E2  0E96               	movlw	150
  3331  0051E4  6E12               	movwf	?___flpack+4,c
  3332  0051E6  0E00               	movlw	0
  3333  0051E8  6A13               	clrf	?___flpack+5,c
  3334  0051EA  ECD0  F021         	call	___flpack	;wreg free
  3335  0051EE  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  3336  0051F2  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  3337  0051F6  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  3338  0051FA  C00E  F018         	movff	?___flpack,?___lwtofl
  3339  0051FE  0012               	return	
  3340  005200                     __end_of___lwtofl:
  3341                           	opt stack 0
  3342                           tblptru	equ	0xFF8
  3343                           tblptrh	equ	0xFF7
  3344                           tblptrl	equ	0xFF6
  3345                           tablat	equ	0xFF5
  3346                           prodh	equ	0xFF4
  3347                           prodl	equ	0xFF3
  3348                           intcon	equ	0xFF2
  3349                           postinc0	equ	0xFEE
  3350                           wreg	equ	0xFE8
  3351                           indf1	equ	0xFE7
  3352                           postdec1	equ	0xFE5
  3353                           fsr1h	equ	0xFE2
  3354                           fsr1l	equ	0xFE1
  3355                           indf2	equ	0xFDF
  3356                           postinc2	equ	0xFDE
  3357                           postdec2	equ	0xFDD
  3358                           plusw2	equ	0xFDB
  3359                           fsr2h	equ	0xFDA
  3360                           fsr2l	equ	0xFD9
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function ___asfldiv *****************
  3364 ;; Defined at:
  3365 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  f1p             2   38[BANK0 ] PTR 
  3368 ;;		 -> doWork@avarage(4), 
  3369 ;;  f2              4   40[BANK0 ] PTR 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  4   38[BANK0 ] PTR 
  3374 ;; Registers used:
  3375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3376 ;; Tracked objects:
  3377 ;;		On entry : F/0
  3378 ;;		On exit  : F/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3381 ;;      Params:         0       6       0       0       0       0       0
  3382 ;;      Locals:         0       0       0       0       0       0       0
  3383 ;;      Temps:          0       0       0       0       0       0       0
  3384 ;;      Totals:         0       6       0       0       0       0       0
  3385 ;;Total ram usage:        6 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    4
  3388 ;; This function calls:
  3389 ;;		___fldiv
  3390 ;; This function is called by:
  3391 ;;		_doWork
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           	psect	text3
  3396  004D6E                     __ptext3:
  3397                           	opt stack 0
  3398  004D6E                     ___asfldiv:
  3399                           	opt stack 24
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;	Return value of ___asfldiv is never used
  3403                           
  3404                           ;incstack = 0
  3405                           ;incstack = 0
  3406  004D6E  C0C7  FFD9         	movff	___asfldiv@f1p,fsr2l
  3407  004D72  C0C8  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3408  004D76  CFDE F0B1          	movff	postinc2,?___fldiv
  3409  004D7A  CFDE F0B2          	movff	postinc2,?___fldiv+1
  3410  004D7E  CFDE F0B3          	movff	postinc2,?___fldiv+2
  3411  004D82  CFDE F0B4          	movff	postinc2,?___fldiv+3
  3412  004D86  C0C9  F0B5         	movff	___asfldiv@f2,?___fldiv+4
  3413  004D8A  C0CA  F0B6         	movff	___asfldiv@f2+1,?___fldiv+5
  3414  004D8E  C0CB  F0B7         	movff	___asfldiv@f2+2,?___fldiv+6
  3415  004D92  C0CC  F0B8         	movff	___asfldiv@f2+3,?___fldiv+7
  3416  004D96  EC39  F023         	call	___fldiv	;wreg free
  3417  004D9A  C0C7  FFD9         	movff	___asfldiv@f1p,fsr2l
  3418  004D9E  C0C8  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3419  004DA2  0100               	movlb	0	; () banked
  3420  004DA4  C0B1  FFDE         	movff	?___fldiv,postinc2
  3421  004DA8  C0B2  FFDE         	movff	?___fldiv+1,postinc2
  3422  004DAC  C0B3  FFDE         	movff	?___fldiv+2,postinc2
  3423  004DB0  C0B4  FFDD         	movff	?___fldiv+3,postdec2
  3424  004DB4  06D9               	decf	fsr2l,f,c
  3425  004DB6  06D9               	decf	fsr2l,f,c
  3426                           
  3427                           ; BSR set to: 0
  3428  004DB8  0012               	return	
  3429  004DBA                     __end_of___asfldiv:
  3430                           	opt stack 0
  3431                           tblptru	equ	0xFF8
  3432                           tblptrh	equ	0xFF7
  3433                           tblptrl	equ	0xFF6
  3434                           tablat	equ	0xFF5
  3435                           prodh	equ	0xFF4
  3436                           prodl	equ	0xFF3
  3437                           intcon	equ	0xFF2
  3438                           postinc0	equ	0xFEE
  3439                           wreg	equ	0xFE8
  3440                           indf1	equ	0xFE7
  3441                           postdec1	equ	0xFE5
  3442                           fsr1h	equ	0xFE2
  3443                           fsr1l	equ	0xFE1
  3444                           indf2	equ	0xFDF
  3445                           postinc2	equ	0xFDE
  3446                           postdec2	equ	0xFDD
  3447                           plusw2	equ	0xFDB
  3448                           fsr2h	equ	0xFDA
  3449                           fsr2l	equ	0xFD9
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function ___asfladd *****************
  3453 ;; Defined at:
  3454 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  f1p             2   58[COMRAM] PTR 
  3457 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  3458 ;;  f2              4   60[COMRAM] PTR 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;		None
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  4   58[COMRAM] PTR 
  3463 ;; Registers used:
  3464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : F/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3470 ;;      Params:         6       0       0       0       0       0       0
  3471 ;;      Locals:         0       0       0       0       0       0       0
  3472 ;;      Temps:          0       0       0       0       0       0       0
  3473 ;;      Totals:         6       0       0       0       0       0       0
  3474 ;;Total ram usage:        6 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    4
  3477 ;; This function calls:
  3478 ;;		___fladd
  3479 ;; This function is called by:
  3480 ;;		_doWork
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text4
  3485  004CD2                     __ptext4:
  3486                           	opt stack 0
  3487  004CD2                     ___asfladd:
  3488                           	opt stack 24
  3489                           
  3490                           ;	Return value of ___asfladd is never used
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;incstack = 0
  3494                           ;incstack = 0
  3495  004CD2  C03B  FFD9         	movff	___asfladd@f1p,fsr2l
  3496  004CD6  C03C  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3497  004CDA  0100               	movlb	0	; () banked
  3498  004CDC  CFDE F0A1          	movff	postinc2,?___fladd
  3499  004CE0  CFDE F0A2          	movff	postinc2,?___fladd+1
  3500  004CE4  CFDE F0A3          	movff	postinc2,?___fladd+2
  3501  004CE8  CFDE F0A4          	movff	postinc2,?___fladd+3
  3502  004CEC  C03D  F0A5         	movff	___asfladd@f2,?___fladd+4
  3503  004CF0  C03E  F0A6         	movff	___asfladd@f2+1,?___fladd+5
  3504  004CF4  C03F  F0A7         	movff	___asfladd@f2+2,?___fladd+6
  3505  004CF8  C040  F0A8         	movff	___asfladd@f2+3,?___fladd+7
  3506  004CFC  EC21  F01C         	call	___fladd	;wreg free
  3507  004D00  C03B  FFD9         	movff	___asfladd@f1p,fsr2l
  3508  004D04  C03C  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3509  004D08  0100               	movlb	0	; () banked
  3510  004D0A  C0A1  FFDE         	movff	?___fladd,postinc2
  3511  004D0E  C0A2  FFDE         	movff	?___fladd+1,postinc2
  3512  004D12  C0A3  FFDE         	movff	?___fladd+2,postinc2
  3513  004D16  C0A4  FFDD         	movff	?___fladd+3,postdec2
  3514  004D1A  06D9               	decf	fsr2l,f,c
  3515  004D1C  06D9               	decf	fsr2l,f,c
  3516                           
  3517                           ; BSR set to: 0
  3518  004D1E  0012               	return	
  3519  004D20                     __end_of___asfladd:
  3520                           	opt stack 0
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           postinc0	equ	0xFEE
  3529                           wreg	equ	0xFE8
  3530                           indf1	equ	0xFE7
  3531                           postdec1	equ	0xFE5
  3532                           fsr1h	equ	0xFE2
  3533                           fsr1l	equ	0xFE1
  3534                           indf2	equ	0xFDF
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           plusw2	equ	0xFDB
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function ___aldiv *****************
  3543 ;; Defined at:
  3544 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  dividend        4   61[COMRAM] long 
  3547 ;;  divisor         4   65[COMRAM] long 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;  quotient        4    2[BANK0 ] long 
  3550 ;;  sign            1    1[BANK0 ] unsigned char 
  3551 ;;  counter         1    0[BANK0 ] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  4   61[COMRAM] long 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0
  3556 ;; Tracked objects:
  3557 ;;		On entry : F/0
  3558 ;;		On exit  : F/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         8       0       0       0       0       0       0
  3562 ;;      Locals:         0       6       0       0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0
  3564 ;;      Totals:         8       6       0       0       0       0       0
  3565 ;;Total ram usage:       14 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    2
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_doWork
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text5
  3576  0042E4                     __ptext5:
  3577                           	opt stack 0
  3578  0042E4                     ___aldiv:
  3579                           	opt stack 26
  3580                           
  3581                           ; BSR set to: 0
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;incstack = 0
  3585                           ;incstack = 0
  3586  0042E4  6BA2               	clrf	___aldiv@sign& (0+255),b
  3587  0042E6  AE45               	btfss	___aldiv@divisor+3,7,c
  3588  0042E8  D00A               	goto	l11492
  3589                           
  3590                           ; BSR set to: 0
  3591  0042EA  1E45               	comf	___aldiv@divisor+3,f,c
  3592  0042EC  1E44               	comf	___aldiv@divisor+2,f,c
  3593  0042EE  1E43               	comf	___aldiv@divisor+1,f,c
  3594  0042F0  6C42               	negf	___aldiv@divisor,c
  3595  0042F2  0E00               	movlw	0
  3596  0042F4  2243               	addwfc	___aldiv@divisor+1,f,c
  3597  0042F6  2244               	addwfc	___aldiv@divisor+2,f,c
  3598  0042F8  2245               	addwfc	___aldiv@divisor+3,f,c
  3599                           
  3600                           ; BSR set to: 0
  3601  0042FA  0E01               	movlw	1
  3602  0042FC  6FA2               	movwf	___aldiv@sign& (0+255),b
  3603  0042FE                     l11492:
  3604                           
  3605                           ; BSR set to: 0
  3606  0042FE  AE41               	btfss	___aldiv@dividend+3,7,c
  3607  004300  D00A               	goto	l11498
  3608                           
  3609                           ; BSR set to: 0
  3610  004302  1E41               	comf	___aldiv@dividend+3,f,c
  3611  004304  1E40               	comf	___aldiv@dividend+2,f,c
  3612  004306  1E3F               	comf	___aldiv@dividend+1,f,c
  3613  004308  6C3E               	negf	___aldiv@dividend,c
  3614  00430A  0E00               	movlw	0
  3615  00430C  223F               	addwfc	___aldiv@dividend+1,f,c
  3616  00430E  2240               	addwfc	___aldiv@dividend+2,f,c
  3617  004310  2241               	addwfc	___aldiv@dividend+3,f,c
  3618                           
  3619                           ; BSR set to: 0
  3620  004312  0E01               	movlw	1
  3621  004314  1BA2               	xorwf	___aldiv@sign& (0+255),f,b
  3622  004316                     l11498:
  3623                           
  3624                           ; BSR set to: 0
  3625  004316  6BA3               	clrf	___aldiv@quotient& (0+255),b
  3626  004318  6BA4               	clrf	(___aldiv@quotient+1)& (0+255),b
  3627  00431A  6BA5               	clrf	(___aldiv@quotient+2)& (0+255),b
  3628  00431C  6BA6               	clrf	(___aldiv@quotient+3)& (0+255),b
  3629                           
  3630                           ; BSR set to: 0
  3631  00431E  5045               	movf	___aldiv@divisor+3,w,c
  3632  004320  1042               	iorwf	___aldiv@divisor,w,c
  3633  004322  1043               	iorwf	___aldiv@divisor+1,w,c
  3634  004324  1044               	iorwf	___aldiv@divisor+2,w,c
  3635  004326  E029               	bz	l11520
  3636                           
  3637                           ; BSR set to: 0
  3638  004328  0E01               	movlw	1
  3639  00432A  6FA1               	movwf	___aldiv@counter& (0+255),b
  3640  00432C  D006               	goto	l11506
  3641  00432E                     l11504:
  3642                           
  3643                           ; BSR set to: 0
  3644  00432E  90D8               	bcf	status,0,c
  3645  004330  3642               	rlcf	___aldiv@divisor,f,c
  3646  004332  3643               	rlcf	___aldiv@divisor+1,f,c
  3647  004334  3644               	rlcf	___aldiv@divisor+2,f,c
  3648  004336  3645               	rlcf	___aldiv@divisor+3,f,c
  3649  004338  2BA1               	incf	___aldiv@counter& (0+255),f,b
  3650  00433A                     l11506:
  3651                           
  3652                           ; BSR set to: 0
  3653  00433A  AE45               	btfss	___aldiv@divisor+3,7,c
  3654  00433C  D7F8               	goto	l11504
  3655  00433E                     l11508:
  3656                           
  3657                           ; BSR set to: 0
  3658  00433E  90D8               	bcf	status,0,c
  3659  004340  37A3               	rlcf	___aldiv@quotient& (0+255),f,b
  3660  004342  37A4               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3661  004344  37A5               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3662  004346  37A6               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3663                           
  3664                           ; BSR set to: 0
  3665  004348  5042               	movf	___aldiv@divisor,w,c
  3666  00434A  5C3E               	subwf	___aldiv@dividend,w,c
  3667  00434C  5043               	movf	___aldiv@divisor+1,w,c
  3668  00434E  583F               	subwfb	___aldiv@dividend+1,w,c
  3669  004350  5044               	movf	___aldiv@divisor+2,w,c
  3670  004352  5840               	subwfb	___aldiv@dividend+2,w,c
  3671  004354  5045               	movf	___aldiv@divisor+3,w,c
  3672  004356  5841               	subwfb	___aldiv@dividend+3,w,c
  3673  004358  E309               	bnc	l11516
  3674                           
  3675                           ; BSR set to: 0
  3676  00435A  5042               	movf	___aldiv@divisor,w,c
  3677  00435C  5E3E               	subwf	___aldiv@dividend,f,c
  3678  00435E  5043               	movf	___aldiv@divisor+1,w,c
  3679  004360  5A3F               	subwfb	___aldiv@dividend+1,f,c
  3680  004362  5044               	movf	___aldiv@divisor+2,w,c
  3681  004364  5A40               	subwfb	___aldiv@dividend+2,f,c
  3682  004366  5045               	movf	___aldiv@divisor+3,w,c
  3683  004368  5A41               	subwfb	___aldiv@dividend+3,f,c
  3684                           
  3685                           ; BSR set to: 0
  3686  00436A  81A3               	bsf	___aldiv@quotient& (0+255),0,b
  3687  00436C                     l11516:
  3688                           
  3689                           ; BSR set to: 0
  3690  00436C  90D8               	bcf	status,0,c
  3691  00436E  3245               	rrcf	___aldiv@divisor+3,f,c
  3692  004370  3244               	rrcf	___aldiv@divisor+2,f,c
  3693  004372  3243               	rrcf	___aldiv@divisor+1,f,c
  3694  004374  3242               	rrcf	___aldiv@divisor,f,c
  3695                           
  3696                           ; BSR set to: 0
  3697  004376  2FA1               	decfsz	___aldiv@counter& (0+255),f,b
  3698  004378  D7E2               	goto	l11508
  3699  00437A                     l11520:
  3700                           
  3701                           ; BSR set to: 0
  3702  00437A  51A2               	movf	___aldiv@sign& (0+255),w,b
  3703  00437C  E008               	bz	l11524
  3704                           
  3705                           ; BSR set to: 0
  3706  00437E  1FA6               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3707  004380  1FA5               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3708  004382  1FA4               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3709  004384  6DA3               	negf	___aldiv@quotient& (0+255),b
  3710  004386  0E00               	movlw	0
  3711  004388  23A4               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3712  00438A  23A5               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3713  00438C  23A6               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3714  00438E                     l11524:
  3715                           
  3716                           ; BSR set to: 0
  3717  00438E  C0A3  F03E         	movff	___aldiv@quotient,?___aldiv
  3718  004392  C0A4  F03F         	movff	___aldiv@quotient+1,?___aldiv+1
  3719  004396  C0A5  F040         	movff	___aldiv@quotient+2,?___aldiv+2
  3720  00439A  C0A6  F041         	movff	___aldiv@quotient+3,?___aldiv+3
  3721                           
  3722                           ; BSR set to: 0
  3723  00439E  0012               	return	
  3724  0043A0                     __end_of___aldiv:
  3725                           	opt stack 0
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           prodh	equ	0xFF4
  3731                           prodl	equ	0xFF3
  3732                           intcon	equ	0xFF2
  3733                           postinc0	equ	0xFEE
  3734                           wreg	equ	0xFE8
  3735                           indf1	equ	0xFE7
  3736                           postdec1	equ	0xFE5
  3737                           fsr1h	equ	0xFE2
  3738                           fsr1l	equ	0xFE1
  3739                           indf2	equ	0xFDF
  3740                           postinc2	equ	0xFDE
  3741                           postdec2	equ	0xFDD
  3742                           plusw2	equ	0xFDB
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _getCalibrationValue *****************
  3748 ;; Defined at:
  3749 ;;		line 874 in file "../main.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  i               1    wreg     unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  i               1   24[COMRAM] unsigned char 
  3754 ;;  cal             2   22[COMRAM] short 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  2   17[COMRAM] short 
  3757 ;; Registers used:
  3758 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : F/1
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3764 ;;      Params:         2       0       0       0       0       0       0
  3765 ;;      Locals:         3       0       0       0       0       0       0
  3766 ;;      Temps:          3       0       0       0       0       0       0
  3767 ;;      Totals:         8       0       0       0       0       0       0
  3768 ;;Total ram usage:        8 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    3
  3771 ;; This function calls:
  3772 ;;		_readEEPROM
  3773 ;; This function is called by:
  3774 ;;		_doWork
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text6
  3779  004EE6                     __ptext6:
  3780                           	opt stack 0
  3781  004EE6                     _getCalibrationValue:
  3782                           	opt stack 25
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;incstack = 0
  3786                           ;incstack = 0
  3787                           ;getCalibrationValue@i stored from wreg
  3788  004EE6  CFE8 F019          	movff	wreg,getCalibrationValue@i
  3789                           
  3790                           ; BSR set to: 1
  3791                           ;main.c: 875: int16_t cal;
  3792                           ;main.c: 877: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3793                           ;main.c: 878: readEEPROM(2 * i + 0x9F);
  3794  004EEA  5019               	movf	getCalibrationValue@i,w,c
  3795  004EEC  0D02               	mullw	2
  3796  004EEE  0E9F               	movlw	159
  3797  004EF0  24F3               	addwf	prodl,w,c
  3798  004EF2  6E0E               	movwf	?_readEEPROM,c
  3799  004EF4  0E00               	movlw	0
  3800  004EF6  20F4               	addwfc	prodh,w,c
  3801  004EF8  6E0F               	movwf	?_readEEPROM+1,c
  3802  004EFA  EC62  F02A         	call	_readEEPROM	;wreg free
  3803  004EFE  6E14               	movwf	??_getCalibrationValue& (0+255),c
  3804  004F00  5019               	movf	getCalibrationValue@i,w,c
  3805  004F02  0D02               	mullw	2
  3806  004F04  0E9E               	movlw	158
  3807  004F06  24F3               	addwf	prodl,w,c
  3808  004F08  6E0E               	movwf	?_readEEPROM,c
  3809  004F0A  0E00               	movlw	0
  3810  004F0C  20F4               	addwfc	prodh,w,c
  3811  004F0E  6E0F               	movwf	?_readEEPROM+1,c
  3812  004F10  EC62  F02A         	call	_readEEPROM	;wreg free
  3813  004F14  6E16               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3814  004F16  6A15               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3815  004F18  5014               	movf	??_getCalibrationValue,w,c
  3816  004F1A  2415               	addwf	??_getCalibrationValue+1,w,c
  3817  004F1C  6E17               	movwf	getCalibrationValue@cal,c
  3818  004F1E  0E00               	movlw	0
  3819  004F20  2016               	addwfc	??_getCalibrationValue+2,w,c
  3820  004F22  6E18               	movwf	getCalibrationValue@cal+1,c
  3821                           
  3822                           ;main.c: 880: return cal;
  3823  004F24  C017  F012         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3824  004F28  C018  F013         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3825  004F2C  0012               	return	
  3826  004F2E                     __end_of_getCalibrationValue:
  3827                           	opt stack 0
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           postinc0	equ	0xFEE
  3836                           wreg	equ	0xFE8
  3837                           indf1	equ	0xFE7
  3838                           postdec1	equ	0xFE5
  3839                           fsr1h	equ	0xFE2
  3840                           fsr1l	equ	0xFE1
  3841                           indf2	equ	0xFDF
  3842                           postinc2	equ	0xFDE
  3843                           postdec2	equ	0xFDD
  3844                           plusw2	equ	0xFDB
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _log *****************
  3850 ;; Defined at:
  3851 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  x               4   38[BANK0 ] short 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  exponent        2   66[COMRAM] int 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  4   38[BANK0 ] int 
  3858 ;; Registers used:
  3859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/1
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3865 ;;      Params:         0       4       0       0       0       0       0
  3866 ;;      Locals:         2       0       0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0
  3868 ;;      Totals:         2       4       0       0       0       0       0
  3869 ;;Total ram usage:        6 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    5
  3872 ;; This function calls:
  3873 ;;		___fladd
  3874 ;;		___flmul
  3875 ;;		___awtofl
  3876 ;;		_eval_poly
  3877 ;;		_frexp
  3878 ;; This function is called by:
  3879 ;;		_doWork
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           	psect	text7
  3884  003B0E                     __ptext7:
  3885                           	opt stack 0
  3886  003B0E                     _log:
  3887                           	opt stack 23
  3888                           
  3889                           ;incstack = 0
  3890                           ;incstack = 0
  3891  003B0E  0100               	movlb	0	; () banked
  3892  003B10  BFCA               	btfsc	(log@x+3)& (0+255),7,b
  3893  003B12  D007               	goto	u13390
  3894                           
  3895                           ; BSR set to: 0
  3896                           
  3897                           ; BSR set to: 0
  3898  003B14  EE20  F0C7         	lfsr	2,log@x
  3899  003B18  50DE               	movf	postinc2,w,c
  3900  003B1A  10DE               	iorwf	postinc2,w,c
  3901  003B1C  10DE               	iorwf	postinc2,w,c
  3902  003B1E  10DE               	iorwf	postinc2,w,c
  3903  003B20  E105               	bnz	l14112
  3904  003B22                     u13390:
  3905                           
  3906                           ; BSR set to: 0
  3907  003B22  6BC7               	clrf	?_log& (0+255),b
  3908  003B24  6BC8               	clrf	(?_log+1)& (0+255),b
  3909  003B26  6BC9               	clrf	(?_log+2)& (0+255),b
  3910  003B28  6BCA               	clrf	(?_log+3)& (0+255),b
  3911  003B2A  D087               	goto	l1871
  3912  003B2C                     l14112:
  3913                           
  3914                           ; BSR set to: 0
  3915  003B2C  6A22               	clrf	?___flmul+4,c
  3916  003B2E  6A23               	clrf	?___flmul+5,c
  3917  003B30  6A24               	clrf	?___flmul+6,c
  3918  003B32  0E40               	movlw	64
  3919  003B34  6E25               	movwf	?___flmul+7,c
  3920  003B36  0E43               	movlw	low log@exponent
  3921  003B38  6E12               	movwf	?_frexp+4,c
  3922  003B3A  0E00               	movlw	high log@exponent
  3923  003B3C  6E13               	movwf	?_frexp+5,c
  3924  003B3E  0E0F               	movlw	15
  3925  003B40  6E13               	movwf	?_frexp+5,c
  3926  003B42  0E5F               	movlw	__accesstop+-1
  3927  003B44  6412               	cpfsgt	?_frexp+4,c
  3928  003B46  6A13               	clrf	?_frexp+5,c
  3929  003B48  C0C7  F00E         	movff	log@x,?_frexp
  3930  003B4C  C0C8  F00F         	movff	log@x+1,?_frexp+1
  3931  003B50  C0C9  F010         	movff	log@x+2,?_frexp+2
  3932  003B54  C0CA  F011         	movff	log@x+3,?_frexp+3
  3933  003B58  ECCC  F024         	call	_frexp	;wreg free
  3934  003B5C  C011  F021         	movff	?_frexp+3,?___flmul+3
  3935  003B60  C010  F020         	movff	?_frexp+2,?___flmul+2
  3936  003B64  C00F  F01F         	movff	?_frexp+1,?___flmul+1
  3937  003B68  C00E  F01E         	movff	?_frexp,?___flmul
  3938  003B6C  ECB3  F020         	call	___flmul	;wreg free
  3939  003B70  C021  F0A4         	movff	?___flmul+3,?___fladd+3
  3940  003B74  C020  F0A3         	movff	?___flmul+2,?___fladd+2
  3941  003B78  C01F  F0A2         	movff	?___flmul+1,?___fladd+1
  3942  003B7C  C01E  F0A1         	movff	?___flmul,?___fladd
  3943  003B80  0100               	movlb	0	; () banked
  3944  003B82  6BA5               	clrf	(?___fladd+4)& (0+255),b
  3945  003B84  6BA6               	clrf	(?___fladd+5)& (0+255),b
  3946  003B86  0E80               	movlw	128
  3947  003B88  6FA7               	movwf	(?___fladd+6)& (0+255),b
  3948  003B8A  0EBF               	movlw	191
  3949  003B8C  6FA8               	movwf	(?___fladd+7)& (0+255),b
  3950  003B8E  EC21  F01C         	call	___fladd	;wreg free
  3951  003B92  C0A4  F0CA         	movff	?___fladd+3,log@x+3
  3952  003B96  C0A3  F0C9         	movff	?___fladd+2,log@x+2
  3953  003B9A  C0A2  F0C8         	movff	?___fladd+1,log@x+1
  3954  003B9E  C0A1  F0C7         	movff	?___fladd,log@x
  3955  003BA2  0643               	decf	log@exponent,f,c
  3956  003BA4  A0D8               	btfss	status,0,c
  3957  003BA6  0644               	decf	log@exponent+1,f,c
  3958  003BA8  C0C7  F03B         	movff	log@x,?_eval_poly
  3959  003BAC  C0C8  F03C         	movff	log@x+1,?_eval_poly+1
  3960  003BB0  C0C9  F03D         	movff	log@x+2,?_eval_poly+2
  3961  003BB4  C0CA  F03E         	movff	log@x+3,?_eval_poly+3
  3962  003BB8  0E48               	movlw	low log@coeff
  3963  003BBA  6E3F               	movwf	?_eval_poly+4,c
  3964  003BBC  6A41               	clrf	?_eval_poly+6,c
  3965  003BBE  0E08               	movlw	8
  3966  003BC0  6E40               	movwf	?_eval_poly+5,c
  3967  003BC2  EC2E  F022         	call	_eval_poly	;wreg free
  3968  003BC6  C03E  F0CA         	movff	?_eval_poly+3,log@x+3
  3969  003BCA  C03D  F0C9         	movff	?_eval_poly+2,log@x+2
  3970  003BCE  C03C  F0C8         	movff	?_eval_poly+1,log@x+1
  3971  003BD2  C03B  F0C7         	movff	?_eval_poly,log@x
  3972  003BD6  0E18               	movlw	24
  3973  003BD8  6E22               	movwf	?___flmul+4,c
  3974  003BDA  0E72               	movlw	114
  3975  003BDC  6E23               	movwf	?___flmul+5,c
  3976  003BDE  0E31               	movlw	49
  3977  003BE0  6E24               	movwf	?___flmul+6,c
  3978  003BE2  0E3F               	movlw	63
  3979  003BE4  6E25               	movwf	?___flmul+7,c
  3980  003BE6  C043  F018         	movff	log@exponent,?___awtofl
  3981  003BEA  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3982  003BEE  EC56  F028         	call	___awtofl	;wreg free
  3983  003BF2  C01B  F021         	movff	?___awtofl+3,?___flmul+3
  3984  003BF6  C01A  F020         	movff	?___awtofl+2,?___flmul+2
  3985  003BFA  C019  F01F         	movff	?___awtofl+1,?___flmul+1
  3986  003BFE  C018  F01E         	movff	?___awtofl,?___flmul
  3987  003C02  ECB3  F020         	call	___flmul	;wreg free
  3988  003C06  C021  F0A4         	movff	?___flmul+3,?___fladd+3
  3989  003C0A  C020  F0A3         	movff	?___flmul+2,?___fladd+2
  3990  003C0E  C01F  F0A2         	movff	?___flmul+1,?___fladd+1
  3991  003C12  C01E  F0A1         	movff	?___flmul,?___fladd
  3992  003C16  C0C7  F0A5         	movff	log@x,?___fladd+4
  3993  003C1A  C0C8  F0A6         	movff	log@x+1,?___fladd+5
  3994  003C1E  C0C9  F0A7         	movff	log@x+2,?___fladd+6
  3995  003C22  C0CA  F0A8         	movff	log@x+3,?___fladd+7
  3996  003C26  EC21  F01C         	call	___fladd	;wreg free
  3997  003C2A  C0A4  F0CA         	movff	?___fladd+3,?_log+3
  3998  003C2E  C0A3  F0C9         	movff	?___fladd+2,?_log+2
  3999  003C32  C0A2  F0C8         	movff	?___fladd+1,?_log+1
  4000  003C36  C0A1  F0C7         	movff	?___fladd,?_log
  4001  003C3A                     l1871:
  4002  003C3A  0012               	return	
  4003  003C3C                     __end_of_log:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           postinc0	equ	0xFEE
  4013                           wreg	equ	0xFE8
  4014                           indf1	equ	0xFE7
  4015                           postdec1	equ	0xFE5
  4016                           fsr1h	equ	0xFE2
  4017                           fsr1l	equ	0xFE1
  4018                           indf2	equ	0xFDF
  4019                           postinc2	equ	0xFDE
  4020                           postdec2	equ	0xFDD
  4021                           plusw2	equ	0xFDB
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function _exp *****************
  4027 ;; Defined at:
  4028 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  x               4   38[BANK0 ] int 
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;  exponent        2   46[BANK0 ] int 
  4033 ;;  sign            1   48[BANK0 ] unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  4   38[BANK0 ] unsigned char 
  4036 ;; Registers used:
  4037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/1
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4043 ;;      Params:         0       4       0       0       0       0       0
  4044 ;;      Locals:         0       7       0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0
  4046 ;;      Totals:         0      11       0       0       0       0       0
  4047 ;;Total ram usage:       11 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    6
  4050 ;; This function calls:
  4051 ;;		___fldiv
  4052 ;;		___asflmul
  4053 ;;		___asflsub
  4054 ;;		___awtofl
  4055 ;;		_floor
  4056 ;;		_eval_poly
  4057 ;;		_ldexp
  4058 ;;		___flge
  4059 ;;		___flneg
  4060 ;;		___fltol
  4061 ;; This function is called by:
  4062 ;;		_doWork
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           	psect	text8
  4067  0032FC                     __ptext8:
  4068                           	opt stack 0
  4069  0032FC                     _exp:
  4070                           	opt stack 22
  4071                           
  4072                           ;incstack = 0
  4073                           ;incstack = 0
  4074  0032FC  0100               	movlb	0	; () banked
  4075  0032FE  EE20  F0C7         	lfsr	2,exp@x
  4076  003302  50DE               	movf	postinc2,w,c
  4077  003304  10DE               	iorwf	postinc2,w,c
  4078  003306  10DE               	iorwf	postinc2,w,c
  4079  003308  10DE               	iorwf	postinc2,w,c
  4080  00330A  E107               	bnz	l14074
  4081                           
  4082                           ; BSR set to: 0
  4083  00330C  0E00               	movlw	0
  4084  00330E  6FC7               	movwf	?_exp& (0+255),b
  4085  003310  6FC8               	movwf	(?_exp+1)& (0+255),b
  4086  003312  0E80               	movlw	128
  4087  003314  6FC9               	movwf	(?_exp+2)& (0+255),b
  4088  003316  0E3F               	movlw	63
  4089  003318  D018               	goto	L3
  4090  00331A                     l14074:
  4091                           
  4092                           ; BSR set to: 0
  4093  00331A  0E18               	movlw	24
  4094  00331C  6E0E               	movwf	?___flge,c
  4095  00331E  0E72               	movlw	114
  4096  003320  6E0F               	movwf	?___flge+1,c
  4097  003322  0E31               	movlw	49
  4098  003324  6E10               	movwf	?___flge+2,c
  4099  003326  0E44               	movlw	68
  4100  003328  6E11               	movwf	?___flge+3,c
  4101  00332A  C0C7  F012         	movff	exp@x,?___flge+4
  4102  00332E  C0C8  F013         	movff	exp@x+1,?___flge+5
  4103  003332  C0C9  F014         	movff	exp@x+2,?___flge+6
  4104  003336  C0CA  F015         	movff	exp@x+3,?___flge+7
  4105  00333A  ECDD  F026         	call	___flge	;wreg free
  4106  00333E  E207               	bc	l14080
  4107  003340  0100               	movlb	0	; () banked
  4108  003342  69C7               	setf	?_exp& (0+255),b
  4109  003344  69C8               	setf	(?_exp+1)& (0+255),b
  4110  003346  0E7F               	movlw	127
  4111  003348  6FC9               	movwf	(?_exp+2)& (0+255),b
  4112  00334A                     L3:
  4113  00334A  6FCA               	movwf	(?_exp+3)& (0+255),b
  4114  00334C  D0C9               	goto	l1579
  4115  00334E                     l14080:
  4116  00334E  C0C7  F00E         	movff	exp@x,?___flge
  4117  003352  C0C8  F00F         	movff	exp@x+1,?___flge+1
  4118  003356  C0C9  F010         	movff	exp@x+2,?___flge+2
  4119  00335A  C0CA  F011         	movff	exp@x+3,?___flge+3
  4120  00335E  0E87               	movlw	135
  4121  003360  6E12               	movwf	?___flge+4,c
  4122  003362  0E48               	movlw	72
  4123  003364  6E13               	movwf	?___flge+5,c
  4124  003366  0E3A               	movlw	58
  4125  003368  6E14               	movwf	?___flge+6,c
  4126  00336A  0EC4               	movlw	196
  4127  00336C  6E15               	movwf	?___flge+7,c
  4128  00336E  ECDD  F026         	call	___flge	;wreg free
  4129  003372  E202               	bc	l14084
  4130  003374  0100               	movlb	0	; () banked
  4131  003376  D08E               	goto	u13370
  4132  003378                     l14084:
  4133  003378  0100               	movlb	0	; () banked
  4134  00337A  0E01               	movlw	1
  4135  00337C  AFCA               	btfss	(exp@x+3)& (0+255),7,b
  4136  00337E  0E00               	movlw	0
  4137  003380  6FD1               	movwf	exp@sign& (0+255),b
  4138  003382  51D1               	movf	exp@sign& (0+255),w,b
  4139  003384  E012               	bz	l1582
  4140                           
  4141                           ; BSR set to: 0
  4142  003386  C0C7  F00E         	movff	exp@x,?___flneg
  4143  00338A  C0C8  F00F         	movff	exp@x+1,?___flneg+1
  4144  00338E  C0C9  F010         	movff	exp@x+2,?___flneg+2
  4145  003392  C0CA  F011         	movff	exp@x+3,?___flneg+3
  4146  003396  EC78  F029         	call	___flneg	;wreg free
  4147  00339A  C011  F0CA         	movff	?___flneg+3,exp@x+3
  4148  00339E  C010  F0C9         	movff	?___flneg+2,exp@x+2
  4149  0033A2  C00F  F0C8         	movff	?___flneg+1,exp@x+1
  4150  0033A6  C00E  F0C7         	movff	?___flneg,exp@x
  4151  0033AA                     l1582:
  4152                           
  4153                           ; BSR set to: 0
  4154  0033AA  0E3B               	movlw	59
  4155  0033AC  6E34               	movwf	?___asflmul,c
  4156  0033AE  0EAA               	movlw	170
  4157  0033B0  6E35               	movwf	?___asflmul+1,c
  4158  0033B2  0EB8               	movlw	184
  4159  0033B4  6E36               	movwf	?___asflmul+2,c
  4160  0033B6  0E3F               	movlw	63
  4161  0033B8  6E37               	movwf	?___asflmul+3,c
  4162  0033BA  0EC7               	movlw	exp@x& (0+255)
  4163  0033BC  EC4E  F027         	call	___asflmul
  4164  0033C0  C0C7  F0AC         	movff	exp@x,?_floor
  4165  0033C4  C0C8  F0AD         	movff	exp@x+1,?_floor+1
  4166  0033C8  C0C9  F0AE         	movff	exp@x+2,?_floor+2
  4167  0033CC  C0CA  F0AF         	movff	exp@x+3,?_floor+3
  4168  0033D0  ECBA  F01F         	call	_floor	;wreg free
  4169  0033D4  C0AF  F0CE         	movff	?_floor+3,_exp$2284+3
  4170  0033D8  C0AE  F0CD         	movff	?_floor+2,_exp$2284+2
  4171  0033DC  C0AD  F0CC         	movff	?_floor+1,_exp$2284+1
  4172  0033E0  C0AC  F0CB         	movff	?_floor,_exp$2284
  4173  0033E4  C0CB  F034         	movff	_exp$2284,?___fltol
  4174  0033E8  C0CC  F035         	movff	_exp$2284+1,?___fltol+1
  4175  0033EC  C0CD  F036         	movff	_exp$2284+2,?___fltol+2
  4176  0033F0  C0CE  F037         	movff	_exp$2284+3,?___fltol+3
  4177  0033F4  EC33  F024         	call	___fltol	;wreg free
  4178  0033F8  C034  F0CF         	movff	?___fltol,exp@exponent
  4179  0033FC  C035  F0D0         	movff	?___fltol+1,exp@exponent+1
  4180  003400  0100               	movlb	0	; () banked
  4181  003402  0E00               	movlw	high exp@x
  4182  003404  6E3C               	movwf	?___asflsub+1,c
  4183  003406  0EC7               	movlw	low exp@x
  4184  003408  6E3B               	movwf	?___asflsub,c
  4185  00340A  C0CF  F018         	movff	exp@exponent,?___awtofl
  4186  00340E  C0D0  F019         	movff	exp@exponent+1,?___awtofl+1
  4187  003412  EC56  F028         	call	___awtofl	;wreg free
  4188  003416  C01B  F040         	movff	?___awtofl+3,?___asflsub+5
  4189  00341A  C01A  F03F         	movff	?___awtofl+2,?___asflsub+4
  4190  00341E  C019  F03E         	movff	?___awtofl+1,?___asflsub+3
  4191  003422  C018  F03D         	movff	?___awtofl,?___asflsub+2
  4192  003426  EC90  F026         	call	___asflsub	;wreg free
  4193                           
  4194                           ; BSR set to: 0
  4195  00342A  C0C7  F03B         	movff	exp@x,?_eval_poly
  4196  00342E  C0C8  F03C         	movff	exp@x+1,?_eval_poly+1
  4197  003432  C0C9  F03D         	movff	exp@x+2,?_eval_poly+2
  4198  003436  C0CA  F03E         	movff	exp@x+3,?_eval_poly+3
  4199  00343A  0E20               	movlw	low exp@coeff
  4200  00343C  6E3F               	movwf	?_eval_poly+4,c
  4201  00343E  6A41               	clrf	?_eval_poly+6,c
  4202  003440  0E09               	movlw	9
  4203  003442  6E40               	movwf	?_eval_poly+5,c
  4204  003444  EC2E  F022         	call	_eval_poly	;wreg free
  4205  003448  C03E  F0B0         	movff	?_eval_poly+3,?_ldexp+3
  4206  00344C  C03D  F0AF         	movff	?_eval_poly+2,?_ldexp+2
  4207  003450  C03C  F0AE         	movff	?_eval_poly+1,?_ldexp+1
  4208  003454  C03B  F0AD         	movff	?_eval_poly,?_ldexp
  4209  003458  C0CF  F0B1         	movff	exp@exponent,?_ldexp+4
  4210  00345C  C0D0  F0B2         	movff	exp@exponent+1,?_ldexp+5
  4211  003460  EC90  F023         	call	_ldexp	;wreg free
  4212  003464  C0B0  F0CA         	movff	?_ldexp+3,exp@x+3
  4213  003468  C0AF  F0C9         	movff	?_ldexp+2,exp@x+2
  4214  00346C  C0AE  F0C8         	movff	?_ldexp+1,exp@x+1
  4215  003470  C0AD  F0C7         	movff	?_ldexp,exp@x
  4216                           
  4217                           ; BSR set to: 0
  4218  003474  51D1               	movf	exp@sign& (0+255),w,b
  4219  003476  E02C               	bz	l1583
  4220                           
  4221                           ; BSR set to: 0
  4222  003478  EE20  F0C7         	lfsr	2,exp@x
  4223  00347C  0EFF               	movlw	255
  4224  00347E  18DE               	xorwf	postinc2,w,c
  4225  003480  0EFF               	movlw	255
  4226  003482  B4D8               	btfsc	status,2,c
  4227  003484  18DE               	xorwf	postinc2,w,c
  4228  003486  0E7F               	movlw	127
  4229  003488  B4D8               	btfsc	status,2,c
  4230  00348A  18DE               	xorwf	postinc2,w,c
  4231  00348C  0E7F               	movlw	127
  4232  00348E  B4D8               	btfsc	status,2,c
  4233  003490  18DE               	xorwf	postinc2,w,c
  4234  003492  E105               	bnz	l14100
  4235  003494                     u13370:
  4236                           
  4237                           ; BSR set to: 0
  4238  003494  6BC7               	clrf	?_exp& (0+255),b
  4239  003496  6BC8               	clrf	(?_exp+1)& (0+255),b
  4240  003498  6BC9               	clrf	(?_exp+2)& (0+255),b
  4241  00349A  6BCA               	clrf	(?_exp+3)& (0+255),b
  4242  00349C  D021               	goto	l1579
  4243  00349E                     l14100:
  4244                           
  4245                           ; BSR set to: 0
  4246  00349E  6BB1               	clrf	?___fldiv& (0+255),b
  4247  0034A0  6BB2               	clrf	(?___fldiv+1)& (0+255),b
  4248  0034A2  0E80               	movlw	128
  4249  0034A4  6FB3               	movwf	(?___fldiv+2)& (0+255),b
  4250  0034A6  0E3F               	movlw	63
  4251  0034A8  6FB4               	movwf	(?___fldiv+3)& (0+255),b
  4252  0034AA  C0C7  F0B5         	movff	exp@x,?___fldiv+4
  4253  0034AE  C0C8  F0B6         	movff	exp@x+1,?___fldiv+5
  4254  0034B2  C0C9  F0B7         	movff	exp@x+2,?___fldiv+6
  4255  0034B6  C0CA  F0B8         	movff	exp@x+3,?___fldiv+7
  4256  0034BA  EC39  F023         	call	___fldiv	;wreg free
  4257  0034BE  C0B4  F0CA         	movff	?___fldiv+3,?_exp+3
  4258  0034C2  C0B3  F0C9         	movff	?___fldiv+2,?_exp+2
  4259  0034C6  C0B2  F0C8         	movff	?___fldiv+1,?_exp+1
  4260  0034CA  C0B1  F0C7         	movff	?___fldiv,?_exp
  4261  0034CE  D008               	goto	l1579
  4262  0034D0                     l1583:
  4263                           
  4264                           ; BSR set to: 0
  4265  0034D0  C0C7  F0C7         	movff	exp@x,?_exp
  4266  0034D4  C0C8  F0C8         	movff	exp@x+1,?_exp+1
  4267  0034D8  C0C9  F0C9         	movff	exp@x+2,?_exp+2
  4268  0034DC  C0CA  F0CA         	movff	exp@x+3,?_exp+3
  4269  0034E0                     l1579:
  4270  0034E0  0012               	return	
  4271  0034E2                     __end_of_exp:
  4272                           	opt stack 0
  4273                           tblptru	equ	0xFF8
  4274                           tblptrh	equ	0xFF7
  4275                           tblptrl	equ	0xFF6
  4276                           tablat	equ	0xFF5
  4277                           prodh	equ	0xFF4
  4278                           prodl	equ	0xFF3
  4279                           intcon	equ	0xFF2
  4280                           postinc0	equ	0xFEE
  4281                           wreg	equ	0xFE8
  4282                           indf1	equ	0xFE7
  4283                           postdec1	equ	0xFE5
  4284                           fsr1h	equ	0xFE2
  4285                           fsr1l	equ	0xFE1
  4286                           indf2	equ	0xFDF
  4287                           postinc2	equ	0xFDE
  4288                           postdec2	equ	0xFDD
  4289                           plusw2	equ	0xFDB
  4290                           fsr2h	equ	0xFDA
  4291                           fsr2l	equ	0xFD9
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function ___flneg *****************
  4295 ;; Defined at:
  4296 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  f1              4   13[COMRAM] unsigned char 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;		None
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  4   13[COMRAM] unsigned char 
  4303 ;; Registers used:
  4304 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4305 ;; Tracked objects:
  4306 ;;		On entry : F/0
  4307 ;;		On exit  : F/0
  4308 ;;		Unchanged: F/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4310 ;;      Params:         4       0       0       0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0
  4313 ;;      Totals:         4       0       0       0       0       0       0
  4314 ;;Total ram usage:        4 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    2
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_exp
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text9
  4325  0052F0                     __ptext9:
  4326                           	opt stack 0
  4327  0052F0                     ___flneg:
  4328                           	opt stack 25
  4329                           
  4330                           ; BSR set to: 0
  4331                           
  4332                           ;incstack = 0
  4333                           ;incstack = 0
  4334  0052F0  EE20  F00E         	lfsr	2,___flneg@f1
  4335  0052F4  50DE               	movf	postinc2,w,c
  4336  0052F6  10DE               	iorwf	postinc2,w,c
  4337  0052F8  10DE               	iorwf	postinc2,w,c
  4338  0052FA  10DE               	iorwf	postinc2,w,c
  4339  0052FC  E002               	bz	l11794
  4340                           
  4341                           ; BSR set to: 0
  4342  0052FE  0E80               	movlw	128
  4343  005300  1A11               	xorwf	___flneg@f1+3,f,c
  4344  005302                     l11794:
  4345                           
  4346                           ; BSR set to: 0
  4347  005302  C00E  F00E         	movff	___flneg@f1,?___flneg
  4348  005306  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  4349  00530A  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  4350  00530E  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  4351                           
  4352                           ; BSR set to: 0
  4353  005312  0012               	return	
  4354  005314                     __end_of___flneg:
  4355                           	opt stack 0
  4356                           tblptru	equ	0xFF8
  4357                           tblptrh	equ	0xFF7
  4358                           tblptrl	equ	0xFF6
  4359                           tablat	equ	0xFF5
  4360                           prodh	equ	0xFF4
  4361                           prodl	equ	0xFF3
  4362                           intcon	equ	0xFF2
  4363                           postinc0	equ	0xFEE
  4364                           wreg	equ	0xFE8
  4365                           indf1	equ	0xFE7
  4366                           postdec1	equ	0xFE5
  4367                           fsr1h	equ	0xFE2
  4368                           fsr1l	equ	0xFE1
  4369                           indf2	equ	0xFDF
  4370                           postinc2	equ	0xFDE
  4371                           postdec2	equ	0xFDD
  4372                           plusw2	equ	0xFDB
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _ldexp *****************
  4378 ;; Defined at:
  4379 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  value           4   12[BANK0 ] unsigned char 
  4382 ;;  newexp          2   16[BANK0 ] int 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  4   12[BANK0 ] int 
  4387 ;; Registers used:
  4388 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : F/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4394 ;;      Params:         0       6       0       0       0       0       0
  4395 ;;      Locals:         0       0       0       0       0       0       0
  4396 ;;      Temps:          3       0       0       0       0       0       0
  4397 ;;      Totals:         3       6       0       0       0       0       0
  4398 ;;Total ram usage:        9 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    2
  4401 ;; This function calls:
  4402 ;;		Nothing
  4403 ;; This function is called by:
  4404 ;;		_exp
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text10
  4409  004720                     __ptext10:
  4410                           	opt stack 0
  4411  004720                     _ldexp:
  4412                           	opt stack 25
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;incstack = 0
  4416                           ;incstack = 0
  4417  004720  0100               	movlb	0	; () banked
  4418  004722  EE20  F0AD         	lfsr	2,ldexp@value
  4419  004726  50DE               	movf	postinc2,w,c
  4420  004728  10DE               	iorwf	postinc2,w,c
  4421  00472A  10DE               	iorwf	postinc2,w,c
  4422  00472C  10DE               	iorwf	postinc2,w,c
  4423  00472E  E014               	bz	u10200
  4424                           
  4425                           ; BSR set to: 0
  4426                           
  4427                           ; BSR set to: 0
  4428  004730  51B0               	movf	(ldexp@value+3)& (0+255),w,b
  4429  004732  0B7F               	andlw	127
  4430  004734  6E43               	movwf	??_ldexp& (0+255),c
  4431  004736  90D8               	bcf	status,0,c
  4432  004738  3443               	rlcf	??_ldexp,w,c
  4433  00473A  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4434  00473C  6A45               	clrf	(??_ldexp+2)& (0+255),c
  4435  00473E  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  4436  004740  5044               	movf	??_ldexp+1,w,c
  4437  004742  27B1               	addwf	ldexp@newexp& (0+255),f,b
  4438  004744  5045               	movf	??_ldexp+2,w,c
  4439  004746  23B2               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4440  004748  35AF               	rlcf	(ldexp@value+2)& (0+255),w,b
  4441  00474A  36E8               	rlcf	wreg,f,c
  4442  00474C  0B01               	andlw	1
  4443  00474E  27B1               	addwf	ldexp@newexp& (0+255),f,b
  4444  004750  0E00               	movlw	0
  4445  004752  23B2               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4446                           
  4447                           ; BSR set to: 0
  4448  004754  AFB2               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4449  004756  D005               	goto	l11756
  4450  004758                     u10200:
  4451                           
  4452                           ; BSR set to: 0
  4453  004758  6BAD               	clrf	?_ldexp& (0+255),b
  4454  00475A  6BAE               	clrf	(?_ldexp+1)& (0+255),b
  4455  00475C  6BAF               	clrf	(?_ldexp+2)& (0+255),b
  4456  00475E  6BB0               	clrf	(?_ldexp+3)& (0+255),b
  4457  004760  D031               	goto	l1704
  4458  004762                     l11756:
  4459                           
  4460                           ; BSR set to: 0
  4461  004762  51B2               	movf	(ldexp@newexp+1)& (0+255),w,b
  4462  004764  0A80               	xorlw	128
  4463  004766  0F7F               	addlw	-129
  4464  004768  0E00               	movlw	0
  4465  00476A  B4D8               	btfsc	status,2,c
  4466  00476C  5DB1               	subwf	ldexp@newexp& (0+255),w,b
  4467  00476E  E30E               	bnc	l11770
  4468                           
  4469                           ; BSR set to: 0
  4470  004770  AFB0               	btfss	(ldexp@value+3)& (0+255),7,b
  4471  004772  D006               	goto	l11766
  4472                           
  4473                           ; BSR set to: 0
  4474  004774  69AD               	setf	?_ldexp& (0+255),b
  4475  004776  69AE               	setf	(?_ldexp+1)& (0+255),b
  4476  004778  0E7F               	movlw	127
  4477  00477A  6FAF               	movwf	(?_ldexp+2)& (0+255),b
  4478  00477C  0EFF               	movlw	255
  4479  00477E  D004               	goto	L4
  4480  004780                     l11766:
  4481                           
  4482                           ; BSR set to: 0
  4483  004780  69AD               	setf	?_ldexp& (0+255),b
  4484  004782  69AE               	setf	(?_ldexp+1)& (0+255),b
  4485  004784  0E7F               	movlw	127
  4486  004786  6FAF               	movwf	(?_ldexp+2)& (0+255),b
  4487  004788                     L4:
  4488  004788  6FB0               	movwf	(?_ldexp+3)& (0+255),b
  4489  00478A  D01C               	goto	l1704
  4490  00478C                     l11770:
  4491                           
  4492                           ; BSR set to: 0
  4493  00478C  35B2               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4494  00478E  31B2               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4495  004790  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4496  004792  31B1               	rrcf	ldexp@newexp& (0+255),w,b
  4497  004794  6E43               	movwf	??_ldexp& (0+255),c
  4498  004796  19B0               	xorwf	(ldexp@value+3)& (0+255),w,b
  4499  004798  0B80               	andlw	-128
  4500  00479A  1843               	xorwf	??_ldexp,w,c
  4501  00479C  6FB0               	movwf	(ldexp@value+3)& (0+255),b
  4502  00479E  C0B1  F043         	movff	ldexp@newexp,??_ldexp
  4503  0047A2  0E01               	movlw	1
  4504  0047A4  1643               	andwf	??_ldexp,f,c
  4505  0047A6  3243               	rrcf	??_ldexp,f,c
  4506  0047A8  3243               	rrcf	??_ldexp,f,c
  4507  0047AA  51AF               	movf	(ldexp@value+2)& (0+255),w,b
  4508  0047AC  1843               	xorwf	??_ldexp,w,c
  4509  0047AE  0B7F               	andlw	-129
  4510  0047B0  1843               	xorwf	??_ldexp,w,c
  4511  0047B2  6FAF               	movwf	(ldexp@value+2)& (0+255),b
  4512                           
  4513                           ; BSR set to: 0
  4514  0047B4  C0AD  F0AD         	movff	ldexp@value,?_ldexp
  4515  0047B8  C0AE  F0AE         	movff	ldexp@value+1,?_ldexp+1
  4516  0047BC  C0AF  F0AF         	movff	ldexp@value+2,?_ldexp+2
  4517  0047C0  C0B0  F0B0         	movff	ldexp@value+3,?_ldexp+3
  4518  0047C4                     l1704:
  4519                           
  4520                           ; BSR set to: 0
  4521  0047C4  0012               	return	
  4522  0047C6                     __end_of_ldexp:
  4523                           	opt stack 0
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           prodh	equ	0xFF4
  4529                           prodl	equ	0xFF3
  4530                           intcon	equ	0xFF2
  4531                           postinc0	equ	0xFEE
  4532                           wreg	equ	0xFE8
  4533                           indf1	equ	0xFE7
  4534                           postdec1	equ	0xFE5
  4535                           fsr1h	equ	0xFE2
  4536                           fsr1l	equ	0xFE1
  4537                           indf2	equ	0xFDF
  4538                           postinc2	equ	0xFDE
  4539                           postdec2	equ	0xFDD
  4540                           plusw2	equ	0xFDB
  4541                           fsr2h	equ	0xFDA
  4542                           fsr2l	equ	0xFD9
  4543                           status	equ	0xFD8
  4544                           
  4545 ;; *************** function _eval_poly *****************
  4546 ;; Defined at:
  4547 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;  x               4   58[COMRAM] int 
  4550 ;;  d               1   62[COMRAM] PTR const 
  4551 ;;		 -> log@coeff(36), exp@coeff(40), 
  4552 ;;  n               2   63[COMRAM] int 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  res             4    8[BANK0 ] int 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  4   58[COMRAM] int 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4564 ;;      Params:         7       0       0       0       0       0       0
  4565 ;;      Locals:         0       4       0       0       0       0       0
  4566 ;;      Temps:          1       0       0       0       0       0       0
  4567 ;;      Totals:         8       4       0       0       0       0       0
  4568 ;;Total ram usage:       12 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    4
  4571 ;; This function calls:
  4572 ;;		___fladd
  4573 ;;		___flmul
  4574 ;; This function is called by:
  4575 ;;		_exp
  4576 ;;		_log
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text11
  4581  00445C                     __ptext11:
  4582                           	opt stack 0
  4583  00445C                     _eval_poly:
  4584                           	opt stack 23
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;incstack = 0
  4588                           ;incstack = 0
  4589  00445C  5040               	movf	eval_poly@n,w,c
  4590  00445E  D84C               	call	PL42	;call to abstracted procedure
  4591  004460  CFF5 F0A9          	movff	tablat,eval_poly@res
  4592  004464  0009               	tblrd		*+
  4593  004466  CFF5 F0AA          	movff	tablat,eval_poly@res+1
  4594  00446A  0009               	tblrd		*+
  4595  00446C  CFF5 F0AB          	movff	tablat,eval_poly@res+2
  4596  004470  000A               	tblrd		*-
  4597  004472  CFF5 F0AC          	movff	tablat,eval_poly@res+3
  4598  004476  D034               	goto	l14404
  4599  004478                     l14402:
  4600  004478  C0A9  F022         	movff	eval_poly@res,?___flmul+4
  4601  00447C  C0AA  F023         	movff	eval_poly@res+1,?___flmul+5
  4602  004480  C0AB  F024         	movff	eval_poly@res+2,?___flmul+6
  4603  004484  C0AC  F025         	movff	eval_poly@res+3,?___flmul+7
  4604  004488  C03B  F01E         	movff	eval_poly@x,?___flmul
  4605  00448C  C03C  F01F         	movff	eval_poly@x+1,?___flmul+1
  4606  004490  C03D  F020         	movff	eval_poly@x+2,?___flmul+2
  4607  004494  C03E  F021         	movff	eval_poly@x+3,?___flmul+3
  4608  004498  ECB3  F020         	call	___flmul	;wreg free
  4609  00449C  C021  F0A4         	movff	?___flmul+3,?___fladd+3
  4610  0044A0  C020  F0A3         	movff	?___flmul+2,?___fladd+2
  4611  0044A4  C01F  F0A2         	movff	?___flmul+1,?___fladd+1
  4612  0044A8  C01E  F0A1         	movff	?___flmul,?___fladd
  4613  0044AC  0640               	decf	eval_poly@n,f,c
  4614  0044AE  A0D8               	btfss	status,0,c
  4615  0044B0  0641               	decf	eval_poly@n+1,f,c
  4616  0044B2  5040               	movf	eval_poly@n& (0+255),w,c
  4617  0044B4  D821               	call	PL42	;call to abstracted procedure
  4618  0044B6  CFF5 F0A5          	movff	tablat,?___fladd+4
  4619  0044BA  0009               	tblrd		*+
  4620  0044BC  CFF5 F0A6          	movff	tablat,?___fladd+5
  4621  0044C0  0009               	tblrd		*+
  4622  0044C2  CFF5 F0A7          	movff	tablat,?___fladd+6
  4623  0044C6  000A               	tblrd		*-
  4624  0044C8  CFF5 F0A8          	movff	tablat,?___fladd+7
  4625  0044CC  EC21  F01C         	call	___fladd	;wreg free
  4626  0044D0  C0A4  F0AC         	movff	?___fladd+3,eval_poly@res+3
  4627  0044D4  C0A3  F0AB         	movff	?___fladd+2,eval_poly@res+2
  4628  0044D8  C0A2  F0AA         	movff	?___fladd+1,eval_poly@res+1
  4629  0044DC  C0A1  F0A9         	movff	?___fladd,eval_poly@res
  4630  0044E0                     l14404:
  4631  0044E0  5041               	movf	eval_poly@n+1,w,c
  4632  0044E2  1040               	iorwf	eval_poly@n,w,c
  4633  0044E4  E1C9               	bnz	l14402
  4634  0044E6  C0A9  F03B         	movff	eval_poly@res,?_eval_poly
  4635  0044EA  C0AA  F03C         	movff	eval_poly@res+1,?_eval_poly+1
  4636  0044EE  C0AB  F03D         	movff	eval_poly@res+2,?_eval_poly+2
  4637  0044F2  C0AC  F03E         	movff	eval_poly@res+3,?_eval_poly+3
  4638  0044F6  0012               	return	
  4639  0044F8                     __end_of_eval_poly:
  4640                           	opt stack 0
  4641  0044F8                     PL42:
  4642                           	opt stack 23
  4643  0044F8  0D04               	mullw	4
  4644  0044FA  503F               	movf	eval_poly@d,w,c
  4645  0044FC  24F3               	addwf	prodl,w,c
  4646  0044FE  6E42               	movwf	??_eval_poly& (0+255),c
  4647  004500  C042  FFF6         	movff	??_eval_poly,tblptrl
  4648  004504  0E06               	movlw	high __smallconst
  4649  004506  6EF7               	movwf	tblptrh,c
  4650  004508  0009               	tblrd		*+
  4651  00450A  0100               	movlb	0	; () banked
  4652  00450C  0012               	return	
  4653  00450E                     __end_ofPL42:
  4654                           	opt stack 0
  4655                           tblptru	equ	0xFF8
  4656                           tblptrh	equ	0xFF7
  4657                           tblptrl	equ	0xFF6
  4658                           tablat	equ	0xFF5
  4659                           prodh	equ	0xFF4
  4660                           prodl	equ	0xFF3
  4661                           intcon	equ	0xFF2
  4662                           postinc0	equ	0xFEE
  4663                           wreg	equ	0xFE8
  4664                           indf1	equ	0xFE7
  4665                           postdec1	equ	0xFE5
  4666                           fsr1h	equ	0xFE2
  4667                           fsr1l	equ	0xFE1
  4668                           indf2	equ	0xFDF
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           plusw2	equ	0xFDB
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _floor *****************
  4677 ;; Defined at:
  4678 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  x               4   11[BANK0 ] int 
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  i               4   15[BANK0 ] int 
  4683 ;;  expon           2   19[BANK0 ] int 
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  4   11[BANK0 ] int 
  4686 ;; Registers used:
  4687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4693 ;;      Params:         0       4       0       0       0       0       0
  4694 ;;      Locals:         0       6       0       0       0       0       0
  4695 ;;      Temps:          0       0       0       0       0       0       0
  4696 ;;      Totals:         0      10       0       0       0       0       0
  4697 ;;Total ram usage:       10 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    4
  4700 ;; This function calls:
  4701 ;;		___altofl
  4702 ;;		___fladd
  4703 ;;		___flge
  4704 ;;		_frexp
  4705 ;;		___fltol
  4706 ;; This function is called by:
  4707 ;;		_exp
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           	psect	text12
  4712  003F74                     __ptext12:
  4713                           	opt stack 0
  4714  003F74                     _floor:
  4715                           	opt stack 23
  4716                           
  4717                           ;incstack = 0
  4718                           ;incstack = 0
  4719  003F74  C0AC  F00E         	movff	floor@x,?_frexp
  4720  003F78  C0AD  F00F         	movff	floor@x+1,?_frexp+1
  4721  003F7C  C0AE  F010         	movff	floor@x+2,?_frexp+2
  4722  003F80  C0AF  F011         	movff	floor@x+3,?_frexp+3
  4723  003F84  0100               	movlb	0	; () banked
  4724  003F86  0E00               	movlw	high floor@expon
  4725  003F88  6E13               	movwf	?_frexp+5,c
  4726  003F8A  0EB4               	movlw	low floor@expon
  4727  003F8C  6E12               	movwf	?_frexp+4,c
  4728  003F8E  ECCC  F024         	call	_frexp	;wreg free
  4729                           
  4730                           ; BSR set to: 0
  4731  003F92  AFB5               	btfss	(floor@expon+1)& (0+255),7,b
  4732  003F94  D00F               	goto	l14390
  4733                           
  4734                           ; BSR set to: 0
  4735  003F96  AFAF               	btfss	(floor@x+3)& (0+255),7,b
  4736  003F98  D008               	goto	l1672
  4737                           
  4738                           ; BSR set to: 0
  4739  003F9A  0E00               	movlw	0
  4740  003F9C  6FAC               	movwf	?_floor& (0+255),b
  4741  003F9E  6FAD               	movwf	(?_floor+1)& (0+255),b
  4742  003FA0  0E80               	movlw	128
  4743  003FA2  6FAE               	movwf	(?_floor+2)& (0+255),b
  4744  003FA4  0EBF               	movlw	191
  4745  003FA6  6FAF               	movwf	(?_floor+3)& (0+255),b
  4746  003FA8  D064               	goto	l1673
  4747  003FAA                     l1672:
  4748                           
  4749                           ; BSR set to: 0
  4750  003FAA  6BAC               	clrf	?_floor& (0+255),b
  4751  003FAC  6BAD               	clrf	(?_floor+1)& (0+255),b
  4752  003FAE  6BAE               	clrf	(?_floor+2)& (0+255),b
  4753  003FB0  6BAF               	clrf	(?_floor+3)& (0+255),b
  4754  003FB2  D05F               	goto	l1673
  4755  003FB4                     l14390:
  4756                           
  4757                           ; BSR set to: 0
  4758  003FB4  0E1D               	movlw	29
  4759  003FB6  5DB4               	subwf	floor@expon& (0+255),w,b
  4760  003FB8  0E00               	movlw	0
  4761  003FBA  59B5               	subwfb	(floor@expon+1)& (0+255),w,b
  4762  003FBC  E309               	bnc	l14394
  4763                           
  4764                           ; BSR set to: 0
  4765  003FBE  C0AC  F0AC         	movff	floor@x,?_floor
  4766  003FC2  C0AD  F0AD         	movff	floor@x+1,?_floor+1
  4767  003FC6  C0AE  F0AE         	movff	floor@x+2,?_floor+2
  4768  003FCA  C0AF  F0AF         	movff	floor@x+3,?_floor+3
  4769  003FCE  D051               	goto	l1673
  4770  003FD0                     l14394:
  4771                           
  4772                           ; BSR set to: 0
  4773  003FD0  C0AC  F034         	movff	floor@x,?___fltol
  4774  003FD4  C0AD  F035         	movff	floor@x+1,?___fltol+1
  4775  003FD8  C0AE  F036         	movff	floor@x+2,?___fltol+2
  4776  003FDC  C0AF  F037         	movff	floor@x+3,?___fltol+3
  4777  003FE0  EC33  F024         	call	___fltol	;wreg free
  4778  003FE4  C037  F0AA         	movff	?___fltol+3,?___altofl+3
  4779  003FE8  C036  F0A9         	movff	?___fltol+2,?___altofl+2
  4780  003FEC  C035  F0A8         	movff	?___fltol+1,?___altofl+1
  4781  003FF0  C034  F0A7         	movff	?___fltol,?___altofl
  4782  003FF4  EC29  F027         	call	___altofl	;wreg free
  4783  003FF8  C0AA  F0B3         	movff	?___altofl+3,floor@i+3
  4784  003FFC  C0A9  F0B2         	movff	?___altofl+2,floor@i+2
  4785  004000  C0A8  F0B1         	movff	?___altofl+1,floor@i+1
  4786  004004  C0A7  F0B0         	movff	?___altofl,floor@i
  4787  004008  C0AC  F00E         	movff	floor@x,?___flge
  4788  00400C  C0AD  F00F         	movff	floor@x+1,?___flge+1
  4789  004010  C0AE  F010         	movff	floor@x+2,?___flge+2
  4790  004014  C0AF  F011         	movff	floor@x+3,?___flge+3
  4791  004018  C0B0  F012         	movff	floor@i,?___flge+4
  4792  00401C  C0B1  F013         	movff	floor@i+1,?___flge+5
  4793  004020  C0B2  F014         	movff	floor@i+2,?___flge+6
  4794  004024  C0B3  F015         	movff	floor@i+3,?___flge+7
  4795  004028  ECDD  F026         	call	___flge	;wreg free
  4796  00402C  E21A               	bc	l1675
  4797  00402E  C0B0  F0A1         	movff	floor@i,?___fladd
  4798  004032  C0B1  F0A2         	movff	floor@i+1,?___fladd+1
  4799  004036  C0B2  F0A3         	movff	floor@i+2,?___fladd+2
  4800  00403A  C0B3  F0A4         	movff	floor@i+3,?___fladd+3
  4801  00403E  0100               	movlb	0	; () banked
  4802  004040  6BA5               	clrf	(?___fladd+4)& (0+255),b
  4803  004042  6BA6               	clrf	(?___fladd+5)& (0+255),b
  4804  004044  0E80               	movlw	128
  4805  004046  6FA7               	movwf	(?___fladd+6)& (0+255),b
  4806  004048  0EBF               	movlw	191
  4807  00404A  6FA8               	movwf	(?___fladd+7)& (0+255),b
  4808  00404C  EC21  F01C         	call	___fladd	;wreg free
  4809  004050  C0A4  F0AF         	movff	?___fladd+3,?_floor+3
  4810  004054  C0A3  F0AE         	movff	?___fladd+2,?_floor+2
  4811  004058  C0A2  F0AD         	movff	?___fladd+1,?_floor+1
  4812  00405C  C0A1  F0AC         	movff	?___fladd,?_floor
  4813  004060  D008               	goto	l1673
  4814  004062                     l1675:
  4815  004062  C0B0  F0AC         	movff	floor@i,?_floor
  4816  004066  C0B1  F0AD         	movff	floor@i+1,?_floor+1
  4817  00406A  C0B2  F0AE         	movff	floor@i+2,?_floor+2
  4818  00406E  C0B3  F0AF         	movff	floor@i+3,?_floor+3
  4819  004072                     l1673:
  4820  004072  0012               	return	
  4821  004074                     __end_of_floor:
  4822                           	opt stack 0
  4823                           tblptru	equ	0xFF8
  4824                           tblptrh	equ	0xFF7
  4825                           tblptrl	equ	0xFF6
  4826                           tablat	equ	0xFF5
  4827                           prodh	equ	0xFF4
  4828                           prodl	equ	0xFF3
  4829                           intcon	equ	0xFF2
  4830                           postinc0	equ	0xFEE
  4831                           wreg	equ	0xFE8
  4832                           indf1	equ	0xFE7
  4833                           postdec1	equ	0xFE5
  4834                           fsr1h	equ	0xFE2
  4835                           fsr1l	equ	0xFE1
  4836                           indf2	equ	0xFDF
  4837                           postinc2	equ	0xFDE
  4838                           postdec2	equ	0xFDD
  4839                           plusw2	equ	0xFDB
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function ___fltol *****************
  4845 ;; Defined at:
  4846 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  f1              4   51[COMRAM] int 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  exp1            1   60[COMRAM] unsigned char 
  4851 ;;  sign1           1   59[COMRAM] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  4   51[COMRAM] long 
  4854 ;; Registers used:
  4855 ;;		wreg, status,2, status,0
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4861 ;;      Params:         4       0       0       0       0       0       0
  4862 ;;      Locals:         2       0       0       0       0       0       0
  4863 ;;      Temps:          4       0       0       0       0       0       0
  4864 ;;      Totals:        10       0       0       0       0       0       0
  4865 ;;Total ram usage:       10 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    2
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_doWork
  4872 ;;		_setEventData
  4873 ;;		_exp
  4874 ;;		_floor
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text13
  4879  004866                     __ptext13:
  4880                           	opt stack 0
  4881  004866                     ___fltol:
  4882                           	opt stack 26
  4883                           
  4884                           ;incstack = 0
  4885                           ;incstack = 0
  4886  004866  3436               	rlcf	(___fltol@f1+2)& (0+255),w,c
  4887  004868  3437               	rlcf	(___fltol@f1+3)& (0+255),w,c
  4888  00486A  6E3D               	movwf	___fltol@exp1,c
  4889  00486C  663D               	tstfsz	___fltol@exp1& (0+255),c
  4890  00486E  D005               	goto	l11822
  4891  004870                     l11820:
  4892  004870  6A34               	clrf	?___fltol,c
  4893  004872  6A35               	clrf	?___fltol+1,c
  4894  004874  6A36               	clrf	?___fltol+2,c
  4895  004876  6A37               	clrf	?___fltol+3,c
  4896  004878  D043               	goto	l1684
  4897  00487A                     l11822:
  4898  00487A  C034  F038         	movff	___fltol@f1,??___fltol
  4899  00487E  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  4900  004882  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  4901  004886  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  4902  00488A  0E20               	movlw	32
  4903  00488C  D005               	goto	u10290
  4904  00488E                     u10295:
  4905  00488E  90D8               	bcf	status,0,c
  4906  004890  323B               	rrcf	??___fltol+3,f,c
  4907  004892  323A               	rrcf	??___fltol+2,f,c
  4908  004894  3239               	rrcf	??___fltol+1,f,c
  4909  004896  3238               	rrcf	??___fltol,f,c
  4910  004898                     u10290:
  4911  004898  2EE8               	decfsz	wreg,f,c
  4912  00489A  D7F9               	goto	u10295
  4913  00489C  5038               	movf	??___fltol,w,c
  4914  00489E  6E3C               	movwf	___fltol@sign1,c
  4915  0048A0  8E36               	bsf	___fltol@f1+2,7,c
  4916  0048A2  6A37               	clrf	___fltol@f1+3,c
  4917  0048A4  0E96               	movlw	150
  4918  0048A6  5E3D               	subwf	___fltol@exp1,f,c
  4919  0048A8  AE3D               	btfss	___fltol@exp1,7,c
  4920  0048AA  D00C               	goto	l11840
  4921  0048AC  503D               	movf	___fltol@exp1,w,c
  4922  0048AE  0A80               	xorlw	128
  4923  0048B0  0F97               	addlw	151
  4924  0048B2  E3DE               	bnc	l11820
  4925  0048B4                     l11836:
  4926  0048B4  90D8               	bcf	status,0,c
  4927  0048B6  3237               	rrcf	___fltol@f1+3,f,c
  4928  0048B8  3236               	rrcf	___fltol@f1+2,f,c
  4929  0048BA  3235               	rrcf	___fltol@f1+1,f,c
  4930  0048BC  3234               	rrcf	___fltol@f1,f,c
  4931  0048BE  3E3D               	incfsz	___fltol@exp1,f,c
  4932  0048C0  D7F9               	goto	l11836
  4933  0048C2  D00C               	goto	l11848
  4934  0048C4                     l11840:
  4935  0048C4  0E1F               	movlw	31
  4936  0048C6  643D               	cpfsgt	___fltol@exp1,c
  4937  0048C8  D007               	goto	l11846
  4938  0048CA  D7D2               	goto	l11820
  4939  0048CC                     l11844:
  4940  0048CC  90D8               	bcf	status,0,c
  4941  0048CE  3634               	rlcf	___fltol@f1,f,c
  4942  0048D0  3635               	rlcf	___fltol@f1+1,f,c
  4943  0048D2  3636               	rlcf	___fltol@f1+2,f,c
  4944  0048D4  3637               	rlcf	___fltol@f1+3,f,c
  4945  0048D6  063D               	decf	___fltol@exp1,f,c
  4946  0048D8                     l11846:
  4947  0048D8  663D               	tstfsz	___fltol@exp1,c
  4948  0048DA  D7F8               	goto	l11844
  4949  0048DC                     l11848:
  4950  0048DC  503C               	movf	___fltol@sign1,w,c
  4951  0048DE  E008               	bz	l11852
  4952  0048E0  1E37               	comf	___fltol@f1+3,f,c
  4953  0048E2  1E36               	comf	___fltol@f1+2,f,c
  4954  0048E4  1E35               	comf	___fltol@f1+1,f,c
  4955  0048E6  6C34               	negf	___fltol@f1,c
  4956  0048E8  0E00               	movlw	0
  4957  0048EA  2235               	addwfc	___fltol@f1+1,f,c
  4958  0048EC  2236               	addwfc	___fltol@f1+2,f,c
  4959  0048EE  2237               	addwfc	___fltol@f1+3,f,c
  4960  0048F0                     l11852:
  4961  0048F0  C034  F034         	movff	___fltol@f1,?___fltol
  4962  0048F4  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  4963  0048F8  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  4964  0048FC  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  4965  004900                     l1684:
  4966  004900  0012               	return	
  4967  004902                     __end_of___fltol:
  4968                           	opt stack 0
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           postinc0	equ	0xFEE
  4977                           wreg	equ	0xFE8
  4978                           indf1	equ	0xFE7
  4979                           postdec1	equ	0xFE5
  4980                           fsr1h	equ	0xFE2
  4981                           fsr1l	equ	0xFE1
  4982                           indf2	equ	0xFDF
  4983                           postinc2	equ	0xFDE
  4984                           postdec2	equ	0xFDD
  4985                           plusw2	equ	0xFDB
  4986                           fsr2h	equ	0xFDA
  4987                           fsr2l	equ	0xFD9
  4988                           status	equ	0xFD8
  4989                           
  4990 ;; *************** function _frexp *****************
  4991 ;; Defined at:
  4992 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;  value           4   13[COMRAM] long 
  4995 ;;  eptr            2   17[COMRAM] PTR int 
  4996 ;;		 -> log@exponent(2), floor@expon(2), 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  4   13[COMRAM] PTR int 
  5001 ;; Registers used:
  5002 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5003 ;; Tracked objects:
  5004 ;;		On entry : F/0
  5005 ;;		On exit  : F/0
  5006 ;;		Unchanged: F/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5008 ;;      Params:         6       0       0       0       0       0       0
  5009 ;;      Locals:         0       0       0       0       0       0       0
  5010 ;;      Temps:          3       0       0       0       0       0       0
  5011 ;;      Totals:         9       0       0       0       0       0       0
  5012 ;;Total ram usage:        9 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    2
  5015 ;; This function calls:
  5016 ;;		Nothing
  5017 ;; This function is called by:
  5018 ;;		_floor
  5019 ;;		_log
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text14
  5024  004998                     __ptext14:
  5025                           	opt stack 0
  5026  004998                     _frexp:
  5027                           	opt stack 25
  5028                           
  5029                           ; BSR set to: 0
  5030                           
  5031                           ;incstack = 0
  5032                           ;incstack = 0
  5033  004998  EE20  F00E         	lfsr	2,frexp@value
  5034  00499C  50DE               	movf	postinc2,w,c
  5035  00499E  10DE               	iorwf	postinc2,w,c
  5036  0049A0  10DE               	iorwf	postinc2,w,c
  5037  0049A2  10DE               	iorwf	postinc2,w,c
  5038  0049A4  E10C               	bnz	l11806
  5039                           
  5040                           ; BSR set to: 0
  5041  0049A6  C012  FFD9         	movff	frexp@eptr,fsr2l
  5042  0049AA  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5043  0049AE  0E00               	movlw	0
  5044  0049B0  6ADE               	clrf	postinc2,c
  5045  0049B2  6ADD               	clrf	postdec2,c
  5046                           
  5047                           ; BSR set to: 0
  5048  0049B4  6A0E               	clrf	?_frexp,c
  5049  0049B6  6A0F               	clrf	?_frexp+1,c
  5050  0049B8  6A10               	clrf	?_frexp+2,c
  5051  0049BA  6A11               	clrf	?_frexp+3,c
  5052  0049BC  D02F               	goto	l1700
  5053  0049BE                     l11806:
  5054                           
  5055                           ; BSR set to: 0
  5056  0049BE  5011               	movf	frexp@value+3,w,c
  5057  0049C0  0B7F               	andlw	127
  5058  0049C2  6E14               	movwf	??_frexp& (0+255),c
  5059  0049C4  90D8               	bcf	status,0,c
  5060  0049C6  3414               	rlcf	??_frexp,w,c
  5061  0049C8  6E15               	movwf	(??_frexp+1)& (0+255),c
  5062  0049CA  6A16               	clrf	(??_frexp+2)& (0+255),c
  5063  0049CC  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  5064  0049CE  C012  FFD9         	movff	frexp@eptr,fsr2l
  5065  0049D2  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5066  0049D6  C015  FFDE         	movff	??_frexp+1,postinc2
  5067  0049DA  C016  FFDD         	movff	??_frexp+2,postdec2
  5068  0049DE  3410               	rlcf	frexp@value+2,w,c
  5069  0049E0  36E8               	rlcf	wreg,f,c
  5070  0049E2  0B01               	andlw	1
  5071  0049E4  C012  FFD9         	movff	frexp@eptr,fsr2l
  5072  0049E8  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5073  0049EC  12DE               	iorwf	postinc2,f,c
  5074  0049EE  0E00               	movlw	0
  5075  0049F0  12DD               	iorwf	postdec2,f,c
  5076                           
  5077                           ; BSR set to: 0
  5078  0049F2  C012  FFD9         	movff	frexp@eptr,fsr2l
  5079  0049F6  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5080  0049FA  0E82               	movlw	130
  5081  0049FC  26DE               	addwf	postinc2,f,c
  5082  0049FE  0EFF               	movlw	255
  5083  004A00  22DD               	addwfc	postdec2,f,c
  5084                           
  5085                           ; BSR set to: 0
  5086  004A02  5011               	movf	frexp@value+3,w,c
  5087  004A04  0B80               	andlw	-128
  5088  004A06  093F               	iorlw	63
  5089  004A08  6E11               	movwf	frexp@value+3,c
  5090                           
  5091                           ; BSR set to: 0
  5092  004A0A  9E10               	bcf	frexp@value+2,7,c
  5093                           
  5094                           ; BSR set to: 0
  5095  004A0C  C00E  F00E         	movff	frexp@value,?_frexp
  5096  004A10  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  5097  004A14  C010  F010         	movff	frexp@value+2,?_frexp+2
  5098  004A18  C011  F011         	movff	frexp@value+3,?_frexp+3
  5099  004A1C                     l1700:
  5100                           
  5101                           ; BSR set to: 0
  5102  004A1C  0012               	return	
  5103  004A1E                     __end_of_frexp:
  5104                           	opt stack 0
  5105                           tblptru	equ	0xFF8
  5106                           tblptrh	equ	0xFF7
  5107                           tblptrl	equ	0xFF6
  5108                           tablat	equ	0xFF5
  5109                           prodh	equ	0xFF4
  5110                           prodl	equ	0xFF3
  5111                           intcon	equ	0xFF2
  5112                           postinc0	equ	0xFEE
  5113                           wreg	equ	0xFE8
  5114                           indf1	equ	0xFE7
  5115                           postdec1	equ	0xFE5
  5116                           fsr1h	equ	0xFE2
  5117                           fsr1l	equ	0xFE1
  5118                           indf2	equ	0xFDF
  5119                           postinc2	equ	0xFDE
  5120                           postdec2	equ	0xFDD
  5121                           plusw2	equ	0xFDB
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function ___flge *****************
  5127 ;; Defined at:
  5128 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;  ff1             4   13[COMRAM] PTR int 
  5131 ;;  ff2             4   17[COMRAM] PTR int 
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;		None               void
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, status,0
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5143 ;;      Params:         8       0       0       0       0       0       0
  5144 ;;      Locals:         0       0       0       0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0
  5146 ;;      Totals:         8       0       0       0       0       0       0
  5147 ;;Total ram usage:        8 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    2
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_exp
  5154 ;;		_floor
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text15
  5159  004DBA                     __ptext15:
  5160                           	opt stack 0
  5161  004DBA                     ___flge:
  5162                           	opt stack 25
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;incstack = 0
  5166                           ;incstack = 0
  5167  004DBA  AE11               	btfss	___flge@ff1+3,7,c
  5168  004DBC  D009               	goto	l11780
  5169  004DBE  6C0E               	negf	___flge@ff1,c
  5170  004DC0  1E0F               	comf	___flge@ff1+1,f,c
  5171  004DC2  B0D8               	btfsc	status,0,c
  5172  004DC4  2A0F               	incf	___flge@ff1+1,f,c
  5173  004DC6  1E10               	comf	___flge@ff1+2,f,c
  5174  004DC8  B0D8               	btfsc	status,0,c
  5175  004DCA  2A10               	incf	___flge@ff1+2,f,c
  5176  004DCC  0E80               	movlw	128
  5177  004DCE  5611               	subfwb	___flge@ff1+3,f,c
  5178  004DD0                     l11780:
  5179  004DD0  AE15               	btfss	___flge@ff2+3,7,c
  5180  004DD2  D009               	goto	l1631
  5181  004DD4  6C12               	negf	___flge@ff2,c
  5182  004DD6  1E13               	comf	___flge@ff2+1,f,c
  5183  004DD8  B0D8               	btfsc	status,0,c
  5184  004DDA  2A13               	incf	___flge@ff2+1,f,c
  5185  004DDC  1E14               	comf	___flge@ff2+2,f,c
  5186  004DDE  B0D8               	btfsc	status,0,c
  5187  004DE0  2A14               	incf	___flge@ff2+2,f,c
  5188  004DE2  0E80               	movlw	128
  5189  004DE4  5615               	subfwb	___flge@ff2+3,f,c
  5190  004DE6                     l1631:
  5191  004DE6  0E80               	movlw	128
  5192  004DE8  1A11               	xorwf	___flge@ff1+3,f,c
  5193  004DEA  1A15               	xorwf	___flge@ff2+3,f,c
  5194  004DEC  5012               	movf	___flge@ff2,w,c
  5195  004DEE  5C0E               	subwf	___flge@ff1,w,c
  5196  004DF0  5013               	movf	___flge@ff2+1,w,c
  5197  004DF2  580F               	subwfb	___flge@ff1+1,w,c
  5198  004DF4  5014               	movf	___flge@ff2+2,w,c
  5199  004DF6  5810               	subwfb	___flge@ff1+2,w,c
  5200  004DF8  5015               	movf	___flge@ff2+3,w,c
  5201  004DFA  5811               	subwfb	___flge@ff1+3,w,c
  5202  004DFC  E202               	bc	l11786
  5203  004DFE  90D8               	bcf	status,0,c
  5204  004E00  D001               	goto	l1632
  5205  004E02                     l11786:
  5206  004E02  80D8               	bsf	status,0,c
  5207  004E04                     l1632:
  5208  004E04  0012               	return	
  5209  004E06                     __end_of___flge:
  5210                           	opt stack 0
  5211                           tblptru	equ	0xFF8
  5212                           tblptrh	equ	0xFF7
  5213                           tblptrl	equ	0xFF6
  5214                           tablat	equ	0xFF5
  5215                           prodh	equ	0xFF4
  5216                           prodl	equ	0xFF3
  5217                           intcon	equ	0xFF2
  5218                           postinc0	equ	0xFEE
  5219                           wreg	equ	0xFE8
  5220                           indf1	equ	0xFE7
  5221                           postdec1	equ	0xFE5
  5222                           fsr1h	equ	0xFE2
  5223                           fsr1l	equ	0xFE1
  5224                           indf2	equ	0xFDF
  5225                           postinc2	equ	0xFDE
  5226                           postdec2	equ	0xFDD
  5227                           plusw2	equ	0xFDB
  5228                           fsr2h	equ	0xFDA
  5229                           fsr2l	equ	0xFD9
  5230                           status	equ	0xFD8
  5231                           
  5232 ;; *************** function ___altofl *****************
  5233 ;; Defined at:
  5234 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  c               4    6[BANK0 ] long 
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;  sign            1   10[BANK0 ] unsigned char 
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  4    6[BANK0 ] unsigned char 
  5241 ;; Registers used:
  5242 ;;		wreg, status,2, status,0, cstack
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5248 ;;      Params:         0       4       0       0       0       0       0
  5249 ;;      Locals:         0       1       0       0       0       0       0
  5250 ;;      Temps:          0       0       0       0       0       0       0
  5251 ;;      Totals:         0       5       0       0       0       0       0
  5252 ;;Total ram usage:        5 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    3
  5255 ;; This function calls:
  5256 ;;		___flpack
  5257 ;; This function is called by:
  5258 ;;		_doWork
  5259 ;;		_floor
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text16
  5264  004E52                     __ptext16:
  5265                           	opt stack 0
  5266  004E52                     ___altofl:
  5267                           	opt stack 25
  5268                           
  5269                           ;incstack = 0
  5270                           ;incstack = 0
  5271  004E52  0100               	movlb	0	; () banked
  5272  004E54  6BAB               	clrf	___altofl@sign& (0+255),b
  5273  004E56  AFAA               	btfss	(___altofl@c+3)& (0+255),7,b
  5274  004E58  D00A               	goto	l14196
  5275                           
  5276                           ; BSR set to: 0
  5277  004E5A  1FAA               	comf	(___altofl@c+3)& (0+255),f,b
  5278  004E5C  1FA9               	comf	(___altofl@c+2)& (0+255),f,b
  5279  004E5E  1FA8               	comf	(___altofl@c+1)& (0+255),f,b
  5280  004E60  6DA7               	negf	___altofl@c& (0+255),b
  5281  004E62  0E00               	movlw	0
  5282  004E64  23A8               	addwfc	(___altofl@c+1)& (0+255),f,b
  5283  004E66  23A9               	addwfc	(___altofl@c+2)& (0+255),f,b
  5284  004E68  23AA               	addwfc	(___altofl@c+3)& (0+255),f,b
  5285                           
  5286                           ; BSR set to: 0
  5287  004E6A  0E01               	movlw	1
  5288  004E6C  6FAB               	movwf	___altofl@sign& (0+255),b
  5289  004E6E                     l14196:
  5290                           
  5291                           ; BSR set to: 0
  5292  004E6E  C0A7  F00E         	movff	___altofl@c,?___flpack
  5293  004E72  C0A8  F00F         	movff	___altofl@c+1,?___flpack+1
  5294  004E76  C0A9  F010         	movff	___altofl@c+2,?___flpack+2
  5295  004E7A  C0AA  F011         	movff	___altofl@c+3,?___flpack+3
  5296  004E7E  0E96               	movlw	150
  5297  004E80  6E12               	movwf	?___flpack+4,c
  5298  004E82  C0AB  F013         	movff	___altofl@sign,?___flpack+5
  5299  004E86  ECD0  F021         	call	___flpack	;wreg free
  5300  004E8A  C011  F0AA         	movff	?___flpack+3,?___altofl+3
  5301  004E8E  C010  F0A9         	movff	?___flpack+2,?___altofl+2
  5302  004E92  C00F  F0A8         	movff	?___flpack+1,?___altofl+1
  5303  004E96  C00E  F0A7         	movff	?___flpack,?___altofl
  5304  004E9A  0012               	return	
  5305  004E9C                     __end_of___altofl:
  5306                           	opt stack 0
  5307                           tblptru	equ	0xFF8
  5308                           tblptrh	equ	0xFF7
  5309                           tblptrl	equ	0xFF6
  5310                           tablat	equ	0xFF5
  5311                           prodh	equ	0xFF4
  5312                           prodl	equ	0xFF3
  5313                           intcon	equ	0xFF2
  5314                           postinc0	equ	0xFEE
  5315                           wreg	equ	0xFE8
  5316                           indf1	equ	0xFE7
  5317                           postdec1	equ	0xFE5
  5318                           fsr1h	equ	0xFE2
  5319                           fsr1l	equ	0xFE1
  5320                           indf2	equ	0xFDF
  5321                           postinc2	equ	0xFDE
  5322                           postdec2	equ	0xFDD
  5323                           plusw2	equ	0xFDB
  5324                           fsr2h	equ	0xFDA
  5325                           fsr2l	equ	0xFD9
  5326                           status	equ	0xFD8
  5327                           
  5328 ;; *************** function ___asflsub *****************
  5329 ;; Defined at:
  5330 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  f1p             2   58[COMRAM] PTR 
  5333 ;;		 -> exp@x(4), doWork@temp(4), 
  5334 ;;  f2              4   60[COMRAM] PTR 
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;		None
  5337 ;; Return value:  Size  Location     Type
  5338 ;;                  4   58[COMRAM] PTR 
  5339 ;; Registers used:
  5340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/1
  5343 ;;		On exit  : F/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5346 ;;      Params:         6       0       0       0       0       0       0
  5347 ;;      Locals:         0       0       0       0       0       0       0
  5348 ;;      Temps:          0       0       0       0       0       0       0
  5349 ;;      Totals:         6       0       0       0       0       0       0
  5350 ;;Total ram usage:        6 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    5
  5353 ;; This function calls:
  5354 ;;		___flsub
  5355 ;; This function is called by:
  5356 ;;		_doWork
  5357 ;;		_exp
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           	psect	text17
  5362  004D20                     __ptext17:
  5363                           	opt stack 0
  5364  004D20                     ___asflsub:
  5365                           	opt stack 23
  5366                           
  5367                           ;	Return value of ___asflsub is never used
  5368                           
  5369                           ;incstack = 0
  5370                           ;incstack = 0
  5371  004D20  C03B  FFD9         	movff	___asflsub@f1p,fsr2l
  5372  004D24  C03C  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5373  004D28  0100               	movlb	0	; () banked
  5374  004D2A  CFDE F0A9          	movff	postinc2,?___flsub
  5375  004D2E  CFDE F0AA          	movff	postinc2,?___flsub+1
  5376  004D32  CFDE F0AB          	movff	postinc2,?___flsub+2
  5377  004D36  CFDE F0AC          	movff	postinc2,?___flsub+3
  5378  004D3A  C03D  F0AD         	movff	___asflsub@f2,?___flsub+4
  5379  004D3E  C03E  F0AE         	movff	___asflsub@f2+1,?___flsub+5
  5380  004D42  C03F  F0AF         	movff	___asflsub@f2+2,?___flsub+6
  5381  004D46  C040  F0B0         	movff	___asflsub@f2+3,?___flsub+7
  5382  004D4A  EC1A  F028         	call	___flsub	;wreg free
  5383  004D4E  C03B  FFD9         	movff	___asflsub@f1p,fsr2l
  5384  004D52  C03C  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5385  004D56  0100               	movlb	0	; () banked
  5386  004D58  C0A9  FFDE         	movff	?___flsub,postinc2
  5387  004D5C  C0AA  FFDE         	movff	?___flsub+1,postinc2
  5388  004D60  C0AB  FFDE         	movff	?___flsub+2,postinc2
  5389  004D64  C0AC  FFDD         	movff	?___flsub+3,postdec2
  5390  004D68  06D9               	decf	fsr2l,f,c
  5391  004D6A  06D9               	decf	fsr2l,f,c
  5392                           
  5393                           ; BSR set to: 0
  5394  004D6C  0012               	return	
  5395  004D6E                     __end_of___asflsub:
  5396                           	opt stack 0
  5397                           tblptru	equ	0xFF8
  5398                           tblptrh	equ	0xFF7
  5399                           tblptrl	equ	0xFF6
  5400                           tablat	equ	0xFF5
  5401                           prodh	equ	0xFF4
  5402                           prodl	equ	0xFF3
  5403                           intcon	equ	0xFF2
  5404                           postinc0	equ	0xFEE
  5405                           wreg	equ	0xFE8
  5406                           indf1	equ	0xFE7
  5407                           postdec1	equ	0xFE5
  5408                           fsr1h	equ	0xFE2
  5409                           fsr1l	equ	0xFE1
  5410                           indf2	equ	0xFDF
  5411                           postinc2	equ	0xFDE
  5412                           postdec2	equ	0xFDD
  5413                           plusw2	equ	0xFDB
  5414                           fsr2h	equ	0xFDA
  5415                           fsr2l	equ	0xFD9
  5416                           status	equ	0xFD8
  5417                           
  5418 ;; *************** function ___flsub *****************
  5419 ;; Defined at:
  5420 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;  f1              4    8[BANK0 ] PTR 
  5423 ;;  f2              4   12[BANK0 ] PTR 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;		None
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  4    8[BANK0 ] PTR 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/1
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5435 ;;      Params:         0       8       0       0       0       0       0
  5436 ;;      Locals:         0       0       0       0       0       0       0
  5437 ;;      Temps:          0       0       0       0       0       0       0
  5438 ;;      Totals:         0       8       0       0       0       0       0
  5439 ;;Total ram usage:        8 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    4
  5442 ;; This function calls:
  5443 ;;		___fladd
  5444 ;; This function is called by:
  5445 ;;		_doWork
  5446 ;;		___asflsub
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text18
  5451  005034                     __ptext18:
  5452                           	opt stack 0
  5453  005034                     ___flsub:
  5454                           	opt stack 24
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;incstack = 0
  5458                           ;incstack = 0
  5459  005034  0100               	movlb	0	; () banked
  5460  005036  0E80               	movlw	128
  5461  005038  1BB0               	xorwf	(___flsub@f2+3)& (0+255),f,b
  5462                           
  5463                           ; BSR set to: 0
  5464  00503A  C0A9  F0A1         	movff	___flsub@f1,?___fladd
  5465  00503E  C0AA  F0A2         	movff	___flsub@f1+1,?___fladd+1
  5466  005042  C0AB  F0A3         	movff	___flsub@f1+2,?___fladd+2
  5467  005046  C0AC  F0A4         	movff	___flsub@f1+3,?___fladd+3
  5468  00504A  C0AD  F0A5         	movff	___flsub@f2,?___fladd+4
  5469  00504E  C0AE  F0A6         	movff	___flsub@f2+1,?___fladd+5
  5470  005052  C0AF  F0A7         	movff	___flsub@f2+2,?___fladd+6
  5471  005056  C0B0  F0A8         	movff	___flsub@f2+3,?___fladd+7
  5472  00505A  EC21  F01C         	call	___fladd	;wreg free
  5473  00505E  C0A4  F0AC         	movff	?___fladd+3,?___flsub+3
  5474  005062  C0A3  F0AB         	movff	?___fladd+2,?___flsub+2
  5475  005066  C0A2  F0AA         	movff	?___fladd+1,?___flsub+1
  5476  00506A  C0A1  F0A9         	movff	?___fladd,?___flsub
  5477  00506E  0012               	return	
  5478  005070                     __end_of___flsub:
  5479                           	opt stack 0
  5480                           tblptru	equ	0xFF8
  5481                           tblptrh	equ	0xFF7
  5482                           tblptrl	equ	0xFF6
  5483                           tablat	equ	0xFF5
  5484                           prodh	equ	0xFF4
  5485                           prodl	equ	0xFF3
  5486                           intcon	equ	0xFF2
  5487                           postinc0	equ	0xFEE
  5488                           wreg	equ	0xFE8
  5489                           indf1	equ	0xFE7
  5490                           postdec1	equ	0xFE5
  5491                           fsr1h	equ	0xFE2
  5492                           fsr1l	equ	0xFE1
  5493                           indf2	equ	0xFDF
  5494                           postinc2	equ	0xFDE
  5495                           postdec2	equ	0xFDD
  5496                           plusw2	equ	0xFDB
  5497                           fsr2h	equ	0xFDA
  5498                           fsr2l	equ	0xFD9
  5499                           status	equ	0xFD8
  5500                           
  5501 ;; *************** function ___asflmul *****************
  5502 ;; Defined at:
  5503 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  mp              1    wreg     PTR 
  5506 ;;		 -> exp@x(4), 
  5507 ;;  multiplicand    4   51[COMRAM] PTR 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  mp              1   55[COMRAM] PTR 
  5510 ;;		 -> exp@x(4), 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  4   51[COMRAM] PTR 
  5513 ;; Registers used:
  5514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : F/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5520 ;;      Params:         4       0       0       0       0       0       0
  5521 ;;      Locals:         1       0       0       0       0       0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0
  5523 ;;      Totals:         5       0       0       0       0       0       0
  5524 ;;Total ram usage:        5 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    4
  5527 ;; This function calls:
  5528 ;;		___flmul
  5529 ;; This function is called by:
  5530 ;;		_exp
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           	psect	text19
  5535  004E9C                     __ptext19:
  5536                           	opt stack 0
  5537  004E9C                     ___asflmul:
  5538                           	opt stack 23
  5539                           
  5540                           ;incstack = 0
  5541                           ;incstack = 0
  5542                           ;___asflmul@mp stored from wreg
  5543  004E9C  CFE8 F038          	movff	wreg,___asflmul@mp
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;	Return value of ___asflmul is never used
  5547  004EA0  5038               	movf	___asflmul@mp,w,c
  5548  004EA2  6ED9               	movwf	fsr2l,c
  5549  004EA4  6ADA               	clrf	fsr2h,c
  5550  004EA6  CFDE F01E          	movff	postinc2,?___flmul
  5551  004EAA  CFDE F01F          	movff	postinc2,?___flmul+1
  5552  004EAE  CFDE F020          	movff	postinc2,?___flmul+2
  5553  004EB2  CFDE F021          	movff	postinc2,?___flmul+3
  5554  004EB6  C034  F022         	movff	___asflmul@multiplicand,?___flmul+4
  5555  004EBA  C035  F023         	movff	___asflmul@multiplicand+1,?___flmul+5
  5556  004EBE  C036  F024         	movff	___asflmul@multiplicand+2,?___flmul+6
  5557  004EC2  C037  F025         	movff	___asflmul@multiplicand+3,?___flmul+7
  5558  004EC6  ECB3  F020         	call	___flmul	;wreg free
  5559  004ECA  5038               	movf	___asflmul@mp,w,c
  5560  004ECC  6ED9               	movwf	fsr2l,c
  5561  004ECE  6ADA               	clrf	fsr2h,c
  5562  004ED0  C01E  FFDE         	movff	?___flmul,postinc2
  5563  004ED4  C01F  FFDE         	movff	?___flmul+1,postinc2
  5564  004ED8  C020  FFDE         	movff	?___flmul+2,postinc2
  5565  004EDC  C021  FFDD         	movff	?___flmul+3,postdec2
  5566  004EE0  06D9               	decf	fsr2l,f,c
  5567  004EE2  06D9               	decf	fsr2l,f,c
  5568  004EE4  0012               	return	
  5569  004EE6                     __end_of___asflmul:
  5570                           	opt stack 0
  5571                           tblptru	equ	0xFF8
  5572                           tblptrh	equ	0xFF7
  5573                           tblptrl	equ	0xFF6
  5574                           tablat	equ	0xFF5
  5575                           prodh	equ	0xFF4
  5576                           prodl	equ	0xFF3
  5577                           intcon	equ	0xFF2
  5578                           postinc0	equ	0xFEE
  5579                           wreg	equ	0xFE8
  5580                           indf1	equ	0xFE7
  5581                           postdec1	equ	0xFE5
  5582                           fsr1h	equ	0xFE2
  5583                           fsr1l	equ	0xFE1
  5584                           indf2	equ	0xFDF
  5585                           postinc2	equ	0xFDE
  5586                           postdec2	equ	0xFDD
  5587                           plusw2	equ	0xFDB
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function ___fldiv *****************
  5593 ;; Defined at:
  5594 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  f1              4   16[BANK0 ] PTR 
  5597 ;;  f2              4   20[BANK0 ] PTR 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  f3              4   32[BANK0 ] PTR 
  5600 ;;  sign            1   37[BANK0 ] unsigned char 
  5601 ;;  exp             1   36[BANK0 ] unsigned char 
  5602 ;;  cntr            1   31[BANK0 ] unsigned char 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  4   16[BANK0 ] unsigned char 
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0, cstack
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5612 ;;      Params:         0       8       0       0       0       0       0
  5613 ;;      Locals:         0      14       0       0       0       0       0
  5614 ;;      Temps:          0       0       0       0       0       0       0
  5615 ;;      Totals:         0      22       0       0       0       0       0
  5616 ;;Total ram usage:       22 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    3
  5619 ;; This function calls:
  5620 ;;		___flpack
  5621 ;; This function is called by:
  5622 ;;		_doWork
  5623 ;;		_Celsius2Fahrenheit
  5624 ;;		___asfldiv
  5625 ;;		_exp
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text20
  5630  004672                     __ptext20:
  5631                           	opt stack 0
  5632  004672                     ___fldiv:
  5633                           	opt stack 25
  5634                           
  5635                           ;incstack = 0
  5636                           ;incstack = 0
  5637  004672  0100               	movlb	0	; () banked
  5638  004674  35B3               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  5639  004676  35B4               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  5640  004678  6FC5               	movwf	___fldiv@exp& (0+255),b
  5641  00467A  67C5               	tstfsz	___fldiv@exp& (0+255),b
  5642  00467C  D001               	goto	l14280
  5643  00467E  D006               	goto	u13710
  5644  004680                     l14280:
  5645                           
  5646                           ; BSR set to: 0
  5647  004680  0100               	movlb	0	; () banked
  5648  004682  35B7               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  5649  004684  35B8               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  5650  004686  6FC6               	movwf	___fldiv@sign& (0+255),b
  5651  004688  67C6               	tstfsz	___fldiv@sign& (0+255),b
  5652  00468A  D005               	goto	l14284
  5653  00468C                     u13710:
  5654                           
  5655                           ; BSR set to: 0
  5656  00468C  6BB1               	clrf	?___fldiv& (0+255),b
  5657  00468E  6BB2               	clrf	(?___fldiv+1)& (0+255),b
  5658  004690  6BB3               	clrf	(?___fldiv+2)& (0+255),b
  5659  004692  6BB4               	clrf	(?___fldiv+3)& (0+255),b
  5660  004694  D044               	goto	l1623
  5661  004696                     l14284:
  5662                           
  5663                           ; BSR set to: 0
  5664  004696  51C6               	movf	___fldiv@sign& (0+255),w,b
  5665  004698  0F89               	addlw	137
  5666  00469A  5FC5               	subwf	___fldiv@exp& (0+255),f,b
  5667                           
  5668                           ; BSR set to: 0
  5669  00469C  C0B4  F0C6         	movff	___fldiv@f1+3,___fldiv@sign
  5670  0046A0  0100               	movlb	0	; () banked
  5671  0046A2  51B8               	movf	(___fldiv@f2+3)& (0+255),w,b
  5672  0046A4  1BC6               	xorwf	___fldiv@sign& (0+255),f,b
  5673  0046A6  0E80               	movlw	128
  5674  0046A8  17C6               	andwf	___fldiv@sign& (0+255),f,b
  5675                           
  5676                           ; BSR set to: 0
  5677  0046AA  8FB3               	bsf	(___fldiv@f1+2)& (0+255),7,b
  5678                           
  5679                           ; BSR set to: 0
  5680  0046AC  6BB4               	clrf	(___fldiv@f1+3)& (0+255),b
  5681  0046AE  8FB7               	bsf	(___fldiv@f2+2)& (0+255),7,b
  5682                           
  5683                           ; BSR set to: 0
  5684  0046B0  6BB8               	clrf	(___fldiv@f2+3)& (0+255),b
  5685                           
  5686                           ; BSR set to: 0
  5687  0046B2  0E20               	movlw	32
  5688  0046B4  6FC0               	movwf	___fldiv@cntr& (0+255),b
  5689  0046B6                     l14296:
  5690                           
  5691                           ; BSR set to: 0
  5692  0046B6  90D8               	bcf	status,0,c
  5693  0046B8  37C1               	rlcf	___fldiv@f3& (0+255),f,b
  5694  0046BA  37C2               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  5695  0046BC  37C3               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  5696  0046BE  37C4               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  5697                           
  5698                           ; BSR set to: 0
  5699  0046C0  51B5               	movf	___fldiv@f2& (0+255),w,b
  5700  0046C2  5DB1               	subwf	___fldiv@f1& (0+255),w,b
  5701  0046C4  51B6               	movf	(___fldiv@f2+1)& (0+255),w,b
  5702  0046C6  59B2               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  5703  0046C8  51B7               	movf	(___fldiv@f2+2)& (0+255),w,b
  5704  0046CA  59B3               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  5705  0046CC  51B8               	movf	(___fldiv@f2+3)& (0+255),w,b
  5706  0046CE  59B4               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  5707  0046D0  E309               	bnc	l14304
  5708                           
  5709                           ; BSR set to: 0
  5710  0046D2  51B5               	movf	___fldiv@f2& (0+255),w,b
  5711  0046D4  5FB1               	subwf	___fldiv@f1& (0+255),f,b
  5712  0046D6  51B6               	movf	(___fldiv@f2+1)& (0+255),w,b
  5713  0046D8  5BB2               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  5714  0046DA  51B7               	movf	(___fldiv@f2+2)& (0+255),w,b
  5715  0046DC  5BB3               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  5716  0046DE  51B8               	movf	(___fldiv@f2+3)& (0+255),w,b
  5717  0046E0  5BB4               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  5718                           
  5719                           ; BSR set to: 0
  5720  0046E2  81C1               	bsf	___fldiv@f3& (0+255),0,b
  5721  0046E4                     l14304:
  5722                           
  5723                           ; BSR set to: 0
  5724  0046E4  90D8               	bcf	status,0,c
  5725  0046E6  37B1               	rlcf	___fldiv@f1& (0+255),f,b
  5726  0046E8  37B2               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  5727  0046EA  37B3               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  5728  0046EC  37B4               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  5729                           
  5730                           ; BSR set to: 0
  5731  0046EE  2FC0               	decfsz	___fldiv@cntr& (0+255),f,b
  5732  0046F0  D7E2               	goto	l14296
  5733                           
  5734                           ; BSR set to: 0
  5735  0046F2  C0C1  F00E         	movff	___fldiv@f3,?___flpack
  5736  0046F6  C0C2  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5737  0046FA  C0C3  F010         	movff	___fldiv@f3+2,?___flpack+2
  5738  0046FE  C0C4  F011         	movff	___fldiv@f3+3,?___flpack+3
  5739  004702  C0C5  F012         	movff	___fldiv@exp,?___flpack+4
  5740  004706  C0C6  F013         	movff	___fldiv@sign,?___flpack+5
  5741  00470A  ECD0  F021         	call	___flpack	;wreg free
  5742  00470E  C011  F0B4         	movff	?___flpack+3,?___fldiv+3
  5743  004712  C010  F0B3         	movff	?___flpack+2,?___fldiv+2
  5744  004716  C00F  F0B2         	movff	?___flpack+1,?___fldiv+1
  5745  00471A  C00E  F0B1         	movff	?___flpack,?___fldiv
  5746  00471E                     l1623:
  5747  00471E  0012               	return	
  5748  004720                     __end_of___fldiv:
  5749                           	opt stack 0
  5750                           tblptru	equ	0xFF8
  5751                           tblptrh	equ	0xFF7
  5752                           tblptrl	equ	0xFF6
  5753                           tablat	equ	0xFF5
  5754                           prodh	equ	0xFF4
  5755                           prodl	equ	0xFF3
  5756                           intcon	equ	0xFF2
  5757                           postinc0	equ	0xFEE
  5758                           wreg	equ	0xFE8
  5759                           indf1	equ	0xFE7
  5760                           postdec1	equ	0xFE5
  5761                           fsr1h	equ	0xFE2
  5762                           fsr1l	equ	0xFE1
  5763                           indf2	equ	0xFDF
  5764                           postinc2	equ	0xFDE
  5765                           postdec2	equ	0xFDD
  5766                           plusw2	equ	0xFDB
  5767                           fsr2h	equ	0xFDA
  5768                           fsr2l	equ	0xFD9
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function _vscp_doOneSecondWork *****************
  5772 ;; Defined at:
  5773 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;		None
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;		None               void
  5780 ;; Registers used:
  5781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : F/0
  5784 ;;		On exit  : F/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5787 ;;      Params:         0       0       0       0       0       0       0
  5788 ;;      Locals:         0       0       0       0       0       0       0
  5789 ;;      Temps:          0       1       0       0       0       0       0
  5790 ;;      Totals:         0       1       0       0       0       0       0
  5791 ;;Total ram usage:        1 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    8
  5794 ;; This function calls:
  5795 ;;		_vscp_getZone
  5796 ;;		_vscp_getSubzone
  5797 ;;		_vscp_sendHeartBeat
  5798 ;; This function is called by:
  5799 ;;		_main
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text21
  5804  004E06                     __ptext21:
  5805                           	opt stack 0
  5806  004E06                     _vscp_doOneSecondWork:
  5807                           	opt stack 21
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;vscp_firmware.c: 526: ++vscp_second;
  5811                           
  5812                           ;incstack = 0
  5813                           ;incstack = 0
  5814  004E06  2A51               	incf	_vscp_second,f,c
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  5818  004E08  0E3B               	movlw	59
  5819  004E0A  6451               	cpfsgt	_vscp_second,c
  5820  004E0C  D00C               	goto	l10248
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;vscp_firmware.c: 529: vscp_second = 0;
  5824  004E0E  6A51               	clrf	_vscp_second,c
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;vscp_firmware.c: 530: vscp_minute++;
  5828  004E10  2A4D               	incf	_vscp_minute,f,c
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  5832  004E12  5185               	movf	_vscp_node_state& (0+255),w,b
  5833  004E14  0A03               	xorlw	3
  5834  004E16  E107               	bnz	l10248
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  5838                           ;vscp_firmware.c: 535: vscp_getSubzone());
  5839  004E18  EC99  F02A         	call	_vscp_getSubzone	;wreg free
  5840  004E1C  6E44               	movwf	?_vscp_sendHeartBeat,c
  5841  004E1E  EC9E  F02A         	call	_vscp_getZone	;wreg free
  5842  004E22  EC52  F029         	call	_vscp_sendHeartBeat
  5843  004E26                     l10248:
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;vscp_firmware.c: 536: }
  5847                           ;vscp_firmware.c: 537: }
  5848                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  5849  004E26  0E3B               	movlw	59
  5850  004E28  644D               	cpfsgt	_vscp_minute,c
  5851  004E2A  D002               	goto	l10254
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;vscp_firmware.c: 540: vscp_minute = 0;
  5855  004E2C  6A4D               	clrf	_vscp_minute,c
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;vscp_firmware.c: 541: vscp_hour++;
  5859  004E2E  2B82               	incf	_vscp_hour& (0+255),f,b
  5860  004E30                     l10254:
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;vscp_firmware.c: 542: }
  5864                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  5865  004E30  0E17               	movlw	23
  5866  004E32  6582               	cpfsgt	_vscp_hour& (0+255),b
  5867  004E34  D001               	goto	l10258
  5868                           
  5869                           ; BSR set to: 0
  5870  004E36  6B82               	clrf	_vscp_hour& (0+255),b
  5871  004E38                     l10258:
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  5875  004E38  5185               	movf	_vscp_node_state& (0+255),w,b
  5876  004E3A  0A03               	xorlw	3
  5877  004E3C  E109               	bnz	l1103
  5878                           
  5879                           ; BSR set to: 0
  5880                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  5881  004E3E  2A4B               	incf	_vscp_guid_reset,f,c
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  5885  004E40  C04B  F0C0         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5886  004E44  0E0F               	movlw	15
  5887  004E46  17C0               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5888  004E48  0E02               	movlw	2
  5889  004E4A  5DC0               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5890  004E4C  B0D8               	btfsc	status,0,c
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  5894  004E4E  6A4B               	clrf	_vscp_guid_reset,c
  5895  004E50                     l1103:
  5896                           
  5897                           ; BSR set to: 0
  5898  004E50  0012               	return	
  5899  004E52                     __end_of_vscp_doOneSecondWork:
  5900                           	opt stack 0
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           intcon	equ	0xFF2
  5908                           postinc0	equ	0xFEE
  5909                           wreg	equ	0xFE8
  5910                           indf1	equ	0xFE7
  5911                           postdec1	equ	0xFE5
  5912                           fsr1h	equ	0xFE2
  5913                           fsr1l	equ	0xFE1
  5914                           indf2	equ	0xFDF
  5915                           postinc2	equ	0xFDE
  5916                           postdec2	equ	0xFDD
  5917                           plusw2	equ	0xFDB
  5918                           fsr2h	equ	0xFDA
  5919                           fsr2l	equ	0xFD9
  5920                           status	equ	0xFD8
  5921                           
  5922 ;; *************** function _vscp_sendHeartBeat *****************
  5923 ;; Defined at:
  5924 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  zone            1    wreg     unsigned char 
  5927 ;;  subzone         1   67[COMRAM] unsigned char 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  zone            1   68[COMRAM] unsigned char 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;		None               void
  5932 ;; Registers used:
  5933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : F/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5939 ;;      Params:         1       0       0       0       0       0       0
  5940 ;;      Locals:         1       0       0       0       0       0       0
  5941 ;;      Temps:          0       0       0       0       0       0       0
  5942 ;;      Totals:         2       0       0       0       0       0       0
  5943 ;;Total ram usage:        2 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    7
  5946 ;; This function calls:
  5947 ;;		_vscp_sendEvent
  5948 ;; This function is called by:
  5949 ;;		_vscp_doOneSecondWork
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text22
  5954  0052A4                     __ptext22:
  5955                           	opt stack 0
  5956  0052A4                     _vscp_sendHeartBeat:
  5957                           	opt stack 21
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;incstack = 0
  5961                           ;incstack = 0
  5962                           ;vscp_sendHeartBeat@zone stored from wreg
  5963  0052A4  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5964                           
  5965                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  5966  0052A8  0E83               	movlw	131
  5967  0052AA  0100               	movlb	0	; () banked
  5968  0052AC  6F94               	movwf	_vscp_omsg& (0+255),b
  5969                           
  5970                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  5971  0052AE  0E07               	movlw	7
  5972  0052B0  6F95               	movwf	(_vscp_omsg+1)& (0+255),b
  5973                           
  5974                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  5975  0052B2  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  5976  0052B4  0E14               	movlw	20
  5977  0052B6  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  5978                           
  5979                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  5980  0052B8  0E09               	movlw	9
  5981  0052BA  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  5985  0052BC  6B99               	clrf	(_vscp_omsg+5)& (0+255),b
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  5989  0052BE  C045  F09A         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  5993  0052C2  C044  F09B         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;vscp_firmware.c: 388: vscp_sendEvent();
  5997  0052C6  EF3E  F029         	goto	_vscp_sendEvent	;wreg free
  5998  0052CA                     __end_of_vscp_sendHeartBeat:
  5999                           	opt stack 0
  6000                           tblptru	equ	0xFF8
  6001                           tblptrh	equ	0xFF7
  6002                           tblptrl	equ	0xFF6
  6003                           tablat	equ	0xFF5
  6004                           prodh	equ	0xFF4
  6005                           prodl	equ	0xFF3
  6006                           intcon	equ	0xFF2
  6007                           postinc0	equ	0xFEE
  6008                           wreg	equ	0xFE8
  6009                           indf1	equ	0xFE7
  6010                           postdec1	equ	0xFE5
  6011                           fsr1h	equ	0xFE2
  6012                           fsr1l	equ	0xFE1
  6013                           indf2	equ	0xFDF
  6014                           postinc2	equ	0xFDE
  6015                           postdec2	equ	0xFDD
  6016                           plusw2	equ	0xFDB
  6017                           fsr2h	equ	0xFDA
  6018                           fsr2l	equ	0xFD9
  6019                           status	equ	0xFD8
  6020                           
  6021 ;; *************** function _vscp_getSubzone *****************
  6022 ;; Defined at:
  6023 ;;		line 2735 in file "../main.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;		None
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;		None
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      unsigned char 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2, cstack
  6032 ;; Tracked objects:
  6033 ;;		On entry : F/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6037 ;;      Params:         0       0       0       0       0       0       0
  6038 ;;      Locals:         0       0       0       0       0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0
  6040 ;;      Totals:         0       0       0       0       0       0       0
  6041 ;;Total ram usage:        0 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    3
  6044 ;; This function calls:
  6045 ;;		_readEEPROM
  6046 ;; This function is called by:
  6047 ;;		_vscp_doOneSecondWork
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           	psect	text23
  6052  005532                     __ptext23:
  6053                           	opt stack 0
  6054  005532                     _vscp_getSubzone:
  6055                           	opt stack 25
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;main.c: 2736: return readEEPROM(0x42);
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;incstack = 0
  6062                           ;incstack = 0
  6063  005532  6A0F               	clrf	?_readEEPROM+1,c
  6064  005534  0E42               	movlw	66
  6065  005536  6E0E               	movwf	?_readEEPROM,c
  6066  005538  EF62  F02A         	goto	_readEEPROM	;wreg free
  6067  00553C                     __end_of_vscp_getSubzone:
  6068                           	opt stack 0
  6069                           tblptru	equ	0xFF8
  6070                           tblptrh	equ	0xFF7
  6071                           tblptrl	equ	0xFF6
  6072                           tablat	equ	0xFF5
  6073                           prodh	equ	0xFF4
  6074                           prodl	equ	0xFF3
  6075                           intcon	equ	0xFF2
  6076                           postinc0	equ	0xFEE
  6077                           wreg	equ	0xFE8
  6078                           indf1	equ	0xFE7
  6079                           postdec1	equ	0xFE5
  6080                           fsr1h	equ	0xFE2
  6081                           fsr1l	equ	0xFE1
  6082                           indf2	equ	0xFDF
  6083                           postinc2	equ	0xFDE
  6084                           postdec2	equ	0xFDD
  6085                           plusw2	equ	0xFDB
  6086                           fsr2h	equ	0xFDA
  6087                           fsr2l	equ	0xFD9
  6088                           status	equ	0xFD8
  6089                           
  6090 ;; *************** function _vscp_getZone *****************
  6091 ;; Defined at:
  6092 ;;		line 2726 in file "../main.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;		None
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;		None
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      unsigned char 
  6099 ;; Registers used:
  6100 ;;		wreg, status,2, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6106 ;;      Params:         0       0       0       0       0       0       0
  6107 ;;      Locals:         0       0       0       0       0       0       0
  6108 ;;      Temps:          0       0       0       0       0       0       0
  6109 ;;      Totals:         0       0       0       0       0       0       0
  6110 ;;Total ram usage:        0 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    3
  6113 ;; This function calls:
  6114 ;;		_readEEPROM
  6115 ;; This function is called by:
  6116 ;;		_vscp_doOneSecondWork
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text24
  6121  00553C                     __ptext24:
  6122                           	opt stack 0
  6123  00553C                     _vscp_getZone:
  6124                           	opt stack 25
  6125                           
  6126                           ;main.c: 2727: return readEEPROM(0x41);
  6127                           
  6128                           ;incstack = 0
  6129                           ;incstack = 0
  6130  00553C  6A0F               	clrf	?_readEEPROM+1,c
  6131  00553E  0E41               	movlw	65
  6132  005540  6E0E               	movwf	?_readEEPROM,c
  6133  005542  EF62  F02A         	goto	_readEEPROM	;wreg free
  6134  005546                     __end_of_vscp_getZone:
  6135                           	opt stack 0
  6136                           tblptru	equ	0xFF8
  6137                           tblptrh	equ	0xFF7
  6138                           tblptrl	equ	0xFF6
  6139                           tablat	equ	0xFF5
  6140                           prodh	equ	0xFF4
  6141                           prodl	equ	0xFF3
  6142                           intcon	equ	0xFF2
  6143                           postinc0	equ	0xFEE
  6144                           wreg	equ	0xFE8
  6145                           indf1	equ	0xFE7
  6146                           postdec1	equ	0xFE5
  6147                           fsr1h	equ	0xFE2
  6148                           fsr1l	equ	0xFE1
  6149                           indf2	equ	0xFDF
  6150                           postinc2	equ	0xFDE
  6151                           postdec2	equ	0xFDD
  6152                           plusw2	equ	0xFDB
  6153                           fsr2h	equ	0xFDA
  6154                           fsr2l	equ	0xFD9
  6155                           status	equ	0xFD8
  6156                           
  6157 ;; *************** function _doOneSecondWork *****************
  6158 ;; Defined at:
  6159 ;;		line 704 in file "../main.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;		None
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;  i               1   54[BANK0 ] unsigned char 
  6164 ;;  tmp             1   53[BANK0 ] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;		None               void
  6167 ;; Registers used:
  6168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : F/0
  6171 ;;		On exit  : F/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6174 ;;      Params:         0       0       0       0       0       0       0
  6175 ;;      Locals:         0       2       0       0       0       0       0
  6176 ;;      Temps:          0       2       0       0       0       0       0
  6177 ;;      Totals:         0       4       0       0       0       0       0
  6178 ;;Total ram usage:        4 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    8
  6181 ;; This function calls:
  6182 ;;		_readEEPROM
  6183 ;;		_vscp_sendEvent
  6184 ;;		_sendTempEvent
  6185 ;; This function is called by:
  6186 ;;		_main
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text25
  6191  0034E2                     __ptext25:
  6192                           	opt stack 0
  6193  0034E2                     _doOneSecondWork:
  6194                           	opt stack 21
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;main.c: 706: uint8_t tmp;
  6198                           ;main.c: 707: uint8_t i;
  6199                           ;main.c: 710: if ( 0x03 == vscp_node_state ) {
  6200                           
  6201                           ;incstack = 0
  6202                           ;incstack = 0
  6203  0034E2  5185               	movf	_vscp_node_state& (0+255),w,b
  6204  0034E4  0A03               	xorlw	3
  6205  0034E6  E001 D0B8          	bnz	l245
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;main.c: 712: for (i = 0; i < 6; i++) {
  6209  0034EA  6BD7               	clrf	doOneSecondWork@i& (0+255),b
  6210  0034EC                     l13840:
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;main.c: 715: tmp = readEEPROM(0x49 + i);
  6214  0034EC  0E49               	movlw	73
  6215  0034EE  25D7               	addwf	doOneSecondWork@i& (0+255),w,b
  6216  0034F0  6E0E               	movwf	?_readEEPROM,c
  6217  0034F2  6A0F               	clrf	?_readEEPROM+1,c
  6218  0034F4  0E00               	movlw	0
  6219  0034F6  220F               	addwfc	?_readEEPROM+1,f,c
  6220  0034F8  EC62  F02A         	call	_readEEPROM	;wreg free
  6221  0034FC  0100               	movlb	0	; () banked
  6222  0034FE  6FD6               	movwf	doOneSecondWork@tmp& (0+255),b
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;main.c: 716: if (tmp && (seconds_temp[i] > tmp)) {
  6226  003500  51D6               	movf	doOneSecondWork@tmp& (0+255),w,b
  6227  003502  E016               	bz	l13850
  6228                           
  6229                           ; BSR set to: 0
  6230  003504  0E00               	movlw	low _seconds_temp
  6231  003506  25D7               	addwf	doOneSecondWork@i& (0+255),w,b
  6232  003508  6ED9               	movwf	fsr2l,c
  6233  00350A  6ADA               	clrf	fsr2h,c
  6234  00350C  0E01               	movlw	high _seconds_temp
  6235  00350E  22DA               	addwfc	fsr2h,f,c
  6236  003510  50DF               	movf	indf2,w,c
  6237  003512  61D6               	cpfslt	doOneSecondWork@tmp& (0+255),b
  6238  003514  D00D               	goto	l13850
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;main.c: 719: if ( sendTempEvent( i ) ) {
  6242  003516  51D7               	movf	doOneSecondWork@i& (0+255),w,b
  6243  003518  EC4C  F025         	call	_sendTempEvent
  6244  00351C  0900               	iorlw	0
  6245  00351E  E008               	bz	l13850
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;main.c: 720: seconds_temp[i] = 0;
  6249  003520  0E00               	movlw	low _seconds_temp
  6250  003522  0100               	movlb	0	; () banked
  6251  003524  25D7               	addwf	doOneSecondWork@i& (0+255),w,b
  6252  003526  6ED9               	movwf	fsr2l,c
  6253  003528  6ADA               	clrf	fsr2h,c
  6254  00352A  0E01               	movlw	high _seconds_temp
  6255  00352C  22DA               	addwfc	fsr2h,f,c
  6256  00352E  6ADF               	clrf	indf2,c
  6257  003530                     l13850:
  6258                           
  6259                           ;main.c: 721: }
  6260                           ;main.c: 723: }
  6261                           ;main.c: 726: if (0x80 & readEEPROM(0x43 + i)) {
  6262  003530  0E43               	movlw	67
  6263  003532  0100               	movlb	0	; () banked
  6264  003534  25D7               	addwf	doOneSecondWork@i& (0+255),w,b
  6265  003536  6E0E               	movwf	?_readEEPROM,c
  6266  003538  6A0F               	clrf	?_readEEPROM+1,c
  6267  00353A  0E00               	movlw	0
  6268  00353C  220F               	addwfc	?_readEEPROM+1,f,c
  6269  00353E  EC62  F02A         	call	_readEEPROM	;wreg free
  6270  003542  0100               	movlb	0	; () banked
  6271  003544  6FD4               	movwf	??_doOneSecondWork& (0+255),b
  6272  003546  AFD4               	btfss	??_doOneSecondWork& (0+255),7,b
  6273  003548  D084               	goto	l13904
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;main.c: 729: if (low_alarm & (1 << i)) {
  6277  00354A  C0D7  F0D4         	movff	doOneSecondWork@i,??_doOneSecondWork
  6278  00354E  0E01               	movlw	1
  6279  003550  6FD5               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6280  003552  2BD4               	incf	??_doOneSecondWork& (0+255),f,b
  6281  003554  D002               	goto	u12914
  6282  003556                     u12915:
  6283  003556  90D8               	bcf	status,0,c
  6284  003558  37D5               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6285  00355A                     u12914:
  6286  00355A  2FD4               	decfsz	??_doOneSecondWork& (0+255),f,b
  6287  00355C  D7FC               	goto	u12915
  6288  00355E  51D5               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6289  003560  157F               	andwf	_low_alarm& (0+255),w,b
  6290  003562  E035               	bz	l13878
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;main.c: 732: if (readEEPROM(i + 0x43) & (1<<3)) {
  6294  003564  D898               	call	PL30	;call to abstracted procedure
  6295  003566  EC62  F02A         	call	_readEEPROM	;wreg free
  6296  00356A  0100               	movlb	0	; () banked
  6297  00356C  6FD4               	movwf	??_doOneSecondWork& (0+255),b
  6298  00356E  A7D4               	btfss	??_doOneSecondWork& (0+255),3,b
  6299  003570  D02E               	goto	l13878
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;main.c: 735: vscp_omsg.priority = 0x00;
  6303  003572  6B95               	clrf	(_vscp_omsg+1)& (0+255),b
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;main.c: 736: vscp_omsg.flags = 0x80 + 3;
  6307  003574  0E83               	movlw	131
  6308  003576  6F94               	movwf	_vscp_omsg& (0+255),b
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;main.c: 738: if (readEEPROM(i + 0x43) & (1<<5)) {
  6312  003578  D88E               	call	PL30	;call to abstracted procedure
  6313  00357A  EC62  F02A         	call	_readEEPROM	;wreg free
  6314  00357E  0100               	movlb	0	; () banked
  6315  003580  6FD4               	movwf	??_doOneSecondWork& (0+255),b
  6316  003582  ABD4               	btfss	??_doOneSecondWork& (0+255),5,b
  6317  003584  D016               	goto	l13868
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;main.c: 740: if (readEEPROM(i + 0x43) & (1<<6)) {
  6321  003586  0E43               	movlw	67
  6322  003588  25D7               	addwf	doOneSecondWork@i& (0+255),w,b
  6323  00358A  6E0E               	movwf	?_readEEPROM,c
  6324  00358C  6A0F               	clrf	?_readEEPROM+1,c
  6325  00358E  0E00               	movlw	0
  6326  003590  220F               	addwfc	?_readEEPROM+1,f,c
  6327  003592  EC62  F02A         	call	_readEEPROM	;wreg free
  6328  003596  0100               	movlb	0	; () banked
  6329  003598  6FD4               	movwf	??_doOneSecondWork& (0+255),b
  6330  00359A  ADD4               	btfss	??_doOneSecondWork& (0+255),6,b
  6331  00359C  D005               	goto	l13866
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;main.c: 741: vscp_omsg.vscp_class = 30;
  6335  00359E  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  6336  0035A0  0E1E               	movlw	30
  6337  0035A2  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  6338                           
  6339                           ;main.c: 742: vscp_omsg.vscp_type = 5;
  6340  0035A4  0E05               	movlw	5
  6341  0035A6  D009               	goto	L6
  6342  0035A8                     l13866:
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;main.c: 744: else {
  6346                           ;main.c: 745: vscp_omsg.vscp_class = 30;
  6347  0035A8  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  6348  0035AA  0E1E               	movlw	30
  6349  0035AC  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  6350                           
  6351                           ;main.c: 746: vscp_omsg.vscp_type = 6;
  6352  0035AE  0E06               	movlw	6
  6353  0035B0  D004               	goto	L6
  6354  0035B2                     l13868:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;main.c: 750: else {
  6358                           ;main.c: 752: vscp_omsg.vscp_class = 1;
  6359  0035B2  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  6360  0035B4  0E01               	movlw	1
  6361  0035B6  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  6362                           
  6363                           ;main.c: 753: vscp_omsg.vscp_type = 2;
  6364  0035B8  0E02               	movlw	2
  6365  0035BA                     L6:
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;main.c: 754: }
  6369                           ;main.c: 756: vscp_omsg.data[ 0 ] = i;
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;main.c: 757: vscp_omsg.data[ 1 ] =
  6373                           ;main.c: 758: readEEPROM(2 * i + 0x73);
  6374  0035BA  D850               	call	PL22	;call to abstracted procedure
  6375  0035BC  EC62  F02A         	call	_readEEPROM	;wreg free
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;main.c: 759: vscp_omsg.data[ 2 ] =
  6379                           ;main.c: 760: readEEPROM(2 * i + 0x74);
  6380  0035C0  D85C               	call	PL28	;call to abstracted procedure
  6381  0035C2  EC62  F02A         	call	_readEEPROM	;wreg free
  6382  0035C6  0100               	movlb	0	; () banked
  6383  0035C8  6F9B               	movwf	(_vscp_omsg+7)& (0+255),b
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;main.c: 765: vscp_sendEvent();
  6387  0035CA  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  6388  0035CE                     l13878:
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;main.c: 767: }
  6392                           ;main.c: 768: }
  6393                           ;main.c: 771: if (high_alarm & (1 << i)) {
  6394  0035CE  C0D7  F0D4         	movff	doOneSecondWork@i,??_doOneSecondWork
  6395  0035D2  0E01               	movlw	1
  6396  0035D4  6FD5               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6397  0035D6  2BD4               	incf	??_doOneSecondWork& (0+255),f,b
  6398  0035D8  D002               	goto	u12964
  6399  0035DA                     u12965:
  6400  0035DA  90D8               	bcf	status,0,c
  6401  0035DC  37D5               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6402  0035DE                     u12964:
  6403  0035DE  2FD4               	decfsz	??_doOneSecondWork& (0+255),f,b
  6404  0035E0  D7FC               	goto	u12965
  6405  0035E2  51D5               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6406  0035E4  157E               	andwf	_high_alarm& (0+255),w,b
  6407  0035E6  E035               	bz	l13904
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;main.c: 774: if ((readEEPROM(i + 0x43) & (1<<4))) {
  6411  0035E8  D856               	call	PL30	;call to abstracted procedure
  6412  0035EA  EC62  F02A         	call	_readEEPROM	;wreg free
  6413  0035EE  0100               	movlb	0	; () banked
  6414  0035F0  6FD4               	movwf	??_doOneSecondWork& (0+255),b
  6415  0035F2  A9D4               	btfss	??_doOneSecondWork& (0+255),4,b
  6416  0035F4  D02E               	goto	l13904
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;main.c: 776: vscp_omsg.priority = 0x00;
  6420  0035F6  6B95               	clrf	(_vscp_omsg+1)& (0+255),b
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;main.c: 777: vscp_omsg.flags = 0x80 + 3;
  6424  0035F8  0E83               	movlw	131
  6425  0035FA  6F94               	movwf	_vscp_omsg& (0+255),b
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;main.c: 779: if (readEEPROM(i + 0x43) & (1<<5)) {
  6429  0035FC  D84C               	call	PL30	;call to abstracted procedure
  6430  0035FE  EC62  F02A         	call	_readEEPROM	;wreg free
  6431  003602  0100               	movlb	0	; () banked
  6432  003604  6FD4               	movwf	??_doOneSecondWork& (0+255),b
  6433  003606  ABD4               	btfss	??_doOneSecondWork& (0+255),5,b
  6434  003608  D016               	goto	l13894
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;main.c: 780: if (readEEPROM(i + 0x43) & (1<<6)) {
  6438  00360A  0E43               	movlw	67
  6439  00360C  25D7               	addwf	doOneSecondWork@i& (0+255),w,b
  6440  00360E  6E0E               	movwf	?_readEEPROM,c
  6441  003610  6A0F               	clrf	?_readEEPROM+1,c
  6442  003612  0E00               	movlw	0
  6443  003614  220F               	addwfc	?_readEEPROM+1,f,c
  6444  003616  EC62  F02A         	call	_readEEPROM	;wreg free
  6445  00361A  0100               	movlb	0	; () banked
  6446  00361C  6FD4               	movwf	??_doOneSecondWork& (0+255),b
  6447  00361E  ADD4               	btfss	??_doOneSecondWork& (0+255),6,b
  6448  003620  D005               	goto	l13892
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;main.c: 781: vscp_omsg.vscp_class = 30;
  6452  003622  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  6453  003624  0E1E               	movlw	30
  6454  003626  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  6455                           
  6456                           ;main.c: 782: vscp_omsg.vscp_type = 6;
  6457  003628  0E06               	movlw	6
  6458  00362A  D009               	goto	L7
  6459  00362C                     l13892:
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;main.c: 784: else {
  6463                           ;main.c: 785: vscp_omsg.vscp_class = 30;
  6464  00362C  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  6465  00362E  0E1E               	movlw	30
  6466  003630  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  6467                           
  6468                           ;main.c: 786: vscp_omsg.vscp_type = 5;
  6469  003632  0E05               	movlw	5
  6470  003634  D004               	goto	L7
  6471  003636                     l13894:
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;main.c: 789: else {
  6475                           ;main.c: 791: vscp_omsg.vscp_class = 1;
  6476  003636  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  6477  003638  0E01               	movlw	1
  6478  00363A  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  6479                           
  6480                           ;main.c: 792: vscp_omsg.vscp_type = 2;
  6481  00363C  0E02               	movlw	2
  6482  00363E                     L7:
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;main.c: 793: }
  6486                           ;main.c: 795: vscp_omsg.data[ 0 ] = i;
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;main.c: 796: vscp_omsg.data[ 1 ] = readEEPROM(2 * i +
  6490                           ;main.c: 797: 0x73);
  6491  00363E  D80E               	call	PL22	;call to abstracted procedure
  6492  003640  EC62  F02A         	call	_readEEPROM	;wreg free
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;main.c: 798: vscp_omsg.data[ 2 ] = readEEPROM(2 * i +
  6496                           ;main.c: 799: 0x74);
  6497  003644  D81A               	call	PL28	;call to abstracted procedure
  6498  003646  EC62  F02A         	call	_readEEPROM	;wreg free
  6499  00364A  0100               	movlb	0	; () banked
  6500  00364C  6F9B               	movwf	(_vscp_omsg+7)& (0+255),b
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;main.c: 804: vscp_sendEvent();
  6504  00364E  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  6505  003652                     l13904:
  6506                           
  6507                           ; BSR set to: 0
  6508  003652  2BD7               	incf	doOneSecondWork@i& (0+255),f,b
  6509                           
  6510                           ; BSR set to: 0
  6511  003654  0E05               	movlw	5
  6512  003656  65D7               	cpfsgt	doOneSecondWork@i& (0+255),b
  6513  003658  D749               	goto	l13840
  6514  00365A                     l245:
  6515                           
  6516                           ; BSR set to: 0
  6517  00365A  0012               	return	
  6518  00365C                     __end_of_doOneSecondWork:
  6519                           	opt stack 0
  6520  00365C                     PL22:
  6521                           	opt stack 21
  6522  00365C  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  6523  00365E  C0D7  F099         	movff	doOneSecondWork@i,_vscp_omsg+5
  6524  003662  90D8               	bcf	status,0,c
  6525  003664  35D7               	rlcf	doOneSecondWork@i& (0+255),w,b
  6526  003666  6FD4               	movwf	??_doOneSecondWork& (0+255),b
  6527  003668  6BD5               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6528  00366A  37D5               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6529  00366C  0E73               	movlw	115
  6530  00366E  25D4               	addwf	??_doOneSecondWork& (0+255),w,b
  6531  003670  6E0E               	movwf	?_readEEPROM,c
  6532  003672  0E00               	movlw	0
  6533  003674  21D5               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6534  003676  6E0F               	movwf	?_readEEPROM+1,c
  6535  003678  0012               	return	
  6536  00367A                     __end_ofPL22:
  6537                           	opt stack 0
  6538  00367A                     PL28:
  6539                           	opt stack 21
  6540  00367A  0100               	movlb	0	; () banked
  6541  00367C  6F9A               	movwf	(_vscp_omsg+6)& (0+255),b
  6542  00367E  90D8               	bcf	status,0,c
  6543  003680  35D7               	rlcf	doOneSecondWork@i& (0+255),w,b
  6544  003682  6FD4               	movwf	??_doOneSecondWork& (0+255),b
  6545  003684  6BD5               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6546  003686  37D5               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6547  003688  0E74               	movlw	116
  6548  00368A  25D4               	addwf	??_doOneSecondWork& (0+255),w,b
  6549  00368C  6E0E               	movwf	?_readEEPROM,c
  6550  00368E  0E00               	movlw	0
  6551  003690  21D5               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6552  003692  6E0F               	movwf	?_readEEPROM+1,c
  6553  003694  0012               	return	
  6554  003696                     __end_ofPL28:
  6555                           	opt stack 0
  6556  003696                     PL30:
  6557                           	opt stack 21
  6558  003696  0E43               	movlw	67
  6559  003698  25D7               	addwf	doOneSecondWork@i& (0+255),w,b
  6560  00369A  6E0E               	movwf	?_readEEPROM,c
  6561  00369C  6A0F               	clrf	?_readEEPROM+1,c
  6562  00369E  0E00               	movlw	0
  6563  0036A0  220F               	addwfc	?_readEEPROM+1,f,c
  6564  0036A2  0C00               	retlw	0
  6565  0036A4                     __end_ofPL30:
  6566                           	opt stack 0
  6567                           tblptru	equ	0xFF8
  6568                           tblptrh	equ	0xFF7
  6569                           tblptrl	equ	0xFF6
  6570                           tablat	equ	0xFF5
  6571                           prodh	equ	0xFF4
  6572                           prodl	equ	0xFF3
  6573                           intcon	equ	0xFF2
  6574                           postinc0	equ	0xFEE
  6575                           wreg	equ	0xFE8
  6576                           indf1	equ	0xFE7
  6577                           postdec1	equ	0xFE5
  6578                           fsr1h	equ	0xFE2
  6579                           fsr1l	equ	0xFE1
  6580                           indf2	equ	0xFDF
  6581                           postinc2	equ	0xFDE
  6582                           postdec2	equ	0xFDD
  6583                           plusw2	equ	0xFDB
  6584                           fsr2h	equ	0xFDA
  6585                           fsr2l	equ	0xFD9
  6586                           status	equ	0xFD8
  6587                           
  6588 ;; *************** function _vscp_error *****************
  6589 ;; Defined at:
  6590 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;		None               void
  6597 ;; Registers used:
  6598 ;;		None
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6604 ;;      Params:         0       0       0       0       0       0       0
  6605 ;;      Locals:         0       0       0       0       0       0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0
  6607 ;;      Totals:         0       0       0       0       0       0       0
  6608 ;;Total ram usage:        0 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    2
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text26
  6619  005576                     __ptext26:
  6620                           	opt stack 0
  6621  005576                     _vscp_error:
  6622                           	opt stack 27
  6623                           
  6624                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;incstack = 0
  6628                           ;incstack = 0
  6629  005576  6A4C               	clrf	_vscp_initledfunc,c
  6630  005578  0012               	return	
  6631  00557A                     __end_of_vscp_error:
  6632                           	opt stack 0
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           postinc0	equ	0xFEE
  6641                           wreg	equ	0xFE8
  6642                           indf1	equ	0xFE7
  6643                           postdec1	equ	0xFE5
  6644                           fsr1h	equ	0xFE2
  6645                           fsr1l	equ	0xFE1
  6646                           indf2	equ	0xFDF
  6647                           postinc2	equ	0xFDE
  6648                           postdec2	equ	0xFDD
  6649                           plusw2	equ	0xFDB
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function _handle_sync *****************
  6655 ;; Defined at:
  6656 ;;		line 1255 in file "../main.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  i               1   53[BANK0 ] unsigned char 
  6661 ;; Return value:  Size  Location     Type
  6662 ;;		None               void
  6663 ;; Registers used:
  6664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : F/0
  6667 ;;		On exit  : F/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         0       0       0       0       0       0       0
  6671 ;;      Locals:         0       1       0       0       0       0       0
  6672 ;;      Temps:          0       2       0       0       0       0       0
  6673 ;;      Totals:         0       3       0       0       0       0       0
  6674 ;;Total ram usage:        3 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    8
  6677 ;; This function calls:
  6678 ;;		_readEEPROM
  6679 ;;		_sendTempEvent
  6680 ;; This function is called by:
  6681 ;;		_main
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           	psect	text27
  6686  004A1E                     __ptext27:
  6687                           	opt stack 0
  6688  004A1E                     _handle_sync:
  6689                           	opt stack 21
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;main.c: 1256: uint8_t i;
  6693                           ;main.c: 1258: for (i = 0; i < 6; i++) {
  6694                           
  6695                           ;incstack = 0
  6696                           ;incstack = 0
  6697  004A1E  6BD6               	clrf	handle_sync@i& (0+255),b
  6698  004A20                     l13814:
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;main.c: 1260: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6702                           ;main.c: 1261: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6703                           ;main.c: 1262: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6704                           ;main.c: 1263: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6705  004A20  298D               	incf	(_vscp_imsg+7)& (0+255),w,b
  6706  004A22  E010               	bz	l13818
  6707                           
  6708                           ; BSR set to: 0
  6709  004A24  90D8               	bcf	status,0,c
  6710  004A26  35D6               	rlcf	handle_sync@i& (0+255),w,b
  6711  004A28  6FD4               	movwf	??_handle_sync& (0+255),b
  6712  004A2A  6BD5               	clrf	(??_handle_sync+1)& (0+255),b
  6713  004A2C  37D5               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6714  004A2E  0E73               	movlw	115
  6715  004A30  25D4               	addwf	??_handle_sync& (0+255),w,b
  6716  004A32  6E0E               	movwf	?_readEEPROM,c
  6717  004A34  0E00               	movlw	0
  6718  004A36  21D5               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6719  004A38  6E0F               	movwf	?_readEEPROM+1,c
  6720  004A3A  EC62  F02A         	call	_readEEPROM	;wreg free
  6721  004A3E  0100               	movlb	0	; () banked
  6722  004A40  198D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6723  004A42  E125               	bnz	l13828
  6724  004A44                     l13818:
  6725                           
  6726                           ; BSR set to: 0
  6727  004A44  298E               	incf	(_vscp_imsg+8)& (0+255),w,b
  6728  004A46  E010               	bz	l295
  6729                           
  6730                           ; BSR set to: 0
  6731  004A48  90D8               	bcf	status,0,c
  6732  004A4A  35D6               	rlcf	handle_sync@i& (0+255),w,b
  6733  004A4C  6FD4               	movwf	??_handle_sync& (0+255),b
  6734  004A4E  6BD5               	clrf	(??_handle_sync+1)& (0+255),b
  6735  004A50  37D5               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6736  004A52  0E74               	movlw	116
  6737  004A54  25D4               	addwf	??_handle_sync& (0+255),w,b
  6738  004A56  6E0E               	movwf	?_readEEPROM,c
  6739  004A58  0E00               	movlw	0
  6740  004A5A  21D5               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6741  004A5C  6E0F               	movwf	?_readEEPROM+1,c
  6742  004A5E  EC62  F02A         	call	_readEEPROM	;wreg free
  6743  004A62  0100               	movlb	0	; () banked
  6744  004A64  198E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6745  004A66  E113               	bnz	l13828
  6746  004A68                     l295:
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;main.c: 1266: timeout_clock = 0;
  6750  004A68  6B70               	clrf	_timeout_clock& (0+255),b	;volatile
  6751  004A6A  6B71               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6752  004A6C  6B72               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6753  004A6E  6B73               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6754                           
  6755                           ;main.c: 1267: while (!sendTempEvent(i)) {
  6756  004A70  D009               	goto	l13826
  6757  004A72                     l13822:
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;main.c: 1268: if (timeout_clock > 1000) break;
  6761  004A72  0EE9               	movlw	233
  6762  004A74  5D70               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6763  004A76  0E03               	movlw	3
  6764  004A78  5971               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6765  004A7A  0E00               	movlw	0
  6766  004A7C  5972               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6767  004A7E  0E00               	movlw	0
  6768  004A80  5973               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6769  004A82  E205               	bc	l13828
  6770  004A84                     l13826:
  6771                           
  6772                           ; BSR set to: 0
  6773  004A84  51D6               	movf	handle_sync@i& (0+255),w,b
  6774  004A86  EC4C  F025         	call	_sendTempEvent
  6775  004A8A  0900               	iorlw	0
  6776  004A8C  E0F2               	bz	l13822
  6777  004A8E                     l13828:
  6778                           
  6779                           ; BSR set to: 0
  6780  004A8E  2BD6               	incf	handle_sync@i& (0+255),f,b
  6781                           
  6782                           ; BSR set to: 0
  6783  004A90  0E05               	movlw	5
  6784  004A92  65D6               	cpfsgt	handle_sync@i& (0+255),b
  6785  004A94  D7C5               	goto	l13814
  6786                           
  6787                           ; BSR set to: 0
  6788  004A96  0C05               	retlw	5
  6789  004A98                     __end_of_handle_sync:
  6790                           	opt stack 0
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           intcon	equ	0xFF2
  6798                           postinc0	equ	0xFEE
  6799                           wreg	equ	0xFE8
  6800                           indf1	equ	0xFE7
  6801                           postdec1	equ	0xFE5
  6802                           fsr1h	equ	0xFE2
  6803                           fsr1l	equ	0xFE1
  6804                           indf2	equ	0xFDF
  6805                           postinc2	equ	0xFDE
  6806                           postdec2	equ	0xFDD
  6807                           plusw2	equ	0xFDB
  6808                           fsr2h	equ	0xFDA
  6809                           fsr2l	equ	0xFD9
  6810                           status	equ	0xFD8
  6811                           
  6812 ;; *************** function _sendTempEvent *****************
  6813 ;; Defined at:
  6814 ;;		line 817 in file "../main.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;  i               1    wreg     unsigned char 
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;  i               1   68[COMRAM] unsigned char 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      unsigned char 
  6821 ;; Registers used:
  6822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : F/0
  6825 ;;		On exit  : F/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6828 ;;      Params:         0       0       0       0       0       0       0
  6829 ;;      Locals:         1       0       0       0       0       0       0
  6830 ;;      Temps:          1       0       0       0       0       0       0
  6831 ;;      Totals:         2       0       0       0       0       0       0
  6832 ;;Total ram usage:        2 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    7
  6835 ;; This function calls:
  6836 ;;		_readEEPROM
  6837 ;;		_vscp_sendEvent
  6838 ;;		_setEventData
  6839 ;; This function is called by:
  6840 ;;		_doOneSecondWork
  6841 ;;		_handle_sync
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text28
  6846  004A98                     __ptext28:
  6847                           	opt stack 0
  6848  004A98                     _sendTempEvent:
  6849                           	opt stack 21
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;incstack = 0
  6853                           ;incstack = 0
  6854                           ;sendTempEvent@i stored from wreg
  6855  004A98  CFE8 F045          	movff	wreg,sendTempEvent@i
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;main.c: 818: vscp_omsg.priority = 0x03;
  6859  004A9C  0E03               	movlw	3
  6860  004A9E  6F95               	movwf	(_vscp_omsg+1)& (0+255),b
  6861                           
  6862                           ;main.c: 819: vscp_omsg.flags = 0x80 + 4;
  6863  004AA0  0E84               	movlw	132
  6864  004AA2  6F94               	movwf	_vscp_omsg& (0+255),b
  6865                           
  6866                           ;main.c: 820: vscp_omsg.vscp_class = 10;
  6867  004AA4  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  6868  004AA6  0E0A               	movlw	10
  6869  004AA8  6F96               	movwf	(_vscp_omsg+2)& (0+255),b
  6870                           
  6871                           ;main.c: 821: vscp_omsg.vscp_type = 6;
  6872  004AAA  0E06               	movlw	6
  6873  004AAC  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;main.c: 824: vscp_omsg.data[ 0 ] = 0x80 |
  6877                           ;main.c: 825: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6878                           ;main.c: 826: i;
  6879  004AAE  D82A               	call	PL82	;call to abstracted procedure
  6880  004AB0  EC62  F02A         	call	_readEEPROM	;wreg free
  6881  004AB4  6E44               	movwf	??_sendTempEvent& (0+255),c
  6882  004AB6  0E03               	movlw	3
  6883  004AB8  1644               	andwf	??_sendTempEvent,f,c
  6884  004ABA  90D8               	bcf	status,0,c
  6885  004ABC  3644               	rlcf	??_sendTempEvent,f,c
  6886  004ABE  90D8               	bcf	status,0,c
  6887  004AC0  3644               	rlcf	??_sendTempEvent,f,c
  6888  004AC2  90D8               	bcf	status,0,c
  6889  004AC4  3444               	rlcf	??_sendTempEvent,w,c
  6890  004AC6  1045               	iorwf	sendTempEvent@i,w,c
  6891  004AC8  0980               	iorlw	128
  6892  004ACA  0100               	movlb	0	; () banked
  6893  004ACC  6F99               	movwf	(_vscp_omsg+5)& (0+255),b
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;main.c: 828: vscp_omsg.data[ 1 ] = 0x82;
  6897  004ACE  0E82               	movlw	130
  6898  004AD0  6F9A               	movwf	(_vscp_omsg+6)& (0+255),b
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;main.c: 830: setEventData( current_temp[i],
  6902                           ;main.c: 831: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6903  004AD2  5045               	movf	sendTempEvent@i,w,c
  6904  004AD4  0D02               	mullw	2
  6905  004AD6  50F3               	movf	prodl,w,c
  6906  004AD8  0F60               	addlw	low _current_temp
  6907  004ADA  6ED9               	movwf	fsr2l,c
  6908  004ADC  6ADA               	clrf	fsr2h,c
  6909  004ADE  CFDE F0CB          	movff	postinc2,?_setEventData
  6910  004AE2  CFDD F0CC          	movff	postdec2,?_setEventData+1
  6911  004AE6  D80E               	call	PL82	;call to abstracted procedure
  6912  004AE8  EC62  F02A         	call	_readEEPROM	;wreg free
  6913  004AEC  0B03               	andlw	3
  6914  004AEE  0100               	movlb	0	; () banked
  6915  004AF0  6FCD               	movwf	(?_setEventData+2)& (0+255),b
  6916  004AF2  EC87  F022         	call	_setEventData	;wreg free
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;main.c: 834: if (!vscp_sendEvent()) {
  6920  004AF6  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  6921  004AFA  0900               	iorlw	0
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;main.c: 835: return 0;
  6925  004AFC  0E00               	movlw	0
  6926  004AFE  A4D8               	btfss	status,2,c
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;main.c: 836: }
  6930                           ;main.c: 838: return 1;
  6931  004B00  0E01               	movlw	1
  6932                           
  6933                           ; BSR set to: 0
  6934  004B02  0012               	return	
  6935  004B04                     __end_of_sendTempEvent:
  6936                           	opt stack 0
  6937  004B04                     PL82:
  6938                           	opt stack 21
  6939  004B04  0E43               	movlw	67
  6940  004B06  2445               	addwf	sendTempEvent@i,w,c
  6941  004B08  6E0E               	movwf	?_readEEPROM,c
  6942  004B0A  6A0F               	clrf	?_readEEPROM+1,c
  6943  004B0C  0E00               	movlw	0
  6944  004B0E  220F               	addwfc	?_readEEPROM+1,f,c
  6945  004B10  0C00               	retlw	0
  6946  004B12                     __end_ofPL82:
  6947                           	opt stack 0
  6948                           tblptru	equ	0xFF8
  6949                           tblptrh	equ	0xFF7
  6950                           tblptrl	equ	0xFF6
  6951                           tablat	equ	0xFF5
  6952                           prodh	equ	0xFF4
  6953                           prodl	equ	0xFF3
  6954                           intcon	equ	0xFF2
  6955                           postinc0	equ	0xFEE
  6956                           wreg	equ	0xFE8
  6957                           indf1	equ	0xFE7
  6958                           postdec1	equ	0xFE5
  6959                           fsr1h	equ	0xFE2
  6960                           fsr1l	equ	0xFE1
  6961                           indf2	equ	0xFDF
  6962                           postinc2	equ	0xFDE
  6963                           postdec2	equ	0xFDD
  6964                           plusw2	equ	0xFDB
  6965                           fsr2h	equ	0xFDA
  6966                           fsr2l	equ	0xFD9
  6967                           status	equ	0xFD8
  6968                           
  6969 ;; *************** function _setEventData *****************
  6970 ;; Defined at:
  6971 ;;		line 846 in file "../main.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  v               2   42[BANK0 ] int 
  6974 ;;  unit            1   44[BANK0 ] unsigned char 
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;  newval          4   45[BANK0 ] unsigned char 
  6977 ;;  ival            2   49[BANK0 ] int 
  6978 ;; Return value:  Size  Location     Type
  6979 ;;		None               void
  6980 ;; Registers used:
  6981 ;;		wreg, status,2, status,0, cstack
  6982 ;; Tracked objects:
  6983 ;;		On entry : F/0
  6984 ;;		On exit  : F/0
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6987 ;;      Params:         0       3       0       0       0       0       0
  6988 ;;      Locals:         0       6       0       0       0       0       0
  6989 ;;      Temps:          0       0       0       0       0       0       0
  6990 ;;      Totals:         0       9       0       0       0       0       0
  6991 ;;Total ram usage:        9 bytes
  6992 ;; Hardware stack levels used:    1
  6993 ;; Hardware stack levels required when called:    5
  6994 ;; This function calls:
  6995 ;;		_Celsius2Kelvin
  6996 ;;		_Celsius2Fahrenheit
  6997 ;;		___awtofl
  6998 ;;		___fltol
  6999 ;; This function is called by:
  7000 ;;		_sendTempEvent
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           	psect	text29
  7005  00450E                     __ptext29:
  7006                           	opt stack 0
  7007  00450E                     _setEventData:
  7008                           	opt stack 22
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;main.c: 847: double newval;
  7012                           ;main.c: 848: int ival;
  7013                           ;main.c: 850: if (0 == unit) {
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;incstack = 0
  7017                           ;incstack = 0
  7018  00450E  67CD               	tstfsz	setEventData@unit& (0+255),b
  7019  004510  D019               	goto	l14144
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;main.c: 852: newval = Celsius2Kelvin(v);
  7023  004512  C0CB  F018         	movff	setEventData@v,?___awtofl
  7024  004516  C0CC  F019         	movff	setEventData@v+1,?___awtofl+1
  7025  00451A  EC56  F028         	call	___awtofl	;wreg free
  7026  00451E  C01B  F03E         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  7027  004522  C01A  F03D         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  7028  004526  C019  F03C         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  7029  00452A  C018  F03B         	movff	?___awtofl,?_Celsius2Kelvin
  7030  00452E  EC73  F028         	call	_Celsius2Kelvin	;wreg free
  7031  004532  C03E  F0D1         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  7032  004536  C03D  F0D0         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  7033  00453A  C03C  F0CF         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  7034  00453E  C03B  F0CE         	movff	?_Celsius2Kelvin,setEventData@newval
  7035                           
  7036                           ;main.c: 853: } else if (2 == unit) {
  7037  004542  D02A               	goto	l253
  7038  004544                     l14144:
  7039                           
  7040                           ; BSR set to: 0
  7041  004544  51CD               	movf	setEventData@unit& (0+255),w,b
  7042  004546  0A02               	xorlw	2
  7043  004548  E119               	bnz	l14148
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;main.c: 855: newval = Celsius2Fahrenheit(v);
  7047  00454A  C0CB  F018         	movff	setEventData@v,?___awtofl
  7048  00454E  C0CC  F019         	movff	setEventData@v+1,?___awtofl+1
  7049  004552  EC56  F028         	call	___awtofl	;wreg free
  7050  004556  C01B  F0CA         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  7051  00455A  C01A  F0C9         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  7052  00455E  C019  F0C8         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  7053  004562  C018  F0C7         	movff	?___awtofl,?_Celsius2Fahrenheit
  7054  004566  ECC5  F025         	call	_Celsius2Fahrenheit	;wreg free
  7055  00456A  C0CA  F0D1         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  7056  00456E  C0C9  F0D0         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  7057  004572  C0C8  F0CF         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  7058  004576  C0C7  F0CE         	movff	?_Celsius2Fahrenheit,setEventData@newval
  7059                           
  7060                           ;main.c: 856: } else {
  7061  00457A  D00E               	goto	l253
  7062  00457C                     l14148:
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;main.c: 858: newval = v;
  7066  00457C  C0CB  F018         	movff	setEventData@v,?___awtofl
  7067  004580  C0CC  F019         	movff	setEventData@v+1,?___awtofl+1
  7068  004584  EC56  F028         	call	___awtofl	;wreg free
  7069  004588  C01B  F0D1         	movff	?___awtofl+3,setEventData@newval+3
  7070  00458C  C01A  F0D0         	movff	?___awtofl+2,setEventData@newval+2
  7071  004590  C019  F0CF         	movff	?___awtofl+1,setEventData@newval+1
  7072  004594  C018  F0CE         	movff	?___awtofl,setEventData@newval
  7073  004598                     l253:
  7074                           
  7075                           ;main.c: 859: }
  7076                           ;main.c: 861: ival = (int) newval;
  7077  004598  C0CE  F034         	movff	setEventData@newval,?___fltol
  7078  00459C  C0CF  F035         	movff	setEventData@newval+1,?___fltol+1
  7079  0045A0  C0D0  F036         	movff	setEventData@newval+2,?___fltol+2
  7080  0045A4  C0D1  F037         	movff	setEventData@newval+3,?___fltol+3
  7081  0045A8  EC33  F024         	call	___fltol	;wreg free
  7082  0045AC  C034  F0D2         	movff	?___fltol,setEventData@ival
  7083  0045B0  C035  F0D3         	movff	?___fltol+1,setEventData@ival+1
  7084                           
  7085                           ;main.c: 863: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7086  0045B4  0100               	movlb	0	; () banked
  7087  0045B6  51D3               	movf	(setEventData@ival+1)& (0+255),w,b
  7088  0045B8  6F9B               	movwf	(_vscp_omsg+7)& (0+255),b
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;main.c: 864: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7092  0045BA  C0D2  F09C         	movff	setEventData@ival,_vscp_omsg+8
  7093                           
  7094                           ; BSR set to: 0
  7095  0045BE  0012               	return	
  7096  0045C0                     __end_of_setEventData:
  7097                           	opt stack 0
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           postinc0	equ	0xFEE
  7106                           wreg	equ	0xFE8
  7107                           indf1	equ	0xFE7
  7108                           postdec1	equ	0xFE5
  7109                           fsr1h	equ	0xFE2
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           plusw2	equ	0xFDB
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8
  7118                           
  7119 ;; *************** function _Celsius2Fahrenheit *****************
  7120 ;; Defined at:
  7121 ;;		line 42 in file "../ntc.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;  tc              4   38[BANK0 ] int 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  4   38[BANK0 ] int 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7135 ;;      Params:         0       4       0       0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0
  7138 ;;      Totals:         0       4       0       0       0       0       0
  7139 ;;Total ram usage:        4 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    4
  7142 ;; This function calls:
  7143 ;;		___fladd
  7144 ;;		___fldiv
  7145 ;;		___flmul
  7146 ;; This function is called by:
  7147 ;;		_setEventData
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text30
  7152  004B8A                     __ptext30:
  7153                           	opt stack 0
  7154  004B8A                     _Celsius2Fahrenheit:
  7155                           	opt stack 22
  7156                           
  7157                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;incstack = 0
  7161                           ;incstack = 0
  7162  004B8A  0100               	movlb	0	; () banked
  7163  004B8C  6BA5               	clrf	(?___fladd+4)& (0+255),b
  7164  004B8E  6BA6               	clrf	(?___fladd+5)& (0+255),b
  7165  004B90  0E7A               	movlw	122
  7166  004B92  6FA7               	movwf	(?___fladd+6)& (0+255),b
  7167  004B94  0E46               	movlw	70
  7168  004B96  6FA8               	movwf	(?___fladd+7)& (0+255),b
  7169  004B98  6A22               	clrf	?___flmul+4,c
  7170  004B9A  6A23               	clrf	?___flmul+5,c
  7171  004B9C  0E10               	movlw	16
  7172  004B9E  6E24               	movwf	?___flmul+6,c
  7173  004BA0  0E41               	movlw	65
  7174  004BA2  6E25               	movwf	?___flmul+7,c
  7175  004BA4  C0C7  F01E         	movff	Celsius2Fahrenheit@tc,?___flmul
  7176  004BA8  C0C8  F01F         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7177  004BAC  C0C9  F020         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7178  004BB0  C0CA  F021         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7179  004BB4  ECB3  F020         	call	___flmul	;wreg free
  7180  004BB8  C021  F0A4         	movff	?___flmul+3,?___fladd+3
  7181  004BBC  C020  F0A3         	movff	?___flmul+2,?___fladd+2
  7182  004BC0  C01F  F0A2         	movff	?___flmul+1,?___fladd+1
  7183  004BC4  C01E  F0A1         	movff	?___flmul,?___fladd
  7184  004BC8  EC21  F01C         	call	___fladd	;wreg free
  7185  004BCC  C0A4  F0B4         	movff	?___fladd+3,?___fldiv+3
  7186  004BD0  C0A3  F0B3         	movff	?___fladd+2,?___fldiv+2
  7187  004BD4  C0A2  F0B2         	movff	?___fladd+1,?___fldiv+1
  7188  004BD8  C0A1  F0B1         	movff	?___fladd,?___fldiv
  7189  004BDC  0100               	movlb	0	; () banked
  7190  004BDE  6BB5               	clrf	(?___fldiv+4)& (0+255),b
  7191  004BE0  6BB6               	clrf	(?___fldiv+5)& (0+255),b
  7192  004BE2  0EA0               	movlw	160
  7193  004BE4  6FB7               	movwf	(?___fldiv+6)& (0+255),b
  7194  004BE6  0E40               	movlw	64
  7195  004BE8  6FB8               	movwf	(?___fldiv+7)& (0+255),b
  7196  004BEA  EC39  F023         	call	___fldiv	;wreg free
  7197  004BEE  C0B4  F0CA         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7198  004BF2  C0B3  F0C9         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7199  004BF6  C0B2  F0C8         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7200  004BFA  C0B1  F0C7         	movff	?___fldiv,?_Celsius2Fahrenheit
  7201  004BFE  0012               	return	
  7202  004C00                     __end_of_Celsius2Fahrenheit:
  7203                           	opt stack 0
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           intcon	equ	0xFF2
  7211                           postinc0	equ	0xFEE
  7212                           wreg	equ	0xFE8
  7213                           indf1	equ	0xFE7
  7214                           postdec1	equ	0xFE5
  7215                           fsr1h	equ	0xFE2
  7216                           fsr1l	equ	0xFE1
  7217                           indf2	equ	0xFDF
  7218                           postinc2	equ	0xFDE
  7219                           postdec2	equ	0xFDD
  7220                           plusw2	equ	0xFDB
  7221                           fsr2h	equ	0xFDA
  7222                           fsr2l	equ	0xFD9
  7223                           status	equ	0xFD8
  7224                           
  7225 ;; *************** function ___fladd *****************
  7226 ;; Defined at:
  7227 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  f1              4    0[BANK0 ] int 
  7230 ;;  f2              4    4[BANK0 ] int 
  7231 ;; Auto vars:     Size  Location     Type
  7232 ;;  exp1            1   57[COMRAM] unsigned char 
  7233 ;;  exp2            1   56[COMRAM] unsigned char 
  7234 ;;  sign            1   55[COMRAM] unsigned char 
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  4    0[BANK0 ] unsigned char 
  7237 ;; Registers used:
  7238 ;;		wreg, status,2, status,0, cstack
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7244 ;;      Params:         0       8       0       0       0       0       0
  7245 ;;      Locals:         6       0       0       0       0       0       0
  7246 ;;      Temps:          1       0       0       0       0       0       0
  7247 ;;      Totals:         7       8       0       0       0       0       0
  7248 ;;Total ram usage:       15 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    3
  7251 ;; This function calls:
  7252 ;;		___flpack
  7253 ;; This function is called by:
  7254 ;;		_doWork
  7255 ;;		_Celsius2Fahrenheit
  7256 ;;		_Celsius2Kelvin
  7257 ;;		___asfladd
  7258 ;;		_floor
  7259 ;;		___flsub
  7260 ;;		_log
  7261 ;;		_eval_poly
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           	psect	text31
  7266  003842                     __ptext31:
  7267                           	opt stack 0
  7268  003842                     ___fladd:
  7269                           	opt stack 24
  7270                           
  7271                           ;incstack = 0
  7272                           ;incstack = 0
  7273  003842  0100               	movlb	0	; () banked
  7274  003844  35A3               	rlcf	(___fladd@f1+2)& (0+255),w,b
  7275  003846  35A4               	rlcf	(___fladd@f1+3)& (0+255),w,b
  7276  003848  6E3A               	movwf	___fladd@exp1,c
  7277  00384A  35A7               	rlcf	(___fladd@f2+2)& (0+255),w,b
  7278  00384C  35A8               	rlcf	(___fladd@f2+3)& (0+255),w,b
  7279  00384E  6E39               	movwf	___fladd@exp2,c
  7280  003850  503A               	movf	___fladd@exp1,w,c
  7281  003852  E009               	bz	l1591
  7282                           
  7283                           ; BSR set to: 0
  7284  003854  5039               	movf	___fladd@exp2,w,c
  7285  003856  603A               	cpfslt	___fladd@exp1,c
  7286  003858  D00F               	goto	l14210
  7287                           
  7288                           ; BSR set to: 0
  7289  00385A  503A               	movf	___fladd@exp1,w,c
  7290  00385C  5C39               	subwf	___fladd@exp2,w,c
  7291  00385E  6E34               	movwf	??___fladd& (0+255),c
  7292  003860  0E21               	movlw	33
  7293  003862  5C34               	subwf	??___fladd,w,c
  7294  003864  E309               	bnc	l14210
  7295  003866                     l1591:
  7296                           
  7297                           ; BSR set to: 0
  7298  003866  C0A5  F0A1         	movff	___fladd@f2,?___fladd
  7299  00386A  C0A6  F0A2         	movff	___fladd@f2+1,?___fladd+1
  7300  00386E  C0A7  F0A3         	movff	___fladd@f2+2,?___fladd+2
  7301  003872  C0A8  F0A4         	movff	___fladd@f2+3,?___fladd+3
  7302  003876  D08E               	goto	l1592
  7303  003878                     l14210:
  7304                           
  7305                           ; BSR set to: 0
  7306  003878  5039               	movf	___fladd@exp2,w,c
  7307  00387A  E009               	bz	l1595
  7308                           
  7309                           ; BSR set to: 0
  7310  00387C  503A               	movf	___fladd@exp1,w,c
  7311  00387E  6039               	cpfslt	___fladd@exp2,c
  7312  003880  D00F               	goto	l14216
  7313                           
  7314                           ; BSR set to: 0
  7315  003882  5039               	movf	___fladd@exp2,w,c
  7316  003884  5C3A               	subwf	___fladd@exp1,w,c
  7317  003886  6E34               	movwf	??___fladd& (0+255),c
  7318  003888  0E21               	movlw	33
  7319  00388A  5C34               	subwf	??___fladd,w,c
  7320  00388C  E309               	bnc	l14216
  7321  00388E                     l1595:
  7322                           
  7323                           ; BSR set to: 0
  7324  00388E  C0A1  F0A1         	movff	___fladd@f1,?___fladd
  7325  003892  C0A2  F0A2         	movff	___fladd@f1+1,?___fladd+1
  7326  003896  C0A3  F0A3         	movff	___fladd@f1+2,?___fladd+2
  7327  00389A  C0A4  F0A4         	movff	___fladd@f1+3,?___fladd+3
  7328  00389E  D07A               	goto	l1592
  7329  0038A0                     l14216:
  7330                           
  7331                           ; BSR set to: 0
  7332  0038A0  0E06               	movlw	6
  7333  0038A2  6E38               	movwf	___fladd@sign,c
  7334                           
  7335                           ; BSR set to: 0
  7336  0038A4  BFA4               	btfsc	(___fladd@f1+3)& (0+255),7,b
  7337                           
  7338                           ; BSR set to: 0
  7339  0038A6  8E38               	bsf	___fladd@sign,7,c
  7340                           
  7341                           ; BSR set to: 0
  7342  0038A8  BFA8               	btfsc	(___fladd@f2+3)& (0+255),7,b
  7343                           
  7344                           ; BSR set to: 0
  7345  0038AA  8C38               	bsf	___fladd@sign,6,c
  7346                           
  7347                           ; BSR set to: 0
  7348  0038AC  8FA3               	bsf	(___fladd@f1+2)& (0+255),7,b
  7349                           
  7350                           ; BSR set to: 0
  7351  0038AE  6BA4               	clrf	(___fladd@f1+3)& (0+255),b
  7352                           
  7353                           ; BSR set to: 0
  7354  0038B0  8FA7               	bsf	(___fladd@f2+2)& (0+255),7,b
  7355  0038B2  6BA8               	clrf	(___fladd@f2+3)& (0+255),b
  7356                           
  7357                           ; BSR set to: 0
  7358  0038B4  5039               	movf	___fladd@exp2,w,c
  7359  0038B6  603A               	cpfslt	___fladd@exp1,c
  7360  0038B8  D01A               	goto	l14242
  7361  0038BA                     l14232:
  7362  0038BA  0100               	movlb	0	; () banked
  7363  0038BC  90D8               	bcf	status,0,c
  7364  0038BE  37A5               	rlcf	___fladd@f2& (0+255),f,b
  7365  0038C0  37A6               	rlcf	(___fladd@f2+1)& (0+255),f,b
  7366  0038C2  37A7               	rlcf	(___fladd@f2+2)& (0+255),f,b
  7367  0038C4  37A8               	rlcf	(___fladd@f2+3)& (0+255),f,b
  7368  0038C6  0639               	decf	___fladd@exp2,f,c
  7369                           
  7370                           ; BSR set to: 0
  7371  0038C8  5039               	movf	___fladd@exp2,w,c
  7372  0038CA  183A               	xorwf	___fladd@exp1,w,c
  7373  0038CC  E00C               	bz	l14240
  7374                           
  7375                           ; BSR set to: 0
  7376  0038CE  0638               	decf	___fladd@sign,f,c
  7377  0038D0  5038               	movf	___fladd@sign& (0+255),w,c
  7378  0038D2  0B07               	andlw	7
  7379  0038D4  E008               	bz	l14240
  7380  0038D6  D7F1               	goto	l14232
  7381  0038D8                     l14238:
  7382  0038D8  0100               	movlb	0	; () banked
  7383  0038DA  90D8               	bcf	status,0,c
  7384  0038DC  33A4               	rrcf	(___fladd@f1+3)& (0+255),f,b
  7385  0038DE  33A3               	rrcf	(___fladd@f1+2)& (0+255),f,b
  7386  0038E0  33A2               	rrcf	(___fladd@f1+1)& (0+255),f,b
  7387  0038E2  33A1               	rrcf	___fladd@f1& (0+255),f,b
  7388  0038E4  2A3A               	incf	___fladd@exp1,f,c
  7389  0038E6                     l14240:
  7390  0038E6  5039               	movf	___fladd@exp2,w,c
  7391  0038E8  623A               	cpfseq	___fladd@exp1,c
  7392  0038EA  D7F6               	goto	l14238
  7393  0038EC  D01C               	goto	l1606
  7394  0038EE                     l14242:
  7395                           
  7396                           ; BSR set to: 0
  7397  0038EE  503A               	movf	___fladd@exp1,w,c
  7398  0038F0  6039               	cpfslt	___fladd@exp2,c
  7399  0038F2  D019               	goto	l1606
  7400  0038F4                     l14244:
  7401  0038F4  0100               	movlb	0	; () banked
  7402  0038F6  90D8               	bcf	status,0,c
  7403  0038F8  37A1               	rlcf	___fladd@f1& (0+255),f,b
  7404  0038FA  37A2               	rlcf	(___fladd@f1+1)& (0+255),f,b
  7405  0038FC  37A3               	rlcf	(___fladd@f1+2)& (0+255),f,b
  7406  0038FE  37A4               	rlcf	(___fladd@f1+3)& (0+255),f,b
  7407  003900  063A               	decf	___fladd@exp1,f,c
  7408                           
  7409                           ; BSR set to: 0
  7410  003902  5039               	movf	___fladd@exp2,w,c
  7411  003904  183A               	xorwf	___fladd@exp1,w,c
  7412  003906  E00C               	bz	l14252
  7413                           
  7414                           ; BSR set to: 0
  7415  003908  0638               	decf	___fladd@sign,f,c
  7416  00390A  5038               	movf	___fladd@sign& (0+255),w,c
  7417  00390C  0B07               	andlw	7
  7418  00390E  E008               	bz	l14252
  7419  003910  D7F1               	goto	l14244
  7420  003912                     l14250:
  7421  003912  0100               	movlb	0	; () banked
  7422  003914  90D8               	bcf	status,0,c
  7423  003916  33A8               	rrcf	(___fladd@f2+3)& (0+255),f,b
  7424  003918  33A7               	rrcf	(___fladd@f2+2)& (0+255),f,b
  7425  00391A  33A6               	rrcf	(___fladd@f2+1)& (0+255),f,b
  7426  00391C  33A5               	rrcf	___fladd@f2& (0+255),f,b
  7427  00391E  2A39               	incf	___fladd@exp2,f,c
  7428  003920                     l14252:
  7429  003920  5039               	movf	___fladd@exp2,w,c
  7430  003922  623A               	cpfseq	___fladd@exp1,c
  7431  003924  D7F6               	goto	l14250
  7432  003926                     l1606:
  7433  003926  AE38               	btfss	___fladd@sign,7,c
  7434  003928  D00A               	goto	l14256
  7435  00392A  0100               	movlb	0	; () banked
  7436  00392C  1FA1               	comf	___fladd@f1& (0+255),f,b
  7437  00392E  1FA2               	comf	(___fladd@f1+1)& (0+255),f,b
  7438  003930  1FA3               	comf	(___fladd@f1+2)& (0+255),f,b
  7439  003932  1FA4               	comf	(___fladd@f1+3)& (0+255),f,b
  7440  003934  2BA1               	incf	___fladd@f1& (0+255),f,b
  7441  003936  0E00               	movlw	0
  7442  003938  23A2               	addwfc	(___fladd@f1+1)& (0+255),f,b
  7443  00393A  23A3               	addwfc	(___fladd@f1+2)& (0+255),f,b
  7444  00393C  23A4               	addwfc	(___fladd@f1+3)& (0+255),f,b
  7445  00393E                     l14256:
  7446  00393E  AC38               	btfss	___fladd@sign,6,c
  7447  003940  D003               	goto	l14260
  7448  003942  0100               	movlb	0	; () banked
  7449  003944  1FA5               	comf	___fladd@f2& (0+255),f,b
  7450  003946  D827               	call	PL58	;call to abstracted procedure
  7451  003948                     l14260:
  7452  003948  6A38               	clrf	___fladd@sign,c
  7453  00394A  0100               	movlb	0	; () banked
  7454  00394C  51A1               	movf	___fladd@f1& (0+255),w,b
  7455  00394E  27A5               	addwf	___fladd@f2& (0+255),f,b
  7456  003950  51A2               	movf	(___fladd@f1+1)& (0+255),w,b
  7457  003952  23A6               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7458  003954  51A3               	movf	(___fladd@f1+2)& (0+255),w,b
  7459  003956  23A7               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7460  003958  51A4               	movf	(___fladd@f1+3)& (0+255),w,b
  7461  00395A  23A8               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7462                           
  7463                           ; BSR set to: 0
  7464  00395C  AFA8               	btfss	(___fladd@f2+3)& (0+255),7,b
  7465  00395E  D004               	goto	l14268
  7466                           
  7467                           ; BSR set to: 0
  7468  003960  1FA5               	comf	___fladd@f2& (0+255),f,b
  7469  003962  D819               	call	PL58	;call to abstracted procedure
  7470                           
  7471                           ; BSR set to: 0
  7472  003964  0E01               	movlw	1
  7473  003966  6E38               	movwf	___fladd@sign,c
  7474  003968                     l14268:
  7475                           
  7476                           ; BSR set to: 0
  7477  003968  C0A5  F00E         	movff	___fladd@f2,?___flpack
  7478  00396C  C0A6  F00F         	movff	___fladd@f2+1,?___flpack+1
  7479  003970  C0A7  F010         	movff	___fladd@f2+2,?___flpack+2
  7480  003974  C0A8  F011         	movff	___fladd@f2+3,?___flpack+3
  7481  003978  C03A  F012         	movff	___fladd@exp1,?___flpack+4
  7482  00397C  C038  F013         	movff	___fladd@sign,?___flpack+5
  7483  003980  ECD0  F021         	call	___flpack	;wreg free
  7484  003984  C011  F0A4         	movff	?___flpack+3,?___fladd+3
  7485  003988  C010  F0A3         	movff	?___flpack+2,?___fladd+2
  7486  00398C  C00F  F0A2         	movff	?___flpack+1,?___fladd+1
  7487  003990  C00E  F0A1         	movff	?___flpack,?___fladd
  7488  003994                     l1592:
  7489  003994  0012               	return	
  7490  003996                     __end_of___fladd:
  7491                           	opt stack 0
  7492  003996                     PL58:
  7493                           	opt stack 24
  7494  003996  1FA6               	comf	(___fladd@f2+1)& (0+255),f,b
  7495  003998  1FA7               	comf	(___fladd@f2+2)& (0+255),f,b
  7496  00399A  1FA8               	comf	(___fladd@f2+3)& (0+255),f,b
  7497  00399C  2BA5               	incf	___fladd@f2& (0+255),f,b
  7498  00399E  0E00               	movlw	0
  7499  0039A0  23A6               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7500  0039A2  23A7               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7501  0039A4  23A8               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7502  0039A6  0C00               	retlw	0
  7503  0039A8                     __end_ofPL58:
  7504                           	opt stack 0
  7505                           tblptru	equ	0xFF8
  7506                           tblptrh	equ	0xFF7
  7507                           tblptrl	equ	0xFF6
  7508                           tablat	equ	0xFF5
  7509                           prodh	equ	0xFF4
  7510                           prodl	equ	0xFF3
  7511                           intcon	equ	0xFF2
  7512                           postinc0	equ	0xFEE
  7513                           wreg	equ	0xFE8
  7514                           indf1	equ	0xFE7
  7515                           postdec1	equ	0xFE5
  7516                           fsr1h	equ	0xFE2
  7517                           fsr1l	equ	0xFE1
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           postdec2	equ	0xFDD
  7521                           plusw2	equ	0xFDB
  7522                           fsr2h	equ	0xFDA
  7523                           fsr2l	equ	0xFD9
  7524                           status	equ	0xFD8
  7525                           
  7526 ;; *************** function _Celsius2Kelvin *****************
  7527 ;; Defined at:
  7528 ;;		line 61 in file "../ntc.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;  tc              4   58[COMRAM] unsigned char 
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;		None
  7533 ;; Return value:  Size  Location     Type
  7534 ;;                  4   58[COMRAM] unsigned char 
  7535 ;; Registers used:
  7536 ;;		wreg, status,2, status,0, cstack
  7537 ;; Tracked objects:
  7538 ;;		On entry : 0/0
  7539 ;;		On exit  : 0/0
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7542 ;;      Params:         4       0       0       0       0       0       0
  7543 ;;      Locals:         0       0       0       0       0       0       0
  7544 ;;      Temps:          0       0       0       0       0       0       0
  7545 ;;      Totals:         4       0       0       0       0       0       0
  7546 ;;Total ram usage:        4 bytes
  7547 ;; Hardware stack levels used:    1
  7548 ;; Hardware stack levels required when called:    4
  7549 ;; This function calls:
  7550 ;;		___fladd
  7551 ;; This function is called by:
  7552 ;;		_setEventData
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text32
  7557  0050E6                     __ptext32:
  7558                           	opt stack 0
  7559  0050E6                     _Celsius2Kelvin:
  7560                           	opt stack 22
  7561                           
  7562                           ;ntc.c: 62: return (27316.0 + tc);
  7563                           
  7564                           ;incstack = 0
  7565                           ;incstack = 0
  7566  0050E6  C03B  F0A1         	movff	Celsius2Kelvin@tc,?___fladd
  7567  0050EA  C03C  F0A2         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7568  0050EE  C03D  F0A3         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7569  0050F2  C03E  F0A4         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7570  0050F6  0100               	movlb	0	; () banked
  7571  0050F8  6BA5               	clrf	(?___fladd+4)& (0+255),b
  7572  0050FA  0E68               	movlw	104
  7573  0050FC  6FA6               	movwf	(?___fladd+5)& (0+255),b
  7574  0050FE  0ED5               	movlw	213
  7575  005100  6FA7               	movwf	(?___fladd+6)& (0+255),b
  7576  005102  0E46               	movlw	70
  7577  005104  6FA8               	movwf	(?___fladd+7)& (0+255),b
  7578  005106  EC21  F01C         	call	___fladd	;wreg free
  7579  00510A  C0A4  F03E         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7580  00510E  C0A3  F03D         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7581  005112  C0A2  F03C         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7582  005116  C0A1  F03B         	movff	?___fladd,?_Celsius2Kelvin
  7583  00511A  0012               	return	
  7584  00511C                     __end_of_Celsius2Kelvin:
  7585                           	opt stack 0
  7586                           tblptru	equ	0xFF8
  7587                           tblptrh	equ	0xFF7
  7588                           tblptrl	equ	0xFF6
  7589                           tablat	equ	0xFF5
  7590                           prodh	equ	0xFF4
  7591                           prodl	equ	0xFF3
  7592                           intcon	equ	0xFF2
  7593                           postinc0	equ	0xFEE
  7594                           wreg	equ	0xFE8
  7595                           indf1	equ	0xFE7
  7596                           postdec1	equ	0xFE5
  7597                           fsr1h	equ	0xFE2
  7598                           fsr1l	equ	0xFE1
  7599                           indf2	equ	0xFDF
  7600                           postinc2	equ	0xFDE
  7601                           postdec2	equ	0xFDD
  7602                           plusw2	equ	0xFDB
  7603                           fsr2h	equ	0xFDA
  7604                           fsr2l	equ	0xFD9
  7605                           status	equ	0xFD8
  7606                           
  7607 ;; *************** function _vscp_handleProtocolEvent *****************
  7608 ;; Defined at:
  7609 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;		None
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  bytes           1   44[BANK0 ] unsigned char 
  7614 ;;  page_save       2   40[BANK0 ] unsigned short 
  7615 ;;  i               1   50[BANK0 ] unsigned char 
  7616 ;;  bytes           2   54[BANK0 ] unsigned short 
  7617 ;;  page_save       2   38[BANK0 ] unsigned short 
  7618 ;;  byte            1   53[BANK0 ] unsigned char 
  7619 ;;  cb              1   49[BANK0 ] unsigned char 
  7620 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7621 ;;  j               1   58[BANK0 ] unsigned char 
  7622 ;;  i               1   56[BANK0 ] unsigned char 
  7623 ;;  k               1   51[BANK0 ] unsigned char 
  7624 ;;  i               1   52[BANK0 ] unsigned char 
  7625 ;;  len             1   47[BANK0 ] unsigned char 
  7626 ;;  pos             1   46[BANK0 ] unsigned char 
  7627 ;;  i               1   57[BANK0 ] unsigned char 
  7628 ;;  len             1   45[BANK0 ] unsigned char 
  7629 ;;  pos             1   43[BANK0 ] unsigned char 
  7630 ;;  offset          1   42[BANK0 ] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;		None               void
  7633 ;; Registers used:
  7634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : F/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7640 ;;      Params:         0       0       0       0       0       0       0
  7641 ;;      Locals:         0      21       0       0       0       0       0
  7642 ;;      Temps:          0       7       0       0       0       0       0
  7643 ;;      Totals:         0      28       0       0       0       0       0
  7644 ;;Total ram usage:       28 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    8
  7647 ;; This function calls:
  7648 ;;		_vscp_init
  7649 ;;		_vscp_sendEvent
  7650 ;;		_vscp_readAppReg
  7651 ;;		_vscp_writeAppReg
  7652 ;;		_vscp_getGUID
  7653 ;;		_vscp_getMDF_URL
  7654 ;;		_vscp_getMatrixInfo
  7655 ;;		_vscp_goBootloaderMode
  7656 ;;		_vscp_handleHeartbeat
  7657 ;;		_vscp_handleSetNickname
  7658 ;;		_vscp_handleDropNickname
  7659 ;;		_vscp_newNodeOnline
  7660 ;;		_vscp_readRegister
  7661 ;;		_vscp_readStdReg
  7662 ;;		_vscp_writeRegister
  7663 ;;		_vscp_writeStdReg
  7664 ;;		___lbmod
  7665 ;; This function is called by:
  7666 ;;		_main
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text33
  7671  002AD0                     __ptext33:
  7672                           	opt stack 0
  7673  002AD0                     _vscp_handleProtocolEvent:
  7674                           	opt stack 21
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  7678                           
  7679                           ;incstack = 0
  7680                           ;incstack = 0
  7681  002AD0  5189               	movf	(_vscp_imsg+3)& (0+255),w,b
  7682  002AD2  1188               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7683  002AD4  E101 D2BB          	bz	l10128
  7684  002AD8  D2EA               	goto	l1272
  7685  002ADA                     l9710:
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  7689  002ADA  ECFB  F027         	call	_vscp_handleHeartbeat	;wreg free
  7690                           
  7691                           ;vscp_firmware.c: 807: break;
  7692  002ADE  D2E7               	goto	l1272
  7693  002AE0                     l9712:
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  7697  002AE0  EC00  F029         	call	_vscp_newNodeOnline	;wreg free
  7698                           
  7699                           ;vscp_firmware.c: 812: break;
  7700  002AE4  D2E4               	goto	l1272
  7701  002AE6                     l9714:
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7705  002AE6  EC8A  F029         	call	_vscp_handleSetNickname	;wreg free
  7706                           
  7707                           ;vscp_firmware.c: 817: break;
  7708  002AEA  D2E1               	goto	l1272
  7709  002AEC                     l9716:
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7713  002AEC  ECA7  F028         	call	_vscp_handleDropNickname	;wreg free
  7714                           
  7715                           ;vscp_firmware.c: 822: break;
  7716  002AF0  D2DE               	goto	l1272
  7717  002AF2                     l9718:
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7721                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7722  002AF2  5186               	movf	_vscp_imsg& (0+255),w,b
  7723  002AF4  0B0F               	andlw	15
  7724  002AF6  0A02               	xorlw	2
  7725  002AF8  E001 D2D9          	bnz	l1272
  7726                           
  7727                           ; BSR set to: 0
  7728  002AFC  5184               	movf	_vscp_nickname& (0+255),w,b
  7729  002AFE  EE20  F08C         	lfsr	2,_vscp_imsg+6
  7730  002B02  62DF               	cpfseq	indf2,c
  7731  002B04  D2D4               	goto	l1272
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7735  002B06  0E80               	movlw	128
  7736  002B08  618D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7737  002B0A  D012               	goto	l9738
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7741  002B0C  518D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7742  002B0E  EC0F  F00E         	call	_vscp_readAppReg
  7743  002B12                     L8:
  7744  002B12  0100               	movlb	0	; () banked
  7745  002B14  6F9A               	movwf	(_vscp_omsg+6)& (0+255),b
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7749  002B16  C08D  F099         	movff	_vscp_imsg+7,_vscp_omsg+5
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7753  002B1A  0E03               	movlw	3
  7754  002B1C  6F95               	movwf	(_vscp_omsg+1)& (0+255),b
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7758  002B1E  0E82               	movlw	130
  7759  002B20  6F94               	movwf	_vscp_omsg& (0+255),b
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7763  002B22  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
  7764  002B24  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  7765                           
  7766                           ; BSR set to: 0
  7767                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7768  002B26  0E0A               	movlw	10
  7769  002B28  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  7770  002B2A                     l9736:
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7774  002B2A  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  7775                           
  7776                           ;vscp_firmware.c: 844: }
  7777  002B2E  D2BF               	goto	l1272
  7778  002B30                     l9738:
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;vscp_firmware.c: 845: else {
  7782                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7783                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7784  002B30  518D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7785  002B32  EC52  F01B         	call	_vscp_readStdReg
  7786  002B36  D7ED               	goto	L8
  7787  002B38                     l9752:
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7791                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7792  002B38  5186               	movf	_vscp_imsg& (0+255),w,b
  7793  002B3A  0B0F               	andlw	15
  7794  002B3C  0A03               	xorlw	3
  7795  002B3E  E001 D2B6          	bnz	l1272
  7796                           
  7797                           ; BSR set to: 0
  7798  002B42  5184               	movf	_vscp_nickname& (0+255),w,b
  7799  002B44  EE20  F08C         	lfsr	2,_vscp_imsg+6
  7800  002B48  62DF               	cpfseq	indf2,c
  7801  002B4A  D2B1               	goto	l1272
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7805  002B4C  0E80               	movlw	128
  7806  002B4E  618D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7807  002B50  D006               	goto	l9772
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7811                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7812  002B52  C08E  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7813  002B56  518D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7814  002B58  EC37  F003         	call	_vscp_writeAppReg
  7815  002B5C  D7DA               	goto	L8
  7816  002B5E                     l9772:
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;vscp_firmware.c: 888: else {
  7820                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7821                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7822  002B5E  C08E  F022         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7823  002B62  518D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7824  002B64  EC37  F01F         	call	_vscp_writeStdReg
  7825  002B68  D7D4               	goto	L8
  7826  002B6A                     l9786:
  7827                           
  7828                           ; BSR set to: 0
  7829                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7830                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7831                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7832                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7833                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7834                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7835                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7836  002B6A  5184               	movf	_vscp_nickname& (0+255),w,b
  7837  002B6C  EE20  F08C         	lfsr	2,_vscp_imsg+6
  7838  002B70  62DF               	cpfseq	indf2,c
  7839  002B72  D29D               	goto	l1272
  7840                           
  7841                           ; BSR set to: 0
  7842  002B74  0E00               	movlw	0
  7843  002B76  EC58  F02A         	call	_vscp_getGUID
  7844  002B7A  0100               	movlb	0	; () banked
  7845  002B7C  198E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7846  002B7E  E001 D296          	bnz	l1272
  7847                           
  7848                           ; BSR set to: 0
  7849  002B82  0E03               	movlw	3
  7850  002B84  EC58  F02A         	call	_vscp_getGUID
  7851  002B88  0100               	movlb	0	; () banked
  7852  002B8A  198F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7853  002B8C  E001 D28F          	bnz	l1272
  7854                           
  7855                           ; BSR set to: 0
  7856  002B90  0E05               	movlw	5
  7857  002B92  EC58  F02A         	call	_vscp_getGUID
  7858  002B96  0100               	movlb	0	; () banked
  7859  002B98  1990               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7860  002B9A  E001 D288          	bnz	l1272
  7861                           
  7862                           ; BSR set to: 0
  7863  002B9E  0E07               	movlw	7
  7864  002BA0  EC58  F02A         	call	_vscp_getGUID
  7865  002BA4  0100               	movlb	0	; () banked
  7866  002BA6  1991               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7867  002BA8  E001 D281          	bnz	l1272
  7868                           
  7869                           ; BSR set to: 0
  7870  002BAC  5047               	movf	_vscp_page_select+1,w,c
  7871  002BAE  1992               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7872  002BB0  E001 D27D          	bnz	l1272
  7873                           
  7874                           ; BSR set to: 0
  7875  002BB4  5046               	movf	_vscp_page_select,w,c
  7876  002BB6  EE20  F093         	lfsr	2,_vscp_imsg+13
  7877  002BBA  62DF               	cpfseq	indf2,c
  7878  002BBC  D278               	goto	l1272
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7882  002BBE  518D               	movf	(_vscp_imsg+7)& (0+255),w,b
  7883  002BC0  EC2C  F02A         	call	_vscp_goBootloaderMode
  7884  002BC4  D274               	goto	l1272
  7885  002BC6                     l9802:
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7889                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7890                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7891                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7892  002BC6  0E00               	movlw	0
  7893  002BC8  EC58  F02A         	call	_vscp_getGUID
  7894  002BCC  0100               	movlb	0	; () banked
  7895  002BCE  198D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7896  002BD0  E173               	bnz	l9846
  7897                           
  7898                           ; BSR set to: 0
  7899  002BD2  0E01               	movlw	1
  7900  002BD4  EC58  F02A         	call	_vscp_getGUID
  7901  002BD8  0100               	movlb	0	; () banked
  7902  002BDA  198E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7903  002BDC  E16D               	bnz	l9846
  7904                           
  7905                           ; BSR set to: 0
  7906  002BDE  0E02               	movlw	2
  7907  002BE0  EC58  F02A         	call	_vscp_getGUID
  7908  002BE4  0100               	movlb	0	; () banked
  7909  002BE6  198F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7910  002BE8  E167               	bnz	l9846
  7911                           
  7912                           ; BSR set to: 0
  7913  002BEA  0E03               	movlw	3
  7914  002BEC  EC58  F02A         	call	_vscp_getGUID
  7915  002BF0  0100               	movlb	0	; () banked
  7916  002BF2  1990               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7917  002BF4  E161               	bnz	l9846
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7921  002BF6  884B               	bsf	_vscp_guid_reset,4,c
  7922  002BF8  D05F               	goto	l9846
  7923  002BFA                     l9812:
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7927                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7928                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7929                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7930  002BFA  0E04               	movlw	4
  7931  002BFC  EC58  F02A         	call	_vscp_getGUID
  7932  002C00  0100               	movlb	0	; () banked
  7933  002C02  198D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7934  002C04  E159               	bnz	l9846
  7935                           
  7936                           ; BSR set to: 0
  7937  002C06  0E05               	movlw	5
  7938  002C08  EC58  F02A         	call	_vscp_getGUID
  7939  002C0C  0100               	movlb	0	; () banked
  7940  002C0E  198E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7941  002C10  E153               	bnz	l9846
  7942                           
  7943                           ; BSR set to: 0
  7944  002C12  0E06               	movlw	6
  7945  002C14  EC58  F02A         	call	_vscp_getGUID
  7946  002C18  0100               	movlb	0	; () banked
  7947  002C1A  198F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7948  002C1C  E14D               	bnz	l9846
  7949                           
  7950                           ; BSR set to: 0
  7951  002C1E  0E07               	movlw	7
  7952  002C20  EC58  F02A         	call	_vscp_getGUID
  7953  002C24  0100               	movlb	0	; () banked
  7954  002C26  1990               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7955  002C28  E147               	bnz	l9846
  7956                           
  7957                           ; BSR set to: 0
  7958                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7959  002C2A  8A4B               	bsf	_vscp_guid_reset,5,c
  7960  002C2C  D045               	goto	l9846
  7961  002C2E                     l9822:
  7962                           
  7963                           ; BSR set to: 0
  7964                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7965                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7966                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7967                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7968  002C2E  0E08               	movlw	8
  7969  002C30  EC58  F02A         	call	_vscp_getGUID
  7970  002C34  0100               	movlb	0	; () banked
  7971  002C36  198D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7972  002C38  E13F               	bnz	l9846
  7973                           
  7974                           ; BSR set to: 0
  7975  002C3A  0E09               	movlw	9
  7976  002C3C  EC58  F02A         	call	_vscp_getGUID
  7977  002C40  0100               	movlb	0	; () banked
  7978  002C42  198E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7979  002C44  E139               	bnz	l9846
  7980                           
  7981                           ; BSR set to: 0
  7982  002C46  0E0A               	movlw	10
  7983  002C48  EC58  F02A         	call	_vscp_getGUID
  7984  002C4C  0100               	movlb	0	; () banked
  7985  002C4E  198F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7986  002C50  E133               	bnz	l9846
  7987                           
  7988                           ; BSR set to: 0
  7989  002C52  0E0B               	movlw	11
  7990  002C54  EC58  F02A         	call	_vscp_getGUID
  7991  002C58  0100               	movlb	0	; () banked
  7992  002C5A  1990               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7993  002C5C  E12D               	bnz	l9846
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7997  002C5E  8C4B               	bsf	_vscp_guid_reset,6,c
  7998  002C60  D02B               	goto	l9846
  7999  002C62                     l9832:
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  8003                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  8004                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  8005                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  8006  002C62  0E0C               	movlw	12
  8007  002C64  EC58  F02A         	call	_vscp_getGUID
  8008  002C68  0100               	movlb	0	; () banked
  8009  002C6A  198D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  8010  002C6C  E125               	bnz	l9846
  8011                           
  8012                           ; BSR set to: 0
  8013  002C6E  0E0D               	movlw	13
  8014  002C70  EC58  F02A         	call	_vscp_getGUID
  8015  002C74  0100               	movlb	0	; () banked
  8016  002C76  198E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  8017  002C78  E11F               	bnz	l9846
  8018                           
  8019                           ; BSR set to: 0
  8020  002C7A  0E0E               	movlw	14
  8021  002C7C  EC58  F02A         	call	_vscp_getGUID
  8022  002C80  0100               	movlb	0	; () banked
  8023  002C82  198F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  8024  002C84  E119               	bnz	l9846
  8025                           
  8026                           ; BSR set to: 0
  8027  002C86  0E0F               	movlw	15
  8028  002C88  EC58  F02A         	call	_vscp_getGUID
  8029  002C8C  0100               	movlb	0	; () banked
  8030  002C8E  1990               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  8031  002C90  E113               	bnz	l9846
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  8035  002C92  8E4B               	bsf	_vscp_guid_reset,7,c
  8036  002C94  D011               	goto	l9846
  8037  002C96                     l1212:
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  8041  002C96  6A4B               	clrf	_vscp_guid_reset,c
  8042                           
  8043                           ;vscp_firmware.c: 965: break;
  8044  002C98  D00F               	goto	l9846
  8045  002C9A                     l9844:
  8046                           
  8047                           ; BSR set to: 0
  8048  002C9A  398C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  8049  002C9C  0B0F               	andlw	15
  8050  002C9E  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8051  002CA0  6BC1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8052                           
  8053                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8054                           ; Switch size 1, requested type "space"
  8055                           ; Number of cases is 1, Range of values is 0 to 0
  8056                           ; switch strategies available:
  8057                           ; Name         Instructions Cycles
  8058                           ; simple_byte            4     3 (average)
  8059                           ;	Chosen strategy is simple_byte
  8060  002CA2  51C1               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8061  002CA4  E1F8               	bnz	l1212
  8062                           
  8063                           ; BSR set to: 0
  8064                           ; Switch size 1, requested type "space"
  8065                           ; Number of cases is 4, Range of values is 0 to 3
  8066                           ; switch strategies available:
  8067                           ; Name         Instructions Cycles
  8068                           ; simple_byte           13     7 (average)
  8069                           ;	Chosen strategy is simple_byte
  8070  002CA6  51C0               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  8071  002CA8  E08E               	bz	l9802
  8072  002CAA  0A01               	xorlw	1	; case 1
  8073  002CAC  E0A6               	bz	l9812
  8074  002CAE  0A03               	xorlw	3	; case 2
  8075  002CB0  E0BE               	bz	l9822
  8076  002CB2  0A01               	xorlw	1	; case 3
  8077  002CB4  E0D6               	bz	l9832
  8078  002CB6  D7EF               	goto	l1212
  8079  002CB8                     l9846:
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  8083  002CB8  504B               	movf	_vscp_guid_reset,w,c
  8084  002CBA  0BF0               	andlw	240
  8085  002CBC  0AF0               	xorlw	240
  8086  002CBE  E001 D1F6          	bnz	l1272
  8087                           
  8088                           ; BSR set to: 0
  8089                           ;vscp_firmware.c: 970: vscp_init();
  8090  002CC2  EC97  F027         	call	_vscp_init	;wreg free
  8091  002CC6  D1F3               	goto	l1272
  8092  002CC8                     l9850:
  8093                           
  8094                           ; BSR set to: 0
  8095                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8096  002CC8  5184               	movf	_vscp_nickname& (0+255),w,b
  8097  002CCA  EE20  F08C         	lfsr	2,_vscp_imsg+6
  8098  002CCE  62DF               	cpfseq	indf2,c
  8099  002CD0  D1EE               	goto	l1272
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;vscp_firmware.c: 978: uint8_t i;
  8103                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  8104  002CD2  6BCC               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  8105                           
  8106                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  8107  002CD4  C08D  F0CB         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  8108                           
  8109                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  8110  002CD8  C08E  F0CE         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  8111                           
  8112                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  8113  002CDC  6BDA               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  8114  002CDE  D044               	goto	l9882
  8115  002CE0                     l9854:
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  8119  002CE0  51CB               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  8120  002CE2  25DA               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8121  002CE4  ECEE  F029         	call	_vscp_readRegister
  8122  002CE8  0100               	movlb	0	; () banked
  8123  002CEA  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8124  002CEC  0E07               	movlw	7
  8125  002CEE  6E0E               	movwf	?___lbmod,c
  8126  002CF0  51DA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8127  002CF2  EC2A  F029         	call	___lbmod
  8128  002CF6  0100               	movlb	0	; () banked
  8129  002CF8  6FC1               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8130  002CFA  51C1               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8131  002CFC  0F9A               	addlw	low (_vscp_omsg+6)
  8132  002CFE  6ED9               	movwf	fsr2l,c
  8133  002D00  6ADA               	clrf	fsr2h,c
  8134  002D02  C0C0  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  8138  002D06  0E07               	movlw	7
  8139  002D08  6E0E               	movwf	?___lbmod,c
  8140  002D0A  51DA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8141  002D0C  EC2A  F029         	call	___lbmod
  8142  002D10  0A06               	xorlw	6
  8143  002D12  E00B               	bz	l9860
  8144  002D14  0EFF               	movlw	255
  8145  002D16  0100               	movlb	0	; () banked
  8146  002D18  25CE               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8147  002D1A  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8148  002D1C  6BC1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8149  002D1E  0EFF               	movlw	255
  8150  002D20  23C1               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8151  002D22  51DA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8152  002D24  19C0               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8153  002D26  11C1               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8154  002D28  E11E               	bnz	l9880
  8155  002D2A                     l9860:
  8156                           
  8157                           ;vscp_firmware.c: 988: uint8_t bytes;
  8158                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  8159  002D2A  0E07               	movlw	7
  8160  002D2C  6E0E               	movwf	?___lbmod,c
  8161  002D2E  0100               	movlb	0	; () banked
  8162  002D30  51DA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8163  002D32  EC2A  F029         	call	___lbmod
  8164  002D36  0A06               	xorlw	6
  8165  002D38  E103               	bnz	l9864
  8166                           
  8167                           ;vscp_firmware.c: 991: bytes = 7;
  8168  002D3A  0E07               	movlw	7
  8169  002D3C  0100               	movlb	0	; () banked
  8170  002D3E  D009               	goto	L9
  8171  002D40                     l9864:
  8172                           
  8173                           ;vscp_firmware.c: 993: else {
  8174                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  8175  002D40  0E07               	movlw	7
  8176  002D42  6E0E               	movwf	?___lbmod,c
  8177  002D44  0100               	movlb	0	; () banked
  8178  002D46  51DA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8179  002D48  EC2A  F029         	call	___lbmod
  8180  002D4C  0100               	movlb	0	; () banked
  8181  002D4E  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8182  002D50  29C0               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8183  002D52                     L9:
  8184  002D52  6FCD               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;vscp_firmware.c: 995: }
  8188                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  8189  002D54  51CD               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8190  002D56  0F81               	addlw	129
  8191  002D58  6F94               	movwf	_vscp_omsg& (0+255),b
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  8201  002D5A  D9C0               	call	PL72	;call to abstracted procedure
  8202                           
  8203                           ; BSR set to: 0
  8204                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  8205  002D5C  C0CC  F099         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  8209  002D60  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;vscp_firmware.c: 1005: pos++;
  8213  002D64  2BCC               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8214  002D66                     l9880:
  8215                           
  8216                           ; BSR set to: 0
  8217  002D66  2BDA               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8218  002D68                     l9882:
  8219                           
  8220                           ; BSR set to: 0
  8221  002D68  51CE               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8222  002D6A  5DDA               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8223  002D6C  E301 D19F          	bc	l1272
  8224  002D70  D7B7               	goto	l9854
  8225  002D72                     l9884:
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8229  002D72  5184               	movf	_vscp_nickname& (0+255),w,b
  8230  002D74  EE20  F08C         	lfsr	2,_vscp_imsg+6
  8231  002D78  62DF               	cpfseq	indf2,c
  8232  002D7A  D199               	goto	l1272
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;vscp_firmware.c: 1014: uint8_t i;
  8236                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  8237  002D7C  C08D  F0CF         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1156
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8241  002D80  5186               	movf	_vscp_imsg& (0+255),w,b
  8242  002D82  0FFE               	addlw	254
  8243  002D84  0B07               	andlw	7
  8244  002D86  6FD0               	movwf	vscp_handleProtocolEvent@len_1157& (0+255),b
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  8248  002D88  6BD5               	clrf	vscp_handleProtocolEvent@i_1155& (0+255),b
  8249  002D8A  D018               	goto	l9898
  8250  002D8C                     l9892:
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8254  002D8C  51D5               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8255  002D8E  0F8E               	addlw	low (_vscp_imsg+8)
  8256  002D90  6ED9               	movwf	fsr2l,c
  8257  002D92  6ADA               	clrf	fsr2h,c
  8258  002D94  50DF               	movf	indf2,w,c
  8259  002D96  6E29               	movwf	?_vscp_writeRegister,c
  8260  002D98  51CF               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8261  002D9A  25D5               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8262  002D9C  ECAE  F029         	call	_vscp_writeRegister
  8263                           
  8264                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8265  002DA0  0100               	movlb	0	; () banked
  8266  002DA2  51CF               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8267  002DA4  25D5               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8268  002DA6  ECEE  F029         	call	_vscp_readRegister
  8269  002DAA  0100               	movlb	0	; () banked
  8270  002DAC  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8271  002DAE  51D5               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8272  002DB0  0F9A               	addlw	low (_vscp_omsg+6)
  8273  002DB2  6ED9               	movwf	fsr2l,c
  8274  002DB4  6ADA               	clrf	fsr2h,c
  8275  002DB6  C0C0  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8276                           
  8277                           ; BSR set to: 0
  8278  002DBA  2BD5               	incf	vscp_handleProtocolEvent@i_1155& (0+255),f,b
  8279  002DBC                     l9898:
  8280                           
  8281                           ; BSR set to: 0
  8282  002DBC  51D0               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8283  002DBE  5DD5               	subwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8284  002DC0  E3E5               	bnc	l9892
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;vscp_firmware.c: 1022: }
  8288                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  8292                           
  8293                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  8294  002DC2  D98C               	call	PL72	;call to abstracted procedure
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  8298  002DC4  6B99               	clrf	(_vscp_omsg+5)& (0+255),b
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  8302  002DC6  51D0               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8303  002DC8  0F81               	addlw	129
  8304  002DCA  6F94               	movwf	_vscp_omsg& (0+255),b
  8305  002DCC  D6AE               	goto	l9736
  8306  002DCE                     l9910:
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8310  002DCE  5184               	movf	_vscp_nickname& (0+255),w,b
  8311  002DD0  EE20  F08C         	lfsr	2,_vscp_imsg+6
  8312  002DD4  62DF               	cpfseq	indf2,c
  8313  002DD6  D16B               	goto	l1272
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8317                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  8318                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8319  002DD8  518D               	movf	(_vscp_imsg+7)& (0+255),w,b
  8320  002DDA  EC0F  F00E         	call	_vscp_readAppReg
  8321  002DDE  0100               	movlb	0	; () banked
  8322  002DE0  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8323  002DE2  29C0               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8324  002DE4  6E21               	movwf	?_vscp_writeAppReg,c
  8325  002DE6  518D               	movf	(_vscp_imsg+7)& (0+255),w,b
  8326  002DE8  EC37  F003         	call	_vscp_writeAppReg
  8327  002DEC  D692               	goto	L8
  8328  002DEE                     l9926:
  8329                           
  8330                           ; BSR set to: 0
  8331                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8332  002DEE  5184               	movf	_vscp_nickname& (0+255),w,b
  8333  002DF0  EE20  F08C         	lfsr	2,_vscp_imsg+6
  8334  002DF4  62DF               	cpfseq	indf2,c
  8335  002DF6  D15B               	goto	l1272
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8339                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  8340                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8341  002DF8  518D               	movf	(_vscp_imsg+7)& (0+255),w,b
  8342  002DFA  EC0F  F00E         	call	_vscp_readAppReg
  8343  002DFE  0100               	movlb	0	; () banked
  8344  002E00  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8345  002E02  05C0               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8346  002E04  6E21               	movwf	?_vscp_writeAppReg,c
  8347  002E06  518D               	movf	(_vscp_imsg+7)& (0+255),w,b
  8348  002E08  EC37  F003         	call	_vscp_writeAppReg
  8349  002E0C  D682               	goto	L8
  8350  002E0E                     l9942:
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8354                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  8355  002E0E  518C               	movf	(_vscp_imsg+6)& (0+255),w,b
  8356  002E10  1984               	xorwf	_vscp_nickname& (0+255),w,b
  8357  002E12  E003               	bz	l1236
  8358                           
  8359                           ; BSR set to: 0
  8360  002E14  298C               	incf	(_vscp_imsg+6)& (0+255),w,b
  8361  002E16  E001 D14A          	bnz	l1272
  8362  002E1A                     l1236:
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  8366  002E1A  6BD4               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  8370  002E1C  0E03               	movlw	3
  8371  002E1E  6F95               	movwf	(_vscp_omsg+1)& (0+255),b
  8372                           
  8373                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  8374  002E20  0E88               	movlw	136
  8375  002E22  6F94               	movwf	_vscp_omsg& (0+255),b
  8376                           
  8377                           ; BSR set to: 0
  8378                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  8379  002E24  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
  8380  002E26  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  8381                           
  8382                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  8383  002E28  0E20               	movlw	32
  8384  002E2A  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  8388  002E2C  6BD9               	clrf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8389  002E2E                     l1237:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;vscp_firmware.c: 1091: {
  8393                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  8397  002E2E  D95D               	call	PL90	;call to abstracted procedure
  8398  002E30                     l9962:
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8402  002E30  51DB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8403  002E32  0F99               	addlw	low (_vscp_omsg+5)
  8404  002E34  6ED9               	movwf	fsr2l,c
  8405  002E36  6ADA               	clrf	fsr2h,c
  8406  002E38  51D4               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8407  002E3A  080F               	sublw	15
  8408  002E3C  EC58  F02A         	call	_vscp_getGUID
  8409  002E40  6EDF               	movwf	indf2,c
  8410  002E42  0100               	movlb	0	; () banked
  8411  002E44  2BD4               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;vscp_firmware.c: 1096: if (k > 16)
  8415  002E46  0E10               	movlw	16
  8416  002E48  65D4               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8417  002E4A  D001               	goto	l9970
  8418  002E4C  D004               	goto	l9974
  8419  002E4E                     l9970:
  8420                           
  8421                           ; BSR set to: 0
  8422  002E4E  2BDB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8423                           
  8424                           ; BSR set to: 0
  8425  002E50  0E07               	movlw	7
  8426  002E52  65DB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8427  002E54  D7ED               	goto	l9962
  8428  002E56                     l9974:
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;vscp_firmware.c: 1098: }
  8432                           ;vscp_firmware.c: 1100: if (k > 16)
  8433  002E56  0E10               	movlw	16
  8434  002E58  65D4               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8435  002E5A  D001               	goto	l9978
  8436  002E5C  D006               	goto	l1238
  8437  002E5E                     l9978:
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  8441  002E5E  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8442                           
  8443                           ; BSR set to: 0
  8444  002E62  2BD9               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8445                           
  8446                           ; BSR set to: 0
  8447  002E64  0E02               	movlw	2
  8448  002E66  65D9               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8449  002E68  D7E2               	goto	l1237
  8450  002E6A                     l1238:
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;vscp_firmware.c: 1104: }
  8454                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  8455  002E6A  6BDB               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8456  002E6C                     l9988:
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;vscp_firmware.c: 1107: {
  8460                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  8461  002E6C  51DB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8462  002E6E  EC20  F02A         	call	_vscp_getMDF_URL
  8463  002E72  0900               	iorlw	0
  8464  002E74  E008               	bz	l9992
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8468  002E76  51DB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8469  002E78  0F9C               	addlw	low (_vscp_omsg+8)
  8470  002E7A  6ED9               	movwf	fsr2l,c
  8471  002E7C  6ADA               	clrf	fsr2h,c
  8472  002E7E  51DB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8473  002E80  EC20  F02A         	call	_vscp_getMDF_URL
  8474  002E84  D005               	goto	L10
  8475  002E86                     l9992:
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;vscp_firmware.c: 1110: else
  8479                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  8480  002E86  51DB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8481  002E88  0F9C               	addlw	low (_vscp_omsg+8)
  8482  002E8A  6ED9               	movwf	fsr2l,c
  8483  002E8C  6ADA               	clrf	fsr2h,c
  8484  002E8E  0E00               	movlw	0
  8485  002E90                     L10:
  8486  002E90  6EDF               	movwf	indf2,c
  8487                           
  8488                           ; BSR set to: 0
  8489  002E92  2BDB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8490                           
  8491                           ; BSR set to: 0
  8492  002E94  0E04               	movlw	4
  8493  002E96  65DB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8494  002E98  D7E9               	goto	l9988
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;vscp_firmware.c: 1112: }
  8498                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  8499  002E9A  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;vscp_firmware.c: 1116: k = 5;
  8503  002E9E  0E05               	movlw	5
  8504  002EA0  6FD4               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  8508  002EA2  0E03               	movlw	3
  8509  002EA4  6FD9               	movwf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8510  002EA6                     l1247:
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;vscp_firmware.c: 1118: {
  8514                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  8518  002EA6  D921               	call	PL90	;call to abstracted procedure
  8519  002EA8                     l10014:
  8520                           
  8521                           ; BSR set to: 0
  8522                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8523  002EA8  51DB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8524  002EAA  0F99               	addlw	low (_vscp_omsg+5)
  8525  002EAC  6ED9               	movwf	fsr2l,c
  8526  002EAE  6ADA               	clrf	fsr2h,c
  8527  002EB0  51D4               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8528  002EB2  EC20  F02A         	call	_vscp_getMDF_URL
  8529  002EB6  6EDF               	movwf	indf2,c
  8530                           
  8531                           ; BSR set to: 0
  8532  002EB8  2BD4               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8533                           
  8534                           ; BSR set to: 0
  8535  002EBA  2BDB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8536                           
  8537                           ; BSR set to: 0
  8538  002EBC  0E07               	movlw	7
  8539  002EBE  65DB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8540  002EC0  D7F3               	goto	l10014
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;vscp_firmware.c: 1123: }
  8544                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  8545  002EC2  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8546                           
  8547                           ; BSR set to: 0
  8548  002EC6  2BD9               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8549                           
  8550                           ; BSR set to: 0
  8551  002EC8  0E06               	movlw	6
  8552  002ECA  65D9               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8553  002ECC  D7EC               	goto	l1247
  8554  002ECE  D0EF               	goto	l1272
  8555  002ED0                     l10028:
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8559  002ED0  5184               	movf	_vscp_nickname& (0+255),w,b
  8560  002ED2  EE20  F08C         	lfsr	2,_vscp_imsg+6
  8561  002ED6  62DF               	cpfseq	indf2,c
  8562  002ED8  D0EA               	goto	l1272
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  8566  002EDA  0E03               	movlw	3
  8567  002EDC  6F95               	movwf	(_vscp_omsg+1)& (0+255),b
  8568                           
  8569                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  8570  002EDE  0E87               	movlw	135
  8571  002EE0  6F94               	movwf	_vscp_omsg& (0+255),b
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  8575  002EE2  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
  8576  002EE4  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  8577                           
  8578                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  8579  002EE6  0E22               	movlw	34
  8580  002EE8  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8584  002EEA  0E99               	movlw	(_vscp_omsg+5)& (0+255)
  8585  002EEC  ECFB  F029         	call	_vscp_getMatrixInfo
  8586  002EF0  D61C               	goto	l9736
  8587  002EF2                     l10038:
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8591  002EF2  5184               	movf	_vscp_nickname& (0+255),w,b
  8592  002EF4  EE20  F08C         	lfsr	2,_vscp_imsg+6
  8593  002EF8  62DF               	cpfseq	indf2,c
  8594  002EFA  D0D9               	goto	l1272
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  8598  002EFC  6BD6               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  8602                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8603  002EFE  C086  F0C0         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8604  002F02  0E0F               	movlw	15
  8605  002F04  17C0               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8606  002F06  0E04               	movlw	4
  8607  002F08  5DC0               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8608  002F0A  E312               	bnc	l10054
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  8612  002F0C  C090  F0D7         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1162
  8613  002F10  6BD8               	clrf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  8617  002F12  51D8               	movf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8618  002F14  11D7               	iorwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8619  002F16  E103               	bnz	l10050
  8620                           
  8621                           ; BSR set to: 0
  8622  002F18  0E01               	movlw	1
  8623  002F1A  6FD8               	movwf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8624  002F1C  6BD7               	clrf	vscp_handleProtocolEvent@bytes_1162& (0+255),b
  8625  002F1E                     l10050:
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  8629  002F1E  0E01               	movlw	1
  8630  002F20  5DD7               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8631  002F22  0E01               	movlw	1
  8632  002F24  59D8               	subwfb	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8633  002F26  E307               	bnc	l10056
  8634                           
  8635                           ; BSR set to: 0
  8636  002F28  0E01               	movlw	1
  8637  002F2A  6FD8               	movwf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8638  002F2C  0E00               	movlw	0
  8639  002F2E  D002               	goto	L12
  8640  002F30                     l10054:
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;vscp_firmware.c: 1173: else {
  8644                           ;vscp_firmware.c: 1174: bytes = 1;
  8645  002F30  6BD8               	clrf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8646  002F32  0E01               	movlw	1
  8647  002F34                     L12:
  8648  002F34  6FD7               	movwf	vscp_handleProtocolEvent@bytes_1162& (0+255),b
  8649  002F36                     l10056:
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;vscp_firmware.c: 1175: }
  8653                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  8654  002F36  C046  F0C7         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8655  002F3A  C047  F0C8         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8659  002F3E  D8B8               	call	PL38	;call to abstracted procedure
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  8663  002F40  0E07               	movlw	7
  8664  002F42  6F95               	movwf	(_vscp_omsg+1)& (0+255),b
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  8680  002F44  D8C1               	call	PL52	;call to abstracted procedure
  8681  002F46                     l10072:
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  8685  002F46  51D6               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8686  002F48  5DD7               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8687  002F4A  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8688  002F4C  0E00               	movlw	0
  8689  002F4E  59D8               	subwfb	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8690  002F50  6FC1               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8691  002F52  0E04               	movlw	4
  8692  002F54  5DC0               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8693  002F56  0E00               	movlw	0
  8694  002F58  59C1               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8695  002F5A  E302               	bnc	l10076
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  8699  002F5C  0E04               	movlw	4
  8700  002F5E  D002               	goto	L13
  8701  002F60                     l10076:
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;vscp_firmware.c: 1198: else {
  8705                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  8706  002F60  51D6               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8707  002F62  5DD7               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8708  002F64                     L13:
  8709  002F64  6FD1               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;vscp_firmware.c: 1200: }
  8713                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8714  002F66  51D1               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8715  002F68  0F84               	addlw	132
  8716  002F6A  6F94               	movwf	_vscp_omsg& (0+255),b
  8717                           
  8718                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  8719                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  8720  002F6C  518F               	movf	(_vscp_imsg+9)& (0+255),w,b
  8721  002F6E  25D6               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8722  002F70  6F9C               	movwf	(_vscp_omsg+8)& (0+255),b
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8726  002F72  6BD2               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8727  002F74  D00E               	goto	l10084
  8728  002F76                     l10080:
  8729                           
  8730                           ; BSR set to: 0
  8731                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  8732                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8733  002F76  518F               	movf	(_vscp_imsg+9)& (0+255),w,b
  8734  002F78  25D6               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8735  002F7A  25D2               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8736  002F7C  ECEE  F029         	call	_vscp_readRegister
  8737  002F80  0100               	movlb	0	; () banked
  8738  002F82  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8739  002F84  51D2               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8740  002F86  0F9D               	addlw	low (_vscp_omsg+9)
  8741  002F88  6ED9               	movwf	fsr2l,c
  8742  002F8A  6ADA               	clrf	fsr2h,c
  8743  002F8C  C0C0  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8744                           
  8745                           ; BSR set to: 0
  8746  002F90  2BD2               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8747  002F92                     l10084:
  8748                           
  8749                           ; BSR set to: 0
  8750  002F92  51D1               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8751  002F94  5DD2               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8752  002F96  E3EF               	bnc	l10080
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;vscp_firmware.c: 1211: }
  8756                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  8757  002F98  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  8761  002F9C  51D1               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8762  002F9E  27D6               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  8766  002FA0  2B99               	incf	(_vscp_omsg+5)& (0+255),f,b
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  8770  002FA2  51D6               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8771  002FA4  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8772  002FA6  6BC1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8773  002FA8  51D7               	movf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8774  002FAA  5DC0               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8775  002FAC  51D8               	movf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8776  002FAE  59C1               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8777  002FB0  E3CA               	bnc	l10072
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  8781  002FB2  C0C7  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8782  002FB6  C0C8  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8783  002FBA  D079               	goto	l1272
  8784  002FBC                     l10094:
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8788  002FBC  5184               	movf	_vscp_nickname& (0+255),w,b
  8789  002FBE  EE20  F08C         	lfsr	2,_vscp_imsg+6
  8790  002FC2  62DF               	cpfseq	indf2,c
  8791  002FC4  D074               	goto	l1272
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;vscp_firmware.c: 1234: uint8_t i;
  8795                           ;vscp_firmware.c: 1235: uint16_t page_save;
  8796                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  8797  002FC6  C046  F0C9         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1167
  8798  002FCA  C047  F0CA         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1167+1
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8802  002FCE  D870               	call	PL38	;call to abstracted procedure
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  8806  002FD0  C08F  F0D3         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1166
  8807                           
  8808                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8809                           ;vscp_firmware.c: 1248: i++) {
  8810  002FD4  D014               	goto	l10106
  8811  002FD6                     l10102:
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8815                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8816  002FD6  518F               	movf	(_vscp_imsg+9)& (0+255),w,b
  8817  002FD8  0890               	sublw	low (_vscp_imsg+10)
  8818  002FDA  25D3               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8819  002FDC  6ED9               	movwf	fsr2l,c
  8820  002FDE  6ADA               	clrf	fsr2h,c
  8821  002FE0  50DF               	movf	indf2,w,c
  8822  002FE2  6E29               	movwf	?_vscp_writeRegister,c
  8823  002FE4  51D3               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8824  002FE6  ECAE  F029         	call	_vscp_writeRegister
  8825  002FEA  0100               	movlb	0	; () banked
  8826  002FEC  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8827  002FEE  518F               	movf	(_vscp_imsg+9)& (0+255),w,b
  8828  002FF0  089D               	sublw	low (_vscp_omsg+9)
  8829  002FF2  25D3               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8830  002FF4  6ED9               	movwf	fsr2l,c
  8831  002FF6  6ADA               	clrf	fsr2h,c
  8832  002FF8  C0C0  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8833                           
  8834                           ; BSR set to: 0
  8835  002FFC  2BD3               	incf	vscp_handleProtocolEvent@i_1166& (0+255),f,b
  8836  002FFE                     l10106:
  8837                           
  8838                           ; BSR set to: 0
  8839  002FFE  5186               	movf	_vscp_imsg& (0+255),w,b
  8840  003000  0B0F               	andlw	15
  8841  003002  6FC0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8842  003004  6BC1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8843  003006  518F               	movf	(_vscp_imsg+9)& (0+255),w,b
  8844  003008  27C0               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8845  00300A  0E00               	movlw	0
  8846  00300C  23C1               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8847  00300E  0EFC               	movlw	252
  8848  003010  25C0               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8849  003012  6FC2               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8850  003014  0EFF               	movlw	255
  8851  003016  21C1               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8852  003018  6FC3               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8853  00301A  51D3               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8854  00301C  6FC4               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8855  00301E  6BC5               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8856  003020  51C5               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8857  003022  0A80               	xorlw	128
  8858  003024  6FC6               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8859  003026  51C2               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8860  003028  5DC4               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8861  00302A  51C3               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8862  00302C  0A80               	xorlw	128
  8863  00302E  59C6               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8864  003030  E3D2               	bnc	l10102
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;vscp_firmware.c: 1251: }
  8868                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8869  003032  C0C9  F046         	movff	vscp_handleProtocolEvent@page_save_1167,_vscp_page_select
  8870  003036  C0CA  F047         	movff	vscp_handleProtocolEvent@page_save_1167+1,_vscp_page_select+1
  8871                           
  8872                           ; BSR set to: 0
  8873                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8874  00303A  0E07               	movlw	7
  8875  00303C  6F95               	movwf	(_vscp_omsg+1)& (0+255),b
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8879  00303E  5186               	movf	_vscp_imsg& (0+255),w,b
  8880  003040  0B0F               	andlw	15
  8881  003042  0F80               	addlw	128
  8882  003044  6F94               	movwf	_vscp_omsg& (0+255),b
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8898  003046  D840               	call	PL52	;call to abstracted procedure
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8902  003048  C08F  F09C         	movff	_vscp_imsg+9,_vscp_omsg+8
  8903  00304C  D56E               	goto	l9736
  8904  00304E                     l10128:
  8905                           
  8906                           ; BSR set to: 0
  8907  00304E  518A               	movf	(_vscp_imsg+4)& (0+255),w,b
  8908                           
  8909                           ; Switch size 1, requested type "space"
  8910                           ; Number of cases is 16, Range of values is 1 to 38
  8911                           ; switch strategies available:
  8912                           ; Name         Instructions Cycles
  8913                           ; simple_byte           49    25 (average)
  8914                           ;	Chosen strategy is simple_byte
  8915  003050  0A01               	xorlw	1	; case 1
  8916  003052  E101 D542          	bz	l9710
  8917  003056  0A03               	xorlw	3	; case 2
  8918  003058  E101 D542          	bz	l9712
  8919  00305C  0A04               	xorlw	4	; case 6
  8920  00305E  E101 D542          	bz	l9714
  8921  003062  0A0E               	xorlw	14	; case 8
  8922  003064  E101 D542          	bz	l9716
  8923  003068  0A01               	xorlw	1	; case 9
  8924  00306A  E101 D542          	bz	l9718
  8925  00306E  0A02               	xorlw	2	; case 11
  8926  003070  E101 D562          	bz	l9752
  8927  003074  0A07               	xorlw	7	; case 12
  8928  003076  E101 D578          	bz	l9786
  8929  00307A  0A1B               	xorlw	27	; case 23
  8930  00307C  E101 D60D          	bz	l9844
  8931  003080  0A0F               	xorlw	15	; case 24
  8932  003082  E101 D621          	bz	l9850
  8933  003086  0A01               	xorlw	1	; case 25
  8934  003088  E101 D673          	bz	l9884
  8935  00308C  0A04               	xorlw	4	; case 29
  8936  00308E  E101 D69E          	bz	l9910
  8937  003092  0A03               	xorlw	3	; case 30
  8938  003094  E101 D6AB          	bz	l9926
  8939  003098  0A01               	xorlw	1	; case 31
  8940  00309A  E101 D6B8          	bz	l9942
  8941  00309E  0A3E               	xorlw	62	; case 33
  8942  0030A0  E101 D716          	bz	l10028
  8943  0030A4  0A04               	xorlw	4	; case 37
  8944  0030A6  E101 D724          	bz	l10038
  8945  0030AA  0A03               	xorlw	3	; case 38
  8946  0030AC  E087               	bz	l10094
  8947  0030AE                     l1272:
  8948  0030AE  0012               	return	
  8949  0030B0                     __end_of_vscp_handleProtocolEvent:
  8950                           	opt stack 0
  8951  0030B0                     PL38:
  8952                           	opt stack 21
  8953  0030B0  518E               	movf	(_vscp_imsg+8)& (0+255),w,b
  8954  0030B2  C08D  F0C0         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8955  0030B6  6BC1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8956  0030B8  C0C0  F0C1         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8957  0030BC  6BC0               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8958  0030BE  11C0               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8959  0030C0  6E46               	movwf	_vscp_page_select,c
  8960  0030C2  51C1               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8961  0030C4  6E47               	movwf	_vscp_page_select+1,c
  8962  0030C6  0012               	return	
  8963  0030C8                     __end_ofPL38:
  8964                           	opt stack 0
  8965  0030C8                     PL52:
  8966                           	opt stack 21
  8967  0030C8  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
  8968  0030CA  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  8969  0030CC  0E27               	movlw	39
  8970  0030CE  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  8971  0030D0  6B99               	clrf	(_vscp_omsg+5)& (0+255),b
  8972  0030D2  C08D  F09A         	movff	_vscp_imsg+7,_vscp_omsg+6
  8973  0030D6  C08E  F09B         	movff	_vscp_imsg+8,_vscp_omsg+7
  8974  0030DA  0012               	return	
  8975  0030DC                     __end_ofPL52:
  8976                           	opt stack 0
  8977  0030DC                     PL72:
  8978                           	opt stack 21
  8979  0030DC  0E07               	movlw	7
  8980  0030DE  6F95               	movwf	(_vscp_omsg+1)& (0+255),b
  8981  0030E0  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
  8982  0030E2  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
  8983  0030E4  0E1A               	movlw	26
  8984  0030E6  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
  8985  0030E8  0C1A               	retlw	26
  8986  0030EA                     __end_ofPL72:
  8987                           	opt stack 0
  8988  0030EA                     PL90:
  8989                           	opt stack 21
  8990  0030EA  C0D9  F099         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8991  0030EE  0E01               	movlw	1
  8992  0030F0  6FDB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8993  0030F2  0C01               	retlw	1
  8994  0030F4                     __end_ofPL90:
  8995                           	opt stack 0
  8996                           tblptru	equ	0xFF8
  8997                           tblptrh	equ	0xFF7
  8998                           tblptrl	equ	0xFF6
  8999                           tablat	equ	0xFF5
  9000                           prodh	equ	0xFF4
  9001                           prodl	equ	0xFF3
  9002                           intcon	equ	0xFF2
  9003                           postinc0	equ	0xFEE
  9004                           wreg	equ	0xFE8
  9005                           indf1	equ	0xFE7
  9006                           postdec1	equ	0xFE5
  9007                           fsr1h	equ	0xFE2
  9008                           fsr1l	equ	0xFE1
  9009                           indf2	equ	0xFDF
  9010                           postinc2	equ	0xFDE
  9011                           postdec2	equ	0xFDD
  9012                           plusw2	equ	0xFDB
  9013                           fsr2h	equ	0xFDA
  9014                           fsr2l	equ	0xFD9
  9015                           status	equ	0xFD8
  9016                           
  9017 ;; *************** function ___lbmod *****************
  9018 ;; Defined at:
  9019 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  dividend        1    wreg     unsigned char 
  9022 ;;  divisor         1   13[COMRAM] unsigned char 
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;  dividend        1   14[COMRAM] unsigned char 
  9025 ;;  rem             1   16[COMRAM] unsigned char 
  9026 ;;  counter         1   15[COMRAM] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  1    wreg      unsigned char 
  9029 ;; Registers used:
  9030 ;;		wreg, status,2, status,0
  9031 ;; Tracked objects:
  9032 ;;		On entry : F/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9036 ;;      Params:         1       0       0       0       0       0       0
  9037 ;;      Locals:         3       0       0       0       0       0       0
  9038 ;;      Temps:          0       0       0       0       0       0       0
  9039 ;;      Totals:         4       0       0       0       0       0       0
  9040 ;;Total ram usage:        4 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    2
  9043 ;; This function calls:
  9044 ;;		Nothing
  9045 ;; This function is called by:
  9046 ;;		_vscp_handleProtocolEvent
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           	psect	text34
  9051  005254                     __ptext34:
  9052                           	opt stack 0
  9053  005254                     ___lbmod:
  9054                           	opt stack 26
  9055                           
  9056                           ;incstack = 0
  9057                           ;incstack = 0
  9058                           ;___lbmod@dividend stored from wreg
  9059  005254  CFE8 F00F          	movff	wreg,___lbmod@dividend
  9060                           
  9061                           ; BSR set to: 0
  9062  005258  0E08               	movlw	8
  9063  00525A  6E10               	movwf	___lbmod@counter,c
  9064                           
  9065                           ; BSR set to: 0
  9066  00525C  6A11               	clrf	___lbmod@rem,c
  9067  00525E                     l9146:
  9068  00525E  90D8               	bcf	status,0,c
  9069  005260  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  9070  005262  3411               	rlcf	___lbmod@rem& (0+255),w,c
  9071  005264  6E11               	movwf	___lbmod@rem,c
  9072  005266  90D8               	bcf	status,0,c
  9073  005268  360F               	rlcf	___lbmod@dividend,f,c
  9074  00526A  500E               	movf	___lbmod@divisor,w,c
  9075  00526C  5C11               	subwf	___lbmod@rem,w,c
  9076  00526E  E302               	bnc	l9154
  9077  005270  500E               	movf	___lbmod@divisor,w,c
  9078  005272  5E11               	subwf	___lbmod@rem,f,c
  9079  005274                     l9154:
  9080  005274  2E10               	decfsz	___lbmod@counter,f,c
  9081  005276  D7F3               	goto	l9146
  9082  005278  5011               	movf	___lbmod@rem,w,c
  9083  00527A  0012               	return	
  9084  00527C                     __end_of___lbmod:
  9085                           	opt stack 0
  9086                           tblptru	equ	0xFF8
  9087                           tblptrh	equ	0xFF7
  9088                           tblptrl	equ	0xFF6
  9089                           tablat	equ	0xFF5
  9090                           prodh	equ	0xFF4
  9091                           prodl	equ	0xFF3
  9092                           intcon	equ	0xFF2
  9093                           postinc0	equ	0xFEE
  9094                           wreg	equ	0xFE8
  9095                           indf1	equ	0xFE7
  9096                           postdec1	equ	0xFE5
  9097                           fsr1h	equ	0xFE2
  9098                           fsr1l	equ	0xFE1
  9099                           indf2	equ	0xFDF
  9100                           postinc2	equ	0xFDE
  9101                           postdec2	equ	0xFDD
  9102                           plusw2	equ	0xFDB
  9103                           fsr2h	equ	0xFDA
  9104                           fsr2l	equ	0xFD9
  9105                           status	equ	0xFD8
  9106                           
  9107 ;; *************** function _vscp_writeRegister *****************
  9108 ;; Defined at:
  9109 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;  reg             1    wreg     unsigned char 
  9112 ;;  value           1   40[COMRAM] unsigned char 
  9113 ;; Auto vars:     Size  Location     Type
  9114 ;;  reg             1   41[COMRAM] unsigned char 
  9115 ;; Return value:  Size  Location     Type
  9116 ;;                  1    wreg      unsigned char 
  9117 ;; Registers used:
  9118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9119 ;; Tracked objects:
  9120 ;;		On entry : F/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9124 ;;      Params:         1       0       0       0       0       0       0
  9125 ;;      Locals:         1       0       0       0       0       0       0
  9126 ;;      Temps:          0       0       0       0       0       0       0
  9127 ;;      Totals:         2       0       0       0       0       0       0
  9128 ;;Total ram usage:        2 bytes
  9129 ;; Hardware stack levels used:    1
  9130 ;; Hardware stack levels required when called:    7
  9131 ;; This function calls:
  9132 ;;		_vscp_writeAppReg
  9133 ;;		_vscp_writeStdReg
  9134 ;; This function is called by:
  9135 ;;		_vscp_handleProtocolEvent
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           	psect	text35
  9140  00535C                     __ptext35:
  9141                           	opt stack 0
  9142  00535C                     _vscp_writeRegister:
  9143                           	opt stack 21
  9144                           
  9145                           ;incstack = 0
  9146                           ;incstack = 0
  9147                           ;vscp_writeRegister@reg stored from wreg
  9148  00535C  CFE8 F02A          	movff	wreg,vscp_writeRegister@reg
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  9152  005360  0E7F               	movlw	127
  9153  005362  642A               	cpfsgt	vscp_writeRegister@reg,c
  9154  005364  D006               	goto	l11388
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  9158  005366  C029  F022         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9159  00536A  502A               	movf	vscp_writeRegister@reg,w,c
  9160  00536C  EC37  F01F         	call	_vscp_writeStdReg
  9161  005370  D005               	goto	l1152
  9162  005372                     l11388:
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;vscp_firmware.c: 705: else {
  9166                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  9167  005372  C029  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9168  005376  502A               	movf	vscp_writeRegister@reg,w,c
  9169  005378  EC37  F003         	call	_vscp_writeAppReg
  9170  00537C                     l1152:
  9171  00537C  0012               	return	
  9172  00537E                     __end_of_vscp_writeRegister:
  9173                           	opt stack 0
  9174                           tblptru	equ	0xFF8
  9175                           tblptrh	equ	0xFF7
  9176                           tblptrl	equ	0xFF6
  9177                           tablat	equ	0xFF5
  9178                           prodh	equ	0xFF4
  9179                           prodl	equ	0xFF3
  9180                           intcon	equ	0xFF2
  9181                           postinc0	equ	0xFEE
  9182                           wreg	equ	0xFE8
  9183                           indf1	equ	0xFE7
  9184                           postdec1	equ	0xFE5
  9185                           fsr1h	equ	0xFE2
  9186                           fsr1l	equ	0xFE1
  9187                           indf2	equ	0xFDF
  9188                           postinc2	equ	0xFDE
  9189                           postdec2	equ	0xFDD
  9190                           plusw2	equ	0xFDB
  9191                           fsr2h	equ	0xFDA
  9192                           fsr2l	equ	0xFD9
  9193                           status	equ	0xFD8
  9194                           
  9195 ;; *************** function _vscp_writeStdReg *****************
  9196 ;; Defined at:
  9197 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  9198 ;; Parameters:    Size  Location     Type
  9199 ;;  reg             1    wreg     unsigned char 
  9200 ;;  value           1   33[COMRAM] unsigned char 
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;  reg             1   39[COMRAM] unsigned char 
  9203 ;;  rv              1   38[COMRAM] unsigned char 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  1    wreg      unsigned char 
  9206 ;; Registers used:
  9207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9208 ;; Tracked objects:
  9209 ;;		On entry : F/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9213 ;;      Params:         1       0       0       0       0       0       0
  9214 ;;      Locals:         2       0       0       0       0       0       0
  9215 ;;      Temps:          4       0       0       0       0       0       0
  9216 ;;      Totals:         7       0       0       0       0       0       0
  9217 ;;Total ram usage:        7 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    6
  9220 ;; This function calls:
  9221 ;;		_vscp_getGUID
  9222 ;;		_vscp_setGUID
  9223 ;;		_vscp_getUserID
  9224 ;;		_vscp_setUserID
  9225 ;;		_vscp_getManufacturerId
  9226 ;;		_vscp_setManufacturerId
  9227 ;;		_vscp_restoreDefaults
  9228 ;; This function is called by:
  9229 ;;		_vscp_writeRegister
  9230 ;;		_vscp_handleProtocolEvent
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           	psect	text36
  9235  003E6E                     __ptext36:
  9236                           	opt stack 0
  9237  003E6E                     _vscp_writeStdReg:
  9238                           	opt stack 22
  9239                           
  9240                           ;incstack = 0
  9241                           ;incstack = 0
  9242                           ;vscp_writeStdReg@reg stored from wreg
  9243  003E6E  CFE8 F028          	movff	wreg,vscp_writeStdReg@reg
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  9247  003E72  1C22               	comf	vscp_writeStdReg@value,w,c
  9248  003E74  6E27               	movwf	vscp_writeStdReg@rv,c
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  9252                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  9253  003E76  0E83               	movlw	131
  9254  003E78  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9255  003E7A  D00E               	goto	l11400
  9256                           
  9257                           ; BSR set to: 0
  9258  003E7C  0E89               	movlw	137
  9259  003E7E  6028               	cpfslt	vscp_writeStdReg@reg,c
  9260  003E80  D00B               	goto	l11400
  9261                           
  9262                           ; BSR set to: 0
  9263                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  9264  003E82  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9265  003E86  5028               	movf	vscp_writeStdReg@reg,w,c
  9266  003E88  0F7C               	addlw	124
  9267  003E8A  EC14  F02A         	call	_vscp_setUserID
  9268                           
  9269                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  9270  003E8E  5028               	movf	vscp_writeStdReg@reg,w,c
  9271  003E90  0F7C               	addlw	124
  9272  003E92  EC4E  F02A         	call	_vscp_getUserID
  9273  003E96  D069               	goto	L19
  9274  003E98                     l11400:
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  9278  003E98  5028               	movf	vscp_writeStdReg@reg,w,c
  9279  003E9A  0A92               	xorlw	146
  9280  003E9C  E10D               	bnz	l11406
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9284  003E9E  5022               	movf	vscp_writeStdReg@value,w,c
  9285  003EA0  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9286  003EA2  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9287  003EA4  5046               	movf	_vscp_page_select,w,c
  9288  003EA6  6E25               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9289  003EA8  6A26               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9290  003EAA  1023               	iorwf	??_vscp_writeStdReg,w,c
  9291  003EAC  6E46               	movwf	_vscp_page_select,c
  9292  003EAE  5024               	movf	??_vscp_writeStdReg+1,w,c
  9293  003EB0  1026               	iorwf	??_vscp_writeStdReg+3,w,c
  9294  003EB2  6E47               	movwf	_vscp_page_select+1,c
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  9298  003EB4  5047               	movf	_vscp_page_select+1,w,c
  9299  003EB6  D059               	goto	L19
  9300  003EB8                     l11406:
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  9304  003EB8  5028               	movf	vscp_writeStdReg@reg,w,c
  9305  003EBA  0A93               	xorlw	147
  9306  003EBC  E10B               	bnz	l11412
  9307                           
  9308                           ; BSR set to: 0
  9309                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9310  003EBE  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9311  003EC0  5047               	movf	_vscp_page_select+1,w,c
  9312  003EC2  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9313  003EC4  5022               	movf	vscp_writeStdReg@value,w,c
  9314  003EC6  1023               	iorwf	??_vscp_writeStdReg,w,c
  9315  003EC8  6E46               	movwf	_vscp_page_select,c
  9316  003ECA  5024               	movf	??_vscp_writeStdReg+1,w,c
  9317  003ECC  6E47               	movwf	_vscp_page_select+1,c
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  9321  003ECE  C046  F027         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9322                           
  9323                           ;vscp_firmware.c: 737: }
  9324  003ED2  D04E               	goto	l11454
  9325  003ED4                     l11412:
  9326                           
  9327                           ; BSR set to: 0
  9328                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  9329  003ED4  0E88               	movlw	136
  9330  003ED6  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9331  003ED8  D019               	goto	l11424
  9332                           
  9333                           ; BSR set to: 0
  9334  003EDA  0E91               	movlw	145
  9335  003EDC  6028               	cpfslt	vscp_writeStdReg@reg,c
  9336  003EDE  D016               	goto	l11424
  9337                           
  9338                           ; BSR set to: 0
  9339                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9340                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  9341  003EE0  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9342  003EE4  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9343  003EE8  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9344  003EEA  2824               	incf	??_vscp_writeStdReg+1,w,c
  9345  003EEC  E102               	bnz	l11420
  9346                           
  9347                           ; BSR set to: 0
  9348  003EEE  2846               	incf	_vscp_page_select,w,c
  9349  003EF0  E002               	bz	l11422
  9350  003EF2                     l11420:
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;vscp_firmware.c: 747: rv = ~value;
  9354  003EF2  1C22               	comf	vscp_writeStdReg@value,w,c
  9355  003EF4  D03A               	goto	L19
  9356  003EF6                     l11422:
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;vscp_firmware.c: 749: else {
  9360                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  9361  003EF6  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9362  003EFA  5028               	movf	vscp_writeStdReg@reg,w,c
  9363  003EFC  0F77               	addlw	119
  9364  003EFE  EC08  F02A         	call	_vscp_setManufacturerId
  9365                           
  9366                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  9367  003F02  5028               	movf	vscp_writeStdReg@reg,w,c
  9368  003F04  0F77               	addlw	119
  9369  003F06  EC44  F02A         	call	_vscp_getManufacturerId
  9370  003F0A  D02F               	goto	L19
  9371  003F0C                     l11424:
  9372                           
  9373                           ; BSR set to: 0
  9374                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9375  003F0C  0ECF               	movlw	207
  9376  003F0E  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9377  003F10  D017               	goto	l11436
  9378                           
  9379                           ; BSR set to: 0
  9380  003F12  0EE0               	movlw	224
  9381  003F14  6028               	cpfslt	vscp_writeStdReg@reg,c
  9382  003F16  D014               	goto	l11436
  9383                           
  9384                           ; BSR set to: 0
  9385                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9386                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  9387  003F18  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9388  003F1C  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9389  003F20  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9390  003F22  2824               	incf	??_vscp_writeStdReg+1,w,c
  9391  003F24  E1E6               	bnz	l11420
  9392                           
  9393                           ; BSR set to: 0
  9394  003F26  2846               	incf	_vscp_page_select,w,c
  9395  003F28  E1E4               	bnz	l11420
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;vscp_firmware.c: 762: else {
  9399                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  9400  003F2A  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9401  003F2E  5028               	movf	vscp_writeStdReg@reg,w,c
  9402  003F30  0F30               	addlw	48
  9403  003F32  ECBF  F029         	call	_vscp_setGUID
  9404                           
  9405                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  9406  003F36  5028               	movf	vscp_writeStdReg@reg,w,c
  9407  003F38  0F30               	addlw	48
  9408  003F3A  EC58  F02A         	call	_vscp_getGUID
  9409  003F3E  D015               	goto	L19
  9410  003F40                     l11436:
  9411                           
  9412                           ; BSR set to: 0
  9413                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  9414  003F40  5028               	movf	vscp_writeStdReg@reg,w,c
  9415  003F42  0AA2               	xorlw	162
  9416  003F44  E1D6               	bnz	l11420
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  9420  003F46  5022               	movf	vscp_writeStdReg@value,w,c
  9421  003F48  0A55               	xorlw	85
  9422  003F4A  E104               	bnz	l11444
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  9426  003F4C  6B74               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9427  003F4E  6B75               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9428                           
  9429                           ; BSR set to: 0
  9430                           ;vscp_firmware.c: 771: rv = 0x55;
  9431  003F50  0E55               	movlw	85
  9432  003F52  D00B               	goto	L19
  9433  003F54                     l11444:
  9434                           
  9435                           ; BSR set to: 0
  9436                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  9437  003F54  5022               	movf	vscp_writeStdReg@value,w,c
  9438  003F56  0AAA               	xorlw	170
  9439  003F58  E10B               	bnz	l11454
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  9443  003F5A  0EE8               	movlw	232
  9444  003F5C  5D74               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9445  003F5E  0E03               	movlw	3
  9446  003F60  5975               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9447  003F62  E205               	bc	l1178
  9448                           
  9449                           ; BSR set to: 0
  9450                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  9451  003F64  ECB7  F02A         	call	_vscp_restoreDefaults	;wreg free
  9452                           
  9453                           ; BSR set to: 1
  9454                           ;vscp_firmware.c: 776: rv = 0xaa;
  9455  003F68  0EAA               	movlw	170
  9456  003F6A                     L19:
  9457  003F6A  6E27               	movwf	vscp_writeStdReg@rv,c
  9458                           
  9459                           ;vscp_firmware.c: 777: }
  9460  003F6C  D001               	goto	l11454
  9461  003F6E                     l1178:
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;vscp_firmware.c: 778: else {
  9465                           ;vscp_firmware.c: 779: rv = 0;
  9466  003F6E  6A27               	clrf	vscp_writeStdReg@rv,c
  9467  003F70                     l11454:
  9468                           
  9469                           ;vscp_firmware.c: 787: }
  9470                           ;vscp_firmware.c: 789: return rv;
  9471  003F70  5027               	movf	vscp_writeStdReg@rv,w,c
  9472  003F72  0012               	return	
  9473  003F74                     __end_of_vscp_writeStdReg:
  9474                           	opt stack 0
  9475                           tblptru	equ	0xFF8
  9476                           tblptrh	equ	0xFF7
  9477                           tblptrl	equ	0xFF6
  9478                           tablat	equ	0xFF5
  9479                           prodh	equ	0xFF4
  9480                           prodl	equ	0xFF3
  9481                           intcon	equ	0xFF2
  9482                           postinc0	equ	0xFEE
  9483                           wreg	equ	0xFE8
  9484                           indf1	equ	0xFE7
  9485                           postdec1	equ	0xFE5
  9486                           fsr1h	equ	0xFE2
  9487                           fsr1l	equ	0xFE1
  9488                           indf2	equ	0xFDF
  9489                           postinc2	equ	0xFDE
  9490                           postdec2	equ	0xFDD
  9491                           plusw2	equ	0xFDB
  9492                           fsr2h	equ	0xFDA
  9493                           fsr2l	equ	0xFD9
  9494                           status	equ	0xFD8
  9495                           
  9496 ;; *************** function _vscp_restoreDefaults *****************
  9497 ;; Defined at:
  9498 ;;		line 2835 in file "../main.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;		None
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;		None
  9503 ;; Return value:  Size  Location     Type
  9504 ;;		None               void
  9505 ;; Registers used:
  9506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9507 ;; Tracked objects:
  9508 ;;		On entry : F/0
  9509 ;;		On exit  : F/1
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9512 ;;      Params:         0       0       0       0       0       0       0
  9513 ;;      Locals:         0       0       0       0       0       0       0
  9514 ;;      Temps:          0       0       0       0       0       0       0
  9515 ;;      Totals:         0       0       0       0       0       0       0
  9516 ;;Total ram usage:        0 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    5
  9519 ;; This function calls:
  9520 ;;		_init_app_eeprom
  9521 ;;		_init_app_ram
  9522 ;; This function is called by:
  9523 ;;		_vscp_writeStdReg
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           	psect	text37
  9528  00556E                     __ptext37:
  9529                           	opt stack 0
  9530  00556E                     _vscp_restoreDefaults:
  9531                           	opt stack 22
  9532                           
  9533                           ; BSR set to: 0
  9534                           ;main.c: 2836: init_app_eeprom();
  9535                           
  9536                           ;incstack = 0
  9537                           ;incstack = 0
  9538  00556E  ECDA  F011         	call	_init_app_eeprom	;wreg free
  9539                           
  9540                           ;main.c: 2837: init_app_ram();
  9541  005572  EFDA  F027         	goto	_init_app_ram	;wreg free
  9542  005576                     __end_of_vscp_restoreDefaults:
  9543                           	opt stack 0
  9544                           tblptru	equ	0xFF8
  9545                           tblptrh	equ	0xFF7
  9546                           tblptrl	equ	0xFF6
  9547                           tablat	equ	0xFF5
  9548                           prodh	equ	0xFF4
  9549                           prodl	equ	0xFF3
  9550                           intcon	equ	0xFF2
  9551                           postinc0	equ	0xFEE
  9552                           wreg	equ	0xFE8
  9553                           indf1	equ	0xFE7
  9554                           postdec1	equ	0xFE5
  9555                           fsr1h	equ	0xFE2
  9556                           fsr1l	equ	0xFE1
  9557                           indf2	equ	0xFDF
  9558                           postinc2	equ	0xFDE
  9559                           postdec2	equ	0xFDD
  9560                           plusw2	equ	0xFDB
  9561                           fsr2h	equ	0xFDA
  9562                           fsr2l	equ	0xFD9
  9563                           status	equ	0xFD8
  9564                           
  9565 ;; *************** function _init_app_eeprom *****************
  9566 ;; Defined at:
  9567 ;;		line 1022 in file "../main.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;		None
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;  i               1   16[COMRAM] unsigned char 
  9572 ;; Return value:  Size  Location     Type
  9573 ;;		None               void
  9574 ;; Registers used:
  9575 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/1
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9581 ;;      Params:         0       0       0       0       0       0       0
  9582 ;;      Locals:         1       0       0       0       0       0       0
  9583 ;;      Temps:          0       0       0       0       0       0       0
  9584 ;;      Totals:         1       0       0       0       0       0       0
  9585 ;;Total ram usage:        1 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; Hardware stack levels required when called:    3
  9588 ;; This function calls:
  9589 ;;		_writeEEPROM
  9590 ;; This function is called by:
  9591 ;;		_main
  9592 ;;		_vscp_restoreDefaults
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           	psect	text38
  9597  0023B4                     __ptext38:
  9598                           	opt stack 0
  9599  0023B4                     _init_app_eeprom:
  9600                           	opt stack 23
  9601                           
  9602                           ;main.c: 1024: writeEEPROM( 0x41, 0 );
  9603                           
  9604                           ; BSR set to: 1
  9605                           ;incstack = 0
  9606                           ;incstack = 0
  9607  0023B4  6A0F               	clrf	?_writeEEPROM+1,c
  9608  0023B6  0E41               	movlw	65
  9609  0023B8  6E0E               	movwf	?_writeEEPROM,c
  9610  0023BA  0E00               	movlw	0
  9611  0023BC  6A10               	clrf	?_writeEEPROM+2,c
  9612  0023BE  EC65  F029         	call	_writeEEPROM	;wreg free
  9613                           
  9614                           ;main.c: 1025: writeEEPROM( 0x41, 0 );
  9615  0023C2  6A0F               	clrf	?_writeEEPROM+1,c
  9616  0023C4  0E41               	movlw	65
  9617  0023C6  6E0E               	movwf	?_writeEEPROM,c
  9618  0023C8  0E00               	movlw	0
  9619  0023CA  6A10               	clrf	?_writeEEPROM+2,c
  9620  0023CC  EC65  F029         	call	_writeEEPROM	;wreg free
  9621                           
  9622                           ;main.c: 1027: writeEEPROM(0x43, 0b00000001);
  9623  0023D0  6A0F               	clrf	?_writeEEPROM+1,c
  9624  0023D2  0E43               	movlw	67
  9625  0023D4  6E0E               	movwf	?_writeEEPROM,c
  9626  0023D6  0E01               	movlw	1
  9627  0023D8  6E10               	movwf	?_writeEEPROM+2,c
  9628  0023DA  EC65  F029         	call	_writeEEPROM	;wreg free
  9629                           
  9630                           ;main.c: 1028: writeEEPROM(0x44, 0b00000001);
  9631  0023DE  6A0F               	clrf	?_writeEEPROM+1,c
  9632  0023E0  0E44               	movlw	68
  9633  0023E2  6E0E               	movwf	?_writeEEPROM,c
  9634  0023E4  0E01               	movlw	1
  9635  0023E6  6E10               	movwf	?_writeEEPROM+2,c
  9636  0023E8  EC65  F029         	call	_writeEEPROM	;wreg free
  9637                           
  9638                           ;main.c: 1029: writeEEPROM(0x45, 0b00000001);
  9639  0023EC  6A0F               	clrf	?_writeEEPROM+1,c
  9640  0023EE  0E45               	movlw	69
  9641  0023F0  6E0E               	movwf	?_writeEEPROM,c
  9642  0023F2  0E01               	movlw	1
  9643  0023F4  6E10               	movwf	?_writeEEPROM+2,c
  9644  0023F6  EC65  F029         	call	_writeEEPROM	;wreg free
  9645                           
  9646                           ;main.c: 1030: writeEEPROM(0x46, 0b00000001);
  9647  0023FA  6A0F               	clrf	?_writeEEPROM+1,c
  9648  0023FC  0E46               	movlw	70
  9649  0023FE  6E0E               	movwf	?_writeEEPROM,c
  9650  002400  0E01               	movlw	1
  9651  002402  6E10               	movwf	?_writeEEPROM+2,c
  9652  002404  EC65  F029         	call	_writeEEPROM	;wreg free
  9653                           
  9654                           ;main.c: 1031: writeEEPROM(0x47, 0b00000001);
  9655  002408  6A0F               	clrf	?_writeEEPROM+1,c
  9656  00240A  0E47               	movlw	71
  9657  00240C  6E0E               	movwf	?_writeEEPROM,c
  9658  00240E  0E01               	movlw	1
  9659  002410  6E10               	movwf	?_writeEEPROM+2,c
  9660  002412  EC65  F029         	call	_writeEEPROM	;wreg free
  9661                           
  9662                           ;main.c: 1032: writeEEPROM(0x48, 0b00000001);
  9663  002416  6A0F               	clrf	?_writeEEPROM+1,c
  9664  002418  0E48               	movlw	72
  9665  00241A  6E0E               	movwf	?_writeEEPROM,c
  9666  00241C  0E01               	movlw	1
  9667  00241E  6E10               	movwf	?_writeEEPROM+2,c
  9668  002420  EC65  F029         	call	_writeEEPROM	;wreg free
  9669                           
  9670                           ;main.c: 1034: writeEEPROM(0x49, 30);
  9671  002424  6A0F               	clrf	?_writeEEPROM+1,c
  9672  002426  0E49               	movlw	73
  9673  002428  6E0E               	movwf	?_writeEEPROM,c
  9674  00242A  0E1E               	movlw	30
  9675  00242C  6E10               	movwf	?_writeEEPROM+2,c
  9676  00242E  EC65  F029         	call	_writeEEPROM	;wreg free
  9677                           
  9678                           ;main.c: 1035: writeEEPROM(0x4A, 0);
  9679  002432  6A0F               	clrf	?_writeEEPROM+1,c
  9680  002434  0E4A               	movlw	74
  9681  002436  6E0E               	movwf	?_writeEEPROM,c
  9682  002438  0E00               	movlw	0
  9683  00243A  6A10               	clrf	?_writeEEPROM+2,c
  9684  00243C  EC65  F029         	call	_writeEEPROM	;wreg free
  9685                           
  9686                           ;main.c: 1036: writeEEPROM(0x4B, 0);
  9687  002440  6A0F               	clrf	?_writeEEPROM+1,c
  9688  002442  0E4B               	movlw	75
  9689  002444  6E0E               	movwf	?_writeEEPROM,c
  9690  002446  0E00               	movlw	0
  9691  002448  6A10               	clrf	?_writeEEPROM+2,c
  9692  00244A  EC65  F029         	call	_writeEEPROM	;wreg free
  9693                           
  9694                           ;main.c: 1037: writeEEPROM(0x4C, 0);
  9695  00244E  6A0F               	clrf	?_writeEEPROM+1,c
  9696  002450  0E4C               	movlw	76
  9697  002452  6E0E               	movwf	?_writeEEPROM,c
  9698  002454  0E00               	movlw	0
  9699  002456  6A10               	clrf	?_writeEEPROM+2,c
  9700  002458  EC65  F029         	call	_writeEEPROM	;wreg free
  9701                           
  9702                           ;main.c: 1038: writeEEPROM(0x4D, 0);
  9703  00245C  6A0F               	clrf	?_writeEEPROM+1,c
  9704  00245E  0E4D               	movlw	77
  9705  002460  6E0E               	movwf	?_writeEEPROM,c
  9706  002462  0E00               	movlw	0
  9707  002464  6A10               	clrf	?_writeEEPROM+2,c
  9708  002466  EC65  F029         	call	_writeEEPROM	;wreg free
  9709                           
  9710                           ;main.c: 1039: writeEEPROM(0x4E, 0);
  9711  00246A  6A0F               	clrf	?_writeEEPROM+1,c
  9712  00246C  0E4E               	movlw	78
  9713  00246E  6E0E               	movwf	?_writeEEPROM,c
  9714  002470  0E00               	movlw	0
  9715  002472  6A10               	clrf	?_writeEEPROM+2,c
  9716  002474  EC65  F029         	call	_writeEEPROM	;wreg free
  9717                           
  9718                           ;main.c: 1043: writeEEPROM(0x4F, 0x0F);
  9719  002478  6A0F               	clrf	?_writeEEPROM+1,c
  9720  00247A  0E4F               	movlw	79
  9721  00247C  6E0E               	movwf	?_writeEEPROM,c
  9722  00247E  0E0F               	movlw	15
  9723  002480  6E10               	movwf	?_writeEEPROM+2,c
  9724  002482  EC65  F029         	call	_writeEEPROM	;wreg free
  9725                           
  9726                           ;main.c: 1044: writeEEPROM(0x50, 0x68);
  9727  002486  6A0F               	clrf	?_writeEEPROM+1,c
  9728  002488  0E50               	movlw	80
  9729  00248A  6E0E               	movwf	?_writeEEPROM,c
  9730  00248C  0E68               	movlw	104
  9731  00248E  6E10               	movwf	?_writeEEPROM+2,c
  9732  002490  EC65  F029         	call	_writeEEPROM	;wreg free
  9733                           
  9734                           ;main.c: 1046: writeEEPROM(0x51, 0x0D);
  9735  002494  6A0F               	clrf	?_writeEEPROM+1,c
  9736  002496  0E51               	movlw	81
  9737  002498  6E0E               	movwf	?_writeEEPROM,c
  9738  00249A  0E0D               	movlw	13
  9739  00249C  6E10               	movwf	?_writeEEPROM+2,c
  9740  00249E  EC65  F029         	call	_writeEEPROM	;wreg free
  9741                           
  9742                           ;main.c: 1047: writeEEPROM(0x52, 0x7F);
  9743  0024A2  6A0F               	clrf	?_writeEEPROM+1,c
  9744  0024A4  0E52               	movlw	82
  9745  0024A6  6E0E               	movwf	?_writeEEPROM,c
  9746  0024A8  0E7F               	movlw	127
  9747  0024AA  6E10               	movwf	?_writeEEPROM+2,c
  9748  0024AC  EC65  F029         	call	_writeEEPROM	;wreg free
  9749                           
  9750                           ;main.c: 1049: writeEEPROM(0x53, 0x0D);
  9751  0024B0  6A0F               	clrf	?_writeEEPROM+1,c
  9752  0024B2  0E53               	movlw	83
  9753  0024B4  6E0E               	movwf	?_writeEEPROM,c
  9754  0024B6  0E0D               	movlw	13
  9755  0024B8  6E10               	movwf	?_writeEEPROM+2,c
  9756  0024BA  EC65  F029         	call	_writeEEPROM	;wreg free
  9757                           
  9758                           ;main.c: 1050: writeEEPROM(0x54, 0x7F);
  9759  0024BE  6A0F               	clrf	?_writeEEPROM+1,c
  9760  0024C0  0E54               	movlw	84
  9761  0024C2  6E0E               	movwf	?_writeEEPROM,c
  9762  0024C4  0E7F               	movlw	127
  9763  0024C6  6E10               	movwf	?_writeEEPROM+2,c
  9764  0024C8  EC65  F029         	call	_writeEEPROM	;wreg free
  9765                           
  9766                           ;main.c: 1052: writeEEPROM(0x55, 0x0D);
  9767  0024CC  6A0F               	clrf	?_writeEEPROM+1,c
  9768  0024CE  0E55               	movlw	85
  9769  0024D0  6E0E               	movwf	?_writeEEPROM,c
  9770  0024D2  0E0D               	movlw	13
  9771  0024D4  6E10               	movwf	?_writeEEPROM+2,c
  9772  0024D6  EC65  F029         	call	_writeEEPROM	;wreg free
  9773                           
  9774                           ;main.c: 1053: writeEEPROM(0x56, 0x7F);
  9775  0024DA  6A0F               	clrf	?_writeEEPROM+1,c
  9776  0024DC  0E56               	movlw	86
  9777  0024DE  6E0E               	movwf	?_writeEEPROM,c
  9778  0024E0  0E7F               	movlw	127
  9779  0024E2  6E10               	movwf	?_writeEEPROM+2,c
  9780  0024E4  EC65  F029         	call	_writeEEPROM	;wreg free
  9781                           
  9782                           ;main.c: 1055: writeEEPROM(0x57, 0x0D);
  9783  0024E8  6A0F               	clrf	?_writeEEPROM+1,c
  9784  0024EA  0E57               	movlw	87
  9785  0024EC  6E0E               	movwf	?_writeEEPROM,c
  9786  0024EE  0E0D               	movlw	13
  9787  0024F0  6E10               	movwf	?_writeEEPROM+2,c
  9788  0024F2  EC65  F029         	call	_writeEEPROM	;wreg free
  9789                           
  9790                           ;main.c: 1056: writeEEPROM(0x58, 0x7F);
  9791  0024F6  6A0F               	clrf	?_writeEEPROM+1,c
  9792  0024F8  0E58               	movlw	88
  9793  0024FA  6E0E               	movwf	?_writeEEPROM,c
  9794  0024FC  0E7F               	movlw	127
  9795  0024FE  6E10               	movwf	?_writeEEPROM+2,c
  9796  002500  EC65  F029         	call	_writeEEPROM	;wreg free
  9797                           
  9798                           ;main.c: 1058: writeEEPROM(0x59, 0x0D);
  9799  002504  6A0F               	clrf	?_writeEEPROM+1,c
  9800  002506  0E59               	movlw	89
  9801  002508  6E0E               	movwf	?_writeEEPROM,c
  9802  00250A  0E0D               	movlw	13
  9803  00250C  6E10               	movwf	?_writeEEPROM+2,c
  9804  00250E  EC65  F029         	call	_writeEEPROM	;wreg free
  9805                           
  9806                           ;main.c: 1059: writeEEPROM(0x5A, 0x7F);
  9807  002512  6A0F               	clrf	?_writeEEPROM+1,c
  9808  002514  0E5A               	movlw	90
  9809  002516  6E0E               	movwf	?_writeEEPROM,c
  9810  002518  0E7F               	movlw	127
  9811  00251A  6E10               	movwf	?_writeEEPROM+2,c
  9812  00251C  EC65  F029         	call	_writeEEPROM	;wreg free
  9813                           
  9814                           ;main.c: 1063: writeEEPROM(0x5B, 0x80);
  9815  002520  6A0F               	clrf	?_writeEEPROM+1,c
  9816  002522  0E5B               	movlw	91
  9817  002524  6E0E               	movwf	?_writeEEPROM,c
  9818  002526  0E80               	movlw	128
  9819  002528  6E10               	movwf	?_writeEEPROM+2,c
  9820  00252A  EC65  F029         	call	_writeEEPROM	;wreg free
  9821                           
  9822                           ;main.c: 1064: writeEEPROM(0x5C, 0xff);
  9823  00252E  6A0F               	clrf	?_writeEEPROM+1,c
  9824  002530  0E5C               	movlw	92
  9825  002532  6E0E               	movwf	?_writeEEPROM,c
  9826  002534  0EFF               	movlw	255
  9827  002536  6810               	setf	?_writeEEPROM+2,c
  9828  002538  EC65  F029         	call	_writeEEPROM	;wreg free
  9829                           
  9830                           ;main.c: 1066: writeEEPROM(0x5D, 0x80);
  9831  00253C  6A0F               	clrf	?_writeEEPROM+1,c
  9832  00253E  0E5D               	movlw	93
  9833  002540  6E0E               	movwf	?_writeEEPROM,c
  9834  002542  0E80               	movlw	128
  9835  002544  6E10               	movwf	?_writeEEPROM+2,c
  9836  002546  EC65  F029         	call	_writeEEPROM	;wreg free
  9837                           
  9838                           ;main.c: 1067: writeEEPROM(0x5E, 0xff);
  9839  00254A  6A0F               	clrf	?_writeEEPROM+1,c
  9840  00254C  0E5E               	movlw	94
  9841  00254E  6E0E               	movwf	?_writeEEPROM,c
  9842  002550  0EFF               	movlw	255
  9843  002552  6810               	setf	?_writeEEPROM+2,c
  9844  002554  EC65  F029         	call	_writeEEPROM	;wreg free
  9845                           
  9846                           ;main.c: 1069: writeEEPROM(0x5F, 0x80);
  9847  002558  6A0F               	clrf	?_writeEEPROM+1,c
  9848  00255A  0E5F               	movlw	95
  9849  00255C  6E0E               	movwf	?_writeEEPROM,c
  9850  00255E  0E80               	movlw	128
  9851  002560  6E10               	movwf	?_writeEEPROM+2,c
  9852  002562  EC65  F029         	call	_writeEEPROM	;wreg free
  9853                           
  9854                           ;main.c: 1070: writeEEPROM(0x60, 0xff);
  9855  002566  6A0F               	clrf	?_writeEEPROM+1,c
  9856  002568  0E60               	movlw	96
  9857  00256A  6E0E               	movwf	?_writeEEPROM,c
  9858  00256C  0EFF               	movlw	255
  9859  00256E  6810               	setf	?_writeEEPROM+2,c
  9860  002570  EC65  F029         	call	_writeEEPROM	;wreg free
  9861                           
  9862                           ;main.c: 1072: writeEEPROM(0x61, 0x80);
  9863  002574  6A0F               	clrf	?_writeEEPROM+1,c
  9864  002576  0E61               	movlw	97
  9865  002578  6E0E               	movwf	?_writeEEPROM,c
  9866  00257A  0E80               	movlw	128
  9867  00257C  6E10               	movwf	?_writeEEPROM+2,c
  9868  00257E  EC65  F029         	call	_writeEEPROM	;wreg free
  9869                           
  9870                           ;main.c: 1073: writeEEPROM(0x62, 0xff);
  9871  002582  6A0F               	clrf	?_writeEEPROM+1,c
  9872  002584  0E62               	movlw	98
  9873  002586  6E0E               	movwf	?_writeEEPROM,c
  9874  002588  0EFF               	movlw	255
  9875  00258A  6810               	setf	?_writeEEPROM+2,c
  9876  00258C  EC65  F029         	call	_writeEEPROM	;wreg free
  9877                           
  9878                           ;main.c: 1075: writeEEPROM(0x63, 0x80);
  9879  002590  6A0F               	clrf	?_writeEEPROM+1,c
  9880  002592  0E63               	movlw	99
  9881  002594  6E0E               	movwf	?_writeEEPROM,c
  9882  002596  0E80               	movlw	128
  9883  002598  6E10               	movwf	?_writeEEPROM+2,c
  9884  00259A  EC65  F029         	call	_writeEEPROM	;wreg free
  9885                           
  9886                           ;main.c: 1076: writeEEPROM(0x64, 0xff);
  9887  00259E  6A0F               	clrf	?_writeEEPROM+1,c
  9888  0025A0  0E64               	movlw	100
  9889  0025A2  6E0E               	movwf	?_writeEEPROM,c
  9890  0025A4  0EFF               	movlw	255
  9891  0025A6  6810               	setf	?_writeEEPROM+2,c
  9892  0025A8  EC65  F029         	call	_writeEEPROM	;wreg free
  9893                           
  9894                           ;main.c: 1078: writeEEPROM(0x65, 0x80);
  9895  0025AC  6A0F               	clrf	?_writeEEPROM+1,c
  9896  0025AE  0E65               	movlw	101
  9897  0025B0  6E0E               	movwf	?_writeEEPROM,c
  9898  0025B2  0E80               	movlw	128
  9899  0025B4  6E10               	movwf	?_writeEEPROM+2,c
  9900  0025B6  EC65  F029         	call	_writeEEPROM	;wreg free
  9901                           
  9902                           ;main.c: 1079: writeEEPROM(0x66, 0xff);
  9903  0025BA  6A0F               	clrf	?_writeEEPROM+1,c
  9904  0025BC  0E66               	movlw	102
  9905  0025BE  6E0E               	movwf	?_writeEEPROM,c
  9906  0025C0  0EFF               	movlw	255
  9907  0025C2  6810               	setf	?_writeEEPROM+2,c
  9908  0025C4  EC65  F029         	call	_writeEEPROM	;wreg free
  9909                           
  9910                           ;main.c: 1083: writeEEPROM(0x67, 0x7f);
  9911  0025C8  6A0F               	clrf	?_writeEEPROM+1,c
  9912  0025CA  0E67               	movlw	103
  9913  0025CC  6E0E               	movwf	?_writeEEPROM,c
  9914  0025CE  0E7F               	movlw	127
  9915  0025D0  6E10               	movwf	?_writeEEPROM+2,c
  9916  0025D2  EC65  F029         	call	_writeEEPROM	;wreg free
  9917                           
  9918                           ;main.c: 1084: writeEEPROM(0x68, 0xff);
  9919  0025D6  6A0F               	clrf	?_writeEEPROM+1,c
  9920  0025D8  0E68               	movlw	104
  9921  0025DA  6E0E               	movwf	?_writeEEPROM,c
  9922  0025DC  0EFF               	movlw	255
  9923  0025DE  6810               	setf	?_writeEEPROM+2,c
  9924  0025E0  EC65  F029         	call	_writeEEPROM	;wreg free
  9925                           
  9926                           ;main.c: 1086: writeEEPROM(0x69, 0x7f);
  9927  0025E4  6A0F               	clrf	?_writeEEPROM+1,c
  9928  0025E6  0E69               	movlw	105
  9929  0025E8  6E0E               	movwf	?_writeEEPROM,c
  9930  0025EA  0E7F               	movlw	127
  9931  0025EC  6E10               	movwf	?_writeEEPROM+2,c
  9932  0025EE  EC65  F029         	call	_writeEEPROM	;wreg free
  9933                           
  9934                           ;main.c: 1087: writeEEPROM(0x6A, 0xff);
  9935  0025F2  6A0F               	clrf	?_writeEEPROM+1,c
  9936  0025F4  0E6A               	movlw	106
  9937  0025F6  6E0E               	movwf	?_writeEEPROM,c
  9938  0025F8  0EFF               	movlw	255
  9939  0025FA  6810               	setf	?_writeEEPROM+2,c
  9940  0025FC  EC65  F029         	call	_writeEEPROM	;wreg free
  9941                           
  9942                           ;main.c: 1089: writeEEPROM(0x6B, 0x7f);
  9943  002600  6A0F               	clrf	?_writeEEPROM+1,c
  9944  002602  0E6B               	movlw	107
  9945  002604  6E0E               	movwf	?_writeEEPROM,c
  9946  002606  0E7F               	movlw	127
  9947  002608  6E10               	movwf	?_writeEEPROM+2,c
  9948  00260A  EC65  F029         	call	_writeEEPROM	;wreg free
  9949                           
  9950                           ;main.c: 1090: writeEEPROM(0x6C, 0xff);
  9951  00260E  6A0F               	clrf	?_writeEEPROM+1,c
  9952  002610  0E6C               	movlw	108
  9953  002612  6E0E               	movwf	?_writeEEPROM,c
  9954  002614  0EFF               	movlw	255
  9955  002616  6810               	setf	?_writeEEPROM+2,c
  9956  002618  EC65  F029         	call	_writeEEPROM	;wreg free
  9957                           
  9958                           ;main.c: 1092: writeEEPROM(0x6D, 0x7f);
  9959  00261C  6A0F               	clrf	?_writeEEPROM+1,c
  9960  00261E  0E6D               	movlw	109
  9961  002620  6E0E               	movwf	?_writeEEPROM,c
  9962  002622  0E7F               	movlw	127
  9963  002624  6E10               	movwf	?_writeEEPROM+2,c
  9964  002626  EC65  F029         	call	_writeEEPROM	;wreg free
  9965                           
  9966                           ;main.c: 1093: writeEEPROM(0x6E, 0xff);
  9967  00262A  6A0F               	clrf	?_writeEEPROM+1,c
  9968  00262C  0E6E               	movlw	110
  9969  00262E  6E0E               	movwf	?_writeEEPROM,c
  9970  002630  0EFF               	movlw	255
  9971  002632  6810               	setf	?_writeEEPROM+2,c
  9972  002634  EC65  F029         	call	_writeEEPROM	;wreg free
  9973                           
  9974                           ;main.c: 1095: writeEEPROM(0x6F, 0x7f);
  9975  002638  6A0F               	clrf	?_writeEEPROM+1,c
  9976  00263A  0E6F               	movlw	111
  9977  00263C  6E0E               	movwf	?_writeEEPROM,c
  9978  00263E  0E7F               	movlw	127
  9979  002640  6E10               	movwf	?_writeEEPROM+2,c
  9980  002642  EC65  F029         	call	_writeEEPROM	;wreg free
  9981                           
  9982                           ;main.c: 1096: writeEEPROM(0x70, 0xff);
  9983  002646  6A0F               	clrf	?_writeEEPROM+1,c
  9984  002648  0E70               	movlw	112
  9985  00264A  6E0E               	movwf	?_writeEEPROM,c
  9986  00264C  0EFF               	movlw	255
  9987  00264E  6810               	setf	?_writeEEPROM+2,c
  9988  002650  EC65  F029         	call	_writeEEPROM	;wreg free
  9989                           
  9990                           ;main.c: 1098: writeEEPROM(0x71, 0x7f);
  9991  002654  6A0F               	clrf	?_writeEEPROM+1,c
  9992  002656  0E71               	movlw	113
  9993  002658  6E0E               	movwf	?_writeEEPROM,c
  9994  00265A  0E7F               	movlw	127
  9995  00265C  6E10               	movwf	?_writeEEPROM+2,c
  9996  00265E  EC65  F029         	call	_writeEEPROM	;wreg free
  9997                           
  9998                           ;main.c: 1099: writeEEPROM(0x72, 0xff);
  9999  002662  6A0F               	clrf	?_writeEEPROM+1,c
 10000  002664  0E72               	movlw	114
 10001  002666  6E0E               	movwf	?_writeEEPROM,c
 10002  002668  0EFF               	movlw	255
 10003  00266A  6810               	setf	?_writeEEPROM+2,c
 10004  00266C  EC65  F029         	call	_writeEEPROM	;wreg free
 10005                           
 10006                           ;main.c: 1103: writeEEPROM(0x73, 0);
 10007  002670  6A0F               	clrf	?_writeEEPROM+1,c
 10008  002672  0E73               	movlw	115
 10009  002674  6E0E               	movwf	?_writeEEPROM,c
 10010  002676  0E00               	movlw	0
 10011  002678  6A10               	clrf	?_writeEEPROM+2,c
 10012  00267A  EC65  F029         	call	_writeEEPROM	;wreg free
 10013                           
 10014                           ;main.c: 1104: writeEEPROM(0x74, 0);
 10015  00267E  6A0F               	clrf	?_writeEEPROM+1,c
 10016  002680  0E74               	movlw	116
 10017  002682  6E0E               	movwf	?_writeEEPROM,c
 10018  002684  0E00               	movlw	0
 10019  002686  6A10               	clrf	?_writeEEPROM+2,c
 10020  002688  EC65  F029         	call	_writeEEPROM	;wreg free
 10021                           
 10022                           ;main.c: 1106: writeEEPROM(0x75, 0);
 10023  00268C  6A0F               	clrf	?_writeEEPROM+1,c
 10024  00268E  0E75               	movlw	117
 10025  002690  6E0E               	movwf	?_writeEEPROM,c
 10026  002692  0E00               	movlw	0
 10027  002694  6A10               	clrf	?_writeEEPROM+2,c
 10028  002696  EC65  F029         	call	_writeEEPROM	;wreg free
 10029                           
 10030                           ;main.c: 1107: writeEEPROM(0x76, 0);
 10031  00269A  6A0F               	clrf	?_writeEEPROM+1,c
 10032  00269C  0E76               	movlw	118
 10033  00269E  6E0E               	movwf	?_writeEEPROM,c
 10034  0026A0  0E00               	movlw	0
 10035  0026A2  6A10               	clrf	?_writeEEPROM+2,c
 10036  0026A4  EC65  F029         	call	_writeEEPROM	;wreg free
 10037                           
 10038                           ;main.c: 1109: writeEEPROM(0x77, 0);
 10039  0026A8  6A0F               	clrf	?_writeEEPROM+1,c
 10040  0026AA  0E77               	movlw	119
 10041  0026AC  6E0E               	movwf	?_writeEEPROM,c
 10042  0026AE  0E00               	movlw	0
 10043  0026B0  6A10               	clrf	?_writeEEPROM+2,c
 10044  0026B2  EC65  F029         	call	_writeEEPROM	;wreg free
 10045                           
 10046                           ;main.c: 1110: writeEEPROM(0x78, 0);
 10047  0026B6  6A0F               	clrf	?_writeEEPROM+1,c
 10048  0026B8  0E78               	movlw	120
 10049  0026BA  6E0E               	movwf	?_writeEEPROM,c
 10050  0026BC  0E00               	movlw	0
 10051  0026BE  6A10               	clrf	?_writeEEPROM+2,c
 10052  0026C0  EC65  F029         	call	_writeEEPROM	;wreg free
 10053                           
 10054                           ;main.c: 1112: writeEEPROM(0x79, 0);
 10055  0026C4  6A0F               	clrf	?_writeEEPROM+1,c
 10056  0026C6  0E79               	movlw	121
 10057  0026C8  6E0E               	movwf	?_writeEEPROM,c
 10058  0026CA  0E00               	movlw	0
 10059  0026CC  6A10               	clrf	?_writeEEPROM+2,c
 10060  0026CE  EC65  F029         	call	_writeEEPROM	;wreg free
 10061                           
 10062                           ;main.c: 1113: writeEEPROM(0x7A, 0);
 10063  0026D2  6A0F               	clrf	?_writeEEPROM+1,c
 10064  0026D4  0E7A               	movlw	122
 10065  0026D6  6E0E               	movwf	?_writeEEPROM,c
 10066  0026D8  0E00               	movlw	0
 10067  0026DA  6A10               	clrf	?_writeEEPROM+2,c
 10068  0026DC  EC65  F029         	call	_writeEEPROM	;wreg free
 10069                           
 10070                           ;main.c: 1115: writeEEPROM(0x7B, 0);
 10071  0026E0  6A0F               	clrf	?_writeEEPROM+1,c
 10072  0026E2  0E7B               	movlw	123
 10073  0026E4  6E0E               	movwf	?_writeEEPROM,c
 10074  0026E6  0E00               	movlw	0
 10075  0026E8  6A10               	clrf	?_writeEEPROM+2,c
 10076  0026EA  EC65  F029         	call	_writeEEPROM	;wreg free
 10077                           
 10078                           ;main.c: 1116: writeEEPROM(0x7C, 0);
 10079  0026EE  6A0F               	clrf	?_writeEEPROM+1,c
 10080  0026F0  0E7C               	movlw	124
 10081  0026F2  6E0E               	movwf	?_writeEEPROM,c
 10082  0026F4  0E00               	movlw	0
 10083  0026F6  6A10               	clrf	?_writeEEPROM+2,c
 10084  0026F8  EC65  F029         	call	_writeEEPROM	;wreg free
 10085                           
 10086                           ;main.c: 1118: writeEEPROM(0x7D, 0);
 10087  0026FC  6A0F               	clrf	?_writeEEPROM+1,c
 10088  0026FE  0E7D               	movlw	125
 10089  002700  6E0E               	movwf	?_writeEEPROM,c
 10090  002702  0E00               	movlw	0
 10091  002704  6A10               	clrf	?_writeEEPROM+2,c
 10092  002706  EC65  F029         	call	_writeEEPROM	;wreg free
 10093                           
 10094                           ;main.c: 1119: writeEEPROM(0x7E, 0);
 10095  00270A  6A0F               	clrf	?_writeEEPROM+1,c
 10096  00270C  0E7E               	movlw	126
 10097  00270E  6E0E               	movwf	?_writeEEPROM,c
 10098  002710  0E00               	movlw	0
 10099  002712  6A10               	clrf	?_writeEEPROM+2,c
 10100  002714  EC65  F029         	call	_writeEEPROM	;wreg free
 10101                           
 10102                           ;main.c: 1123: writeEEPROM(0x7F, 0x7f);
 10103  002718  6A0F               	clrf	?_writeEEPROM+1,c
 10104  00271A  0E7F               	movlw	127
 10105  00271C  6E0E               	movwf	?_writeEEPROM,c
 10106  00271E  6E10               	movwf	?_writeEEPROM+2,c
 10107  002720  EC65  F029         	call	_writeEEPROM	;wreg free
 10108                           
 10109                           ;main.c: 1124: writeEEPROM(0x80, 0xff);
 10110  002724  6A0F               	clrf	?_writeEEPROM+1,c
 10111  002726  0E80               	movlw	128
 10112  002728  6E0E               	movwf	?_writeEEPROM,c
 10113  00272A  0EFF               	movlw	255
 10114  00272C  6810               	setf	?_writeEEPROM+2,c
 10115  00272E  EC65  F029         	call	_writeEEPROM	;wreg free
 10116                           
 10117                           ;main.c: 1126: writeEEPROM(0x81, 0x7f);
 10118  002732  6A0F               	clrf	?_writeEEPROM+1,c
 10119  002734  0E81               	movlw	129
 10120  002736  6E0E               	movwf	?_writeEEPROM,c
 10121  002738  0E7F               	movlw	127
 10122  00273A  6E10               	movwf	?_writeEEPROM+2,c
 10123  00273C  EC65  F029         	call	_writeEEPROM	;wreg free
 10124                           
 10125                           ;main.c: 1127: writeEEPROM(0x82, 0xff);
 10126  002740  6A0F               	clrf	?_writeEEPROM+1,c
 10127  002742  0E82               	movlw	130
 10128  002744  6E0E               	movwf	?_writeEEPROM,c
 10129  002746  0EFF               	movlw	255
 10130  002748  6810               	setf	?_writeEEPROM+2,c
 10131  00274A  EC65  F029         	call	_writeEEPROM	;wreg free
 10132                           
 10133                           ;main.c: 1129: writeEEPROM(0x83, 0x7f);
 10134  00274E  6A0F               	clrf	?_writeEEPROM+1,c
 10135  002750  0E83               	movlw	131
 10136  002752  6E0E               	movwf	?_writeEEPROM,c
 10137  002754  0E7F               	movlw	127
 10138  002756  6E10               	movwf	?_writeEEPROM+2,c
 10139  002758  EC65  F029         	call	_writeEEPROM	;wreg free
 10140                           
 10141                           ;main.c: 1130: writeEEPROM(0x84, 0xff);
 10142  00275C  6A0F               	clrf	?_writeEEPROM+1,c
 10143  00275E  0E84               	movlw	132
 10144  002760  6E0E               	movwf	?_writeEEPROM,c
 10145  002762  0EFF               	movlw	255
 10146  002764  6810               	setf	?_writeEEPROM+2,c
 10147  002766  EC65  F029         	call	_writeEEPROM	;wreg free
 10148                           
 10149                           ;main.c: 1132: writeEEPROM(0x85, 0x7f);
 10150  00276A  6A0F               	clrf	?_writeEEPROM+1,c
 10151  00276C  0E85               	movlw	133
 10152  00276E  6E0E               	movwf	?_writeEEPROM,c
 10153  002770  0E7F               	movlw	127
 10154  002772  6E10               	movwf	?_writeEEPROM+2,c
 10155  002774  EC65  F029         	call	_writeEEPROM	;wreg free
 10156                           
 10157                           ;main.c: 1133: writeEEPROM(0x86, 0xff);
 10158  002778  6A0F               	clrf	?_writeEEPROM+1,c
 10159  00277A  0E86               	movlw	134
 10160  00277C  6E0E               	movwf	?_writeEEPROM,c
 10161  00277E  0EFF               	movlw	255
 10162  002780  6810               	setf	?_writeEEPROM+2,c
 10163  002782  EC65  F029         	call	_writeEEPROM	;wreg free
 10164                           
 10165                           ;main.c: 1135: writeEEPROM(0x87, 0x7f);
 10166  002786  6A0F               	clrf	?_writeEEPROM+1,c
 10167  002788  0E87               	movlw	135
 10168  00278A  6E0E               	movwf	?_writeEEPROM,c
 10169  00278C  0E7F               	movlw	127
 10170  00278E  6E10               	movwf	?_writeEEPROM+2,c
 10171  002790  EC65  F029         	call	_writeEEPROM	;wreg free
 10172                           
 10173                           ;main.c: 1136: writeEEPROM(0x88, 0xff);
 10174  002794  6A0F               	clrf	?_writeEEPROM+1,c
 10175  002796  0E88               	movlw	136
 10176  002798  6E0E               	movwf	?_writeEEPROM,c
 10177  00279A  0EFF               	movlw	255
 10178  00279C  6810               	setf	?_writeEEPROM+2,c
 10179  00279E  EC65  F029         	call	_writeEEPROM	;wreg free
 10180                           
 10181                           ;main.c: 1138: writeEEPROM(0x89, 0x7f);
 10182  0027A2  6A0F               	clrf	?_writeEEPROM+1,c
 10183  0027A4  0E89               	movlw	137
 10184  0027A6  6E0E               	movwf	?_writeEEPROM,c
 10185  0027A8  0E7F               	movlw	127
 10186  0027AA  6E10               	movwf	?_writeEEPROM+2,c
 10187  0027AC  EC65  F029         	call	_writeEEPROM	;wreg free
 10188                           
 10189                           ;main.c: 1139: writeEEPROM(0x8A, 0xff);
 10190  0027B0  6A0F               	clrf	?_writeEEPROM+1,c
 10191  0027B2  0E8A               	movlw	138
 10192  0027B4  6E0E               	movwf	?_writeEEPROM,c
 10193  0027B6  0EFF               	movlw	255
 10194  0027B8  6810               	setf	?_writeEEPROM+2,c
 10195  0027BA  EC65  F029         	call	_writeEEPROM	;wreg free
 10196                           
 10197                           ;main.c: 1143: writeEEPROM(0x8B, 0x80);
 10198  0027BE  6A0F               	clrf	?_writeEEPROM+1,c
 10199  0027C0  0E8B               	movlw	139
 10200  0027C2  6E0E               	movwf	?_writeEEPROM,c
 10201  0027C4  0E80               	movlw	128
 10202  0027C6  6E10               	movwf	?_writeEEPROM+2,c
 10203  0027C8  EC65  F029         	call	_writeEEPROM	;wreg free
 10204                           
 10205                           ;main.c: 1144: writeEEPROM(0x8C, 0x00);
 10206  0027CC  6A0F               	clrf	?_writeEEPROM+1,c
 10207  0027CE  0E8C               	movlw	140
 10208  0027D0  6E0E               	movwf	?_writeEEPROM,c
 10209  0027D2  0E00               	movlw	0
 10210  0027D4  6A10               	clrf	?_writeEEPROM+2,c
 10211  0027D6  EC65  F029         	call	_writeEEPROM	;wreg free
 10212                           
 10213                           ;main.c: 1146: writeEEPROM(0x8D, 0x80);
 10214  0027DA  6A0F               	clrf	?_writeEEPROM+1,c
 10215  0027DC  0E8D               	movlw	141
 10216  0027DE  6E0E               	movwf	?_writeEEPROM,c
 10217  0027E0  0E80               	movlw	128
 10218  0027E2  6E10               	movwf	?_writeEEPROM+2,c
 10219  0027E4  EC65  F029         	call	_writeEEPROM	;wreg free
 10220                           
 10221                           ;main.c: 1147: writeEEPROM(0x8E, 0x00);
 10222  0027E8  6A0F               	clrf	?_writeEEPROM+1,c
 10223  0027EA  0E8E               	movlw	142
 10224  0027EC  6E0E               	movwf	?_writeEEPROM,c
 10225  0027EE  0E00               	movlw	0
 10226  0027F0  6A10               	clrf	?_writeEEPROM+2,c
 10227  0027F2  EC65  F029         	call	_writeEEPROM	;wreg free
 10228                           
 10229                           ;main.c: 1149: writeEEPROM(0x8F, 0x80);
 10230  0027F6  6A0F               	clrf	?_writeEEPROM+1,c
 10231  0027F8  0E8F               	movlw	143
 10232  0027FA  6E0E               	movwf	?_writeEEPROM,c
 10233  0027FC  0E80               	movlw	128
 10234  0027FE  6E10               	movwf	?_writeEEPROM+2,c
 10235  002800  EC65  F029         	call	_writeEEPROM	;wreg free
 10236                           
 10237                           ;main.c: 1150: writeEEPROM(0x90, 0x00);
 10238  002804  6A0F               	clrf	?_writeEEPROM+1,c
 10239  002806  0E90               	movlw	144
 10240  002808  6E0E               	movwf	?_writeEEPROM,c
 10241  00280A  0E00               	movlw	0
 10242  00280C  6A10               	clrf	?_writeEEPROM+2,c
 10243  00280E  EC65  F029         	call	_writeEEPROM	;wreg free
 10244                           
 10245                           ;main.c: 1152: writeEEPROM(0x91, 0x80);
 10246  002812  6A0F               	clrf	?_writeEEPROM+1,c
 10247  002814  0E91               	movlw	145
 10248  002816  6E0E               	movwf	?_writeEEPROM,c
 10249  002818  0E80               	movlw	128
 10250  00281A  6E10               	movwf	?_writeEEPROM+2,c
 10251  00281C  EC65  F029         	call	_writeEEPROM	;wreg free
 10252                           
 10253                           ;main.c: 1153: writeEEPROM(0x92, 0x00);
 10254  002820  6A0F               	clrf	?_writeEEPROM+1,c
 10255  002822  0E92               	movlw	146
 10256  002824  6E0E               	movwf	?_writeEEPROM,c
 10257  002826  0E00               	movlw	0
 10258  002828  6A10               	clrf	?_writeEEPROM+2,c
 10259  00282A  EC65  F029         	call	_writeEEPROM	;wreg free
 10260                           
 10261                           ;main.c: 1155: writeEEPROM(0x93, 0x80);
 10262  00282E  6A0F               	clrf	?_writeEEPROM+1,c
 10263  002830  0E93               	movlw	147
 10264  002832  6E0E               	movwf	?_writeEEPROM,c
 10265  002834  0E80               	movlw	128
 10266  002836  6E10               	movwf	?_writeEEPROM+2,c
 10267  002838  EC65  F029         	call	_writeEEPROM	;wreg free
 10268                           
 10269                           ;main.c: 1156: writeEEPROM(0x94, 0x00);
 10270  00283C  6A0F               	clrf	?_writeEEPROM+1,c
 10271  00283E  0E94               	movlw	148
 10272  002840  6E0E               	movwf	?_writeEEPROM,c
 10273  002842  0E00               	movlw	0
 10274  002844  6A10               	clrf	?_writeEEPROM+2,c
 10275  002846  EC65  F029         	call	_writeEEPROM	;wreg free
 10276                           
 10277                           ;main.c: 1158: writeEEPROM(0x95, 0x80);
 10278  00284A  6A0F               	clrf	?_writeEEPROM+1,c
 10279  00284C  0E95               	movlw	149
 10280  00284E  6E0E               	movwf	?_writeEEPROM,c
 10281  002850  0E80               	movlw	128
 10282  002852  6E10               	movwf	?_writeEEPROM+2,c
 10283  002854  EC65  F029         	call	_writeEEPROM	;wreg free
 10284                           
 10285                           ;main.c: 1159: writeEEPROM(0x96, 0x00);
 10286  002858  6A0F               	clrf	?_writeEEPROM+1,c
 10287  00285A  0E96               	movlw	150
 10288  00285C  6E0E               	movwf	?_writeEEPROM,c
 10289  00285E  0E00               	movlw	0
 10290  002860  6A10               	clrf	?_writeEEPROM+2,c
 10291  002862  EC65  F029         	call	_writeEEPROM	;wreg free
 10292                           
 10293                           ;main.c: 1163: writeEEPROM(0x97, 2);
 10294  002866  6A0F               	clrf	?_writeEEPROM+1,c
 10295  002868  0E97               	movlw	151
 10296  00286A  6E0E               	movwf	?_writeEEPROM,c
 10297  00286C  0E02               	movlw	2
 10298  00286E  6E10               	movwf	?_writeEEPROM+2,c
 10299  002870  EC65  F029         	call	_writeEEPROM	;wreg free
 10300                           
 10301                           ;main.c: 1164: writeEEPROM(0x98, 2);
 10302  002874  6A0F               	clrf	?_writeEEPROM+1,c
 10303  002876  0E98               	movlw	152
 10304  002878  6E0E               	movwf	?_writeEEPROM,c
 10305  00287A  0E02               	movlw	2
 10306  00287C  6E10               	movwf	?_writeEEPROM+2,c
 10307  00287E  EC65  F029         	call	_writeEEPROM	;wreg free
 10308                           
 10309                           ;main.c: 1165: writeEEPROM(0x99, 2);
 10310  002882  6A0F               	clrf	?_writeEEPROM+1,c
 10311  002884  0E99               	movlw	153
 10312  002886  6E0E               	movwf	?_writeEEPROM,c
 10313  002888  0E02               	movlw	2
 10314  00288A  6E10               	movwf	?_writeEEPROM+2,c
 10315  00288C  EC65  F029         	call	_writeEEPROM	;wreg free
 10316                           
 10317                           ;main.c: 1166: writeEEPROM(0x9A, 2);
 10318  002890  6A0F               	clrf	?_writeEEPROM+1,c
 10319  002892  0E9A               	movlw	154
 10320  002894  6E0E               	movwf	?_writeEEPROM,c
 10321  002896  0E02               	movlw	2
 10322  002898  6E10               	movwf	?_writeEEPROM+2,c
 10323  00289A  EC65  F029         	call	_writeEEPROM	;wreg free
 10324                           
 10325                           ;main.c: 1167: writeEEPROM(0x9B, 2);
 10326  00289E  6A0F               	clrf	?_writeEEPROM+1,c
 10327  0028A0  0E9B               	movlw	155
 10328  0028A2  6E0E               	movwf	?_writeEEPROM,c
 10329  0028A4  0E02               	movlw	2
 10330  0028A6  6E10               	movwf	?_writeEEPROM+2,c
 10331  0028A8  EC65  F029         	call	_writeEEPROM	;wreg free
 10332                           
 10333                           ;main.c: 1168: writeEEPROM(0x9C, 2);
 10334  0028AC  6A0F               	clrf	?_writeEEPROM+1,c
 10335  0028AE  0E9C               	movlw	156
 10336  0028B0  6E0E               	movwf	?_writeEEPROM,c
 10337  0028B2  0E02               	movlw	2
 10338  0028B4  6E10               	movwf	?_writeEEPROM+2,c
 10339  0028B6  EC65  F029         	call	_writeEEPROM	;wreg free
 10340                           
 10341                           ;main.c: 1172: writeEEPROM(0xF2, 0xc3);
 10342  0028BA  6A0F               	clrf	?_writeEEPROM+1,c
 10343  0028BC  0EF2               	movlw	242
 10344  0028BE  6E0E               	movwf	?_writeEEPROM,c
 10345  0028C0  0EC3               	movlw	195
 10346  0028C2  6E10               	movwf	?_writeEEPROM+2,c
 10347  0028C4  EC65  F029         	call	_writeEEPROM	;wreg free
 10348                           
 10349                           ;main.c: 1173: writeEEPROM(0xF3, 0x50);
 10350  0028C8  6A0F               	clrf	?_writeEEPROM+1,c
 10351  0028CA  0EF3               	movlw	243
 10352  0028CC  6E0E               	movwf	?_writeEEPROM,c
 10353  0028CE  0E50               	movlw	80
 10354  0028D0  6E10               	movwf	?_writeEEPROM+2,c
 10355  0028D2  EC65  F029         	call	_writeEEPROM	;wreg free
 10356                           
 10357                           ;main.c: 1177: writeEEPROM(0x9E, 0);
 10358  0028D6  6A0F               	clrf	?_writeEEPROM+1,c
 10359  0028D8  0E9E               	movlw	158
 10360  0028DA  6E0E               	movwf	?_writeEEPROM,c
 10361  0028DC  0E00               	movlw	0
 10362  0028DE  6A10               	clrf	?_writeEEPROM+2,c
 10363  0028E0  EC65  F029         	call	_writeEEPROM	;wreg free
 10364                           
 10365                           ;main.c: 1178: writeEEPROM(0x9F, 0);
 10366  0028E4  6A0F               	clrf	?_writeEEPROM+1,c
 10367  0028E6  0E9F               	movlw	159
 10368  0028E8  6E0E               	movwf	?_writeEEPROM,c
 10369  0028EA  0E00               	movlw	0
 10370  0028EC  6A10               	clrf	?_writeEEPROM+2,c
 10371  0028EE  EC65  F029         	call	_writeEEPROM	;wreg free
 10372                           
 10373                           ;main.c: 1179: writeEEPROM(0xA0, 0);
 10374  0028F2  6A0F               	clrf	?_writeEEPROM+1,c
 10375  0028F4  0EA0               	movlw	160
 10376  0028F6  6E0E               	movwf	?_writeEEPROM,c
 10377  0028F8  0E00               	movlw	0
 10378  0028FA  6A10               	clrf	?_writeEEPROM+2,c
 10379  0028FC  EC65  F029         	call	_writeEEPROM	;wreg free
 10380                           
 10381                           ;main.c: 1180: writeEEPROM(0xA1, 0);
 10382  002900  6A0F               	clrf	?_writeEEPROM+1,c
 10383  002902  0EA1               	movlw	161
 10384  002904  6E0E               	movwf	?_writeEEPROM,c
 10385  002906  0E00               	movlw	0
 10386  002908  6A10               	clrf	?_writeEEPROM+2,c
 10387  00290A  EC65  F029         	call	_writeEEPROM	;wreg free
 10388                           
 10389                           ;main.c: 1181: writeEEPROM(0xA2, 0);
 10390  00290E  6A0F               	clrf	?_writeEEPROM+1,c
 10391  002910  0EA2               	movlw	162
 10392  002912  6E0E               	movwf	?_writeEEPROM,c
 10393  002914  0E00               	movlw	0
 10394  002916  6A10               	clrf	?_writeEEPROM+2,c
 10395  002918  EC65  F029         	call	_writeEEPROM	;wreg free
 10396                           
 10397                           ;main.c: 1182: writeEEPROM(0xA3, 0);
 10398  00291C  6A0F               	clrf	?_writeEEPROM+1,c
 10399  00291E  0EA3               	movlw	163
 10400  002920  6E0E               	movwf	?_writeEEPROM,c
 10401  002922  0E00               	movlw	0
 10402  002924  6A10               	clrf	?_writeEEPROM+2,c
 10403  002926  EC65  F029         	call	_writeEEPROM	;wreg free
 10404                           
 10405                           ;main.c: 1183: writeEEPROM(0xA4, 0);
 10406  00292A  6A0F               	clrf	?_writeEEPROM+1,c
 10407  00292C  0EA4               	movlw	164
 10408  00292E  6E0E               	movwf	?_writeEEPROM,c
 10409  002930  0E00               	movlw	0
 10410  002932  6A10               	clrf	?_writeEEPROM+2,c
 10411  002934  EC65  F029         	call	_writeEEPROM	;wreg free
 10412                           
 10413                           ;main.c: 1184: writeEEPROM(0xA5, 0);
 10414  002938  6A0F               	clrf	?_writeEEPROM+1,c
 10415  00293A  0EA5               	movlw	165
 10416  00293C  6E0E               	movwf	?_writeEEPROM,c
 10417  00293E  0E00               	movlw	0
 10418  002940  6A10               	clrf	?_writeEEPROM+2,c
 10419  002942  EC65  F029         	call	_writeEEPROM	;wreg free
 10420                           
 10421                           ;main.c: 1185: writeEEPROM(0xA6, 0);
 10422  002946  6A0F               	clrf	?_writeEEPROM+1,c
 10423  002948  0EA6               	movlw	166
 10424  00294A  6E0E               	movwf	?_writeEEPROM,c
 10425  00294C  0E00               	movlw	0
 10426  00294E  6A10               	clrf	?_writeEEPROM+2,c
 10427  002950  EC65  F029         	call	_writeEEPROM	;wreg free
 10428                           
 10429                           ;main.c: 1186: writeEEPROM(0xA7, 0);
 10430  002954  6A0F               	clrf	?_writeEEPROM+1,c
 10431  002956  0EA7               	movlw	167
 10432  002958  6E0E               	movwf	?_writeEEPROM,c
 10433  00295A  0E00               	movlw	0
 10434  00295C  6A10               	clrf	?_writeEEPROM+2,c
 10435  00295E  EC65  F029         	call	_writeEEPROM	;wreg free
 10436                           
 10437                           ;main.c: 1187: writeEEPROM(0xA8, 0);
 10438  002962  6A0F               	clrf	?_writeEEPROM+1,c
 10439  002964  0EA8               	movlw	168
 10440  002966  6E0E               	movwf	?_writeEEPROM,c
 10441  002968  0E00               	movlw	0
 10442  00296A  6A10               	clrf	?_writeEEPROM+2,c
 10443  00296C  EC65  F029         	call	_writeEEPROM	;wreg free
 10444                           
 10445                           ;main.c: 1188: writeEEPROM(0xA9, 0);
 10446  002970  6A0F               	clrf	?_writeEEPROM+1,c
 10447  002972  0EA9               	movlw	169
 10448  002974  6E0E               	movwf	?_writeEEPROM,c
 10449  002976  0E00               	movlw	0
 10450  002978  6A10               	clrf	?_writeEEPROM+2,c
 10451  00297A  EC65  F029         	call	_writeEEPROM	;wreg free
 10452                           
 10453                           ;main.c: 1192: writeEEPROM(0xAA, 0);
 10454  00297E  6A0F               	clrf	?_writeEEPROM+1,c
 10455  002980  0EAA               	movlw	170
 10456  002982  6E0E               	movwf	?_writeEEPROM,c
 10457  002984  0E00               	movlw	0
 10458  002986  6A10               	clrf	?_writeEEPROM+2,c
 10459  002988  EC65  F029         	call	_writeEEPROM	;wreg free
 10460                           
 10461                           ;main.c: 1193: writeEEPROM(0xAB, 0);
 10462  00298C  6A0F               	clrf	?_writeEEPROM+1,c
 10463  00298E  0EAB               	movlw	171
 10464  002990  6E0E               	movwf	?_writeEEPROM,c
 10465  002992  0E00               	movlw	0
 10466  002994  6A10               	clrf	?_writeEEPROM+2,c
 10467  002996  EC65  F029         	call	_writeEEPROM	;wreg free
 10468                           
 10469                           ;main.c: 1194: writeEEPROM(0xAC, 0);
 10470  00299A  6A0F               	clrf	?_writeEEPROM+1,c
 10471  00299C  0EAC               	movlw	172
 10472  00299E  6E0E               	movwf	?_writeEEPROM,c
 10473  0029A0  0E00               	movlw	0
 10474  0029A2  6A10               	clrf	?_writeEEPROM+2,c
 10475  0029A4  EC65  F029         	call	_writeEEPROM	;wreg free
 10476                           
 10477                           ;main.c: 1195: writeEEPROM(0xAD, 0);
 10478  0029A8  6A0F               	clrf	?_writeEEPROM+1,c
 10479  0029AA  0EAD               	movlw	173
 10480  0029AC  6E0E               	movwf	?_writeEEPROM,c
 10481  0029AE  0E00               	movlw	0
 10482  0029B0  6A10               	clrf	?_writeEEPROM+2,c
 10483  0029B2  EC65  F029         	call	_writeEEPROM	;wreg free
 10484                           
 10485                           ;main.c: 1196: writeEEPROM(0xAE, 0);
 10486  0029B6  6A0F               	clrf	?_writeEEPROM+1,c
 10487  0029B8  0EAE               	movlw	174
 10488  0029BA  6E0E               	movwf	?_writeEEPROM,c
 10489  0029BC  0E00               	movlw	0
 10490  0029BE  6A10               	clrf	?_writeEEPROM+2,c
 10491  0029C0  EC65  F029         	call	_writeEEPROM	;wreg free
 10492                           
 10493                           ;main.c: 1197: writeEEPROM(0xAF, 0);
 10494  0029C4  6A0F               	clrf	?_writeEEPROM+1,c
 10495  0029C6  0EAF               	movlw	175
 10496  0029C8  6E0E               	movwf	?_writeEEPROM,c
 10497  0029CA  0E00               	movlw	0
 10498  0029CC  6A10               	clrf	?_writeEEPROM+2,c
 10499  0029CE  EC65  F029         	call	_writeEEPROM	;wreg free
 10500                           
 10501                           ;main.c: 1198: writeEEPROM(0xB0, 0);
 10502  0029D2  6A0F               	clrf	?_writeEEPROM+1,c
 10503  0029D4  0EB0               	movlw	176
 10504  0029D6  6E0E               	movwf	?_writeEEPROM,c
 10505  0029D8  0E00               	movlw	0
 10506  0029DA  6A10               	clrf	?_writeEEPROM+2,c
 10507  0029DC  EC65  F029         	call	_writeEEPROM	;wreg free
 10508                           
 10509                           ;main.c: 1199: writeEEPROM(0xB1, 0);
 10510  0029E0  6A0F               	clrf	?_writeEEPROM+1,c
 10511  0029E2  0EB1               	movlw	177
 10512  0029E4  6E0E               	movwf	?_writeEEPROM,c
 10513  0029E6  0E00               	movlw	0
 10514  0029E8  6A10               	clrf	?_writeEEPROM+2,c
 10515  0029EA  EC65  F029         	call	_writeEEPROM	;wreg free
 10516                           
 10517                           ;main.c: 1200: writeEEPROM(0xB2, 0);
 10518  0029EE  6A0F               	clrf	?_writeEEPROM+1,c
 10519  0029F0  0EB2               	movlw	178
 10520  0029F2  6E0E               	movwf	?_writeEEPROM,c
 10521  0029F4  0E00               	movlw	0
 10522  0029F6  6A10               	clrf	?_writeEEPROM+2,c
 10523  0029F8  EC65  F029         	call	_writeEEPROM	;wreg free
 10524                           
 10525                           ;main.c: 1201: writeEEPROM(0xB3, 0);
 10526  0029FC  6A0F               	clrf	?_writeEEPROM+1,c
 10527  0029FE  0EB3               	movlw	179
 10528  002A00  6E0E               	movwf	?_writeEEPROM,c
 10529  002A02  0E00               	movlw	0
 10530  002A04  6A10               	clrf	?_writeEEPROM+2,c
 10531  002A06  EC65  F029         	call	_writeEEPROM	;wreg free
 10532                           
 10533                           ;main.c: 1202: writeEEPROM(0xB4, 0);
 10534  002A0A  6A0F               	clrf	?_writeEEPROM+1,c
 10535  002A0C  0EB4               	movlw	180
 10536  002A0E  6E0E               	movwf	?_writeEEPROM,c
 10537  002A10  0E00               	movlw	0
 10538  002A12  6A10               	clrf	?_writeEEPROM+2,c
 10539  002A14  EC65  F029         	call	_writeEEPROM	;wreg free
 10540                           
 10541                           ;main.c: 1203: writeEEPROM(0xB5, 0);
 10542  002A18  6A0F               	clrf	?_writeEEPROM+1,c
 10543  002A1A  0EB5               	movlw	181
 10544  002A1C  6E0E               	movwf	?_writeEEPROM,c
 10545  002A1E  0E00               	movlw	0
 10546  002A20  6A10               	clrf	?_writeEEPROM+2,c
 10547  002A22  EC65  F029         	call	_writeEEPROM	;wreg free
 10548                           
 10549                           ;main.c: 1207: for (uint8_t i = 0; i < 6; i++) {
 10550  002A26  6A11               	clrf	init_app_eeprom@i,c
 10551  002A28                     l9598:
 10552                           
 10553                           ;main.c: 1208: writeEEPROM(0xB6 + i * 12, 0);
 10554  002A28  5011               	movf	init_app_eeprom@i,w,c
 10555  002A2A  0D0C               	mullw	12
 10556  002A2C  0EB6               	movlw	182
 10557  002A2E  D849               	call	PL2	;call to abstracted procedure
 10558  002A30  EC65  F029         	call	_writeEEPROM	;wreg free
 10559                           
 10560                           ;main.c: 1209: writeEEPROM(0xB7 + i * 12, 0);
 10561  002A34  5011               	movf	init_app_eeprom@i,w,c
 10562  002A36  0D0C               	mullw	12
 10563  002A38  0EB7               	movlw	183
 10564  002A3A  D843               	call	PL2	;call to abstracted procedure
 10565  002A3C  EC65  F029         	call	_writeEEPROM	;wreg free
 10566                           
 10567                           ;main.c: 1210: writeEEPROM(0xB8 + i * 12, 0);
 10568  002A40  5011               	movf	init_app_eeprom@i,w,c
 10569  002A42  0D0C               	mullw	12
 10570  002A44  0EB8               	movlw	184
 10571  002A46  D83D               	call	PL2	;call to abstracted procedure
 10572  002A48  EC65  F029         	call	_writeEEPROM	;wreg free
 10573                           
 10574                           ;main.c: 1211: writeEEPROM(0xB9 + i * 12, 0);
 10575  002A4C  5011               	movf	init_app_eeprom@i,w,c
 10576  002A4E  0D0C               	mullw	12
 10577  002A50  0EB9               	movlw	185
 10578  002A52  D837               	call	PL2	;call to abstracted procedure
 10579  002A54  EC65  F029         	call	_writeEEPROM	;wreg free
 10580                           
 10581                           ;main.c: 1212: writeEEPROM(0xBA + i * 12, 0);
 10582  002A58  5011               	movf	init_app_eeprom@i,w,c
 10583  002A5A  0D0C               	mullw	12
 10584  002A5C  0EBA               	movlw	186
 10585  002A5E  D831               	call	PL2	;call to abstracted procedure
 10586  002A60  EC65  F029         	call	_writeEEPROM	;wreg free
 10587                           
 10588                           ;main.c: 1213: writeEEPROM(0xBB + i * 12, 0);
 10589  002A64  5011               	movf	init_app_eeprom@i,w,c
 10590  002A66  0D0C               	mullw	12
 10591  002A68  0EBB               	movlw	187
 10592  002A6A  D82B               	call	PL2	;call to abstracted procedure
 10593  002A6C  EC65  F029         	call	_writeEEPROM	;wreg free
 10594                           
 10595                           ;main.c: 1214: writeEEPROM(0xBC + i * 12, 0);
 10596  002A70  5011               	movf	init_app_eeprom@i,w,c
 10597  002A72  0D0C               	mullw	12
 10598  002A74  0EBC               	movlw	188
 10599  002A76  D825               	call	PL2	;call to abstracted procedure
 10600  002A78  EC65  F029         	call	_writeEEPROM	;wreg free
 10601                           
 10602                           ;main.c: 1215: writeEEPROM(0xBD + i * 12, 0);
 10603  002A7C  5011               	movf	init_app_eeprom@i,w,c
 10604  002A7E  0D0C               	mullw	12
 10605  002A80  0EBD               	movlw	189
 10606  002A82  D81F               	call	PL2	;call to abstracted procedure
 10607  002A84  EC65  F029         	call	_writeEEPROM	;wreg free
 10608                           
 10609                           ;main.c: 1216: writeEEPROM(0xBE + i * 12, 0);
 10610  002A88  5011               	movf	init_app_eeprom@i,w,c
 10611  002A8A  0D0C               	mullw	12
 10612  002A8C  0EBE               	movlw	190
 10613  002A8E  D819               	call	PL2	;call to abstracted procedure
 10614  002A90  EC65  F029         	call	_writeEEPROM	;wreg free
 10615                           
 10616                           ;main.c: 1217: writeEEPROM(0xBF + i * 12, 0);
 10617  002A94  5011               	movf	init_app_eeprom@i,w,c
 10618  002A96  0D0C               	mullw	12
 10619  002A98  0EBF               	movlw	191
 10620  002A9A  D813               	call	PL2	;call to abstracted procedure
 10621  002A9C  EC65  F029         	call	_writeEEPROM	;wreg free
 10622                           
 10623                           ;main.c: 1218: writeEEPROM(0xC0 + i * 12, 0);
 10624  002AA0  5011               	movf	init_app_eeprom@i,w,c
 10625  002AA2  0D0C               	mullw	12
 10626  002AA4  0EC0               	movlw	192
 10627  002AA6  D80D               	call	PL2	;call to abstracted procedure
 10628  002AA8  EC65  F029         	call	_writeEEPROM	;wreg free
 10629                           
 10630                           ;main.c: 1219: writeEEPROM(0xC1 + i * 12, 0);
 10631  002AAC  5011               	movf	init_app_eeprom@i,w,c
 10632  002AAE  0D0C               	mullw	12
 10633  002AB0  0EC1               	movlw	193
 10634  002AB2  D807               	call	PL2	;call to abstracted procedure
 10635  002AB4  EC65  F029         	call	_writeEEPROM	;wreg free
 10636  002AB8  2A11               	incf	init_app_eeprom@i,f,c
 10637  002ABA  0E05               	movlw	5
 10638  002ABC  6411               	cpfsgt	init_app_eeprom@i,c
 10639  002ABE  D7B4               	goto	l9598
 10640  002AC0  0C05               	retlw	5
 10641  002AC2                     __end_of_init_app_eeprom:
 10642                           	opt stack 0
 10643  002AC2                     PL2:
 10644                           	opt stack 23
 10645  002AC2  24F3               	addwf	prodl,w,c
 10646  002AC4  6E0E               	movwf	?_writeEEPROM,c
 10647  002AC6  0E00               	movlw	0
 10648  002AC8  20F4               	addwfc	prodh,w,c
 10649  002ACA  6E0F               	movwf	?_writeEEPROM+1,c
 10650  002ACC  6A10               	clrf	?_writeEEPROM+2,c
 10651  002ACE  0C00               	retlw	0
 10652  002AD0                     __end_ofPL2:
 10653                           	opt stack 0
 10654                           tblptru	equ	0xFF8
 10655                           tblptrh	equ	0xFF7
 10656                           tblptrl	equ	0xFF6
 10657                           tablat	equ	0xFF5
 10658                           prodh	equ	0xFF4
 10659                           prodl	equ	0xFF3
 10660                           intcon	equ	0xFF2
 10661                           postinc0	equ	0xFEE
 10662                           wreg	equ	0xFE8
 10663                           indf1	equ	0xFE7
 10664                           postdec1	equ	0xFE5
 10665                           fsr1h	equ	0xFE2
 10666                           fsr1l	equ	0xFE1
 10667                           indf2	equ	0xFDF
 10668                           postinc2	equ	0xFDE
 10669                           postdec2	equ	0xFDD
 10670                           plusw2	equ	0xFDB
 10671                           fsr2h	equ	0xFDA
 10672                           fsr2l	equ	0xFD9
 10673                           status	equ	0xFD8
 10674                           
 10675 ;; *************** function _vscp_setManufacturerId *****************
 10676 ;; Defined at:
 10677 ;;		line 2652 in file "../main.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;  idx             1    wreg     unsigned char 
 10680 ;;  data            1   16[COMRAM] unsigned char 
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;  idx             1   17[COMRAM] unsigned char 
 10683 ;; Return value:  Size  Location     Type
 10684 ;;		None               void
 10685 ;; Registers used:
 10686 ;;		wreg, status,2, status,0, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : F/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10692 ;;      Params:         1       0       0       0       0       0       0
 10693 ;;      Locals:         1       0       0       0       0       0       0
 10694 ;;      Temps:          0       0       0       0       0       0       0
 10695 ;;      Totals:         2       0       0       0       0       0       0
 10696 ;;Total ram usage:        2 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:    3
 10699 ;; This function calls:
 10700 ;;		_writeEEPROM
 10701 ;; This function is called by:
 10702 ;;		_vscp_writeStdReg
 10703 ;; This function uses a non-reentrant model
 10704 ;;
 10705                           
 10706                           	psect	text39
 10707  005410                     __ptext39:
 10708                           	opt stack 0
 10709  005410                     _vscp_setManufacturerId:
 10710                           	opt stack 24
 10711                           
 10712                           ;incstack = 0
 10713                           ;incstack = 0
 10714                           ;vscp_setManufacturerId@idx stored from wreg
 10715  005410  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;main.c: 2653: writeEEPROM(0x09 + idx, data);
 10719  005414  0E09               	movlw	9
 10720  005416  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10721  005418  6E0E               	movwf	?_writeEEPROM,c
 10722  00541A  6A0F               	clrf	?_writeEEPROM+1,c
 10723  00541C  0E00               	movlw	0
 10724  00541E  220F               	addwfc	?_writeEEPROM+1,f,c
 10725  005420  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10726  005424  EF65  F029         	goto	_writeEEPROM	;wreg free
 10727  005428                     __end_of_vscp_setManufacturerId:
 10728                           	opt stack 0
 10729                           tblptru	equ	0xFF8
 10730                           tblptrh	equ	0xFF7
 10731                           tblptrl	equ	0xFF6
 10732                           tablat	equ	0xFF5
 10733                           prodh	equ	0xFF4
 10734                           prodl	equ	0xFF3
 10735                           intcon	equ	0xFF2
 10736                           postinc0	equ	0xFEE
 10737                           wreg	equ	0xFE8
 10738                           indf1	equ	0xFE7
 10739                           postdec1	equ	0xFE5
 10740                           fsr1h	equ	0xFE2
 10741                           fsr1l	equ	0xFE1
 10742                           indf2	equ	0xFDF
 10743                           postinc2	equ	0xFDE
 10744                           postdec2	equ	0xFDD
 10745                           plusw2	equ	0xFDB
 10746                           fsr2h	equ	0xFDA
 10747                           fsr2l	equ	0xFD9
 10748                           status	equ	0xFD8
 10749                           
 10750 ;; *************** function _vscp_setUserID *****************
 10751 ;; Defined at:
 10752 ;;		line 2630 in file "../main.c"
 10753 ;; Parameters:    Size  Location     Type
 10754 ;;  idx             1    wreg     unsigned char 
 10755 ;;  data            1   16[COMRAM] unsigned char 
 10756 ;; Auto vars:     Size  Location     Type
 10757 ;;  idx             1   17[COMRAM] unsigned char 
 10758 ;; Return value:  Size  Location     Type
 10759 ;;		None               void
 10760 ;; Registers used:
 10761 ;;		wreg, status,2, status,0, cstack
 10762 ;; Tracked objects:
 10763 ;;		On entry : F/0
 10764 ;;		On exit  : 0/0
 10765 ;;		Unchanged: 0/0
 10766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10767 ;;      Params:         1       0       0       0       0       0       0
 10768 ;;      Locals:         1       0       0       0       0       0       0
 10769 ;;      Temps:          0       0       0       0       0       0       0
 10770 ;;      Totals:         2       0       0       0       0       0       0
 10771 ;;Total ram usage:        2 bytes
 10772 ;; Hardware stack levels used:    1
 10773 ;; Hardware stack levels required when called:    3
 10774 ;; This function calls:
 10775 ;;		_writeEEPROM
 10776 ;; This function is called by:
 10777 ;;		_vscp_writeStdReg
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           	psect	text40
 10782  005428                     __ptext40:
 10783                           	opt stack 0
 10784  005428                     _vscp_setUserID:
 10785                           	opt stack 24
 10786                           
 10787                           ;incstack = 0
 10788                           ;incstack = 0
 10789                           ;vscp_setUserID@idx stored from wreg
 10790  005428  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;main.c: 2631: writeEEPROM(idx + 0x04, data);
 10794  00542C  0E04               	movlw	4
 10795  00542E  2412               	addwf	vscp_setUserID@idx,w,c
 10796  005430  6E0E               	movwf	?_writeEEPROM,c
 10797  005432  6A0F               	clrf	?_writeEEPROM+1,c
 10798  005434  0E00               	movlw	0
 10799  005436  220F               	addwfc	?_writeEEPROM+1,f,c
 10800  005438  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10801  00543C  EF65  F029         	goto	_writeEEPROM	;wreg free
 10802  005440                     __end_of_vscp_setUserID:
 10803                           	opt stack 0
 10804                           tblptru	equ	0xFF8
 10805                           tblptrh	equ	0xFF7
 10806                           tblptrl	equ	0xFF6
 10807                           tablat	equ	0xFF5
 10808                           prodh	equ	0xFF4
 10809                           prodl	equ	0xFF3
 10810                           intcon	equ	0xFF2
 10811                           postinc0	equ	0xFEE
 10812                           wreg	equ	0xFE8
 10813                           indf1	equ	0xFE7
 10814                           postdec1	equ	0xFE5
 10815                           fsr1h	equ	0xFE2
 10816                           fsr1l	equ	0xFE1
 10817                           indf2	equ	0xFDF
 10818                           postinc2	equ	0xFDE
 10819                           postdec2	equ	0xFDD
 10820                           plusw2	equ	0xFDB
 10821                           fsr2h	equ	0xFDA
 10822                           fsr2l	equ	0xFD9
 10823                           status	equ	0xFD8
 10824                           
 10825 ;; *************** function _vscp_setGUID *****************
 10826 ;; Defined at:
 10827 ;;		line 2599 in file "../main.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;  idx             1    wreg     unsigned char 
 10830 ;;  data            1   16[COMRAM] unsigned char 
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;  idx             1   17[COMRAM] unsigned char 
 10833 ;; Return value:  Size  Location     Type
 10834 ;;		None               void
 10835 ;; Registers used:
 10836 ;;		wreg, status,2, status,0, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : F/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10842 ;;      Params:         1       0       0       0       0       0       0
 10843 ;;      Locals:         1       0       0       0       0       0       0
 10844 ;;      Temps:          0       0       0       0       0       0       0
 10845 ;;      Totals:         2       0       0       0       0       0       0
 10846 ;;Total ram usage:        2 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    3
 10849 ;; This function calls:
 10850 ;;		_writeEEPROM
 10851 ;; This function is called by:
 10852 ;;		_vscp_writeStdReg
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           	psect	text41
 10857  00537E                     __ptext41:
 10858                           	opt stack 0
 10859  00537E                     _vscp_setGUID:
 10860                           	opt stack 24
 10861                           
 10862                           ;incstack = 0
 10863                           ;incstack = 0
 10864                           ;vscp_setGUID@idx stored from wreg
 10865  00537E  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;main.c: 2600: if ( idx>15 ) return;
 10869  005382  0E0F               	movlw	15
 10870  005384  6412               	cpfsgt	vscp_setGUID@idx,c
 10871  005386  D001               	goto	l11044
 10872  005388  D00A               	goto	l552
 10873  00538A                     l11044:
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;main.c: 2601: writeEEPROM( 0x11 + idx, data );
 10877  00538A  0E11               	movlw	17
 10878  00538C  2412               	addwf	vscp_setGUID@idx,w,c
 10879  00538E  6E0E               	movwf	?_writeEEPROM,c
 10880  005390  6A0F               	clrf	?_writeEEPROM+1,c
 10881  005392  0E00               	movlw	0
 10882  005394  220F               	addwfc	?_writeEEPROM+1,f,c
 10883  005396  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 10884  00539A  EC65  F029         	call	_writeEEPROM	;wreg free
 10885  00539E                     l552:
 10886  00539E  0012               	return	
 10887  0053A0                     __end_of_vscp_setGUID:
 10888                           	opt stack 0
 10889                           tblptru	equ	0xFF8
 10890                           tblptrh	equ	0xFF7
 10891                           tblptrl	equ	0xFF6
 10892                           tablat	equ	0xFF5
 10893                           prodh	equ	0xFF4
 10894                           prodl	equ	0xFF3
 10895                           intcon	equ	0xFF2
 10896                           postinc0	equ	0xFEE
 10897                           wreg	equ	0xFE8
 10898                           indf1	equ	0xFE7
 10899                           postdec1	equ	0xFE5
 10900                           fsr1h	equ	0xFE2
 10901                           fsr1l	equ	0xFE1
 10902                           indf2	equ	0xFDF
 10903                           postinc2	equ	0xFDE
 10904                           postdec2	equ	0xFDD
 10905                           plusw2	equ	0xFDB
 10906                           fsr2h	equ	0xFDA
 10907                           fsr2l	equ	0xFD9
 10908                           status	equ	0xFD8
 10909                           
 10910 ;; *************** function _vscp_writeAppReg *****************
 10911 ;; Defined at:
 10912 ;;		line 1892 in file "../main.c"
 10913 ;; Parameters:    Size  Location     Type
 10914 ;;  reg             1    wreg     unsigned char 
 10915 ;;  val             1   32[COMRAM] unsigned char 
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;  reg             1   34[COMRAM] unsigned char 
 10918 ;;  pos             1   33[COMRAM] unsigned char 
 10919 ;;  rv              1   35[COMRAM] unsigned char 
 10920 ;; Return value:  Size  Location     Type
 10921 ;;                  1    wreg      unsigned char 
 10922 ;; Registers used:
 10923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10924 ;; Tracked objects:
 10925 ;;		On entry : F/0
 10926 ;;		On exit  : 0/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10929 ;;      Params:         1       0       0       0       0       0       0
 10930 ;;      Locals:         3       0       0       0       0       0       0
 10931 ;;      Temps:          0       0       0       0       0       0       0
 10932 ;;      Totals:         4       0       0       0       0       0       0
 10933 ;;Total ram usage:        4 bytes
 10934 ;; Hardware stack levels used:    1
 10935 ;; Hardware stack levels required when called:    4
 10936 ;; This function calls:
 10937 ;;		_writeEEPROM
 10938 ;;		_readEEPROM
 10939 ;;		_writeCoeffs2Ram
 10940 ;; This function is called by:
 10941 ;;		_vscp_writeRegister
 10942 ;;		_vscp_handleProtocolEvent
 10943 ;; This function uses a non-reentrant model
 10944 ;;
 10945                           
 10946                           	psect	text42
 10947  00066E                     __ptext42:
 10948                           	opt stack 0
 10949  00066E                     _vscp_writeAppReg:
 10950                           	opt stack 23
 10951                           
 10952                           ;incstack = 0
 10953                           ;incstack = 0
 10954                           ;vscp_writeAppReg@reg stored from wreg
 10955  00066E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;main.c: 1893: uint8_t rv;
 10959                           ;main.c: 1900: rv = ~val;
 10960  000672  1C21               	comf	vscp_writeAppReg@val,w,c
 10961  000674  6E24               	movwf	vscp_writeAppReg@rv,c
 10962                           
 10963                           ;main.c: 1902: if (0 == vscp_page_select) {
 10964  000676  5047               	movf	_vscp_page_select+1,w,c
 10965  000678  1046               	iorwf	_vscp_page_select,w,c
 10966  00067A  E102 EF37  F008    	bz	l11006
 10967  000680  EF71  F009         	goto	l11008
 10968  000684                     l10816:
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;main.c: 1908: writeEEPROM(0x41, val);
 10972  000684  6A0F               	clrf	?_writeEEPROM+1,c
 10973  000686  0E41               	movlw	65
 10974  000688  6E0E               	movwf	?_writeEEPROM,c
 10975  00068A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10976  00068E  EC65  F029         	call	_writeEEPROM	;wreg free
 10977                           
 10978                           ;main.c: 1909: rv = readEEPROM(0x41);
 10979  000692  6A0F               	clrf	?_readEEPROM+1,c
 10980  000694  0E41               	movlw	65
 10981  000696  6E0E               	movwf	?_readEEPROM,c
 10982  000698  EC62  F02A         	call	_readEEPROM	;wreg free
 10983  00069C  EFA9  F009         	goto	L20
 10984  0006A0                     l10818:
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;main.c: 1914: writeEEPROM(0x42, val);
 10988  0006A0  6A0F               	clrf	?_writeEEPROM+1,c
 10989  0006A2  0E42               	movlw	66
 10990  0006A4  6E0E               	movwf	?_writeEEPROM,c
 10991  0006A6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10992  0006AA  EC65  F029         	call	_writeEEPROM	;wreg free
 10993                           
 10994                           ;main.c: 1915: rv = readEEPROM(0x42);
 10995  0006AE  6A0F               	clrf	?_readEEPROM+1,c
 10996  0006B0  0E42               	movlw	66
 10997  0006B2  6E0E               	movwf	?_readEEPROM,c
 10998  0006B4  EC62  F02A         	call	_readEEPROM	;wreg free
 10999  0006B8  EFA9  F009         	goto	L20
 11000  0006BC                     l10820:
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;main.c: 1924: writeEEPROM(0x43, val);
 11004  0006BC  6A0F               	clrf	?_writeEEPROM+1,c
 11005  0006BE  0E43               	movlw	67
 11006  0006C0  6E0E               	movwf	?_writeEEPROM,c
 11007  0006C2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11008  0006C6  EC65  F029         	call	_writeEEPROM	;wreg free
 11009                           
 11010                           ;main.c: 1925: rv = readEEPROM(0x43);
 11011  0006CA  6A0F               	clrf	?_readEEPROM+1,c
 11012  0006CC  0E43               	movlw	67
 11013  0006CE  6E0E               	movwf	?_readEEPROM,c
 11014  0006D0  EC62  F02A         	call	_readEEPROM	;wreg free
 11015  0006D4  EFA9  F009         	goto	L20
 11016  0006D8                     l10822:
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;main.c: 1930: writeEEPROM(0x44, val);
 11020  0006D8  6A0F               	clrf	?_writeEEPROM+1,c
 11021  0006DA  0E44               	movlw	68
 11022  0006DC  6E0E               	movwf	?_writeEEPROM,c
 11023  0006DE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11024  0006E2  EC65  F029         	call	_writeEEPROM	;wreg free
 11025                           
 11026                           ;main.c: 1931: rv = readEEPROM(0x44);
 11027  0006E6  6A0F               	clrf	?_readEEPROM+1,c
 11028  0006E8  0E44               	movlw	68
 11029  0006EA  6E0E               	movwf	?_readEEPROM,c
 11030  0006EC  EC62  F02A         	call	_readEEPROM	;wreg free
 11031  0006F0  EFA9  F009         	goto	L20
 11032  0006F4                     l10824:
 11033                           
 11034                           ; BSR set to: 0
 11035                           ;main.c: 1936: writeEEPROM(0x45, val);
 11036  0006F4  6A0F               	clrf	?_writeEEPROM+1,c
 11037  0006F6  0E45               	movlw	69
 11038  0006F8  6E0E               	movwf	?_writeEEPROM,c
 11039  0006FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11040  0006FE  EC65  F029         	call	_writeEEPROM	;wreg free
 11041                           
 11042                           ;main.c: 1937: rv = readEEPROM(0x45);
 11043  000702  6A0F               	clrf	?_readEEPROM+1,c
 11044  000704  0E45               	movlw	69
 11045  000706  6E0E               	movwf	?_readEEPROM,c
 11046  000708  EC62  F02A         	call	_readEEPROM	;wreg free
 11047  00070C  EFA9  F009         	goto	L20
 11048  000710                     l10826:
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;main.c: 1942: writeEEPROM(0x46, val);
 11052  000710  6A0F               	clrf	?_writeEEPROM+1,c
 11053  000712  0E46               	movlw	70
 11054  000714  6E0E               	movwf	?_writeEEPROM,c
 11055  000716  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11056  00071A  EC65  F029         	call	_writeEEPROM	;wreg free
 11057                           
 11058                           ;main.c: 1943: rv = readEEPROM(0x46);
 11059  00071E  6A0F               	clrf	?_readEEPROM+1,c
 11060  000720  0E46               	movlw	70
 11061  000722  6E0E               	movwf	?_readEEPROM,c
 11062  000724  EC62  F02A         	call	_readEEPROM	;wreg free
 11063  000728  EFA9  F009         	goto	L20
 11064  00072C                     l10828:
 11065                           
 11066                           ; BSR set to: 0
 11067                           ;main.c: 1948: writeEEPROM(0x47, val);
 11068  00072C  6A0F               	clrf	?_writeEEPROM+1,c
 11069  00072E  0E47               	movlw	71
 11070  000730  6E0E               	movwf	?_writeEEPROM,c
 11071  000732  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11072  000736  EC65  F029         	call	_writeEEPROM	;wreg free
 11073                           
 11074                           ;main.c: 1949: rv = readEEPROM(0x47);
 11075  00073A  6A0F               	clrf	?_readEEPROM+1,c
 11076  00073C  0E47               	movlw	71
 11077  00073E  6E0E               	movwf	?_readEEPROM,c
 11078  000740  EC62  F02A         	call	_readEEPROM	;wreg free
 11079  000744  EFA9  F009         	goto	L20
 11080  000748                     l10830:
 11081                           
 11082                           ; BSR set to: 0
 11083                           ;main.c: 1954: writeEEPROM(0x48, val);
 11084  000748  6A0F               	clrf	?_writeEEPROM+1,c
 11085  00074A  0E48               	movlw	72
 11086  00074C  6E0E               	movwf	?_writeEEPROM,c
 11087  00074E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11088  000752  EC65  F029         	call	_writeEEPROM	;wreg free
 11089                           
 11090                           ;main.c: 1955: rv = readEEPROM(0x48);
 11091  000756  6A0F               	clrf	?_readEEPROM+1,c
 11092  000758  0E48               	movlw	72
 11093  00075A  6E0E               	movwf	?_readEEPROM,c
 11094  00075C  EC62  F02A         	call	_readEEPROM	;wreg free
 11095  000760  EFA9  F009         	goto	L20
 11096  000764                     l10832:
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;main.c: 1964: writeEEPROM(0x49, val);
 11100  000764  6A0F               	clrf	?_writeEEPROM+1,c
 11101  000766  0E49               	movlw	73
 11102  000768  6E0E               	movwf	?_writeEEPROM,c
 11103  00076A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11104  00076E  EC65  F029         	call	_writeEEPROM	;wreg free
 11105                           
 11106                           ;main.c: 1965: rv = readEEPROM(0x49);
 11107  000772  6A0F               	clrf	?_readEEPROM+1,c
 11108  000774  0E49               	movlw	73
 11109  000776  6E0E               	movwf	?_readEEPROM,c
 11110  000778  EC62  F02A         	call	_readEEPROM	;wreg free
 11111  00077C  EFA9  F009         	goto	L20
 11112  000780                     l10834:
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;main.c: 1970: writeEEPROM(0x4A, val);
 11116  000780  6A0F               	clrf	?_writeEEPROM+1,c
 11117  000782  0E4A               	movlw	74
 11118  000784  6E0E               	movwf	?_writeEEPROM,c
 11119  000786  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11120  00078A  EC65  F029         	call	_writeEEPROM	;wreg free
 11121                           
 11122                           ;main.c: 1971: rv = readEEPROM(0x4A);
 11123  00078E  6A0F               	clrf	?_readEEPROM+1,c
 11124  000790  0E4A               	movlw	74
 11125  000792  6E0E               	movwf	?_readEEPROM,c
 11126  000794  EC62  F02A         	call	_readEEPROM	;wreg free
 11127  000798  EFA9  F009         	goto	L20
 11128  00079C                     l10836:
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;main.c: 1976: writeEEPROM(0x4B, val);
 11132  00079C  6A0F               	clrf	?_writeEEPROM+1,c
 11133  00079E  0E4B               	movlw	75
 11134  0007A0  6E0E               	movwf	?_writeEEPROM,c
 11135  0007A2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11136  0007A6  EC65  F029         	call	_writeEEPROM	;wreg free
 11137                           
 11138                           ;main.c: 1977: rv = readEEPROM(0x4B);
 11139  0007AA  6A0F               	clrf	?_readEEPROM+1,c
 11140  0007AC  0E4B               	movlw	75
 11141  0007AE  6E0E               	movwf	?_readEEPROM,c
 11142  0007B0  EC62  F02A         	call	_readEEPROM	;wreg free
 11143  0007B4  EFA9  F009         	goto	L20
 11144  0007B8                     l10838:
 11145                           
 11146                           ; BSR set to: 0
 11147                           ;main.c: 1982: writeEEPROM(0x4C, val);
 11148  0007B8  6A0F               	clrf	?_writeEEPROM+1,c
 11149  0007BA  0E4C               	movlw	76
 11150  0007BC  6E0E               	movwf	?_writeEEPROM,c
 11151  0007BE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11152  0007C2  EC65  F029         	call	_writeEEPROM	;wreg free
 11153                           
 11154                           ;main.c: 1983: rv = readEEPROM(0x4C);
 11155  0007C6  6A0F               	clrf	?_readEEPROM+1,c
 11156  0007C8  0E4C               	movlw	76
 11157  0007CA  6E0E               	movwf	?_readEEPROM,c
 11158  0007CC  EC62  F02A         	call	_readEEPROM	;wreg free
 11159  0007D0  EFA9  F009         	goto	L20
 11160  0007D4                     l10840:
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;main.c: 1988: writeEEPROM(0x4D, val);
 11164  0007D4  6A0F               	clrf	?_writeEEPROM+1,c
 11165  0007D6  0E4D               	movlw	77
 11166  0007D8  6E0E               	movwf	?_writeEEPROM,c
 11167  0007DA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11168  0007DE  EC65  F029         	call	_writeEEPROM	;wreg free
 11169                           
 11170                           ;main.c: 1989: rv = readEEPROM(0x4D);
 11171  0007E2  6A0F               	clrf	?_readEEPROM+1,c
 11172  0007E4  0E4D               	movlw	77
 11173  0007E6  6E0E               	movwf	?_readEEPROM,c
 11174  0007E8  EC62  F02A         	call	_readEEPROM	;wreg free
 11175  0007EC  EFA9  F009         	goto	L20
 11176  0007F0                     l10842:
 11177                           
 11178                           ; BSR set to: 0
 11179                           ;main.c: 1994: writeEEPROM(0x4E, val);
 11180  0007F0  6A0F               	clrf	?_writeEEPROM+1,c
 11181  0007F2  0E4E               	movlw	78
 11182  0007F4  6E0E               	movwf	?_writeEEPROM,c
 11183  0007F6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11184  0007FA  EC65  F029         	call	_writeEEPROM	;wreg free
 11185                           
 11186                           ;main.c: 1995: rv = readEEPROM(0x4E);
 11187  0007FE  6A0F               	clrf	?_readEEPROM+1,c
 11188  000800  0E4E               	movlw	78
 11189  000802  6E0E               	movwf	?_readEEPROM,c
 11190  000804  EC62  F02A         	call	_readEEPROM	;wreg free
 11191  000808  EFA9  F009         	goto	L20
 11192  00080C                     l10844:
 11193                           
 11194                           ; BSR set to: 0
 11195                           ;main.c: 2004: writeEEPROM(0x4F, val);
 11196  00080C  6A0F               	clrf	?_writeEEPROM+1,c
 11197  00080E  0E4F               	movlw	79
 11198  000810  6E0E               	movwf	?_writeEEPROM,c
 11199  000812  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11200  000816  EC65  F029         	call	_writeEEPROM	;wreg free
 11201                           
 11202                           ;main.c: 2005: rv = readEEPROM(0x4F);
 11203  00081A  6A0F               	clrf	?_readEEPROM+1,c
 11204  00081C  0E4F               	movlw	79
 11205  00081E  6E0E               	movwf	?_readEEPROM,c
 11206  000820  EC62  F02A         	call	_readEEPROM	;wreg free
 11207  000824  EFA9  F009         	goto	L20
 11208  000828                     l10846:
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;main.c: 2010: writeEEPROM(0x50, val);
 11212  000828  6A0F               	clrf	?_writeEEPROM+1,c
 11213  00082A  0E50               	movlw	80
 11214  00082C  6E0E               	movwf	?_writeEEPROM,c
 11215  00082E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11216  000832  EC65  F029         	call	_writeEEPROM	;wreg free
 11217                           
 11218                           ;main.c: 2011: rv = readEEPROM(0x50);
 11219  000836  6A0F               	clrf	?_readEEPROM+1,c
 11220  000838  0E50               	movlw	80
 11221  00083A  6E0E               	movwf	?_readEEPROM,c
 11222  00083C  EC62  F02A         	call	_readEEPROM	;wreg free
 11223  000840  EFA9  F009         	goto	L20
 11224  000844                     l10848:
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;main.c: 2016: writeEEPROM(0x51, val);
 11228  000844  6A0F               	clrf	?_writeEEPROM+1,c
 11229  000846  0E51               	movlw	81
 11230  000848  6E0E               	movwf	?_writeEEPROM,c
 11231  00084A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11232  00084E  EC65  F029         	call	_writeEEPROM	;wreg free
 11233                           
 11234                           ;main.c: 2017: rv = readEEPROM(0x51);
 11235  000852  6A0F               	clrf	?_readEEPROM+1,c
 11236  000854  0E51               	movlw	81
 11237  000856  6E0E               	movwf	?_readEEPROM,c
 11238  000858  EC62  F02A         	call	_readEEPROM	;wreg free
 11239  00085C  EFA9  F009         	goto	L20
 11240  000860                     l10850:
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;main.c: 2022: writeEEPROM(0x52, val);
 11244  000860  6A0F               	clrf	?_writeEEPROM+1,c
 11245  000862  0E52               	movlw	82
 11246  000864  6E0E               	movwf	?_writeEEPROM,c
 11247  000866  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11248  00086A  EC65  F029         	call	_writeEEPROM	;wreg free
 11249                           
 11250                           ;main.c: 2023: rv = readEEPROM(0x52);
 11251  00086E  6A0F               	clrf	?_readEEPROM+1,c
 11252  000870  0E52               	movlw	82
 11253  000872  6E0E               	movwf	?_readEEPROM,c
 11254  000874  EC62  F02A         	call	_readEEPROM	;wreg free
 11255  000878  EFA9  F009         	goto	L20
 11256  00087C                     l10852:
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;main.c: 2028: writeEEPROM(0x53, val);
 11260  00087C  6A0F               	clrf	?_writeEEPROM+1,c
 11261  00087E  0E53               	movlw	83
 11262  000880  6E0E               	movwf	?_writeEEPROM,c
 11263  000882  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11264  000886  EC65  F029         	call	_writeEEPROM	;wreg free
 11265                           
 11266                           ;main.c: 2029: rv = readEEPROM(0x53);
 11267  00088A  6A0F               	clrf	?_readEEPROM+1,c
 11268  00088C  0E53               	movlw	83
 11269  00088E  6E0E               	movwf	?_readEEPROM,c
 11270  000890  EC62  F02A         	call	_readEEPROM	;wreg free
 11271  000894  EFA9  F009         	goto	L20
 11272  000898                     l10854:
 11273                           
 11274                           ; BSR set to: 0
 11275                           ;main.c: 2034: writeEEPROM(0x54, val);
 11276  000898  6A0F               	clrf	?_writeEEPROM+1,c
 11277  00089A  0E54               	movlw	84
 11278  00089C  6E0E               	movwf	?_writeEEPROM,c
 11279  00089E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11280  0008A2  EC65  F029         	call	_writeEEPROM	;wreg free
 11281                           
 11282                           ;main.c: 2035: rv = readEEPROM(0x54);
 11283  0008A6  6A0F               	clrf	?_readEEPROM+1,c
 11284  0008A8  0E54               	movlw	84
 11285  0008AA  6E0E               	movwf	?_readEEPROM,c
 11286  0008AC  EC62  F02A         	call	_readEEPROM	;wreg free
 11287  0008B0  EFA9  F009         	goto	L20
 11288  0008B4                     l10856:
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;main.c: 2040: writeEEPROM(0x55, val);
 11292  0008B4  6A0F               	clrf	?_writeEEPROM+1,c
 11293  0008B6  0E55               	movlw	85
 11294  0008B8  6E0E               	movwf	?_writeEEPROM,c
 11295  0008BA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11296  0008BE  EC65  F029         	call	_writeEEPROM	;wreg free
 11297                           
 11298                           ;main.c: 2041: rv = readEEPROM(0x55);
 11299  0008C2  6A0F               	clrf	?_readEEPROM+1,c
 11300  0008C4  0E55               	movlw	85
 11301  0008C6  6E0E               	movwf	?_readEEPROM,c
 11302  0008C8  EC62  F02A         	call	_readEEPROM	;wreg free
 11303  0008CC  EFA9  F009         	goto	L20
 11304  0008D0                     l10858:
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;main.c: 2046: writeEEPROM(0x56, val);
 11308  0008D0  6A0F               	clrf	?_writeEEPROM+1,c
 11309  0008D2  0E56               	movlw	86
 11310  0008D4  6E0E               	movwf	?_writeEEPROM,c
 11311  0008D6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11312  0008DA  EC65  F029         	call	_writeEEPROM	;wreg free
 11313                           
 11314                           ;main.c: 2047: rv = readEEPROM(0x56);
 11315  0008DE  6A0F               	clrf	?_readEEPROM+1,c
 11316  0008E0  0E56               	movlw	86
 11317  0008E2  6E0E               	movwf	?_readEEPROM,c
 11318  0008E4  EC62  F02A         	call	_readEEPROM	;wreg free
 11319  0008E8  EFA9  F009         	goto	L20
 11320  0008EC                     l10860:
 11321                           
 11322                           ; BSR set to: 0
 11323                           ;main.c: 2052: writeEEPROM(0x57, val);
 11324  0008EC  6A0F               	clrf	?_writeEEPROM+1,c
 11325  0008EE  0E57               	movlw	87
 11326  0008F0  6E0E               	movwf	?_writeEEPROM,c
 11327  0008F2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11328  0008F6  EC65  F029         	call	_writeEEPROM	;wreg free
 11329                           
 11330                           ;main.c: 2053: rv = readEEPROM(0x57);
 11331  0008FA  6A0F               	clrf	?_readEEPROM+1,c
 11332  0008FC  0E57               	movlw	87
 11333  0008FE  6E0E               	movwf	?_readEEPROM,c
 11334  000900  EC62  F02A         	call	_readEEPROM	;wreg free
 11335  000904  EFA9  F009         	goto	L20
 11336  000908                     l10862:
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;main.c: 2058: writeEEPROM(0x58, val);
 11340  000908  6A0F               	clrf	?_writeEEPROM+1,c
 11341  00090A  0E58               	movlw	88
 11342  00090C  6E0E               	movwf	?_writeEEPROM,c
 11343  00090E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11344  000912  EC65  F029         	call	_writeEEPROM	;wreg free
 11345                           
 11346                           ;main.c: 2059: rv = readEEPROM(0x58);
 11347  000916  6A0F               	clrf	?_readEEPROM+1,c
 11348  000918  0E58               	movlw	88
 11349  00091A  6E0E               	movwf	?_readEEPROM,c
 11350  00091C  EC62  F02A         	call	_readEEPROM	;wreg free
 11351  000920  EFA9  F009         	goto	L20
 11352  000924                     l10864:
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;main.c: 2064: writeEEPROM(0x59, val);
 11356  000924  6A0F               	clrf	?_writeEEPROM+1,c
 11357  000926  0E59               	movlw	89
 11358  000928  6E0E               	movwf	?_writeEEPROM,c
 11359  00092A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11360  00092E  EC65  F029         	call	_writeEEPROM	;wreg free
 11361                           
 11362                           ;main.c: 2065: rv = readEEPROM(0x59);
 11363  000932  6A0F               	clrf	?_readEEPROM+1,c
 11364  000934  0E59               	movlw	89
 11365  000936  6E0E               	movwf	?_readEEPROM,c
 11366  000938  EC62  F02A         	call	_readEEPROM	;wreg free
 11367  00093C  EFA9  F009         	goto	L20
 11368  000940                     l10866:
 11369                           
 11370                           ; BSR set to: 0
 11371                           ;main.c: 2070: writeEEPROM(0x5A, val);
 11372  000940  6A0F               	clrf	?_writeEEPROM+1,c
 11373  000942  0E5A               	movlw	90
 11374  000944  6E0E               	movwf	?_writeEEPROM,c
 11375  000946  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11376  00094A  EC65  F029         	call	_writeEEPROM	;wreg free
 11377                           
 11378                           ;main.c: 2071: rv = readEEPROM(0x5A);
 11379  00094E  6A0F               	clrf	?_readEEPROM+1,c
 11380  000950  0E5A               	movlw	90
 11381  000952  6E0E               	movwf	?_readEEPROM,c
 11382  000954  EC62  F02A         	call	_readEEPROM	;wreg free
 11383  000958  EFA9  F009         	goto	L20
 11384  00095C                     l10868:
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;main.c: 2080: writeEEPROM(0x5B, val);
 11388  00095C  6A0F               	clrf	?_writeEEPROM+1,c
 11389  00095E  0E5B               	movlw	91
 11390  000960  6E0E               	movwf	?_writeEEPROM,c
 11391  000962  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11392  000966  EC65  F029         	call	_writeEEPROM	;wreg free
 11393                           
 11394                           ;main.c: 2081: rv = readEEPROM(0x5B);
 11395  00096A  6A0F               	clrf	?_readEEPROM+1,c
 11396  00096C  0E5B               	movlw	91
 11397  00096E  6E0E               	movwf	?_readEEPROM,c
 11398  000970  EC62  F02A         	call	_readEEPROM	;wreg free
 11399  000974  EFA9  F009         	goto	L20
 11400  000978                     l10870:
 11401                           
 11402                           ; BSR set to: 0
 11403                           ;main.c: 2086: writeEEPROM(0x5C, val);
 11404  000978  6A0F               	clrf	?_writeEEPROM+1,c
 11405  00097A  0E5C               	movlw	92
 11406  00097C  6E0E               	movwf	?_writeEEPROM,c
 11407  00097E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11408  000982  EC65  F029         	call	_writeEEPROM	;wreg free
 11409                           
 11410                           ;main.c: 2087: rv = readEEPROM(0x5C);
 11411  000986  6A0F               	clrf	?_readEEPROM+1,c
 11412  000988  0E5C               	movlw	92
 11413  00098A  6E0E               	movwf	?_readEEPROM,c
 11414  00098C  EC62  F02A         	call	_readEEPROM	;wreg free
 11415  000990  EFA9  F009         	goto	L20
 11416  000994                     l10872:
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;main.c: 2092: writeEEPROM(0x5D, val);
 11420  000994  6A0F               	clrf	?_writeEEPROM+1,c
 11421  000996  0E5D               	movlw	93
 11422  000998  6E0E               	movwf	?_writeEEPROM,c
 11423  00099A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11424  00099E  EC65  F029         	call	_writeEEPROM	;wreg free
 11425                           
 11426                           ;main.c: 2093: rv = readEEPROM(0x5D);
 11427  0009A2  6A0F               	clrf	?_readEEPROM+1,c
 11428  0009A4  0E5D               	movlw	93
 11429  0009A6  6E0E               	movwf	?_readEEPROM,c
 11430  0009A8  EC62  F02A         	call	_readEEPROM	;wreg free
 11431  0009AC  EFA9  F009         	goto	L20
 11432  0009B0                     l10874:
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;main.c: 2098: writeEEPROM(0x5E, val);
 11436  0009B0  6A0F               	clrf	?_writeEEPROM+1,c
 11437  0009B2  0E5E               	movlw	94
 11438  0009B4  6E0E               	movwf	?_writeEEPROM,c
 11439  0009B6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11440  0009BA  EC65  F029         	call	_writeEEPROM	;wreg free
 11441                           
 11442                           ;main.c: 2099: rv = readEEPROM(0x5E);
 11443  0009BE  6A0F               	clrf	?_readEEPROM+1,c
 11444  0009C0  0E5E               	movlw	94
 11445  0009C2  6E0E               	movwf	?_readEEPROM,c
 11446  0009C4  EC62  F02A         	call	_readEEPROM	;wreg free
 11447  0009C8  EFA9  F009         	goto	L20
 11448  0009CC                     l10876:
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;main.c: 2104: writeEEPROM(0x5F, val);
 11452  0009CC  6A0F               	clrf	?_writeEEPROM+1,c
 11453  0009CE  0E5F               	movlw	95
 11454  0009D0  6E0E               	movwf	?_writeEEPROM,c
 11455  0009D2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11456  0009D6  EC65  F029         	call	_writeEEPROM	;wreg free
 11457                           
 11458                           ;main.c: 2105: rv = readEEPROM(0x5F);
 11459  0009DA  6A0F               	clrf	?_readEEPROM+1,c
 11460  0009DC  0E5F               	movlw	95
 11461  0009DE  6E0E               	movwf	?_readEEPROM,c
 11462  0009E0  EC62  F02A         	call	_readEEPROM	;wreg free
 11463  0009E4  EFA9  F009         	goto	L20
 11464  0009E8                     l10878:
 11465                           
 11466                           ; BSR set to: 0
 11467                           ;main.c: 2110: writeEEPROM(0x60, val);
 11468  0009E8  6A0F               	clrf	?_writeEEPROM+1,c
 11469  0009EA  0E60               	movlw	96
 11470  0009EC  6E0E               	movwf	?_writeEEPROM,c
 11471  0009EE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11472  0009F2  EC65  F029         	call	_writeEEPROM	;wreg free
 11473                           
 11474                           ;main.c: 2111: rv = readEEPROM(0x60);
 11475  0009F6  6A0F               	clrf	?_readEEPROM+1,c
 11476  0009F8  0E60               	movlw	96
 11477  0009FA  6E0E               	movwf	?_readEEPROM,c
 11478  0009FC  EC62  F02A         	call	_readEEPROM	;wreg free
 11479  000A00  EFA9  F009         	goto	L20
 11480  000A04                     l10880:
 11481                           
 11482                           ; BSR set to: 0
 11483                           ;main.c: 2116: writeEEPROM(0x61, val);
 11484  000A04  6A0F               	clrf	?_writeEEPROM+1,c
 11485  000A06  0E61               	movlw	97
 11486  000A08  6E0E               	movwf	?_writeEEPROM,c
 11487  000A0A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11488  000A0E  EC65  F029         	call	_writeEEPROM	;wreg free
 11489                           
 11490                           ;main.c: 2117: rv = readEEPROM(0x61);
 11491  000A12  6A0F               	clrf	?_readEEPROM+1,c
 11492  000A14  0E61               	movlw	97
 11493  000A16  6E0E               	movwf	?_readEEPROM,c
 11494  000A18  EC62  F02A         	call	_readEEPROM	;wreg free
 11495  000A1C  EFA9  F009         	goto	L20
 11496  000A20                     l10882:
 11497                           
 11498                           ; BSR set to: 0
 11499                           ;main.c: 2122: writeEEPROM(0x62, val);
 11500  000A20  6A0F               	clrf	?_writeEEPROM+1,c
 11501  000A22  0E62               	movlw	98
 11502  000A24  6E0E               	movwf	?_writeEEPROM,c
 11503  000A26  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11504  000A2A  EC65  F029         	call	_writeEEPROM	;wreg free
 11505                           
 11506                           ;main.c: 2123: rv = readEEPROM(0x62);
 11507  000A2E  6A0F               	clrf	?_readEEPROM+1,c
 11508  000A30  0E62               	movlw	98
 11509  000A32  6E0E               	movwf	?_readEEPROM,c
 11510  000A34  EC62  F02A         	call	_readEEPROM	;wreg free
 11511  000A38  EFA9  F009         	goto	L20
 11512  000A3C                     l10884:
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;main.c: 2128: writeEEPROM(0x63, val);
 11516  000A3C  6A0F               	clrf	?_writeEEPROM+1,c
 11517  000A3E  0E63               	movlw	99
 11518  000A40  6E0E               	movwf	?_writeEEPROM,c
 11519  000A42  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11520  000A46  EC65  F029         	call	_writeEEPROM	;wreg free
 11521                           
 11522                           ;main.c: 2129: rv = readEEPROM(0x63);
 11523  000A4A  6A0F               	clrf	?_readEEPROM+1,c
 11524  000A4C  0E63               	movlw	99
 11525  000A4E  6E0E               	movwf	?_readEEPROM,c
 11526  000A50  EC62  F02A         	call	_readEEPROM	;wreg free
 11527  000A54  EFA9  F009         	goto	L20
 11528  000A58                     l10886:
 11529                           
 11530                           ; BSR set to: 0
 11531                           ;main.c: 2134: writeEEPROM(0x64, val);
 11532  000A58  6A0F               	clrf	?_writeEEPROM+1,c
 11533  000A5A  0E64               	movlw	100
 11534  000A5C  6E0E               	movwf	?_writeEEPROM,c
 11535  000A5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11536  000A62  EC65  F029         	call	_writeEEPROM	;wreg free
 11537                           
 11538                           ;main.c: 2135: rv = readEEPROM(0x64);
 11539  000A66  6A0F               	clrf	?_readEEPROM+1,c
 11540  000A68  0E64               	movlw	100
 11541  000A6A  6E0E               	movwf	?_readEEPROM,c
 11542  000A6C  EC62  F02A         	call	_readEEPROM	;wreg free
 11543  000A70  EFA9  F009         	goto	L20
 11544  000A74                     l10888:
 11545                           
 11546                           ; BSR set to: 0
 11547                           ;main.c: 2140: writeEEPROM(0x65, val);
 11548  000A74  6A0F               	clrf	?_writeEEPROM+1,c
 11549  000A76  0E65               	movlw	101
 11550  000A78  6E0E               	movwf	?_writeEEPROM,c
 11551  000A7A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11552  000A7E  EC65  F029         	call	_writeEEPROM	;wreg free
 11553                           
 11554                           ;main.c: 2141: rv = readEEPROM(0x65);
 11555  000A82  6A0F               	clrf	?_readEEPROM+1,c
 11556  000A84  0E65               	movlw	101
 11557  000A86  6E0E               	movwf	?_readEEPROM,c
 11558  000A88  EC62  F02A         	call	_readEEPROM	;wreg free
 11559  000A8C  EFA9  F009         	goto	L20
 11560  000A90                     l10890:
 11561                           
 11562                           ; BSR set to: 0
 11563                           ;main.c: 2146: writeEEPROM(0x66, val);
 11564  000A90  6A0F               	clrf	?_writeEEPROM+1,c
 11565  000A92  0E66               	movlw	102
 11566  000A94  6E0E               	movwf	?_writeEEPROM,c
 11567  000A96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11568  000A9A  EC65  F029         	call	_writeEEPROM	;wreg free
 11569                           
 11570                           ;main.c: 2147: rv = readEEPROM(0x66);
 11571  000A9E  6A0F               	clrf	?_readEEPROM+1,c
 11572  000AA0  0E66               	movlw	102
 11573  000AA2  6E0E               	movwf	?_readEEPROM,c
 11574  000AA4  EC62  F02A         	call	_readEEPROM	;wreg free
 11575  000AA8  EFA9  F009         	goto	L20
 11576  000AAC                     l10892:
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;main.c: 2156: writeEEPROM(0x67, val);
 11580  000AAC  6A0F               	clrf	?_writeEEPROM+1,c
 11581  000AAE  0E67               	movlw	103
 11582  000AB0  6E0E               	movwf	?_writeEEPROM,c
 11583  000AB2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11584  000AB6  EC65  F029         	call	_writeEEPROM	;wreg free
 11585                           
 11586                           ;main.c: 2157: rv = readEEPROM(0x67);
 11587  000ABA  6A0F               	clrf	?_readEEPROM+1,c
 11588  000ABC  0E67               	movlw	103
 11589  000ABE  6E0E               	movwf	?_readEEPROM,c
 11590  000AC0  EC62  F02A         	call	_readEEPROM	;wreg free
 11591  000AC4  EFA9  F009         	goto	L20
 11592  000AC8                     l10894:
 11593                           
 11594                           ; BSR set to: 0
 11595                           ;main.c: 2162: writeEEPROM(0x68, val);
 11596  000AC8  6A0F               	clrf	?_writeEEPROM+1,c
 11597  000ACA  0E68               	movlw	104
 11598  000ACC  6E0E               	movwf	?_writeEEPROM,c
 11599  000ACE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11600  000AD2  EC65  F029         	call	_writeEEPROM	;wreg free
 11601                           
 11602                           ;main.c: 2163: rv = readEEPROM(0x68);
 11603  000AD6  6A0F               	clrf	?_readEEPROM+1,c
 11604  000AD8  0E68               	movlw	104
 11605  000ADA  6E0E               	movwf	?_readEEPROM,c
 11606  000ADC  EC62  F02A         	call	_readEEPROM	;wreg free
 11607  000AE0  EFA9  F009         	goto	L20
 11608  000AE4                     l10896:
 11609                           
 11610                           ; BSR set to: 0
 11611                           ;main.c: 2168: writeEEPROM(0x69, val);
 11612  000AE4  6A0F               	clrf	?_writeEEPROM+1,c
 11613  000AE6  0E69               	movlw	105
 11614  000AE8  6E0E               	movwf	?_writeEEPROM,c
 11615  000AEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11616  000AEE  EC65  F029         	call	_writeEEPROM	;wreg free
 11617                           
 11618                           ;main.c: 2169: rv = readEEPROM(0x69);
 11619  000AF2  6A0F               	clrf	?_readEEPROM+1,c
 11620  000AF4  0E69               	movlw	105
 11621  000AF6  6E0E               	movwf	?_readEEPROM,c
 11622  000AF8  EC62  F02A         	call	_readEEPROM	;wreg free
 11623  000AFC  EFA9  F009         	goto	L20
 11624  000B00                     l10898:
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;main.c: 2174: writeEEPROM(0x6A, val);
 11628  000B00  6A0F               	clrf	?_writeEEPROM+1,c
 11629  000B02  0E6A               	movlw	106
 11630  000B04  6E0E               	movwf	?_writeEEPROM,c
 11631  000B06  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11632  000B0A  EC65  F029         	call	_writeEEPROM	;wreg free
 11633                           
 11634                           ;main.c: 2175: rv = readEEPROM(0x6A);
 11635  000B0E  6A0F               	clrf	?_readEEPROM+1,c
 11636  000B10  0E6A               	movlw	106
 11637  000B12  6E0E               	movwf	?_readEEPROM,c
 11638  000B14  EC62  F02A         	call	_readEEPROM	;wreg free
 11639  000B18  EFA9  F009         	goto	L20
 11640  000B1C                     l10900:
 11641                           
 11642                           ; BSR set to: 0
 11643                           ;main.c: 2180: writeEEPROM(0x6B, val);
 11644  000B1C  6A0F               	clrf	?_writeEEPROM+1,c
 11645  000B1E  0E6B               	movlw	107
 11646  000B20  6E0E               	movwf	?_writeEEPROM,c
 11647  000B22  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11648  000B26  EC65  F029         	call	_writeEEPROM	;wreg free
 11649                           
 11650                           ;main.c: 2181: rv = readEEPROM(0x6B);
 11651  000B2A  6A0F               	clrf	?_readEEPROM+1,c
 11652  000B2C  0E6B               	movlw	107
 11653  000B2E  6E0E               	movwf	?_readEEPROM,c
 11654  000B30  EC62  F02A         	call	_readEEPROM	;wreg free
 11655  000B34  EFA9  F009         	goto	L20
 11656  000B38                     l10902:
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;main.c: 2186: writeEEPROM(0x6C, val);
 11660  000B38  6A0F               	clrf	?_writeEEPROM+1,c
 11661  000B3A  0E6C               	movlw	108
 11662  000B3C  6E0E               	movwf	?_writeEEPROM,c
 11663  000B3E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11664  000B42  EC65  F029         	call	_writeEEPROM	;wreg free
 11665                           
 11666                           ;main.c: 2187: rv = readEEPROM(0x6C);
 11667  000B46  6A0F               	clrf	?_readEEPROM+1,c
 11668  000B48  0E6C               	movlw	108
 11669  000B4A  6E0E               	movwf	?_readEEPROM,c
 11670  000B4C  EC62  F02A         	call	_readEEPROM	;wreg free
 11671  000B50  EFA9  F009         	goto	L20
 11672  000B54                     l10904:
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;main.c: 2192: writeEEPROM(0x6D, val);
 11676  000B54  6A0F               	clrf	?_writeEEPROM+1,c
 11677  000B56  0E6D               	movlw	109
 11678  000B58  6E0E               	movwf	?_writeEEPROM,c
 11679  000B5A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11680  000B5E  EC65  F029         	call	_writeEEPROM	;wreg free
 11681                           
 11682                           ;main.c: 2193: rv = readEEPROM(0x6D);
 11683  000B62  6A0F               	clrf	?_readEEPROM+1,c
 11684  000B64  0E6D               	movlw	109
 11685  000B66  6E0E               	movwf	?_readEEPROM,c
 11686  000B68  EC62  F02A         	call	_readEEPROM	;wreg free
 11687  000B6C  D3F2               	goto	L20
 11688  000B6E                     l10906:
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;main.c: 2198: writeEEPROM(0x6E, val);
 11692  000B6E  6A0F               	clrf	?_writeEEPROM+1,c
 11693  000B70  0E6E               	movlw	110
 11694  000B72  6E0E               	movwf	?_writeEEPROM,c
 11695  000B74  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11696  000B78  EC65  F029         	call	_writeEEPROM	;wreg free
 11697                           
 11698                           ;main.c: 2199: rv = readEEPROM(0x6E);
 11699  000B7C  6A0F               	clrf	?_readEEPROM+1,c
 11700  000B7E  0E6E               	movlw	110
 11701  000B80  6E0E               	movwf	?_readEEPROM,c
 11702  000B82  EC62  F02A         	call	_readEEPROM	;wreg free
 11703  000B86  D3E5               	goto	L20
 11704  000B88                     l10908:
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;main.c: 2204: writeEEPROM(0x6F, val);
 11708  000B88  6A0F               	clrf	?_writeEEPROM+1,c
 11709  000B8A  0E6F               	movlw	111
 11710  000B8C  6E0E               	movwf	?_writeEEPROM,c
 11711  000B8E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11712  000B92  EC65  F029         	call	_writeEEPROM	;wreg free
 11713                           
 11714                           ;main.c: 2205: rv = readEEPROM(0x6F);
 11715  000B96  6A0F               	clrf	?_readEEPROM+1,c
 11716  000B98  0E6F               	movlw	111
 11717  000B9A  6E0E               	movwf	?_readEEPROM,c
 11718  000B9C  EC62  F02A         	call	_readEEPROM	;wreg free
 11719  000BA0  D3D8               	goto	L20
 11720  000BA2                     l10910:
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;main.c: 2210: writeEEPROM(0x70, val);
 11724  000BA2  6A0F               	clrf	?_writeEEPROM+1,c
 11725  000BA4  0E70               	movlw	112
 11726  000BA6  6E0E               	movwf	?_writeEEPROM,c
 11727  000BA8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11728  000BAC  EC65  F029         	call	_writeEEPROM	;wreg free
 11729                           
 11730                           ;main.c: 2211: rv = readEEPROM(0x70);
 11731  000BB0  6A0F               	clrf	?_readEEPROM+1,c
 11732  000BB2  0E70               	movlw	112
 11733  000BB4  6E0E               	movwf	?_readEEPROM,c
 11734  000BB6  EC62  F02A         	call	_readEEPROM	;wreg free
 11735  000BBA  D3CB               	goto	L20
 11736  000BBC                     l10912:
 11737                           
 11738                           ; BSR set to: 0
 11739                           ;main.c: 2216: writeEEPROM(0x71, val);
 11740  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 11741  000BBE  0E71               	movlw	113
 11742  000BC0  6E0E               	movwf	?_writeEEPROM,c
 11743  000BC2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11744  000BC6  EC65  F029         	call	_writeEEPROM	;wreg free
 11745                           
 11746                           ;main.c: 2217: rv = readEEPROM(0x71);
 11747  000BCA  6A0F               	clrf	?_readEEPROM+1,c
 11748  000BCC  0E71               	movlw	113
 11749  000BCE  6E0E               	movwf	?_readEEPROM,c
 11750  000BD0  EC62  F02A         	call	_readEEPROM	;wreg free
 11751  000BD4  D3BE               	goto	L20
 11752  000BD6                     l10914:
 11753                           
 11754                           ; BSR set to: 0
 11755                           ;main.c: 2222: writeEEPROM(0x72, val);
 11756  000BD6  6A0F               	clrf	?_writeEEPROM+1,c
 11757  000BD8  0E72               	movlw	114
 11758  000BDA  6E0E               	movwf	?_writeEEPROM,c
 11759  000BDC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11760  000BE0  EC65  F029         	call	_writeEEPROM	;wreg free
 11761                           
 11762                           ;main.c: 2223: rv = readEEPROM(0x72);
 11763  000BE4  6A0F               	clrf	?_readEEPROM+1,c
 11764  000BE6  0E72               	movlw	114
 11765  000BE8  6E0E               	movwf	?_readEEPROM,c
 11766  000BEA  EC62  F02A         	call	_readEEPROM	;wreg free
 11767  000BEE  D3B1               	goto	L20
 11768  000BF0                     l10916:
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;main.c: 2232: writeEEPROM(0x73, val);
 11772  000BF0  6A0F               	clrf	?_writeEEPROM+1,c
 11773  000BF2  0E73               	movlw	115
 11774  000BF4  6E0E               	movwf	?_writeEEPROM,c
 11775  000BF6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11776  000BFA  EC65  F029         	call	_writeEEPROM	;wreg free
 11777                           
 11778                           ;main.c: 2233: rv = readEEPROM(0x73);
 11779  000BFE  6A0F               	clrf	?_readEEPROM+1,c
 11780  000C00  0E73               	movlw	115
 11781  000C02  6E0E               	movwf	?_readEEPROM,c
 11782  000C04  EC62  F02A         	call	_readEEPROM	;wreg free
 11783  000C08  D3A4               	goto	L20
 11784  000C0A                     l10918:
 11785                           
 11786                           ; BSR set to: 0
 11787                           ;main.c: 2238: writeEEPROM(0x74, val);
 11788  000C0A  6A0F               	clrf	?_writeEEPROM+1,c
 11789  000C0C  0E74               	movlw	116
 11790  000C0E  6E0E               	movwf	?_writeEEPROM,c
 11791  000C10  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11792  000C14  EC65  F029         	call	_writeEEPROM	;wreg free
 11793                           
 11794                           ;main.c: 2239: rv = readEEPROM(0x74);
 11795  000C18  6A0F               	clrf	?_readEEPROM+1,c
 11796  000C1A  0E74               	movlw	116
 11797  000C1C  6E0E               	movwf	?_readEEPROM,c
 11798  000C1E  EC62  F02A         	call	_readEEPROM	;wreg free
 11799  000C22  D397               	goto	L20
 11800  000C24                     l10920:
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;main.c: 2244: writeEEPROM(0x75, val);
 11804  000C24  6A0F               	clrf	?_writeEEPROM+1,c
 11805  000C26  0E75               	movlw	117
 11806  000C28  6E0E               	movwf	?_writeEEPROM,c
 11807  000C2A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11808  000C2E  EC65  F029         	call	_writeEEPROM	;wreg free
 11809                           
 11810                           ;main.c: 2245: rv = readEEPROM(0x75);
 11811  000C32  6A0F               	clrf	?_readEEPROM+1,c
 11812  000C34  0E75               	movlw	117
 11813  000C36  6E0E               	movwf	?_readEEPROM,c
 11814  000C38  EC62  F02A         	call	_readEEPROM	;wreg free
 11815  000C3C  D38A               	goto	L20
 11816  000C3E                     l10922:
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;main.c: 2250: writeEEPROM(0x76, val);
 11820  000C3E  6A0F               	clrf	?_writeEEPROM+1,c
 11821  000C40  0E76               	movlw	118
 11822  000C42  6E0E               	movwf	?_writeEEPROM,c
 11823  000C44  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11824  000C48  EC65  F029         	call	_writeEEPROM	;wreg free
 11825                           
 11826                           ;main.c: 2251: rv = readEEPROM(0x76);
 11827  000C4C  6A0F               	clrf	?_readEEPROM+1,c
 11828  000C4E  0E76               	movlw	118
 11829  000C50  6E0E               	movwf	?_readEEPROM,c
 11830  000C52  EC62  F02A         	call	_readEEPROM	;wreg free
 11831  000C56  D37D               	goto	L20
 11832  000C58                     l10924:
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;main.c: 2256: writeEEPROM(0x77, val);
 11836  000C58  6A0F               	clrf	?_writeEEPROM+1,c
 11837  000C5A  0E77               	movlw	119
 11838  000C5C  6E0E               	movwf	?_writeEEPROM,c
 11839  000C5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11840  000C62  EC65  F029         	call	_writeEEPROM	;wreg free
 11841                           
 11842                           ;main.c: 2257: rv = readEEPROM(0x77);
 11843  000C66  6A0F               	clrf	?_readEEPROM+1,c
 11844  000C68  0E77               	movlw	119
 11845  000C6A  6E0E               	movwf	?_readEEPROM,c
 11846  000C6C  EC62  F02A         	call	_readEEPROM	;wreg free
 11847  000C70  D370               	goto	L20
 11848  000C72                     l10926:
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;main.c: 2262: writeEEPROM(0x78, val);
 11852  000C72  6A0F               	clrf	?_writeEEPROM+1,c
 11853  000C74  0E78               	movlw	120
 11854  000C76  6E0E               	movwf	?_writeEEPROM,c
 11855  000C78  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11856  000C7C  EC65  F029         	call	_writeEEPROM	;wreg free
 11857                           
 11858                           ;main.c: 2263: rv = readEEPROM(0x78);
 11859  000C80  6A0F               	clrf	?_readEEPROM+1,c
 11860  000C82  0E78               	movlw	120
 11861  000C84  6E0E               	movwf	?_readEEPROM,c
 11862  000C86  EC62  F02A         	call	_readEEPROM	;wreg free
 11863  000C8A  D363               	goto	L20
 11864  000C8C                     l10928:
 11865                           
 11866                           ; BSR set to: 0
 11867                           ;main.c: 2268: writeEEPROM(0x79, val);
 11868  000C8C  6A0F               	clrf	?_writeEEPROM+1,c
 11869  000C8E  0E79               	movlw	121
 11870  000C90  6E0E               	movwf	?_writeEEPROM,c
 11871  000C92  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11872  000C96  EC65  F029         	call	_writeEEPROM	;wreg free
 11873                           
 11874                           ;main.c: 2269: rv = readEEPROM(0x79);
 11875  000C9A  6A0F               	clrf	?_readEEPROM+1,c
 11876  000C9C  0E79               	movlw	121
 11877  000C9E  6E0E               	movwf	?_readEEPROM,c
 11878  000CA0  EC62  F02A         	call	_readEEPROM	;wreg free
 11879  000CA4  D356               	goto	L20
 11880  000CA6                     l10930:
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;main.c: 2274: writeEEPROM(0x7A, val);
 11884  000CA6  6A0F               	clrf	?_writeEEPROM+1,c
 11885  000CA8  0E7A               	movlw	122
 11886  000CAA  6E0E               	movwf	?_writeEEPROM,c
 11887  000CAC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11888  000CB0  EC65  F029         	call	_writeEEPROM	;wreg free
 11889                           
 11890                           ;main.c: 2275: rv = readEEPROM(0x7A);
 11891  000CB4  6A0F               	clrf	?_readEEPROM+1,c
 11892  000CB6  0E7A               	movlw	122
 11893  000CB8  6E0E               	movwf	?_readEEPROM,c
 11894  000CBA  EC62  F02A         	call	_readEEPROM	;wreg free
 11895  000CBE  D349               	goto	L20
 11896  000CC0                     l10932:
 11897                           
 11898                           ; BSR set to: 0
 11899                           ;main.c: 2280: writeEEPROM(0x7B, val);
 11900  000CC0  6A0F               	clrf	?_writeEEPROM+1,c
 11901  000CC2  0E7B               	movlw	123
 11902  000CC4  6E0E               	movwf	?_writeEEPROM,c
 11903  000CC6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11904  000CCA  EC65  F029         	call	_writeEEPROM	;wreg free
 11905                           
 11906                           ;main.c: 2281: rv = readEEPROM(0x7B);
 11907  000CCE  6A0F               	clrf	?_readEEPROM+1,c
 11908  000CD0  0E7B               	movlw	123
 11909  000CD2  6E0E               	movwf	?_readEEPROM,c
 11910  000CD4  EC62  F02A         	call	_readEEPROM	;wreg free
 11911  000CD8  D33C               	goto	L20
 11912  000CDA                     l10934:
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;main.c: 2286: writeEEPROM(0x7C, val);
 11916  000CDA  6A0F               	clrf	?_writeEEPROM+1,c
 11917  000CDC  0E7C               	movlw	124
 11918  000CDE  6E0E               	movwf	?_writeEEPROM,c
 11919  000CE0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11920  000CE4  EC65  F029         	call	_writeEEPROM	;wreg free
 11921                           
 11922                           ;main.c: 2287: rv = readEEPROM(0x7C);
 11923  000CE8  6A0F               	clrf	?_readEEPROM+1,c
 11924  000CEA  0E7C               	movlw	124
 11925  000CEC  6E0E               	movwf	?_readEEPROM,c
 11926  000CEE  EC62  F02A         	call	_readEEPROM	;wreg free
 11927  000CF2  D32F               	goto	L20
 11928  000CF4                     l10936:
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;main.c: 2292: writeEEPROM(0x7D, val);
 11932  000CF4  6A0F               	clrf	?_writeEEPROM+1,c
 11933  000CF6  0E7D               	movlw	125
 11934  000CF8  6E0E               	movwf	?_writeEEPROM,c
 11935  000CFA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11936  000CFE  EC65  F029         	call	_writeEEPROM	;wreg free
 11937                           
 11938                           ;main.c: 2293: rv = readEEPROM(0x7D);
 11939  000D02  6A0F               	clrf	?_readEEPROM+1,c
 11940  000D04  0E7D               	movlw	125
 11941  000D06  6E0E               	movwf	?_readEEPROM,c
 11942  000D08  EC62  F02A         	call	_readEEPROM	;wreg free
 11943  000D0C  D322               	goto	L20
 11944  000D0E                     l10938:
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;main.c: 2298: writeEEPROM(0x7E, val);
 11948  000D0E  6A0F               	clrf	?_writeEEPROM+1,c
 11949  000D10  0E7E               	movlw	126
 11950  000D12  6E0E               	movwf	?_writeEEPROM,c
 11951  000D14  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11952  000D18  EC65  F029         	call	_writeEEPROM	;wreg free
 11953                           
 11954                           ;main.c: 2299: rv = readEEPROM(0x7E);
 11955  000D1C  6A0F               	clrf	?_readEEPROM+1,c
 11956  000D1E  0E7E               	movlw	126
 11957  000D20  6E0E               	movwf	?_readEEPROM,c
 11958  000D22  EC62  F02A         	call	_readEEPROM	;wreg free
 11959  000D26  D315               	goto	L20
 11960  000D28                     l10940:
 11961                           
 11962                           ; BSR set to: 0
 11963                           ;main.c: 2308: writeEEPROM(0x7F, val );
 11964  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 11965  000D2A  0E7F               	movlw	127
 11966  000D2C  6E0E               	movwf	?_writeEEPROM,c
 11967  000D2E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11968  000D32  EC65  F029         	call	_writeEEPROM	;wreg free
 11969                           
 11970                           ;main.c: 2309: rv = readEEPROM(0x7F);
 11971  000D36  6A0F               	clrf	?_readEEPROM+1,c
 11972  000D38  0E7F               	movlw	127
 11973  000D3A  6E0E               	movwf	?_readEEPROM,c
 11974  000D3C  EC62  F02A         	call	_readEEPROM	;wreg free
 11975  000D40  D308               	goto	L20
 11976  000D42                     l10942:
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;main.c: 2314: writeEEPROM(0x80, val );
 11980  000D42  6A0F               	clrf	?_writeEEPROM+1,c
 11981  000D44  0E80               	movlw	128
 11982  000D46  6E0E               	movwf	?_writeEEPROM,c
 11983  000D48  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11984  000D4C  EC65  F029         	call	_writeEEPROM	;wreg free
 11985                           
 11986                           ;main.c: 2315: rv = readEEPROM(0x80);
 11987  000D50  6A0F               	clrf	?_readEEPROM+1,c
 11988  000D52  0E80               	movlw	128
 11989  000D54  6E0E               	movwf	?_readEEPROM,c
 11990  000D56  EC62  F02A         	call	_readEEPROM	;wreg free
 11991  000D5A  D2FB               	goto	L20
 11992  000D5C                     l10944:
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;main.c: 2320: writeEEPROM(0x81, val );
 11996  000D5C  6A0F               	clrf	?_writeEEPROM+1,c
 11997  000D5E  0E81               	movlw	129
 11998  000D60  6E0E               	movwf	?_writeEEPROM,c
 11999  000D62  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12000  000D66  EC65  F029         	call	_writeEEPROM	;wreg free
 12001                           
 12002                           ;main.c: 2321: rv = readEEPROM(0x81);
 12003  000D6A  6A0F               	clrf	?_readEEPROM+1,c
 12004  000D6C  0E81               	movlw	129
 12005  000D6E  6E0E               	movwf	?_readEEPROM,c
 12006  000D70  EC62  F02A         	call	_readEEPROM	;wreg free
 12007  000D74  D2EE               	goto	L20
 12008  000D76                     l10946:
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;main.c: 2326: writeEEPROM(0x82, val );
 12012  000D76  6A0F               	clrf	?_writeEEPROM+1,c
 12013  000D78  0E82               	movlw	130
 12014  000D7A  6E0E               	movwf	?_writeEEPROM,c
 12015  000D7C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12016  000D80  EC65  F029         	call	_writeEEPROM	;wreg free
 12017                           
 12018                           ;main.c: 2327: rv = readEEPROM(0x82);
 12019  000D84  6A0F               	clrf	?_readEEPROM+1,c
 12020  000D86  0E82               	movlw	130
 12021  000D88  6E0E               	movwf	?_readEEPROM,c
 12022  000D8A  EC62  F02A         	call	_readEEPROM	;wreg free
 12023  000D8E  D2E1               	goto	L20
 12024  000D90                     l10948:
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;main.c: 2332: writeEEPROM(0x83, val );
 12028  000D90  6A0F               	clrf	?_writeEEPROM+1,c
 12029  000D92  0E83               	movlw	131
 12030  000D94  6E0E               	movwf	?_writeEEPROM,c
 12031  000D96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12032  000D9A  EC65  F029         	call	_writeEEPROM	;wreg free
 12033                           
 12034                           ;main.c: 2333: rv = readEEPROM(0x83);
 12035  000D9E  6A0F               	clrf	?_readEEPROM+1,c
 12036  000DA0  0E83               	movlw	131
 12037  000DA2  6E0E               	movwf	?_readEEPROM,c
 12038  000DA4  EC62  F02A         	call	_readEEPROM	;wreg free
 12039  000DA8  D2D4               	goto	L20
 12040  000DAA                     l10950:
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;main.c: 2338: writeEEPROM(0x84, val );
 12044  000DAA  6A0F               	clrf	?_writeEEPROM+1,c
 12045  000DAC  0E84               	movlw	132
 12046  000DAE  6E0E               	movwf	?_writeEEPROM,c
 12047  000DB0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12048  000DB4  EC65  F029         	call	_writeEEPROM	;wreg free
 12049                           
 12050                           ;main.c: 2339: rv = readEEPROM(0x84);
 12051  000DB8  6A0F               	clrf	?_readEEPROM+1,c
 12052  000DBA  0E84               	movlw	132
 12053  000DBC  6E0E               	movwf	?_readEEPROM,c
 12054  000DBE  EC62  F02A         	call	_readEEPROM	;wreg free
 12055  000DC2  D2C7               	goto	L20
 12056  000DC4                     l10952:
 12057                           
 12058                           ; BSR set to: 0
 12059                           ;main.c: 2344: writeEEPROM(0x85, val );
 12060  000DC4  6A0F               	clrf	?_writeEEPROM+1,c
 12061  000DC6  0E85               	movlw	133
 12062  000DC8  6E0E               	movwf	?_writeEEPROM,c
 12063  000DCA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12064  000DCE  EC65  F029         	call	_writeEEPROM	;wreg free
 12065                           
 12066                           ;main.c: 2345: rv = readEEPROM(0x85);
 12067  000DD2  6A0F               	clrf	?_readEEPROM+1,c
 12068  000DD4  0E85               	movlw	133
 12069  000DD6  6E0E               	movwf	?_readEEPROM,c
 12070  000DD8  EC62  F02A         	call	_readEEPROM	;wreg free
 12071  000DDC  D2BA               	goto	L20
 12072  000DDE                     l10954:
 12073                           
 12074                           ; BSR set to: 0
 12075                           ;main.c: 2350: writeEEPROM(0x86, val );
 12076  000DDE  6A0F               	clrf	?_writeEEPROM+1,c
 12077  000DE0  0E86               	movlw	134
 12078  000DE2  6E0E               	movwf	?_writeEEPROM,c
 12079  000DE4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12080  000DE8  EC65  F029         	call	_writeEEPROM	;wreg free
 12081                           
 12082                           ;main.c: 2351: rv = readEEPROM(0x86);
 12083  000DEC  6A0F               	clrf	?_readEEPROM+1,c
 12084  000DEE  0E86               	movlw	134
 12085  000DF0  6E0E               	movwf	?_readEEPROM,c
 12086  000DF2  EC62  F02A         	call	_readEEPROM	;wreg free
 12087  000DF6  D2AD               	goto	L20
 12088  000DF8                     l10956:
 12089                           
 12090                           ; BSR set to: 0
 12091                           ;main.c: 2356: writeEEPROM(0x87, val );
 12092  000DF8  6A0F               	clrf	?_writeEEPROM+1,c
 12093  000DFA  0E87               	movlw	135
 12094  000DFC  6E0E               	movwf	?_writeEEPROM,c
 12095  000DFE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12096  000E02  EC65  F029         	call	_writeEEPROM	;wreg free
 12097                           
 12098                           ;main.c: 2357: rv = readEEPROM(0x87);
 12099  000E06  6A0F               	clrf	?_readEEPROM+1,c
 12100  000E08  0E87               	movlw	135
 12101  000E0A  6E0E               	movwf	?_readEEPROM,c
 12102  000E0C  EC62  F02A         	call	_readEEPROM	;wreg free
 12103  000E10  D2A0               	goto	L20
 12104  000E12                     l10958:
 12105                           
 12106                           ; BSR set to: 0
 12107                           ;main.c: 2362: writeEEPROM(0x88, val );
 12108  000E12  6A0F               	clrf	?_writeEEPROM+1,c
 12109  000E14  0E88               	movlw	136
 12110  000E16  6E0E               	movwf	?_writeEEPROM,c
 12111  000E18  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12112  000E1C  EC65  F029         	call	_writeEEPROM	;wreg free
 12113                           
 12114                           ;main.c: 2363: rv = readEEPROM(0x88);
 12115  000E20  6A0F               	clrf	?_readEEPROM+1,c
 12116  000E22  0E88               	movlw	136
 12117  000E24  6E0E               	movwf	?_readEEPROM,c
 12118  000E26  EC62  F02A         	call	_readEEPROM	;wreg free
 12119  000E2A  D293               	goto	L20
 12120  000E2C                     l10960:
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;main.c: 2368: writeEEPROM(0x89, val );
 12124  000E2C  6A0F               	clrf	?_writeEEPROM+1,c
 12125  000E2E  0E89               	movlw	137
 12126  000E30  6E0E               	movwf	?_writeEEPROM,c
 12127  000E32  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12128  000E36  EC65  F029         	call	_writeEEPROM	;wreg free
 12129                           
 12130                           ;main.c: 2369: rv = readEEPROM(0x89);
 12131  000E3A  6A0F               	clrf	?_readEEPROM+1,c
 12132  000E3C  0E89               	movlw	137
 12133  000E3E  6E0E               	movwf	?_readEEPROM,c
 12134  000E40  EC62  F02A         	call	_readEEPROM	;wreg free
 12135  000E44  D286               	goto	L20
 12136  000E46                     l10962:
 12137                           
 12138                           ; BSR set to: 0
 12139                           ;main.c: 2374: writeEEPROM(0x8A, val );
 12140  000E46  6A0F               	clrf	?_writeEEPROM+1,c
 12141  000E48  0E8A               	movlw	138
 12142  000E4A  6E0E               	movwf	?_writeEEPROM,c
 12143  000E4C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12144  000E50  EC65  F029         	call	_writeEEPROM	;wreg free
 12145                           
 12146                           ;main.c: 2375: rv = readEEPROM(0x8A);
 12147  000E54  6A0F               	clrf	?_readEEPROM+1,c
 12148  000E56  0E8A               	movlw	138
 12149  000E58  6E0E               	movwf	?_readEEPROM,c
 12150  000E5A  EC62  F02A         	call	_readEEPROM	;wreg free
 12151  000E5E  D279               	goto	L20
 12152  000E60                     l10964:
 12153                           
 12154                           ; BSR set to: 0
 12155                           ;main.c: 2384: writeEEPROM(0x8B, val );
 12156  000E60  6A0F               	clrf	?_writeEEPROM+1,c
 12157  000E62  0E8B               	movlw	139
 12158  000E64  6E0E               	movwf	?_writeEEPROM,c
 12159  000E66  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12160  000E6A  EC65  F029         	call	_writeEEPROM	;wreg free
 12161                           
 12162                           ;main.c: 2385: rv = readEEPROM(0x8B);
 12163  000E6E  6A0F               	clrf	?_readEEPROM+1,c
 12164  000E70  0E8B               	movlw	139
 12165  000E72  6E0E               	movwf	?_readEEPROM,c
 12166  000E74  EC62  F02A         	call	_readEEPROM	;wreg free
 12167  000E78  D26C               	goto	L20
 12168  000E7A                     l10966:
 12169                           
 12170                           ; BSR set to: 0
 12171                           ;main.c: 2390: writeEEPROM(0x8C, val );
 12172  000E7A  6A0F               	clrf	?_writeEEPROM+1,c
 12173  000E7C  0E8C               	movlw	140
 12174  000E7E  6E0E               	movwf	?_writeEEPROM,c
 12175  000E80  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12176  000E84  EC65  F029         	call	_writeEEPROM	;wreg free
 12177                           
 12178                           ;main.c: 2391: rv = readEEPROM(0x8C);
 12179  000E88  6A0F               	clrf	?_readEEPROM+1,c
 12180  000E8A  0E8C               	movlw	140
 12181  000E8C  6E0E               	movwf	?_readEEPROM,c
 12182  000E8E  EC62  F02A         	call	_readEEPROM	;wreg free
 12183  000E92  D25F               	goto	L20
 12184  000E94                     l10968:
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;main.c: 2396: writeEEPROM(0x8D, val );
 12188  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 12189  000E96  0E8D               	movlw	141
 12190  000E98  6E0E               	movwf	?_writeEEPROM,c
 12191  000E9A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12192  000E9E  EC65  F029         	call	_writeEEPROM	;wreg free
 12193                           
 12194                           ;main.c: 2397: rv = readEEPROM(0x8D);
 12195  000EA2  6A0F               	clrf	?_readEEPROM+1,c
 12196  000EA4  0E8D               	movlw	141
 12197  000EA6  6E0E               	movwf	?_readEEPROM,c
 12198  000EA8  EC62  F02A         	call	_readEEPROM	;wreg free
 12199  000EAC  D252               	goto	L20
 12200  000EAE                     l10970:
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;main.c: 2402: writeEEPROM(0x8E, val );
 12204  000EAE  6A0F               	clrf	?_writeEEPROM+1,c
 12205  000EB0  0E8E               	movlw	142
 12206  000EB2  6E0E               	movwf	?_writeEEPROM,c
 12207  000EB4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12208  000EB8  EC65  F029         	call	_writeEEPROM	;wreg free
 12209                           
 12210                           ;main.c: 2403: rv = readEEPROM(0x8E);
 12211  000EBC  6A0F               	clrf	?_readEEPROM+1,c
 12212  000EBE  0E8E               	movlw	142
 12213  000EC0  6E0E               	movwf	?_readEEPROM,c
 12214  000EC2  EC62  F02A         	call	_readEEPROM	;wreg free
 12215  000EC6  D245               	goto	L20
 12216  000EC8                     l10972:
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;main.c: 2408: writeEEPROM(0x8F, val );
 12220  000EC8  6A0F               	clrf	?_writeEEPROM+1,c
 12221  000ECA  0E8F               	movlw	143
 12222  000ECC  6E0E               	movwf	?_writeEEPROM,c
 12223  000ECE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12224  000ED2  EC65  F029         	call	_writeEEPROM	;wreg free
 12225                           
 12226                           ;main.c: 2409: rv = readEEPROM(0x8F);
 12227  000ED6  6A0F               	clrf	?_readEEPROM+1,c
 12228  000ED8  0E8F               	movlw	143
 12229  000EDA  6E0E               	movwf	?_readEEPROM,c
 12230  000EDC  EC62  F02A         	call	_readEEPROM	;wreg free
 12231  000EE0  D238               	goto	L20
 12232  000EE2                     l10974:
 12233                           
 12234                           ; BSR set to: 0
 12235                           ;main.c: 2414: writeEEPROM(0x90, val );
 12236  000EE2  6A0F               	clrf	?_writeEEPROM+1,c
 12237  000EE4  0E90               	movlw	144
 12238  000EE6  6E0E               	movwf	?_writeEEPROM,c
 12239  000EE8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12240  000EEC  EC65  F029         	call	_writeEEPROM	;wreg free
 12241                           
 12242                           ;main.c: 2415: rv = readEEPROM(0x90);
 12243  000EF0  6A0F               	clrf	?_readEEPROM+1,c
 12244  000EF2  0E90               	movlw	144
 12245  000EF4  6E0E               	movwf	?_readEEPROM,c
 12246  000EF6  EC62  F02A         	call	_readEEPROM	;wreg free
 12247  000EFA  D22B               	goto	L20
 12248  000EFC                     l10976:
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;main.c: 2420: writeEEPROM(0x91, val );
 12252  000EFC  6A0F               	clrf	?_writeEEPROM+1,c
 12253  000EFE  0E91               	movlw	145
 12254  000F00  6E0E               	movwf	?_writeEEPROM,c
 12255  000F02  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12256  000F06  EC65  F029         	call	_writeEEPROM	;wreg free
 12257                           
 12258                           ;main.c: 2421: rv = readEEPROM(0x91);
 12259  000F0A  6A0F               	clrf	?_readEEPROM+1,c
 12260  000F0C  0E91               	movlw	145
 12261  000F0E  6E0E               	movwf	?_readEEPROM,c
 12262  000F10  EC62  F02A         	call	_readEEPROM	;wreg free
 12263  000F14  D21E               	goto	L20
 12264  000F16                     l10978:
 12265                           
 12266                           ; BSR set to: 0
 12267                           ;main.c: 2426: writeEEPROM(0x92, val );
 12268  000F16  6A0F               	clrf	?_writeEEPROM+1,c
 12269  000F18  0E92               	movlw	146
 12270  000F1A  6E0E               	movwf	?_writeEEPROM,c
 12271  000F1C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12272  000F20  EC65  F029         	call	_writeEEPROM	;wreg free
 12273                           
 12274                           ;main.c: 2427: rv = readEEPROM(0x92);
 12275  000F24  6A0F               	clrf	?_readEEPROM+1,c
 12276  000F26  0E92               	movlw	146
 12277  000F28  6E0E               	movwf	?_readEEPROM,c
 12278  000F2A  EC62  F02A         	call	_readEEPROM	;wreg free
 12279  000F2E  D211               	goto	L20
 12280  000F30                     l10980:
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;main.c: 2432: writeEEPROM(0x93, val );
 12284  000F30  6A0F               	clrf	?_writeEEPROM+1,c
 12285  000F32  0E93               	movlw	147
 12286  000F34  6E0E               	movwf	?_writeEEPROM,c
 12287  000F36  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12288  000F3A  EC65  F029         	call	_writeEEPROM	;wreg free
 12289                           
 12290                           ;main.c: 2433: rv = readEEPROM(0x93);
 12291  000F3E  6A0F               	clrf	?_readEEPROM+1,c
 12292  000F40  0E93               	movlw	147
 12293  000F42  6E0E               	movwf	?_readEEPROM,c
 12294  000F44  EC62  F02A         	call	_readEEPROM	;wreg free
 12295  000F48  D204               	goto	L20
 12296  000F4A                     l10982:
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;main.c: 2438: writeEEPROM(0x94, val );
 12300  000F4A  6A0F               	clrf	?_writeEEPROM+1,c
 12301  000F4C  0E94               	movlw	148
 12302  000F4E  6E0E               	movwf	?_writeEEPROM,c
 12303  000F50  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12304  000F54  EC65  F029         	call	_writeEEPROM	;wreg free
 12305                           
 12306                           ;main.c: 2439: rv = readEEPROM(0x94);
 12307  000F58  6A0F               	clrf	?_readEEPROM+1,c
 12308  000F5A  0E94               	movlw	148
 12309  000F5C  6E0E               	movwf	?_readEEPROM,c
 12310  000F5E  EC62  F02A         	call	_readEEPROM	;wreg free
 12311  000F62  D1F7               	goto	L20
 12312  000F64                     l10984:
 12313                           
 12314                           ; BSR set to: 0
 12315                           ;main.c: 2444: writeEEPROM(0x95, val );
 12316  000F64  6A0F               	clrf	?_writeEEPROM+1,c
 12317  000F66  0E95               	movlw	149
 12318  000F68  6E0E               	movwf	?_writeEEPROM,c
 12319  000F6A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12320  000F6E  EC65  F029         	call	_writeEEPROM	;wreg free
 12321                           
 12322                           ;main.c: 2445: rv = readEEPROM(0x95);
 12323  000F72  6A0F               	clrf	?_readEEPROM+1,c
 12324  000F74  0E95               	movlw	149
 12325  000F76  6E0E               	movwf	?_readEEPROM,c
 12326  000F78  EC62  F02A         	call	_readEEPROM	;wreg free
 12327  000F7C  D1EA               	goto	L20
 12328  000F7E                     l10986:
 12329                           
 12330                           ; BSR set to: 0
 12331                           ;main.c: 2450: writeEEPROM(0x96, val );
 12332  000F7E  6A0F               	clrf	?_writeEEPROM+1,c
 12333  000F80  0E96               	movlw	150
 12334  000F82  6E0E               	movwf	?_writeEEPROM,c
 12335  000F84  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12336  000F88  EC65  F029         	call	_writeEEPROM	;wreg free
 12337                           
 12338                           ;main.c: 2451: rv = readEEPROM(0x96);
 12339  000F8C  6A0F               	clrf	?_readEEPROM+1,c
 12340  000F8E  0E96               	movlw	150
 12341  000F90  6E0E               	movwf	?_readEEPROM,c
 12342  000F92  EC62  F02A         	call	_readEEPROM	;wreg free
 12343  000F96  D1DD               	goto	L20
 12344  000F98                     l10988:
 12345                           
 12346                           ; BSR set to: 0
 12347                           ;main.c: 2460: writeEEPROM(0x97, val);
 12348  000F98  6A0F               	clrf	?_writeEEPROM+1,c
 12349  000F9A  0E97               	movlw	151
 12350  000F9C  6E0E               	movwf	?_writeEEPROM,c
 12351  000F9E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12352  000FA2  EC65  F029         	call	_writeEEPROM	;wreg free
 12353                           
 12354                           ;main.c: 2461: rv = readEEPROM(0x97);
 12355  000FA6  6A0F               	clrf	?_readEEPROM+1,c
 12356  000FA8  0E97               	movlw	151
 12357  000FAA  6E0E               	movwf	?_readEEPROM,c
 12358  000FAC  EC62  F02A         	call	_readEEPROM	;wreg free
 12359  000FB0  D1D0               	goto	L20
 12360  000FB2                     l10990:
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;main.c: 2466: writeEEPROM(0x98, val);
 12364  000FB2  6A0F               	clrf	?_writeEEPROM+1,c
 12365  000FB4  0E98               	movlw	152
 12366  000FB6  6E0E               	movwf	?_writeEEPROM,c
 12367  000FB8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12368  000FBC  EC65  F029         	call	_writeEEPROM	;wreg free
 12369                           
 12370                           ;main.c: 2467: rv = readEEPROM(0x98);
 12371  000FC0  6A0F               	clrf	?_readEEPROM+1,c
 12372  000FC2  0E98               	movlw	152
 12373  000FC4  6E0E               	movwf	?_readEEPROM,c
 12374  000FC6  EC62  F02A         	call	_readEEPROM	;wreg free
 12375  000FCA  D1C3               	goto	L20
 12376  000FCC                     l10992:
 12377                           
 12378                           ; BSR set to: 0
 12379                           ;main.c: 2472: writeEEPROM(0x99, val);
 12380  000FCC  6A0F               	clrf	?_writeEEPROM+1,c
 12381  000FCE  0E99               	movlw	153
 12382  000FD0  6E0E               	movwf	?_writeEEPROM,c
 12383  000FD2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12384  000FD6  EC65  F029         	call	_writeEEPROM	;wreg free
 12385  000FDA  6A0F               	clrf	?_readEEPROM+1,c
 12386  000FDC  0E99               	movlw	153
 12387  000FDE  6E0E               	movwf	?_readEEPROM,c
 12388  000FE0  EC62  F02A         	call	_readEEPROM	;wreg free
 12389  000FE4                     l519:
 12390                           
 12391                           ;main.c: 2477: writeEEPROM(0x9A, val);
 12392  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 12393  000FE6  0E9A               	movlw	154
 12394  000FE8  6E0E               	movwf	?_writeEEPROM,c
 12395  000FEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12396  000FEE  EC65  F029         	call	_writeEEPROM	;wreg free
 12397                           
 12398                           ;main.c: 2478: rv = readEEPROM(0x9A);
 12399  000FF2  6A0F               	clrf	?_readEEPROM+1,c
 12400  000FF4  0E9A               	movlw	154
 12401  000FF6  6E0E               	movwf	?_readEEPROM,c
 12402  000FF8  EC62  F02A         	call	_readEEPROM	;wreg free
 12403  000FFC  D1AA               	goto	L20
 12404  000FFE                     l10994:
 12405                           
 12406                           ; BSR set to: 0
 12407                           ;main.c: 2483: writeEEPROM(0x9B, val);
 12408  000FFE  6A0F               	clrf	?_writeEEPROM+1,c
 12409  001000  0E9B               	movlw	155
 12410  001002  6E0E               	movwf	?_writeEEPROM,c
 12411  001004  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12412  001008  EC65  F029         	call	_writeEEPROM	;wreg free
 12413                           
 12414                           ;main.c: 2484: rv = readEEPROM(0x9B);
 12415  00100C  6A0F               	clrf	?_readEEPROM+1,c
 12416  00100E  0E9B               	movlw	155
 12417  001010  6E0E               	movwf	?_readEEPROM,c
 12418  001012  EC62  F02A         	call	_readEEPROM	;wreg free
 12419  001016  D19D               	goto	L20
 12420  001018                     l10996:
 12421                           
 12422                           ; BSR set to: 0
 12423                           ;main.c: 2489: writeEEPROM(0x9C, val);
 12424  001018  6A0F               	clrf	?_writeEEPROM+1,c
 12425  00101A  0E9C               	movlw	156
 12426  00101C  6E0E               	movwf	?_writeEEPROM,c
 12427  00101E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12428  001022  EC65  F029         	call	_writeEEPROM	;wreg free
 12429                           
 12430                           ;main.c: 2490: rv = readEEPROM(0x9C);
 12431  001026  6A0F               	clrf	?_readEEPROM+1,c
 12432  001028  0E9C               	movlw	156
 12433  00102A  6E0E               	movwf	?_readEEPROM,c
 12434  00102C  EC62  F02A         	call	_readEEPROM	;wreg free
 12435  001030  D190               	goto	L20
 12436  001032                     l522:
 12437                           
 12438                           ; BSR set to: 0
 12439                           ;main.c: 2495: rv = 0;
 12440  001032  6A24               	clrf	vscp_writeAppReg@rv,c
 12441                           
 12442                           ;main.c: 2496: break;
 12443  001034  D18F               	goto	l11032
 12444  001036                     l10998:
 12445                           
 12446                           ; BSR set to: 0
 12447                           ;main.c: 2504: writeEEPROM(0xF2, val);
 12448  001036  6A0F               	clrf	?_writeEEPROM+1,c
 12449  001038  0EF2               	movlw	242
 12450  00103A  6E0E               	movwf	?_writeEEPROM,c
 12451  00103C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12452  001040  EC65  F029         	call	_writeEEPROM	;wreg free
 12453                           
 12454                           ;main.c: 2505: rv = readEEPROM(0xF2);
 12455  001044  6A0F               	clrf	?_readEEPROM+1,c
 12456  001046  0EF2               	movlw	242
 12457  001048  6E0E               	movwf	?_readEEPROM,c
 12458  00104A  EC62  F02A         	call	_readEEPROM	;wreg free
 12459  00104E  D181               	goto	L20
 12460  001050                     l11000:
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;main.c: 2509: writeEEPROM(0xF3, val);
 12464  001050  6A0F               	clrf	?_writeEEPROM+1,c
 12465  001052  0EF3               	movlw	243
 12466  001054  6E0E               	movwf	?_writeEEPROM,c
 12467  001056  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12468  00105A  EC65  F029         	call	_writeEEPROM	;wreg free
 12469                           
 12470                           ;main.c: 2510: rv = readEEPROM(0xF3);
 12471  00105E  6A0F               	clrf	?_readEEPROM+1,c
 12472  001060  0EF3               	movlw	243
 12473  001062  6E0E               	movwf	?_readEEPROM,c
 12474  001064  EC62  F02A         	call	_readEEPROM	;wreg free
 12475  001068  D174               	goto	L20
 12476  00106A                     l11002:
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;main.c: 2514: rv = ~val;
 12480  00106A  1C21               	comf	vscp_writeAppReg@val,w,c
 12481  00106C  D172               	goto	L20
 12482  00106E                     l11006:
 12483                           
 12484                           ; BSR set to: 0
 12485  00106E  5023               	movf	vscp_writeAppReg@reg,w,c
 12486                           
 12487                           ; Switch size 1, requested type "space"
 12488                           ; Number of cases is 96, Range of values is 0 to 119
 12489                           ; switch strategies available:
 12490                           ; Name         Instructions Cycles
 12491                           ; simple_byte          289   145 (average)
 12492                           ;	Chosen strategy is simple_byte
 12493  001070  E102 EF42  F003    	bz	l10816
 12494  001076  0A01               	xorlw	1	; case 1
 12495  001078  E102 EF50  F003    	bz	l10818
 12496  00107E  0A03               	xorlw	3	; case 2
 12497  001080  E102 EF5E  F003    	bz	l10820
 12498  001086  0A01               	xorlw	1	; case 3
 12499  001088  E102 EF6C  F003    	bz	l10822
 12500  00108E  0A07               	xorlw	7	; case 4
 12501  001090  E102 EF7A  F003    	bz	l10824
 12502  001096  0A01               	xorlw	1	; case 5
 12503  001098  E102 EF88  F003    	bz	l10826
 12504  00109E  0A03               	xorlw	3	; case 6
 12505  0010A0  E102 EF96  F003    	bz	l10828
 12506  0010A6  0A01               	xorlw	1	; case 7
 12507  0010A8  E102 EFA4  F003    	bz	l10830
 12508  0010AE  0A13               	xorlw	19	; case 20
 12509  0010B0  E102 EFB2  F003    	bz	l10832
 12510  0010B6  0A01               	xorlw	1	; case 21
 12511  0010B8  E102 EFC0  F003    	bz	l10834
 12512  0010BE  0A03               	xorlw	3	; case 22
 12513  0010C0  E102 EFCE  F003    	bz	l10836
 12514  0010C6  0A01               	xorlw	1	; case 23
 12515  0010C8  E102 EFDC  F003    	bz	l10838
 12516  0010CE  0A0F               	xorlw	15	; case 24
 12517  0010D0  E102 EFEA  F003    	bz	l10840
 12518  0010D6  0A01               	xorlw	1	; case 25
 12519  0010D8  E102 EFF8  F003    	bz	l10842
 12520  0010DE  0A3F               	xorlw	63	; case 38
 12521  0010E0  E102 EF06  F004    	bz	l10844
 12522  0010E6  0A01               	xorlw	1	; case 39
 12523  0010E8  E102 EF14  F004    	bz	l10846
 12524  0010EE  0A0F               	xorlw	15	; case 40
 12525  0010F0  E102 EF22  F004    	bz	l10848
 12526  0010F6  0A01               	xorlw	1	; case 41
 12527  0010F8  E102 EF30  F004    	bz	l10850
 12528  0010FE  0A03               	xorlw	3	; case 42
 12529  001100  E102 EF3E  F004    	bz	l10852
 12530  001106  0A01               	xorlw	1	; case 43
 12531  001108  E102 EF4C  F004    	bz	l10854
 12532  00110E  0A07               	xorlw	7	; case 44
 12533  001110  E102 EF5A  F004    	bz	l10856
 12534  001116  0A01               	xorlw	1	; case 45
 12535  001118  E102 EF68  F004    	bz	l10858
 12536  00111E  0A03               	xorlw	3	; case 46
 12537  001120  E102 EF76  F004    	bz	l10860
 12538  001126  0A01               	xorlw	1	; case 47
 12539  001128  E102 EF84  F004    	bz	l10862
 12540  00112E  0A1F               	xorlw	31	; case 48
 12541  001130  E102 EF92  F004    	bz	l10864
 12542  001136  0A01               	xorlw	1	; case 49
 12543  001138  E101 D402          	bz	l10866
 12544  00113C  0A03               	xorlw	3	; case 50
 12545  00113E  E101 D40D          	bz	l10868
 12546  001142  0A01               	xorlw	1	; case 51
 12547  001144  E101 D418          	bz	l10870
 12548  001148  0A07               	xorlw	7	; case 52
 12549  00114A  E101 D423          	bz	l10872
 12550  00114E  0A01               	xorlw	1	; case 53
 12551  001150  E101 D42E          	bz	l10874
 12552  001154  0A03               	xorlw	3	; case 54
 12553  001156  E101 D439          	bz	l10876
 12554  00115A  0A01               	xorlw	1	; case 55
 12555  00115C  E101 D444          	bz	l10878
 12556  001160  0A0F               	xorlw	15	; case 56
 12557  001162  E101 D44F          	bz	l10880
 12558  001166  0A01               	xorlw	1	; case 57
 12559  001168  E101 D45A          	bz	l10882
 12560  00116C  0A03               	xorlw	3	; case 58
 12561  00116E  E101 D465          	bz	l10884
 12562  001172  0A01               	xorlw	1	; case 59
 12563  001174  E101 D470          	bz	l10886
 12564  001178  0A07               	xorlw	7	; case 60
 12565  00117A  E101 D47B          	bz	l10888
 12566  00117E  0A01               	xorlw	1	; case 61
 12567  001180  E101 D486          	bz	l10890
 12568  001184  0A03               	xorlw	3	; case 62
 12569  001186  E101 D491          	bz	l10892
 12570  00118A  0A01               	xorlw	1	; case 63
 12571  00118C  E101 D49C          	bz	l10894
 12572  001190  0A7F               	xorlw	127	; case 64
 12573  001192  E101 D4A7          	bz	l10896
 12574  001196  0A01               	xorlw	1	; case 65
 12575  001198  E101 D4B2          	bz	l10898
 12576  00119C  0A03               	xorlw	3	; case 66
 12577  00119E  E101 D4BD          	bz	l10900
 12578  0011A2  0A01               	xorlw	1	; case 67
 12579  0011A4  E101 D4C8          	bz	l10902
 12580  0011A8  0A07               	xorlw	7	; case 68
 12581  0011AA  E101 D4D3          	bz	l10904
 12582  0011AE  0A01               	xorlw	1	; case 69
 12583  0011B0  E101 D4DD          	bz	l10906
 12584  0011B4  0A03               	xorlw	3	; case 70
 12585  0011B6  E101 D4E7          	bz	l10908
 12586  0011BA  0A01               	xorlw	1	; case 71
 12587  0011BC  E101 D4F1          	bz	l10910
 12588  0011C0  0A0F               	xorlw	15	; case 72
 12589  0011C2  E101 D4FB          	bz	l10912
 12590  0011C6  0A01               	xorlw	1	; case 73
 12591  0011C8  E101 D505          	bz	l10914
 12592  0011CC  0A03               	xorlw	3	; case 74
 12593  0011CE  E101 D50F          	bz	l10916
 12594  0011D2  0A01               	xorlw	1	; case 75
 12595  0011D4  E101 D519          	bz	l10918
 12596  0011D8  0A07               	xorlw	7	; case 76
 12597  0011DA  E101 D523          	bz	l10920
 12598  0011DE  0A01               	xorlw	1	; case 77
 12599  0011E0  E101 D52D          	bz	l10922
 12600  0011E4  0A03               	xorlw	3	; case 78
 12601  0011E6  E101 D537          	bz	l10924
 12602  0011EA  0A01               	xorlw	1	; case 79
 12603  0011EC  E101 D541          	bz	l10926
 12604  0011F0  0A1F               	xorlw	31	; case 80
 12605  0011F2  E101 D54B          	bz	l10928
 12606  0011F6  0A01               	xorlw	1	; case 81
 12607  0011F8  E101 D555          	bz	l10930
 12608  0011FC  0A03               	xorlw	3	; case 82
 12609  0011FE  E101 D55F          	bz	l10932
 12610  001202  0A01               	xorlw	1	; case 83
 12611  001204  E101 D569          	bz	l10934
 12612  001208  0A07               	xorlw	7	; case 84
 12613  00120A  E101 D573          	bz	l10936
 12614  00120E  0A01               	xorlw	1	; case 85
 12615  001210  E101 D57D          	bz	l10938
 12616  001214  0A03               	xorlw	3	; case 86
 12617  001216  E101 D587          	bz	l10940
 12618  00121A  0A01               	xorlw	1	; case 87
 12619  00121C  E101 D591          	bz	l10942
 12620  001220  0A0F               	xorlw	15	; case 88
 12621  001222  E101 D59B          	bz	l10944
 12622  001226  0A01               	xorlw	1	; case 89
 12623  001228  E101 D5A5          	bz	l10946
 12624  00122C  0A03               	xorlw	3	; case 90
 12625  00122E  E101 D5AF          	bz	l10948
 12626  001232  0A01               	xorlw	1	; case 91
 12627  001234  E101 D5B9          	bz	l10950
 12628  001238  0A07               	xorlw	7	; case 92
 12629  00123A  E101 D5C3          	bz	l10952
 12630  00123E  0A01               	xorlw	1	; case 93
 12631  001240  E101 D5CD          	bz	l10954
 12632  001244  0A03               	xorlw	3	; case 94
 12633  001246  E101 D5D7          	bz	l10956
 12634  00124A  0A01               	xorlw	1	; case 95
 12635  00124C  E101 D5E1          	bz	l10958
 12636  001250  0A3F               	xorlw	63	; case 96
 12637  001252  E101 D5EB          	bz	l10960
 12638  001256  0A01               	xorlw	1	; case 97
 12639  001258  E101 D5F5          	bz	l10962
 12640  00125C  0A03               	xorlw	3	; case 98
 12641  00125E  E101 D5FF          	bz	l10964
 12642  001262  0A01               	xorlw	1	; case 99
 12643  001264  E101 D609          	bz	l10966
 12644  001268  0A07               	xorlw	7	; case 100
 12645  00126A  E101 D613          	bz	l10968
 12646  00126E  0A01               	xorlw	1	; case 101
 12647  001270  E101 D61D          	bz	l10970
 12648  001274  0A03               	xorlw	3	; case 102
 12649  001276  E101 D627          	bz	l10972
 12650  00127A  0A01               	xorlw	1	; case 103
 12651  00127C  E101 D631          	bz	l10974
 12652  001280  0A0F               	xorlw	15	; case 104
 12653  001282  E101 D63B          	bz	l10976
 12654  001286  0A01               	xorlw	1	; case 105
 12655  001288  E101 D645          	bz	l10978
 12656  00128C  0A03               	xorlw	3	; case 106
 12657  00128E  E101 D64F          	bz	l10980
 12658  001292  0A01               	xorlw	1	; case 107
 12659  001294  E101 D659          	bz	l10982
 12660  001298  0A07               	xorlw	7	; case 108
 12661  00129A  E101 D663          	bz	l10984
 12662  00129E  0A01               	xorlw	1	; case 109
 12663  0012A0  E101 D66D          	bz	l10986
 12664  0012A4  0A03               	xorlw	3	; case 110
 12665  0012A6  E101 D677          	bz	l10988
 12666  0012AA  0A01               	xorlw	1	; case 111
 12667  0012AC  E101 D681          	bz	l10990
 12668  0012B0  0A1F               	xorlw	31	; case 112
 12669  0012B2  E101 D68B          	bz	l10992
 12670  0012B6  0A01               	xorlw	1	; case 113
 12671  0012B8  E101 D694          	bz	l519
 12672  0012BC  0A03               	xorlw	3	; case 114
 12673  0012BE  E101 D69E          	bz	l10994
 12674  0012C2  0A01               	xorlw	1	; case 115
 12675  0012C4  E101 D6A8          	bz	l10996
 12676  0012C8  0A07               	xorlw	7	; case 116
 12677  0012CA  E101 D6B2          	bz	l522
 12678  0012CE  0A01               	xorlw	1	; case 117
 12679  0012D0  E101 D6AF          	bz	l522
 12680  0012D4  0A03               	xorlw	3	; case 118
 12681  0012D6  E101 D6AE          	bz	l10998
 12682  0012DA  0A01               	xorlw	1	; case 119
 12683  0012DC  E101 D6B8          	bz	l11000
 12684  0012E0  D6C4               	goto	l11002
 12685  0012E2                     l11008:
 12686                           
 12687                           ; BSR set to: 0
 12688                           ;main.c: 2518: else if (1 == vscp_page_select) {
 12689  0012E2  0446               	decf	_vscp_page_select,w,c
 12690  0012E4  1047               	iorwf	_vscp_page_select+1,w,c
 12691  0012E6  E136               	bnz	l11032
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;main.c: 2521: if (reg < 72) {
 12695  0012E8  0E48               	movlw	72
 12696  0012EA  6023               	cpfslt	vscp_writeAppReg@reg,c
 12697  0012EC  D010               	goto	l11016
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;main.c: 2522: writeEEPROM(0xAA + reg, val);
 12701  0012EE  0EAA               	movlw	170
 12702  0012F0  D833               	call	PL66	;call to abstracted procedure
 12703  0012F2  EC65  F029         	call	_writeEEPROM	;wreg free
 12704                           
 12705                           ;main.c: 2523: rv = readEEPROM(0xAA + reg );
 12706  0012F6  0EAA               	movlw	170
 12707  0012F8  2423               	addwf	vscp_writeAppReg@reg,w,c
 12708  0012FA  6E0E               	movwf	?_readEEPROM,c
 12709  0012FC  6A0F               	clrf	?_readEEPROM+1,c
 12710  0012FE  0E00               	movlw	0
 12711  001300  220F               	addwfc	?_readEEPROM+1,f,c
 12712  001302  EC62  F02A         	call	_readEEPROM	;wreg free
 12713  001306  6E24               	movwf	vscp_writeAppReg@rv,c
 12714                           
 12715                           ;main.c: 2524: writeCoeffs2Ram();
 12716  001308  ECE3  F023         	call	_writeCoeffs2Ram	;wreg free
 12717                           
 12718                           ;main.c: 2525: }
 12719  00130C  D023               	goto	l11032
 12720  00130E                     l11016:
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;main.c: 2527: else if (reg < 84) {
 12724  00130E  0E54               	movlw	84
 12725  001310  6023               	cpfslt	vscp_writeAppReg@reg,c
 12726  001312  D010               	goto	l11028
 12727                           
 12728                           ; BSR set to: 0
 12729                           ;main.c: 2529: uint8_t pos = reg - 72;
 12730  001314  5023               	movf	vscp_writeAppReg@reg,w,c
 12731  001316  0FB8               	addlw	184
 12732  001318  6E22               	movwf	vscp_writeAppReg@pos,c
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;main.c: 2530: if ( pos % 2 ) {
 12736  00131A  A022               	btfss	vscp_writeAppReg@pos,0,c
 12737  00131C  D002               	goto	l11024
 12738                           
 12739                           ; BSR set to: 0
 12740                           ;main.c: 2531: pos--;
 12741  00131E  0622               	decf	vscp_writeAppReg@pos,f,c
 12742                           
 12743                           ;main.c: 2532: }
 12744  001320  D001               	goto	l11026
 12745  001322                     l11024:
 12746                           
 12747                           ; BSR set to: 0
 12748                           ;main.c: 2533: else {
 12749                           ;main.c: 2534: pos++;
 12750  001322  2A22               	incf	vscp_writeAppReg@pos,f,c
 12751  001324                     l11026:
 12752                           
 12753                           ; BSR set to: 0
 12754                           ;main.c: 2535: }
 12755                           ;main.c: 2536: rv = adc[ pos ];
 12756  001324  0E85               	movlw	low _adc
 12757  001326  2422               	addwf	vscp_writeAppReg@pos,w,c
 12758  001328  6ED9               	movwf	fsr2l,c
 12759  00132A  6ADA               	clrf	fsr2h,c
 12760  00132C  0E01               	movlw	high _adc
 12761  00132E  22DA               	addwfc	fsr2h,f,c
 12762  001330  50DF               	movf	indf2,w,c
 12763  001332  D00F               	goto	L20
 12764  001334                     l11028:
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;main.c: 2539: else if (reg < 98) {
 12768  001334  0E62               	movlw	98
 12769  001336  6023               	cpfslt	vscp_writeAppReg@reg,c
 12770  001338  D00D               	goto	l11032
 12771                           
 12772                           ; BSR set to: 0
 12773                           ;main.c: 2540: writeEEPROM( 0x9E + reg - 84, val );
 12774  00133A  0E4A               	movlw	74
 12775  00133C  D80D               	call	PL66	;call to abstracted procedure
 12776  00133E  EC65  F029         	call	_writeEEPROM	;wreg free
 12777                           
 12778                           ;main.c: 2541: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12779  001342  0E4A               	movlw	74
 12780  001344  2423               	addwf	vscp_writeAppReg@reg,w,c
 12781  001346  6E0E               	movwf	?_readEEPROM,c
 12782  001348  6A0F               	clrf	?_readEEPROM+1,c
 12783  00134A  0E00               	movlw	0
 12784  00134C  220F               	addwfc	?_readEEPROM+1,f,c
 12785  00134E  EC62  F02A         	call	_readEEPROM	;wreg free
 12786  001352                     L20:
 12787  001352  6E24               	movwf	vscp_writeAppReg@rv,c
 12788  001354                     l11032:
 12789                           
 12790                           ;main.c: 2542: }
 12791                           ;main.c: 2543: }
 12792                           ;main.c: 2545: return rv;
 12793  001354  5024               	movf	vscp_writeAppReg@rv,w,c
 12794  001356  0012               	return	
 12795  001358                     __end_of_vscp_writeAppReg:
 12796                           	opt stack 0
 12797  001358                     PL66:
 12798                           	opt stack 23
 12799  001358  2423               	addwf	vscp_writeAppReg@reg,w,c
 12800  00135A  6E0E               	movwf	?_writeEEPROM,c
 12801  00135C  6A0F               	clrf	?_writeEEPROM+1,c
 12802  00135E  0E00               	movlw	0
 12803  001360  220F               	addwfc	?_writeEEPROM+1,f,c
 12804  001362  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12805  001366  0C00               	retlw	0
 12806  001368                     __end_ofPL66:
 12807                           	opt stack 0
 12808                           tblptru	equ	0xFF8
 12809                           tblptrh	equ	0xFF7
 12810                           tblptrl	equ	0xFF6
 12811                           tablat	equ	0xFF5
 12812                           prodh	equ	0xFF4
 12813                           prodl	equ	0xFF3
 12814                           intcon	equ	0xFF2
 12815                           postinc0	equ	0xFEE
 12816                           wreg	equ	0xFE8
 12817                           indf1	equ	0xFE7
 12818                           postdec1	equ	0xFE5
 12819                           fsr1h	equ	0xFE2
 12820                           fsr1l	equ	0xFE1
 12821                           indf2	equ	0xFDF
 12822                           postinc2	equ	0xFDE
 12823                           postdec2	equ	0xFDD
 12824                           plusw2	equ	0xFDB
 12825                           fsr2h	equ	0xFDA
 12826                           fsr2l	equ	0xFD9
 12827                           status	equ	0xFD8
 12828                           
 12829 ;; *************** function _vscp_readRegister *****************
 12830 ;; Defined at:
 12831 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;  reg             1    wreg     unsigned char 
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;  reg             1   35[COMRAM] unsigned char 
 12836 ;; Return value:  Size  Location     Type
 12837 ;;                  1    wreg      unsigned char 
 12838 ;; Registers used:
 12839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12840 ;; Tracked objects:
 12841 ;;		On entry : F/0
 12842 ;;		On exit  : 0/0
 12843 ;;		Unchanged: 0/0
 12844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12845 ;;      Params:         0       0       0       0       0       0       0
 12846 ;;      Locals:         1       0       0       0       0       0       0
 12847 ;;      Temps:          0       0       0       0       0       0       0
 12848 ;;      Totals:         1       0       0       0       0       0       0
 12849 ;;Total ram usage:        1 bytes
 12850 ;; Hardware stack levels used:    1
 12851 ;; Hardware stack levels required when called:    5
 12852 ;; This function calls:
 12853 ;;		_vscp_readAppReg
 12854 ;;		_vscp_readStdReg
 12855 ;; This function is called by:
 12856 ;;		_vscp_handleProtocolEvent
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           	psect	text43
 12861  0053DC                     __ptext43:
 12862                           	opt stack 0
 12863  0053DC                     _vscp_readRegister:
 12864                           	opt stack 23
 12865                           
 12866                           ;incstack = 0
 12867                           ;incstack = 0
 12868                           ;vscp_readRegister@reg stored from wreg
 12869  0053DC  CFE8 F024          	movff	wreg,vscp_readRegister@reg
 12870                           
 12871                           ; BSR set to: 0
 12872                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 12873  0053E0  0E7F               	movlw	127
 12874  0053E2  6424               	cpfsgt	vscp_readRegister@reg,c
 12875  0053E4  D004               	goto	l11278
 12876                           
 12877                           ; BSR set to: 0
 12878                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 12879  0053E6  5024               	movf	vscp_readRegister@reg,w,c
 12880  0053E8  EC52  F01B         	call	_vscp_readStdReg
 12881  0053EC  D003               	goto	l1107
 12882  0053EE                     l11278:
 12883                           
 12884                           ; BSR set to: 0
 12885                           ;vscp_firmware.c: 565: else {
 12886                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 12887  0053EE  5024               	movf	vscp_readRegister@reg,w,c
 12888  0053F0  EC0F  F00E         	call	_vscp_readAppReg
 12889  0053F4                     l1107:
 12890  0053F4  0012               	return	
 12891  0053F6                     __end_of_vscp_readRegister:
 12892                           	opt stack 0
 12893                           tblptru	equ	0xFF8
 12894                           tblptrh	equ	0xFF7
 12895                           tblptrl	equ	0xFF6
 12896                           tablat	equ	0xFF5
 12897                           prodh	equ	0xFF4
 12898                           prodl	equ	0xFF3
 12899                           intcon	equ	0xFF2
 12900                           postinc0	equ	0xFEE
 12901                           wreg	equ	0xFE8
 12902                           indf1	equ	0xFE7
 12903                           postdec1	equ	0xFE5
 12904                           fsr1h	equ	0xFE2
 12905                           fsr1l	equ	0xFE1
 12906                           indf2	equ	0xFDF
 12907                           postinc2	equ	0xFDE
 12908                           postdec2	equ	0xFDD
 12909                           plusw2	equ	0xFDB
 12910                           fsr2h	equ	0xFDA
 12911                           fsr2l	equ	0xFD9
 12912                           status	equ	0xFD8
 12913                           
 12914 ;; *************** function _vscp_readStdReg *****************
 12915 ;; Defined at:
 12916 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 12917 ;; Parameters:    Size  Location     Type
 12918 ;;  reg             1    wreg     unsigned char 
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;  reg             1   34[COMRAM] unsigned char 
 12921 ;;  code            4   27[COMRAM] unsigned long 
 12922 ;;  idx             1   32[COMRAM] unsigned char 
 12923 ;;  code            4   23[COMRAM] unsigned long 
 12924 ;;  idx             1   31[COMRAM] unsigned char 
 12925 ;;  rv              1   33[COMRAM] unsigned char 
 12926 ;; Return value:  Size  Location     Type
 12927 ;;                  1    wreg      unsigned char 
 12928 ;; Registers used:
 12929 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12930 ;; Tracked objects:
 12931 ;;		On entry : F/0
 12932 ;;		On exit  : 0/0
 12933 ;;		Unchanged: 0/0
 12934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12935 ;;      Params:         0       0       0       0       0       0       0
 12936 ;;      Locals:        12       0       0       0       0       0       0
 12937 ;;      Temps:          5       0       0       0       0       0       0
 12938 ;;      Totals:        17       0       0       0       0       0       0
 12939 ;;Total ram usage:       17 bytes
 12940 ;; Hardware stack levels used:    1
 12941 ;; Hardware stack levels required when called:    4
 12942 ;; This function calls:
 12943 ;;		_vscp_getMajorVersion
 12944 ;;		_vscp_getMinorVersion
 12945 ;;		_vscp_getSubMinorVersion
 12946 ;;		_vscp_getGUID
 12947 ;;		_vscp_getMDF_URL
 12948 ;;		_vscp_getUserID
 12949 ;;		_vscp_getManufacturerId
 12950 ;;		_vscp_getBootLoaderAlgorithm
 12951 ;;		_vscp_getBufferSize
 12952 ;;		_vscp_getRegisterPagesUsed
 12953 ;;		_vscp_getFamilyCode
 12954 ;;		_vscp_getFamilyType
 12955 ;; This function is called by:
 12956 ;;		_vscp_readRegister
 12957 ;;		_vscp_handleProtocolEvent
 12958 ;; This function uses a non-reentrant model
 12959 ;;
 12960                           
 12961                           	psect	text44
 12962  0036A4                     __ptext44:
 12963                           	opt stack 0
 12964  0036A4                     _vscp_readStdReg:
 12965                           	opt stack 24
 12966                           
 12967                           ;incstack = 0
 12968                           ;incstack = 0
 12969                           ;vscp_readStdReg@reg stored from wreg
 12970  0036A4  CFE8 F023          	movff	wreg,vscp_readStdReg@reg
 12971                           
 12972                           ; BSR set to: 0
 12973                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 12974  0036A8  6A22               	clrf	vscp_readStdReg@rv,c
 12975                           
 12976                           ; BSR set to: 0
 12977                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 12978  0036AA  5023               	movf	vscp_readStdReg@reg,w,c
 12979  0036AC  0A80               	xorlw	128
 12980  0036AE  E104               	bnz	l11288
 12981                           
 12982                           ; BSR set to: 0
 12983                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 12984  0036B0  C04A  F022         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12985                           
 12986                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 12987  0036B4  6A4A               	clrf	_vscp_alarmstatus,c
 12988                           
 12989                           ;vscp_firmware.c: 584: }
 12990  0036B6  D0B3               	goto	l11376
 12991  0036B8                     l11288:
 12992                           
 12993                           ; BSR set to: 0
 12994                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 12995  0036B8  5023               	movf	vscp_readStdReg@reg,w,c
 12996  0036BA  0A81               	xorlw	129
 12997  0036BC  E102               	bnz	l11292
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;vscp_firmware.c: 588: rv = 1;
 13001  0036BE  0E01               	movlw	1
 13002  0036C0  D075               	goto	L31
 13003  0036C2                     l11292:
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 13007  0036C2  5023               	movf	vscp_readStdReg@reg,w,c
 13008  0036C4  0A82               	xorlw	130
 13009  0036C6  E102               	bnz	l11296
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;vscp_firmware.c: 594: rv = 5;
 13013  0036C8  0E05               	movlw	5
 13014  0036CA  D070               	goto	L31
 13015  0036CC                     l11296:
 13016                           
 13017                           ; BSR set to: 0
 13018                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 13019  0036CC  5023               	movf	vscp_readStdReg@reg,w,c
 13020  0036CE  0A83               	xorlw	131
 13021  0036D0  E102               	bnz	l11300
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;vscp_firmware.c: 600: rv = 0;
 13025  0036D2  6A22               	clrf	vscp_readStdReg@rv,c
 13026                           
 13027                           ;vscp_firmware.c: 602: }
 13028  0036D4  D0A4               	goto	l11376
 13029  0036D6                     l11300:
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 13033  0036D6  5023               	movf	vscp_readStdReg@reg,w,c
 13034  0036D8  0A94               	xorlw	148
 13035  0036DA  E103               	bnz	l11304
 13036                           
 13037                           ; BSR set to: 0
 13038                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 13039  0036DC  ECC6  F02A         	call	_vscp_getMajorVersion	;wreg free
 13040  0036E0  D065               	goto	L31
 13041  0036E2                     l11304:
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 13045  0036E2  5023               	movf	vscp_readStdReg@reg,w,c
 13046  0036E4  0A95               	xorlw	149
 13047  0036E6  E103               	bnz	l11308
 13048                           
 13049                           ; BSR set to: 0
 13050                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 13051  0036E8  ECC5  F02A         	call	_vscp_getMinorVersion	;wreg free
 13052  0036EC  D05F               	goto	L31
 13053  0036EE                     l11308:
 13054                           
 13055                           ; BSR set to: 0
 13056                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 13057  0036EE  5023               	movf	vscp_readStdReg@reg,w,c
 13058  0036F0  0A96               	xorlw	150
 13059  0036F2  E103               	bnz	l11312
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 13063  0036F4  ECC4  F02A         	call	_vscp_getSubMinorVersion	;wreg free
 13064  0036F8  D059               	goto	L31
 13065  0036FA                     l11312:
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 13069  0036FA  0E89               	movlw	137
 13070  0036FC  6023               	cpfslt	vscp_readStdReg@reg,c
 13071  0036FE  D005               	goto	l11316
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 13075  003700  5023               	movf	vscp_readStdReg@reg,w,c
 13076  003702  0F7C               	addlw	124
 13077  003704  EC4E  F02A         	call	_vscp_getUserID
 13078  003708  D051               	goto	L31
 13079  00370A                     l11316:
 13080                           
 13081                           ; BSR set to: 0
 13082                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 13083                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 13084  00370A  0E88               	movlw	136
 13085  00370C  6423               	cpfsgt	vscp_readStdReg@reg,c
 13086  00370E  D008               	goto	l11322
 13087                           
 13088                           ; BSR set to: 0
 13089  003710  0E91               	movlw	145
 13090  003712  6023               	cpfslt	vscp_readStdReg@reg,c
 13091  003714  D005               	goto	l11322
 13092                           
 13093                           ; BSR set to: 0
 13094                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 13095  003716  5023               	movf	vscp_readStdReg@reg,w,c
 13096  003718  0F77               	addlw	119
 13097  00371A  EC44  F02A         	call	_vscp_getManufacturerId
 13098  00371E  D046               	goto	L31
 13099  003720                     l11322:
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 13103  003720  5023               	movf	vscp_readStdReg@reg,w,c
 13104  003722  0A91               	xorlw	145
 13105  003724  E103               	bnz	l11326
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 13109  003726  C084  F022         	movff	_vscp_nickname,vscp_readStdReg@rv
 13110                           
 13111                           ;vscp_firmware.c: 639: }
 13112  00372A  D079               	goto	l11376
 13113  00372C                     l11326:
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 13117  00372C  5023               	movf	vscp_readStdReg@reg,w,c
 13118  00372E  0A93               	xorlw	147
 13119  003730  E103               	bnz	l11330
 13120                           
 13121                           ; BSR set to: 0
 13122                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 13123  003732  C046  F022         	movff	_vscp_page_select,vscp_readStdReg@rv
 13124                           
 13125                           ;vscp_firmware.c: 645: }
 13126  003736  D073               	goto	l11376
 13127  003738                     l11330:
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13131  003738  5023               	movf	vscp_readStdReg@reg,w,c
 13132  00373A  0A92               	xorlw	146
 13133  00373C  E102               	bnz	l11334
 13134                           
 13135                           ; BSR set to: 0
 13136                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13137  00373E  5047               	movf	_vscp_page_select+1,w,c
 13138  003740  D035               	goto	L31
 13139  003742                     l11334:
 13140                           
 13141                           ; BSR set to: 0
 13142                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13143  003742  5023               	movf	vscp_readStdReg@reg,w,c
 13144  003744  0A97               	xorlw	151
 13145  003746  E103               	bnz	l11338
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13149  003748  ECC3  F02A         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13150  00374C  D02F               	goto	L31
 13151  00374E                     l11338:
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13155  00374E  5023               	movf	vscp_readStdReg@reg,w,c
 13156  003750  0A98               	xorlw	152
 13157  003752  E103               	bnz	l11342
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13161  003754  ECC2  F02A         	call	_vscp_getBufferSize	;wreg free
 13162  003758  D029               	goto	L31
 13163  00375A                     l11342:
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13167  00375A  5023               	movf	vscp_readStdReg@reg,w,c
 13168  00375C  0A99               	xorlw	153
 13169  00375E  E103               	bnz	l11346
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13173  003760  ECC1  F02A         	call	_vscp_getRegisterPagesUsed	;wreg free
 13174  003764  D023               	goto	L31
 13175  003766                     l11346:
 13176                           
 13177                           ; BSR set to: 0
 13178                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13179                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13180  003766  0E99               	movlw	153
 13181  003768  6423               	cpfsgt	vscp_readStdReg@reg,c
 13182  00376A  D022               	goto	l11356
 13183                           
 13184                           ; BSR set to: 0
 13185  00376C  0E9E               	movlw	158
 13186  00376E  6023               	cpfslt	vscp_readStdReg@reg,c
 13187  003770  D01F               	goto	l11356
 13188                           
 13189                           ; BSR set to: 0
 13190                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13191  003772  ECA8  F02A         	call	_vscp_getFamilyCode	;wreg free
 13192  003776  C011  F01B         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13193  00377A  C010  F01A         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13194  00377E  C00F  F019         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13195  003782  C00E  F018         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13196                           
 13197                           ; BSR set to: 0
 13198                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13199  003786  5023               	movf	vscp_readStdReg@reg,w,c
 13200  003788  0F66               	addlw	102
 13201  00378A  6E20               	movwf	vscp_readStdReg@idx,c
 13202                           
 13203                           ; BSR set to: 0
 13204                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13205  00378C  5020               	movf	vscp_readStdReg@idx,w,c
 13206  00378E  D849               	call	PL48	;call to abstracted procedure
 13207  003790  C018  F014         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13208  003794  C019  F015         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13209  003798  C01A  F016         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13210  00379C  C01B  F017         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13211  0037A0  2AE8               	incf	wreg,f,c
 13212  0037A2  D001               	goto	u9490
 13213  0037A4                     u9495:
 13214  0037A4  D848               	call	PL86	;call to abstracted procedure
 13215  0037A6                     u9490:
 13216  0037A6  2EE8               	decfsz	wreg,f,c
 13217  0037A8  D7FD               	goto	u9495
 13218  0037AA  D024               	goto	L32
 13219  0037AC                     L31:
 13220  0037AC  6E22               	movwf	vscp_readStdReg@rv,c
 13221                           
 13222                           ;vscp_firmware.c: 671: }
 13223  0037AE  D037               	goto	l11376
 13224  0037B0                     l11356:
 13225                           
 13226                           ; BSR set to: 0
 13227                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13228                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13229  0037B0  0E9D               	movlw	157
 13230  0037B2  6423               	cpfsgt	vscp_readStdReg@reg,c
 13231  0037B4  D021               	goto	l11366
 13232                           
 13233                           ; BSR set to: 0
 13234  0037B6  0EA2               	movlw	162
 13235  0037B8  6023               	cpfslt	vscp_readStdReg@reg,c
 13236  0037BA  D01E               	goto	l11366
 13237                           
 13238                           ; BSR set to: 0
 13239                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13240  0037BC  ECA3  F02A         	call	_vscp_getFamilyType	;wreg free
 13241  0037C0  C011  F01F         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1140+3
 13242  0037C4  C010  F01E         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1140+2
 13243  0037C8  C00F  F01D         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1140+1
 13244  0037CC  C00E  F01C         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1140
 13245                           
 13246                           ; BSR set to: 0
 13247                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13248  0037D0  5023               	movf	vscp_readStdReg@reg,w,c
 13249  0037D2  0F62               	addlw	98
 13250  0037D4  6E21               	movwf	vscp_readStdReg@idx_1141,c
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13254  0037D6  5021               	movf	vscp_readStdReg@idx_1141,w,c
 13255  0037D8  D824               	call	PL48	;call to abstracted procedure
 13256  0037DA  C01C  F014         	movff	vscp_readStdReg@code_1140,??_vscp_readStdReg+1
 13257  0037DE  C01D  F015         	movff	vscp_readStdReg@code_1140+1,??_vscp_readStdReg+2
 13258  0037E2  C01E  F016         	movff	vscp_readStdReg@code_1140+2,??_vscp_readStdReg+3
 13259  0037E6  C01F  F017         	movff	vscp_readStdReg@code_1140+3,??_vscp_readStdReg+4
 13260  0037EA  2AE8               	incf	wreg,f,c
 13261  0037EC  D001               	goto	u9520
 13262  0037EE                     u9525:
 13263  0037EE  D823               	call	PL86	;call to abstracted procedure
 13264  0037F0                     u9520:
 13265  0037F0  2EE8               	decfsz	wreg,f,c
 13266  0037F2  D7FD               	goto	u9525
 13267  0037F4                     L32:
 13268  0037F4  5014               	movf	??_vscp_readStdReg+1,w,c
 13269  0037F6  D7DA               	goto	L31
 13270  0037F8                     l11366:
 13271                           
 13272                           ; BSR set to: 0
 13273                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13274                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13275  0037F8  0ECF               	movlw	207
 13276  0037FA  6423               	cpfsgt	vscp_readStdReg@reg,c
 13277  0037FC  D008               	goto	l11372
 13278                           
 13279                           ; BSR set to: 0
 13280  0037FE  0EE0               	movlw	224
 13281  003800  6023               	cpfslt	vscp_readStdReg@reg,c
 13282  003802  D005               	goto	l11372
 13283                           
 13284                           ; BSR set to: 0
 13285                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13286  003804  5023               	movf	vscp_readStdReg@reg,w,c
 13287  003806  0F30               	addlw	48
 13288  003808  EC58  F02A         	call	_vscp_getGUID
 13289  00380C  D7CF               	goto	L31
 13290  00380E                     l11372:
 13291                           
 13292                           ; BSR set to: 0
 13293                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13294  00380E  0EDF               	movlw	223
 13295  003810  6423               	cpfsgt	vscp_readStdReg@reg,c
 13296  003812  D005               	goto	l11376
 13297                           
 13298                           ; BSR set to: 0
 13299                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13300  003814  5023               	movf	vscp_readStdReg@reg,w,c
 13301  003816  0F20               	addlw	32
 13302  003818  EC20  F02A         	call	_vscp_getMDF_URL
 13303  00381C  D7C7               	goto	L31
 13304  00381E                     l11376:
 13305                           
 13306                           ;vscp_firmware.c: 691: }
 13307                           ;vscp_firmware.c: 693: return rv;
 13308  00381E  5022               	movf	vscp_readStdReg@rv,w,c
 13309  003820  0012               	return	
 13310  003822                     __end_of_vscp_readStdReg:
 13311                           	opt stack 0
 13312  003822                     PL48:
 13313                           	opt stack 24
 13314  003822  0803               	sublw	3
 13315  003824  6E13               	movwf	??_vscp_readStdReg& (0+255),c
 13316  003826  90D8               	bcf	status,0,c
 13317  003828  3613               	rlcf	??_vscp_readStdReg,f,c
 13318  00382A  90D8               	bcf	status,0,c
 13319  00382C  3613               	rlcf	??_vscp_readStdReg,f,c
 13320  00382E  90D8               	bcf	status,0,c
 13321  003830  3613               	rlcf	??_vscp_readStdReg,f,c
 13322  003832  5013               	movf	??_vscp_readStdReg,w,c
 13323  003834  0012               	return	
 13324  003836                     __end_ofPL48:
 13325                           	opt stack 0
 13326  003836                     PL86:
 13327                           	opt stack 24
 13328  003836  90D8               	bcf	status,0,c
 13329  003838  3217               	rrcf	??_vscp_readStdReg+4,f,c
 13330  00383A  3216               	rrcf	??_vscp_readStdReg+3,f,c
 13331  00383C  3215               	rrcf	??_vscp_readStdReg+2,f,c
 13332  00383E  3214               	rrcf	??_vscp_readStdReg+1,f,c
 13333  003840  0012               	return	
 13334  003842                     __end_ofPL86:
 13335                           	opt stack 0
 13336                           tblptru	equ	0xFF8
 13337                           tblptrh	equ	0xFF7
 13338                           tblptrl	equ	0xFF6
 13339                           tablat	equ	0xFF5
 13340                           prodh	equ	0xFF4
 13341                           prodl	equ	0xFF3
 13342                           intcon	equ	0xFF2
 13343                           postinc0	equ	0xFEE
 13344                           wreg	equ	0xFE8
 13345                           indf1	equ	0xFE7
 13346                           postdec1	equ	0xFE5
 13347                           fsr1h	equ	0xFE2
 13348                           fsr1l	equ	0xFE1
 13349                           indf2	equ	0xFDF
 13350                           postinc2	equ	0xFDE
 13351                           postdec2	equ	0xFDD
 13352                           plusw2	equ	0xFDB
 13353                           fsr2h	equ	0xFDA
 13354                           fsr2l	equ	0xFD9
 13355                           status	equ	0xFD8
 13356                           
 13357 ;; *************** function _vscp_getFamilyType *****************
 13358 ;; Defined at:
 13359 ;;		line 2826 in file "../main.c"
 13360 ;; Parameters:    Size  Location     Type
 13361 ;;		None
 13362 ;; Auto vars:     Size  Location     Type
 13363 ;;		None
 13364 ;; Return value:  Size  Location     Type
 13365 ;;                  4   13[COMRAM] unsigned long 
 13366 ;; Registers used:
 13367 ;;		None
 13368 ;; Tracked objects:
 13369 ;;		On entry : F/0
 13370 ;;		On exit  : F/0
 13371 ;;		Unchanged: F/0
 13372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13373 ;;      Params:         4       0       0       0       0       0       0
 13374 ;;      Locals:         0       0       0       0       0       0       0
 13375 ;;      Temps:          0       0       0       0       0       0       0
 13376 ;;      Totals:         4       0       0       0       0       0       0
 13377 ;;Total ram usage:        4 bytes
 13378 ;; Hardware stack levels used:    1
 13379 ;; Hardware stack levels required when called:    2
 13380 ;; This function calls:
 13381 ;;		Nothing
 13382 ;; This function is called by:
 13383 ;;		_vscp_readStdReg
 13384 ;; This function uses a non-reentrant model
 13385 ;;
 13386                           
 13387                           	psect	text45
 13388  005546                     __ptext45:
 13389                           	opt stack 0
 13390  005546                     _vscp_getFamilyType:
 13391                           	opt stack 25
 13392                           
 13393                           ; BSR set to: 0
 13394                           ;main.c: 2827: return 0;
 13395                           
 13396                           ;incstack = 0
 13397                           ;incstack = 0
 13398  005546  6A0E               	clrf	?_vscp_getFamilyType,c
 13399  005548  6A0F               	clrf	?_vscp_getFamilyType+1,c
 13400  00554A  6A10               	clrf	?_vscp_getFamilyType+2,c
 13401  00554C  6A11               	clrf	?_vscp_getFamilyType+3,c
 13402                           
 13403                           ; BSR set to: 0
 13404  00554E  0012               	return	
 13405  005550                     __end_of_vscp_getFamilyType:
 13406                           	opt stack 0
 13407                           tblptru	equ	0xFF8
 13408                           tblptrh	equ	0xFF7
 13409                           tblptrl	equ	0xFF6
 13410                           tablat	equ	0xFF5
 13411                           prodh	equ	0xFF4
 13412                           prodl	equ	0xFF3
 13413                           intcon	equ	0xFF2
 13414                           postinc0	equ	0xFEE
 13415                           wreg	equ	0xFE8
 13416                           indf1	equ	0xFE7
 13417                           postdec1	equ	0xFE5
 13418                           fsr1h	equ	0xFE2
 13419                           fsr1l	equ	0xFE1
 13420                           indf2	equ	0xFDF
 13421                           postinc2	equ	0xFDE
 13422                           postdec2	equ	0xFDD
 13423                           plusw2	equ	0xFDB
 13424                           fsr2h	equ	0xFDA
 13425                           fsr2l	equ	0xFD9
 13426                           status	equ	0xFD8
 13427                           
 13428 ;; *************** function _vscp_getFamilyCode *****************
 13429 ;; Defined at:
 13430 ;;		line 2816 in file "../main.c"
 13431 ;; Parameters:    Size  Location     Type
 13432 ;;		None
 13433 ;; Auto vars:     Size  Location     Type
 13434 ;;		None
 13435 ;; Return value:  Size  Location     Type
 13436 ;;                  4   13[COMRAM] unsigned long 
 13437 ;; Registers used:
 13438 ;;		None
 13439 ;; Tracked objects:
 13440 ;;		On entry : F/0
 13441 ;;		On exit  : F/0
 13442 ;;		Unchanged: F/0
 13443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13444 ;;      Params:         4       0       0       0       0       0       0
 13445 ;;      Locals:         0       0       0       0       0       0       0
 13446 ;;      Temps:          0       0       0       0       0       0       0
 13447 ;;      Totals:         4       0       0       0       0       0       0
 13448 ;;Total ram usage:        4 bytes
 13449 ;; Hardware stack levels used:    1
 13450 ;; Hardware stack levels required when called:    2
 13451 ;; This function calls:
 13452 ;;		Nothing
 13453 ;; This function is called by:
 13454 ;;		_vscp_readStdReg
 13455 ;; This function uses a non-reentrant model
 13456 ;;
 13457                           
 13458                           	psect	text46
 13459  005550                     __ptext46:
 13460                           	opt stack 0
 13461  005550                     _vscp_getFamilyCode:
 13462                           	opt stack 25
 13463                           
 13464                           ; BSR set to: 0
 13465                           ;main.c: 2817: return 0L;
 13466                           
 13467                           ; BSR set to: 0
 13468                           ;incstack = 0
 13469                           ;incstack = 0
 13470  005550  6A0E               	clrf	?_vscp_getFamilyCode,c
 13471  005552  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 13472  005554  6A10               	clrf	?_vscp_getFamilyCode+2,c
 13473  005556  6A11               	clrf	?_vscp_getFamilyCode+3,c
 13474                           
 13475                           ; BSR set to: 0
 13476  005558  0012               	return	
 13477  00555A                     __end_of_vscp_getFamilyCode:
 13478                           	opt stack 0
 13479                           tblptru	equ	0xFF8
 13480                           tblptrh	equ	0xFF7
 13481                           tblptrl	equ	0xFF6
 13482                           tablat	equ	0xFF5
 13483                           prodh	equ	0xFF4
 13484                           prodl	equ	0xFF3
 13485                           intcon	equ	0xFF2
 13486                           postinc0	equ	0xFEE
 13487                           wreg	equ	0xFE8
 13488                           indf1	equ	0xFE7
 13489                           postdec1	equ	0xFE5
 13490                           fsr1h	equ	0xFE2
 13491                           fsr1l	equ	0xFE1
 13492                           indf2	equ	0xFDF
 13493                           postinc2	equ	0xFDE
 13494                           postdec2	equ	0xFDD
 13495                           plusw2	equ	0xFDB
 13496                           fsr2h	equ	0xFDA
 13497                           fsr2l	equ	0xFD9
 13498                           status	equ	0xFD8
 13499                           
 13500 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13501 ;; Defined at:
 13502 ;;		line 2717 in file "../main.c"
 13503 ;; Parameters:    Size  Location     Type
 13504 ;;		None
 13505 ;; Auto vars:     Size  Location     Type
 13506 ;;		None
 13507 ;; Return value:  Size  Location     Type
 13508 ;;                  1    wreg      unsigned char 
 13509 ;; Registers used:
 13510 ;;		wreg
 13511 ;; Tracked objects:
 13512 ;;		On entry : F/0
 13513 ;;		On exit  : F/0
 13514 ;;		Unchanged: F/0
 13515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13516 ;;      Params:         0       0       0       0       0       0       0
 13517 ;;      Locals:         0       0       0       0       0       0       0
 13518 ;;      Temps:          0       0       0       0       0       0       0
 13519 ;;      Totals:         0       0       0       0       0       0       0
 13520 ;;Total ram usage:        0 bytes
 13521 ;; Hardware stack levels used:    1
 13522 ;; Hardware stack levels required when called:    2
 13523 ;; This function calls:
 13524 ;;		Nothing
 13525 ;; This function is called by:
 13526 ;;		_vscp_readStdReg
 13527 ;; This function uses a non-reentrant model
 13528 ;;
 13529                           
 13530                           	psect	text47
 13531  005582                     __ptext47:
 13532                           	opt stack 0
 13533  005582                     _vscp_getRegisterPagesUsed:
 13534                           	opt stack 25
 13535                           
 13536                           ; BSR set to: 0
 13537                           
 13538                           ; BSR set to: 0
 13539                           ;main.c: 2718: return 1;
 13540                           
 13541                           ; BSR set to: 0
 13542                           ;incstack = 0
 13543                           ;incstack = 0
 13544  005582  0C01               	retlw	1
 13545  005584                     __end_of_vscp_getRegisterPagesUsed:
 13546                           	opt stack 0
 13547                           tblptru	equ	0xFF8
 13548                           tblptrh	equ	0xFF7
 13549                           tblptrl	equ	0xFF6
 13550                           tablat	equ	0xFF5
 13551                           prodh	equ	0xFF4
 13552                           prodl	equ	0xFF3
 13553                           intcon	equ	0xFF2
 13554                           postinc0	equ	0xFEE
 13555                           wreg	equ	0xFE8
 13556                           indf1	equ	0xFE7
 13557                           postdec1	equ	0xFE5
 13558                           fsr1h	equ	0xFE2
 13559                           fsr1l	equ	0xFE1
 13560                           indf2	equ	0xFDF
 13561                           postinc2	equ	0xFDE
 13562                           postdec2	equ	0xFDD
 13563                           plusw2	equ	0xFDB
 13564                           fsr2h	equ	0xFDA
 13565                           fsr2l	equ	0xFD9
 13566                           status	equ	0xFD8
 13567                           
 13568 ;; *************** function _vscp_getBufferSize *****************
 13569 ;; Defined at:
 13570 ;;		line 2670 in file "../main.c"
 13571 ;; Parameters:    Size  Location     Type
 13572 ;;		None
 13573 ;; Auto vars:     Size  Location     Type
 13574 ;;		None
 13575 ;; Return value:  Size  Location     Type
 13576 ;;                  1    wreg      unsigned char 
 13577 ;; Registers used:
 13578 ;;		wreg
 13579 ;; Tracked objects:
 13580 ;;		On entry : F/0
 13581 ;;		On exit  : F/0
 13582 ;;		Unchanged: F/0
 13583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13584 ;;      Params:         0       0       0       0       0       0       0
 13585 ;;      Locals:         0       0       0       0       0       0       0
 13586 ;;      Temps:          0       0       0       0       0       0       0
 13587 ;;      Totals:         0       0       0       0       0       0       0
 13588 ;;Total ram usage:        0 bytes
 13589 ;; Hardware stack levels used:    1
 13590 ;; Hardware stack levels required when called:    2
 13591 ;; This function calls:
 13592 ;;		Nothing
 13593 ;; This function is called by:
 13594 ;;		_vscp_readStdReg
 13595 ;; This function uses a non-reentrant model
 13596 ;;
 13597                           
 13598                           	psect	text48
 13599  005584                     __ptext48:
 13600                           	opt stack 0
 13601  005584                     _vscp_getBufferSize:
 13602                           	opt stack 25
 13603                           
 13604                           ; BSR set to: 0
 13605                           
 13606                           ; BSR set to: 0
 13607                           ;main.c: 2671: return 8;
 13608                           
 13609                           ; BSR set to: 0
 13610                           ;incstack = 0
 13611                           ;incstack = 0
 13612  005584  0C08               	retlw	8
 13613  005586                     __end_of_vscp_getBufferSize:
 13614                           	opt stack 0
 13615                           tblptru	equ	0xFF8
 13616                           tblptrh	equ	0xFF7
 13617                           tblptrl	equ	0xFF6
 13618                           tablat	equ	0xFF5
 13619                           prodh	equ	0xFF4
 13620                           prodl	equ	0xFF3
 13621                           intcon	equ	0xFF2
 13622                           postinc0	equ	0xFEE
 13623                           wreg	equ	0xFE8
 13624                           indf1	equ	0xFE7
 13625                           postdec1	equ	0xFE5
 13626                           fsr1h	equ	0xFE2
 13627                           fsr1l	equ	0xFE1
 13628                           indf2	equ	0xFDF
 13629                           postinc2	equ	0xFDE
 13630                           postdec2	equ	0xFDD
 13631                           plusw2	equ	0xFDB
 13632                           fsr2h	equ	0xFDA
 13633                           fsr2l	equ	0xFD9
 13634                           status	equ	0xFD8
 13635                           
 13636 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13637 ;; Defined at:
 13638 ;;		line 2661 in file "../main.c"
 13639 ;; Parameters:    Size  Location     Type
 13640 ;;		None
 13641 ;; Auto vars:     Size  Location     Type
 13642 ;;		None
 13643 ;; Return value:  Size  Location     Type
 13644 ;;                  1    wreg      unsigned char 
 13645 ;; Registers used:
 13646 ;;		wreg
 13647 ;; Tracked objects:
 13648 ;;		On entry : F/0
 13649 ;;		On exit  : F/0
 13650 ;;		Unchanged: F/0
 13651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13652 ;;      Params:         0       0       0       0       0       0       0
 13653 ;;      Locals:         0       0       0       0       0       0       0
 13654 ;;      Temps:          0       0       0       0       0       0       0
 13655 ;;      Totals:         0       0       0       0       0       0       0
 13656 ;;Total ram usage:        0 bytes
 13657 ;; Hardware stack levels used:    1
 13658 ;; Hardware stack levels required when called:    2
 13659 ;; This function calls:
 13660 ;;		Nothing
 13661 ;; This function is called by:
 13662 ;;		_vscp_readStdReg
 13663 ;; This function uses a non-reentrant model
 13664 ;;
 13665                           
 13666                           	psect	text49
 13667  005586                     __ptext49:
 13668                           	opt stack 0
 13669  005586                     _vscp_getBootLoaderAlgorithm:
 13670                           	opt stack 25
 13671                           
 13672                           ; BSR set to: 0
 13673                           
 13674                           ; BSR set to: 0
 13675                           ;main.c: 2662: return 0x01;
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;incstack = 0
 13679                           ;incstack = 0
 13680  005586  0C01               	retlw	1
 13681  005588                     __end_of_vscp_getBootLoaderAlgorithm:
 13682                           	opt stack 0
 13683                           tblptru	equ	0xFF8
 13684                           tblptrh	equ	0xFF7
 13685                           tblptrl	equ	0xFF6
 13686                           tablat	equ	0xFF5
 13687                           prodh	equ	0xFF4
 13688                           prodl	equ	0xFF3
 13689                           intcon	equ	0xFF2
 13690                           postinc0	equ	0xFEE
 13691                           wreg	equ	0xFE8
 13692                           indf1	equ	0xFE7
 13693                           postdec1	equ	0xFE5
 13694                           fsr1h	equ	0xFE2
 13695                           fsr1l	equ	0xFE1
 13696                           indf2	equ	0xFDF
 13697                           postinc2	equ	0xFDE
 13698                           postdec2	equ	0xFDD
 13699                           plusw2	equ	0xFDB
 13700                           fsr2h	equ	0xFDA
 13701                           fsr2l	equ	0xFD9
 13702                           status	equ	0xFD8
 13703                           
 13704 ;; *************** function _vscp_getManufacturerId *****************
 13705 ;; Defined at:
 13706 ;;		line 2641 in file "../main.c"
 13707 ;; Parameters:    Size  Location     Type
 13708 ;;  idx             1    wreg     unsigned char 
 13709 ;; Auto vars:     Size  Location     Type
 13710 ;;  idx             1   17[COMRAM] unsigned char 
 13711 ;; Return value:  Size  Location     Type
 13712 ;;                  1    wreg      unsigned char 
 13713 ;; Registers used:
 13714 ;;		wreg, status,2, status,0, cstack
 13715 ;; Tracked objects:
 13716 ;;		On entry : 0/0
 13717 ;;		On exit  : 0/0
 13718 ;;		Unchanged: 0/0
 13719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13720 ;;      Params:         0       0       0       0       0       0       0
 13721 ;;      Locals:         1       0       0       0       0       0       0
 13722 ;;      Temps:          0       0       0       0       0       0       0
 13723 ;;      Totals:         1       0       0       0       0       0       0
 13724 ;;Total ram usage:        1 bytes
 13725 ;; Hardware stack levels used:    1
 13726 ;; Hardware stack levels required when called:    3
 13727 ;; This function calls:
 13728 ;;		_readEEPROM
 13729 ;; This function is called by:
 13730 ;;		_vscp_readStdReg
 13731 ;;		_vscp_writeStdReg
 13732 ;; This function uses a non-reentrant model
 13733 ;;
 13734                           
 13735                           	psect	text50
 13736  005488                     __ptext50:
 13737                           	opt stack 0
 13738  005488                     _vscp_getManufacturerId:
 13739                           	opt stack 24
 13740                           
 13741                           ; BSR set to: 0
 13742                           ;incstack = 0
 13743                           ;incstack = 0
 13744                           ;vscp_getManufacturerId@idx stored from wreg
 13745  005488  CFE8 F012          	movff	wreg,vscp_getManufacturerId@idx
 13746                           
 13747                           ;main.c: 2642: return readEEPROM(0x09 + idx);
 13748  00548C  0E09               	movlw	9
 13749  00548E  2412               	addwf	vscp_getManufacturerId@idx,w,c
 13750  005490  6E0E               	movwf	?_readEEPROM,c
 13751  005492  6A0F               	clrf	?_readEEPROM+1,c
 13752  005494  0E00               	movlw	0
 13753  005496  220F               	addwfc	?_readEEPROM+1,f,c
 13754  005498  EF62  F02A         	goto	_readEEPROM	;wreg free
 13755  00549C                     __end_of_vscp_getManufacturerId:
 13756                           	opt stack 0
 13757                           tblptru	equ	0xFF8
 13758                           tblptrh	equ	0xFF7
 13759                           tblptrl	equ	0xFF6
 13760                           tablat	equ	0xFF5
 13761                           prodh	equ	0xFF4
 13762                           prodl	equ	0xFF3
 13763                           intcon	equ	0xFF2
 13764                           postinc0	equ	0xFEE
 13765                           wreg	equ	0xFE8
 13766                           indf1	equ	0xFE7
 13767                           postdec1	equ	0xFE5
 13768                           fsr1h	equ	0xFE2
 13769                           fsr1l	equ	0xFE1
 13770                           indf2	equ	0xFDF
 13771                           postinc2	equ	0xFDE
 13772                           postdec2	equ	0xFDD
 13773                           plusw2	equ	0xFDB
 13774                           fsr2h	equ	0xFDA
 13775                           fsr2l	equ	0xFD9
 13776                           status	equ	0xFD8
 13777                           
 13778 ;; *************** function _vscp_getUserID *****************
 13779 ;; Defined at:
 13780 ;;		line 2621 in file "../main.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;  idx             1    wreg     unsigned char 
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  idx             1   17[COMRAM] unsigned char 
 13785 ;; Return value:  Size  Location     Type
 13786 ;;                  1    wreg      unsigned char 
 13787 ;; Registers used:
 13788 ;;		wreg, status,2, status,0, cstack
 13789 ;; Tracked objects:
 13790 ;;		On entry : 0/0
 13791 ;;		On exit  : 0/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13794 ;;      Params:         0       0       0       0       0       0       0
 13795 ;;      Locals:         1       0       0       0       0       0       0
 13796 ;;      Temps:          0       0       0       0       0       0       0
 13797 ;;      Totals:         1       0       0       0       0       0       0
 13798 ;;Total ram usage:        1 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:    3
 13801 ;; This function calls:
 13802 ;;		_readEEPROM
 13803 ;; This function is called by:
 13804 ;;		_vscp_readStdReg
 13805 ;;		_vscp_writeStdReg
 13806 ;; This function uses a non-reentrant model
 13807 ;;
 13808                           
 13809                           	psect	text51
 13810  00549C                     __ptext51:
 13811                           	opt stack 0
 13812  00549C                     _vscp_getUserID:
 13813                           	opt stack 24
 13814                           
 13815                           ;incstack = 0
 13816                           ;incstack = 0
 13817                           ;vscp_getUserID@idx stored from wreg
 13818  00549C  CFE8 F012          	movff	wreg,vscp_getUserID@idx
 13819                           
 13820                           ;main.c: 2622: return readEEPROM(0x04 + idx);
 13821  0054A0  0E04               	movlw	4
 13822  0054A2  2412               	addwf	vscp_getUserID@idx,w,c
 13823  0054A4  6E0E               	movwf	?_readEEPROM,c
 13824  0054A6  6A0F               	clrf	?_readEEPROM+1,c
 13825  0054A8  0E00               	movlw	0
 13826  0054AA  220F               	addwfc	?_readEEPROM+1,f,c
 13827  0054AC  EF62  F02A         	goto	_readEEPROM	;wreg free
 13828  0054B0                     __end_of_vscp_getUserID:
 13829                           	opt stack 0
 13830                           tblptru	equ	0xFF8
 13831                           tblptrh	equ	0xFF7
 13832                           tblptrl	equ	0xFF6
 13833                           tablat	equ	0xFF5
 13834                           prodh	equ	0xFF4
 13835                           prodl	equ	0xFF3
 13836                           intcon	equ	0xFF2
 13837                           postinc0	equ	0xFEE
 13838                           wreg	equ	0xFE8
 13839                           indf1	equ	0xFE7
 13840                           postdec1	equ	0xFE5
 13841                           fsr1h	equ	0xFE2
 13842                           fsr1l	equ	0xFE1
 13843                           indf2	equ	0xFDF
 13844                           postinc2	equ	0xFDE
 13845                           postdec2	equ	0xFDD
 13846                           plusw2	equ	0xFDB
 13847                           fsr2h	equ	0xFDA
 13848                           fsr2l	equ	0xFD9
 13849                           status	equ	0xFD8
 13850                           
 13851 ;; *************** function _vscp_getMDF_URL *****************
 13852 ;; Defined at:
 13853 ;;		line 2612 in file "../main.c"
 13854 ;; Parameters:    Size  Location     Type
 13855 ;;  idx             1    wreg     unsigned char 
 13856 ;; Auto vars:     Size  Location     Type
 13857 ;;  idx             1   14[COMRAM] unsigned char 
 13858 ;; Return value:  Size  Location     Type
 13859 ;;                  1    wreg      unsigned char 
 13860 ;; Registers used:
 13861 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13862 ;; Tracked objects:
 13863 ;;		On entry : F/0
 13864 ;;		On exit  : F/0
 13865 ;;		Unchanged: F/0
 13866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13867 ;;      Params:         0       0       0       0       0       0       0
 13868 ;;      Locals:         1       0       0       0       0       0       0
 13869 ;;      Temps:          1       0       0       0       0       0       0
 13870 ;;      Totals:         2       0       0       0       0       0       0
 13871 ;;Total ram usage:        2 bytes
 13872 ;; Hardware stack levels used:    1
 13873 ;; Hardware stack levels required when called:    2
 13874 ;; This function calls:
 13875 ;;		Nothing
 13876 ;; This function is called by:
 13877 ;;		_vscp_readStdReg
 13878 ;;		_vscp_handleProtocolEvent
 13879 ;; This function uses a non-reentrant model
 13880 ;;
 13881                           
 13882                           	psect	text52
 13883  005440                     __ptext52:
 13884                           	opt stack 0
 13885  005440                     _vscp_getMDF_URL:
 13886                           	opt stack 25
 13887                           
 13888                           ;incstack = 0
 13889                           ;incstack = 0
 13890                           ;vscp_getMDF_URL@idx stored from wreg
 13891  005440  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13892                           
 13893                           ; BSR set to: 0
 13894                           ;main.c: 2613: return vscp_deviceURL[ idx ];
 13895  005444  500F               	movf	vscp_getMDF_URL@idx,w,c
 13896  005446  0F00               	addlw	low _vscp_deviceURL
 13897  005448  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13898  00544A  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13899  00544E  0E06               	movlw	high __smallconst
 13900  005450  6EF7               	movwf	tblptrh,c
 13901  005452  0008               	tblrd		*
 13902  005454  50F5               	movf	tablat,w,c
 13903                           
 13904                           ; BSR set to: 0
 13905  005456  0012               	return	
 13906  005458                     __end_of_vscp_getMDF_URL:
 13907                           	opt stack 0
 13908                           tblptru	equ	0xFF8
 13909                           tblptrh	equ	0xFF7
 13910                           tblptrl	equ	0xFF6
 13911                           tablat	equ	0xFF5
 13912                           prodh	equ	0xFF4
 13913                           prodl	equ	0xFF3
 13914                           intcon	equ	0xFF2
 13915                           postinc0	equ	0xFEE
 13916                           wreg	equ	0xFE8
 13917                           indf1	equ	0xFE7
 13918                           postdec1	equ	0xFE5
 13919                           fsr1h	equ	0xFE2
 13920                           fsr1l	equ	0xFE1
 13921                           indf2	equ	0xFDF
 13922                           postinc2	equ	0xFDE
 13923                           postdec2	equ	0xFDD
 13924                           plusw2	equ	0xFDB
 13925                           fsr2h	equ	0xFDA
 13926                           fsr2l	equ	0xFD9
 13927                           status	equ	0xFD8
 13928                           
 13929 ;; *************** function _vscp_getGUID *****************
 13930 ;; Defined at:
 13931 ;;		line 2589 in file "../main.c"
 13932 ;; Parameters:    Size  Location     Type
 13933 ;;  idx             1    wreg     unsigned char 
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;  idx             1   17[COMRAM] unsigned char 
 13936 ;; Return value:  Size  Location     Type
 13937 ;;                  1    wreg      unsigned char 
 13938 ;; Registers used:
 13939 ;;		wreg, status,2, status,0, cstack
 13940 ;; Tracked objects:
 13941 ;;		On entry : 0/0
 13942 ;;		On exit  : 0/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13945 ;;      Params:         0       0       0       0       0       0       0
 13946 ;;      Locals:         1       0       0       0       0       0       0
 13947 ;;      Temps:          0       0       0       0       0       0       0
 13948 ;;      Totals:         1       0       0       0       0       0       0
 13949 ;;Total ram usage:        1 bytes
 13950 ;; Hardware stack levels used:    1
 13951 ;; Hardware stack levels required when called:    3
 13952 ;; This function calls:
 13953 ;;		_readEEPROM
 13954 ;; This function is called by:
 13955 ;;		_vscp_readStdReg
 13956 ;;		_vscp_writeStdReg
 13957 ;;		_vscp_handleProtocolEvent
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           	psect	text53
 13962  0054B0                     __ptext53:
 13963                           	opt stack 0
 13964  0054B0                     _vscp_getGUID:
 13965                           	opt stack 24
 13966                           
 13967                           ; BSR set to: 0
 13968                           ;incstack = 0
 13969                           ;incstack = 0
 13970                           ;vscp_getGUID@idx stored from wreg
 13971  0054B0  CFE8 F012          	movff	wreg,vscp_getGUID@idx
 13972                           
 13973                           ;main.c: 2590: return readEEPROM(0x11 + idx);
 13974  0054B4  0E11               	movlw	17
 13975  0054B6  2412               	addwf	vscp_getGUID@idx,w,c
 13976  0054B8  6E0E               	movwf	?_readEEPROM,c
 13977  0054BA  6A0F               	clrf	?_readEEPROM+1,c
 13978  0054BC  0E00               	movlw	0
 13979  0054BE  220F               	addwfc	?_readEEPROM+1,f,c
 13980  0054C0  EF62  F02A         	goto	_readEEPROM	;wreg free
 13981  0054C4                     __end_of_vscp_getGUID:
 13982                           	opt stack 0
 13983                           tblptru	equ	0xFF8
 13984                           tblptrh	equ	0xFF7
 13985                           tblptrl	equ	0xFF6
 13986                           tablat	equ	0xFF5
 13987                           prodh	equ	0xFF4
 13988                           prodl	equ	0xFF3
 13989                           intcon	equ	0xFF2
 13990                           postinc0	equ	0xFEE
 13991                           wreg	equ	0xFE8
 13992                           indf1	equ	0xFE7
 13993                           postdec1	equ	0xFE5
 13994                           fsr1h	equ	0xFE2
 13995                           fsr1l	equ	0xFE1
 13996                           indf2	equ	0xFDF
 13997                           postinc2	equ	0xFDE
 13998                           postdec2	equ	0xFDD
 13999                           plusw2	equ	0xFDB
 14000                           fsr2h	equ	0xFDA
 14001                           fsr2l	equ	0xFD9
 14002                           status	equ	0xFD8
 14003                           
 14004 ;; *************** function _vscp_getSubMinorVersion *****************
 14005 ;; Defined at:
 14006 ;;		line 2578 in file "../main.c"
 14007 ;; Parameters:    Size  Location     Type
 14008 ;;		None
 14009 ;; Auto vars:     Size  Location     Type
 14010 ;;		None
 14011 ;; Return value:  Size  Location     Type
 14012 ;;                  1    wreg      unsigned char 
 14013 ;; Registers used:
 14014 ;;		wreg
 14015 ;; Tracked objects:
 14016 ;;		On entry : F/0
 14017 ;;		On exit  : F/0
 14018 ;;		Unchanged: F/0
 14019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14020 ;;      Params:         0       0       0       0       0       0       0
 14021 ;;      Locals:         0       0       0       0       0       0       0
 14022 ;;      Temps:          0       0       0       0       0       0       0
 14023 ;;      Totals:         0       0       0       0       0       0       0
 14024 ;;Total ram usage:        0 bytes
 14025 ;; Hardware stack levels used:    1
 14026 ;; Hardware stack levels required when called:    2
 14027 ;; This function calls:
 14028 ;;		Nothing
 14029 ;; This function is called by:
 14030 ;;		_vscp_readStdReg
 14031 ;; This function uses a non-reentrant model
 14032 ;;
 14033                           
 14034                           	psect	text54
 14035  005588                     __ptext54:
 14036                           	opt stack 0
 14037  005588                     _vscp_getSubMinorVersion:
 14038                           	opt stack 25
 14039                           
 14040                           ; BSR set to: 0
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;main.c: 2579: return 2;
 14044                           
 14045                           ;incstack = 0
 14046                           ;incstack = 0
 14047  005588  0C02               	retlw	2
 14048  00558A                     __end_of_vscp_getSubMinorVersion:
 14049                           	opt stack 0
 14050                           tblptru	equ	0xFF8
 14051                           tblptrh	equ	0xFF7
 14052                           tblptrl	equ	0xFF6
 14053                           tablat	equ	0xFF5
 14054                           prodh	equ	0xFF4
 14055                           prodl	equ	0xFF3
 14056                           intcon	equ	0xFF2
 14057                           postinc0	equ	0xFEE
 14058                           wreg	equ	0xFE8
 14059                           indf1	equ	0xFE7
 14060                           postdec1	equ	0xFE5
 14061                           fsr1h	equ	0xFE2
 14062                           fsr1l	equ	0xFE1
 14063                           indf2	equ	0xFDF
 14064                           postinc2	equ	0xFDE
 14065                           postdec2	equ	0xFDD
 14066                           plusw2	equ	0xFDB
 14067                           fsr2h	equ	0xFDA
 14068                           fsr2l	equ	0xFD9
 14069                           status	equ	0xFD8
 14070                           
 14071 ;; *************** function _vscp_getMinorVersion *****************
 14072 ;; Defined at:
 14073 ;;		line 2569 in file "../main.c"
 14074 ;; Parameters:    Size  Location     Type
 14075 ;;		None
 14076 ;; Auto vars:     Size  Location     Type
 14077 ;;		None
 14078 ;; Return value:  Size  Location     Type
 14079 ;;                  1    wreg      unsigned char 
 14080 ;; Registers used:
 14081 ;;		wreg
 14082 ;; Tracked objects:
 14083 ;;		On entry : F/0
 14084 ;;		On exit  : F/0
 14085 ;;		Unchanged: F/0
 14086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14087 ;;      Params:         0       0       0       0       0       0       0
 14088 ;;      Locals:         0       0       0       0       0       0       0
 14089 ;;      Temps:          0       0       0       0       0       0       0
 14090 ;;      Totals:         0       0       0       0       0       0       0
 14091 ;;Total ram usage:        0 bytes
 14092 ;; Hardware stack levels used:    1
 14093 ;; Hardware stack levels required when called:    2
 14094 ;; This function calls:
 14095 ;;		Nothing
 14096 ;; This function is called by:
 14097 ;;		_vscp_readStdReg
 14098 ;; This function uses a non-reentrant model
 14099 ;;
 14100                           
 14101                           	psect	text55
 14102  00558A                     __ptext55:
 14103                           	opt stack 0
 14104  00558A                     _vscp_getMinorVersion:
 14105                           	opt stack 25
 14106                           
 14107                           ; BSR set to: 0
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;main.c: 2570: return 2;
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;incstack = 0
 14114                           ;incstack = 0
 14115  00558A  0C02               	retlw	2
 14116  00558C                     __end_of_vscp_getMinorVersion:
 14117                           	opt stack 0
 14118                           tblptru	equ	0xFF8
 14119                           tblptrh	equ	0xFF7
 14120                           tblptrl	equ	0xFF6
 14121                           tablat	equ	0xFF5
 14122                           prodh	equ	0xFF4
 14123                           prodl	equ	0xFF3
 14124                           intcon	equ	0xFF2
 14125                           postinc0	equ	0xFEE
 14126                           wreg	equ	0xFE8
 14127                           indf1	equ	0xFE7
 14128                           postdec1	equ	0xFE5
 14129                           fsr1h	equ	0xFE2
 14130                           fsr1l	equ	0xFE1
 14131                           indf2	equ	0xFDF
 14132                           postinc2	equ	0xFDE
 14133                           postdec2	equ	0xFDD
 14134                           plusw2	equ	0xFDB
 14135                           fsr2h	equ	0xFDA
 14136                           fsr2l	equ	0xFD9
 14137                           status	equ	0xFD8
 14138                           
 14139 ;; *************** function _vscp_getMajorVersion *****************
 14140 ;; Defined at:
 14141 ;;		line 2560 in file "../main.c"
 14142 ;; Parameters:    Size  Location     Type
 14143 ;;		None
 14144 ;; Auto vars:     Size  Location     Type
 14145 ;;		None
 14146 ;; Return value:  Size  Location     Type
 14147 ;;                  1    wreg      unsigned char 
 14148 ;; Registers used:
 14149 ;;		wreg
 14150 ;; Tracked objects:
 14151 ;;		On entry : F/0
 14152 ;;		On exit  : F/0
 14153 ;;		Unchanged: F/0
 14154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14155 ;;      Params:         0       0       0       0       0       0       0
 14156 ;;      Locals:         0       0       0       0       0       0       0
 14157 ;;      Temps:          0       0       0       0       0       0       0
 14158 ;;      Totals:         0       0       0       0       0       0       0
 14159 ;;Total ram usage:        0 bytes
 14160 ;; Hardware stack levels used:    1
 14161 ;; Hardware stack levels required when called:    2
 14162 ;; This function calls:
 14163 ;;		Nothing
 14164 ;; This function is called by:
 14165 ;;		_vscp_readStdReg
 14166 ;; This function uses a non-reentrant model
 14167 ;;
 14168                           
 14169                           	psect	text56
 14170  00558C                     __ptext56:
 14171                           	opt stack 0
 14172  00558C                     _vscp_getMajorVersion:
 14173                           	opt stack 25
 14174                           
 14175                           ; BSR set to: 0
 14176                           
 14177                           ; BSR set to: 0
 14178                           ;main.c: 2561: return 1;
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;incstack = 0
 14182                           ;incstack = 0
 14183  00558C  0C01               	retlw	1
 14184  00558E                     __end_of_vscp_getMajorVersion:
 14185                           	opt stack 0
 14186                           tblptru	equ	0xFF8
 14187                           tblptrh	equ	0xFF7
 14188                           tblptrl	equ	0xFF6
 14189                           tablat	equ	0xFF5
 14190                           prodh	equ	0xFF4
 14191                           prodl	equ	0xFF3
 14192                           intcon	equ	0xFF2
 14193                           postinc0	equ	0xFEE
 14194                           wreg	equ	0xFE8
 14195                           indf1	equ	0xFE7
 14196                           postdec1	equ	0xFE5
 14197                           fsr1h	equ	0xFE2
 14198                           fsr1l	equ	0xFE1
 14199                           indf2	equ	0xFDF
 14200                           postinc2	equ	0xFDE
 14201                           postdec2	equ	0xFDD
 14202                           plusw2	equ	0xFDB
 14203                           fsr2h	equ	0xFDA
 14204                           fsr2l	equ	0xFD9
 14205                           status	equ	0xFD8
 14206                           
 14207 ;; *************** function _vscp_newNodeOnline *****************
 14208 ;; Defined at:
 14209 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14210 ;; Parameters:    Size  Location     Type
 14211 ;;		None
 14212 ;; Auto vars:     Size  Location     Type
 14213 ;;		None
 14214 ;; Return value:  Size  Location     Type
 14215 ;;		None               void
 14216 ;; Registers used:
 14217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14218 ;; Tracked objects:
 14219 ;;		On entry : F/0
 14220 ;;		On exit  : F/0
 14221 ;;		Unchanged: 0/0
 14222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14223 ;;      Params:         0       0       0       0       0       0       0
 14224 ;;      Locals:         0       0       0       0       0       0       0
 14225 ;;      Temps:          1       0       0       0       0       0       0
 14226 ;;      Totals:         1       0       0       0       0       0       0
 14227 ;;Total ram usage:        1 bytes
 14228 ;; Hardware stack levels used:    1
 14229 ;; Hardware stack levels required when called:    7
 14230 ;; This function calls:
 14231 ;;		_vscp_sendEvent
 14232 ;; This function is called by:
 14233 ;;		_vscp_handleProtocolEvent
 14234 ;; This function uses a non-reentrant model
 14235 ;;
 14236                           
 14237                           	psect	text57
 14238  005200                     __ptext57:
 14239                           	opt stack 0
 14240  005200                     _vscp_newNodeOnline:
 14241                           	opt stack 21
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14245                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;incstack = 0
 14249                           ;incstack = 0
 14250  005200  C086  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14251  005204  0E0F               	movlw	15
 14252  005206  1644               	andwf	??_vscp_newNodeOnline,f,c
 14253  005208  0444               	decf	??_vscp_newNodeOnline,w,c
 14254  00520A  E10E               	bnz	l1094
 14255                           
 14256                           ; BSR set to: 0
 14257  00520C  5184               	movf	_vscp_nickname& (0+255),w,b
 14258  00520E  EE20  F08C         	lfsr	2,_vscp_imsg+6
 14259  005212  62DF               	cpfseq	indf2,c
 14260  005214  D009               	goto	l1094
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14264  005216  0E80               	movlw	128
 14265  005218  6F94               	movwf	_vscp_omsg& (0+255),b
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14269  00521A  6B95               	clrf	(_vscp_omsg+1)& (0+255),b
 14270                           
 14271                           ; BSR set to: 0
 14272                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14273  00521C  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
 14274  00521E  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
 14275                           
 14276                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14277  005220  0E03               	movlw	3
 14278  005222  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
 14279                           
 14280                           ; BSR set to: 0
 14281                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14282  005224  EC3E  F029         	call	_vscp_sendEvent	;wreg free
 14283  005228                     l1094:
 14284                           
 14285                           ; BSR set to: 0
 14286  005228  0012               	return	
 14287  00522A                     __end_of_vscp_newNodeOnline:
 14288                           	opt stack 0
 14289                           tblptru	equ	0xFF8
 14290                           tblptrh	equ	0xFF7
 14291                           tblptrl	equ	0xFF6
 14292                           tablat	equ	0xFF5
 14293                           prodh	equ	0xFF4
 14294                           prodl	equ	0xFF3
 14295                           intcon	equ	0xFF2
 14296                           postinc0	equ	0xFEE
 14297                           wreg	equ	0xFE8
 14298                           indf1	equ	0xFE7
 14299                           postdec1	equ	0xFE5
 14300                           fsr1h	equ	0xFE2
 14301                           fsr1l	equ	0xFE1
 14302                           indf2	equ	0xFDF
 14303                           postinc2	equ	0xFDE
 14304                           postdec2	equ	0xFDD
 14305                           plusw2	equ	0xFDB
 14306                           fsr2h	equ	0xFDA
 14307                           fsr2l	equ	0xFD9
 14308                           status	equ	0xFD8
 14309                           
 14310 ;; *************** function _vscp_handleDropNickname *****************
 14311 ;; Defined at:
 14312 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14313 ;; Parameters:    Size  Location     Type
 14314 ;;		None
 14315 ;; Auto vars:     Size  Location     Type
 14316 ;;  bytes           1   17[COMRAM] unsigned char 
 14317 ;; Return value:  Size  Location     Type
 14318 ;;		None               void
 14319 ;; Registers used:
 14320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14321 ;; Tracked objects:
 14322 ;;		On entry : F/0
 14323 ;;		On exit  : F/0
 14324 ;;		Unchanged: 0/0
 14325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14326 ;;      Params:         0       0       0       0       0       0       0
 14327 ;;      Locals:         1       0       0       0       0       0       0
 14328 ;;      Temps:          0       0       0       0       0       0       0
 14329 ;;      Totals:         1       0       0       0       0       0       0
 14330 ;;Total ram usage:        1 bytes
 14331 ;; Hardware stack levels used:    1
 14332 ;; Hardware stack levels required when called:    5
 14333 ;; This function calls:
 14334 ;;		_vscp_init
 14335 ;;		_vscp_writeNicknamePermanent
 14336 ;; This function is called by:
 14337 ;;		_vscp_handleProtocolEvent
 14338 ;; This function uses a non-reentrant model
 14339 ;;
 14340                           
 14341                           	psect	text58
 14342  00514E                     __ptext58:
 14343                           	opt stack 0
 14344  00514E                     _vscp_handleDropNickname:
 14345                           	opt stack 23
 14346                           
 14347                           ; BSR set to: 0
 14348                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14349                           
 14350                           ; BSR set to: 0
 14351                           ;incstack = 0
 14352                           ;incstack = 0
 14353  00514E  5186               	movf	_vscp_imsg& (0+255),w,b
 14354  005150  0B0F               	andlw	15
 14355  005152  6E12               	movwf	vscp_handleDropNickname@bytes,c
 14356                           
 14357                           ; BSR set to: 0
 14358                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14359  005154  5012               	movf	vscp_handleDropNickname@bytes,w,c
 14360  005156  E012               	bz	l1090
 14361                           
 14362                           ; BSR set to: 0
 14363  005158  5184               	movf	_vscp_nickname& (0+255),w,b
 14364  00515A  EE20  F08C         	lfsr	2,_vscp_imsg+6
 14365  00515E  62DF               	cpfseq	indf2,c
 14366  005160  D00D               	goto	l1090
 14367                           
 14368                           ; BSR set to: 0
 14369                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14370  005162  0412               	decf	vscp_handleDropNickname@bytes,w,c
 14371  005164  E005               	bz	l1089
 14372                           
 14373                           ; BSR set to: 0
 14374  005166  0E01               	movlw	1
 14375  005168  6412               	cpfsgt	vscp_handleDropNickname@bytes,c
 14376  00516A  D008               	goto	l1090
 14377                           
 14378                           ; BSR set to: 0
 14379  00516C  678D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14380  00516E  D006               	goto	l1090
 14381  005170                     l1089:
 14382                           
 14383                           ; BSR set to: 0
 14384                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14385  005170  6984               	setf	_vscp_nickname& (0+255),b
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14389  005172  0EFF               	movlw	255
 14390  005174  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 14391                           
 14392                           ;vscp_firmware.c: 481: vscp_init();
 14393  005178  EC97  F027         	call	_vscp_init	;wreg free
 14394  00517C                     l1090:
 14395                           
 14396                           ; BSR set to: 0
 14397  00517C  0012               	return	
 14398  00517E                     __end_of_vscp_handleDropNickname:
 14399                           	opt stack 0
 14400                           tblptru	equ	0xFF8
 14401                           tblptrh	equ	0xFF7
 14402                           tblptrl	equ	0xFF6
 14403                           tablat	equ	0xFF5
 14404                           prodh	equ	0xFF4
 14405                           prodl	equ	0xFF3
 14406                           intcon	equ	0xFF2
 14407                           postinc0	equ	0xFEE
 14408                           wreg	equ	0xFE8
 14409                           indf1	equ	0xFE7
 14410                           postdec1	equ	0xFE5
 14411                           fsr1h	equ	0xFE2
 14412                           fsr1l	equ	0xFE1
 14413                           indf2	equ	0xFDF
 14414                           postinc2	equ	0xFDE
 14415                           postdec2	equ	0xFDD
 14416                           plusw2	equ	0xFDB
 14417                           fsr2h	equ	0xFDA
 14418                           fsr2l	equ	0xFD9
 14419                           status	equ	0xFD8
 14420                           
 14421 ;; *************** function _vscp_init *****************
 14422 ;; Defined at:
 14423 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14424 ;; Parameters:    Size  Location     Type
 14425 ;;		None
 14426 ;; Auto vars:     Size  Location     Type
 14427 ;;		None
 14428 ;; Return value:  Size  Location     Type
 14429 ;;		None               void
 14430 ;; Registers used:
 14431 ;;		wreg, status,2, cstack
 14432 ;; Tracked objects:
 14433 ;;		On entry : 0/1
 14434 ;;		On exit  : F/0
 14435 ;;		Unchanged: 0/0
 14436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14437 ;;      Params:         0       0       0       0       0       0       0
 14438 ;;      Locals:         0       0       0       0       0       0       0
 14439 ;;      Temps:          0       0       0       0       0       0       0
 14440 ;;      Totals:         0       0       0       0       0       0       0
 14441 ;;Total ram usage:        0 bytes
 14442 ;; Hardware stack levels used:    1
 14443 ;; Hardware stack levels required when called:    4
 14444 ;; This function calls:
 14445 ;;		_vscp_readNicknamePermanent
 14446 ;; This function is called by:
 14447 ;;		_main
 14448 ;;		_vscp_handleDropNickname
 14449 ;;		_vscp_handleProtocolEvent
 14450 ;; This function uses a non-reentrant model
 14451 ;;
 14452                           
 14453                           	psect	text59
 14454  004F2E                     __ptext59:
 14455                           	opt stack 0
 14456  004F2E                     _vscp_init:
 14457                           	opt stack 23
 14458                           
 14459                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14460                           
 14461                           ; BSR set to: 0
 14462                           ;incstack = 0
 14463                           ;incstack = 0
 14464  004F2E  0E02               	movlw	2
 14465  004F30  6E4C               	movwf	_vscp_initledfunc,c
 14466                           
 14467                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14468  004F32  ECAD  F02A         	call	_vscp_readNicknamePermanent	;wreg free
 14469  004F36  0100               	movlb	0	; () banked
 14470  004F38  6F84               	movwf	_vscp_nickname& (0+255),b
 14471                           
 14472                           ; BSR set to: 0
 14473                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14474  004F3A  6784               	tstfsz	_vscp_nickname& (0+255),b
 14475  004F3C  D001               	goto	l1031
 14476                           
 14477                           ; BSR set to: 0
 14478  004F3E  6984               	setf	_vscp_nickname& (0+255),b
 14479  004F40                     l1031:
 14480                           
 14481                           ; BSR set to: 0
 14482                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14483  004F40  6B86               	clrf	_vscp_imsg& (0+255),b
 14484                           
 14485                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14486  004F42  6B87               	clrf	(_vscp_imsg+1)& (0+255),b
 14487                           
 14488                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14489  004F44  6B88               	clrf	(_vscp_imsg+2)& (0+255),b
 14490  004F46  6B89               	clrf	(_vscp_imsg+3)& (0+255),b
 14491                           
 14492                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14493  004F48  6B8A               	clrf	(_vscp_imsg+4)& (0+255),b
 14494                           
 14495                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14496  004F4A  6B94               	clrf	_vscp_omsg& (0+255),b
 14497                           
 14498                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14499  004F4C  6B95               	clrf	(_vscp_omsg+1)& (0+255),b
 14500                           
 14501                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14502  004F4E  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
 14503  004F50  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
 14504                           
 14505                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14506  004F52  6B98               	clrf	(_vscp_omsg+4)& (0+255),b
 14507                           
 14508                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14509  004F54  6A4A               	clrf	_vscp_alarmstatus,c
 14510                           
 14511                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14512  004F56  6A4F               	clrf	_vscp_probe_address,c
 14513                           
 14514                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14515  004F58  6B85               	clrf	_vscp_node_state& (0+255),b
 14516                           
 14517                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14518  004F5A  6A4E               	clrf	_vscp_node_substate,c
 14519                           
 14520                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14521  004F5C  6A50               	clrf	_vscp_probe_cnt,c
 14522                           
 14523                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14524  004F5E  6A46               	clrf	_vscp_page_select,c
 14525  004F60  6A47               	clrf	_vscp_page_select+1,c
 14526                           
 14527                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14528  004F62  6B76               	clrf	_vscp_timer& (0+255),b	;volatile
 14529  004F64  6B77               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14530                           
 14531                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14532  004F66  6B74               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14533  004F68  6B75               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14534                           
 14535                           ;vscp_firmware.c: 155: vscp_second = 0;
 14536  004F6A  6A51               	clrf	_vscp_second,c
 14537                           
 14538                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14539  004F6C  6A4D               	clrf	_vscp_minute,c
 14540                           
 14541                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14542  004F6E  6B82               	clrf	_vscp_hour& (0+255),b
 14543                           
 14544                           ; BSR set to: 0
 14545  004F70  0012               	return	
 14546  004F72                     __end_of_vscp_init:
 14547                           	opt stack 0
 14548                           tblptru	equ	0xFF8
 14549                           tblptrh	equ	0xFF7
 14550                           tblptrl	equ	0xFF6
 14551                           tablat	equ	0xFF5
 14552                           prodh	equ	0xFF4
 14553                           prodl	equ	0xFF3
 14554                           intcon	equ	0xFF2
 14555                           postinc0	equ	0xFEE
 14556                           wreg	equ	0xFE8
 14557                           indf1	equ	0xFE7
 14558                           postdec1	equ	0xFE5
 14559                           fsr1h	equ	0xFE2
 14560                           fsr1l	equ	0xFE1
 14561                           indf2	equ	0xFDF
 14562                           postinc2	equ	0xFDE
 14563                           postdec2	equ	0xFDD
 14564                           plusw2	equ	0xFDB
 14565                           fsr2h	equ	0xFDA
 14566                           fsr2l	equ	0xFD9
 14567                           status	equ	0xFD8
 14568                           
 14569 ;; *************** function _vscp_readNicknamePermanent *****************
 14570 ;; Defined at:
 14571 ;;		line 2761 in file "../main.c"
 14572 ;; Parameters:    Size  Location     Type
 14573 ;;		None
 14574 ;; Auto vars:     Size  Location     Type
 14575 ;;		None
 14576 ;; Return value:  Size  Location     Type
 14577 ;;                  1    wreg      unsigned char 
 14578 ;; Registers used:
 14579 ;;		wreg, status,2, cstack
 14580 ;; Tracked objects:
 14581 ;;		On entry : 0/1
 14582 ;;		On exit  : 0/0
 14583 ;;		Unchanged: 0/0
 14584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14585 ;;      Params:         0       0       0       0       0       0       0
 14586 ;;      Locals:         0       0       0       0       0       0       0
 14587 ;;      Temps:          0       0       0       0       0       0       0
 14588 ;;      Totals:         0       0       0       0       0       0       0
 14589 ;;Total ram usage:        0 bytes
 14590 ;; Hardware stack levels used:    1
 14591 ;; Hardware stack levels required when called:    3
 14592 ;; This function calls:
 14593 ;;		_readEEPROM
 14594 ;; This function is called by:
 14595 ;;		_vscp_init
 14596 ;; This function uses a non-reentrant model
 14597 ;;
 14598                           
 14599                           	psect	text60
 14600  00555A                     __ptext60:
 14601                           	opt stack 0
 14602  00555A                     _vscp_readNicknamePermanent:
 14603                           	opt stack 23
 14604                           
 14605                           ;main.c: 2762: return readEEPROM( 0x01 );
 14606                           
 14607                           ; BSR set to: 0
 14608                           ;incstack = 0
 14609                           ;incstack = 0
 14610  00555A  6A0F               	clrf	?_readEEPROM+1,c
 14611  00555C  0E01               	movlw	1
 14612  00555E  6E0E               	movwf	?_readEEPROM,c
 14613  005560  EF62  F02A         	goto	_readEEPROM	;wreg free
 14614  005564                     __end_of_vscp_readNicknamePermanent:
 14615                           	opt stack 0
 14616                           tblptru	equ	0xFF8
 14617                           tblptrh	equ	0xFF7
 14618                           tblptrl	equ	0xFF6
 14619                           tablat	equ	0xFF5
 14620                           prodh	equ	0xFF4
 14621                           prodl	equ	0xFF3
 14622                           intcon	equ	0xFF2
 14623                           postinc0	equ	0xFEE
 14624                           wreg	equ	0xFE8
 14625                           indf1	equ	0xFE7
 14626                           postdec1	equ	0xFE5
 14627                           fsr1h	equ	0xFE2
 14628                           fsr1l	equ	0xFE1
 14629                           indf2	equ	0xFDF
 14630                           postinc2	equ	0xFDE
 14631                           postdec2	equ	0xFDD
 14632                           plusw2	equ	0xFDB
 14633                           fsr2h	equ	0xFDA
 14634                           fsr2l	equ	0xFD9
 14635                           status	equ	0xFD8
 14636                           
 14637 ;; *************** function _vscp_handleSetNickname *****************
 14638 ;; Defined at:
 14639 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14640 ;; Parameters:    Size  Location     Type
 14641 ;;		None
 14642 ;; Auto vars:     Size  Location     Type
 14643 ;;		None
 14644 ;; Return value:  Size  Location     Type
 14645 ;;		None               void
 14646 ;; Registers used:
 14647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14648 ;; Tracked objects:
 14649 ;;		On entry : F/0
 14650 ;;		On exit  : 0/0
 14651 ;;		Unchanged: 0/0
 14652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14653 ;;      Params:         0       0       0       0       0       0       0
 14654 ;;      Locals:         0       0       0       0       0       0       0
 14655 ;;      Temps:          0       0       0       0       0       0       0
 14656 ;;      Totals:         0       0       0       0       0       0       0
 14657 ;;Total ram usage:        0 bytes
 14658 ;; Hardware stack levels used:    1
 14659 ;; Hardware stack levels required when called:    4
 14660 ;; This function calls:
 14661 ;;		_vscp_writeNicknamePermanent
 14662 ;;		_vscp_setSegmentCRC
 14663 ;; This function is called by:
 14664 ;;		_vscp_handleProtocolEvent
 14665 ;; This function uses a non-reentrant model
 14666 ;;
 14667                           
 14668                           	psect	text61
 14669  005314                     __ptext61:
 14670                           	opt stack 0
 14671  005314                     _vscp_handleSetNickname:
 14672                           	opt stack 24
 14673                           
 14674                           ; BSR set to: 0
 14675                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 14676                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14677                           
 14678                           ;incstack = 0
 14679                           ;incstack = 0
 14680  005314  5186               	movf	_vscp_imsg& (0+255),w,b
 14681  005316  0B0F               	andlw	15
 14682  005318  0A02               	xorlw	2
 14683  00531A  E10D               	bnz	l1083
 14684                           
 14685                           ; BSR set to: 0
 14686  00531C  5184               	movf	_vscp_nickname& (0+255),w,b
 14687  00531E  EE20  F08C         	lfsr	2,_vscp_imsg+6
 14688  005322  62DF               	cpfseq	indf2,c
 14689  005324  D008               	goto	l1083
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 14693  005326  C08D  F084         	movff	_vscp_imsg+7,_vscp_nickname
 14694                           
 14695                           ; BSR set to: 0
 14696                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 14697  00532A  5184               	movf	_vscp_nickname& (0+255),w,b
 14698  00532C  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 14699                           
 14700                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 14701  005330  0E40               	movlw	64
 14702  005332  EC75  F02A         	call	_vscp_setSegmentCRC
 14703  005336                     l1083:
 14704  005336  0012               	return	
 14705  005338                     __end_of_vscp_handleSetNickname:
 14706                           	opt stack 0
 14707                           tblptru	equ	0xFF8
 14708                           tblptrh	equ	0xFF7
 14709                           tblptrl	equ	0xFF6
 14710                           tablat	equ	0xFF5
 14711                           prodh	equ	0xFF4
 14712                           prodl	equ	0xFF3
 14713                           intcon	equ	0xFF2
 14714                           postinc0	equ	0xFEE
 14715                           wreg	equ	0xFE8
 14716                           indf1	equ	0xFE7
 14717                           postdec1	equ	0xFE5
 14718                           fsr1h	equ	0xFE2
 14719                           fsr1l	equ	0xFE1
 14720                           indf2	equ	0xFDF
 14721                           postinc2	equ	0xFDE
 14722                           postdec2	equ	0xFDD
 14723                           plusw2	equ	0xFDB
 14724                           fsr2h	equ	0xFDA
 14725                           fsr2l	equ	0xFD9
 14726                           status	equ	0xFD8
 14727                           
 14728 ;; *************** function _vscp_handleHeartbeat *****************
 14729 ;; Defined at:
 14730 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 14731 ;; Parameters:    Size  Location     Type
 14732 ;;		None
 14733 ;; Auto vars:     Size  Location     Type
 14734 ;;		None
 14735 ;; Return value:  Size  Location     Type
 14736 ;;		None               void
 14737 ;; Registers used:
 14738 ;;		wreg, status,2, status,0, cstack
 14739 ;; Tracked objects:
 14740 ;;		On entry : F/0
 14741 ;;		On exit  : 0/0
 14742 ;;		Unchanged: 0/0
 14743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14744 ;;      Params:         0       0       0       0       0       0       0
 14745 ;;      Locals:         0       0       0       0       0       0       0
 14746 ;;      Temps:          0       0       0       0       0       0       0
 14747 ;;      Totals:         0       0       0       0       0       0       0
 14748 ;;Total ram usage:        0 bytes
 14749 ;; Hardware stack levels used:    1
 14750 ;; Hardware stack levels required when called:    4
 14751 ;; This function calls:
 14752 ;;		_vscp_writeNicknamePermanent
 14753 ;;		_vscp_getSegmentCRC
 14754 ;;		_vscp_setSegmentCRC
 14755 ;; This function is called by:
 14756 ;;		_vscp_handleProtocolEvent
 14757 ;; This function uses a non-reentrant model
 14758 ;;
 14759                           
 14760                           	psect	text62
 14761  004FF6                     __ptext62:
 14762                           	opt stack 0
 14763  004FF6                     _vscp_handleHeartbeat:
 14764                           	opt stack 24
 14765                           
 14766                           ; BSR set to: 0
 14767                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 14768                           
 14769                           ;incstack = 0
 14770                           ;incstack = 0
 14771  004FF6  ECB2  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14772  004FFA  0900               	iorlw	0
 14773  004FFC  E116               	bnz	l11234
 14774                           
 14775                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14776                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14777  004FFE  0100               	movlb	0	; () banked
 14778  005000  5186               	movf	_vscp_imsg& (0+255),w,b
 14779  005002  0B0F               	andlw	15
 14780  005004  0A05               	xorlw	5
 14781  005006  E115               	bnz	l1079
 14782                           
 14783                           ; BSR set to: 0
 14784  005008  ECB2  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14785  00500C  0100               	movlb	0	; () banked
 14786  00500E  198C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14787  005010  E010               	bz	l1079
 14788                           
 14789                           ; BSR set to: 0
 14790                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14791  005012  518C               	movf	(_vscp_imsg+6)& (0+255),w,b
 14792  005014  EC75  F02A         	call	_vscp_setSegmentCRC
 14793                           
 14794                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 14795  005018  0100               	movlb	0	; () banked
 14796  00501A  6984               	setf	_vscp_nickname& (0+255),b
 14797                           
 14798                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 14799  00501C  0EFF               	movlw	255
 14800  00501E  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 14801                           
 14802                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 14803  005022  0E01               	movlw	1
 14804  005024  0100               	movlb	0	; () banked
 14805  005026  6F85               	movwf	_vscp_node_state& (0+255),b
 14806  005028  D004               	goto	l1079
 14807  00502A                     l11234:
 14808                           
 14809                           ;vscp_firmware.c: 411: else {
 14810                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14811  00502A  0100               	movlb	0	; () banked
 14812  00502C  518C               	movf	(_vscp_imsg+6)& (0+255),w,b
 14813  00502E  EC75  F02A         	call	_vscp_setSegmentCRC
 14814  005032                     l1079:
 14815  005032  0012               	return	
 14816  005034                     __end_of_vscp_handleHeartbeat:
 14817                           	opt stack 0
 14818                           tblptru	equ	0xFF8
 14819                           tblptrh	equ	0xFF7
 14820                           tblptrl	equ	0xFF6
 14821                           tablat	equ	0xFF5
 14822                           prodh	equ	0xFF4
 14823                           prodl	equ	0xFF3
 14824                           intcon	equ	0xFF2
 14825                           postinc0	equ	0xFEE
 14826                           wreg	equ	0xFE8
 14827                           indf1	equ	0xFE7
 14828                           postdec1	equ	0xFE5
 14829                           fsr1h	equ	0xFE2
 14830                           fsr1l	equ	0xFE1
 14831                           indf2	equ	0xFDF
 14832                           postinc2	equ	0xFDE
 14833                           postdec2	equ	0xFDD
 14834                           plusw2	equ	0xFDB
 14835                           fsr2h	equ	0xFDA
 14836                           fsr2l	equ	0xFD9
 14837                           status	equ	0xFD8
 14838                           
 14839 ;; *************** function _vscp_goBootloaderMode *****************
 14840 ;; Defined at:
 14841 ;;		line 2744 in file "../main.c"
 14842 ;; Parameters:    Size  Location     Type
 14843 ;;  algorithm       1    wreg     unsigned char 
 14844 ;; Auto vars:     Size  Location     Type
 14845 ;;  algorithm       1   16[COMRAM] unsigned char 
 14846 ;; Return value:  Size  Location     Type
 14847 ;;		None               void
 14848 ;; Registers used:
 14849 ;;		wreg, status,2, status,0, cstack
 14850 ;; Tracked objects:
 14851 ;;		On entry : F/0
 14852 ;;		On exit  : 0/0
 14853 ;;		Unchanged: 0/0
 14854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14855 ;;      Params:         0       0       0       0       0       0       0
 14856 ;;      Locals:         1       0       0       0       0       0       0
 14857 ;;      Temps:          0       0       0       0       0       0       0
 14858 ;;      Totals:         1       0       0       0       0       0       0
 14859 ;;Total ram usage:        1 bytes
 14860 ;; Hardware stack levels used:    1
 14861 ;; Hardware stack levels required when called:    3
 14862 ;; This function calls:
 14863 ;;		_writeEEPROM
 14864 ;; This function is called by:
 14865 ;;		_vscp_handleProtocolEvent
 14866 ;; This function uses a non-reentrant model
 14867 ;;
 14868                           
 14869                           	psect	text63
 14870  005458                     __ptext63:
 14871                           	opt stack 0
 14872  005458                     _vscp_goBootloaderMode:
 14873                           	opt stack 25
 14874                           
 14875                           ;incstack = 0
 14876                           ;incstack = 0
 14877                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14878  005458  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14879                           
 14880                           ; BSR set to: 0
 14881                           ;main.c: 2745: if ( 0x01 != algorithm ) return;
 14882  00545C  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14883  00545E  E107               	bnz	l594
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;main.c: 2749: writeEEPROM(0x00, 0xff);
 14887  005460  6A0F               	clrf	?_writeEEPROM+1,c
 14888  005462  6A0E               	clrf	?_writeEEPROM,c
 14889  005464  0EFF               	movlw	255
 14890  005466  6810               	setf	?_writeEEPROM+2,c
 14891  005468  EC65  F029         	call	_writeEEPROM	;wreg free
 14892  00546C  00FF               	reset		;# 
 14893  00546E                     l594:
 14894  00546E  0012               	return	
 14895  005470                     __end_of_vscp_goBootloaderMode:
 14896                           	opt stack 0
 14897                           tblptru	equ	0xFF8
 14898                           tblptrh	equ	0xFF7
 14899                           tblptrl	equ	0xFF6
 14900                           tablat	equ	0xFF5
 14901                           prodh	equ	0xFF4
 14902                           prodl	equ	0xFF3
 14903                           intcon	equ	0xFF2
 14904                           postinc0	equ	0xFEE
 14905                           wreg	equ	0xFE8
 14906                           indf1	equ	0xFE7
 14907                           postdec1	equ	0xFE5
 14908                           fsr1h	equ	0xFE2
 14909                           fsr1l	equ	0xFE1
 14910                           indf2	equ	0xFDF
 14911                           postinc2	equ	0xFDE
 14912                           postdec2	equ	0xFDD
 14913                           plusw2	equ	0xFDB
 14914                           fsr2h	equ	0xFDA
 14915                           fsr2l	equ	0xFD9
 14916                           status	equ	0xFD8
 14917                           
 14918 ;; *************** function _vscp_getMatrixInfo *****************
 14919 ;; Defined at:
 14920 ;;		line 2679 in file "../main.c"
 14921 ;; Parameters:    Size  Location     Type
 14922 ;;  pData           1    wreg     PTR unsigned char 
 14923 ;;		 -> vscp_omsg(13), 
 14924 ;; Auto vars:     Size  Location     Type
 14925 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14926 ;;		 -> vscp_omsg(13), 
 14927 ;;  i               1   14[COMRAM] unsigned char 
 14928 ;; Return value:  Size  Location     Type
 14929 ;;		None               void
 14930 ;; Registers used:
 14931 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14932 ;; Tracked objects:
 14933 ;;		On entry : F/0
 14934 ;;		On exit  : F/0
 14935 ;;		Unchanged: F/0
 14936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14937 ;;      Params:         0       0       0       0       0       0       0
 14938 ;;      Locals:         2       0       0       0       0       0       0
 14939 ;;      Temps:          0       0       0       0       0       0       0
 14940 ;;      Totals:         2       0       0       0       0       0       0
 14941 ;;Total ram usage:        2 bytes
 14942 ;; Hardware stack levels used:    1
 14943 ;; Hardware stack levels required when called:    2
 14944 ;; This function calls:
 14945 ;;		Nothing
 14946 ;; This function is called by:
 14947 ;;		_vscp_handleProtocolEvent
 14948 ;; This function uses a non-reentrant model
 14949 ;;
 14950                           
 14951                           	psect	text64
 14952  0053F6                     __ptext64:
 14953                           	opt stack 0
 14954  0053F6                     _vscp_getMatrixInfo:
 14955                           	opt stack 26
 14956                           
 14957                           ;incstack = 0
 14958                           ;incstack = 0
 14959                           ;vscp_getMatrixInfo@pData stored from wreg
 14960  0053F6  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14961                           
 14962                           ; BSR set to: 0
 14963                           ;main.c: 2680: uint8_t i;
 14964                           ;main.c: 2684: for (i = 0; i < 8; i++) {
 14965  0053FA  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14966  0053FC                     l8094:
 14967                           
 14968                           ; BSR set to: 0
 14969                           ;main.c: 2685: pData[ i ] = 0;
 14970  0053FC  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14971  0053FE  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14972  005400  6ED9               	movwf	fsr2l,c
 14973  005402  6ADA               	clrf	fsr2h,c
 14974  005404  6ADF               	clrf	indf2,c
 14975                           
 14976                           ; BSR set to: 0
 14977  005406  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14978                           
 14979                           ; BSR set to: 0
 14980  005408  0E07               	movlw	7
 14981  00540A  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14982  00540C  D7F7               	goto	l8094
 14983                           
 14984                           ; BSR set to: 0
 14985  00540E  0C07               	retlw	7
 14986  005410                     __end_of_vscp_getMatrixInfo:
 14987                           	opt stack 0
 14988                           tblptru	equ	0xFF8
 14989                           tblptrh	equ	0xFF7
 14990                           tblptrl	equ	0xFF6
 14991                           tablat	equ	0xFF5
 14992                           prodh	equ	0xFF4
 14993                           prodl	equ	0xFF3
 14994                           intcon	equ	0xFF2
 14995                           postinc0	equ	0xFEE
 14996                           wreg	equ	0xFE8
 14997                           indf1	equ	0xFE7
 14998                           postdec1	equ	0xFE5
 14999                           fsr1h	equ	0xFE2
 15000                           fsr1l	equ	0xFE1
 15001                           indf2	equ	0xFDF
 15002                           postinc2	equ	0xFDE
 15003                           postdec2	equ	0xFDD
 15004                           plusw2	equ	0xFDB
 15005                           fsr2h	equ	0xFDA
 15006                           fsr2l	equ	0xFD9
 15007                           status	equ	0xFD8
 15008                           
 15009 ;; *************** function _vscp_handleProbeState *****************
 15010 ;; Defined at:
 15011 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 15012 ;; Parameters:    Size  Location     Type
 15013 ;;		None
 15014 ;; Auto vars:     Size  Location     Type
 15015 ;;		None
 15016 ;; Return value:  Size  Location     Type
 15017 ;;		None               void
 15018 ;; Registers used:
 15019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : F/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15025 ;;      Params:         0       0       0       0       0       0       0
 15026 ;;      Locals:         0       0       0       0       0       0       0
 15027 ;;      Temps:          0       0       0       0       0       0       0
 15028 ;;      Totals:         0       0       0       0       0       0       0
 15029 ;;Total ram usage:        0 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; Hardware stack levels required when called:    8
 15032 ;; This function calls:
 15033 ;;		_vscp_goActiveState
 15034 ;;		_vscp_sendEvent
 15035 ;;		_vscp_writeNicknamePermanent
 15036 ;;		_vscp_setSegmentCRC
 15037 ;; This function is called by:
 15038 ;;		_main
 15039 ;; This function uses a non-reentrant model
 15040 ;;
 15041                           
 15042                           	psect	text65
 15043  004226                     __ptext65:
 15044                           	opt stack 0
 15045  004226                     _vscp_handleProbeState:
 15046                           	opt stack 21
 15047                           
 15048                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;incstack = 0
 15052                           ;incstack = 0
 15053  004226  D055               	goto	l9704
 15054  004228                     l9634:
 15055                           
 15056                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 15057  004228  284F               	incf	_vscp_probe_address,w,c
 15058  00422A  E011               	bz	l9650
 15059                           
 15060                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 15061  00422C  0E81               	movlw	129
 15062  00422E  0100               	movlb	0	; () banked
 15063  004230  6F94               	movwf	_vscp_omsg& (0+255),b
 15064                           
 15065                           ; BSR set to: 0
 15066                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 15067  004232  6B95               	clrf	(_vscp_omsg+1)& (0+255),b
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 15071  004234  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
 15072  004236  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
 15073                           
 15074                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 15075  004238  0E02               	movlw	2
 15076  00423A  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15080  00423C  C04F  F099         	movff	_vscp_probe_address,_vscp_omsg+5
 15081                           
 15082                           ; BSR set to: 0
 15083                           ;vscp_firmware.c: 216: vscp_sendEvent();
 15084  004240  EC3E  F029         	call	_vscp_sendEvent	;wreg free
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 15088  004244  0E01               	movlw	1
 15089  004246  6E4E               	movwf	_vscp_node_substate,c
 15090  004248                     l9648:
 15091                           
 15092                           ; BSR set to: 0
 15093                           ;vscp_firmware.c: 219: vscp_timer = 0;
 15094  004248  6B76               	clrf	_vscp_timer& (0+255),b	;volatile
 15095  00424A  6B77               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15096                           
 15097                           ;vscp_firmware.c: 221: }
 15098  00424C  D048               	goto	l1046
 15099  00424E                     l9650:
 15100                           
 15101                           ;vscp_firmware.c: 222: else {
 15102                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 15103  00424E  0E04               	movlw	4
 15104  004250  0100               	movlb	0	; () banked
 15105  004252  6F85               	movwf	_vscp_node_state& (0+255),b
 15106                           
 15107                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 15108  004254  0E81               	movlw	129
 15109  004256  6F94               	movwf	_vscp_omsg& (0+255),b
 15110                           
 15111                           ; BSR set to: 0
 15112                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 15113  004258  6999               	setf	(_vscp_omsg+5)& (0+255),b
 15114                           
 15115                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 15116  00425A  0E07               	movlw	7
 15117  00425C  6F95               	movwf	(_vscp_omsg+1)& (0+255),b
 15118                           
 15119                           ; BSR set to: 0
 15120                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 15121  00425E  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
 15122  004260  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
 15123                           
 15124                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 15125  004262  0E03               	movlw	3
 15126  004264  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;vscp_firmware.c: 235: vscp_sendEvent();
 15130  004266  EC3E  F029         	call	_vscp_sendEvent	;wreg free
 15131  00426A  D039               	goto	l1046
 15132  00426C                     l1047:
 15133                           
 15134                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 15135  00426C  0100               	movlb	0	; () banked
 15136  00426E  AF86               	btfss	_vscp_imsg& (0+255),7,b
 15137  004270  D00F               	goto	l9674
 15138                           
 15139                           ; BSR set to: 0
 15140                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 15141                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 15142  004272  5189               	movf	(_vscp_imsg+3)& (0+255),w,b
 15143  004274  1188               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15144  004276  E133               	bnz	l1046
 15145                           
 15146                           ; BSR set to: 0
 15147  004278  518A               	movf	(_vscp_imsg+4)& (0+255),w,b
 15148  00427A  0A03               	xorlw	3
 15149  00427C  E130               	bnz	l1046
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 15153  00427E  664F               	tstfsz	_vscp_probe_address,c
 15154  004280  D003               	goto	l9668
 15155                           
 15156                           ; BSR set to: 0
 15157                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 15158  004282  0E02               	movlw	2
 15159  004284  6F85               	movwf	_vscp_node_state& (0+255),b
 15160  004286  D7E0               	goto	l9648
 15161  004288                     l9668:
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;vscp_firmware.c: 257: else {
 15165                           ;vscp_firmware.c: 260: vscp_probe_address++;
 15166  004288  2A4F               	incf	_vscp_probe_address,f,c
 15167                           
 15168                           ; BSR set to: 0
 15169                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 15170  00428A  6A4E               	clrf	_vscp_node_substate,c
 15171  00428C                     l9672:
 15172                           
 15173                           ; BSR set to: 0
 15174                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 15175  00428C  6A50               	clrf	_vscp_probe_cnt,c
 15176  00428E  D027               	goto	l1046
 15177  004290                     l9674:
 15178                           
 15179                           ; BSR set to: 0
 15180                           ;vscp_firmware.c: 267: else {
 15181                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 15182  004290  0EE9               	movlw	233
 15183  004292  5D76               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15184  004294  0E03               	movlw	3
 15185  004296  5977               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15186  004298  E322               	bnc	l1046
 15187                           
 15188                           ; BSR set to: 0
 15189                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15190  00429A  2A50               	incf	_vscp_probe_cnt,f,c
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15194  00429C  0E02               	movlw	2
 15195  00429E  6450               	cpfsgt	_vscp_probe_cnt,c
 15196  0042A0  D016               	goto	l1054
 15197                           
 15198                           ; BSR set to: 0
 15199                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15200  0042A2  664F               	tstfsz	_vscp_probe_address,c
 15201  0042A4  D005               	goto	l1055
 15202                           
 15203                           ; BSR set to: 0
 15204                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15205  0042A6  2A4F               	incf	_vscp_probe_address,f,c
 15206                           
 15207                           ; BSR set to: 0
 15208                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15209  0042A8  6A4E               	clrf	_vscp_node_substate,c
 15210                           
 15211                           ; BSR set to: 0
 15212                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15213  0042AA  6B76               	clrf	_vscp_timer& (0+255),b	;volatile
 15214  0042AC  6B77               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15215  0042AE  D7EE               	goto	l9672
 15216  0042B0                     l1055:
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;vscp_firmware.c: 285: else {
 15220                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15221  0042B0  C04F  F084         	movff	_vscp_probe_address,_vscp_nickname
 15222                           
 15223                           ; BSR set to: 0
 15224                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15225  0042B4  0E03               	movlw	3
 15226  0042B6  6F85               	movwf	_vscp_node_state& (0+255),b
 15227                           
 15228                           ; BSR set to: 0
 15229                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15230  0042B8  6A4E               	clrf	_vscp_node_substate,c
 15231                           
 15232                           ; BSR set to: 0
 15233                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15234  0042BA  5184               	movf	_vscp_nickname& (0+255),w,b
 15235  0042BC  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 15236                           
 15237                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15238  0042C0  0E40               	movlw	64
 15239  0042C2  EC75  F02A         	call	_vscp_setSegmentCRC
 15240                           
 15241                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15242  0042C6  6A50               	clrf	_vscp_probe_cnt,c
 15243                           
 15244                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15245  0042C8  ECD0  F029         	call	_vscp_goActiveState	;wreg free
 15246  0042CC  D008               	goto	l1046
 15247  0042CE                     l1054:
 15248                           
 15249                           ;vscp_firmware.c: 300: else {
 15250                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15251  0042CE  6A4E               	clrf	_vscp_node_substate,c
 15252  0042D0  D006               	goto	l1046
 15253  0042D2                     l9704:
 15254  0042D2  504E               	movf	_vscp_node_substate,w,c
 15255                           
 15256                           ; Switch size 1, requested type "space"
 15257                           ; Number of cases is 3, Range of values is 0 to 2
 15258                           ; switch strategies available:
 15259                           ; Name         Instructions Cycles
 15260                           ; simple_byte           10     6 (average)
 15261                           ;	Chosen strategy is simple_byte
 15262  0042D4  E0A9               	bz	l9634
 15263  0042D6  0A01               	xorlw	1	; case 1
 15264  0042D8  E0C9               	bz	l1047
 15265  0042DA  0A03               	xorlw	3	; case 2
 15266  0042DC  E1F8               	bnz	l1054
 15267  0042DE                     l1046:
 15268                           
 15269                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15270  0042DE  0100               	movlb	0	; () banked
 15271  0042E0  6B86               	clrf	_vscp_imsg& (0+255),b
 15272                           
 15273                           ; BSR set to: 0
 15274  0042E2  0012               	return	
 15275  0042E4                     __end_of_vscp_handleProbeState:
 15276                           	opt stack 0
 15277                           tblptru	equ	0xFF8
 15278                           tblptrh	equ	0xFF7
 15279                           tblptrl	equ	0xFF6
 15280                           tablat	equ	0xFF5
 15281                           prodh	equ	0xFF4
 15282                           prodl	equ	0xFF3
 15283                           intcon	equ	0xFF2
 15284                           postinc0	equ	0xFEE
 15285                           wreg	equ	0xFE8
 15286                           indf1	equ	0xFE7
 15287                           postdec1	equ	0xFE5
 15288                           fsr1h	equ	0xFE2
 15289                           fsr1l	equ	0xFE1
 15290                           indf2	equ	0xFDF
 15291                           postinc2	equ	0xFDE
 15292                           postdec2	equ	0xFDD
 15293                           plusw2	equ	0xFDB
 15294                           fsr2h	equ	0xFDA
 15295                           fsr2l	equ	0xFD9
 15296                           status	equ	0xFD8
 15297                           
 15298 ;; *************** function _vscp_goActiveState *****************
 15299 ;; Defined at:
 15300 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15301 ;; Parameters:    Size  Location     Type
 15302 ;;		None
 15303 ;; Auto vars:     Size  Location     Type
 15304 ;;		None
 15305 ;; Return value:  Size  Location     Type
 15306 ;;		None               void
 15307 ;; Registers used:
 15308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15309 ;; Tracked objects:
 15310 ;;		On entry : 0/0
 15311 ;;		On exit  : F/0
 15312 ;;		Unchanged: 0/0
 15313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15314 ;;      Params:         0       0       0       0       0       0       0
 15315 ;;      Locals:         0       0       0       0       0       0       0
 15316 ;;      Temps:          0       0       0       0       0       0       0
 15317 ;;      Totals:         0       0       0       0       0       0       0
 15318 ;;Total ram usage:        0 bytes
 15319 ;; Hardware stack levels used:    1
 15320 ;; Hardware stack levels required when called:    7
 15321 ;; This function calls:
 15322 ;;		_vscp_sendEvent
 15323 ;; This function is called by:
 15324 ;;		_main
 15325 ;;		_vscp_handleProbeState
 15326 ;; This function uses a non-reentrant model
 15327 ;;
 15328                           
 15329                           	psect	text66
 15330  0053A0                     __ptext66:
 15331                           	opt stack 0
 15332  0053A0                     _vscp_goActiveState:
 15333                           	opt stack 21
 15334                           
 15335                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15336                           
 15337                           ; BSR set to: 0
 15338                           ;incstack = 0
 15339                           ;incstack = 0
 15340  0053A0  0E81               	movlw	129
 15341  0053A2  0100               	movlb	0	; () banked
 15342  0053A4  6F94               	movwf	_vscp_omsg& (0+255),b
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15346  0053A6  6B95               	clrf	(_vscp_omsg+1)& (0+255),b
 15347                           
 15348                           ; BSR set to: 0
 15349                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15350  0053A8  6B96               	clrf	(_vscp_omsg+2)& (0+255),b
 15351  0053AA  6B97               	clrf	(_vscp_omsg+3)& (0+255),b
 15352                           
 15353                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15354  0053AC  0E02               	movlw	2
 15355  0053AE  6F98               	movwf	(_vscp_omsg+4)& (0+255),b
 15356                           
 15357                           ; BSR set to: 0
 15358                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15359  0053B0  C084  F099         	movff	_vscp_nickname,_vscp_omsg+5
 15360                           
 15361                           ; BSR set to: 0
 15362                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15363  0053B4  EC3E  F029         	call	_vscp_sendEvent	;wreg free
 15364                           
 15365                           ; BSR set to: 0
 15366                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15367  0053B8  0E01               	movlw	1
 15368  0053BA  6E4C               	movwf	_vscp_initledfunc,c
 15369                           
 15370                           ; BSR set to: 0
 15371  0053BC  0C01               	retlw	1
 15372  0053BE                     __end_of_vscp_goActiveState:
 15373                           	opt stack 0
 15374                           tblptru	equ	0xFF8
 15375                           tblptrh	equ	0xFF7
 15376                           tblptrl	equ	0xFF6
 15377                           tablat	equ	0xFF5
 15378                           prodh	equ	0xFF4
 15379                           prodl	equ	0xFF3
 15380                           intcon	equ	0xFF2
 15381                           postinc0	equ	0xFEE
 15382                           wreg	equ	0xFE8
 15383                           indf1	equ	0xFE7
 15384                           postdec1	equ	0xFE5
 15385                           fsr1h	equ	0xFE2
 15386                           fsr1l	equ	0xFE1
 15387                           indf2	equ	0xFDF
 15388                           postinc2	equ	0xFDE
 15389                           postdec2	equ	0xFDD
 15390                           plusw2	equ	0xFDB
 15391                           fsr2h	equ	0xFDA
 15392                           fsr2l	equ	0xFD9
 15393                           status	equ	0xFD8
 15394                           
 15395 ;; *************** function _vscp_sendEvent *****************
 15396 ;; Defined at:
 15397 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15398 ;; Parameters:    Size  Location     Type
 15399 ;;		None
 15400 ;; Auto vars:     Size  Location     Type
 15401 ;;  rv              1   66[COMRAM] unsigned char 
 15402 ;; Return value:  Size  Location     Type
 15403 ;;                  1    wreg      unsigned char 
 15404 ;; Registers used:
 15405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15406 ;; Tracked objects:
 15407 ;;		On entry : F/0
 15408 ;;		On exit  : F/0
 15409 ;;		Unchanged: 0/0
 15410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15411 ;;      Params:         0       0       0       0       0       0       0
 15412 ;;      Locals:         1       0       0       0       0       0       0
 15413 ;;      Temps:          0       0       0       0       0       0       0
 15414 ;;      Totals:         1       0       0       0       0       0       0
 15415 ;;Total ram usage:        1 bytes
 15416 ;; Hardware stack levels used:    1
 15417 ;; Hardware stack levels required when called:    6
 15418 ;; This function calls:
 15419 ;;		_sendVSCPFrame
 15420 ;; This function is called by:
 15421 ;;		_doWork
 15422 ;;		_doOneSecondWork
 15423 ;;		_sendTempEvent
 15424 ;;		_vscp_handleProbeState
 15425 ;;		_vscp_goActiveState
 15426 ;;		_vscp_sendHeartBeat
 15427 ;;		_vscp_newNodeOnline
 15428 ;;		_vscp_handleProtocolEvent
 15429 ;; This function uses a non-reentrant model
 15430 ;;
 15431                           
 15432                           	psect	text67
 15433  00527C                     __ptext67:
 15434                           	opt stack 0
 15435  00527C                     _vscp_sendEvent:
 15436                           	opt stack 22
 15437                           
 15438                           ; BSR set to: 0
 15439                           ;vscp_firmware.c: 1297: vscp_errorcnt++;
 15440                           
 15441                           ; BSR set to: 0
 15442                           ;incstack = 0
 15443                           ;incstack = 0
 15444  00527C  C096  F0A1         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15445  005280  C097  F0A2         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15446  005284  C098  F0A3         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15447  005288  C084  F0A4         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15448  00528C  C095  F0A5         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15449  005290  5194               	movf	_vscp_omsg& (0+255),w,b
 15450  005292  0B0F               	andlw	15
 15451  005294  6FA6               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15452  005296  0E99               	movlw	low (_vscp_omsg+5)
 15453  005298  6FA7               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15454  00529A  ECE0  F022         	call	_sendVSCPFrame	;wreg free
 15455  00529E  6E43               	movwf	vscp_sendEvent@rv,c
 15456                           
 15457                           ; BSR set to: 0
 15458                           ;vscp_firmware.c: 1298: }
 15459                           ;vscp_firmware.c: 1300: return rv;
 15460  0052A0  5043               	movf	vscp_sendEvent@rv,w,c
 15461                           
 15462                           ; BSR set to: 0
 15463  0052A2  0012               	return	
 15464  0052A4                     __end_of_vscp_sendEvent:
 15465                           	opt stack 0
 15466                           tblptru	equ	0xFF8
 15467                           tblptrh	equ	0xFF7
 15468                           tblptrl	equ	0xFF6
 15469                           tablat	equ	0xFF5
 15470                           prodh	equ	0xFF4
 15471                           prodl	equ	0xFF3
 15472                           intcon	equ	0xFF2
 15473                           postinc0	equ	0xFEE
 15474                           wreg	equ	0xFE8
 15475                           indf1	equ	0xFE7
 15476                           postdec1	equ	0xFE5
 15477                           fsr1h	equ	0xFE2
 15478                           fsr1l	equ	0xFE1
 15479                           indf2	equ	0xFDF
 15480                           postinc2	equ	0xFDE
 15481                           postdec2	equ	0xFDD
 15482                           plusw2	equ	0xFDB
 15483                           fsr2h	equ	0xFDA
 15484                           fsr2l	equ	0xFD9
 15485                           status	equ	0xFD8
 15486                           
 15487 ;; *************** function _sendVSCPFrame *****************
 15488 ;; Defined at:
 15489 ;;		line 2850 in file "../main.c"
 15490 ;; Parameters:    Size  Location     Type
 15491 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15492 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15493 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15494 ;;  priority        1    4[BANK0 ] unsigned char 
 15495 ;;  size            1    5[BANK0 ] unsigned char 
 15496 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15497 ;;		 -> vscp_omsg(13), 
 15498 ;; Auto vars:     Size  Location     Type
 15499 ;;  id              4   27[BANK0 ] unsigned long 
 15500 ;; Return value:  Size  Location     Type
 15501 ;;                  1    wreg      unsigned char 
 15502 ;; Registers used:
 15503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15504 ;; Tracked objects:
 15505 ;;		On entry : F/0
 15506 ;;		On exit  : F/0
 15507 ;;		Unchanged: 0/0
 15508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15509 ;;      Params:         0       7       0       0       0       0       0
 15510 ;;      Locals:         0       4       0       0       0       0       0
 15511 ;;      Temps:          0      20       0       0       0       0       0
 15512 ;;      Totals:         0      31       0       0       0       0       0
 15513 ;;Total ram usage:       31 bytes
 15514 ;; Hardware stack levels used:    1
 15515 ;; Hardware stack levels required when called:    5
 15516 ;; This function calls:
 15517 ;;		_sendCANFrame
 15518 ;; This function is called by:
 15519 ;;		_vscp_sendEvent
 15520 ;; This function uses a non-reentrant model
 15521 ;;
 15522                           
 15523                           	psect	text68
 15524  0045C0                     __ptext68:
 15525                           	opt stack 0
 15526  0045C0                     _sendVSCPFrame:
 15527                           	opt stack 22
 15528                           
 15529                           ; BSR set to: 0
 15530                           ;main.c: 2851: uint32_t id = ((uint32_t) priority << 26) |
 15531                           ;main.c: 2852: ((uint32_t) vscpclass << 16) |
 15532                           ;main.c: 2853: ((uint32_t) vscptype << 8) |
 15533                           ;main.c: 2854: nodeid;
 15534                           
 15535                           ; BSR set to: 0
 15536                           ;incstack = 0
 15537                           ;incstack = 0
 15538  0045C0  C0A3  F0A8         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15539  0045C4  6BA9               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15540  0045C6  6BAA               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15541  0045C8  6BAB               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15542  0045CA  C0AA  F0AB         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15543  0045CE  C0A9  F0AA         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15544  0045D2  C0A8  F0A9         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15545  0045D6  6BA8               	clrf	??_sendVSCPFrame& (0+255),b
 15546  0045D8  51A1               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15547  0045DA  6FAC               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15548  0045DC  51A2               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15549  0045DE  6FAD               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15550  0045E0  6BAE               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15551  0045E2  6BAF               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15552  0045E4  C0AD  F0AF         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15553  0045E8  C0AC  F0AE         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15554  0045EC  6BAD               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15555  0045EE  6BAC               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15556  0045F0  C0A5  F0B0         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15557  0045F4  6BB1               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15558  0045F6  6BB2               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15559  0045F8  6BB3               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15560  0045FA  0E1A               	movlw	26
 15561  0045FC                     u9025:
 15562  0045FC  90D8               	bcf	status,0,c
 15563  0045FE  37B0               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15564  004600  37B1               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15565  004602  37B2               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15566  004604  37B3               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15567  004606  2EE8               	decfsz	wreg,f,c
 15568  004608  D7F9               	goto	u9025
 15569  00460A  51AC               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15570  00460C  11B0               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15571  00460E  6FB4               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15572  004610  51AD               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15573  004612  11B1               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15574  004614  6FB5               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15575  004616  51AE               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15576  004618  11B2               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15577  00461A  6FB6               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15578  00461C  51AF               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15579  00461E  11B3               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15580  004620  6FB7               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15581  004622  51A8               	movf	??_sendVSCPFrame& (0+255),w,b
 15582  004624  11B4               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15583  004626  6FB8               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15584  004628  51A9               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15585  00462A  11B5               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15586  00462C  6FB9               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15587  00462E  51AA               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15588  004630  11B6               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15589  004632  6FBA               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15590  004634  51AB               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15591  004636  11B7               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15592  004638  6FBB               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15593  00463A  51A4               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15594  00463C  11B8               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15595  00463E  6FBC               	movwf	sendVSCPFrame@id& (0+255),b
 15596  004640  51B9               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15597  004642  6FBD               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15598  004644  51BA               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15599  004646  6FBE               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15600  004648  51BB               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15601  00464A  6FBF               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15602                           
 15603                           ; BSR set to: 0
 15604                           ;main.c: 2858: vscp_errorcnt++;
 15605  00464C  C0BC  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15606  004650  C0BD  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15607  004654  C0BE  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15608  004658  C0BF  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15609  00465C  C0A6  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15610  004660  C0A7  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15611  004664  ECBF  F028         	call	_sendCANFrame	;wreg free
 15612  004668  0900               	iorlw	0
 15613                           
 15614                           ; BSR set to: 0
 15615                           ;main.c: 2859: return 0;
 15616  00466A  0E00               	movlw	0
 15617  00466C  A4D8               	btfss	status,2,c
 15618                           
 15619                           ; BSR set to: 0
 15620                           ;main.c: 2860: }
 15621                           ;main.c: 2862: return 1;
 15622  00466E  0E01               	movlw	1
 15623                           
 15624                           ; BSR set to: 0
 15625  004670  0012               	return	
 15626  004672                     __end_of_sendVSCPFrame:
 15627                           	opt stack 0
 15628                           tblptru	equ	0xFF8
 15629                           tblptrh	equ	0xFF7
 15630                           tblptrl	equ	0xFF6
 15631                           tablat	equ	0xFF5
 15632                           prodh	equ	0xFF4
 15633                           prodl	equ	0xFF3
 15634                           intcon	equ	0xFF2
 15635                           postinc0	equ	0xFEE
 15636                           wreg	equ	0xFE8
 15637                           indf1	equ	0xFE7
 15638                           postdec1	equ	0xFE5
 15639                           fsr1h	equ	0xFE2
 15640                           fsr1l	equ	0xFE1
 15641                           indf2	equ	0xFDF
 15642                           postinc2	equ	0xFDE
 15643                           postdec2	equ	0xFDD
 15644                           plusw2	equ	0xFDB
 15645                           fsr2h	equ	0xFDA
 15646                           fsr2l	equ	0xFD9
 15647                           status	equ	0xFD8
 15648                           
 15649 ;; *************** function _sendCANFrame *****************
 15650 ;; Defined at:
 15651 ;;		line 2897 in file "../main.c"
 15652 ;; Parameters:    Size  Location     Type
 15653 ;;  id              4   59[COMRAM] unsigned long 
 15654 ;;  dlc             1   63[COMRAM] unsigned char 
 15655 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15656 ;;		 -> vscp_omsg(13), 
 15657 ;; Auto vars:     Size  Location     Type
 15658 ;;  rv              1    0        unsigned char 
 15659 ;; Return value:  Size  Location     Type
 15660 ;;                  1    wreg      unsigned char 
 15661 ;; Registers used:
 15662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15663 ;; Tracked objects:
 15664 ;;		On entry : F/0
 15665 ;;		On exit  : F/0
 15666 ;;		Unchanged: 0/0
 15667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15668 ;;      Params:         6       0       0       0       0       0       0
 15669 ;;      Locals:         1       0       0       0       0       0       0
 15670 ;;      Temps:          0       0       0       0       0       0       0
 15671 ;;      Totals:         7       0       0       0       0       0       0
 15672 ;;Total ram usage:        7 bytes
 15673 ;; Hardware stack levels used:    1
 15674 ;; Hardware stack levels required when called:    4
 15675 ;; This function calls:
 15676 ;;		_ECANSendMessage
 15677 ;; This function is called by:
 15678 ;;		_sendVSCPFrame
 15679 ;; This function uses a non-reentrant model
 15680 ;;
 15681                           
 15682                           	psect	text69
 15683  00517E                     __ptext69:
 15684                           	opt stack 0
 15685  00517E                     _sendCANFrame:
 15686                           	opt stack 22
 15687                           
 15688                           ; BSR set to: 0
 15689                           ;main.c: 2899: sendTimer = 0;
 15690                           
 15691                           ; BSR set to: 0
 15692                           ;incstack = 0
 15693                           ;incstack = 0
 15694  00517E  6B81               	clrf	_sendTimer& (0+255),b	;volatile
 15695  005180                     l11104:
 15696                           
 15697                           ;main.c: 2902: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15698  005180  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15699  005184  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15700  005188  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15701  00518C  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15702  005190  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15703  005194  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15704  005198  0E20               	movlw	32
 15705  00519A  6E1E               	movwf	?_ECANSendMessage+6,c
 15706  00519C  ECD4  F01C         	call	_ECANSendMessage	;wreg free
 15707  0051A0  0900               	iorlw	0
 15708  0051A2  E0EE               	bz	l11104
 15709                           
 15710                           ;main.c: 2905: }
 15711                           ;main.c: 2906: }
 15712                           ;main.c: 2908: vscp_omsg.flags = 0;
 15713                           
 15714                           ;main.c: 2904: break;
 15715  0051A4  0100               	movlb	0	; () banked
 15716  0051A6  6B94               	clrf	_vscp_omsg& (0+255),b
 15717                           
 15718                           ; BSR set to: 0
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;main.c: 2910: return rv;
 15722  0051A8  0C01               	retlw	1
 15723  0051AA                     __end_of_sendCANFrame:
 15724                           	opt stack 0
 15725                           tblptru	equ	0xFF8
 15726                           tblptrh	equ	0xFF7
 15727                           tblptrl	equ	0xFF6
 15728                           tablat	equ	0xFF5
 15729                           prodh	equ	0xFF4
 15730                           prodl	equ	0xFF3
 15731                           intcon	equ	0xFF2
 15732                           postinc0	equ	0xFEE
 15733                           wreg	equ	0xFE8
 15734                           indf1	equ	0xFE7
 15735                           postdec1	equ	0xFE5
 15736                           fsr1h	equ	0xFE2
 15737                           fsr1l	equ	0xFE1
 15738                           indf2	equ	0xFDF
 15739                           postinc2	equ	0xFDE
 15740                           postdec2	equ	0xFDD
 15741                           plusw2	equ	0xFDB
 15742                           fsr2h	equ	0xFDA
 15743                           fsr2l	equ	0xFD9
 15744                           status	equ	0xFD8
 15745                           
 15746 ;; *************** function _ECANSendMessage *****************
 15747 ;; Defined at:
 15748 ;;		line 617 in file "../ECAN.c"
 15749 ;; Parameters:    Size  Location     Type
 15750 ;;  id              4   23[COMRAM] unsigned long 
 15751 ;;  data            1   27[COMRAM] PTR unsigned char 
 15752 ;;		 -> vscp_omsg(13), 
 15753 ;;  dataLen         1   28[COMRAM] unsigned char 
 15754 ;;  msgFlags        1   29[COMRAM] enum E16315
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15757 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15758 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15759 ;;		 -> B0CON(1), 
 15760 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15761 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15762 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15763 ;;		 -> B0CON(1), 
 15764 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15765 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15766 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15767 ;;		 -> B0CON(1), 
 15768 ;;  i               1   56[COMRAM] unsigned char 
 15769 ;;  temp            1   55[COMRAM] unsigned char 
 15770 ;;  tempBSEL0       1   52[COMRAM] struct .
 15771 ;;  j               1   51[COMRAM] unsigned char 
 15772 ;;  buffers         1   50[COMRAM] unsigned char 
 15773 ;;  mode            1   49[COMRAM] unsigned char 
 15774 ;; Return value:  Size  Location     Type
 15775 ;;                  1    wreg      enum E15660
 15776 ;; Registers used:
 15777 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15778 ;; Tracked objects:
 15779 ;;		On entry : 0/0
 15780 ;;		On exit  : 0/0
 15781 ;;		Unchanged: 0/0
 15782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15783 ;;      Params:         7       0       0       0       0       0       0
 15784 ;;      Locals:        28       0       0       0       0       0       0
 15785 ;;      Temps:          1       0       0       0       0       0       0
 15786 ;;      Totals:        36       0       0       0       0       0       0
 15787 ;;Total ram usage:       36 bytes
 15788 ;; Hardware stack levels used:    1
 15789 ;; Hardware stack levels required when called:    3
 15790 ;; This function calls:
 15791 ;;		__CANIDToRegs
 15792 ;; This function is called by:
 15793 ;;		_sendCANFrame
 15794 ;; This function uses a non-reentrant model
 15795 ;;
 15796                           
 15797                           	psect	text70
 15798  0039A8                     __ptext70:
 15799                           	opt stack 0
 15800  0039A8                     _ECANSendMessage:
 15801                           	opt stack 22
 15802                           
 15803                           ;ECAN.c: 619: BYTE mode;
 15804                           ;ECAN.c: 620: BYTE buffers;
 15805                           ;ECAN.c: 628: BYTE i,j;
 15806                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15807                           ;ECAN.c: 630: BYTE* pb[9];
 15808                           ;ECAN.c: 631: BYTE temp;
 15809                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15810                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;incstack = 0
 15814                           ;incstack = 0
 15815  0039A8  0E0F               	movlw	15	;volatile
 15816  0039AA  6E21               	movwf	ECANSendMessage@pb+1,c
 15817  0039AC  0E40               	movlw	64	;volatile
 15818  0039AE  6E20               	movwf	ECANSendMessage@pb,c
 15819                           
 15820                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15821  0039B0  0E0F               	movlw	15	;volatile
 15822  0039B2  6E23               	movwf	ECANSendMessage@pb+3,c
 15823  0039B4  0E30               	movlw	48	;volatile
 15824  0039B6  6E22               	movwf	ECANSendMessage@pb+2,c
 15825                           
 15826                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15827  0039B8  0E0F               	movlw	15	;volatile
 15828  0039BA  6E25               	movwf	ECANSendMessage@pb+5,c
 15829  0039BC  0E20               	movlw	32	;volatile
 15830  0039BE  6E24               	movwf	ECANSendMessage@pb+4,c
 15831                           
 15832                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15833  0039C0  0E0E               	movlw	14	;volatile
 15834  0039C2  6E27               	movwf	ECANSendMessage@pb+7,c
 15835  0039C4  0E20               	movlw	32	;volatile
 15836  0039C6  6E26               	movwf	ECANSendMessage@pb+6,c
 15837                           
 15838                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15839  0039C8  0E0E               	movlw	14	;volatile
 15840  0039CA  6E29               	movwf	ECANSendMessage@pb+9,c
 15841  0039CC  0E30               	movlw	48	;volatile
 15842  0039CE  6E28               	movwf	ECANSendMessage@pb+8,c
 15843                           
 15844                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15845  0039D0  0E0E               	movlw	14	;volatile
 15846  0039D2  6E2B               	movwf	ECANSendMessage@pb+11,c
 15847  0039D4  0E40               	movlw	64	;volatile
 15848  0039D6  6E2A               	movwf	ECANSendMessage@pb+10,c
 15849                           
 15850                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15851  0039D8  0E0E               	movlw	14	;volatile
 15852  0039DA  6E2D               	movwf	ECANSendMessage@pb+13,c
 15853  0039DC  0E50               	movlw	80	;volatile
 15854  0039DE  6E2C               	movwf	ECANSendMessage@pb+12,c
 15855                           
 15856                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15857  0039E0  0E0E               	movlw	14	;volatile
 15858  0039E2  6E2F               	movwf	ECANSendMessage@pb+15,c
 15859  0039E4  0E60               	movlw	96	;volatile
 15860  0039E6  6E2E               	movwf	ECANSendMessage@pb+14,c
 15861                           
 15862                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15863  0039E8  0E0E               	movlw	14	;volatile
 15864  0039EA  6E31               	movwf	ECANSendMessage@pb+17,c
 15865  0039EC  0E70               	movlw	112	;volatile
 15866  0039EE  6E30               	movwf	ECANSendMessage@pb+16,c
 15867                           
 15868                           ; BSR set to: 14
 15869                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15870  0039F0  5077               	movf	3959,w,c	;volatile
 15871  0039F2  0BC0               	andlw	192
 15872  0039F4  6E32               	movwf	ECANSendMessage@mode,c
 15873                           
 15874                           ; BSR set to: 14
 15875                           ;ECAN.c: 660: if ( mode == 0x00 )
 15876  0039F6  6632               	tstfsz	ECANSendMessage@mode,c
 15877  0039F8  D002               	goto	l11120
 15878                           
 15879                           ; BSR set to: 14
 15880                           ;ECAN.c: 661: buffers = 2;
 15881  0039FA  0E02               	movlw	2
 15882  0039FC  D001               	goto	L33
 15883  0039FE                     l11120:
 15884                           
 15885                           ; BSR set to: 14
 15886                           ;ECAN.c: 662: else
 15887                           ;ECAN.c: 663: buffers = 8;
 15888  0039FE  0E08               	movlw	8
 15889  003A00                     L33:
 15890  003A00  6E33               	movwf	ECANSendMessage@buffers,c
 15891                           
 15892                           ; BSR set to: 14
 15893                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15894  003A02  010D               	movlb	13	; () banked
 15895  003A04  90D8               	bcf	status,0,c
 15896  003A06  31F8               	rrcf	248,w,b	;volatile
 15897  003A08  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15898                           
 15899                           ; BSR set to: 13
 15900                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15901  003A0A  6A39               	clrf	ECANSendMessage@i,c
 15902  003A0C  D07B               	goto	l11180
 15903  003A0E                     l11126:
 15904                           
 15905                           ;ECAN.c: 688: {
 15906                           ;ECAN.c: 693: ptr = pb[i];
 15907  003A0E  5039               	movf	ECANSendMessage@i,w,c
 15908  003A10  0D02               	mullw	2
 15909  003A12  50F3               	movf	prodl,w,c
 15910  003A14  0F20               	addlw	low ECANSendMessage@pb
 15911  003A16  6ED9               	movwf	fsr2l,c
 15912  003A18  6ADA               	clrf	fsr2h,c
 15913  003A1A  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15914  003A1E  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15915                           
 15916                           ;ECAN.c: 694: tempPtr = ptr;
 15917  003A22  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15918  003A26  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15919                           
 15920                           ;ECAN.c: 702: if ( i > 2 )
 15921  003A2A  0E02               	movlw	2
 15922  003A2C  6439               	cpfsgt	ECANSendMessage@i,c
 15923  003A2E  D004               	goto	l11138
 15924                           
 15925                           ;ECAN.c: 703: {
 15926                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15927  003A30  90D8               	bcf	status,0,c
 15928  003A32  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15929                           
 15930                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15931  003A34  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15932  003A36  D065               	goto	l11178
 15933  003A38                     l11138:
 15934                           
 15935                           ;ECAN.c: 714: }
 15936                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15937  003A38  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15938  003A3C  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15939  003A40  50DF               	movf	indf2,w,c
 15940  003A42  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15941  003A44  B61F               	btfsc	??_ECANSendMessage,3,c
 15942  003A46  D05D               	goto	l11178
 15943                           
 15944                           ;ECAN.c: 721: {
 15945                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15946  003A48  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15947  003A4C  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15948  003A50  0EFC               	movlw	252
 15949  003A52  16DF               	andwf	indf2,f,c
 15950                           
 15951                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15952  003A54  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15953  003A58  0E03               	movlw	3
 15954  003A5A  161F               	andwf	??_ECANSendMessage,f,c
 15955  003A5C  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15956  003A60  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15957  003A64  501F               	movf	??_ECANSendMessage,w,c
 15958  003A66  12DF               	iorwf	indf2,f,c
 15959                           
 15960                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15961  003A68  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15962  003A6A  D004               	goto	l823
 15963                           
 15964                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15965  003A6C  501D               	movf	ECANSendMessage@dataLen,w,c
 15966  003A6E  0940               	iorlw	64
 15967  003A70  6E38               	movwf	ECANSendMessage@temp,c
 15968  003A72  D002               	goto	l11148
 15969  003A74                     l823:
 15970                           
 15971                           ;ECAN.c: 729: else
 15972                           ;ECAN.c: 730: temp = dataLen;
 15973  003A74  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15974  003A78                     l11148:
 15975                           
 15976                           ;ECAN.c: 732: *(ptr+5) = temp;
 15977  003A78  EE20 F005          	lfsr	2,5
 15978  003A7C  503A               	movf	ECANSendMessage@ptr,w,c
 15979  003A7E  26D9               	addwf	fsr2l,f,c
 15980  003A80  503B               	movf	ECANSendMessage@ptr+1,w,c
 15981  003A82  22DA               	addwfc	fsr2h,f,c
 15982  003A84  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15983                           
 15984                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15985  003A88  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15986  003A8A  D003               	goto	l825
 15987                           
 15988                           ;ECAN.c: 736: temp = 1;
 15989  003A8C  0E01               	movlw	1
 15990  003A8E  6E38               	movwf	ECANSendMessage@temp,c
 15991  003A90  D001               	goto	l11154
 15992  003A92                     l825:
 15993                           
 15994                           ;ECAN.c: 738: else
 15995                           ;ECAN.c: 739: temp = 0;
 15996  003A92  6A38               	clrf	ECANSendMessage@temp,c
 15997  003A94                     l11154:
 15998                           
 15999                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16000  003A94  283A               	incf	ECANSendMessage@ptr,w,c
 16001  003A96  6E0E               	movwf	?__CANIDToRegs,c
 16002  003A98  0E00               	movlw	0
 16003  003A9A  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 16004  003A9C  6E0F               	movwf	?__CANIDToRegs+1,c
 16005  003A9E  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16006  003AA2  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16007  003AA6  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16008  003AAA  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16009  003AAE  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16010  003AB2  ECAD  F01E         	call	__CANIDToRegs	;wreg free
 16011                           
 16012                           ;ECAN.c: 745: ptr += 6;
 16013  003AB6  0E06               	movlw	6
 16014  003AB8  263A               	addwf	ECANSendMessage@ptr,f,c
 16015  003ABA  0E00               	movlw	0
 16016  003ABC  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 16017                           
 16018                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16019  003ABE  6A34               	clrf	ECANSendMessage@j,c
 16020  003AC0  D00D               	goto	l11168
 16021  003AC2                     l11160:
 16022                           
 16023                           ;ECAN.c: 748: *ptr++ = *data++;
 16024  003AC2  501C               	movf	ECANSendMessage@data,w,c
 16025  003AC4  6ED9               	movwf	fsr2l,c
 16026  003AC6  6ADA               	clrf	fsr2h,c
 16027  003AC8  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16028  003ACC  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16029  003AD0  CFDF FFE7          	movff	indf2,indf1
 16030  003AD4  2A1C               	incf	ECANSendMessage@data,f,c
 16031  003AD6  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 16032  003AD8  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 16033  003ADA  2A34               	incf	ECANSendMessage@j,f,c
 16034  003ADC                     l11168:
 16035  003ADC  501D               	movf	ECANSendMessage@dataLen,w,c
 16036  003ADE  5C34               	subwf	ECANSendMessage@j,w,c
 16037  003AE0  E3F0               	bnc	l11160
 16038                           
 16039                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16040  003AE2  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16041  003AE6  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16042  003AEA  50DF               	movf	indf2,w,c
 16043  003AEC  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 16044  003AEE  B41F               	btfsc	??_ECANSendMessage,2,c
 16045  003AF0  D006               	goto	l11174
 16046                           
 16047                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16048  003AF2  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16049  003AF6  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16050  003AFA  0E00               	movlw	0
 16051  003AFC  86DB               	bsf	plusw2,3,c
 16052  003AFE                     l11174:
 16053                           
 16054                           ;ECAN.c: 755: return TRUE;
 16055  003AFE  0E01               	movlw	1
 16056  003B00  D005               	goto	l831
 16057  003B02                     l11178:
 16058  003B02  2A39               	incf	ECANSendMessage@i,f,c
 16059  003B04                     l11180:
 16060  003B04  5033               	movf	ECANSendMessage@buffers,w,c
 16061  003B06  5C39               	subwf	ECANSendMessage@i,w,c
 16062  003B08  E382               	bnc	l11126
 16063                           
 16064                           ;ECAN.c: 756: }
 16065                           ;ECAN.c: 757: }
 16066                           ;ECAN.c: 760: return FALSE;
 16067  003B0A  0E00               	movlw	0
 16068  003B0C                     l831:
 16069  003B0C  0012               	return	
 16070  003B0E                     __end_of_ECANSendMessage:
 16071                           	opt stack 0
 16072                           tblptru	equ	0xFF8
 16073                           tblptrh	equ	0xFF7
 16074                           tblptrl	equ	0xFF6
 16075                           tablat	equ	0xFF5
 16076                           prodh	equ	0xFF4
 16077                           prodl	equ	0xFF3
 16078                           intcon	equ	0xFF2
 16079                           postinc0	equ	0xFEE
 16080                           wreg	equ	0xFE8
 16081                           indf1	equ	0xFE7
 16082                           postdec1	equ	0xFE5
 16083                           fsr1h	equ	0xFE2
 16084                           fsr1l	equ	0xFE1
 16085                           indf2	equ	0xFDF
 16086                           postinc2	equ	0xFDE
 16087                           postdec2	equ	0xFDD
 16088                           plusw2	equ	0xFDB
 16089                           fsr2h	equ	0xFDA
 16090                           fsr2l	equ	0xFD9
 16091                           status	equ	0xFD8
 16092                           
 16093 ;; *************** function __CANIDToRegs *****************
 16094 ;; Defined at:
 16095 ;;		line 1099 in file "../ECAN.c"
 16096 ;; Parameters:    Size  Location     Type
 16097 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16098 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16099 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16100 ;;		 -> B0CON(1), 
 16101 ;;  val             4   15[COMRAM] unsigned long 
 16102 ;;  type            1   19[COMRAM] unsigned char 
 16103 ;; Auto vars:     Size  Location     Type
 16104 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 16105 ;;		 -> _CANIDToRegs@val(4), 
 16106 ;; Return value:  Size  Location     Type
 16107 ;;		None               void
 16108 ;; Registers used:
 16109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16110 ;; Tracked objects:
 16111 ;;		On entry : 0/D
 16112 ;;		On exit  : 0/0
 16113 ;;		Unchanged: 0/0
 16114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16115 ;;      Params:         7       0       0       0       0       0       0
 16116 ;;      Locals:         1       0       0       0       0       0       0
 16117 ;;      Temps:          2       0       0       0       0       0       0
 16118 ;;      Totals:        10       0       0       0       0       0       0
 16119 ;;Total ram usage:       10 bytes
 16120 ;; Hardware stack levels used:    1
 16121 ;; Hardware stack levels required when called:    2
 16122 ;; This function calls:
 16123 ;;		Nothing
 16124 ;; This function is called by:
 16125 ;;		_ECANSendMessage
 16126 ;; This function uses a non-reentrant model
 16127 ;;
 16128                           
 16129                           	psect	text71
 16130  003D5A                     __ptext71:
 16131                           	opt stack 0
 16132  003D5A                     __CANIDToRegs:
 16133                           	opt stack 22
 16134                           
 16135                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16136                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16137                           
 16138                           ;incstack = 0
 16139                           ;incstack = 0
 16140  003D5A  0E10               	movlw	low __CANIDToRegs@val
 16141  003D5C  6E17               	movwf	__CANIDToRegs@Value,c
 16142                           
 16143                           ;ECAN.c: 1104: if ( type == 0 )
 16144  003D5E  6614               	tstfsz	__CANIDToRegs@type,c
 16145  003D60  D022               	goto	l11196
 16146                           
 16147                           ;ECAN.c: 1105: {
 16148                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16149  003D62  5017               	movf	__CANIDToRegs@Value,w,c
 16150  003D64  6ED9               	movwf	fsr2l,c
 16151  003D66  6ADA               	clrf	fsr2h,c
 16152  003D68  50DF               	movf	indf2,w,c
 16153  003D6A  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16154  003D6C  90D8               	bcf	status,0,c
 16155  003D6E  3215               	rrcf	??__CANIDToRegs,f,c
 16156  003D70  90D8               	bcf	status,0,c
 16157  003D72  3215               	rrcf	??__CANIDToRegs,f,c
 16158  003D74  90D8               	bcf	status,0,c
 16159  003D76  3015               	rrcf	??__CANIDToRegs,w,c
 16160                           
 16161                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16162  003D78  D862               	call	PL40	;call to abstracted procedure
 16163  003D7A  2AD9               	incf	fsr2l,f,c
 16164  003D7C  6ADA               	clrf	fsr2h,c
 16165  003D7E  D872               	call	PL84	;call to abstracted procedure
 16166  003D80                     u9155:
 16167  003D80  90D8               	bcf	status,0,c
 16168  003D82  3615               	rlcf	??__CANIDToRegs,f,c
 16169  003D84  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16170  003D86  D7FC               	goto	u9155
 16171  003D88  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16172                           
 16173                           ;ECAN.c: 1109: ptr++;
 16174                           
 16175                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16176  003D8C  D846               	call	PL18	;call to abstracted procedure
 16177  003D8E  D86A               	call	PL84	;call to abstracted procedure
 16178  003D90                     u9165:
 16179  003D90  90D8               	bcf	status,0,c
 16180  003D92  3615               	rlcf	??__CANIDToRegs,f,c
 16181  003D94  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16182  003D96  D7FC               	goto	u9165
 16183  003D98  5015               	movf	??__CANIDToRegs,w,c
 16184  003D9A  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16185  003D9E  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16186  003DA2  6EDF               	movwf	indf2,c
 16187                           
 16188                           ;ECAN.c: 1111: }
 16189  003DA4  D039               	goto	l885
 16190  003DA6                     l11196:
 16191                           
 16192                           ;ECAN.c: 1112: else
 16193                           ;ECAN.c: 1113: {
 16194                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16195  003DA6  5017               	movf	__CANIDToRegs@Value,w,c
 16196  003DA8  D842               	call	PL32	;call to abstracted procedure
 16197  003DAA  0E05               	movlw	5
 16198  003DAC  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16199  003DAE                     u9175:
 16200  003DAE  90D8               	bcf	status,0,c
 16201  003DB0  3215               	rrcf	??__CANIDToRegs,f,c
 16202  003DB2  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16203  003DB4  D7FC               	goto	u9175
 16204  003DB6  5015               	movf	??__CANIDToRegs,w,c
 16205                           
 16206                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16207  003DB8  D842               	call	PL40	;call to abstracted procedure
 16208  003DBA  0E03               	movlw	3
 16209  003DBC  D849               	call	PL46	;call to abstracted procedure
 16210  003DBE  3615               	rlcf	??__CANIDToRegs,f,c
 16211  003DC0  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16212                           
 16213                           ;ECAN.c: 1117: ptr++;
 16214                           
 16215                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16216  003DC4  D82A               	call	PL18	;call to abstracted procedure
 16217  003DC6  0E02               	movlw	2
 16218  003DC8  D843               	call	PL46	;call to abstracted procedure
 16219  003DCA  3415               	rlcf	??__CANIDToRegs,w,c
 16220  003DCC  0BE0               	andlw	224
 16221  003DCE  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16222  003DD2  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16223  003DD6  6EDF               	movwf	indf2,c
 16224                           
 16225                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16226  003DD8  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16227  003DDC  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16228  003DE0  0E00               	movlw	0
 16229  003DE2  86DB               	bsf	plusw2,3,c
 16230                           
 16231                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16232  003DE4  5017               	movf	__CANIDToRegs@Value,w,c
 16233  003DE6  D823               	call	PL32	;call to abstracted procedure
 16234  003DE8  0E03               	movlw	3
 16235  003DEA  1615               	andwf	??__CANIDToRegs,f,c
 16236  003DEC  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16237                           
 16238                           ;ECAN.c: 1122: ptr++;
 16239                           
 16240                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16241  003DF0  D814               	call	PL18	;call to abstracted procedure
 16242  003DF2  2AD9               	incf	fsr2l,f,c
 16243  003DF4  6ADA               	clrf	fsr2h,c
 16244  003DF6  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16245  003DFA  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16246  003DFE  CFDF FFE7          	movff	indf2,indf1
 16247                           
 16248                           ;ECAN.c: 1124: ptr++;
 16249  003E02  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16250  003E04  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16251                           
 16252                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16253  003E06  5017               	movf	__CANIDToRegs@Value,w,c
 16254  003E08  6ED9               	movwf	fsr2l,c
 16255  003E0A  6ADA               	clrf	fsr2h,c
 16256  003E0C  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16257  003E10  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16258  003E14  CFDF FFE7          	movff	indf2,indf1
 16259  003E18                     l885:
 16260  003E18  0012               	return	
 16261  003E1A                     __end_of__CANIDToRegs:
 16262                           	opt stack 0
 16263  003E1A                     PL18:
 16264                           	opt stack 22
 16265  003E1A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16266  003E1E  5015               	movf	??__CANIDToRegs,w,c
 16267  003E20  12DF               	iorwf	indf2,f,c
 16268  003E22  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16269  003E24  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16270  003E26  5017               	movf	__CANIDToRegs@Value,w,c
 16271  003E28  6ED9               	movwf	fsr2l,c
 16272  003E2A  6ADA               	clrf	fsr2h,c
 16273  003E2C  0012               	return	
 16274  003E2E                     __end_ofPL18:
 16275                           	opt stack 0
 16276  003E2E                     PL32:
 16277                           	opt stack 22
 16278  003E2E  6ED9               	movwf	fsr2l,c
 16279  003E30  6ADA               	clrf	fsr2h,c
 16280  003E32  0E02               	movlw	2
 16281  003E34  26D9               	addwf	fsr2l,f,c
 16282  003E36  6ADA               	clrf	fsr2h,c
 16283  003E38  50DF               	movf	indf2,w,c
 16284  003E3A  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16285  003E3C  0012               	return	
 16286  003E3E                     __end_ofPL32:
 16287                           	opt stack 0
 16288  003E3E                     PL40:
 16289                           	opt stack 22
 16290  003E3E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16291  003E42  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16292  003E46  6EDF               	movwf	indf2,c
 16293  003E48  5017               	movf	__CANIDToRegs@Value,w,c
 16294  003E4A  6ED9               	movwf	fsr2l,c
 16295  003E4C  6ADA               	clrf	fsr2h,c
 16296  003E4E  0012               	return	
 16297  003E50                     __end_ofPL40:
 16298                           	opt stack 0
 16299  003E50                     PL46:
 16300                           	opt stack 22
 16301  003E50  26D9               	addwf	fsr2l,f,c
 16302  003E52  6ADA               	clrf	fsr2h,c
 16303  003E54  50DF               	movf	indf2,w,c
 16304  003E56  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16305  003E58  90D8               	bcf	status,0,c
 16306  003E5A  3615               	rlcf	??__CANIDToRegs,f,c
 16307  003E5C  90D8               	bcf	status,0,c
 16308  003E5E  3615               	rlcf	??__CANIDToRegs,f,c
 16309  003E60  90D8               	bcf	status,0,c
 16310  003E62  0012               	return	
 16311  003E64                     __end_ofPL46:
 16312                           	opt stack 0
 16313  003E64                     PL84:
 16314                           	opt stack 22
 16315  003E64  50DF               	movf	indf2,w,c
 16316  003E66  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16317  003E68  0E05               	movlw	5
 16318  003E6A  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16319  003E6C  0C05               	retlw	5
 16320  003E6E                     __end_ofPL84:
 16321                           	opt stack 0
 16322                           tblptru	equ	0xFF8
 16323                           tblptrh	equ	0xFF7
 16324                           tblptrl	equ	0xFF6
 16325                           tablat	equ	0xFF5
 16326                           prodh	equ	0xFF4
 16327                           prodl	equ	0xFF3
 16328                           intcon	equ	0xFF2
 16329                           postinc0	equ	0xFEE
 16330                           wreg	equ	0xFE8
 16331                           indf1	equ	0xFE7
 16332                           postdec1	equ	0xFE5
 16333                           fsr1h	equ	0xFE2
 16334                           fsr1l	equ	0xFE1
 16335                           indf2	equ	0xFDF
 16336                           postinc2	equ	0xFDE
 16337                           postdec2	equ	0xFDD
 16338                           plusw2	equ	0xFDB
 16339                           fsr2h	equ	0xFDA
 16340                           fsr2l	equ	0xFD9
 16341                           status	equ	0xFD8
 16342                           
 16343 ;; *************** function _vscp_getEvent *****************
 16344 ;; Defined at:
 16345 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16346 ;; Parameters:    Size  Location     Type
 16347 ;;		None
 16348 ;; Auto vars:     Size  Location     Type
 16349 ;;  rv              1   49[COMRAM] unsigned char 
 16350 ;; Return value:  Size  Location     Type
 16351 ;;                  1    wreg      unsigned char 
 16352 ;; Registers used:
 16353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16354 ;; Tracked objects:
 16355 ;;		On entry : F/0
 16356 ;;		On exit  : 0/0
 16357 ;;		Unchanged: 0/0
 16358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16359 ;;      Params:         0       0       0       0       0       0       0
 16360 ;;      Locals:         1       0       0       0       0       0       0
 16361 ;;      Temps:          0       0       0       0       0       0       0
 16362 ;;      Totals:         1       0       0       0       0       0       0
 16363 ;;Total ram usage:        1 bytes
 16364 ;; Hardware stack levels used:    1
 16365 ;; Hardware stack levels required when called:    6
 16366 ;; This function calls:
 16367 ;;		_getVSCPFrame
 16368 ;; This function is called by:
 16369 ;;		_main
 16370 ;; This function uses a non-reentrant model
 16371 ;;
 16372                           
 16373                           	psect	text72
 16374  00522A                     __ptext72:
 16375                           	opt stack 0
 16376  00522A                     _vscp_getEvent:
 16377                           	opt stack 23
 16378                           
 16379                           ; BSR set to: 0
 16380                           ;vscp_firmware.c: 1309: int8_t rv;
 16381                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16382                           
 16383                           ;incstack = 0
 16384                           ;incstack = 0
 16385  00522A  BF86               	btfsc	_vscp_imsg& (0+255),7,b
 16386  00522C  D012               	goto	l1280
 16387                           
 16388                           ; BSR set to: 0
 16389                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16390                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16391                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16392                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16393                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16394                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16395  00522E  0E8A               	movlw	low (_vscp_imsg+4)
 16396  005230  6E24               	movwf	?_getVSCPFrame,c
 16397  005232  0E8B               	movlw	low (_vscp_imsg+5)
 16398  005234  6E25               	movwf	?_getVSCPFrame+1,c
 16399  005236  0E87               	movlw	low (_vscp_imsg+1)
 16400  005238  6E26               	movwf	?_getVSCPFrame+2,c
 16401  00523A  0E86               	movlw	low _vscp_imsg
 16402  00523C  6E27               	movwf	?_getVSCPFrame+3,c
 16403  00523E  0E8C               	movlw	low (_vscp_imsg+6)
 16404  005240  6E28               	movwf	?_getVSCPFrame+4,c
 16405  005242  0E88               	movlw	(_vscp_imsg+2)& (0+255)
 16406  005244  EC89  F025         	call	_getVSCPFrame
 16407  005248  6E32               	movwf	vscp_getEvent@rv,c
 16408  00524A  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16409  00524C  E002               	bz	l1280
 16410                           
 16411                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16412  00524E  0100               	movlb	0	; () banked
 16413  005250  8F86               	bsf	_vscp_imsg& (0+255),7,b
 16414  005252                     l1280:
 16415  005252  0012               	return	
 16416  005254                     __end_of_vscp_getEvent:
 16417                           	opt stack 0
 16418                           tblptru	equ	0xFF8
 16419                           tblptrh	equ	0xFF7
 16420                           tblptrl	equ	0xFF6
 16421                           tablat	equ	0xFF5
 16422                           prodh	equ	0xFF4
 16423                           prodl	equ	0xFF3
 16424                           intcon	equ	0xFF2
 16425                           postinc0	equ	0xFEE
 16426                           wreg	equ	0xFE8
 16427                           indf1	equ	0xFE7
 16428                           postdec1	equ	0xFE5
 16429                           fsr1h	equ	0xFE2
 16430                           fsr1l	equ	0xFE1
 16431                           indf2	equ	0xFDF
 16432                           postinc2	equ	0xFDE
 16433                           postdec2	equ	0xFDD
 16434                           plusw2	equ	0xFDB
 16435                           fsr2h	equ	0xFDA
 16436                           fsr2l	equ	0xFD9
 16437                           status	equ	0xFD8
 16438                           
 16439 ;; *************** function _getVSCPFrame *****************
 16440 ;; Defined at:
 16441 ;;		line 2876 in file "../main.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16444 ;;		 -> vscp_imsg(14), 
 16445 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16446 ;;		 -> vscp_imsg(14), 
 16447 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16448 ;;		 -> vscp_imsg(14), 
 16449 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16450 ;;		 -> vscp_imsg(14), 
 16451 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16452 ;;		 -> vscp_imsg(14), 
 16453 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16454 ;;		 -> vscp_imsg(14), 
 16455 ;; Auto vars:     Size  Location     Type
 16456 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16457 ;;		 -> vscp_imsg(14), 
 16458 ;;  id              4   45[COMRAM] unsigned long 
 16459 ;; Return value:  Size  Location     Type
 16460 ;;                  1    wreg      unsigned char 
 16461 ;; Registers used:
 16462 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16463 ;; Tracked objects:
 16464 ;;		On entry : F/0
 16465 ;;		On exit  : 0/0
 16466 ;;		Unchanged: 0/0
 16467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16468 ;;      Params:         5       0       0       0       0       0       0
 16469 ;;      Locals:         5       0       0       0       0       0       0
 16470 ;;      Temps:          4       0       0       0       0       0       0
 16471 ;;      Totals:        14       0       0       0       0       0       0
 16472 ;;Total ram usage:       14 bytes
 16473 ;; Hardware stack levels used:    1
 16474 ;; Hardware stack levels required when called:    5
 16475 ;; This function calls:
 16476 ;;		_getCANFrame
 16477 ;; This function is called by:
 16478 ;;		_vscp_getEvent
 16479 ;; This function uses a non-reentrant model
 16480 ;;
 16481                           
 16482                           	psect	text73
 16483  004B12                     __ptext73:
 16484                           	opt stack 0
 16485  004B12                     _getVSCPFrame:
 16486                           	opt stack 23
 16487                           
 16488                           ;incstack = 0
 16489                           ;incstack = 0
 16490                           ;getVSCPFrame@pvscpclass stored from wreg
 16491  004B12  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16492                           
 16493                           ; BSR set to: 0
 16494                           ;main.c: 2877: uint32_t id;
 16495                           ;main.c: 2879: if (!getCANFrame(&id, pSize, pData)) {
 16496  004B16  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16497  004B1A  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16498  004B1E  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16499  004B20  ECD5  F028         	call	_getCANFrame
 16500  004B24  0900               	iorlw	0
 16501  004B26  E102               	bnz	l8168
 16502                           
 16503                           ;main.c: 2880: return 0;
 16504  004B28  0E00               	movlw	0
 16505  004B2A  D02E               	goto	l629
 16506  004B2C                     l8168:
 16507                           
 16508                           ;main.c: 2881: }
 16509                           ;main.c: 2883: *pNodeId = id & 0x0ff;
 16510  004B2C  5025               	movf	getVSCPFrame@pNodeId,w,c
 16511  004B2E  6ED9               	movwf	fsr2l,c
 16512  004B30  6ADA               	clrf	fsr2h,c
 16513  004B32  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16514                           
 16515                           ;main.c: 2884: *pvscptype = (id >> 8) & 0xff;
 16516  004B36  5024               	movf	getVSCPFrame@pvscptype,w,c
 16517  004B38  6ED9               	movwf	fsr2l,c
 16518  004B3A  6ADA               	clrf	fsr2h,c
 16519  004B3C  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16520                           
 16521                           ;main.c: 2885: *pvscpclass = (id >> 16) & 0x1ff;
 16522  004B40  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16523  004B42  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16524  004B44  0E01               	movlw	1
 16525  004B46  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16526  004B48  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16527  004B4A  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16528  004B4C  6ED9               	movwf	fsr2l,c
 16529  004B4E  6ADA               	clrf	fsr2h,c
 16530  004B50  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16531  004B54  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16532                           
 16533                           ;main.c: 2886: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16534  004B58  5026               	movf	getVSCPFrame@pPriority,w,c
 16535  004B5A  6ED9               	movwf	fsr2l,c
 16536  004B5C  6ADA               	clrf	fsr2h,c
 16537  004B5E  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16538  004B62  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16539  004B66  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16540  004B6A  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16541  004B6E  0E1B               	movlw	27
 16542  004B70  D005               	goto	u5460
 16543  004B72                     u5465:
 16544  004B72  90D8               	bcf	status,0,c
 16545  004B74  322C               	rrcf	??_getVSCPFrame+3,f,c
 16546  004B76  322B               	rrcf	??_getVSCPFrame+2,f,c
 16547  004B78  322A               	rrcf	??_getVSCPFrame+1,f,c
 16548  004B7A  3229               	rrcf	??_getVSCPFrame,f,c
 16549  004B7C                     u5460:
 16550  004B7C  2EE8               	decfsz	wreg,f,c
 16551  004B7E  D7F9               	goto	u5465
 16552  004B80  5029               	movf	??_getVSCPFrame,w,c
 16553  004B82  0B07               	andlw	7
 16554  004B84  6EDF               	movwf	indf2,c
 16555                           
 16556                           ;main.c: 2888: return 1;
 16557  004B86  0E01               	movlw	1
 16558  004B88                     l629:
 16559  004B88  0012               	return	
 16560  004B8A                     __end_of_getVSCPFrame:
 16561                           	opt stack 0
 16562                           tblptru	equ	0xFF8
 16563                           tblptrh	equ	0xFF7
 16564                           tblptrl	equ	0xFF6
 16565                           tablat	equ	0xFF5
 16566                           prodh	equ	0xFF4
 16567                           prodl	equ	0xFF3
 16568                           intcon	equ	0xFF2
 16569                           postinc0	equ	0xFEE
 16570                           wreg	equ	0xFE8
 16571                           indf1	equ	0xFE7
 16572                           postdec1	equ	0xFE5
 16573                           fsr1h	equ	0xFE2
 16574                           fsr1l	equ	0xFE1
 16575                           indf2	equ	0xFDF
 16576                           postinc2	equ	0xFDE
 16577                           postdec2	equ	0xFDD
 16578                           plusw2	equ	0xFDB
 16579                           fsr2h	equ	0xFDA
 16580                           fsr2l	equ	0xFD9
 16581                           status	equ	0xFD8
 16582                           
 16583 ;; *************** function _getCANFrame *****************
 16584 ;; Defined at:
 16585 ;;		line 2918 in file "../main.c"
 16586 ;; Parameters:    Size  Location     Type
 16587 ;;  pid             1    wreg     PTR unsigned long 
 16588 ;;		 -> getVSCPFrame@id(4), 
 16589 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16590 ;;		 -> vscp_imsg(14), 
 16591 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16592 ;;		 -> vscp_imsg(14), 
 16593 ;; Auto vars:     Size  Location     Type
 16594 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16595 ;;		 -> getVSCPFrame@id(4), 
 16596 ;;  flags           1   34[COMRAM] enum E16418
 16597 ;; Return value:  Size  Location     Type
 16598 ;;                  1    wreg      unsigned char 
 16599 ;; Registers used:
 16600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16601 ;; Tracked objects:
 16602 ;;		On entry : F/0
 16603 ;;		On exit  : 0/0
 16604 ;;		Unchanged: 0/0
 16605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16606 ;;      Params:         2       0       0       0       0       0       0
 16607 ;;      Locals:         2       0       0       0       0       0       0
 16608 ;;      Temps:          0       0       0       0       0       0       0
 16609 ;;      Totals:         4       0       0       0       0       0       0
 16610 ;;Total ram usage:        4 bytes
 16611 ;; Hardware stack levels used:    1
 16612 ;; Hardware stack levels required when called:    4
 16613 ;; This function calls:
 16614 ;;		_ECANReceiveMessage
 16615 ;; This function is called by:
 16616 ;;		_getVSCPFrame
 16617 ;; This function uses a non-reentrant model
 16618 ;;
 16619                           
 16620                           	psect	text74
 16621  0051AA                     __ptext74:
 16622                           	opt stack 0
 16623  0051AA                     _getCANFrame:
 16624                           	opt stack 23
 16625                           
 16626                           ;incstack = 0
 16627                           ;incstack = 0
 16628                           ;getCANFrame@pid stored from wreg
 16629  0051AA  CFE8 F022          	movff	wreg,getCANFrame@pid
 16630                           
 16631                           ; BSR set to: 0
 16632                           ;main.c: 2919: ECAN_RX_MSG_FLAGS flags;
 16633                           ;main.c: 2923: if (vscp_imsg.flags & 0x80) return 0;
 16634  0051AE  AF86               	btfss	_vscp_imsg& (0+255),7,b
 16635  0051B0  D002               	goto	l8184
 16636  0051B2                     l8180:
 16637  0051B2  0E00               	movlw	0
 16638  0051B4  D00F               	goto	l640
 16639  0051B6                     l8184:
 16640                           
 16641                           ; BSR set to: 0
 16642                           ;main.c: 2925: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16643  0051B6  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16644  0051BA  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16645  0051BE  0E23               	movlw	low getCANFrame@flags
 16646  0051C0  6E17               	movwf	?_ECANReceiveMessage+2,c
 16647  0051C2  5022               	movf	getCANFrame@pid,w,c
 16648  0051C4  EC7A  F018         	call	_ECANReceiveMessage
 16649  0051C8  0900               	iorlw	0
 16650  0051CA  E0F3               	bz	l8180
 16651                           
 16652                           ;main.c: 2927: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16653  0051CC  AC23               	btfss	getCANFrame@flags,6,c
 16654                           
 16655                           ;main.c: 2930: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16656  0051CE  AA23               	btfss	getCANFrame@flags,5,c
 16657  0051D0  D7F0               	goto	l8180
 16658                           
 16659                           ;main.c: 2932: return 1;
 16660  0051D2  0E01               	movlw	1
 16661  0051D4                     l640:
 16662  0051D4  0012               	return	
 16663  0051D6                     __end_of_getCANFrame:
 16664                           	opt stack 0
 16665                           tblptru	equ	0xFF8
 16666                           tblptrh	equ	0xFF7
 16667                           tblptrl	equ	0xFF6
 16668                           tablat	equ	0xFF5
 16669                           prodh	equ	0xFF4
 16670                           prodl	equ	0xFF3
 16671                           intcon	equ	0xFF2
 16672                           postinc0	equ	0xFEE
 16673                           wreg	equ	0xFE8
 16674                           indf1	equ	0xFE7
 16675                           postdec1	equ	0xFE5
 16676                           fsr1h	equ	0xFE2
 16677                           fsr1l	equ	0xFE1
 16678                           indf2	equ	0xFDF
 16679                           postinc2	equ	0xFDE
 16680                           postdec2	equ	0xFDD
 16681                           plusw2	equ	0xFDB
 16682                           fsr2h	equ	0xFDA
 16683                           fsr2l	equ	0xFD9
 16684                           status	equ	0xFD8
 16685                           
 16686 ;; *************** function _ECANReceiveMessage *****************
 16687 ;; Defined at:
 16688 ;;		line 803 in file "../ECAN.c"
 16689 ;; Parameters:    Size  Location     Type
 16690 ;;  id              1    wreg     PTR unsigned long 
 16691 ;;		 -> getVSCPFrame@id(4), 
 16692 ;;  data            1   20[COMRAM] PTR unsigned char 
 16693 ;;		 -> vscp_imsg(14), 
 16694 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16695 ;;		 -> vscp_imsg(14), 
 16696 ;;  msgFlags        1   22[COMRAM] PTR enum E16333
 16697 ;;		 -> getCANFrame@flags(1), 
 16698 ;; Auto vars:     Size  Location     Type
 16699 ;;  id              1   25[COMRAM] PTR unsigned long 
 16700 ;;		 -> getVSCPFrame@id(4), 
 16701 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16702 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16703 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16704 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16705 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16706 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16707 ;;  temp            1   28[COMRAM] struct .
 16708 ;;  mode            1   27[COMRAM] unsigned char 
 16709 ;;  i               1   26[COMRAM] unsigned char 
 16710 ;; Return value:  Size  Location     Type
 16711 ;;                  1    wreg      enum E15660
 16712 ;; Registers used:
 16713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16714 ;; Tracked objects:
 16715 ;;		On entry : F/0
 16716 ;;		On exit  : 0/0
 16717 ;;		Unchanged: 0/0
 16718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16719 ;;      Params:         3       0       0       0       0       0       0
 16720 ;;      Locals:         8       0       0       0       0       0       0
 16721 ;;      Temps:          0       0       0       0       0       0       0
 16722 ;;      Totals:        11       0       0       0       0       0       0
 16723 ;;Total ram usage:       11 bytes
 16724 ;; Hardware stack levels used:    1
 16725 ;; Hardware stack levels required when called:    3
 16726 ;; This function calls:
 16727 ;;		__ECANPointBuffer
 16728 ;;		__RegsToCANID
 16729 ;; This function is called by:
 16730 ;;		_getCANFrame
 16731 ;; This function uses a non-reentrant model
 16732 ;;
 16733                           
 16734                           	psect	text75
 16735  0030F4                     __ptext75:
 16736                           	opt stack 0
 16737  0030F4                     _ECANReceiveMessage:
 16738                           	opt stack 23
 16739                           
 16740                           ;incstack = 0
 16741                           ;incstack = 0
 16742                           ;ECANReceiveMessage@id stored from wreg
 16743  0030F4  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16744                           
 16745                           ; BSR set to: 0
 16746                           ;ECAN.c: 805: BYTE mode;
 16747                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16748                           ;ECAN.c: 809: char i;
 16749                           ;ECAN.c: 810: BYTE_VAL temp;
 16750                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16751  0030F8  6A48               	clrf	__ECANRxFilterHitInfo,c
 16752                           
 16753                           ; BSR set to: 0
 16754                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16755  0030FA  5077               	movf	3959,w,c	;volatile
 16756  0030FC  0BC0               	andlw	192
 16757  0030FE  6E1C               	movwf	ECANReceiveMessage@mode,c
 16758                           
 16759                           ; BSR set to: 0
 16760                           ;ECAN.c: 816: if ( mode == 0x00 )
 16761  003100  661C               	tstfsz	ECANReceiveMessage@mode,c
 16762  003102  D032               	goto	l8316
 16763                           
 16764                           ; BSR set to: 0
 16765                           ;ECAN.c: 822: {
 16766                           ;ECAN.c: 824: if ( RXB0FUL )
 16767  003104  AE60               	btfss	3936,7,c	;volatile
 16768  003106  D012               	goto	l836
 16769                           
 16770                           ; BSR set to: 0
 16771                           ;ECAN.c: 825: {
 16772                           ;ECAN.c: 827: RXB0IF = 0;
 16773  003108  90A4               	bcf	4004,0,c	;volatile
 16774                           
 16775                           ;ECAN.c: 830: if ( RXB0OVFL )
 16776  00310A  AE74               	btfss	3956,7,c	;volatile
 16777  00310C  D006               	goto	l8292
 16778                           
 16779                           ; BSR set to: 0
 16780                           ;ECAN.c: 831: {
 16781                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16782  00310E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16783  003110  6ED9               	movwf	fsr2l,c
 16784  003112  6ADA               	clrf	fsr2h,c
 16785  003114  0E00               	movlw	0
 16786  003116  86DB               	bsf	plusw2,3,c
 16787                           
 16788                           ; BSR set to: 0
 16789                           ;ECAN.c: 833: RXB0OVFL = 0;
 16790  003118  9E74               	bcf	3956,7,c	;volatile
 16791  00311A                     l8292:
 16792                           
 16793                           ; BSR set to: 0
 16794                           ;ECAN.c: 834: }
 16795                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16796  00311A  A060               	btfss	3936,0,c	;volatile
 16797  00311C  D002               	bra	u5635
 16798  00311E  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16799  003120  D001               	bra	u5637
 16800  003122                     u5635:
 16801  003122  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16802  003124                     u5637:
 16803                           
 16804                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16805  003124  0E0F               	movlw	15	;volatile
 16806  003126  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16807  003128  0E60               	movlw	96	;volatile
 16808  00312A  D01A               	goto	L34
 16809  00312C                     l836:
 16810                           
 16811                           ; BSR set to: 0
 16812                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16813  00312C  010F               	movlb	15	; () banked
 16814  00312E  AF50               	btfss	80,7,b	;volatile
 16815  003130  D019               	goto	l8310
 16816                           
 16817                           ; BSR set to: 15
 16818                           ;ECAN.c: 842: {
 16819                           ;ECAN.c: 844: RXB1IF = 0;
 16820  003132  92A4               	bcf	4004,1,c	;volatile
 16821                           
 16822                           ;ECAN.c: 847: if ( RXB1OVFL )
 16823  003134  AC74               	btfss	3956,6,c	;volatile
 16824  003136  D006               	goto	l8302
 16825                           
 16826                           ; BSR set to: 15
 16827                           ;ECAN.c: 848: {
 16828                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16829  003138  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16830  00313A  6ED9               	movwf	fsr2l,c
 16831  00313C  6ADA               	clrf	fsr2h,c
 16832  00313E  0E00               	movlw	0
 16833  003140  86DB               	bsf	plusw2,3,c
 16834                           
 16835                           ; BSR set to: 15
 16836                           ;ECAN.c: 850: RXB1OVFL = 0;
 16837  003142  9C74               	bcf	3956,6,c	;volatile
 16838  003144                     l8302:
 16839                           
 16840                           ; BSR set to: 15
 16841                           ;ECAN.c: 851: }
 16842                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16843  003144  5150               	movf	80,w,b	;volatile
 16844  003146  0B07               	andlw	7
 16845  003148  6E48               	movwf	__ECANRxFilterHitInfo,c
 16846                           
 16847                           ; BSR set to: 15
 16848                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16849  00314A  0E02               	movlw	2
 16850  00314C  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16851  00314E  D005               	goto	l8308
 16852                           
 16853                           ; BSR set to: 15
 16854                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16855  003150  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16856  003152  6ED9               	movwf	fsr2l,c
 16857  003154  6ADA               	clrf	fsr2h,c
 16858  003156  0E00               	movlw	0
 16859  003158  8EDB               	bsf	plusw2,7,c
 16860  00315A                     l8308:
 16861                           
 16862                           ; BSR set to: 15
 16863                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16864  00315A  0E0F               	movlw	15	;volatile
 16865  00315C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16866  00315E  0E50               	movlw	80	;volatile
 16867  003160                     L34:
 16868  003160  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16869                           
 16870                           ;ECAN.c: 860: }
 16871  003162  D065               	goto	l8370
 16872  003164                     l8310:
 16873                           
 16874                           ;ECAN.c: 861: else
 16875                           ;ECAN.c: 862: return FALSE;
 16876  003164  0E00               	movlw	0
 16877  003166  D0C2               	goto	l843
 16878  003168                     l8316:
 16879                           
 16880                           ; BSR set to: 0
 16881                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16882  003168  501C               	movf	ECANReceiveMessage@mode,w,c
 16883  00316A  0A40               	xorlw	64
 16884  00316C  E146               	bnz	l846
 16885                           
 16886                           ; BSR set to: 0
 16887                           ;ECAN.c: 875: {
 16888                           ;ECAN.c: 876: if ( RXB0FUL )
 16889  00316E  AE60               	btfss	3936,7,c	;volatile
 16890  003170  D004               	goto	l847
 16891                           
 16892                           ; BSR set to: 0
 16893                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16894  003172  0E0F               	movlw	15	;volatile
 16895  003174  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16896  003176  0E60               	movlw	96	;volatile
 16897  003178  D03E               	goto	L41
 16898  00317A                     l847:
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16902  00317A  010F               	movlb	15	; () banked
 16903  00317C  AF50               	btfss	80,7,b	;volatile
 16904  00317E  D004               	goto	l849
 16905                           
 16906                           ; BSR set to: 15
 16907                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16908  003180  0E0F               	movlw	15	;volatile
 16909  003182  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16910  003184  0E50               	movlw	80	;volatile
 16911  003186  D037               	goto	L41
 16912  003188                     l849:
 16913                           
 16914                           ; BSR set to: 15
 16915                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16916  003188  010D               	movlb	13
 16917  00318A  B5F8               	btfsc	248,2,b	;volatile
 16918  00318C  D007               	goto	l851
 16919  00318E  010E               	movlb	14
 16920  003190  AF20               	btfss	32,7,b	;volatile
 16921  003192  D004               	goto	l851
 16922                           
 16923                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16924  003194  0E0E               	movlw	14	;volatile
 16925  003196  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16926  003198  0E20               	movlw	32	;volatile
 16927  00319A  D02D               	goto	L41
 16928  00319C                     l851:
 16929                           
 16930                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16931  00319C  010D               	movlb	13
 16932  00319E  B7F8               	btfsc	248,3,b	;volatile
 16933  0031A0  D007               	goto	l853
 16934  0031A2  010E               	movlb	14
 16935  0031A4  AF30               	btfss	48,7,b	;volatile
 16936  0031A6  D004               	goto	l853
 16937                           
 16938                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16939  0031A8  0E0E               	movlw	14	;volatile
 16940  0031AA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16941  0031AC  0E30               	movlw	48	;volatile
 16942  0031AE  D023               	goto	L41
 16943  0031B0                     l853:
 16944                           
 16945                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16946  0031B0  010D               	movlb	13
 16947  0031B2  B9F8               	btfsc	248,4,b	;volatile
 16948  0031B4  D007               	goto	l855
 16949  0031B6  010E               	movlb	14
 16950  0031B8  AF40               	btfss	64,7,b	;volatile
 16951  0031BA  D004               	goto	l855
 16952                           
 16953                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16954  0031BC  0E0E               	movlw	14	;volatile
 16955  0031BE  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16956  0031C0  0E40               	movlw	64	;volatile
 16957  0031C2  D019               	goto	L41
 16958  0031C4                     l855:
 16959                           
 16960                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16961  0031C4  010D               	movlb	13
 16962  0031C6  BBF8               	btfsc	248,5,b	;volatile
 16963  0031C8  D005               	goto	l857
 16964  0031CA  010E               	movlb	14
 16965  0031CC  AF50               	btfss	80,7,b	;volatile
 16966  0031CE  D002               	goto	l857
 16967                           
 16968                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16969  0031D0  0E0E               	movlw	14	;volatile
 16970  0031D2  D7D7               	goto	L42
 16971  0031D4                     l857:
 16972                           
 16973                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16974  0031D4  010D               	movlb	13
 16975  0031D6  BDF8               	btfsc	248,6,b	;volatile
 16976  0031D8  D005               	goto	l859
 16977  0031DA  010E               	movlb	14
 16978  0031DC  AF60               	btfss	96,7,b	;volatile
 16979  0031DE  D002               	goto	l859
 16980                           
 16981                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16982  0031E0  0E0E               	movlw	14	;volatile
 16983  0031E2  D7C8               	goto	L43
 16984  0031E4                     l859:
 16985                           
 16986                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16987  0031E4  010D               	movlb	13
 16988  0031E6  BFF8               	btfsc	248,7,b	;volatile
 16989  0031E8  D7BD               	goto	l8310
 16990  0031EA  010E               	movlb	14
 16991  0031EC  AF70               	btfss	112,7,b	;volatile
 16992  0031EE  D7BA               	goto	l8310
 16993                           
 16994                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16995  0031F0  0E0E               	movlw	14	;volatile
 16996  0031F2  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16997  0031F4  0E70               	movlw	112	;volatile
 16998  0031F6                     L41:
 16999  0031F6  6E1E               	movwf	ECANReceiveMessage@ptr,c
 17000  0031F8  D00A               	goto	l8360
 17001  0031FA                     l846:
 17002                           
 17003                           ; BSR set to: 0
 17004                           ;ECAN.c: 910: else
 17005                           ;ECAN.c: 915: {
 17006                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 17007  0031FA  AE74               	btfss	3956,7,c	;volatile
 17008  0031FC  D7B3               	goto	l8310
 17009                           
 17010                           ; BSR set to: 0
 17011                           ;ECAN.c: 917: {
 17012                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 17013  0031FE  506F               	movf	3951,w,c	;volatile
 17014  003200  0B07               	andlw	7
 17015  003202  EC00  F026         	call	__ECANPointBuffer
 17016  003206  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 17017  00320A  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 17018  00320E                     l8360:
 17019                           
 17020                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 17021  00320E  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17022  003212  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17023  003216  50DF               	movf	indf2,w,c
 17024  003218  0B1F               	andlw	31
 17025  00321A  6E48               	movwf	__ECANRxFilterHitInfo,c
 17026                           
 17027                           ;ECAN.c: 932: RXB1IF = 0;
 17028  00321C  92A4               	bcf	4004,1,c	;volatile
 17029                           
 17030                           ;ECAN.c: 934: if ( RXB1OVFL )
 17031  00321E  AC74               	btfss	3956,6,c	;volatile
 17032  003220  D006               	goto	l8370
 17033                           
 17034                           ;ECAN.c: 935: {
 17035                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 17036  003222  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17037  003224  6ED9               	movwf	fsr2l,c
 17038  003226  6ADA               	clrf	fsr2h,c
 17039  003228  0E00               	movlw	0
 17040  00322A  86DB               	bsf	plusw2,3,c
 17041                           
 17042                           ;ECAN.c: 937: RXB1OVFL = 0;
 17043  00322C  9C74               	bcf	3956,6,c	;volatile
 17044  00322E                     l8370:
 17045                           
 17046                           ;ECAN.c: 942: savedPtr = ptr;
 17047  00322E  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 17048  003232  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 17049                           
 17050                           ;ECAN.c: 943: *msgFlags = 0;
 17051  003236  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17052  003238  6ED9               	movwf	fsr2l,c
 17053  00323A  6ADA               	clrf	fsr2h,c
 17054  00323C  6ADF               	clrf	indf2,c
 17055                           
 17056                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17057  00323E  EE20 F005          	lfsr	2,5
 17058  003242  D855               	call	PL76	;call to abstracted procedure
 17059                           
 17060                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17061  003244  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17062  003246  6ED9               	movwf	fsr2l,c
 17063  003248  6ADA               	clrf	fsr2h,c
 17064  00324A  501D               	movf	ECANReceiveMessage@temp,w,c
 17065  00324C  0B0F               	andlw	15
 17066  00324E  6EDF               	movwf	indf2,c
 17067                           
 17068                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17069  003250  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 17070  003252  D005               	goto	l867
 17071                           
 17072                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17073  003254  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17074  003256  6ED9               	movwf	fsr2l,c
 17075  003258  6ADA               	clrf	fsr2h,c
 17076  00325A  0E00               	movlw	0
 17077  00325C  8CDB               	bsf	plusw2,6,c
 17078  00325E                     l867:
 17079                           
 17080                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17081  00325E  EE20 F002          	lfsr	2,2
 17082  003262  D845               	call	PL76	;call to abstracted procedure
 17083                           
 17084                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17085  003264  A61D               	btfss	ECANReceiveMessage@temp,3,c
 17086  003266  D008               	goto	l868
 17087                           
 17088                           ;ECAN.c: 956: {
 17089                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17090  003268  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17091  00326A  6ED9               	movwf	fsr2l,c
 17092  00326C  6ADA               	clrf	fsr2h,c
 17093  00326E  0E00               	movlw	0
 17094  003270  8ADB               	bsf	plusw2,5,c
 17095                           
 17096                           ;ECAN.c: 958: temp.Val = 1;
 17097  003272  0E01               	movlw	1
 17098  003274  6E1D               	movwf	ECANReceiveMessage@temp,c
 17099                           
 17100                           ;ECAN.c: 959: }
 17101  003276  D001               	goto	l8388
 17102  003278                     l868:
 17103                           
 17104                           ;ECAN.c: 960: else
 17105                           ;ECAN.c: 961: temp.Val = 0;
 17106  003278  6A1D               	clrf	ECANReceiveMessage@temp,c
 17107  00327A                     l8388:
 17108                           
 17109                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17110  00327A  281E               	incf	ECANReceiveMessage@ptr,w,c
 17111  00327C  6E0E               	movwf	?__RegsToCANID,c
 17112  00327E  0E00               	movlw	0
 17113  003280  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17114  003282  6E0F               	movwf	?__RegsToCANID+1,c
 17115  003284  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17116  003288  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17117  00328C  EC1E  F01E         	call	__RegsToCANID	;wreg free
 17118                           
 17119                           ;ECAN.c: 966: ptr += 6;
 17120  003290  0E06               	movlw	6
 17121  003292  261E               	addwf	ECANReceiveMessage@ptr,f,c
 17122  003294  0E00               	movlw	0
 17123  003296  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17124                           
 17125                           ;ECAN.c: 967: temp.Val = *dataLen;
 17126  003298  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17127  00329A  6ED9               	movwf	fsr2l,c
 17128  00329C  6ADA               	clrf	fsr2h,c
 17129  00329E  50DF               	movf	indf2,w,c
 17130  0032A0  6E1D               	movwf	ECANReceiveMessage@temp,c
 17131                           
 17132                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17133  0032A2  6A1B               	clrf	ECANReceiveMessage@i,c
 17134  0032A4  D00D               	goto	l8404
 17135  0032A6                     l8396:
 17136                           
 17137                           ;ECAN.c: 969: *data++ = *ptr++;
 17138  0032A6  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17139  0032AA  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17140  0032AE  5015               	movf	ECANReceiveMessage@data,w,c
 17141  0032B0  6EE1               	movwf	fsr1l,c
 17142  0032B2  6AE2               	clrf	fsr1h,c
 17143  0032B4  CFDF FFE7          	movff	indf2,indf1
 17144  0032B8  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 17145  0032BA  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 17146  0032BC  2A15               	incf	ECANReceiveMessage@data,f,c
 17147  0032BE  2A1B               	incf	ECANReceiveMessage@i,f,c
 17148  0032C0                     l8404:
 17149  0032C0  501D               	movf	ECANReceiveMessage@temp,w,c
 17150  0032C2  5C1B               	subwf	ECANReceiveMessage@i,w,c
 17151  0032C4  E3F0               	bnc	l8396
 17152                           
 17153                           ;ECAN.c: 972: if ( IRXIF )
 17154  0032C6  AEA4               	btfss	4004,7,c	;volatile
 17155  0032C8  D006               	goto	l8410
 17156                           
 17157                           ;ECAN.c: 973: {
 17158                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17159  0032CA  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17160  0032CC  6ED9               	movwf	fsr2l,c
 17161  0032CE  6ADA               	clrf	fsr2h,c
 17162  0032D0  0E00               	movlw	0
 17163  0032D2  88DB               	bsf	plusw2,4,c
 17164                           
 17165                           ;ECAN.c: 975: IRXIF = 0;
 17166  0032D4  9EA4               	bcf	4004,7,c	;volatile
 17167  0032D6                     l8410:
 17168                           
 17169                           ;ECAN.c: 976: }
 17170                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17171  0032D6  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17172  0032DA  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17173  0032DE  0E7F               	movlw	127
 17174  0032E0  16DF               	andwf	indf2,f,c
 17175                           
 17176                           ;ECAN.c: 983: if ( mode == 0x80 )
 17177  0032E2  501C               	movf	ECANReceiveMessage@mode,w,c
 17178  0032E4  0A80               	xorlw	128
 17179  0032E6  B4D8               	btfsc	status,2,c
 17180                           
 17181                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17182  0032E8  9E74               	bcf	3956,7,c	;volatile
 17183                           
 17184                           ;ECAN.c: 990: return TRUE;
 17185  0032EA  0E01               	movlw	1
 17186  0032EC                     l843:
 17187  0032EC  0012               	return	
 17188  0032EE                     __end_of_ECANReceiveMessage:
 17189                           	opt stack 0
 17190  0032EE                     PL76:
 17191                           	opt stack 23
 17192  0032EE  501E               	movf	ECANReceiveMessage@ptr,w,c
 17193  0032F0  26D9               	addwf	fsr2l,f,c
 17194  0032F2  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 17195  0032F4  22DA               	addwfc	fsr2h,f,c
 17196  0032F6  50DF               	movf	indf2,w,c
 17197  0032F8  6E1D               	movwf	ECANReceiveMessage@temp,c
 17198  0032FA  0012               	return	
 17199  0032FC                     __end_ofPL76:
 17200                           	opt stack 0
 17201                           tblptru	equ	0xFF8
 17202                           tblptrh	equ	0xFF7
 17203                           tblptrl	equ	0xFF6
 17204                           tablat	equ	0xFF5
 17205                           prodh	equ	0xFF4
 17206                           prodl	equ	0xFF3
 17207                           intcon	equ	0xFF2
 17208                           postinc0	equ	0xFEE
 17209                           wreg	equ	0xFE8
 17210                           indf1	equ	0xFE7
 17211                           postdec1	equ	0xFE5
 17212                           fsr1h	equ	0xFE2
 17213                           fsr1l	equ	0xFE1
 17214                           indf2	equ	0xFDF
 17215                           postinc2	equ	0xFDE
 17216                           postdec2	equ	0xFDD
 17217                           plusw2	equ	0xFDB
 17218                           fsr2h	equ	0xFDA
 17219                           fsr2l	equ	0xFD9
 17220                           status	equ	0xFD8
 17221                           
 17222 ;; *************** function __RegsToCANID *****************
 17223 ;; Defined at:
 17224 ;;		line 1156 in file "../ECAN.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17227 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17228 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17229 ;;  val             1   15[COMRAM] PTR unsigned long 
 17230 ;;		 -> getVSCPFrame@id(4), 
 17231 ;;  type            1   16[COMRAM] unsigned char 
 17232 ;; Auto vars:     Size  Location     Type
 17233 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17234 ;;		 -> getVSCPFrame@id(4), 
 17235 ;; Return value:  Size  Location     Type
 17236 ;;		None               void
 17237 ;; Registers used:
 17238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17239 ;; Tracked objects:
 17240 ;;		On entry : 0/0
 17241 ;;		On exit  : 0/0
 17242 ;;		Unchanged: 0/0
 17243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17244 ;;      Params:         4       0       0       0       0       0       0
 17245 ;;      Locals:         1       0       0       0       0       0       0
 17246 ;;      Temps:          2       0       0       0       0       0       0
 17247 ;;      Totals:         7       0       0       0       0       0       0
 17248 ;;Total ram usage:        7 bytes
 17249 ;; Hardware stack levels used:    1
 17250 ;; Hardware stack levels required when called:    2
 17251 ;; This function calls:
 17252 ;;		Nothing
 17253 ;; This function is called by:
 17254 ;;		_ECANReceiveMessage
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           	psect	text76
 17259  003C3C                     __ptext76:
 17260                           	opt stack 0
 17261  003C3C                     __RegsToCANID:
 17262                           	opt stack 23
 17263                           
 17264                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17265                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17266                           
 17267                           ;incstack = 0
 17268                           ;incstack = 0
 17269  003C3C  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17270                           
 17271                           ;ECAN.c: 1161: if ( type == 0 )
 17272  003C40  6611               	tstfsz	__RegsToCANID@type,c
 17273  003C42  D02B               	goto	l8484
 17274                           
 17275                           ;ECAN.c: 1162: {
 17276                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17277  003C44  5014               	movf	__RegsToCANID@Value,w,c
 17278  003C46  6ED9               	movwf	fsr2l,c
 17279  003C48  D86C               	call	PL54	;call to abstracted procedure
 17280  003C4A  3612               	rlcf	??__RegsToCANID,f,c
 17281  003C4C  90D8               	bcf	status,0,c
 17282  003C4E  3612               	rlcf	??__RegsToCANID,f,c
 17283  003C50  90D8               	bcf	status,0,c
 17284  003C52  3412               	rlcf	??__RegsToCANID,w,c
 17285  003C54  6EDF               	movwf	indf2,c
 17286                           
 17287                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17288  003C56  5014               	movf	__RegsToCANID@Value,w,c
 17289  003C58  6ED9               	movwf	fsr2l,c
 17290  003C5A  6ADA               	clrf	fsr2h,c
 17291  003C5C  2AD9               	incf	fsr2l,f,c
 17292  003C5E  6ADA               	clrf	fsr2h,c
 17293  003C60  D873               	call	PL62	;call to abstracted procedure
 17294  003C62                     u5955:
 17295  003C62  90D8               	bcf	status,0,c
 17296  003C64  3212               	rrcf	??__RegsToCANID,f,c
 17297  003C66  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17298  003C68  D7FC               	goto	u5955
 17299  003C6A  5012               	movf	??__RegsToCANID,w,c
 17300                           
 17301                           ;ECAN.c: 1166: ptr++;
 17302                           
 17303                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17304  003C6C  D863               	call	PL56	;call to abstracted procedure
 17305  003C6E  0E05               	movlw	5
 17306  003C70  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17307  003C72                     u5965:
 17308  003C72  90D8               	bcf	status,0,c
 17309  003C74  3212               	rrcf	??__RegsToCANID,f,c
 17310  003C76  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17311  003C78  D7FC               	goto	u5965
 17312  003C7A  5014               	movf	__RegsToCANID@Value,w,c
 17313  003C7C  6ED9               	movwf	fsr2l,c
 17314  003C7E  6ADA               	clrf	fsr2h,c
 17315  003C80  5012               	movf	??__RegsToCANID,w,c
 17316  003C82  12DF               	iorwf	indf2,f,c
 17317                           
 17318                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17319  003C84  D83D               	call	PL26	;call to abstracted procedure
 17320  003C86  6ADF               	clrf	indf2,c
 17321                           
 17322                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17323  003C88  5014               	movf	__RegsToCANID@Value,w,c
 17324  003C8A  6ED9               	movwf	fsr2l,c
 17325  003C8C  6ADA               	clrf	fsr2h,c
 17326  003C8E  0E03               	movlw	3
 17327  003C90  26D9               	addwf	fsr2l,f,c
 17328  003C92  6ADA               	clrf	fsr2h,c
 17329  003C94  0E00               	movlw	0
 17330  003C96  6EDF               	movwf	indf2,c
 17331                           
 17332                           ;ECAN.c: 1170: }
 17333  003C98  D032               	goto	l890
 17334  003C9A                     l8484:
 17335                           
 17336                           ;ECAN.c: 1171: else
 17337                           ;ECAN.c: 1172: {
 17338                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17339  003C9A  D832               	call	PL26	;call to abstracted procedure
 17340  003C9C  D855               	call	PL62	;call to abstracted procedure
 17341  003C9E                     u5975:
 17342  003C9E  90D8               	bcf	status,0,c
 17343  003CA0  3612               	rlcf	??__RegsToCANID,f,c
 17344  003CA2  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17345  003CA4  D7FC               	goto	u5975
 17346  003CA6  5012               	movf	??__RegsToCANID,w,c
 17347  003CA8  6EDF               	movwf	indf2,c
 17348                           
 17349                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17350  003CAA  5014               	movf	__RegsToCANID@Value,w,c
 17351  003CAC  6ED9               	movwf	fsr2l,c
 17352  003CAE  6ADA               	clrf	fsr2h,c
 17353  003CB0  0E03               	movlw	3
 17354  003CB2  26D9               	addwf	fsr2l,f,c
 17355  003CB4  D836               	call	PL54	;call to abstracted procedure
 17356  003CB6  3212               	rrcf	??__RegsToCANID,f,c
 17357  003CB8  90D8               	bcf	status,0,c
 17358  003CBA  3212               	rrcf	??__RegsToCANID,f,c
 17359  003CBC  90D8               	bcf	status,0,c
 17360  003CBE  3012               	rrcf	??__RegsToCANID,w,c
 17361                           
 17362                           ;ECAN.c: 1176: ptr++;
 17363                           
 17364                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17365  003CC0  D839               	call	PL56	;call to abstracted procedure
 17366  003CC2  0E03               	movlw	3
 17367  003CC4  1612               	andwf	??__RegsToCANID,f,c
 17368  003CC6  D81C               	call	PL26	;call to abstracted procedure
 17369  003CC8  5012               	movf	??__RegsToCANID,w,c
 17370  003CCA  12DF               	iorwf	indf2,f,c
 17371                           
 17372                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17373  003CCC  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17374  003CD0  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17375  003CD4  50DF               	movf	indf2,w,c
 17376  003CD6  6E12               	movwf	??__RegsToCANID& (0+255),c
 17377  003CD8  90D8               	bcf	status,0,c
 17378  003CDA  3212               	rrcf	??__RegsToCANID,f,c
 17379  003CDC  90D8               	bcf	status,0,c
 17380  003CDE  3212               	rrcf	??__RegsToCANID,f,c
 17381  003CE0  90D8               	bcf	status,0,c
 17382  003CE2  3212               	rrcf	??__RegsToCANID,f,c
 17383  003CE4  0E1C               	movlw	28
 17384  003CE6  1612               	andwf	??__RegsToCANID,f,c
 17385  003CE8  D80B               	call	PL26	;call to abstracted procedure
 17386  003CEA  5012               	movf	??__RegsToCANID,w,c
 17387  003CEC  12DF               	iorwf	indf2,f,c
 17388                           
 17389                           ;ECAN.c: 1180: ptr++;
 17390                           
 17391                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17392  003CEE  D80F               	call	PL50	;call to abstracted procedure
 17393  003CF0  2AE1               	incf	fsr1l,f,c
 17394  003CF2  6AE2               	clrf	fsr1h,c
 17395  003CF4  CFDF FFE7          	movff	indf2,indf1
 17396                           
 17397                           ;ECAN.c: 1182: ptr++;
 17398                           
 17399                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17400  003CF8  D80A               	call	PL50	;call to abstracted procedure
 17401  003CFA  CFDF FFE7          	movff	indf2,indf1
 17402  003CFE                     l890:
 17403  003CFE  0012               	return	
 17404  003D00                     __end_of__RegsToCANID:
 17405                           	opt stack 0
 17406  003D00                     PL26:
 17407                           	opt stack 23
 17408  003D00  5014               	movf	__RegsToCANID@Value,w,c
 17409  003D02  6ED9               	movwf	fsr2l,c
 17410  003D04  6ADA               	clrf	fsr2h,c
 17411  003D06  0E02               	movlw	2
 17412  003D08  26D9               	addwf	fsr2l,f,c
 17413  003D0A  6ADA               	clrf	fsr2h,c
 17414  003D0C  0012               	return	
 17415  003D0E                     __end_ofPL26:
 17416                           	opt stack 0
 17417  003D0E                     PL50:
 17418                           	opt stack 23
 17419  003D0E  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17420  003D10  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17421  003D12  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17422  003D16  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17423  003D1A  5014               	movf	__RegsToCANID@Value,w,c
 17424  003D1C  6EE1               	movwf	fsr1l,c
 17425  003D1E  6AE2               	clrf	fsr1h,c
 17426  003D20  0012               	return	
 17427  003D22                     __end_ofPL50:
 17428                           	opt stack 0
 17429  003D22                     PL54:
 17430                           	opt stack 23
 17431  003D22  6ADA               	clrf	fsr2h,c
 17432  003D24  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17433  003D28  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17434  003D2C  50E7               	movf	indf1,w,c
 17435  003D2E  6E12               	movwf	??__RegsToCANID& (0+255),c
 17436  003D30  90D8               	bcf	status,0,c
 17437  003D32  0012               	return	
 17438  003D34                     __end_ofPL54:
 17439                           	opt stack 0
 17440  003D34                     PL56:
 17441                           	opt stack 23
 17442  003D34  6EDF               	movwf	indf2,c
 17443  003D36  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17444  003D38  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17445  003D3A  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17446  003D3E  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17447  003D42  50DF               	movf	indf2,w,c
 17448  003D44  6E12               	movwf	??__RegsToCANID& (0+255),c
 17449  003D46  0012               	return	
 17450  003D48                     __end_ofPL56:
 17451                           	opt stack 0
 17452  003D48                     PL62:
 17453                           	opt stack 23
 17454  003D48  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17455  003D4C  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17456  003D50  50E7               	movf	indf1,w,c
 17457  003D52  6E12               	movwf	??__RegsToCANID& (0+255),c
 17458  003D54  0E05               	movlw	5
 17459  003D56  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17460  003D58  0C05               	retlw	5
 17461  003D5A                     __end_ofPL62:
 17462                           	opt stack 0
 17463                           tblptru	equ	0xFF8
 17464                           tblptrh	equ	0xFF7
 17465                           tblptrl	equ	0xFF6
 17466                           tablat	equ	0xFF5
 17467                           prodh	equ	0xFF4
 17468                           prodl	equ	0xFF3
 17469                           intcon	equ	0xFF2
 17470                           postinc0	equ	0xFEE
 17471                           wreg	equ	0xFE8
 17472                           indf1	equ	0xFE7
 17473                           postdec1	equ	0xFE5
 17474                           fsr1h	equ	0xFE2
 17475                           fsr1l	equ	0xFE1
 17476                           indf2	equ	0xFDF
 17477                           postinc2	equ	0xFDE
 17478                           postdec2	equ	0xFDD
 17479                           plusw2	equ	0xFDB
 17480                           fsr2h	equ	0xFDA
 17481                           fsr2l	equ	0xFD9
 17482                           status	equ	0xFD8
 17483                           
 17484 ;; *************** function __ECANPointBuffer *****************
 17485 ;; Defined at:
 17486 ;;		line 1207 in file "../ECAN.c"
 17487 ;; Parameters:    Size  Location     Type
 17488 ;;  b               1    wreg     unsigned char 
 17489 ;; Auto vars:     Size  Location     Type
 17490 ;;  b               1   16[COMRAM] unsigned char 
 17491 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17492 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17493 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17494 ;; Return value:  Size  Location     Type
 17495 ;;                  2   13[COMRAM] PTR unsigned char 
 17496 ;; Registers used:
 17497 ;;		wreg, status,2, status,0
 17498 ;; Tracked objects:
 17499 ;;		On entry : F/0
 17500 ;;		On exit  : 0/0
 17501 ;;		Unchanged: 0/0
 17502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17503 ;;      Params:         3       0       0       0       0       0       0
 17504 ;;      Locals:         3       0       0       0       0       0       0
 17505 ;;      Temps:          0       0       0       0       0       0       0
 17506 ;;      Totals:         6       0       0       0       0       0       0
 17507 ;;Total ram usage:        6 bytes
 17508 ;; Hardware stack levels used:    1
 17509 ;; Hardware stack levels required when called:    2
 17510 ;; This function calls:
 17511 ;;		Nothing
 17512 ;; This function is called by:
 17513 ;;		_ECANReceiveMessage
 17514 ;; This function uses a non-reentrant model
 17515 ;;
 17516                           
 17517                           	psect	text77
 17518  004C00                     __ptext77:
 17519                           	opt stack 0
 17520  004C00                     __ECANPointBuffer:
 17521                           	opt stack 23
 17522                           
 17523                           ;incstack = 0
 17524                           ;incstack = 0
 17525                           ;__ECANPointBuffer@b stored from wreg
 17526  004C00  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17527                           
 17528                           ; BSR set to: 0
 17529                           ;ECAN.c: 1208: BYTE* pt;
 17530                           ;ECAN.c: 1210: switch(b)
 17531  004C04  D024               	goto	l8470
 17532  004C06                     l8452:
 17533                           
 17534                           ; BSR set to: 0
 17535                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17536  004C06  0E0F               	movlw	15	;volatile
 17537  004C08  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17538  004C0A  0E60               	movlw	96	;volatile
 17539  004C0C  D01E               	goto	L50
 17540  004C0E                     l8454:
 17541                           
 17542                           ; BSR set to: 0
 17543                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17544  004C0E  010F               	movlb	15	; () banked
 17545  004C10  0E0F               	movlw	15	;volatile
 17546  004C12  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17547  004C14  0E50               	movlw	80	;volatile
 17548  004C16  D019               	goto	L50
 17549  004C18                     l8456:
 17550                           
 17551                           ; BSR set to: 0
 17552                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17553  004C18  010E               	movlb	14	; () banked
 17554  004C1A  0E0E               	movlw	14	;volatile
 17555  004C1C  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17556  004C1E  0E20               	movlw	32	;volatile
 17557  004C20  D014               	goto	L50
 17558  004C22                     l8458:
 17559                           
 17560                           ; BSR set to: 0
 17561                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17562  004C22  010E               	movlb	14	; () banked
 17563  004C24  0E0E               	movlw	14	;volatile
 17564  004C26  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17565  004C28  0E30               	movlw	48	;volatile
 17566  004C2A  D00F               	goto	L50
 17567  004C2C                     l8460:
 17568                           
 17569                           ; BSR set to: 0
 17570                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17571  004C2C  010E               	movlb	14	; () banked
 17572  004C2E  0E0E               	movlw	14	;volatile
 17573  004C30  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17574  004C32  0E40               	movlw	64	;volatile
 17575  004C34  D00A               	goto	L50
 17576  004C36                     l8462:
 17577                           
 17578                           ; BSR set to: 0
 17579                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17580  004C36  010E               	movlb	14	; () banked
 17581  004C38  0E0E               	movlw	14	;volatile
 17582  004C3A  D7EB               	goto	L51
 17583  004C3C                     l8464:
 17584                           
 17585                           ; BSR set to: 0
 17586                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17587  004C3C  010E               	movlb	14	; () banked
 17588  004C3E  0E0E               	movlw	14	;volatile
 17589  004C40  D7E3               	goto	L52
 17590  004C42                     l8466:
 17591                           
 17592                           ; BSR set to: 0
 17593                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17594  004C42  010E               	movlb	14	; () banked
 17595  004C44  0E0E               	movlw	14	;volatile
 17596  004C46  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17597  004C48  0E70               	movlw	112	;volatile
 17598  004C4A                     L50:
 17599  004C4A  6E12               	movwf	__ECANPointBuffer@pt,c
 17600                           
 17601                           ;ECAN.c: 1235: break;
 17602  004C4C  D00F               	goto	l895
 17603  004C4E                     l8470:
 17604                           
 17605                           ; BSR set to: 0
 17606  004C4E  5011               	movf	__ECANPointBuffer@b,w,c
 17607                           
 17608                           ; Switch size 1, requested type "space"
 17609                           ; Number of cases is 7, Range of values is 0 to 6
 17610                           ; switch strategies available:
 17611                           ; Name         Instructions Cycles
 17612                           ; simple_byte           22    12 (average)
 17613                           ;	Chosen strategy is simple_byte
 17614  004C50  E0DA               	bz	l8452
 17615  004C52  0A01               	xorlw	1	; case 1
 17616  004C54  E0DC               	bz	l8454
 17617  004C56  0A03               	xorlw	3	; case 2
 17618  004C58  E0DF               	bz	l8456
 17619  004C5A  0A01               	xorlw	1	; case 3
 17620  004C5C  E0E2               	bz	l8458
 17621  004C5E  0A07               	xorlw	7	; case 4
 17622  004C60  E0E5               	bz	l8460
 17623  004C62  0A01               	xorlw	1	; case 5
 17624  004C64  E0E8               	bz	l8462
 17625  004C66  0A03               	xorlw	3	; case 6
 17626  004C68  E0E9               	bz	l8464
 17627  004C6A  D7EB               	goto	l8466
 17628  004C6C                     l895:
 17629                           
 17630                           ;ECAN.c: 1237: return (pt);
 17631  004C6C  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17632  004C70  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17633  004C74  0012               	return	
 17634  004C76                     __end_of__ECANPointBuffer:
 17635                           	opt stack 0
 17636                           tblptru	equ	0xFF8
 17637                           tblptrh	equ	0xFF7
 17638                           tblptrl	equ	0xFF6
 17639                           tablat	equ	0xFF5
 17640                           prodh	equ	0xFF4
 17641                           prodl	equ	0xFF3
 17642                           intcon	equ	0xFF2
 17643                           postinc0	equ	0xFEE
 17644                           wreg	equ	0xFE8
 17645                           indf1	equ	0xFE7
 17646                           postdec1	equ	0xFE5
 17647                           fsr1h	equ	0xFE2
 17648                           fsr1l	equ	0xFE1
 17649                           indf2	equ	0xFDF
 17650                           postinc2	equ	0xFDE
 17651                           postdec2	equ	0xFDD
 17652                           plusw2	equ	0xFDB
 17653                           fsr2h	equ	0xFDA
 17654                           fsr2l	equ	0xFD9
 17655                           status	equ	0xFD8
 17656                           
 17657 ;; *************** function _vscp_check_pstorage *****************
 17658 ;; Defined at:
 17659 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 17660 ;; Parameters:    Size  Location     Type
 17661 ;;		None
 17662 ;; Auto vars:     Size  Location     Type
 17663 ;;		None
 17664 ;; Return value:  Size  Location     Type
 17665 ;;                  1    wreg      unsigned char 
 17666 ;; Registers used:
 17667 ;;		wreg, status,2, status,0, cstack
 17668 ;; Tracked objects:
 17669 ;;		On entry : 1/1
 17670 ;;		On exit  : 0/0
 17671 ;;		Unchanged: 0/0
 17672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17673 ;;      Params:         0       0       0       0       0       0       0
 17674 ;;      Locals:         0       0       0       0       0       0       0
 17675 ;;      Temps:          0       0       0       0       0       0       0
 17676 ;;      Totals:         0       0       0       0       0       0       0
 17677 ;;Total ram usage:        0 bytes
 17678 ;; Hardware stack levels used:    1
 17679 ;; Hardware stack levels required when called:    4
 17680 ;; This function calls:
 17681 ;;		_vscp_writeNicknamePermanent
 17682 ;;		_vscp_getSegmentCRC
 17683 ;;		_vscp_setSegmentCRC
 17684 ;;		_vscp_setControlByte
 17685 ;; This function is called by:
 17686 ;;		_main
 17687 ;; This function uses a non-reentrant model
 17688 ;;
 17689                           
 17690                           	psect	text78
 17691  005338                     __ptext78:
 17692                           	opt stack 0
 17693  005338                     _vscp_check_pstorage:
 17694                           	opt stack 25
 17695                           
 17696                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17697                           
 17698                           ;incstack = 0
 17699                           ;incstack = 0
 17700  005338  ECB2  F02A         	call	_vscp_getSegmentCRC	;wreg free
 17701  00533C  0BC0               	andlw	192
 17702  00533E  0A40               	xorlw	64
 17703  005340  E102               	bnz	l9584
 17704                           
 17705                           ;vscp_firmware.c: 172: return !0;
 17706  005342  0E01               	movlw	1
 17707  005344  D00A               	goto	l1036
 17708  005346                     l9584:
 17709                           
 17710                           ;vscp_firmware.c: 173: }
 17711                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 17712  005346  0EFF               	movlw	255
 17713  005348  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 17714                           
 17715                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 17716  00534C  0E00               	movlw	0
 17717  00534E  EC75  F02A         	call	_vscp_setSegmentCRC
 17718                           
 17719                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 17720  005352  0EA0               	movlw	160
 17721  005354  EC6C  F02A         	call	_vscp_setControlByte
 17722                           
 17723                           ;vscp_firmware.c: 185: return 0;
 17724  005358  0E00               	movlw	0
 17725  00535A                     l1036:
 17726  00535A  0012               	return	
 17727  00535C                     __end_of_vscp_check_pstorage:
 17728                           	opt stack 0
 17729                           tblptru	equ	0xFF8
 17730                           tblptrh	equ	0xFF7
 17731                           tblptrl	equ	0xFF6
 17732                           tablat	equ	0xFF5
 17733                           prodh	equ	0xFF4
 17734                           prodl	equ	0xFF3
 17735                           intcon	equ	0xFF2
 17736                           postinc0	equ	0xFEE
 17737                           wreg	equ	0xFE8
 17738                           indf1	equ	0xFE7
 17739                           postdec1	equ	0xFE5
 17740                           fsr1h	equ	0xFE2
 17741                           fsr1l	equ	0xFE1
 17742                           indf2	equ	0xFDF
 17743                           postinc2	equ	0xFDE
 17744                           postdec2	equ	0xFDD
 17745                           plusw2	equ	0xFDB
 17746                           fsr2h	equ	0xFDA
 17747                           fsr2l	equ	0xFD9
 17748                           status	equ	0xFD8
 17749                           
 17750 ;; *************** function _vscp_setControlByte *****************
 17751 ;; Defined at:
 17752 ;;		line 2797 in file "../main.c"
 17753 ;; Parameters:    Size  Location     Type
 17754 ;;  ctrl            1    wreg     unsigned char 
 17755 ;; Auto vars:     Size  Location     Type
 17756 ;;  ctrl            1   16[COMRAM] unsigned char 
 17757 ;; Return value:  Size  Location     Type
 17758 ;;		None               void
 17759 ;; Registers used:
 17760 ;;		wreg, status,2, cstack
 17761 ;; Tracked objects:
 17762 ;;		On entry : 0/1
 17763 ;;		On exit  : 0/0
 17764 ;;		Unchanged: 0/0
 17765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17766 ;;      Params:         0       0       0       0       0       0       0
 17767 ;;      Locals:         1       0       0       0       0       0       0
 17768 ;;      Temps:          0       0       0       0       0       0       0
 17769 ;;      Totals:         1       0       0       0       0       0       0
 17770 ;;Total ram usage:        1 bytes
 17771 ;; Hardware stack levels used:    1
 17772 ;; Hardware stack levels required when called:    3
 17773 ;; This function calls:
 17774 ;;		_writeEEPROM
 17775 ;; This function is called by:
 17776 ;;		_vscp_check_pstorage
 17777 ;; This function uses a non-reentrant model
 17778 ;;
 17779                           
 17780                           	psect	text79
 17781  0054D8                     __ptext79:
 17782                           	opt stack 0
 17783  0054D8                     _vscp_setControlByte:
 17784                           	opt stack 25
 17785                           
 17786                           ;incstack = 0
 17787                           ;incstack = 0
 17788                           ;vscp_setControlByte@ctrl stored from wreg
 17789  0054D8  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17790                           
 17791                           ;main.c: 2798: writeEEPROM(0x03, ctrl);
 17792  0054DC  6A0F               	clrf	?_writeEEPROM+1,c
 17793  0054DE  0E03               	movlw	3
 17794  0054E0  6E0E               	movwf	?_writeEEPROM,c
 17795  0054E2  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17796  0054E6  EF65  F029         	goto	_writeEEPROM	;wreg free
 17797  0054EA                     __end_of_vscp_setControlByte:
 17798                           	opt stack 0
 17799                           tblptru	equ	0xFF8
 17800                           tblptrh	equ	0xFF7
 17801                           tblptrl	equ	0xFF6
 17802                           tablat	equ	0xFF5
 17803                           prodh	equ	0xFF4
 17804                           prodl	equ	0xFF3
 17805                           intcon	equ	0xFF2
 17806                           postinc0	equ	0xFEE
 17807                           wreg	equ	0xFE8
 17808                           indf1	equ	0xFE7
 17809                           postdec1	equ	0xFE5
 17810                           fsr1h	equ	0xFE2
 17811                           fsr1l	equ	0xFE1
 17812                           indf2	equ	0xFDF
 17813                           postinc2	equ	0xFDE
 17814                           postdec2	equ	0xFDD
 17815                           plusw2	equ	0xFDB
 17816                           fsr2h	equ	0xFDA
 17817                           fsr2l	equ	0xFD9
 17818                           status	equ	0xFD8
 17819                           
 17820 ;; *************** function _vscp_setSegmentCRC *****************
 17821 ;; Defined at:
 17822 ;;		line 2788 in file "../main.c"
 17823 ;; Parameters:    Size  Location     Type
 17824 ;;  crc             1    wreg     unsigned char 
 17825 ;; Auto vars:     Size  Location     Type
 17826 ;;  crc             1   16[COMRAM] unsigned char 
 17827 ;; Return value:  Size  Location     Type
 17828 ;;		None               void
 17829 ;; Registers used:
 17830 ;;		wreg, status,2, cstack
 17831 ;; Tracked objects:
 17832 ;;		On entry : 0/0
 17833 ;;		On exit  : 0/0
 17834 ;;		Unchanged: 0/0
 17835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17836 ;;      Params:         0       0       0       0       0       0       0
 17837 ;;      Locals:         1       0       0       0       0       0       0
 17838 ;;      Temps:          0       0       0       0       0       0       0
 17839 ;;      Totals:         1       0       0       0       0       0       0
 17840 ;;Total ram usage:        1 bytes
 17841 ;; Hardware stack levels used:    1
 17842 ;; Hardware stack levels required when called:    3
 17843 ;; This function calls:
 17844 ;;		_writeEEPROM
 17845 ;; This function is called by:
 17846 ;;		_vscp_check_pstorage
 17847 ;;		_vscp_handleProbeState
 17848 ;;		_vscp_handleHeartbeat
 17849 ;;		_vscp_handleSetNickname
 17850 ;; This function uses a non-reentrant model
 17851 ;;
 17852                           
 17853                           	psect	text80
 17854  0054EA                     __ptext80:
 17855                           	opt stack 0
 17856  0054EA                     _vscp_setSegmentCRC:
 17857                           	opt stack 24
 17858                           
 17859                           ;incstack = 0
 17860                           ;incstack = 0
 17861                           ;vscp_setSegmentCRC@crc stored from wreg
 17862  0054EA  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17863                           
 17864                           ;main.c: 2789: writeEEPROM(0x02, crc);
 17865  0054EE  6A0F               	clrf	?_writeEEPROM+1,c
 17866  0054F0  0E02               	movlw	2
 17867  0054F2  6E0E               	movwf	?_writeEEPROM,c
 17868  0054F4  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17869  0054F8  EF65  F029         	goto	_writeEEPROM	;wreg free
 17870  0054FC                     __end_of_vscp_setSegmentCRC:
 17871                           	opt stack 0
 17872                           tblptru	equ	0xFF8
 17873                           tblptrh	equ	0xFF7
 17874                           tblptrl	equ	0xFF6
 17875                           tablat	equ	0xFF5
 17876                           prodh	equ	0xFF4
 17877                           prodl	equ	0xFF3
 17878                           intcon	equ	0xFF2
 17879                           postinc0	equ	0xFEE
 17880                           wreg	equ	0xFE8
 17881                           indf1	equ	0xFE7
 17882                           postdec1	equ	0xFE5
 17883                           fsr1h	equ	0xFE2
 17884                           fsr1l	equ	0xFE1
 17885                           indf2	equ	0xFDF
 17886                           postinc2	equ	0xFDE
 17887                           postdec2	equ	0xFDD
 17888                           plusw2	equ	0xFDB
 17889                           fsr2h	equ	0xFDA
 17890                           fsr2l	equ	0xFD9
 17891                           status	equ	0xFD8
 17892                           
 17893 ;; *************** function _vscp_getSegmentCRC *****************
 17894 ;; Defined at:
 17895 ;;		line 2779 in file "../main.c"
 17896 ;; Parameters:    Size  Location     Type
 17897 ;;		None
 17898 ;; Auto vars:     Size  Location     Type
 17899 ;;		None
 17900 ;; Return value:  Size  Location     Type
 17901 ;;                  1    wreg      unsigned char 
 17902 ;; Registers used:
 17903 ;;		wreg, status,2, cstack
 17904 ;; Tracked objects:
 17905 ;;		On entry : 0/0
 17906 ;;		On exit  : 0/0
 17907 ;;		Unchanged: 0/0
 17908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17909 ;;      Params:         0       0       0       0       0       0       0
 17910 ;;      Locals:         0       0       0       0       0       0       0
 17911 ;;      Temps:          0       0       0       0       0       0       0
 17912 ;;      Totals:         0       0       0       0       0       0       0
 17913 ;;Total ram usage:        0 bytes
 17914 ;; Hardware stack levels used:    1
 17915 ;; Hardware stack levels required when called:    3
 17916 ;; This function calls:
 17917 ;;		_readEEPROM
 17918 ;; This function is called by:
 17919 ;;		_vscp_check_pstorage
 17920 ;;		_vscp_handleHeartbeat
 17921 ;; This function uses a non-reentrant model
 17922 ;;
 17923                           
 17924                           	psect	text81
 17925  005564                     __ptext81:
 17926                           	opt stack 0
 17927  005564                     _vscp_getSegmentCRC:
 17928                           	opt stack 24
 17929                           
 17930                           ;main.c: 2780: return readEEPROM(0x02);
 17931                           
 17932                           ;incstack = 0
 17933                           ;incstack = 0
 17934  005564  6A0F               	clrf	?_readEEPROM+1,c
 17935  005566  0E02               	movlw	2
 17936  005568  6E0E               	movwf	?_readEEPROM,c
 17937  00556A  EF62  F02A         	goto	_readEEPROM	;wreg free
 17938  00556E                     __end_of_vscp_getSegmentCRC:
 17939                           	opt stack 0
 17940                           tblptru	equ	0xFF8
 17941                           tblptrh	equ	0xFF7
 17942                           tblptrl	equ	0xFF6
 17943                           tablat	equ	0xFF5
 17944                           prodh	equ	0xFF4
 17945                           prodl	equ	0xFF3
 17946                           intcon	equ	0xFF2
 17947                           postinc0	equ	0xFEE
 17948                           wreg	equ	0xFE8
 17949                           indf1	equ	0xFE7
 17950                           postdec1	equ	0xFE5
 17951                           fsr1h	equ	0xFE2
 17952                           fsr1l	equ	0xFE1
 17953                           indf2	equ	0xFDF
 17954                           postinc2	equ	0xFDE
 17955                           postdec2	equ	0xFDD
 17956                           plusw2	equ	0xFDB
 17957                           fsr2h	equ	0xFDA
 17958                           fsr2l	equ	0xFD9
 17959                           status	equ	0xFD8
 17960                           
 17961 ;; *************** function _readEEPROM *****************
 17962 ;; Defined at:
 17963 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 17964 ;; Parameters:    Size  Location     Type
 17965 ;;  address         2   13[COMRAM] unsigned short 
 17966 ;; Auto vars:     Size  Location     Type
 17967 ;;  data            1   16[COMRAM] unsigned char 
 17968 ;; Return value:  Size  Location     Type
 17969 ;;                  1    wreg      unsigned char 
 17970 ;; Registers used:
 17971 ;;		wreg, status,2
 17972 ;; Tracked objects:
 17973 ;;		On entry : 0/0
 17974 ;;		On exit  : 0/0
 17975 ;;		Unchanged: 0/0
 17976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17977 ;;      Params:         2       0       0       0       0       0       0
 17978 ;;      Locals:         2       0       0       0       0       0       0
 17979 ;;      Temps:          0       0       0       0       0       0       0
 17980 ;;      Totals:         4       0       0       0       0       0       0
 17981 ;;Total ram usage:        4 bytes
 17982 ;; Hardware stack levels used:    1
 17983 ;; Hardware stack levels required when called:    2
 17984 ;; This function calls:
 17985 ;;		Nothing
 17986 ;; This function is called by:
 17987 ;;		_doWork
 17988 ;;		_doOneSecondWork
 17989 ;;		_sendTempEvent
 17990 ;;		_getCalibrationValue
 17991 ;;		_writeCoeffs2Ram
 17992 ;;		_handle_sync
 17993 ;;		_vscp_readAppReg
 17994 ;;		_vscp_writeAppReg
 17995 ;;		_vscp_getGUID
 17996 ;;		_vscp_getUserID
 17997 ;;		_vscp_getManufacturerId
 17998 ;;		_vscp_getZone
 17999 ;;		_vscp_getSubzone
 18000 ;;		_vscp_readNicknamePermanent
 18001 ;;		_vscp_getSegmentCRC
 18002 ;; This function uses a non-reentrant model
 18003 ;;
 18004                           
 18005                           	psect	text82
 18006  0054C4                     __ptext82:
 18007                           	opt stack 0
 18008  0054C4                     _readEEPROM:
 18009                           	opt stack 25
 18010                           
 18011                           ;eeprom.c: 95: uint8_t data;
 18012                           ;eeprom.c: 100: EEADR = address & 0xff;
 18013                           
 18014                           ;incstack = 0
 18015                           ;incstack = 0
 18016  0054C4  C00E  FFA9         	movff	readEEPROM@address,4009	;volatile
 18017                           
 18018                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 18019  0054C8  9EA6               	bcf	4006,7,c	;volatile
 18020                           
 18021                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 18022  0054CA  9CA6               	bcf	4006,6,c	;volatile
 18023                           
 18024                           ;eeprom.c: 103: EECON1bits.RD = 1;
 18025  0054CC  80A6               	bsf	4006,0,c	;volatile
 18026  0054CE  F000               	nop		;# 
 18027                           
 18028                           ;eeprom.c: 105: data = EEDATA;
 18029  0054D0  CFA8 F011          	movff	4008,readEEPROM@data	;volatile
 18030                           
 18031                           ;eeprom.c: 107: return data;
 18032  0054D4  5011               	movf	readEEPROM@data,w,c
 18033  0054D6  0012               	return	
 18034  0054D8                     __end_of_readEEPROM:
 18035                           	opt stack 0
 18036                           tblptru	equ	0xFF8
 18037                           tblptrh	equ	0xFF7
 18038                           tblptrl	equ	0xFF6
 18039                           tablat	equ	0xFF5
 18040                           prodh	equ	0xFF4
 18041                           prodl	equ	0xFF3
 18042                           intcon	equ	0xFF2
 18043                           postinc0	equ	0xFEE
 18044                           wreg	equ	0xFE8
 18045                           indf1	equ	0xFE7
 18046                           postdec1	equ	0xFE5
 18047                           fsr1h	equ	0xFE2
 18048                           fsr1l	equ	0xFE1
 18049                           indf2	equ	0xFDF
 18050                           postinc2	equ	0xFDE
 18051                           postdec2	equ	0xFDD
 18052                           plusw2	equ	0xFDB
 18053                           fsr2h	equ	0xFDA
 18054                           fsr2l	equ	0xFD9
 18055                           status	equ	0xFD8
 18056                           
 18057 ;; *************** function _vscp_writeNicknamePermanent *****************
 18058 ;; Defined at:
 18059 ;;		line 2770 in file "../main.c"
 18060 ;; Parameters:    Size  Location     Type
 18061 ;;  nickname        1    wreg     unsigned char 
 18062 ;; Auto vars:     Size  Location     Type
 18063 ;;  nickname        1   16[COMRAM] unsigned char 
 18064 ;; Return value:  Size  Location     Type
 18065 ;;		None               void
 18066 ;; Registers used:
 18067 ;;		wreg, status,2, cstack
 18068 ;; Tracked objects:
 18069 ;;		On entry : 0/0
 18070 ;;		On exit  : 0/0
 18071 ;;		Unchanged: 0/0
 18072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18073 ;;      Params:         0       0       0       0       0       0       0
 18074 ;;      Locals:         1       0       0       0       0       0       0
 18075 ;;      Temps:          0       0       0       0       0       0       0
 18076 ;;      Totals:         1       0       0       0       0       0       0
 18077 ;;Total ram usage:        1 bytes
 18078 ;; Hardware stack levels used:    1
 18079 ;; Hardware stack levels required when called:    3
 18080 ;; This function calls:
 18081 ;;		_writeEEPROM
 18082 ;; This function is called by:
 18083 ;;		_vscp_check_pstorage
 18084 ;;		_vscp_handleProbeState
 18085 ;;		_vscp_handleHeartbeat
 18086 ;;		_vscp_handleSetNickname
 18087 ;;		_vscp_handleDropNickname
 18088 ;; This function uses a non-reentrant model
 18089 ;;
 18090                           
 18091                           	psect	text83
 18092  0054FC                     __ptext83:
 18093                           	opt stack 0
 18094  0054FC                     _vscp_writeNicknamePermanent:
 18095                           	opt stack 24
 18096                           
 18097                           ;incstack = 0
 18098                           ;incstack = 0
 18099                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18100  0054FC  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18101                           
 18102                           ;main.c: 2771: writeEEPROM( 0x01, nickname );
 18103  005500  6A0F               	clrf	?_writeEEPROM+1,c
 18104  005502  0E01               	movlw	1
 18105  005504  6E0E               	movwf	?_writeEEPROM,c
 18106  005506  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 18107  00550A  EF65  F029         	goto	_writeEEPROM	;wreg free
 18108  00550E                     __end_of_vscp_writeNicknamePermanent:
 18109                           	opt stack 0
 18110                           tblptru	equ	0xFF8
 18111                           tblptrh	equ	0xFF7
 18112                           tblptrl	equ	0xFF6
 18113                           tablat	equ	0xFF5
 18114                           prodh	equ	0xFF4
 18115                           prodl	equ	0xFF3
 18116                           intcon	equ	0xFF2
 18117                           postinc0	equ	0xFEE
 18118                           wreg	equ	0xFE8
 18119                           indf1	equ	0xFE7
 18120                           postdec1	equ	0xFE5
 18121                           fsr1h	equ	0xFE2
 18122                           fsr1l	equ	0xFE1
 18123                           indf2	equ	0xFDF
 18124                           postinc2	equ	0xFDE
 18125                           postdec2	equ	0xFDD
 18126                           plusw2	equ	0xFDB
 18127                           fsr2h	equ	0xFDA
 18128                           fsr2l	equ	0xFD9
 18129                           status	equ	0xFD8
 18130                           
 18131 ;; *************** function _writeEEPROM *****************
 18132 ;; Defined at:
 18133 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 18134 ;; Parameters:    Size  Location     Type
 18135 ;;  address         2   13[COMRAM] unsigned short 
 18136 ;;  data            1   15[COMRAM] unsigned char 
 18137 ;; Auto vars:     Size  Location     Type
 18138 ;;		None
 18139 ;; Return value:  Size  Location     Type
 18140 ;;		None               void
 18141 ;; Registers used:
 18142 ;;		wreg, status,2
 18143 ;; Tracked objects:
 18144 ;;		On entry : 0/0
 18145 ;;		On exit  : 0/0
 18146 ;;		Unchanged: 0/0
 18147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18148 ;;      Params:         3       0       0       0       0       0       0
 18149 ;;      Locals:         0       0       0       0       0       0       0
 18150 ;;      Temps:          0       0       0       0       0       0       0
 18151 ;;      Totals:         3       0       0       0       0       0       0
 18152 ;;Total ram usage:        3 bytes
 18153 ;; Hardware stack levels used:    1
 18154 ;; Hardware stack levels required when called:    2
 18155 ;; This function calls:
 18156 ;;		Nothing
 18157 ;; This function is called by:
 18158 ;;		_main
 18159 ;;		_doWork
 18160 ;;		_init_app_eeprom
 18161 ;;		_vscp_writeAppReg
 18162 ;;		_vscp_setGUID
 18163 ;;		_vscp_setUserID
 18164 ;;		_vscp_setManufacturerId
 18165 ;;		_vscp_goBootloaderMode
 18166 ;;		_vscp_writeNicknamePermanent
 18167 ;;		_vscp_setSegmentCRC
 18168 ;;		_vscp_setControlByte
 18169 ;; This function uses a non-reentrant model
 18170 ;;
 18171                           
 18172                           	psect	text84
 18173  0052CA                     __ptext84:
 18174                           	opt stack 0
 18175  0052CA                     _writeEEPROM:
 18176                           	opt stack 26
 18177                           
 18178                           ;eeprom.c: 30: EEADR = address & 0xff;
 18179                           
 18180                           ;incstack = 0
 18181                           ;incstack = 0
 18182  0052CA  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 18183                           
 18184                           ;eeprom.c: 31: EEDATA = data;
 18185  0052CE  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18186                           
 18187                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 18188  0052D2  9EA6               	bcf	4006,7,c	;volatile
 18189                           
 18190                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 18191  0052D4  9CA6               	bcf	4006,6,c	;volatile
 18192                           
 18193                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 18194  0052D6  84A6               	bsf	4006,2,c	;volatile
 18195                           
 18196                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 18197  0052D8  9EF2               	bcf	intcon,7,c	;volatile
 18198                           
 18199                           ;eeprom.c: 38: EECON2 = 0x55;
 18200  0052DA  0E55               	movlw	85
 18201  0052DC  6EA7               	movwf	4007,c	;volatile
 18202                           
 18203                           ;eeprom.c: 39: EECON2 = 0xaa;
 18204  0052DE  0EAA               	movlw	170
 18205  0052E0  6EA7               	movwf	4007,c	;volatile
 18206                           
 18207                           ;eeprom.c: 40: EECON1bits.WR = 1;
 18208  0052E2  82A6               	bsf	4006,1,c	;volatile
 18209                           
 18210                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 18211  0052E4  8EF2               	bsf	intcon,7,c	;volatile
 18212  0052E6                     l918:
 18213  0052E6  A8A1               	btfss	4001,4,c	;volatile
 18214  0052E8  D7FE               	goto	l918
 18215                           
 18216                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 18217  0052EA  98A1               	bcf	4001,4,c	;volatile
 18218                           
 18219                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 18220  0052EC  94A6               	bcf	4006,2,c	;volatile
 18221  0052EE  0012               	return	
 18222  0052F0                     __end_of_writeEEPROM:
 18223                           	opt stack 0
 18224                           tblptru	equ	0xFF8
 18225                           tblptrh	equ	0xFF7
 18226                           tblptrl	equ	0xFF6
 18227                           tablat	equ	0xFF5
 18228                           prodh	equ	0xFF4
 18229                           prodl	equ	0xFF3
 18230                           intcon	equ	0xFF2
 18231                           postinc0	equ	0xFEE
 18232                           wreg	equ	0xFE8
 18233                           indf1	equ	0xFE7
 18234                           postdec1	equ	0xFE5
 18235                           fsr1h	equ	0xFE2
 18236                           fsr1l	equ	0xFE1
 18237                           indf2	equ	0xFDF
 18238                           postinc2	equ	0xFDE
 18239                           postdec2	equ	0xFDD
 18240                           plusw2	equ	0xFDB
 18241                           fsr2h	equ	0xFDA
 18242                           fsr2l	equ	0xFD9
 18243                           status	equ	0xFD8
 18244                           
 18245 ;; *************** function _init *****************
 18246 ;; Defined at:
 18247 ;;		line 888 in file "../main.c"
 18248 ;; Parameters:    Size  Location     Type
 18249 ;;		None
 18250 ;; Auto vars:     Size  Location     Type
 18251 ;;		None
 18252 ;; Return value:  Size  Location     Type
 18253 ;;		None               void
 18254 ;; Registers used:
 18255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18256 ;; Tracked objects:
 18257 ;;		On entry : 0/0
 18258 ;;		On exit  : 1/1
 18259 ;;		Unchanged: 0/0
 18260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18261 ;;      Params:         0       0       0       0       0       0       0
 18262 ;;      Locals:         0       0       0       0       0       0       0
 18263 ;;      Temps:          0       0       0       0       0       0       0
 18264 ;;      Totals:         0       0       0       0       0       0       0
 18265 ;;Total ram usage:        0 bytes
 18266 ;; Hardware stack levels used:    1
 18267 ;; Hardware stack levels required when called:    5
 18268 ;; This function calls:
 18269 ;;		_WriteTimer0
 18270 ;;		_ConvertADC
 18271 ;;		_init_app_ram
 18272 ;;		_OpenTimer0
 18273 ;;		_OpenADC
 18274 ;;		_ECANInitialize
 18275 ;; This function is called by:
 18276 ;;		_main
 18277 ;; This function uses a non-reentrant model
 18278 ;;
 18279                           
 18280                           	psect	text85
 18281  005070                     __ptext85:
 18282                           	opt stack 0
 18283  005070                     _init:
 18284                           	opt stack 24
 18285                           
 18286                           ;main.c: 892: init_app_ram();
 18287                           
 18288                           ;incstack = 0
 18289                           ;incstack = 0
 18290  005070  ECDA  F027         	call	_init_app_ram	;wreg free
 18291                           
 18292                           ; BSR set to: 1
 18293                           ;main.c: 900: TRISA = 0x07;
 18294  005074  0E07               	movlw	7
 18295  005076  6E92               	movwf	3986,c	;volatile
 18296                           
 18297                           ; BSR set to: 1
 18298                           ;main.c: 911: TRISB = 0x1B;
 18299  005078  0E1B               	movlw	27
 18300  00507A  6E93               	movwf	3987,c	;volatile
 18301                           
 18302                           ; BSR set to: 1
 18303                           ;main.c: 921: TRISC = 0x01;
 18304  00507C  0E01               	movlw	1
 18305  00507E  6E94               	movwf	3988,c	;volatile
 18306                           
 18307                           ; BSR set to: 1
 18308                           ;main.c: 922: PORTC = 0x00;
 18309  005080  6A82               	clrf	3970,c	;volatile
 18310                           
 18311                           ; BSR set to: 1
 18312                           ;main.c: 924: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18313  005082  0E92               	movlw	146
 18314  005084  ECDF  F029         	call	_OpenTimer0
 18315                           
 18316                           ; BSR set to: 1
 18317                           ;main.c: 925: WriteTimer0(0xfb1d);
 18318  005088  0EFB               	movlw	251
 18319  00508A  6E0F               	movwf	?_WriteTimer0+1,c
 18320  00508C  0E1D               	movlw	29
 18321  00508E  6E0E               	movwf	?_WriteTimer0,c
 18322  005090  EC87  F02A         	call	_WriteTimer0	;wreg free
 18323                           
 18324                           ; BSR set to: 1
 18325                           ;main.c: 927: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18326                           ;main.c: 928: 0b10000111 & 0b11111111 & 0b11110100 &
 18327                           ;main.c: 929: 0b11111110 & 0b11111101,
 18328                           ;main.c: 930: 15);
 18329  005094  0E84               	movlw	132
 18330  005096  6E0E               	movwf	?_OpenADC,c
 18331  005098  0E0F               	movlw	15
 18332  00509A  6E0F               	movwf	?_OpenADC+1,c
 18333  00509C  0EEF               	movlw	239
 18334  00509E  EC3B  F026         	call	_OpenADC
 18335                           
 18336                           ; BSR set to: 1
 18337                           ;main.c: 933: ECANInitialize();
 18338  0050A2  EC81  F024         	call	_ECANInitialize	;wreg free
 18339                           
 18340                           ;main.c: 957: INTCONbits.GIE = 1;
 18341  0050A6  8EF2               	bsf	intcon,7,c	;volatile
 18342                           
 18343                           ;main.c: 959: ConvertADC();
 18344  0050A8  EFBD  F02A         	goto	_ConvertADC	;wreg free
 18345  0050AC                     __end_of_init:
 18346                           	opt stack 0
 18347                           tblptru	equ	0xFF8
 18348                           tblptrh	equ	0xFF7
 18349                           tblptrl	equ	0xFF6
 18350                           tablat	equ	0xFF5
 18351                           prodh	equ	0xFF4
 18352                           prodl	equ	0xFF3
 18353                           intcon	equ	0xFF2
 18354                           postinc0	equ	0xFEE
 18355                           wreg	equ	0xFE8
 18356                           indf1	equ	0xFE7
 18357                           postdec1	equ	0xFE5
 18358                           fsr1h	equ	0xFE2
 18359                           fsr1l	equ	0xFE1
 18360                           indf2	equ	0xFDF
 18361                           postinc2	equ	0xFDE
 18362                           postdec2	equ	0xFDD
 18363                           plusw2	equ	0xFDB
 18364                           fsr2h	equ	0xFDA
 18365                           fsr2l	equ	0xFD9
 18366                           status	equ	0xFD8
 18367                           
 18368 ;; *************** function _ECANInitialize *****************
 18369 ;; Defined at:
 18370 ;;		line 168 in file "../ECAN.c"
 18371 ;; Parameters:    Size  Location     Type
 18372 ;;		None
 18373 ;; Auto vars:     Size  Location     Type
 18374 ;;		None
 18375 ;; Return value:  Size  Location     Type
 18376 ;;		None               void
 18377 ;; Registers used:
 18378 ;;		wreg, status,2, status,0, cstack
 18379 ;; Tracked objects:
 18380 ;;		On entry : F/1
 18381 ;;		On exit  : 1/1
 18382 ;;		Unchanged: 0/0
 18383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18384 ;;      Params:         0       0       0       0       0       0       0
 18385 ;;      Locals:         0       0       0       0       0       0       0
 18386 ;;      Temps:          0       0       0       0       0       0       0
 18387 ;;      Totals:         0       0       0       0       0       0       0
 18388 ;;Total ram usage:        0 bytes
 18389 ;; Hardware stack levels used:    1
 18390 ;; Hardware stack levels required when called:    3
 18391 ;; This function calls:
 18392 ;;		_ECANSetOperationMode
 18393 ;; This function is called by:
 18394 ;;		_init
 18395 ;; This function uses a non-reentrant model
 18396 ;;
 18397                           
 18398                           	psect	text86
 18399  004902                     __ptext86:
 18400                           	opt stack 0
 18401  004902                     _ECANInitialize:
 18402                           	opt stack 25
 18403                           
 18404                           ; BSR set to: 1
 18405                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18406                           
 18407                           ;incstack = 0
 18408                           ;incstack = 0
 18409  004902  0E80               	movlw	128
 18410  004904  EC38  F02A         	call	_ECANSetOperationMode
 18411                           
 18412                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18413  004908  0E09               	movlw	9
 18414  00490A  6E70               	movwf	3952,c	;volatile
 18415                           
 18416                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18417  00490C  0EFC               	movlw	252
 18418  00490E  6E71               	movwf	3953,c	;volatile
 18419                           
 18420                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18421                           ;ECAN.c: 181: (0 << 6) |
 18422                           ;ECAN.c: 182: (2-1);
 18423  004910  0E01               	movlw	1
 18424  004912  6E72               	movwf	3954,c	;volatile
 18425                           
 18426                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18427  004914  0E20               	movlw	32
 18428  004916  6E73               	movwf	3955,c	;volatile
 18429                           
 18430                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18431  004918  8E77               	bsf	3959,7,c	;volatile
 18432                           
 18433                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18434  00491A  9C77               	bcf	3959,6,c	;volatile
 18435                           
 18436                           ;ECAN.c: 205: RXB0CON = 0;
 18437  00491C  6A60               	clrf	3936,c	;volatile
 18438                           
 18439                           ;ECAN.c: 211: RXB1CON = 0;
 18440  00491E  010F               	movlb	15	; () banked
 18441  004920  6B50               	clrf	80,b	;volatile
 18442                           
 18443                           ; BSR set to: 15
 18444                           ;ECAN.c: 221: B0CON = 0;
 18445  004922  010E               	movlb	14	; () banked
 18446  004924  6B20               	clrf	32,b	;volatile
 18447                           
 18448                           ; BSR set to: 14
 18449                           ;ECAN.c: 231: B1CON = 0;
 18450  004926  6B30               	clrf	48,b	;volatile
 18451                           
 18452                           ; BSR set to: 14
 18453                           ;ECAN.c: 241: B2CON = 0;
 18454  004928  6B40               	clrf	64,b	;volatile
 18455                           
 18456                           ; BSR set to: 14
 18457                           ;ECAN.c: 254: B3CON = 0 << 2;
 18458  00492A  6B50               	clrf	80,b	;volatile
 18459                           
 18460                           ; BSR set to: 14
 18461                           ;ECAN.c: 264: B4CON = 0 << 2;
 18462  00492C  6B60               	clrf	96,b	;volatile
 18463                           
 18464                           ; BSR set to: 14
 18465                           ;ECAN.c: 274: B5CON = 0 << 2;
 18466  00492E  6B70               	clrf	112,b	;volatile
 18467                           
 18468                           ; BSR set to: 14
 18469                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18470  004930  0EE0               	movlw	224
 18471  004932  010D               	movlb	13	; () banked
 18472  004934  6FF8               	movwf	248,b	;volatile
 18473                           
 18474                           ; BSR set to: 13
 18475                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18476  004936  010F               	movlb	15	; () banked
 18477  004938  6B00               	clrf	0,b	;volatile
 18478                           
 18479                           ; BSR set to: 15
 18480  00493A  0E08               	movlw	8
 18481  00493C  6F01               	movwf	1,b	;volatile
 18482                           
 18483                           ; BSR set to: 15
 18484  00493E  6B02               	clrf	2,b	;volatile
 18485                           
 18486                           ; BSR set to: 15
 18487  004940  6B03               	clrf	3,b	;volatile
 18488                           
 18489                           ; BSR set to: 15
 18490                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18491  004942  6B04               	clrf	4,b	;volatile
 18492                           
 18493                           ; BSR set to: 15
 18494  004944  0EE8               	movlw	232
 18495  004946  6F05               	movwf	5,b	;volatile
 18496                           
 18497                           ; BSR set to: 15
 18498  004948  0E1A               	movlw	26
 18499  00494A  6F06               	movwf	6,b	;volatile
 18500                           
 18501                           ; BSR set to: 15
 18502  00494C  6B07               	clrf	7,b	;volatile
 18503                           
 18504                           ; BSR set to: 15
 18505                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18506  00494E  0E03               	movlw	3
 18507  004950  010D               	movlb	13	; () banked
 18508  004952  6FD4               	movwf	212,b	;volatile
 18509                           
 18510                           ; BSR set to: 13
 18511                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18512  004954  6BD5               	clrf	213,b	;volatile
 18513                           
 18514                           ; BSR set to: 13
 18515                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18516  004956  6BE0               	clrf	224,b	;volatile
 18517                           
 18518                           ; BSR set to: 13
 18519                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18520  004958  0E11               	movlw	17
 18521  00495A  6FE1               	movwf	225,b	;volatile
 18522                           
 18523                           ; BSR set to: 13
 18524                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18525  00495C  6FE2               	movwf	226,b	;volatile
 18526                           
 18527                           ; BSR set to: 13
 18528                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18529  00495E  6BE3               	clrf	227,b	;volatile
 18530                           
 18531                           ; BSR set to: 13
 18532                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18533  004960  6BE4               	clrf	228,b	;volatile
 18534                           
 18535                           ; BSR set to: 13
 18536                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18537  004962  6BE5               	clrf	229,b	;volatile
 18538                           
 18539                           ; BSR set to: 13
 18540                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18541  004964  6BE6               	clrf	230,b	;volatile
 18542                           
 18543                           ; BSR set to: 13
 18544                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18545  004966  6BE7               	clrf	231,b	;volatile
 18546                           
 18547                           ; BSR set to: 13
 18548                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18549  004968  0E54               	movlw	84
 18550  00496A  6FF0               	movwf	240,b	;volatile
 18551                           
 18552                           ; BSR set to: 13
 18553                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18554  00496C  0E05               	movlw	5
 18555  00496E  6FF1               	movwf	241,b	;volatile
 18556                           
 18557                           ; BSR set to: 13
 18558                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18559  004970  6BF2               	clrf	242,b	;volatile
 18560                           
 18561                           ; BSR set to: 13
 18562                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18563  004972  6BF2               	clrf	242,b	;volatile
 18564                           
 18565                           ; BSR set to: 13
 18566                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18567  004974  0E0F               	movlw	15
 18568  004976  010F               	movlb	15	; () banked
 18569  004978  6F18               	movwf	24,b	;volatile
 18570                           
 18571                           ; BSR set to: 15
 18572  00497A  0EE0               	movlw	224
 18573  00497C  6F19               	movwf	25,b	;volatile
 18574                           
 18575                           ; BSR set to: 15
 18576  00497E  6B1A               	clrf	26,b	;volatile
 18577                           
 18578                           ; BSR set to: 15
 18579  004980  6B1B               	clrf	27,b	;volatile
 18580                           
 18581                           ; BSR set to: 15
 18582                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18583  004982  8719               	bsf	25,3,b	;volatile
 18584                           
 18585                           ; BSR set to: 15
 18586                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18587  004984  0E0F               	movlw	15
 18588  004986  6F1C               	movwf	28,b	;volatile
 18589                           
 18590                           ; BSR set to: 15
 18591  004988  0EE0               	movlw	224
 18592  00498A  6F1D               	movwf	29,b	;volatile
 18593                           
 18594                           ; BSR set to: 15
 18595  00498C  691E               	setf	30,b	;volatile
 18596                           
 18597                           ; BSR set to: 15
 18598  00498E  6B1F               	clrf	31,b	;volatile
 18599                           
 18600                           ; BSR set to: 15
 18601                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18602  004990  871D               	bsf	29,3,b	;volatile
 18603                           
 18604                           ; BSR set to: 15
 18605                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18606  004992  0E00               	movlw	0
 18607  004994  EF38  F02A         	goto	_ECANSetOperationMode
 18608  004998                     __end_of_ECANInitialize:
 18609                           	opt stack 0
 18610                           tblptru	equ	0xFF8
 18611                           tblptrh	equ	0xFF7
 18612                           tblptrl	equ	0xFF6
 18613                           tablat	equ	0xFF5
 18614                           prodh	equ	0xFF4
 18615                           prodl	equ	0xFF3
 18616                           intcon	equ	0xFF2
 18617                           postinc0	equ	0xFEE
 18618                           wreg	equ	0xFE8
 18619                           indf1	equ	0xFE7
 18620                           postdec1	equ	0xFE5
 18621                           fsr1h	equ	0xFE2
 18622                           fsr1l	equ	0xFE1
 18623                           indf2	equ	0xFDF
 18624                           postinc2	equ	0xFDE
 18625                           postdec2	equ	0xFDD
 18626                           plusw2	equ	0xFDB
 18627                           fsr2h	equ	0xFDA
 18628                           fsr2l	equ	0xFD9
 18629                           status	equ	0xFD8
 18630                           
 18631 ;; *************** function _ECANSetOperationMode *****************
 18632 ;; Defined at:
 18633 ;;		line 1012 in file "../ECAN.c"
 18634 ;; Parameters:    Size  Location     Type
 18635 ;;  mode            1    wreg     enum E16346
 18636 ;; Auto vars:     Size  Location     Type
 18637 ;;  mode            1   13[COMRAM] enum E16346
 18638 ;; Return value:  Size  Location     Type
 18639 ;;		None               void
 18640 ;; Registers used:
 18641 ;;		wreg, status,2, status,0
 18642 ;; Tracked objects:
 18643 ;;		On entry : 1/1
 18644 ;;		On exit  : 1/1
 18645 ;;		Unchanged: 1/0
 18646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18647 ;;      Params:         0       0       0       0       0       0       0
 18648 ;;      Locals:         1       0       0       0       0       0       0
 18649 ;;      Temps:          0       0       0       0       0       0       0
 18650 ;;      Totals:         1       0       0       0       0       0       0
 18651 ;;Total ram usage:        1 bytes
 18652 ;; Hardware stack levels used:    1
 18653 ;; Hardware stack levels required when called:    2
 18654 ;; This function calls:
 18655 ;;		Nothing
 18656 ;; This function is called by:
 18657 ;;		_ECANInitialize
 18658 ;; This function uses a non-reentrant model
 18659 ;;
 18660                           
 18661                           	psect	text87
 18662  005470                     __ptext87:
 18663                           	opt stack 0
 18664  005470                     _ECANSetOperationMode:
 18665                           	opt stack 25
 18666                           
 18667                           ;incstack = 0
 18668                           ;incstack = 0
 18669                           ;ECANSetOperationMode@mode stored from wreg
 18670  005470  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18671                           
 18672                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18673  005474  0E1F               	movlw	31
 18674  005476  166F               	andwf	3951,f,c	;volatile
 18675                           
 18676                           ;ECAN.c: 1014: CANCON |= mode;
 18677  005478  500E               	movf	ECANSetOperationMode@mode,w,c
 18678  00547A  126F               	iorwf	3951,f,c	;volatile
 18679  00547C                     l8422:
 18680  00547C  506F               	movf	3951,w,c	;volatile
 18681  00547E  0BE0               	andlw	224
 18682  005480  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18683  005482  B4D8               	btfsc	status,2,c
 18684  005484  0012               	return	
 18685  005486  D7FA               	goto	l8422
 18686  005488                     __end_of_ECANSetOperationMode:
 18687                           	opt stack 0
 18688                           tblptru	equ	0xFF8
 18689                           tblptrh	equ	0xFF7
 18690                           tblptrl	equ	0xFF6
 18691                           tablat	equ	0xFF5
 18692                           prodh	equ	0xFF4
 18693                           prodl	equ	0xFF3
 18694                           intcon	equ	0xFF2
 18695                           postinc0	equ	0xFEE
 18696                           wreg	equ	0xFE8
 18697                           indf1	equ	0xFE7
 18698                           postdec1	equ	0xFE5
 18699                           fsr1h	equ	0xFE2
 18700                           fsr1l	equ	0xFE1
 18701                           indf2	equ	0xFDF
 18702                           postinc2	equ	0xFDE
 18703                           postdec2	equ	0xFDD
 18704                           plusw2	equ	0xFDB
 18705                           fsr2h	equ	0xFDA
 18706                           fsr2l	equ	0xFD9
 18707                           status	equ	0xFD8
 18708                           
 18709 ;; *************** function _OpenADC *****************
 18710 ;; Defined at:
 18711 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18712 ;; Parameters:    Size  Location     Type
 18713 ;;  config          1    wreg     unsigned char 
 18714 ;;  config2         1   13[COMRAM] unsigned char 
 18715 ;;  portconfig      1   14[COMRAM] unsigned char 
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;  config          1   17[COMRAM] unsigned char 
 18718 ;; Return value:  Size  Location     Type
 18719 ;;		None               void
 18720 ;; Registers used:
 18721 ;;		wreg, status,2, status,0
 18722 ;; Tracked objects:
 18723 ;;		On entry : F/1
 18724 ;;		On exit  : F/1
 18725 ;;		Unchanged: F/0
 18726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18727 ;;      Params:         2       0       0       0       0       0       0
 18728 ;;      Locals:         1       0       0       0       0       0       0
 18729 ;;      Temps:          2       0       0       0       0       0       0
 18730 ;;      Totals:         5       0       0       0       0       0       0
 18731 ;;Total ram usage:        5 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; Hardware stack levels required when called:    2
 18734 ;; This function calls:
 18735 ;;		Nothing
 18736 ;; This function is called by:
 18737 ;;		_init
 18738 ;; This function uses a non-reentrant model
 18739 ;;
 18740                           
 18741                           	psect	text88
 18742  004C76                     __ptext88:
 18743                           	opt stack 0
 18744  004C76                     _OpenADC:
 18745                           	opt stack 26
 18746                           
 18747                           ;incstack = 0
 18748                           ;incstack = 0
 18749                           ;OpenADC@config stored from wreg
 18750  004C76  CFE8 F012          	movff	wreg,OpenADC@config
 18751                           
 18752                           ; BSR set to: 1
 18753  004C7A  6AC2               	clrf	4034,c	;volatile
 18754  004C7C  6AC0               	clrf	4032,c	;volatile
 18755                           
 18756                           ; BSR set to: 1
 18757  004C7E  90D8               	bcf	status,0,c
 18758  004C80  300E               	rrcf	OpenADC@config2,w,c
 18759  004C82  0B3C               	andlw	60
 18760  004C84  6EC2               	movwf	4034,c	;volatile
 18761  004C86  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18762  004C8A  3A10               	swapf	??_OpenADC,f,c
 18763  004C8C  0EF0               	movlw	240
 18764  004C8E  1610               	andwf	??_OpenADC,f,c
 18765  004C90  0E30               	movlw	48
 18766  004C92  1610               	andwf	??_OpenADC,f,c
 18767  004C94  500F               	movf	OpenADC@portconfig,w,c
 18768  004C96  0B0F               	andlw	15
 18769  004C98  1010               	iorwf	??_OpenADC,w,c
 18770  004C9A  6EC1               	movwf	4033,c	;volatile
 18771  004C9C  C012  F010         	movff	OpenADC@config,??_OpenADC
 18772  004CA0  90D8               	bcf	status,0,c
 18773  004CA2  3610               	rlcf	??_OpenADC,f,c
 18774  004CA4  90D8               	bcf	status,0,c
 18775  004CA6  3610               	rlcf	??_OpenADC,f,c
 18776  004CA8  0E38               	movlw	56
 18777  004CAA  1610               	andwf	??_OpenADC,f,c
 18778  004CAC  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18779  004CB0  3A11               	swapf	??_OpenADC+1,f,c
 18780  004CB2  0E0F               	movlw	15
 18781  004CB4  1611               	andwf	??_OpenADC+1,f,c
 18782  004CB6  0E07               	movlw	7
 18783  004CB8  1611               	andwf	??_OpenADC+1,f,c
 18784  004CBA  5012               	movf	OpenADC@config,w,c
 18785  004CBC  0B80               	andlw	128
 18786  004CBE  1011               	iorwf	??_OpenADC+1,w,c
 18787  004CC0  1010               	iorwf	??_OpenADC,w,c
 18788  004CC2  6EC0               	movwf	4032,c	;volatile
 18789                           
 18790                           ; BSR set to: 1
 18791  004CC4  AE0E               	btfss	OpenADC@config2,7,c
 18792  004CC6  D003               	goto	l1303
 18793                           
 18794                           ; BSR set to: 1
 18795  004CC8  9C9E               	bcf	3998,6,c	;volatile
 18796  004CCA  8C9D               	bsf	3997,6,c	;volatile
 18797  004CCC  8CF2               	bsf	intcon,6,c	;volatile
 18798  004CCE                     l1303:
 18799                           
 18800                           ; BSR set to: 1
 18801  004CCE  80C2               	bsf	4034,0,c	;volatile
 18802                           
 18803                           ; BSR set to: 1
 18804  004CD0  0012               	return	
 18805  004CD2                     __end_of_OpenADC:
 18806                           	opt stack 0
 18807                           tblptru	equ	0xFF8
 18808                           tblptrh	equ	0xFF7
 18809                           tblptrl	equ	0xFF6
 18810                           tablat	equ	0xFF5
 18811                           prodh	equ	0xFF4
 18812                           prodl	equ	0xFF3
 18813                           intcon	equ	0xFF2
 18814                           postinc0	equ	0xFEE
 18815                           wreg	equ	0xFE8
 18816                           indf1	equ	0xFE7
 18817                           postdec1	equ	0xFE5
 18818                           fsr1h	equ	0xFE2
 18819                           fsr1l	equ	0xFE1
 18820                           indf2	equ	0xFDF
 18821                           postinc2	equ	0xFDE
 18822                           postdec2	equ	0xFDD
 18823                           plusw2	equ	0xFDB
 18824                           fsr2h	equ	0xFDA
 18825                           fsr2l	equ	0xFD9
 18826                           status	equ	0xFD8
 18827                           
 18828 ;; *************** function _OpenTimer0 *****************
 18829 ;; Defined at:
 18830 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18831 ;; Parameters:    Size  Location     Type
 18832 ;;  config          1    wreg     unsigned char 
 18833 ;; Auto vars:     Size  Location     Type
 18834 ;;  config          1   13[COMRAM] unsigned char 
 18835 ;; Return value:  Size  Location     Type
 18836 ;;		None               void
 18837 ;; Registers used:
 18838 ;;		wreg, status,2, status,0
 18839 ;; Tracked objects:
 18840 ;;		On entry : F/1
 18841 ;;		On exit  : F/1
 18842 ;;		Unchanged: F/0
 18843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18844 ;;      Params:         0       0       0       0       0       0       0
 18845 ;;      Locals:         1       0       0       0       0       0       0
 18846 ;;      Temps:          0       0       0       0       0       0       0
 18847 ;;      Totals:         1       0       0       0       0       0       0
 18848 ;;Total ram usage:        1 bytes
 18849 ;; Hardware stack levels used:    1
 18850 ;; Hardware stack levels required when called:    2
 18851 ;; This function calls:
 18852 ;;		Nothing
 18853 ;; This function is called by:
 18854 ;;		_init
 18855 ;; This function uses a non-reentrant model
 18856 ;;
 18857                           
 18858                           	psect	text89
 18859  0053BE                     __ptext89:
 18860                           	opt stack 0
 18861  0053BE                     _OpenTimer0:
 18862                           	opt stack 26
 18863                           
 18864                           ; BSR set to: 1
 18865                           ;incstack = 0
 18866                           ;incstack = 0
 18867                           ;OpenTimer0@config stored from wreg
 18868  0053BE  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18869                           
 18870                           ; BSR set to: 1
 18871  0053C2  500E               	movf	OpenTimer0@config,w,c
 18872  0053C4  0B7F               	andlw	127
 18873  0053C6  6ED5               	movwf	4053,c	;volatile
 18874                           
 18875                           ; BSR set to: 1
 18876  0053C8  6AD7               	clrf	4055,c	;volatile
 18877                           
 18878                           ; BSR set to: 1
 18879  0053CA  6AD6               	clrf	4054,c	;volatile
 18880                           
 18881                           ; BSR set to: 1
 18882  0053CC  94F2               	bcf	intcon,2,c	;volatile
 18883                           
 18884                           ; BSR set to: 1
 18885  0053CE  AE0E               	btfss	OpenTimer0@config,7,c
 18886  0053D0  D002               	goto	l1317
 18887                           
 18888                           ; BSR set to: 1
 18889  0053D2  8AF2               	bsf	intcon,5,c	;volatile
 18890  0053D4  D001               	goto	l1318
 18891  0053D6                     l1317:
 18892                           
 18893                           ; BSR set to: 1
 18894  0053D6  9AF2               	bcf	intcon,5,c	;volatile
 18895  0053D8                     l1318:
 18896                           
 18897                           ; BSR set to: 1
 18898  0053D8  8ED5               	bsf	4053,7,c	;volatile
 18899                           
 18900                           ; BSR set to: 1
 18901  0053DA  0012               	return	
 18902  0053DC                     __end_of_OpenTimer0:
 18903                           	opt stack 0
 18904                           tblptru	equ	0xFF8
 18905                           tblptrh	equ	0xFF7
 18906                           tblptrl	equ	0xFF6
 18907                           tablat	equ	0xFF5
 18908                           prodh	equ	0xFF4
 18909                           prodl	equ	0xFF3
 18910                           intcon	equ	0xFF2
 18911                           postinc0	equ	0xFEE
 18912                           wreg	equ	0xFE8
 18913                           indf1	equ	0xFE7
 18914                           postdec1	equ	0xFE5
 18915                           fsr1h	equ	0xFE2
 18916                           fsr1l	equ	0xFE1
 18917                           indf2	equ	0xFDF
 18918                           postinc2	equ	0xFDE
 18919                           postdec2	equ	0xFDD
 18920                           plusw2	equ	0xFDB
 18921                           fsr2h	equ	0xFDA
 18922                           fsr2l	equ	0xFD9
 18923                           status	equ	0xFD8
 18924                           
 18925 ;; *************** function _init_app_ram *****************
 18926 ;; Defined at:
 18927 ;;		line 987 in file "../main.c"
 18928 ;; Parameters:    Size  Location     Type
 18929 ;;		None
 18930 ;; Auto vars:     Size  Location     Type
 18931 ;;  i               1   32[COMRAM] unsigned char 
 18932 ;; Return value:  Size  Location     Type
 18933 ;;		None               void
 18934 ;; Registers used:
 18935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18936 ;; Tracked objects:
 18937 ;;		On entry : 0/0
 18938 ;;		On exit  : F/1
 18939 ;;		Unchanged: 0/0
 18940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18941 ;;      Params:         0       0       0       0       0       0       0
 18942 ;;      Locals:         1       0       0       0       0       0       0
 18943 ;;      Temps:          0       0       0       0       0       0       0
 18944 ;;      Totals:         1       0       0       0       0       0       0
 18945 ;;Total ram usage:        1 bytes
 18946 ;; Hardware stack levels used:    1
 18947 ;; Hardware stack levels required when called:    4
 18948 ;; This function calls:
 18949 ;;		_writeCoeffs2Ram
 18950 ;; This function is called by:
 18951 ;;		_init
 18952 ;;		_vscp_restoreDefaults
 18953 ;; This function uses a non-reentrant model
 18954 ;;
 18955                           
 18956                           	psect	text90
 18957  004FB4                     __ptext90:
 18958                           	opt stack 0
 18959  004FB4                     _init_app_ram:
 18960                           	opt stack 22
 18961                           
 18962                           ;main.c: 988: char i;
 18963                           ;main.c: 990: measurement_clock = 0;
 18964                           
 18965                           ; BSR set to: 1
 18966                           ;incstack = 0
 18967                           ;incstack = 0
 18968  004FB4  0100               	movlb	0	; () banked
 18969  004FB6  6B6C               	clrf	_measurement_clock& (0+255),b	;volatile
 18970  004FB8  6B6D               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 18971  004FBA  6B6E               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 18972  004FBC  6B6F               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 18973                           
 18974                           ;main.c: 991: seconds = 0;
 18975  004FBE  6B80               	clrf	_seconds& (0+255),b
 18976                           
 18977                           ;main.c: 994: for (i = 0; i < 6; i++) {
 18978  004FC0  6A21               	clrf	init_app_ram@i,c
 18979  004FC2                     l10544:
 18980                           
 18981                           ; BSR set to: 0
 18982                           ;main.c: 995: seconds_temp[i] = 0;
 18983  004FC2  0E00               	movlw	low _seconds_temp
 18984  004FC4  2421               	addwf	init_app_ram@i,w,c
 18985  004FC6  6ED9               	movwf	fsr2l,c
 18986  004FC8  6ADA               	clrf	fsr2h,c
 18987  004FCA  0E01               	movlw	high _seconds_temp
 18988  004FCC  22DA               	addwfc	fsr2h,f,c
 18989  004FCE  6ADF               	clrf	indf2,c
 18990                           
 18991                           ; BSR set to: 1
 18992                           ;main.c: 996: current_temp[i] = 0;
 18993  004FD0  5021               	movf	init_app_ram@i,w,c
 18994  004FD2  0D02               	mullw	2
 18995  004FD4  50F3               	movf	prodl,w,c
 18996  004FD6  0100               	movlb	0	; () banked
 18997  004FD8  0F60               	addlw	low _current_temp
 18998  004FDA  6ED9               	movwf	fsr2l,c
 18999  004FDC  6ADA               	clrf	fsr2h,c
 19000  004FDE  6ADE               	clrf	postinc2,c
 19001  004FE0  6ADD               	clrf	postdec2,c
 19002                           
 19003                           ; BSR set to: 0
 19004  004FE2  2A21               	incf	init_app_ram@i,f,c
 19005                           
 19006                           ; BSR set to: 0
 19007  004FE4  0E05               	movlw	5
 19008  004FE6  6421               	cpfsgt	init_app_ram@i,c
 19009  004FE8  D7EC               	goto	l10544
 19010                           
 19011                           ; BSR set to: 0
 19012                           ;main.c: 997: }
 19013                           ;main.c: 1000: adc_conversion_flags = 0;
 19014  004FEA  6B7D               	clrf	_adc_conversion_flags& (0+255),b
 19015                           
 19016                           ;main.c: 1003: adc_series_counter = 0;
 19017  004FEC  6A49               	clrf	_adc_series_counter,c
 19018                           
 19019                           ;main.c: 1006: low_alarm = 0;
 19020  004FEE  6B7F               	clrf	_low_alarm& (0+255),b
 19021                           
 19022                           ;main.c: 1009: high_alarm = 0;
 19023  004FF0  6B7E               	clrf	_high_alarm& (0+255),b
 19024                           
 19025                           ; BSR set to: 0
 19026                           ;main.c: 1012: writeCoeffs2Ram();
 19027  004FF2  EFE3  F023         	goto	_writeCoeffs2Ram	;wreg free
 19028  004FF6                     __end_of_init_app_ram:
 19029                           	opt stack 0
 19030                           tblptru	equ	0xFF8
 19031                           tblptrh	equ	0xFF7
 19032                           tblptrl	equ	0xFF6
 19033                           tablat	equ	0xFF5
 19034                           prodh	equ	0xFF4
 19035                           prodl	equ	0xFF3
 19036                           intcon	equ	0xFF2
 19037                           postinc0	equ	0xFEE
 19038                           wreg	equ	0xFE8
 19039                           indf1	equ	0xFE7
 19040                           postdec1	equ	0xFE5
 19041                           fsr1h	equ	0xFE2
 19042                           fsr1l	equ	0xFE1
 19043                           indf2	equ	0xFDF
 19044                           postinc2	equ	0xFDE
 19045                           postdec2	equ	0xFDD
 19046                           plusw2	equ	0xFDB
 19047                           fsr2h	equ	0xFDA
 19048                           fsr2l	equ	0xFD9
 19049                           status	equ	0xFD8
 19050                           
 19051 ;; *************** function _writeCoeffs2Ram *****************
 19052 ;; Defined at:
 19053 ;;		line 969 in file "../main.c"
 19054 ;; Parameters:    Size  Location     Type
 19055 ;;		None
 19056 ;; Auto vars:     Size  Location     Type
 19057 ;;  c               3   25[COMRAM] unsigned char [3]
 19058 ;;  j               2   30[COMRAM] int 
 19059 ;;  i               2   28[COMRAM] int 
 19060 ;; Return value:  Size  Location     Type
 19061 ;;		None               void
 19062 ;; Registers used:
 19063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19064 ;; Tracked objects:
 19065 ;;		On entry : 0/0
 19066 ;;		On exit  : F/1
 19067 ;;		Unchanged: 0/0
 19068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19069 ;;      Params:         0       0       0       0       0       0       0
 19070 ;;      Locals:         7       0       0       0       0       0       0
 19071 ;;      Temps:          2       0       0       0       0       0       0
 19072 ;;      Totals:         9       0       0       0       0       0       0
 19073 ;;Total ram usage:        9 bytes
 19074 ;; Hardware stack levels used:    1
 19075 ;; Hardware stack levels required when called:    3
 19076 ;; This function calls:
 19077 ;;		_readEEPROM
 19078 ;;		___wmul
 19079 ;; This function is called by:
 19080 ;;		_init_app_ram
 19081 ;;		_vscp_writeAppReg
 19082 ;; This function uses a non-reentrant model
 19083 ;;
 19084                           
 19085                           	psect	text91
 19086  0047C6                     __ptext91:
 19087                           	opt stack 0
 19088  0047C6                     _writeCoeffs2Ram:
 19089                           	opt stack 22
 19090                           
 19091                           ;main.c: 970: int i, j;
 19092                           ;main.c: 971: uint8_t c[3];
 19093                           ;main.c: 973: for (i = 0; i < 6; i++) {
 19094                           
 19095                           ; BSR set to: 1
 19096                           ;incstack = 0
 19097                           ;incstack = 0
 19098  0047C6  6A1D               	clrf	writeCoeffs2Ram@i,c
 19099  0047C8  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 19100  0047CA                     l10560:
 19101                           
 19102                           ;main.c: 974: for (j = 2; j > 0; j--) {
 19103  0047CA  6A20               	clrf	writeCoeffs2Ram@j+1,c
 19104  0047CC  0E02               	movlw	2
 19105  0047CE  6E1F               	movwf	writeCoeffs2Ram@j,c
 19106  0047D0                     l10566:
 19107                           
 19108                           ;main.c: 976: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 19109  0047D0  501F               	movf	writeCoeffs2Ram@j,w,c
 19110  0047D2  0802               	sublw	2
 19111  0047D4  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 19112  0047D6  5018               	movf	??_writeCoeffs2Ram,w,c
 19113  0047D8  0F1A               	addlw	low writeCoeffs2Ram@c
 19114  0047DA  6ED9               	movwf	fsr2l,c
 19115  0047DC  6ADA               	clrf	fsr2h,c
 19116  0047DE  C01D  F012         	movff	writeCoeffs2Ram@i,?___wmul
 19117  0047E2  C01E  F013         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 19118  0047E6  6A15               	clrf	?___wmul+3,c
 19119  0047E8  0E03               	movlw	3
 19120  0047EA  6E14               	movwf	?___wmul+2,c
 19121  0047EC  EC8E  F028         	call	___wmul	;wreg free
 19122  0047F0  501F               	movf	writeCoeffs2Ram@j,w,c
 19123  0047F2  2612               	addwf	?___wmul,f,c
 19124  0047F4  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19125  0047F6  2213               	addwfc	?___wmul+1,f,c
 19126  0047F8  0EAA               	movlw	170
 19127  0047FA  2412               	addwf	?___wmul,w,c
 19128  0047FC  6E0E               	movwf	?_readEEPROM,c
 19129  0047FE  0E00               	movlw	0
 19130  004800  2013               	addwfc	?___wmul+1,w,c
 19131  004802  6E0F               	movwf	?_readEEPROM+1,c
 19132  004804  EC62  F02A         	call	_readEEPROM	;wreg free
 19133  004808  6EDF               	movwf	indf2,c
 19134  00480A  061F               	decf	writeCoeffs2Ram@j,f,c
 19135  00480C  A0D8               	btfss	status,0,c
 19136  00480E  0620               	decf	writeCoeffs2Ram@j+1,f,c
 19137  004810  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19138  004812  0A80               	xorlw	128
 19139  004814  0F80               	addlw	-128
 19140  004816  0E01               	movlw	1
 19141  004818  B4D8               	btfsc	status,2,c
 19142  00481A  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 19143  00481C  E2D9               	bc	l10566
 19144                           
 19145                           ;main.c: 977: }
 19146                           ;main.c: 978: sh_coefficients[i] = *((double*) c);
 19147  00481E  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 19148  004822  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 19149  004826  90D8               	bcf	status,0,c
 19150  004828  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19151  00482A  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19152  00482C  90D8               	bcf	status,0,c
 19153  00482E  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19154  004830  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19155  004832  0101               	movlb	1	; () banked
 19156  004834  0E06               	movlw	low _sh_coefficients
 19157  004836  2418               	addwf	??_writeCoeffs2Ram,w,c
 19158  004838  6ED9               	movwf	fsr2l,c
 19159  00483A  0E01               	movlw	high _sh_coefficients
 19160  00483C  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 19161  00483E  6EDA               	movwf	fsr2h,c
 19162  004840  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 19163  004844  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 19164  004848  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 19165  00484C  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 19166                           
 19167                           ; BSR set to: 1
 19168  004850  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 19169  004852  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 19170                           
 19171                           ; BSR set to: 1
 19172  004854  501E               	movf	writeCoeffs2Ram@i+1,w,c
 19173  004856  0A80               	xorlw	128
 19174  004858  0F80               	addlw	-128
 19175  00485A  0E06               	movlw	6
 19176  00485C  B4D8               	btfsc	status,2,c
 19177  00485E  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 19178  004860  B0D8               	btfsc	status,0,c
 19179                           
 19180                           ; BSR set to: 1
 19181  004862  0012               	return	
 19182  004864  D7B2               	goto	l10560
 19183  004866                     __end_of_writeCoeffs2Ram:
 19184                           	opt stack 0
 19185                           tblptru	equ	0xFF8
 19186                           tblptrh	equ	0xFF7
 19187                           tblptrl	equ	0xFF6
 19188                           tablat	equ	0xFF5
 19189                           prodh	equ	0xFF4
 19190                           prodl	equ	0xFF3
 19191                           intcon	equ	0xFF2
 19192                           postinc0	equ	0xFEE
 19193                           wreg	equ	0xFE8
 19194                           indf1	equ	0xFE7
 19195                           postdec1	equ	0xFE5
 19196                           fsr1h	equ	0xFE2
 19197                           fsr1l	equ	0xFE1
 19198                           indf2	equ	0xFDF
 19199                           postinc2	equ	0xFDE
 19200                           postdec2	equ	0xFDD
 19201                           plusw2	equ	0xFDB
 19202                           fsr2h	equ	0xFDA
 19203                           fsr2l	equ	0xFD9
 19204                           status	equ	0xFD8
 19205                           
 19206 ;; *************** function ___wmul *****************
 19207 ;; Defined at:
 19208 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 19209 ;; Parameters:    Size  Location     Type
 19210 ;;  multiplier      2   17[COMRAM] unsigned int 
 19211 ;;  multiplicand    2   19[COMRAM] unsigned int 
 19212 ;; Auto vars:     Size  Location     Type
 19213 ;;  product         2   21[COMRAM] unsigned int 
 19214 ;; Return value:  Size  Location     Type
 19215 ;;                  2   17[COMRAM] unsigned int 
 19216 ;; Registers used:
 19217 ;;		wreg, status,2, status,0, prodl, prodh
 19218 ;; Tracked objects:
 19219 ;;		On entry : 0/1
 19220 ;;		On exit  : 0/0
 19221 ;;		Unchanged: 0/0
 19222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19223 ;;      Params:         4       0       0       0       0       0       0
 19224 ;;      Locals:         2       0       0       0       0       0       0
 19225 ;;      Temps:          0       0       0       0       0       0       0
 19226 ;;      Totals:         6       0       0       0       0       0       0
 19227 ;;Total ram usage:        6 bytes
 19228 ;; Hardware stack levels used:    1
 19229 ;; Hardware stack levels required when called:    2
 19230 ;; This function calls:
 19231 ;;		Nothing
 19232 ;; This function is called by:
 19233 ;;		_doWork
 19234 ;;		_writeCoeffs2Ram
 19235 ;; This function uses a non-reentrant model
 19236 ;;
 19237                           
 19238                           	psect	text92
 19239  00511C                     __ptext92:
 19240                           	opt stack 0
 19241  00511C                     ___wmul:
 19242                           	opt stack 26
 19243                           
 19244                           ; BSR set to: 1
 19245                           ;incstack = 0
 19246                           ;incstack = 0
 19247  00511C  5012               	movf	___wmul@multiplier,w,c
 19248  00511E  0214               	mulwf	___wmul@multiplicand,c
 19249  005120  CFF3 F016          	movff	prodl,___wmul@product
 19250  005124  CFF4 F017          	movff	prodh,___wmul@product+1
 19251  005128  5012               	movf	___wmul@multiplier,w,c
 19252  00512A  0215               	mulwf	___wmul@multiplicand+1,c
 19253  00512C  D808               	call	PL68	;call to abstracted procedure
 19254  00512E  5013               	movf	___wmul@multiplier+1,w,c
 19255  005130  0214               	mulwf	___wmul@multiplicand,c
 19256  005132  D805               	call	PL68	;call to abstracted procedure
 19257  005134  C016  F012         	movff	___wmul@product,?___wmul
 19258  005138  C017  F013         	movff	___wmul@product+1,?___wmul+1
 19259  00513C  0012               	return	
 19260  00513E                     __end_of___wmul:
 19261                           	opt stack 0
 19262  00513E                     PL68:
 19263                           	opt stack 26
 19264  00513E  CFF3 FFF4          	movff	prodl,prodh
 19265  005142  6AF3               	clrf	prodl,c
 19266  005144  50F3               	movf	prodl,w,c
 19267  005146  2616               	addwf	___wmul@product,f,c
 19268  005148  50F4               	movf	prodh,w,c
 19269  00514A  2217               	addwfc	___wmul@product+1,f,c
 19270  00514C  0012               	return	
 19271  00514E                     __end_ofPL68:
 19272                           	opt stack 0
 19273                           tblptru	equ	0xFF8
 19274                           tblptrh	equ	0xFF7
 19275                           tblptrl	equ	0xFF6
 19276                           tablat	equ	0xFF5
 19277                           prodh	equ	0xFF4
 19278                           prodl	equ	0xFF3
 19279                           intcon	equ	0xFF2
 19280                           postinc0	equ	0xFEE
 19281                           wreg	equ	0xFE8
 19282                           indf1	equ	0xFE7
 19283                           postdec1	equ	0xFE5
 19284                           fsr1h	equ	0xFE2
 19285                           fsr1l	equ	0xFE1
 19286                           indf2	equ	0xFDF
 19287                           postinc2	equ	0xFDE
 19288                           postdec2	equ	0xFDD
 19289                           plusw2	equ	0xFDB
 19290                           fsr2h	equ	0xFDA
 19291                           fsr2l	equ	0xFD9
 19292                           status	equ	0xFD8
 19293                           
 19294 ;; *************** function _ConvertADC *****************
 19295 ;; Defined at:
 19296 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19297 ;; Parameters:    Size  Location     Type
 19298 ;;		None
 19299 ;; Auto vars:     Size  Location     Type
 19300 ;;		None
 19301 ;; Return value:  Size  Location     Type
 19302 ;;		None               void
 19303 ;; Registers used:
 19304 ;;		None
 19305 ;; Tracked objects:
 19306 ;;		On entry : 1/1
 19307 ;;		On exit  : 1/1
 19308 ;;		Unchanged: 1/0
 19309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19310 ;;      Params:         0       0       0       0       0       0       0
 19311 ;;      Locals:         0       0       0       0       0       0       0
 19312 ;;      Temps:          0       0       0       0       0       0       0
 19313 ;;      Totals:         0       0       0       0       0       0       0
 19314 ;;Total ram usage:        0 bytes
 19315 ;; Hardware stack levels used:    1
 19316 ;; Hardware stack levels required when called:    2
 19317 ;; This function calls:
 19318 ;;		Nothing
 19319 ;; This function is called by:
 19320 ;;		_init
 19321 ;; This function uses a non-reentrant model
 19322 ;;
 19323                           
 19324                           	psect	text93
 19325  00557A                     __ptext93:
 19326                           	opt stack 0
 19327  00557A                     _ConvertADC:
 19328                           	opt stack 26
 19329                           
 19330                           ;incstack = 0
 19331                           ;incstack = 0
 19332  00557A  82C2               	bsf	4034,1,c	;volatile
 19333  00557C  0012               	return	
 19334  00557E                     __end_of_ConvertADC:
 19335                           	opt stack 0
 19336                           tblptru	equ	0xFF8
 19337                           tblptrh	equ	0xFF7
 19338                           tblptrl	equ	0xFF6
 19339                           tablat	equ	0xFF5
 19340                           prodh	equ	0xFF4
 19341                           prodl	equ	0xFF3
 19342                           intcon	equ	0xFF2
 19343                           postinc0	equ	0xFEE
 19344                           wreg	equ	0xFE8
 19345                           indf1	equ	0xFE7
 19346                           postdec1	equ	0xFE5
 19347                           fsr1h	equ	0xFE2
 19348                           fsr1l	equ	0xFE1
 19349                           indf2	equ	0xFDF
 19350                           postinc2	equ	0xFDE
 19351                           postdec2	equ	0xFDD
 19352                           plusw2	equ	0xFDB
 19353                           fsr2h	equ	0xFDA
 19354                           fsr2l	equ	0xFD9
 19355                           status	equ	0xFD8
 19356                           
 19357 ;; *************** function _WriteTimer0 *****************
 19358 ;; Defined at:
 19359 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19360 ;; Parameters:    Size  Location     Type
 19361 ;;  timer0          2   13[COMRAM] unsigned int 
 19362 ;; Auto vars:     Size  Location     Type
 19363 ;;  timer           2   15[COMRAM] struct Timers
 19364 ;; Return value:  Size  Location     Type
 19365 ;;		None               void
 19366 ;; Registers used:
 19367 ;;		None
 19368 ;; Tracked objects:
 19369 ;;		On entry : F/1
 19370 ;;		On exit  : F/1
 19371 ;;		Unchanged: F/0
 19372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19373 ;;      Params:         2       0       0       0       0       0       0
 19374 ;;      Locals:         2       0       0       0       0       0       0
 19375 ;;      Temps:          0       0       0       0       0       0       0
 19376 ;;      Totals:         4       0       0       0       0       0       0
 19377 ;;Total ram usage:        4 bytes
 19378 ;; Hardware stack levels used:    1
 19379 ;; Hardware stack levels required when called:    2
 19380 ;; This function calls:
 19381 ;;		Nothing
 19382 ;; This function is called by:
 19383 ;;		_init
 19384 ;; This function uses a non-reentrant model
 19385 ;;
 19386                           
 19387                           	psect	text94
 19388  00550E                     __ptext94:
 19389                           	opt stack 0
 19390  00550E                     _WriteTimer0:
 19391                           	opt stack 26
 19392                           
 19393                           ; BSR set to: 1
 19394                           
 19395                           ;incstack = 0
 19396                           ;incstack = 0
 19397  00550E  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19398  005512  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19399  005516  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19400  00551A  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19401                           
 19402                           ; BSR set to: 1
 19403  00551E  0012               	return	
 19404  005520                     __end_of_WriteTimer0:
 19405                           	opt stack 0
 19406                           tblptru	equ	0xFF8
 19407                           tblptrh	equ	0xFF7
 19408                           tblptrl	equ	0xFF6
 19409                           tablat	equ	0xFF5
 19410                           prodh	equ	0xFF4
 19411                           prodl	equ	0xFF3
 19412                           intcon	equ	0xFF2
 19413                           postinc0	equ	0xFEE
 19414                           wreg	equ	0xFE8
 19415                           indf1	equ	0xFE7
 19416                           postdec1	equ	0xFE5
 19417                           fsr1h	equ	0xFE2
 19418                           fsr1l	equ	0xFE1
 19419                           indf2	equ	0xFDF
 19420                           postinc2	equ	0xFDE
 19421                           postdec2	equ	0xFDD
 19422                           plusw2	equ	0xFDB
 19423                           fsr2h	equ	0xFDA
 19424                           fsr2l	equ	0xFD9
 19425                           status	equ	0xFD8
 19426                           
 19427 ;; *************** function ___awtofl *****************
 19428 ;; Defined at:
 19429 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19430 ;; Parameters:    Size  Location     Type
 19431 ;;  c               2   23[COMRAM] int 
 19432 ;; Auto vars:     Size  Location     Type
 19433 ;;  f1              4    0        int 
 19434 ;;  sign            1   28[COMRAM] unsigned char 
 19435 ;; Return value:  Size  Location     Type
 19436 ;;                  4   23[COMRAM] unsigned char 
 19437 ;; Registers used:
 19438 ;;		wreg, status,2, status,0, cstack
 19439 ;; Tracked objects:
 19440 ;;		On entry : 0/0
 19441 ;;		On exit  : 0/0
 19442 ;;		Unchanged: 0/0
 19443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19444 ;;      Params:         4       0       0       0       0       0       0
 19445 ;;      Locals:         2       0       0       0       0       0       0
 19446 ;;      Temps:          0       0       0       0       0       0       0
 19447 ;;      Totals:         6       0       0       0       0       0       0
 19448 ;;Total ram usage:        6 bytes
 19449 ;; Hardware stack levels used:    1
 19450 ;; Hardware stack levels required when called:    3
 19451 ;; This function calls:
 19452 ;;		___flpack
 19453 ;; This function is called by:
 19454 ;;		_setEventData
 19455 ;;		_exp
 19456 ;;		_log
 19457 ;; This function uses a non-reentrant model
 19458 ;;
 19459                           
 19460                           	psect	text95
 19461  0050AC                     __ptext95:
 19462                           	opt stack 0
 19463  0050AC                     ___awtofl:
 19464                           	opt stack 24
 19465                           
 19466                           ; BSR set to: 1
 19467                           ;incstack = 0
 19468                           ;incstack = 0
 19469  0050AC  6A1D               	clrf	___awtofl@sign,c
 19470  0050AE  AE19               	btfss	___awtofl@c+1,7,c
 19471  0050B0  D005               	goto	l14376
 19472  0050B2  6C18               	negf	___awtofl@c,c
 19473  0050B4  1E19               	comf	___awtofl@c+1,f,c
 19474  0050B6  B0D8               	btfsc	status,0,c
 19475  0050B8  2A19               	incf	___awtofl@c+1,f,c
 19476  0050BA  2A1D               	incf	___awtofl@sign,f,c
 19477  0050BC                     l14376:
 19478  0050BC  C018  F00E         	movff	___awtofl@c,?___flpack
 19479  0050C0  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19480  0050C4  6A10               	clrf	?___flpack+2,c
 19481  0050C6  6A11               	clrf	?___flpack+3,c
 19482  0050C8  0E96               	movlw	150
 19483  0050CA  6E12               	movwf	?___flpack+4,c
 19484  0050CC  C01D  F013         	movff	___awtofl@sign,?___flpack+5
 19485  0050D0  ECD0  F021         	call	___flpack	;wreg free
 19486  0050D4  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19487  0050D8  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19488  0050DC  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19489  0050E0  C00E  F018         	movff	?___flpack,?___awtofl
 19490  0050E4  0012               	return	
 19491  0050E6                     __end_of___awtofl:
 19492                           	opt stack 0
 19493                           tblptru	equ	0xFF8
 19494                           tblptrh	equ	0xFF7
 19495                           tblptrl	equ	0xFF6
 19496                           tablat	equ	0xFF5
 19497                           prodh	equ	0xFF4
 19498                           prodl	equ	0xFF3
 19499                           intcon	equ	0xFF2
 19500                           postinc0	equ	0xFEE
 19501                           wreg	equ	0xFE8
 19502                           indf1	equ	0xFE7
 19503                           postdec1	equ	0xFE5
 19504                           fsr1h	equ	0xFE2
 19505                           fsr1l	equ	0xFE1
 19506                           indf2	equ	0xFDF
 19507                           postinc2	equ	0xFDE
 19508                           postdec2	equ	0xFDD
 19509                           plusw2	equ	0xFDB
 19510                           fsr2h	equ	0xFDA
 19511                           fsr2l	equ	0xFD9
 19512                           status	equ	0xFD8
 19513                           
 19514 ;; *************** function ___flmul *****************
 19515 ;; Defined at:
 19516 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19517 ;; Parameters:    Size  Location     Type
 19518 ;;  f1              4   29[COMRAM] unsigned char 
 19519 ;;  f2              4   33[COMRAM] unsigned char 
 19520 ;; Auto vars:     Size  Location     Type
 19521 ;;  f3_as_produc    4   45[COMRAM] unsigned long 
 19522 ;;  sign            1   50[COMRAM] unsigned char 
 19523 ;;  cntr            1   49[COMRAM] unsigned char 
 19524 ;;  exp             1   44[COMRAM] unsigned char 
 19525 ;; Return value:  Size  Location     Type
 19526 ;;                  4   29[COMRAM] unsigned char 
 19527 ;; Registers used:
 19528 ;;		wreg, status,2, status,0, cstack
 19529 ;; Tracked objects:
 19530 ;;		On entry : 0/1
 19531 ;;		On exit  : 0/0
 19532 ;;		Unchanged: 0/0
 19533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19534 ;;      Params:         8       0       0       0       0       0       0
 19535 ;;      Locals:        14       0       0       0       0       0       0
 19536 ;;      Temps:          0       0       0       0       0       0       0
 19537 ;;      Totals:        22       0       0       0       0       0       0
 19538 ;;Total ram usage:       22 bytes
 19539 ;; Hardware stack levels used:    1
 19540 ;; Hardware stack levels required when called:    3
 19541 ;; This function calls:
 19542 ;;		___flpack
 19543 ;; This function is called by:
 19544 ;;		_doWork
 19545 ;;		_Celsius2Fahrenheit
 19546 ;;		___asflmul
 19547 ;;		_log
 19548 ;;		_eval_poly
 19549 ;; This function uses a non-reentrant model
 19550 ;;
 19551                           
 19552                           	psect	text96
 19553  004166                     __ptext96:
 19554                           	opt stack 0
 19555  004166                     ___flmul:
 19556                           	opt stack 25
 19557                           
 19558                           ;incstack = 0
 19559                           ;incstack = 0
 19560  004166  3420               	rlcf	(___flmul@f1+2)& (0+255),w,c
 19561  004168  3421               	rlcf	(___flmul@f1+3)& (0+255),w,c
 19562  00416A  6E2D               	movwf	___flmul@exp,c
 19563  00416C  662D               	tstfsz	___flmul@exp& (0+255),c
 19564  00416E  D001               	goto	l14320
 19565  004170  D005               	goto	u13740
 19566  004172                     l14320:
 19567  004172  3424               	rlcf	(___flmul@f2+2)& (0+255),w,c
 19568  004174  3425               	rlcf	(___flmul@f2+3)& (0+255),w,c
 19569  004176  6E33               	movwf	___flmul@sign,c
 19570  004178  6633               	tstfsz	___flmul@sign& (0+255),c
 19571  00417A  D005               	goto	l14324
 19572  00417C                     u13740:
 19573  00417C  6A1E               	clrf	?___flmul,c
 19574  00417E  6A1F               	clrf	?___flmul+1,c
 19575  004180  6A20               	clrf	?___flmul+2,c
 19576  004182  6A21               	clrf	?___flmul+3,c
 19577  004184  D040               	goto	l1638
 19578  004186                     l14324:
 19579  004186  5033               	movf	___flmul@sign,w,c
 19580  004188  0F7B               	addlw	123
 19581  00418A  262D               	addwf	___flmul@exp,f,c
 19582  00418C  C021  F033         	movff	___flmul@f1+3,___flmul@sign
 19583  004190  5025               	movf	(___flmul@f2+3)& (0+255),w,c
 19584  004192  1A33               	xorwf	___flmul@sign,f,c
 19585  004194  0E80               	movlw	128
 19586  004196  1633               	andwf	___flmul@sign,f,c
 19587  004198  8E20               	bsf	___flmul@f1+2,7,c
 19588  00419A  8E24               	bsf	___flmul@f2+2,7,c
 19589  00419C  6A25               	clrf	___flmul@f2+3,c
 19590  00419E  6A2E               	clrf	___flmul@f3_as_product,c
 19591  0041A0  6A2F               	clrf	___flmul@f3_as_product+1,c
 19592  0041A2  6A30               	clrf	___flmul@f3_as_product+2,c
 19593  0041A4  6A31               	clrf	___flmul@f3_as_product+3,c
 19594  0041A6  0E07               	movlw	7
 19595  0041A8  6E32               	movwf	___flmul@cntr,c
 19596  0041AA                     l14336:
 19597  0041AA  A01E               	btfss	___flmul@f1,0,c
 19598  0041AC  D002               	goto	l14340
 19599  0041AE  5022               	movf	___flmul@f2,w,c
 19600  0041B0  D82B               	call	PL64	;call to abstracted procedure
 19601  0041B2                     l14340:
 19602  0041B2  D832               	call	PL74	;call to abstracted procedure
 19603  0041B4  3622               	rlcf	___flmul@f2,f,c
 19604  0041B6  3623               	rlcf	___flmul@f2+1,f,c
 19605  0041B8  3624               	rlcf	___flmul@f2+2,f,c
 19606  0041BA  3625               	rlcf	___flmul@f2+3,f,c
 19607  0041BC  2E32               	decfsz	___flmul@cntr,f,c
 19608  0041BE  D7F5               	goto	l14336
 19609  0041C0  0E11               	movlw	17
 19610  0041C2  6E32               	movwf	___flmul@cntr,c
 19611  0041C4                     l14348:
 19612  0041C4  A01E               	btfss	___flmul@f1,0,c
 19613  0041C6  D002               	goto	l14352
 19614  0041C8  5022               	movf	___flmul@f2,w,c
 19615  0041CA  D81E               	call	PL64	;call to abstracted procedure
 19616  0041CC                     l14352:
 19617  0041CC  D825               	call	PL74	;call to abstracted procedure
 19618  0041CE  3231               	rrcf	___flmul@f3_as_product+3,f,c
 19619  0041D0  3230               	rrcf	___flmul@f3_as_product+2,f,c
 19620  0041D2  322F               	rrcf	___flmul@f3_as_product+1,f,c
 19621  0041D4  322E               	rrcf	___flmul@f3_as_product,f,c
 19622  0041D6  2E32               	decfsz	___flmul@cntr,f,c
 19623  0041D8  D7F5               	goto	l14348
 19624  0041DA  C02E  F00E         	movff	___flmul@f3_as_product,?___flpack
 19625  0041DE  C02F  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19626  0041E2  C030  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19627  0041E6  C031  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19628  0041EA  C02D  F012         	movff	___flmul@exp,?___flpack+4
 19629  0041EE  C033  F013         	movff	___flmul@sign,?___flpack+5
 19630  0041F2  ECD0  F021         	call	___flpack	;wreg free
 19631  0041F6  C011  F021         	movff	?___flpack+3,?___flmul+3
 19632  0041FA  C010  F020         	movff	?___flpack+2,?___flmul+2
 19633  0041FE  C00F  F01F         	movff	?___flpack+1,?___flmul+1
 19634  004202  C00E  F01E         	movff	?___flpack,?___flmul
 19635  004206                     l1638:
 19636  004206  0012               	return	
 19637  004208                     __end_of___flmul:
 19638                           	opt stack 0
 19639  004208                     PL64:
 19640                           	opt stack 25
 19641  004208  262E               	addwf	___flmul@f3_as_product,f,c
 19642  00420A  5023               	movf	___flmul@f2+1,w,c
 19643  00420C  222F               	addwfc	___flmul@f3_as_product+1,f,c
 19644  00420E  5024               	movf	___flmul@f2+2,w,c
 19645  004210  2230               	addwfc	___flmul@f3_as_product+2,f,c
 19646  004212  5025               	movf	___flmul@f2+3,w,c
 19647  004214  2231               	addwfc	___flmul@f3_as_product+3,f,c
 19648  004216  0012               	return	
 19649  004218                     __end_ofPL64:
 19650                           	opt stack 0
 19651  004218                     PL74:
 19652                           	opt stack 25
 19653  004218  90D8               	bcf	status,0,c
 19654  00421A  3221               	rrcf	___flmul@f1+3,f,c
 19655  00421C  3220               	rrcf	___flmul@f1+2,f,c
 19656  00421E  321F               	rrcf	___flmul@f1+1,f,c
 19657  004220  321E               	rrcf	___flmul@f1,f,c
 19658  004222  90D8               	bcf	status,0,c
 19659  004224  0012               	return	
 19660  004226                     __end_ofPL74:
 19661                           	opt stack 0
 19662                           tblptru	equ	0xFF8
 19663                           tblptrh	equ	0xFF7
 19664                           tblptrl	equ	0xFF6
 19665                           tablat	equ	0xFF5
 19666                           prodh	equ	0xFF4
 19667                           prodl	equ	0xFF3
 19668                           intcon	equ	0xFF2
 19669                           postinc0	equ	0xFEE
 19670                           wreg	equ	0xFE8
 19671                           indf1	equ	0xFE7
 19672                           postdec1	equ	0xFE5
 19673                           fsr1h	equ	0xFE2
 19674                           fsr1l	equ	0xFE1
 19675                           indf2	equ	0xFDF
 19676                           postinc2	equ	0xFDE
 19677                           postdec2	equ	0xFDD
 19678                           plusw2	equ	0xFDB
 19679                           fsr2h	equ	0xFDA
 19680                           fsr2l	equ	0xFD9
 19681                           status	equ	0xFD8
 19682                           
 19683 ;; *************** function ___flpack *****************
 19684 ;; Defined at:
 19685 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19686 ;; Parameters:    Size  Location     Type
 19687 ;;  arg             4   13[COMRAM] unsigned long 
 19688 ;;  exp             1   17[COMRAM] unsigned char 
 19689 ;;  sign            1   18[COMRAM] unsigned char 
 19690 ;; Auto vars:     Size  Location     Type
 19691 ;;		None
 19692 ;; Return value:  Size  Location     Type
 19693 ;;                  4   13[COMRAM] unsigned char 
 19694 ;; Registers used:
 19695 ;;		wreg, status,2, status,0
 19696 ;; Tracked objects:
 19697 ;;		On entry : 0/0
 19698 ;;		On exit  : 0/0
 19699 ;;		Unchanged: 0/0
 19700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19701 ;;      Params:         6       0       0       0       0       0       0
 19702 ;;      Locals:         0       0       0       0       0       0       0
 19703 ;;      Temps:          4       0       0       0       0       0       0
 19704 ;;      Totals:        10       0       0       0       0       0       0
 19705 ;;Total ram usage:       10 bytes
 19706 ;; Hardware stack levels used:    1
 19707 ;; Hardware stack levels required when called:    2
 19708 ;; This function calls:
 19709 ;;		Nothing
 19710 ;; This function is called by:
 19711 ;;		___altofl
 19712 ;;		___awtofl
 19713 ;;		___fladd
 19714 ;;		___fldiv
 19715 ;;		___flmul
 19716 ;;		___lwtofl
 19717 ;; This function uses a non-reentrant model
 19718 ;;
 19719                           
 19720                           	psect	text97
 19721  0043A0                     __ptext97:
 19722                           	opt stack 0
 19723  0043A0                     ___flpack:
 19724                           	opt stack 25
 19725                           
 19726                           ;incstack = 0
 19727                           ;incstack = 0
 19728  0043A0  5012               	movf	___flpack@exp,w,c
 19729  0043A2  E005               	bz	l1553
 19730  0043A4  5011               	movf	___flpack@arg+3,w,c
 19731  0043A6  100E               	iorwf	___flpack@arg,w,c
 19732  0043A8  100F               	iorwf	___flpack@arg+1,w,c
 19733  0043AA  1010               	iorwf	___flpack@arg+2,w,c
 19734  0043AC  E107               	bnz	l14168
 19735  0043AE                     l1553:
 19736  0043AE  6A0E               	clrf	?___flpack,c
 19737  0043B0  6A0F               	clrf	?___flpack+1,c
 19738  0043B2  6A10               	clrf	?___flpack+2,c
 19739  0043B4  6A11               	clrf	?___flpack+3,c
 19740  0043B6  D04B               	goto	l1554
 19741  0043B8                     l14166:
 19742  0043B8  2A12               	incf	___flpack@exp,f,c
 19743  0043BA  D84A               	call	PL88	;call to abstracted procedure
 19744  0043BC                     l14168:
 19745  0043BC  6A14               	clrf	??___flpack& (0+255),c
 19746  0043BE  6A15               	clrf	(??___flpack+1)& (0+255),c
 19747  0043C0  6A16               	clrf	(??___flpack+2)& (0+255),c
 19748  0043C2  0EFE               	movlw	254
 19749  0043C4  1411               	andwf	___flpack@arg+3,w,c
 19750  0043C6  6E17               	movwf	(??___flpack+3)& (0+255),c
 19751  0043C8  5017               	movf	??___flpack+3,w,c
 19752  0043CA  1014               	iorwf	??___flpack,w,c
 19753  0043CC  1015               	iorwf	??___flpack+1,w,c
 19754  0043CE  1016               	iorwf	??___flpack+2,w,c
 19755  0043D0  E008               	bz	l1558
 19756  0043D2  D7F2               	goto	l14166
 19757  0043D4                     l14170:
 19758  0043D4  2A12               	incf	___flpack@exp,f,c
 19759  0043D6  2A0E               	incf	___flpack@arg,f,c
 19760  0043D8  0E00               	movlw	0
 19761  0043DA  220F               	addwfc	___flpack@arg+1,f,c
 19762  0043DC  2210               	addwfc	___flpack@arg+2,f,c
 19763  0043DE  2211               	addwfc	___flpack@arg+3,f,c
 19764  0043E0  D837               	call	PL88	;call to abstracted procedure
 19765  0043E2                     l1558:
 19766  0043E2  6A14               	clrf	??___flpack& (0+255),c
 19767  0043E4  6A15               	clrf	(??___flpack+1)& (0+255),c
 19768  0043E6  6A16               	clrf	(??___flpack+2)& (0+255),c
 19769  0043E8  5011               	movf	___flpack@arg+3,w,c
 19770  0043EA  6E17               	movwf	(??___flpack+3)& (0+255),c
 19771  0043EC  5017               	movf	??___flpack+3,w,c
 19772  0043EE  1014               	iorwf	??___flpack,w,c
 19773  0043F0  1015               	iorwf	??___flpack+1,w,c
 19774  0043F2  1016               	iorwf	??___flpack+2,w,c
 19775  0043F4  E007               	bz	l14178
 19776  0043F6  D7EE               	goto	l14170
 19777  0043F8                     l14176:
 19778  0043F8  0612               	decf	___flpack@exp,f,c
 19779  0043FA  90D8               	bcf	status,0,c
 19780  0043FC  360E               	rlcf	___flpack@arg,f,c
 19781  0043FE  360F               	rlcf	___flpack@arg+1,f,c
 19782  004400  3610               	rlcf	___flpack@arg+2,f,c
 19783  004402  3611               	rlcf	___flpack@arg+3,f,c
 19784  004404                     l14178:
 19785  004404  AE10               	btfss	___flpack@arg+2,7,c
 19786  004406  D7F8               	goto	l14176
 19787  004408  B012               	btfsc	___flpack@exp,0,c
 19788  00440A  D002               	goto	l1564
 19789  00440C  0E7F               	movlw	127
 19790  00440E  1610               	andwf	___flpack@arg+2,f,c
 19791  004410                     l1564:
 19792  004410  90D8               	bcf	status,0,c
 19793  004412  3212               	rrcf	___flpack@exp,f,c
 19794  004414  C012  F014         	movff	___flpack@exp,??___flpack
 19795  004418  6A15               	clrf	(??___flpack+1)& (0+255),c
 19796  00441A  6A16               	clrf	(??___flpack+2)& (0+255),c
 19797  00441C  6A17               	clrf	(??___flpack+3)& (0+255),c
 19798  00441E  C014  F017         	movff	??___flpack,??___flpack+3
 19799  004422  6A16               	clrf	??___flpack+2,c
 19800  004424  6A15               	clrf	??___flpack+1,c
 19801  004426  6A14               	clrf	??___flpack,c
 19802  004428  5014               	movf	??___flpack,w,c
 19803  00442A  120E               	iorwf	___flpack@arg,f,c
 19804  00442C  5015               	movf	??___flpack+1,w,c
 19805  00442E  120F               	iorwf	___flpack@arg+1,f,c
 19806  004430  5016               	movf	??___flpack+2,w,c
 19807  004432  1210               	iorwf	___flpack@arg+2,f,c
 19808  004434  5017               	movf	??___flpack+3,w,c
 19809  004436  1211               	iorwf	___flpack@arg+3,f,c
 19810  004438  5013               	movf	___flpack@sign,w,c
 19811  00443A  A4D8               	btfss	status,2,c
 19812  00443C  8E11               	bsf	___flpack@arg+3,7,c
 19813  00443E  C00E  F00E         	movff	___flpack@arg,?___flpack
 19814  004442  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19815  004446  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19816  00444A  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19817  00444E                     l1554:
 19818  00444E  0012               	return	
 19819  004450                     __end_of___flpack:
 19820                           	opt stack 0
 19821  004450                     PL88:
 19822                           	opt stack 25
 19823  004450  90D8               	bcf	status,0,c
 19824  004452  3211               	rrcf	___flpack@arg+3,f,c
 19825  004454  3210               	rrcf	___flpack@arg+2,f,c
 19826  004456  320F               	rrcf	___flpack@arg+1,f,c
 19827  004458  320E               	rrcf	___flpack@arg,f,c
 19828  00445A  0012               	return	
 19829  00445C                     __end_ofPL88:
 19830                           	opt stack 0
 19831                           tblptru	equ	0xFF8
 19832                           tblptrh	equ	0xFF7
 19833                           tblptrl	equ	0xFF6
 19834                           tablat	equ	0xFF5
 19835                           prodh	equ	0xFF4
 19836                           prodl	equ	0xFF3
 19837                           intcon	equ	0xFF2
 19838                           postinc0	equ	0xFEE
 19839                           wreg	equ	0xFE8
 19840                           indf1	equ	0xFE7
 19841                           postdec1	equ	0xFE5
 19842                           fsr1h	equ	0xFE2
 19843                           fsr1l	equ	0xFE1
 19844                           indf2	equ	0xFDF
 19845                           postinc2	equ	0xFDE
 19846                           postdec2	equ	0xFDD
 19847                           plusw2	equ	0xFDB
 19848                           fsr2h	equ	0xFDA
 19849                           fsr2l	equ	0xFD9
 19850                           status	equ	0xFD8
 19851                           
 19852 ;; *************** function _vscp_readAppReg *****************
 19853 ;; Defined at:
 19854 ;;		line 1279 in file "../main.c"
 19855 ;; Parameters:    Size  Location     Type
 19856 ;;  reg             1    wreg     unsigned char 
 19857 ;; Auto vars:     Size  Location     Type
 19858 ;;  reg             1   18[COMRAM] unsigned char 
 19859 ;;  pos             1   17[COMRAM] unsigned char 
 19860 ;;  rv              1   19[COMRAM] unsigned char 
 19861 ;; Return value:  Size  Location     Type
 19862 ;;                  1    wreg      unsigned char 
 19863 ;; Registers used:
 19864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19865 ;; Tracked objects:
 19866 ;;		On entry : F/0
 19867 ;;		On exit  : 0/0
 19868 ;;		Unchanged: 0/0
 19869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19870 ;;      Params:         0       0       0       0       0       0       0
 19871 ;;      Locals:         3       0       0       0       0       0       0
 19872 ;;      Temps:          0       0       0       0       0       0       0
 19873 ;;      Totals:         3       0       0       0       0       0       0
 19874 ;;Total ram usage:        3 bytes
 19875 ;; Hardware stack levels used:    1
 19876 ;; Hardware stack levels required when called:    3
 19877 ;; This function calls:
 19878 ;;		_readEEPROM
 19879 ;; This function is called by:
 19880 ;;		_vscp_readRegister
 19881 ;;		_vscp_handleProtocolEvent
 19882 ;; This function uses a non-reentrant model
 19883 ;;
 19884                           
 19885                           	psect	text98
 19886  001C1E                     __ptext98:
 19887                           	opt stack 0
 19888  001C1E                     _vscp_readAppReg:
 19889                           	opt stack 24
 19890                           
 19891                           ;incstack = 0
 19892                           ;incstack = 0
 19893                           ;vscp_readAppReg@reg stored from wreg
 19894  001C1E  CFE8 F013          	movff	wreg,vscp_readAppReg@reg
 19895                           
 19896                           ; BSR set to: 0
 19897                           ;main.c: 1280: uint8_t rv;
 19898                           ;main.c: 1285: if (0 == vscp_page_select) {
 19899  001C22  5047               	movf	_vscp_page_select+1,w,c
 19900  001C24  1046               	iorwf	_vscp_page_select,w,c
 19901  001C26  E101 D250          	bz	l10784
 19902  001C2A  D394               	goto	l10786
 19903  001C2C                     l10582:
 19904                           
 19905                           ; BSR set to: 0
 19906                           ;main.c: 1291: rv = readEEPROM( 0x41 );
 19907  001C2C  6A0F               	clrf	?_readEEPROM+1,c
 19908  001C2E  0E41               	movlw	65
 19909  001C30  6E0E               	movwf	?_readEEPROM,c
 19910  001C32  EC62  F02A         	call	_readEEPROM	;wreg free
 19911  001C36  D3BB               	goto	L53
 19912  001C38                     l10584:
 19913                           
 19914                           ; BSR set to: 0
 19915                           ;main.c: 1296: rv = readEEPROM( 0x42 );
 19916  001C38  6A0F               	clrf	?_readEEPROM+1,c
 19917  001C3A  0E42               	movlw	66
 19918  001C3C  6E0E               	movwf	?_readEEPROM,c
 19919  001C3E  EC62  F02A         	call	_readEEPROM	;wreg free
 19920  001C42  D3B5               	goto	L53
 19921  001C44                     l10586:
 19922                           
 19923                           ; BSR set to: 0
 19924                           ;main.c: 1301: rv = readEEPROM( 0x43 );
 19925  001C44  6A0F               	clrf	?_readEEPROM+1,c
 19926  001C46  0E43               	movlw	67
 19927  001C48  6E0E               	movwf	?_readEEPROM,c
 19928  001C4A  EC62  F02A         	call	_readEEPROM	;wreg free
 19929  001C4E  D3AF               	goto	L53
 19930  001C50                     l10588:
 19931                           
 19932                           ; BSR set to: 0
 19933                           ;main.c: 1306: rv = readEEPROM (0x44 );
 19934  001C50  6A0F               	clrf	?_readEEPROM+1,c
 19935  001C52  0E44               	movlw	68
 19936  001C54  6E0E               	movwf	?_readEEPROM,c
 19937  001C56  EC62  F02A         	call	_readEEPROM	;wreg free
 19938  001C5A  D3A9               	goto	L53
 19939  001C5C                     l10590:
 19940                           
 19941                           ; BSR set to: 0
 19942                           ;main.c: 1311: rv = readEEPROM( 0x45 );
 19943  001C5C  6A0F               	clrf	?_readEEPROM+1,c
 19944  001C5E  0E45               	movlw	69
 19945  001C60  6E0E               	movwf	?_readEEPROM,c
 19946  001C62  EC62  F02A         	call	_readEEPROM	;wreg free
 19947  001C66  D3A3               	goto	L53
 19948  001C68                     l10592:
 19949                           
 19950                           ; BSR set to: 0
 19951                           ;main.c: 1316: rv = readEEPROM( 0x46 );
 19952  001C68  6A0F               	clrf	?_readEEPROM+1,c
 19953  001C6A  0E46               	movlw	70
 19954  001C6C  6E0E               	movwf	?_readEEPROM,c
 19955  001C6E  EC62  F02A         	call	_readEEPROM	;wreg free
 19956  001C72  D39D               	goto	L53
 19957  001C74                     l10594:
 19958                           
 19959                           ; BSR set to: 0
 19960                           ;main.c: 1321: rv = readEEPROM( 0x47 );
 19961  001C74  6A0F               	clrf	?_readEEPROM+1,c
 19962  001C76  0E47               	movlw	71
 19963  001C78  6E0E               	movwf	?_readEEPROM,c
 19964  001C7A  EC62  F02A         	call	_readEEPROM	;wreg free
 19965  001C7E  D397               	goto	L53
 19966  001C80                     l10596:
 19967                           
 19968                           ; BSR set to: 0
 19969                           ;main.c: 1326: rv = readEEPROM( 0x48 );
 19970  001C80  6A0F               	clrf	?_readEEPROM+1,c
 19971  001C82  0E48               	movlw	72
 19972  001C84  6E0E               	movwf	?_readEEPROM,c
 19973  001C86  EC62  F02A         	call	_readEEPROM	;wreg free
 19974  001C8A  D391               	goto	L53
 19975  001C8C                     l10598:
 19976                           
 19977                           ; BSR set to: 0
 19978                           ;main.c: 1331: rv = ((current_temp[0] & 0xff00) >> 8);
 19979  001C8C  5161               	movf	(_current_temp+1)& (0+255),w,b
 19980  001C8E  D38F               	goto	L53
 19981  001C90                     l315:
 19982                           
 19983                           ; BSR set to: 0
 19984                           ;main.c: 1336: rv = (current_temp[0] & 0x00ff);
 19985  001C90  C060  F014         	movff	_current_temp,vscp_readAppReg@rv
 19986                           
 19987                           ;main.c: 1337: break;
 19988  001C94  D38D               	goto	l10808
 19989  001C96                     l10600:
 19990                           
 19991                           ; BSR set to: 0
 19992                           ;main.c: 1341: rv = ((current_temp[1] & 0xff00) >> 8);
 19993  001C96  5163               	movf	(_current_temp+3)& (0+255),w,b
 19994  001C98  D38A               	goto	L53
 19995  001C9A                     l317:
 19996                           
 19997                           ; BSR set to: 0
 19998                           ;main.c: 1346: rv = (current_temp[1] & 0x00ff);
 19999  001C9A  C062  F014         	movff	_current_temp+2,vscp_readAppReg@rv
 20000                           
 20001                           ;main.c: 1347: break;
 20002  001C9E  D388               	goto	l10808
 20003  001CA0                     l10602:
 20004                           
 20005                           ; BSR set to: 0
 20006                           ;main.c: 1351: rv = ((current_temp[2] & 0xff00) >> 8);
 20007  001CA0  5165               	movf	(_current_temp+5)& (0+255),w,b
 20008  001CA2  D385               	goto	L53
 20009  001CA4                     l319:
 20010                           
 20011                           ; BSR set to: 0
 20012                           ;main.c: 1356: rv = (current_temp[2] & 0x00ff);
 20013  001CA4  C064  F014         	movff	_current_temp+4,vscp_readAppReg@rv
 20014                           
 20015                           ;main.c: 1357: break;
 20016  001CA8  D383               	goto	l10808
 20017  001CAA                     l10604:
 20018                           
 20019                           ; BSR set to: 0
 20020                           ;main.c: 1361: rv = ((current_temp[3] & 0xff00) >> 8);
 20021  001CAA  5167               	movf	(_current_temp+7)& (0+255),w,b
 20022  001CAC  D380               	goto	L53
 20023  001CAE                     l321:
 20024                           
 20025                           ; BSR set to: 0
 20026                           ;main.c: 1366: rv = (current_temp[3] & 0x00ff);
 20027  001CAE  C066  F014         	movff	_current_temp+6,vscp_readAppReg@rv
 20028                           
 20029                           ;main.c: 1367: break;
 20030  001CB2  D37E               	goto	l10808
 20031  001CB4                     l10606:
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;main.c: 1371: rv = ((current_temp[4] & 0xff00) >> 8);
 20035  001CB4  5169               	movf	(_current_temp+9)& (0+255),w,b
 20036  001CB6  D37B               	goto	L53
 20037  001CB8                     l323:
 20038                           
 20039                           ; BSR set to: 0
 20040                           ;main.c: 1376: rv = (current_temp[4] & 0x00ff);
 20041  001CB8  C068  F014         	movff	_current_temp+8,vscp_readAppReg@rv
 20042                           
 20043                           ;main.c: 1377: break;
 20044  001CBC  D379               	goto	l10808
 20045  001CBE                     l10610:
 20046                           
 20047                           ; BSR set to: 0
 20048                           ;main.c: 1391: rv = readEEPROM(0x49);
 20049  001CBE  6A0F               	clrf	?_readEEPROM+1,c
 20050  001CC0  0E49               	movlw	73
 20051  001CC2  6E0E               	movwf	?_readEEPROM,c
 20052  001CC4  EC62  F02A         	call	_readEEPROM	;wreg free
 20053  001CC8  D372               	goto	L53
 20054  001CCA                     l10612:
 20055                           
 20056                           ; BSR set to: 0
 20057                           ;main.c: 1396: rv = readEEPROM(0x4A);
 20058  001CCA  6A0F               	clrf	?_readEEPROM+1,c
 20059  001CCC  0E4A               	movlw	74
 20060  001CCE  6E0E               	movwf	?_readEEPROM,c
 20061  001CD0  EC62  F02A         	call	_readEEPROM	;wreg free
 20062  001CD4  D36C               	goto	L53
 20063  001CD6                     l10614:
 20064                           
 20065                           ; BSR set to: 0
 20066                           ;main.c: 1401: rv = readEEPROM(0x4B);
 20067  001CD6  6A0F               	clrf	?_readEEPROM+1,c
 20068  001CD8  0E4B               	movlw	75
 20069  001CDA  6E0E               	movwf	?_readEEPROM,c
 20070  001CDC  EC62  F02A         	call	_readEEPROM	;wreg free
 20071  001CE0  D366               	goto	L53
 20072  001CE2                     l10616:
 20073                           
 20074                           ; BSR set to: 0
 20075                           ;main.c: 1406: rv = readEEPROM(0x4C);
 20076  001CE2  6A0F               	clrf	?_readEEPROM+1,c
 20077  001CE4  0E4C               	movlw	76
 20078  001CE6  6E0E               	movwf	?_readEEPROM,c
 20079  001CE8  EC62  F02A         	call	_readEEPROM	;wreg free
 20080  001CEC  D360               	goto	L53
 20081  001CEE                     l10618:
 20082                           
 20083                           ; BSR set to: 0
 20084                           ;main.c: 1411: rv = readEEPROM(0x4D);
 20085  001CEE  6A0F               	clrf	?_readEEPROM+1,c
 20086  001CF0  0E4D               	movlw	77
 20087  001CF2  6E0E               	movwf	?_readEEPROM,c
 20088  001CF4  EC62  F02A         	call	_readEEPROM	;wreg free
 20089  001CF8  D35A               	goto	L53
 20090  001CFA                     l10620:
 20091                           
 20092                           ; BSR set to: 0
 20093                           ;main.c: 1416: rv = readEEPROM(0x4E);
 20094  001CFA  6A0F               	clrf	?_readEEPROM+1,c
 20095  001CFC  0E4E               	movlw	78
 20096  001CFE  6E0E               	movwf	?_readEEPROM,c
 20097  001D00  EC62  F02A         	call	_readEEPROM	;wreg free
 20098  001D04  D354               	goto	L53
 20099  001D06                     l10622:
 20100                           
 20101                           ; BSR set to: 0
 20102                           ;main.c: 1423: rv = readEEPROM(0x4F);
 20103  001D06  6A0F               	clrf	?_readEEPROM+1,c
 20104  001D08  0E4F               	movlw	79
 20105  001D0A  6E0E               	movwf	?_readEEPROM,c
 20106  001D0C  EC62  F02A         	call	_readEEPROM	;wreg free
 20107  001D10  D34E               	goto	L53
 20108  001D12                     l10624:
 20109                           
 20110                           ; BSR set to: 0
 20111                           ;main.c: 1428: rv = readEEPROM(0x50);
 20112  001D12  6A0F               	clrf	?_readEEPROM+1,c
 20113  001D14  0E50               	movlw	80
 20114  001D16  6E0E               	movwf	?_readEEPROM,c
 20115  001D18  EC62  F02A         	call	_readEEPROM	;wreg free
 20116  001D1C  D348               	goto	L53
 20117  001D1E                     l10626:
 20118                           
 20119                           ; BSR set to: 0
 20120                           ;main.c: 1433: rv = readEEPROM(0x51);
 20121  001D1E  6A0F               	clrf	?_readEEPROM+1,c
 20122  001D20  0E51               	movlw	81
 20123  001D22  6E0E               	movwf	?_readEEPROM,c
 20124  001D24  EC62  F02A         	call	_readEEPROM	;wreg free
 20125  001D28  D342               	goto	L53
 20126  001D2A                     l10628:
 20127                           
 20128                           ; BSR set to: 0
 20129                           ;main.c: 1438: rv = readEEPROM(0x52);
 20130  001D2A  6A0F               	clrf	?_readEEPROM+1,c
 20131  001D2C  0E52               	movlw	82
 20132  001D2E  6E0E               	movwf	?_readEEPROM,c
 20133  001D30  EC62  F02A         	call	_readEEPROM	;wreg free
 20134  001D34  D33C               	goto	L53
 20135  001D36                     l10630:
 20136                           
 20137                           ; BSR set to: 0
 20138                           ;main.c: 1443: rv = readEEPROM(0x53);
 20139  001D36  6A0F               	clrf	?_readEEPROM+1,c
 20140  001D38  0E53               	movlw	83
 20141  001D3A  6E0E               	movwf	?_readEEPROM,c
 20142  001D3C  EC62  F02A         	call	_readEEPROM	;wreg free
 20143  001D40  D336               	goto	L53
 20144  001D42                     l10632:
 20145                           
 20146                           ; BSR set to: 0
 20147                           ;main.c: 1448: rv = readEEPROM(0x54);
 20148  001D42  6A0F               	clrf	?_readEEPROM+1,c
 20149  001D44  0E54               	movlw	84
 20150  001D46  6E0E               	movwf	?_readEEPROM,c
 20151  001D48  EC62  F02A         	call	_readEEPROM	;wreg free
 20152  001D4C  D330               	goto	L53
 20153  001D4E                     l10634:
 20154                           
 20155                           ; BSR set to: 0
 20156                           ;main.c: 1453: rv = readEEPROM(0x55);
 20157  001D4E  6A0F               	clrf	?_readEEPROM+1,c
 20158  001D50  0E55               	movlw	85
 20159  001D52  6E0E               	movwf	?_readEEPROM,c
 20160  001D54  EC62  F02A         	call	_readEEPROM	;wreg free
 20161  001D58  D32A               	goto	L53
 20162  001D5A                     l10636:
 20163                           
 20164                           ; BSR set to: 0
 20165                           ;main.c: 1458: rv = readEEPROM(0x56);
 20166  001D5A  6A0F               	clrf	?_readEEPROM+1,c
 20167  001D5C  0E56               	movlw	86
 20168  001D5E  6E0E               	movwf	?_readEEPROM,c
 20169  001D60  EC62  F02A         	call	_readEEPROM	;wreg free
 20170  001D64  D324               	goto	L53
 20171  001D66                     l10638:
 20172                           
 20173                           ; BSR set to: 0
 20174                           ;main.c: 1463: rv = readEEPROM(0x57);
 20175  001D66  6A0F               	clrf	?_readEEPROM+1,c
 20176  001D68  0E57               	movlw	87
 20177  001D6A  6E0E               	movwf	?_readEEPROM,c
 20178  001D6C  EC62  F02A         	call	_readEEPROM	;wreg free
 20179  001D70  D31E               	goto	L53
 20180  001D72                     l10640:
 20181                           
 20182                           ; BSR set to: 0
 20183                           ;main.c: 1468: rv = readEEPROM(0x58);
 20184  001D72  6A0F               	clrf	?_readEEPROM+1,c
 20185  001D74  0E58               	movlw	88
 20186  001D76  6E0E               	movwf	?_readEEPROM,c
 20187  001D78  EC62  F02A         	call	_readEEPROM	;wreg free
 20188  001D7C  D318               	goto	L53
 20189  001D7E                     l10642:
 20190                           
 20191                           ; BSR set to: 0
 20192                           ;main.c: 1473: rv = readEEPROM(0x59);
 20193  001D7E  6A0F               	clrf	?_readEEPROM+1,c
 20194  001D80  0E59               	movlw	89
 20195  001D82  6E0E               	movwf	?_readEEPROM,c
 20196  001D84  EC62  F02A         	call	_readEEPROM	;wreg free
 20197  001D88  D312               	goto	L53
 20198  001D8A                     l10644:
 20199                           
 20200                           ; BSR set to: 0
 20201                           ;main.c: 1478: rv = readEEPROM(0x5A);
 20202  001D8A  6A0F               	clrf	?_readEEPROM+1,c
 20203  001D8C  0E5A               	movlw	90
 20204  001D8E  6E0E               	movwf	?_readEEPROM,c
 20205  001D90  EC62  F02A         	call	_readEEPROM	;wreg free
 20206  001D94  D30C               	goto	L53
 20207  001D96                     l10646:
 20208                           
 20209                           ; BSR set to: 0
 20210                           ;main.c: 1487: rv = readEEPROM(0x5B);
 20211  001D96  6A0F               	clrf	?_readEEPROM+1,c
 20212  001D98  0E5B               	movlw	91
 20213  001D9A  6E0E               	movwf	?_readEEPROM,c
 20214  001D9C  EC62  F02A         	call	_readEEPROM	;wreg free
 20215  001DA0  D306               	goto	L53
 20216  001DA2                     l10648:
 20217                           
 20218                           ; BSR set to: 0
 20219                           ;main.c: 1492: rv = readEEPROM(0x5C);
 20220  001DA2  6A0F               	clrf	?_readEEPROM+1,c
 20221  001DA4  0E5C               	movlw	92
 20222  001DA6  6E0E               	movwf	?_readEEPROM,c
 20223  001DA8  EC62  F02A         	call	_readEEPROM	;wreg free
 20224  001DAC  D300               	goto	L53
 20225  001DAE                     l10650:
 20226                           
 20227                           ; BSR set to: 0
 20228                           ;main.c: 1497: rv = readEEPROM(0x5D);
 20229  001DAE  6A0F               	clrf	?_readEEPROM+1,c
 20230  001DB0  0E5D               	movlw	93
 20231  001DB2  6E0E               	movwf	?_readEEPROM,c
 20232  001DB4  EC62  F02A         	call	_readEEPROM	;wreg free
 20233  001DB8  D2FA               	goto	L53
 20234  001DBA                     l10652:
 20235                           
 20236                           ; BSR set to: 0
 20237                           ;main.c: 1502: rv = readEEPROM(0x5E);
 20238  001DBA  6A0F               	clrf	?_readEEPROM+1,c
 20239  001DBC  0E5E               	movlw	94
 20240  001DBE  6E0E               	movwf	?_readEEPROM,c
 20241  001DC0  EC62  F02A         	call	_readEEPROM	;wreg free
 20242  001DC4  D2F4               	goto	L53
 20243  001DC6                     l10654:
 20244                           
 20245                           ; BSR set to: 0
 20246                           ;main.c: 1507: rv = readEEPROM(0x5F);
 20247  001DC6  6A0F               	clrf	?_readEEPROM+1,c
 20248  001DC8  0E5F               	movlw	95
 20249  001DCA  6E0E               	movwf	?_readEEPROM,c
 20250  001DCC  EC62  F02A         	call	_readEEPROM	;wreg free
 20251  001DD0  D2EE               	goto	L53
 20252  001DD2                     l10656:
 20253                           
 20254                           ; BSR set to: 0
 20255                           ;main.c: 1512: rv = readEEPROM(0x60);
 20256  001DD2  6A0F               	clrf	?_readEEPROM+1,c
 20257  001DD4  0E60               	movlw	96
 20258  001DD6  6E0E               	movwf	?_readEEPROM,c
 20259  001DD8  EC62  F02A         	call	_readEEPROM	;wreg free
 20260  001DDC  D2E8               	goto	L53
 20261  001DDE                     l10658:
 20262                           
 20263                           ; BSR set to: 0
 20264                           ;main.c: 1517: rv = readEEPROM(0x61);
 20265  001DDE  6A0F               	clrf	?_readEEPROM+1,c
 20266  001DE0  0E61               	movlw	97
 20267  001DE2  6E0E               	movwf	?_readEEPROM,c
 20268  001DE4  EC62  F02A         	call	_readEEPROM	;wreg free
 20269  001DE8  D2E2               	goto	L53
 20270  001DEA                     l10660:
 20271                           
 20272                           ; BSR set to: 0
 20273                           ;main.c: 1522: rv = readEEPROM(0x62);
 20274  001DEA  6A0F               	clrf	?_readEEPROM+1,c
 20275  001DEC  0E62               	movlw	98
 20276  001DEE  6E0E               	movwf	?_readEEPROM,c
 20277  001DF0  EC62  F02A         	call	_readEEPROM	;wreg free
 20278  001DF4  D2DC               	goto	L53
 20279  001DF6                     l10662:
 20280                           
 20281                           ; BSR set to: 0
 20282                           ;main.c: 1527: rv = readEEPROM(0x63);
 20283  001DF6  6A0F               	clrf	?_readEEPROM+1,c
 20284  001DF8  0E63               	movlw	99
 20285  001DFA  6E0E               	movwf	?_readEEPROM,c
 20286  001DFC  EC62  F02A         	call	_readEEPROM	;wreg free
 20287  001E00  D2D6               	goto	L53
 20288  001E02                     l10664:
 20289                           
 20290                           ; BSR set to: 0
 20291                           ;main.c: 1532: rv = readEEPROM(0x64);
 20292  001E02  6A0F               	clrf	?_readEEPROM+1,c
 20293  001E04  0E64               	movlw	100
 20294  001E06  6E0E               	movwf	?_readEEPROM,c
 20295  001E08  EC62  F02A         	call	_readEEPROM	;wreg free
 20296  001E0C  D2D0               	goto	L53
 20297  001E0E                     l10666:
 20298                           
 20299                           ; BSR set to: 0
 20300                           ;main.c: 1537: rv = readEEPROM(0x65);
 20301  001E0E  6A0F               	clrf	?_readEEPROM+1,c
 20302  001E10  0E65               	movlw	101
 20303  001E12  6E0E               	movwf	?_readEEPROM,c
 20304  001E14  EC62  F02A         	call	_readEEPROM	;wreg free
 20305  001E18  D2CA               	goto	L53
 20306  001E1A                     l10668:
 20307                           
 20308                           ; BSR set to: 0
 20309                           ;main.c: 1542: rv = readEEPROM(0x66);
 20310  001E1A  6A0F               	clrf	?_readEEPROM+1,c
 20311  001E1C  0E66               	movlw	102
 20312  001E1E  6E0E               	movwf	?_readEEPROM,c
 20313  001E20  EC62  F02A         	call	_readEEPROM	;wreg free
 20314  001E24  D2C4               	goto	L53
 20315  001E26                     l10670:
 20316                           
 20317                           ; BSR set to: 0
 20318                           ;main.c: 1552: rv = readEEPROM(0x67);
 20319  001E26  6A0F               	clrf	?_readEEPROM+1,c
 20320  001E28  0E67               	movlw	103
 20321  001E2A  6E0E               	movwf	?_readEEPROM,c
 20322  001E2C  EC62  F02A         	call	_readEEPROM	;wreg free
 20323  001E30  D2BE               	goto	L53
 20324  001E32                     l10672:
 20325                           
 20326                           ; BSR set to: 0
 20327                           ;main.c: 1557: rv = readEEPROM(0x68);
 20328  001E32  6A0F               	clrf	?_readEEPROM+1,c
 20329  001E34  0E68               	movlw	104
 20330  001E36  6E0E               	movwf	?_readEEPROM,c
 20331  001E38  EC62  F02A         	call	_readEEPROM	;wreg free
 20332  001E3C  D2B8               	goto	L53
 20333  001E3E                     l10674:
 20334                           
 20335                           ; BSR set to: 0
 20336                           ;main.c: 1562: rv = readEEPROM(0x69);
 20337  001E3E  6A0F               	clrf	?_readEEPROM+1,c
 20338  001E40  0E69               	movlw	105
 20339  001E42  6E0E               	movwf	?_readEEPROM,c
 20340  001E44  EC62  F02A         	call	_readEEPROM	;wreg free
 20341  001E48  D2B2               	goto	L53
 20342  001E4A                     l10676:
 20343                           
 20344                           ; BSR set to: 0
 20345                           ;main.c: 1567: rv = readEEPROM(0x6A);
 20346  001E4A  6A0F               	clrf	?_readEEPROM+1,c
 20347  001E4C  0E6A               	movlw	106
 20348  001E4E  6E0E               	movwf	?_readEEPROM,c
 20349  001E50  EC62  F02A         	call	_readEEPROM	;wreg free
 20350  001E54  D2AC               	goto	L53
 20351  001E56                     l10678:
 20352                           
 20353                           ; BSR set to: 0
 20354                           ;main.c: 1572: rv = readEEPROM(0x6B);
 20355  001E56  6A0F               	clrf	?_readEEPROM+1,c
 20356  001E58  0E6B               	movlw	107
 20357  001E5A  6E0E               	movwf	?_readEEPROM,c
 20358  001E5C  EC62  F02A         	call	_readEEPROM	;wreg free
 20359  001E60  D2A6               	goto	L53
 20360  001E62                     l10680:
 20361                           
 20362                           ; BSR set to: 0
 20363                           ;main.c: 1577: rv = readEEPROM(0x6C);
 20364  001E62  6A0F               	clrf	?_readEEPROM+1,c
 20365  001E64  0E6C               	movlw	108
 20366  001E66  6E0E               	movwf	?_readEEPROM,c
 20367  001E68  EC62  F02A         	call	_readEEPROM	;wreg free
 20368  001E6C  D2A0               	goto	L53
 20369  001E6E                     l10682:
 20370                           
 20371                           ; BSR set to: 0
 20372                           ;main.c: 1582: rv = readEEPROM(0x6D);
 20373  001E6E  6A0F               	clrf	?_readEEPROM+1,c
 20374  001E70  0E6D               	movlw	109
 20375  001E72  6E0E               	movwf	?_readEEPROM,c
 20376  001E74  EC62  F02A         	call	_readEEPROM	;wreg free
 20377  001E78  D29A               	goto	L53
 20378  001E7A                     l10684:
 20379                           
 20380                           ; BSR set to: 0
 20381                           ;main.c: 1587: rv = readEEPROM(0x6E);
 20382  001E7A  6A0F               	clrf	?_readEEPROM+1,c
 20383  001E7C  0E6E               	movlw	110
 20384  001E7E  6E0E               	movwf	?_readEEPROM,c
 20385  001E80  EC62  F02A         	call	_readEEPROM	;wreg free
 20386  001E84  D294               	goto	L53
 20387  001E86                     l10686:
 20388                           
 20389                           ; BSR set to: 0
 20390                           ;main.c: 1592: rv = readEEPROM(0x6F);
 20391  001E86  6A0F               	clrf	?_readEEPROM+1,c
 20392  001E88  0E6F               	movlw	111
 20393  001E8A  6E0E               	movwf	?_readEEPROM,c
 20394  001E8C  EC62  F02A         	call	_readEEPROM	;wreg free
 20395  001E90  D28E               	goto	L53
 20396  001E92                     l10688:
 20397                           
 20398                           ; BSR set to: 0
 20399                           ;main.c: 1597: rv = readEEPROM(0x70);
 20400  001E92  6A0F               	clrf	?_readEEPROM+1,c
 20401  001E94  0E70               	movlw	112
 20402  001E96  6E0E               	movwf	?_readEEPROM,c
 20403  001E98  EC62  F02A         	call	_readEEPROM	;wreg free
 20404  001E9C  D288               	goto	L53
 20405  001E9E                     l10690:
 20406                           
 20407                           ; BSR set to: 0
 20408                           ;main.c: 1602: rv = readEEPROM(0x71);
 20409  001E9E  6A0F               	clrf	?_readEEPROM+1,c
 20410  001EA0  0E71               	movlw	113
 20411  001EA2  6E0E               	movwf	?_readEEPROM,c
 20412  001EA4  EC62  F02A         	call	_readEEPROM	;wreg free
 20413  001EA8  D282               	goto	L53
 20414  001EAA                     l10692:
 20415                           
 20416                           ; BSR set to: 0
 20417                           ;main.c: 1607: rv = readEEPROM(0x72);
 20418  001EAA  6A0F               	clrf	?_readEEPROM+1,c
 20419  001EAC  0E72               	movlw	114
 20420  001EAE  6E0E               	movwf	?_readEEPROM,c
 20421  001EB0  EC62  F02A         	call	_readEEPROM	;wreg free
 20422  001EB4  D27C               	goto	L53
 20423  001EB6                     l10694:
 20424                           
 20425                           ; BSR set to: 0
 20426                           ;main.c: 1616: rv = readEEPROM(0x73);
 20427  001EB6  6A0F               	clrf	?_readEEPROM+1,c
 20428  001EB8  0E73               	movlw	115
 20429  001EBA  6E0E               	movwf	?_readEEPROM,c
 20430  001EBC  EC62  F02A         	call	_readEEPROM	;wreg free
 20431  001EC0  D276               	goto	L53
 20432  001EC2                     l10696:
 20433                           
 20434                           ; BSR set to: 0
 20435                           ;main.c: 1621: rv = readEEPROM(0x74);
 20436  001EC2  6A0F               	clrf	?_readEEPROM+1,c
 20437  001EC4  0E74               	movlw	116
 20438  001EC6  6E0E               	movwf	?_readEEPROM,c
 20439  001EC8  EC62  F02A         	call	_readEEPROM	;wreg free
 20440  001ECC  D270               	goto	L53
 20441  001ECE                     l10698:
 20442                           
 20443                           ; BSR set to: 0
 20444                           ;main.c: 1626: rv = readEEPROM(0x75);
 20445  001ECE  6A0F               	clrf	?_readEEPROM+1,c
 20446  001ED0  0E75               	movlw	117
 20447  001ED2  6E0E               	movwf	?_readEEPROM,c
 20448  001ED4  EC62  F02A         	call	_readEEPROM	;wreg free
 20449  001ED8  D26A               	goto	L53
 20450  001EDA                     l10700:
 20451                           
 20452                           ; BSR set to: 0
 20453                           ;main.c: 1631: rv = readEEPROM(0x76);
 20454  001EDA  6A0F               	clrf	?_readEEPROM+1,c
 20455  001EDC  0E76               	movlw	118
 20456  001EDE  6E0E               	movwf	?_readEEPROM,c
 20457  001EE0  EC62  F02A         	call	_readEEPROM	;wreg free
 20458  001EE4  D264               	goto	L53
 20459  001EE6                     l10702:
 20460                           
 20461                           ; BSR set to: 0
 20462                           ;main.c: 1636: rv = readEEPROM(0x77);
 20463  001EE6  6A0F               	clrf	?_readEEPROM+1,c
 20464  001EE8  0E77               	movlw	119
 20465  001EEA  6E0E               	movwf	?_readEEPROM,c
 20466  001EEC  EC62  F02A         	call	_readEEPROM	;wreg free
 20467  001EF0  D25E               	goto	L53
 20468  001EF2                     l10704:
 20469                           
 20470                           ; BSR set to: 0
 20471                           ;main.c: 1641: rv = readEEPROM(0x78);
 20472  001EF2  6A0F               	clrf	?_readEEPROM+1,c
 20473  001EF4  0E78               	movlw	120
 20474  001EF6  6E0E               	movwf	?_readEEPROM,c
 20475  001EF8  EC62  F02A         	call	_readEEPROM	;wreg free
 20476  001EFC  D258               	goto	L53
 20477  001EFE                     l10706:
 20478                           
 20479                           ; BSR set to: 0
 20480                           ;main.c: 1646: rv = readEEPROM(0x79);
 20481  001EFE  6A0F               	clrf	?_readEEPROM+1,c
 20482  001F00  0E79               	movlw	121
 20483  001F02  6E0E               	movwf	?_readEEPROM,c
 20484  001F04  EC62  F02A         	call	_readEEPROM	;wreg free
 20485  001F08  D252               	goto	L53
 20486  001F0A                     l10708:
 20487                           
 20488                           ; BSR set to: 0
 20489                           ;main.c: 1651: rv = readEEPROM(0x7A);
 20490  001F0A  6A0F               	clrf	?_readEEPROM+1,c
 20491  001F0C  0E7A               	movlw	122
 20492  001F0E  6E0E               	movwf	?_readEEPROM,c
 20493  001F10  EC62  F02A         	call	_readEEPROM	;wreg free
 20494  001F14  D24C               	goto	L53
 20495  001F16                     l10710:
 20496                           
 20497                           ; BSR set to: 0
 20498                           ;main.c: 1656: rv = readEEPROM(0x7B);
 20499  001F16  6A0F               	clrf	?_readEEPROM+1,c
 20500  001F18  0E7B               	movlw	123
 20501  001F1A  6E0E               	movwf	?_readEEPROM,c
 20502  001F1C  EC62  F02A         	call	_readEEPROM	;wreg free
 20503  001F20  D246               	goto	L53
 20504  001F22                     l10712:
 20505                           
 20506                           ; BSR set to: 0
 20507                           ;main.c: 1661: rv = readEEPROM(0x7C);
 20508  001F22  6A0F               	clrf	?_readEEPROM+1,c
 20509  001F24  0E7C               	movlw	124
 20510  001F26  6E0E               	movwf	?_readEEPROM,c
 20511  001F28  EC62  F02A         	call	_readEEPROM	;wreg free
 20512  001F2C  D240               	goto	L53
 20513  001F2E                     l10714:
 20514                           
 20515                           ; BSR set to: 0
 20516                           ;main.c: 1666: rv = readEEPROM(0x7D);
 20517  001F2E  6A0F               	clrf	?_readEEPROM+1,c
 20518  001F30  0E7D               	movlw	125
 20519  001F32  6E0E               	movwf	?_readEEPROM,c
 20520  001F34  EC62  F02A         	call	_readEEPROM	;wreg free
 20521  001F38  D23A               	goto	L53
 20522  001F3A                     l10716:
 20523                           
 20524                           ; BSR set to: 0
 20525                           ;main.c: 1671: rv = readEEPROM(0x7E);
 20526  001F3A  6A0F               	clrf	?_readEEPROM+1,c
 20527  001F3C  0E7E               	movlw	126
 20528  001F3E  6E0E               	movwf	?_readEEPROM,c
 20529  001F40  EC62  F02A         	call	_readEEPROM	;wreg free
 20530  001F44  D234               	goto	L53
 20531  001F46                     l10718:
 20532                           
 20533                           ; BSR set to: 0
 20534                           ;main.c: 1680: rv = readEEPROM(0x7F);
 20535  001F46  6A0F               	clrf	?_readEEPROM+1,c
 20536  001F48  0E7F               	movlw	127
 20537  001F4A  6E0E               	movwf	?_readEEPROM,c
 20538  001F4C  EC62  F02A         	call	_readEEPROM	;wreg free
 20539  001F50  D22E               	goto	L53
 20540  001F52                     l10720:
 20541                           
 20542                           ; BSR set to: 0
 20543                           ;main.c: 1685: rv = readEEPROM(0x80);
 20544  001F52  6A0F               	clrf	?_readEEPROM+1,c
 20545  001F54  0E80               	movlw	128
 20546  001F56  6E0E               	movwf	?_readEEPROM,c
 20547  001F58  EC62  F02A         	call	_readEEPROM	;wreg free
 20548  001F5C  D228               	goto	L53
 20549  001F5E                     l10722:
 20550                           
 20551                           ; BSR set to: 0
 20552                           ;main.c: 1690: rv = readEEPROM(0x81);
 20553  001F5E  6A0F               	clrf	?_readEEPROM+1,c
 20554  001F60  0E81               	movlw	129
 20555  001F62  6E0E               	movwf	?_readEEPROM,c
 20556  001F64  EC62  F02A         	call	_readEEPROM	;wreg free
 20557  001F68  D222               	goto	L53
 20558  001F6A                     l10724:
 20559                           
 20560                           ; BSR set to: 0
 20561                           ;main.c: 1695: rv = readEEPROM(0x82);
 20562  001F6A  6A0F               	clrf	?_readEEPROM+1,c
 20563  001F6C  0E82               	movlw	130
 20564  001F6E  6E0E               	movwf	?_readEEPROM,c
 20565  001F70  EC62  F02A         	call	_readEEPROM	;wreg free
 20566  001F74  D21C               	goto	L53
 20567  001F76                     l10726:
 20568                           
 20569                           ; BSR set to: 0
 20570                           ;main.c: 1700: rv = readEEPROM(0x83);
 20571  001F76  6A0F               	clrf	?_readEEPROM+1,c
 20572  001F78  0E83               	movlw	131
 20573  001F7A  6E0E               	movwf	?_readEEPROM,c
 20574  001F7C  EC62  F02A         	call	_readEEPROM	;wreg free
 20575  001F80  D216               	goto	L53
 20576  001F82                     l10728:
 20577                           
 20578                           ; BSR set to: 0
 20579                           ;main.c: 1705: rv = readEEPROM(0x84);
 20580  001F82  6A0F               	clrf	?_readEEPROM+1,c
 20581  001F84  0E84               	movlw	132
 20582  001F86  6E0E               	movwf	?_readEEPROM,c
 20583  001F88  EC62  F02A         	call	_readEEPROM	;wreg free
 20584  001F8C  D210               	goto	L53
 20585  001F8E                     l10730:
 20586                           
 20587                           ; BSR set to: 0
 20588                           ;main.c: 1710: rv = readEEPROM(0x85);
 20589  001F8E  6A0F               	clrf	?_readEEPROM+1,c
 20590  001F90  0E85               	movlw	133
 20591  001F92  6E0E               	movwf	?_readEEPROM,c
 20592  001F94  EC62  F02A         	call	_readEEPROM	;wreg free
 20593  001F98  D20A               	goto	L53
 20594  001F9A                     l10732:
 20595                           
 20596                           ; BSR set to: 0
 20597                           ;main.c: 1715: rv = readEEPROM(0x86);
 20598  001F9A  6A0F               	clrf	?_readEEPROM+1,c
 20599  001F9C  0E86               	movlw	134
 20600  001F9E  6E0E               	movwf	?_readEEPROM,c
 20601  001FA0  EC62  F02A         	call	_readEEPROM	;wreg free
 20602  001FA4  D204               	goto	L53
 20603  001FA6                     l10734:
 20604                           
 20605                           ; BSR set to: 0
 20606                           ;main.c: 1720: rv = readEEPROM(0x87);
 20607  001FA6  6A0F               	clrf	?_readEEPROM+1,c
 20608  001FA8  0E87               	movlw	135
 20609  001FAA  6E0E               	movwf	?_readEEPROM,c
 20610  001FAC  EC62  F02A         	call	_readEEPROM	;wreg free
 20611  001FB0  D1FE               	goto	L53
 20612  001FB2                     l10736:
 20613                           
 20614                           ; BSR set to: 0
 20615                           ;main.c: 1725: rv = readEEPROM(0x88);
 20616  001FB2  6A0F               	clrf	?_readEEPROM+1,c
 20617  001FB4  0E88               	movlw	136
 20618  001FB6  6E0E               	movwf	?_readEEPROM,c
 20619  001FB8  EC62  F02A         	call	_readEEPROM	;wreg free
 20620  001FBC  D1F8               	goto	L53
 20621  001FBE                     l10738:
 20622                           
 20623                           ; BSR set to: 0
 20624                           ;main.c: 1730: rv = readEEPROM(0x89);
 20625  001FBE  6A0F               	clrf	?_readEEPROM+1,c
 20626  001FC0  0E89               	movlw	137
 20627  001FC2  6E0E               	movwf	?_readEEPROM,c
 20628  001FC4  EC62  F02A         	call	_readEEPROM	;wreg free
 20629  001FC8  D1F2               	goto	L53
 20630  001FCA                     l10740:
 20631                           
 20632                           ; BSR set to: 0
 20633                           ;main.c: 1735: rv = readEEPROM(0x8A);
 20634  001FCA  6A0F               	clrf	?_readEEPROM+1,c
 20635  001FCC  0E8A               	movlw	138
 20636  001FCE  6E0E               	movwf	?_readEEPROM,c
 20637  001FD0  EC62  F02A         	call	_readEEPROM	;wreg free
 20638  001FD4  D1EC               	goto	L53
 20639  001FD6                     l10742:
 20640                           
 20641                           ; BSR set to: 0
 20642                           ;main.c: 1744: rv = readEEPROM(0x8B);
 20643  001FD6  6A0F               	clrf	?_readEEPROM+1,c
 20644  001FD8  0E8B               	movlw	139
 20645  001FDA  6E0E               	movwf	?_readEEPROM,c
 20646  001FDC  EC62  F02A         	call	_readEEPROM	;wreg free
 20647  001FE0  D1E6               	goto	L53
 20648  001FE2                     l10744:
 20649                           
 20650                           ; BSR set to: 0
 20651                           ;main.c: 1749: rv = readEEPROM(0x8C);
 20652  001FE2  6A0F               	clrf	?_readEEPROM+1,c
 20653  001FE4  0E8C               	movlw	140
 20654  001FE6  6E0E               	movwf	?_readEEPROM,c
 20655  001FE8  EC62  F02A         	call	_readEEPROM	;wreg free
 20656  001FEC  D1E0               	goto	L53
 20657  001FEE                     l10746:
 20658                           
 20659                           ; BSR set to: 0
 20660                           ;main.c: 1754: rv = readEEPROM(0x8D);
 20661  001FEE  6A0F               	clrf	?_readEEPROM+1,c
 20662  001FF0  0E8D               	movlw	141
 20663  001FF2  6E0E               	movwf	?_readEEPROM,c
 20664  001FF4  EC62  F02A         	call	_readEEPROM	;wreg free
 20665  001FF8  D1DA               	goto	L53
 20666  001FFA                     l10748:
 20667                           
 20668                           ; BSR set to: 0
 20669                           ;main.c: 1759: rv = readEEPROM(0x8E);
 20670  001FFA  6A0F               	clrf	?_readEEPROM+1,c
 20671  001FFC  0E8E               	movlw	142
 20672  001FFE  6E0E               	movwf	?_readEEPROM,c
 20673  002000  EC62  F02A         	call	_readEEPROM	;wreg free
 20674  002004  D1D4               	goto	L53
 20675  002006                     l10750:
 20676                           
 20677                           ; BSR set to: 0
 20678                           ;main.c: 1764: rv = readEEPROM(0x8F);
 20679  002006  6A0F               	clrf	?_readEEPROM+1,c
 20680  002008  0E8F               	movlw	143
 20681  00200A  6E0E               	movwf	?_readEEPROM,c
 20682  00200C  EC62  F02A         	call	_readEEPROM	;wreg free
 20683  002010  D1CE               	goto	L53
 20684  002012                     l10752:
 20685                           
 20686                           ; BSR set to: 0
 20687                           ;main.c: 1769: rv = readEEPROM(0x90);
 20688  002012  6A0F               	clrf	?_readEEPROM+1,c
 20689  002014  0E90               	movlw	144
 20690  002016  6E0E               	movwf	?_readEEPROM,c
 20691  002018  EC62  F02A         	call	_readEEPROM	;wreg free
 20692  00201C  D1C8               	goto	L53
 20693  00201E                     l10754:
 20694                           
 20695                           ; BSR set to: 0
 20696                           ;main.c: 1774: rv = readEEPROM(0x91);
 20697  00201E  6A0F               	clrf	?_readEEPROM+1,c
 20698  002020  0E91               	movlw	145
 20699  002022  6E0E               	movwf	?_readEEPROM,c
 20700  002024  EC62  F02A         	call	_readEEPROM	;wreg free
 20701  002028  D1C2               	goto	L53
 20702  00202A                     l10756:
 20703                           
 20704                           ; BSR set to: 0
 20705                           ;main.c: 1779: rv = readEEPROM(0x92);
 20706  00202A  6A0F               	clrf	?_readEEPROM+1,c
 20707  00202C  0E92               	movlw	146
 20708  00202E  6E0E               	movwf	?_readEEPROM,c
 20709  002030  EC62  F02A         	call	_readEEPROM	;wreg free
 20710  002034  D1BC               	goto	L53
 20711  002036                     l10758:
 20712                           
 20713                           ; BSR set to: 0
 20714                           ;main.c: 1784: rv = readEEPROM(0x93);
 20715  002036  6A0F               	clrf	?_readEEPROM+1,c
 20716  002038  0E93               	movlw	147
 20717  00203A  6E0E               	movwf	?_readEEPROM,c
 20718  00203C  EC62  F02A         	call	_readEEPROM	;wreg free
 20719  002040  D1B6               	goto	L53
 20720  002042                     l10760:
 20721                           
 20722                           ; BSR set to: 0
 20723                           ;main.c: 1789: rv = readEEPROM(0x94);
 20724  002042  6A0F               	clrf	?_readEEPROM+1,c
 20725  002044  0E94               	movlw	148
 20726  002046  6E0E               	movwf	?_readEEPROM,c
 20727  002048  EC62  F02A         	call	_readEEPROM	;wreg free
 20728  00204C  D1B0               	goto	L53
 20729  00204E                     l10762:
 20730                           
 20731                           ; BSR set to: 0
 20732                           ;main.c: 1794: rv = readEEPROM(0x95);
 20733  00204E  6A0F               	clrf	?_readEEPROM+1,c
 20734  002050  0E95               	movlw	149
 20735  002052  6E0E               	movwf	?_readEEPROM,c
 20736  002054  EC62  F02A         	call	_readEEPROM	;wreg free
 20737  002058  D1AA               	goto	L53
 20738  00205A                     l10764:
 20739                           
 20740                           ; BSR set to: 0
 20741                           ;main.c: 1799: rv = readEEPROM(0x96);
 20742  00205A  6A0F               	clrf	?_readEEPROM+1,c
 20743  00205C  0E96               	movlw	150
 20744  00205E  6E0E               	movwf	?_readEEPROM,c
 20745  002060  EC62  F02A         	call	_readEEPROM	;wreg free
 20746  002064  D1A4               	goto	L53
 20747  002066                     l10766:
 20748                           
 20749                           ; BSR set to: 0
 20750                           ;main.c: 1809: rv = readEEPROM(0x97);
 20751  002066  6A0F               	clrf	?_readEEPROM+1,c
 20752  002068  0E97               	movlw	151
 20753  00206A  6E0E               	movwf	?_readEEPROM,c
 20754  00206C  EC62  F02A         	call	_readEEPROM	;wreg free
 20755  002070  D19E               	goto	L53
 20756  002072                     l10768:
 20757                           
 20758                           ; BSR set to: 0
 20759                           ;main.c: 1814: rv = readEEPROM(0x98);
 20760  002072  6A0F               	clrf	?_readEEPROM+1,c
 20761  002074  0E98               	movlw	152
 20762  002076  6E0E               	movwf	?_readEEPROM,c
 20763  002078  EC62  F02A         	call	_readEEPROM	;wreg free
 20764  00207C  D198               	goto	L53
 20765  00207E                     l10770:
 20766                           
 20767                           ; BSR set to: 0
 20768                           ;main.c: 1819: rv = readEEPROM(0x99);
 20769  00207E  6A0F               	clrf	?_readEEPROM+1,c
 20770  002080  0E99               	movlw	153
 20771  002082  6E0E               	movwf	?_readEEPROM,c
 20772  002084  EC62  F02A         	call	_readEEPROM	;wreg free
 20773  002088  D192               	goto	L53
 20774  00208A                     l10772:
 20775                           
 20776                           ; BSR set to: 0
 20777                           ;main.c: 1824: rv = readEEPROM(0x9A);
 20778  00208A  6A0F               	clrf	?_readEEPROM+1,c
 20779  00208C  0E9A               	movlw	154
 20780  00208E  6E0E               	movwf	?_readEEPROM,c
 20781  002090  EC62  F02A         	call	_readEEPROM	;wreg free
 20782  002094  D18C               	goto	L53
 20783  002096                     l10774:
 20784                           
 20785                           ; BSR set to: 0
 20786                           ;main.c: 1829: rv = readEEPROM(0x9B);
 20787  002096  6A0F               	clrf	?_readEEPROM+1,c
 20788  002098  0E9B               	movlw	155
 20789  00209A  6E0E               	movwf	?_readEEPROM,c
 20790  00209C  EC62  F02A         	call	_readEEPROM	;wreg free
 20791  0020A0  D186               	goto	L53
 20792  0020A2                     l10776:
 20793                           
 20794                           ; BSR set to: 0
 20795                           ;main.c: 1834: rv = readEEPROM(0x9C);
 20796  0020A2  6A0F               	clrf	?_readEEPROM+1,c
 20797  0020A4  0E9C               	movlw	156
 20798  0020A6  6E0E               	movwf	?_readEEPROM,c
 20799  0020A8  EC62  F02A         	call	_readEEPROM	;wreg free
 20800  0020AC  D180               	goto	L53
 20801  0020AE                     l410:
 20802                           
 20803                           ; BSR set to: 0
 20804                           ;main.c: 1839: rv = 0;
 20805  0020AE  6A14               	clrf	vscp_readAppReg@rv,c
 20806                           
 20807                           ;main.c: 1840: break;
 20808  0020B0  D17F               	goto	l10808
 20809  0020B2                     l10778:
 20810                           
 20811                           ; BSR set to: 0
 20812                           ;main.c: 1848: rv = readEEPROM(0xF2);
 20813  0020B2  6A0F               	clrf	?_readEEPROM+1,c
 20814  0020B4  0EF2               	movlw	242
 20815  0020B6  6E0E               	movwf	?_readEEPROM,c
 20816  0020B8  EC62  F02A         	call	_readEEPROM	;wreg free
 20817  0020BC  D178               	goto	L53
 20818  0020BE                     l10780:
 20819                           
 20820                           ; BSR set to: 0
 20821                           ;main.c: 1852: rv = readEEPROM(0xF3);
 20822  0020BE  6A0F               	clrf	?_readEEPROM+1,c
 20823  0020C0  0EF3               	movlw	243
 20824  0020C2  6E0E               	movwf	?_readEEPROM,c
 20825  0020C4  EC62  F02A         	call	_readEEPROM	;wreg free
 20826  0020C8  D172               	goto	L53
 20827  0020CA                     l10784:
 20828                           
 20829                           ; BSR set to: 0
 20830  0020CA  5013               	movf	vscp_readAppReg@reg,w,c
 20831                           
 20832                           ; Switch size 1, requested type "space"
 20833                           ; Number of cases is 108, Range of values is 0 to 119
 20834                           ; switch strategies available:
 20835                           ; Name         Instructions Cycles
 20836                           ; simple_byte          325   163 (average)
 20837                           ;	Chosen strategy is simple_byte
 20838  0020CC  E101 D5AE          	bz	l10582
 20839  0020D0  0A01               	xorlw	1	; case 1
 20840  0020D2  E101 D5B1          	bz	l10584
 20841  0020D6  0A03               	xorlw	3	; case 2
 20842  0020D8  E101 D5B4          	bz	l10586
 20843  0020DC  0A01               	xorlw	1	; case 3
 20844  0020DE  E101 D5B7          	bz	l10588
 20845  0020E2  0A07               	xorlw	7	; case 4
 20846  0020E4  E101 D5BA          	bz	l10590
 20847  0020E8  0A01               	xorlw	1	; case 5
 20848  0020EA  E101 D5BD          	bz	l10592
 20849  0020EE  0A03               	xorlw	3	; case 6
 20850  0020F0  E101 D5C0          	bz	l10594
 20851  0020F4  0A01               	xorlw	1	; case 7
 20852  0020F6  E101 D5C3          	bz	l10596
 20853  0020FA  0A0F               	xorlw	15	; case 8
 20854  0020FC  E101 D5C6          	bz	l10598
 20855  002100  0A01               	xorlw	1	; case 9
 20856  002102  E101 D5C5          	bz	l315
 20857  002106  0A03               	xorlw	3	; case 10
 20858  002108  E101 D5C5          	bz	l10600
 20859  00210C  0A01               	xorlw	1	; case 11
 20860  00210E  E101 D5C4          	bz	l317
 20861  002112  0A07               	xorlw	7	; case 12
 20862  002114  E101 D5C4          	bz	l10602
 20863  002118  0A01               	xorlw	1	; case 13
 20864  00211A  E101 D5C3          	bz	l319
 20865  00211E  0A03               	xorlw	3	; case 14
 20866  002120  E101 D5C3          	bz	l10604
 20867  002124  0A01               	xorlw	1	; case 15
 20868  002126  E101 D5C2          	bz	l321
 20869  00212A  0A1F               	xorlw	31	; case 16
 20870  00212C  E101 D5C2          	bz	l10606
 20871  002130  0A01               	xorlw	1	; case 17
 20872  002132  E101 D5C1          	bz	l323
 20873  002136  0A03               	xorlw	3	; case 18
 20874  002138  E101 D5BC          	bz	l10606
 20875  00213C  0A01               	xorlw	1	; case 19
 20876  00213E  E101 D5BB          	bz	l323
 20877  002142  0A07               	xorlw	7	; case 20
 20878  002144  E101 D5BB          	bz	l10610
 20879  002148  0A01               	xorlw	1	; case 21
 20880  00214A  E101 D5BE          	bz	l10612
 20881  00214E  0A03               	xorlw	3	; case 22
 20882  002150  E101 D5C1          	bz	l10614
 20883  002154  0A01               	xorlw	1	; case 23
 20884  002156  E101 D5C4          	bz	l10616
 20885  00215A  0A0F               	xorlw	15	; case 24
 20886  00215C  E101 D5C7          	bz	l10618
 20887  002160  0A01               	xorlw	1	; case 25
 20888  002162  E101 D5CA          	bz	l10620
 20889  002166  0A3F               	xorlw	63	; case 38
 20890  002168  E101 D5CD          	bz	l10622
 20891  00216C  0A01               	xorlw	1	; case 39
 20892  00216E  E101 D5D0          	bz	l10624
 20893  002172  0A0F               	xorlw	15	; case 40
 20894  002174  E101 D5D3          	bz	l10626
 20895  002178  0A01               	xorlw	1	; case 41
 20896  00217A  E101 D5D6          	bz	l10628
 20897  00217E  0A03               	xorlw	3	; case 42
 20898  002180  E101 D5D9          	bz	l10630
 20899  002184  0A01               	xorlw	1	; case 43
 20900  002186  E101 D5DC          	bz	l10632
 20901  00218A  0A07               	xorlw	7	; case 44
 20902  00218C  E101 D5DF          	bz	l10634
 20903  002190  0A01               	xorlw	1	; case 45
 20904  002192  E101 D5E2          	bz	l10636
 20905  002196  0A03               	xorlw	3	; case 46
 20906  002198  E101 D5E5          	bz	l10638
 20907  00219C  0A01               	xorlw	1	; case 47
 20908  00219E  E101 D5E8          	bz	l10640
 20909  0021A2  0A1F               	xorlw	31	; case 48
 20910  0021A4  E101 D5EB          	bz	l10642
 20911  0021A8  0A01               	xorlw	1	; case 49
 20912  0021AA  E101 D5EE          	bz	l10644
 20913  0021AE  0A03               	xorlw	3	; case 50
 20914  0021B0  E101 D5F1          	bz	l10646
 20915  0021B4  0A01               	xorlw	1	; case 51
 20916  0021B6  E101 D5F4          	bz	l10648
 20917  0021BA  0A07               	xorlw	7	; case 52
 20918  0021BC  E101 D5F7          	bz	l10650
 20919  0021C0  0A01               	xorlw	1	; case 53
 20920  0021C2  E101 D5FA          	bz	l10652
 20921  0021C6  0A03               	xorlw	3	; case 54
 20922  0021C8  E101 D5FD          	bz	l10654
 20923  0021CC  0A01               	xorlw	1	; case 55
 20924  0021CE  E101 D600          	bz	l10656
 20925  0021D2  0A0F               	xorlw	15	; case 56
 20926  0021D4  E101 D603          	bz	l10658
 20927  0021D8  0A01               	xorlw	1	; case 57
 20928  0021DA  E101 D606          	bz	l10660
 20929  0021DE  0A03               	xorlw	3	; case 58
 20930  0021E0  E101 D609          	bz	l10662
 20931  0021E4  0A01               	xorlw	1	; case 59
 20932  0021E6  E101 D60C          	bz	l10664
 20933  0021EA  0A07               	xorlw	7	; case 60
 20934  0021EC  E101 D60F          	bz	l10666
 20935  0021F0  0A01               	xorlw	1	; case 61
 20936  0021F2  E101 D612          	bz	l10668
 20937  0021F6  0A03               	xorlw	3	; case 62
 20938  0021F8  E101 D615          	bz	l10670
 20939  0021FC  0A01               	xorlw	1	; case 63
 20940  0021FE  E101 D618          	bz	l10672
 20941  002202  0A7F               	xorlw	127	; case 64
 20942  002204  E101 D61B          	bz	l10674
 20943  002208  0A01               	xorlw	1	; case 65
 20944  00220A  E101 D61E          	bz	l10676
 20945  00220E  0A03               	xorlw	3	; case 66
 20946  002210  E101 D621          	bz	l10678
 20947  002214  0A01               	xorlw	1	; case 67
 20948  002216  E101 D624          	bz	l10680
 20949  00221A  0A07               	xorlw	7	; case 68
 20950  00221C  E101 D627          	bz	l10682
 20951  002220  0A01               	xorlw	1	; case 69
 20952  002222  E101 D62A          	bz	l10684
 20953  002226  0A03               	xorlw	3	; case 70
 20954  002228  E101 D62D          	bz	l10686
 20955  00222C  0A01               	xorlw	1	; case 71
 20956  00222E  E101 D630          	bz	l10688
 20957  002232  0A0F               	xorlw	15	; case 72
 20958  002234  E101 D633          	bz	l10690
 20959  002238  0A01               	xorlw	1	; case 73
 20960  00223A  E101 D636          	bz	l10692
 20961  00223E  0A03               	xorlw	3	; case 74
 20962  002240  E101 D639          	bz	l10694
 20963  002244  0A01               	xorlw	1	; case 75
 20964  002246  E101 D63C          	bz	l10696
 20965  00224A  0A07               	xorlw	7	; case 76
 20966  00224C  E101 D63F          	bz	l10698
 20967  002250  0A01               	xorlw	1	; case 77
 20968  002252  E101 D642          	bz	l10700
 20969  002256  0A03               	xorlw	3	; case 78
 20970  002258  E101 D645          	bz	l10702
 20971  00225C  0A01               	xorlw	1	; case 79
 20972  00225E  E101 D648          	bz	l10704
 20973  002262  0A1F               	xorlw	31	; case 80
 20974  002264  E101 D64B          	bz	l10706
 20975  002268  0A01               	xorlw	1	; case 81
 20976  00226A  E101 D64E          	bz	l10708
 20977  00226E  0A03               	xorlw	3	; case 82
 20978  002270  E101 D651          	bz	l10710
 20979  002274  0A01               	xorlw	1	; case 83
 20980  002276  E101 D654          	bz	l10712
 20981  00227A  0A07               	xorlw	7	; case 84
 20982  00227C  E101 D657          	bz	l10714
 20983  002280  0A01               	xorlw	1	; case 85
 20984  002282  E101 D65A          	bz	l10716
 20985  002286  0A03               	xorlw	3	; case 86
 20986  002288  E101 D65D          	bz	l10718
 20987  00228C  0A01               	xorlw	1	; case 87
 20988  00228E  E101 D660          	bz	l10720
 20989  002292  0A0F               	xorlw	15	; case 88
 20990  002294  E101 D663          	bz	l10722
 20991  002298  0A01               	xorlw	1	; case 89
 20992  00229A  E101 D666          	bz	l10724
 20993  00229E  0A03               	xorlw	3	; case 90
 20994  0022A0  E101 D669          	bz	l10726
 20995  0022A4  0A01               	xorlw	1	; case 91
 20996  0022A6  E101 D66C          	bz	l10728
 20997  0022AA  0A07               	xorlw	7	; case 92
 20998  0022AC  E101 D66F          	bz	l10730
 20999  0022B0  0A01               	xorlw	1	; case 93
 21000  0022B2  E101 D672          	bz	l10732
 21001  0022B6  0A03               	xorlw	3	; case 94
 21002  0022B8  E101 D675          	bz	l10734
 21003  0022BC  0A01               	xorlw	1	; case 95
 21004  0022BE  E101 D678          	bz	l10736
 21005  0022C2  0A3F               	xorlw	63	; case 96
 21006  0022C4  E101 D67B          	bz	l10738
 21007  0022C8  0A01               	xorlw	1	; case 97
 21008  0022CA  E101 D67E          	bz	l10740
 21009  0022CE  0A03               	xorlw	3	; case 98
 21010  0022D0  E101 D681          	bz	l10742
 21011  0022D4  0A01               	xorlw	1	; case 99
 21012  0022D6  E101 D684          	bz	l10744
 21013  0022DA  0A07               	xorlw	7	; case 100
 21014  0022DC  E101 D687          	bz	l10746
 21015  0022E0  0A01               	xorlw	1	; case 101
 21016  0022E2  E101 D68A          	bz	l10748
 21017  0022E6  0A03               	xorlw	3	; case 102
 21018  0022E8  E101 D68D          	bz	l10750
 21019  0022EC  0A01               	xorlw	1	; case 103
 21020  0022EE  E101 D690          	bz	l10752
 21021  0022F2  0A0F               	xorlw	15	; case 104
 21022  0022F4  E101 D693          	bz	l10754
 21023  0022F8  0A01               	xorlw	1	; case 105
 21024  0022FA  E101 D696          	bz	l10756
 21025  0022FE  0A03               	xorlw	3	; case 106
 21026  002300  E101 D699          	bz	l10758
 21027  002304  0A01               	xorlw	1	; case 107
 21028  002306  E101 D69C          	bz	l10760
 21029  00230A  0A07               	xorlw	7	; case 108
 21030  00230C  E101 D69F          	bz	l10762
 21031  002310  0A01               	xorlw	1	; case 109
 21032  002312  E101 D6A2          	bz	l10764
 21033  002316  0A03               	xorlw	3	; case 110
 21034  002318  E101 D6A5          	bz	l10766
 21035  00231C  0A01               	xorlw	1	; case 111
 21036  00231E  E101 D6A8          	bz	l10768
 21037  002322  0A1F               	xorlw	31	; case 112
 21038  002324  E101 D6AB          	bz	l10770
 21039  002328  0A01               	xorlw	1	; case 113
 21040  00232A  E101 D6AE          	bz	l10772
 21041  00232E  0A03               	xorlw	3	; case 114
 21042  002330  E101 D6B1          	bz	l10774
 21043  002334  0A01               	xorlw	1	; case 115
 21044  002336  E101 D6B4          	bz	l10776
 21045  00233A  0A07               	xorlw	7	; case 116
 21046  00233C  E101 D6B7          	bz	l410
 21047  002340  0A01               	xorlw	1	; case 117
 21048  002342  E101 D6B4          	bz	l410
 21049  002346  0A03               	xorlw	3	; case 118
 21050  002348  E101 D6B3          	bz	l10778
 21051  00234C  0A01               	xorlw	1	; case 119
 21052  00234E  E101 D6B6          	bz	l10780
 21053  002352  D6AD               	goto	l410
 21054  002354                     l10786:
 21055                           
 21056                           ; BSR set to: 0
 21057                           ;main.c: 1860: else if (1 == vscp_page_select) {
 21058  002354  0446               	decf	_vscp_page_select,w,c
 21059  002356  1047               	iorwf	_vscp_page_select+1,w,c
 21060  002358  E12B               	bnz	l10808
 21061                           
 21062                           ; BSR set to: 0
 21063                           ;main.c: 1862: if (reg < 72) {
 21064  00235A  0E48               	movlw	72
 21065  00235C  6013               	cpfslt	vscp_readAppReg@reg,c
 21066  00235E  D009               	goto	l10792
 21067                           
 21068                           ; BSR set to: 0
 21069                           ;main.c: 1863: rv = readEEPROM(0xAA + reg ) ;
 21070  002360  0EAA               	movlw	170
 21071  002362  2413               	addwf	vscp_readAppReg@reg,w,c
 21072  002364  6E0E               	movwf	?_readEEPROM,c
 21073  002366  6A0F               	clrf	?_readEEPROM+1,c
 21074  002368  0E00               	movlw	0
 21075  00236A  220F               	addwfc	?_readEEPROM+1,f,c
 21076  00236C  EC62  F02A         	call	_readEEPROM	;wreg free
 21077  002370  D01E               	goto	L53
 21078  002372                     l10792:
 21079                           
 21080                           ; BSR set to: 0
 21081                           ;main.c: 1866: else if (reg < 84) {
 21082  002372  0E54               	movlw	84
 21083  002374  6013               	cpfslt	vscp_readAppReg@reg,c
 21084  002376  D010               	goto	l10804
 21085                           
 21086                           ; BSR set to: 0
 21087                           ;main.c: 1868: uint8_t pos = reg - 72;
 21088  002378  5013               	movf	vscp_readAppReg@reg,w,c
 21089  00237A  0FB8               	addlw	184
 21090  00237C  6E12               	movwf	vscp_readAppReg@pos,c
 21091                           
 21092                           ; BSR set to: 0
 21093                           ;main.c: 1869: if ( pos % 2 ) {
 21094  00237E  A012               	btfss	vscp_readAppReg@pos,0,c
 21095  002380  D002               	goto	l10800
 21096                           
 21097                           ; BSR set to: 0
 21098                           ;main.c: 1870: pos--;
 21099  002382  0612               	decf	vscp_readAppReg@pos,f,c
 21100                           
 21101                           ;main.c: 1871: }
 21102  002384  D001               	goto	l10802
 21103  002386                     l10800:
 21104                           
 21105                           ; BSR set to: 0
 21106                           ;main.c: 1872: else {
 21107                           ;main.c: 1873: pos++;
 21108  002386  2A12               	incf	vscp_readAppReg@pos,f,c
 21109  002388                     l10802:
 21110                           
 21111                           ; BSR set to: 0
 21112                           ;main.c: 1874: }
 21113                           ;main.c: 1875: rv = adc[ pos ];
 21114  002388  0E85               	movlw	low _adc
 21115  00238A  2412               	addwf	vscp_readAppReg@pos,w,c
 21116  00238C  6ED9               	movwf	fsr2l,c
 21117  00238E  6ADA               	clrf	fsr2h,c
 21118  002390  0E01               	movlw	high _adc
 21119  002392  22DA               	addwfc	fsr2h,f,c
 21120  002394  50DF               	movf	indf2,w,c
 21121  002396  D00B               	goto	L53
 21122  002398                     l10804:
 21123                           
 21124                           ; BSR set to: 0
 21125                           ;main.c: 1878: else if (reg < 98) {
 21126  002398  0E62               	movlw	98
 21127  00239A  6013               	cpfslt	vscp_readAppReg@reg,c
 21128  00239C  D009               	goto	l10808
 21129                           
 21130                           ; BSR set to: 0
 21131                           ;main.c: 1879: rv = readEEPROM( 0x9E + reg - 84 ) ;
 21132  00239E  0E4A               	movlw	74
 21133  0023A0  2413               	addwf	vscp_readAppReg@reg,w,c
 21134  0023A2  6E0E               	movwf	?_readEEPROM,c
 21135  0023A4  6A0F               	clrf	?_readEEPROM+1,c
 21136  0023A6  0E00               	movlw	0
 21137  0023A8  220F               	addwfc	?_readEEPROM+1,f,c
 21138  0023AA  EC62  F02A         	call	_readEEPROM	;wreg free
 21139  0023AE                     L53:
 21140  0023AE  6E14               	movwf	vscp_readAppReg@rv,c
 21141  0023B0                     l10808:
 21142                           
 21143                           ;main.c: 1880: }
 21144                           ;main.c: 1881: }
 21145                           ;main.c: 1883: return rv;
 21146  0023B0  5014               	movf	vscp_readAppReg@rv,w,c
 21147  0023B2  0012               	return	
 21148  0023B4                     __end_of_vscp_readAppReg:
 21149                           	opt stack 0
 21150                           tblptru	equ	0xFF8
 21151                           tblptrh	equ	0xFF7
 21152                           tblptrl	equ	0xFF6
 21153                           tablat	equ	0xFF5
 21154                           prodh	equ	0xFF4
 21155                           prodl	equ	0xFF3
 21156                           intcon	equ	0xFF2
 21157                           postinc0	equ	0xFEE
 21158                           wreg	equ	0xFE8
 21159                           indf1	equ	0xFE7
 21160                           postdec1	equ	0xFE5
 21161                           fsr1h	equ	0xFE2
 21162                           fsr1l	equ	0xFE1
 21163                           indf2	equ	0xFDF
 21164                           postinc2	equ	0xFDE
 21165                           postdec2	equ	0xFDD
 21166                           plusw2	equ	0xFDB
 21167                           fsr2h	equ	0xFDA
 21168                           fsr2l	equ	0xFD9
 21169                           status	equ	0xFD8
 21170                           
 21171 ;; *************** function _interrupt_at_low_vector *****************
 21172 ;; Defined at:
 21173 ;;		line 135 in file "../main.c"
 21174 ;; Parameters:    Size  Location     Type
 21175 ;;		None
 21176 ;; Auto vars:     Size  Location     Type
 21177 ;;		None
 21178 ;; Return value:  Size  Location     Type
 21179 ;;		None               void
 21180 ;; Registers used:
 21181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21182 ;; Tracked objects:
 21183 ;;		On entry : 0/0
 21184 ;;		On exit  : 0/0
 21185 ;;		Unchanged: 0/0
 21186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21187 ;;      Params:         0       0       0       0       0       0       0
 21188 ;;      Locals:         0       0       0       0       0       0       0
 21189 ;;      Temps:          9       0       0       0       0       0       0
 21190 ;;      Totals:         9       0       0       0       0       0       0
 21191 ;;Total ram usage:        9 bytes
 21192 ;; Hardware stack levels used:    1
 21193 ;; Hardware stack levels required when called:    1
 21194 ;; This function calls:
 21195 ;;		i1_ConvertADC
 21196 ;;		i1_WriteTimer0
 21197 ;; This function is called by:
 21198 ;;		Interrupt level 1
 21199 ;; This function uses a non-reentrant model
 21200 ;;
 21201                           
 21202                           	psect	intcodelo
 21203  000018                     __pintcodelo:
 21204                           	opt stack 0
 21205  000018                     _interrupt_at_low_vector:
 21206                           	opt stack 21
 21207                           
 21208                           ;incstack = 0
 21209  000018  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 21210  00001C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 21211  000020  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 21212  000024  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 21213  000028  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 21214  00002C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 21215  000030  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 21216  000034                     
 21217                           ;main.c: 137: if (INTCONbits.TMR0IF) {
 21218  000034  A4F2               	btfss	intcon,2,c	;volatile
 21219  000036  D001               	goto	i1u716_21
 21220  000038  D001               	goto	i1u716_20
 21221  00003A                     i1u716_21:
 21222  00003A  D044               	goto	i1l9218
 21223  00003C                     i1u716_20:
 21224  00003C                     
 21225                           ;main.c: 140: WriteTimer0(0xfb1d);
 21226  00003C  0EFB               	movlw	251
 21227  00003E  6E02               	movwf	?i1_WriteTimer0+1,c
 21228  000040  0E1D               	movlw	29
 21229  000042  6E01               	movwf	?i1_WriteTimer0,c
 21230  000044  EC90  F02A         	call	i1_WriteTimer0	;wreg free
 21231  000048                     
 21232                           ;main.c: 142: vscp_timer++;
 21233  000048  0100               	movlb	0	; () banked
 21234  00004A  4B76               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 21235  00004C  2B77               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 21236  00004E                     
 21237                           ; BSR set to: 0
 21238                           ;main.c: 143: vscp_configtimer++;
 21239  00004E  4B74               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 21240  000050  2B75               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 21241  000052                     
 21242                           ; BSR set to: 0
 21243                           ;main.c: 144: measurement_clock++;
 21244  000052  0E01               	movlw	1
 21245  000054  276C               	addwf	_measurement_clock& (0+255),f,b	;volatile
 21246  000056  0E00               	movlw	0
 21247  000058  236D               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 21248  00005A  0E00               	movlw	0
 21249  00005C  236E               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 21250  00005E  0E00               	movlw	0
 21251  000060  236F               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 21252  000062                     
 21253                           ; BSR set to: 0
 21254                           ;main.c: 145: timeout_clock++;
 21255  000062  0E01               	movlw	1
 21256  000064  2770               	addwf	_timeout_clock& (0+255),f,b	;volatile
 21257  000066  0E00               	movlw	0
 21258  000068  2371               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 21259  00006A  0E00               	movlw	0
 21260  00006C  2372               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 21261  00006E  0E00               	movlw	0
 21262  000070  2373               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 21263  000072                     
 21264                           ; BSR set to: 0
 21265                           ;main.c: 146: sendTimer++;
 21266  000072  2B81               	incf	_sendTimer& (0+255),f,b	;volatile
 21267  000074                     
 21268                           ; BSR set to: 0
 21269                           ;main.c: 149: if (!(PORTC & 0x01)) {
 21270  000074  B082               	btfsc	3970,0,c	;volatile
 21271  000076  D001               	goto	i1u717_21
 21272  000078  D001               	goto	i1u717_20
 21273  00007A                     i1u717_21:
 21274  00007A  D002               	goto	i1l138
 21275  00007C                     i1u717_20:
 21276  00007C                     
 21277                           ; BSR set to: 0
 21278                           ;main.c: 151: vscp_initbtncnt++;
 21279  00007C  2B83               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21280                           
 21281                           ;main.c: 152: }
 21282  00007E  D001               	goto	i1l9192
 21283  000080                     i1l138:
 21284                           
 21285                           ; BSR set to: 0
 21286                           ;main.c: 153: else {
 21287                           ;main.c: 154: vscp_initbtncnt = 0;
 21288  000080  6B83               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21289  000082                     i1l9192:
 21290                           
 21291                           ; BSR set to: 0
 21292                           ;main.c: 155: }
 21293                           ;main.c: 158: vscp_statuscnt++;
 21294  000082  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21295  000084                     
 21296                           ; BSR set to: 0
 21297                           ;main.c: 159: if ( ( 0x02 ==
 21298                           ;main.c: 160: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21299  000084  504C               	movf	_vscp_initledfunc,w,c
 21300  000086  0A02               	xorlw	2
 21301  000088  A4D8               	btfss	status,2,c
 21302  00008A  D001               	goto	i1u718_21
 21303  00008C  D001               	goto	i1u718_20
 21304  00008E                     i1u718_21:
 21305  00008E  D00E               	goto	i1l9206
 21306  000090                     i1u718_20:
 21307  000090                     
 21308                           ; BSR set to: 0
 21309  000090  0E64               	movlw	100
 21310  000092  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21311  000094  D001               	goto	i1u719_21
 21312  000096  D001               	goto	i1u719_20
 21313  000098                     i1u719_21:
 21314  000098  D009               	goto	i1l9206
 21315  00009A                     i1u719_20:
 21316  00009A                     
 21317                           ; BSR set to: 0
 21318                           ;main.c: 161: if ( PORTC & 0x02 ) {
 21319  00009A  A282               	btfss	3970,1,c	;volatile
 21320  00009C  D001               	goto	i1u720_21
 21321  00009E  D001               	goto	i1u720_20
 21322  0000A0                     i1u720_21:
 21323  0000A0  D002               	goto	i1l9202
 21324  0000A2                     i1u720_20:
 21325  0000A2                     i1l9200:
 21326                           
 21327                           ; BSR set to: 0
 21328                           ;main.c: 162: PORTC &= ~0x02;
 21329  0000A2  9282               	bcf	3970,1,c	;volatile
 21330                           
 21331                           ;main.c: 163: }
 21332  0000A4  D001               	goto	i1l9204
 21333  0000A6                     i1l9202:
 21334                           
 21335                           ; BSR set to: 0
 21336                           ;main.c: 164: else {
 21337                           ;main.c: 165: PORTC |= 0x02;
 21338  0000A6  8282               	bsf	3970,1,c	;volatile
 21339  0000A8                     i1l9204:
 21340                           
 21341                           ; BSR set to: 0
 21342                           ;main.c: 166: }
 21343                           ;main.c: 167: vscp_statuscnt = 0;
 21344  0000A8  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21345                           
 21346                           ;main.c: 168: }
 21347  0000AA  D00B               	goto	i1l9216
 21348  0000AC                     i1l9206:
 21349                           
 21350                           ; BSR set to: 0
 21351                           ;main.c: 169: else if (0x01 == vscp_initledfunc) {
 21352  0000AC  044C               	decf	_vscp_initledfunc,w,c
 21353  0000AE  A4D8               	btfss	status,2,c
 21354  0000B0  D001               	goto	i1u721_21
 21355  0000B2  D001               	goto	i1u721_20
 21356  0000B4                     i1u721_21:
 21357  0000B4  D001               	goto	i1l144
 21358  0000B6                     i1u721_20:
 21359  0000B6  D7F7               	goto	i1l9202
 21360  0000B8                     i1l144:
 21361                           
 21362                           ; BSR set to: 0
 21363                           ;main.c: 173: else if (0x00 == vscp_initledfunc) {
 21364  0000B8  664C               	tstfsz	_vscp_initledfunc,c
 21365  0000BA  D001               	goto	i1u722_21
 21366  0000BC  D001               	goto	i1u722_20
 21367  0000BE                     i1u722_21:
 21368  0000BE  D001               	goto	i1l9216
 21369  0000C0                     i1u722_20:
 21370  0000C0  D7F0               	goto	i1l9200
 21371  0000C2                     i1l9216:
 21372                           
 21373                           ; BSR set to: 0
 21374                           ;main.c: 176: }
 21375                           ;main.c: 178: INTCONbits.TMR0IF = 0;
 21376  0000C2  94F2               	bcf	intcon,2,c	;volatile
 21377  0000C4                     i1l9218:
 21378                           
 21379                           ;main.c: 180: }
 21380                           ;main.c: 183: if ( PIR1bits.ADIF ) {
 21381  0000C4  AC9E               	btfss	3998,6,c	;volatile
 21382  0000C6  D001               	goto	i1u723_21
 21383  0000C8  D001               	goto	i1u723_20
 21384  0000CA                     i1u723_21:
 21385  0000CA  D0E5               	goto	i1l164
 21386  0000CC                     i1u723_20:
 21387  0000CC  D0C4               	goto	i1l9280
 21388  0000CE                     i1l9222:
 21389                           
 21390                           ;main.c: 189: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21391  0000CE  5049               	movf	_adc_series_counter,w,c
 21392  0000D0  0D0C               	mullw	12
 21393  0000D2  0E85               	movlw	low _adc
 21394  0000D4  24F3               	addwf	prodl,w,c
 21395  0000D6  6ED9               	movwf	fsr2l,c
 21396  0000D8  0E01               	movlw	high _adc
 21397  0000DA  20F4               	addwfc	prodh,w,c
 21398  0000DC  6EDA               	movwf	fsr2h,c
 21399  0000DE  CFC4 FFDF          	movff	4036,indf2	;volatile
 21400                           
 21401                           ;main.c: 190: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21402  0000E2  5049               	movf	_adc_series_counter,w,c
 21403  0000E4  0D0C               	mullw	12
 21404  0000E6  0E86               	movlw	low (_adc+1)
 21405  0000E8  24F3               	addwf	prodl,w,c
 21406  0000EA  6ED9               	movwf	fsr2l,c
 21407  0000EC  0E01               	movlw	high (_adc+1)
 21408  0000EE  20F4               	addwfc	prodh,w,c
 21409  0000F0  6EDA               	movwf	fsr2h,c
 21410  0000F2  CFC3 FFDF          	movff	4035,indf2	;volatile
 21411  0000F6                     
 21412                           ;main.c: 192: ADCON0 = (2<<2) + 1;
 21413  0000F6  0E09               	movlw	9
 21414  0000F8  6EC2               	movwf	4034,c	;volatile
 21415  0000FA                     
 21416                           ;main.c: 196: if ((80 - 1) == adc_series_counter) {
 21417  0000FA  5049               	movf	_adc_series_counter,w,c
 21418  0000FC  0A4F               	xorlw	79
 21419  0000FE  A4D8               	btfss	status,2,c
 21420  000100  D001               	goto	i1u724_21
 21421  000102  D001               	goto	i1u724_20
 21422  000104                     i1u724_21:
 21423  000104  D0C5               	goto	i1l9282
 21424  000106                     i1u724_20:
 21425  000106                     
 21426                           ;main.c: 197: adc_conversion_flags |= 1;
 21427  000106  0100               	movlb	0	; () banked
 21428  000108  817D               	bsf	_adc_conversion_flags& (0+255),0,b
 21429  00010A  D0C2               	goto	i1l9282
 21430  00010C                     i1l9230:
 21431                           
 21432                           ;main.c: 203: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21433  00010C  5049               	movf	_adc_series_counter,w,c
 21434  00010E  0D0C               	mullw	12
 21435  000110  0E87               	movlw	low (_adc+2)
 21436  000112  24F3               	addwf	prodl,w,c
 21437  000114  6ED9               	movwf	fsr2l,c
 21438  000116  0E01               	movlw	high (_adc+2)
 21439  000118  20F4               	addwfc	prodh,w,c
 21440  00011A  6EDA               	movwf	fsr2h,c
 21441  00011C  CFC4 FFDF          	movff	4036,indf2	;volatile
 21442                           
 21443                           ;main.c: 204: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21444  000120  5049               	movf	_adc_series_counter,w,c
 21445  000122  0D0C               	mullw	12
 21446  000124  0E88               	movlw	low (_adc+3)
 21447  000126  24F3               	addwf	prodl,w,c
 21448  000128  6ED9               	movwf	fsr2l,c
 21449  00012A  0E01               	movlw	high (_adc+3)
 21450  00012C  20F4               	addwfc	prodh,w,c
 21451  00012E  6EDA               	movwf	fsr2h,c
 21452  000130  CFC3 FFDF          	movff	4035,indf2	;volatile
 21453  000134                     
 21454                           ;main.c: 207: ADCON0 = (1<<2) + 1;
 21455  000134  0E05               	movlw	5
 21456  000136  6EC2               	movwf	4034,c	;volatile
 21457  000138                     
 21458                           ;main.c: 211: if ((80 - 1) == adc_series_counter) {
 21459  000138  5049               	movf	_adc_series_counter,w,c
 21460  00013A  0A4F               	xorlw	79
 21461  00013C  A4D8               	btfss	status,2,c
 21462  00013E  D001               	goto	i1u725_21
 21463  000140  D001               	goto	i1u725_20
 21464  000142                     i1u725_21:
 21465  000142  D0A6               	goto	i1l9282
 21466  000144                     i1u725_20:
 21467  000144                     
 21468                           ;main.c: 212: adc_conversion_flags |= 1 << 1;
 21469  000144  0100               	movlb	0	; () banked
 21470  000146  837D               	bsf	_adc_conversion_flags& (0+255),1,b
 21471  000148  D0A3               	goto	i1l9282
 21472  00014A                     i1l9238:
 21473                           
 21474                           ;main.c: 218: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21475  00014A  5049               	movf	_adc_series_counter,w,c
 21476  00014C  0D0C               	mullw	12
 21477  00014E  0E89               	movlw	low (_adc+4)
 21478  000150  24F3               	addwf	prodl,w,c
 21479  000152  6ED9               	movwf	fsr2l,c
 21480  000154  0E01               	movlw	high (_adc+4)
 21481  000156  20F4               	addwfc	prodh,w,c
 21482  000158  6EDA               	movwf	fsr2h,c
 21483  00015A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21484                           
 21485                           ;main.c: 219: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21486  00015E  5049               	movf	_adc_series_counter,w,c
 21487  000160  0D0C               	mullw	12
 21488  000162  0E8A               	movlw	low (_adc+5)
 21489  000164  24F3               	addwf	prodl,w,c
 21490  000166  6ED9               	movwf	fsr2l,c
 21491  000168  0E01               	movlw	high (_adc+5)
 21492  00016A  20F4               	addwfc	prodh,w,c
 21493  00016C  6EDA               	movwf	fsr2h,c
 21494  00016E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21495  000172                     
 21496                           ;main.c: 222: ADCON0 = (0<<2) + 1;
 21497  000172  0E01               	movlw	1
 21498  000174  6EC2               	movwf	4034,c	;volatile
 21499  000176                     
 21500                           ;main.c: 226: if ((80 - 1) == adc_series_counter) {
 21501  000176  5049               	movf	_adc_series_counter,w,c
 21502  000178  0A4F               	xorlw	79
 21503  00017A  A4D8               	btfss	status,2,c
 21504  00017C  D001               	goto	i1u726_21
 21505  00017E  D001               	goto	i1u726_20
 21506  000180                     i1u726_21:
 21507  000180  D087               	goto	i1l9282
 21508  000182                     i1u726_20:
 21509  000182                     
 21510                           ;main.c: 227: adc_conversion_flags |= 1 << 2;
 21511  000182  0100               	movlb	0	; () banked
 21512  000184  857D               	bsf	_adc_conversion_flags& (0+255),2,b
 21513  000186  D084               	goto	i1l9282
 21514  000188                     i1l9246:
 21515                           
 21516                           ;main.c: 233: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21517  000188  5049               	movf	_adc_series_counter,w,c
 21518  00018A  0D0C               	mullw	12
 21519  00018C  0E8B               	movlw	low (_adc+6)
 21520  00018E  24F3               	addwf	prodl,w,c
 21521  000190  6ED9               	movwf	fsr2l,c
 21522  000192  0E01               	movlw	high (_adc+6)
 21523  000194  20F4               	addwfc	prodh,w,c
 21524  000196  6EDA               	movwf	fsr2h,c
 21525  000198  CFC4 FFDF          	movff	4036,indf2	;volatile
 21526                           
 21527                           ;main.c: 234: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21528  00019C  5049               	movf	_adc_series_counter,w,c
 21529  00019E  0D0C               	mullw	12
 21530  0001A0  0E8C               	movlw	low (_adc+7)
 21531  0001A2  24F3               	addwf	prodl,w,c
 21532  0001A4  6ED9               	movwf	fsr2l,c
 21533  0001A6  0E01               	movlw	high (_adc+7)
 21534  0001A8  20F4               	addwfc	prodh,w,c
 21535  0001AA  6EDA               	movwf	fsr2h,c
 21536  0001AC  CFC3 FFDF          	movff	4035,indf2	;volatile
 21537  0001B0                     
 21538                           ;main.c: 236: ADCON0 = (9<<2) + 1;
 21539  0001B0  0E25               	movlw	37
 21540  0001B2  6EC2               	movwf	4034,c	;volatile
 21541  0001B4                     
 21542                           ;main.c: 240: if ((80 - 1) == adc_series_counter) {
 21543  0001B4  5049               	movf	_adc_series_counter,w,c
 21544  0001B6  0A4F               	xorlw	79
 21545  0001B8  A4D8               	btfss	status,2,c
 21546  0001BA  D001               	goto	i1u727_21
 21547  0001BC  D001               	goto	i1u727_20
 21548  0001BE                     i1u727_21:
 21549  0001BE  D068               	goto	i1l9282
 21550  0001C0                     i1u727_20:
 21551  0001C0                     
 21552                           ;main.c: 241: adc_conversion_flags |= 1 << 3;
 21553  0001C0  0100               	movlb	0	; () banked
 21554  0001C2  877D               	bsf	_adc_conversion_flags& (0+255),3,b
 21555  0001C4  D065               	goto	i1l9282
 21556  0001C6                     i1l9254:
 21557                           
 21558                           ;main.c: 247: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21559  0001C6  5049               	movf	_adc_series_counter,w,c
 21560  0001C8  0D0C               	mullw	12
 21561  0001CA  0E8D               	movlw	low (_adc+8)
 21562  0001CC  24F3               	addwf	prodl,w,c
 21563  0001CE  6ED9               	movwf	fsr2l,c
 21564  0001D0  0E01               	movlw	high (_adc+8)
 21565  0001D2  20F4               	addwfc	prodh,w,c
 21566  0001D4  6EDA               	movwf	fsr2h,c
 21567  0001D6  CFC4 FFDF          	movff	4036,indf2	;volatile
 21568                           
 21569                           ;main.c: 248: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21570  0001DA  5049               	movf	_adc_series_counter,w,c
 21571  0001DC  0D0C               	mullw	12
 21572  0001DE  0E8E               	movlw	low (_adc+9)
 21573  0001E0  24F3               	addwf	prodl,w,c
 21574  0001E2  6ED9               	movwf	fsr2l,c
 21575  0001E4  0E01               	movlw	high (_adc+9)
 21576  0001E6  20F4               	addwfc	prodh,w,c
 21577  0001E8  6EDA               	movwf	fsr2h,c
 21578  0001EA  CFC3 FFDF          	movff	4035,indf2	;volatile
 21579  0001EE                     
 21580                           ;main.c: 250: ADCON0 = (8<<2) + 1;
 21581  0001EE  0E21               	movlw	33
 21582  0001F0  6EC2               	movwf	4034,c	;volatile
 21583  0001F2                     
 21584                           ;main.c: 254: if ((80 - 1) == adc_series_counter) {
 21585  0001F2  5049               	movf	_adc_series_counter,w,c
 21586  0001F4  0A4F               	xorlw	79
 21587  0001F6  A4D8               	btfss	status,2,c
 21588  0001F8  D001               	goto	i1u728_21
 21589  0001FA  D001               	goto	i1u728_20
 21590  0001FC                     i1u728_21:
 21591  0001FC  D049               	goto	i1l9282
 21592  0001FE                     i1u728_20:
 21593  0001FE                     
 21594                           ;main.c: 255: adc_conversion_flags |= 1 << 4;
 21595  0001FE  0100               	movlb	0	; () banked
 21596  000200  897D               	bsf	_adc_conversion_flags& (0+255),4,b
 21597  000202  D046               	goto	i1l9282
 21598  000204                     i1l9262:
 21599                           
 21600                           ;main.c: 261: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21601  000204  5049               	movf	_adc_series_counter,w,c
 21602  000206  0D0C               	mullw	12
 21603  000208  0E8F               	movlw	low (_adc+10)
 21604  00020A  24F3               	addwf	prodl,w,c
 21605  00020C  6ED9               	movwf	fsr2l,c
 21606  00020E  0E01               	movlw	high (_adc+10)
 21607  000210  20F4               	addwfc	prodh,w,c
 21608  000212  6EDA               	movwf	fsr2h,c
 21609  000214  CFC4 FFDF          	movff	4036,indf2	;volatile
 21610                           
 21611                           ;main.c: 262: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21612  000218  5049               	movf	_adc_series_counter,w,c
 21613  00021A  0D0C               	mullw	12
 21614  00021C  0E90               	movlw	low (_adc+11)
 21615  00021E  24F3               	addwf	prodl,w,c
 21616  000220  6ED9               	movwf	fsr2l,c
 21617  000222  0E01               	movlw	high (_adc+11)
 21618  000224  20F4               	addwfc	prodh,w,c
 21619  000226  6EDA               	movwf	fsr2h,c
 21620  000228  CFC3 FFDF          	movff	4035,indf2	;volatile
 21621  00022C                     
 21622                           ;main.c: 264: ADCON0 = (10<<2) + 1;
 21623  00022C  0E29               	movlw	41
 21624  00022E  6EC2               	movwf	4034,c	;volatile
 21625  000230                     
 21626                           ;main.c: 268: if ((80 - 1) == adc_series_counter) {
 21627  000230  5049               	movf	_adc_series_counter,w,c
 21628  000232  0A4F               	xorlw	79
 21629  000234  A4D8               	btfss	status,2,c
 21630  000236  D001               	goto	i1u729_21
 21631  000238  D001               	goto	i1u729_20
 21632  00023A                     i1u729_21:
 21633  00023A  D002               	goto	i1l161
 21634  00023C                     i1u729_20:
 21635  00023C                     
 21636                           ;main.c: 269: adc_conversion_flags |= 1 << 5;
 21637  00023C  0100               	movlb	0	; () banked
 21638  00023E  8B7D               	bsf	_adc_conversion_flags& (0+255),5,b
 21639  000240                     i1l161:
 21640                           
 21641                           ;main.c: 270: }
 21642                           ;main.c: 273: adc_series_counter++;
 21643  000240  2A49               	incf	_adc_series_counter,f,c
 21644  000242                     
 21645                           ;main.c: 274: if (adc_series_counter >= 80) {
 21646  000242  0E4F               	movlw	79
 21647  000244  6449               	cpfsgt	_adc_series_counter,c
 21648  000246  D001               	goto	i1u730_21
 21649  000248  D001               	goto	i1u730_20
 21650  00024A                     i1u730_21:
 21651  00024A  D022               	goto	i1l9282
 21652  00024C                     i1u730_20:
 21653  00024C                     i1l9272:
 21654                           
 21655                           ;main.c: 275: adc_series_counter = 0;
 21656  00024C  6A49               	clrf	_adc_series_counter,c
 21657  00024E  D020               	goto	i1l9282
 21658  000250                     i1l9274:
 21659                           
 21660                           ;main.c: 281: ADCON0 = (10<<2) + 1;
 21661  000250  0E29               	movlw	41
 21662  000252  6EC2               	movwf	4034,c	;volatile
 21663  000254  D7FB               	goto	i1l9272
 21664  000256                     i1l9280:
 21665  000256  50C2               	movf	4034,w,c	;volatile
 21666  000258  0B3C               	andlw	60
 21667  00025A  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21668  00025C  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21669                           
 21670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21671                           ; Switch size 1, requested type "space"
 21672                           ; Number of cases is 1, Range of values is 0 to 0
 21673                           ; switch strategies available:
 21674                           ; Name         Instructions Cycles
 21675                           ; simple_byte            4     3 (average)
 21676                           ;	Chosen strategy is simple_byte
 21677  00025E  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21678  000260  0A00               	xorlw	0	; case 0
 21679  000262  B4D8               	btfsc	status,2,c
 21680  000264  D001               	goto	i1l14462
 21681  000266  D7F4               	goto	i1l9274
 21682  000268                     i1l14462:
 21683                           
 21684                           ; Switch size 1, requested type "space"
 21685                           ; Number of cases is 6, Range of values is 0 to 40
 21686                           ; switch strategies available:
 21687                           ; Name         Instructions Cycles
 21688                           ; simple_byte           19    10 (average)
 21689                           ;	Chosen strategy is simple_byte
 21690  000268  5005               	movf	??_interrupt_at_low_vector,w,c
 21691  00026A  0A00               	xorlw	0	; case 0
 21692  00026C  B4D8               	btfsc	status,2,c
 21693  00026E  D78C               	goto	i1l9246
 21694  000270  0A04               	xorlw	4	; case 4
 21695  000272  B4D8               	btfsc	status,2,c
 21696  000274  D76A               	goto	i1l9238
 21697  000276  0A0C               	xorlw	12	; case 8
 21698  000278  B4D8               	btfsc	status,2,c
 21699  00027A  D748               	goto	i1l9230
 21700  00027C  0A28               	xorlw	40	; case 32
 21701  00027E  B4D8               	btfsc	status,2,c
 21702  000280  D7C1               	goto	i1l9262
 21703  000282  0A04               	xorlw	4	; case 36
 21704  000284  B4D8               	btfsc	status,2,c
 21705  000286  D79F               	goto	i1l9254
 21706  000288  0A0C               	xorlw	12	; case 40
 21707  00028A  B4D8               	btfsc	status,2,c
 21708  00028C  D720               	goto	i1l9222
 21709  00028E  D7E0               	goto	i1l9274
 21710  000290                     i1l9282:
 21711                           
 21712                           ;main.c: 287: ConvertADC();
 21713  000290  ECBF  F02A         	call	i1_ConvertADC	;wreg free
 21714  000294                     
 21715                           ;main.c: 289: PIR1bits.ADIF = 0;
 21716  000294  9C9E               	bcf	3998,6,c	;volatile
 21717  000296                     i1l164:
 21718  000296  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21719  00029A  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21720  00029E  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21721  0002A2  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21722  0002A6  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21723  0002AA  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21724  0002AE  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21725  0002B2  0010               	retfie	
 21726  0002B4                     __end_of_interrupt_at_low_vector:
 21727                           	opt stack 0
 21728                           tblptru	equ	0xFF8
 21729                           tblptrh	equ	0xFF7
 21730                           tblptrl	equ	0xFF6
 21731                           tablat	equ	0xFF5
 21732                           prodh	equ	0xFF4
 21733                           prodl	equ	0xFF3
 21734                           intcon	equ	0xFF2
 21735                           postinc0	equ	0xFEE
 21736                           wreg	equ	0xFE8
 21737                           indf1	equ	0xFE7
 21738                           postdec1	equ	0xFE5
 21739                           fsr1h	equ	0xFE2
 21740                           fsr1l	equ	0xFE1
 21741                           bsr	equ	0xFE0
 21742                           indf2	equ	0xFDF
 21743                           postinc2	equ	0xFDE
 21744                           postdec2	equ	0xFDD
 21745                           plusw2	equ	0xFDB
 21746                           fsr2h	equ	0xFDA
 21747                           fsr2l	equ	0xFD9
 21748                           status	equ	0xFD8
 21749                           
 21750 ;; *************** function i1_WriteTimer0 *****************
 21751 ;; Defined at:
 21752 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21753 ;; Parameters:    Size  Location     Type
 21754 ;;  timer0          2    0[COMRAM] unsigned int 
 21755 ;; Auto vars:     Size  Location     Type
 21756 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21757 ;; Return value:  Size  Location     Type
 21758 ;;		None               void
 21759 ;; Registers used:
 21760 ;;		None
 21761 ;; Tracked objects:
 21762 ;;		On entry : 0/0
 21763 ;;		On exit  : 0/0
 21764 ;;		Unchanged: 0/0
 21765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21766 ;;      Params:         2       0       0       0       0       0       0
 21767 ;;      Locals:         2       0       0       0       0       0       0
 21768 ;;      Temps:          0       0       0       0       0       0       0
 21769 ;;      Totals:         4       0       0       0       0       0       0
 21770 ;;Total ram usage:        4 bytes
 21771 ;; Hardware stack levels used:    1
 21772 ;; This function calls:
 21773 ;;		Nothing
 21774 ;; This function is called by:
 21775 ;;		_interrupt_at_low_vector
 21776 ;; This function uses a non-reentrant model
 21777 ;;
 21778                           
 21779                           	psect	text100
 21780  005520                     __ptext100:
 21781                           	opt stack 0
 21782  005520                     i1_WriteTimer0:
 21783                           	opt stack 21
 21784                           
 21785                           ;incstack = 0
 21786                           ;incstack = 0
 21787  005520  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21788  005524  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21789  005528  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21790  00552C  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21791  005530  0012               	return	
 21792  005532                     __end_ofi1_WriteTimer0:
 21793                           	opt stack 0
 21794                           tblptru	equ	0xFF8
 21795                           tblptrh	equ	0xFF7
 21796                           tblptrl	equ	0xFF6
 21797                           tablat	equ	0xFF5
 21798                           prodh	equ	0xFF4
 21799                           prodl	equ	0xFF3
 21800                           intcon	equ	0xFF2
 21801                           postinc0	equ	0xFEE
 21802                           wreg	equ	0xFE8
 21803                           indf1	equ	0xFE7
 21804                           postdec1	equ	0xFE5
 21805                           fsr1h	equ	0xFE2
 21806                           fsr1l	equ	0xFE1
 21807                           bsr	equ	0xFE0
 21808                           indf2	equ	0xFDF
 21809                           postinc2	equ	0xFDE
 21810                           postdec2	equ	0xFDD
 21811                           plusw2	equ	0xFDB
 21812                           fsr2h	equ	0xFDA
 21813                           fsr2l	equ	0xFD9
 21814                           status	equ	0xFD8
 21815                           
 21816 ;; *************** function i1_ConvertADC *****************
 21817 ;; Defined at:
 21818 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21819 ;; Parameters:    Size  Location     Type
 21820 ;;		None
 21821 ;; Auto vars:     Size  Location     Type
 21822 ;;		None
 21823 ;; Return value:  Size  Location     Type
 21824 ;;		None               void
 21825 ;; Registers used:
 21826 ;;		None
 21827 ;; Tracked objects:
 21828 ;;		On entry : 0/0
 21829 ;;		On exit  : 0/0
 21830 ;;		Unchanged: 0/0
 21831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21832 ;;      Params:         0       0       0       0       0       0       0
 21833 ;;      Locals:         0       0       0       0       0       0       0
 21834 ;;      Temps:          0       0       0       0       0       0       0
 21835 ;;      Totals:         0       0       0       0       0       0       0
 21836 ;;Total ram usage:        0 bytes
 21837 ;; Hardware stack levels used:    1
 21838 ;; This function calls:
 21839 ;;		Nothing
 21840 ;; This function is called by:
 21841 ;;		_interrupt_at_low_vector
 21842 ;; This function uses a non-reentrant model
 21843 ;;
 21844                           
 21845                           	psect	text101
 21846  00557E                     __ptext101:
 21847                           	opt stack 0
 21848  00557E                     i1_ConvertADC:
 21849                           	opt stack 21
 21850                           
 21851                           ;incstack = 0
 21852                           ;incstack = 0
 21853  00557E  82C2               	bsf	4034,1,c	;volatile
 21854  005580  0012               	return	
 21855  005582                     __end_ofi1_ConvertADC:
 21856                           	opt stack 0
 21857                           tblptru	equ	0xFF8
 21858                           tblptrh	equ	0xFF7
 21859                           tblptrl	equ	0xFF6
 21860                           tablat	equ	0xFF5
 21861                           prodh	equ	0xFF4
 21862                           prodl	equ	0xFF3
 21863                           intcon	equ	0xFF2
 21864                           postinc0	equ	0xFEE
 21865                           wreg	equ	0xFE8
 21866                           indf1	equ	0xFE7
 21867                           postdec1	equ	0xFE5
 21868                           fsr1h	equ	0xFE2
 21869                           fsr1l	equ	0xFE1
 21870                           bsr	equ	0xFE0
 21871                           indf2	equ	0xFDF
 21872                           postinc2	equ	0xFDE
 21873                           postdec2	equ	0xFDD
 21874                           plusw2	equ	0xFDB
 21875                           fsr2h	equ	0xFDA
 21876                           fsr2l	equ	0xFD9
 21877                           status	equ	0xFD8
 21878                           tblptru	equ	0xFF8
 21879                           tblptrh	equ	0xFF7
 21880                           tblptrl	equ	0xFF6
 21881                           tablat	equ	0xFF5
 21882                           prodh	equ	0xFF4
 21883                           prodl	equ	0xFF3
 21884                           intcon	equ	0xFF2
 21885                           postinc0	equ	0xFEE
 21886                           wreg	equ	0xFE8
 21887                           indf1	equ	0xFE7
 21888                           postdec1	equ	0xFE5
 21889                           fsr1h	equ	0xFE2
 21890                           fsr1l	equ	0xFE1
 21891                           bsr	equ	0xFE0
 21892                           indf2	equ	0xFDF
 21893                           postinc2	equ	0xFDE
 21894                           postdec2	equ	0xFDD
 21895                           plusw2	equ	0xFDB
 21896                           fsr2h	equ	0xFDA
 21897                           fsr2l	equ	0xFD9
 21898                           status	equ	0xFD8
 21899                           
 21900                           	psect	text102
 21901  000000                     __ptext102:
 21902                           	opt stack 0
 21903                           tblptru	equ	0xFF8
 21904                           tblptrh	equ	0xFF7
 21905                           tblptrl	equ	0xFF6
 21906                           tablat	equ	0xFF5
 21907                           prodh	equ	0xFF4
 21908                           prodl	equ	0xFF3
 21909                           intcon	equ	0xFF2
 21910                           postinc0	equ	0xFEE
 21911                           wreg	equ	0xFE8
 21912                           indf1	equ	0xFE7
 21913                           postdec1	equ	0xFE5
 21914                           fsr1h	equ	0xFE2
 21915                           fsr1l	equ	0xFE1
 21916                           bsr	equ	0xFE0
 21917                           indf2	equ	0xFDF
 21918                           postinc2	equ	0xFDE
 21919                           postdec2	equ	0xFDD
 21920                           plusw2	equ	0xFDB
 21921                           fsr2h	equ	0xFDA
 21922                           fsr2l	equ	0xFD9
 21923                           status	equ	0xFD8
 21924                           
 21925                           	psect	rparam
 21926  0000                     tblptru	equ	0xFF8
 21927                           tblptrh	equ	0xFF7
 21928                           tblptrl	equ	0xFF6
 21929                           tablat	equ	0xFF5
 21930                           prodh	equ	0xFF4
 21931                           prodl	equ	0xFF3
 21932                           intcon	equ	0xFF2
 21933                           postinc0	equ	0xFEE
 21934                           wreg	equ	0xFE8
 21935                           indf1	equ	0xFE7
 21936                           postdec1	equ	0xFE5
 21937                           fsr1h	equ	0xFE2
 21938                           fsr1l	equ	0xFE1
 21939                           bsr	equ	0xFE0
 21940                           indf2	equ	0xFDF
 21941                           postinc2	equ	0xFDE
 21942                           postdec2	equ	0xFDD
 21943                           plusw2	equ	0xFDB
 21944                           fsr2h	equ	0xFDA
 21945                           fsr2l	equ	0xFD9
 21946                           status	equ	0xFD8
 21947                           tblptru	equ	0xFF8
 21948                           tblptrh	equ	0xFF7
 21949                           tblptrl	equ	0xFF6
 21950                           tablat	equ	0xFF5
 21951                           prodh	equ	0xFF4
 21952                           prodl	equ	0xFF3
 21953                           intcon	equ	0xFF2
 21954                           postinc0	equ	0xFEE
 21955                           wreg	equ	0xFE8
 21956                           indf1	equ	0xFE7
 21957                           postdec1	equ	0xFE5
 21958                           fsr1h	equ	0xFE2
 21959                           fsr1l	equ	0xFE1
 21960                           bsr	equ	0xFE0
 21961                           indf2	equ	0xFDF
 21962                           postinc2	equ	0xFDE
 21963                           postdec2	equ	0xFDD
 21964                           plusw2	equ	0xFDB
 21965                           fsr2h	equ	0xFDA
 21966                           fsr2l	equ	0xFD9
 21967                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1116
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     64     129
    BANK1           256     54     133
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___aldiv
    ___lwtofl->___flpack
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _eval_poly->___fladd
    ___fltol->___flmul
    ___altofl->___aldiv
    ___flsub->___fladd
    ___asflmul->___flmul
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_vscp_sendEvent
    _setEventData->_Celsius2Kelvin
    _Celsius2Fahrenheit->___fladd
    ___fladd->___flmul
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_writeCoeffs2Ram
    _writeCoeffs2Ram->___wmul
    ___wmul->_readEEPROM
    ___awtofl->___flpack
    ___flmul->___awtofl
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    _log->___fldiv
    _exp->___fldiv
    _ldexp->_eval_poly
    _eval_poly->___fladd
    _floor->___altofl
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___fladd
    ___fldiv->___flsub
    _sendTempEvent->_setEventData
    _setEventData->_Celsius2Fahrenheit
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  148262
                                             63 BANK0      1     1      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              68    68      0   74037
                                             49 BANK0     14    14      0
                                              0 BANK1     54    54      0
                        _writeEEPROM
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                     _vscp_sendEvent
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     865
                                             23 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6    2070
                                             38 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    3985
                                             58 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             61 COMRAM     8     0      8
                                              0 BANK0      6     6      0
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             17 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   14303
                                             66 COMRAM     2     2      0
                                             38 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   24732
                                             38 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             12 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    6410
                                             58 COMRAM     8     1      7
                                              8 BANK0      4     4      0
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    6633
                                             11 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             51 COMRAM    10     6      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4    1120
                                              6 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    4140
                                             58 COMRAM     6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3930
                                              8 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4    2255
                                             51 COMRAM     5     1      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    1860
                                             16 BANK0     22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                      4     4      0   18687
                                             51 BANK0      4     4      0
                         _readEEPROM
                     _vscp_sendEvent
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0   15142
                                             51 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0   14697
                                             67 COMRAM     2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3   12082
                                             42 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    6955
                                             38 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    3775
                                             51 COMRAM     7     7      0
                                              0 BANK0      8     0      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    3050
                                             58 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   27056
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    7456
                                             40 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2824
                                             33 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1260
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      1     1      0     502
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     155
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4477
                                             32 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             35 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             18 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     254
                                             17 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     186
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     251
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4726
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     344
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1070
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0     758
                                             32 COMRAM     1     1      0
                    _writeCoeffs2Ram
 ---------------------------------------------------------------------------------
 (5) _writeCoeffs2Ram                                      9     9      0     628
                                             23 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     232
                                             17 COMRAM     6     2      4
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    1120
                                             23 COMRAM     6     2      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    2045
                                             29 COMRAM    22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             17 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _writeCoeffs2Ram
           _readEEPROM
           ___wmul
             _readEEPROM (ARG)
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _writeCoeffs2Ram
               _readEEPROM
               ___wmul
                 _readEEPROM (ARG)
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _writeCoeffs2Ram
             _readEEPROM
             ___wmul
               _readEEPROM (ARG)
     ___lbmod
   _handle_sync
     _readEEPROM
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
   _doWork
     _writeEEPROM
     _readEEPROM
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
       ___flpack (ARG)
     ___wmul
       _readEEPROM (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     3C0      16       63.2%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     36      85       6       52.0%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     40      81       4       80.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     158      15        0.0%
DATA                 0      0     523      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Sep 13 21:16:59 2015

                          ___asfldiv@f1p 00C7                            ___altofl@sign 00AB  
                           ___fldiv@cntr 00C0                  __end_of_vscp_readAppReg 23B4  
                           ___fldiv@sign 00C6                    __end_of_sendVSCPFrame 4672  
                           ___asflmul@mp 0038                             ___asflsub@f2 003D  
                                     PL2 2AC2                                       PL4 1AD0  
                                     PL6 1AE0                                       PL8 1AFC  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 000E  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 0011  
                    ___wmul@multiplicand 0014                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 3822                            ___asflsub@f1p 003B  
                           ___flpack@arg 000E                                      PL10 1B0C  
                                    PL20 1B7C                                      PL12 1B1C  
                                    PL30 3696                                      PL22 365C  
                                    PL14 1B2A                                      PL40 3E3E  
                                    PL32 3E2E                                      PL24 1B92  
                                    PL16 1B5A                                      PL50 3D0E  
                                    PL42 44F8                                      PL34 1BA2  
                                    PL26 3D00                                      PL18 3E1A  
                                    PL60 1BE0                                      PL52 30C8  
                                    PL44 1BD2                                      PL36 1BBA  
                                    PL28 367A                                      PL70 1BF2  
                                    PL62 3D48                                      PL54 3D22  
                                    PL46 3E50                                      PL38 30B0  
                                    PL80 1C10                                      PL72 30DC  
                                    PL64 4208                                      PL56 3D34  
                                    PL48 3822                                      PL90 30EA  
                                    PL82 4B04                                      PL74 4218  
                                    PL66 1358                                      PL58 3996  
                                    PL84 3E64                                      PL76 32EE  
                                    PL68 513E                                      PL86 3836  
                                    PL78 1C02                                      PL88 4450  
                           ___flpack@exp 0012                           _Celsius2Kelvin 50E6  
                                    l201 17B8                                      l208 197C  
                                    l224 1ACE                                      l321 1CAE  
                                    l410 20AE                                      l323 1CB8  
                                    l315 1C90                                      l317 1C9A  
                                    l253 4598                                      l245 365A  
                                    l319 1CA4                                      l183 40F6  
                                    l168 4088                                      l177 40CC  
                     vscp_readStdReg@idx 0020                                      l522 1032  
                                    l519 0FE4                                      l295 4A68  
                                    l640 51D4                                      l552 539E  
                                    l629 4B88                                      l831 3B0C  
                                    l823 3A74                                      l825 3A92  
                                    l594 546E                                      l851 319C  
                                    l843 32EC                                      l836 312C  
                                    l853 31B0                                      l918 52E6  
                                    l846 31FA                       vscp_readStdReg@reg 0023  
                                    l855 31C4                                      l847 317A  
                                    l857 31D4                                      l849 3188  
                                    l890 3CFE                                      l867 325E  
                                    l859 31E4                                      l868 3278  
                                    l885 3E18                                      l895 4C6C  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BE  
                       setEventData@ival 00D2                           getVSCPFrame@id 002E  
          __end_of_vscp_handleProbeState 42E4                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                         setEventData@unit 00CD  
                                    _adc 0185                                      _exp 32FC  
                                    _log 3B0E                                      fsr2 000FD9  
                                    prod 000FF3                                      wreg 000FE8  
                           ___flmul@cntr 0032                             ___flmul@sign 0033  
                           __CFG_LVP$OFF 000000                            ___flpack@sign 0013  
                           ___fltol@exp1 003D                             __CFG_WDT$OFF 000000  
                                   l1031 4F40                                     l1103 4E50  
                                   l1107 53F4                                     l1036 535A  
                                   l1212 2C96                                     l1054 42CE  
                                   l1046 42DE                                     l1303 4CCE  
                                   l1055 42B0                                     l1047 426C  
                                   l1152 537C                                     l1090 517C  
                                   l1083 5336                                     l1236 2E1A  
                                   l1317 53D6                                     l1237 2E2E  
                                   l1318 53D8                                     l1094 5228  
                                   l1238 2E6A                                     l1079 5032  
                                   l1247 2EA6                                     l1280 5252  
                                   l1272 30AE                                     l1089 5170  
                                   l1178 3F6E                                     l1700 4A1C  
                                   l1606 3926                                     l1623 471E  
                                   l1631 4DE6                                     l1632 4E04  
                                   l1704 47C4                                     l1553 43AE  
                                   l1554 444E                                     l1564 4410  
                                   l1558 43E2                                     l1638 4206  
                                   l1582 33AA                                     l1591 3866  
                                   l1583 34D0                                     l1592 3994  
                                   l1672 3FAA                                     l1673 4072  
                                   l1595 388E                                     l1675 4062  
                                   l1579 34E0                                     l1684 4900  
                                   l1871 3C3A                  __end_of_doOneSecondWork 365C  
                    vscp_readStdReg@code 0018                vscp_getManufacturerId@idx 0012  
                                   ?_exp 00C7                                     ?_log 00C7  
                                   l8302 3144                                     l8310 3164  
                                   l8410 32D6                                     l8404 32C0  
                                   l8308 315A                                     l8316 3168  
                                   l8180 51B2                                     l8422 547C  
                                   l8094 53FC                                     l8360 320E  
                                   l8184 51B6                                     l8168 4B2C  
                                   l8370 322E                                     l9154 5274  
                                   l9146 525E                                     l8460 4C2C  
                                   l8452 4C06                                     l8292 311A  
                                   l8462 4C36                                     l8454 4C0E  
                                   l8470 4C4E                                     l8464 4C3C  
                                   l8456 4C18                                     l8466 4C42  
                                   l8458 4C22                                     l8484 3C9A  
                                   l8396 32A6                                     l8388 327A  
                                   l9710 2ADA                                     l9704 42D2  
                                   l9712 2AE0                                     l9650 424E  
                                   l9634 4228                                     l9802 2BC6  
                                   l9714 2AE6                                     l9812 2BFA  
                                   l9716 2AEC                                     l9910 2DCE  
                                   l9822 2C2E                                     l9718 2AF2  
                                   l9584 5346                                     l9672 428C  
                                   l9648 4248                                     l9832 2C62  
                                   l9752 2B38                                     l9736 2B2A  
                                   l9674 4290                                     l9850 2CC8  
                                   l9738 2B30                                     l9668 4288  
                                   l9860 2D2A                                     l9844 2C9A  
                                   l9772 2B5E                                     l9598 2A28  
                                   l9942 2E0E                                     l9926 2DEE  
                                   l9854 2CE0                                     l9846 2CB8  
                                   l9864 2D40                                     l9880 2D66  
                                   l9970 2E4E                                     l9962 2E30  
                                   l9882 2D68                                     l9786 2B6A  
                                   l9892 2D8C                                     l9884 2D72  
                                   l9974 2E56                                     l9992 2E86  
                                   l9978 2E5E                                     l9898 2DBC  
                                   l9988 2E6C              __size_of_vscp_getMatrixInfo 001A  
                         sendCANFrame@id 003C                                     u5460 4B7C  
                                   u5465 4B72                                     u5635 3122  
                                   u5637 3124                                     u9025 45FC  
                                   u5955 3C62                                     u9155 3D80  
                                   u5965 3C72                                     u9165 3D90  
                                   u5975 3C9E                                     u9175 3DAE  
                                   u9520 37F0                                     u9525 37EE  
                                   u9490 37A6                                     u9495 37A4  
                       ??_ECANInitialize 000F                             __CFG_PWRT$ON 000000  
              vscp_setManufacturerId@idx 0012                                     ___IT 000101  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 4074                                     _init 5070  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 00C7                                     log@x 00C7  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 066E                              _vscp_minute 004D  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 02B4  
          __size_of_vscp_doOneSecondWork 004C                        vscp_getUserID@idx 0012  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 3E6E  
                            _writeEEPROM 52CA                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 4CD2  
                        _sh_coefficients 0106                     __end_of_getVSCPFrame 4B8A  
                                  ??_exp 0046                                    ??_log 0043  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 511C  
                   __size_of_getCANFrame 002C                                    l10102 2FD6  
                                  l10014 2EA8                                    l11000 1050  
                                  l11002 106A                                    l10106 2FFE  
                                  l10050 2F1E                                    l10028 2ED0  
                                  l11006 106E                                    l10054 2F30  
                                  l10038 2EF2                                    l11120 39FE  
                                  l11104 5180                                    l11024 1322  
                                  l11016 130E                                    l11032 1354  
                                  l11008 12E2                                    l10080 2F76  
                                  l10072 2F46                                    l10056 2F36  
                                  l10128 304E                                    l11026 1324  
                                  l11300 36D6                                    l11028 1334  
                                  l11044 538A                                    l10084 2F92  
                                  l10076 2F60                                    l11126 3A0E  
                                  l10094 2FBC                                    l10254 4E30  
                                  l10600 1C96                                    l11160 3AC2  
                                  l11312 36FA                                    l11304 36E2  
                                  l11400 3E98                                    l10248 4E26  
                                  _B0CON 000E20                                    l10610 1CBE  
                                  l10602 1CA0                                    l11154 3A94  
                                  l11138 3A38                                    l11234 502A  
                                  l11330 3738                                    l11322 3720  
                                  l10258 4E38                                    l10700 1EDA  
                                  l10620 1CFA                                    l10612 1CCA  
                                  l10604 1CAA                                    l11148 3A78  
                                  l11180 3B04                                    l11316 370A  
                                  l11308 36EE                                    l11420 3EF2  
                                  l11412 3ED4                                    l10710 1F16  
                                  l10702 1EE6                                    l10630 1D36  
                                  l10622 1D06                                    l10614 1CD6  
                                  l10606 1CB4                                    l11174 3AFE  
                                  l11342 375A                                    l11334 3742  
                                  l11326 372C                                    l11422 3EF6  
                                  l11406 3EB8                                    l10800 2386  
                                  l10720 1F52                                    l10712 1F22  
                                  l10704 1EF2                                    l10640 1D72  
                                  l10632 1D42                                    l10624 1D12  
                                  l10616 1CE2                                    l10560 47CA  
                                  l10544 4FC2                                    l11168 3ADC  
                                  l11424 3F0C                                    l11504 432E  
                                  l11520 437A                                    _B1CON 000E30  
                                  l10802 2388                                    l10730 1F8E  
                                  l10722 1F5E                                    l10714 1F2E  
                                  l10706 1EFE                                    l10650 1DAE  
                                  l10642 1D7E                                    l10634 1D4E  
                                  l10626 1D1E                                    l10618 1CEE  
                                  l11178 3B02                                    l11346 3766  
                                  l11338 374E                                    l11506 433A  
                                  l10804 2398                                    l10740 1FCA  
                                  l10732 1F9A                                    l10724 1F6A  
                                  l10716 1F3A                                    l10708 1F0A  
                                  l10660 1DEA                                    l10652 1DBA  
                                  l10644 1D8A                                    l10636 1D5A  
                                  l10628 1D2A                                    l11196 3DA6  
                                  l11372 380E                                    l11356 37B0  
                                  l11292 36C2                                    l10900 0B1C  
                                  l10820 06BC                                    l11444 3F54  
                                  l11436 3F40                                    l14100 349E  
                                  l11524 438E                                    l11516 436C  
                                  l11508 433E                                    l10750 2006  
                                  l10742 1FD6                                    l10734 1FA6  
                                  l10726 1F76                                    l10718 1F46  
                                  l10670 1E26                                    l10662 1DF6  
                                  l10654 1DC6                                    l10646 1D96  
                                  l10638 1D66                                    l10590 1C5C  
                                  l10582 1C2C                                    l10566 47D0  
                                  l11366 37F8                                    l11278 53EE  
                                  l10910 0BA2                                    l10902 0B38  
                                  l10830 0748                                    l10822 06D8  
                                  l11454 3F70                                    l10760 2042  
                                  l10752 2012                                    l10744 1FE2  
                                  l10736 1FB2                                    l10728 1F82  
                                  l10680 1E62                                    l10672 1E32  
                                  l10664 1E02                                    l10656 1DD2  
                                  l10648 1DA2                                    l10592 1C68  
                                  l10584 1C38                                    l10808 23B0  
                                  l11296 36CC                                    l11376 381E  
                                  l11288 36B8                                    l10920 0C24  
                                  l10912 0BBC                                    l10904 0B54  
                                  l10840 07D4                                    l10832 0764  
                                  l10824 06F4                                    l10816 0684  
                                  l14112 3B2C                                    l14032 1A04  
                                  l14016 194E                                    _B2CON 000E40  
                                  l10770 207E                                    l10762 204E  
                                  l10754 201E                                    l10746 1FEE  
                                  l10738 1FBE                                    l10690 1E9E  
                                  l10682 1E6E                                    l10674 1E3E  
                                  l10666 1E0E                                    l10658 1DDE  
                                  l10594 1C74                                    l10586 1C44  
                                  l10930 0CA6                                    l10922 0C3E  
                                  l10914 0BD6                                    l10906 0B6E  
                                  l10850 0860                                    l10842 07F0  
                                  l10834 0780                                    l10826 0710  
                                  l10818 06A0                                    l14210 3878  
                                  l14034 1A0A                                    l14018 1958  
                                  l10780 20BE                                    l10772 208A  
                                  l10764 205A                                    l10756 202A  
                                  l10748 1FFA                                    l10692 1EAA  
                                  l10684 1E7A                                    l10676 1E4A  
                                  l10668 1E1A                                    l10596 1C80  
                                  l10588 1C50                                    l10940 0D28  
                                  l10932 0CC0                                    l10924 0C58  
                                  l10916 0BF0                                    l10908 0B88  
                                  l10860 08EC                                    l10852 087C  
                                  l10844 080C                                    l10836 079C  
                                  l10828 072C                                    l11388 5372  
                                  l11820 4870                                    l11492 42FE  
                                  l10774 2096                                    l10766 2066  
                                  l10758 2036                                    l10694 1EB6  
                                  l10686 1E86                                    l10678 1E56  
                                  l10598 1C8C                                    l10950 0DAA  
                                  l10942 0D42                                    l10934 0CDA  
                                  l10926 0C72                                    l10918 0C0A  
                                  l10870 0978                                    l10862 0908  
                                  l10854 0898                                    l10846 0828  
                                  l10838 07B8                                    l11806 49BE  
                                  l11822 487A                                    l14054 1A96  
                                  l10792 2372                                    l10776 20A2  
                                  l10768 2072                                    l10696 1EC2  
                                  l10688 1E92                                    l10784 20CA  
                                  l14320 4172                                    l10960 0E2C  
                                  l10952 0DC4                                    l10944 0D5C  
                                  l10936 0CF4                                    l10928 0C8C  
                                  l10880 0A04                                    l10872 0994  
                                  l10864 0924                                    l10856 08B4  
                                  l10848 0844                                    l14240 38E6  
                                  l14232 38BA                                    l14216 38A0  
                                  l14144 4544                                    l14304 46E4  
                                  l11840 48C4                                    l14080 334E  
                                  l14056 1AA0                                    _B3CON 000E50  
                                  l10778 20B2                                    l10698 1ECE  
                                  l10786 2354                                    l14170 43D4  
                                  l10970 0EAE                                    l10962 0E46  
                                  l10954 0DDE                                    l10946 0D76  
                                  l10938 0D0E                                    l10890 0A90  
                                  l10882 0A20                                    l10874 09B0  
                                  l10866 0940                                    l10858 08D0  
                                  l14250 3912                                    l14242 38EE  
                                  l14402 4478                                    l11770 478C  
                                  l14074 331A                                    l11498 4316  
                                  l14066 1AC4                                    l14340 41B2  
                                  l14324 4186                                    l10980 0F30  
                                  l10972 0EC8                                    l10964 0E60  
                                  l10956 0DF8                                    l10948 0D90  
                                  l10892 0AAC                                    l10884 0A3C  
                                  l10876 09CC                                    l10868 095C  
                                  l14260 3948                                    l14252 3920  
                                  l14244 38F4                                    l14148 457C  
                                  l11780 4DD0                                    l11852 48F0  
                                  l11844 48CC                                    l11836 48B4  
                                  l14404 44E0                                    l11756 4762  
                                  l14084 3378                                    l14166 43B8  
                                  l10990 0FB2                                    l10982 0F4A  
                                  l10974 0EE2                                    l10966 0E7A  
                                  l10958 0E12                                    l10894 0AC8  
                                  l10886 0A58                                    l10878 09E8  
                                  l14238 38D8                                    l11846 48D8  
                                  l11766 4780                                    l14176 43F8  
                                  l14168 43BC                                    l14352 41CC  
                                  l14336 41AA                                    l10992 0FCC  
                                  l10984 0F64                                    l10976 0EFC  
                                  l10968 0E94                                    l10896 0AE4  
                                  l10888 0A74                                    l14256 393E  
                                  l14280 4680                                    l11848 48DC  
                                  _B4CON 000E60                                    l14178 4404  
                                  l10994 0FFE                                    l10986 0F7E  
                                  l10978 0F16                                    l10898 0B00  
                                  l11786 4E02                                    l11794 5302  
                                  l13802 4154                                    l14348 41C4  
          __size_of_vscp_getMajorVersion 0002                                    l10996 1018  
                                  l10988 0F98                                    l14268 3968  
                                  l14284 4696                                    l14196 4E6E  
                                  l10998 1036                                    l13822 4A72  
                                  l13814 4A20                                    l14390 3FB4  
                                  l13806 415C                                    l14376 50BC  
                                  l13904 3652                                    l13840 34EC  
                                  l14296 46B6                                    l13760 40C6  
                                  l13752 40B2                                    _B5CON 000E70  
                                  l13826 4A84                                    l13818 4A44  
                                  l13850 3530                                    l14394 3FD0  
                                  l13828 4A8E                                    l13924 13C2  
                                  l13916 13A0                                    l13780 4112  
                                  l13756 40BC                                    l13748 40AA  
                                  l13774 40F0                                    l13758 40C0  
                                  l13768 40DC                                    l13866 35A8  
                                  l13778 40FA                                    l13892 362C  
                                  l13868 35B2                                    l13796 413C  
                                  l13894 3636                                    l13878 35CE  
                                  l13974 1818                                    l13976 1828  
                                  l13994 18B6                                    l13996 18BC  
                                  l13988 1840               __end_of_vscp_goActiveState 53BE  
                          ___fltol@sign1 003C                          __end_of___aldiv 43A0  
          ??_vscp_writeNicknamePermanent 0011                       writeEEPROM@address 000E  
                        __end_of___fladd 3996                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                        __end_of___fldiv 4720                            i1_WriteTimer0 5520  
                        __end_of___flneg 5314                                    _EEADR 000FA9  
                        __end_of___lbmod 527C                          __end_of___flmul 4208  
                        __end_of___flsub 5070                          __end_of___fltol 4902  
                _vscp_handleDropNickname 514E                                    _BSEL0 000DF8  
                                  u10200 4758                                    _T0CON 000FD5  
                                  u10290 4898                                    u10295 488E  
                                  u13104 1848                                    u13024 13AA  
                                  u13105 1844                                    u13025 13A6  
                                  u13204 198C                                    u13205 1988  
                                  u13134 1BCA                                    u13135 1BC6  
                                  u13154 1908                                    u13074 1820  
                                  u13155 1904                                    u13075 181C  
                                  u13254 1A50                                    u13255 1A4C  
                                  u13370 3494                                    u13710 468C  
                                  u13390 3B22                                    u12914 355A  
                                  u12915 3556                                    u13740 417C  
                                  u12964 35DE                                    u12965 35DA  
                                  i1l144 00B8                                    i1l161 0240  
                                  i1l138 0080                                    i1l164 0296  
                        sendCANFrame@dlc 0040                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                        ??_writeCoeffs2Ram 0018  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 5564               _vscp_readNicknamePermanent 555A  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                     setEventData@newval 00CE                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                            ___awtofl@sign 001D  
                         __CFG_EBTR3$OFF 000000                    __end_of_sendTempEvent 4B04  
                           _vscp_getGUID 54B0                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                                    _floor 3F74  
                                  _ldexp 4720                             _vscp_getZone 553C  
                                  _frexp 4998                       vscp_writeAppReg@rv 0024  
              _vscp_getRegisterPagesUsed 5582                   __size_of_vscp_getEvent 002A  
                                  main@i 00E0                               _ConvertADC 557A  
                           _vscp_setGUID 537E                                    tablat 000FF5  
                _vscp_getSubMinorVersion 5588                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 52CA  
                            exp@exponent 00CF                              ldexp@newexp 00B1  
                   _ECANSetOperationMode 5470                          __initialization 4F72  
                            log@exponent 0043                             __end_of_main 4166  
                           __end_of_init 50AC                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0018                          ?_Celsius2Kelvin 003B  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001F  
                         ?i1_WriteTimer0 0001                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 0024                   ??_vscp_restoreDefaults 0022  
                                 ??_main 0046                                   ??_init 0022  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 0012  
               ??_vscp_setManufacturerId 0012                 _vscp_handleProtocolEvent 2AD0  
                          __activetblptr 000002                        __RegsToCANID@type 0011  
             ECANReceiveMessage@msgFlags 0017                         doWork@calVoltage 0152  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_floor 00AC                                   ?_ldexp 00AD  
                   __size_of_handle_sync 007A                                   ?_frexp 000E  
                       __end_of___altofl 4E9C               ECANReceiveMessage@savedPtr 0018  
                                 _CANCON 000F6F                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                       __end_of___flpack 4450                                   _EECON2 000FA7  
                                 _CIOCON 000F73                         __end_of___awtofl 50E6  
                       ?_doOneSecondWork 0001                       vscp_writeStdReg@rv 0027  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 53BE  
                                 i1l9200 00A2                                   i1l9202 00A6  
                                 i1l9204 00A8                                   i1l9230 010C  
                                 i1l9222 00CE                                   i1l9206 00AC  
                                 i1l9240 0172                                   i1l9232 0134  
                                 i1l9224 00F6                                   i1l9216 00C2  
                                 i1l9250 01B4                                   i1l9242 0176  
                                 i1l9234 0138                                   i1l9226 00FA  
                                 i1l9218 00C4                                   i1l9260 01FE  
                                 i1l9252 01C0                                   i1l9244 0182  
                                 i1l9236 0144                                   i1l9228 0106  
                                 i1l9180 004E                                   i1l9270 0242  
                                 i1l9262 0204                                   i1l9254 01C6  
                                 i1l9246 0188                                   i1l9238 014A  
                                 i1l9190 007C                                   i1l9182 0052  
                                 i1l9174 0034                                   i1l9272 024C  
                                 i1l9264 022C                                   i1l9256 01EE  
                                 i1l9248 01B0                                   i1l9280 0256  
                                 i1l9192 0082                                   i1l9184 0062  
                                 i1l9176 003C                                   i1l9274 0250  
                                 i1l9266 0230                                   i1l9258 01F2  
                                 i1l9282 0290                                   i1l9194 0084  
                                 i1l9186 0072                                   i1l9178 0048  
                                 i1l9284 0294                                   i1l9268 023C  
                                 i1l9196 0090                                   i1l9188 0074  
                                 i1l9198 009A                          _init_app_eeprom 23B4  
                       __end_of___lwtofl 5200                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001C                   ECANReceiveMessage@temp 001D  
                      getVSCPFrame@pData 0028                        getVSCPFrame@pSize 0027  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 5200  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1167 00C9                                   ___flge 4DBA  
                         getCANFrame@pid 0022                                ??___aldiv 0046  
                              ??___fladd 0034                                   ___wmul 511C  
                              ??___fldiv 003B                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0026                                ??___flsub 003B  
                              ??___fltol 0038                            _vscp_getEvent 522A  
                                 _doWork 1368                         OpenTimer0@config 000E  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 0012  
                    vscp_writeAppReg@reg 0023               __end_of_vscp_setSegmentCRC 54FC  
                    vscp_writeAppReg@val 0021                      vscp_writeAppReg@pos 0022  
                                 clear_0 4F7A                                   clear_1 4F8C  
                                 clear_2 4F98                                   clear_3 4FA4  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 00D6  
                                 floor@i 00B0                                   floor@x 00AC  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0084  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 0011                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0021  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004E                       __size_of___asfldiv 004C  
                     __size_of___asflmul 004A                               ___fladd@f1 00A1  
                             ___fladd@f2 00A5                       __size_of___asflsub 004E  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0648                         __end_oflog@coeff 066C  
                        ___lbmod@divisor 000E                               ___altofl@c 00A7  
                             ___fldiv@f1 00B1                               ___fldiv@f2 00B5  
                             ___fldiv@f3 00C1                               __accesstop 0060  
                __end_of__initialization 4FAA                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 4B8A                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                               ___flmul@f1 001E  
                             ___flmul@f2 0022                             eval_poly@res 00A9  
                             ___flsub@f1 00A9                               ___flsub@f2 00AD  
                             ___fltol@f1 0034                          writeEEPROM@data 0010  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 535C  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0028                      ?_Celsius2Fahrenheit 00C7  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0034              __end_of_vscp_check_pstorage 535C  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 4074                            __end_of_ldexp 47C6  
                          __end_of_frexp 4A1E                      ?_vscp_writeRegister 0029  
                             __end_ofPL2 2AD0                               __end_ofPL4 1AE0  
                             __end_ofPL6 1AFC                               __end_ofPL8 1B0C  
                         ??_sendCANFrame 0042                               ___lwtofl@c 0018  
             __end_of_vscp_getFamilyCode 555A                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 01FA             __size_of_getCalibrationValue 0048  
                     sendVSCPFrame@pData 00A7               __end_of_vscp_getFamilyType 5550  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0029  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 1358  
                 getVSCPFrame@pvscpclass 002D                  __end_of_init_app_eeprom 2AC2  
                   ??_Celsius2Fahrenheit 003B              __end_of_vscp_setControlByte 54EA  
               __end_of_vscp_writeStdReg 3F74                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 0043  
                                ??_frexp 0014                            ?_setEventData 00CB  
                   ??_vscp_writeRegister 002A          __end_of_vscp_handleDropNickname 517E  
                           _getVSCPFrame 4B12                               __pbssBANK0 0060  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 009C               __end_of_vscp_getBufferSize 5586  
                       Celsius2Kelvin@tc 003B                    vscp_writeRegister@reg 002A  
                 ??_ECANSetOperationMode 000E                             __IT_INT_MASK 0078  
                           __IT_SAVE_BSR 0079       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 47C6  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 558A  
               ECANSetOperationMode@mode 000E                                  ?___wmul 0012  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                           doWork@setpoint 0179  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0011                                  _B5RXFUL 007387  
                      __end_of___asfladd 4D20                        __end_of___asfldiv 4DBA  
                       WriteTimer0@timer 0010                                ?___altofl 00A7  
                      __end_of___asflmul 4EE6                                  _ECANCON 000F77  
                      __end_of___asflsub 4D6E                                ?___flpack 000E  
                          ??_WriteTimer0 0010                         doWork@resistance 0174  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                    sendVSCPFrame@priority 00A5  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72                                ?___lwtofl 0018  
                    vscp_writeStdReg@reg 0028             __end_of_vscp_doOneSecondWork 4E52  
                                i1l14462 0268                       _adc_series_counter 0049  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 00A3  
                             _high_alarm 007E          __end_of_interrupt_at_low_vector 02B4  
               vscp_readStdReg@code_1140 001C                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 4226                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 4C00               __end_of_vscp_getMatrixInfo 5410  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                           ??_setEventData 003F  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                          setEventData@v 00CB                       _vscp_goActiveState 53A0  
                 __size_of_sendVSCPFrame 00B2             __end_of_vscp_getMajorVersion 558E  
                     __size_of_vscp_init 0044                               _readEEPROM 54C4  
                 _vscp_getManufacturerId 5488                   _vscp_setManufacturerId 5410  
                        _ECANSendMessage 39A8                      ?_vscp_goActiveState 0001  
                                _OpenADC 4C76                                  __Hparam 0000  
                        ??_vscp_getEvent 0032                         ??_Celsius2Kelvin 003F  
                                __Lparam 0000                       _vscp_node_substate 004E  
             __end_of_vscp_getSegmentCRC 556E               ??_vscp_handleProtocolEvent 00C0  
                          ??_getCANFrame 0022        __end_of_vscp_getRegisterPagesUsed 5584  
               __size_of_vscp_getMDF_URL 0018                                  ___aldiv 42E4  
                        __size_of___flge 004C                                  ___fladd 3842  
                                ___fldiv 4672                                  ___flneg 52F0  
                                ___lbmod 5254                                  ___flmul 4166  
                                ___flsub 5034                                  ___fltol 4866  
                        __size_of___wmul 0022                          getCANFrame@pdlc 0020  
                              _FIFOEMPTY 007BA7                            ?i1_ConvertADC 0001  
                        __size_of_doWork 0768                             __psmallconst 0600  
                             ??___altofl 0046                     __end_of_init_app_ram 4FF6  
                             ??___flpack 0014                       _vscp_sendHeartBeat 52A4  
                                __pcinit 4F72                               ??___awtofl 001C  
                         _vscp_deviceURL 0600                        __end_of_eval_poly 44F8  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 4074                                  __ptext1 1368  
                                __ptext2 51D6                                  __ptext3 4D6E  
                                __ptext4 4CD2                                  __ptext5 42E4  
                                __ptext6 4EE6                                  __ptext7 3B0E  
                                __ptext8 32FC                                  __ptext9 52F0  
                             ??___lwtofl 001C                           _vscp_getUserID 549C  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 0044  
                           __size_of_exp 01E6                             __size_of_log 012E  
                  vscp_writeStdReg@value 0022                         ___aldiv@dividend 003E  
                    ?_vscp_sendHeartBeat 0044                 ??_vscp_handleSetNickname 0012  
                                _seconds 0080                                  doWork@B 0172  
                                doWork@i 0183                                  doWork@j 0178  
                                doWork@v 016E                      __end_of_WriteTimer0 5520  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 0014  
                     vscp_getMDF_URL@idx 000F                           OpenADC@config2 000E  
          vscp_handleProtocolEvent@bytes 00CD                     end_of_initialization 4FAA  
                                exp@sign 00D1             __end_of_vscp_handleHeartbeat 5034  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                __end_of_writeCoeffs2Ram 4866                     __end_of_sendCANFrame 51AA  
                             doWork@Rinf 014E                       doOneSecondWork@tmp 00D6  
                             doWork@temp 017F                vscp_handleProtocolEvent@i 00DA  
              vscp_handleProtocolEvent@j 00DB                vscp_handleProtocolEvent@k 00D4  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 527C  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 00A3                                  postdec1 000FE5  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                 __size_of_sendTempEvent 006C                           _vscp_setUserID 5428  
                                postinc0 000FEE                                  postinc2 000FDE  
                         ??i1_ConvertADC 0001                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 550E              _vscp_writeNicknamePermanent 54FC  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 45C0  
                 __end_of_vscp_getUserID 54B0             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 4F72  
                         _vscp_probe_cnt 0050                      __end_of_getCANFrame 51D6  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 00D4                 __size_of_vscp_readAppReg 0796  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001A  
                       writeCoeffs2Ram@i 001D                         writeCoeffs2Ram@j 001F  
                            ___fldiv@exp 00C5                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 017E                       _vscp_setSegmentCRC 54EA  
                      readEEPROM@address 000E                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 00D2                  __end_of_ECANSendMessage 3B0E  
                      vscp_readStdReg@rv 0022                              ___lbmod@rem 0011  
                            ___flmul@exp 002D                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 3D00                      _getCalibrationValue 4EE6  
                            ?_readEEPROM 000E                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 52A4                               _vscp_error 5576  
                   _vscp_doOneSecondWork 4E06                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0076                   __end_of_vscp_setUserID 5440  
               __size_of_doOneSecondWork 017A                   vscp_sendHeartBeat@zone 0045  
                   __end_of_setEventData 45C0                           ?_sendVSCPFrame 00A1  
                         __end_of___flge 4E06                     __size_of_writeEEPROM 0026  
                         __end_of___wmul 513E                          ?_vscp_getUserID 0001  
                         __end_of_doWork 1AD0             __end_of_vscp_getMinorVersion 558C  
                            _WriteTimer0 550E                     _vscp_getMajorVersion 558C  
                     __end_of_ConvertADC 557E                     ?_getCalibrationValue 0012  
                   ??_vscp_setSegmentCRC 0011                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 00B4  
                              ___DCDelay 0184                              __end_ofPL10 1B1C  
                            __end_ofPL20 1B92                              __end_ofPL12 1B2A  
                      ?_vscp_writeAppReg 0021                              __end_ofPL30 36A4  
                            __end_ofPL22 367A                              __end_ofPL14 1B5A  
                            __end_ofPL40 3E50                              __end_ofPL32 3E3E  
                            __end_ofPL24 1BA2                              __end_ofPL16 1B7C  
                            __end_ofPL50 3D22                              __end_ofPL42 450E  
                            __end_ofPL34 1BBA                              __end_ofPL26 3D0E  
                            __end_ofPL18 3E2E                              __end_ofPL60 1BF2  
                            __end_ofPL52 30DC                              __end_ofPL44 1BE0  
                            __end_ofPL36 1BD2                              __end_ofPL28 3696  
                            __end_ofPL70 1C02                              __end_ofPL62 3D5A  
                            __end_ofPL54 3D34                              __end_ofPL46 3E64  
                            __end_ofPL38 30C8                              __end_ofPL80 1C1E  
                            __end_ofPL72 30EA                              __end_ofPL64 4218  
                            __end_ofPL56 3D48                              __end_ofPL48 3836  
                            __end_ofPL90 30F4                              __end_ofPL82 4B12  
                            __end_ofPL74 4226                              __end_ofPL66 1368  
                            __end_ofPL58 39A8                              __end_ofPL84 3E6E  
                            __end_ofPL76 32FC                              __end_ofPL68 514E  
                            __end_ofPL86 3842                              __end_ofPL78 1C10  
                            __end_ofPL88 445C                      start_initialization 4F72  
                             eval_poly@d 003F                               eval_poly@n 0040  
                             eval_poly@x 003B                               ldexp@value 00AD  
        __size_of_vscp_handleSetNickname 0024                              __end_of_exp 34E2  
                            __end_of_log 3C3C                       ??_vscp_writeAppReg 0022  
                          _sendTempEvent 4A98                        ?_vscp_writeStdReg 0022  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 0023  
                     _vscp_getFamilyCode 5550                      __end_of_handle_sync 4A98  
                         ??__CANIDToRegs 0015                       _vscp_getFamilyType 5546  
                             frexp@value 000E                      sendVSCPFrame@nodeid 00A4  
                       ?_writeCoeffs2Ram 0001                        _vscp_readRegister 53DC  
                   Celsius2Fahrenheit@tc 00C7                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00D1                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 001E                      ?_vscp_getFamilyCode 000E  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 30B0  
                        ?_vscp_setUserID 0011                      ?_vscp_getFamilyType 000E  
                  __size_of_init_app_ram 0042                 ?_vscp_handleDropNickname 0001  
                 getCalibrationValue@cal 0017                        ??_vscp_getSubzone 0012  
                               ??___flge 0016                 __end_of__ECANPointBuffer 4C76  
                      __CANIDToRegs@type 0014                              _getCANFrame 51AA  
                               ??___wmul 0016                                 ??_doWork 00D2  
                     _vscp_getBufferSize 5584              vscp_handleProtocolEvent@len 00CE  
            vscp_handleProtocolEvent@pos 00CC               __end_of_ECANReceiveMessage 32EE  
                    ??_vscp_readRegister 0024           __size_of_vscp_goBootloaderMode 0018  
                  ?_vscp_getMajorVersion 0001                    ??_getCalibrationValue 0014  
                  __end_ofi1_WriteTimer0 5532            __end_of_vscp_goBootloaderMode 5470  
                   _vscp_handleHeartbeat 4FF6                       __end_of_OpenTimer0 53DC  
                      __size_of___altofl 004A                        __size_of___flpack 00B0  
                              ___asfladd 4CD2                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                      __size_of_readEEPROM 0014  
                              ___asfldiv 4D6E                              __pbssBIGRAM 0185  
                              ___asflmul 4E9C                                ___asflsub 4D20  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                        __IT_SAVE_STATUS 007A                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00A1                            __pcstackBANK1 014E  
                         ?_sendTempEvent 0001                         _vscp_alarmstatus 004A  
            __size_of_Celsius2Fahrenheit 0076                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 002C                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 0011                     __end_ofi1_ConvertADC 5582  
                          ?_vscp_setGUID 0011              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0018                        ??_vscp_readAppReg 0012  
                      sendVSCPFrame@size 00A6                __end_of_vscp_readRegister 53F6  
                           _init_app_ram 4FB4                     getCalibrationValue@i 0019  
                            _doWork$2280 015E                              _doWork$2278 0156  
                            _doWork$2279 015A             __size_of_vscp_setControlByte 0012  
                          doWork@avarage 017B                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 0013                     ??_vscp_getBufferSize 000E  
                           _current_temp 0060                                __pnvBANK1 0184  
                          __IT_SAVE_WREG 007B                        OpenADC@portconfig 000F  
                               ?_OpenADC 000E                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 53F6                   _vscp_handleSetNickname 5314  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00A8  
                         _ECANInitialize 4902                                 ?___aldiv 003E  
                               ?___fladd 00A1                                 ?___fldiv 00B1  
                              __ptext100 5520                                __ptext101 557E  
                              __ptext102 0000                                 ?___flneg 000E  
                               ?___lbmod 000E                                 ?___flmul 001E  
                               ?___flsub 00A9                                 ?___fltol 0034  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 0012  
                            __pintcodelo 0018                        ??_doOneSecondWork 00D4  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1157 00D0  
                vscp_readStdReg@idx_1141 0021               vscp_setManufacturerId@data 0011  
                           _sendCANFrame 517E                              __smallconst 0600  
                             ?___asfladd 003B                        WriteTimer0@timer0 000E  
                             ?___asfldiv 00C7                               ?___asflmul 0034  
                             ?___asflsub 003B                       _vscp_getSegmentCRC 5564  
                         ??_vscp_getGUID 0012                                _eval_poly 445C  
                            _handle_sync 4A1E                           ??_vscp_getZone 0012  
         __end_of_vscp_getManufacturerId 549C           __end_of_vscp_setManufacturerId 5428  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1156 00CF  
                         __size_of_floor 0100                           __size_of_ldexp 00A6  
                         ??_vscp_setGUID 0012                           __size_of_frexp 0086  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 0074                          ___aldiv@divisor 0042  
                        ___aldiv@counter 00A1                           ___wmul@product 0016  
                 ??_vscp_doOneSecondWork 00C0                   sendVSCPFrame@vscpclass 00A1  
                          OpenADC@config 0012                     _vscp_getMinorVersion 558A  
                              _sendTimer 0081                                 _PIE1bits 000F9D  
                              _low_alarm 007F                    __size_of_setEventData 00B2  
                 __end_of_ECANInitialize 4998                                 i1u720_20 00A2  
                               i1u720_21 00A0                                 i1u721_20 00B6  
                               i1u721_21 00B4                                 i1u730_20 024C  
                               i1u722_20 00C0                                 i1u730_21 024A  
                               i1u722_21 00BE                                 i1u723_20 00CC  
                               i1u723_21 00CA                                 i1u724_20 0106  
                               i1u716_20 003C                                 i1u724_21 0104  
                               i1u716_21 003A                                 i1u725_20 0144  
                               i1u717_20 007C                                 i1u725_21 0142  
                               i1u717_21 007A                                 i1u726_20 0182  
                               i1u718_20 0090                                 i1u726_21 0180  
                               i1u718_21 008E                                 i1u727_20 01C0  
                               i1u719_20 009A                                 i1u727_21 01BE  
                               i1u719_21 0098                                 i1u728_20 01FE  
                               i1u728_21 01FC                                 i1u729_20 023C  
                               i1u729_21 023A                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1                         ECANSendMessage@i 0039  
                       ECANSendMessage@j 0034                    __end_of_vscp_getEvent 5254  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 0032                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 0012  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 000E  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 0044                       vscp_setUserID@data 0011  
                   __end_of__CANIDToRegs 3E1A                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 0012                             __RegsToCANID 3C3C  
                     _vscp_probe_address 004F                          ??_sendTempEvent 0044  
            __size_of_vscp_goActiveState 001E                               ?_eval_poly 003B  
                    getVSCPFrame@pNodeId 0025                                _vscp_init 4F2E  
                              _vscp_imsg 0086                                _vscp_hour 0082  
                              _vscp_omsg 0094                         vscp_setGUID@data 0011  
      __size_of_vscp_handleProtocolEvent 05E0                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001     __size_of_vscp_writeNicknamePermanent 0012  
                       _vscp_page_select 0046                             _setEventData 450E  
             __size_of_vscp_readRegister 001A                                 ___DCByte 007C  
                      _measurement_clock 006C                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 0010                 __size_of_init_app_eeprom 070E  
           __end_of_vscp_restoreDefaults 5576                                frexp@eptr 0012  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 0100              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 005C                         ??_vscp_getUserID 0012  
                        _vscp_getMDF_URL 5440                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                       __size_of___aldiv 00BC                         __size_of___fladd 0154  
                       __size_of___fldiv 00AE                         __size_of___flneg 0024  
                       _vscp_initledfunc 004C                         __size_of___lbmod 0028  
                       __size_of___flmul 00A2                   ??_vscp_handleHeartbeat 0012  
                       __size_of___flsub 003C                         __size_of___fltol 009C  
                               ___altofl 4E52                                 ___flpack 43A0  
                       getCANFrame@flags 0023                             ?_WriteTimer0 000E  
                               ___awtofl 50AC                         getCANFrame@pdata 0021  
                               ___lwtofl 51D6                           sendTempEvent@i 0045  
                __size_of_Celsius2Kelvin 0036                              ??___asfladd 0041  
                            ??___asfldiv 003B                              ??___asflmul 0038  
                               _exp$2284 00CB                              ??___asflsub 0041  
                     __end_of_readEEPROM 54D8                    __size_ofi1_ConvertADC 0004  
                             ?_vscp_init 0001                                 __ptext10 4720  
                               __ptext11 445C                                 __ptext20 4672  
                               __ptext12 3F74                                 __ptext21 4E06  
                               __ptext13 4866                                 __ptext30 4B8A  
                               __ptext22 52A4                                 __ptext14 4998  
                               __ptext31 3842                                 __ptext23 5532  
                               __ptext15 4DBA                                 __ptext40 5428  
                               __ptext32 50E6                                 __ptext24 553C  
                               __ptext16 4E52                                 __ptext41 537E  
                               __ptext33 2AD0                                 __ptext25 34E2  
                               __ptext17 4D20                                 __ptext50 5488  
                               __ptext42 066E                                 __ptext34 5254  
                               __ptext26 5576                                 __ptext18 5034  
                               __ptext51 549C                                 __ptext43 53DC  
                               __ptext35 535C                                 __ptext27 4A1E  
                               __ptext19 4E9C                                 __ptext60 555A  
                               __ptext52 5440                                 __ptext44 36A4  
                               __ptext36 3E6E                                 __ptext28 4A98  
                               __ptext61 5314                                 __ptext53 54B0  
                               __ptext45 5546                                 __ptext37 556E  
                               __ptext29 450E                                 __ptext70 39A8  
                               __ptext62 4FF6                                 __ptext54 5588  
                               __ptext46 5550                                 __ptext38 23B4  
                               __ptext71 3D5A                                 __ptext63 5458  
                               __ptext55 558A                                 __ptext47 5582  
                               __ptext39 5410                                 __ptext80 54EA  
                               __ptext72 522A                                 __ptext64 53F6  
                               __ptext56 558C                                 __ptext48 5584  
                               __ptext81 5564                                 __ptext73 4B12  
                               __ptext65 4226                                 __ptext57 5200  
                               __ptext49 5586                                 __ptext90 4FB4  
                               __ptext82 54C4                                 __ptext74 51AA  
                               __ptext66 53A0                                 __ptext58 514E  
                               __ptext91 47C6                                 __ptext83 54FC  
                               __ptext75 30F4                                 __ptext67 527C  
                               __ptext59 4F2E                                 __ptext92 511C  
                               __ptext84 52CA                                 __ptext76 3C3C  
                               __ptext68 45C0                                 __ptext93 557A  
                               __ptext85 5070                                 __ptext77 4C00  
                               __ptext69 517E                                 __ptext94 550E  
                               __ptext86 4902                                 __ptext78 5338  
                               __ptext95 50AC                                 __ptext87 5470  
                               __ptext79 54D8                                 __ptext96 4166  
                               __ptext88 4C76                                 __ptext97 43A0  
                               __ptext89 53BE                                 __ptext98 1C1E  
         vscp_goBootloaderMode@algorithm 0011                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5532                         ??_vscp_setUserID 0012  
                          __size_of_main 00F2                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0CEA                      _vscp_check_pstorage 5338  
                          init_app_ram@i 0021           vscp_handleProtocolEvent@i_1155 00D5  
         vscp_handleProtocolEvent@i_1158 00D9           vscp_handleProtocolEvent@i_1166 00D3  
                       doOneSecondWork@i 00D7                     __end_of_vscp_getGUID 54C4  
                          ??_writeEEPROM 0011                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 001C                 ECANSendMessage@tempBSEL0 0035  
                           ?_getCANFrame 0020                      ECANSendMessage@mode 0032  
                   __end_of_vscp_getZone 5546                      ECANSendMessage@temp 0038  
                      ?__ECANPointBuffer 000E                        vscp_setUserID@idx 0012  
                   __end_of_vscp_setGUID 53A0                       vscp_readAppReg@reg 0013  
                     vscp_readAppReg@pos 0012                             i1_ConvertADC 557E  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 00CB                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                         init_app_eeprom@i 0011  
                    _vscp_setControlByte 54D8                                 exp@coeff 0620  
                  ___flmul@f3_as_product 002E                                 log@coeff 0648  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 1C1E  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
                            ??_eval_poly 0042             ??_vscp_readNicknamePermanent 0012  
                    ECANReceiveMessage@i 001B                          _vscp_guid_reset 004B  
                        _vscp_readStdReg 36A4             vscp_handleDropNickname@bytes 0012  
             __end_of_vscp_newNodeOnline 522A                       _ECANReceiveMessage 30F4  
                         ??_getVSCPFrame 0029                          _vscp_initbtncnt 0083  
                        sendVSCPFrame@id 00BC                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 5458                     ?_vscp_setControlByte 0001  
                          _timeout_clock 0070                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 0085                             handle_sync@i 00D6  
                        _doOneSecondWork 34E2                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0011              __end_of_getCalibrationValue 4F2E  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0011  
                  __size_of__CANIDToRegs 00C0                           readEEPROM@data 0011  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 5588              _vscp_getBootLoaderAlgorithm 5586  
       __size_of_interrupt_at_low_vector 029C                   ECANSendMessage@dataLen 001D  
                    __end_of_writeEEPROM 52F0                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 0018                    ??_vscp_check_pstorage 0012  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 5458  
             __end_of_Celsius2Fahrenheit 4C00             __end_of_ECANSetOperationMode 5488  
                   _vscp_restoreDefaults 556E              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 0012                  __end_of_vscp_getSubzone 553C  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 00A2                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 537E                       __end_of_vscp_error 557A  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 007D  
         __end_of_vscp_handleSetNickname 5338       vscp_handleProtocolEvent@bytes_1162 00D7  
                  ??_vscp_setControlByte 0011                     vscp_readRegister@reg 0024  
                           ___fladd@exp1 003A                             ___fladd@exp2 0039  
                           ___fladd@sign 0038                             __CANIDToRegs 3D5A  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00C7  
                          ___asfladd@f1p 003B              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 003D                 __size_of_ECANSendMessage 0166  
                           ___asfldiv@f2 00C9  

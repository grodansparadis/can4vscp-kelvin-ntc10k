

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Wed Nov 25 18:04:44 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   120                           	psect	pa_nodes,global,class=CODE,delta=1
   121  0000                     tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           prodh	equ	0xFF4
   125                           prodl	equ	0xFF3
   126                           intcon	equ	0xFF2
   127                           wreg	equ	0xFE8
   128                           indf1	equ	0xFE7
   129                           fsr1h	equ	0xFE2
   130                           fsr1l	equ	0xFE1
   131                           indf2	equ	0xFDF
   132                           postinc2	equ	0xFDE
   133                           postdec2	equ	0xFDD
   134                           plusw2	equ	0xFDB
   135                           fsr2h	equ	0xFDA
   136                           fsr2l	equ	0xFD9
   137                           status	equ	0xFD8
   138                           
   139                           	psect	smallconst
   140  000600                     __psmallconst:
   141                           	opt stack 0
   142  000600                     _vscp_deviceURL:
   143                           	opt stack 0
   144  000600  77                 	db	119
   145  000601  77                 	db	119
   146  000602  77                 	db	119
   147  000603  2E                 	db	46
   148  000604  65                 	db	101
   149  000605  75                 	db	117
   150  000606  72                 	db	114
   151  000607  6F                 	db	111
   152  000608  73                 	db	115
   153  000609  6F                 	db	111
   154  00060A  75                 	db	117
   155  00060B  72                 	db	114
   156  00060C  63                 	db	99
   157  00060D  65                 	db	101
   158  00060E  2E                 	db	46
   159  00060F  73                 	db	115
   160  000610  65                 	db	101
   161  000611  2F                 	db	47
   162  000612  6E                 	db	110
   163  000613  74                 	db	116
   164  000614  63                 	db	99
   165  000615  31                 	db	49
   166  000616  30                 	db	48
   167  000617  4B                 	db	75
   168  000618  41                 	db	65
   169  000619  5F                 	db	95
   170  00061A  33                 	db	51
   171  00061B  2E                 	db	46
   172  00061C  78                 	db	120
   173  00061D  6D                 	db	109
   174  00061E  6C                 	db	108
   175  00061F  00                 	db	0
   176  000620                     __end_of_vscp_deviceURL:
   177                           	opt stack 0
   178  000620                     exp@coeff:
   179                           	opt stack 0
   180  000620  0000               	dw	0
   181  000622  3F80               	dw	16256
   182  000624  7218               	dw	29208
   183  000626  3F31               	dw	16177
   184  000628  FDF0               	dw	65008
   185  00062A  3E75               	dw	15989
   186  00062C  5847               	dw	22599
   187  00062E  3D63               	dw	15715
   188  000630  9558               	dw	38232
   189  000632  3C1D               	dw	15389
   190  000634  C482               	dw	50306
   191  000636  3AAE               	dw	15022
   192  000638  78A8               	dw	30888
   193  00063A  3921               	dw	14625
   194  00063C  93EF               	dw	37871
   195  00063E  3780               	dw	14208
   196  000640  92A0               	dw	37536
   197  000642  35A7               	dw	13735
   198  000644  5646               	dw	22086
   199  000646  3415               	dw	13333
   200  000648                     __end_ofexp@coeff:
   201                           	opt stack 0
   202  000648                     log@coeff:
   203                           	opt stack 0
   204  000648  0000               	dw	0
   205  00064A  0000               	dw	0
   206  00064C  FFC4               	dw	65476
   207  00064E  3F7F               	dw	16255
   208  000650  EF80               	dw	61312
   209  000652  BEFF               	dw	48895
   210  000654  E190               	dw	57744
   211  000656  3EA9               	dw	16041
   212  000658  82EC               	dw	33516
   213  00065A  BE76               	dw	48758
   214  00065C  AD82               	dw	44418
   215  00065E  3E2B               	dw	15915
   216  000660  3C0E               	dw	15374
   217  000662  BDC3               	dw	48579
   218  000664  D187               	dw	53639
   219  000666  3D13               	dw	15635
   220  000668  7841               	dw	30785
   221  00066A  BBD3               	dw	48083
   222  00066C                     __end_oflog@coeff:
   223                           	opt stack 0
   224  0000                     _ADCON0	set	4034
   225  0000                     _ADCON0bits	set	4034
   226  0000                     _ADCON1	set	4033
   227  0000                     _ADCON2	set	4032
   228  0000                     _ADRESH	set	4036
   229  0000                     _ADRESL	set	4035
   230  0000                     _BRGCON1	set	3952
   231  0000                     _BRGCON2	set	3953
   232  0000                     _BRGCON3	set	3954
   233  0000                     _BSEL0	set	3576
   234  0000                     _CANCON	set	3951
   235  0000                     _CIOCON	set	3955
   236  0000                     _ECANCON	set	3959
   237  0000                     _EEADR	set	4009
   238  0000                     _EECON1bits	set	4006
   239  0000                     _EECON2	set	4007
   240  0000                     _EEDATA	set	4008
   241  0000                     _INTCONbits	set	4082
   242  0000                     _MSEL0	set	3568
   243  0000                     _MSEL1	set	3569
   244  0000                     _MSEL2	set	3570
   245  0000                     _PIE1bits	set	3997
   246  0000                     _PIR1bits	set	3998
   247  0000                     _PIR2bits	set	4001
   248  0000                     _PORTC	set	3970
   249  0000                     _RXB1CONbits	set	3920
   250  0000                     _RXF0EIDH	set	3842
   251  0000                     _RXF0EIDL	set	3843
   252  0000                     _RXF0SIDH	set	3840
   253  0000                     _RXF0SIDL	set	3841
   254  0000                     _RXF1EIDH	set	3846
   255  0000                     _RXF1EIDL	set	3847
   256  0000                     _RXF1SIDH	set	3844
   257  0000                     _RXF1SIDL	set	3845
   258  0000                     _RXFBCON0	set	3552
   259  0000                     _RXFBCON1	set	3553
   260  0000                     _RXFBCON2	set	3554
   261  0000                     _RXFBCON3	set	3555
   262  0000                     _RXFBCON4	set	3556
   263  0000                     _RXFBCON5	set	3557
   264  0000                     _RXFBCON6	set	3558
   265  0000                     _RXFBCON7	set	3559
   266  0000                     _RXFCON0	set	3540
   267  0000                     _RXFCON1	set	3541
   268  0000                     _RXM0EIDH	set	3866
   269  0000                     _RXM0EIDL	set	3867
   270  0000                     _RXM0SIDH	set	3864
   271  0000                     _RXM0SIDL	set	3865
   272  0000                     _RXM1EIDH	set	3870
   273  0000                     _RXM1EIDL	set	3871
   274  0000                     _RXM1SIDH	set	3868
   275  0000                     _RXM1SIDL	set	3869
   276  0000                     _T0CON	set	4053
   277  0000                     _T0CONbits	set	4053
   278  0000                     _TMR0H	set	4055
   279  0000                     _TMR0L	set	4054
   280  0000                     _TRISA	set	3986
   281  0000                     _TRISB	set	3987
   282  0000                     _TRISC	set	3988
   283  0000                     _B0RXFUL	set	28935
   284  0000                     _B0TXEN	set	28610
   285  0000                     _B1RXFUL	set	29063
   286  0000                     _B1TXEN	set	28611
   287  0000                     _B2RXFUL	set	29191
   288  0000                     _B2TXEN	set	28612
   289  0000                     _B3RXFUL	set	29319
   290  0000                     _B3TXEN	set	28613
   291  0000                     _B4RXFUL	set	29447
   292  0000                     _B4TXEN	set	28614
   293  0000                     _B5RXFUL	set	29575
   294  0000                     _B5TXEN	set	28615
   295  0000                     _FIFOEMPTY	set	31655
   296  0000                     _IRXIF	set	32039
   297  0000                     _MDSEL0	set	31678
   298  0000                     _MDSEL1	set	31679
   299  0000                     _RXB0FILHIT0	set	31488
   300  0000                     _RXB0FUL	set	31495
   301  0000                     _RXB0IF	set	32032
   302  0000                     _RXB0OVFL	set	31655
   303  0000                     _RXB1IF	set	32033
   304  0000                     _RXB1OVFL	set	31654
   305  0000                     _RXM0EXIDM	set	30923
   306  0000                     _RXM1EXIDEN	set	30955
   307  0000                     _B0CON	set	3616
   308  0000                     _B1CON	set	3632
   309  0000                     _B2CON	set	3648
   310  0000                     _B3CON	set	3664
   311  0000                     _B4CON	set	3680
   312  0000                     _B5CON	set	3696
   313  0000                     _RXB0CON	set	3936
   314  0000                     _RXB1CON	set	3920
   315  0000                     _TXB0CON	set	3904
   316  0000                     _TXB1CON	set	3888
   317  0000                     _TXB2CON	set	3872
   318  00066C  00                 	db	0	; dummy byte at the end
   319  0000                     tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           prodh	equ	0xFF4
   323                           prodl	equ	0xFF3
   324                           intcon	equ	0xFF2
   325                           wreg	equ	0xFE8
   326                           indf1	equ	0xFE7
   327                           fsr1h	equ	0xFE2
   328                           fsr1l	equ	0xFE1
   329                           indf2	equ	0xFDF
   330                           postinc2	equ	0xFDE
   331                           postdec2	equ	0xFDD
   332                           plusw2	equ	0xFDB
   333                           fsr2h	equ	0xFDA
   334                           fsr2l	equ	0xFD9
   335                           status	equ	0xFD8
   336                           
   337                           	psect	nvBANK1
   338  000193                     __pnvBANK1:
   339                           	opt stack 0
   340  000193                     ___DCDelay:
   341                           	opt stack 0
   342  000193                     	ds	1
   343                           
   344                           ; #config settings
   345  0000                     tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           prodh	equ	0xFF4
   349                           prodl	equ	0xFF3
   350                           intcon	equ	0xFF2
   351                           wreg	equ	0xFE8
   352                           indf1	equ	0xFE7
   353                           fsr1h	equ	0xFE2
   354                           fsr1l	equ	0xFE1
   355                           indf2	equ	0xFDF
   356                           postinc2	equ	0xFDE
   357                           postdec2	equ	0xFDD
   358                           plusw2	equ	0xFDB
   359                           fsr2h	equ	0xFDA
   360                           fsr2l	equ	0xFD9
   361                           status	equ	0xFD8
   362                           
   363                           	psect	cinit
   364  004DE4                     __pcinit:
   365                           	opt stack 0
   366  004DE4                     start_initialization:
   367                           	opt stack 0
   368  004DE4                     __initialization:
   369                           	opt stack 0
   370                           
   371                           ; Clear objects allocated to BIGRAM (960 bytes)
   372  004DE4  EE01  F094         	lfsr	0,__pbssBIGRAM
   373  004DE8  EE13 F0C0          	lfsr	1,960
   374  004DEC                     clear_0:
   375  004DEC  6AEE               	clrf	postinc0,c
   376  004DEE  50E5               	movf	postdec1,w,c
   377  004DF0  50E1               	movf	fsr1l,w,c
   378  004DF2  E1FC               	bnz	clear_0
   379  004DF4  50E2               	movf	fsr1h,w,c
   380  004DF6  E1FA               	bnz	clear_0
   381                           
   382                           ; Clear objects allocated to BANK1 (95 bytes)
   383  004DF8  EE01  F000         	lfsr	0,__pbssBANK1
   384  004DFC  0E5F               	movlw	95
   385  004DFE                     clear_1:
   386  004DFE  6AEE               	clrf	postinc0,c
   387  004E00  06E8               	decf	wreg,f,c
   388  004E02  E1FD               	bnz	clear_1
   389                           
   390                           ; Clear objects allocated to BANK0 (49 bytes)
   391  004E04  EE00  F0A9         	lfsr	0,__pbssBANK0
   392  004E08  0E31               	movlw	49
   393  004E0A                     clear_2:
   394  004E0A  6AEE               	clrf	postinc0,c
   395  004E0C  06E8               	decf	wreg,f,c
   396  004E0E  E1FD               	bnz	clear_2
   397                           
   398                           ; Clear objects allocated to COMRAM (13 bytes)
   399  004E10  EE00  F046         	lfsr	0,__pbssCOMRAM
   400  004E14  0E0D               	movlw	13
   401  004E16                     clear_3:
   402  004E16  6AEE               	clrf	postinc0,c
   403  004E18  06E8               	decf	wreg,f,c
   404  004E1A  E1FD               	bnz	clear_3
   405  004E1C                     end_of_initialization:
   406                           	opt stack 0
   407  004E1C                     __end_of__initialization:
   408                           	opt stack 0
   409  004E1C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   410  004E1E  6EF8               	movwf	tblptru,c
   411  004E20  0100               	movlb	0
   412  004E22  EF16  F01E         	goto	_main	;jump to C main() function
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           prodh	equ	0xFF4
   418                           prodl	equ	0xFF3
   419                           intcon	equ	0xFF2
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           indf1	equ	0xFE7
   423                           postdec1	equ	0xFE5
   424                           fsr1h	equ	0xFE2
   425                           fsr1l	equ	0xFE1
   426                           indf2	equ	0xFDF
   427                           postinc2	equ	0xFDE
   428                           postdec2	equ	0xFDD
   429                           plusw2	equ	0xFDB
   430                           fsr2h	equ	0xFDA
   431                           fsr2l	equ	0xFD9
   432                           status	equ	0xFD8
   433                           
   434                           	psect	bssCOMRAM
   435  000046                     __pbssCOMRAM:
   436                           	opt stack 0
   437  000046                     _vscp_page_select:
   438                           	opt stack 0
   439  000046                     	ds	2
   440  000048                     __ECANRxFilterHitInfo:
   441                           	opt stack 0
   442  000048                     	ds	1
   443  000049                     _adc_series_counter:
   444                           	opt stack 0
   445  000049                     	ds	1
   446  00004A                     _vscp_alarmstatus:
   447                           	opt stack 0
   448  00004A                     	ds	1
   449  00004B                     _vscp_guid_reset:
   450                           	opt stack 0
   451  00004B                     	ds	1
   452  00004C                     _vscp_initledfunc:
   453                           	opt stack 0
   454  00004C                     	ds	1
   455  00004D                     _vscp_minute:
   456                           	opt stack 0
   457  00004D                     	ds	1
   458  00004E                     _vscp_node_substate:
   459                           	opt stack 0
   460  00004E                     	ds	1
   461  00004F                     _vscp_probe_address:
   462                           	opt stack 0
   463  00004F                     	ds	1
   464  000050                     _vscp_probe_cnt:
   465                           	opt stack 0
   466  000050                     	ds	1
   467  000051                     _vscp_second:
   468                           	opt stack 0
   469  000051                     	ds	1
   470  000052                     _vscp_statuscnt:
   471                           	opt stack 0
   472  000052                     	ds	1
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           prodh	equ	0xFF4
   478                           prodl	equ	0xFF3
   479                           intcon	equ	0xFF2
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           indf1	equ	0xFE7
   483                           postdec1	equ	0xFE5
   484                           fsr1h	equ	0xFE2
   485                           fsr1l	equ	0xFE1
   486                           indf2	equ	0xFDF
   487                           postinc2	equ	0xFDE
   488                           postdec2	equ	0xFDD
   489                           plusw2	equ	0xFDB
   490                           fsr2h	equ	0xFDA
   491                           fsr2l	equ	0xFD9
   492                           status	equ	0xFD8
   493                           
   494                           	psect	bssBANK0
   495  0000A9                     __pbssBANK0:
   496                           	opt stack 0
   497  0000A9                     _current_temp:
   498                           	opt stack 0
   499  0000A9                     	ds	12
   500  0000B5                     __IT_INT_MASK:
   501                           	opt stack 0
   502  0000B5                     	ds	1
   503  0000B6                     ___DCByte:
   504                           	opt stack 0
   505  0000B6                     	ds	1
   506  0000B7                     _adc_conversion_flags:
   507                           	opt stack 0
   508  0000B7                     	ds	1
   509  0000B8                     _high_alarm:
   510                           	opt stack 0
   511  0000B8                     	ds	1
   512  0000B9                     _low_alarm:
   513                           	opt stack 0
   514  0000B9                     	ds	1
   515  0000BA                     _seconds:
   516                           	opt stack 0
   517  0000BA                     	ds	1
   518  0000BB                     _vscp_hour:
   519                           	opt stack 0
   520  0000BB                     	ds	1
   521  0000BC                     _vscp_initbtncnt:
   522                           	opt stack 0
   523  0000BC                     	ds	1
   524  0000BD                     _vscp_nickname:
   525                           	opt stack 0
   526  0000BD                     	ds	1
   527  0000BE                     _vscp_node_state:
   528                           	opt stack 0
   529  0000BE                     	ds	1
   530  0000BF                     _vscp_imsg:
   531                           	opt stack 0
   532  0000BF                     	ds	14
   533  0000CD                     _vscp_omsg:
   534                           	opt stack 0
   535  0000CD                     	ds	13
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           prodh	equ	0xFF4
   541                           prodl	equ	0xFF3
   542                           intcon	equ	0xFF2
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           indf1	equ	0xFE7
   546                           postdec1	equ	0xFE5
   547                           fsr1h	equ	0xFE2
   548                           fsr1l	equ	0xFE1
   549                           indf2	equ	0xFDF
   550                           postinc2	equ	0xFDE
   551                           postdec2	equ	0xFDD
   552                           plusw2	equ	0xFDB
   553                           fsr2h	equ	0xFDA
   554                           fsr2l	equ	0xFD9
   555                           status	equ	0xFD8
   556                           
   557                           	psect	bssBANK1
   558  000100                     __pbssBANK1:
   559                           	opt stack 0
   560  000100                     _seconds_temp:
   561                           	opt stack 0
   562  000100                     	ds	6
   563  000106                     _measurement_clock:
   564                           	opt stack 0
   565  000106                     	ds	4
   566  00010A                     _timeout_clock:
   567                           	opt stack 0
   568  00010A                     	ds	4
   569  00010E                     _sendTimer:
   570                           	opt stack 0
   571  00010E                     	ds	2
   572  000110                     _vscp_configtimer:
   573                           	opt stack 0
   574  000110                     	ds	2
   575  000112                     _vscp_timer:
   576                           	opt stack 0
   577  000112                     	ds	2
   578  000114                     __IT_SAVE_BSR:
   579                           	opt stack 0
   580  000114                     	ds	1
   581  000115                     __IT_SAVE_STATUS:
   582                           	opt stack 0
   583  000115                     	ds	1
   584  000116                     __IT_SAVE_WREG:
   585                           	opt stack 0
   586  000116                     	ds	1
   587  000117                     _sh_coefficients:
   588                           	opt stack 0
   589  000117                     	ds	72
   590                           tblptru	equ	0xFF8
   591                           tblptrh	equ	0xFF7
   592                           tblptrl	equ	0xFF6
   593                           tablat	equ	0xFF5
   594                           prodh	equ	0xFF4
   595                           prodl	equ	0xFF3
   596                           intcon	equ	0xFF2
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           indf1	equ	0xFE7
   600                           postdec1	equ	0xFE5
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           indf2	equ	0xFDF
   604                           postinc2	equ	0xFDE
   605                           postdec2	equ	0xFDD
   606                           plusw2	equ	0xFDB
   607                           fsr2h	equ	0xFDA
   608                           fsr2l	equ	0xFD9
   609                           status	equ	0xFD8
   610                           
   611                           	psect	bssBIGRAM
   612  000194                     __pbssBIGRAM:
   613                           	opt stack 0
   614  000194                     _adc:
   615                           	opt stack 0
   616  000194                     	ds	960
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           prodh	equ	0xFF4
   622                           prodl	equ	0xFF3
   623                           intcon	equ	0xFF2
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           indf1	equ	0xFE7
   627                           postdec1	equ	0xFE5
   628                           fsr1h	equ	0xFE2
   629                           fsr1l	equ	0xFE1
   630                           indf2	equ	0xFDF
   631                           postinc2	equ	0xFDE
   632                           postdec2	equ	0xFDD
   633                           plusw2	equ	0xFDB
   634                           fsr2h	equ	0xFDA
   635                           fsr2l	equ	0xFD9
   636                           status	equ	0xFD8
   637                           
   638                           	psect	cstackBANK1
   639  00015F                     __pcstackBANK1:
   640                           	opt stack 0
   641  00015F                     doWork@Rinf:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x0
   645  00015F                     	ds	4
   646  000163                     doWork@calVoltage:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x4
   650  000163                     	ds	4
   651  000167                     _doWork$2276:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x8
   655  000167                     	ds	4
   656  00016B                     _doWork$2277:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0xC
   660  00016B                     	ds	4
   661  00016F                     _doWork$2278:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x10
   665  00016F                     	ds	16
   666  00017F                     doWork@v:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x20
   670  00017F                     	ds	4
   671  000183                     doWork@B:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x24
   675  000183                     	ds	2
   676  000185                     doWork@resistance:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x26
   680  000185                     	ds	4
   681  000189                     doWork@j:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x2A
   685  000189                     	ds	1
   686  00018A                     doWork@avarage:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x2B
   690  00018A                     	ds	4
   691  00018E                     doWork@temp:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0x2F
   695  00018E                     	ds	4
   696  000192                     doWork@i:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x33
   700  000192                     	ds	1
   701                           tblptru	equ	0xFF8
   702                           tblptrh	equ	0xFF7
   703                           tblptrl	equ	0xFF6
   704                           tablat	equ	0xFF5
   705                           prodh	equ	0xFF4
   706                           prodl	equ	0xFF3
   707                           intcon	equ	0xFF2
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           indf1	equ	0xFE7
   711                           postdec1	equ	0xFE5
   712                           fsr1h	equ	0xFE2
   713                           fsr1l	equ	0xFE1
   714                           indf2	equ	0xFDF
   715                           postinc2	equ	0xFDE
   716                           postdec2	equ	0xFDD
   717                           plusw2	equ	0xFDB
   718                           fsr2h	equ	0xFDA
   719                           fsr2l	equ	0xFD9
   720                           status	equ	0xFD8
   721                           
   722                           	psect	cstackBANK0
   723  000060                     __pcstackBANK0:
   724                           	opt stack 0
   725  000060                     ?_sendVSCPFrame:
   726                           	opt stack 0
   727  000060                     ?___flmul:
   728                           	opt stack 0
   729  000060                     sendVSCPFrame@vscpclass:
   730                           	opt stack 0
   731  000060                     ___flmul@f1:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0x0
   735  000060                     	ds	2
   736  000062                     sendVSCPFrame@vscptype:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x2
   740  000062                     	ds	1
   741  000063                     sendVSCPFrame@nodeid:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x3
   745  000063                     	ds	1
   746  000064                     sendVSCPFrame@priority:
   747                           	opt stack 0
   748  000064                     ___flmul@f2:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x4
   752  000064                     	ds	1
   753  000065                     sendVSCPFrame@size:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x5
   757  000065                     	ds	1
   758  000066                     sendVSCPFrame@pData:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x6
   762  000066                     	ds	1
   763  000067                     ??_sendVSCPFrame:
   764                           
   765                           ; 0 bytes @ 0x7
   766  000067                     	ds	1
   767  000068                     ??___fltol:
   768  000068                     ?___fladd:
   769                           	opt stack 0
   770  000068                     ___asflmul@mp:
   771                           	opt stack 0
   772  000068                     ___fladd@f1:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x8
   776  000068                     	ds	4
   777  00006C                     ___fltol@sign1:
   778                           	opt stack 0
   779  00006C                     ___fladd@f2:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0xC
   783  00006C                     	ds	1
   784  00006D                     ___fltol@exp1:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0xD
   788  00006D                     	ds	1
   789  00006E                     ?___aldiv:
   790                           	opt stack 0
   791  00006E                     ___aldiv@dividend:
   792                           	opt stack 0
   793                           
   794                           ; 4 bytes @ 0xE
   795  00006E                     	ds	2
   796  000070                     ??___fladd:
   797                           
   798                           ; 0 bytes @ 0x10
   799  000070                     	ds	2
   800  000072                     ___aldiv@divisor:
   801                           	opt stack 0
   802                           
   803                           ; 4 bytes @ 0x12
   804  000072                     	ds	2
   805  000074                     ___fladd@sign:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x14
   809  000074                     	ds	1
   810  000075                     ___fladd@exp2:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x15
   814  000075                     	ds	1
   815  000076                     ___aldiv@counter:
   816                           	opt stack 0
   817  000076                     ___fladd@exp1:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x16
   821  000076                     	ds	1
   822  000077                     ?_Celsius2Kelvin:
   823                           	opt stack 0
   824  000077                     ?_Celsius2Fahrenheit:
   825                           	opt stack 0
   826  000077                     ?___flsub:
   827                           	opt stack 0
   828  000077                     ?_eval_poly:
   829                           	opt stack 0
   830  000077                     ?___asfladd:
   831                           	opt stack 0
   832  000077                     ___aldiv@sign:
   833                           	opt stack 0
   834  000077                     ___asfladd@f1p:
   835                           	opt stack 0
   836  000077                     Celsius2Fahrenheit@tc:
   837                           	opt stack 0
   838  000077                     Celsius2Kelvin@tc:
   839                           	opt stack 0
   840  000077                     ___flsub@f1:
   841                           	opt stack 0
   842  000077                     eval_poly@x:
   843                           	opt stack 0
   844                           
   845                           ; 4 bytes @ 0x17
   846  000077                     	ds	1
   847  000078                     ___aldiv@quotient:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x18
   851  000078                     	ds	1
   852  000079                     ___asfladd@f2:
   853                           	opt stack 0
   854                           
   855                           ; 4 bytes @ 0x19
   856  000079                     	ds	2
   857  00007B                     ?_setEventData:
   858                           	opt stack 0
   859  00007B                     eval_poly@d:
   860                           	opt stack 0
   861  00007B                     setEventData@v:
   862                           	opt stack 0
   863  00007B                     sendVSCPFrame@id:
   864                           	opt stack 0
   865  00007B                     ___flsub@f2:
   866                           	opt stack 0
   867                           
   868                           ; 4 bytes @ 0x1B
   869  00007B                     	ds	1
   870  00007C                     ?___altofl:
   871                           	opt stack 0
   872  00007C                     eval_poly@n:
   873                           	opt stack 0
   874  00007C                     ___altofl@c:
   875                           	opt stack 0
   876                           
   877                           ; 4 bytes @ 0x1C
   878  00007C                     	ds	1
   879  00007D                     setEventData@unit:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x1D
   883  00007D                     	ds	1
   884  00007E                     ??_eval_poly:
   885  00007E                     setEventData@newval:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x1E
   889  00007E                     	ds	1
   890  00007F                     ??_vscp_handleProtocolEvent:
   891  00007F                     ??_vscp_doOneSecondWork:
   892  00007F                     ?___asflsub:
   893                           	opt stack 0
   894  00007F                     ___asflsub@f1p:
   895                           	opt stack 0
   896  00007F                     eval_poly@res:
   897                           	opt stack 0
   898                           
   899                           ; 4 bytes @ 0x1F
   900  00007F                     	ds	1
   901  000080                     ___altofl@sign:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x20
   905  000080                     	ds	1
   906  000081                     ?_floor:
   907                           	opt stack 0
   908  000081                     ___asflsub@f2:
   909                           	opt stack 0
   910  000081                     floor@x:
   911                           	opt stack 0
   912                           
   913                           ; 4 bytes @ 0x21
   914  000081                     	ds	1
   915  000082                     setEventData@ival:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x22
   919  000082                     	ds	1
   920  000083                     ?_log:
   921                           	opt stack 0
   922  000083                     ?_ldexp:
   923                           	opt stack 0
   924  000083                     ldexp@value:
   925                           	opt stack 0
   926  000083                     log@x:
   927                           	opt stack 0
   928                           
   929                           ; 4 bytes @ 0x23
   930  000083                     	ds	1
   931  000084                     ??_sendTempEvent:
   932                           
   933                           ; 0 bytes @ 0x24
   934  000084                     	ds	1
   935  000085                     sendTempEvent@i:
   936                           	opt stack 0
   937  000085                     floor@i:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x25
   941  000085                     	ds	1
   942  000086                     ??_handle_sync:
   943  000086                     ??_doOneSecondWork:
   944  000086                     vscp_handleProtocolEvent@page_save:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x26
   948  000086                     	ds	1
   949  000087                     ldexp@newexp:
   950                           	opt stack 0
   951  000087                     log@exponent:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x27
   955  000087                     	ds	1
   956  000088                     handle_sync@i:
   957                           	opt stack 0
   958  000088                     vscp_handleProtocolEvent@page_save_1166:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x28
   962  000088                     	ds	1
   963  000089                     ??_ldexp:
   964  000089                     floor@expon:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x29
   968  000089                     	ds	1
   969  00008A                     vscp_handleProtocolEvent@offset:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x2A
   973  00008A                     	ds	1
   974  00008B                     vscp_handleProtocolEvent@pos:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x2B
   978  00008B                     	ds	1
   979  00008C                     ?_exp:
   980                           	opt stack 0
   981  00008C                     vscp_handleProtocolEvent@bytes:
   982                           	opt stack 0
   983  00008C                     exp@x:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x2C
   987  00008C                     	ds	1
   988  00008D                     doOneSecondWork@tmp:
   989                           	opt stack 0
   990  00008D                     vscp_handleProtocolEvent@len:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x2D
   994  00008D                     	ds	1
   995  00008E                     vscp_handleProtocolEvent@pos_1155:
   996                           	opt stack 0
   997  00008E                     doOneSecondWork@setpoint:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x2E
  1001  00008E                     	ds	1
  1002  00008F                     vscp_handleProtocolEvent@len_1156:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x2F
  1006  00008F                     	ds	1
  1007  000090                     doOneSecondWork@i:
  1008                           	opt stack 0
  1009  000090                     vscp_handleProtocolEvent@bytes_this_time:
  1010                           	opt stack 0
  1011  000090                     _exp$2282:
  1012                           	opt stack 0
  1013                           
  1014                           ; 4 bytes @ 0x30
  1015  000090                     	ds	1
  1016  000091                     vscp_handleProtocolEvent@cb:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x31
  1020  000091                     	ds	1
  1021  000092                     vscp_handleProtocolEvent@i_1165:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x32
  1025  000092                     	ds	1
  1026  000093                     vscp_handleProtocolEvent@k:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x33
  1030  000093                     	ds	1
  1031  000094                     vscp_handleProtocolEvent@i_1154:
  1032                           	opt stack 0
  1033  000094                     exp@exponent:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x34
  1037  000094                     	ds	1
  1038  000095                     vscp_handleProtocolEvent@byte:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x35
  1042  000095                     	ds	1
  1043  000096                     exp@sign:
  1044                           	opt stack 0
  1045  000096                     vscp_handleProtocolEvent@bytes_1161:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x36
  1049  000096                     	ds	1
  1050  000097                     ??_doWork:
  1051                           
  1052                           ; 0 bytes @ 0x37
  1053  000097                     	ds	1
  1054  000098                     vscp_handleProtocolEvent@i_1157:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x38
  1058  000098                     	ds	1
  1059  000099                     vscp_handleProtocolEvent@i:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x39
  1063  000099                     	ds	1
  1064  00009A                     vscp_handleProtocolEvent@j:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x3A
  1068  00009A                     	ds	11
  1069  0000A5                     main@i:
  1070                           	opt stack 0
  1071                           
  1072                           ; 4 bytes @ 0x45
  1073  0000A5                     	ds	4
  1074                           tblptru	equ	0xFF8
  1075                           tblptrh	equ	0xFF7
  1076                           tblptrl	equ	0xFF6
  1077                           tablat	equ	0xFF5
  1078                           prodh	equ	0xFF4
  1079                           prodl	equ	0xFF3
  1080                           intcon	equ	0xFF2
  1081                           postinc0	equ	0xFEE
  1082                           wreg	equ	0xFE8
  1083                           indf1	equ	0xFE7
  1084                           postdec1	equ	0xFE5
  1085                           fsr1h	equ	0xFE2
  1086                           fsr1l	equ	0xFE1
  1087                           indf2	equ	0xFDF
  1088                           postinc2	equ	0xFDE
  1089                           postdec2	equ	0xFDD
  1090                           plusw2	equ	0xFDB
  1091                           fsr2h	equ	0xFDA
  1092                           fsr2l	equ	0xFD9
  1093                           status	equ	0xFD8
  1094                           
  1095                           	psect	cstackCOMRAM
  1096  000001                     __pcstackCOMRAM:
  1097                           	opt stack 0
  1098  000001                     ?i1_WriteTimer0:
  1099                           	opt stack 0
  1100  000001                     i1WriteTimer0@timer0:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x0
  1104  000001                     	ds	2
  1105  000003                     i1WriteTimer0@timer:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x2
  1109  000003                     	ds	2
  1110  000005                     ??_interrupt_at_low_vector:
  1111                           
  1112                           ; 0 bytes @ 0x4
  1113  000005                     	ds	9
  1114  00000E                     ?_WriteTimer0:
  1115                           	opt stack 0
  1116  00000E                     ?_writeEEPROM:
  1117                           	opt stack 0
  1118  00000E                     ?_OpenADC:
  1119                           	opt stack 0
  1120  00000E                     ?__CANIDToRegs:
  1121                           	opt stack 0
  1122  00000E                     ?__RegsToCANID:
  1123                           	opt stack 0
  1124  00000E                     ??_vscp_getMDF_URL:
  1125  00000E                     ?___flge:
  1126                           	opt stack 0
  1127  00000E                     ?___lbmod:
  1128                           	opt stack 0
  1129  00000E                     ?__ECANPointBuffer:
  1130                           	opt stack 0
  1131  00000E                     ?___wmul:
  1132                           	opt stack 0
  1133  00000E                     ?___flpack:
  1134                           	opt stack 0
  1135  00000E                     ?_frexp:
  1136                           	opt stack 0
  1137  00000E                     ?_vscp_getFamilyCode:
  1138                           	opt stack 0
  1139  00000E                     ?_vscp_getFamilyType:
  1140                           	opt stack 0
  1141  00000E                     ?___flneg:
  1142                           	opt stack 0
  1143  00000E                     init_app_ram@i:
  1144                           	opt stack 0
  1145  00000E                     vscp_getMatrixInfo@pData:
  1146                           	opt stack 0
  1147  00000E                     ECANSetOperationMode@mode:
  1148                           	opt stack 0
  1149  00000E                     OpenADC@config2:
  1150                           	opt stack 0
  1151  00000E                     OpenTimer0@config:
  1152                           	opt stack 0
  1153  00000E                     ___lbmod@divisor:
  1154                           	opt stack 0
  1155  00000E                     __CANIDToRegs@ptr:
  1156                           	opt stack 0
  1157  00000E                     __RegsToCANID@ptr:
  1158                           	opt stack 0
  1159  00000E                     writeEEPROM@address:
  1160                           	opt stack 0
  1161  00000E                     WriteTimer0@timer0:
  1162                           	opt stack 0
  1163  00000E                     ___wmul@multiplier:
  1164                           	opt stack 0
  1165  00000E                     ___flpack@arg:
  1166                           	opt stack 0
  1167  00000E                     ___flge@ff1:
  1168                           	opt stack 0
  1169  00000E                     ___flneg@f1:
  1170                           	opt stack 0
  1171  00000E                     frexp@value:
  1172                           	opt stack 0
  1173                           
  1174                           ; 4 bytes @ 0xD
  1175  00000E                     	ds	1
  1176  00000F                     vscp_getMDF_URL@idx:
  1177                           	opt stack 0
  1178  00000F                     vscp_getMatrixInfo@i:
  1179                           	opt stack 0
  1180  00000F                     OpenADC@portconfig:
  1181                           	opt stack 0
  1182  00000F                     ___lbmod@dividend:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0xE
  1186  00000F                     	ds	1
  1187  000010                     ??_OpenADC:
  1188  000010                     __RegsToCANID@val:
  1189                           	opt stack 0
  1190  000010                     writeEEPROM@data:
  1191                           	opt stack 0
  1192  000010                     ___lbmod@counter:
  1193                           	opt stack 0
  1194  000010                     WriteTimer0@timer:
  1195                           	opt stack 0
  1196  000010                     ___wmul@multiplicand:
  1197                           	opt stack 0
  1198  000010                     __CANIDToRegs@val:
  1199                           	opt stack 0
  1200                           
  1201                           ; 4 bytes @ 0xF
  1202  000010                     	ds	1
  1203  000011                     ?_vscp_setGUID:
  1204                           	opt stack 0
  1205  000011                     ?_vscp_setUserID:
  1206                           	opt stack 0
  1207  000011                     ?_vscp_setManufacturerId:
  1208                           	opt stack 0
  1209  000011                     vscp_setGUID@data:
  1210                           	opt stack 0
  1211  000011                     vscp_setUserID@data:
  1212                           	opt stack 0
  1213  000011                     vscp_setManufacturerId@data:
  1214                           	opt stack 0
  1215  000011                     vscp_goBootloaderMode@algorithm:
  1216                           	opt stack 0
  1217  000011                     vscp_writeNicknamePermanent@nickname:
  1218                           	opt stack 0
  1219  000011                     vscp_setSegmentCRC@crc:
  1220                           	opt stack 0
  1221  000011                     vscp_setControlByte@ctrl:
  1222                           	opt stack 0
  1223  000011                     __RegsToCANID@type:
  1224                           	opt stack 0
  1225  000011                     __ECANPointBuffer@b:
  1226                           	opt stack 0
  1227  000011                     ___lbmod@rem:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x10
  1231  000011                     	ds	1
  1232  000012                     ??__RegsToCANID:
  1233  000012                     vscp_setGUID@idx:
  1234                           	opt stack 0
  1235  000012                     vscp_setUserID@idx:
  1236                           	opt stack 0
  1237  000012                     vscp_setManufacturerId@idx:
  1238                           	opt stack 0
  1239  000012                     OpenADC@config:
  1240                           	opt stack 0
  1241  000012                     ___flpack@exp:
  1242                           	opt stack 0
  1243  000012                     frexp@eptr:
  1244                           	opt stack 0
  1245  000012                     __ECANPointBuffer@pt:
  1246                           	opt stack 0
  1247  000012                     ___flge@ff2:
  1248                           	opt stack 0
  1249                           
  1250                           ; 4 bytes @ 0x11
  1251  000012                     	ds	1
  1252  000013                     ??_frexp:
  1253  000013                     ___flpack@sign:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x12
  1257  000013                     	ds	1
  1258  000014                     ??___flpack:
  1259  000014                     __CANIDToRegs@type:
  1260                           	opt stack 0
  1261  000014                     __RegsToCANID@Value:
  1262                           	opt stack 0
  1263  000014                     ___wmul@product:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x13
  1267  000014                     	ds	1
  1268  000015                     ??__CANIDToRegs:
  1269  000015                     ?_ECANReceiveMessage:
  1270                           	opt stack 0
  1271  000015                     ECANReceiveMessage@data:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0x14
  1275  000015                     	ds	1
  1276  000016                     ?_readEEPROM:
  1277                           	opt stack 0
  1278  000016                     ECANReceiveMessage@dataLen:
  1279                           	opt stack 0
  1280  000016                     readEEPROM@address:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x15
  1284  000016                     	ds	1
  1285  000017                     ECANReceiveMessage@msgFlags:
  1286                           	opt stack 0
  1287  000017                     __CANIDToRegs@Value:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x16
  1291  000017                     	ds	1
  1292  000018                     ?_ECANSendMessage:
  1293                           	opt stack 0
  1294  000018                     ?___awtofl:
  1295                           	opt stack 0
  1296  000018                     ECANReceiveMessage@savedPtr:
  1297                           	opt stack 0
  1298  000018                     ___awtofl@c:
  1299                           	opt stack 0
  1300  000018                     ECANSendMessage@id:
  1301                           	opt stack 0
  1302                           
  1303                           ; 4 bytes @ 0x17
  1304  000018                     	ds	1
  1305  000019                     readEEPROM@data:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x18
  1309  000019                     	ds	1
  1310  00001A                     ??_writeCoeffs2Ram:
  1311  00001A                     ?_getCalibrationValue:
  1312                           	opt stack 0
  1313  00001A                     ?___lwtofl:
  1314                           	opt stack 0
  1315  00001A                     vscp_readAppReg@pos:
  1316                           	opt stack 0
  1317  00001A                     vscp_getGUID@idx:
  1318                           	opt stack 0
  1319  00001A                     vscp_getUserID@idx:
  1320                           	opt stack 0
  1321  00001A                     vscp_getManufacturerId@idx:
  1322                           	opt stack 0
  1323  00001A                     ECANReceiveMessage@id:
  1324                           	opt stack 0
  1325  00001A                     vscp_handleDropNickname@bytes:
  1326                           	opt stack 0
  1327  00001A                     ___lwtofl@c:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x19
  1331  00001A                     	ds	1
  1332  00001B                     ??_vscp_readStdReg:
  1333  00001B                     ?_vscp_writeStdReg:
  1334                           	opt stack 0
  1335  00001B                     vscp_readAppReg@reg:
  1336                           	opt stack 0
  1337  00001B                     ECANReceiveMessage@i:
  1338                           	opt stack 0
  1339  00001B                     vscp_writeStdReg@value:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x1A
  1343  00001B                     	ds	1
  1344  00001C                     ??_getCalibrationValue:
  1345  00001C                     ??_vscp_writeStdReg:
  1346  00001C                     vscp_readAppReg@rv:
  1347                           	opt stack 0
  1348  00001C                     ECANSendMessage@data:
  1349                           	opt stack 0
  1350  00001C                     ECANReceiveMessage@mode:
  1351                           	opt stack 0
  1352  00001C                     writeCoeffs2Ram@c:
  1353                           	opt stack 0
  1354                           
  1355                           ; 3 bytes @ 0x1B
  1356  00001C                     	ds	1
  1357  00001D                     ECANSendMessage@dataLen:
  1358                           	opt stack 0
  1359  00001D                     ECANReceiveMessage@temp:
  1360                           	opt stack 0
  1361  00001D                     ___awtofl@sign:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x1C
  1365  00001D                     	ds	1
  1366  00001E                     ?___fldiv:
  1367                           	opt stack 0
  1368  00001E                     ECANSendMessage@msgFlags:
  1369                           	opt stack 0
  1370  00001E                     ECANReceiveMessage@ptr:
  1371                           	opt stack 0
  1372  00001E                     ___fldiv@f1:
  1373                           	opt stack 0
  1374                           
  1375                           ; 4 bytes @ 0x1D
  1376  00001E                     	ds	1
  1377  00001F                     ??_ECANSendMessage:
  1378  00001F                     getCalibrationValue@cal:
  1379                           	opt stack 0
  1380  00001F                     writeCoeffs2Ram@i:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x1E
  1384  00001F                     	ds	1
  1385  000020                     ?_getCANFrame:
  1386                           	opt stack 0
  1387  000020                     getCANFrame@pdlc:
  1388                           	opt stack 0
  1389  000020                     vscp_writeStdReg@rv:
  1390                           	opt stack 0
  1391  000020                     vscp_readStdReg@code:
  1392                           	opt stack 0
  1393  000020                     ECANSendMessage@pb:
  1394                           	opt stack 0
  1395                           
  1396                           ; 18 bytes @ 0x1F
  1397  000020                     	ds	1
  1398  000021                     getCalibrationValue@i:
  1399                           	opt stack 0
  1400  000021                     getCANFrame@pdata:
  1401                           	opt stack 0
  1402  000021                     vscp_writeStdReg@reg:
  1403                           	opt stack 0
  1404  000021                     writeCoeffs2Ram@j:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x20
  1408  000021                     	ds	1
  1409  000022                     getCANFrame@pid:
  1410                           	opt stack 0
  1411  000022                     ___fldiv@f2:
  1412                           	opt stack 0
  1413                           
  1414                           ; 4 bytes @ 0x21
  1415  000022                     	ds	1
  1416  000023                     ?_vscp_writeAppReg:
  1417                           	opt stack 0
  1418  000023                     vscp_writeAppReg@val:
  1419                           	opt stack 0
  1420  000023                     getCANFrame@flags:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x22
  1424  000023                     	ds	1
  1425  000024                     ?_getVSCPFrame:
  1426                           	opt stack 0
  1427  000024                     vscp_writeAppReg@pos:
  1428                           	opt stack 0
  1429  000024                     getVSCPFrame@pvscptype:
  1430                           	opt stack 0
  1431  000024                     vscp_readStdReg@code_1139:
  1432                           	opt stack 0
  1433                           
  1434                           ; 4 bytes @ 0x23
  1435  000024                     	ds	1
  1436  000025                     vscp_writeAppReg@reg:
  1437                           	opt stack 0
  1438  000025                     getVSCPFrame@pNodeId:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x24
  1442  000025                     	ds	1
  1443  000026                     vscp_writeAppReg@rv:
  1444                           	opt stack 0
  1445  000026                     getVSCPFrame@pPriority:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x25
  1449  000026                     	ds	1
  1450  000027                     ?_vscp_writeRegister:
  1451                           	opt stack 0
  1452  000027                     getVSCPFrame@pSize:
  1453                           	opt stack 0
  1454  000027                     vscp_writeRegister@value:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x26
  1458  000027                     	ds	1
  1459  000028                     getVSCPFrame@pData:
  1460                           	opt stack 0
  1461  000028                     vscp_readStdReg@idx:
  1462                           	opt stack 0
  1463  000028                     vscp_writeRegister@reg:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x27
  1467  000028                     	ds	1
  1468  000029                     ??_getVSCPFrame:
  1469  000029                     vscp_readStdReg@idx_1140:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x28
  1473  000029                     	ds	1
  1474  00002A                     vscp_readStdReg@rv:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x29
  1478  00002A                     	ds	1
  1479  00002B                     vscp_readStdReg@reg:
  1480                           	opt stack 0
  1481                           
  1482                           ; 1 bytes @ 0x2A
  1483  00002B                     	ds	1
  1484  00002C                     vscp_readRegister@reg:
  1485                           	opt stack 0
  1486                           
  1487                           ; 1 bytes @ 0x2B
  1488  00002C                     	ds	1
  1489  00002D                     getVSCPFrame@pvscpclass:
  1490                           	opt stack 0
  1491  00002D                     ___fldiv@cntr:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x2C
  1495  00002D                     	ds	1
  1496  00002E                     getVSCPFrame@id:
  1497                           	opt stack 0
  1498  00002E                     ___fldiv@f3:
  1499                           	opt stack 0
  1500                           
  1501                           ; 4 bytes @ 0x2D
  1502  00002E                     	ds	4
  1503  000032                     ECANSendMessage@mode:
  1504                           	opt stack 0
  1505  000032                     vscp_getEvent@rv:
  1506                           	opt stack 0
  1507  000032                     ___fldiv@exp:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0x31
  1511  000032                     	ds	1
  1512  000033                     ECANSendMessage@buffers:
  1513                           	opt stack 0
  1514  000033                     ___fldiv@sign:
  1515                           	opt stack 0
  1516                           
  1517                           ; 1 bytes @ 0x32
  1518  000033                     	ds	1
  1519  000034                     ?___asfldiv:
  1520                           	opt stack 0
  1521  000034                     ECANSendMessage@j:
  1522                           	opt stack 0
  1523  000034                     ___asfldiv@f1p:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x33
  1527  000034                     	ds	1
  1528  000035                     ECANSendMessage@tempBSEL0:
  1529                           	opt stack 0
  1530                           
  1531                           ; 1 bytes @ 0x34
  1532  000035                     	ds	1
  1533  000036                     ECANSendMessage@tempPtr:
  1534                           	opt stack 0
  1535  000036                     ___asfldiv@f2:
  1536                           	opt stack 0
  1537                           
  1538                           ; 4 bytes @ 0x35
  1539  000036                     	ds	2
  1540  000038                     ECANSendMessage@temp:
  1541                           	opt stack 0
  1542                           
  1543                           ; 1 bytes @ 0x37
  1544  000038                     	ds	1
  1545  000039                     ECANSendMessage@i:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x38
  1549  000039                     	ds	1
  1550  00003A                     ECANSendMessage@ptr:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x39
  1554  00003A                     	ds	1
  1555  00003B                     ___flmul@exp:
  1556                           	opt stack 0
  1557                           
  1558                           ; 1 bytes @ 0x3A
  1559  00003B                     	ds	1
  1560  00003C                     ?_sendCANFrame:
  1561                           	opt stack 0
  1562  00003C                     sendCANFrame@id:
  1563                           	opt stack 0
  1564  00003C                     ___flmul@f3_as_product:
  1565                           	opt stack 0
  1566                           
  1567                           ; 4 bytes @ 0x3B
  1568  00003C                     	ds	4
  1569  000040                     sendCANFrame@dlc:
  1570                           	opt stack 0
  1571  000040                     ___flmul@cntr:
  1572                           	opt stack 0
  1573                           
  1574                           ; 1 bytes @ 0x3F
  1575  000040                     	ds	1
  1576  000041                     sendCANFrame@pdata:
  1577                           	opt stack 0
  1578  000041                     ___flmul@sign:
  1579                           	opt stack 0
  1580                           
  1581                           ; 1 bytes @ 0x40
  1582  000041                     	ds	1
  1583  000042                     ?___asflmul:
  1584                           	opt stack 0
  1585  000042                     ?___fltol:
  1586                           	opt stack 0
  1587  000042                     sendCANFrame@rv:
  1588                           	opt stack 0
  1589  000042                     ___asflmul@multiplicand:
  1590                           	opt stack 0
  1591  000042                     ___fltol@f1:
  1592                           	opt stack 0
  1593                           
  1594                           ; 4 bytes @ 0x41
  1595  000042                     	ds	1
  1596  000043                     vscp_sendEvent@rv:
  1597                           	opt stack 0
  1598                           
  1599                           ; 1 bytes @ 0x42
  1600  000043                     	ds	1
  1601  000044                     ?_vscp_sendHeartBeat:
  1602                           	opt stack 0
  1603  000044                     ??_vscp_newNodeOnline:
  1604  000044                     vscp_sendHeartBeat@subzone:
  1605                           	opt stack 0
  1606                           
  1607                           ; 1 bytes @ 0x43
  1608  000044                     	ds	1
  1609  000045                     vscp_sendHeartBeat@zone:
  1610                           	opt stack 0
  1611                           
  1612                           ; 1 bytes @ 0x44
  1613  000045                     	ds	1
  1614  000046                     tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           prodh	equ	0xFF4
  1619                           prodl	equ	0xFF3
  1620                           intcon	equ	0xFF2
  1621                           postinc0	equ	0xFEE
  1622                           wreg	equ	0xFE8
  1623                           indf1	equ	0xFE7
  1624                           postdec1	equ	0xFE5
  1625                           fsr1h	equ	0xFE2
  1626                           fsr1l	equ	0xFE1
  1627                           indf2	equ	0xFDF
  1628                           postinc2	equ	0xFDE
  1629                           postdec2	equ	0xFDD
  1630                           plusw2	equ	0xFDB
  1631                           fsr2h	equ	0xFDA
  1632                           fsr2l	equ	0xFD9
  1633                           status	equ	0xFD8
  1634                           
  1635                           ; 0 bytes @ 0x45
  1636 ;;
  1637 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1638 ;;
  1639 ;; *************** function _main *****************
  1640 ;; Defined at:
  1641 ;;		line 301 in file "../main.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;  i               4   69[BANK0 ] unsigned long 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;		None               void
  1648 ;; Registers used:
  1649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : F/1
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1655 ;;      Params:         0       0       0       0       0       0       0
  1656 ;;      Locals:         0       4       0       0       0       0       0
  1657 ;;      Temps:          0       0       0       0       0       0       0
  1658 ;;      Totals:         0       4       0       0       0       0       0
  1659 ;;Total ram usage:        4 bytes
  1660 ;; Hardware stack levels required when called:    9
  1661 ;; This function calls:
  1662 ;;		_init
  1663 ;;		_vscp_check_pstorage
  1664 ;;		_init_app_eeprom
  1665 ;;		_vscp_init
  1666 ;;		_writeEEPROM
  1667 ;;		_vscp_getEvent
  1668 ;;		_vscp_goActiveState
  1669 ;;		_vscp_handleProbeState
  1670 ;;		_vscp_handleProtocolEvent
  1671 ;;		_handle_sync
  1672 ;;		_vscp_error
  1673 ;;		_doOneSecondWork
  1674 ;;		_vscp_doOneSecondWork
  1675 ;;		_doWork
  1676 ;; This function is called by:
  1677 ;;		Startup code after reset
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text0
  1682  003C2C                     __ptext0:
  1683                           	opt stack 0
  1684  003C2C                     _main:
  1685                           	opt stack 21
  1686                           
  1687                           ;main.c: 302: uint32_t i;
  1688                           ;main.c: 304: init();
  1689                           
  1690                           ;incstack = 0
  1691                           ;incstack = 0
  1692  003C2C  EC50  F027         	call	_init	;wreg free
  1693                           
  1694                           ;main.c: 308: if ( !vscp_check_pstorage() ) {
  1695  003C30  EC9E  F028         	call	_vscp_check_pstorage	;wreg free
  1696  003C34  0900               	iorlw	0
  1697  003C36  B4D8               	btfsc	status,2,c
  1698                           
  1699                           ;main.c: 311: init_app_eeprom();
  1700  003C38  EC96  F010         	call	_init_app_eeprom	;wreg free
  1701                           
  1702                           ;main.c: 313: }
  1703                           ;main.c: 315: vscp_init();
  1704  003C3C  EC87  F026         	call	_vscp_init	;wreg free
  1705  003C40                     l168:
  1706  003C40  0004               	clrwdt		;# 
  1707                           
  1708                           ;main.c: 321: if ( ( vscp_initbtncnt > 250 ) &&
  1709                           ;main.c: 322: ( 0x01 != vscp_node_state ) ) {
  1710  003C42  0EFA               	movlw	250
  1711  003C44  0100               	movlb	0	; () banked
  1712  003C46  65BC               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1713  003C48  D00C               	goto	l13532
  1714                           
  1715                           ; BSR set to: 0
  1716  003C4A  05BE               	decf	_vscp_node_state& (0+255),w,b
  1717  003C4C  E00A               	bz	l13532
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 325: vscp_nickname = 0xff;
  1721  003C4E  69BD               	setf	_vscp_nickname& (0+255),b
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;main.c: 326: writeEEPROM(0x01, 0xff);
  1725  003C50  6A0F               	clrf	?_writeEEPROM+1,c
  1726  003C52  0E01               	movlw	1
  1727  003C54  6E0E               	movwf	?_writeEEPROM,c
  1728  003C56  0EFF               	movlw	255
  1729  003C58  6810               	setf	?_writeEEPROM+2,c
  1730  003C5A  EC67  F028         	call	_writeEEPROM	;wreg free
  1731                           
  1732                           ;main.c: 327: vscp_init();
  1733  003C5E  EC87  F026         	call	_vscp_init	;wreg free
  1734  003C62                     l13532:
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;main.c: 329: }
  1738                           ;main.c: 333: vscp_imsg.flags = 0;
  1739  003C62  6BBF               	clrf	_vscp_imsg& (0+255),b
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;main.c: 334: vscp_getEvent();
  1743  003C64  EC17  F028         	call	_vscp_getEvent	;wreg free
  1744                           
  1745                           ;main.c: 337: switch (vscp_node_state) {
  1746  003C68  D024               	goto	l13562
  1747  003C6A                     l13536:
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;main.c: 342: if (0xff == vscp_nickname) {
  1751  003C6A  29BD               	incf	_vscp_nickname& (0+255),w,b
  1752  003C6C  E103               	bnz	l13540
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;main.c: 344: vscp_node_state = 0x01;
  1756  003C6E  0E01               	movlw	1
  1757  003C70  6FBE               	movwf	_vscp_node_state& (0+255),b
  1758                           
  1759                           ;main.c: 345: }
  1760  003C72  D02B               	goto	l13564
  1761  003C74                     l13540:
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;main.c: 346: else {
  1765                           ;main.c: 348: vscp_node_state = 0x03;
  1766  003C74  0E03               	movlw	3
  1767  003C76  6FBE               	movwf	_vscp_node_state& (0+255),b
  1768  003C78                     l13542:
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;main.c: 349: vscp_goActiveState();
  1772  003C78  ECD2  F028         	call	_vscp_goActiveState	;wreg free
  1773  003C7C  D026               	goto	l13564
  1774  003C7E                     l13544:
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;main.c: 354: vscp_handleProbeState();
  1778  003C7E  EC05  F020         	call	_vscp_handleProbeState	;wreg free
  1779                           
  1780                           ;main.c: 355: break;
  1781  003C82  D023               	goto	l13564
  1782  003C84                     l177:
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;main.c: 364: if (vscp_imsg.flags & 0x80) {
  1786  003C84  AFBF               	btfss	_vscp_imsg& (0+255),7,b
  1787  003C86  D021               	goto	l13564
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;main.c: 366: if ( 0 == vscp_imsg.vscp_class ) {
  1791  003C88  51C2               	movf	(_vscp_imsg+3)& (0+255),w,b
  1792  003C8A  11C1               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1793  003C8C  E103               	bnz	l13552
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;main.c: 369: vscp_handleProtocolEvent();
  1797  003C8E  EC84  F00D         	call	_vscp_handleProtocolEvent	;wreg free
  1798                           
  1799                           ;main.c: 371: }
  1800  003C92  D01B               	goto	l13564
  1801  003C94                     l13552:
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;main.c: 372: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1805                           ;main.c: 373: ( 26 == vscp_imsg.vscp_type ) ) {
  1806  003C94  51C1               	movf	(_vscp_imsg+2)& (0+255),w,b
  1807  003C96  0A1E               	xorlw	30
  1808  003C98  11C2               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1809  003C9A  E117               	bnz	l13564
  1810                           
  1811                           ; BSR set to: 0
  1812  003C9C  51C3               	movf	(_vscp_imsg+4)& (0+255),w,b
  1813  003C9E  0A1A               	xorlw	26
  1814  003CA0  E114               	bnz	l13564
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;main.c: 374: handle_sync();
  1818  003CA2  ECBE  F023         	call	_handle_sync	;wreg free
  1819  003CA6  D011               	goto	l13564
  1820  003CA8                     l13558:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 381: vscp_error();
  1824  003CA8  ECBD  F029         	call	_vscp_error	;wreg free
  1825                           
  1826                           ;main.c: 382: break;
  1827  003CAC  D00E               	goto	l13564
  1828  003CAE                     l183:
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;main.c: 385: vscp_node_state = 0x00;
  1832  003CAE  6BBE               	clrf	_vscp_node_state& (0+255),b
  1833                           
  1834                           ;main.c: 386: break;
  1835  003CB0  D00C               	goto	l13564
  1836  003CB2                     l13562:
  1837  003CB2  0100               	movlb	0	; () banked
  1838  003CB4  51BE               	movf	_vscp_node_state& (0+255),w,b
  1839                           
  1840                           ; Switch size 1, requested type "space"
  1841                           ; Number of cases is 5, Range of values is 0 to 4
  1842                           ; switch strategies available:
  1843                           ; Name         Instructions Cycles
  1844                           ; simple_byte           16     9 (average)
  1845                           ;	Chosen strategy is simple_byte
  1846  003CB6  E0D9               	bz	l13536
  1847  003CB8  0A01               	xorlw	1	; case 1
  1848  003CBA  E0E1               	bz	l13544
  1849  003CBC  0A03               	xorlw	3	; case 2
  1850  003CBE  E0DC               	bz	l13542
  1851  003CC0  0A01               	xorlw	1	; case 3
  1852  003CC2  E0E0               	bz	l177
  1853  003CC4  0A07               	xorlw	7	; case 4
  1854  003CC6  E0F0               	bz	l13558
  1855  003CC8  D7F2               	goto	l183
  1856  003CCA                     l13564:
  1857                           
  1858                           ;main.c: 392: if ( measurement_clock > 1000 ) {
  1859  003CCA  0EE9               	movlw	233
  1860  003CCC  0101               	movlb	1	; () banked
  1861  003CCE  5D06               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1862  003CD0  0E03               	movlw	3
  1863  003CD2  5907               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1864  003CD4  0E00               	movlw	0
  1865  003CD6  5908               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1866  003CD8  0E00               	movlw	0
  1867  003CDA  5909               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1868  003CDC  E3B1               	bnc	l168
  1869                           
  1870                           ; BSR set to: 1
  1871                           ;main.c: 394: measurement_clock = 0;
  1872  003CDE  6B06               	clrf	_measurement_clock& (0+255),b	;volatile
  1873  003CE0  6B07               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1874  003CE2  6B08               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1875  003CE4  6B09               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1876                           
  1877                           ; BSR set to: 1
  1878                           ;main.c: 395: doOneSecondWork();
  1879  003CE6  EC7A  F013         	call	_doOneSecondWork	;wreg free
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;main.c: 396: seconds++;
  1883  003CEA  2BBA               	incf	_seconds& (0+255),f,b
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;main.c: 400: if (0x03 == vscp_node_state) {
  1887  003CEC  51BE               	movf	_vscp_node_state& (0+255),w,b
  1888  003CEE  0A03               	xorlw	3
  1889  003CF0  E11A               	bnz	l13586
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 401: for (i = 0; i < 6; i++) {
  1893  003CF2  6BA5               	clrf	main@i& (0+255),b
  1894  003CF4  6BA6               	clrf	(main@i+1)& (0+255),b
  1895  003CF6  6BA7               	clrf	(main@i+2)& (0+255),b
  1896  003CF8  6BA8               	clrf	(main@i+3)& (0+255),b
  1897  003CFA                     l13580:
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 402: seconds_temp[i]++;
  1901  003CFA  0E00               	movlw	low _seconds_temp
  1902  003CFC  0100               	movlb	0	; () banked
  1903  003CFE  25A5               	addwf	main@i& (0+255),w,b
  1904  003D00  6ED9               	movwf	fsr2l,c
  1905  003D02  0E01               	movlw	high _seconds_temp
  1906  003D04  21A6               	addwfc	(main@i+1)& (0+255),w,b
  1907  003D06  6EDA               	movwf	fsr2h,c
  1908  003D08  2ADF               	incf	indf2,f,c
  1909                           
  1910                           ; BSR set to: 0
  1911  003D0A  2BA5               	incf	main@i& (0+255),f,b
  1912  003D0C  0E00               	movlw	0
  1913  003D0E  23A6               	addwfc	(main@i+1)& (0+255),f,b
  1914  003D10  23A7               	addwfc	(main@i+2)& (0+255),f,b
  1915  003D12  23A8               	addwfc	(main@i+3)& (0+255),f,b
  1916                           
  1917                           ; BSR set to: 0
  1918  003D14  0E06               	movlw	6
  1919  003D16  5DA5               	subwf	main@i& (0+255),w,b
  1920  003D18  0E00               	movlw	0
  1921  003D1A  59A6               	subwfb	(main@i+1)& (0+255),w,b
  1922  003D1C  0E00               	movlw	0
  1923  003D1E  59A7               	subwfb	(main@i+2)& (0+255),w,b
  1924  003D20  0E00               	movlw	0
  1925  003D22  59A8               	subwfb	(main@i+3)& (0+255),w,b
  1926  003D24  E3EA               	bnc	l13580
  1927  003D26                     l13586:
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;main.c: 403: }
  1931                           ;main.c: 404: }
  1932                           ;main.c: 406: if (seconds > 60) {
  1933  003D26  0E3C               	movlw	60
  1934  003D28  65BA               	cpfsgt	_seconds& (0+255),b
  1935  003D2A  D001               	goto	l13590
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;main.c: 407: seconds = 0;
  1939  003D2C  6BBA               	clrf	_seconds& (0+255),b
  1940  003D2E                     l13590:
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;main.c: 408: }
  1944                           ;main.c: 412: if (0x03 == vscp_node_state) {
  1945  003D2E  51BE               	movf	_vscp_node_state& (0+255),w,b
  1946  003D30  0A03               	xorlw	3
  1947  003D32  B4D8               	btfsc	status,2,c
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;main.c: 413: vscp_doOneSecondWork();
  1951  003D34  ECF4  F025         	call	_vscp_doOneSecondWork	;wreg free
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 414: }
  1955                           ;main.c: 417: doWork();
  1956  003D38  EC2C  F016         	call	_doWork	;wreg free
  1957  003D3C  D781               	goto	l168
  1958  003D3E                     __end_of_main:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           prodh	equ	0xFF4
  1965                           prodl	equ	0xFF3
  1966                           intcon	equ	0xFF2
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           indf1	equ	0xFE7
  1970                           postdec1	equ	0xFE5
  1971                           fsr1h	equ	0xFE2
  1972                           fsr1l	equ	0xFE1
  1973                           indf2	equ	0xFDF
  1974                           postinc2	equ	0xFDE
  1975                           postdec2	equ	0xFDD
  1976                           plusw2	equ	0xFDB
  1977                           fsr2h	equ	0xFDA
  1978                           fsr2l	equ	0xFD9
  1979                           status	equ	0xFD8
  1980                           
  1981 ;; *************** function _doWork *****************
  1982 ;; Defined at:
  1983 ;;		line 432 in file "../main.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;  temp            4   47[BANK1 ] unsigned long 
  1988 ;;  avarage         4   43[BANK1 ] unsigned long 
  1989 ;;  resistance      4   38[BANK1 ] unsigned long 
  1990 ;;  v               4   32[BANK1 ] unsigned long 
  1991 ;;  calVoltage      4    4[BANK1 ] unsigned long 
  1992 ;;  Rinf            4    0[BANK1 ] unsigned long 
  1993 ;;  B               2   36[BANK1 ] unsigned short 
  1994 ;;  i               1   51[BANK1 ] unsigned char 
  1995 ;;  j               1   42[BANK1 ] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;		None               void
  1998 ;; Registers used:
  1999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : F/0
  2002 ;;		On exit  : F/1
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2005 ;;      Params:         0       0       0       0       0       0       0
  2006 ;;      Locals:         0       0      52       0       0       0       0
  2007 ;;      Temps:          0      14       0       0       0       0       0
  2008 ;;      Totals:         0      14      52       0       0       0       0
  2009 ;;Total ram usage:       66 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    7
  2012 ;; This function calls:
  2013 ;;		_readEEPROM
  2014 ;;		_exp
  2015 ;;		_log
  2016 ;;		_getCalibrationValue
  2017 ;;		___aldiv
  2018 ;;		___altofl
  2019 ;;		___asfladd
  2020 ;;		___fladd
  2021 ;;		___asfldiv
  2022 ;;		___fldiv
  2023 ;;		___flmul
  2024 ;;		___asflsub
  2025 ;;		___flsub
  2026 ;;		___fltol
  2027 ;;		___lwtofl
  2028 ;; This function is called by:
  2029 ;;		_main
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text1
  2034  002C58                     __ptext1:
  2035                           	opt stack 0
  2036  002C58                     _doWork:
  2037                           	opt stack 22
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;main.c: 433: uint8_t i, j;
  2041                           ;main.c: 434: uint16_t B;
  2042                           ;main.c: 435: double avarage;
  2043                           ;main.c: 436: double resistance;
  2044                           ;main.c: 437: double Rinf;
  2045                           ;main.c: 438: double temp;
  2046                           ;main.c: 439: double v;
  2047                           ;main.c: 440: double calVoltage;
  2048                           ;main.c: 442: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  2049                           ;main.c: 443: readEEPROM(0xF3));
  2050                           
  2051                           ; BSR set to: 1
  2052                           ;incstack = 0
  2053                           ;incstack = 0
  2054  002C58  6A17               	clrf	?_readEEPROM+1,c
  2055  002C5A  0EF3               	movlw	243
  2056  002C5C  6E16               	movwf	?_readEEPROM,c
  2057  002C5E  EC64  F029         	call	_readEEPROM	;wreg free
  2058  002C62  0100               	movlb	0	; () banked
  2059  002C64  6F97               	movwf	??_doWork& (0+255),b
  2060  002C66  6A17               	clrf	?_readEEPROM+1,c
  2061  002C68  0EF2               	movlw	242
  2062  002C6A  6E16               	movwf	?_readEEPROM,c
  2063  002C6C  EC64  F029         	call	_readEEPROM	;wreg free
  2064  002C70  6E1B               	movwf	?___lwtofl+1,c
  2065  002C72  0100               	movlb	0	; () banked
  2066  002C74  5197               	movf	??_doWork& (0+255),w,b
  2067  002C76  6E1A               	movwf	?___lwtofl,c
  2068  002C78  ECED  F027         	call	___lwtofl	;wreg free
  2069  002C7C  C01D  F166         	movff	?___lwtofl+3,doWork@calVoltage+3
  2070  002C80  C01C  F165         	movff	?___lwtofl+2,doWork@calVoltage+2
  2071  002C84  C01B  F164         	movff	?___lwtofl+1,doWork@calVoltage+1
  2072  002C88  C01A  F163         	movff	?___lwtofl,doWork@calVoltage
  2073                           
  2074                           ;main.c: 448: for (i = 0; i < 6; i++) {
  2075  002C8C  0101               	movlb	1	; () banked
  2076  002C8E  6B92               	clrf	doWork@i& (0+255),b
  2077  002C90                     l13784:
  2078                           
  2079                           ; BSR set to: 1
  2080                           ;main.c: 450: if (adc_conversion_flags & 1 << i) {
  2081  002C90  C192  F097         	movff	doWork@i,??_doWork
  2082  002C94  0E01               	movlw	1
  2083  002C96  0100               	movlb	0	; () banked
  2084  002C98  6F98               	movwf	(??_doWork+1)& (0+255),b
  2085  002C9A  2B97               	incf	??_doWork& (0+255),f,b
  2086  002C9C  D002               	goto	u13084
  2087  002C9E                     u13085:
  2088  002C9E  90D8               	bcf	status,0,c
  2089  002CA0  3798               	rlcf	(??_doWork+1)& (0+255),f,b
  2090  002CA2                     u13084:
  2091  002CA2  2F97               	decfsz	??_doWork& (0+255),f,b
  2092  002CA4  D7FC               	goto	u13085
  2093  002CA6  5198               	movf	(??_doWork+1)& (0+255),w,b
  2094  002CA8  15B7               	andwf	_adc_conversion_flags& (0+255),w,b
  2095  002CAA  E101 D1E0          	bz	l13838
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;main.c: 453: avarage = 0;
  2099  002CAE  0101               	movlb	1	; () banked
  2100  002CB0  6B8A               	clrf	doWork@avarage& (0+255),b
  2101  002CB2  6B8B               	clrf	(doWork@avarage+1)& (0+255),b
  2102  002CB4  6B8C               	clrf	(doWork@avarage+2)& (0+255),b
  2103  002CB6  6B8D               	clrf	(doWork@avarage+3)& (0+255),b
  2104                           
  2105                           ;main.c: 454: for (j = 0; j < 80; j++) {
  2106  002CB8  6B89               	clrf	doWork@j& (0+255),b
  2107  002CBA                     l13792:
  2108                           
  2109                           ; BSR set to: 1
  2110                           ;main.c: 455: avarage += ((uint16_t)adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  2111  002CBA  0E01               	movlw	high doWork@avarage
  2112  002CBC  0100               	movlb	0	; () banked
  2113  002CBE  6F78               	movwf	(?___asfladd+1)& (0+255),b
  2114  002CC0  0E8A               	movlw	low doWork@avarage
  2115  002CC2  6F77               	movwf	?___asfladd& (0+255),b
  2116  002CC4  90D8               	bcf	status,0,c
  2117  002CC6  0101               	movlb	1	; () banked
  2118  002CC8  3592               	rlcf	doWork@i& (0+255),w,b
  2119  002CCA  0100               	movlb	0	; () banked
  2120  002CCC  6F97               	movwf	??_doWork& (0+255),b
  2121  002CCE  6B98               	clrf	(??_doWork+1)& (0+255),b
  2122  002CD0  3798               	rlcf	(??_doWork+1)& (0+255),f,b
  2123  002CD2  0101               	movlb	1	; () banked
  2124  002CD4  5189               	movf	doWork@j& (0+255),w,b
  2125  002CD6  0D0C               	mullw	12
  2126  002CD8  0E95               	movlw	low (_adc+1)
  2127  002CDA  24F3               	addwf	prodl,w,c
  2128  002CDC  0100               	movlb	0	; () banked
  2129  002CDE  6F99               	movwf	(??_doWork+2)& (0+255),b
  2130  002CE0  0E01               	movlw	high (_adc+1)
  2131  002CE2  20F4               	addwfc	prodh,w,c
  2132  002CE4  6F9A               	movwf	(??_doWork+3)& (0+255),b
  2133  002CE6  5197               	movf	??_doWork& (0+255),w,b
  2134  002CE8  2599               	addwf	(??_doWork+2)& (0+255),w,b
  2135  002CEA  6ED9               	movwf	fsr2l,c
  2136  002CEC  5198               	movf	(??_doWork+1)& (0+255),w,b
  2137  002CEE  219A               	addwfc	(??_doWork+3)& (0+255),w,b
  2138  002CF0  6EDA               	movwf	fsr2h,c
  2139  002CF2  50DF               	movf	indf2,w,c
  2140  002CF4  6F9B               	movwf	(??_doWork+4)& (0+255),b
  2141  002CF6  90D8               	bcf	status,0,c
  2142  002CF8  0101               	movlb	1	; () banked
  2143  002CFA  3592               	rlcf	doWork@i& (0+255),w,b
  2144  002CFC  0100               	movlb	0	; () banked
  2145  002CFE  6F9C               	movwf	(??_doWork+5)& (0+255),b
  2146  002D00  6B9D               	clrf	(??_doWork+6)& (0+255),b
  2147  002D02  379D               	rlcf	(??_doWork+6)& (0+255),f,b
  2148  002D04  0101               	movlb	1	; () banked
  2149  002D06  5189               	movf	doWork@j& (0+255),w,b
  2150  002D08  0D0C               	mullw	12
  2151  002D0A  0E94               	movlw	low _adc
  2152  002D0C  24F3               	addwf	prodl,w,c
  2153  002D0E  0100               	movlb	0	; () banked
  2154  002D10  6F9E               	movwf	(??_doWork+7)& (0+255),b
  2155  002D12  0E01               	movlw	high _adc
  2156  002D14  20F4               	addwfc	prodh,w,c
  2157  002D16  6F9F               	movwf	(??_doWork+8)& (0+255),b
  2158  002D18  519C               	movf	(??_doWork+5)& (0+255),w,b
  2159  002D1A  259E               	addwf	(??_doWork+7)& (0+255),w,b
  2160  002D1C  6ED9               	movwf	fsr2l,c
  2161  002D1E  519D               	movf	(??_doWork+6)& (0+255),w,b
  2162  002D20  219F               	addwfc	(??_doWork+8)& (0+255),w,b
  2163  002D22  6EDA               	movwf	fsr2h,c
  2164  002D24  50DF               	movf	indf2,w,c
  2165  002D26  6E1B               	movwf	?___lwtofl+1,c
  2166  002D28  519B               	movf	(??_doWork+4)& (0+255),w,b
  2167  002D2A  6E1A               	movwf	?___lwtofl,c
  2168  002D2C  ECED  F027         	call	___lwtofl	;wreg free
  2169  002D30  C01D  F07C         	movff	?___lwtofl+3,?___asfladd+5
  2170  002D34  C01C  F07B         	movff	?___lwtofl+2,?___asfladd+4
  2171  002D38  C01B  F07A         	movff	?___lwtofl+1,?___asfladd+3
  2172  002D3C  C01A  F079         	movff	?___lwtofl,?___asfladd+2
  2173  002D40  EC5A  F025         	call	___asfladd	;wreg free
  2174                           
  2175                           ; BSR set to: 0
  2176  002D44  0101               	movlb	1	; () banked
  2177  002D46  2B89               	incf	doWork@j& (0+255),f,b
  2178                           
  2179                           ; BSR set to: 1
  2180  002D48  0E4F               	movlw	79
  2181  002D4A  6589               	cpfsgt	doWork@j& (0+255),b
  2182  002D4C  D7B6               	goto	l13792
  2183                           
  2184                           ; BSR set to: 1
  2185                           ;main.c: 459: if (1) {
  2186  002D4E  0E01               	movlw	high doWork@avarage
  2187  002D50  6E35               	movwf	?___asfldiv+1,c
  2188  002D52  0E8A               	movlw	low doWork@avarage
  2189  002D54  6E34               	movwf	?___asfldiv,c
  2190  002D56  6A36               	clrf	?___asfldiv+2,c
  2191  002D58  6A37               	clrf	?___asfldiv+3,c
  2192  002D5A  0EA0               	movlw	160
  2193  002D5C  6E38               	movwf	?___asfldiv+4,c
  2194  002D5E  0E42               	movlw	66
  2195  002D60  6E39               	movwf	?___asfldiv+5,c
  2196  002D62  EC1A  F026         	call	___asfldiv	;wreg free
  2197                           
  2198                           ;main.c: 467: B = (uint16_t)readEEPROM(2 * i + 0x4F)*256 +
  2199                           ;main.c: 468: readEEPROM(2 * i + 0x50);
  2200  002D66  0101               	movlb	1	; () banked
  2201  002D68  5192               	movf	doWork@i& (0+255),w,b
  2202  002D6A  0D02               	mullw	2
  2203  002D6C  0E50               	movlw	80
  2204  002D6E  24F3               	addwf	prodl,w,c
  2205  002D70  6E16               	movwf	?_readEEPROM,c
  2206  002D72  0E00               	movlw	0
  2207  002D74  20F4               	addwfc	prodh,w,c
  2208  002D76  6E17               	movwf	?_readEEPROM+1,c
  2209  002D78  EC64  F029         	call	_readEEPROM	;wreg free
  2210  002D7C  0100               	movlb	0	; () banked
  2211  002D7E  6F97               	movwf	??_doWork& (0+255),b
  2212  002D80  0101               	movlb	1	; () banked
  2213  002D82  5192               	movf	doWork@i& (0+255),w,b
  2214  002D84  0D02               	mullw	2
  2215  002D86  0E4F               	movlw	79
  2216  002D88  24F3               	addwf	prodl,w,c
  2217  002D8A  6E16               	movwf	?_readEEPROM,c
  2218  002D8C  0E00               	movlw	0
  2219  002D8E  20F4               	addwfc	prodh,w,c
  2220  002D90  6E17               	movwf	?_readEEPROM+1,c
  2221  002D92  EC64  F029         	call	_readEEPROM	;wreg free
  2222  002D96  0101               	movlb	1	; () banked
  2223  002D98  6F84               	movwf	(doWork@B+1)& (0+255),b
  2224  002D9A  0100               	movlb	0	; () banked
  2225  002D9C  5197               	movf	??_doWork& (0+255),w,b
  2226  002D9E  0101               	movlb	1	; () banked
  2227  002DA0  6F83               	movwf	doWork@B& (0+255),b
  2228                           
  2229                           ; BSR set to: 1
  2230                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2231  002DA2  0E33               	movlw	51
  2232  002DA4  6E22               	movwf	?___fldiv+4,c
  2233  002DA6  0E13               	movlw	19
  2234  002DA8  6E23               	movwf	?___fldiv+5,c
  2235  002DAA  0E95               	movlw	149
  2236  002DAC  6E24               	movwf	?___fldiv+6,c
  2237  002DAE  0EC3               	movlw	195
  2238  002DB0  6E25               	movwf	?___fldiv+7,c
  2239  002DB2  C183  F01A         	movff	doWork@B,?___lwtofl
  2240  002DB6  C184  F01B         	movff	doWork@B+1,?___lwtofl+1
  2241  002DBA  ECED  F027         	call	___lwtofl	;wreg free
  2242  002DBE  C01D  F021         	movff	?___lwtofl+3,?___fldiv+3
  2243  002DC2  C01C  F020         	movff	?___lwtofl+2,?___fldiv+2
  2244  002DC6  C01B  F01F         	movff	?___lwtofl+1,?___fldiv+1
  2245  002DCA  C01A  F01E         	movff	?___lwtofl,?___fldiv
  2246  002DCE  EC2E  F022         	call	___fldiv	;wreg free
  2247  002DD2  C021  F16A         	movff	?___fldiv+3,_doWork$2276+3
  2248  002DD6  C020  F169         	movff	?___fldiv+2,_doWork$2276+2
  2249  002DDA  C01F  F168         	movff	?___fldiv+1,_doWork$2276+1
  2250  002DDE  C01E  F167         	movff	?___fldiv,_doWork$2276
  2251                           
  2252                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2253  002DE2  C167  F08C         	movff	_doWork$2276,?_exp
  2254  002DE6  C168  F08D         	movff	_doWork$2276+1,?_exp+1
  2255  002DEA  C169  F08E         	movff	_doWork$2276+2,?_exp+2
  2256  002DEE  C16A  F08F         	movff	_doWork$2276+3,?_exp+3
  2257  002DF2  EC4A  F019         	call	_exp	;wreg free
  2258  002DF6  C08F  F16E         	movff	?_exp+3,_doWork$2277+3
  2259  002DFA  C08E  F16D         	movff	?_exp+2,_doWork$2277+2
  2260  002DFE  C08D  F16C         	movff	?_exp+1,_doWork$2277+1
  2261  002E02  C08C  F16B         	movff	?_exp,_doWork$2277
  2262                           
  2263                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2264  002E06  C16B  F060         	movff	_doWork$2277,?___flmul
  2265  002E0A  C16C  F061         	movff	_doWork$2277+1,?___flmul+1
  2266  002E0E  C16D  F062         	movff	_doWork$2277+2,?___flmul+2
  2267  002E12  C16E  F063         	movff	_doWork$2277+3,?___flmul+3
  2268  002E16  D931               	call	PL56	;call to abstracted procedure
  2269  002E18  ECA1  F01F         	call	___flmul	;wreg free
  2270  002E1C  C063  F162         	movff	?___flmul+3,doWork@Rinf+3
  2271  002E20  C062  F161         	movff	?___flmul+2,doWork@Rinf+2
  2272  002E24  C061  F160         	movff	?___flmul+1,doWork@Rinf+1
  2273  002E28  C060  F15F         	movff	?___flmul,doWork@Rinf
  2274                           
  2275                           ;main.c: 473: v = 5.0 * (double) avarage / 1025;
  2276  002E2C  0100               	movlb	0	; () banked
  2277  002E2E  6B64               	clrf	(?___flmul+4)& (0+255),b
  2278  002E30  6B65               	clrf	(?___flmul+5)& (0+255),b
  2279  002E32  0EA0               	movlw	160
  2280  002E34  6F66               	movwf	(?___flmul+6)& (0+255),b
  2281  002E36  0E40               	movlw	64
  2282  002E38  6F67               	movwf	(?___flmul+7)& (0+255),b
  2283  002E3A  C18A  F060         	movff	doWork@avarage,?___flmul
  2284  002E3E  C18B  F061         	movff	doWork@avarage+1,?___flmul+1
  2285  002E42  C18C  F062         	movff	doWork@avarage+2,?___flmul+2
  2286  002E46  C18D  F063         	movff	doWork@avarage+3,?___flmul+3
  2287  002E4A  ECA1  F01F         	call	___flmul	;wreg free
  2288  002E4E  C063  F021         	movff	?___flmul+3,?___fldiv+3
  2289  002E52  C062  F020         	movff	?___flmul+2,?___fldiv+2
  2290  002E56  C061  F01F         	movff	?___flmul+1,?___fldiv+1
  2291  002E5A  C060  F01E         	movff	?___flmul,?___fldiv
  2292  002E5E  6A22               	clrf	?___fldiv+4,c
  2293  002E60  0E20               	movlw	32
  2294  002E62  6E23               	movwf	?___fldiv+5,c
  2295  002E64  0E80               	movlw	128
  2296  002E66  6E24               	movwf	?___fldiv+6,c
  2297  002E68  0E44               	movlw	68
  2298  002E6A  6E25               	movwf	?___fldiv+7,c
  2299  002E6C  EC2E  F022         	call	___fldiv	;wreg free
  2300  002E70  C021  F182         	movff	?___fldiv+3,doWork@v+3
  2301  002E74  C020  F181         	movff	?___fldiv+2,doWork@v+2
  2302  002E78  C01F  F180         	movff	?___fldiv+1,doWork@v+1
  2303  002E7C  C01E  F17F         	movff	?___fldiv,doWork@v
  2304                           
  2305                           ;main.c: 475: resistance = (calVoltage - 10000.0 * v) / v;
  2306  002E80  D8FC               	call	PL56	;call to abstracted procedure
  2307  002E82  C17F  F060         	movff	doWork@v,?___flmul
  2308  002E86  C180  F061         	movff	doWork@v+1,?___flmul+1
  2309  002E8A  C181  F062         	movff	doWork@v+2,?___flmul+2
  2310  002E8E  C182  F063         	movff	doWork@v+3,?___flmul+3
  2311  002E92  ECA1  F01F         	call	___flmul	;wreg free
  2312  002E96  C063  F07E         	movff	?___flmul+3,?___flsub+7
  2313  002E9A  C062  F07D         	movff	?___flmul+2,?___flsub+6
  2314  002E9E  C061  F07C         	movff	?___flmul+1,?___flsub+5
  2315  002EA2  C060  F07B         	movff	?___flmul,?___flsub+4
  2316  002EA6  C163  F077         	movff	doWork@calVoltage,?___flsub
  2317  002EAA  C164  F078         	movff	doWork@calVoltage+1,?___flsub+1
  2318  002EAE  C165  F079         	movff	doWork@calVoltage+2,?___flsub+2
  2319  002EB2  C166  F07A         	movff	doWork@calVoltage+3,?___flsub+3
  2320  002EB6  EC32  F027         	call	___flsub	;wreg free
  2321  002EBA  C07A  F021         	movff	?___flsub+3,?___fldiv+3
  2322  002EBE  C079  F020         	movff	?___flsub+2,?___fldiv+2
  2323  002EC2  C078  F01F         	movff	?___flsub+1,?___fldiv+1
  2324  002EC6  C077  F01E         	movff	?___flsub,?___fldiv
  2325  002ECA  C17F  F022         	movff	doWork@v,?___fldiv+4
  2326  002ECE  C180  F023         	movff	doWork@v+1,?___fldiv+5
  2327  002ED2  C181  F024         	movff	doWork@v+2,?___fldiv+6
  2328  002ED6  C182  F025         	movff	doWork@v+3,?___fldiv+7
  2329  002EDA  EC2E  F022         	call	___fldiv	;wreg free
  2330  002EDE  C021  F188         	movff	?___fldiv+3,doWork@resistance+3
  2331  002EE2  C020  F187         	movff	?___fldiv+2,doWork@resistance+2
  2332  002EE6  C01F  F186         	movff	?___fldiv+1,doWork@resistance+1
  2333  002EEA  C01E  F185         	movff	?___fldiv,doWork@resistance
  2334                           
  2335                           ;main.c: 477: temp = ((double) B) / log(resistance / Rinf);
  2336  002EEE  C15F  F022         	movff	doWork@Rinf,?___fldiv+4
  2337  002EF2  C160  F023         	movff	doWork@Rinf+1,?___fldiv+5
  2338  002EF6  C161  F024         	movff	doWork@Rinf+2,?___fldiv+6
  2339  002EFA  C162  F025         	movff	doWork@Rinf+3,?___fldiv+7
  2340  002EFE  C185  F01E         	movff	doWork@resistance,?___fldiv
  2341  002F02  C186  F01F         	movff	doWork@resistance+1,?___fldiv+1
  2342  002F06  C187  F020         	movff	doWork@resistance+2,?___fldiv+2
  2343  002F0A  C188  F021         	movff	doWork@resistance+3,?___fldiv+3
  2344  002F0E  EC2E  F022         	call	___fldiv	;wreg free
  2345  002F12  C021  F086         	movff	?___fldiv+3,?_log+3
  2346  002F16  C020  F085         	movff	?___fldiv+2,?_log+2
  2347  002F1A  C01F  F084         	movff	?___fldiv+1,?_log+1
  2348  002F1E  C01E  F083         	movff	?___fldiv,?_log
  2349  002F22  EC6C  F01C         	call	_log	;wreg free
  2350  002F26  C086  F172         	movff	?_log+3,_doWork$2278+3
  2351  002F2A  C085  F171         	movff	?_log+2,_doWork$2278+2
  2352  002F2E  C084  F170         	movff	?_log+1,_doWork$2278+1
  2353  002F32  C083  F16F         	movff	?_log,_doWork$2278
  2354                           
  2355                           ;main.c: 477: temp = ((double) B) / log(resistance / Rinf);
  2356  002F36  C183  F01A         	movff	doWork@B,?___lwtofl
  2357  002F3A  C184  F01B         	movff	doWork@B+1,?___lwtofl+1
  2358  002F3E  ECED  F027         	call	___lwtofl	;wreg free
  2359  002F42  C01D  F021         	movff	?___lwtofl+3,?___fldiv+3
  2360  002F46  C01C  F020         	movff	?___lwtofl+2,?___fldiv+2
  2361  002F4A  C01B  F01F         	movff	?___lwtofl+1,?___fldiv+1
  2362  002F4E  C01A  F01E         	movff	?___lwtofl,?___fldiv
  2363  002F52  C16F  F022         	movff	_doWork$2278,?___fldiv+4
  2364  002F56  C170  F023         	movff	_doWork$2278+1,?___fldiv+5
  2365  002F5A  C171  F024         	movff	_doWork$2278+2,?___fldiv+6
  2366  002F5E  C172  F025         	movff	_doWork$2278+3,?___fldiv+7
  2367  002F62  EC2E  F022         	call	___fldiv	;wreg free
  2368  002F66  C021  F191         	movff	?___fldiv+3,doWork@temp+3
  2369  002F6A  C020  F190         	movff	?___fldiv+2,doWork@temp+2
  2370  002F6E  C01F  F18F         	movff	?___fldiv+1,doWork@temp+1
  2371  002F72  C01E  F18E         	movff	?___fldiv,doWork@temp
  2372                           
  2373                           ;main.c: 479: temp -= 273.15;
  2374  002F76  0E01               	movlw	high doWork@temp
  2375  002F78  0100               	movlb	0	; () banked
  2376  002F7A  6F80               	movwf	(?___asflsub+1)& (0+255),b
  2377  002F7C  0E8E               	movlw	low doWork@temp
  2378  002F7E  6F7F               	movwf	?___asflsub& (0+255),b
  2379  002F80  0E33               	movlw	51
  2380  002F82  6F81               	movwf	(?___asflsub+2)& (0+255),b
  2381  002F84  0E93               	movlw	147
  2382  002F86  6F82               	movwf	(?___asflsub+3)& (0+255),b
  2383  002F88  0E88               	movlw	136
  2384  002F8A  6F83               	movwf	(?___asflsub+4)& (0+255),b
  2385  002F8C  0E43               	movlw	67
  2386  002F8E  6F84               	movwf	(?___asflsub+5)& (0+255),b
  2387  002F90  EC81  F025         	call	___asflsub	;wreg free
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;main.c: 494: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2391  002F94  0101               	movlb	1	; () banked
  2392  002F96  5192               	movf	doWork@i& (0+255),w,b
  2393  002F98  ECEB  F026         	call	PL32	;call to abstracted procedure
  2394  002F9C  CFDE F097          	movff	postinc2,??_doWork
  2395  002FA0  CFDD F098          	movff	postdec2,??_doWork+1
  2396  002FA4  C097  F099         	movff	??_doWork,??_doWork+2
  2397  002FA8  C098  F09A         	movff	??_doWork+1,??_doWork+3
  2398  002FAC  0E00               	movlw	0
  2399  002FAE  BF9A               	btfsc	(??_doWork+3)& (0+255),7,b
  2400  002FB0  0EFF               	movlw	255
  2401  002FB2  6F9B               	movwf	(??_doWork+4)& (0+255),b
  2402  002FB4  6F9C               	movwf	(??_doWork+5)& (0+255),b
  2403  002FB6  0101               	movlb	1	; () banked
  2404  002FB8  5192               	movf	doWork@i& (0+255),w,b
  2405  002FBA  EC3F  F026         	call	_getCalibrationValue
  2406  002FBE  C01A  F09D         	movff	?_getCalibrationValue,??_doWork+6
  2407  002FC2  C01B  F09E         	movff	?_getCalibrationValue+1,??_doWork+7
  2408  002FC6  0E00               	movlw	0
  2409  002FC8  0100               	movlb	0	; () banked
  2410  002FCA  BF9E               	btfsc	(??_doWork+7)& (0+255),7,b
  2411  002FCC  0EFF               	movlw	255
  2412  002FCE  6F9F               	movwf	(??_doWork+8)& (0+255),b
  2413  002FD0  6FA0               	movwf	(??_doWork+9)& (0+255),b
  2414  002FD2  6B64               	clrf	(?___flmul+4)& (0+255),b
  2415  002FD4  6B65               	clrf	(?___flmul+5)& (0+255),b
  2416  002FD6  0EC8               	movlw	200
  2417  002FD8  6F66               	movwf	(?___flmul+6)& (0+255),b
  2418  002FDA  0E42               	movlw	66
  2419  002FDC  6F67               	movwf	(?___flmul+7)& (0+255),b
  2420  002FDE  C18E  F060         	movff	doWork@temp,?___flmul
  2421  002FE2  C18F  F061         	movff	doWork@temp+1,?___flmul+1
  2422  002FE6  C190  F062         	movff	doWork@temp+2,?___flmul+2
  2423  002FEA  C191  F063         	movff	doWork@temp+3,?___flmul+3
  2424  002FEE  ECA1  F01F         	call	___flmul	;wreg free
  2425  002FF2  C063  F045         	movff	?___flmul+3,?___fltol+3
  2426  002FF6  C062  F044         	movff	?___flmul+2,?___fltol+2
  2427  002FFA  C061  F043         	movff	?___flmul+1,?___fltol+1
  2428  002FFE  C060  F042         	movff	?___flmul,?___fltol
  2429  003002  EC24  F023         	call	___fltol	;wreg free
  2430  003006  519D               	movf	(??_doWork+6)& (0+255),w,b
  2431  003008  2442               	addwf	?___fltol,w,c
  2432  00300A  6FA1               	movwf	(??_doWork+10)& (0+255),b
  2433  00300C  519E               	movf	(??_doWork+7)& (0+255),w,b
  2434  00300E  2043               	addwfc	?___fltol+1,w,c
  2435  003010  6FA2               	movwf	(??_doWork+11)& (0+255),b
  2436  003012  519F               	movf	(??_doWork+8)& (0+255),w,b
  2437  003014  2044               	addwfc	?___fltol+2,w,c
  2438  003016  6FA3               	movwf	(??_doWork+12)& (0+255),b
  2439  003018  51A0               	movf	(??_doWork+9)& (0+255),w,b
  2440  00301A  2045               	addwfc	?___fltol+3,w,c
  2441  00301C  6FA4               	movwf	(??_doWork+13)& (0+255),b
  2442  00301E  5199               	movf	(??_doWork+2)& (0+255),w,b
  2443  003020  25A1               	addwf	(??_doWork+10)& (0+255),w,b
  2444  003022  6F6E               	movwf	?___aldiv& (0+255),b
  2445  003024  519A               	movf	(??_doWork+3)& (0+255),w,b
  2446  003026  21A2               	addwfc	(??_doWork+11)& (0+255),w,b
  2447  003028  6F6F               	movwf	(?___aldiv+1)& (0+255),b
  2448  00302A  519B               	movf	(??_doWork+4)& (0+255),w,b
  2449  00302C  21A3               	addwfc	(??_doWork+12)& (0+255),w,b
  2450  00302E  6F70               	movwf	(?___aldiv+2)& (0+255),b
  2451  003030  519C               	movf	(??_doWork+5)& (0+255),w,b
  2452  003032  21A4               	addwfc	(??_doWork+13)& (0+255),w,b
  2453  003034  6F71               	movwf	(?___aldiv+3)& (0+255),b
  2454  003036  0E02               	movlw	2
  2455  003038  6F72               	movwf	(?___aldiv+4)& (0+255),b
  2456  00303A  0E00               	movlw	0
  2457  00303C  6B73               	clrf	(?___aldiv+5)& (0+255),b
  2458  00303E  6B74               	clrf	(?___aldiv+6)& (0+255),b
  2459  003040  6B75               	clrf	(?___aldiv+7)& (0+255),b
  2460  003042  EC67  F020         	call	___aldiv	;wreg free
  2461  003046  0101               	movlb	1	; () banked
  2462  003048  5192               	movf	doWork@i& (0+255),w,b
  2463  00304A  ECEB  F026         	call	PL32	;call to abstracted procedure
  2464  00304E  C06E  FFDE         	movff	?___aldiv,postinc2
  2465  003052  C06F  FFDD         	movff	?___aldiv+1,postdec2
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;main.c: 515: }
  2469                           ;main.c: 518: adc_conversion_flags &= ~(1 << i);
  2470                           
  2471                           ;main.c: 496: }
  2472  003056  C192  F097         	movff	doWork@i,??_doWork
  2473  00305A  0E01               	movlw	1
  2474  00305C  6F98               	movwf	(??_doWork+1)& (0+255),b
  2475  00305E  2B97               	incf	??_doWork& (0+255),f,b
  2476  003060  D002               	goto	u13114
  2477  003062                     u13115:
  2478  003062  90D8               	bcf	status,0,c
  2479  003064  3798               	rlcf	(??_doWork+1)& (0+255),f,b
  2480  003066                     u13114:
  2481  003066  2F97               	decfsz	??_doWork& (0+255),f,b
  2482  003068  D7FC               	goto	u13115
  2483  00306A  1D98               	comf	(??_doWork+1)& (0+255),w,b
  2484  00306C  17B7               	andwf	_adc_conversion_flags& (0+255),f,b
  2485  00306E                     l13838:
  2486                           
  2487                           ; BSR set to: 0
  2488  00306E  0101               	movlb	1	; () banked
  2489  003070  2B92               	incf	doWork@i& (0+255),f,b
  2490                           
  2491                           ; BSR set to: 1
  2492  003072  0E05               	movlw	5
  2493  003074  6592               	cpfsgt	doWork@i& (0+255),b
  2494  003076  D60C               	goto	l13784
  2495                           
  2496                           ; BSR set to: 1
  2497  003078  0C05               	retlw	5
  2498  00307A                     __end_of_doWork:
  2499                           	opt stack 0
  2500  00307A                     PL56:
  2501                           	opt stack 22
  2502  00307A  0100               	movlb	0	; () banked
  2503  00307C  6B64               	clrf	(?___flmul+4)& (0+255),b
  2504  00307E  0E40               	movlw	64
  2505  003080  6F65               	movwf	(?___flmul+5)& (0+255),b
  2506  003082  0E1C               	movlw	28
  2507  003084  6F66               	movwf	(?___flmul+6)& (0+255),b
  2508  003086  0E46               	movlw	70
  2509  003088  6F67               	movwf	(?___flmul+7)& (0+255),b
  2510  00308A  0C46               	retlw	70
  2511  00308C                     __end_ofPL56:
  2512                           	opt stack 0
  2513                           tblptru	equ	0xFF8
  2514                           tblptrh	equ	0xFF7
  2515                           tblptrl	equ	0xFF6
  2516                           tablat	equ	0xFF5
  2517                           prodh	equ	0xFF4
  2518                           prodl	equ	0xFF3
  2519                           intcon	equ	0xFF2
  2520                           postinc0	equ	0xFEE
  2521                           wreg	equ	0xFE8
  2522                           indf1	equ	0xFE7
  2523                           postdec1	equ	0xFE5
  2524                           fsr1h	equ	0xFE2
  2525                           fsr1l	equ	0xFE1
  2526                           indf2	equ	0xFDF
  2527                           postinc2	equ	0xFDE
  2528                           postdec2	equ	0xFDD
  2529                           plusw2	equ	0xFDB
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function ___lwtofl *****************
  2535 ;; Defined at:
  2536 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  c               2   25[COMRAM] unsigned int 
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  4   25[COMRAM] unsigned int 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2, status,0, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2550 ;;      Params:         4       0       0       0       0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0
  2553 ;;      Totals:         4       0       0       0       0       0       0
  2554 ;;Total ram usage:        4 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    3
  2557 ;; This function calls:
  2558 ;;		___flpack
  2559 ;; This function is called by:
  2560 ;;		_doWork
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text2
  2565  004FDA                     __ptext2:
  2566                           	opt stack 0
  2567  004FDA                     ___lwtofl:
  2568                           	opt stack 25
  2569                           
  2570                           ; BSR set to: 1
  2571                           ;incstack = 0
  2572                           ;incstack = 0
  2573  004FDA  C01A  F00E         	movff	___lwtofl@c,?___flpack
  2574  004FDE  C01B  F00F         	movff	___lwtofl@c+1,?___flpack+1
  2575  004FE2  6A10               	clrf	?___flpack+2,c
  2576  004FE4  6A11               	clrf	?___flpack+3,c
  2577  004FE6  0E96               	movlw	150
  2578  004FE8  6E12               	movwf	?___flpack+4,c
  2579  004FEA  0E00               	movlw	0
  2580  004FEC  6A13               	clrf	?___flpack+5,c
  2581  004FEE  ECC5  F020         	call	___flpack	;wreg free
  2582  004FF2  C011  F01D         	movff	?___flpack+3,?___lwtofl+3
  2583  004FF6  C010  F01C         	movff	?___flpack+2,?___lwtofl+2
  2584  004FFA  C00F  F01B         	movff	?___flpack+1,?___lwtofl+1
  2585  004FFE  C00E  F01A         	movff	?___flpack,?___lwtofl
  2586  005002  0012               	return	
  2587  005004                     __end_of___lwtofl:
  2588                           	opt stack 0
  2589                           tblptru	equ	0xFF8
  2590                           tblptrh	equ	0xFF7
  2591                           tblptrl	equ	0xFF6
  2592                           tablat	equ	0xFF5
  2593                           prodh	equ	0xFF4
  2594                           prodl	equ	0xFF3
  2595                           intcon	equ	0xFF2
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           indf1	equ	0xFE7
  2599                           postdec1	equ	0xFE5
  2600                           fsr1h	equ	0xFE2
  2601                           fsr1l	equ	0xFE1
  2602                           indf2	equ	0xFDF
  2603                           postinc2	equ	0xFDE
  2604                           postdec2	equ	0xFDD
  2605                           plusw2	equ	0xFDB
  2606                           fsr2h	equ	0xFDA
  2607                           fsr2l	equ	0xFD9
  2608                           status	equ	0xFD8
  2609                           
  2610 ;; *************** function ___asfldiv *****************
  2611 ;; Defined at:
  2612 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;  f1p             2   51[COMRAM] PTR 
  2615 ;;		 -> doWork@avarage(4), 
  2616 ;;  f2              4   53[COMRAM] PTR 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  4   51[COMRAM] PTR 
  2621 ;; Registers used:
  2622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2623 ;; Tracked objects:
  2624 ;;		On entry : F/1
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2628 ;;      Params:         6       0       0       0       0       0       0
  2629 ;;      Locals:         0       0       0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0
  2631 ;;      Totals:         6       0       0       0       0       0       0
  2632 ;;Total ram usage:        6 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    4
  2635 ;; This function calls:
  2636 ;;		___fldiv
  2637 ;; This function is called by:
  2638 ;;		_doWork
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text3
  2643  004C34                     __ptext3:
  2644                           	opt stack 0
  2645  004C34                     ___asfldiv:
  2646                           	opt stack 24
  2647                           
  2648                           ; BSR set to: 1
  2649                           ;	Return value of ___asfldiv is never used
  2650                           
  2651                           ;incstack = 0
  2652                           ;incstack = 0
  2653  004C34  C034  FFD9         	movff	___asfldiv@f1p,fsr2l
  2654  004C38  C035  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2655  004C3C  CFDE F01E          	movff	postinc2,?___fldiv
  2656  004C40  CFDE F01F          	movff	postinc2,?___fldiv+1
  2657  004C44  CFDE F020          	movff	postinc2,?___fldiv+2
  2658  004C48  CFDE F021          	movff	postinc2,?___fldiv+3
  2659  004C4C  C036  F022         	movff	___asfldiv@f2,?___fldiv+4
  2660  004C50  C037  F023         	movff	___asfldiv@f2+1,?___fldiv+5
  2661  004C54  C038  F024         	movff	___asfldiv@f2+2,?___fldiv+6
  2662  004C58  C039  F025         	movff	___asfldiv@f2+3,?___fldiv+7
  2663  004C5C  EC2E  F022         	call	___fldiv	;wreg free
  2664  004C60  C034  FFD9         	movff	___asfldiv@f1p,fsr2l
  2665  004C64  C035  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2666  004C68  C01E  FFDE         	movff	?___fldiv,postinc2
  2667  004C6C  C01F  FFDE         	movff	?___fldiv+1,postinc2
  2668  004C70  C020  FFDE         	movff	?___fldiv+2,postinc2
  2669  004C74  C021  FFDD         	movff	?___fldiv+3,postdec2
  2670  004C78  06D9               	decf	fsr2l,f,c
  2671  004C7A  06D9               	decf	fsr2l,f,c
  2672  004C7C  0012               	return	
  2673  004C7E                     __end_of___asfldiv:
  2674                           	opt stack 0
  2675                           tblptru	equ	0xFF8
  2676                           tblptrh	equ	0xFF7
  2677                           tblptrl	equ	0xFF6
  2678                           tablat	equ	0xFF5
  2679                           prodh	equ	0xFF4
  2680                           prodl	equ	0xFF3
  2681                           intcon	equ	0xFF2
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           indf1	equ	0xFE7
  2685                           postdec1	equ	0xFE5
  2686                           fsr1h	equ	0xFE2
  2687                           fsr1l	equ	0xFE1
  2688                           indf2	equ	0xFDF
  2689                           postinc2	equ	0xFDE
  2690                           postdec2	equ	0xFDD
  2691                           plusw2	equ	0xFDB
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function ___asfladd *****************
  2697 ;; Defined at:
  2698 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  f1p             2   23[BANK0 ] PTR 
  2701 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  2702 ;;  f2              4   25[BANK0 ] PTR 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  4   23[BANK0 ] PTR 
  2707 ;; Registers used:
  2708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : F/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2714 ;;      Params:         0       6       0       0       0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0
  2717 ;;      Totals:         0       6       0       0       0       0       0
  2718 ;;Total ram usage:        6 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    4
  2721 ;; This function calls:
  2722 ;;		___fladd
  2723 ;; This function is called by:
  2724 ;;		_doWork
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text4
  2729  004AB4                     __ptext4:
  2730                           	opt stack 0
  2731  004AB4                     ___asfladd:
  2732                           	opt stack 24
  2733                           
  2734                           ;	Return value of ___asfladd is never used
  2735                           
  2736                           ;incstack = 0
  2737                           ;incstack = 0
  2738  004AB4  C077  FFD9         	movff	___asfladd@f1p,fsr2l
  2739  004AB8  C078  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2740  004ABC  0100               	movlb	0	; () banked
  2741  004ABE  CFDE F068          	movff	postinc2,?___fladd
  2742  004AC2  CFDE F069          	movff	postinc2,?___fladd+1
  2743  004AC6  CFDE F06A          	movff	postinc2,?___fladd+2
  2744  004ACA  CFDE F06B          	movff	postinc2,?___fladd+3
  2745  004ACE  C079  F06C         	movff	___asfladd@f2,?___fladd+4
  2746  004AD2  C07A  F06D         	movff	___asfladd@f2+1,?___fladd+5
  2747  004AD6  C07B  F06E         	movff	___asfladd@f2+2,?___fladd+6
  2748  004ADA  C07C  F06F         	movff	___asfladd@f2+3,?___fladd+7
  2749  004ADE  ECBE  F01B         	call	___fladd	;wreg free
  2750  004AE2  C077  FFD9         	movff	___asfladd@f1p,fsr2l
  2751  004AE6  C078  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2752  004AEA  0100               	movlb	0	; () banked
  2753  004AEC  C068  FFDE         	movff	?___fladd,postinc2
  2754  004AF0  C069  FFDE         	movff	?___fladd+1,postinc2
  2755  004AF4  C06A  FFDE         	movff	?___fladd+2,postinc2
  2756  004AF8  C06B  FFDD         	movff	?___fladd+3,postdec2
  2757  004AFC  06D9               	decf	fsr2l,f,c
  2758  004AFE  06D9               	decf	fsr2l,f,c
  2759                           
  2760                           ; BSR set to: 0
  2761  004B00  0012               	return	
  2762  004B02                     __end_of___asfladd:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           prodh	equ	0xFF4
  2769                           prodl	equ	0xFF3
  2770                           intcon	equ	0xFF2
  2771                           postinc0	equ	0xFEE
  2772                           wreg	equ	0xFE8
  2773                           indf1	equ	0xFE7
  2774                           postdec1	equ	0xFE5
  2775                           fsr1h	equ	0xFE2
  2776                           fsr1l	equ	0xFE1
  2777                           indf2	equ	0xFDF
  2778                           postinc2	equ	0xFDE
  2779                           postdec2	equ	0xFDD
  2780                           plusw2	equ	0xFDB
  2781                           fsr2h	equ	0xFDA
  2782                           fsr2l	equ	0xFD9
  2783                           status	equ	0xFD8
  2784                           
  2785 ;; *************** function ___aldiv *****************
  2786 ;; Defined at:
  2787 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  dividend        4   14[BANK0 ] long 
  2790 ;;  divisor         4   18[BANK0 ] long 
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  quotient        4   24[BANK0 ] long 
  2793 ;;  sign            1   23[BANK0 ] unsigned char 
  2794 ;;  counter         1   22[BANK0 ] unsigned char 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  4   14[BANK0 ] long 
  2797 ;; Registers used:
  2798 ;;		wreg, status,2, status,0
  2799 ;; Tracked objects:
  2800 ;;		On entry : F/0
  2801 ;;		On exit  : F/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2804 ;;      Params:         0       8       0       0       0       0       0
  2805 ;;      Locals:         0       6       0       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0       0       0
  2807 ;;      Totals:         0      14       0       0       0       0       0
  2808 ;;Total ram usage:       14 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    2
  2811 ;; This function calls:
  2812 ;;		Nothing
  2813 ;; This function is called by:
  2814 ;;		_doWork
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text5
  2819  0040CE                     __ptext5:
  2820                           	opt stack 0
  2821  0040CE                     ___aldiv:
  2822                           	opt stack 26
  2823                           
  2824                           ; BSR set to: 0
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;incstack = 0
  2828                           ;incstack = 0
  2829  0040CE  6B77               	clrf	___aldiv@sign& (0+255),b
  2830  0040D0  AF75               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2831  0040D2  D00A               	goto	l11316
  2832                           
  2833                           ; BSR set to: 0
  2834  0040D4  1F75               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2835  0040D6  1F74               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2836  0040D8  1F73               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2837  0040DA  6D72               	negf	___aldiv@divisor& (0+255),b
  2838  0040DC  0E00               	movlw	0
  2839  0040DE  2373               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2840  0040E0  2374               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2841  0040E2  2375               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2842                           
  2843                           ; BSR set to: 0
  2844  0040E4  0E01               	movlw	1
  2845  0040E6  6F77               	movwf	___aldiv@sign& (0+255),b
  2846  0040E8                     l11316:
  2847                           
  2848                           ; BSR set to: 0
  2849  0040E8  AF71               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2850  0040EA  D00A               	goto	l11322
  2851                           
  2852                           ; BSR set to: 0
  2853  0040EC  1F71               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2854  0040EE  1F70               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2855  0040F0  1F6F               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2856  0040F2  6D6E               	negf	___aldiv@dividend& (0+255),b
  2857  0040F4  0E00               	movlw	0
  2858  0040F6  236F               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2859  0040F8  2370               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2860  0040FA  2371               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2861                           
  2862                           ; BSR set to: 0
  2863  0040FC  0E01               	movlw	1
  2864  0040FE  1B77               	xorwf	___aldiv@sign& (0+255),f,b
  2865  004100                     l11322:
  2866                           
  2867                           ; BSR set to: 0
  2868  004100  6B78               	clrf	___aldiv@quotient& (0+255),b
  2869  004102  6B79               	clrf	(___aldiv@quotient+1)& (0+255),b
  2870  004104  6B7A               	clrf	(___aldiv@quotient+2)& (0+255),b
  2871  004106  6B7B               	clrf	(___aldiv@quotient+3)& (0+255),b
  2872                           
  2873                           ; BSR set to: 0
  2874  004108  5175               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2875  00410A  1172               	iorwf	___aldiv@divisor& (0+255),w,b
  2876  00410C  1173               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2877  00410E  1174               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2878  004110  E029               	bz	l11344
  2879                           
  2880                           ; BSR set to: 0
  2881  004112  0E01               	movlw	1
  2882  004114  6F76               	movwf	___aldiv@counter& (0+255),b
  2883  004116  D006               	goto	l11330
  2884  004118                     l11328:
  2885                           
  2886                           ; BSR set to: 0
  2887  004118  90D8               	bcf	status,0,c
  2888  00411A  3772               	rlcf	___aldiv@divisor& (0+255),f,b
  2889  00411C  3773               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2890  00411E  3774               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2891  004120  3775               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2892  004122  2B76               	incf	___aldiv@counter& (0+255),f,b
  2893  004124                     l11330:
  2894                           
  2895                           ; BSR set to: 0
  2896  004124  AF75               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2897  004126  D7F8               	goto	l11328
  2898  004128                     l11332:
  2899                           
  2900                           ; BSR set to: 0
  2901  004128  90D8               	bcf	status,0,c
  2902  00412A  3778               	rlcf	___aldiv@quotient& (0+255),f,b
  2903  00412C  3779               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2904  00412E  377A               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2905  004130  377B               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2906                           
  2907                           ; BSR set to: 0
  2908  004132  5172               	movf	___aldiv@divisor& (0+255),w,b
  2909  004134  5D6E               	subwf	___aldiv@dividend& (0+255),w,b
  2910  004136  5173               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2911  004138  596F               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2912  00413A  5174               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2913  00413C  5970               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2914  00413E  5175               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2915  004140  5971               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2916  004142  E309               	bnc	l11340
  2917                           
  2918                           ; BSR set to: 0
  2919  004144  5172               	movf	___aldiv@divisor& (0+255),w,b
  2920  004146  5F6E               	subwf	___aldiv@dividend& (0+255),f,b
  2921  004148  5173               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2922  00414A  5B6F               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2923  00414C  5174               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2924  00414E  5B70               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2925  004150  5175               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2926  004152  5B71               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2927                           
  2928                           ; BSR set to: 0
  2929  004154  8178               	bsf	___aldiv@quotient& (0+255),0,b
  2930  004156                     l11340:
  2931                           
  2932                           ; BSR set to: 0
  2933  004156  90D8               	bcf	status,0,c
  2934  004158  3375               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2935  00415A  3374               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2936  00415C  3373               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2937  00415E  3372               	rrcf	___aldiv@divisor& (0+255),f,b
  2938                           
  2939                           ; BSR set to: 0
  2940  004160  2F76               	decfsz	___aldiv@counter& (0+255),f,b
  2941  004162  D7E2               	goto	l11332
  2942  004164                     l11344:
  2943                           
  2944                           ; BSR set to: 0
  2945  004164  5177               	movf	___aldiv@sign& (0+255),w,b
  2946  004166  E008               	bz	l11348
  2947                           
  2948                           ; BSR set to: 0
  2949  004168  1F7B               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2950  00416A  1F7A               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2951  00416C  1F79               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2952  00416E  6D78               	negf	___aldiv@quotient& (0+255),b
  2953  004170  0E00               	movlw	0
  2954  004172  2379               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2955  004174  237A               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2956  004176  237B               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2957  004178                     l11348:
  2958                           
  2959                           ; BSR set to: 0
  2960  004178  C078  F06E         	movff	___aldiv@quotient,?___aldiv
  2961  00417C  C079  F06F         	movff	___aldiv@quotient+1,?___aldiv+1
  2962  004180  C07A  F070         	movff	___aldiv@quotient+2,?___aldiv+2
  2963  004184  C07B  F071         	movff	___aldiv@quotient+3,?___aldiv+3
  2964                           
  2965                           ; BSR set to: 0
  2966  004188  0012               	return	
  2967  00418A                     __end_of___aldiv:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           prodh	equ	0xFF4
  2974                           prodl	equ	0xFF3
  2975                           intcon	equ	0xFF2
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           indf1	equ	0xFE7
  2979                           postdec1	equ	0xFE5
  2980                           fsr1h	equ	0xFE2
  2981                           fsr1l	equ	0xFE1
  2982                           indf2	equ	0xFDF
  2983                           postinc2	equ	0xFDE
  2984                           postdec2	equ	0xFDD
  2985                           plusw2	equ	0xFDB
  2986                           fsr2h	equ	0xFDA
  2987                           fsr2l	equ	0xFD9
  2988                           status	equ	0xFD8
  2989                           
  2990 ;; *************** function _getCalibrationValue *****************
  2991 ;; Defined at:
  2992 ;;		line 865 in file "../main.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  i               1    wreg     unsigned char 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  i               1   32[COMRAM] unsigned char 
  2997 ;;  cal             2   30[COMRAM] short 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  2   25[COMRAM] short 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : F/1
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3007 ;;      Params:         2       0       0       0       0       0       0
  3008 ;;      Locals:         3       0       0       0       0       0       0
  3009 ;;      Temps:          3       0       0       0       0       0       0
  3010 ;;      Totals:         8       0       0       0       0       0       0
  3011 ;;Total ram usage:        8 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    3
  3014 ;; This function calls:
  3015 ;;		_readEEPROM
  3016 ;; This function is called by:
  3017 ;;		_doWork
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text6
  3022  004C7E                     __ptext6:
  3023                           	opt stack 0
  3024  004C7E                     _getCalibrationValue:
  3025                           	opt stack 25
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;incstack = 0
  3029                           ;incstack = 0
  3030                           ;getCalibrationValue@i stored from wreg
  3031  004C7E  CFE8 F021          	movff	wreg,getCalibrationValue@i
  3032                           
  3033                           ; BSR set to: 1
  3034                           ;main.c: 866: int16_t cal;
  3035                           ;main.c: 868: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3036                           ;main.c: 869: readEEPROM(2 * i + 0x9F);
  3037  004C82  5021               	movf	getCalibrationValue@i,w,c
  3038  004C84  0D02               	mullw	2
  3039  004C86  0E9F               	movlw	159
  3040  004C88  24F3               	addwf	prodl,w,c
  3041  004C8A  6E16               	movwf	?_readEEPROM,c
  3042  004C8C  0E00               	movlw	0
  3043  004C8E  20F4               	addwfc	prodh,w,c
  3044  004C90  6E17               	movwf	?_readEEPROM+1,c
  3045  004C92  EC64  F029         	call	_readEEPROM	;wreg free
  3046  004C96  6E1C               	movwf	??_getCalibrationValue& (0+255),c
  3047  004C98  5021               	movf	getCalibrationValue@i,w,c
  3048  004C9A  0D02               	mullw	2
  3049  004C9C  0E9E               	movlw	158
  3050  004C9E  24F3               	addwf	prodl,w,c
  3051  004CA0  6E16               	movwf	?_readEEPROM,c
  3052  004CA2  0E00               	movlw	0
  3053  004CA4  20F4               	addwfc	prodh,w,c
  3054  004CA6  6E17               	movwf	?_readEEPROM+1,c
  3055  004CA8  EC64  F029         	call	_readEEPROM	;wreg free
  3056  004CAC  6E1E               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3057  004CAE  6A1D               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3058  004CB0  501C               	movf	??_getCalibrationValue,w,c
  3059  004CB2  241D               	addwf	??_getCalibrationValue+1,w,c
  3060  004CB4  6E1F               	movwf	getCalibrationValue@cal,c
  3061  004CB6  0E00               	movlw	0
  3062  004CB8  201E               	addwfc	??_getCalibrationValue+2,w,c
  3063  004CBA  6E20               	movwf	getCalibrationValue@cal+1,c
  3064                           
  3065                           ;main.c: 871: return cal;
  3066  004CBC  C01F  F01A         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3067  004CC0  C020  F01B         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3068  004CC4  0012               	return	
  3069  004CC6                     __end_of_getCalibrationValue:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           intcon	equ	0xFF2
  3078                           postinc0	equ	0xFEE
  3079                           wreg	equ	0xFE8
  3080                           indf1	equ	0xFE7
  3081                           postdec1	equ	0xFE5
  3082                           fsr1h	equ	0xFE2
  3083                           fsr1l	equ	0xFE1
  3084                           indf2	equ	0xFDF
  3085                           postinc2	equ	0xFDE
  3086                           postdec2	equ	0xFDD
  3087                           plusw2	equ	0xFDB
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _log *****************
  3093 ;; Defined at:
  3094 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;  x               4   35[BANK0 ] short 
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  exponent        2   39[BANK0 ] int 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  4   35[BANK0 ] int 
  3101 ;; Registers used:
  3102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/1
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3108 ;;      Params:         0       4       0       0       0       0       0
  3109 ;;      Locals:         0       2       0       0       0       0       0
  3110 ;;      Temps:          0       0       0       0       0       0       0
  3111 ;;      Totals:         0       6       0       0       0       0       0
  3112 ;;Total ram usage:        6 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    5
  3115 ;; This function calls:
  3116 ;;		___fladd
  3117 ;;		___flmul
  3118 ;;		___awtofl
  3119 ;;		_eval_poly
  3120 ;;		_frexp
  3121 ;; This function is called by:
  3122 ;;		_doWork
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text7
  3127  0038D8                     __ptext7:
  3128                           	opt stack 0
  3129  0038D8                     _log:
  3130                           	opt stack 23
  3131                           
  3132                           ;incstack = 0
  3133                           ;incstack = 0
  3134  0038D8  0100               	movlb	0	; () banked
  3135  0038DA  BF86               	btfsc	(log@x+3)& (0+255),7,b
  3136  0038DC  D007               	goto	u13210
  3137                           
  3138                           ; BSR set to: 0
  3139                           
  3140                           ; BSR set to: 0
  3141  0038DE  EE20  F083         	lfsr	2,log@x
  3142  0038E2  50DE               	movf	postinc2,w,c
  3143  0038E4  10DE               	iorwf	postinc2,w,c
  3144  0038E6  10DE               	iorwf	postinc2,w,c
  3145  0038E8  10DE               	iorwf	postinc2,w,c
  3146  0038EA  E105               	bnz	l13886
  3147  0038EC                     u13210:
  3148                           
  3149                           ; BSR set to: 0
  3150  0038EC  6B83               	clrf	?_log& (0+255),b
  3151  0038EE  6B84               	clrf	(?_log+1)& (0+255),b
  3152  0038F0  6B85               	clrf	(?_log+2)& (0+255),b
  3153  0038F2  6B86               	clrf	(?_log+3)& (0+255),b
  3154  0038F4  D081               	goto	l1867
  3155  0038F6                     l13886:
  3156                           
  3157                           ; BSR set to: 0
  3158  0038F6  6B64               	clrf	(?___flmul+4)& (0+255),b
  3159  0038F8  6B65               	clrf	(?___flmul+5)& (0+255),b
  3160  0038FA  6B66               	clrf	(?___flmul+6)& (0+255),b
  3161  0038FC  0E40               	movlw	64
  3162  0038FE  6F67               	movwf	(?___flmul+7)& (0+255),b
  3163  003900  0E87               	movlw	low log@exponent
  3164  003902  6E12               	movwf	?_frexp+4,c
  3165  003904  C083  F00E         	movff	log@x,?_frexp
  3166  003908  C084  F00F         	movff	log@x+1,?_frexp+1
  3167  00390C  C085  F010         	movff	log@x+2,?_frexp+2
  3168  003910  C086  F011         	movff	log@x+3,?_frexp+3
  3169  003914  ECFF  F023         	call	_frexp	;wreg free
  3170  003918  C011  F063         	movff	?_frexp+3,?___flmul+3
  3171  00391C  C010  F062         	movff	?_frexp+2,?___flmul+2
  3172  003920  C00F  F061         	movff	?_frexp+1,?___flmul+1
  3173  003924  C00E  F060         	movff	?_frexp,?___flmul
  3174  003928  ECA1  F01F         	call	___flmul	;wreg free
  3175  00392C  C063  F06B         	movff	?___flmul+3,?___fladd+3
  3176  003930  C062  F06A         	movff	?___flmul+2,?___fladd+2
  3177  003934  C061  F069         	movff	?___flmul+1,?___fladd+1
  3178  003938  C060  F068         	movff	?___flmul,?___fladd
  3179  00393C  0100               	movlb	0	; () banked
  3180  00393E  6B6C               	clrf	(?___fladd+4)& (0+255),b
  3181  003940  6B6D               	clrf	(?___fladd+5)& (0+255),b
  3182  003942  0E80               	movlw	128
  3183  003944  6F6E               	movwf	(?___fladd+6)& (0+255),b
  3184  003946  0EBF               	movlw	191
  3185  003948  6F6F               	movwf	(?___fladd+7)& (0+255),b
  3186  00394A  ECBE  F01B         	call	___fladd	;wreg free
  3187  00394E  C06B  F086         	movff	?___fladd+3,log@x+3
  3188  003952  C06A  F085         	movff	?___fladd+2,log@x+2
  3189  003956  C069  F084         	movff	?___fladd+1,log@x+1
  3190  00395A  C068  F083         	movff	?___fladd,log@x
  3191  00395E  0100               	movlb	0	; () banked
  3192  003960  0787               	decf	log@exponent& (0+255),f,b
  3193  003962  A0D8               	btfss	status,0,c
  3194  003964  0788               	decf	(log@exponent+1)& (0+255),f,b
  3195                           
  3196                           ; BSR set to: 0
  3197  003966  C083  F077         	movff	log@x,?_eval_poly
  3198  00396A  C084  F078         	movff	log@x+1,?_eval_poly+1
  3199  00396E  C085  F079         	movff	log@x+2,?_eval_poly+2
  3200  003972  C086  F07A         	movff	log@x+3,?_eval_poly+3
  3201  003976  0E48               	movlw	low log@coeff
  3202  003978  6F7B               	movwf	(?_eval_poly+4)& (0+255),b
  3203  00397A  6B7D               	clrf	(?_eval_poly+6)& (0+255),b
  3204  00397C  0E08               	movlw	8
  3205  00397E  6F7C               	movwf	(?_eval_poly+5)& (0+255),b
  3206  003980  EC23  F021         	call	_eval_poly	;wreg free
  3207  003984  C07A  F086         	movff	?_eval_poly+3,log@x+3
  3208  003988  C079  F085         	movff	?_eval_poly+2,log@x+2
  3209  00398C  C078  F084         	movff	?_eval_poly+1,log@x+1
  3210  003990  C077  F083         	movff	?_eval_poly,log@x
  3211                           
  3212                           ; BSR set to: 0
  3213  003994  0E18               	movlw	24
  3214  003996  6F64               	movwf	(?___flmul+4)& (0+255),b
  3215  003998  0E72               	movlw	114
  3216  00399A  6F65               	movwf	(?___flmul+5)& (0+255),b
  3217  00399C  0E31               	movlw	49
  3218  00399E  6F66               	movwf	(?___flmul+6)& (0+255),b
  3219  0039A0  0E3F               	movlw	63
  3220  0039A2  6F67               	movwf	(?___flmul+7)& (0+255),b
  3221  0039A4  C087  F018         	movff	log@exponent,?___awtofl
  3222  0039A8  C088  F019         	movff	log@exponent+1,?___awtofl+1
  3223  0039AC  EC6E  F027         	call	___awtofl	;wreg free
  3224  0039B0  C01B  F063         	movff	?___awtofl+3,?___flmul+3
  3225  0039B4  C01A  F062         	movff	?___awtofl+2,?___flmul+2
  3226  0039B8  C019  F061         	movff	?___awtofl+1,?___flmul+1
  3227  0039BC  C018  F060         	movff	?___awtofl,?___flmul
  3228  0039C0  ECA1  F01F         	call	___flmul	;wreg free
  3229  0039C4  C063  F06B         	movff	?___flmul+3,?___fladd+3
  3230  0039C8  C062  F06A         	movff	?___flmul+2,?___fladd+2
  3231  0039CC  C061  F069         	movff	?___flmul+1,?___fladd+1
  3232  0039D0  C060  F068         	movff	?___flmul,?___fladd
  3233  0039D4  C083  F06C         	movff	log@x,?___fladd+4
  3234  0039D8  C084  F06D         	movff	log@x+1,?___fladd+5
  3235  0039DC  C085  F06E         	movff	log@x+2,?___fladd+6
  3236  0039E0  C086  F06F         	movff	log@x+3,?___fladd+7
  3237  0039E4  ECBE  F01B         	call	___fladd	;wreg free
  3238  0039E8  C06B  F086         	movff	?___fladd+3,?_log+3
  3239  0039EC  C06A  F085         	movff	?___fladd+2,?_log+2
  3240  0039F0  C069  F084         	movff	?___fladd+1,?_log+1
  3241  0039F4  C068  F083         	movff	?___fladd,?_log
  3242  0039F8                     l1867:
  3243  0039F8  0012               	return	
  3244  0039FA                     __end_of_log:
  3245                           	opt stack 0
  3246                           tblptru	equ	0xFF8
  3247                           tblptrh	equ	0xFF7
  3248                           tblptrl	equ	0xFF6
  3249                           tablat	equ	0xFF5
  3250                           prodh	equ	0xFF4
  3251                           prodl	equ	0xFF3
  3252                           intcon	equ	0xFF2
  3253                           postinc0	equ	0xFEE
  3254                           wreg	equ	0xFE8
  3255                           indf1	equ	0xFE7
  3256                           postdec1	equ	0xFE5
  3257                           fsr1h	equ	0xFE2
  3258                           fsr1l	equ	0xFE1
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           plusw2	equ	0xFDB
  3263                           fsr2h	equ	0xFDA
  3264                           fsr2l	equ	0xFD9
  3265                           status	equ	0xFD8
  3266                           
  3267 ;; *************** function _exp *****************
  3268 ;; Defined at:
  3269 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  x               4   44[BANK0 ] int 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  exponent        2   52[BANK0 ] int 
  3274 ;;  sign            1   54[BANK0 ] unsigned char 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  4   44[BANK0 ] unsigned char 
  3277 ;; Registers used:
  3278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/1
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3284 ;;      Params:         0       4       0       0       0       0       0
  3285 ;;      Locals:         0       7       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0
  3287 ;;      Totals:         0      11       0       0       0       0       0
  3288 ;;Total ram usage:       11 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    6
  3291 ;; This function calls:
  3292 ;;		___fldiv
  3293 ;;		___asflmul
  3294 ;;		___asflsub
  3295 ;;		___awtofl
  3296 ;;		_floor
  3297 ;;		_eval_poly
  3298 ;;		_ldexp
  3299 ;;		___flge
  3300 ;;		___flneg
  3301 ;;		___fltol
  3302 ;; This function is called by:
  3303 ;;		_doWork
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text8
  3308  003294                     __ptext8:
  3309                           	opt stack 0
  3310  003294                     _exp:
  3311                           	opt stack 22
  3312                           
  3313                           ;incstack = 0
  3314                           ;incstack = 0
  3315  003294  0100               	movlb	0	; () banked
  3316  003296  EE20  F08C         	lfsr	2,exp@x
  3317  00329A  50DE               	movf	postinc2,w,c
  3318  00329C  10DE               	iorwf	postinc2,w,c
  3319  00329E  10DE               	iorwf	postinc2,w,c
  3320  0032A0  10DE               	iorwf	postinc2,w,c
  3321  0032A2  E107               	bnz	l13848
  3322                           
  3323                           ; BSR set to: 0
  3324  0032A4  0E00               	movlw	0
  3325  0032A6  6F8C               	movwf	?_exp& (0+255),b
  3326  0032A8  6F8D               	movwf	(?_exp+1)& (0+255),b
  3327  0032AA  0E80               	movlw	128
  3328  0032AC  6F8E               	movwf	(?_exp+2)& (0+255),b
  3329  0032AE  0E3F               	movlw	63
  3330  0032B0  D018               	goto	L1
  3331  0032B2                     l13848:
  3332                           
  3333                           ; BSR set to: 0
  3334  0032B2  0E18               	movlw	24
  3335  0032B4  6E0E               	movwf	?___flge,c
  3336  0032B6  0E72               	movlw	114
  3337  0032B8  6E0F               	movwf	?___flge+1,c
  3338  0032BA  0E31               	movlw	49
  3339  0032BC  6E10               	movwf	?___flge+2,c
  3340  0032BE  0E44               	movlw	68
  3341  0032C0  6E11               	movwf	?___flge+3,c
  3342  0032C2  C08C  F012         	movff	exp@x,?___flge+4
  3343  0032C6  C08D  F013         	movff	exp@x+1,?___flge+5
  3344  0032CA  C08E  F014         	movff	exp@x+2,?___flge+6
  3345  0032CE  C08F  F015         	movff	exp@x+3,?___flge+7
  3346  0032D2  ECA8  F025         	call	___flge	;wreg free
  3347  0032D6  E207               	bc	l13854
  3348  0032D8  0100               	movlb	0	; () banked
  3349  0032DA  698C               	setf	?_exp& (0+255),b
  3350  0032DC  698D               	setf	(?_exp+1)& (0+255),b
  3351  0032DE  0E7F               	movlw	127
  3352  0032E0  6F8E               	movwf	(?_exp+2)& (0+255),b
  3353  0032E2                     L1:
  3354  0032E2  6F8F               	movwf	(?_exp+3)& (0+255),b
  3355  0032E4  D0C8               	goto	l1575
  3356  0032E6                     l13854:
  3357  0032E6  C08C  F00E         	movff	exp@x,?___flge
  3358  0032EA  C08D  F00F         	movff	exp@x+1,?___flge+1
  3359  0032EE  C08E  F010         	movff	exp@x+2,?___flge+2
  3360  0032F2  C08F  F011         	movff	exp@x+3,?___flge+3
  3361  0032F6  0E87               	movlw	135
  3362  0032F8  6E12               	movwf	?___flge+4,c
  3363  0032FA  0E48               	movlw	72
  3364  0032FC  6E13               	movwf	?___flge+5,c
  3365  0032FE  0E3A               	movlw	58
  3366  003300  6E14               	movwf	?___flge+6,c
  3367  003302  0EC4               	movlw	196
  3368  003304  6E15               	movwf	?___flge+7,c
  3369  003306  ECA8  F025         	call	___flge	;wreg free
  3370  00330A  E202               	bc	l13858
  3371  00330C  0100               	movlb	0	; () banked
  3372  00330E  D08D               	goto	u13190
  3373  003310                     l13858:
  3374  003310  0100               	movlb	0	; () banked
  3375  003312  0E01               	movlw	1
  3376  003314  AF8F               	btfss	(exp@x+3)& (0+255),7,b
  3377  003316  0E00               	movlw	0
  3378  003318  6F96               	movwf	exp@sign& (0+255),b
  3379  00331A  5196               	movf	exp@sign& (0+255),w,b
  3380  00331C  E012               	bz	l1578
  3381                           
  3382                           ; BSR set to: 0
  3383  00331E  C08C  F00E         	movff	exp@x,?___flneg
  3384  003322  C08D  F00F         	movff	exp@x+1,?___flneg+1
  3385  003326  C08E  F010         	movff	exp@x+2,?___flneg+2
  3386  00332A  C08F  F011         	movff	exp@x+3,?___flneg+3
  3387  00332E  EC7A  F028         	call	___flneg	;wreg free
  3388  003332  C011  F08F         	movff	?___flneg+3,exp@x+3
  3389  003336  C010  F08E         	movff	?___flneg+2,exp@x+2
  3390  00333A  C00F  F08D         	movff	?___flneg+1,exp@x+1
  3391  00333E  C00E  F08C         	movff	?___flneg,exp@x
  3392  003342                     l1578:
  3393                           
  3394                           ; BSR set to: 0
  3395  003342  0E3B               	movlw	59
  3396  003344  6E42               	movwf	?___asflmul,c
  3397  003346  0EAA               	movlw	170
  3398  003348  6E43               	movwf	?___asflmul+1,c
  3399  00334A  0EB8               	movlw	184
  3400  00334C  6E44               	movwf	?___asflmul+2,c
  3401  00334E  0E3F               	movlw	63
  3402  003350  6E45               	movwf	?___asflmul+3,c
  3403  003352  0E8C               	movlw	exp@x& (0+255)
  3404  003354  ECCE  F025         	call	___asflmul
  3405  003358  C08C  F081         	movff	exp@x,?_floor
  3406  00335C  C08D  F082         	movff	exp@x+1,?_floor+1
  3407  003360  C08E  F083         	movff	exp@x+2,?_floor+2
  3408  003364  C08F  F084         	movff	exp@x+3,?_floor+3
  3409  003368  EC24  F01F         	call	_floor	;wreg free
  3410  00336C  C084  F093         	movff	?_floor+3,_exp$2282+3
  3411  003370  C083  F092         	movff	?_floor+2,_exp$2282+2
  3412  003374  C082  F091         	movff	?_floor+1,_exp$2282+1
  3413  003378  C081  F090         	movff	?_floor,_exp$2282
  3414  00337C  C090  F042         	movff	_exp$2282,?___fltol
  3415  003380  C091  F043         	movff	_exp$2282+1,?___fltol+1
  3416  003384  C092  F044         	movff	_exp$2282+2,?___fltol+2
  3417  003388  C093  F045         	movff	_exp$2282+3,?___fltol+3
  3418  00338C  EC24  F023         	call	___fltol	;wreg free
  3419  003390  C042  F094         	movff	?___fltol,exp@exponent
  3420  003394  C043  F095         	movff	?___fltol+1,exp@exponent+1
  3421                           
  3422                           ; BSR set to: 0
  3423  003398  0E00               	movlw	high exp@x
  3424  00339A  6F80               	movwf	(?___asflsub+1)& (0+255),b
  3425  00339C  0E8C               	movlw	low exp@x
  3426  00339E  6F7F               	movwf	?___asflsub& (0+255),b
  3427  0033A0  C094  F018         	movff	exp@exponent,?___awtofl
  3428  0033A4  C095  F019         	movff	exp@exponent+1,?___awtofl+1
  3429  0033A8  EC6E  F027         	call	___awtofl	;wreg free
  3430  0033AC  C01B  F084         	movff	?___awtofl+3,?___asflsub+5
  3431  0033B0  C01A  F083         	movff	?___awtofl+2,?___asflsub+4
  3432  0033B4  C019  F082         	movff	?___awtofl+1,?___asflsub+3
  3433  0033B8  C018  F081         	movff	?___awtofl,?___asflsub+2
  3434  0033BC  EC81  F025         	call	___asflsub	;wreg free
  3435                           
  3436                           ; BSR set to: 0
  3437  0033C0  C08C  F077         	movff	exp@x,?_eval_poly
  3438  0033C4  C08D  F078         	movff	exp@x+1,?_eval_poly+1
  3439  0033C8  C08E  F079         	movff	exp@x+2,?_eval_poly+2
  3440  0033CC  C08F  F07A         	movff	exp@x+3,?_eval_poly+3
  3441  0033D0  0E20               	movlw	low exp@coeff
  3442  0033D2  6F7B               	movwf	(?_eval_poly+4)& (0+255),b
  3443  0033D4  6B7D               	clrf	(?_eval_poly+6)& (0+255),b
  3444  0033D6  0E09               	movlw	9
  3445  0033D8  6F7C               	movwf	(?_eval_poly+5)& (0+255),b
  3446  0033DA  EC23  F021         	call	_eval_poly	;wreg free
  3447  0033DE  C07A  F086         	movff	?_eval_poly+3,?_ldexp+3
  3448  0033E2  C079  F085         	movff	?_eval_poly+2,?_ldexp+2
  3449  0033E6  C078  F084         	movff	?_eval_poly+1,?_ldexp+1
  3450  0033EA  C077  F083         	movff	?_eval_poly,?_ldexp
  3451  0033EE  C094  F087         	movff	exp@exponent,?_ldexp+4
  3452  0033F2  C095  F088         	movff	exp@exponent+1,?_ldexp+5
  3453  0033F6  EC82  F022         	call	_ldexp	;wreg free
  3454  0033FA  C086  F08F         	movff	?_ldexp+3,exp@x+3
  3455  0033FE  C085  F08E         	movff	?_ldexp+2,exp@x+2
  3456  003402  C084  F08D         	movff	?_ldexp+1,exp@x+1
  3457  003406  C083  F08C         	movff	?_ldexp,exp@x
  3458                           
  3459                           ; BSR set to: 0
  3460  00340A  5196               	movf	exp@sign& (0+255),w,b
  3461  00340C  E02C               	bz	l1579
  3462                           
  3463                           ; BSR set to: 0
  3464  00340E  EE20  F08C         	lfsr	2,exp@x
  3465  003412  0EFF               	movlw	255
  3466  003414  18DE               	xorwf	postinc2,w,c
  3467  003416  0EFF               	movlw	255
  3468  003418  B4D8               	btfsc	status,2,c
  3469  00341A  18DE               	xorwf	postinc2,w,c
  3470  00341C  0E7F               	movlw	127
  3471  00341E  B4D8               	btfsc	status,2,c
  3472  003420  18DE               	xorwf	postinc2,w,c
  3473  003422  0E7F               	movlw	127
  3474  003424  B4D8               	btfsc	status,2,c
  3475  003426  18DE               	xorwf	postinc2,w,c
  3476  003428  E105               	bnz	l13874
  3477  00342A                     u13190:
  3478                           
  3479                           ; BSR set to: 0
  3480  00342A  6B8C               	clrf	?_exp& (0+255),b
  3481  00342C  6B8D               	clrf	(?_exp+1)& (0+255),b
  3482  00342E  6B8E               	clrf	(?_exp+2)& (0+255),b
  3483  003430  6B8F               	clrf	(?_exp+3)& (0+255),b
  3484  003432  D021               	goto	l1575
  3485  003434                     l13874:
  3486                           
  3487                           ; BSR set to: 0
  3488  003434  6A1E               	clrf	?___fldiv,c
  3489  003436  6A1F               	clrf	?___fldiv+1,c
  3490  003438  0E80               	movlw	128
  3491  00343A  6E20               	movwf	?___fldiv+2,c
  3492  00343C  0E3F               	movlw	63
  3493  00343E  6E21               	movwf	?___fldiv+3,c
  3494  003440  C08C  F022         	movff	exp@x,?___fldiv+4
  3495  003444  C08D  F023         	movff	exp@x+1,?___fldiv+5
  3496  003448  C08E  F024         	movff	exp@x+2,?___fldiv+6
  3497  00344C  C08F  F025         	movff	exp@x+3,?___fldiv+7
  3498  003450  EC2E  F022         	call	___fldiv	;wreg free
  3499  003454  C021  F08F         	movff	?___fldiv+3,?_exp+3
  3500  003458  C020  F08E         	movff	?___fldiv+2,?_exp+2
  3501  00345C  C01F  F08D         	movff	?___fldiv+1,?_exp+1
  3502  003460  C01E  F08C         	movff	?___fldiv,?_exp
  3503  003464  D008               	goto	l1575
  3504  003466                     l1579:
  3505                           
  3506                           ; BSR set to: 0
  3507  003466  C08C  F08C         	movff	exp@x,?_exp
  3508  00346A  C08D  F08D         	movff	exp@x+1,?_exp+1
  3509  00346E  C08E  F08E         	movff	exp@x+2,?_exp+2
  3510  003472  C08F  F08F         	movff	exp@x+3,?_exp+3
  3511  003476                     l1575:
  3512  003476  0012               	return	
  3513  003478                     __end_of_exp:
  3514                           	opt stack 0
  3515                           tblptru	equ	0xFF8
  3516                           tblptrh	equ	0xFF7
  3517                           tblptrl	equ	0xFF6
  3518                           tablat	equ	0xFF5
  3519                           prodh	equ	0xFF4
  3520                           prodl	equ	0xFF3
  3521                           intcon	equ	0xFF2
  3522                           postinc0	equ	0xFEE
  3523                           wreg	equ	0xFE8
  3524                           indf1	equ	0xFE7
  3525                           postdec1	equ	0xFE5
  3526                           fsr1h	equ	0xFE2
  3527                           fsr1l	equ	0xFE1
  3528                           indf2	equ	0xFDF
  3529                           postinc2	equ	0xFDE
  3530                           postdec2	equ	0xFDD
  3531                           plusw2	equ	0xFDB
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function ___flneg *****************
  3537 ;; Defined at:
  3538 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;  f1              4   13[COMRAM] unsigned char 
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;		None
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  4   13[COMRAM] unsigned char 
  3545 ;; Registers used:
  3546 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3547 ;; Tracked objects:
  3548 ;;		On entry : F/0
  3549 ;;		On exit  : F/0
  3550 ;;		Unchanged: F/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3552 ;;      Params:         4       0       0       0       0       0       0
  3553 ;;      Locals:         0       0       0       0       0       0       0
  3554 ;;      Temps:          0       0       0       0       0       0       0
  3555 ;;      Totals:         4       0       0       0       0       0       0
  3556 ;;Total ram usage:        4 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    2
  3559 ;; This function calls:
  3560 ;;		Nothing
  3561 ;; This function is called by:
  3562 ;;		_exp
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text9
  3567  0050F4                     __ptext9:
  3568                           	opt stack 0
  3569  0050F4                     ___flneg:
  3570                           	opt stack 25
  3571                           
  3572                           ; BSR set to: 0
  3573                           
  3574                           ;incstack = 0
  3575                           ;incstack = 0
  3576  0050F4  EE20  F00E         	lfsr	2,___flneg@f1
  3577  0050F8  50DE               	movf	postinc2,w,c
  3578  0050FA  10DE               	iorwf	postinc2,w,c
  3579  0050FC  10DE               	iorwf	postinc2,w,c
  3580  0050FE  10DE               	iorwf	postinc2,w,c
  3581  005100  E002               	bz	l11618
  3582                           
  3583                           ; BSR set to: 0
  3584  005102  0E80               	movlw	128
  3585  005104  1A11               	xorwf	___flneg@f1+3,f,c
  3586  005106                     l11618:
  3587                           
  3588                           ; BSR set to: 0
  3589  005106  C00E  F00E         	movff	___flneg@f1,?___flneg
  3590  00510A  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  3591  00510E  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  3592  005112  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  3593                           
  3594                           ; BSR set to: 0
  3595  005116  0012               	return	
  3596  005118                     __end_of___flneg:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           intcon	equ	0xFF2
  3605                           postinc0	equ	0xFEE
  3606                           wreg	equ	0xFE8
  3607                           indf1	equ	0xFE7
  3608                           postdec1	equ	0xFE5
  3609                           fsr1h	equ	0xFE2
  3610                           fsr1l	equ	0xFE1
  3611                           indf2	equ	0xFDF
  3612                           postinc2	equ	0xFDE
  3613                           postdec2	equ	0xFDD
  3614                           plusw2	equ	0xFDB
  3615                           fsr2h	equ	0xFDA
  3616                           fsr2l	equ	0xFD9
  3617                           status	equ	0xFD8
  3618                           
  3619 ;; *************** function _ldexp *****************
  3620 ;; Defined at:
  3621 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;  value           4   35[BANK0 ] unsigned char 
  3624 ;;  newexp          2   39[BANK0 ] int 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  4   35[BANK0 ] int 
  3629 ;; Registers used:
  3630 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3631 ;; Tracked objects:
  3632 ;;		On entry : F/0
  3633 ;;		On exit  : F/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3636 ;;      Params:         0       6       0       0       0       0       0
  3637 ;;      Locals:         0       0       0       0       0       0       0
  3638 ;;      Temps:          0       3       0       0       0       0       0
  3639 ;;      Totals:         0       9       0       0       0       0       0
  3640 ;;Total ram usage:        9 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    2
  3643 ;; This function calls:
  3644 ;;		Nothing
  3645 ;; This function is called by:
  3646 ;;		_exp
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           	psect	text10
  3651  004504                     __ptext10:
  3652                           	opt stack 0
  3653  004504                     _ldexp:
  3654                           	opt stack 25
  3655                           
  3656                           ; BSR set to: 0
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;incstack = 0
  3660                           ;incstack = 0
  3661  004504  EE20  F083         	lfsr	2,ldexp@value
  3662  004508  50DE               	movf	postinc2,w,c
  3663  00450A  10DE               	iorwf	postinc2,w,c
  3664  00450C  10DE               	iorwf	postinc2,w,c
  3665  00450E  10DE               	iorwf	postinc2,w,c
  3666  004510  E014               	bz	u10080
  3667                           
  3668                           ; BSR set to: 0
  3669                           
  3670                           ; BSR set to: 0
  3671  004512  5186               	movf	(ldexp@value+3)& (0+255),w,b
  3672  004514  0B7F               	andlw	127
  3673  004516  6F89               	movwf	??_ldexp& (0+255),b
  3674  004518  90D8               	bcf	status,0,c
  3675  00451A  3589               	rlcf	??_ldexp& (0+255),w,b
  3676  00451C  6F8A               	movwf	(??_ldexp+1)& (0+255),b
  3677  00451E  6B8B               	clrf	(??_ldexp+2)& (0+255),b
  3678  004520  378B               	rlcf	(??_ldexp+2)& (0+255),f,b
  3679  004522  518A               	movf	(??_ldexp+1)& (0+255),w,b
  3680  004524  2787               	addwf	ldexp@newexp& (0+255),f,b
  3681  004526  518B               	movf	(??_ldexp+2)& (0+255),w,b
  3682  004528  2388               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3683  00452A  3585               	rlcf	(ldexp@value+2)& (0+255),w,b
  3684  00452C  36E8               	rlcf	wreg,f,c
  3685  00452E  0B01               	andlw	1
  3686  004530  2787               	addwf	ldexp@newexp& (0+255),f,b
  3687  004532  0E00               	movlw	0
  3688  004534  2388               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3689                           
  3690                           ; BSR set to: 0
  3691  004536  AF88               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3692  004538  D005               	goto	l11580
  3693  00453A                     u10080:
  3694                           
  3695                           ; BSR set to: 0
  3696  00453A  6B83               	clrf	?_ldexp& (0+255),b
  3697  00453C  6B84               	clrf	(?_ldexp+1)& (0+255),b
  3698  00453E  6B85               	clrf	(?_ldexp+2)& (0+255),b
  3699  004540  6B86               	clrf	(?_ldexp+3)& (0+255),b
  3700  004542  D031               	goto	l1700
  3701  004544                     l11580:
  3702                           
  3703                           ; BSR set to: 0
  3704  004544  5188               	movf	(ldexp@newexp+1)& (0+255),w,b
  3705  004546  0A80               	xorlw	128
  3706  004548  0F7F               	addlw	-129
  3707  00454A  0E00               	movlw	0
  3708  00454C  B4D8               	btfsc	status,2,c
  3709  00454E  5D87               	subwf	ldexp@newexp& (0+255),w,b
  3710  004550  E30E               	bnc	l11594
  3711                           
  3712                           ; BSR set to: 0
  3713  004552  AF86               	btfss	(ldexp@value+3)& (0+255),7,b
  3714  004554  D006               	goto	l11590
  3715                           
  3716                           ; BSR set to: 0
  3717  004556  6983               	setf	?_ldexp& (0+255),b
  3718  004558  6984               	setf	(?_ldexp+1)& (0+255),b
  3719  00455A  0E7F               	movlw	127
  3720  00455C  6F85               	movwf	(?_ldexp+2)& (0+255),b
  3721  00455E  0EFF               	movlw	255
  3722  004560  D004               	goto	L2
  3723  004562                     l11590:
  3724                           
  3725                           ; BSR set to: 0
  3726  004562  6983               	setf	?_ldexp& (0+255),b
  3727  004564  6984               	setf	(?_ldexp+1)& (0+255),b
  3728  004566  0E7F               	movlw	127
  3729  004568  6F85               	movwf	(?_ldexp+2)& (0+255),b
  3730  00456A                     L2:
  3731  00456A  6F86               	movwf	(?_ldexp+3)& (0+255),b
  3732  00456C  D01C               	goto	l1700
  3733  00456E                     l11594:
  3734                           
  3735                           ; BSR set to: 0
  3736  00456E  3588               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3737  004570  3188               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3738  004572  6F8A               	movwf	(??_ldexp+1)& (0+255),b
  3739  004574  3187               	rrcf	ldexp@newexp& (0+255),w,b
  3740  004576  6F89               	movwf	??_ldexp& (0+255),b
  3741  004578  1986               	xorwf	(ldexp@value+3)& (0+255),w,b
  3742  00457A  0B80               	andlw	-128
  3743  00457C  1989               	xorwf	??_ldexp& (0+255),w,b
  3744  00457E  6F86               	movwf	(ldexp@value+3)& (0+255),b
  3745  004580  C087  F089         	movff	ldexp@newexp,??_ldexp
  3746  004584  0E01               	movlw	1
  3747  004586  1789               	andwf	??_ldexp& (0+255),f,b
  3748  004588  3389               	rrcf	??_ldexp& (0+255),f,b
  3749  00458A  3389               	rrcf	??_ldexp& (0+255),f,b
  3750  00458C  5185               	movf	(ldexp@value+2)& (0+255),w,b
  3751  00458E  1989               	xorwf	??_ldexp& (0+255),w,b
  3752  004590  0B7F               	andlw	-129
  3753  004592  1989               	xorwf	??_ldexp& (0+255),w,b
  3754  004594  6F85               	movwf	(ldexp@value+2)& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757  004596  C083  F083         	movff	ldexp@value,?_ldexp
  3758  00459A  C084  F084         	movff	ldexp@value+1,?_ldexp+1
  3759  00459E  C085  F085         	movff	ldexp@value+2,?_ldexp+2
  3760  0045A2  C086  F086         	movff	ldexp@value+3,?_ldexp+3
  3761  0045A6                     l1700:
  3762                           
  3763                           ; BSR set to: 0
  3764  0045A6  0012               	return	
  3765  0045A8                     __end_of_ldexp:
  3766                           	opt stack 0
  3767                           tblptru	equ	0xFF8
  3768                           tblptrh	equ	0xFF7
  3769                           tblptrl	equ	0xFF6
  3770                           tablat	equ	0xFF5
  3771                           prodh	equ	0xFF4
  3772                           prodl	equ	0xFF3
  3773                           intcon	equ	0xFF2
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           indf1	equ	0xFE7
  3777                           postdec1	equ	0xFE5
  3778                           fsr1h	equ	0xFE2
  3779                           fsr1l	equ	0xFE1
  3780                           indf2	equ	0xFDF
  3781                           postinc2	equ	0xFDE
  3782                           postdec2	equ	0xFDD
  3783                           plusw2	equ	0xFDB
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _eval_poly *****************
  3789 ;; Defined at:
  3790 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  x               4   23[BANK0 ] int 
  3793 ;;  d               1   27[BANK0 ] PTR const 
  3794 ;;		 -> log@coeff(36), exp@coeff(40), 
  3795 ;;  n               2   28[BANK0 ] int 
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;  res             4   31[BANK0 ] int 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  4   23[BANK0 ] int 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3802 ;; Tracked objects:
  3803 ;;		On entry : F/0
  3804 ;;		On exit  : F/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3807 ;;      Params:         0       7       0       0       0       0       0
  3808 ;;      Locals:         0       4       0       0       0       0       0
  3809 ;;      Temps:          0       1       0       0       0       0       0
  3810 ;;      Totals:         0      12       0       0       0       0       0
  3811 ;;Total ram usage:       12 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    4
  3814 ;; This function calls:
  3815 ;;		___fladd
  3816 ;;		___flmul
  3817 ;; This function is called by:
  3818 ;;		_exp
  3819 ;;		_log
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text11
  3824  004246                     __ptext11:
  3825                           	opt stack 0
  3826  004246                     _eval_poly:
  3827                           	opt stack 23
  3828                           
  3829                           ; BSR set to: 0
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;incstack = 0
  3833                           ;incstack = 0
  3834  004246  517C               	movf	eval_poly@n& (0+255),w,b
  3835  004248  D84E               	call	PL38	;call to abstracted procedure
  3836  00424A  CFF5 F07F          	movff	tablat,eval_poly@res
  3837  00424E  0009               	tblrd		*+
  3838  004250  CFF5 F080          	movff	tablat,eval_poly@res+1
  3839  004254  0009               	tblrd		*+
  3840  004256  CFF5 F081          	movff	tablat,eval_poly@res+2
  3841  00425A  000A               	tblrd		*-
  3842  00425C  CFF5 F082          	movff	tablat,eval_poly@res+3
  3843  004260  D035               	goto	l14178
  3844  004262                     l14176:
  3845                           
  3846                           ; BSR set to: 0
  3847  004262  C07F  F064         	movff	eval_poly@res,?___flmul+4
  3848  004266  C080  F065         	movff	eval_poly@res+1,?___flmul+5
  3849  00426A  C081  F066         	movff	eval_poly@res+2,?___flmul+6
  3850  00426E  C082  F067         	movff	eval_poly@res+3,?___flmul+7
  3851  004272  C077  F060         	movff	eval_poly@x,?___flmul
  3852  004276  C078  F061         	movff	eval_poly@x+1,?___flmul+1
  3853  00427A  C079  F062         	movff	eval_poly@x+2,?___flmul+2
  3854  00427E  C07A  F063         	movff	eval_poly@x+3,?___flmul+3
  3855  004282  ECA1  F01F         	call	___flmul	;wreg free
  3856  004286  C063  F06B         	movff	?___flmul+3,?___fladd+3
  3857  00428A  C062  F06A         	movff	?___flmul+2,?___fladd+2
  3858  00428E  C061  F069         	movff	?___flmul+1,?___fladd+1
  3859  004292  C060  F068         	movff	?___flmul,?___fladd
  3860  004296  0100               	movlb	0	; () banked
  3861  004298  077C               	decf	eval_poly@n& (0+255),f,b
  3862  00429A  A0D8               	btfss	status,0,c
  3863  00429C  077D               	decf	(eval_poly@n+1)& (0+255),f,b
  3864  00429E  517C               	movf	eval_poly@n& (0+255),w,b
  3865  0042A0  D822               	call	PL38	;call to abstracted procedure
  3866  0042A2  CFF5 F06C          	movff	tablat,?___fladd+4
  3867  0042A6  0009               	tblrd		*+
  3868  0042A8  CFF5 F06D          	movff	tablat,?___fladd+5
  3869  0042AC  0009               	tblrd		*+
  3870  0042AE  CFF5 F06E          	movff	tablat,?___fladd+6
  3871  0042B2  000A               	tblrd		*-
  3872  0042B4  CFF5 F06F          	movff	tablat,?___fladd+7
  3873  0042B8  ECBE  F01B         	call	___fladd	;wreg free
  3874  0042BC  C06B  F082         	movff	?___fladd+3,eval_poly@res+3
  3875  0042C0  C06A  F081         	movff	?___fladd+2,eval_poly@res+2
  3876  0042C4  C069  F080         	movff	?___fladd+1,eval_poly@res+1
  3877  0042C8  C068  F07F         	movff	?___fladd,eval_poly@res
  3878  0042CC                     l14178:
  3879  0042CC  0100               	movlb	0	; () banked
  3880  0042CE  517D               	movf	(eval_poly@n+1)& (0+255),w,b
  3881  0042D0  117C               	iorwf	eval_poly@n& (0+255),w,b
  3882  0042D2  E1C7               	bnz	l14176
  3883                           
  3884                           ; BSR set to: 0
  3885  0042D4  C07F  F077         	movff	eval_poly@res,?_eval_poly
  3886  0042D8  C080  F078         	movff	eval_poly@res+1,?_eval_poly+1
  3887  0042DC  C081  F079         	movff	eval_poly@res+2,?_eval_poly+2
  3888  0042E0  C082  F07A         	movff	eval_poly@res+3,?_eval_poly+3
  3889                           
  3890                           ; BSR set to: 0
  3891  0042E4  0012               	return	
  3892  0042E6                     __end_of_eval_poly:
  3893                           	opt stack 0
  3894  0042E6                     PL38:
  3895                           	opt stack 23
  3896  0042E6  0D04               	mullw	4
  3897  0042E8  517B               	movf	eval_poly@d& (0+255),w,b
  3898  0042EA  24F3               	addwf	prodl,w,c
  3899  0042EC  6F7E               	movwf	??_eval_poly& (0+255),b
  3900  0042EE  C07E  FFF6         	movff	??_eval_poly,tblptrl
  3901  0042F2  0E06               	movlw	high __smallconst
  3902  0042F4  6EF7               	movwf	tblptrh,c
  3903  0042F6  0009               	tblrd		*+
  3904  0042F8  0012               	return	
  3905  0042FA                     __end_ofPL38:
  3906                           	opt stack 0
  3907                           tblptru	equ	0xFF8
  3908                           tblptrh	equ	0xFF7
  3909                           tblptrl	equ	0xFF6
  3910                           tablat	equ	0xFF5
  3911                           prodh	equ	0xFF4
  3912                           prodl	equ	0xFF3
  3913                           intcon	equ	0xFF2
  3914                           postinc0	equ	0xFEE
  3915                           wreg	equ	0xFE8
  3916                           indf1	equ	0xFE7
  3917                           postdec1	equ	0xFE5
  3918                           fsr1h	equ	0xFE2
  3919                           fsr1l	equ	0xFE1
  3920                           indf2	equ	0xFDF
  3921                           postinc2	equ	0xFDE
  3922                           postdec2	equ	0xFDD
  3923                           plusw2	equ	0xFDB
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _floor *****************
  3929 ;; Defined at:
  3930 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  x               4   33[BANK0 ] int 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  i               4   37[BANK0 ] int 
  3935 ;;  expon           2   41[BANK0 ] int 
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  4   33[BANK0 ] int 
  3938 ;; Registers used:
  3939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : F/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3945 ;;      Params:         0       4       0       0       0       0       0
  3946 ;;      Locals:         0       6       0       0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0
  3948 ;;      Totals:         0      10       0       0       0       0       0
  3949 ;;Total ram usage:       10 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    4
  3952 ;; This function calls:
  3953 ;;		___altofl
  3954 ;;		___fladd
  3955 ;;		___flge
  3956 ;;		_frexp
  3957 ;;		___fltol
  3958 ;; This function is called by:
  3959 ;;		_exp
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text12
  3964  003E48                     __ptext12:
  3965                           	opt stack 0
  3966  003E48                     _floor:
  3967                           	opt stack 23
  3968                           
  3969                           ; BSR set to: 0
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;incstack = 0
  3973                           ;incstack = 0
  3974  003E48  C081  F00E         	movff	floor@x,?_frexp
  3975  003E4C  C082  F00F         	movff	floor@x+1,?_frexp+1
  3976  003E50  C083  F010         	movff	floor@x+2,?_frexp+2
  3977  003E54  C084  F011         	movff	floor@x+3,?_frexp+3
  3978  003E58  0E89               	movlw	low floor@expon
  3979  003E5A  6E12               	movwf	?_frexp+4,c
  3980  003E5C  ECFF  F023         	call	_frexp	;wreg free
  3981                           
  3982                           ; BSR set to: 0
  3983  003E60  AF8A               	btfss	(floor@expon+1)& (0+255),7,b
  3984  003E62  D00F               	goto	l14164
  3985                           
  3986                           ; BSR set to: 0
  3987  003E64  AF84               	btfss	(floor@x+3)& (0+255),7,b
  3988  003E66  D008               	goto	l1668
  3989                           
  3990                           ; BSR set to: 0
  3991  003E68  0E00               	movlw	0
  3992  003E6A  6F81               	movwf	?_floor& (0+255),b
  3993  003E6C  6F82               	movwf	(?_floor+1)& (0+255),b
  3994  003E6E  0E80               	movlw	128
  3995  003E70  6F83               	movwf	(?_floor+2)& (0+255),b
  3996  003E72  0EBF               	movlw	191
  3997  003E74  6F84               	movwf	(?_floor+3)& (0+255),b
  3998  003E76  D064               	goto	l1669
  3999  003E78                     l1668:
  4000                           
  4001                           ; BSR set to: 0
  4002  003E78  6B81               	clrf	?_floor& (0+255),b
  4003  003E7A  6B82               	clrf	(?_floor+1)& (0+255),b
  4004  003E7C  6B83               	clrf	(?_floor+2)& (0+255),b
  4005  003E7E  6B84               	clrf	(?_floor+3)& (0+255),b
  4006  003E80  D05F               	goto	l1669
  4007  003E82                     l14164:
  4008                           
  4009                           ; BSR set to: 0
  4010  003E82  0E1D               	movlw	29
  4011  003E84  5D89               	subwf	floor@expon& (0+255),w,b
  4012  003E86  0E00               	movlw	0
  4013  003E88  598A               	subwfb	(floor@expon+1)& (0+255),w,b
  4014  003E8A  E309               	bnc	l14168
  4015                           
  4016                           ; BSR set to: 0
  4017  003E8C  C081  F081         	movff	floor@x,?_floor
  4018  003E90  C082  F082         	movff	floor@x+1,?_floor+1
  4019  003E94  C083  F083         	movff	floor@x+2,?_floor+2
  4020  003E98  C084  F084         	movff	floor@x+3,?_floor+3
  4021  003E9C  D051               	goto	l1669
  4022  003E9E                     l14168:
  4023                           
  4024                           ; BSR set to: 0
  4025  003E9E  C081  F042         	movff	floor@x,?___fltol
  4026  003EA2  C082  F043         	movff	floor@x+1,?___fltol+1
  4027  003EA6  C083  F044         	movff	floor@x+2,?___fltol+2
  4028  003EAA  C084  F045         	movff	floor@x+3,?___fltol+3
  4029  003EAE  EC24  F023         	call	___fltol	;wreg free
  4030  003EB2  C045  F07F         	movff	?___fltol+3,?___altofl+3
  4031  003EB6  C044  F07E         	movff	?___fltol+2,?___altofl+2
  4032  003EBA  C043  F07D         	movff	?___fltol+1,?___altofl+1
  4033  003EBE  C042  F07C         	movff	?___fltol,?___altofl
  4034  003EC2  EC63  F026         	call	___altofl	;wreg free
  4035  003EC6  C07F  F088         	movff	?___altofl+3,floor@i+3
  4036  003ECA  C07E  F087         	movff	?___altofl+2,floor@i+2
  4037  003ECE  C07D  F086         	movff	?___altofl+1,floor@i+1
  4038  003ED2  C07C  F085         	movff	?___altofl,floor@i
  4039  003ED6  C081  F00E         	movff	floor@x,?___flge
  4040  003EDA  C082  F00F         	movff	floor@x+1,?___flge+1
  4041  003EDE  C083  F010         	movff	floor@x+2,?___flge+2
  4042  003EE2  C084  F011         	movff	floor@x+3,?___flge+3
  4043  003EE6  C085  F012         	movff	floor@i,?___flge+4
  4044  003EEA  C086  F013         	movff	floor@i+1,?___flge+5
  4045  003EEE  C087  F014         	movff	floor@i+2,?___flge+6
  4046  003EF2  C088  F015         	movff	floor@i+3,?___flge+7
  4047  003EF6  ECA8  F025         	call	___flge	;wreg free
  4048  003EFA  E21A               	bc	l1671
  4049  003EFC  C085  F068         	movff	floor@i,?___fladd
  4050  003F00  C086  F069         	movff	floor@i+1,?___fladd+1
  4051  003F04  C087  F06A         	movff	floor@i+2,?___fladd+2
  4052  003F08  C088  F06B         	movff	floor@i+3,?___fladd+3
  4053  003F0C  0100               	movlb	0	; () banked
  4054  003F0E  6B6C               	clrf	(?___fladd+4)& (0+255),b
  4055  003F10  6B6D               	clrf	(?___fladd+5)& (0+255),b
  4056  003F12  0E80               	movlw	128
  4057  003F14  6F6E               	movwf	(?___fladd+6)& (0+255),b
  4058  003F16  0EBF               	movlw	191
  4059  003F18  6F6F               	movwf	(?___fladd+7)& (0+255),b
  4060  003F1A  ECBE  F01B         	call	___fladd	;wreg free
  4061  003F1E  C06B  F084         	movff	?___fladd+3,?_floor+3
  4062  003F22  C06A  F083         	movff	?___fladd+2,?_floor+2
  4063  003F26  C069  F082         	movff	?___fladd+1,?_floor+1
  4064  003F2A  C068  F081         	movff	?___fladd,?_floor
  4065  003F2E  D008               	goto	l1669
  4066  003F30                     l1671:
  4067  003F30  C085  F081         	movff	floor@i,?_floor
  4068  003F34  C086  F082         	movff	floor@i+1,?_floor+1
  4069  003F38  C087  F083         	movff	floor@i+2,?_floor+2
  4070  003F3C  C088  F084         	movff	floor@i+3,?_floor+3
  4071  003F40                     l1669:
  4072  003F40  0012               	return	
  4073  003F42                     __end_of_floor:
  4074                           	opt stack 0
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           prodh	equ	0xFF4
  4080                           prodl	equ	0xFF3
  4081                           intcon	equ	0xFF2
  4082                           postinc0	equ	0xFEE
  4083                           wreg	equ	0xFE8
  4084                           indf1	equ	0xFE7
  4085                           postdec1	equ	0xFE5
  4086                           fsr1h	equ	0xFE2
  4087                           fsr1l	equ	0xFE1
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           postdec2	equ	0xFDD
  4091                           plusw2	equ	0xFDB
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function ___fltol *****************
  4097 ;; Defined at:
  4098 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  f1              4   65[COMRAM] int 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  exp1            1   13[BANK0 ] unsigned char 
  4103 ;;  sign1           1   12[BANK0 ] unsigned char 
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  4   65[COMRAM] long 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2, status,0
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : F/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4113 ;;      Params:         4       0       0       0       0       0       0
  4114 ;;      Locals:         0       2       0       0       0       0       0
  4115 ;;      Temps:          0       4       0       0       0       0       0
  4116 ;;      Totals:         4       6       0       0       0       0       0
  4117 ;;Total ram usage:       10 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    2
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_doWork
  4124 ;;		_setEventData
  4125 ;;		_exp
  4126 ;;		_floor
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           	psect	text13
  4131  004648                     __ptext13:
  4132                           	opt stack 0
  4133  004648                     ___fltol:
  4134                           	opt stack 26
  4135                           
  4136                           ;incstack = 0
  4137                           ;incstack = 0
  4138  004648  3444               	rlcf	(___fltol@f1+2)& (0+255),w,c
  4139  00464A  3445               	rlcf	(___fltol@f1+3)& (0+255),w,c
  4140  00464C  0100               	movlb	0	; () banked
  4141  00464E  6F6D               	movwf	___fltol@exp1& (0+255),b
  4142  004650  676D               	tstfsz	___fltol@exp1& (0+255),b
  4143  004652  D005               	goto	l11646
  4144  004654                     l11644:
  4145                           
  4146                           ; BSR set to: 0
  4147  004654  6A42               	clrf	?___fltol,c
  4148  004656  6A43               	clrf	?___fltol+1,c
  4149  004658  6A44               	clrf	?___fltol+2,c
  4150  00465A  6A45               	clrf	?___fltol+3,c
  4151  00465C  D043               	goto	l1680
  4152  00465E                     l11646:
  4153                           
  4154                           ; BSR set to: 0
  4155  00465E  C042  F068         	movff	___fltol@f1,??___fltol
  4156  004662  C043  F069         	movff	___fltol@f1+1,??___fltol+1
  4157  004666  C044  F06A         	movff	___fltol@f1+2,??___fltol+2
  4158  00466A  C045  F06B         	movff	___fltol@f1+3,??___fltol+3
  4159  00466E  0E20               	movlw	32
  4160  004670  D005               	goto	u10170
  4161  004672                     u10175:
  4162  004672  90D8               	bcf	status,0,c
  4163  004674  336B               	rrcf	(??___fltol+3)& (0+255),f,b
  4164  004676  336A               	rrcf	(??___fltol+2)& (0+255),f,b
  4165  004678  3369               	rrcf	(??___fltol+1)& (0+255),f,b
  4166  00467A  3368               	rrcf	??___fltol& (0+255),f,b
  4167  00467C                     u10170:
  4168  00467C  2EE8               	decfsz	wreg,f,c
  4169  00467E  D7F9               	goto	u10175
  4170  004680  5168               	movf	??___fltol& (0+255),w,b
  4171  004682  6F6C               	movwf	___fltol@sign1& (0+255),b
  4172                           
  4173                           ; BSR set to: 0
  4174  004684  8E44               	bsf	___fltol@f1+2,7,c
  4175                           
  4176                           ; BSR set to: 0
  4177  004686  6A45               	clrf	___fltol@f1+3,c
  4178                           
  4179                           ; BSR set to: 0
  4180  004688  0E96               	movlw	150
  4181  00468A  5F6D               	subwf	___fltol@exp1& (0+255),f,b
  4182                           
  4183                           ; BSR set to: 0
  4184  00468C  AF6D               	btfss	___fltol@exp1& (0+255),7,b
  4185  00468E  D00C               	goto	l11664
  4186                           
  4187                           ; BSR set to: 0
  4188  004690  516D               	movf	___fltol@exp1& (0+255),w,b
  4189  004692  0A80               	xorlw	128
  4190  004694  0F97               	addlw	151
  4191  004696  E3DE               	bnc	l11644
  4192  004698                     l11660:
  4193                           
  4194                           ; BSR set to: 0
  4195  004698  90D8               	bcf	status,0,c
  4196  00469A  3245               	rrcf	___fltol@f1+3,f,c
  4197  00469C  3244               	rrcf	___fltol@f1+2,f,c
  4198  00469E  3243               	rrcf	___fltol@f1+1,f,c
  4199  0046A0  3242               	rrcf	___fltol@f1,f,c
  4200                           
  4201                           ; BSR set to: 0
  4202  0046A2  3F6D               	incfsz	___fltol@exp1& (0+255),f,b
  4203  0046A4  D7F9               	goto	l11660
  4204  0046A6  D00C               	goto	l11672
  4205  0046A8                     l11664:
  4206                           
  4207                           ; BSR set to: 0
  4208  0046A8  0E1F               	movlw	31
  4209  0046AA  656D               	cpfsgt	___fltol@exp1& (0+255),b
  4210  0046AC  D007               	goto	l11670
  4211  0046AE  D7D2               	goto	l11644
  4212  0046B0                     l11668:
  4213                           
  4214                           ; BSR set to: 0
  4215  0046B0  90D8               	bcf	status,0,c
  4216  0046B2  3642               	rlcf	___fltol@f1,f,c
  4217  0046B4  3643               	rlcf	___fltol@f1+1,f,c
  4218  0046B6  3644               	rlcf	___fltol@f1+2,f,c
  4219  0046B8  3645               	rlcf	___fltol@f1+3,f,c
  4220  0046BA  076D               	decf	___fltol@exp1& (0+255),f,b
  4221  0046BC                     l11670:
  4222                           
  4223                           ; BSR set to: 0
  4224  0046BC  676D               	tstfsz	___fltol@exp1& (0+255),b
  4225  0046BE  D7F8               	goto	l11668
  4226  0046C0                     l11672:
  4227                           
  4228                           ; BSR set to: 0
  4229  0046C0  516C               	movf	___fltol@sign1& (0+255),w,b
  4230  0046C2  E008               	bz	l11676
  4231                           
  4232                           ; BSR set to: 0
  4233  0046C4  1E45               	comf	___fltol@f1+3,f,c
  4234  0046C6  1E44               	comf	___fltol@f1+2,f,c
  4235  0046C8  1E43               	comf	___fltol@f1+1,f,c
  4236  0046CA  6C42               	negf	___fltol@f1,c
  4237  0046CC  0E00               	movlw	0
  4238  0046CE  2243               	addwfc	___fltol@f1+1,f,c
  4239  0046D0  2244               	addwfc	___fltol@f1+2,f,c
  4240  0046D2  2245               	addwfc	___fltol@f1+3,f,c
  4241  0046D4                     l11676:
  4242                           
  4243                           ; BSR set to: 0
  4244  0046D4  C042  F042         	movff	___fltol@f1,?___fltol
  4245  0046D8  C043  F043         	movff	___fltol@f1+1,?___fltol+1
  4246  0046DC  C044  F044         	movff	___fltol@f1+2,?___fltol+2
  4247  0046E0  C045  F045         	movff	___fltol@f1+3,?___fltol+3
  4248  0046E4                     l1680:
  4249                           
  4250                           ; BSR set to: 0
  4251  0046E4  0012               	return	
  4252  0046E6                     __end_of___fltol:
  4253                           	opt stack 0
  4254                           tblptru	equ	0xFF8
  4255                           tblptrh	equ	0xFF7
  4256                           tblptrl	equ	0xFF6
  4257                           tablat	equ	0xFF5
  4258                           prodh	equ	0xFF4
  4259                           prodl	equ	0xFF3
  4260                           intcon	equ	0xFF2
  4261                           postinc0	equ	0xFEE
  4262                           wreg	equ	0xFE8
  4263                           indf1	equ	0xFE7
  4264                           postdec1	equ	0xFE5
  4265                           fsr1h	equ	0xFE2
  4266                           fsr1l	equ	0xFE1
  4267                           indf2	equ	0xFDF
  4268                           postinc2	equ	0xFDE
  4269                           postdec2	equ	0xFDD
  4270                           plusw2	equ	0xFDB
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function _frexp *****************
  4276 ;; Defined at:
  4277 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  value           4   13[COMRAM] long 
  4280 ;;  eptr            1   17[COMRAM] PTR int 
  4281 ;;		 -> log@exponent(2), floor@expon(2), 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;		None
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  4   13[COMRAM] PTR int 
  4286 ;; Registers used:
  4287 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4288 ;; Tracked objects:
  4289 ;;		On entry : F/0
  4290 ;;		On exit  : F/0
  4291 ;;		Unchanged: F/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4293 ;;      Params:         5       0       0       0       0       0       0
  4294 ;;      Locals:         0       0       0       0       0       0       0
  4295 ;;      Temps:          3       0       0       0       0       0       0
  4296 ;;      Totals:         8       0       0       0       0       0       0
  4297 ;;Total ram usage:        8 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    2
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_floor
  4304 ;;		_log
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text14
  4309  0047FE                     __ptext14:
  4310                           	opt stack 0
  4311  0047FE                     _frexp:
  4312                           	opt stack 25
  4313                           
  4314                           ; BSR set to: 0
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;incstack = 0
  4318                           ;incstack = 0
  4319  0047FE  EE20  F00E         	lfsr	2,frexp@value
  4320  004802  50DE               	movf	postinc2,w,c
  4321  004804  10DE               	iorwf	postinc2,w,c
  4322  004806  10DE               	iorwf	postinc2,w,c
  4323  004808  10DE               	iorwf	postinc2,w,c
  4324  00480A  E10B               	bnz	l11630
  4325                           
  4326                           ; BSR set to: 0
  4327  00480C  5012               	movf	frexp@eptr,w,c
  4328  00480E  6ED9               	movwf	fsr2l,c
  4329  004810  6ADA               	clrf	fsr2h,c
  4330  004812  0E00               	movlw	0
  4331  004814  6ADE               	clrf	postinc2,c
  4332  004816  6ADD               	clrf	postdec2,c
  4333                           
  4334                           ; BSR set to: 0
  4335  004818  6A0E               	clrf	?_frexp,c
  4336  00481A  6A0F               	clrf	?_frexp+1,c
  4337  00481C  6A10               	clrf	?_frexp+2,c
  4338  00481E  6A11               	clrf	?_frexp+3,c
  4339  004820  D02C               	goto	l1696
  4340  004822                     l11630:
  4341                           
  4342                           ; BSR set to: 0
  4343  004822  5011               	movf	frexp@value+3,w,c
  4344  004824  0B7F               	andlw	127
  4345  004826  6E13               	movwf	??_frexp& (0+255),c
  4346  004828  90D8               	bcf	status,0,c
  4347  00482A  3413               	rlcf	??_frexp,w,c
  4348  00482C  6E14               	movwf	(??_frexp+1)& (0+255),c
  4349  00482E  6A15               	clrf	(??_frexp+2)& (0+255),c
  4350  004830  3615               	rlcf	(??_frexp+2)& (0+255),f,c
  4351  004832  5012               	movf	frexp@eptr,w,c
  4352  004834  6ED9               	movwf	fsr2l,c
  4353  004836  6ADA               	clrf	fsr2h,c
  4354  004838  C014  FFDE         	movff	??_frexp+1,postinc2
  4355  00483C  C015  FFDD         	movff	??_frexp+2,postdec2
  4356  004840  5012               	movf	frexp@eptr,w,c
  4357  004842  6ED9               	movwf	fsr2l,c
  4358  004844  6ADA               	clrf	fsr2h,c
  4359  004846  3410               	rlcf	frexp@value+2,w,c
  4360  004848  36E8               	rlcf	wreg,f,c
  4361  00484A  0B01               	andlw	1
  4362  00484C  12DE               	iorwf	postinc2,f,c
  4363  00484E  0E00               	movlw	0
  4364  004850  12DD               	iorwf	postdec2,f,c
  4365                           
  4366                           ; BSR set to: 0
  4367  004852  5012               	movf	frexp@eptr,w,c
  4368  004854  6ED9               	movwf	fsr2l,c
  4369  004856  6ADA               	clrf	fsr2h,c
  4370  004858  0E82               	movlw	130
  4371  00485A  26DE               	addwf	postinc2,f,c
  4372  00485C  0EFF               	movlw	255
  4373  00485E  22DD               	addwfc	postdec2,f,c
  4374                           
  4375                           ; BSR set to: 0
  4376  004860  5011               	movf	frexp@value+3,w,c
  4377  004862  0B80               	andlw	-128
  4378  004864  093F               	iorlw	63
  4379  004866  6E11               	movwf	frexp@value+3,c
  4380                           
  4381                           ; BSR set to: 0
  4382  004868  9E10               	bcf	frexp@value+2,7,c
  4383                           
  4384                           ; BSR set to: 0
  4385  00486A  C00E  F00E         	movff	frexp@value,?_frexp
  4386  00486E  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4387  004872  C010  F010         	movff	frexp@value+2,?_frexp+2
  4388  004876  C011  F011         	movff	frexp@value+3,?_frexp+3
  4389  00487A                     l1696:
  4390                           
  4391                           ; BSR set to: 0
  4392  00487A  0012               	return	
  4393  00487C                     __end_of_frexp:
  4394                           	opt stack 0
  4395                           tblptru	equ	0xFF8
  4396                           tblptrh	equ	0xFF7
  4397                           tblptrl	equ	0xFF6
  4398                           tablat	equ	0xFF5
  4399                           prodh	equ	0xFF4
  4400                           prodl	equ	0xFF3
  4401                           intcon	equ	0xFF2
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           indf1	equ	0xFE7
  4405                           postdec1	equ	0xFE5
  4406                           fsr1h	equ	0xFE2
  4407                           fsr1l	equ	0xFE1
  4408                           indf2	equ	0xFDF
  4409                           postinc2	equ	0xFDE
  4410                           postdec2	equ	0xFDD
  4411                           plusw2	equ	0xFDB
  4412                           fsr2h	equ	0xFDA
  4413                           fsr2l	equ	0xFD9
  4414                           status	equ	0xFD8
  4415                           
  4416 ;; *************** function ___flge *****************
  4417 ;; Defined at:
  4418 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  ff1             4   13[COMRAM] PTR int 
  4421 ;;  ff2             4   17[COMRAM] PTR int 
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;		None               void
  4426 ;; Registers used:
  4427 ;;		wreg, status,2, status,0
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4433 ;;      Params:         8       0       0       0       0       0       0
  4434 ;;      Locals:         0       0       0       0       0       0       0
  4435 ;;      Temps:          0       0       0       0       0       0       0
  4436 ;;      Totals:         8       0       0       0       0       0       0
  4437 ;;Total ram usage:        8 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    2
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		_exp
  4444 ;;		_floor
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           	psect	text15
  4449  004B50                     __ptext15:
  4450                           	opt stack 0
  4451  004B50                     ___flge:
  4452                           	opt stack 25
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;incstack = 0
  4456                           ;incstack = 0
  4457  004B50  AE11               	btfss	___flge@ff1+3,7,c
  4458  004B52  D009               	goto	l11604
  4459  004B54  6C0E               	negf	___flge@ff1,c
  4460  004B56  1E0F               	comf	___flge@ff1+1,f,c
  4461  004B58  B0D8               	btfsc	status,0,c
  4462  004B5A  2A0F               	incf	___flge@ff1+1,f,c
  4463  004B5C  1E10               	comf	___flge@ff1+2,f,c
  4464  004B5E  B0D8               	btfsc	status,0,c
  4465  004B60  2A10               	incf	___flge@ff1+2,f,c
  4466  004B62  0E80               	movlw	128
  4467  004B64  5611               	subfwb	___flge@ff1+3,f,c
  4468  004B66                     l11604:
  4469  004B66  AE15               	btfss	___flge@ff2+3,7,c
  4470  004B68  D009               	goto	l1627
  4471  004B6A  6C12               	negf	___flge@ff2,c
  4472  004B6C  1E13               	comf	___flge@ff2+1,f,c
  4473  004B6E  B0D8               	btfsc	status,0,c
  4474  004B70  2A13               	incf	___flge@ff2+1,f,c
  4475  004B72  1E14               	comf	___flge@ff2+2,f,c
  4476  004B74  B0D8               	btfsc	status,0,c
  4477  004B76  2A14               	incf	___flge@ff2+2,f,c
  4478  004B78  0E80               	movlw	128
  4479  004B7A  5615               	subfwb	___flge@ff2+3,f,c
  4480  004B7C                     l1627:
  4481  004B7C  0E80               	movlw	128
  4482  004B7E  1A11               	xorwf	___flge@ff1+3,f,c
  4483  004B80  1A15               	xorwf	___flge@ff2+3,f,c
  4484  004B82  5012               	movf	___flge@ff2,w,c
  4485  004B84  5C0E               	subwf	___flge@ff1,w,c
  4486  004B86  5013               	movf	___flge@ff2+1,w,c
  4487  004B88  580F               	subwfb	___flge@ff1+1,w,c
  4488  004B8A  5014               	movf	___flge@ff2+2,w,c
  4489  004B8C  5810               	subwfb	___flge@ff1+2,w,c
  4490  004B8E  5015               	movf	___flge@ff2+3,w,c
  4491  004B90  5811               	subwfb	___flge@ff1+3,w,c
  4492  004B92  E202               	bc	l11610
  4493  004B94  90D8               	bcf	status,0,c
  4494  004B96  D001               	goto	l1628
  4495  004B98                     l11610:
  4496  004B98  80D8               	bsf	status,0,c
  4497  004B9A                     l1628:
  4498  004B9A  0012               	return	
  4499  004B9C                     __end_of___flge:
  4500                           	opt stack 0
  4501                           tblptru	equ	0xFF8
  4502                           tblptrh	equ	0xFF7
  4503                           tblptrl	equ	0xFF6
  4504                           tablat	equ	0xFF5
  4505                           prodh	equ	0xFF4
  4506                           prodl	equ	0xFF3
  4507                           intcon	equ	0xFF2
  4508                           postinc0	equ	0xFEE
  4509                           wreg	equ	0xFE8
  4510                           indf1	equ	0xFE7
  4511                           postdec1	equ	0xFE5
  4512                           fsr1h	equ	0xFE2
  4513                           fsr1l	equ	0xFE1
  4514                           indf2	equ	0xFDF
  4515                           postinc2	equ	0xFDE
  4516                           postdec2	equ	0xFDD
  4517                           plusw2	equ	0xFDB
  4518                           fsr2h	equ	0xFDA
  4519                           fsr2l	equ	0xFD9
  4520                           status	equ	0xFD8
  4521                           
  4522 ;; *************** function ___altofl *****************
  4523 ;; Defined at:
  4524 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  c               4   28[BANK0 ] long 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;  sign            1   32[BANK0 ] unsigned char 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  4   28[BANK0 ] unsigned char 
  4531 ;; Registers used:
  4532 ;;		wreg, status,2, status,0, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : F/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4538 ;;      Params:         0       4       0       0       0       0       0
  4539 ;;      Locals:         0       1       0       0       0       0       0
  4540 ;;      Temps:          0       0       0       0       0       0       0
  4541 ;;      Totals:         0       5       0       0       0       0       0
  4542 ;;Total ram usage:        5 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    3
  4545 ;; This function calls:
  4546 ;;		___flpack
  4547 ;; This function is called by:
  4548 ;;		_doWork
  4549 ;;		_floor
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text16
  4554  004CC6                     __ptext16:
  4555                           	opt stack 0
  4556  004CC6                     ___altofl:
  4557                           	opt stack 25
  4558                           
  4559                           ; BSR set to: 0
  4560                           
  4561                           ;incstack = 0
  4562                           ;incstack = 0
  4563  004CC6  6B80               	clrf	___altofl@sign& (0+255),b
  4564  004CC8  AF7F               	btfss	(___altofl@c+3)& (0+255),7,b
  4565  004CCA  D00A               	goto	l13970
  4566                           
  4567                           ; BSR set to: 0
  4568  004CCC  1F7F               	comf	(___altofl@c+3)& (0+255),f,b
  4569  004CCE  1F7E               	comf	(___altofl@c+2)& (0+255),f,b
  4570  004CD0  1F7D               	comf	(___altofl@c+1)& (0+255),f,b
  4571  004CD2  6D7C               	negf	___altofl@c& (0+255),b
  4572  004CD4  0E00               	movlw	0
  4573  004CD6  237D               	addwfc	(___altofl@c+1)& (0+255),f,b
  4574  004CD8  237E               	addwfc	(___altofl@c+2)& (0+255),f,b
  4575  004CDA  237F               	addwfc	(___altofl@c+3)& (0+255),f,b
  4576                           
  4577                           ; BSR set to: 0
  4578  004CDC  0E01               	movlw	1
  4579  004CDE  6F80               	movwf	___altofl@sign& (0+255),b
  4580  004CE0                     l13970:
  4581                           
  4582                           ; BSR set to: 0
  4583  004CE0  C07C  F00E         	movff	___altofl@c,?___flpack
  4584  004CE4  C07D  F00F         	movff	___altofl@c+1,?___flpack+1
  4585  004CE8  C07E  F010         	movff	___altofl@c+2,?___flpack+2
  4586  004CEC  C07F  F011         	movff	___altofl@c+3,?___flpack+3
  4587  004CF0  0E96               	movlw	150
  4588  004CF2  6E12               	movwf	?___flpack+4,c
  4589  004CF4  C080  F013         	movff	___altofl@sign,?___flpack+5
  4590  004CF8  ECC5  F020         	call	___flpack	;wreg free
  4591  004CFC  C011  F07F         	movff	?___flpack+3,?___altofl+3
  4592  004D00  C010  F07E         	movff	?___flpack+2,?___altofl+2
  4593  004D04  C00F  F07D         	movff	?___flpack+1,?___altofl+1
  4594  004D08  C00E  F07C         	movff	?___flpack,?___altofl
  4595  004D0C  0012               	return	
  4596  004D0E                     __end_of___altofl:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           indf1	equ	0xFE7
  4608                           postdec1	equ	0xFE5
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           plusw2	equ	0xFDB
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function ___asflsub *****************
  4620 ;; Defined at:
  4621 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;  f1p             2   31[BANK0 ] PTR 
  4624 ;;		 -> exp@x(4), doWork@temp(4), 
  4625 ;;  f2              4   33[BANK0 ] PTR 
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  4   31[BANK0 ] PTR 
  4630 ;; Registers used:
  4631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : F/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4637 ;;      Params:         0       6       0       0       0       0       0
  4638 ;;      Locals:         0       0       0       0       0       0       0
  4639 ;;      Temps:          0       0       0       0       0       0       0
  4640 ;;      Totals:         0       6       0       0       0       0       0
  4641 ;;Total ram usage:        6 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    5
  4644 ;; This function calls:
  4645 ;;		___flsub
  4646 ;; This function is called by:
  4647 ;;		_doWork
  4648 ;;		_exp
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           	psect	text17
  4653  004B02                     __ptext17:
  4654                           	opt stack 0
  4655  004B02                     ___asflsub:
  4656                           	opt stack 23
  4657                           
  4658                           ;	Return value of ___asflsub is never used
  4659                           
  4660                           ;incstack = 0
  4661                           ;incstack = 0
  4662  004B02  C07F  FFD9         	movff	___asflsub@f1p,fsr2l
  4663  004B06  C080  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4664  004B0A  0100               	movlb	0	; () banked
  4665  004B0C  CFDE F077          	movff	postinc2,?___flsub
  4666  004B10  CFDE F078          	movff	postinc2,?___flsub+1
  4667  004B14  CFDE F079          	movff	postinc2,?___flsub+2
  4668  004B18  CFDE F07A          	movff	postinc2,?___flsub+3
  4669  004B1C  C081  F07B         	movff	___asflsub@f2,?___flsub+4
  4670  004B20  C082  F07C         	movff	___asflsub@f2+1,?___flsub+5
  4671  004B24  C083  F07D         	movff	___asflsub@f2+2,?___flsub+6
  4672  004B28  C084  F07E         	movff	___asflsub@f2+3,?___flsub+7
  4673  004B2C  EC32  F027         	call	___flsub	;wreg free
  4674  004B30  C07F  FFD9         	movff	___asflsub@f1p,fsr2l
  4675  004B34  C080  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4676  004B38  0100               	movlb	0	; () banked
  4677  004B3A  C077  FFDE         	movff	?___flsub,postinc2
  4678  004B3E  C078  FFDE         	movff	?___flsub+1,postinc2
  4679  004B42  C079  FFDE         	movff	?___flsub+2,postinc2
  4680  004B46  C07A  FFDD         	movff	?___flsub+3,postdec2
  4681  004B4A  06D9               	decf	fsr2l,f,c
  4682  004B4C  06D9               	decf	fsr2l,f,c
  4683                           
  4684                           ; BSR set to: 0
  4685  004B4E  0012               	return	
  4686  004B50                     __end_of___asflsub:
  4687                           	opt stack 0
  4688                           tblptru	equ	0xFF8
  4689                           tblptrh	equ	0xFF7
  4690                           tblptrl	equ	0xFF6
  4691                           tablat	equ	0xFF5
  4692                           prodh	equ	0xFF4
  4693                           prodl	equ	0xFF3
  4694                           intcon	equ	0xFF2
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           indf1	equ	0xFE7
  4698                           postdec1	equ	0xFE5
  4699                           fsr1h	equ	0xFE2
  4700                           fsr1l	equ	0xFE1
  4701                           indf2	equ	0xFDF
  4702                           postinc2	equ	0xFDE
  4703                           postdec2	equ	0xFDD
  4704                           plusw2	equ	0xFDB
  4705                           fsr2h	equ	0xFDA
  4706                           fsr2l	equ	0xFD9
  4707                           status	equ	0xFD8
  4708                           
  4709 ;; *************** function ___flsub *****************
  4710 ;; Defined at:
  4711 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  f1              4   23[BANK0 ] PTR 
  4714 ;;  f2              4   27[BANK0 ] PTR 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  4   23[BANK0 ] PTR 
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4726 ;;      Params:         0       8       0       0       0       0       0
  4727 ;;      Locals:         0       0       0       0       0       0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0
  4729 ;;      Totals:         0       8       0       0       0       0       0
  4730 ;;Total ram usage:        8 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    4
  4733 ;; This function calls:
  4734 ;;		___fladd
  4735 ;; This function is called by:
  4736 ;;		_doWork
  4737 ;;		___asflsub
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text18
  4742  004E64                     __ptext18:
  4743                           	opt stack 0
  4744  004E64                     ___flsub:
  4745                           	opt stack 24
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;incstack = 0
  4749                           ;incstack = 0
  4750  004E64  0100               	movlb	0	; () banked
  4751  004E66  0E80               	movlw	128
  4752  004E68  1B7E               	xorwf	(___flsub@f2+3)& (0+255),f,b
  4753                           
  4754                           ; BSR set to: 0
  4755  004E6A  C077  F068         	movff	___flsub@f1,?___fladd
  4756  004E6E  C078  F069         	movff	___flsub@f1+1,?___fladd+1
  4757  004E72  C079  F06A         	movff	___flsub@f1+2,?___fladd+2
  4758  004E76  C07A  F06B         	movff	___flsub@f1+3,?___fladd+3
  4759  004E7A  C07B  F06C         	movff	___flsub@f2,?___fladd+4
  4760  004E7E  C07C  F06D         	movff	___flsub@f2+1,?___fladd+5
  4761  004E82  C07D  F06E         	movff	___flsub@f2+2,?___fladd+6
  4762  004E86  C07E  F06F         	movff	___flsub@f2+3,?___fladd+7
  4763  004E8A  ECBE  F01B         	call	___fladd	;wreg free
  4764  004E8E  C06B  F07A         	movff	?___fladd+3,?___flsub+3
  4765  004E92  C06A  F079         	movff	?___fladd+2,?___flsub+2
  4766  004E96  C069  F078         	movff	?___fladd+1,?___flsub+1
  4767  004E9A  C068  F077         	movff	?___fladd,?___flsub
  4768  004E9E  0012               	return	
  4769  004EA0                     __end_of___flsub:
  4770                           	opt stack 0
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           intcon	equ	0xFF2
  4778                           postinc0	equ	0xFEE
  4779                           wreg	equ	0xFE8
  4780                           indf1	equ	0xFE7
  4781                           postdec1	equ	0xFE5
  4782                           fsr1h	equ	0xFE2
  4783                           fsr1l	equ	0xFE1
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           postdec2	equ	0xFDD
  4787                           plusw2	equ	0xFDB
  4788                           fsr2h	equ	0xFDA
  4789                           fsr2l	equ	0xFD9
  4790                           status	equ	0xFD8
  4791                           
  4792 ;; *************** function ___asflmul *****************
  4793 ;; Defined at:
  4794 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  mp              1    wreg     PTR 
  4797 ;;		 -> exp@x(4), 
  4798 ;;  multiplicand    4   65[COMRAM] PTR 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  mp              1    8[BANK0 ] PTR 
  4801 ;;		 -> exp@x(4), 
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  4   65[COMRAM] PTR 
  4804 ;; Registers used:
  4805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : F/0
  4808 ;;		On exit  : F/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4811 ;;      Params:         4       0       0       0       0       0       0
  4812 ;;      Locals:         0       1       0       0       0       0       0
  4813 ;;      Temps:          0       0       0       0       0       0       0
  4814 ;;      Totals:         4       1       0       0       0       0       0
  4815 ;;Total ram usage:        5 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    4
  4818 ;; This function calls:
  4819 ;;		___flmul
  4820 ;; This function is called by:
  4821 ;;		_exp
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	text19
  4826  004B9C                     __ptext19:
  4827                           	opt stack 0
  4828  004B9C                     ___asflmul:
  4829                           	opt stack 23
  4830                           
  4831                           ;incstack = 0
  4832                           ;incstack = 0
  4833                           ;___asflmul@mp stored from wreg
  4834  004B9C  CFE8 F068          	movff	wreg,___asflmul@mp
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;	Return value of ___asflmul is never used
  4838  004BA0  5168               	movf	___asflmul@mp& (0+255),w,b
  4839  004BA2  6ED9               	movwf	fsr2l,c
  4840  004BA4  6ADA               	clrf	fsr2h,c
  4841  004BA6  CFDE F060          	movff	postinc2,?___flmul
  4842  004BAA  CFDE F061          	movff	postinc2,?___flmul+1
  4843  004BAE  CFDE F062          	movff	postinc2,?___flmul+2
  4844  004BB2  CFDE F063          	movff	postinc2,?___flmul+3
  4845  004BB6  C042  F064         	movff	___asflmul@multiplicand,?___flmul+4
  4846  004BBA  C043  F065         	movff	___asflmul@multiplicand+1,?___flmul+5
  4847  004BBE  C044  F066         	movff	___asflmul@multiplicand+2,?___flmul+6
  4848  004BC2  C045  F067         	movff	___asflmul@multiplicand+3,?___flmul+7
  4849  004BC6  ECA1  F01F         	call	___flmul	;wreg free
  4850  004BCA  0100               	movlb	0	; () banked
  4851  004BCC  5168               	movf	___asflmul@mp& (0+255),w,b
  4852  004BCE  6ED9               	movwf	fsr2l,c
  4853  004BD0  6ADA               	clrf	fsr2h,c
  4854  004BD2  C060  FFDE         	movff	?___flmul,postinc2
  4855  004BD6  C061  FFDE         	movff	?___flmul+1,postinc2
  4856  004BDA  C062  FFDE         	movff	?___flmul+2,postinc2
  4857  004BDE  C063  FFDD         	movff	?___flmul+3,postdec2
  4858  004BE2  06D9               	decf	fsr2l,f,c
  4859  004BE4  06D9               	decf	fsr2l,f,c
  4860                           
  4861                           ; BSR set to: 0
  4862  004BE6  0012               	return	
  4863  004BE8                     __end_of___asflmul:
  4864                           	opt stack 0
  4865                           tblptru	equ	0xFF8
  4866                           tblptrh	equ	0xFF7
  4867                           tblptrl	equ	0xFF6
  4868                           tablat	equ	0xFF5
  4869                           prodh	equ	0xFF4
  4870                           prodl	equ	0xFF3
  4871                           intcon	equ	0xFF2
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           indf1	equ	0xFE7
  4875                           postdec1	equ	0xFE5
  4876                           fsr1h	equ	0xFE2
  4877                           fsr1l	equ	0xFE1
  4878                           indf2	equ	0xFDF
  4879                           postinc2	equ	0xFDE
  4880                           postdec2	equ	0xFDD
  4881                           plusw2	equ	0xFDB
  4882                           fsr2h	equ	0xFDA
  4883                           fsr2l	equ	0xFD9
  4884                           status	equ	0xFD8
  4885                           
  4886 ;; *************** function ___fldiv *****************
  4887 ;; Defined at:
  4888 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  f1              4   29[COMRAM] PTR 
  4891 ;;  f2              4   33[COMRAM] PTR 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  f3              4   45[COMRAM] PTR 
  4894 ;;  sign            1   50[COMRAM] unsigned char 
  4895 ;;  exp             1   49[COMRAM] unsigned char 
  4896 ;;  cntr            1   44[COMRAM] unsigned char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  4   29[COMRAM] unsigned char 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/1
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4906 ;;      Params:         8       0       0       0       0       0       0
  4907 ;;      Locals:        14       0       0       0       0       0       0
  4908 ;;      Temps:          0       0       0       0       0       0       0
  4909 ;;      Totals:        22       0       0       0       0       0       0
  4910 ;;Total ram usage:       22 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    3
  4913 ;; This function calls:
  4914 ;;		___flpack
  4915 ;; This function is called by:
  4916 ;;		_doWork
  4917 ;;		_Celsius2Fahrenheit
  4918 ;;		___asfldiv
  4919 ;;		_exp
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text20
  4924  00445C                     __ptext20:
  4925                           	opt stack 0
  4926  00445C                     ___fldiv:
  4927                           	opt stack 25
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;incstack = 0
  4931                           ;incstack = 0
  4932  00445C  3420               	rlcf	(___fldiv@f1+2)& (0+255),w,c
  4933  00445E  3421               	rlcf	(___fldiv@f1+3)& (0+255),w,c
  4934  004460  6E32               	movwf	___fldiv@exp,c
  4935  004462  6632               	tstfsz	___fldiv@exp& (0+255),c
  4936  004464  D001               	goto	l14054
  4937  004466  D005               	goto	u13530
  4938  004468                     l14054:
  4939  004468  3424               	rlcf	(___fldiv@f2+2)& (0+255),w,c
  4940  00446A  3425               	rlcf	(___fldiv@f2+3)& (0+255),w,c
  4941  00446C  6E33               	movwf	___fldiv@sign,c
  4942  00446E  6633               	tstfsz	___fldiv@sign& (0+255),c
  4943  004470  D005               	goto	l14058
  4944  004472                     u13530:
  4945  004472  6A1E               	clrf	?___fldiv,c
  4946  004474  6A1F               	clrf	?___fldiv+1,c
  4947  004476  6A20               	clrf	?___fldiv+2,c
  4948  004478  6A21               	clrf	?___fldiv+3,c
  4949  00447A  D043               	goto	l1619
  4950  00447C                     l14058:
  4951  00447C  5033               	movf	___fldiv@sign,w,c
  4952  00447E  0F89               	addlw	137
  4953  004480  5E32               	subwf	___fldiv@exp,f,c
  4954  004482  C021  F033         	movff	___fldiv@f1+3,___fldiv@sign
  4955  004486  5025               	movf	(___fldiv@f2+3)& (0+255),w,c
  4956  004488  1A33               	xorwf	___fldiv@sign,f,c
  4957  00448A  0E80               	movlw	128
  4958  00448C  1633               	andwf	___fldiv@sign,f,c
  4959  00448E  8E20               	bsf	___fldiv@f1+2,7,c
  4960  004490  6A21               	clrf	___fldiv@f1+3,c
  4961  004492  8E24               	bsf	___fldiv@f2+2,7,c
  4962  004494  6A25               	clrf	___fldiv@f2+3,c
  4963  004496  0E20               	movlw	32
  4964  004498  6E2D               	movwf	___fldiv@cntr,c
  4965  00449A                     l14070:
  4966  00449A  90D8               	bcf	status,0,c
  4967  00449C  362E               	rlcf	___fldiv@f3,f,c
  4968  00449E  362F               	rlcf	___fldiv@f3+1,f,c
  4969  0044A0  3630               	rlcf	___fldiv@f3+2,f,c
  4970  0044A2  3631               	rlcf	___fldiv@f3+3,f,c
  4971  0044A4  5022               	movf	___fldiv@f2,w,c
  4972  0044A6  5C1E               	subwf	___fldiv@f1,w,c
  4973  0044A8  5023               	movf	___fldiv@f2+1,w,c
  4974  0044AA  581F               	subwfb	___fldiv@f1+1,w,c
  4975  0044AC  5024               	movf	___fldiv@f2+2,w,c
  4976  0044AE  5820               	subwfb	___fldiv@f1+2,w,c
  4977  0044B0  5025               	movf	___fldiv@f2+3,w,c
  4978  0044B2  5821               	subwfb	___fldiv@f1+3,w,c
  4979  0044B4  E309               	bnc	l14078
  4980  0044B6  5022               	movf	___fldiv@f2,w,c
  4981  0044B8  5E1E               	subwf	___fldiv@f1,f,c
  4982  0044BA  5023               	movf	___fldiv@f2+1,w,c
  4983  0044BC  5A1F               	subwfb	___fldiv@f1+1,f,c
  4984  0044BE  5024               	movf	___fldiv@f2+2,w,c
  4985  0044C0  5A20               	subwfb	___fldiv@f1+2,f,c
  4986  0044C2  5025               	movf	___fldiv@f2+3,w,c
  4987  0044C4  5A21               	subwfb	___fldiv@f1+3,f,c
  4988  0044C6  802E               	bsf	___fldiv@f3,0,c
  4989  0044C8                     l14078:
  4990  0044C8  90D8               	bcf	status,0,c
  4991  0044CA  361E               	rlcf	___fldiv@f1,f,c
  4992  0044CC  361F               	rlcf	___fldiv@f1+1,f,c
  4993  0044CE  3620               	rlcf	___fldiv@f1+2,f,c
  4994  0044D0  3621               	rlcf	___fldiv@f1+3,f,c
  4995  0044D2  2E2D               	decfsz	___fldiv@cntr,f,c
  4996  0044D4  D7E2               	goto	l14070
  4997  0044D6  C02E  F00E         	movff	___fldiv@f3,?___flpack
  4998  0044DA  C02F  F00F         	movff	___fldiv@f3+1,?___flpack+1
  4999  0044DE  C030  F010         	movff	___fldiv@f3+2,?___flpack+2
  5000  0044E2  C031  F011         	movff	___fldiv@f3+3,?___flpack+3
  5001  0044E6  C032  F012         	movff	___fldiv@exp,?___flpack+4
  5002  0044EA  C033  F013         	movff	___fldiv@sign,?___flpack+5
  5003  0044EE  ECC5  F020         	call	___flpack	;wreg free
  5004  0044F2  C011  F021         	movff	?___flpack+3,?___fldiv+3
  5005  0044F6  C010  F020         	movff	?___flpack+2,?___fldiv+2
  5006  0044FA  C00F  F01F         	movff	?___flpack+1,?___fldiv+1
  5007  0044FE  C00E  F01E         	movff	?___flpack,?___fldiv
  5008  004502                     l1619:
  5009  004502  0012               	return	
  5010  004504                     __end_of___fldiv:
  5011                           	opt stack 0
  5012                           tblptru	equ	0xFF8
  5013                           tblptrh	equ	0xFF7
  5014                           tblptrl	equ	0xFF6
  5015                           tablat	equ	0xFF5
  5016                           prodh	equ	0xFF4
  5017                           prodl	equ	0xFF3
  5018                           intcon	equ	0xFF2
  5019                           postinc0	equ	0xFEE
  5020                           wreg	equ	0xFE8
  5021                           indf1	equ	0xFE7
  5022                           postdec1	equ	0xFE5
  5023                           fsr1h	equ	0xFE2
  5024                           fsr1l	equ	0xFE1
  5025                           indf2	equ	0xFDF
  5026                           postinc2	equ	0xFDE
  5027                           postdec2	equ	0xFDD
  5028                           plusw2	equ	0xFDB
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _vscp_doOneSecondWork *****************
  5034 ;; Defined at:
  5035 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;		None               void
  5042 ;; Registers used:
  5043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : F/0
  5046 ;;		On exit  : F/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5049 ;;      Params:         0       0       0       0       0       0       0
  5050 ;;      Locals:         0       0       0       0       0       0       0
  5051 ;;      Temps:          0       1       0       0       0       0       0
  5052 ;;      Totals:         0       1       0       0       0       0       0
  5053 ;;Total ram usage:        1 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    8
  5056 ;; This function calls:
  5057 ;;		_vscp_getZone
  5058 ;;		_vscp_getSubzone
  5059 ;;		_vscp_sendHeartBeat
  5060 ;; This function is called by:
  5061 ;;		_main
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text21
  5066  004BE8                     __ptext21:
  5067                           	opt stack 0
  5068  004BE8                     _vscp_doOneSecondWork:
  5069                           	opt stack 21
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;vscp_firmware.c: 526: ++vscp_second;
  5073                           
  5074                           ;incstack = 0
  5075                           ;incstack = 0
  5076  004BE8  2A51               	incf	_vscp_second,f,c
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  5080  004BEA  0E3B               	movlw	59
  5081  004BEC  6451               	cpfsgt	_vscp_second,c
  5082  004BEE  D00C               	goto	l10214
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;vscp_firmware.c: 529: vscp_second = 0;
  5086  004BF0  6A51               	clrf	_vscp_second,c
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;vscp_firmware.c: 530: vscp_minute++;
  5090  004BF2  2A4D               	incf	_vscp_minute,f,c
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  5094  004BF4  51BE               	movf	_vscp_node_state& (0+255),w,b
  5095  004BF6  0A03               	xorlw	3
  5096  004BF8  E107               	bnz	l10214
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  5100                           ;vscp_firmware.c: 535: vscp_getSubzone());
  5101  004BFA  EC9B  F029         	call	_vscp_getSubzone	;wreg free
  5102  004BFE  6E44               	movwf	?_vscp_sendHeartBeat,c
  5103  004C00  ECA0  F029         	call	_vscp_getZone	;wreg free
  5104  004C04  EC54  F028         	call	_vscp_sendHeartBeat
  5105  004C08                     l10214:
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;vscp_firmware.c: 536: }
  5109                           ;vscp_firmware.c: 537: }
  5110                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  5111  004C08  0E3B               	movlw	59
  5112  004C0A  644D               	cpfsgt	_vscp_minute,c
  5113  004C0C  D002               	goto	l10220
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;vscp_firmware.c: 540: vscp_minute = 0;
  5117  004C0E  6A4D               	clrf	_vscp_minute,c
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;vscp_firmware.c: 541: vscp_hour++;
  5121  004C10  2BBB               	incf	_vscp_hour& (0+255),f,b
  5122  004C12                     l10220:
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;vscp_firmware.c: 542: }
  5126                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  5127  004C12  0E17               	movlw	23
  5128  004C14  65BB               	cpfsgt	_vscp_hour& (0+255),b
  5129  004C16  D001               	goto	l10224
  5130                           
  5131                           ; BSR set to: 0
  5132  004C18  6BBB               	clrf	_vscp_hour& (0+255),b
  5133  004C1A                     l10224:
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  5137  004C1A  51BE               	movf	_vscp_node_state& (0+255),w,b
  5138  004C1C  0A03               	xorlw	3
  5139  004C1E  E109               	bnz	l1099
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  5143  004C20  2A4B               	incf	_vscp_guid_reset,f,c
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  5147  004C22  C04B  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5148  004C26  0E0F               	movlw	15
  5149  004C28  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5150  004C2A  0E02               	movlw	2
  5151  004C2C  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5152  004C2E  B0D8               	btfsc	status,0,c
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  5156  004C30  6A4B               	clrf	_vscp_guid_reset,c
  5157  004C32                     l1099:
  5158                           
  5159                           ; BSR set to: 0
  5160  004C32  0012               	return	
  5161  004C34                     __end_of_vscp_doOneSecondWork:
  5162                           	opt stack 0
  5163                           tblptru	equ	0xFF8
  5164                           tblptrh	equ	0xFF7
  5165                           tblptrl	equ	0xFF6
  5166                           tablat	equ	0xFF5
  5167                           prodh	equ	0xFF4
  5168                           prodl	equ	0xFF3
  5169                           intcon	equ	0xFF2
  5170                           postinc0	equ	0xFEE
  5171                           wreg	equ	0xFE8
  5172                           indf1	equ	0xFE7
  5173                           postdec1	equ	0xFE5
  5174                           fsr1h	equ	0xFE2
  5175                           fsr1l	equ	0xFE1
  5176                           indf2	equ	0xFDF
  5177                           postinc2	equ	0xFDE
  5178                           postdec2	equ	0xFDD
  5179                           plusw2	equ	0xFDB
  5180                           fsr2h	equ	0xFDA
  5181                           fsr2l	equ	0xFD9
  5182                           status	equ	0xFD8
  5183                           
  5184 ;; *************** function _vscp_sendHeartBeat *****************
  5185 ;; Defined at:
  5186 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;  zone            1    wreg     unsigned char 
  5189 ;;  subzone         1   67[COMRAM] unsigned char 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  zone            1   68[COMRAM] unsigned char 
  5192 ;; Return value:  Size  Location     Type
  5193 ;;		None               void
  5194 ;; Registers used:
  5195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : F/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5201 ;;      Params:         1       0       0       0       0       0       0
  5202 ;;      Locals:         1       0       0       0       0       0       0
  5203 ;;      Temps:          0       0       0       0       0       0       0
  5204 ;;      Totals:         2       0       0       0       0       0       0
  5205 ;;Total ram usage:        2 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:    7
  5208 ;; This function calls:
  5209 ;;		_vscp_sendEvent
  5210 ;; This function is called by:
  5211 ;;		_vscp_doOneSecondWork
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           	psect	text22
  5216  0050A8                     __ptext22:
  5217                           	opt stack 0
  5218  0050A8                     _vscp_sendHeartBeat:
  5219                           	opt stack 21
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;incstack = 0
  5223                           ;incstack = 0
  5224                           ;vscp_sendHeartBeat@zone stored from wreg
  5225  0050A8  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5226                           
  5227                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  5228  0050AC  0E83               	movlw	131
  5229  0050AE  0100               	movlb	0	; () banked
  5230  0050B0  6FCD               	movwf	_vscp_omsg& (0+255),b
  5231                           
  5232                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  5233  0050B2  0E07               	movlw	7
  5234  0050B4  6FCE               	movwf	(_vscp_omsg+1)& (0+255),b
  5235                           
  5236                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  5237  0050B6  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  5238  0050B8  0E14               	movlw	20
  5239  0050BA  6FCF               	movwf	(_vscp_omsg+2)& (0+255),b
  5240                           
  5241                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  5242  0050BC  0E09               	movlw	9
  5243  0050BE  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  5244                           
  5245                           ; BSR set to: 0
  5246                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  5247  0050C0  6BD2               	clrf	(_vscp_omsg+5)& (0+255),b
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  5251  0050C2  C045  F0D3         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  5255  0050C6  C044  F0D4         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;vscp_firmware.c: 388: vscp_sendEvent();
  5259  0050CA  EF40  F028         	goto	_vscp_sendEvent	;wreg free
  5260  0050CE                     __end_of_vscp_sendHeartBeat:
  5261                           	opt stack 0
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           postinc0	equ	0xFEE
  5270                           wreg	equ	0xFE8
  5271                           indf1	equ	0xFE7
  5272                           postdec1	equ	0xFE5
  5273                           fsr1h	equ	0xFE2
  5274                           fsr1l	equ	0xFE1
  5275                           indf2	equ	0xFDF
  5276                           postinc2	equ	0xFDE
  5277                           postdec2	equ	0xFDD
  5278                           plusw2	equ	0xFDB
  5279                           fsr2h	equ	0xFDA
  5280                           fsr2l	equ	0xFD9
  5281                           status	equ	0xFD8
  5282                           
  5283 ;; *************** function _vscp_getSubzone *****************
  5284 ;; Defined at:
  5285 ;;		line 2734 in file "../main.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;		None
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;		None
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  1    wreg      unsigned char 
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : F/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5299 ;;      Params:         0       0       0       0       0       0       0
  5300 ;;      Locals:         0       0       0       0       0       0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0
  5302 ;;      Totals:         0       0       0       0       0       0       0
  5303 ;;Total ram usage:        0 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    3
  5306 ;; This function calls:
  5307 ;;		_readEEPROM
  5308 ;; This function is called by:
  5309 ;;		_vscp_doOneSecondWork
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           	psect	text23
  5314  005336                     __ptext23:
  5315                           	opt stack 0
  5316  005336                     _vscp_getSubzone:
  5317                           	opt stack 25
  5318                           
  5319                           ; BSR set to: 0
  5320                           ;main.c: 2735: return readEEPROM(0x42);
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;incstack = 0
  5324                           ;incstack = 0
  5325  005336  6A17               	clrf	?_readEEPROM+1,c
  5326  005338  0E42               	movlw	66
  5327  00533A  6E16               	movwf	?_readEEPROM,c
  5328  00533C  EF64  F029         	goto	_readEEPROM	;wreg free
  5329  005340                     __end_of_vscp_getSubzone:
  5330                           	opt stack 0
  5331                           tblptru	equ	0xFF8
  5332                           tblptrh	equ	0xFF7
  5333                           tblptrl	equ	0xFF6
  5334                           tablat	equ	0xFF5
  5335                           prodh	equ	0xFF4
  5336                           prodl	equ	0xFF3
  5337                           intcon	equ	0xFF2
  5338                           postinc0	equ	0xFEE
  5339                           wreg	equ	0xFE8
  5340                           indf1	equ	0xFE7
  5341                           postdec1	equ	0xFE5
  5342                           fsr1h	equ	0xFE2
  5343                           fsr1l	equ	0xFE1
  5344                           indf2	equ	0xFDF
  5345                           postinc2	equ	0xFDE
  5346                           postdec2	equ	0xFDD
  5347                           plusw2	equ	0xFDB
  5348                           fsr2h	equ	0xFDA
  5349                           fsr2l	equ	0xFD9
  5350                           status	equ	0xFD8
  5351                           
  5352 ;; *************** function _vscp_getZone *****************
  5353 ;; Defined at:
  5354 ;;		line 2725 in file "../main.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      unsigned char 
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5368 ;;      Params:         0       0       0       0       0       0       0
  5369 ;;      Locals:         0       0       0       0       0       0       0
  5370 ;;      Temps:          0       0       0       0       0       0       0
  5371 ;;      Totals:         0       0       0       0       0       0       0
  5372 ;;Total ram usage:        0 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    3
  5375 ;; This function calls:
  5376 ;;		_readEEPROM
  5377 ;; This function is called by:
  5378 ;;		_vscp_doOneSecondWork
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text24
  5383  005340                     __ptext24:
  5384                           	opt stack 0
  5385  005340                     _vscp_getZone:
  5386                           	opt stack 25
  5387                           
  5388                           ;main.c: 2726: return readEEPROM(0x41);
  5389                           
  5390                           ;incstack = 0
  5391                           ;incstack = 0
  5392  005340  6A17               	clrf	?_readEEPROM+1,c
  5393  005342  0E41               	movlw	65
  5394  005344  6E16               	movwf	?_readEEPROM,c
  5395  005346  EF64  F029         	goto	_readEEPROM	;wreg free
  5396  00534A                     __end_of_vscp_getZone:
  5397                           	opt stack 0
  5398                           tblptru	equ	0xFF8
  5399                           tblptrh	equ	0xFF7
  5400                           tblptrl	equ	0xFF6
  5401                           tablat	equ	0xFF5
  5402                           prodh	equ	0xFF4
  5403                           prodl	equ	0xFF3
  5404                           intcon	equ	0xFF2
  5405                           postinc0	equ	0xFEE
  5406                           wreg	equ	0xFE8
  5407                           indf1	equ	0xFE7
  5408                           postdec1	equ	0xFE5
  5409                           fsr1h	equ	0xFE2
  5410                           fsr1l	equ	0xFE1
  5411                           indf2	equ	0xFDF
  5412                           postinc2	equ	0xFDE
  5413                           postdec2	equ	0xFDD
  5414                           plusw2	equ	0xFDB
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419 ;; *************** function _doOneSecondWork *****************
  5420 ;; Defined at:
  5421 ;;		line 529 in file "../main.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;		None
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  setpoint        2   46[BANK0 ] short 
  5426 ;;  i               1   48[BANK0 ] unsigned char 
  5427 ;;  tmp             1   45[BANK0 ] unsigned char 
  5428 ;; Return value:  Size  Location     Type
  5429 ;;		None               void
  5430 ;; Registers used:
  5431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : F/1
  5434 ;;		On exit  : F/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5437 ;;      Params:         0       0       0       0       0       0       0
  5438 ;;      Locals:         0       4       0       0       0       0       0
  5439 ;;      Temps:          0       7       0       0       0       0       0
  5440 ;;      Totals:         0      11       0       0       0       0       0
  5441 ;;Total ram usage:       11 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    8
  5444 ;; This function calls:
  5445 ;;		_writeEEPROM
  5446 ;;		_readEEPROM
  5447 ;;		_sendTempEvent
  5448 ;;		_vscp_sendEvent
  5449 ;; This function is called by:
  5450 ;;		_main
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           	psect	text25
  5455  0026F4                     __ptext25:
  5456                           	opt stack 0
  5457  0026F4                     _doOneSecondWork:
  5458                           	opt stack 21
  5459                           
  5460                           ; BSR set to: 1
  5461                           ;main.c: 530: uint8_t tmp;
  5462                           ;main.c: 531: uint8_t i;
  5463                           ;main.c: 532: int16_t setpoint;
  5464                           ;main.c: 534: for (i = 0; i < 6; i++) {
  5465                           
  5466                           ;incstack = 0
  5467                           ;incstack = 0
  5468  0026F4  0100               	movlb	0	; () banked
  5469  0026F6  6B90               	clrf	doOneSecondWork@i& (0+255),b
  5470  0026F8                     l13626:
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;main.c: 537: if (current_temp[ i ] < ((int16_t)( (((uint16_t)readEEPROM(0x7F + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x80 + 2*i)) ) ) {
  5474  0026F8  5190               	movf	doOneSecondWork@i& (0+255),w,b
  5475  0026FA  0D02               	mullw	2
  5476  0026FC  0E7F               	movlw	127
  5477  0026FE  24F3               	addwf	prodl,w,c
  5478  002700  6E16               	movwf	?_readEEPROM,c
  5479  002702  0E00               	movlw	0
  5480  002704  20F4               	addwfc	prodh,w,c
  5481  002706  6E17               	movwf	?_readEEPROM+1,c
  5482  002708  EC64  F029         	call	_readEEPROM	;wreg free
  5483  00270C  0100               	movlb	0	; () banked
  5484  00270E  6F87               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5485  002710  6B86               	clrf	??_doOneSecondWork& (0+255),b
  5486  002712  5190               	movf	doOneSecondWork@i& (0+255),w,b
  5487  002714  0D02               	mullw	2
  5488  002716  0E80               	movlw	128
  5489  002718  24F3               	addwf	prodl,w,c
  5490  00271A  6E16               	movwf	?_readEEPROM,c
  5491  00271C  0E00               	movlw	0
  5492  00271E  20F4               	addwfc	prodh,w,c
  5493  002720  6E17               	movwf	?_readEEPROM+1,c
  5494  002722  EC64  F029         	call	_readEEPROM	;wreg free
  5495  002726  0100               	movlb	0	; () banked
  5496  002728  2786               	addwf	??_doOneSecondWork& (0+255),f,b
  5497  00272A  0E00               	movlw	0
  5498  00272C  2387               	addwfc	(??_doOneSecondWork+1)& (0+255),f,b
  5499  00272E  DA0C               	call	PL6	;call to abstracted procedure
  5500  002730  CFDE F088          	movff	postinc2,??_doOneSecondWork+2
  5501  002734  CFDD F089          	movff	postdec2,??_doOneSecondWork+3
  5502  002738  DA63               	call	PL52	;call to abstracted procedure
  5503  00273A  E21B               	bc	l207
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;main.c: 540: writeEEPROM(0x7F + 2*i, current_temp[ i ] >> 8);
  5507  00273C  90D8               	bcf	status,0,c
  5508  00273E  3590               	rlcf	doOneSecondWork@i& (0+255),w,b
  5509  002740  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5510  002742  6B87               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5511  002744  3787               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5512  002746  0E7F               	movlw	127
  5513  002748  2586               	addwf	??_doOneSecondWork& (0+255),w,b
  5514  00274A  6E0E               	movwf	?_writeEEPROM,c
  5515  00274C  0E00               	movlw	0
  5516  00274E  2187               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5517  002750  6E0F               	movwf	?_writeEEPROM+1,c
  5518  002752  D9FA               	call	PL6	;call to abstracted procedure
  5519  002754  DA35               	call	PL28	;call to abstracted procedure
  5520  002756  EC67  F028         	call	_writeEEPROM	;wreg free
  5521                           
  5522                           ;main.c: 541: writeEEPROM(0x80 + 2*i, current_temp[ i ] & 0xff);
  5523  00275A  DA71               	call	PL78	;call to abstracted procedure
  5524  00275C  0E80               	movlw	128
  5525  00275E  2586               	addwf	??_doOneSecondWork& (0+255),w,b
  5526  002760  6E0E               	movwf	?_writeEEPROM,c
  5527  002762  0E00               	movlw	0
  5528  002764  2187               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5529  002766  6E0F               	movwf	?_writeEEPROM+1,c
  5530  002768  D9EF               	call	PL6	;call to abstracted procedure
  5531  00276A  50DF               	movf	indf2,w,c
  5532  00276C  6E10               	movwf	?_writeEEPROM+2,c
  5533  00276E  EC67  F028         	call	_writeEEPROM	;wreg free
  5534  002772                     l207:
  5535                           
  5536                           ;main.c: 542: }
  5537                           ;main.c: 545: if (current_temp[ i ] > ((int16_t)( (((uint16_t)readEEPROM(0x8B + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x8C + 2*i )) ) ) {
  5538  002772  0100               	movlb	0	; () banked
  5539  002774  D9E9               	call	PL6	;call to abstracted procedure
  5540  002776  CFDE F086          	movff	postinc2,??_doOneSecondWork
  5541  00277A  CFDD F087          	movff	postdec2,??_doOneSecondWork+1
  5542  00277E  5190               	movf	doOneSecondWork@i& (0+255),w,b
  5543  002780  0D02               	mullw	2
  5544  002782  0E8B               	movlw	139
  5545  002784  24F3               	addwf	prodl,w,c
  5546  002786  6E16               	movwf	?_readEEPROM,c
  5547  002788  0E00               	movlw	0
  5548  00278A  20F4               	addwfc	prodh,w,c
  5549  00278C  6E17               	movwf	?_readEEPROM+1,c
  5550  00278E  EC64  F029         	call	_readEEPROM	;wreg free
  5551  002792  0100               	movlb	0	; () banked
  5552  002794  6F89               	movwf	(??_doOneSecondWork+3)& (0+255),b
  5553  002796  6B88               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5554  002798  5190               	movf	doOneSecondWork@i& (0+255),w,b
  5555  00279A  0D02               	mullw	2
  5556  00279C  0E8C               	movlw	140
  5557  00279E  24F3               	addwf	prodl,w,c
  5558  0027A0  6E16               	movwf	?_readEEPROM,c
  5559  0027A2  0E00               	movlw	0
  5560  0027A4  20F4               	addwfc	prodh,w,c
  5561  0027A6  6E17               	movwf	?_readEEPROM+1,c
  5562  0027A8  EC64  F029         	call	_readEEPROM	;wreg free
  5563  0027AC  0100               	movlb	0	; () banked
  5564  0027AE  2788               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  5565  0027B0  0E00               	movlw	0
  5566  0027B2  2389               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  5567  0027B4  DA25               	call	PL52	;call to abstracted procedure
  5568  0027B6  E21B               	bc	l13632
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;main.c: 548: writeEEPROM(0x8B + 2*i, current_temp[ i ] >> 8);
  5572  0027B8  90D8               	bcf	status,0,c
  5573  0027BA  3590               	rlcf	doOneSecondWork@i& (0+255),w,b
  5574  0027BC  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5575  0027BE  6B87               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5576  0027C0  3787               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5577  0027C2  0E8B               	movlw	139
  5578  0027C4  2586               	addwf	??_doOneSecondWork& (0+255),w,b
  5579  0027C6  6E0E               	movwf	?_writeEEPROM,c
  5580  0027C8  0E00               	movlw	0
  5581  0027CA  2187               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5582  0027CC  6E0F               	movwf	?_writeEEPROM+1,c
  5583  0027CE  D9BC               	call	PL6	;call to abstracted procedure
  5584  0027D0  D9F7               	call	PL28	;call to abstracted procedure
  5585  0027D2  EC67  F028         	call	_writeEEPROM	;wreg free
  5586                           
  5587                           ;main.c: 549: writeEEPROM(0x8C + 2*i, current_temp[ i ] & 0xff );
  5588  0027D6  DA33               	call	PL78	;call to abstracted procedure
  5589  0027D8  0E8C               	movlw	140
  5590  0027DA  2586               	addwf	??_doOneSecondWork& (0+255),w,b
  5591  0027DC  6E0E               	movwf	?_writeEEPROM,c
  5592  0027DE  0E00               	movlw	0
  5593  0027E0  2187               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5594  0027E2  6E0F               	movwf	?_writeEEPROM+1,c
  5595  0027E4  D9B1               	call	PL6	;call to abstracted procedure
  5596  0027E6  50DF               	movf	indf2,w,c
  5597  0027E8  6E10               	movwf	?_writeEEPROM+2,c
  5598  0027EA  EC67  F028         	call	_writeEEPROM	;wreg free
  5599  0027EE                     l13632:
  5600                           
  5601                           ;main.c: 550: }
  5602                           ;main.c: 553: tmp = readEEPROM(0x49 + i);
  5603  0027EE  0E49               	movlw	73
  5604  0027F0  DA1F               	call	PL76	;call to abstracted procedure
  5605  0027F2  EC64  F029         	call	_readEEPROM	;wreg free
  5606  0027F6  0100               	movlb	0	; () banked
  5607  0027F8  6F8D               	movwf	doOneSecondWork@tmp& (0+255),b
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;main.c: 554: if (tmp && (seconds_temp[i] > tmp)) {
  5611  0027FA  518D               	movf	doOneSecondWork@tmp& (0+255),w,b
  5612  0027FC  E016               	bz	l13642
  5613                           
  5614                           ; BSR set to: 0
  5615  0027FE  0E00               	movlw	low _seconds_temp
  5616  002800  2590               	addwf	doOneSecondWork@i& (0+255),w,b
  5617  002802  6ED9               	movwf	fsr2l,c
  5618  002804  6ADA               	clrf	fsr2h,c
  5619  002806  0E01               	movlw	high _seconds_temp
  5620  002808  22DA               	addwfc	fsr2h,f,c
  5621  00280A  50DF               	movf	indf2,w,c
  5622  00280C  618D               	cpfslt	doOneSecondWork@tmp& (0+255),b
  5623  00280E  D00D               	goto	l13642
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;main.c: 557: if (sendTempEvent(i)) {
  5627  002810  5190               	movf	doOneSecondWork@i& (0+255),w,b
  5628  002812  EC3E  F024         	call	_sendTempEvent
  5629  002816  0900               	iorlw	0
  5630  002818  E008               	bz	l13642
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;main.c: 558: seconds_temp[i] = 0;
  5634  00281A  0E00               	movlw	low _seconds_temp
  5635  00281C  0100               	movlb	0	; () banked
  5636  00281E  2590               	addwf	doOneSecondWork@i& (0+255),w,b
  5637  002820  6ED9               	movwf	fsr2l,c
  5638  002822  6ADA               	clrf	fsr2h,c
  5639  002824  0E01               	movlw	high _seconds_temp
  5640  002826  22DA               	addwfc	fsr2h,f,c
  5641  002828  6ADF               	clrf	indf2,c
  5642  00282A                     l13642:
  5643                           
  5644                           ;main.c: 559: }
  5645                           ;main.c: 561: }
  5646                           ;main.c: 564: if (0x80 & readEEPROM(0x43 + i)) {
  5647  00282A  0E43               	movlw	67
  5648  00282C  DA01               	call	PL76	;call to abstracted procedure
  5649  00282E  EC64  F029         	call	_readEEPROM	;wreg free
  5650  002832  0100               	movlb	0	; () banked
  5651  002834  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5652  002836  AF86               	btfss	??_doOneSecondWork& (0+255),7,b
  5653  002838  D076               	goto	l13696
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;main.c: 567: if (low_alarm & (1 << i)) {
  5657  00283A  C090  F086         	movff	doOneSecondWork@i,??_doOneSecondWork
  5658  00283E  0E01               	movlw	1
  5659  002840  6F87               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5660  002842  2B86               	incf	??_doOneSecondWork& (0+255),f,b
  5661  002844  D002               	goto	u12774
  5662  002846                     u12775:
  5663  002846  90D8               	bcf	status,0,c
  5664  002848  3787               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5665  00284A                     u12774:
  5666  00284A  2F86               	decfsz	??_doOneSecondWork& (0+255),f,b
  5667  00284C  D7FC               	goto	u12775
  5668  00284E  5187               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5669  002850  15B9               	andwf	_low_alarm& (0+255),w,b
  5670  002852  E032               	bz	l13670
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;main.c: 570: if (readEEPROM(0x43 + i) & (1<<3)) {
  5674  002854  D98E               	call	PL10	;call to abstracted procedure
  5675  002856  EC64  F029         	call	_readEEPROM	;wreg free
  5676  00285A  0100               	movlb	0	; () banked
  5677  00285C  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5678  00285E  A786               	btfss	??_doOneSecondWork& (0+255),3,b
  5679  002860  D02B               	goto	l13670
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;main.c: 572: vscp_omsg.priority = 0x00;
  5683  002862  6BCE               	clrf	(_vscp_omsg+1)& (0+255),b
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;main.c: 573: vscp_omsg.flags = 0x80 + 3;
  5687  002864  0E83               	movlw	131
  5688  002866  6FCD               	movwf	_vscp_omsg& (0+255),b
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;main.c: 576: if (readEEPROM(0x43 + i) & (1<<5)) {
  5692  002868  D984               	call	PL10	;call to abstracted procedure
  5693  00286A  EC64  F029         	call	_readEEPROM	;wreg free
  5694  00286E  0100               	movlb	0	; () banked
  5695  002870  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5696  002872  AB86               	btfss	??_doOneSecondWork& (0+255),5,b
  5697  002874  D012               	goto	l13660
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;main.c: 578: if (readEEPROM(0x43 + i) & (1<<6)) {
  5701  002876  0E43               	movlw	67
  5702  002878  2590               	addwf	doOneSecondWork@i& (0+255),w,b
  5703  00287A  6E16               	movwf	?_readEEPROM,c
  5704  00287C  6A17               	clrf	?_readEEPROM+1,c
  5705  00287E  0E00               	movlw	0
  5706  002880  2217               	addwfc	?_readEEPROM+1,f,c
  5707  002882  EC64  F029         	call	_readEEPROM	;wreg free
  5708  002886  0100               	movlb	0	; () banked
  5709  002888  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5710  00288A  AD86               	btfss	??_doOneSecondWork& (0+255),6,b
  5711  00288C  D003               	goto	l13658
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;main.c: 579: vscp_omsg.vscp_class = 30;
  5715  00288E  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  5716                           
  5717                           ;main.c: 580: vscp_omsg.vscp_type = 5;
  5718  002890  D9DD               	call	PL86	;call to abstracted procedure
  5719  002892  D007               	goto	L4
  5720  002894                     l13658:
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;main.c: 582: else {
  5724                           ;main.c: 583: vscp_omsg.vscp_class = 30;
  5725  002894  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  5726                           
  5727                           ;main.c: 584: vscp_omsg.vscp_type = 6;
  5728  002896  D9DD               	call	PL88	;call to abstracted procedure
  5729  002898  D004               	goto	L4
  5730  00289A                     l13660:
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;main.c: 588: else {
  5734                           ;main.c: 590: vscp_omsg.vscp_class = 1;
  5735  00289A  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  5736  00289C  0E01               	movlw	1
  5737  00289E  6FCF               	movwf	(_vscp_omsg+2)& (0+255),b
  5738                           
  5739                           ;main.c: 591: vscp_omsg.vscp_type = 2;
  5740  0028A0  0E02               	movlw	2
  5741  0028A2                     L4:
  5742  0028A2  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;main.c: 592: }
  5746                           ;main.c: 594: vscp_omsg.data[ 0 ] = i;
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;main.c: 595: vscp_omsg.data[ 1 ] =
  5750                           ;main.c: 596: readEEPROM(0x73 + 2*i);
  5751  0028A4  D943               	call	PL4	;call to abstracted procedure
  5752  0028A6  EC64  F029         	call	_readEEPROM	;wreg free
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;main.c: 597: vscp_omsg.data[ 2 ] =
  5756                           ;main.c: 598: readEEPROM(0x74 + 2*i);
  5757  0028AA  D955               	call	PL8	;call to abstracted procedure
  5758  0028AC  EC64  F029         	call	_readEEPROM	;wreg free
  5759  0028B0  0100               	movlb	0	; () banked
  5760  0028B2  6FD4               	movwf	(_vscp_omsg+7)& (0+255),b
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;main.c: 603: vscp_sendEvent();
  5764  0028B4  EC40  F028         	call	_vscp_sendEvent	;wreg free
  5765  0028B8                     l13670:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;main.c: 605: }
  5769                           ;main.c: 606: }
  5770                           ;main.c: 609: if (high_alarm & (1 << i)) {
  5771  0028B8  D92D               	call	PL2	;call to abstracted procedure
  5772  0028BA  15B8               	andwf	_high_alarm& (0+255),w,b
  5773  0028BC  E101 D125          	bz	l13774
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;main.c: 612: if ((readEEPROM(0x43 + i) & (1<<4))) {
  5777  0028C0  D958               	call	PL10	;call to abstracted procedure
  5778  0028C2  EC64  F029         	call	_readEEPROM	;wreg free
  5779  0028C6  0100               	movlb	0	; () banked
  5780  0028C8  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5781  0028CA  A986               	btfss	??_doOneSecondWork& (0+255),4,b
  5782  0028CC  D11E               	goto	l13774
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;main.c: 614: vscp_omsg.priority = 0x00;
  5786  0028CE  6BCE               	clrf	(_vscp_omsg+1)& (0+255),b
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;main.c: 615: vscp_omsg.flags = 0x80 + 3;
  5790  0028D0  0E83               	movlw	131
  5791  0028D2  6FCD               	movwf	_vscp_omsg& (0+255),b
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;main.c: 617: if (readEEPROM(0x43 + i) & (1<<5)) {
  5795  0028D4  D94E               	call	PL10	;call to abstracted procedure
  5796  0028D6  EC64  F029         	call	_readEEPROM	;wreg free
  5797  0028DA  0100               	movlb	0	; () banked
  5798  0028DC  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5799  0028DE  AB86               	btfss	??_doOneSecondWork& (0+255),5,b
  5800  0028E0  D012               	goto	l13686
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;main.c: 619: if (readEEPROM(0x43 + i) & (1<<6)) {
  5804  0028E2  0E43               	movlw	67
  5805  0028E4  2590               	addwf	doOneSecondWork@i& (0+255),w,b
  5806  0028E6  6E16               	movwf	?_readEEPROM,c
  5807  0028E8  6A17               	clrf	?_readEEPROM+1,c
  5808  0028EA  0E00               	movlw	0
  5809  0028EC  2217               	addwfc	?_readEEPROM+1,f,c
  5810  0028EE  EC64  F029         	call	_readEEPROM	;wreg free
  5811  0028F2  0100               	movlb	0	; () banked
  5812  0028F4  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5813  0028F6  AD86               	btfss	??_doOneSecondWork& (0+255),6,b
  5814  0028F8  D003               	goto	l13684
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;main.c: 620: vscp_omsg.vscp_class = 30;
  5818  0028FA  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  5819                           
  5820                           ;main.c: 621: vscp_omsg.vscp_type = 6;
  5821  0028FC  D9AA               	call	PL88	;call to abstracted procedure
  5822  0028FE  D007               	goto	L5
  5823  002900                     l13684:
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;main.c: 623: else {
  5827                           ;main.c: 624: vscp_omsg.vscp_class = 30;
  5828  002900  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  5829                           
  5830                           ;main.c: 625: vscp_omsg.vscp_type = 5;
  5831  002902  D9A4               	call	PL86	;call to abstracted procedure
  5832  002904  D004               	goto	L5
  5833  002906                     l13686:
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;main.c: 628: else {
  5837                           ;main.c: 630: vscp_omsg.vscp_class = 1;
  5838  002906  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  5839  002908  0E01               	movlw	1
  5840  00290A  6FCF               	movwf	(_vscp_omsg+2)& (0+255),b
  5841                           
  5842                           ;main.c: 631: vscp_omsg.vscp_type = 2;
  5843  00290C  0E02               	movlw	2
  5844  00290E                     L5:
  5845  00290E  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;main.c: 632: }
  5849                           ;main.c: 634: vscp_omsg.data[ 0 ] = i;
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;main.c: 635: vscp_omsg.data[ 1 ] =
  5853                           ;main.c: 636: readEEPROM(0x73 + 2*i);
  5854  002910  D90D               	call	PL4	;call to abstracted procedure
  5855  002912  EC64  F029         	call	_readEEPROM	;wreg free
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;main.c: 637: vscp_omsg.data[ 2 ] =
  5859                           ;main.c: 638: readEEPROM(0x74 + 2*i);
  5860  002916  D91F               	call	PL8	;call to abstracted procedure
  5861  002918  EC64  F029         	call	_readEEPROM	;wreg free
  5862  00291C  0100               	movlb	0	; () banked
  5863  00291E  6FD4               	movwf	(_vscp_omsg+7)& (0+255),b
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;main.c: 643: vscp_sendEvent();
  5867  002920  EC40  F028         	call	_vscp_sendEvent	;wreg free
  5868  002924  D0F2               	goto	l13774
  5869  002926                     l13696:
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;main.c: 648: else {
  5873                           ;main.c: 652: if (low_alarm & (1 << i)) {
  5874  002926  D8F6               	call	PL2	;call to abstracted procedure
  5875  002928  15B9               	andwf	_low_alarm& (0+255),w,b
  5876  00292A  E026               	bz	l13704
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;main.c: 655: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B +2*i))<<8) + (uint16_t)
      +                          readEEPROM(0x5C + 2*i )) ) +
  5880                           ;main.c: 657: (int8_t)readEEPROM(0x97 + i);
  5881  00292C  D97A               	call	PL68	;call to abstracted procedure
  5882  00292E  EC64  F029         	call	_readEEPROM	;wreg free
  5883  002932  D96F               	call	PL60	;call to abstracted procedure
  5884  002934  0E5B               	movlw	91
  5885  002936  2587               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  5886  002938  6E16               	movwf	?_readEEPROM,c
  5887  00293A  0E00               	movlw	0
  5888  00293C  2188               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  5889  00293E  6E17               	movwf	?_readEEPROM+1,c
  5890  002940  EC64  F029         	call	_readEEPROM	;wreg free
  5891  002944  D954               	call	PL48	;call to abstracted procedure
  5892  002946  0E5C               	movlw	92
  5893  002948  258B               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  5894  00294A  6E16               	movwf	?_readEEPROM,c
  5895  00294C  0E00               	movlw	0
  5896  00294E  218C               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  5897  002950  6E17               	movwf	?_readEEPROM+1,c
  5898  002952  EC64  F029         	call	_readEEPROM	;wreg free
  5899  002956  D914               	call	PL12	;call to abstracted procedure
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;main.c: 662: if (current_temp[ i ] > setpoint) {
  5903  002958  D8F7               	call	PL6	;call to abstracted procedure
  5904  00295A  D925               	call	PL20	;call to abstracted procedure
  5905  00295C  E25D               	bc	l227
  5906  00295E                     l13702:
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;main.c: 665: low_alarm &= ~(1 << i);
  5910  00295E  C090  F086         	movff	doOneSecondWork@i,??_doOneSecondWork
  5911  002962  0E01               	movlw	1
  5912  002964  6F87               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5913  002966  2B86               	incf	??_doOneSecondWork& (0+255),f,b
  5914  002968  D002               	goto	u12904
  5915  00296A                     u12905:
  5916  00296A  90D8               	bcf	status,0,c
  5917  00296C  3787               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5918  00296E                     u12904:
  5919  00296E  2F86               	decfsz	??_doOneSecondWork& (0+255),f,b
  5920  002970  D7FC               	goto	u12905
  5921  002972  1D87               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  5922  002974  17B9               	andwf	_low_alarm& (0+255),f,b
  5923  002976  D050               	goto	l227
  5924  002978                     l13704:
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;main.c: 670: else {
  5928                           ;main.c: 674: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2*i ))<<8) + (uint16_
      +                          t)readEEPROM(0x5C + 2*i )) );
  5929  002978  5190               	movf	doOneSecondWork@i& (0+255),w,b
  5930  00297A  0D02               	mullw	2
  5931  00297C  0E5C               	movlw	92
  5932  00297E  24F3               	addwf	prodl,w,c
  5933  002980  6E16               	movwf	?_readEEPROM,c
  5934  002982  0E00               	movlw	0
  5935  002984  20F4               	addwfc	prodh,w,c
  5936  002986  6E17               	movwf	?_readEEPROM+1,c
  5937  002988  EC64  F029         	call	_readEEPROM	;wreg free
  5938  00298C  0100               	movlb	0	; () banked
  5939  00298E  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5940  002990  5190               	movf	doOneSecondWork@i& (0+255),w,b
  5941  002992  0D02               	mullw	2
  5942  002994  0E5B               	movlw	91
  5943  002996  24F3               	addwf	prodl,w,c
  5944  002998  6E16               	movwf	?_readEEPROM,c
  5945  00299A  0E00               	movlw	0
  5946  00299C  20F4               	addwfc	prodh,w,c
  5947  00299E  6E17               	movwf	?_readEEPROM+1,c
  5948  0029A0  EC64  F029         	call	_readEEPROM	;wreg free
  5949  0029A4  0100               	movlb	0	; () banked
  5950  0029A6  6F8F               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5951  0029A8  5186               	movf	??_doOneSecondWork& (0+255),w,b
  5952  0029AA  6F8E               	movwf	doOneSecondWork@setpoint& (0+255),b
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;main.c: 677: if (current_temp[ i ] < setpoint) {
  5956  0029AC  D8CD               	call	PL6	;call to abstracted procedure
  5957  0029AE  CFDE F086          	movff	postinc2,??_doOneSecondWork
  5958  0029B2  D912               	call	PL30	;call to abstracted procedure
  5959  0029B4  E231               	bc	l227
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;main.c: 680: low_alarm |= (1 << i);
  5963  0029B6  D8AE               	call	PL2	;call to abstracted procedure
  5964  0029B8  13B9               	iorwf	_low_alarm& (0+255),f,b
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;main.c: 685: vscp_alarmstatus |= 1;
  5968  0029BA  804A               	bsf	_vscp_alarmstatus,0,c
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;main.c: 688: if (readEEPROM(i + 0x43) & (1<<3)) {
  5972  0029BC  D8DA               	call	PL10	;call to abstracted procedure
  5973  0029BE  EC64  F029         	call	_readEEPROM	;wreg free
  5974  0029C2  0100               	movlb	0	; () banked
  5975  0029C4  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5976  0029C6  A786               	btfss	??_doOneSecondWork& (0+255),3,b
  5977  0029C8  D027               	goto	l227
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;main.c: 690: vscp_omsg.vscp_class = 1;
  5981  0029CA  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  5982                           
  5983                           ;main.c: 691: vscp_omsg.vscp_type = 2;
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;main.c: 692: vscp_omsg.priority = 0x00;
  5987                           
  5988                           ;main.c: 693: vscp_omsg.flags = 0x80 + 3;
  5989  0029CC  D8E4               	call	PL16	;call to abstracted procedure
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;main.c: 696: if (readEEPROM(0x43 + i) & (1<<5)) {
  5993  0029CE  D8D1               	call	PL10	;call to abstracted procedure
  5994  0029D0  EC64  F029         	call	_readEEPROM	;wreg free
  5995  0029D4  0100               	movlb	0	; () banked
  5996  0029D6  6F86               	movwf	??_doOneSecondWork& (0+255),b
  5997  0029D8  AB86               	btfss	??_doOneSecondWork& (0+255),5,b
  5998  0029DA  D012               	goto	l13726
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;main.c: 698: if (readEEPROM(0x43 + i) & (1<<6)) {
  6002  0029DC  0E43               	movlw	67
  6003  0029DE  2590               	addwf	doOneSecondWork@i& (0+255),w,b
  6004  0029E0  6E16               	movwf	?_readEEPROM,c
  6005  0029E2  6A17               	clrf	?_readEEPROM+1,c
  6006  0029E4  0E00               	movlw	0
  6007  0029E6  2217               	addwfc	?_readEEPROM+1,f,c
  6008  0029E8  EC64  F029         	call	_readEEPROM	;wreg free
  6009  0029EC  0100               	movlb	0	; () banked
  6010  0029EE  6F86               	movwf	??_doOneSecondWork& (0+255),b
  6011  0029F0  AD86               	btfss	??_doOneSecondWork& (0+255),6,b
  6012  0029F2  D003               	goto	l13724
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;main.c: 699: vscp_omsg.vscp_class = 30;
  6016  0029F4  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  6017                           
  6018                           ;main.c: 700: vscp_omsg.vscp_type = 5;
  6019  0029F6  D92A               	call	PL86	;call to abstracted procedure
  6020  0029F8  D002               	goto	L6
  6021  0029FA                     l13724:
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;main.c: 702: else {
  6025                           ;main.c: 703: vscp_omsg.vscp_class = 30;
  6026  0029FA  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  6027                           
  6028                           ;main.c: 704: vscp_omsg.vscp_type = 6;
  6029  0029FC  D92A               	call	PL88	;call to abstracted procedure
  6030  0029FE                     L6:
  6031  0029FE  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  6032  002A00                     l13726:
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;main.c: 705: }
  6036                           ;main.c: 707: }
  6037                           ;main.c: 709: vscp_omsg.data[ 0 ] = i;
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;main.c: 710: vscp_omsg.data[ 1 ] =
  6041                           ;main.c: 711: readEEPROM(0x73 + 2*i);
  6042  002A00  D895               	call	PL4	;call to abstracted procedure
  6043  002A02  EC64  F029         	call	_readEEPROM	;wreg free
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;main.c: 712: vscp_omsg.data[ 2 ] =
  6047                           ;main.c: 713: readEEPROM(0x74 + 2*i);
  6048  002A06  D8A7               	call	PL8	;call to abstracted procedure
  6049  002A08  EC64  F029         	call	_readEEPROM	;wreg free
  6050  002A0C  0100               	movlb	0	; () banked
  6051  002A0E  6FD4               	movwf	(_vscp_omsg+7)& (0+255),b
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;main.c: 716: if ( !vscp_sendEvent()) {
  6055  002A10  EC40  F028         	call	_vscp_sendEvent	;wreg free
  6056  002A14  0900               	iorlw	0
  6057  002A16  E0A3               	bz	l13702
  6058  002A18                     l227:
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;main.c: 720: }
  6062                           ;main.c: 722: }
  6063                           ;main.c: 723: }
  6064                           ;main.c: 724: }
  6065                           ;main.c: 727: if (high_alarm & (1 << i)) {
  6066  002A18  D87D               	call	PL2	;call to abstracted procedure
  6067  002A1A  15B8               	andwf	_high_alarm& (0+255),w,b
  6068  002A1C  E028               	bz	l13742
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;main.c: 731: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2*i ))<<8) + (uint16_
      +                          t)readEEPROM(0x68 + 2*i )) ) +
  6072                           ;main.c: 733: (int8_t)readEEPROM( 0x97 + i );
  6073  002A1E  D901               	call	PL68	;call to abstracted procedure
  6074  002A20  EC64  F029         	call	_readEEPROM	;wreg free
  6075  002A24  D8F6               	call	PL60	;call to abstracted procedure
  6076  002A26  0E67               	movlw	103
  6077  002A28  2587               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  6078  002A2A  6E16               	movwf	?_readEEPROM,c
  6079  002A2C  0E00               	movlw	0
  6080  002A2E  2188               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  6081  002A30  6E17               	movwf	?_readEEPROM+1,c
  6082  002A32  EC64  F029         	call	_readEEPROM	;wreg free
  6083  002A36  D8DB               	call	PL48	;call to abstracted procedure
  6084  002A38  0E68               	movlw	104
  6085  002A3A  258B               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  6086  002A3C  6E16               	movwf	?_readEEPROM,c
  6087  002A3E  0E00               	movlw	0
  6088  002A40  218C               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  6089  002A42  6E17               	movwf	?_readEEPROM+1,c
  6090  002A44  EC64  F029         	call	_readEEPROM	;wreg free
  6091  002A48  D89B               	call	PL12	;call to abstracted procedure
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;main.c: 736: if (current_temp[ i ] < setpoint) {
  6095  002A4A  D87E               	call	PL6	;call to abstracted procedure
  6096  002A4C  CFDE F086          	movff	postinc2,??_doOneSecondWork
  6097  002A50  D8C3               	call	PL30	;call to abstracted procedure
  6098  002A52  E25B               	bc	l13774
  6099  002A54                     l13740:
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;main.c: 739: high_alarm &= ~(1 << i);
  6103  002A54  C090  F086         	movff	doOneSecondWork@i,??_doOneSecondWork
  6104  002A58  0E01               	movlw	1
  6105  002A5A  6F87               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6106  002A5C  2B86               	incf	??_doOneSecondWork& (0+255),f,b
  6107  002A5E  D002               	goto	u13004
  6108  002A60                     u13005:
  6109  002A60  90D8               	bcf	status,0,c
  6110  002A62  3787               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6111  002A64                     u13004:
  6112  002A64  2F86               	decfsz	??_doOneSecondWork& (0+255),f,b
  6113  002A66  D7FC               	goto	u13005
  6114  002A68  1D87               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  6115  002A6A  17B8               	andwf	_high_alarm& (0+255),f,b
  6116  002A6C  D04E               	goto	l13774
  6117  002A6E                     l13742:
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;main.c: 744: else {
  6121                           ;main.c: 749: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2*i ))<<8) + (uint16_
      +                          t)readEEPROM(0x68 + 2*i )) );
  6122  002A6E  5190               	movf	doOneSecondWork@i& (0+255),w,b
  6123  002A70  0D02               	mullw	2
  6124  002A72  0E68               	movlw	104
  6125  002A74  24F3               	addwf	prodl,w,c
  6126  002A76  6E16               	movwf	?_readEEPROM,c
  6127  002A78  0E00               	movlw	0
  6128  002A7A  20F4               	addwfc	prodh,w,c
  6129  002A7C  6E17               	movwf	?_readEEPROM+1,c
  6130  002A7E  EC64  F029         	call	_readEEPROM	;wreg free
  6131  002A82  0100               	movlb	0	; () banked
  6132  002A84  6F86               	movwf	??_doOneSecondWork& (0+255),b
  6133  002A86  5190               	movf	doOneSecondWork@i& (0+255),w,b
  6134  002A88  0D02               	mullw	2
  6135  002A8A  0E67               	movlw	103
  6136  002A8C  24F3               	addwf	prodl,w,c
  6137  002A8E  6E16               	movwf	?_readEEPROM,c
  6138  002A90  0E00               	movlw	0
  6139  002A92  20F4               	addwfc	prodh,w,c
  6140  002A94  6E17               	movwf	?_readEEPROM+1,c
  6141  002A96  EC64  F029         	call	_readEEPROM	;wreg free
  6142  002A9A  0100               	movlb	0	; () banked
  6143  002A9C  6F8F               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6144  002A9E  5186               	movf	??_doOneSecondWork& (0+255),w,b
  6145  002AA0  6F8E               	movwf	doOneSecondWork@setpoint& (0+255),b
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;main.c: 752: if (current_temp[ i ] > setpoint) {
  6149  002AA2  D852               	call	PL6	;call to abstracted procedure
  6150  002AA4  D880               	call	PL20	;call to abstracted procedure
  6151  002AA6  E231               	bc	l13774
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;main.c: 755: high_alarm |= (1 << i);
  6155  002AA8  D835               	call	PL2	;call to abstracted procedure
  6156  002AAA  13B8               	iorwf	_high_alarm& (0+255),f,b
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;main.c: 761: vscp_alarmstatus |= 2;
  6160  002AAC  824A               	bsf	_vscp_alarmstatus,1,c
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;main.c: 764: if ( readEEPROM(0x43 + i) & (1<<4) ) {
  6164  002AAE  D861               	call	PL10	;call to abstracted procedure
  6165  002AB0  EC64  F029         	call	_readEEPROM	;wreg free
  6166  002AB4  0100               	movlb	0	; () banked
  6167  002AB6  6F86               	movwf	??_doOneSecondWork& (0+255),b
  6168  002AB8  A986               	btfss	??_doOneSecondWork& (0+255),4,b
  6169  002ABA  D027               	goto	l13774
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;main.c: 766: vscp_omsg.vscp_class = 1;
  6173  002ABC  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  6174                           
  6175                           ;main.c: 767: vscp_omsg.vscp_type = 2;
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;main.c: 768: vscp_omsg.priority = 0x00;
  6179                           
  6180                           ;main.c: 769: vscp_omsg.flags = 0x80 + 3;
  6181  002ABE  D86B               	call	PL16	;call to abstracted procedure
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;main.c: 771: if (readEEPROM(0x43 + i) & (1<<5)) {
  6185  002AC0  D858               	call	PL10	;call to abstracted procedure
  6186  002AC2  EC64  F029         	call	_readEEPROM	;wreg free
  6187  002AC6  0100               	movlb	0	; () banked
  6188  002AC8  6F86               	movwf	??_doOneSecondWork& (0+255),b
  6189  002ACA  AB86               	btfss	??_doOneSecondWork& (0+255),5,b
  6190  002ACC  D012               	goto	l13764
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;main.c: 773: if (readEEPROM(0x43 + i) & (1<<6)) {
  6194  002ACE  0E43               	movlw	67
  6195  002AD0  2590               	addwf	doOneSecondWork@i& (0+255),w,b
  6196  002AD2  6E16               	movwf	?_readEEPROM,c
  6197  002AD4  6A17               	clrf	?_readEEPROM+1,c
  6198  002AD6  0E00               	movlw	0
  6199  002AD8  2217               	addwfc	?_readEEPROM+1,f,c
  6200  002ADA  EC64  F029         	call	_readEEPROM	;wreg free
  6201  002ADE  0100               	movlb	0	; () banked
  6202  002AE0  6F86               	movwf	??_doOneSecondWork& (0+255),b
  6203  002AE2  AD86               	btfss	??_doOneSecondWork& (0+255),6,b
  6204  002AE4  D003               	goto	l13762
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;main.c: 774: vscp_omsg.vscp_class = 30;
  6208  002AE6  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  6209                           
  6210                           ;main.c: 775: vscp_omsg.vscp_type = 6;
  6211  002AE8  D8B4               	call	PL88	;call to abstracted procedure
  6212  002AEA  D002               	goto	L7
  6213  002AEC                     l13762:
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;main.c: 777: else {
  6217                           ;main.c: 778: vscp_omsg.vscp_class = 30;
  6218  002AEC  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  6219                           
  6220                           ;main.c: 779: vscp_omsg.vscp_type = 5;
  6221  002AEE  D8AE               	call	PL86	;call to abstracted procedure
  6222  002AF0                     L7:
  6223  002AF0  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  6224  002AF2                     l13764:
  6225                           
  6226                           ; BSR set to: 0
  6227                           ;main.c: 780: }
  6228                           ;main.c: 781: }
  6229                           ;main.c: 783: vscp_omsg.data[ 0 ] = i;
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;main.c: 784: vscp_omsg.data[ 1 ] =
  6233                           ;main.c: 785: readEEPROM(0x73 + 2*i);
  6234  002AF2  D81C               	call	PL4	;call to abstracted procedure
  6235  002AF4  EC64  F029         	call	_readEEPROM	;wreg free
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;main.c: 786: vscp_omsg.data[ 2 ] =
  6239                           ;main.c: 787: readEEPROM(0x74 + 2*i);
  6240  002AF8  D82E               	call	PL8	;call to abstracted procedure
  6241  002AFA  EC64  F029         	call	_readEEPROM	;wreg free
  6242  002AFE  0100               	movlb	0	; () banked
  6243  002B00  6FD4               	movwf	(_vscp_omsg+7)& (0+255),b
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;main.c: 790: if (!vscp_sendEvent()) {
  6247  002B02  EC40  F028         	call	_vscp_sendEvent	;wreg free
  6248  002B06  0900               	iorlw	0
  6249  002B08  E0A5               	bz	l13740
  6250  002B0A                     l13774:
  6251                           
  6252                           ; BSR set to: 0
  6253  002B0A  2B90               	incf	doOneSecondWork@i& (0+255),f,b
  6254  002B0C  0E05               	movlw	5
  6255  002B0E  6590               	cpfsgt	doOneSecondWork@i& (0+255),b
  6256  002B10  D5F3               	goto	l13626
  6257                           
  6258                           ; BSR set to: 0
  6259  002B12  0C05               	retlw	5
  6260  002B14                     __end_of_doOneSecondWork:
  6261                           	opt stack 0
  6262  002B14                     PL2:
  6263                           	opt stack 21
  6264  002B14  C090  F086         	movff	doOneSecondWork@i,??_doOneSecondWork
  6265  002B18  0E01               	movlw	1
  6266  002B1A  6F87               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6267  002B1C  2B86               	incf	??_doOneSecondWork& (0+255),f,b
  6268  002B1E  D002               	goto	u12824
  6269  002B20                     u12825:
  6270  002B20  90D8               	bcf	status,0,c
  6271  002B22  3787               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6272  002B24                     u12824:
  6273  002B24  2F86               	decfsz	??_doOneSecondWork& (0+255),f,b
  6274  002B26  D7FC               	goto	u12825
  6275  002B28  5187               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6276  002B2A  0012               	return	
  6277  002B2C                     __end_ofPL2:
  6278                           	opt stack 0
  6279  002B2C                     PL4:
  6280                           	opt stack 21
  6281  002B2C  C090  F0D2         	movff	doOneSecondWork@i,_vscp_omsg+5
  6282  002B30  90D8               	bcf	status,0,c
  6283  002B32  3590               	rlcf	doOneSecondWork@i& (0+255),w,b
  6284  002B34  6F86               	movwf	??_doOneSecondWork& (0+255),b
  6285  002B36  6B87               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6286  002B38  3787               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6287  002B3A  0E73               	movlw	115
  6288  002B3C  2586               	addwf	??_doOneSecondWork& (0+255),w,b
  6289  002B3E  6E16               	movwf	?_readEEPROM,c
  6290  002B40  0E00               	movlw	0
  6291  002B42  2187               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6292  002B44  6E17               	movwf	?_readEEPROM+1,c
  6293  002B46  0012               	return	
  6294  002B48                     __end_ofPL4:
  6295                           	opt stack 0
  6296  002B48                     PL6:
  6297                           	opt stack 21
  6298  002B48  5190               	movf	doOneSecondWork@i& (0+255),w,b
  6299  002B4A  0D02               	mullw	2
  6300  002B4C  50F3               	movf	prodl,w,c
  6301  002B4E  0FA9               	addlw	low _current_temp
  6302  002B50  6ED9               	movwf	fsr2l,c
  6303  002B52  6ADA               	clrf	fsr2h,c
  6304  002B54  0012               	return	
  6305  002B56                     __end_ofPL6:
  6306                           	opt stack 0
  6307  002B56                     PL8:
  6308                           	opt stack 21
  6309  002B56  0100               	movlb	0	; () banked
  6310  002B58  6FD3               	movwf	(_vscp_omsg+6)& (0+255),b
  6311  002B5A  90D8               	bcf	status,0,c
  6312  002B5C  3590               	rlcf	doOneSecondWork@i& (0+255),w,b
  6313  002B5E  6F86               	movwf	??_doOneSecondWork& (0+255),b
  6314  002B60  6B87               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6315  002B62  3787               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6316  002B64  0E74               	movlw	116
  6317  002B66  2586               	addwf	??_doOneSecondWork& (0+255),w,b
  6318  002B68  6E16               	movwf	?_readEEPROM,c
  6319  002B6A  0E00               	movlw	0
  6320  002B6C  2187               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6321  002B6E  6E17               	movwf	?_readEEPROM+1,c
  6322  002B70  0012               	return	
  6323  002B72                     __end_ofPL8:
  6324                           	opt stack 0
  6325  002B72                     PL10:
  6326                           	opt stack 21
  6327  002B72  0E43               	movlw	67
  6328  002B74  2590               	addwf	doOneSecondWork@i& (0+255),w,b
  6329  002B76  6E16               	movwf	?_readEEPROM,c
  6330  002B78  6A17               	clrf	?_readEEPROM+1,c
  6331  002B7A  0E00               	movlw	0
  6332  002B7C  2217               	addwfc	?_readEEPROM+1,f,c
  6333  002B7E  0C00               	retlw	0
  6334  002B80                     __end_ofPL10:
  6335                           	opt stack 0
  6336  002B80                     PL12:
  6337                           	opt stack 21
  6338  002B80  0100               	movlb	0	; () banked
  6339  002B82  2789               	addwf	(??_doOneSecondWork+3)& (0+255),f,b
  6340  002B84  0E00               	movlw	0
  6341  002B86  238A               	addwfc	(??_doOneSecondWork+4)& (0+255),f,b
  6342  002B88  5186               	movf	??_doOneSecondWork& (0+255),w,b
  6343  002B8A  2589               	addwf	(??_doOneSecondWork+3)& (0+255),w,b
  6344  002B8C  6F8E               	movwf	doOneSecondWork@setpoint& (0+255),b
  6345  002B8E  0E00               	movlw	0
  6346  002B90  218A               	addwfc	(??_doOneSecondWork+4)& (0+255),w,b
  6347  002B92  6F8F               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6348  002B94  0012               	return	
  6349  002B96                     __end_ofPL12:
  6350                           	opt stack 0
  6351  002B96                     PL16:
  6352                           	opt stack 21
  6353  002B96  0E01               	movlw	1
  6354  002B98  6FCF               	movwf	(_vscp_omsg+2)& (0+255),b
  6355  002B9A  0E02               	movlw	2
  6356  002B9C  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  6357  002B9E  6BCE               	clrf	(_vscp_omsg+1)& (0+255),b
  6358  002BA0  0E83               	movlw	131
  6359  002BA2  6FCD               	movwf	_vscp_omsg& (0+255),b
  6360  002BA4  0C83               	retlw	131
  6361  002BA6                     __end_ofPL16:
  6362                           	opt stack 0
  6363  002BA6                     PL20:
  6364                           	opt stack 21
  6365  002BA6  CFDE F086          	movff	postinc2,??_doOneSecondWork
  6366  002BAA  CFDD F087          	movff	postdec2,??_doOneSecondWork+1
  6367  002BAE  518F               	movf	(doOneSecondWork@setpoint+1)& (0+255),w,b
  6368  002BB0  0A80               	xorlw	128
  6369  002BB2  6F88               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6370  002BB4  5186               	movf	??_doOneSecondWork& (0+255),w,b
  6371  002BB6  5D8E               	subwf	doOneSecondWork@setpoint& (0+255),w,b
  6372  002BB8  5187               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6373  002BBA  0A80               	xorlw	128
  6374  002BBC  5988               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6375  002BBE  0012               	return	
  6376  002BC0                     __end_ofPL20:
  6377                           	opt stack 0
  6378  002BC0                     PL28:
  6379                           	opt stack 21
  6380  002BC0  CFDE F088          	movff	postinc2,??_doOneSecondWork+2
  6381  002BC4  CFDD F089          	movff	postdec2,??_doOneSecondWork+3
  6382  002BC8  C089  F088         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  6383  002BCC  6B89               	clrf	(??_doOneSecondWork+3)& (0+255),b
  6384  002BCE  BF88               	btfsc	(??_doOneSecondWork+2)& (0+255),7,b
  6385  002BD0  6989               	setf	(??_doOneSecondWork+3)& (0+255),b
  6386  002BD2  5188               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  6387  002BD4  6E10               	movwf	?_writeEEPROM+2,c
  6388  002BD6  0012               	return	
  6389  002BD8                     __end_ofPL28:
  6390                           	opt stack 0
  6391  002BD8                     PL30:
  6392                           	opt stack 21
  6393  002BD8  CFDD F087          	movff	postdec2,??_doOneSecondWork+1
  6394  002BDC  5187               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6395  002BDE  0A80               	xorlw	128
  6396  002BE0  6F88               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6397  002BE2  518E               	movf	doOneSecondWork@setpoint& (0+255),w,b
  6398  002BE4  5D86               	subwf	??_doOneSecondWork& (0+255),w,b
  6399  002BE6  518F               	movf	(doOneSecondWork@setpoint+1)& (0+255),w,b
  6400  002BE8  0A80               	xorlw	128
  6401  002BEA  5988               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6402  002BEC  0012               	return	
  6403  002BEE                     __end_ofPL30:
  6404                           	opt stack 0
  6405  002BEE                     PL48:
  6406                           	opt stack 21
  6407  002BEE  0100               	movlb	0	; () banked
  6408  002BF0  6F8A               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6409  002BF2  6B89               	clrf	(??_doOneSecondWork+3)& (0+255),b
  6410  002BF4  90D8               	bcf	status,0,c
  6411  002BF6  3590               	rlcf	doOneSecondWork@i& (0+255),w,b
  6412  002BF8  6F8B               	movwf	(??_doOneSecondWork+5)& (0+255),b
  6413  002BFA  6B8C               	clrf	(??_doOneSecondWork+6)& (0+255),b
  6414  002BFC  378C               	rlcf	(??_doOneSecondWork+6)& (0+255),f,b
  6415  002BFE  0012               	return	
  6416  002C00                     __end_ofPL48:
  6417                           	opt stack 0
  6418  002C00                     PL52:
  6419                           	opt stack 21
  6420  002C00  5189               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6421  002C02  0A80               	xorlw	128
  6422  002C04  6F8A               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6423  002C06  5186               	movf	??_doOneSecondWork& (0+255),w,b
  6424  002C08  5D88               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6425  002C0A  5187               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6426  002C0C  0A80               	xorlw	128
  6427  002C0E  598A               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  6428  002C10  0012               	return	
  6429  002C12                     __end_ofPL52:
  6430                           	opt stack 0
  6431  002C12                     PL60:
  6432                           	opt stack 21
  6433  002C12  0100               	movlb	0	; () banked
  6434  002C14  6F86               	movwf	??_doOneSecondWork& (0+255),b
  6435  002C16  90D8               	bcf	status,0,c
  6436  002C18  3590               	rlcf	doOneSecondWork@i& (0+255),w,b
  6437  002C1A  6F87               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6438  002C1C  6B88               	clrf	(??_doOneSecondWork+2)& (0+255),b
  6439  002C1E  3788               	rlcf	(??_doOneSecondWork+2)& (0+255),f,b
  6440  002C20  0012               	return	
  6441  002C22                     __end_ofPL60:
  6442                           	opt stack 0
  6443  002C22                     PL68:
  6444                           	opt stack 21
  6445  002C22  0E97               	movlw	151
  6446  002C24  2590               	addwf	doOneSecondWork@i& (0+255),w,b
  6447  002C26  6E16               	movwf	?_readEEPROM,c
  6448  002C28  6A17               	clrf	?_readEEPROM+1,c
  6449  002C2A  0E00               	movlw	0
  6450  002C2C  2217               	addwfc	?_readEEPROM+1,f,c
  6451  002C2E  0C00               	retlw	0
  6452  002C30                     __end_ofPL68:
  6453                           	opt stack 0
  6454  002C30                     PL76:
  6455                           	opt stack 21
  6456  002C30  0100               	movlb	0	; () banked
  6457  002C32  2590               	addwf	doOneSecondWork@i& (0+255),w,b
  6458  002C34  6E16               	movwf	?_readEEPROM,c
  6459  002C36  6A17               	clrf	?_readEEPROM+1,c
  6460  002C38  0E00               	movlw	0
  6461  002C3A  2217               	addwfc	?_readEEPROM+1,f,c
  6462  002C3C  0C00               	retlw	0
  6463  002C3E                     __end_ofPL76:
  6464                           	opt stack 0
  6465  002C3E                     PL78:
  6466                           	opt stack 21
  6467  002C3E  90D8               	bcf	status,0,c
  6468  002C40  0100               	movlb	0	; () banked
  6469  002C42  3590               	rlcf	doOneSecondWork@i& (0+255),w,b
  6470  002C44  6F86               	movwf	??_doOneSecondWork& (0+255),b
  6471  002C46  6B87               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6472  002C48  3787               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6473  002C4A  0012               	return	
  6474  002C4C                     __end_ofPL78:
  6475                           	opt stack 0
  6476  002C4C                     PL86:
  6477                           	opt stack 21
  6478  002C4C  0E1E               	movlw	30
  6479  002C4E  6FCF               	movwf	(_vscp_omsg+2)& (0+255),b
  6480  002C50  0C05               	retlw	5
  6481  002C52                     __end_ofPL86:
  6482                           	opt stack 0
  6483  002C52                     PL88:
  6484                           	opt stack 21
  6485  002C52  0E1E               	movlw	30
  6486  002C54  6FCF               	movwf	(_vscp_omsg+2)& (0+255),b
  6487  002C56  0C06               	retlw	6
  6488  002C58                     __end_ofPL88:
  6489                           	opt stack 0
  6490                           tblptru	equ	0xFF8
  6491                           tblptrh	equ	0xFF7
  6492                           tblptrl	equ	0xFF6
  6493                           tablat	equ	0xFF5
  6494                           prodh	equ	0xFF4
  6495                           prodl	equ	0xFF3
  6496                           intcon	equ	0xFF2
  6497                           postinc0	equ	0xFEE
  6498                           wreg	equ	0xFE8
  6499                           indf1	equ	0xFE7
  6500                           postdec1	equ	0xFE5
  6501                           fsr1h	equ	0xFE2
  6502                           fsr1l	equ	0xFE1
  6503                           indf2	equ	0xFDF
  6504                           postinc2	equ	0xFDE
  6505                           postdec2	equ	0xFDD
  6506                           plusw2	equ	0xFDB
  6507                           fsr2h	equ	0xFDA
  6508                           fsr2l	equ	0xFD9
  6509                           status	equ	0xFD8
  6510                           
  6511 ;; *************** function _vscp_error *****************
  6512 ;; Defined at:
  6513 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;		None
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;		None
  6518 ;; Return value:  Size  Location     Type
  6519 ;;		None               void
  6520 ;; Registers used:
  6521 ;;		None
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6527 ;;      Params:         0       0       0       0       0       0       0
  6528 ;;      Locals:         0       0       0       0       0       0       0
  6529 ;;      Temps:          0       0       0       0       0       0       0
  6530 ;;      Totals:         0       0       0       0       0       0       0
  6531 ;;Total ram usage:        0 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    2
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_main
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           	psect	text26
  6542  00537A                     __ptext26:
  6543                           	opt stack 0
  6544  00537A                     _vscp_error:
  6545                           	opt stack 27
  6546                           
  6547                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;incstack = 0
  6551                           ;incstack = 0
  6552  00537A  6A4C               	clrf	_vscp_initledfunc,c
  6553  00537C  0012               	return	
  6554  00537E                     __end_of_vscp_error:
  6555                           	opt stack 0
  6556                           tblptru	equ	0xFF8
  6557                           tblptrh	equ	0xFF7
  6558                           tblptrl	equ	0xFF6
  6559                           tablat	equ	0xFF5
  6560                           prodh	equ	0xFF4
  6561                           prodl	equ	0xFF3
  6562                           intcon	equ	0xFF2
  6563                           postinc0	equ	0xFEE
  6564                           wreg	equ	0xFE8
  6565                           indf1	equ	0xFE7
  6566                           postdec1	equ	0xFE5
  6567                           fsr1h	equ	0xFE2
  6568                           fsr1l	equ	0xFE1
  6569                           indf2	equ	0xFDF
  6570                           postinc2	equ	0xFDE
  6571                           postdec2	equ	0xFDD
  6572                           plusw2	equ	0xFDB
  6573                           fsr2h	equ	0xFDA
  6574                           fsr2l	equ	0xFD9
  6575                           status	equ	0xFD8
  6576                           
  6577 ;; *************** function _handle_sync *****************
  6578 ;; Defined at:
  6579 ;;		line 1249 in file "../main.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;		None
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  i               1   40[BANK0 ] unsigned char 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;		None               void
  6586 ;; Registers used:
  6587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6588 ;; Tracked objects:
  6589 ;;		On entry : F/0
  6590 ;;		On exit  : F/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6593 ;;      Params:         0       0       0       0       0       0       0
  6594 ;;      Locals:         0       1       0       0       0       0       0
  6595 ;;      Temps:          0       2       0       0       0       0       0
  6596 ;;      Totals:         0       3       0       0       0       0       0
  6597 ;;Total ram usage:        3 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    8
  6600 ;; This function calls:
  6601 ;;		_readEEPROM
  6602 ;;		_sendTempEvent
  6603 ;; This function is called by:
  6604 ;;		_main
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text27
  6609  00477C                     __ptext27:
  6610                           	opt stack 0
  6611  00477C                     _handle_sync:
  6612                           	opt stack 21
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;main.c: 1250: uint8_t i;
  6616                           ;main.c: 1252: for (i = 0; i < 6; i++) {
  6617                           
  6618                           ;incstack = 0
  6619                           ;incstack = 0
  6620  00477C  6B88               	clrf	handle_sync@i& (0+255),b
  6621  00477E                     l13602:
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;main.c: 1254: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6625                           ;main.c: 1255: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6626                           ;main.c: 1256: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6627                           ;main.c: 1257: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6628  00477E  29C6               	incf	(_vscp_imsg+7)& (0+255),w,b
  6629  004780  E010               	bz	l13606
  6630                           
  6631                           ; BSR set to: 0
  6632  004782  90D8               	bcf	status,0,c
  6633  004784  3588               	rlcf	handle_sync@i& (0+255),w,b
  6634  004786  6F86               	movwf	??_handle_sync& (0+255),b
  6635  004788  6B87               	clrf	(??_handle_sync+1)& (0+255),b
  6636  00478A  3787               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6637  00478C  0E73               	movlw	115
  6638  00478E  2586               	addwf	??_handle_sync& (0+255),w,b
  6639  004790  6E16               	movwf	?_readEEPROM,c
  6640  004792  0E00               	movlw	0
  6641  004794  2187               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6642  004796  6E17               	movwf	?_readEEPROM+1,c
  6643  004798  EC64  F029         	call	_readEEPROM	;wreg free
  6644  00479C  0100               	movlb	0	; () banked
  6645  00479E  19C6               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6646  0047A0  E128               	bnz	l13616
  6647  0047A2                     l13606:
  6648                           
  6649                           ; BSR set to: 0
  6650  0047A2  29C7               	incf	(_vscp_imsg+8)& (0+255),w,b
  6651  0047A4  E010               	bz	l291
  6652                           
  6653                           ; BSR set to: 0
  6654  0047A6  90D8               	bcf	status,0,c
  6655  0047A8  3588               	rlcf	handle_sync@i& (0+255),w,b
  6656  0047AA  6F86               	movwf	??_handle_sync& (0+255),b
  6657  0047AC  6B87               	clrf	(??_handle_sync+1)& (0+255),b
  6658  0047AE  3787               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6659  0047B0  0E74               	movlw	116
  6660  0047B2  2586               	addwf	??_handle_sync& (0+255),w,b
  6661  0047B4  6E16               	movwf	?_readEEPROM,c
  6662  0047B6  0E00               	movlw	0
  6663  0047B8  2187               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6664  0047BA  6E17               	movwf	?_readEEPROM+1,c
  6665  0047BC  EC64  F029         	call	_readEEPROM	;wreg free
  6666  0047C0  0100               	movlb	0	; () banked
  6667  0047C2  19C7               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6668  0047C4  E116               	bnz	l13616
  6669  0047C6                     l291:
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;main.c: 1260: timeout_clock = 0;
  6673  0047C6  0101               	movlb	1	; () banked
  6674  0047C8  6B0A               	clrf	_timeout_clock& (0+255),b	;volatile
  6675  0047CA  6B0B               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6676  0047CC  6B0C               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6677  0047CE  6B0D               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6678                           
  6679                           ;main.c: 1261: while (!sendTempEvent(i)) {
  6680  0047D0  D00A               	goto	l13614
  6681  0047D2                     l13610:
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;main.c: 1262: if (timeout_clock > 1000) break;
  6685  0047D2  0EE9               	movlw	233
  6686  0047D4  0101               	movlb	1	; () banked
  6687  0047D6  5D0A               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6688  0047D8  0E03               	movlw	3
  6689  0047DA  590B               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6690  0047DC  0E00               	movlw	0
  6691  0047DE  590C               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6692  0047E0  0E00               	movlw	0
  6693  0047E2  590D               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6694  0047E4  E206               	bc	l13616
  6695  0047E6                     l13614:
  6696                           
  6697                           ; BSR set to: 1
  6698  0047E6  0100               	movlb	0	; () banked
  6699  0047E8  5188               	movf	handle_sync@i& (0+255),w,b
  6700  0047EA  EC3E  F024         	call	_sendTempEvent
  6701  0047EE  0900               	iorlw	0
  6702  0047F0  E0F0               	bz	l13610
  6703  0047F2                     l13616:
  6704  0047F2  0100               	movlb	0	; () banked
  6705  0047F4  2B88               	incf	handle_sync@i& (0+255),f,b
  6706                           
  6707                           ; BSR set to: 0
  6708  0047F6  0E05               	movlw	5
  6709  0047F8  6588               	cpfsgt	handle_sync@i& (0+255),b
  6710  0047FA  D7C1               	goto	l13602
  6711                           
  6712                           ; BSR set to: 0
  6713  0047FC  0C05               	retlw	5
  6714  0047FE                     __end_of_handle_sync:
  6715                           	opt stack 0
  6716                           tblptru	equ	0xFF8
  6717                           tblptrh	equ	0xFF7
  6718                           tblptrl	equ	0xFF6
  6719                           tablat	equ	0xFF5
  6720                           prodh	equ	0xFF4
  6721                           prodl	equ	0xFF3
  6722                           intcon	equ	0xFF2
  6723                           postinc0	equ	0xFEE
  6724                           wreg	equ	0xFE8
  6725                           indf1	equ	0xFE7
  6726                           postdec1	equ	0xFE5
  6727                           fsr1h	equ	0xFE2
  6728                           fsr1l	equ	0xFE1
  6729                           indf2	equ	0xFDF
  6730                           postinc2	equ	0xFDE
  6731                           postdec2	equ	0xFDD
  6732                           plusw2	equ	0xFDB
  6733                           fsr2h	equ	0xFDA
  6734                           fsr2l	equ	0xFD9
  6735                           status	equ	0xFD8
  6736                           
  6737 ;; *************** function _sendTempEvent *****************
  6738 ;; Defined at:
  6739 ;;		line 808 in file "../main.c"
  6740 ;; Parameters:    Size  Location     Type
  6741 ;;  i               1    wreg     unsigned char 
  6742 ;; Auto vars:     Size  Location     Type
  6743 ;;  i               1   37[BANK0 ] unsigned char 
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  1    wreg      unsigned char 
  6746 ;; Registers used:
  6747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : F/0
  6750 ;;		On exit  : F/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6753 ;;      Params:         0       0       0       0       0       0       0
  6754 ;;      Locals:         0       1       0       0       0       0       0
  6755 ;;      Temps:          0       1       0       0       0       0       0
  6756 ;;      Totals:         0       2       0       0       0       0       0
  6757 ;;Total ram usage:        2 bytes
  6758 ;; Hardware stack levels used:    1
  6759 ;; Hardware stack levels required when called:    7
  6760 ;; This function calls:
  6761 ;;		_readEEPROM
  6762 ;;		_vscp_sendEvent
  6763 ;;		_setEventData
  6764 ;; This function is called by:
  6765 ;;		_doOneSecondWork
  6766 ;;		_handle_sync
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text28
  6771  00487C                     __ptext28:
  6772                           	opt stack 0
  6773  00487C                     _sendTempEvent:
  6774                           	opt stack 21
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;incstack = 0
  6778                           ;incstack = 0
  6779                           ;sendTempEvent@i stored from wreg
  6780  00487C  CFE8 F085          	movff	wreg,sendTempEvent@i
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;main.c: 809: vscp_omsg.priority = 0x03;
  6784  004880  0E03               	movlw	3
  6785  004882  6FCE               	movwf	(_vscp_omsg+1)& (0+255),b
  6786                           
  6787                           ;main.c: 810: vscp_omsg.flags = 0x80 + 4;
  6788  004884  0E84               	movlw	132
  6789  004886  6FCD               	movwf	_vscp_omsg& (0+255),b
  6790                           
  6791                           ;main.c: 811: vscp_omsg.vscp_class = 10;
  6792  004888  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  6793  00488A  0E0A               	movlw	10
  6794  00488C  6FCF               	movwf	(_vscp_omsg+2)& (0+255),b
  6795                           
  6796                           ;main.c: 812: vscp_omsg.vscp_type = 6;
  6797  00488E  0E06               	movlw	6
  6798  004890  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;main.c: 815: vscp_omsg.data[ 0 ] = 0x80 |
  6802                           ;main.c: 816: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6803                           ;main.c: 817: i;
  6804  004892  D82A               	call	PL70	;call to abstracted procedure
  6805  004894  EC64  F029         	call	_readEEPROM	;wreg free
  6806  004898  0100               	movlb	0	; () banked
  6807  00489A  6F84               	movwf	??_sendTempEvent& (0+255),b
  6808  00489C  0E03               	movlw	3
  6809  00489E  1784               	andwf	??_sendTempEvent& (0+255),f,b
  6810  0048A0  90D8               	bcf	status,0,c
  6811  0048A2  3784               	rlcf	??_sendTempEvent& (0+255),f,b
  6812  0048A4  90D8               	bcf	status,0,c
  6813  0048A6  3784               	rlcf	??_sendTempEvent& (0+255),f,b
  6814  0048A8  90D8               	bcf	status,0,c
  6815  0048AA  3584               	rlcf	??_sendTempEvent& (0+255),w,b
  6816  0048AC  1185               	iorwf	sendTempEvent@i& (0+255),w,b
  6817  0048AE  0980               	iorlw	128
  6818  0048B0  6FD2               	movwf	(_vscp_omsg+5)& (0+255),b
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;main.c: 819: vscp_omsg.data[ 1 ] = 0x82;
  6822  0048B2  0E82               	movlw	130
  6823  0048B4  6FD3               	movwf	(_vscp_omsg+6)& (0+255),b
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;main.c: 821: setEventData( current_temp[i],
  6827                           ;main.c: 822: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6828  0048B6  5185               	movf	sendTempEvent@i& (0+255),w,b
  6829  0048B8  0D02               	mullw	2
  6830  0048BA  50F3               	movf	prodl,w,c
  6831  0048BC  0FA9               	addlw	low _current_temp
  6832  0048BE  6ED9               	movwf	fsr2l,c
  6833  0048C0  6ADA               	clrf	fsr2h,c
  6834  0048C2  CFDE F07B          	movff	postinc2,?_setEventData
  6835  0048C6  CFDD F07C          	movff	postdec2,?_setEventData+1
  6836  0048CA  D80E               	call	PL70	;call to abstracted procedure
  6837  0048CC  EC64  F029         	call	_readEEPROM	;wreg free
  6838  0048D0  0B03               	andlw	3
  6839  0048D2  0100               	movlb	0	; () banked
  6840  0048D4  6F7D               	movwf	(?_setEventData+2)& (0+255),b
  6841  0048D6  ECD6  F021         	call	_setEventData	;wreg free
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;main.c: 825: if (!vscp_sendEvent()) {
  6845  0048DA  EC40  F028         	call	_vscp_sendEvent	;wreg free
  6846  0048DE  0900               	iorlw	0
  6847                           
  6848                           ; BSR set to: 0
  6849                           ;main.c: 826: return 0;
  6850  0048E0  0E00               	movlw	0
  6851  0048E2  A4D8               	btfss	status,2,c
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;main.c: 827: }
  6855                           ;main.c: 829: return 1;
  6856  0048E4  0E01               	movlw	1
  6857                           
  6858                           ; BSR set to: 0
  6859  0048E6  0012               	return	
  6860  0048E8                     __end_of_sendTempEvent:
  6861                           	opt stack 0
  6862  0048E8                     PL70:
  6863                           	opt stack 21
  6864  0048E8  0E43               	movlw	67
  6865  0048EA  2585               	addwf	sendTempEvent@i& (0+255),w,b
  6866  0048EC  6E16               	movwf	?_readEEPROM,c
  6867  0048EE  6A17               	clrf	?_readEEPROM+1,c
  6868  0048F0  0E00               	movlw	0
  6869  0048F2  2217               	addwfc	?_readEEPROM+1,f,c
  6870  0048F4  0C00               	retlw	0
  6871  0048F6                     __end_ofPL70:
  6872                           	opt stack 0
  6873                           tblptru	equ	0xFF8
  6874                           tblptrh	equ	0xFF7
  6875                           tblptrl	equ	0xFF6
  6876                           tablat	equ	0xFF5
  6877                           prodh	equ	0xFF4
  6878                           prodl	equ	0xFF3
  6879                           intcon	equ	0xFF2
  6880                           postinc0	equ	0xFEE
  6881                           wreg	equ	0xFE8
  6882                           indf1	equ	0xFE7
  6883                           postdec1	equ	0xFE5
  6884                           fsr1h	equ	0xFE2
  6885                           fsr1l	equ	0xFE1
  6886                           indf2	equ	0xFDF
  6887                           postinc2	equ	0xFDE
  6888                           postdec2	equ	0xFDD
  6889                           plusw2	equ	0xFDB
  6890                           fsr2h	equ	0xFDA
  6891                           fsr2l	equ	0xFD9
  6892                           status	equ	0xFD8
  6893                           
  6894 ;; *************** function _setEventData *****************
  6895 ;; Defined at:
  6896 ;;		line 837 in file "../main.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  v               2   27[BANK0 ] int 
  6899 ;;  unit            1   29[BANK0 ] unsigned char 
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;  newval          4   30[BANK0 ] unsigned char 
  6902 ;;  ival            2   34[BANK0 ] int 
  6903 ;; Return value:  Size  Location     Type
  6904 ;;		None               void
  6905 ;; Registers used:
  6906 ;;		wreg, status,2, status,0, cstack
  6907 ;; Tracked objects:
  6908 ;;		On entry : F/0
  6909 ;;		On exit  : F/0
  6910 ;;		Unchanged: 0/0
  6911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6912 ;;      Params:         0       3       0       0       0       0       0
  6913 ;;      Locals:         0       6       0       0       0       0       0
  6914 ;;      Temps:          0       0       0       0       0       0       0
  6915 ;;      Totals:         0       9       0       0       0       0       0
  6916 ;;Total ram usage:        9 bytes
  6917 ;; Hardware stack levels used:    1
  6918 ;; Hardware stack levels required when called:    5
  6919 ;; This function calls:
  6920 ;;		_Celsius2Kelvin
  6921 ;;		_Celsius2Fahrenheit
  6922 ;;		___awtofl
  6923 ;;		___fltol
  6924 ;; This function is called by:
  6925 ;;		_sendTempEvent
  6926 ;; This function uses a non-reentrant model
  6927 ;;
  6928                           
  6929                           	psect	text29
  6930  0043AC                     __ptext29:
  6931                           	opt stack 0
  6932  0043AC                     _setEventData:
  6933                           	opt stack 22
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;main.c: 838: double newval;
  6937                           ;main.c: 839: int ival;
  6938                           ;main.c: 841: if (0 == unit) {
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;incstack = 0
  6942                           ;incstack = 0
  6943  0043AC  677D               	tstfsz	setEventData@unit& (0+255),b
  6944  0043AE  D019               	goto	l13918
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;main.c: 843: newval = Celsius2Kelvin(v);
  6948  0043B0  C07B  F018         	movff	setEventData@v,?___awtofl
  6949  0043B4  C07C  F019         	movff	setEventData@v+1,?___awtofl+1
  6950  0043B8  EC6E  F027         	call	___awtofl	;wreg free
  6951  0043BC  C01B  F07A         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6952  0043C0  C01A  F079         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6953  0043C4  C019  F078         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6954  0043C8  C018  F077         	movff	?___awtofl,?_Celsius2Kelvin
  6955  0043CC  EC8B  F027         	call	_Celsius2Kelvin	;wreg free
  6956  0043D0  C07A  F081         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6957  0043D4  C079  F080         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6958  0043D8  C078  F07F         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6959  0043DC  C077  F07E         	movff	?_Celsius2Kelvin,setEventData@newval
  6960                           
  6961                           ;main.c: 844: } else if (2 == unit) {
  6962  0043E0  D02A               	goto	l251
  6963  0043E2                     l13918:
  6964                           
  6965                           ; BSR set to: 0
  6966  0043E2  517D               	movf	setEventData@unit& (0+255),w,b
  6967  0043E4  0A02               	xorlw	2
  6968  0043E6  E119               	bnz	l13922
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;main.c: 846: newval = Celsius2Fahrenheit(v);
  6972  0043E8  C07B  F018         	movff	setEventData@v,?___awtofl
  6973  0043EC  C07C  F019         	movff	setEventData@v+1,?___awtofl+1
  6974  0043F0  EC6E  F027         	call	___awtofl	;wreg free
  6975  0043F4  C01B  F07A         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6976  0043F8  C01A  F079         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6977  0043FC  C019  F078         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6978  004400  C018  F077         	movff	?___awtofl,?_Celsius2Fahrenheit
  6979  004404  ECF2  F024         	call	_Celsius2Fahrenheit	;wreg free
  6980  004408  C07A  F081         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6981  00440C  C079  F080         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6982  004410  C078  F07F         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6983  004414  C077  F07E         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6984                           
  6985                           ;main.c: 847: } else {
  6986  004418  D00E               	goto	l251
  6987  00441A                     l13922:
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;main.c: 849: newval = v;
  6991  00441A  C07B  F018         	movff	setEventData@v,?___awtofl
  6992  00441E  C07C  F019         	movff	setEventData@v+1,?___awtofl+1
  6993  004422  EC6E  F027         	call	___awtofl	;wreg free
  6994  004426  C01B  F081         	movff	?___awtofl+3,setEventData@newval+3
  6995  00442A  C01A  F080         	movff	?___awtofl+2,setEventData@newval+2
  6996  00442E  C019  F07F         	movff	?___awtofl+1,setEventData@newval+1
  6997  004432  C018  F07E         	movff	?___awtofl,setEventData@newval
  6998  004436                     l251:
  6999                           
  7000                           ;main.c: 850: }
  7001                           ;main.c: 852: ival = (int) newval;
  7002  004436  C07E  F042         	movff	setEventData@newval,?___fltol
  7003  00443A  C07F  F043         	movff	setEventData@newval+1,?___fltol+1
  7004  00443E  C080  F044         	movff	setEventData@newval+2,?___fltol+2
  7005  004442  C081  F045         	movff	setEventData@newval+3,?___fltol+3
  7006  004446  EC24  F023         	call	___fltol	;wreg free
  7007  00444A  C042  F082         	movff	?___fltol,setEventData@ival
  7008  00444E  C043  F083         	movff	?___fltol+1,setEventData@ival+1
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;main.c: 854: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7012  004452  5183               	movf	(setEventData@ival+1)& (0+255),w,b
  7013  004454  6FD4               	movwf	(_vscp_omsg+7)& (0+255),b
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;main.c: 855: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7017  004456  C082  F0D5         	movff	setEventData@ival,_vscp_omsg+8
  7018                           
  7019                           ; BSR set to: 0
  7020  00445A  0012               	return	
  7021  00445C                     __end_of_setEventData:
  7022                           	opt stack 0
  7023                           tblptru	equ	0xFF8
  7024                           tblptrh	equ	0xFF7
  7025                           tblptrl	equ	0xFF6
  7026                           tablat	equ	0xFF5
  7027                           prodh	equ	0xFF4
  7028                           prodl	equ	0xFF3
  7029                           intcon	equ	0xFF2
  7030                           postinc0	equ	0xFEE
  7031                           wreg	equ	0xFE8
  7032                           indf1	equ	0xFE7
  7033                           postdec1	equ	0xFE5
  7034                           fsr1h	equ	0xFE2
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           plusw2	equ	0xFDB
  7040                           fsr2h	equ	0xFDA
  7041                           fsr2l	equ	0xFD9
  7042                           status	equ	0xFD8
  7043                           
  7044 ;; *************** function _Celsius2Fahrenheit *****************
  7045 ;; Defined at:
  7046 ;;		line 42 in file "../ntc.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;  tc              4   23[BANK0 ] int 
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;		None
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  4   23[BANK0 ] int 
  7053 ;; Registers used:
  7054 ;;		wreg, status,2, status,0, cstack
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7060 ;;      Params:         0       4       0       0       0       0       0
  7061 ;;      Locals:         0       0       0       0       0       0       0
  7062 ;;      Temps:          0       0       0       0       0       0       0
  7063 ;;      Totals:         0       4       0       0       0       0       0
  7064 ;;Total ram usage:        4 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    4
  7067 ;; This function calls:
  7068 ;;		___fladd
  7069 ;;		___fldiv
  7070 ;;		___flmul
  7071 ;; This function is called by:
  7072 ;;		_setEventData
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text30
  7077  0049E4                     __ptext30:
  7078                           	opt stack 0
  7079  0049E4                     _Celsius2Fahrenheit:
  7080                           	opt stack 22
  7081                           
  7082                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;incstack = 0
  7086                           ;incstack = 0
  7087  0049E4  0100               	movlb	0	; () banked
  7088  0049E6  6B6C               	clrf	(?___fladd+4)& (0+255),b
  7089  0049E8  6B6D               	clrf	(?___fladd+5)& (0+255),b
  7090  0049EA  0E7A               	movlw	122
  7091  0049EC  6F6E               	movwf	(?___fladd+6)& (0+255),b
  7092  0049EE  0E46               	movlw	70
  7093  0049F0  6F6F               	movwf	(?___fladd+7)& (0+255),b
  7094  0049F2  6B64               	clrf	(?___flmul+4)& (0+255),b
  7095  0049F4  6B65               	clrf	(?___flmul+5)& (0+255),b
  7096  0049F6  0E10               	movlw	16
  7097  0049F8  6F66               	movwf	(?___flmul+6)& (0+255),b
  7098  0049FA  0E41               	movlw	65
  7099  0049FC  6F67               	movwf	(?___flmul+7)& (0+255),b
  7100  0049FE  C077  F060         	movff	Celsius2Fahrenheit@tc,?___flmul
  7101  004A02  C078  F061         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7102  004A06  C079  F062         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7103  004A0A  C07A  F063         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7104  004A0E  ECA1  F01F         	call	___flmul	;wreg free
  7105  004A12  C063  F06B         	movff	?___flmul+3,?___fladd+3
  7106  004A16  C062  F06A         	movff	?___flmul+2,?___fladd+2
  7107  004A1A  C061  F069         	movff	?___flmul+1,?___fladd+1
  7108  004A1E  C060  F068         	movff	?___flmul,?___fladd
  7109  004A22  ECBE  F01B         	call	___fladd	;wreg free
  7110  004A26  C06B  F021         	movff	?___fladd+3,?___fldiv+3
  7111  004A2A  C06A  F020         	movff	?___fladd+2,?___fldiv+2
  7112  004A2E  C069  F01F         	movff	?___fladd+1,?___fldiv+1
  7113  004A32  C068  F01E         	movff	?___fladd,?___fldiv
  7114  004A36  6A22               	clrf	?___fldiv+4,c
  7115  004A38  6A23               	clrf	?___fldiv+5,c
  7116  004A3A  0EA0               	movlw	160
  7117  004A3C  6E24               	movwf	?___fldiv+6,c
  7118  004A3E  0E40               	movlw	64
  7119  004A40  6E25               	movwf	?___fldiv+7,c
  7120  004A42  EC2E  F022         	call	___fldiv	;wreg free
  7121  004A46  C021  F07A         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7122  004A4A  C020  F079         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7123  004A4E  C01F  F078         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7124  004A52  C01E  F077         	movff	?___fldiv,?_Celsius2Fahrenheit
  7125  004A56  0012               	return	
  7126  004A58                     __end_of_Celsius2Fahrenheit:
  7127                           	opt stack 0
  7128                           tblptru	equ	0xFF8
  7129                           tblptrh	equ	0xFF7
  7130                           tblptrl	equ	0xFF6
  7131                           tablat	equ	0xFF5
  7132                           prodh	equ	0xFF4
  7133                           prodl	equ	0xFF3
  7134                           intcon	equ	0xFF2
  7135                           postinc0	equ	0xFEE
  7136                           wreg	equ	0xFE8
  7137                           indf1	equ	0xFE7
  7138                           postdec1	equ	0xFE5
  7139                           fsr1h	equ	0xFE2
  7140                           fsr1l	equ	0xFE1
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           plusw2	equ	0xFDB
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function ___fladd *****************
  7150 ;; Defined at:
  7151 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  f1              4    8[BANK0 ] int 
  7154 ;;  f2              4   12[BANK0 ] int 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  exp1            1   22[BANK0 ] unsigned char 
  7157 ;;  exp2            1   21[BANK0 ] unsigned char 
  7158 ;;  sign            1   20[BANK0 ] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  4    8[BANK0 ] unsigned char 
  7161 ;; Registers used:
  7162 ;;		wreg, status,2, status,0, cstack
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7168 ;;      Params:         0       8       0       0       0       0       0
  7169 ;;      Locals:         0       6       0       0       0       0       0
  7170 ;;      Temps:          0       1       0       0       0       0       0
  7171 ;;      Totals:         0      15       0       0       0       0       0
  7172 ;;Total ram usage:       15 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    3
  7175 ;; This function calls:
  7176 ;;		___flpack
  7177 ;; This function is called by:
  7178 ;;		_doWork
  7179 ;;		_Celsius2Fahrenheit
  7180 ;;		_Celsius2Kelvin
  7181 ;;		___asfladd
  7182 ;;		_floor
  7183 ;;		___flsub
  7184 ;;		_log
  7185 ;;		_eval_poly
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	text31
  7190  00377C                     __ptext31:
  7191                           	opt stack 0
  7192  00377C                     ___fladd:
  7193                           	opt stack 24
  7194                           
  7195                           ;incstack = 0
  7196                           ;incstack = 0
  7197  00377C  0100               	movlb	0	; () banked
  7198  00377E  356A               	rlcf	(___fladd@f1+2)& (0+255),w,b
  7199  003780  356B               	rlcf	(___fladd@f1+3)& (0+255),w,b
  7200  003782  6F76               	movwf	___fladd@exp1& (0+255),b
  7201  003784  356E               	rlcf	(___fladd@f2+2)& (0+255),w,b
  7202  003786  356F               	rlcf	(___fladd@f2+3)& (0+255),w,b
  7203  003788  6F75               	movwf	___fladd@exp2& (0+255),b
  7204  00378A  5176               	movf	___fladd@exp1& (0+255),w,b
  7205  00378C  E009               	bz	l1587
  7206                           
  7207                           ; BSR set to: 0
  7208  00378E  5175               	movf	___fladd@exp2& (0+255),w,b
  7209  003790  6176               	cpfslt	___fladd@exp1& (0+255),b
  7210  003792  D00F               	goto	l13984
  7211                           
  7212                           ; BSR set to: 0
  7213  003794  5176               	movf	___fladd@exp1& (0+255),w,b
  7214  003796  5D75               	subwf	___fladd@exp2& (0+255),w,b
  7215  003798  6F70               	movwf	??___fladd& (0+255),b
  7216  00379A  0E21               	movlw	33
  7217  00379C  5D70               	subwf	??___fladd& (0+255),w,b
  7218  00379E  E309               	bnc	l13984
  7219  0037A0                     l1587:
  7220                           
  7221                           ; BSR set to: 0
  7222  0037A0  C06C  F068         	movff	___fladd@f2,?___fladd
  7223  0037A4  C06D  F069         	movff	___fladd@f2+1,?___fladd+1
  7224  0037A8  C06E  F06A         	movff	___fladd@f2+2,?___fladd+2
  7225  0037AC  C06F  F06B         	movff	___fladd@f2+3,?___fladd+3
  7226  0037B0  D089               	goto	l1588
  7227  0037B2                     l13984:
  7228                           
  7229                           ; BSR set to: 0
  7230  0037B2  5175               	movf	___fladd@exp2& (0+255),w,b
  7231  0037B4  E009               	bz	l1591
  7232                           
  7233                           ; BSR set to: 0
  7234  0037B6  5176               	movf	___fladd@exp1& (0+255),w,b
  7235  0037B8  6175               	cpfslt	___fladd@exp2& (0+255),b
  7236  0037BA  D00F               	goto	l13990
  7237                           
  7238                           ; BSR set to: 0
  7239  0037BC  5175               	movf	___fladd@exp2& (0+255),w,b
  7240  0037BE  5D76               	subwf	___fladd@exp1& (0+255),w,b
  7241  0037C0  6F70               	movwf	??___fladd& (0+255),b
  7242  0037C2  0E21               	movlw	33
  7243  0037C4  5D70               	subwf	??___fladd& (0+255),w,b
  7244  0037C6  E309               	bnc	l13990
  7245  0037C8                     l1591:
  7246                           
  7247                           ; BSR set to: 0
  7248  0037C8  C068  F068         	movff	___fladd@f1,?___fladd
  7249  0037CC  C069  F069         	movff	___fladd@f1+1,?___fladd+1
  7250  0037D0  C06A  F06A         	movff	___fladd@f1+2,?___fladd+2
  7251  0037D4  C06B  F06B         	movff	___fladd@f1+3,?___fladd+3
  7252  0037D8  D075               	goto	l1588
  7253  0037DA                     l13990:
  7254                           
  7255                           ; BSR set to: 0
  7256  0037DA  0E06               	movlw	6
  7257  0037DC  6F74               	movwf	___fladd@sign& (0+255),b
  7258                           
  7259                           ; BSR set to: 0
  7260  0037DE  BF6B               	btfsc	(___fladd@f1+3)& (0+255),7,b
  7261                           
  7262                           ; BSR set to: 0
  7263  0037E0  8F74               	bsf	___fladd@sign& (0+255),7,b
  7264                           
  7265                           ; BSR set to: 0
  7266  0037E2  BF6F               	btfsc	(___fladd@f2+3)& (0+255),7,b
  7267                           
  7268                           ; BSR set to: 0
  7269  0037E4  8D74               	bsf	___fladd@sign& (0+255),6,b
  7270                           
  7271                           ; BSR set to: 0
  7272  0037E6  8F6A               	bsf	(___fladd@f1+2)& (0+255),7,b
  7273                           
  7274                           ; BSR set to: 0
  7275  0037E8  6B6B               	clrf	(___fladd@f1+3)& (0+255),b
  7276                           
  7277                           ; BSR set to: 0
  7278  0037EA  8F6E               	bsf	(___fladd@f2+2)& (0+255),7,b
  7279  0037EC  6B6F               	clrf	(___fladd@f2+3)& (0+255),b
  7280                           
  7281                           ; BSR set to: 0
  7282  0037EE  5175               	movf	___fladd@exp2& (0+255),w,b
  7283  0037F0  6176               	cpfslt	___fladd@exp1& (0+255),b
  7284  0037F2  D019               	goto	l14016
  7285  0037F4                     l14006:
  7286                           
  7287                           ; BSR set to: 0
  7288  0037F4  90D8               	bcf	status,0,c
  7289  0037F6  376C               	rlcf	___fladd@f2& (0+255),f,b
  7290  0037F8  376D               	rlcf	(___fladd@f2+1)& (0+255),f,b
  7291  0037FA  376E               	rlcf	(___fladd@f2+2)& (0+255),f,b
  7292  0037FC  376F               	rlcf	(___fladd@f2+3)& (0+255),f,b
  7293  0037FE  0775               	decf	___fladd@exp2& (0+255),f,b
  7294                           
  7295                           ; BSR set to: 0
  7296  003800  5175               	movf	___fladd@exp2& (0+255),w,b
  7297  003802  1976               	xorwf	___fladd@exp1& (0+255),w,b
  7298  003804  E00C               	bz	l14014
  7299                           
  7300                           ; BSR set to: 0
  7301  003806  0774               	decf	___fladd@sign& (0+255),f,b
  7302  003808  0100               	movlb	0	; () banked
  7303  00380A  5174               	movf	___fladd@sign& (0+255),w,b
  7304  00380C  0B07               	andlw	7
  7305  00380E  E007               	bz	l14014
  7306  003810  D7F1               	goto	l14006
  7307  003812                     l14012:
  7308                           
  7309                           ; BSR set to: 0
  7310  003812  90D8               	bcf	status,0,c
  7311  003814  336B               	rrcf	(___fladd@f1+3)& (0+255),f,b
  7312  003816  336A               	rrcf	(___fladd@f1+2)& (0+255),f,b
  7313  003818  3369               	rrcf	(___fladd@f1+1)& (0+255),f,b
  7314  00381A  3368               	rrcf	___fladd@f1& (0+255),f,b
  7315  00381C  2B76               	incf	___fladd@exp1& (0+255),f,b
  7316  00381E                     l14014:
  7317                           
  7318                           ; BSR set to: 0
  7319  00381E  5175               	movf	___fladd@exp2& (0+255),w,b
  7320  003820  6376               	cpfseq	___fladd@exp1& (0+255),b
  7321  003822  D7F7               	goto	l14012
  7322  003824  D01B               	goto	l1602
  7323  003826                     l14016:
  7324                           
  7325                           ; BSR set to: 0
  7326  003826  5176               	movf	___fladd@exp1& (0+255),w,b
  7327  003828  6175               	cpfslt	___fladd@exp2& (0+255),b
  7328  00382A  D018               	goto	l1602
  7329  00382C                     l14018:
  7330                           
  7331                           ; BSR set to: 0
  7332  00382C  90D8               	bcf	status,0,c
  7333  00382E  3768               	rlcf	___fladd@f1& (0+255),f,b
  7334  003830  3769               	rlcf	(___fladd@f1+1)& (0+255),f,b
  7335  003832  376A               	rlcf	(___fladd@f1+2)& (0+255),f,b
  7336  003834  376B               	rlcf	(___fladd@f1+3)& (0+255),f,b
  7337  003836  0776               	decf	___fladd@exp1& (0+255),f,b
  7338                           
  7339                           ; BSR set to: 0
  7340  003838  5175               	movf	___fladd@exp2& (0+255),w,b
  7341  00383A  1976               	xorwf	___fladd@exp1& (0+255),w,b
  7342  00383C  E00C               	bz	l14026
  7343                           
  7344                           ; BSR set to: 0
  7345  00383E  0774               	decf	___fladd@sign& (0+255),f,b
  7346  003840  0100               	movlb	0	; () banked
  7347  003842  5174               	movf	___fladd@sign& (0+255),w,b
  7348  003844  0B07               	andlw	7
  7349  003846  E007               	bz	l14026
  7350  003848  D7F1               	goto	l14018
  7351  00384A                     l14024:
  7352                           
  7353                           ; BSR set to: 0
  7354  00384A  90D8               	bcf	status,0,c
  7355  00384C  336F               	rrcf	(___fladd@f2+3)& (0+255),f,b
  7356  00384E  336E               	rrcf	(___fladd@f2+2)& (0+255),f,b
  7357  003850  336D               	rrcf	(___fladd@f2+1)& (0+255),f,b
  7358  003852  336C               	rrcf	___fladd@f2& (0+255),f,b
  7359  003854  2B75               	incf	___fladd@exp2& (0+255),f,b
  7360  003856                     l14026:
  7361                           
  7362                           ; BSR set to: 0
  7363  003856  5175               	movf	___fladd@exp2& (0+255),w,b
  7364  003858  6376               	cpfseq	___fladd@exp1& (0+255),b
  7365  00385A  D7F7               	goto	l14024
  7366  00385C                     l1602:
  7367                           
  7368                           ; BSR set to: 0
  7369  00385C  AF74               	btfss	___fladd@sign& (0+255),7,b
  7370  00385E  D009               	goto	l14030
  7371                           
  7372                           ; BSR set to: 0
  7373  003860  1F68               	comf	___fladd@f1& (0+255),f,b
  7374  003862  1F69               	comf	(___fladd@f1+1)& (0+255),f,b
  7375  003864  1F6A               	comf	(___fladd@f1+2)& (0+255),f,b
  7376  003866  1F6B               	comf	(___fladd@f1+3)& (0+255),f,b
  7377  003868  2B68               	incf	___fladd@f1& (0+255),f,b
  7378  00386A  0E00               	movlw	0
  7379  00386C  2369               	addwfc	(___fladd@f1+1)& (0+255),f,b
  7380  00386E  236A               	addwfc	(___fladd@f1+2)& (0+255),f,b
  7381  003870  236B               	addwfc	(___fladd@f1+3)& (0+255),f,b
  7382  003872                     l14030:
  7383                           
  7384                           ; BSR set to: 0
  7385  003872  AD74               	btfss	___fladd@sign& (0+255),6,b
  7386  003874  D002               	goto	l14034
  7387                           
  7388                           ; BSR set to: 0
  7389  003876  1F6C               	comf	___fladd@f2& (0+255),f,b
  7390  003878  D826               	call	PL54	;call to abstracted procedure
  7391  00387A                     l14034:
  7392                           
  7393                           ; BSR set to: 0
  7394  00387A  6B74               	clrf	___fladd@sign& (0+255),b
  7395  00387C  5168               	movf	___fladd@f1& (0+255),w,b
  7396  00387E  276C               	addwf	___fladd@f2& (0+255),f,b
  7397  003880  5169               	movf	(___fladd@f1+1)& (0+255),w,b
  7398  003882  236D               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7399  003884  516A               	movf	(___fladd@f1+2)& (0+255),w,b
  7400  003886  236E               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7401  003888  516B               	movf	(___fladd@f1+3)& (0+255),w,b
  7402  00388A  236F               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7403                           
  7404                           ; BSR set to: 0
  7405  00388C  AF6F               	btfss	(___fladd@f2+3)& (0+255),7,b
  7406  00388E  D004               	goto	l14042
  7407                           
  7408                           ; BSR set to: 0
  7409  003890  1F6C               	comf	___fladd@f2& (0+255),f,b
  7410  003892  D819               	call	PL54	;call to abstracted procedure
  7411                           
  7412                           ; BSR set to: 0
  7413  003894  0E01               	movlw	1
  7414  003896  6F74               	movwf	___fladd@sign& (0+255),b
  7415  003898                     l14042:
  7416                           
  7417                           ; BSR set to: 0
  7418  003898  C06C  F00E         	movff	___fladd@f2,?___flpack
  7419  00389C  C06D  F00F         	movff	___fladd@f2+1,?___flpack+1
  7420  0038A0  C06E  F010         	movff	___fladd@f2+2,?___flpack+2
  7421  0038A4  C06F  F011         	movff	___fladd@f2+3,?___flpack+3
  7422  0038A8  C076  F012         	movff	___fladd@exp1,?___flpack+4
  7423  0038AC  C074  F013         	movff	___fladd@sign,?___flpack+5
  7424  0038B0  ECC5  F020         	call	___flpack	;wreg free
  7425  0038B4  C011  F06B         	movff	?___flpack+3,?___fladd+3
  7426  0038B8  C010  F06A         	movff	?___flpack+2,?___fladd+2
  7427  0038BC  C00F  F069         	movff	?___flpack+1,?___fladd+1
  7428  0038C0  C00E  F068         	movff	?___flpack,?___fladd
  7429  0038C4                     l1588:
  7430  0038C4  0012               	return	
  7431  0038C6                     __end_of___fladd:
  7432                           	opt stack 0
  7433  0038C6                     PL54:
  7434                           	opt stack 24
  7435  0038C6  1F6D               	comf	(___fladd@f2+1)& (0+255),f,b
  7436  0038C8  1F6E               	comf	(___fladd@f2+2)& (0+255),f,b
  7437  0038CA  1F6F               	comf	(___fladd@f2+3)& (0+255),f,b
  7438  0038CC  2B6C               	incf	___fladd@f2& (0+255),f,b
  7439  0038CE  0E00               	movlw	0
  7440  0038D0  236D               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7441  0038D2  236E               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7442  0038D4  236F               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7443  0038D6  0C00               	retlw	0
  7444  0038D8                     __end_ofPL54:
  7445                           	opt stack 0
  7446                           tblptru	equ	0xFF8
  7447                           tblptrh	equ	0xFF7
  7448                           tblptrl	equ	0xFF6
  7449                           tablat	equ	0xFF5
  7450                           prodh	equ	0xFF4
  7451                           prodl	equ	0xFF3
  7452                           intcon	equ	0xFF2
  7453                           postinc0	equ	0xFEE
  7454                           wreg	equ	0xFE8
  7455                           indf1	equ	0xFE7
  7456                           postdec1	equ	0xFE5
  7457                           fsr1h	equ	0xFE2
  7458                           fsr1l	equ	0xFE1
  7459                           indf2	equ	0xFDF
  7460                           postinc2	equ	0xFDE
  7461                           postdec2	equ	0xFDD
  7462                           plusw2	equ	0xFDB
  7463                           fsr2h	equ	0xFDA
  7464                           fsr2l	equ	0xFD9
  7465                           status	equ	0xFD8
  7466                           
  7467 ;; *************** function _Celsius2Kelvin *****************
  7468 ;; Defined at:
  7469 ;;		line 61 in file "../ntc.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;  tc              4   23[BANK0 ] unsigned char 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  4   23[BANK0 ] unsigned char 
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7483 ;;      Params:         0       4       0       0       0       0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0
  7486 ;;      Totals:         0       4       0       0       0       0       0
  7487 ;;Total ram usage:        4 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    4
  7490 ;; This function calls:
  7491 ;;		___fladd
  7492 ;; This function is called by:
  7493 ;;		_setEventData
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497                           	psect	text32
  7498  004F16                     __ptext32:
  7499                           	opt stack 0
  7500  004F16                     _Celsius2Kelvin:
  7501                           	opt stack 22
  7502                           
  7503                           ;ntc.c: 62: return (27316.0 + tc);
  7504                           
  7505                           ;incstack = 0
  7506                           ;incstack = 0
  7507  004F16  C077  F068         	movff	Celsius2Kelvin@tc,?___fladd
  7508  004F1A  C078  F069         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7509  004F1E  C079  F06A         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7510  004F22  C07A  F06B         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7511  004F26  0100               	movlb	0	; () banked
  7512  004F28  6B6C               	clrf	(?___fladd+4)& (0+255),b
  7513  004F2A  0E68               	movlw	104
  7514  004F2C  6F6D               	movwf	(?___fladd+5)& (0+255),b
  7515  004F2E  0ED5               	movlw	213
  7516  004F30  6F6E               	movwf	(?___fladd+6)& (0+255),b
  7517  004F32  0E46               	movlw	70
  7518  004F34  6F6F               	movwf	(?___fladd+7)& (0+255),b
  7519  004F36  ECBE  F01B         	call	___fladd	;wreg free
  7520  004F3A  C06B  F07A         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7521  004F3E  C06A  F079         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7522  004F42  C069  F078         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7523  004F46  C068  F077         	movff	?___fladd,?_Celsius2Kelvin
  7524  004F4A  0012               	return	
  7525  004F4C                     __end_of_Celsius2Kelvin:
  7526                           	opt stack 0
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           intcon	equ	0xFF2
  7534                           postinc0	equ	0xFEE
  7535                           wreg	equ	0xFE8
  7536                           indf1	equ	0xFE7
  7537                           postdec1	equ	0xFE5
  7538                           fsr1h	equ	0xFE2
  7539                           fsr1l	equ	0xFE1
  7540                           indf2	equ	0xFDF
  7541                           postinc2	equ	0xFDE
  7542                           postdec2	equ	0xFDD
  7543                           plusw2	equ	0xFDB
  7544                           fsr2h	equ	0xFDA
  7545                           fsr2l	equ	0xFD9
  7546                           status	equ	0xFD8
  7547                           
  7548 ;; *************** function _vscp_handleProtocolEvent *****************
  7549 ;; Defined at:
  7550 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;		None
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;  bytes           1   44[BANK0 ] unsigned char 
  7555 ;;  page_save       2   40[BANK0 ] unsigned short 
  7556 ;;  i               1   50[BANK0 ] unsigned char 
  7557 ;;  bytes           2   54[BANK0 ] unsigned short 
  7558 ;;  page_save       2   38[BANK0 ] unsigned short 
  7559 ;;  byte            1   53[BANK0 ] unsigned char 
  7560 ;;  cb              1   49[BANK0 ] unsigned char 
  7561 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7562 ;;  j               1   58[BANK0 ] unsigned char 
  7563 ;;  i               1   56[BANK0 ] unsigned char 
  7564 ;;  k               1   51[BANK0 ] unsigned char 
  7565 ;;  i               1   52[BANK0 ] unsigned char 
  7566 ;;  len             1   47[BANK0 ] unsigned char 
  7567 ;;  pos             1   46[BANK0 ] unsigned char 
  7568 ;;  i               1   57[BANK0 ] unsigned char 
  7569 ;;  len             1   45[BANK0 ] unsigned char 
  7570 ;;  pos             1   43[BANK0 ] unsigned char 
  7571 ;;  offset          1   42[BANK0 ] unsigned char 
  7572 ;; Return value:  Size  Location     Type
  7573 ;;		None               void
  7574 ;; Registers used:
  7575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7576 ;; Tracked objects:
  7577 ;;		On entry : F/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7581 ;;      Params:         0       0       0       0       0       0       0
  7582 ;;      Locals:         0      21       0       0       0       0       0
  7583 ;;      Temps:          0       7       0       0       0       0       0
  7584 ;;      Totals:         0      28       0       0       0       0       0
  7585 ;;Total ram usage:       28 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    8
  7588 ;; This function calls:
  7589 ;;		_vscp_init
  7590 ;;		_vscp_sendEvent
  7591 ;;		_vscp_readAppReg
  7592 ;;		_vscp_writeAppReg
  7593 ;;		_vscp_getGUID
  7594 ;;		_vscp_getMDF_URL
  7595 ;;		_vscp_getMatrixInfo
  7596 ;;		_vscp_goBootloaderMode
  7597 ;;		_vscp_handleHeartbeat
  7598 ;;		_vscp_handleSetNickname
  7599 ;;		_vscp_handleDropNickname
  7600 ;;		_vscp_newNodeOnline
  7601 ;;		_vscp_readRegister
  7602 ;;		_vscp_readStdReg
  7603 ;;		_vscp_writeRegister
  7604 ;;		_vscp_writeStdReg
  7605 ;;		___lbmod
  7606 ;; This function is called by:
  7607 ;;		_main
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           	psect	text33
  7612  001B08                     __ptext33:
  7613                           	opt stack 0
  7614  001B08                     _vscp_handleProtocolEvent:
  7615                           	opt stack 21
  7616                           
  7617                           ; BSR set to: 0
  7618                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  7619                           
  7620                           ;incstack = 0
  7621                           ;incstack = 0
  7622  001B08  51C2               	movf	(_vscp_imsg+3)& (0+255),w,b
  7623  001B0A  11C1               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7624  001B0C  E101 D2BB          	bz	l10014
  7625  001B10  D2EA               	goto	l1268
  7626  001B12                     l9596:
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  7630  001B12  EC13  F027         	call	_vscp_handleHeartbeat	;wreg free
  7631                           
  7632                           ;vscp_firmware.c: 807: break;
  7633  001B16  D2E7               	goto	l1268
  7634  001B18                     l9598:
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  7638  001B18  EC02  F028         	call	_vscp_newNodeOnline	;wreg free
  7639                           
  7640                           ;vscp_firmware.c: 812: break;
  7641  001B1C  D2E4               	goto	l1268
  7642  001B1E                     l9600:
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7646  001B1E  EC8C  F028         	call	_vscp_handleSetNickname	;wreg free
  7647                           
  7648                           ;vscp_firmware.c: 817: break;
  7649  001B22  D2E1               	goto	l1268
  7650  001B24                     l9602:
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7654  001B24  ECBF  F027         	call	_vscp_handleDropNickname	;wreg free
  7655                           
  7656                           ;vscp_firmware.c: 822: break;
  7657  001B28  D2DE               	goto	l1268
  7658  001B2A                     l9604:
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7662                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7663  001B2A  51BF               	movf	_vscp_imsg& (0+255),w,b
  7664  001B2C  0B0F               	andlw	15
  7665  001B2E  0A02               	xorlw	2
  7666  001B30  E001 D2D9          	bnz	l1268
  7667                           
  7668                           ; BSR set to: 0
  7669  001B34  51BD               	movf	_vscp_nickname& (0+255),w,b
  7670  001B36  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  7671  001B3A  62DF               	cpfseq	indf2,c
  7672  001B3C  D2D4               	goto	l1268
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7676  001B3E  0E80               	movlw	128
  7677  001B40  61C6               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7678  001B42  D012               	goto	l9624
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7682  001B44  51C6               	movf	(_vscp_imsg+7)& (0+255),w,b
  7683  001B46  ECB4  F009         	call	_vscp_readAppReg
  7684  001B4A                     L8:
  7685  001B4A  0100               	movlb	0	; () banked
  7686  001B4C  6FD3               	movwf	(_vscp_omsg+6)& (0+255),b
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7690  001B4E  C0C6  F0D2         	movff	_vscp_imsg+7,_vscp_omsg+5
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7694  001B52  0E03               	movlw	3
  7695  001B54  6FCE               	movwf	(_vscp_omsg+1)& (0+255),b
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7699  001B56  0E82               	movlw	130
  7700  001B58  6FCD               	movwf	_vscp_omsg& (0+255),b
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7704  001B5A  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
  7705  001B5C  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7709  001B5E  0E0A               	movlw	10
  7710  001B60  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  7711  001B62                     l9622:
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7715  001B62  EC40  F028         	call	_vscp_sendEvent	;wreg free
  7716                           
  7717                           ;vscp_firmware.c: 844: }
  7718  001B66  D2BF               	goto	l1268
  7719  001B68                     l9624:
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;vscp_firmware.c: 845: else {
  7723                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7724                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7725  001B68  51C6               	movf	(_vscp_imsg+7)& (0+255),w,b
  7726  001B6A  EC3C  F01A         	call	_vscp_readStdReg
  7727  001B6E  D7ED               	goto	L8
  7728  001B70                     l9638:
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7732                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7733  001B70  51BF               	movf	_vscp_imsg& (0+255),w,b
  7734  001B72  0B0F               	andlw	15
  7735  001B74  0A03               	xorlw	3
  7736  001B76  E001 D2B6          	bnz	l1268
  7737                           
  7738                           ; BSR set to: 0
  7739  001B7A  51BD               	movf	_vscp_nickname& (0+255),w,b
  7740  001B7C  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  7741  001B80  62DF               	cpfseq	indf2,c
  7742  001B82  D2B1               	goto	l1268
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7746  001B84  0E80               	movlw	128
  7747  001B86  61C6               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7748  001B88  D006               	goto	l9658
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7752                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7753  001B8A  C0C7  F023         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7754  001B8E  51C6               	movf	(_vscp_imsg+7)& (0+255),w,b
  7755  001B90  EC37  F003         	call	_vscp_writeAppReg
  7756  001B94  D7DA               	goto	L8
  7757  001B96                     l9658:
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;vscp_firmware.c: 888: else {
  7761                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7762                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7763  001B96  C0C7  F01B         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7764  001B9A  51C6               	movf	(_vscp_imsg+7)& (0+255),w,b
  7765  001B9C  EC9F  F01E         	call	_vscp_writeStdReg
  7766  001BA0  D7D4               	goto	L8
  7767  001BA2                     l9672:
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7771                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7772                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7773                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7774                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7775                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7776                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7777  001BA2  51BD               	movf	_vscp_nickname& (0+255),w,b
  7778  001BA4  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  7779  001BA8  62DF               	cpfseq	indf2,c
  7780  001BAA  D29D               	goto	l1268
  7781                           
  7782                           ; BSR set to: 0
  7783  001BAC  0E00               	movlw	0
  7784  001BAE  EC5A  F029         	call	_vscp_getGUID
  7785  001BB2  0100               	movlb	0	; () banked
  7786  001BB4  19C7               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7787  001BB6  E001 D296          	bnz	l1268
  7788                           
  7789                           ; BSR set to: 0
  7790  001BBA  0E03               	movlw	3
  7791  001BBC  EC5A  F029         	call	_vscp_getGUID
  7792  001BC0  0100               	movlb	0	; () banked
  7793  001BC2  19C8               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7794  001BC4  E001 D28F          	bnz	l1268
  7795                           
  7796                           ; BSR set to: 0
  7797  001BC8  0E05               	movlw	5
  7798  001BCA  EC5A  F029         	call	_vscp_getGUID
  7799  001BCE  0100               	movlb	0	; () banked
  7800  001BD0  19C9               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7801  001BD2  E001 D288          	bnz	l1268
  7802                           
  7803                           ; BSR set to: 0
  7804  001BD6  0E07               	movlw	7
  7805  001BD8  EC5A  F029         	call	_vscp_getGUID
  7806  001BDC  0100               	movlb	0	; () banked
  7807  001BDE  19CA               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7808  001BE0  E001 D281          	bnz	l1268
  7809                           
  7810                           ; BSR set to: 0
  7811  001BE4  5047               	movf	_vscp_page_select+1,w,c
  7812  001BE6  19CB               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7813  001BE8  E001 D27D          	bnz	l1268
  7814                           
  7815                           ; BSR set to: 0
  7816  001BEC  5046               	movf	_vscp_page_select,w,c
  7817  001BEE  EE20  F0CC         	lfsr	2,_vscp_imsg+13
  7818  001BF2  62DF               	cpfseq	indf2,c
  7819  001BF4  D278               	goto	l1268
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7823  001BF6  51C6               	movf	(_vscp_imsg+7)& (0+255),w,b
  7824  001BF8  EC2E  F029         	call	_vscp_goBootloaderMode
  7825  001BFC  D274               	goto	l1268
  7826  001BFE                     l9688:
  7827                           
  7828                           ; BSR set to: 0
  7829                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7830                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7831                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7832                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7833  001BFE  0E00               	movlw	0
  7834  001C00  EC5A  F029         	call	_vscp_getGUID
  7835  001C04  0100               	movlb	0	; () banked
  7836  001C06  19C6               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7837  001C08  E173               	bnz	l9732
  7838                           
  7839                           ; BSR set to: 0
  7840  001C0A  0E01               	movlw	1
  7841  001C0C  EC5A  F029         	call	_vscp_getGUID
  7842  001C10  0100               	movlb	0	; () banked
  7843  001C12  19C7               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7844  001C14  E16D               	bnz	l9732
  7845                           
  7846                           ; BSR set to: 0
  7847  001C16  0E02               	movlw	2
  7848  001C18  EC5A  F029         	call	_vscp_getGUID
  7849  001C1C  0100               	movlb	0	; () banked
  7850  001C1E  19C8               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7851  001C20  E167               	bnz	l9732
  7852                           
  7853                           ; BSR set to: 0
  7854  001C22  0E03               	movlw	3
  7855  001C24  EC5A  F029         	call	_vscp_getGUID
  7856  001C28  0100               	movlb	0	; () banked
  7857  001C2A  19C9               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7858  001C2C  E161               	bnz	l9732
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7862  001C2E  884B               	bsf	_vscp_guid_reset,4,c
  7863  001C30  D05F               	goto	l9732
  7864  001C32                     l9698:
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7868                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7869                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7870                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7871  001C32  0E04               	movlw	4
  7872  001C34  EC5A  F029         	call	_vscp_getGUID
  7873  001C38  0100               	movlb	0	; () banked
  7874  001C3A  19C6               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7875  001C3C  E159               	bnz	l9732
  7876                           
  7877                           ; BSR set to: 0
  7878  001C3E  0E05               	movlw	5
  7879  001C40  EC5A  F029         	call	_vscp_getGUID
  7880  001C44  0100               	movlb	0	; () banked
  7881  001C46  19C7               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7882  001C48  E153               	bnz	l9732
  7883                           
  7884                           ; BSR set to: 0
  7885  001C4A  0E06               	movlw	6
  7886  001C4C  EC5A  F029         	call	_vscp_getGUID
  7887  001C50  0100               	movlb	0	; () banked
  7888  001C52  19C8               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7889  001C54  E14D               	bnz	l9732
  7890                           
  7891                           ; BSR set to: 0
  7892  001C56  0E07               	movlw	7
  7893  001C58  EC5A  F029         	call	_vscp_getGUID
  7894  001C5C  0100               	movlb	0	; () banked
  7895  001C5E  19C9               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7896  001C60  E147               	bnz	l9732
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7900  001C62  8A4B               	bsf	_vscp_guid_reset,5,c
  7901  001C64  D045               	goto	l9732
  7902  001C66                     l9708:
  7903                           
  7904                           ; BSR set to: 0
  7905                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7906                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7907                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7908                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7909  001C66  0E08               	movlw	8
  7910  001C68  EC5A  F029         	call	_vscp_getGUID
  7911  001C6C  0100               	movlb	0	; () banked
  7912  001C6E  19C6               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7913  001C70  E13F               	bnz	l9732
  7914                           
  7915                           ; BSR set to: 0
  7916  001C72  0E09               	movlw	9
  7917  001C74  EC5A  F029         	call	_vscp_getGUID
  7918  001C78  0100               	movlb	0	; () banked
  7919  001C7A  19C7               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7920  001C7C  E139               	bnz	l9732
  7921                           
  7922                           ; BSR set to: 0
  7923  001C7E  0E0A               	movlw	10
  7924  001C80  EC5A  F029         	call	_vscp_getGUID
  7925  001C84  0100               	movlb	0	; () banked
  7926  001C86  19C8               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7927  001C88  E133               	bnz	l9732
  7928                           
  7929                           ; BSR set to: 0
  7930  001C8A  0E0B               	movlw	11
  7931  001C8C  EC5A  F029         	call	_vscp_getGUID
  7932  001C90  0100               	movlb	0	; () banked
  7933  001C92  19C9               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7934  001C94  E12D               	bnz	l9732
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7938  001C96  8C4B               	bsf	_vscp_guid_reset,6,c
  7939  001C98  D02B               	goto	l9732
  7940  001C9A                     l9718:
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7944                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7945                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7946                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7947  001C9A  0E0C               	movlw	12
  7948  001C9C  EC5A  F029         	call	_vscp_getGUID
  7949  001CA0  0100               	movlb	0	; () banked
  7950  001CA2  19C6               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7951  001CA4  E125               	bnz	l9732
  7952                           
  7953                           ; BSR set to: 0
  7954  001CA6  0E0D               	movlw	13
  7955  001CA8  EC5A  F029         	call	_vscp_getGUID
  7956  001CAC  0100               	movlb	0	; () banked
  7957  001CAE  19C7               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7958  001CB0  E11F               	bnz	l9732
  7959                           
  7960                           ; BSR set to: 0
  7961  001CB2  0E0E               	movlw	14
  7962  001CB4  EC5A  F029         	call	_vscp_getGUID
  7963  001CB8  0100               	movlb	0	; () banked
  7964  001CBA  19C8               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7965  001CBC  E119               	bnz	l9732
  7966                           
  7967                           ; BSR set to: 0
  7968  001CBE  0E0F               	movlw	15
  7969  001CC0  EC5A  F029         	call	_vscp_getGUID
  7970  001CC4  0100               	movlb	0	; () banked
  7971  001CC6  19C9               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7972  001CC8  E113               	bnz	l9732
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7976  001CCA  8E4B               	bsf	_vscp_guid_reset,7,c
  7977  001CCC  D011               	goto	l9732
  7978  001CCE                     l1208:
  7979                           
  7980                           ; BSR set to: 0
  7981                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7982  001CCE  6A4B               	clrf	_vscp_guid_reset,c
  7983                           
  7984                           ;vscp_firmware.c: 965: break;
  7985  001CD0  D00F               	goto	l9732
  7986  001CD2                     l9730:
  7987                           
  7988                           ; BSR set to: 0
  7989  001CD2  39C5               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7990  001CD4  0B0F               	andlw	15
  7991  001CD6  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7992  001CD8  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7993                           
  7994                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7995                           ; Switch size 1, requested type "space"
  7996                           ; Number of cases is 1, Range of values is 0 to 0
  7997                           ; switch strategies available:
  7998                           ; Name         Instructions Cycles
  7999                           ; simple_byte            4     3 (average)
  8000                           ;	Chosen strategy is simple_byte
  8001  001CDA  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8002  001CDC  E1F8               	bnz	l1208
  8003                           
  8004                           ; BSR set to: 0
  8005                           ; Switch size 1, requested type "space"
  8006                           ; Number of cases is 4, Range of values is 0 to 3
  8007                           ; switch strategies available:
  8008                           ; Name         Instructions Cycles
  8009                           ; simple_byte           13     7 (average)
  8010                           ;	Chosen strategy is simple_byte
  8011  001CDE  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  8012  001CE0  E08E               	bz	l9688
  8013  001CE2  0A01               	xorlw	1	; case 1
  8014  001CE4  E0A6               	bz	l9698
  8015  001CE6  0A03               	xorlw	3	; case 2
  8016  001CE8  E0BE               	bz	l9708
  8017  001CEA  0A01               	xorlw	1	; case 3
  8018  001CEC  E0D6               	bz	l9718
  8019  001CEE  D7EF               	goto	l1208
  8020  001CF0                     l9732:
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  8024  001CF0  504B               	movf	_vscp_guid_reset,w,c
  8025  001CF2  0BF0               	andlw	240
  8026  001CF4  0AF0               	xorlw	240
  8027  001CF6  E001 D1F6          	bnz	l1268
  8028                           
  8029                           ; BSR set to: 0
  8030                           ;vscp_firmware.c: 970: vscp_init();
  8031  001CFA  EC87  F026         	call	_vscp_init	;wreg free
  8032  001CFE  D1F3               	goto	l1268
  8033  001D00                     l9736:
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8037  001D00  51BD               	movf	_vscp_nickname& (0+255),w,b
  8038  001D02  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  8039  001D06  62DF               	cpfseq	indf2,c
  8040  001D08  D1EE               	goto	l1268
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;vscp_firmware.c: 978: uint8_t i;
  8044                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  8045  001D0A  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  8046                           
  8047                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  8048  001D0C  C0C6  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  8049                           
  8050                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  8051  001D10  C0C7  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  8052                           
  8053                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  8054  001D14  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  8055  001D16  D044               	goto	l9768
  8056  001D18                     l9740:
  8057                           
  8058                           ; BSR set to: 0
  8059                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  8060  001D18  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  8061  001D1A  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8062  001D1C  ECF0  F028         	call	_vscp_readRegister
  8063  001D20  0100               	movlb	0	; () banked
  8064  001D22  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8065  001D24  0E07               	movlw	7
  8066  001D26  6E0E               	movwf	?___lbmod,c
  8067  001D28  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8068  001D2A  EC2C  F028         	call	___lbmod
  8069  001D2E  0100               	movlb	0	; () banked
  8070  001D30  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8071  001D32  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8072  001D34  0FD3               	addlw	low (_vscp_omsg+6)
  8073  001D36  6ED9               	movwf	fsr2l,c
  8074  001D38  6ADA               	clrf	fsr2h,c
  8075  001D3A  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  8079  001D3E  0E07               	movlw	7
  8080  001D40  6E0E               	movwf	?___lbmod,c
  8081  001D42  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8082  001D44  EC2C  F028         	call	___lbmod
  8083  001D48  0A06               	xorlw	6
  8084  001D4A  E00B               	bz	l9746
  8085  001D4C  0EFF               	movlw	255
  8086  001D4E  0100               	movlb	0	; () banked
  8087  001D50  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8088  001D52  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8089  001D54  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8090  001D56  0EFF               	movlw	255
  8091  001D58  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8092  001D5A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8093  001D5C  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8094  001D5E  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8095  001D60  E11E               	bnz	l9766
  8096  001D62                     l9746:
  8097                           
  8098                           ;vscp_firmware.c: 988: uint8_t bytes;
  8099                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  8100  001D62  0E07               	movlw	7
  8101  001D64  6E0E               	movwf	?___lbmod,c
  8102  001D66  0100               	movlb	0	; () banked
  8103  001D68  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8104  001D6A  EC2C  F028         	call	___lbmod
  8105  001D6E  0A06               	xorlw	6
  8106  001D70  E103               	bnz	l9750
  8107                           
  8108                           ;vscp_firmware.c: 991: bytes = 7;
  8109  001D72  0E07               	movlw	7
  8110  001D74  0100               	movlb	0	; () banked
  8111  001D76  D009               	goto	L9
  8112  001D78                     l9750:
  8113                           
  8114                           ;vscp_firmware.c: 993: else {
  8115                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  8116  001D78  0E07               	movlw	7
  8117  001D7A  6E0E               	movwf	?___lbmod,c
  8118  001D7C  0100               	movlb	0	; () banked
  8119  001D7E  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8120  001D80  EC2C  F028         	call	___lbmod
  8121  001D84  0100               	movlb	0	; () banked
  8122  001D86  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8123  001D88  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8124  001D8A                     L9:
  8125  001D8A  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8126                           
  8127                           ; BSR set to: 0
  8128                           ;vscp_firmware.c: 995: }
  8129                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  8130  001D8C  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8131  001D8E  0F81               	addlw	129
  8132  001D90  6FCD               	movwf	_vscp_omsg& (0+255),b
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  8142  001D92  D9C0               	call	PL74	;call to abstracted procedure
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  8146  001D94  C08B  F0D2         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  8150  001D98  EC40  F028         	call	_vscp_sendEvent	;wreg free
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;vscp_firmware.c: 1005: pos++;
  8154  001D9C  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8155  001D9E                     l9766:
  8156                           
  8157                           ; BSR set to: 0
  8158  001D9E  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8159  001DA0                     l9768:
  8160                           
  8161                           ; BSR set to: 0
  8162  001DA0  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8163  001DA2  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8164  001DA4  E301 D19F          	bc	l1268
  8165  001DA8  D7B7               	goto	l9740
  8166  001DAA                     l9770:
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8170  001DAA  51BD               	movf	_vscp_nickname& (0+255),w,b
  8171  001DAC  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  8172  001DB0  62DF               	cpfseq	indf2,c
  8173  001DB2  D199               	goto	l1268
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;vscp_firmware.c: 1014: uint8_t i;
  8177                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  8178  001DB4  C0C6  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1155
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8182  001DB8  51BF               	movf	_vscp_imsg& (0+255),w,b
  8183  001DBA  0FFE               	addlw	254
  8184  001DBC  0B07               	andlw	7
  8185  001DBE  6F8F               	movwf	vscp_handleProtocolEvent@len_1156& (0+255),b
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  8189  001DC0  6B94               	clrf	vscp_handleProtocolEvent@i_1154& (0+255),b
  8190  001DC2  D018               	goto	l9784
  8191  001DC4                     l9778:
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8195  001DC4  5194               	movf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8196  001DC6  0FC7               	addlw	low (_vscp_imsg+8)
  8197  001DC8  6ED9               	movwf	fsr2l,c
  8198  001DCA  6ADA               	clrf	fsr2h,c
  8199  001DCC  50DF               	movf	indf2,w,c
  8200  001DCE  6E27               	movwf	?_vscp_writeRegister,c
  8201  001DD0  518E               	movf	vscp_handleProtocolEvent@pos_1155& (0+255),w,b
  8202  001DD2  2594               	addwf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8203  001DD4  ECB0  F028         	call	_vscp_writeRegister
  8204                           
  8205                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8206  001DD8  0100               	movlb	0	; () banked
  8207  001DDA  518E               	movf	vscp_handleProtocolEvent@pos_1155& (0+255),w,b
  8208  001DDC  2594               	addwf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8209  001DDE  ECF0  F028         	call	_vscp_readRegister
  8210  001DE2  0100               	movlb	0	; () banked
  8211  001DE4  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8212  001DE6  5194               	movf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8213  001DE8  0FD3               	addlw	low (_vscp_omsg+6)
  8214  001DEA  6ED9               	movwf	fsr2l,c
  8215  001DEC  6ADA               	clrf	fsr2h,c
  8216  001DEE  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8217                           
  8218                           ; BSR set to: 0
  8219  001DF2  2B94               	incf	vscp_handleProtocolEvent@i_1154& (0+255),f,b
  8220  001DF4                     l9784:
  8221                           
  8222                           ; BSR set to: 0
  8223  001DF4  518F               	movf	vscp_handleProtocolEvent@len_1156& (0+255),w,b
  8224  001DF6  5D94               	subwf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8225  001DF8  E3E5               	bnc	l9778
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;vscp_firmware.c: 1022: }
  8229                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  8233                           
  8234                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  8235  001DFA  D98C               	call	PL74	;call to abstracted procedure
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  8239  001DFC  6BD2               	clrf	(_vscp_omsg+5)& (0+255),b
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  8243  001DFE  518F               	movf	vscp_handleProtocolEvent@len_1156& (0+255),w,b
  8244  001E00  0F81               	addlw	129
  8245  001E02  6FCD               	movwf	_vscp_omsg& (0+255),b
  8246  001E04  D6AE               	goto	l9622
  8247  001E06                     l9796:
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8251  001E06  51BD               	movf	_vscp_nickname& (0+255),w,b
  8252  001E08  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  8253  001E0C  62DF               	cpfseq	indf2,c
  8254  001E0E  D16B               	goto	l1268
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8258                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  8259                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8260  001E10  51C6               	movf	(_vscp_imsg+7)& (0+255),w,b
  8261  001E12  ECB4  F009         	call	_vscp_readAppReg
  8262  001E16  0100               	movlb	0	; () banked
  8263  001E18  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8264  001E1A  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8265  001E1C  6E23               	movwf	?_vscp_writeAppReg,c
  8266  001E1E  51C6               	movf	(_vscp_imsg+7)& (0+255),w,b
  8267  001E20  EC37  F003         	call	_vscp_writeAppReg
  8268  001E24  D692               	goto	L8
  8269  001E26                     l9812:
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8273  001E26  51BD               	movf	_vscp_nickname& (0+255),w,b
  8274  001E28  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  8275  001E2C  62DF               	cpfseq	indf2,c
  8276  001E2E  D15B               	goto	l1268
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8280                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  8281                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8282  001E30  51C6               	movf	(_vscp_imsg+7)& (0+255),w,b
  8283  001E32  ECB4  F009         	call	_vscp_readAppReg
  8284  001E36  0100               	movlb	0	; () banked
  8285  001E38  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8286  001E3A  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8287  001E3C  6E23               	movwf	?_vscp_writeAppReg,c
  8288  001E3E  51C6               	movf	(_vscp_imsg+7)& (0+255),w,b
  8289  001E40  EC37  F003         	call	_vscp_writeAppReg
  8290  001E44  D682               	goto	L8
  8291  001E46                     l9828:
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8295                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  8296  001E46  51C5               	movf	(_vscp_imsg+6)& (0+255),w,b
  8297  001E48  19BD               	xorwf	_vscp_nickname& (0+255),w,b
  8298  001E4A  E003               	bz	l1232
  8299                           
  8300                           ; BSR set to: 0
  8301  001E4C  29C5               	incf	(_vscp_imsg+6)& (0+255),w,b
  8302  001E4E  E001 D14A          	bnz	l1268
  8303  001E52                     l1232:
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  8307  001E52  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  8311  001E54  0E03               	movlw	3
  8312  001E56  6FCE               	movwf	(_vscp_omsg+1)& (0+255),b
  8313                           
  8314                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  8315  001E58  0E88               	movlw	136
  8316  001E5A  6FCD               	movwf	_vscp_omsg& (0+255),b
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  8320  001E5C  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
  8321  001E5E  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  8322                           
  8323                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  8324  001E60  0E20               	movlw	32
  8325  001E62  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  8329  001E64  6B98               	clrf	vscp_handleProtocolEvent@i_1157& (0+255),b
  8330  001E66                     l1233:
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;vscp_firmware.c: 1091: {
  8334                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  8335                           
  8336                           ; BSR set to: 0
  8337                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  8338  001E66  D95D               	call	PL90	;call to abstracted procedure
  8339  001E68                     l9848:
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8343  001E68  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8344  001E6A  0FD2               	addlw	low (_vscp_omsg+5)
  8345  001E6C  6ED9               	movwf	fsr2l,c
  8346  001E6E  6ADA               	clrf	fsr2h,c
  8347  001E70  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8348  001E72  080F               	sublw	15
  8349  001E74  EC5A  F029         	call	_vscp_getGUID
  8350  001E78  6EDF               	movwf	indf2,c
  8351  001E7A  0100               	movlb	0	; () banked
  8352  001E7C  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8353                           
  8354                           ; BSR set to: 0
  8355                           ;vscp_firmware.c: 1096: if (k > 16)
  8356  001E7E  0E10               	movlw	16
  8357  001E80  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8358  001E82  D001               	goto	l9856
  8359  001E84  D004               	goto	l9860
  8360  001E86                     l9856:
  8361                           
  8362                           ; BSR set to: 0
  8363  001E86  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8364                           
  8365                           ; BSR set to: 0
  8366  001E88  0E07               	movlw	7
  8367  001E8A  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8368  001E8C  D7ED               	goto	l9848
  8369  001E8E                     l9860:
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;vscp_firmware.c: 1098: }
  8373                           ;vscp_firmware.c: 1100: if (k > 16)
  8374  001E8E  0E10               	movlw	16
  8375  001E90  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8376  001E92  D001               	goto	l9864
  8377  001E94  D006               	goto	l1234
  8378  001E96                     l9864:
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  8382  001E96  EC40  F028         	call	_vscp_sendEvent	;wreg free
  8383                           
  8384                           ; BSR set to: 0
  8385  001E9A  2B98               	incf	vscp_handleProtocolEvent@i_1157& (0+255),f,b
  8386                           
  8387                           ; BSR set to: 0
  8388  001E9C  0E02               	movlw	2
  8389  001E9E  6598               	cpfsgt	vscp_handleProtocolEvent@i_1157& (0+255),b
  8390  001EA0  D7E2               	goto	l1233
  8391  001EA2                     l1234:
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;vscp_firmware.c: 1104: }
  8395                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  8396  001EA2  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8397  001EA4                     l9874:
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;vscp_firmware.c: 1107: {
  8401                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  8402  001EA4  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8403  001EA6  EC22  F029         	call	_vscp_getMDF_URL
  8404  001EAA  0900               	iorlw	0
  8405  001EAC  E008               	bz	l9878
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8409  001EAE  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8410  001EB0  0FD5               	addlw	low (_vscp_omsg+8)
  8411  001EB2  6ED9               	movwf	fsr2l,c
  8412  001EB4  6ADA               	clrf	fsr2h,c
  8413  001EB6  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8414  001EB8  EC22  F029         	call	_vscp_getMDF_URL
  8415  001EBC  D005               	goto	L10
  8416  001EBE                     l9878:
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;vscp_firmware.c: 1110: else
  8420                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  8421  001EBE  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8422  001EC0  0FD5               	addlw	low (_vscp_omsg+8)
  8423  001EC2  6ED9               	movwf	fsr2l,c
  8424  001EC4  6ADA               	clrf	fsr2h,c
  8425  001EC6  0E00               	movlw	0
  8426  001EC8                     L10:
  8427  001EC8  6EDF               	movwf	indf2,c
  8428                           
  8429                           ; BSR set to: 0
  8430  001ECA  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8431                           
  8432                           ; BSR set to: 0
  8433  001ECC  0E04               	movlw	4
  8434  001ECE  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8435  001ED0  D7E9               	goto	l9874
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;vscp_firmware.c: 1112: }
  8439                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  8440  001ED2  EC40  F028         	call	_vscp_sendEvent	;wreg free
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;vscp_firmware.c: 1116: k = 5;
  8444  001ED6  0E05               	movlw	5
  8445  001ED8  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  8449  001EDA  0E03               	movlw	3
  8450  001EDC  6F98               	movwf	vscp_handleProtocolEvent@i_1157& (0+255),b
  8451  001EDE                     l1243:
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;vscp_firmware.c: 1118: {
  8455                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  8459  001EDE  D921               	call	PL90	;call to abstracted procedure
  8460  001EE0                     l9900:
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8464  001EE0  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8465  001EE2  0FD2               	addlw	low (_vscp_omsg+5)
  8466  001EE4  6ED9               	movwf	fsr2l,c
  8467  001EE6  6ADA               	clrf	fsr2h,c
  8468  001EE8  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8469  001EEA  EC22  F029         	call	_vscp_getMDF_URL
  8470  001EEE  6EDF               	movwf	indf2,c
  8471                           
  8472                           ; BSR set to: 0
  8473  001EF0  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8474                           
  8475                           ; BSR set to: 0
  8476  001EF2  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8477                           
  8478                           ; BSR set to: 0
  8479  001EF4  0E07               	movlw	7
  8480  001EF6  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8481  001EF8  D7F3               	goto	l9900
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;vscp_firmware.c: 1123: }
  8485                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  8486  001EFA  EC40  F028         	call	_vscp_sendEvent	;wreg free
  8487                           
  8488                           ; BSR set to: 0
  8489  001EFE  2B98               	incf	vscp_handleProtocolEvent@i_1157& (0+255),f,b
  8490                           
  8491                           ; BSR set to: 0
  8492  001F00  0E06               	movlw	6
  8493  001F02  6598               	cpfsgt	vscp_handleProtocolEvent@i_1157& (0+255),b
  8494  001F04  D7EC               	goto	l1243
  8495  001F06  D0EF               	goto	l1268
  8496  001F08                     l9914:
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8500  001F08  51BD               	movf	_vscp_nickname& (0+255),w,b
  8501  001F0A  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  8502  001F0E  62DF               	cpfseq	indf2,c
  8503  001F10  D0EA               	goto	l1268
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  8507  001F12  0E03               	movlw	3
  8508  001F14  6FCE               	movwf	(_vscp_omsg+1)& (0+255),b
  8509                           
  8510                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  8511  001F16  0E87               	movlw	135
  8512  001F18  6FCD               	movwf	_vscp_omsg& (0+255),b
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  8516  001F1A  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
  8517  001F1C  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  8518                           
  8519                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  8520  001F1E  0E22               	movlw	34
  8521  001F20  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8525  001F22  0ED2               	movlw	(_vscp_omsg+5)& (0+255)
  8526  001F24  ECFD  F028         	call	_vscp_getMatrixInfo
  8527  001F28  D61C               	goto	l9622
  8528  001F2A                     l9924:
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8532  001F2A  51BD               	movf	_vscp_nickname& (0+255),w,b
  8533  001F2C  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  8534  001F30  62DF               	cpfseq	indf2,c
  8535  001F32  D0D9               	goto	l1268
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  8539  001F34  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  8543                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8544  001F36  C0BF  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8545  001F3A  0E0F               	movlw	15
  8546  001F3C  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8547  001F3E  0E04               	movlw	4
  8548  001F40  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8549  001F42  E312               	bnc	l9940
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  8553  001F44  C0C9  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1161
  8554  001F48  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),b
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  8558  001F4A  5197               	movf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),w,b
  8559  001F4C  1196               	iorwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8560  001F4E  E103               	bnz	l9936
  8561                           
  8562                           ; BSR set to: 0
  8563  001F50  0E01               	movlw	1
  8564  001F52  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),b
  8565  001F54  6B96               	clrf	vscp_handleProtocolEvent@bytes_1161& (0+255),b
  8566  001F56                     l9936:
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  8570  001F56  0E01               	movlw	1
  8571  001F58  5D96               	subwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8572  001F5A  0E01               	movlw	1
  8573  001F5C  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),w,b
  8574  001F5E  E307               	bnc	l9942
  8575                           
  8576                           ; BSR set to: 0
  8577  001F60  0E01               	movlw	1
  8578  001F62  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),b
  8579  001F64  0E00               	movlw	0
  8580  001F66  D002               	goto	L12
  8581  001F68                     l9940:
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;vscp_firmware.c: 1173: else {
  8585                           ;vscp_firmware.c: 1174: bytes = 1;
  8586  001F68  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),b
  8587  001F6A  0E01               	movlw	1
  8588  001F6C                     L12:
  8589  001F6C  6F96               	movwf	vscp_handleProtocolEvent@bytes_1161& (0+255),b
  8590  001F6E                     l9942:
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;vscp_firmware.c: 1175: }
  8594                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  8595  001F6E  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8596  001F72  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8600  001F76  D8B8               	call	PL24	;call to abstracted procedure
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  8604  001F78  0E07               	movlw	7
  8605  001F7A  6FCE               	movwf	(_vscp_omsg+1)& (0+255),b
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  8621  001F7C  D8C1               	call	PL40	;call to abstracted procedure
  8622  001F7E                     l9958:
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  8626  001F7E  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8627  001F80  5D96               	subwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8628  001F82  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8629  001F84  0E00               	movlw	0
  8630  001F86  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),w,b
  8631  001F88  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8632  001F8A  0E04               	movlw	4
  8633  001F8C  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8634  001F8E  0E00               	movlw	0
  8635  001F90  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8636  001F92  E302               	bnc	l9962
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  8640  001F94  0E04               	movlw	4
  8641  001F96  D002               	goto	L13
  8642  001F98                     l9962:
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;vscp_firmware.c: 1198: else {
  8646                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  8647  001F98  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8648  001F9A  5D96               	subwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8649  001F9C                     L13:
  8650  001F9C  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;vscp_firmware.c: 1200: }
  8654                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8655  001F9E  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8656  001FA0  0F84               	addlw	132
  8657  001FA2  6FCD               	movwf	_vscp_omsg& (0+255),b
  8658                           
  8659                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  8660                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  8661  001FA4  51C8               	movf	(_vscp_imsg+9)& (0+255),w,b
  8662  001FA6  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8663  001FA8  6FD5               	movwf	(_vscp_omsg+8)& (0+255),b
  8664                           
  8665                           ; BSR set to: 0
  8666                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8667  001FAA  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8668  001FAC  D00E               	goto	l9970
  8669  001FAE                     l9966:
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  8673                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8674  001FAE  51C8               	movf	(_vscp_imsg+9)& (0+255),w,b
  8675  001FB0  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8676  001FB2  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8677  001FB4  ECF0  F028         	call	_vscp_readRegister
  8678  001FB8  0100               	movlb	0	; () banked
  8679  001FBA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8680  001FBC  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8681  001FBE  0FD6               	addlw	low (_vscp_omsg+9)
  8682  001FC0  6ED9               	movwf	fsr2l,c
  8683  001FC2  6ADA               	clrf	fsr2h,c
  8684  001FC4  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8685                           
  8686                           ; BSR set to: 0
  8687  001FC8  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8688  001FCA                     l9970:
  8689                           
  8690                           ; BSR set to: 0
  8691  001FCA  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8692  001FCC  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8693  001FCE  E3EF               	bnc	l9966
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;vscp_firmware.c: 1211: }
  8697                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  8698  001FD0  EC40  F028         	call	_vscp_sendEvent	;wreg free
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  8702  001FD4  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8703  001FD6  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  8707  001FD8  2BD2               	incf	(_vscp_omsg+5)& (0+255),f,b
  8708                           
  8709                           ; BSR set to: 0
  8710                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  8711  001FDA  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8712  001FDC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8713  001FDE  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8714  001FE0  5196               	movf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8715  001FE2  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8716  001FE4  5197               	movf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),w,b
  8717  001FE6  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8718  001FE8  E3CA               	bnc	l9958
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  8722  001FEA  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8723  001FEE  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8724  001FF2  D079               	goto	l1268
  8725  001FF4                     l9980:
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8729  001FF4  51BD               	movf	_vscp_nickname& (0+255),w,b
  8730  001FF6  EE20  F0C5         	lfsr	2,_vscp_imsg+6
  8731  001FFA  62DF               	cpfseq	indf2,c
  8732  001FFC  D074               	goto	l1268
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;vscp_firmware.c: 1234: uint8_t i;
  8736                           ;vscp_firmware.c: 1235: uint16_t page_save;
  8737                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  8738  001FFE  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1166
  8739  002002  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1166+1
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8743  002006  D870               	call	PL24	;call to abstracted procedure
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  8747  002008  C0C8  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1165
  8748                           
  8749                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8750                           ;vscp_firmware.c: 1248: i++) {
  8751  00200C  D014               	goto	l9992
  8752  00200E                     l9988:
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8756                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8757  00200E  51C8               	movf	(_vscp_imsg+9)& (0+255),w,b
  8758  002010  08C9               	sublw	low (_vscp_imsg+10)
  8759  002012  2592               	addwf	vscp_handleProtocolEvent@i_1165& (0+255),w,b
  8760  002014  6ED9               	movwf	fsr2l,c
  8761  002016  6ADA               	clrf	fsr2h,c
  8762  002018  50DF               	movf	indf2,w,c
  8763  00201A  6E27               	movwf	?_vscp_writeRegister,c
  8764  00201C  5192               	movf	vscp_handleProtocolEvent@i_1165& (0+255),w,b
  8765  00201E  ECB0  F028         	call	_vscp_writeRegister
  8766  002022  0100               	movlb	0	; () banked
  8767  002024  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8768  002026  51C8               	movf	(_vscp_imsg+9)& (0+255),w,b
  8769  002028  08D6               	sublw	low (_vscp_omsg+9)
  8770  00202A  2592               	addwf	vscp_handleProtocolEvent@i_1165& (0+255),w,b
  8771  00202C  6ED9               	movwf	fsr2l,c
  8772  00202E  6ADA               	clrf	fsr2h,c
  8773  002030  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8774                           
  8775                           ; BSR set to: 0
  8776  002034  2B92               	incf	vscp_handleProtocolEvent@i_1165& (0+255),f,b
  8777  002036                     l9992:
  8778                           
  8779                           ; BSR set to: 0
  8780  002036  51BF               	movf	_vscp_imsg& (0+255),w,b
  8781  002038  0B0F               	andlw	15
  8782  00203A  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8783  00203C  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8784  00203E  51C8               	movf	(_vscp_imsg+9)& (0+255),w,b
  8785  002040  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8786  002042  0E00               	movlw	0
  8787  002044  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8788  002046  0EFC               	movlw	252
  8789  002048  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8790  00204A  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8791  00204C  0EFF               	movlw	255
  8792  00204E  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8793  002050  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8794  002052  5192               	movf	vscp_handleProtocolEvent@i_1165& (0+255),w,b
  8795  002054  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8796  002056  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8797  002058  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8798  00205A  0A80               	xorlw	128
  8799  00205C  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8800  00205E  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8801  002060  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8802  002062  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8803  002064  0A80               	xorlw	128
  8804  002066  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8805  002068  E3D2               	bnc	l9988
  8806                           
  8807                           ; BSR set to: 0
  8808                           ;vscp_firmware.c: 1251: }
  8809                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8810  00206A  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1166,_vscp_page_select
  8811  00206E  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1166+1,_vscp_page_select+1
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8815  002072  0E07               	movlw	7
  8816  002074  6FCE               	movwf	(_vscp_omsg+1)& (0+255),b
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8820  002076  51BF               	movf	_vscp_imsg& (0+255),w,b
  8821  002078  0B0F               	andlw	15
  8822  00207A  0F80               	addlw	128
  8823  00207C  6FCD               	movwf	_vscp_omsg& (0+255),b
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8839  00207E  D840               	call	PL40	;call to abstracted procedure
  8840                           
  8841                           ; BSR set to: 0
  8842                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8843  002080  C0C8  F0D5         	movff	_vscp_imsg+9,_vscp_omsg+8
  8844  002084  D56E               	goto	l9622
  8845  002086                     l10014:
  8846                           
  8847                           ; BSR set to: 0
  8848  002086  51C3               	movf	(_vscp_imsg+4)& (0+255),w,b
  8849                           
  8850                           ; Switch size 1, requested type "space"
  8851                           ; Number of cases is 16, Range of values is 1 to 38
  8852                           ; switch strategies available:
  8853                           ; Name         Instructions Cycles
  8854                           ; simple_byte           49    25 (average)
  8855                           ;	Chosen strategy is simple_byte
  8856  002088  0A01               	xorlw	1	; case 1
  8857  00208A  E101 D542          	bz	l9596
  8858  00208E  0A03               	xorlw	3	; case 2
  8859  002090  E101 D542          	bz	l9598
  8860  002094  0A04               	xorlw	4	; case 6
  8861  002096  E101 D542          	bz	l9600
  8862  00209A  0A0E               	xorlw	14	; case 8
  8863  00209C  E101 D542          	bz	l9602
  8864  0020A0  0A01               	xorlw	1	; case 9
  8865  0020A2  E101 D542          	bz	l9604
  8866  0020A6  0A02               	xorlw	2	; case 11
  8867  0020A8  E101 D562          	bz	l9638
  8868  0020AC  0A07               	xorlw	7	; case 12
  8869  0020AE  E101 D578          	bz	l9672
  8870  0020B2  0A1B               	xorlw	27	; case 23
  8871  0020B4  E101 D60D          	bz	l9730
  8872  0020B8  0A0F               	xorlw	15	; case 24
  8873  0020BA  E101 D621          	bz	l9736
  8874  0020BE  0A01               	xorlw	1	; case 25
  8875  0020C0  E101 D673          	bz	l9770
  8876  0020C4  0A04               	xorlw	4	; case 29
  8877  0020C6  E101 D69E          	bz	l9796
  8878  0020CA  0A03               	xorlw	3	; case 30
  8879  0020CC  E101 D6AB          	bz	l9812
  8880  0020D0  0A01               	xorlw	1	; case 31
  8881  0020D2  E101 D6B8          	bz	l9828
  8882  0020D6  0A3E               	xorlw	62	; case 33
  8883  0020D8  E101 D716          	bz	l9914
  8884  0020DC  0A04               	xorlw	4	; case 37
  8885  0020DE  E101 D724          	bz	l9924
  8886  0020E2  0A03               	xorlw	3	; case 38
  8887  0020E4  E087               	bz	l9980
  8888  0020E6                     l1268:
  8889  0020E6  0012               	return	
  8890  0020E8                     __end_of_vscp_handleProtocolEvent:
  8891                           	opt stack 0
  8892  0020E8                     PL24:
  8893                           	opt stack 21
  8894  0020E8  51C7               	movf	(_vscp_imsg+8)& (0+255),w,b
  8895  0020EA  C0C6  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8896  0020EE  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8897  0020F0  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8898  0020F4  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8899  0020F6  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8900  0020F8  6E46               	movwf	_vscp_page_select,c
  8901  0020FA  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8902  0020FC  6E47               	movwf	_vscp_page_select+1,c
  8903  0020FE  0012               	return	
  8904  002100                     __end_ofPL24:
  8905                           	opt stack 0
  8906  002100                     PL40:
  8907                           	opt stack 21
  8908  002100  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
  8909  002102  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  8910  002104  0E27               	movlw	39
  8911  002106  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  8912  002108  6BD2               	clrf	(_vscp_omsg+5)& (0+255),b
  8913  00210A  C0C6  F0D3         	movff	_vscp_imsg+7,_vscp_omsg+6
  8914  00210E  C0C7  F0D4         	movff	_vscp_imsg+8,_vscp_omsg+7
  8915  002112  0012               	return	
  8916  002114                     __end_ofPL40:
  8917                           	opt stack 0
  8918  002114                     PL74:
  8919                           	opt stack 21
  8920  002114  0E07               	movlw	7
  8921  002116  6FCE               	movwf	(_vscp_omsg+1)& (0+255),b
  8922  002118  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
  8923  00211A  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
  8924  00211C  0E1A               	movlw	26
  8925  00211E  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
  8926  002120  0C1A               	retlw	26
  8927  002122                     __end_ofPL74:
  8928                           	opt stack 0
  8929  002122                     PL90:
  8930                           	opt stack 21
  8931  002122  C098  F0D2         	movff	vscp_handleProtocolEvent@i_1157,_vscp_omsg+5
  8932  002126  0E01               	movlw	1
  8933  002128  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8934  00212A  0C01               	retlw	1
  8935  00212C                     __end_ofPL90:
  8936                           	opt stack 0
  8937                           tblptru	equ	0xFF8
  8938                           tblptrh	equ	0xFF7
  8939                           tblptrl	equ	0xFF6
  8940                           tablat	equ	0xFF5
  8941                           prodh	equ	0xFF4
  8942                           prodl	equ	0xFF3
  8943                           intcon	equ	0xFF2
  8944                           postinc0	equ	0xFEE
  8945                           wreg	equ	0xFE8
  8946                           indf1	equ	0xFE7
  8947                           postdec1	equ	0xFE5
  8948                           fsr1h	equ	0xFE2
  8949                           fsr1l	equ	0xFE1
  8950                           indf2	equ	0xFDF
  8951                           postinc2	equ	0xFDE
  8952                           postdec2	equ	0xFDD
  8953                           plusw2	equ	0xFDB
  8954                           fsr2h	equ	0xFDA
  8955                           fsr2l	equ	0xFD9
  8956                           status	equ	0xFD8
  8957                           
  8958 ;; *************** function ___lbmod *****************
  8959 ;; Defined at:
  8960 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;  dividend        1    wreg     unsigned char 
  8963 ;;  divisor         1   13[COMRAM] unsigned char 
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;  dividend        1   14[COMRAM] unsigned char 
  8966 ;;  rem             1   16[COMRAM] unsigned char 
  8967 ;;  counter         1   15[COMRAM] unsigned char 
  8968 ;; Return value:  Size  Location     Type
  8969 ;;                  1    wreg      unsigned char 
  8970 ;; Registers used:
  8971 ;;		wreg, status,2, status,0
  8972 ;; Tracked objects:
  8973 ;;		On entry : F/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8977 ;;      Params:         1       0       0       0       0       0       0
  8978 ;;      Locals:         3       0       0       0       0       0       0
  8979 ;;      Temps:          0       0       0       0       0       0       0
  8980 ;;      Totals:         4       0       0       0       0       0       0
  8981 ;;Total ram usage:        4 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; Hardware stack levels required when called:    2
  8984 ;; This function calls:
  8985 ;;		Nothing
  8986 ;; This function is called by:
  8987 ;;		_vscp_handleProtocolEvent
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           	psect	text34
  8992  005058                     __ptext34:
  8993                           	opt stack 0
  8994  005058                     ___lbmod:
  8995                           	opt stack 26
  8996                           
  8997                           ;incstack = 0
  8998                           ;incstack = 0
  8999                           ;___lbmod@dividend stored from wreg
  9000  005058  CFE8 F00F          	movff	wreg,___lbmod@dividend
  9001                           
  9002                           ; BSR set to: 0
  9003  00505C  0E08               	movlw	8
  9004  00505E  6E10               	movwf	___lbmod@counter,c
  9005                           
  9006                           ; BSR set to: 0
  9007  005060  6A11               	clrf	___lbmod@rem,c
  9008  005062                     l9080:
  9009  005062  90D8               	bcf	status,0,c
  9010  005064  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  9011  005066  3411               	rlcf	___lbmod@rem& (0+255),w,c
  9012  005068  6E11               	movwf	___lbmod@rem,c
  9013  00506A  90D8               	bcf	status,0,c
  9014  00506C  360F               	rlcf	___lbmod@dividend,f,c
  9015  00506E  500E               	movf	___lbmod@divisor,w,c
  9016  005070  5C11               	subwf	___lbmod@rem,w,c
  9017  005072  E302               	bnc	l9088
  9018  005074  500E               	movf	___lbmod@divisor,w,c
  9019  005076  5E11               	subwf	___lbmod@rem,f,c
  9020  005078                     l9088:
  9021  005078  2E10               	decfsz	___lbmod@counter,f,c
  9022  00507A  D7F3               	goto	l9080
  9023  00507C  5011               	movf	___lbmod@rem,w,c
  9024  00507E  0012               	return	
  9025  005080                     __end_of___lbmod:
  9026                           	opt stack 0
  9027                           tblptru	equ	0xFF8
  9028                           tblptrh	equ	0xFF7
  9029                           tblptrl	equ	0xFF6
  9030                           tablat	equ	0xFF5
  9031                           prodh	equ	0xFF4
  9032                           prodl	equ	0xFF3
  9033                           intcon	equ	0xFF2
  9034                           postinc0	equ	0xFEE
  9035                           wreg	equ	0xFE8
  9036                           indf1	equ	0xFE7
  9037                           postdec1	equ	0xFE5
  9038                           fsr1h	equ	0xFE2
  9039                           fsr1l	equ	0xFE1
  9040                           indf2	equ	0xFDF
  9041                           postinc2	equ	0xFDE
  9042                           postdec2	equ	0xFDD
  9043                           plusw2	equ	0xFDB
  9044                           fsr2h	equ	0xFDA
  9045                           fsr2l	equ	0xFD9
  9046                           status	equ	0xFD8
  9047                           
  9048 ;; *************** function _vscp_writeRegister *****************
  9049 ;; Defined at:
  9050 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;  reg             1    wreg     unsigned char 
  9053 ;;  value           1   38[COMRAM] unsigned char 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  reg             1   39[COMRAM] unsigned char 
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  1    wreg      unsigned char 
  9058 ;; Registers used:
  9059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9060 ;; Tracked objects:
  9061 ;;		On entry : F/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9065 ;;      Params:         1       0       0       0       0       0       0
  9066 ;;      Locals:         1       0       0       0       0       0       0
  9067 ;;      Temps:          0       0       0       0       0       0       0
  9068 ;;      Totals:         2       0       0       0       0       0       0
  9069 ;;Total ram usage:        2 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; Hardware stack levels required when called:    6
  9072 ;; This function calls:
  9073 ;;		_vscp_writeAppReg
  9074 ;;		_vscp_writeStdReg
  9075 ;; This function is called by:
  9076 ;;		_vscp_handleProtocolEvent
  9077 ;; This function uses a non-reentrant model
  9078 ;;
  9079                           
  9080                           	psect	text35
  9081  005160                     __ptext35:
  9082                           	opt stack 0
  9083  005160                     _vscp_writeRegister:
  9084                           	opt stack 22
  9085                           
  9086                           ;incstack = 0
  9087                           ;incstack = 0
  9088                           ;vscp_writeRegister@reg stored from wreg
  9089  005160  CFE8 F028          	movff	wreg,vscp_writeRegister@reg
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  9093  005164  0E7F               	movlw	127
  9094  005166  6428               	cpfsgt	vscp_writeRegister@reg,c
  9095  005168  D006               	goto	l11212
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  9099  00516A  C027  F01B         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9100  00516E  5028               	movf	vscp_writeRegister@reg,w,c
  9101  005170  EC9F  F01E         	call	_vscp_writeStdReg
  9102  005174  D005               	goto	l1148
  9103  005176                     l11212:
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;vscp_firmware.c: 705: else {
  9107                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  9108  005176  C027  F023         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9109  00517A  5028               	movf	vscp_writeRegister@reg,w,c
  9110  00517C  EC37  F003         	call	_vscp_writeAppReg
  9111  005180                     l1148:
  9112  005180  0012               	return	
  9113  005182                     __end_of_vscp_writeRegister:
  9114                           	opt stack 0
  9115                           tblptru	equ	0xFF8
  9116                           tblptrh	equ	0xFF7
  9117                           tblptrl	equ	0xFF6
  9118                           tablat	equ	0xFF5
  9119                           prodh	equ	0xFF4
  9120                           prodl	equ	0xFF3
  9121                           intcon	equ	0xFF2
  9122                           postinc0	equ	0xFEE
  9123                           wreg	equ	0xFE8
  9124                           indf1	equ	0xFE7
  9125                           postdec1	equ	0xFE5
  9126                           fsr1h	equ	0xFE2
  9127                           fsr1l	equ	0xFE1
  9128                           indf2	equ	0xFDF
  9129                           postinc2	equ	0xFDE
  9130                           postdec2	equ	0xFDD
  9131                           plusw2	equ	0xFDB
  9132                           fsr2h	equ	0xFDA
  9133                           fsr2l	equ	0xFD9
  9134                           status	equ	0xFD8
  9135                           
  9136 ;; *************** function _vscp_writeStdReg *****************
  9137 ;; Defined at:
  9138 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;  reg             1    wreg     unsigned char 
  9141 ;;  value           1   26[COMRAM] unsigned char 
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;  reg             1   32[COMRAM] unsigned char 
  9144 ;;  rv              1   31[COMRAM] unsigned char 
  9145 ;; Return value:  Size  Location     Type
  9146 ;;                  1    wreg      unsigned char 
  9147 ;; Registers used:
  9148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9149 ;; Tracked objects:
  9150 ;;		On entry : F/0
  9151 ;;		On exit  : 0/0
  9152 ;;		Unchanged: 0/0
  9153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9154 ;;      Params:         1       0       0       0       0       0       0
  9155 ;;      Locals:         2       0       0       0       0       0       0
  9156 ;;      Temps:          4       0       0       0       0       0       0
  9157 ;;      Totals:         7       0       0       0       0       0       0
  9158 ;;Total ram usage:        7 bytes
  9159 ;; Hardware stack levels used:    1
  9160 ;; Hardware stack levels required when called:    5
  9161 ;; This function calls:
  9162 ;;		_vscp_getGUID
  9163 ;;		_vscp_setGUID
  9164 ;;		_vscp_getUserID
  9165 ;;		_vscp_setUserID
  9166 ;;		_vscp_getManufacturerId
  9167 ;;		_vscp_setManufacturerId
  9168 ;;		_vscp_restoreDefaults
  9169 ;; This function is called by:
  9170 ;;		_vscp_writeRegister
  9171 ;;		_vscp_handleProtocolEvent
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           	psect	text36
  9176  003D3E                     __ptext36:
  9177                           	opt stack 0
  9178  003D3E                     _vscp_writeStdReg:
  9179                           	opt stack 23
  9180                           
  9181                           ;incstack = 0
  9182                           ;incstack = 0
  9183                           ;vscp_writeStdReg@reg stored from wreg
  9184  003D3E  CFE8 F021          	movff	wreg,vscp_writeStdReg@reg
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  9188  003D42  1C1B               	comf	vscp_writeStdReg@value,w,c
  9189  003D44  6E20               	movwf	vscp_writeStdReg@rv,c
  9190                           
  9191                           ; BSR set to: 0
  9192                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  9193                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  9194  003D46  0E83               	movlw	131
  9195  003D48  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9196  003D4A  D00E               	goto	l11224
  9197                           
  9198                           ; BSR set to: 0
  9199  003D4C  0E89               	movlw	137
  9200  003D4E  6021               	cpfslt	vscp_writeStdReg@reg,c
  9201  003D50  D00B               	goto	l11224
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  9205  003D52  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9206  003D56  5021               	movf	vscp_writeStdReg@reg,w,c
  9207  003D58  0F7C               	addlw	124
  9208  003D5A  EC16  F029         	call	_vscp_setUserID
  9209                           
  9210                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  9211  003D5E  5021               	movf	vscp_writeStdReg@reg,w,c
  9212  003D60  0F7C               	addlw	124
  9213  003D62  EC50  F029         	call	_vscp_getUserID
  9214  003D66  D06B               	goto	L19
  9215  003D68                     l11224:
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  9219  003D68  5021               	movf	vscp_writeStdReg@reg,w,c
  9220  003D6A  0A92               	xorlw	146
  9221  003D6C  E10D               	bnz	l11230
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9225  003D6E  501B               	movf	vscp_writeStdReg@value,w,c
  9226  003D70  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9227  003D72  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9228  003D74  5046               	movf	_vscp_page_select,w,c
  9229  003D76  6E1E               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9230  003D78  6A1F               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9231  003D7A  101C               	iorwf	??_vscp_writeStdReg,w,c
  9232  003D7C  6E46               	movwf	_vscp_page_select,c
  9233  003D7E  501D               	movf	??_vscp_writeStdReg+1,w,c
  9234  003D80  101F               	iorwf	??_vscp_writeStdReg+3,w,c
  9235  003D82  6E47               	movwf	_vscp_page_select+1,c
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  9239  003D84  5047               	movf	_vscp_page_select+1,w,c
  9240  003D86  D05B               	goto	L19
  9241  003D88                     l11230:
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  9245  003D88  5021               	movf	vscp_writeStdReg@reg,w,c
  9246  003D8A  0A93               	xorlw	147
  9247  003D8C  E10B               	bnz	l11236
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9251  003D8E  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9252  003D90  5047               	movf	_vscp_page_select+1,w,c
  9253  003D92  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9254  003D94  501B               	movf	vscp_writeStdReg@value,w,c
  9255  003D96  101C               	iorwf	??_vscp_writeStdReg,w,c
  9256  003D98  6E46               	movwf	_vscp_page_select,c
  9257  003D9A  501D               	movf	??_vscp_writeStdReg+1,w,c
  9258  003D9C  6E47               	movwf	_vscp_page_select+1,c
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  9262  003D9E  C046  F020         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9263                           
  9264                           ;vscp_firmware.c: 737: }
  9265  003DA2  D050               	goto	l11278
  9266  003DA4                     l11236:
  9267                           
  9268                           ; BSR set to: 0
  9269                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  9270  003DA4  0E88               	movlw	136
  9271  003DA6  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9272  003DA8  D019               	goto	l11248
  9273                           
  9274                           ; BSR set to: 0
  9275  003DAA  0E91               	movlw	145
  9276  003DAC  6021               	cpfslt	vscp_writeStdReg@reg,c
  9277  003DAE  D016               	goto	l11248
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9281                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  9282  003DB0  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9283  003DB4  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9284  003DB8  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9285  003DBA  281D               	incf	??_vscp_writeStdReg+1,w,c
  9286  003DBC  E102               	bnz	l11244
  9287                           
  9288                           ; BSR set to: 0
  9289  003DBE  2846               	incf	_vscp_page_select,w,c
  9290  003DC0  E002               	bz	l11246
  9291  003DC2                     l11244:
  9292                           
  9293                           ; BSR set to: 0
  9294                           ;vscp_firmware.c: 747: rv = ~value;
  9295  003DC2  1C1B               	comf	vscp_writeStdReg@value,w,c
  9296  003DC4  D03C               	goto	L19
  9297  003DC6                     l11246:
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;vscp_firmware.c: 749: else {
  9301                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  9302  003DC6  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9303  003DCA  5021               	movf	vscp_writeStdReg@reg,w,c
  9304  003DCC  0F77               	addlw	119
  9305  003DCE  EC0A  F029         	call	_vscp_setManufacturerId
  9306                           
  9307                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  9308  003DD2  5021               	movf	vscp_writeStdReg@reg,w,c
  9309  003DD4  0F77               	addlw	119
  9310  003DD6  EC46  F029         	call	_vscp_getManufacturerId
  9311  003DDA  D031               	goto	L19
  9312  003DDC                     l11248:
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9316  003DDC  0ECF               	movlw	207
  9317  003DDE  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9318  003DE0  D017               	goto	l11260
  9319                           
  9320                           ; BSR set to: 0
  9321  003DE2  0EE0               	movlw	224
  9322  003DE4  6021               	cpfslt	vscp_writeStdReg@reg,c
  9323  003DE6  D014               	goto	l11260
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9327                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  9328  003DE8  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9329  003DEC  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9330  003DF0  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9331  003DF2  281D               	incf	??_vscp_writeStdReg+1,w,c
  9332  003DF4  E1E6               	bnz	l11244
  9333                           
  9334                           ; BSR set to: 0
  9335  003DF6  2846               	incf	_vscp_page_select,w,c
  9336  003DF8  E1E4               	bnz	l11244
  9337                           
  9338                           ; BSR set to: 0
  9339                           ;vscp_firmware.c: 762: else {
  9340                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  9341  003DFA  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9342  003DFE  5021               	movf	vscp_writeStdReg@reg,w,c
  9343  003E00  0F30               	addlw	48
  9344  003E02  ECC1  F028         	call	_vscp_setGUID
  9345                           
  9346                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  9347  003E06  5021               	movf	vscp_writeStdReg@reg,w,c
  9348  003E08  0F30               	addlw	48
  9349  003E0A  EC5A  F029         	call	_vscp_getGUID
  9350  003E0E  D017               	goto	L19
  9351  003E10                     l11260:
  9352                           
  9353                           ; BSR set to: 0
  9354                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  9355  003E10  5021               	movf	vscp_writeStdReg@reg,w,c
  9356  003E12  0AA2               	xorlw	162
  9357  003E14  E1D6               	bnz	l11244
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  9361  003E16  501B               	movf	vscp_writeStdReg@value,w,c
  9362  003E18  0A55               	xorlw	85
  9363  003E1A  E105               	bnz	l11268
  9364                           
  9365                           ; BSR set to: 0
  9366                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  9367  003E1C  0101               	movlb	1	; () banked
  9368  003E1E  6B10               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9369  003E20  6B11               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9370                           
  9371                           ; BSR set to: 1
  9372                           ;vscp_firmware.c: 771: rv = 0x55;
  9373  003E22  0E55               	movlw	85
  9374  003E24  D00C               	goto	L19
  9375  003E26                     l11268:
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  9379  003E26  501B               	movf	vscp_writeStdReg@value,w,c
  9380  003E28  0AAA               	xorlw	170
  9381  003E2A  E10C               	bnz	l11278
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  9385  003E2C  0EE8               	movlw	232
  9386  003E2E  0101               	movlb	1	; () banked
  9387  003E30  5D10               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9388  003E32  0E03               	movlw	3
  9389  003E34  5911               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9390  003E36  E205               	bc	l1174
  9391                           
  9392                           ; BSR set to: 1
  9393                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  9394  003E38  ECB9  F029         	call	_vscp_restoreDefaults	;wreg free
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;vscp_firmware.c: 776: rv = 0xaa;
  9398  003E3C  0EAA               	movlw	170
  9399  003E3E                     L19:
  9400  003E3E  6E20               	movwf	vscp_writeStdReg@rv,c
  9401                           
  9402                           ;vscp_firmware.c: 777: }
  9403  003E40  D001               	goto	l11278
  9404  003E42                     l1174:
  9405                           
  9406                           ; BSR set to: 1
  9407                           ;vscp_firmware.c: 778: else {
  9408                           ;vscp_firmware.c: 779: rv = 0;
  9409  003E42  6A20               	clrf	vscp_writeStdReg@rv,c
  9410  003E44                     l11278:
  9411                           
  9412                           ;vscp_firmware.c: 787: }
  9413                           ;vscp_firmware.c: 789: return rv;
  9414  003E44  5020               	movf	vscp_writeStdReg@rv,w,c
  9415  003E46  0012               	return	
  9416  003E48                     __end_of_vscp_writeStdReg:
  9417                           	opt stack 0
  9418                           tblptru	equ	0xFF8
  9419                           tblptrh	equ	0xFF7
  9420                           tblptrl	equ	0xFF6
  9421                           tablat	equ	0xFF5
  9422                           prodh	equ	0xFF4
  9423                           prodl	equ	0xFF3
  9424                           intcon	equ	0xFF2
  9425                           postinc0	equ	0xFEE
  9426                           wreg	equ	0xFE8
  9427                           indf1	equ	0xFE7
  9428                           postdec1	equ	0xFE5
  9429                           fsr1h	equ	0xFE2
  9430                           fsr1l	equ	0xFE1
  9431                           indf2	equ	0xFDF
  9432                           postinc2	equ	0xFDE
  9433                           postdec2	equ	0xFDD
  9434                           plusw2	equ	0xFDB
  9435                           fsr2h	equ	0xFDA
  9436                           fsr2l	equ	0xFD9
  9437                           status	equ	0xFD8
  9438                           
  9439 ;; *************** function _vscp_restoreDefaults *****************
  9440 ;; Defined at:
  9441 ;;		line 2832 in file "../main.c"
  9442 ;; Parameters:    Size  Location     Type
  9443 ;;		None
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;		None
  9446 ;; Return value:  Size  Location     Type
  9447 ;;		None               void
  9448 ;; Registers used:
  9449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9450 ;; Tracked objects:
  9451 ;;		On entry : F/1
  9452 ;;		On exit  : F/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9455 ;;      Params:         0       0       0       0       0       0       0
  9456 ;;      Locals:         0       0       0       0       0       0       0
  9457 ;;      Temps:          0       0       0       0       0       0       0
  9458 ;;      Totals:         0       0       0       0       0       0       0
  9459 ;;Total ram usage:        0 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; Hardware stack levels required when called:    4
  9462 ;; This function calls:
  9463 ;;		_init_app_eeprom
  9464 ;;		_init_app_ram
  9465 ;; This function is called by:
  9466 ;;		_vscp_writeStdReg
  9467 ;; This function uses a non-reentrant model
  9468 ;;
  9469                           
  9470                           	psect	text37
  9471  005372                     __ptext37:
  9472                           	opt stack 0
  9473  005372                     _vscp_restoreDefaults:
  9474                           	opt stack 23
  9475                           
  9476                           ; BSR set to: 1
  9477                           ;main.c: 2833: init_app_eeprom();
  9478                           
  9479                           ;incstack = 0
  9480                           ;incstack = 0
  9481  005372  EC96  F010         	call	_init_app_eeprom	;wreg free
  9482                           
  9483                           ;main.c: 2834: init_app_ram();
  9484  005376  EFCF  F026         	goto	_init_app_ram	;wreg free
  9485  00537A                     __end_of_vscp_restoreDefaults:
  9486                           	opt stack 0
  9487                           tblptru	equ	0xFF8
  9488                           tblptrh	equ	0xFF7
  9489                           tblptrl	equ	0xFF6
  9490                           tablat	equ	0xFF5
  9491                           prodh	equ	0xFF4
  9492                           prodl	equ	0xFF3
  9493                           intcon	equ	0xFF2
  9494                           postinc0	equ	0xFEE
  9495                           wreg	equ	0xFE8
  9496                           indf1	equ	0xFE7
  9497                           postdec1	equ	0xFE5
  9498                           fsr1h	equ	0xFE2
  9499                           fsr1l	equ	0xFE1
  9500                           indf2	equ	0xFDF
  9501                           postinc2	equ	0xFDE
  9502                           postdec2	equ	0xFDD
  9503                           plusw2	equ	0xFDB
  9504                           fsr2h	equ	0xFDA
  9505                           fsr2l	equ	0xFD9
  9506                           status	equ	0xFD8
  9507                           
  9508 ;; *************** function _init_app_eeprom *****************
  9509 ;; Defined at:
  9510 ;;		line 1013 in file "../main.c"
  9511 ;; Parameters:    Size  Location     Type
  9512 ;;		None
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;		None
  9515 ;; Return value:  Size  Location     Type
  9516 ;;		None               void
  9517 ;; Registers used:
  9518 ;;		wreg, status,2, cstack
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9524 ;;      Params:         0       0       0       0       0       0       0
  9525 ;;      Locals:         0       0       0       0       0       0       0
  9526 ;;      Temps:          0       0       0       0       0       0       0
  9527 ;;      Totals:         0       0       0       0       0       0       0
  9528 ;;Total ram usage:        0 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    3
  9531 ;; This function calls:
  9532 ;;		_writeEEPROM
  9533 ;; This function is called by:
  9534 ;;		_main
  9535 ;;		_vscp_restoreDefaults
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           	psect	text38
  9540  00212C                     __ptext38:
  9541                           	opt stack 0
  9542  00212C                     _init_app_eeprom:
  9543                           	opt stack 23
  9544                           
  9545                           ;main.c: 1015: writeEEPROM( 0x41, 0 );
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;incstack = 0
  9549                           ;incstack = 0
  9550  00212C  6A0F               	clrf	?_writeEEPROM+1,c
  9551  00212E  0E41               	movlw	65
  9552  002130  6E0E               	movwf	?_writeEEPROM,c
  9553  002132  0E00               	movlw	0
  9554  002134  6A10               	clrf	?_writeEEPROM+2,c
  9555  002136  EC67  F028         	call	_writeEEPROM	;wreg free
  9556                           
  9557                           ;main.c: 1016: writeEEPROM( 0x41, 0 );
  9558  00213A  6A0F               	clrf	?_writeEEPROM+1,c
  9559  00213C  0E41               	movlw	65
  9560  00213E  6E0E               	movwf	?_writeEEPROM,c
  9561  002140  0E00               	movlw	0
  9562  002142  6A10               	clrf	?_writeEEPROM+2,c
  9563  002144  EC67  F028         	call	_writeEEPROM	;wreg free
  9564                           
  9565                           ;main.c: 1018: writeEEPROM(0x43, 0b00000001);
  9566  002148  6A0F               	clrf	?_writeEEPROM+1,c
  9567  00214A  0E43               	movlw	67
  9568  00214C  6E0E               	movwf	?_writeEEPROM,c
  9569  00214E  0E01               	movlw	1
  9570  002150  6E10               	movwf	?_writeEEPROM+2,c
  9571  002152  EC67  F028         	call	_writeEEPROM	;wreg free
  9572                           
  9573                           ;main.c: 1019: writeEEPROM(0x44, 0b00000001);
  9574  002156  6A0F               	clrf	?_writeEEPROM+1,c
  9575  002158  0E44               	movlw	68
  9576  00215A  6E0E               	movwf	?_writeEEPROM,c
  9577  00215C  0E01               	movlw	1
  9578  00215E  6E10               	movwf	?_writeEEPROM+2,c
  9579  002160  EC67  F028         	call	_writeEEPROM	;wreg free
  9580                           
  9581                           ;main.c: 1020: writeEEPROM(0x45, 0b00000001);
  9582  002164  6A0F               	clrf	?_writeEEPROM+1,c
  9583  002166  0E45               	movlw	69
  9584  002168  6E0E               	movwf	?_writeEEPROM,c
  9585  00216A  0E01               	movlw	1
  9586  00216C  6E10               	movwf	?_writeEEPROM+2,c
  9587  00216E  EC67  F028         	call	_writeEEPROM	;wreg free
  9588                           
  9589                           ;main.c: 1021: writeEEPROM(0x46, 0b00000001);
  9590  002172  6A0F               	clrf	?_writeEEPROM+1,c
  9591  002174  0E46               	movlw	70
  9592  002176  6E0E               	movwf	?_writeEEPROM,c
  9593  002178  0E01               	movlw	1
  9594  00217A  6E10               	movwf	?_writeEEPROM+2,c
  9595  00217C  EC67  F028         	call	_writeEEPROM	;wreg free
  9596                           
  9597                           ;main.c: 1022: writeEEPROM(0x47, 0b00000001);
  9598  002180  6A0F               	clrf	?_writeEEPROM+1,c
  9599  002182  0E47               	movlw	71
  9600  002184  6E0E               	movwf	?_writeEEPROM,c
  9601  002186  0E01               	movlw	1
  9602  002188  6E10               	movwf	?_writeEEPROM+2,c
  9603  00218A  EC67  F028         	call	_writeEEPROM	;wreg free
  9604                           
  9605                           ;main.c: 1023: writeEEPROM(0x48, 0b00000001);
  9606  00218E  6A0F               	clrf	?_writeEEPROM+1,c
  9607  002190  0E48               	movlw	72
  9608  002192  6E0E               	movwf	?_writeEEPROM,c
  9609  002194  0E01               	movlw	1
  9610  002196  6E10               	movwf	?_writeEEPROM+2,c
  9611  002198  EC67  F028         	call	_writeEEPROM	;wreg free
  9612                           
  9613                           ;main.c: 1025: writeEEPROM(0x49, 30);
  9614  00219C  6A0F               	clrf	?_writeEEPROM+1,c
  9615  00219E  0E49               	movlw	73
  9616  0021A0  6E0E               	movwf	?_writeEEPROM,c
  9617  0021A2  0E1E               	movlw	30
  9618  0021A4  6E10               	movwf	?_writeEEPROM+2,c
  9619  0021A6  EC67  F028         	call	_writeEEPROM	;wreg free
  9620                           
  9621                           ;main.c: 1026: writeEEPROM(0x4A, 0);
  9622  0021AA  6A0F               	clrf	?_writeEEPROM+1,c
  9623  0021AC  0E4A               	movlw	74
  9624  0021AE  6E0E               	movwf	?_writeEEPROM,c
  9625  0021B0  0E00               	movlw	0
  9626  0021B2  6A10               	clrf	?_writeEEPROM+2,c
  9627  0021B4  EC67  F028         	call	_writeEEPROM	;wreg free
  9628                           
  9629                           ;main.c: 1027: writeEEPROM(0x4B, 0);
  9630  0021B8  6A0F               	clrf	?_writeEEPROM+1,c
  9631  0021BA  0E4B               	movlw	75
  9632  0021BC  6E0E               	movwf	?_writeEEPROM,c
  9633  0021BE  0E00               	movlw	0
  9634  0021C0  6A10               	clrf	?_writeEEPROM+2,c
  9635  0021C2  EC67  F028         	call	_writeEEPROM	;wreg free
  9636                           
  9637                           ;main.c: 1028: writeEEPROM(0x4C, 0);
  9638  0021C6  6A0F               	clrf	?_writeEEPROM+1,c
  9639  0021C8  0E4C               	movlw	76
  9640  0021CA  6E0E               	movwf	?_writeEEPROM,c
  9641  0021CC  0E00               	movlw	0
  9642  0021CE  6A10               	clrf	?_writeEEPROM+2,c
  9643  0021D0  EC67  F028         	call	_writeEEPROM	;wreg free
  9644                           
  9645                           ;main.c: 1029: writeEEPROM(0x4D, 0);
  9646  0021D4  6A0F               	clrf	?_writeEEPROM+1,c
  9647  0021D6  0E4D               	movlw	77
  9648  0021D8  6E0E               	movwf	?_writeEEPROM,c
  9649  0021DA  0E00               	movlw	0
  9650  0021DC  6A10               	clrf	?_writeEEPROM+2,c
  9651  0021DE  EC67  F028         	call	_writeEEPROM	;wreg free
  9652                           
  9653                           ;main.c: 1030: writeEEPROM(0x4E, 0);
  9654  0021E2  6A0F               	clrf	?_writeEEPROM+1,c
  9655  0021E4  0E4E               	movlw	78
  9656  0021E6  6E0E               	movwf	?_writeEEPROM,c
  9657  0021E8  0E00               	movlw	0
  9658  0021EA  6A10               	clrf	?_writeEEPROM+2,c
  9659  0021EC  EC67  F028         	call	_writeEEPROM	;wreg free
  9660                           
  9661                           ;main.c: 1034: writeEEPROM(0x4F, 0x0F);
  9662  0021F0  6A0F               	clrf	?_writeEEPROM+1,c
  9663  0021F2  0E4F               	movlw	79
  9664  0021F4  6E0E               	movwf	?_writeEEPROM,c
  9665  0021F6  0E0F               	movlw	15
  9666  0021F8  6E10               	movwf	?_writeEEPROM+2,c
  9667  0021FA  EC67  F028         	call	_writeEEPROM	;wreg free
  9668                           
  9669                           ;main.c: 1035: writeEEPROM(0x50, 0x68);
  9670  0021FE  6A0F               	clrf	?_writeEEPROM+1,c
  9671  002200  0E50               	movlw	80
  9672  002202  6E0E               	movwf	?_writeEEPROM,c
  9673  002204  0E68               	movlw	104
  9674  002206  6E10               	movwf	?_writeEEPROM+2,c
  9675  002208  EC67  F028         	call	_writeEEPROM	;wreg free
  9676                           
  9677                           ;main.c: 1037: writeEEPROM(0x51, 0x0D);
  9678  00220C  6A0F               	clrf	?_writeEEPROM+1,c
  9679  00220E  0E51               	movlw	81
  9680  002210  6E0E               	movwf	?_writeEEPROM,c
  9681  002212  0E0D               	movlw	13
  9682  002214  6E10               	movwf	?_writeEEPROM+2,c
  9683  002216  EC67  F028         	call	_writeEEPROM	;wreg free
  9684                           
  9685                           ;main.c: 1038: writeEEPROM(0x52, 0x7F);
  9686  00221A  6A0F               	clrf	?_writeEEPROM+1,c
  9687  00221C  0E52               	movlw	82
  9688  00221E  6E0E               	movwf	?_writeEEPROM,c
  9689  002220  0E7F               	movlw	127
  9690  002222  6E10               	movwf	?_writeEEPROM+2,c
  9691  002224  EC67  F028         	call	_writeEEPROM	;wreg free
  9692                           
  9693                           ;main.c: 1040: writeEEPROM(0x53, 0x0D);
  9694  002228  6A0F               	clrf	?_writeEEPROM+1,c
  9695  00222A  0E53               	movlw	83
  9696  00222C  6E0E               	movwf	?_writeEEPROM,c
  9697  00222E  0E0D               	movlw	13
  9698  002230  6E10               	movwf	?_writeEEPROM+2,c
  9699  002232  EC67  F028         	call	_writeEEPROM	;wreg free
  9700                           
  9701                           ;main.c: 1041: writeEEPROM(0x54, 0x7F);
  9702  002236  6A0F               	clrf	?_writeEEPROM+1,c
  9703  002238  0E54               	movlw	84
  9704  00223A  6E0E               	movwf	?_writeEEPROM,c
  9705  00223C  0E7F               	movlw	127
  9706  00223E  6E10               	movwf	?_writeEEPROM+2,c
  9707  002240  EC67  F028         	call	_writeEEPROM	;wreg free
  9708                           
  9709                           ;main.c: 1043: writeEEPROM(0x55, 0x0D);
  9710  002244  6A0F               	clrf	?_writeEEPROM+1,c
  9711  002246  0E55               	movlw	85
  9712  002248  6E0E               	movwf	?_writeEEPROM,c
  9713  00224A  0E0D               	movlw	13
  9714  00224C  6E10               	movwf	?_writeEEPROM+2,c
  9715  00224E  EC67  F028         	call	_writeEEPROM	;wreg free
  9716                           
  9717                           ;main.c: 1044: writeEEPROM(0x56, 0x7F);
  9718  002252  6A0F               	clrf	?_writeEEPROM+1,c
  9719  002254  0E56               	movlw	86
  9720  002256  6E0E               	movwf	?_writeEEPROM,c
  9721  002258  0E7F               	movlw	127
  9722  00225A  6E10               	movwf	?_writeEEPROM+2,c
  9723  00225C  EC67  F028         	call	_writeEEPROM	;wreg free
  9724                           
  9725                           ;main.c: 1046: writeEEPROM(0x57, 0x0D);
  9726  002260  6A0F               	clrf	?_writeEEPROM+1,c
  9727  002262  0E57               	movlw	87
  9728  002264  6E0E               	movwf	?_writeEEPROM,c
  9729  002266  0E0D               	movlw	13
  9730  002268  6E10               	movwf	?_writeEEPROM+2,c
  9731  00226A  EC67  F028         	call	_writeEEPROM	;wreg free
  9732                           
  9733                           ;main.c: 1047: writeEEPROM(0x58, 0x7F);
  9734  00226E  6A0F               	clrf	?_writeEEPROM+1,c
  9735  002270  0E58               	movlw	88
  9736  002272  6E0E               	movwf	?_writeEEPROM,c
  9737  002274  0E7F               	movlw	127
  9738  002276  6E10               	movwf	?_writeEEPROM+2,c
  9739  002278  EC67  F028         	call	_writeEEPROM	;wreg free
  9740                           
  9741                           ;main.c: 1049: writeEEPROM(0x59, 0x0D);
  9742  00227C  6A0F               	clrf	?_writeEEPROM+1,c
  9743  00227E  0E59               	movlw	89
  9744  002280  6E0E               	movwf	?_writeEEPROM,c
  9745  002282  0E0D               	movlw	13
  9746  002284  6E10               	movwf	?_writeEEPROM+2,c
  9747  002286  EC67  F028         	call	_writeEEPROM	;wreg free
  9748                           
  9749                           ;main.c: 1050: writeEEPROM(0x5A, 0x7F);
  9750  00228A  6A0F               	clrf	?_writeEEPROM+1,c
  9751  00228C  0E5A               	movlw	90
  9752  00228E  6E0E               	movwf	?_writeEEPROM,c
  9753  002290  0E7F               	movlw	127
  9754  002292  6E10               	movwf	?_writeEEPROM+2,c
  9755  002294  EC67  F028         	call	_writeEEPROM	;wreg free
  9756                           
  9757                           ;main.c: 1054: writeEEPROM(0x5B, 0x80);
  9758  002298  6A0F               	clrf	?_writeEEPROM+1,c
  9759  00229A  0E5B               	movlw	91
  9760  00229C  6E0E               	movwf	?_writeEEPROM,c
  9761  00229E  0E80               	movlw	128
  9762  0022A0  6E10               	movwf	?_writeEEPROM+2,c
  9763  0022A2  EC67  F028         	call	_writeEEPROM	;wreg free
  9764                           
  9765                           ;main.c: 1055: writeEEPROM(0x5C, 0xff);
  9766  0022A6  6A0F               	clrf	?_writeEEPROM+1,c
  9767  0022A8  0E5C               	movlw	92
  9768  0022AA  6E0E               	movwf	?_writeEEPROM,c
  9769  0022AC  0EFF               	movlw	255
  9770  0022AE  6810               	setf	?_writeEEPROM+2,c
  9771  0022B0  EC67  F028         	call	_writeEEPROM	;wreg free
  9772                           
  9773                           ;main.c: 1057: writeEEPROM(0x5D, 0x80);
  9774  0022B4  6A0F               	clrf	?_writeEEPROM+1,c
  9775  0022B6  0E5D               	movlw	93
  9776  0022B8  6E0E               	movwf	?_writeEEPROM,c
  9777  0022BA  0E80               	movlw	128
  9778  0022BC  6E10               	movwf	?_writeEEPROM+2,c
  9779  0022BE  EC67  F028         	call	_writeEEPROM	;wreg free
  9780                           
  9781                           ;main.c: 1058: writeEEPROM(0x5E, 0xff);
  9782  0022C2  6A0F               	clrf	?_writeEEPROM+1,c
  9783  0022C4  0E5E               	movlw	94
  9784  0022C6  6E0E               	movwf	?_writeEEPROM,c
  9785  0022C8  0EFF               	movlw	255
  9786  0022CA  6810               	setf	?_writeEEPROM+2,c
  9787  0022CC  EC67  F028         	call	_writeEEPROM	;wreg free
  9788                           
  9789                           ;main.c: 1060: writeEEPROM(0x5F, 0x80);
  9790  0022D0  6A0F               	clrf	?_writeEEPROM+1,c
  9791  0022D2  0E5F               	movlw	95
  9792  0022D4  6E0E               	movwf	?_writeEEPROM,c
  9793  0022D6  0E80               	movlw	128
  9794  0022D8  6E10               	movwf	?_writeEEPROM+2,c
  9795  0022DA  EC67  F028         	call	_writeEEPROM	;wreg free
  9796                           
  9797                           ;main.c: 1061: writeEEPROM(0x60, 0xff);
  9798  0022DE  6A0F               	clrf	?_writeEEPROM+1,c
  9799  0022E0  0E60               	movlw	96
  9800  0022E2  6E0E               	movwf	?_writeEEPROM,c
  9801  0022E4  0EFF               	movlw	255
  9802  0022E6  6810               	setf	?_writeEEPROM+2,c
  9803  0022E8  EC67  F028         	call	_writeEEPROM	;wreg free
  9804                           
  9805                           ;main.c: 1063: writeEEPROM(0x61, 0x80);
  9806  0022EC  6A0F               	clrf	?_writeEEPROM+1,c
  9807  0022EE  0E61               	movlw	97
  9808  0022F0  6E0E               	movwf	?_writeEEPROM,c
  9809  0022F2  0E80               	movlw	128
  9810  0022F4  6E10               	movwf	?_writeEEPROM+2,c
  9811  0022F6  EC67  F028         	call	_writeEEPROM	;wreg free
  9812                           
  9813                           ;main.c: 1064: writeEEPROM(0x62, 0xff);
  9814  0022FA  6A0F               	clrf	?_writeEEPROM+1,c
  9815  0022FC  0E62               	movlw	98
  9816  0022FE  6E0E               	movwf	?_writeEEPROM,c
  9817  002300  0EFF               	movlw	255
  9818  002302  6810               	setf	?_writeEEPROM+2,c
  9819  002304  EC67  F028         	call	_writeEEPROM	;wreg free
  9820                           
  9821                           ;main.c: 1066: writeEEPROM(0x63, 0x80);
  9822  002308  6A0F               	clrf	?_writeEEPROM+1,c
  9823  00230A  0E63               	movlw	99
  9824  00230C  6E0E               	movwf	?_writeEEPROM,c
  9825  00230E  0E80               	movlw	128
  9826  002310  6E10               	movwf	?_writeEEPROM+2,c
  9827  002312  EC67  F028         	call	_writeEEPROM	;wreg free
  9828                           
  9829                           ;main.c: 1067: writeEEPROM(0x64, 0xff);
  9830  002316  6A0F               	clrf	?_writeEEPROM+1,c
  9831  002318  0E64               	movlw	100
  9832  00231A  6E0E               	movwf	?_writeEEPROM,c
  9833  00231C  0EFF               	movlw	255
  9834  00231E  6810               	setf	?_writeEEPROM+2,c
  9835  002320  EC67  F028         	call	_writeEEPROM	;wreg free
  9836                           
  9837                           ;main.c: 1069: writeEEPROM(0x65, 0x80);
  9838  002324  6A0F               	clrf	?_writeEEPROM+1,c
  9839  002326  0E65               	movlw	101
  9840  002328  6E0E               	movwf	?_writeEEPROM,c
  9841  00232A  0E80               	movlw	128
  9842  00232C  6E10               	movwf	?_writeEEPROM+2,c
  9843  00232E  EC67  F028         	call	_writeEEPROM	;wreg free
  9844                           
  9845                           ;main.c: 1070: writeEEPROM(0x66, 0xff);
  9846  002332  6A0F               	clrf	?_writeEEPROM+1,c
  9847  002334  0E66               	movlw	102
  9848  002336  6E0E               	movwf	?_writeEEPROM,c
  9849  002338  0EFF               	movlw	255
  9850  00233A  6810               	setf	?_writeEEPROM+2,c
  9851  00233C  EC67  F028         	call	_writeEEPROM	;wreg free
  9852                           
  9853                           ;main.c: 1074: writeEEPROM(0x67, 0x7f);
  9854  002340  6A0F               	clrf	?_writeEEPROM+1,c
  9855  002342  0E67               	movlw	103
  9856  002344  6E0E               	movwf	?_writeEEPROM,c
  9857  002346  0E7F               	movlw	127
  9858  002348  6E10               	movwf	?_writeEEPROM+2,c
  9859  00234A  EC67  F028         	call	_writeEEPROM	;wreg free
  9860                           
  9861                           ;main.c: 1075: writeEEPROM(0x68, 0xff);
  9862  00234E  6A0F               	clrf	?_writeEEPROM+1,c
  9863  002350  0E68               	movlw	104
  9864  002352  6E0E               	movwf	?_writeEEPROM,c
  9865  002354  0EFF               	movlw	255
  9866  002356  6810               	setf	?_writeEEPROM+2,c
  9867  002358  EC67  F028         	call	_writeEEPROM	;wreg free
  9868                           
  9869                           ;main.c: 1077: writeEEPROM(0x69, 0x7f);
  9870  00235C  6A0F               	clrf	?_writeEEPROM+1,c
  9871  00235E  0E69               	movlw	105
  9872  002360  6E0E               	movwf	?_writeEEPROM,c
  9873  002362  0E7F               	movlw	127
  9874  002364  6E10               	movwf	?_writeEEPROM+2,c
  9875  002366  EC67  F028         	call	_writeEEPROM	;wreg free
  9876                           
  9877                           ;main.c: 1078: writeEEPROM(0x6A, 0xff);
  9878  00236A  6A0F               	clrf	?_writeEEPROM+1,c
  9879  00236C  0E6A               	movlw	106
  9880  00236E  6E0E               	movwf	?_writeEEPROM,c
  9881  002370  0EFF               	movlw	255
  9882  002372  6810               	setf	?_writeEEPROM+2,c
  9883  002374  EC67  F028         	call	_writeEEPROM	;wreg free
  9884                           
  9885                           ;main.c: 1080: writeEEPROM(0x6B, 0x7f);
  9886  002378  6A0F               	clrf	?_writeEEPROM+1,c
  9887  00237A  0E6B               	movlw	107
  9888  00237C  6E0E               	movwf	?_writeEEPROM,c
  9889  00237E  0E7F               	movlw	127
  9890  002380  6E10               	movwf	?_writeEEPROM+2,c
  9891  002382  EC67  F028         	call	_writeEEPROM	;wreg free
  9892                           
  9893                           ;main.c: 1081: writeEEPROM(0x6C, 0xff);
  9894  002386  6A0F               	clrf	?_writeEEPROM+1,c
  9895  002388  0E6C               	movlw	108
  9896  00238A  6E0E               	movwf	?_writeEEPROM,c
  9897  00238C  0EFF               	movlw	255
  9898  00238E  6810               	setf	?_writeEEPROM+2,c
  9899  002390  EC67  F028         	call	_writeEEPROM	;wreg free
  9900                           
  9901                           ;main.c: 1083: writeEEPROM(0x6D, 0x7f);
  9902  002394  6A0F               	clrf	?_writeEEPROM+1,c
  9903  002396  0E6D               	movlw	109
  9904  002398  6E0E               	movwf	?_writeEEPROM,c
  9905  00239A  0E7F               	movlw	127
  9906  00239C  6E10               	movwf	?_writeEEPROM+2,c
  9907  00239E  EC67  F028         	call	_writeEEPROM	;wreg free
  9908                           
  9909                           ;main.c: 1084: writeEEPROM(0x6E, 0xff);
  9910  0023A2  6A0F               	clrf	?_writeEEPROM+1,c
  9911  0023A4  0E6E               	movlw	110
  9912  0023A6  6E0E               	movwf	?_writeEEPROM,c
  9913  0023A8  0EFF               	movlw	255
  9914  0023AA  6810               	setf	?_writeEEPROM+2,c
  9915  0023AC  EC67  F028         	call	_writeEEPROM	;wreg free
  9916                           
  9917                           ;main.c: 1086: writeEEPROM(0x6F, 0x7f);
  9918  0023B0  6A0F               	clrf	?_writeEEPROM+1,c
  9919  0023B2  0E6F               	movlw	111
  9920  0023B4  6E0E               	movwf	?_writeEEPROM,c
  9921  0023B6  0E7F               	movlw	127
  9922  0023B8  6E10               	movwf	?_writeEEPROM+2,c
  9923  0023BA  EC67  F028         	call	_writeEEPROM	;wreg free
  9924                           
  9925                           ;main.c: 1087: writeEEPROM(0x70, 0xff);
  9926  0023BE  6A0F               	clrf	?_writeEEPROM+1,c
  9927  0023C0  0E70               	movlw	112
  9928  0023C2  6E0E               	movwf	?_writeEEPROM,c
  9929  0023C4  0EFF               	movlw	255
  9930  0023C6  6810               	setf	?_writeEEPROM+2,c
  9931  0023C8  EC67  F028         	call	_writeEEPROM	;wreg free
  9932                           
  9933                           ;main.c: 1089: writeEEPROM(0x71, 0x7f);
  9934  0023CC  6A0F               	clrf	?_writeEEPROM+1,c
  9935  0023CE  0E71               	movlw	113
  9936  0023D0  6E0E               	movwf	?_writeEEPROM,c
  9937  0023D2  0E7F               	movlw	127
  9938  0023D4  6E10               	movwf	?_writeEEPROM+2,c
  9939  0023D6  EC67  F028         	call	_writeEEPROM	;wreg free
  9940                           
  9941                           ;main.c: 1090: writeEEPROM(0x72, 0xff);
  9942  0023DA  6A0F               	clrf	?_writeEEPROM+1,c
  9943  0023DC  0E72               	movlw	114
  9944  0023DE  6E0E               	movwf	?_writeEEPROM,c
  9945  0023E0  0EFF               	movlw	255
  9946  0023E2  6810               	setf	?_writeEEPROM+2,c
  9947  0023E4  EC67  F028         	call	_writeEEPROM	;wreg free
  9948                           
  9949                           ;main.c: 1094: writeEEPROM(0x73, 0);
  9950  0023E8  6A0F               	clrf	?_writeEEPROM+1,c
  9951  0023EA  0E73               	movlw	115
  9952  0023EC  6E0E               	movwf	?_writeEEPROM,c
  9953  0023EE  0E00               	movlw	0
  9954  0023F0  6A10               	clrf	?_writeEEPROM+2,c
  9955  0023F2  EC67  F028         	call	_writeEEPROM	;wreg free
  9956                           
  9957                           ;main.c: 1095: writeEEPROM(0x74, 0);
  9958  0023F6  6A0F               	clrf	?_writeEEPROM+1,c
  9959  0023F8  0E74               	movlw	116
  9960  0023FA  6E0E               	movwf	?_writeEEPROM,c
  9961  0023FC  0E00               	movlw	0
  9962  0023FE  6A10               	clrf	?_writeEEPROM+2,c
  9963  002400  EC67  F028         	call	_writeEEPROM	;wreg free
  9964                           
  9965                           ;main.c: 1097: writeEEPROM(0x75, 0);
  9966  002404  6A0F               	clrf	?_writeEEPROM+1,c
  9967  002406  0E75               	movlw	117
  9968  002408  6E0E               	movwf	?_writeEEPROM,c
  9969  00240A  0E00               	movlw	0
  9970  00240C  6A10               	clrf	?_writeEEPROM+2,c
  9971  00240E  EC67  F028         	call	_writeEEPROM	;wreg free
  9972                           
  9973                           ;main.c: 1098: writeEEPROM(0x76, 0);
  9974  002412  6A0F               	clrf	?_writeEEPROM+1,c
  9975  002414  0E76               	movlw	118
  9976  002416  6E0E               	movwf	?_writeEEPROM,c
  9977  002418  0E00               	movlw	0
  9978  00241A  6A10               	clrf	?_writeEEPROM+2,c
  9979  00241C  EC67  F028         	call	_writeEEPROM	;wreg free
  9980                           
  9981                           ;main.c: 1100: writeEEPROM(0x77, 0);
  9982  002420  6A0F               	clrf	?_writeEEPROM+1,c
  9983  002422  0E77               	movlw	119
  9984  002424  6E0E               	movwf	?_writeEEPROM,c
  9985  002426  0E00               	movlw	0
  9986  002428  6A10               	clrf	?_writeEEPROM+2,c
  9987  00242A  EC67  F028         	call	_writeEEPROM	;wreg free
  9988                           
  9989                           ;main.c: 1101: writeEEPROM(0x78, 0);
  9990  00242E  6A0F               	clrf	?_writeEEPROM+1,c
  9991  002430  0E78               	movlw	120
  9992  002432  6E0E               	movwf	?_writeEEPROM,c
  9993  002434  0E00               	movlw	0
  9994  002436  6A10               	clrf	?_writeEEPROM+2,c
  9995  002438  EC67  F028         	call	_writeEEPROM	;wreg free
  9996                           
  9997                           ;main.c: 1103: writeEEPROM(0x79, 0);
  9998  00243C  6A0F               	clrf	?_writeEEPROM+1,c
  9999  00243E  0E79               	movlw	121
 10000  002440  6E0E               	movwf	?_writeEEPROM,c
 10001  002442  0E00               	movlw	0
 10002  002444  6A10               	clrf	?_writeEEPROM+2,c
 10003  002446  EC67  F028         	call	_writeEEPROM	;wreg free
 10004                           
 10005                           ;main.c: 1104: writeEEPROM(0x7A, 0);
 10006  00244A  6A0F               	clrf	?_writeEEPROM+1,c
 10007  00244C  0E7A               	movlw	122
 10008  00244E  6E0E               	movwf	?_writeEEPROM,c
 10009  002450  0E00               	movlw	0
 10010  002452  6A10               	clrf	?_writeEEPROM+2,c
 10011  002454  EC67  F028         	call	_writeEEPROM	;wreg free
 10012                           
 10013                           ;main.c: 1106: writeEEPROM(0x7B, 0);
 10014  002458  6A0F               	clrf	?_writeEEPROM+1,c
 10015  00245A  0E7B               	movlw	123
 10016  00245C  6E0E               	movwf	?_writeEEPROM,c
 10017  00245E  0E00               	movlw	0
 10018  002460  6A10               	clrf	?_writeEEPROM+2,c
 10019  002462  EC67  F028         	call	_writeEEPROM	;wreg free
 10020                           
 10021                           ;main.c: 1107: writeEEPROM(0x7C, 0);
 10022  002466  6A0F               	clrf	?_writeEEPROM+1,c
 10023  002468  0E7C               	movlw	124
 10024  00246A  6E0E               	movwf	?_writeEEPROM,c
 10025  00246C  0E00               	movlw	0
 10026  00246E  6A10               	clrf	?_writeEEPROM+2,c
 10027  002470  EC67  F028         	call	_writeEEPROM	;wreg free
 10028                           
 10029                           ;main.c: 1109: writeEEPROM(0x7D, 0);
 10030  002474  6A0F               	clrf	?_writeEEPROM+1,c
 10031  002476  0E7D               	movlw	125
 10032  002478  6E0E               	movwf	?_writeEEPROM,c
 10033  00247A  0E00               	movlw	0
 10034  00247C  6A10               	clrf	?_writeEEPROM+2,c
 10035  00247E  EC67  F028         	call	_writeEEPROM	;wreg free
 10036                           
 10037                           ;main.c: 1110: writeEEPROM(0x7E, 0);
 10038  002482  6A0F               	clrf	?_writeEEPROM+1,c
 10039  002484  0E7E               	movlw	126
 10040  002486  6E0E               	movwf	?_writeEEPROM,c
 10041  002488  0E00               	movlw	0
 10042  00248A  6A10               	clrf	?_writeEEPROM+2,c
 10043  00248C  EC67  F028         	call	_writeEEPROM	;wreg free
 10044                           
 10045                           ;main.c: 1114: writeEEPROM(0x7F, 0x7f);
 10046  002490  6A0F               	clrf	?_writeEEPROM+1,c
 10047  002492  0E7F               	movlw	127
 10048  002494  6E0E               	movwf	?_writeEEPROM,c
 10049  002496  6E10               	movwf	?_writeEEPROM+2,c
 10050  002498  EC67  F028         	call	_writeEEPROM	;wreg free
 10051                           
 10052                           ;main.c: 1115: writeEEPROM(0x80, 0xff);
 10053  00249C  6A0F               	clrf	?_writeEEPROM+1,c
 10054  00249E  0E80               	movlw	128
 10055  0024A0  6E0E               	movwf	?_writeEEPROM,c
 10056  0024A2  0EFF               	movlw	255
 10057  0024A4  6810               	setf	?_writeEEPROM+2,c
 10058  0024A6  EC67  F028         	call	_writeEEPROM	;wreg free
 10059                           
 10060                           ;main.c: 1117: writeEEPROM(0x81, 0x7f);
 10061  0024AA  6A0F               	clrf	?_writeEEPROM+1,c
 10062  0024AC  0E81               	movlw	129
 10063  0024AE  6E0E               	movwf	?_writeEEPROM,c
 10064  0024B0  0E7F               	movlw	127
 10065  0024B2  6E10               	movwf	?_writeEEPROM+2,c
 10066  0024B4  EC67  F028         	call	_writeEEPROM	;wreg free
 10067                           
 10068                           ;main.c: 1118: writeEEPROM(0x82, 0xff);
 10069  0024B8  6A0F               	clrf	?_writeEEPROM+1,c
 10070  0024BA  0E82               	movlw	130
 10071  0024BC  6E0E               	movwf	?_writeEEPROM,c
 10072  0024BE  0EFF               	movlw	255
 10073  0024C0  6810               	setf	?_writeEEPROM+2,c
 10074  0024C2  EC67  F028         	call	_writeEEPROM	;wreg free
 10075                           
 10076                           ;main.c: 1120: writeEEPROM(0x83, 0x7f);
 10077  0024C6  6A0F               	clrf	?_writeEEPROM+1,c
 10078  0024C8  0E83               	movlw	131
 10079  0024CA  6E0E               	movwf	?_writeEEPROM,c
 10080  0024CC  0E7F               	movlw	127
 10081  0024CE  6E10               	movwf	?_writeEEPROM+2,c
 10082  0024D0  EC67  F028         	call	_writeEEPROM	;wreg free
 10083                           
 10084                           ;main.c: 1121: writeEEPROM(0x84, 0xff);
 10085  0024D4  6A0F               	clrf	?_writeEEPROM+1,c
 10086  0024D6  0E84               	movlw	132
 10087  0024D8  6E0E               	movwf	?_writeEEPROM,c
 10088  0024DA  0EFF               	movlw	255
 10089  0024DC  6810               	setf	?_writeEEPROM+2,c
 10090  0024DE  EC67  F028         	call	_writeEEPROM	;wreg free
 10091                           
 10092                           ;main.c: 1123: writeEEPROM(0x85, 0x7f);
 10093  0024E2  6A0F               	clrf	?_writeEEPROM+1,c
 10094  0024E4  0E85               	movlw	133
 10095  0024E6  6E0E               	movwf	?_writeEEPROM,c
 10096  0024E8  0E7F               	movlw	127
 10097  0024EA  6E10               	movwf	?_writeEEPROM+2,c
 10098  0024EC  EC67  F028         	call	_writeEEPROM	;wreg free
 10099                           
 10100                           ;main.c: 1124: writeEEPROM(0x86, 0xff);
 10101  0024F0  6A0F               	clrf	?_writeEEPROM+1,c
 10102  0024F2  0E86               	movlw	134
 10103  0024F4  6E0E               	movwf	?_writeEEPROM,c
 10104  0024F6  0EFF               	movlw	255
 10105  0024F8  6810               	setf	?_writeEEPROM+2,c
 10106  0024FA  EC67  F028         	call	_writeEEPROM	;wreg free
 10107                           
 10108                           ;main.c: 1126: writeEEPROM(0x87, 0x7f);
 10109  0024FE  6A0F               	clrf	?_writeEEPROM+1,c
 10110  002500  0E87               	movlw	135
 10111  002502  6E0E               	movwf	?_writeEEPROM,c
 10112  002504  0E7F               	movlw	127
 10113  002506  6E10               	movwf	?_writeEEPROM+2,c
 10114  002508  EC67  F028         	call	_writeEEPROM	;wreg free
 10115                           
 10116                           ;main.c: 1127: writeEEPROM(0x88, 0xff);
 10117  00250C  6A0F               	clrf	?_writeEEPROM+1,c
 10118  00250E  0E88               	movlw	136
 10119  002510  6E0E               	movwf	?_writeEEPROM,c
 10120  002512  0EFF               	movlw	255
 10121  002514  6810               	setf	?_writeEEPROM+2,c
 10122  002516  EC67  F028         	call	_writeEEPROM	;wreg free
 10123                           
 10124                           ;main.c: 1129: writeEEPROM(0x89, 0x7f);
 10125  00251A  6A0F               	clrf	?_writeEEPROM+1,c
 10126  00251C  0E89               	movlw	137
 10127  00251E  6E0E               	movwf	?_writeEEPROM,c
 10128  002520  0E7F               	movlw	127
 10129  002522  6E10               	movwf	?_writeEEPROM+2,c
 10130  002524  EC67  F028         	call	_writeEEPROM	;wreg free
 10131                           
 10132                           ;main.c: 1130: writeEEPROM(0x8A, 0xff);
 10133  002528  6A0F               	clrf	?_writeEEPROM+1,c
 10134  00252A  0E8A               	movlw	138
 10135  00252C  6E0E               	movwf	?_writeEEPROM,c
 10136  00252E  0EFF               	movlw	255
 10137  002530  6810               	setf	?_writeEEPROM+2,c
 10138  002532  EC67  F028         	call	_writeEEPROM	;wreg free
 10139                           
 10140                           ;main.c: 1134: writeEEPROM(0x8B, 0x80);
 10141  002536  6A0F               	clrf	?_writeEEPROM+1,c
 10142  002538  0E8B               	movlw	139
 10143  00253A  6E0E               	movwf	?_writeEEPROM,c
 10144  00253C  0E80               	movlw	128
 10145  00253E  6E10               	movwf	?_writeEEPROM+2,c
 10146  002540  EC67  F028         	call	_writeEEPROM	;wreg free
 10147                           
 10148                           ;main.c: 1135: writeEEPROM(0x8C, 0x00);
 10149  002544  6A0F               	clrf	?_writeEEPROM+1,c
 10150  002546  0E8C               	movlw	140
 10151  002548  6E0E               	movwf	?_writeEEPROM,c
 10152  00254A  0E00               	movlw	0
 10153  00254C  6A10               	clrf	?_writeEEPROM+2,c
 10154  00254E  EC67  F028         	call	_writeEEPROM	;wreg free
 10155                           
 10156                           ;main.c: 1137: writeEEPROM(0x8D, 0x80);
 10157  002552  6A0F               	clrf	?_writeEEPROM+1,c
 10158  002554  0E8D               	movlw	141
 10159  002556  6E0E               	movwf	?_writeEEPROM,c
 10160  002558  0E80               	movlw	128
 10161  00255A  6E10               	movwf	?_writeEEPROM+2,c
 10162  00255C  EC67  F028         	call	_writeEEPROM	;wreg free
 10163                           
 10164                           ;main.c: 1138: writeEEPROM(0x8E, 0x00);
 10165  002560  6A0F               	clrf	?_writeEEPROM+1,c
 10166  002562  0E8E               	movlw	142
 10167  002564  6E0E               	movwf	?_writeEEPROM,c
 10168  002566  0E00               	movlw	0
 10169  002568  6A10               	clrf	?_writeEEPROM+2,c
 10170  00256A  EC67  F028         	call	_writeEEPROM	;wreg free
 10171                           
 10172                           ;main.c: 1140: writeEEPROM(0x8F, 0x80);
 10173  00256E  6A0F               	clrf	?_writeEEPROM+1,c
 10174  002570  0E8F               	movlw	143
 10175  002572  6E0E               	movwf	?_writeEEPROM,c
 10176  002574  0E80               	movlw	128
 10177  002576  6E10               	movwf	?_writeEEPROM+2,c
 10178  002578  EC67  F028         	call	_writeEEPROM	;wreg free
 10179                           
 10180                           ;main.c: 1141: writeEEPROM(0x90, 0x00);
 10181  00257C  6A0F               	clrf	?_writeEEPROM+1,c
 10182  00257E  0E90               	movlw	144
 10183  002580  6E0E               	movwf	?_writeEEPROM,c
 10184  002582  0E00               	movlw	0
 10185  002584  6A10               	clrf	?_writeEEPROM+2,c
 10186  002586  EC67  F028         	call	_writeEEPROM	;wreg free
 10187                           
 10188                           ;main.c: 1143: writeEEPROM(0x91, 0x80);
 10189  00258A  6A0F               	clrf	?_writeEEPROM+1,c
 10190  00258C  0E91               	movlw	145
 10191  00258E  6E0E               	movwf	?_writeEEPROM,c
 10192  002590  0E80               	movlw	128
 10193  002592  6E10               	movwf	?_writeEEPROM+2,c
 10194  002594  EC67  F028         	call	_writeEEPROM	;wreg free
 10195                           
 10196                           ;main.c: 1144: writeEEPROM(0x92, 0x00);
 10197  002598  6A0F               	clrf	?_writeEEPROM+1,c
 10198  00259A  0E92               	movlw	146
 10199  00259C  6E0E               	movwf	?_writeEEPROM,c
 10200  00259E  0E00               	movlw	0
 10201  0025A0  6A10               	clrf	?_writeEEPROM+2,c
 10202  0025A2  EC67  F028         	call	_writeEEPROM	;wreg free
 10203                           
 10204                           ;main.c: 1146: writeEEPROM(0x93, 0x80);
 10205  0025A6  6A0F               	clrf	?_writeEEPROM+1,c
 10206  0025A8  0E93               	movlw	147
 10207  0025AA  6E0E               	movwf	?_writeEEPROM,c
 10208  0025AC  0E80               	movlw	128
 10209  0025AE  6E10               	movwf	?_writeEEPROM+2,c
 10210  0025B0  EC67  F028         	call	_writeEEPROM	;wreg free
 10211                           
 10212                           ;main.c: 1147: writeEEPROM(0x94, 0x00);
 10213  0025B4  6A0F               	clrf	?_writeEEPROM+1,c
 10214  0025B6  0E94               	movlw	148
 10215  0025B8  6E0E               	movwf	?_writeEEPROM,c
 10216  0025BA  0E00               	movlw	0
 10217  0025BC  6A10               	clrf	?_writeEEPROM+2,c
 10218  0025BE  EC67  F028         	call	_writeEEPROM	;wreg free
 10219                           
 10220                           ;main.c: 1149: writeEEPROM(0x95, 0x80);
 10221  0025C2  6A0F               	clrf	?_writeEEPROM+1,c
 10222  0025C4  0E95               	movlw	149
 10223  0025C6  6E0E               	movwf	?_writeEEPROM,c
 10224  0025C8  0E80               	movlw	128
 10225  0025CA  6E10               	movwf	?_writeEEPROM+2,c
 10226  0025CC  EC67  F028         	call	_writeEEPROM	;wreg free
 10227                           
 10228                           ;main.c: 1150: writeEEPROM(0x96, 0x00);
 10229  0025D0  6A0F               	clrf	?_writeEEPROM+1,c
 10230  0025D2  0E96               	movlw	150
 10231  0025D4  6E0E               	movwf	?_writeEEPROM,c
 10232  0025D6  0E00               	movlw	0
 10233  0025D8  6A10               	clrf	?_writeEEPROM+2,c
 10234  0025DA  EC67  F028         	call	_writeEEPROM	;wreg free
 10235                           
 10236                           ;main.c: 1154: writeEEPROM(0x97, 2);
 10237  0025DE  6A0F               	clrf	?_writeEEPROM+1,c
 10238  0025E0  0E97               	movlw	151
 10239  0025E2  6E0E               	movwf	?_writeEEPROM,c
 10240  0025E4  0E02               	movlw	2
 10241  0025E6  6E10               	movwf	?_writeEEPROM+2,c
 10242  0025E8  EC67  F028         	call	_writeEEPROM	;wreg free
 10243                           
 10244                           ;main.c: 1155: writeEEPROM(0x98, 2);
 10245  0025EC  6A0F               	clrf	?_writeEEPROM+1,c
 10246  0025EE  0E98               	movlw	152
 10247  0025F0  6E0E               	movwf	?_writeEEPROM,c
 10248  0025F2  0E02               	movlw	2
 10249  0025F4  6E10               	movwf	?_writeEEPROM+2,c
 10250  0025F6  EC67  F028         	call	_writeEEPROM	;wreg free
 10251                           
 10252                           ;main.c: 1156: writeEEPROM(0x99, 2);
 10253  0025FA  6A0F               	clrf	?_writeEEPROM+1,c
 10254  0025FC  0E99               	movlw	153
 10255  0025FE  6E0E               	movwf	?_writeEEPROM,c
 10256  002600  0E02               	movlw	2
 10257  002602  6E10               	movwf	?_writeEEPROM+2,c
 10258  002604  EC67  F028         	call	_writeEEPROM	;wreg free
 10259                           
 10260                           ;main.c: 1157: writeEEPROM(0x9A, 2);
 10261  002608  6A0F               	clrf	?_writeEEPROM+1,c
 10262  00260A  0E9A               	movlw	154
 10263  00260C  6E0E               	movwf	?_writeEEPROM,c
 10264  00260E  0E02               	movlw	2
 10265  002610  6E10               	movwf	?_writeEEPROM+2,c
 10266  002612  EC67  F028         	call	_writeEEPROM	;wreg free
 10267                           
 10268                           ;main.c: 1158: writeEEPROM(0x9B, 2);
 10269  002616  6A0F               	clrf	?_writeEEPROM+1,c
 10270  002618  0E9B               	movlw	155
 10271  00261A  6E0E               	movwf	?_writeEEPROM,c
 10272  00261C  0E02               	movlw	2
 10273  00261E  6E10               	movwf	?_writeEEPROM+2,c
 10274  002620  EC67  F028         	call	_writeEEPROM	;wreg free
 10275                           
 10276                           ;main.c: 1159: writeEEPROM(0x9C, 2);
 10277  002624  6A0F               	clrf	?_writeEEPROM+1,c
 10278  002626  0E9C               	movlw	156
 10279  002628  6E0E               	movwf	?_writeEEPROM,c
 10280  00262A  0E02               	movlw	2
 10281  00262C  6E10               	movwf	?_writeEEPROM+2,c
 10282  00262E  EC67  F028         	call	_writeEEPROM	;wreg free
 10283                           
 10284                           ;main.c: 1163: writeEEPROM(0xF2, 0xc3);
 10285  002632  6A0F               	clrf	?_writeEEPROM+1,c
 10286  002634  0EF2               	movlw	242
 10287  002636  6E0E               	movwf	?_writeEEPROM,c
 10288  002638  0EC3               	movlw	195
 10289  00263A  6E10               	movwf	?_writeEEPROM+2,c
 10290  00263C  EC67  F028         	call	_writeEEPROM	;wreg free
 10291                           
 10292                           ;main.c: 1164: writeEEPROM(0xF3, 0x50);
 10293  002640  6A0F               	clrf	?_writeEEPROM+1,c
 10294  002642  0EF3               	movlw	243
 10295  002644  6E0E               	movwf	?_writeEEPROM,c
 10296  002646  0E50               	movlw	80
 10297  002648  6E10               	movwf	?_writeEEPROM+2,c
 10298  00264A  EC67  F028         	call	_writeEEPROM	;wreg free
 10299                           
 10300                           ;main.c: 1168: writeEEPROM(0x9E, 0);
 10301  00264E  6A0F               	clrf	?_writeEEPROM+1,c
 10302  002650  0E9E               	movlw	158
 10303  002652  6E0E               	movwf	?_writeEEPROM,c
 10304  002654  0E00               	movlw	0
 10305  002656  6A10               	clrf	?_writeEEPROM+2,c
 10306  002658  EC67  F028         	call	_writeEEPROM	;wreg free
 10307                           
 10308                           ;main.c: 1169: writeEEPROM(0x9F, 0);
 10309  00265C  6A0F               	clrf	?_writeEEPROM+1,c
 10310  00265E  0E9F               	movlw	159
 10311  002660  6E0E               	movwf	?_writeEEPROM,c
 10312  002662  0E00               	movlw	0
 10313  002664  6A10               	clrf	?_writeEEPROM+2,c
 10314  002666  EC67  F028         	call	_writeEEPROM	;wreg free
 10315                           
 10316                           ;main.c: 1170: writeEEPROM(0xA0, 0);
 10317  00266A  6A0F               	clrf	?_writeEEPROM+1,c
 10318  00266C  0EA0               	movlw	160
 10319  00266E  6E0E               	movwf	?_writeEEPROM,c
 10320  002670  0E00               	movlw	0
 10321  002672  6A10               	clrf	?_writeEEPROM+2,c
 10322  002674  EC67  F028         	call	_writeEEPROM	;wreg free
 10323                           
 10324                           ;main.c: 1171: writeEEPROM(0xA1, 0);
 10325  002678  6A0F               	clrf	?_writeEEPROM+1,c
 10326  00267A  0EA1               	movlw	161
 10327  00267C  6E0E               	movwf	?_writeEEPROM,c
 10328  00267E  0E00               	movlw	0
 10329  002680  6A10               	clrf	?_writeEEPROM+2,c
 10330  002682  EC67  F028         	call	_writeEEPROM	;wreg free
 10331                           
 10332                           ;main.c: 1172: writeEEPROM(0xA2, 0);
 10333  002686  6A0F               	clrf	?_writeEEPROM+1,c
 10334  002688  0EA2               	movlw	162
 10335  00268A  6E0E               	movwf	?_writeEEPROM,c
 10336  00268C  0E00               	movlw	0
 10337  00268E  6A10               	clrf	?_writeEEPROM+2,c
 10338  002690  EC67  F028         	call	_writeEEPROM	;wreg free
 10339                           
 10340                           ;main.c: 1173: writeEEPROM(0xA3, 0);
 10341  002694  6A0F               	clrf	?_writeEEPROM+1,c
 10342  002696  0EA3               	movlw	163
 10343  002698  6E0E               	movwf	?_writeEEPROM,c
 10344  00269A  0E00               	movlw	0
 10345  00269C  6A10               	clrf	?_writeEEPROM+2,c
 10346  00269E  EC67  F028         	call	_writeEEPROM	;wreg free
 10347                           
 10348                           ;main.c: 1174: writeEEPROM(0xA4, 0);
 10349  0026A2  6A0F               	clrf	?_writeEEPROM+1,c
 10350  0026A4  0EA4               	movlw	164
 10351  0026A6  6E0E               	movwf	?_writeEEPROM,c
 10352  0026A8  0E00               	movlw	0
 10353  0026AA  6A10               	clrf	?_writeEEPROM+2,c
 10354  0026AC  EC67  F028         	call	_writeEEPROM	;wreg free
 10355                           
 10356                           ;main.c: 1175: writeEEPROM(0xA5, 0);
 10357  0026B0  6A0F               	clrf	?_writeEEPROM+1,c
 10358  0026B2  0EA5               	movlw	165
 10359  0026B4  6E0E               	movwf	?_writeEEPROM,c
 10360  0026B6  0E00               	movlw	0
 10361  0026B8  6A10               	clrf	?_writeEEPROM+2,c
 10362  0026BA  EC67  F028         	call	_writeEEPROM	;wreg free
 10363                           
 10364                           ;main.c: 1176: writeEEPROM(0xA6, 0);
 10365  0026BE  6A0F               	clrf	?_writeEEPROM+1,c
 10366  0026C0  0EA6               	movlw	166
 10367  0026C2  6E0E               	movwf	?_writeEEPROM,c
 10368  0026C4  0E00               	movlw	0
 10369  0026C6  6A10               	clrf	?_writeEEPROM+2,c
 10370  0026C8  EC67  F028         	call	_writeEEPROM	;wreg free
 10371                           
 10372                           ;main.c: 1177: writeEEPROM(0xA7, 0);
 10373  0026CC  6A0F               	clrf	?_writeEEPROM+1,c
 10374  0026CE  0EA7               	movlw	167
 10375  0026D0  6E0E               	movwf	?_writeEEPROM,c
 10376  0026D2  0E00               	movlw	0
 10377  0026D4  6A10               	clrf	?_writeEEPROM+2,c
 10378  0026D6  EC67  F028         	call	_writeEEPROM	;wreg free
 10379                           
 10380                           ;main.c: 1178: writeEEPROM(0xA8, 0);
 10381  0026DA  6A0F               	clrf	?_writeEEPROM+1,c
 10382  0026DC  0EA8               	movlw	168
 10383  0026DE  6E0E               	movwf	?_writeEEPROM,c
 10384  0026E0  0E00               	movlw	0
 10385  0026E2  6A10               	clrf	?_writeEEPROM+2,c
 10386  0026E4  EC67  F028         	call	_writeEEPROM	;wreg free
 10387                           
 10388                           ;main.c: 1179: writeEEPROM(0xA9, 0);
 10389  0026E8  6A0F               	clrf	?_writeEEPROM+1,c
 10390  0026EA  0EA9               	movlw	169
 10391  0026EC  6E0E               	movwf	?_writeEEPROM,c
 10392  0026EE  6A10               	clrf	?_writeEEPROM+2,c
 10393  0026F0  EF67  F028         	goto	_writeEEPROM	;wreg free
 10394  0026F4                     __end_of_init_app_eeprom:
 10395                           	opt stack 0
 10396                           tblptru	equ	0xFF8
 10397                           tblptrh	equ	0xFF7
 10398                           tblptrl	equ	0xFF6
 10399                           tablat	equ	0xFF5
 10400                           prodh	equ	0xFF4
 10401                           prodl	equ	0xFF3
 10402                           intcon	equ	0xFF2
 10403                           postinc0	equ	0xFEE
 10404                           wreg	equ	0xFE8
 10405                           indf1	equ	0xFE7
 10406                           postdec1	equ	0xFE5
 10407                           fsr1h	equ	0xFE2
 10408                           fsr1l	equ	0xFE1
 10409                           indf2	equ	0xFDF
 10410                           postinc2	equ	0xFDE
 10411                           postdec2	equ	0xFDD
 10412                           plusw2	equ	0xFDB
 10413                           fsr2h	equ	0xFDA
 10414                           fsr2l	equ	0xFD9
 10415                           status	equ	0xFD8
 10416                           
 10417 ;; *************** function _vscp_setManufacturerId *****************
 10418 ;; Defined at:
 10419 ;;		line 2651 in file "../main.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;  idx             1    wreg     unsigned char 
 10422 ;;  data            1   16[COMRAM] unsigned char 
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;  idx             1   17[COMRAM] unsigned char 
 10425 ;; Return value:  Size  Location     Type
 10426 ;;		None               void
 10427 ;; Registers used:
 10428 ;;		wreg, status,2, status,0, cstack
 10429 ;; Tracked objects:
 10430 ;;		On entry : F/0
 10431 ;;		On exit  : 0/0
 10432 ;;		Unchanged: 0/0
 10433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10434 ;;      Params:         1       0       0       0       0       0       0
 10435 ;;      Locals:         1       0       0       0       0       0       0
 10436 ;;      Temps:          0       0       0       0       0       0       0
 10437 ;;      Totals:         2       0       0       0       0       0       0
 10438 ;;Total ram usage:        2 bytes
 10439 ;; Hardware stack levels used:    1
 10440 ;; Hardware stack levels required when called:    3
 10441 ;; This function calls:
 10442 ;;		_writeEEPROM
 10443 ;; This function is called by:
 10444 ;;		_vscp_writeStdReg
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           	psect	text39
 10449  005214                     __ptext39:
 10450                           	opt stack 0
 10451  005214                     _vscp_setManufacturerId:
 10452                           	opt stack 24
 10453                           
 10454                           ;incstack = 0
 10455                           ;incstack = 0
 10456                           ;vscp_setManufacturerId@idx stored from wreg
 10457  005214  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;main.c: 2652: writeEEPROM(0x09 + idx, data);
 10461  005218  0E09               	movlw	9
 10462  00521A  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10463  00521C  6E0E               	movwf	?_writeEEPROM,c
 10464  00521E  6A0F               	clrf	?_writeEEPROM+1,c
 10465  005220  0E00               	movlw	0
 10466  005222  220F               	addwfc	?_writeEEPROM+1,f,c
 10467  005224  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10468  005228  EF67  F028         	goto	_writeEEPROM	;wreg free
 10469  00522C                     __end_of_vscp_setManufacturerId:
 10470                           	opt stack 0
 10471                           tblptru	equ	0xFF8
 10472                           tblptrh	equ	0xFF7
 10473                           tblptrl	equ	0xFF6
 10474                           tablat	equ	0xFF5
 10475                           prodh	equ	0xFF4
 10476                           prodl	equ	0xFF3
 10477                           intcon	equ	0xFF2
 10478                           postinc0	equ	0xFEE
 10479                           wreg	equ	0xFE8
 10480                           indf1	equ	0xFE7
 10481                           postdec1	equ	0xFE5
 10482                           fsr1h	equ	0xFE2
 10483                           fsr1l	equ	0xFE1
 10484                           indf2	equ	0xFDF
 10485                           postinc2	equ	0xFDE
 10486                           postdec2	equ	0xFDD
 10487                           plusw2	equ	0xFDB
 10488                           fsr2h	equ	0xFDA
 10489                           fsr2l	equ	0xFD9
 10490                           status	equ	0xFD8
 10491                           
 10492 ;; *************** function _vscp_setUserID *****************
 10493 ;; Defined at:
 10494 ;;		line 2629 in file "../main.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;  idx             1    wreg     unsigned char 
 10497 ;;  data            1   16[COMRAM] unsigned char 
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;  idx             1   17[COMRAM] unsigned char 
 10500 ;; Return value:  Size  Location     Type
 10501 ;;		None               void
 10502 ;; Registers used:
 10503 ;;		wreg, status,2, status,0, cstack
 10504 ;; Tracked objects:
 10505 ;;		On entry : F/0
 10506 ;;		On exit  : 0/0
 10507 ;;		Unchanged: 0/0
 10508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10509 ;;      Params:         1       0       0       0       0       0       0
 10510 ;;      Locals:         1       0       0       0       0       0       0
 10511 ;;      Temps:          0       0       0       0       0       0       0
 10512 ;;      Totals:         2       0       0       0       0       0       0
 10513 ;;Total ram usage:        2 bytes
 10514 ;; Hardware stack levels used:    1
 10515 ;; Hardware stack levels required when called:    3
 10516 ;; This function calls:
 10517 ;;		_writeEEPROM
 10518 ;; This function is called by:
 10519 ;;		_vscp_writeStdReg
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           	psect	text40
 10524  00522C                     __ptext40:
 10525                           	opt stack 0
 10526  00522C                     _vscp_setUserID:
 10527                           	opt stack 24
 10528                           
 10529                           ;incstack = 0
 10530                           ;incstack = 0
 10531                           ;vscp_setUserID@idx stored from wreg
 10532  00522C  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;main.c: 2630: writeEEPROM(idx + 0x04, data);
 10536  005230  0E04               	movlw	4
 10537  005232  2412               	addwf	vscp_setUserID@idx,w,c
 10538  005234  6E0E               	movwf	?_writeEEPROM,c
 10539  005236  6A0F               	clrf	?_writeEEPROM+1,c
 10540  005238  0E00               	movlw	0
 10541  00523A  220F               	addwfc	?_writeEEPROM+1,f,c
 10542  00523C  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10543  005240  EF67  F028         	goto	_writeEEPROM	;wreg free
 10544  005244                     __end_of_vscp_setUserID:
 10545                           	opt stack 0
 10546                           tblptru	equ	0xFF8
 10547                           tblptrh	equ	0xFF7
 10548                           tblptrl	equ	0xFF6
 10549                           tablat	equ	0xFF5
 10550                           prodh	equ	0xFF4
 10551                           prodl	equ	0xFF3
 10552                           intcon	equ	0xFF2
 10553                           postinc0	equ	0xFEE
 10554                           wreg	equ	0xFE8
 10555                           indf1	equ	0xFE7
 10556                           postdec1	equ	0xFE5
 10557                           fsr1h	equ	0xFE2
 10558                           fsr1l	equ	0xFE1
 10559                           indf2	equ	0xFDF
 10560                           postinc2	equ	0xFDE
 10561                           postdec2	equ	0xFDD
 10562                           plusw2	equ	0xFDB
 10563                           fsr2h	equ	0xFDA
 10564                           fsr2l	equ	0xFD9
 10565                           status	equ	0xFD8
 10566                           
 10567 ;; *************** function _vscp_setGUID *****************
 10568 ;; Defined at:
 10569 ;;		line 2598 in file "../main.c"
 10570 ;; Parameters:    Size  Location     Type
 10571 ;;  idx             1    wreg     unsigned char 
 10572 ;;  data            1   16[COMRAM] unsigned char 
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;  idx             1   17[COMRAM] unsigned char 
 10575 ;; Return value:  Size  Location     Type
 10576 ;;		None               void
 10577 ;; Registers used:
 10578 ;;		wreg, status,2, status,0, cstack
 10579 ;; Tracked objects:
 10580 ;;		On entry : F/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10584 ;;      Params:         1       0       0       0       0       0       0
 10585 ;;      Locals:         1       0       0       0       0       0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0
 10587 ;;      Totals:         2       0       0       0       0       0       0
 10588 ;;Total ram usage:        2 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    3
 10591 ;; This function calls:
 10592 ;;		_writeEEPROM
 10593 ;; This function is called by:
 10594 ;;		_vscp_writeStdReg
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text41
 10599  005182                     __ptext41:
 10600                           	opt stack 0
 10601  005182                     _vscp_setGUID:
 10602                           	opt stack 24
 10603                           
 10604                           ;incstack = 0
 10605                           ;incstack = 0
 10606                           ;vscp_setGUID@idx stored from wreg
 10607  005182  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;main.c: 2599: if ( idx>15 ) return;
 10611  005186  0E0F               	movlw	15
 10612  005188  6412               	cpfsgt	vscp_setGUID@idx,c
 10613  00518A  D001               	goto	l7994
 10614  00518C  D00A               	goto	l548
 10615  00518E                     l7994:
 10616                           
 10617                           ; BSR set to: 0
 10618                           ;main.c: 2600: writeEEPROM( 0x11 + idx, data );
 10619  00518E  0E11               	movlw	17
 10620  005190  2412               	addwf	vscp_setGUID@idx,w,c
 10621  005192  6E0E               	movwf	?_writeEEPROM,c
 10622  005194  6A0F               	clrf	?_writeEEPROM+1,c
 10623  005196  0E00               	movlw	0
 10624  005198  220F               	addwfc	?_writeEEPROM+1,f,c
 10625  00519A  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 10626  00519E  EC67  F028         	call	_writeEEPROM	;wreg free
 10627  0051A2                     l548:
 10628  0051A2  0012               	return	
 10629  0051A4                     __end_of_vscp_setGUID:
 10630                           	opt stack 0
 10631                           tblptru	equ	0xFF8
 10632                           tblptrh	equ	0xFF7
 10633                           tblptrl	equ	0xFF6
 10634                           tablat	equ	0xFF5
 10635                           prodh	equ	0xFF4
 10636                           prodl	equ	0xFF3
 10637                           intcon	equ	0xFF2
 10638                           postinc0	equ	0xFEE
 10639                           wreg	equ	0xFE8
 10640                           indf1	equ	0xFE7
 10641                           postdec1	equ	0xFE5
 10642                           fsr1h	equ	0xFE2
 10643                           fsr1l	equ	0xFE1
 10644                           indf2	equ	0xFDF
 10645                           postinc2	equ	0xFDE
 10646                           postdec2	equ	0xFDD
 10647                           plusw2	equ	0xFDB
 10648                           fsr2h	equ	0xFDA
 10649                           fsr2l	equ	0xFD9
 10650                           status	equ	0xFD8
 10651                           
 10652 ;; *************** function _vscp_writeAppReg *****************
 10653 ;; Defined at:
 10654 ;;		line 1889 in file "../main.c"
 10655 ;; Parameters:    Size  Location     Type
 10656 ;;  reg             1    wreg     unsigned char 
 10657 ;;  val             1   34[COMRAM] unsigned char 
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;  reg             1   36[COMRAM] unsigned char 
 10660 ;;  pos             1   35[COMRAM] unsigned char 
 10661 ;;  rv              1   37[COMRAM] unsigned char 
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  1    wreg      unsigned char 
 10664 ;; Registers used:
 10665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10666 ;; Tracked objects:
 10667 ;;		On entry : F/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10671 ;;      Params:         1       0       0       0       0       0       0
 10672 ;;      Locals:         3       0       0       0       0       0       0
 10673 ;;      Temps:          0       0       0       0       0       0       0
 10674 ;;      Totals:         4       0       0       0       0       0       0
 10675 ;;Total ram usage:        4 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    4
 10678 ;; This function calls:
 10679 ;;		_writeEEPROM
 10680 ;;		_readEEPROM
 10681 ;;		_writeCoeffs2Ram
 10682 ;; This function is called by:
 10683 ;;		_vscp_writeRegister
 10684 ;;		_vscp_handleProtocolEvent
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           	psect	text42
 10689  00066E                     __ptext42:
 10690                           	opt stack 0
 10691  00066E                     _vscp_writeAppReg:
 10692                           	opt stack 23
 10693                           
 10694                           ;incstack = 0
 10695                           ;incstack = 0
 10696                           ;vscp_writeAppReg@reg stored from wreg
 10697  00066E  CFE8 F025          	movff	wreg,vscp_writeAppReg@reg
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;main.c: 1890: uint8_t rv;
 10701                           ;main.c: 1897: rv = ~val;
 10702  000672  1C23               	comf	vscp_writeAppReg@val,w,c
 10703  000674  6E26               	movwf	vscp_writeAppReg@rv,c
 10704                           
 10705                           ;main.c: 1899: if (0 == vscp_page_select) {
 10706  000676  5047               	movf	_vscp_page_select+1,w,c
 10707  000678  1046               	iorwf	_vscp_page_select,w,c
 10708  00067A  E102 EF37  F008    	bz	l10862
 10709  000680  EF71  F009         	goto	l10864
 10710  000684                     l10672:
 10711                           
 10712                           ; BSR set to: 0
 10713                           ;main.c: 1905: writeEEPROM(0x41, val);
 10714  000684  6A0F               	clrf	?_writeEEPROM+1,c
 10715  000686  0E41               	movlw	65
 10716  000688  6E0E               	movwf	?_writeEEPROM,c
 10717  00068A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10718  00068E  EC67  F028         	call	_writeEEPROM	;wreg free
 10719                           
 10720                           ;main.c: 1906: rv = readEEPROM(0x41);
 10721  000692  6A17               	clrf	?_readEEPROM+1,c
 10722  000694  0E41               	movlw	65
 10723  000696  6E16               	movwf	?_readEEPROM,c
 10724  000698  EC64  F029         	call	_readEEPROM	;wreg free
 10725  00069C  EFA9  F009         	goto	L20
 10726  0006A0                     l10674:
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;main.c: 1911: writeEEPROM(0x42, val);
 10730  0006A0  6A0F               	clrf	?_writeEEPROM+1,c
 10731  0006A2  0E42               	movlw	66
 10732  0006A4  6E0E               	movwf	?_writeEEPROM,c
 10733  0006A6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10734  0006AA  EC67  F028         	call	_writeEEPROM	;wreg free
 10735                           
 10736                           ;main.c: 1912: rv = readEEPROM(0x42);
 10737  0006AE  6A17               	clrf	?_readEEPROM+1,c
 10738  0006B0  0E42               	movlw	66
 10739  0006B2  6E16               	movwf	?_readEEPROM,c
 10740  0006B4  EC64  F029         	call	_readEEPROM	;wreg free
 10741  0006B8  EFA9  F009         	goto	L20
 10742  0006BC                     l10676:
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;main.c: 1921: writeEEPROM(0x43, val);
 10746  0006BC  6A0F               	clrf	?_writeEEPROM+1,c
 10747  0006BE  0E43               	movlw	67
 10748  0006C0  6E0E               	movwf	?_writeEEPROM,c
 10749  0006C2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10750  0006C6  EC67  F028         	call	_writeEEPROM	;wreg free
 10751                           
 10752                           ;main.c: 1922: rv = readEEPROM(0x43);
 10753  0006CA  6A17               	clrf	?_readEEPROM+1,c
 10754  0006CC  0E43               	movlw	67
 10755  0006CE  6E16               	movwf	?_readEEPROM,c
 10756  0006D0  EC64  F029         	call	_readEEPROM	;wreg free
 10757  0006D4  EFA9  F009         	goto	L20
 10758  0006D8                     l10678:
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;main.c: 1927: writeEEPROM(0x44, val);
 10762  0006D8  6A0F               	clrf	?_writeEEPROM+1,c
 10763  0006DA  0E44               	movlw	68
 10764  0006DC  6E0E               	movwf	?_writeEEPROM,c
 10765  0006DE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10766  0006E2  EC67  F028         	call	_writeEEPROM	;wreg free
 10767                           
 10768                           ;main.c: 1928: rv = readEEPROM(0x44);
 10769  0006E6  6A17               	clrf	?_readEEPROM+1,c
 10770  0006E8  0E44               	movlw	68
 10771  0006EA  6E16               	movwf	?_readEEPROM,c
 10772  0006EC  EC64  F029         	call	_readEEPROM	;wreg free
 10773  0006F0  EFA9  F009         	goto	L20
 10774  0006F4                     l10680:
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;main.c: 1933: writeEEPROM(0x45, val);
 10778  0006F4  6A0F               	clrf	?_writeEEPROM+1,c
 10779  0006F6  0E45               	movlw	69
 10780  0006F8  6E0E               	movwf	?_writeEEPROM,c
 10781  0006FA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10782  0006FE  EC67  F028         	call	_writeEEPROM	;wreg free
 10783                           
 10784                           ;main.c: 1934: rv = readEEPROM(0x45);
 10785  000702  6A17               	clrf	?_readEEPROM+1,c
 10786  000704  0E45               	movlw	69
 10787  000706  6E16               	movwf	?_readEEPROM,c
 10788  000708  EC64  F029         	call	_readEEPROM	;wreg free
 10789  00070C  EFA9  F009         	goto	L20
 10790  000710                     l10682:
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;main.c: 1939: writeEEPROM(0x46, val);
 10794  000710  6A0F               	clrf	?_writeEEPROM+1,c
 10795  000712  0E46               	movlw	70
 10796  000714  6E0E               	movwf	?_writeEEPROM,c
 10797  000716  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10798  00071A  EC67  F028         	call	_writeEEPROM	;wreg free
 10799                           
 10800                           ;main.c: 1940: rv = readEEPROM(0x46);
 10801  00071E  6A17               	clrf	?_readEEPROM+1,c
 10802  000720  0E46               	movlw	70
 10803  000722  6E16               	movwf	?_readEEPROM,c
 10804  000724  EC64  F029         	call	_readEEPROM	;wreg free
 10805  000728  EFA9  F009         	goto	L20
 10806  00072C                     l10684:
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;main.c: 1945: writeEEPROM(0x47, val);
 10810  00072C  6A0F               	clrf	?_writeEEPROM+1,c
 10811  00072E  0E47               	movlw	71
 10812  000730  6E0E               	movwf	?_writeEEPROM,c
 10813  000732  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10814  000736  EC67  F028         	call	_writeEEPROM	;wreg free
 10815                           
 10816                           ;main.c: 1946: rv = readEEPROM(0x47);
 10817  00073A  6A17               	clrf	?_readEEPROM+1,c
 10818  00073C  0E47               	movlw	71
 10819  00073E  6E16               	movwf	?_readEEPROM,c
 10820  000740  EC64  F029         	call	_readEEPROM	;wreg free
 10821  000744  EFA9  F009         	goto	L20
 10822  000748                     l10686:
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;main.c: 1951: writeEEPROM(0x48, val);
 10826  000748  6A0F               	clrf	?_writeEEPROM+1,c
 10827  00074A  0E48               	movlw	72
 10828  00074C  6E0E               	movwf	?_writeEEPROM,c
 10829  00074E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10830  000752  EC67  F028         	call	_writeEEPROM	;wreg free
 10831                           
 10832                           ;main.c: 1952: rv = readEEPROM(0x48);
 10833  000756  6A17               	clrf	?_readEEPROM+1,c
 10834  000758  0E48               	movlw	72
 10835  00075A  6E16               	movwf	?_readEEPROM,c
 10836  00075C  EC64  F029         	call	_readEEPROM	;wreg free
 10837  000760  EFA9  F009         	goto	L20
 10838  000764                     l10688:
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;main.c: 1961: writeEEPROM(0x49, val);
 10842  000764  6A0F               	clrf	?_writeEEPROM+1,c
 10843  000766  0E49               	movlw	73
 10844  000768  6E0E               	movwf	?_writeEEPROM,c
 10845  00076A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10846  00076E  EC67  F028         	call	_writeEEPROM	;wreg free
 10847                           
 10848                           ;main.c: 1962: rv = readEEPROM(0x49);
 10849  000772  6A17               	clrf	?_readEEPROM+1,c
 10850  000774  0E49               	movlw	73
 10851  000776  6E16               	movwf	?_readEEPROM,c
 10852  000778  EC64  F029         	call	_readEEPROM	;wreg free
 10853  00077C  EFA9  F009         	goto	L20
 10854  000780                     l10690:
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;main.c: 1967: writeEEPROM(0x4A, val);
 10858  000780  6A0F               	clrf	?_writeEEPROM+1,c
 10859  000782  0E4A               	movlw	74
 10860  000784  6E0E               	movwf	?_writeEEPROM,c
 10861  000786  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10862  00078A  EC67  F028         	call	_writeEEPROM	;wreg free
 10863                           
 10864                           ;main.c: 1968: rv = readEEPROM(0x4A);
 10865  00078E  6A17               	clrf	?_readEEPROM+1,c
 10866  000790  0E4A               	movlw	74
 10867  000792  6E16               	movwf	?_readEEPROM,c
 10868  000794  EC64  F029         	call	_readEEPROM	;wreg free
 10869  000798  EFA9  F009         	goto	L20
 10870  00079C                     l10692:
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;main.c: 1973: writeEEPROM(0x4B, val);
 10874  00079C  6A0F               	clrf	?_writeEEPROM+1,c
 10875  00079E  0E4B               	movlw	75
 10876  0007A0  6E0E               	movwf	?_writeEEPROM,c
 10877  0007A2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10878  0007A6  EC67  F028         	call	_writeEEPROM	;wreg free
 10879                           
 10880                           ;main.c: 1974: rv = readEEPROM(0x4B);
 10881  0007AA  6A17               	clrf	?_readEEPROM+1,c
 10882  0007AC  0E4B               	movlw	75
 10883  0007AE  6E16               	movwf	?_readEEPROM,c
 10884  0007B0  EC64  F029         	call	_readEEPROM	;wreg free
 10885  0007B4  EFA9  F009         	goto	L20
 10886  0007B8                     l10694:
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;main.c: 1979: writeEEPROM(0x4C, val);
 10890  0007B8  6A0F               	clrf	?_writeEEPROM+1,c
 10891  0007BA  0E4C               	movlw	76
 10892  0007BC  6E0E               	movwf	?_writeEEPROM,c
 10893  0007BE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10894  0007C2  EC67  F028         	call	_writeEEPROM	;wreg free
 10895                           
 10896                           ;main.c: 1980: rv = readEEPROM(0x4C);
 10897  0007C6  6A17               	clrf	?_readEEPROM+1,c
 10898  0007C8  0E4C               	movlw	76
 10899  0007CA  6E16               	movwf	?_readEEPROM,c
 10900  0007CC  EC64  F029         	call	_readEEPROM	;wreg free
 10901  0007D0  EFA9  F009         	goto	L20
 10902  0007D4                     l10696:
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;main.c: 1985: writeEEPROM(0x4D, val);
 10906  0007D4  6A0F               	clrf	?_writeEEPROM+1,c
 10907  0007D6  0E4D               	movlw	77
 10908  0007D8  6E0E               	movwf	?_writeEEPROM,c
 10909  0007DA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10910  0007DE  EC67  F028         	call	_writeEEPROM	;wreg free
 10911                           
 10912                           ;main.c: 1986: rv = readEEPROM(0x4D);
 10913  0007E2  6A17               	clrf	?_readEEPROM+1,c
 10914  0007E4  0E4D               	movlw	77
 10915  0007E6  6E16               	movwf	?_readEEPROM,c
 10916  0007E8  EC64  F029         	call	_readEEPROM	;wreg free
 10917  0007EC  EFA9  F009         	goto	L20
 10918  0007F0                     l10698:
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;main.c: 1991: writeEEPROM(0x4E, val);
 10922  0007F0  6A0F               	clrf	?_writeEEPROM+1,c
 10923  0007F2  0E4E               	movlw	78
 10924  0007F4  6E0E               	movwf	?_writeEEPROM,c
 10925  0007F6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10926  0007FA  EC67  F028         	call	_writeEEPROM	;wreg free
 10927                           
 10928                           ;main.c: 1992: rv = readEEPROM(0x4E);
 10929  0007FE  6A17               	clrf	?_readEEPROM+1,c
 10930  000800  0E4E               	movlw	78
 10931  000802  6E16               	movwf	?_readEEPROM,c
 10932  000804  EC64  F029         	call	_readEEPROM	;wreg free
 10933  000808  EFA9  F009         	goto	L20
 10934  00080C                     l10700:
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;main.c: 2001: writeEEPROM(0x4F, val);
 10938  00080C  6A0F               	clrf	?_writeEEPROM+1,c
 10939  00080E  0E4F               	movlw	79
 10940  000810  6E0E               	movwf	?_writeEEPROM,c
 10941  000812  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10942  000816  EC67  F028         	call	_writeEEPROM	;wreg free
 10943                           
 10944                           ;main.c: 2002: rv = readEEPROM(0x4F);
 10945  00081A  6A17               	clrf	?_readEEPROM+1,c
 10946  00081C  0E4F               	movlw	79
 10947  00081E  6E16               	movwf	?_readEEPROM,c
 10948  000820  EC64  F029         	call	_readEEPROM	;wreg free
 10949  000824  EFA9  F009         	goto	L20
 10950  000828                     l10702:
 10951                           
 10952                           ; BSR set to: 0
 10953                           ;main.c: 2007: writeEEPROM(0x50, val);
 10954  000828  6A0F               	clrf	?_writeEEPROM+1,c
 10955  00082A  0E50               	movlw	80
 10956  00082C  6E0E               	movwf	?_writeEEPROM,c
 10957  00082E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10958  000832  EC67  F028         	call	_writeEEPROM	;wreg free
 10959                           
 10960                           ;main.c: 2008: rv = readEEPROM(0x50);
 10961  000836  6A17               	clrf	?_readEEPROM+1,c
 10962  000838  0E50               	movlw	80
 10963  00083A  6E16               	movwf	?_readEEPROM,c
 10964  00083C  EC64  F029         	call	_readEEPROM	;wreg free
 10965  000840  EFA9  F009         	goto	L20
 10966  000844                     l10704:
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;main.c: 2013: writeEEPROM(0x51, val);
 10970  000844  6A0F               	clrf	?_writeEEPROM+1,c
 10971  000846  0E51               	movlw	81
 10972  000848  6E0E               	movwf	?_writeEEPROM,c
 10973  00084A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10974  00084E  EC67  F028         	call	_writeEEPROM	;wreg free
 10975                           
 10976                           ;main.c: 2014: rv = readEEPROM(0x51);
 10977  000852  6A17               	clrf	?_readEEPROM+1,c
 10978  000854  0E51               	movlw	81
 10979  000856  6E16               	movwf	?_readEEPROM,c
 10980  000858  EC64  F029         	call	_readEEPROM	;wreg free
 10981  00085C  EFA9  F009         	goto	L20
 10982  000860                     l10706:
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;main.c: 2019: writeEEPROM(0x52, val);
 10986  000860  6A0F               	clrf	?_writeEEPROM+1,c
 10987  000862  0E52               	movlw	82
 10988  000864  6E0E               	movwf	?_writeEEPROM,c
 10989  000866  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10990  00086A  EC67  F028         	call	_writeEEPROM	;wreg free
 10991                           
 10992                           ;main.c: 2020: rv = readEEPROM(0x52);
 10993  00086E  6A17               	clrf	?_readEEPROM+1,c
 10994  000870  0E52               	movlw	82
 10995  000872  6E16               	movwf	?_readEEPROM,c
 10996  000874  EC64  F029         	call	_readEEPROM	;wreg free
 10997  000878  EFA9  F009         	goto	L20
 10998  00087C                     l10708:
 10999                           
 11000                           ; BSR set to: 0
 11001                           ;main.c: 2025: writeEEPROM(0x53, val);
 11002  00087C  6A0F               	clrf	?_writeEEPROM+1,c
 11003  00087E  0E53               	movlw	83
 11004  000880  6E0E               	movwf	?_writeEEPROM,c
 11005  000882  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11006  000886  EC67  F028         	call	_writeEEPROM	;wreg free
 11007                           
 11008                           ;main.c: 2026: rv = readEEPROM(0x53);
 11009  00088A  6A17               	clrf	?_readEEPROM+1,c
 11010  00088C  0E53               	movlw	83
 11011  00088E  6E16               	movwf	?_readEEPROM,c
 11012  000890  EC64  F029         	call	_readEEPROM	;wreg free
 11013  000894  EFA9  F009         	goto	L20
 11014  000898                     l10710:
 11015                           
 11016                           ; BSR set to: 0
 11017                           ;main.c: 2031: writeEEPROM(0x54, val);
 11018  000898  6A0F               	clrf	?_writeEEPROM+1,c
 11019  00089A  0E54               	movlw	84
 11020  00089C  6E0E               	movwf	?_writeEEPROM,c
 11021  00089E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11022  0008A2  EC67  F028         	call	_writeEEPROM	;wreg free
 11023                           
 11024                           ;main.c: 2032: rv = readEEPROM(0x54);
 11025  0008A6  6A17               	clrf	?_readEEPROM+1,c
 11026  0008A8  0E54               	movlw	84
 11027  0008AA  6E16               	movwf	?_readEEPROM,c
 11028  0008AC  EC64  F029         	call	_readEEPROM	;wreg free
 11029  0008B0  EFA9  F009         	goto	L20
 11030  0008B4                     l10712:
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;main.c: 2037: writeEEPROM(0x55, val);
 11034  0008B4  6A0F               	clrf	?_writeEEPROM+1,c
 11035  0008B6  0E55               	movlw	85
 11036  0008B8  6E0E               	movwf	?_writeEEPROM,c
 11037  0008BA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11038  0008BE  EC67  F028         	call	_writeEEPROM	;wreg free
 11039                           
 11040                           ;main.c: 2038: rv = readEEPROM(0x55);
 11041  0008C2  6A17               	clrf	?_readEEPROM+1,c
 11042  0008C4  0E55               	movlw	85
 11043  0008C6  6E16               	movwf	?_readEEPROM,c
 11044  0008C8  EC64  F029         	call	_readEEPROM	;wreg free
 11045  0008CC  EFA9  F009         	goto	L20
 11046  0008D0                     l10714:
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;main.c: 2043: writeEEPROM(0x56, val);
 11050  0008D0  6A0F               	clrf	?_writeEEPROM+1,c
 11051  0008D2  0E56               	movlw	86
 11052  0008D4  6E0E               	movwf	?_writeEEPROM,c
 11053  0008D6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11054  0008DA  EC67  F028         	call	_writeEEPROM	;wreg free
 11055                           
 11056                           ;main.c: 2044: rv = readEEPROM(0x56);
 11057  0008DE  6A17               	clrf	?_readEEPROM+1,c
 11058  0008E0  0E56               	movlw	86
 11059  0008E2  6E16               	movwf	?_readEEPROM,c
 11060  0008E4  EC64  F029         	call	_readEEPROM	;wreg free
 11061  0008E8  EFA9  F009         	goto	L20
 11062  0008EC                     l10716:
 11063                           
 11064                           ; BSR set to: 0
 11065                           ;main.c: 2049: writeEEPROM(0x57, val);
 11066  0008EC  6A0F               	clrf	?_writeEEPROM+1,c
 11067  0008EE  0E57               	movlw	87
 11068  0008F0  6E0E               	movwf	?_writeEEPROM,c
 11069  0008F2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11070  0008F6  EC67  F028         	call	_writeEEPROM	;wreg free
 11071                           
 11072                           ;main.c: 2050: rv = readEEPROM(0x57);
 11073  0008FA  6A17               	clrf	?_readEEPROM+1,c
 11074  0008FC  0E57               	movlw	87
 11075  0008FE  6E16               	movwf	?_readEEPROM,c
 11076  000900  EC64  F029         	call	_readEEPROM	;wreg free
 11077  000904  EFA9  F009         	goto	L20
 11078  000908                     l10718:
 11079                           
 11080                           ; BSR set to: 0
 11081                           ;main.c: 2055: writeEEPROM(0x58, val);
 11082  000908  6A0F               	clrf	?_writeEEPROM+1,c
 11083  00090A  0E58               	movlw	88
 11084  00090C  6E0E               	movwf	?_writeEEPROM,c
 11085  00090E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11086  000912  EC67  F028         	call	_writeEEPROM	;wreg free
 11087                           
 11088                           ;main.c: 2056: rv = readEEPROM(0x58);
 11089  000916  6A17               	clrf	?_readEEPROM+1,c
 11090  000918  0E58               	movlw	88
 11091  00091A  6E16               	movwf	?_readEEPROM,c
 11092  00091C  EC64  F029         	call	_readEEPROM	;wreg free
 11093  000920  EFA9  F009         	goto	L20
 11094  000924                     l10720:
 11095                           
 11096                           ; BSR set to: 0
 11097                           ;main.c: 2061: writeEEPROM(0x59, val);
 11098  000924  6A0F               	clrf	?_writeEEPROM+1,c
 11099  000926  0E59               	movlw	89
 11100  000928  6E0E               	movwf	?_writeEEPROM,c
 11101  00092A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11102  00092E  EC67  F028         	call	_writeEEPROM	;wreg free
 11103                           
 11104                           ;main.c: 2062: rv = readEEPROM(0x59);
 11105  000932  6A17               	clrf	?_readEEPROM+1,c
 11106  000934  0E59               	movlw	89
 11107  000936  6E16               	movwf	?_readEEPROM,c
 11108  000938  EC64  F029         	call	_readEEPROM	;wreg free
 11109  00093C  EFA9  F009         	goto	L20
 11110  000940                     l10722:
 11111                           
 11112                           ; BSR set to: 0
 11113                           ;main.c: 2067: writeEEPROM(0x5A, val);
 11114  000940  6A0F               	clrf	?_writeEEPROM+1,c
 11115  000942  0E5A               	movlw	90
 11116  000944  6E0E               	movwf	?_writeEEPROM,c
 11117  000946  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11118  00094A  EC67  F028         	call	_writeEEPROM	;wreg free
 11119                           
 11120                           ;main.c: 2068: rv = readEEPROM(0x5A);
 11121  00094E  6A17               	clrf	?_readEEPROM+1,c
 11122  000950  0E5A               	movlw	90
 11123  000952  6E16               	movwf	?_readEEPROM,c
 11124  000954  EC64  F029         	call	_readEEPROM	;wreg free
 11125  000958  EFA9  F009         	goto	L20
 11126  00095C                     l10724:
 11127                           
 11128                           ; BSR set to: 0
 11129                           ;main.c: 2077: writeEEPROM(0x5B, val);
 11130  00095C  6A0F               	clrf	?_writeEEPROM+1,c
 11131  00095E  0E5B               	movlw	91
 11132  000960  6E0E               	movwf	?_writeEEPROM,c
 11133  000962  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11134  000966  EC67  F028         	call	_writeEEPROM	;wreg free
 11135                           
 11136                           ;main.c: 2078: rv = readEEPROM(0x5B);
 11137  00096A  6A17               	clrf	?_readEEPROM+1,c
 11138  00096C  0E5B               	movlw	91
 11139  00096E  6E16               	movwf	?_readEEPROM,c
 11140  000970  EC64  F029         	call	_readEEPROM	;wreg free
 11141  000974  EFA9  F009         	goto	L20
 11142  000978                     l10726:
 11143                           
 11144                           ; BSR set to: 0
 11145                           ;main.c: 2083: writeEEPROM(0x5C, val);
 11146  000978  6A0F               	clrf	?_writeEEPROM+1,c
 11147  00097A  0E5C               	movlw	92
 11148  00097C  6E0E               	movwf	?_writeEEPROM,c
 11149  00097E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11150  000982  EC67  F028         	call	_writeEEPROM	;wreg free
 11151                           
 11152                           ;main.c: 2084: rv = readEEPROM(0x5C);
 11153  000986  6A17               	clrf	?_readEEPROM+1,c
 11154  000988  0E5C               	movlw	92
 11155  00098A  6E16               	movwf	?_readEEPROM,c
 11156  00098C  EC64  F029         	call	_readEEPROM	;wreg free
 11157  000990  EFA9  F009         	goto	L20
 11158  000994                     l10728:
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;main.c: 2089: writeEEPROM(0x5D, val);
 11162  000994  6A0F               	clrf	?_writeEEPROM+1,c
 11163  000996  0E5D               	movlw	93
 11164  000998  6E0E               	movwf	?_writeEEPROM,c
 11165  00099A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11166  00099E  EC67  F028         	call	_writeEEPROM	;wreg free
 11167                           
 11168                           ;main.c: 2090: rv = readEEPROM(0x5D);
 11169  0009A2  6A17               	clrf	?_readEEPROM+1,c
 11170  0009A4  0E5D               	movlw	93
 11171  0009A6  6E16               	movwf	?_readEEPROM,c
 11172  0009A8  EC64  F029         	call	_readEEPROM	;wreg free
 11173  0009AC  EFA9  F009         	goto	L20
 11174  0009B0                     l10730:
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;main.c: 2095: writeEEPROM(0x5E, val);
 11178  0009B0  6A0F               	clrf	?_writeEEPROM+1,c
 11179  0009B2  0E5E               	movlw	94
 11180  0009B4  6E0E               	movwf	?_writeEEPROM,c
 11181  0009B6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11182  0009BA  EC67  F028         	call	_writeEEPROM	;wreg free
 11183                           
 11184                           ;main.c: 2096: rv = readEEPROM(0x5E);
 11185  0009BE  6A17               	clrf	?_readEEPROM+1,c
 11186  0009C0  0E5E               	movlw	94
 11187  0009C2  6E16               	movwf	?_readEEPROM,c
 11188  0009C4  EC64  F029         	call	_readEEPROM	;wreg free
 11189  0009C8  EFA9  F009         	goto	L20
 11190  0009CC                     l10732:
 11191                           
 11192                           ; BSR set to: 0
 11193                           ;main.c: 2101: writeEEPROM(0x5F, val);
 11194  0009CC  6A0F               	clrf	?_writeEEPROM+1,c
 11195  0009CE  0E5F               	movlw	95
 11196  0009D0  6E0E               	movwf	?_writeEEPROM,c
 11197  0009D2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11198  0009D6  EC67  F028         	call	_writeEEPROM	;wreg free
 11199                           
 11200                           ;main.c: 2102: rv = readEEPROM(0x5F);
 11201  0009DA  6A17               	clrf	?_readEEPROM+1,c
 11202  0009DC  0E5F               	movlw	95
 11203  0009DE  6E16               	movwf	?_readEEPROM,c
 11204  0009E0  EC64  F029         	call	_readEEPROM	;wreg free
 11205  0009E4  EFA9  F009         	goto	L20
 11206  0009E8                     l10734:
 11207                           
 11208                           ; BSR set to: 0
 11209                           ;main.c: 2107: writeEEPROM(0x60, val);
 11210  0009E8  6A0F               	clrf	?_writeEEPROM+1,c
 11211  0009EA  0E60               	movlw	96
 11212  0009EC  6E0E               	movwf	?_writeEEPROM,c
 11213  0009EE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11214  0009F2  EC67  F028         	call	_writeEEPROM	;wreg free
 11215                           
 11216                           ;main.c: 2108: rv = readEEPROM(0x60);
 11217  0009F6  6A17               	clrf	?_readEEPROM+1,c
 11218  0009F8  0E60               	movlw	96
 11219  0009FA  6E16               	movwf	?_readEEPROM,c
 11220  0009FC  EC64  F029         	call	_readEEPROM	;wreg free
 11221  000A00  EFA9  F009         	goto	L20
 11222  000A04                     l10736:
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;main.c: 2113: writeEEPROM(0x61, val);
 11226  000A04  6A0F               	clrf	?_writeEEPROM+1,c
 11227  000A06  0E61               	movlw	97
 11228  000A08  6E0E               	movwf	?_writeEEPROM,c
 11229  000A0A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11230  000A0E  EC67  F028         	call	_writeEEPROM	;wreg free
 11231                           
 11232                           ;main.c: 2114: rv = readEEPROM(0x61);
 11233  000A12  6A17               	clrf	?_readEEPROM+1,c
 11234  000A14  0E61               	movlw	97
 11235  000A16  6E16               	movwf	?_readEEPROM,c
 11236  000A18  EC64  F029         	call	_readEEPROM	;wreg free
 11237  000A1C  EFA9  F009         	goto	L20
 11238  000A20                     l10738:
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;main.c: 2119: writeEEPROM(0x62, val);
 11242  000A20  6A0F               	clrf	?_writeEEPROM+1,c
 11243  000A22  0E62               	movlw	98
 11244  000A24  6E0E               	movwf	?_writeEEPROM,c
 11245  000A26  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11246  000A2A  EC67  F028         	call	_writeEEPROM	;wreg free
 11247                           
 11248                           ;main.c: 2120: rv = readEEPROM(0x62);
 11249  000A2E  6A17               	clrf	?_readEEPROM+1,c
 11250  000A30  0E62               	movlw	98
 11251  000A32  6E16               	movwf	?_readEEPROM,c
 11252  000A34  EC64  F029         	call	_readEEPROM	;wreg free
 11253  000A38  EFA9  F009         	goto	L20
 11254  000A3C                     l10740:
 11255                           
 11256                           ; BSR set to: 0
 11257                           ;main.c: 2125: writeEEPROM(0x63, val);
 11258  000A3C  6A0F               	clrf	?_writeEEPROM+1,c
 11259  000A3E  0E63               	movlw	99
 11260  000A40  6E0E               	movwf	?_writeEEPROM,c
 11261  000A42  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11262  000A46  EC67  F028         	call	_writeEEPROM	;wreg free
 11263                           
 11264                           ;main.c: 2126: rv = readEEPROM(0x63);
 11265  000A4A  6A17               	clrf	?_readEEPROM+1,c
 11266  000A4C  0E63               	movlw	99
 11267  000A4E  6E16               	movwf	?_readEEPROM,c
 11268  000A50  EC64  F029         	call	_readEEPROM	;wreg free
 11269  000A54  EFA9  F009         	goto	L20
 11270  000A58                     l10742:
 11271                           
 11272                           ; BSR set to: 0
 11273                           ;main.c: 2131: writeEEPROM(0x64, val);
 11274  000A58  6A0F               	clrf	?_writeEEPROM+1,c
 11275  000A5A  0E64               	movlw	100
 11276  000A5C  6E0E               	movwf	?_writeEEPROM,c
 11277  000A5E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11278  000A62  EC67  F028         	call	_writeEEPROM	;wreg free
 11279                           
 11280                           ;main.c: 2132: rv = readEEPROM(0x64);
 11281  000A66  6A17               	clrf	?_readEEPROM+1,c
 11282  000A68  0E64               	movlw	100
 11283  000A6A  6E16               	movwf	?_readEEPROM,c
 11284  000A6C  EC64  F029         	call	_readEEPROM	;wreg free
 11285  000A70  EFA9  F009         	goto	L20
 11286  000A74                     l10744:
 11287                           
 11288                           ; BSR set to: 0
 11289                           ;main.c: 2137: writeEEPROM(0x65, val);
 11290  000A74  6A0F               	clrf	?_writeEEPROM+1,c
 11291  000A76  0E65               	movlw	101
 11292  000A78  6E0E               	movwf	?_writeEEPROM,c
 11293  000A7A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11294  000A7E  EC67  F028         	call	_writeEEPROM	;wreg free
 11295                           
 11296                           ;main.c: 2138: rv = readEEPROM(0x65);
 11297  000A82  6A17               	clrf	?_readEEPROM+1,c
 11298  000A84  0E65               	movlw	101
 11299  000A86  6E16               	movwf	?_readEEPROM,c
 11300  000A88  EC64  F029         	call	_readEEPROM	;wreg free
 11301  000A8C  EFA9  F009         	goto	L20
 11302  000A90                     l10746:
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;main.c: 2143: writeEEPROM(0x66, val);
 11306  000A90  6A0F               	clrf	?_writeEEPROM+1,c
 11307  000A92  0E66               	movlw	102
 11308  000A94  6E0E               	movwf	?_writeEEPROM,c
 11309  000A96  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11310  000A9A  EC67  F028         	call	_writeEEPROM	;wreg free
 11311                           
 11312                           ;main.c: 2144: rv = readEEPROM(0x66);
 11313  000A9E  6A17               	clrf	?_readEEPROM+1,c
 11314  000AA0  0E66               	movlw	102
 11315  000AA2  6E16               	movwf	?_readEEPROM,c
 11316  000AA4  EC64  F029         	call	_readEEPROM	;wreg free
 11317  000AA8  EFA9  F009         	goto	L20
 11318  000AAC                     l10748:
 11319                           
 11320                           ; BSR set to: 0
 11321                           ;main.c: 2153: writeEEPROM(0x67, val);
 11322  000AAC  6A0F               	clrf	?_writeEEPROM+1,c
 11323  000AAE  0E67               	movlw	103
 11324  000AB0  6E0E               	movwf	?_writeEEPROM,c
 11325  000AB2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11326  000AB6  EC67  F028         	call	_writeEEPROM	;wreg free
 11327                           
 11328                           ;main.c: 2154: rv = readEEPROM(0x67);
 11329  000ABA  6A17               	clrf	?_readEEPROM+1,c
 11330  000ABC  0E67               	movlw	103
 11331  000ABE  6E16               	movwf	?_readEEPROM,c
 11332  000AC0  EC64  F029         	call	_readEEPROM	;wreg free
 11333  000AC4  EFA9  F009         	goto	L20
 11334  000AC8                     l10750:
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;main.c: 2159: writeEEPROM(0x68, val);
 11338  000AC8  6A0F               	clrf	?_writeEEPROM+1,c
 11339  000ACA  0E68               	movlw	104
 11340  000ACC  6E0E               	movwf	?_writeEEPROM,c
 11341  000ACE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11342  000AD2  EC67  F028         	call	_writeEEPROM	;wreg free
 11343                           
 11344                           ;main.c: 2160: rv = readEEPROM(0x68);
 11345  000AD6  6A17               	clrf	?_readEEPROM+1,c
 11346  000AD8  0E68               	movlw	104
 11347  000ADA  6E16               	movwf	?_readEEPROM,c
 11348  000ADC  EC64  F029         	call	_readEEPROM	;wreg free
 11349  000AE0  EFA9  F009         	goto	L20
 11350  000AE4                     l10752:
 11351                           
 11352                           ; BSR set to: 0
 11353                           ;main.c: 2165: writeEEPROM(0x69, val);
 11354  000AE4  6A0F               	clrf	?_writeEEPROM+1,c
 11355  000AE6  0E69               	movlw	105
 11356  000AE8  6E0E               	movwf	?_writeEEPROM,c
 11357  000AEA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11358  000AEE  EC67  F028         	call	_writeEEPROM	;wreg free
 11359                           
 11360                           ;main.c: 2166: rv = readEEPROM(0x69);
 11361  000AF2  6A17               	clrf	?_readEEPROM+1,c
 11362  000AF4  0E69               	movlw	105
 11363  000AF6  6E16               	movwf	?_readEEPROM,c
 11364  000AF8  EC64  F029         	call	_readEEPROM	;wreg free
 11365  000AFC  EFA9  F009         	goto	L20
 11366  000B00                     l10754:
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;main.c: 2171: writeEEPROM(0x6A, val);
 11370  000B00  6A0F               	clrf	?_writeEEPROM+1,c
 11371  000B02  0E6A               	movlw	106
 11372  000B04  6E0E               	movwf	?_writeEEPROM,c
 11373  000B06  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11374  000B0A  EC67  F028         	call	_writeEEPROM	;wreg free
 11375                           
 11376                           ;main.c: 2172: rv = readEEPROM(0x6A);
 11377  000B0E  6A17               	clrf	?_readEEPROM+1,c
 11378  000B10  0E6A               	movlw	106
 11379  000B12  6E16               	movwf	?_readEEPROM,c
 11380  000B14  EC64  F029         	call	_readEEPROM	;wreg free
 11381  000B18  EFA9  F009         	goto	L20
 11382  000B1C                     l10756:
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;main.c: 2177: writeEEPROM(0x6B, val);
 11386  000B1C  6A0F               	clrf	?_writeEEPROM+1,c
 11387  000B1E  0E6B               	movlw	107
 11388  000B20  6E0E               	movwf	?_writeEEPROM,c
 11389  000B22  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11390  000B26  EC67  F028         	call	_writeEEPROM	;wreg free
 11391                           
 11392                           ;main.c: 2178: rv = readEEPROM(0x6B);
 11393  000B2A  6A17               	clrf	?_readEEPROM+1,c
 11394  000B2C  0E6B               	movlw	107
 11395  000B2E  6E16               	movwf	?_readEEPROM,c
 11396  000B30  EC64  F029         	call	_readEEPROM	;wreg free
 11397  000B34  EFA9  F009         	goto	L20
 11398  000B38                     l10758:
 11399                           
 11400                           ; BSR set to: 0
 11401                           ;main.c: 2183: writeEEPROM(0x6C, val);
 11402  000B38  6A0F               	clrf	?_writeEEPROM+1,c
 11403  000B3A  0E6C               	movlw	108
 11404  000B3C  6E0E               	movwf	?_writeEEPROM,c
 11405  000B3E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11406  000B42  EC67  F028         	call	_writeEEPROM	;wreg free
 11407                           
 11408                           ;main.c: 2184: rv = readEEPROM(0x6C);
 11409  000B46  6A17               	clrf	?_readEEPROM+1,c
 11410  000B48  0E6C               	movlw	108
 11411  000B4A  6E16               	movwf	?_readEEPROM,c
 11412  000B4C  EC64  F029         	call	_readEEPROM	;wreg free
 11413  000B50  EFA9  F009         	goto	L20
 11414  000B54                     l10760:
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;main.c: 2189: writeEEPROM(0x6D, val);
 11418  000B54  6A0F               	clrf	?_writeEEPROM+1,c
 11419  000B56  0E6D               	movlw	109
 11420  000B58  6E0E               	movwf	?_writeEEPROM,c
 11421  000B5A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11422  000B5E  EC67  F028         	call	_writeEEPROM	;wreg free
 11423                           
 11424                           ;main.c: 2190: rv = readEEPROM(0x6D);
 11425  000B62  6A17               	clrf	?_readEEPROM+1,c
 11426  000B64  0E6D               	movlw	109
 11427  000B66  6E16               	movwf	?_readEEPROM,c
 11428  000B68  EC64  F029         	call	_readEEPROM	;wreg free
 11429  000B6C  D3F2               	goto	L20
 11430  000B6E                     l10762:
 11431                           
 11432                           ; BSR set to: 0
 11433                           ;main.c: 2195: writeEEPROM(0x6E, val);
 11434  000B6E  6A0F               	clrf	?_writeEEPROM+1,c
 11435  000B70  0E6E               	movlw	110
 11436  000B72  6E0E               	movwf	?_writeEEPROM,c
 11437  000B74  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11438  000B78  EC67  F028         	call	_writeEEPROM	;wreg free
 11439                           
 11440                           ;main.c: 2196: rv = readEEPROM(0x6E);
 11441  000B7C  6A17               	clrf	?_readEEPROM+1,c
 11442  000B7E  0E6E               	movlw	110
 11443  000B80  6E16               	movwf	?_readEEPROM,c
 11444  000B82  EC64  F029         	call	_readEEPROM	;wreg free
 11445  000B86  D3E5               	goto	L20
 11446  000B88                     l10764:
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;main.c: 2201: writeEEPROM(0x6F, val);
 11450  000B88  6A0F               	clrf	?_writeEEPROM+1,c
 11451  000B8A  0E6F               	movlw	111
 11452  000B8C  6E0E               	movwf	?_writeEEPROM,c
 11453  000B8E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11454  000B92  EC67  F028         	call	_writeEEPROM	;wreg free
 11455                           
 11456                           ;main.c: 2202: rv = readEEPROM(0x6F);
 11457  000B96  6A17               	clrf	?_readEEPROM+1,c
 11458  000B98  0E6F               	movlw	111
 11459  000B9A  6E16               	movwf	?_readEEPROM,c
 11460  000B9C  EC64  F029         	call	_readEEPROM	;wreg free
 11461  000BA0  D3D8               	goto	L20
 11462  000BA2                     l10766:
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;main.c: 2207: writeEEPROM(0x70, val);
 11466  000BA2  6A0F               	clrf	?_writeEEPROM+1,c
 11467  000BA4  0E70               	movlw	112
 11468  000BA6  6E0E               	movwf	?_writeEEPROM,c
 11469  000BA8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11470  000BAC  EC67  F028         	call	_writeEEPROM	;wreg free
 11471                           
 11472                           ;main.c: 2208: rv = readEEPROM(0x70);
 11473  000BB0  6A17               	clrf	?_readEEPROM+1,c
 11474  000BB2  0E70               	movlw	112
 11475  000BB4  6E16               	movwf	?_readEEPROM,c
 11476  000BB6  EC64  F029         	call	_readEEPROM	;wreg free
 11477  000BBA  D3CB               	goto	L20
 11478  000BBC                     l10768:
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;main.c: 2213: writeEEPROM(0x71, val);
 11482  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 11483  000BBE  0E71               	movlw	113
 11484  000BC0  6E0E               	movwf	?_writeEEPROM,c
 11485  000BC2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11486  000BC6  EC67  F028         	call	_writeEEPROM	;wreg free
 11487                           
 11488                           ;main.c: 2214: rv = readEEPROM(0x71);
 11489  000BCA  6A17               	clrf	?_readEEPROM+1,c
 11490  000BCC  0E71               	movlw	113
 11491  000BCE  6E16               	movwf	?_readEEPROM,c
 11492  000BD0  EC64  F029         	call	_readEEPROM	;wreg free
 11493  000BD4  D3BE               	goto	L20
 11494  000BD6                     l10770:
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;main.c: 2219: writeEEPROM(0x72, val);
 11498  000BD6  6A0F               	clrf	?_writeEEPROM+1,c
 11499  000BD8  0E72               	movlw	114
 11500  000BDA  6E0E               	movwf	?_writeEEPROM,c
 11501  000BDC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11502  000BE0  EC67  F028         	call	_writeEEPROM	;wreg free
 11503                           
 11504                           ;main.c: 2220: rv = readEEPROM(0x72);
 11505  000BE4  6A17               	clrf	?_readEEPROM+1,c
 11506  000BE6  0E72               	movlw	114
 11507  000BE8  6E16               	movwf	?_readEEPROM,c
 11508  000BEA  EC64  F029         	call	_readEEPROM	;wreg free
 11509  000BEE  D3B1               	goto	L20
 11510  000BF0                     l10772:
 11511                           
 11512                           ; BSR set to: 0
 11513                           ;main.c: 2229: writeEEPROM(0x73, val);
 11514  000BF0  6A0F               	clrf	?_writeEEPROM+1,c
 11515  000BF2  0E73               	movlw	115
 11516  000BF4  6E0E               	movwf	?_writeEEPROM,c
 11517  000BF6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11518  000BFA  EC67  F028         	call	_writeEEPROM	;wreg free
 11519                           
 11520                           ;main.c: 2230: rv = readEEPROM(0x73);
 11521  000BFE  6A17               	clrf	?_readEEPROM+1,c
 11522  000C00  0E73               	movlw	115
 11523  000C02  6E16               	movwf	?_readEEPROM,c
 11524  000C04  EC64  F029         	call	_readEEPROM	;wreg free
 11525  000C08  D3A4               	goto	L20
 11526  000C0A                     l10774:
 11527                           
 11528                           ; BSR set to: 0
 11529                           ;main.c: 2235: writeEEPROM(0x74, val);
 11530  000C0A  6A0F               	clrf	?_writeEEPROM+1,c
 11531  000C0C  0E74               	movlw	116
 11532  000C0E  6E0E               	movwf	?_writeEEPROM,c
 11533  000C10  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11534  000C14  EC67  F028         	call	_writeEEPROM	;wreg free
 11535                           
 11536                           ;main.c: 2236: rv = readEEPROM(0x74);
 11537  000C18  6A17               	clrf	?_readEEPROM+1,c
 11538  000C1A  0E74               	movlw	116
 11539  000C1C  6E16               	movwf	?_readEEPROM,c
 11540  000C1E  EC64  F029         	call	_readEEPROM	;wreg free
 11541  000C22  D397               	goto	L20
 11542  000C24                     l10776:
 11543                           
 11544                           ; BSR set to: 0
 11545                           ;main.c: 2241: writeEEPROM(0x75, val);
 11546  000C24  6A0F               	clrf	?_writeEEPROM+1,c
 11547  000C26  0E75               	movlw	117
 11548  000C28  6E0E               	movwf	?_writeEEPROM,c
 11549  000C2A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11550  000C2E  EC67  F028         	call	_writeEEPROM	;wreg free
 11551                           
 11552                           ;main.c: 2242: rv = readEEPROM(0x75);
 11553  000C32  6A17               	clrf	?_readEEPROM+1,c
 11554  000C34  0E75               	movlw	117
 11555  000C36  6E16               	movwf	?_readEEPROM,c
 11556  000C38  EC64  F029         	call	_readEEPROM	;wreg free
 11557  000C3C  D38A               	goto	L20
 11558  000C3E                     l10778:
 11559                           
 11560                           ; BSR set to: 0
 11561                           ;main.c: 2247: writeEEPROM(0x76, val);
 11562  000C3E  6A0F               	clrf	?_writeEEPROM+1,c
 11563  000C40  0E76               	movlw	118
 11564  000C42  6E0E               	movwf	?_writeEEPROM,c
 11565  000C44  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11566  000C48  EC67  F028         	call	_writeEEPROM	;wreg free
 11567                           
 11568                           ;main.c: 2248: rv = readEEPROM(0x76);
 11569  000C4C  6A17               	clrf	?_readEEPROM+1,c
 11570  000C4E  0E76               	movlw	118
 11571  000C50  6E16               	movwf	?_readEEPROM,c
 11572  000C52  EC64  F029         	call	_readEEPROM	;wreg free
 11573  000C56  D37D               	goto	L20
 11574  000C58                     l10780:
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;main.c: 2253: writeEEPROM(0x77, val);
 11578  000C58  6A0F               	clrf	?_writeEEPROM+1,c
 11579  000C5A  0E77               	movlw	119
 11580  000C5C  6E0E               	movwf	?_writeEEPROM,c
 11581  000C5E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11582  000C62  EC67  F028         	call	_writeEEPROM	;wreg free
 11583                           
 11584                           ;main.c: 2254: rv = readEEPROM(0x77);
 11585  000C66  6A17               	clrf	?_readEEPROM+1,c
 11586  000C68  0E77               	movlw	119
 11587  000C6A  6E16               	movwf	?_readEEPROM,c
 11588  000C6C  EC64  F029         	call	_readEEPROM	;wreg free
 11589  000C70  D370               	goto	L20
 11590  000C72                     l10782:
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;main.c: 2259: writeEEPROM(0x78, val);
 11594  000C72  6A0F               	clrf	?_writeEEPROM+1,c
 11595  000C74  0E78               	movlw	120
 11596  000C76  6E0E               	movwf	?_writeEEPROM,c
 11597  000C78  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11598  000C7C  EC67  F028         	call	_writeEEPROM	;wreg free
 11599                           
 11600                           ;main.c: 2260: rv = readEEPROM(0x78);
 11601  000C80  6A17               	clrf	?_readEEPROM+1,c
 11602  000C82  0E78               	movlw	120
 11603  000C84  6E16               	movwf	?_readEEPROM,c
 11604  000C86  EC64  F029         	call	_readEEPROM	;wreg free
 11605  000C8A  D363               	goto	L20
 11606  000C8C                     l10784:
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;main.c: 2265: writeEEPROM(0x79, val);
 11610  000C8C  6A0F               	clrf	?_writeEEPROM+1,c
 11611  000C8E  0E79               	movlw	121
 11612  000C90  6E0E               	movwf	?_writeEEPROM,c
 11613  000C92  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11614  000C96  EC67  F028         	call	_writeEEPROM	;wreg free
 11615                           
 11616                           ;main.c: 2266: rv = readEEPROM(0x79);
 11617  000C9A  6A17               	clrf	?_readEEPROM+1,c
 11618  000C9C  0E79               	movlw	121
 11619  000C9E  6E16               	movwf	?_readEEPROM,c
 11620  000CA0  EC64  F029         	call	_readEEPROM	;wreg free
 11621  000CA4  D356               	goto	L20
 11622  000CA6                     l10786:
 11623                           
 11624                           ; BSR set to: 0
 11625                           ;main.c: 2271: writeEEPROM(0x7A, val);
 11626  000CA6  6A0F               	clrf	?_writeEEPROM+1,c
 11627  000CA8  0E7A               	movlw	122
 11628  000CAA  6E0E               	movwf	?_writeEEPROM,c
 11629  000CAC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11630  000CB0  EC67  F028         	call	_writeEEPROM	;wreg free
 11631                           
 11632                           ;main.c: 2272: rv = readEEPROM(0x7A);
 11633  000CB4  6A17               	clrf	?_readEEPROM+1,c
 11634  000CB6  0E7A               	movlw	122
 11635  000CB8  6E16               	movwf	?_readEEPROM,c
 11636  000CBA  EC64  F029         	call	_readEEPROM	;wreg free
 11637  000CBE  D349               	goto	L20
 11638  000CC0                     l10788:
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;main.c: 2277: writeEEPROM(0x7B, val);
 11642  000CC0  6A0F               	clrf	?_writeEEPROM+1,c
 11643  000CC2  0E7B               	movlw	123
 11644  000CC4  6E0E               	movwf	?_writeEEPROM,c
 11645  000CC6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11646  000CCA  EC67  F028         	call	_writeEEPROM	;wreg free
 11647                           
 11648                           ;main.c: 2278: rv = readEEPROM(0x7B);
 11649  000CCE  6A17               	clrf	?_readEEPROM+1,c
 11650  000CD0  0E7B               	movlw	123
 11651  000CD2  6E16               	movwf	?_readEEPROM,c
 11652  000CD4  EC64  F029         	call	_readEEPROM	;wreg free
 11653  000CD8  D33C               	goto	L20
 11654  000CDA                     l10790:
 11655                           
 11656                           ; BSR set to: 0
 11657                           ;main.c: 2283: writeEEPROM(0x7C, val);
 11658  000CDA  6A0F               	clrf	?_writeEEPROM+1,c
 11659  000CDC  0E7C               	movlw	124
 11660  000CDE  6E0E               	movwf	?_writeEEPROM,c
 11661  000CE0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11662  000CE4  EC67  F028         	call	_writeEEPROM	;wreg free
 11663                           
 11664                           ;main.c: 2284: rv = readEEPROM(0x7C);
 11665  000CE8  6A17               	clrf	?_readEEPROM+1,c
 11666  000CEA  0E7C               	movlw	124
 11667  000CEC  6E16               	movwf	?_readEEPROM,c
 11668  000CEE  EC64  F029         	call	_readEEPROM	;wreg free
 11669  000CF2  D32F               	goto	L20
 11670  000CF4                     l10792:
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;main.c: 2289: writeEEPROM(0x7D, val);
 11674  000CF4  6A0F               	clrf	?_writeEEPROM+1,c
 11675  000CF6  0E7D               	movlw	125
 11676  000CF8  6E0E               	movwf	?_writeEEPROM,c
 11677  000CFA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11678  000CFE  EC67  F028         	call	_writeEEPROM	;wreg free
 11679                           
 11680                           ;main.c: 2290: rv = readEEPROM(0x7D);
 11681  000D02  6A17               	clrf	?_readEEPROM+1,c
 11682  000D04  0E7D               	movlw	125
 11683  000D06  6E16               	movwf	?_readEEPROM,c
 11684  000D08  EC64  F029         	call	_readEEPROM	;wreg free
 11685  000D0C  D322               	goto	L20
 11686  000D0E                     l10794:
 11687                           
 11688                           ; BSR set to: 0
 11689                           ;main.c: 2295: writeEEPROM(0x7E, val);
 11690  000D0E  6A0F               	clrf	?_writeEEPROM+1,c
 11691  000D10  0E7E               	movlw	126
 11692  000D12  6E0E               	movwf	?_writeEEPROM,c
 11693  000D14  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11694  000D18  EC67  F028         	call	_writeEEPROM	;wreg free
 11695                           
 11696                           ;main.c: 2296: rv = readEEPROM(0x7E);
 11697  000D1C  6A17               	clrf	?_readEEPROM+1,c
 11698  000D1E  0E7E               	movlw	126
 11699  000D20  6E16               	movwf	?_readEEPROM,c
 11700  000D22  EC64  F029         	call	_readEEPROM	;wreg free
 11701  000D26  D315               	goto	L20
 11702  000D28                     l10796:
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;main.c: 2305: writeEEPROM(0x7F, val );
 11706  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 11707  000D2A  0E7F               	movlw	127
 11708  000D2C  6E0E               	movwf	?_writeEEPROM,c
 11709  000D2E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11710  000D32  EC67  F028         	call	_writeEEPROM	;wreg free
 11711                           
 11712                           ;main.c: 2306: rv = readEEPROM(0x7F);
 11713  000D36  6A17               	clrf	?_readEEPROM+1,c
 11714  000D38  0E7F               	movlw	127
 11715  000D3A  6E16               	movwf	?_readEEPROM,c
 11716  000D3C  EC64  F029         	call	_readEEPROM	;wreg free
 11717  000D40  D308               	goto	L20
 11718  000D42                     l10798:
 11719                           
 11720                           ; BSR set to: 0
 11721                           ;main.c: 2311: writeEEPROM(0x80, val );
 11722  000D42  6A0F               	clrf	?_writeEEPROM+1,c
 11723  000D44  0E80               	movlw	128
 11724  000D46  6E0E               	movwf	?_writeEEPROM,c
 11725  000D48  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11726  000D4C  EC67  F028         	call	_writeEEPROM	;wreg free
 11727                           
 11728                           ;main.c: 2312: rv = readEEPROM(0x80);
 11729  000D50  6A17               	clrf	?_readEEPROM+1,c
 11730  000D52  0E80               	movlw	128
 11731  000D54  6E16               	movwf	?_readEEPROM,c
 11732  000D56  EC64  F029         	call	_readEEPROM	;wreg free
 11733  000D5A  D2FB               	goto	L20
 11734  000D5C                     l10800:
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;main.c: 2317: writeEEPROM(0x81, val );
 11738  000D5C  6A0F               	clrf	?_writeEEPROM+1,c
 11739  000D5E  0E81               	movlw	129
 11740  000D60  6E0E               	movwf	?_writeEEPROM,c
 11741  000D62  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11742  000D66  EC67  F028         	call	_writeEEPROM	;wreg free
 11743                           
 11744                           ;main.c: 2318: rv = readEEPROM(0x81);
 11745  000D6A  6A17               	clrf	?_readEEPROM+1,c
 11746  000D6C  0E81               	movlw	129
 11747  000D6E  6E16               	movwf	?_readEEPROM,c
 11748  000D70  EC64  F029         	call	_readEEPROM	;wreg free
 11749  000D74  D2EE               	goto	L20
 11750  000D76                     l10802:
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;main.c: 2323: writeEEPROM(0x82, val );
 11754  000D76  6A0F               	clrf	?_writeEEPROM+1,c
 11755  000D78  0E82               	movlw	130
 11756  000D7A  6E0E               	movwf	?_writeEEPROM,c
 11757  000D7C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11758  000D80  EC67  F028         	call	_writeEEPROM	;wreg free
 11759                           
 11760                           ;main.c: 2324: rv = readEEPROM(0x82);
 11761  000D84  6A17               	clrf	?_readEEPROM+1,c
 11762  000D86  0E82               	movlw	130
 11763  000D88  6E16               	movwf	?_readEEPROM,c
 11764  000D8A  EC64  F029         	call	_readEEPROM	;wreg free
 11765  000D8E  D2E1               	goto	L20
 11766  000D90                     l10804:
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;main.c: 2329: writeEEPROM(0x83, val );
 11770  000D90  6A0F               	clrf	?_writeEEPROM+1,c
 11771  000D92  0E83               	movlw	131
 11772  000D94  6E0E               	movwf	?_writeEEPROM,c
 11773  000D96  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11774  000D9A  EC67  F028         	call	_writeEEPROM	;wreg free
 11775                           
 11776                           ;main.c: 2330: rv = readEEPROM(0x83);
 11777  000D9E  6A17               	clrf	?_readEEPROM+1,c
 11778  000DA0  0E83               	movlw	131
 11779  000DA2  6E16               	movwf	?_readEEPROM,c
 11780  000DA4  EC64  F029         	call	_readEEPROM	;wreg free
 11781  000DA8  D2D4               	goto	L20
 11782  000DAA                     l10806:
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;main.c: 2335: writeEEPROM(0x84, val );
 11786  000DAA  6A0F               	clrf	?_writeEEPROM+1,c
 11787  000DAC  0E84               	movlw	132
 11788  000DAE  6E0E               	movwf	?_writeEEPROM,c
 11789  000DB0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11790  000DB4  EC67  F028         	call	_writeEEPROM	;wreg free
 11791                           
 11792                           ;main.c: 2336: rv = readEEPROM(0x84);
 11793  000DB8  6A17               	clrf	?_readEEPROM+1,c
 11794  000DBA  0E84               	movlw	132
 11795  000DBC  6E16               	movwf	?_readEEPROM,c
 11796  000DBE  EC64  F029         	call	_readEEPROM	;wreg free
 11797  000DC2  D2C7               	goto	L20
 11798  000DC4                     l10808:
 11799                           
 11800                           ; BSR set to: 0
 11801                           ;main.c: 2341: writeEEPROM(0x85, val );
 11802  000DC4  6A0F               	clrf	?_writeEEPROM+1,c
 11803  000DC6  0E85               	movlw	133
 11804  000DC8  6E0E               	movwf	?_writeEEPROM,c
 11805  000DCA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11806  000DCE  EC67  F028         	call	_writeEEPROM	;wreg free
 11807                           
 11808                           ;main.c: 2342: rv = readEEPROM(0x85);
 11809  000DD2  6A17               	clrf	?_readEEPROM+1,c
 11810  000DD4  0E85               	movlw	133
 11811  000DD6  6E16               	movwf	?_readEEPROM,c
 11812  000DD8  EC64  F029         	call	_readEEPROM	;wreg free
 11813  000DDC  D2BA               	goto	L20
 11814  000DDE                     l10810:
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;main.c: 2347: writeEEPROM(0x86, val );
 11818  000DDE  6A0F               	clrf	?_writeEEPROM+1,c
 11819  000DE0  0E86               	movlw	134
 11820  000DE2  6E0E               	movwf	?_writeEEPROM,c
 11821  000DE4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11822  000DE8  EC67  F028         	call	_writeEEPROM	;wreg free
 11823                           
 11824                           ;main.c: 2348: rv = readEEPROM(0x86);
 11825  000DEC  6A17               	clrf	?_readEEPROM+1,c
 11826  000DEE  0E86               	movlw	134
 11827  000DF0  6E16               	movwf	?_readEEPROM,c
 11828  000DF2  EC64  F029         	call	_readEEPROM	;wreg free
 11829  000DF6  D2AD               	goto	L20
 11830  000DF8                     l10812:
 11831                           
 11832                           ; BSR set to: 0
 11833                           ;main.c: 2353: writeEEPROM(0x87, val );
 11834  000DF8  6A0F               	clrf	?_writeEEPROM+1,c
 11835  000DFA  0E87               	movlw	135
 11836  000DFC  6E0E               	movwf	?_writeEEPROM,c
 11837  000DFE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11838  000E02  EC67  F028         	call	_writeEEPROM	;wreg free
 11839                           
 11840                           ;main.c: 2354: rv = readEEPROM(0x87);
 11841  000E06  6A17               	clrf	?_readEEPROM+1,c
 11842  000E08  0E87               	movlw	135
 11843  000E0A  6E16               	movwf	?_readEEPROM,c
 11844  000E0C  EC64  F029         	call	_readEEPROM	;wreg free
 11845  000E10  D2A0               	goto	L20
 11846  000E12                     l10814:
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;main.c: 2359: writeEEPROM(0x88, val );
 11850  000E12  6A0F               	clrf	?_writeEEPROM+1,c
 11851  000E14  0E88               	movlw	136
 11852  000E16  6E0E               	movwf	?_writeEEPROM,c
 11853  000E18  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11854  000E1C  EC67  F028         	call	_writeEEPROM	;wreg free
 11855                           
 11856                           ;main.c: 2360: rv = readEEPROM(0x88);
 11857  000E20  6A17               	clrf	?_readEEPROM+1,c
 11858  000E22  0E88               	movlw	136
 11859  000E24  6E16               	movwf	?_readEEPROM,c
 11860  000E26  EC64  F029         	call	_readEEPROM	;wreg free
 11861  000E2A  D293               	goto	L20
 11862  000E2C                     l10816:
 11863                           
 11864                           ; BSR set to: 0
 11865                           ;main.c: 2365: writeEEPROM(0x89, val );
 11866  000E2C  6A0F               	clrf	?_writeEEPROM+1,c
 11867  000E2E  0E89               	movlw	137
 11868  000E30  6E0E               	movwf	?_writeEEPROM,c
 11869  000E32  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11870  000E36  EC67  F028         	call	_writeEEPROM	;wreg free
 11871                           
 11872                           ;main.c: 2366: rv = readEEPROM(0x89);
 11873  000E3A  6A17               	clrf	?_readEEPROM+1,c
 11874  000E3C  0E89               	movlw	137
 11875  000E3E  6E16               	movwf	?_readEEPROM,c
 11876  000E40  EC64  F029         	call	_readEEPROM	;wreg free
 11877  000E44  D286               	goto	L20
 11878  000E46                     l10818:
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;main.c: 2371: writeEEPROM(0x8A, val );
 11882  000E46  6A0F               	clrf	?_writeEEPROM+1,c
 11883  000E48  0E8A               	movlw	138
 11884  000E4A  6E0E               	movwf	?_writeEEPROM,c
 11885  000E4C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11886  000E50  EC67  F028         	call	_writeEEPROM	;wreg free
 11887                           
 11888                           ;main.c: 2372: rv = readEEPROM(0x8A);
 11889  000E54  6A17               	clrf	?_readEEPROM+1,c
 11890  000E56  0E8A               	movlw	138
 11891  000E58  6E16               	movwf	?_readEEPROM,c
 11892  000E5A  EC64  F029         	call	_readEEPROM	;wreg free
 11893  000E5E  D279               	goto	L20
 11894  000E60                     l10820:
 11895                           
 11896                           ; BSR set to: 0
 11897                           ;main.c: 2381: writeEEPROM(0x8B, val );
 11898  000E60  6A0F               	clrf	?_writeEEPROM+1,c
 11899  000E62  0E8B               	movlw	139
 11900  000E64  6E0E               	movwf	?_writeEEPROM,c
 11901  000E66  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11902  000E6A  EC67  F028         	call	_writeEEPROM	;wreg free
 11903                           
 11904                           ;main.c: 2382: rv = readEEPROM(0x8B);
 11905  000E6E  6A17               	clrf	?_readEEPROM+1,c
 11906  000E70  0E8B               	movlw	139
 11907  000E72  6E16               	movwf	?_readEEPROM,c
 11908  000E74  EC64  F029         	call	_readEEPROM	;wreg free
 11909  000E78  D26C               	goto	L20
 11910  000E7A                     l10822:
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;main.c: 2387: writeEEPROM(0x8C, val );
 11914  000E7A  6A0F               	clrf	?_writeEEPROM+1,c
 11915  000E7C  0E8C               	movlw	140
 11916  000E7E  6E0E               	movwf	?_writeEEPROM,c
 11917  000E80  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11918  000E84  EC67  F028         	call	_writeEEPROM	;wreg free
 11919                           
 11920                           ;main.c: 2388: rv = readEEPROM(0x8C);
 11921  000E88  6A17               	clrf	?_readEEPROM+1,c
 11922  000E8A  0E8C               	movlw	140
 11923  000E8C  6E16               	movwf	?_readEEPROM,c
 11924  000E8E  EC64  F029         	call	_readEEPROM	;wreg free
 11925  000E92  D25F               	goto	L20
 11926  000E94                     l10824:
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;main.c: 2393: writeEEPROM(0x8D, val );
 11930  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 11931  000E96  0E8D               	movlw	141
 11932  000E98  6E0E               	movwf	?_writeEEPROM,c
 11933  000E9A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11934  000E9E  EC67  F028         	call	_writeEEPROM	;wreg free
 11935                           
 11936                           ;main.c: 2394: rv = readEEPROM(0x8D);
 11937  000EA2  6A17               	clrf	?_readEEPROM+1,c
 11938  000EA4  0E8D               	movlw	141
 11939  000EA6  6E16               	movwf	?_readEEPROM,c
 11940  000EA8  EC64  F029         	call	_readEEPROM	;wreg free
 11941  000EAC  D252               	goto	L20
 11942  000EAE                     l10826:
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;main.c: 2399: writeEEPROM(0x8E, val );
 11946  000EAE  6A0F               	clrf	?_writeEEPROM+1,c
 11947  000EB0  0E8E               	movlw	142
 11948  000EB2  6E0E               	movwf	?_writeEEPROM,c
 11949  000EB4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11950  000EB8  EC67  F028         	call	_writeEEPROM	;wreg free
 11951                           
 11952                           ;main.c: 2400: rv = readEEPROM(0x8E);
 11953  000EBC  6A17               	clrf	?_readEEPROM+1,c
 11954  000EBE  0E8E               	movlw	142
 11955  000EC0  6E16               	movwf	?_readEEPROM,c
 11956  000EC2  EC64  F029         	call	_readEEPROM	;wreg free
 11957  000EC6  D245               	goto	L20
 11958  000EC8                     l10828:
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;main.c: 2405: writeEEPROM(0x8F, val );
 11962  000EC8  6A0F               	clrf	?_writeEEPROM+1,c
 11963  000ECA  0E8F               	movlw	143
 11964  000ECC  6E0E               	movwf	?_writeEEPROM,c
 11965  000ECE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11966  000ED2  EC67  F028         	call	_writeEEPROM	;wreg free
 11967                           
 11968                           ;main.c: 2406: rv = readEEPROM(0x8F);
 11969  000ED6  6A17               	clrf	?_readEEPROM+1,c
 11970  000ED8  0E8F               	movlw	143
 11971  000EDA  6E16               	movwf	?_readEEPROM,c
 11972  000EDC  EC64  F029         	call	_readEEPROM	;wreg free
 11973  000EE0  D238               	goto	L20
 11974  000EE2                     l10830:
 11975                           
 11976                           ; BSR set to: 0
 11977                           ;main.c: 2411: writeEEPROM(0x90, val );
 11978  000EE2  6A0F               	clrf	?_writeEEPROM+1,c
 11979  000EE4  0E90               	movlw	144
 11980  000EE6  6E0E               	movwf	?_writeEEPROM,c
 11981  000EE8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11982  000EEC  EC67  F028         	call	_writeEEPROM	;wreg free
 11983                           
 11984                           ;main.c: 2412: rv = readEEPROM(0x90);
 11985  000EF0  6A17               	clrf	?_readEEPROM+1,c
 11986  000EF2  0E90               	movlw	144
 11987  000EF4  6E16               	movwf	?_readEEPROM,c
 11988  000EF6  EC64  F029         	call	_readEEPROM	;wreg free
 11989  000EFA  D22B               	goto	L20
 11990  000EFC                     l10832:
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;main.c: 2417: writeEEPROM(0x91, val );
 11994  000EFC  6A0F               	clrf	?_writeEEPROM+1,c
 11995  000EFE  0E91               	movlw	145
 11996  000F00  6E0E               	movwf	?_writeEEPROM,c
 11997  000F02  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11998  000F06  EC67  F028         	call	_writeEEPROM	;wreg free
 11999                           
 12000                           ;main.c: 2418: rv = readEEPROM(0x91);
 12001  000F0A  6A17               	clrf	?_readEEPROM+1,c
 12002  000F0C  0E91               	movlw	145
 12003  000F0E  6E16               	movwf	?_readEEPROM,c
 12004  000F10  EC64  F029         	call	_readEEPROM	;wreg free
 12005  000F14  D21E               	goto	L20
 12006  000F16                     l10834:
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;main.c: 2423: writeEEPROM(0x92, val );
 12010  000F16  6A0F               	clrf	?_writeEEPROM+1,c
 12011  000F18  0E92               	movlw	146
 12012  000F1A  6E0E               	movwf	?_writeEEPROM,c
 12013  000F1C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12014  000F20  EC67  F028         	call	_writeEEPROM	;wreg free
 12015                           
 12016                           ;main.c: 2424: rv = readEEPROM(0x92);
 12017  000F24  6A17               	clrf	?_readEEPROM+1,c
 12018  000F26  0E92               	movlw	146
 12019  000F28  6E16               	movwf	?_readEEPROM,c
 12020  000F2A  EC64  F029         	call	_readEEPROM	;wreg free
 12021  000F2E  D211               	goto	L20
 12022  000F30                     l10836:
 12023                           
 12024                           ; BSR set to: 0
 12025                           ;main.c: 2429: writeEEPROM(0x93, val );
 12026  000F30  6A0F               	clrf	?_writeEEPROM+1,c
 12027  000F32  0E93               	movlw	147
 12028  000F34  6E0E               	movwf	?_writeEEPROM,c
 12029  000F36  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12030  000F3A  EC67  F028         	call	_writeEEPROM	;wreg free
 12031                           
 12032                           ;main.c: 2430: rv = readEEPROM(0x93);
 12033  000F3E  6A17               	clrf	?_readEEPROM+1,c
 12034  000F40  0E93               	movlw	147
 12035  000F42  6E16               	movwf	?_readEEPROM,c
 12036  000F44  EC64  F029         	call	_readEEPROM	;wreg free
 12037  000F48  D204               	goto	L20
 12038  000F4A                     l10838:
 12039                           
 12040                           ; BSR set to: 0
 12041                           ;main.c: 2435: writeEEPROM(0x94, val );
 12042  000F4A  6A0F               	clrf	?_writeEEPROM+1,c
 12043  000F4C  0E94               	movlw	148
 12044  000F4E  6E0E               	movwf	?_writeEEPROM,c
 12045  000F50  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12046  000F54  EC67  F028         	call	_writeEEPROM	;wreg free
 12047                           
 12048                           ;main.c: 2436: rv = readEEPROM(0x94);
 12049  000F58  6A17               	clrf	?_readEEPROM+1,c
 12050  000F5A  0E94               	movlw	148
 12051  000F5C  6E16               	movwf	?_readEEPROM,c
 12052  000F5E  EC64  F029         	call	_readEEPROM	;wreg free
 12053  000F62  D1F7               	goto	L20
 12054  000F64                     l10840:
 12055                           
 12056                           ; BSR set to: 0
 12057                           ;main.c: 2441: writeEEPROM(0x95, val );
 12058  000F64  6A0F               	clrf	?_writeEEPROM+1,c
 12059  000F66  0E95               	movlw	149
 12060  000F68  6E0E               	movwf	?_writeEEPROM,c
 12061  000F6A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12062  000F6E  EC67  F028         	call	_writeEEPROM	;wreg free
 12063                           
 12064                           ;main.c: 2442: rv = readEEPROM(0x95);
 12065  000F72  6A17               	clrf	?_readEEPROM+1,c
 12066  000F74  0E95               	movlw	149
 12067  000F76  6E16               	movwf	?_readEEPROM,c
 12068  000F78  EC64  F029         	call	_readEEPROM	;wreg free
 12069  000F7C  D1EA               	goto	L20
 12070  000F7E                     l10842:
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;main.c: 2447: writeEEPROM(0x96, val );
 12074  000F7E  6A0F               	clrf	?_writeEEPROM+1,c
 12075  000F80  0E96               	movlw	150
 12076  000F82  6E0E               	movwf	?_writeEEPROM,c
 12077  000F84  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12078  000F88  EC67  F028         	call	_writeEEPROM	;wreg free
 12079                           
 12080                           ;main.c: 2448: rv = readEEPROM(0x96);
 12081  000F8C  6A17               	clrf	?_readEEPROM+1,c
 12082  000F8E  0E96               	movlw	150
 12083  000F90  6E16               	movwf	?_readEEPROM,c
 12084  000F92  EC64  F029         	call	_readEEPROM	;wreg free
 12085  000F96  D1DD               	goto	L20
 12086  000F98                     l10844:
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;main.c: 2457: writeEEPROM(0x97, val);
 12090  000F98  6A0F               	clrf	?_writeEEPROM+1,c
 12091  000F9A  0E97               	movlw	151
 12092  000F9C  6E0E               	movwf	?_writeEEPROM,c
 12093  000F9E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12094  000FA2  EC67  F028         	call	_writeEEPROM	;wreg free
 12095                           
 12096                           ;main.c: 2458: rv = readEEPROM(0x97);
 12097  000FA6  6A17               	clrf	?_readEEPROM+1,c
 12098  000FA8  0E97               	movlw	151
 12099  000FAA  6E16               	movwf	?_readEEPROM,c
 12100  000FAC  EC64  F029         	call	_readEEPROM	;wreg free
 12101  000FB0  D1D0               	goto	L20
 12102  000FB2                     l10846:
 12103                           
 12104                           ; BSR set to: 0
 12105                           ;main.c: 2463: writeEEPROM(0x98, val);
 12106  000FB2  6A0F               	clrf	?_writeEEPROM+1,c
 12107  000FB4  0E98               	movlw	152
 12108  000FB6  6E0E               	movwf	?_writeEEPROM,c
 12109  000FB8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12110  000FBC  EC67  F028         	call	_writeEEPROM	;wreg free
 12111                           
 12112                           ;main.c: 2464: rv = readEEPROM(0x98);
 12113  000FC0  6A17               	clrf	?_readEEPROM+1,c
 12114  000FC2  0E98               	movlw	152
 12115  000FC4  6E16               	movwf	?_readEEPROM,c
 12116  000FC6  EC64  F029         	call	_readEEPROM	;wreg free
 12117  000FCA  D1C3               	goto	L20
 12118  000FCC                     l10848:
 12119                           
 12120                           ; BSR set to: 0
 12121                           ;main.c: 2469: writeEEPROM(0x99, val);
 12122  000FCC  6A0F               	clrf	?_writeEEPROM+1,c
 12123  000FCE  0E99               	movlw	153
 12124  000FD0  6E0E               	movwf	?_writeEEPROM,c
 12125  000FD2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12126  000FD6  EC67  F028         	call	_writeEEPROM	;wreg free
 12127  000FDA  6A17               	clrf	?_readEEPROM+1,c
 12128  000FDC  0E99               	movlw	153
 12129  000FDE  6E16               	movwf	?_readEEPROM,c
 12130  000FE0  EC64  F029         	call	_readEEPROM	;wreg free
 12131  000FE4                     l515:
 12132                           
 12133                           ;main.c: 2474: writeEEPROM(0x9A, val);
 12134  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 12135  000FE6  0E9A               	movlw	154
 12136  000FE8  6E0E               	movwf	?_writeEEPROM,c
 12137  000FEA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12138  000FEE  EC67  F028         	call	_writeEEPROM	;wreg free
 12139                           
 12140                           ;main.c: 2475: rv = readEEPROM(0x9A);
 12141  000FF2  6A17               	clrf	?_readEEPROM+1,c
 12142  000FF4  0E9A               	movlw	154
 12143  000FF6  6E16               	movwf	?_readEEPROM,c
 12144  000FF8  EC64  F029         	call	_readEEPROM	;wreg free
 12145  000FFC  D1AA               	goto	L20
 12146  000FFE                     l10850:
 12147                           
 12148                           ; BSR set to: 0
 12149                           ;main.c: 2480: writeEEPROM(0x9B, val);
 12150  000FFE  6A0F               	clrf	?_writeEEPROM+1,c
 12151  001000  0E9B               	movlw	155
 12152  001002  6E0E               	movwf	?_writeEEPROM,c
 12153  001004  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12154  001008  EC67  F028         	call	_writeEEPROM	;wreg free
 12155                           
 12156                           ;main.c: 2481: rv = readEEPROM(0x9B);
 12157  00100C  6A17               	clrf	?_readEEPROM+1,c
 12158  00100E  0E9B               	movlw	155
 12159  001010  6E16               	movwf	?_readEEPROM,c
 12160  001012  EC64  F029         	call	_readEEPROM	;wreg free
 12161  001016  D19D               	goto	L20
 12162  001018                     l10852:
 12163                           
 12164                           ; BSR set to: 0
 12165                           ;main.c: 2486: writeEEPROM(0x9C, val);
 12166  001018  6A0F               	clrf	?_writeEEPROM+1,c
 12167  00101A  0E9C               	movlw	156
 12168  00101C  6E0E               	movwf	?_writeEEPROM,c
 12169  00101E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12170  001022  EC67  F028         	call	_writeEEPROM	;wreg free
 12171                           
 12172                           ;main.c: 2487: rv = readEEPROM(0x9C);
 12173  001026  6A17               	clrf	?_readEEPROM+1,c
 12174  001028  0E9C               	movlw	156
 12175  00102A  6E16               	movwf	?_readEEPROM,c
 12176  00102C  EC64  F029         	call	_readEEPROM	;wreg free
 12177  001030  D190               	goto	L20
 12178  001032                     l518:
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;main.c: 2492: rv = 0;
 12182  001032  6A26               	clrf	vscp_writeAppReg@rv,c
 12183                           
 12184                           ;main.c: 2493: break;
 12185  001034  D18F               	goto	l10888
 12186  001036                     l10854:
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;main.c: 2502: writeEEPROM(0xF2, val);
 12190  001036  6A0F               	clrf	?_writeEEPROM+1,c
 12191  001038  0EF2               	movlw	242
 12192  00103A  6E0E               	movwf	?_writeEEPROM,c
 12193  00103C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12194  001040  EC67  F028         	call	_writeEEPROM	;wreg free
 12195                           
 12196                           ;main.c: 2503: rv = readEEPROM(0xF2);
 12197  001044  6A17               	clrf	?_readEEPROM+1,c
 12198  001046  0EF2               	movlw	242
 12199  001048  6E16               	movwf	?_readEEPROM,c
 12200  00104A  EC64  F029         	call	_readEEPROM	;wreg free
 12201  00104E  D181               	goto	L20
 12202  001050                     l10856:
 12203                           
 12204                           ; BSR set to: 0
 12205                           ;main.c: 2508: writeEEPROM(0xF3, val);
 12206  001050  6A0F               	clrf	?_writeEEPROM+1,c
 12207  001052  0EF3               	movlw	243
 12208  001054  6E0E               	movwf	?_writeEEPROM,c
 12209  001056  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12210  00105A  EC67  F028         	call	_writeEEPROM	;wreg free
 12211                           
 12212                           ;main.c: 2509: rv = readEEPROM(0xF3);
 12213  00105E  6A17               	clrf	?_readEEPROM+1,c
 12214  001060  0EF3               	movlw	243
 12215  001062  6E16               	movwf	?_readEEPROM,c
 12216  001064  EC64  F029         	call	_readEEPROM	;wreg free
 12217  001068  D174               	goto	L20
 12218  00106A                     l10858:
 12219                           
 12220                           ; BSR set to: 0
 12221                           ;main.c: 2513: rv = ~val;
 12222  00106A  1C23               	comf	vscp_writeAppReg@val,w,c
 12223  00106C  D172               	goto	L20
 12224  00106E                     l10862:
 12225                           
 12226                           ; BSR set to: 0
 12227  00106E  5025               	movf	vscp_writeAppReg@reg,w,c
 12228                           
 12229                           ; Switch size 1, requested type "space"
 12230                           ; Number of cases is 96, Range of values is 0 to 119
 12231                           ; switch strategies available:
 12232                           ; Name         Instructions Cycles
 12233                           ; simple_byte          289   145 (average)
 12234                           ;	Chosen strategy is simple_byte
 12235  001070  E102 EF42  F003    	bz	l10672
 12236  001076  0A01               	xorlw	1	; case 1
 12237  001078  E102 EF50  F003    	bz	l10674
 12238  00107E  0A03               	xorlw	3	; case 2
 12239  001080  E102 EF5E  F003    	bz	l10676
 12240  001086  0A01               	xorlw	1	; case 3
 12241  001088  E102 EF6C  F003    	bz	l10678
 12242  00108E  0A07               	xorlw	7	; case 4
 12243  001090  E102 EF7A  F003    	bz	l10680
 12244  001096  0A01               	xorlw	1	; case 5
 12245  001098  E102 EF88  F003    	bz	l10682
 12246  00109E  0A03               	xorlw	3	; case 6
 12247  0010A0  E102 EF96  F003    	bz	l10684
 12248  0010A6  0A01               	xorlw	1	; case 7
 12249  0010A8  E102 EFA4  F003    	bz	l10686
 12250  0010AE  0A13               	xorlw	19	; case 20
 12251  0010B0  E102 EFB2  F003    	bz	l10688
 12252  0010B6  0A01               	xorlw	1	; case 21
 12253  0010B8  E102 EFC0  F003    	bz	l10690
 12254  0010BE  0A03               	xorlw	3	; case 22
 12255  0010C0  E102 EFCE  F003    	bz	l10692
 12256  0010C6  0A01               	xorlw	1	; case 23
 12257  0010C8  E102 EFDC  F003    	bz	l10694
 12258  0010CE  0A0F               	xorlw	15	; case 24
 12259  0010D0  E102 EFEA  F003    	bz	l10696
 12260  0010D6  0A01               	xorlw	1	; case 25
 12261  0010D8  E102 EFF8  F003    	bz	l10698
 12262  0010DE  0A3F               	xorlw	63	; case 38
 12263  0010E0  E102 EF06  F004    	bz	l10700
 12264  0010E6  0A01               	xorlw	1	; case 39
 12265  0010E8  E102 EF14  F004    	bz	l10702
 12266  0010EE  0A0F               	xorlw	15	; case 40
 12267  0010F0  E102 EF22  F004    	bz	l10704
 12268  0010F6  0A01               	xorlw	1	; case 41
 12269  0010F8  E102 EF30  F004    	bz	l10706
 12270  0010FE  0A03               	xorlw	3	; case 42
 12271  001100  E102 EF3E  F004    	bz	l10708
 12272  001106  0A01               	xorlw	1	; case 43
 12273  001108  E102 EF4C  F004    	bz	l10710
 12274  00110E  0A07               	xorlw	7	; case 44
 12275  001110  E102 EF5A  F004    	bz	l10712
 12276  001116  0A01               	xorlw	1	; case 45
 12277  001118  E102 EF68  F004    	bz	l10714
 12278  00111E  0A03               	xorlw	3	; case 46
 12279  001120  E102 EF76  F004    	bz	l10716
 12280  001126  0A01               	xorlw	1	; case 47
 12281  001128  E102 EF84  F004    	bz	l10718
 12282  00112E  0A1F               	xorlw	31	; case 48
 12283  001130  E102 EF92  F004    	bz	l10720
 12284  001136  0A01               	xorlw	1	; case 49
 12285  001138  E101 D402          	bz	l10722
 12286  00113C  0A03               	xorlw	3	; case 50
 12287  00113E  E101 D40D          	bz	l10724
 12288  001142  0A01               	xorlw	1	; case 51
 12289  001144  E101 D418          	bz	l10726
 12290  001148  0A07               	xorlw	7	; case 52
 12291  00114A  E101 D423          	bz	l10728
 12292  00114E  0A01               	xorlw	1	; case 53
 12293  001150  E101 D42E          	bz	l10730
 12294  001154  0A03               	xorlw	3	; case 54
 12295  001156  E101 D439          	bz	l10732
 12296  00115A  0A01               	xorlw	1	; case 55
 12297  00115C  E101 D444          	bz	l10734
 12298  001160  0A0F               	xorlw	15	; case 56
 12299  001162  E101 D44F          	bz	l10736
 12300  001166  0A01               	xorlw	1	; case 57
 12301  001168  E101 D45A          	bz	l10738
 12302  00116C  0A03               	xorlw	3	; case 58
 12303  00116E  E101 D465          	bz	l10740
 12304  001172  0A01               	xorlw	1	; case 59
 12305  001174  E101 D470          	bz	l10742
 12306  001178  0A07               	xorlw	7	; case 60
 12307  00117A  E101 D47B          	bz	l10744
 12308  00117E  0A01               	xorlw	1	; case 61
 12309  001180  E101 D486          	bz	l10746
 12310  001184  0A03               	xorlw	3	; case 62
 12311  001186  E101 D491          	bz	l10748
 12312  00118A  0A01               	xorlw	1	; case 63
 12313  00118C  E101 D49C          	bz	l10750
 12314  001190  0A7F               	xorlw	127	; case 64
 12315  001192  E101 D4A7          	bz	l10752
 12316  001196  0A01               	xorlw	1	; case 65
 12317  001198  E101 D4B2          	bz	l10754
 12318  00119C  0A03               	xorlw	3	; case 66
 12319  00119E  E101 D4BD          	bz	l10756
 12320  0011A2  0A01               	xorlw	1	; case 67
 12321  0011A4  E101 D4C8          	bz	l10758
 12322  0011A8  0A07               	xorlw	7	; case 68
 12323  0011AA  E101 D4D3          	bz	l10760
 12324  0011AE  0A01               	xorlw	1	; case 69
 12325  0011B0  E101 D4DD          	bz	l10762
 12326  0011B4  0A03               	xorlw	3	; case 70
 12327  0011B6  E101 D4E7          	bz	l10764
 12328  0011BA  0A01               	xorlw	1	; case 71
 12329  0011BC  E101 D4F1          	bz	l10766
 12330  0011C0  0A0F               	xorlw	15	; case 72
 12331  0011C2  E101 D4FB          	bz	l10768
 12332  0011C6  0A01               	xorlw	1	; case 73
 12333  0011C8  E101 D505          	bz	l10770
 12334  0011CC  0A03               	xorlw	3	; case 74
 12335  0011CE  E101 D50F          	bz	l10772
 12336  0011D2  0A01               	xorlw	1	; case 75
 12337  0011D4  E101 D519          	bz	l10774
 12338  0011D8  0A07               	xorlw	7	; case 76
 12339  0011DA  E101 D523          	bz	l10776
 12340  0011DE  0A01               	xorlw	1	; case 77
 12341  0011E0  E101 D52D          	bz	l10778
 12342  0011E4  0A03               	xorlw	3	; case 78
 12343  0011E6  E101 D537          	bz	l10780
 12344  0011EA  0A01               	xorlw	1	; case 79
 12345  0011EC  E101 D541          	bz	l10782
 12346  0011F0  0A1F               	xorlw	31	; case 80
 12347  0011F2  E101 D54B          	bz	l10784
 12348  0011F6  0A01               	xorlw	1	; case 81
 12349  0011F8  E101 D555          	bz	l10786
 12350  0011FC  0A03               	xorlw	3	; case 82
 12351  0011FE  E101 D55F          	bz	l10788
 12352  001202  0A01               	xorlw	1	; case 83
 12353  001204  E101 D569          	bz	l10790
 12354  001208  0A07               	xorlw	7	; case 84
 12355  00120A  E101 D573          	bz	l10792
 12356  00120E  0A01               	xorlw	1	; case 85
 12357  001210  E101 D57D          	bz	l10794
 12358  001214  0A03               	xorlw	3	; case 86
 12359  001216  E101 D587          	bz	l10796
 12360  00121A  0A01               	xorlw	1	; case 87
 12361  00121C  E101 D591          	bz	l10798
 12362  001220  0A0F               	xorlw	15	; case 88
 12363  001222  E101 D59B          	bz	l10800
 12364  001226  0A01               	xorlw	1	; case 89
 12365  001228  E101 D5A5          	bz	l10802
 12366  00122C  0A03               	xorlw	3	; case 90
 12367  00122E  E101 D5AF          	bz	l10804
 12368  001232  0A01               	xorlw	1	; case 91
 12369  001234  E101 D5B9          	bz	l10806
 12370  001238  0A07               	xorlw	7	; case 92
 12371  00123A  E101 D5C3          	bz	l10808
 12372  00123E  0A01               	xorlw	1	; case 93
 12373  001240  E101 D5CD          	bz	l10810
 12374  001244  0A03               	xorlw	3	; case 94
 12375  001246  E101 D5D7          	bz	l10812
 12376  00124A  0A01               	xorlw	1	; case 95
 12377  00124C  E101 D5E1          	bz	l10814
 12378  001250  0A3F               	xorlw	63	; case 96
 12379  001252  E101 D5EB          	bz	l10816
 12380  001256  0A01               	xorlw	1	; case 97
 12381  001258  E101 D5F5          	bz	l10818
 12382  00125C  0A03               	xorlw	3	; case 98
 12383  00125E  E101 D5FF          	bz	l10820
 12384  001262  0A01               	xorlw	1	; case 99
 12385  001264  E101 D609          	bz	l10822
 12386  001268  0A07               	xorlw	7	; case 100
 12387  00126A  E101 D613          	bz	l10824
 12388  00126E  0A01               	xorlw	1	; case 101
 12389  001270  E101 D61D          	bz	l10826
 12390  001274  0A03               	xorlw	3	; case 102
 12391  001276  E101 D627          	bz	l10828
 12392  00127A  0A01               	xorlw	1	; case 103
 12393  00127C  E101 D631          	bz	l10830
 12394  001280  0A0F               	xorlw	15	; case 104
 12395  001282  E101 D63B          	bz	l10832
 12396  001286  0A01               	xorlw	1	; case 105
 12397  001288  E101 D645          	bz	l10834
 12398  00128C  0A03               	xorlw	3	; case 106
 12399  00128E  E101 D64F          	bz	l10836
 12400  001292  0A01               	xorlw	1	; case 107
 12401  001294  E101 D659          	bz	l10838
 12402  001298  0A07               	xorlw	7	; case 108
 12403  00129A  E101 D663          	bz	l10840
 12404  00129E  0A01               	xorlw	1	; case 109
 12405  0012A0  E101 D66D          	bz	l10842
 12406  0012A4  0A03               	xorlw	3	; case 110
 12407  0012A6  E101 D677          	bz	l10844
 12408  0012AA  0A01               	xorlw	1	; case 111
 12409  0012AC  E101 D681          	bz	l10846
 12410  0012B0  0A1F               	xorlw	31	; case 112
 12411  0012B2  E101 D68B          	bz	l10848
 12412  0012B6  0A01               	xorlw	1	; case 113
 12413  0012B8  E101 D694          	bz	l515
 12414  0012BC  0A03               	xorlw	3	; case 114
 12415  0012BE  E101 D69E          	bz	l10850
 12416  0012C2  0A01               	xorlw	1	; case 115
 12417  0012C4  E101 D6A8          	bz	l10852
 12418  0012C8  0A07               	xorlw	7	; case 116
 12419  0012CA  E101 D6B2          	bz	l518
 12420  0012CE  0A01               	xorlw	1	; case 117
 12421  0012D0  E101 D6AF          	bz	l518
 12422  0012D4  0A03               	xorlw	3	; case 118
 12423  0012D6  E101 D6AE          	bz	l10854
 12424  0012DA  0A01               	xorlw	1	; case 119
 12425  0012DC  E101 D6B8          	bz	l10856
 12426  0012E0  D6C4               	goto	l10858
 12427  0012E2                     l10864:
 12428                           
 12429                           ; BSR set to: 0
 12430                           ;main.c: 2517: else if (1 == vscp_page_select) {
 12431  0012E2  0446               	decf	_vscp_page_select,w,c
 12432  0012E4  1047               	iorwf	_vscp_page_select+1,w,c
 12433  0012E6  E136               	bnz	l10888
 12434                           
 12435                           ; BSR set to: 0
 12436                           ;main.c: 2520: if (reg < 72) {
 12437  0012E8  0E48               	movlw	72
 12438  0012EA  6025               	cpfslt	vscp_writeAppReg@reg,c
 12439  0012EC  D010               	goto	l10872
 12440                           
 12441                           ; BSR set to: 0
 12442                           ;main.c: 2521: writeEEPROM(0xAA + reg, val);
 12443  0012EE  0EAA               	movlw	170
 12444  0012F0  D833               	call	PL64	;call to abstracted procedure
 12445  0012F2  EC67  F028         	call	_writeEEPROM	;wreg free
 12446                           
 12447                           ;main.c: 2522: rv = readEEPROM(0xAA + reg );
 12448  0012F6  0EAA               	movlw	170
 12449  0012F8  2425               	addwf	vscp_writeAppReg@reg,w,c
 12450  0012FA  6E16               	movwf	?_readEEPROM,c
 12451  0012FC  6A17               	clrf	?_readEEPROM+1,c
 12452  0012FE  0E00               	movlw	0
 12453  001300  2217               	addwfc	?_readEEPROM+1,f,c
 12454  001302  EC64  F029         	call	_readEEPROM	;wreg free
 12455  001306  6E26               	movwf	vscp_writeAppReg@rv,c
 12456                           
 12457                           ;main.c: 2523: writeCoeffs2Ram();
 12458  001308  ECD4  F022         	call	_writeCoeffs2Ram	;wreg free
 12459                           
 12460                           ;main.c: 2524: }
 12461  00130C  D023               	goto	l10888
 12462  00130E                     l10872:
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;main.c: 2526: else if (reg < 84) {
 12466  00130E  0E54               	movlw	84
 12467  001310  6025               	cpfslt	vscp_writeAppReg@reg,c
 12468  001312  D010               	goto	l10884
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;main.c: 2528: uint8_t pos = reg - 72;
 12472  001314  5025               	movf	vscp_writeAppReg@reg,w,c
 12473  001316  0FB8               	addlw	184
 12474  001318  6E24               	movwf	vscp_writeAppReg@pos,c
 12475                           
 12476                           ; BSR set to: 0
 12477                           ;main.c: 2529: if ( pos % 2 ) {
 12478  00131A  A024               	btfss	vscp_writeAppReg@pos,0,c
 12479  00131C  D002               	goto	l10880
 12480                           
 12481                           ; BSR set to: 0
 12482                           ;main.c: 2530: pos--;
 12483  00131E  0624               	decf	vscp_writeAppReg@pos,f,c
 12484                           
 12485                           ;main.c: 2531: }
 12486  001320  D001               	goto	l10882
 12487  001322                     l10880:
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;main.c: 2532: else {
 12491                           ;main.c: 2533: pos++;
 12492  001322  2A24               	incf	vscp_writeAppReg@pos,f,c
 12493  001324                     l10882:
 12494                           
 12495                           ; BSR set to: 0
 12496                           ;main.c: 2534: }
 12497                           ;main.c: 2535: rv = adc[ pos ];
 12498  001324  0E94               	movlw	low _adc
 12499  001326  2424               	addwf	vscp_writeAppReg@pos,w,c
 12500  001328  6ED9               	movwf	fsr2l,c
 12501  00132A  6ADA               	clrf	fsr2h,c
 12502  00132C  0E01               	movlw	high _adc
 12503  00132E  22DA               	addwfc	fsr2h,f,c
 12504  001330  50DF               	movf	indf2,w,c
 12505  001332  D00F               	goto	L20
 12506  001334                     l10884:
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;main.c: 2538: else if (reg < 98) {
 12510  001334  0E62               	movlw	98
 12511  001336  6025               	cpfslt	vscp_writeAppReg@reg,c
 12512  001338  D00D               	goto	l10888
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;main.c: 2539: writeEEPROM( 0x9E + reg - 84, val );
 12516  00133A  0E4A               	movlw	74
 12517  00133C  D80D               	call	PL64	;call to abstracted procedure
 12518  00133E  EC67  F028         	call	_writeEEPROM	;wreg free
 12519                           
 12520                           ;main.c: 2540: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12521  001342  0E4A               	movlw	74
 12522  001344  2425               	addwf	vscp_writeAppReg@reg,w,c
 12523  001346  6E16               	movwf	?_readEEPROM,c
 12524  001348  6A17               	clrf	?_readEEPROM+1,c
 12525  00134A  0E00               	movlw	0
 12526  00134C  2217               	addwfc	?_readEEPROM+1,f,c
 12527  00134E  EC64  F029         	call	_readEEPROM	;wreg free
 12528  001352                     L20:
 12529  001352  6E26               	movwf	vscp_writeAppReg@rv,c
 12530  001354                     l10888:
 12531                           
 12532                           ;main.c: 2541: }
 12533                           ;main.c: 2542: }
 12534                           ;main.c: 2544: return rv;
 12535  001354  5026               	movf	vscp_writeAppReg@rv,w,c
 12536  001356  0012               	return	
 12537  001358                     __end_of_vscp_writeAppReg:
 12538                           	opt stack 0
 12539  001358                     PL64:
 12540                           	opt stack 23
 12541  001358  2425               	addwf	vscp_writeAppReg@reg,w,c
 12542  00135A  6E0E               	movwf	?_writeEEPROM,c
 12543  00135C  6A0F               	clrf	?_writeEEPROM+1,c
 12544  00135E  0E00               	movlw	0
 12545  001360  220F               	addwfc	?_writeEEPROM+1,f,c
 12546  001362  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12547  001366  0C00               	retlw	0
 12548  001368                     __end_ofPL64:
 12549                           	opt stack 0
 12550                           tblptru	equ	0xFF8
 12551                           tblptrh	equ	0xFF7
 12552                           tblptrl	equ	0xFF6
 12553                           tablat	equ	0xFF5
 12554                           prodh	equ	0xFF4
 12555                           prodl	equ	0xFF3
 12556                           intcon	equ	0xFF2
 12557                           postinc0	equ	0xFEE
 12558                           wreg	equ	0xFE8
 12559                           indf1	equ	0xFE7
 12560                           postdec1	equ	0xFE5
 12561                           fsr1h	equ	0xFE2
 12562                           fsr1l	equ	0xFE1
 12563                           indf2	equ	0xFDF
 12564                           postinc2	equ	0xFDE
 12565                           postdec2	equ	0xFDD
 12566                           plusw2	equ	0xFDB
 12567                           fsr2h	equ	0xFDA
 12568                           fsr2l	equ	0xFD9
 12569                           status	equ	0xFD8
 12570                           
 12571 ;; *************** function _writeCoeffs2Ram *****************
 12572 ;; Defined at:
 12573 ;;		line 960 in file "../main.c"
 12574 ;; Parameters:    Size  Location     Type
 12575 ;;		None
 12576 ;; Auto vars:     Size  Location     Type
 12577 ;;  c               3   27[COMRAM] unsigned char [3]
 12578 ;;  j               2   32[COMRAM] int 
 12579 ;;  i               2   30[COMRAM] int 
 12580 ;; Return value:  Size  Location     Type
 12581 ;;		None               void
 12582 ;; Registers used:
 12583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12584 ;; Tracked objects:
 12585 ;;		On entry : 0/0
 12586 ;;		On exit  : F/1
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12589 ;;      Params:         0       0       0       0       0       0       0
 12590 ;;      Locals:         7       0       0       0       0       0       0
 12591 ;;      Temps:          2       0       0       0       0       0       0
 12592 ;;      Totals:         9       0       0       0       0       0       0
 12593 ;;Total ram usage:        9 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; Hardware stack levels required when called:    3
 12596 ;; This function calls:
 12597 ;;		_readEEPROM
 12598 ;;		___wmul
 12599 ;; This function is called by:
 12600 ;;		_vscp_writeAppReg
 12601 ;; This function uses a non-reentrant model
 12602 ;;
 12603                           
 12604                           	psect	text43
 12605  0045A8                     __ptext43:
 12606                           	opt stack 0
 12607  0045A8                     _writeCoeffs2Ram:
 12608                           	opt stack 23
 12609                           
 12610                           ;main.c: 961: int i, j;
 12611                           ;main.c: 962: uint8_t c[3];
 12612                           ;main.c: 964: for (i = 0; i < 6; i++) {
 12613                           
 12614                           ;incstack = 0
 12615                           ;incstack = 0
 12616  0045A8  6A1F               	clrf	writeCoeffs2Ram@i,c
 12617  0045AA  6A20               	clrf	writeCoeffs2Ram@i+1,c
 12618  0045AC                     l10416:
 12619                           
 12620                           ;main.c: 965: for (j = 2; j > 0; j--) {
 12621  0045AC  6A22               	clrf	writeCoeffs2Ram@j+1,c
 12622  0045AE  0E02               	movlw	2
 12623  0045B0  6E21               	movwf	writeCoeffs2Ram@j,c
 12624  0045B2                     l10422:
 12625                           
 12626                           ;main.c: 967: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 12627  0045B2  5021               	movf	writeCoeffs2Ram@j,w,c
 12628  0045B4  0802               	sublw	2
 12629  0045B6  6E1A               	movwf	??_writeCoeffs2Ram& (0+255),c
 12630  0045B8  501A               	movf	??_writeCoeffs2Ram,w,c
 12631  0045BA  0F1C               	addlw	low writeCoeffs2Ram@c
 12632  0045BC  6ED9               	movwf	fsr2l,c
 12633  0045BE  6ADA               	clrf	fsr2h,c
 12634  0045C0  C01F  F00E         	movff	writeCoeffs2Ram@i,?___wmul
 12635  0045C4  C020  F00F         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 12636  0045C8  6A11               	clrf	?___wmul+3,c
 12637  0045CA  0E03               	movlw	3
 12638  0045CC  6E10               	movwf	?___wmul+2,c
 12639  0045CE  ECA6  F027         	call	___wmul	;wreg free
 12640  0045D2  5021               	movf	writeCoeffs2Ram@j,w,c
 12641  0045D4  260E               	addwf	?___wmul,f,c
 12642  0045D6  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12643  0045D8  220F               	addwfc	?___wmul+1,f,c
 12644  0045DA  0EAA               	movlw	170
 12645  0045DC  240E               	addwf	?___wmul,w,c
 12646  0045DE  6E16               	movwf	?_readEEPROM,c
 12647  0045E0  0E00               	movlw	0
 12648  0045E2  200F               	addwfc	?___wmul+1,w,c
 12649  0045E4  6E17               	movwf	?_readEEPROM+1,c
 12650  0045E6  EC64  F029         	call	_readEEPROM	;wreg free
 12651  0045EA  6EDF               	movwf	indf2,c
 12652  0045EC  0621               	decf	writeCoeffs2Ram@j,f,c
 12653  0045EE  A0D8               	btfss	status,0,c
 12654  0045F0  0622               	decf	writeCoeffs2Ram@j+1,f,c
 12655  0045F2  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12656  0045F4  0A80               	xorlw	128
 12657  0045F6  0F80               	addlw	-128
 12658  0045F8  0E01               	movlw	1
 12659  0045FA  B4D8               	btfsc	status,2,c
 12660  0045FC  5C21               	subwf	writeCoeffs2Ram@j,w,c
 12661  0045FE  E2D9               	bc	l10422
 12662                           
 12663                           ;main.c: 968: }
 12664                           ;main.c: 969: sh_coefficients[i] = *((double*) c);
 12665  004600  C01F  F01A         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 12666  004604  C020  F01B         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 12667  004608  90D8               	bcf	status,0,c
 12668  00460A  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12669  00460C  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12670  00460E  90D8               	bcf	status,0,c
 12671  004610  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12672  004612  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12673  004614  0101               	movlb	1	; () banked
 12674  004616  0E17               	movlw	low _sh_coefficients
 12675  004618  241A               	addwf	??_writeCoeffs2Ram,w,c
 12676  00461A  6ED9               	movwf	fsr2l,c
 12677  00461C  0E01               	movlw	high _sh_coefficients
 12678  00461E  201B               	addwfc	??_writeCoeffs2Ram+1,w,c
 12679  004620  6EDA               	movwf	fsr2h,c
 12680  004622  C01C  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 12681  004626  C01D  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 12682  00462A  C01E  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 12683  00462E  C01F  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 12684                           
 12685                           ; BSR set to: 1
 12686  004632  4A1F               	infsnz	writeCoeffs2Ram@i,f,c
 12687  004634  2A20               	incf	writeCoeffs2Ram@i+1,f,c
 12688                           
 12689                           ; BSR set to: 1
 12690  004636  5020               	movf	writeCoeffs2Ram@i+1,w,c
 12691  004638  0A80               	xorlw	128
 12692  00463A  0F80               	addlw	-128
 12693  00463C  0E06               	movlw	6
 12694  00463E  B4D8               	btfsc	status,2,c
 12695  004640  5C1F               	subwf	writeCoeffs2Ram@i,w,c
 12696  004642  B0D8               	btfsc	status,0,c
 12697                           
 12698                           ; BSR set to: 1
 12699  004644  0012               	return	
 12700  004646  D7B2               	goto	l10416
 12701  004648                     __end_of_writeCoeffs2Ram:
 12702                           	opt stack 0
 12703                           tblptru	equ	0xFF8
 12704                           tblptrh	equ	0xFF7
 12705                           tblptrl	equ	0xFF6
 12706                           tablat	equ	0xFF5
 12707                           prodh	equ	0xFF4
 12708                           prodl	equ	0xFF3
 12709                           intcon	equ	0xFF2
 12710                           postinc0	equ	0xFEE
 12711                           wreg	equ	0xFE8
 12712                           indf1	equ	0xFE7
 12713                           postdec1	equ	0xFE5
 12714                           fsr1h	equ	0xFE2
 12715                           fsr1l	equ	0xFE1
 12716                           indf2	equ	0xFDF
 12717                           postinc2	equ	0xFDE
 12718                           postdec2	equ	0xFDD
 12719                           plusw2	equ	0xFDB
 12720                           fsr2h	equ	0xFDA
 12721                           fsr2l	equ	0xFD9
 12722                           status	equ	0xFD8
 12723                           
 12724 ;; *************** function ___wmul *****************
 12725 ;; Defined at:
 12726 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 12727 ;; Parameters:    Size  Location     Type
 12728 ;;  multiplier      2   13[COMRAM] unsigned int 
 12729 ;;  multiplicand    2   15[COMRAM] unsigned int 
 12730 ;; Auto vars:     Size  Location     Type
 12731 ;;  product         2   19[COMRAM] unsigned int 
 12732 ;; Return value:  Size  Location     Type
 12733 ;;                  2   13[COMRAM] unsigned int 
 12734 ;; Registers used:
 12735 ;;		wreg, status,2, status,0, prodl, prodh
 12736 ;; Tracked objects:
 12737 ;;		On entry : 0/0
 12738 ;;		On exit  : 0/0
 12739 ;;		Unchanged: 0/0
 12740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12741 ;;      Params:         4       0       0       0       0       0       0
 12742 ;;      Locals:         4       0       0       0       0       0       0
 12743 ;;      Temps:          0       0       0       0       0       0       0
 12744 ;;      Totals:         8       0       0       0       0       0       0
 12745 ;;Total ram usage:        8 bytes
 12746 ;; Hardware stack levels used:    1
 12747 ;; Hardware stack levels required when called:    2
 12748 ;; This function calls:
 12749 ;;		Nothing
 12750 ;; This function is called by:
 12751 ;;		_writeCoeffs2Ram
 12752 ;; This function uses a non-reentrant model
 12753 ;;
 12754                           
 12755                           	psect	text44
 12756  004F4C                     __ptext44:
 12757                           	opt stack 0
 12758  004F4C                     ___wmul:
 12759                           	opt stack 23
 12760                           
 12761                           ; BSR set to: 1
 12762                           ;incstack = 0
 12763                           ;incstack = 0
 12764  004F4C  500E               	movf	___wmul@multiplier,w,c
 12765  004F4E  0210               	mulwf	___wmul@multiplicand,c
 12766  004F50  CFF3 F014          	movff	prodl,___wmul@product
 12767  004F54  CFF4 F015          	movff	prodh,___wmul@product+1
 12768  004F58  500E               	movf	___wmul@multiplier,w,c
 12769  004F5A  0211               	mulwf	___wmul@multiplicand+1,c
 12770  004F5C  D808               	call	PL58	;call to abstracted procedure
 12771  004F5E  500F               	movf	___wmul@multiplier+1,w,c
 12772  004F60  0210               	mulwf	___wmul@multiplicand,c
 12773  004F62  D805               	call	PL58	;call to abstracted procedure
 12774  004F64  C014  F00E         	movff	___wmul@product,?___wmul
 12775  004F68  C015  F00F         	movff	___wmul@product+1,?___wmul+1
 12776  004F6C  0012               	return	
 12777  004F6E                     __end_of___wmul:
 12778                           	opt stack 0
 12779  004F6E                     PL58:
 12780                           	opt stack 23
 12781  004F6E  CFF3 FFF4          	movff	prodl,prodh
 12782  004F72  6AF3               	clrf	prodl,c
 12783  004F74  50F3               	movf	prodl,w,c
 12784  004F76  2614               	addwf	___wmul@product,f,c
 12785  004F78  50F4               	movf	prodh,w,c
 12786  004F7A  2215               	addwfc	___wmul@product+1,f,c
 12787  004F7C  0012               	return	
 12788  004F7E                     __end_ofPL58:
 12789                           	opt stack 0
 12790                           tblptru	equ	0xFF8
 12791                           tblptrh	equ	0xFF7
 12792                           tblptrl	equ	0xFF6
 12793                           tablat	equ	0xFF5
 12794                           prodh	equ	0xFF4
 12795                           prodl	equ	0xFF3
 12796                           intcon	equ	0xFF2
 12797                           postinc0	equ	0xFEE
 12798                           wreg	equ	0xFE8
 12799                           indf1	equ	0xFE7
 12800                           postdec1	equ	0xFE5
 12801                           fsr1h	equ	0xFE2
 12802                           fsr1l	equ	0xFE1
 12803                           indf2	equ	0xFDF
 12804                           postinc2	equ	0xFDE
 12805                           postdec2	equ	0xFDD
 12806                           plusw2	equ	0xFDB
 12807                           fsr2h	equ	0xFDA
 12808                           fsr2l	equ	0xFD9
 12809                           status	equ	0xFD8
 12810                           
 12811 ;; *************** function _vscp_readRegister *****************
 12812 ;; Defined at:
 12813 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 12814 ;; Parameters:    Size  Location     Type
 12815 ;;  reg             1    wreg     unsigned char 
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;  reg             1   43[COMRAM] unsigned char 
 12818 ;; Return value:  Size  Location     Type
 12819 ;;                  1    wreg      unsigned char 
 12820 ;; Registers used:
 12821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12822 ;; Tracked objects:
 12823 ;;		On entry : F/0
 12824 ;;		On exit  : 0/0
 12825 ;;		Unchanged: 0/0
 12826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12827 ;;      Params:         0       0       0       0       0       0       0
 12828 ;;      Locals:         1       0       0       0       0       0       0
 12829 ;;      Temps:          0       0       0       0       0       0       0
 12830 ;;      Totals:         1       0       0       0       0       0       0
 12831 ;;Total ram usage:        1 bytes
 12832 ;; Hardware stack levels used:    1
 12833 ;; Hardware stack levels required when called:    5
 12834 ;; This function calls:
 12835 ;;		_vscp_readAppReg
 12836 ;;		_vscp_readStdReg
 12837 ;; This function is called by:
 12838 ;;		_vscp_handleProtocolEvent
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           	psect	text45
 12843  0051E0                     __ptext45:
 12844                           	opt stack 0
 12845  0051E0                     _vscp_readRegister:
 12846                           	opt stack 23
 12847                           
 12848                           ;incstack = 0
 12849                           ;incstack = 0
 12850                           ;vscp_readRegister@reg stored from wreg
 12851  0051E0  CFE8 F02C          	movff	wreg,vscp_readRegister@reg
 12852                           
 12853                           ; BSR set to: 0
 12854                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 12855  0051E4  0E7F               	movlw	127
 12856  0051E6  642C               	cpfsgt	vscp_readRegister@reg,c
 12857  0051E8  D004               	goto	l11102
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 12861  0051EA  502C               	movf	vscp_readRegister@reg,w,c
 12862  0051EC  EC3C  F01A         	call	_vscp_readStdReg
 12863  0051F0  D003               	goto	l1103
 12864  0051F2                     l11102:
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;vscp_firmware.c: 565: else {
 12868                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 12869  0051F2  502C               	movf	vscp_readRegister@reg,w,c
 12870  0051F4  ECB4  F009         	call	_vscp_readAppReg
 12871  0051F8                     l1103:
 12872  0051F8  0012               	return	
 12873  0051FA                     __end_of_vscp_readRegister:
 12874                           	opt stack 0
 12875                           tblptru	equ	0xFF8
 12876                           tblptrh	equ	0xFF7
 12877                           tblptrl	equ	0xFF6
 12878                           tablat	equ	0xFF5
 12879                           prodh	equ	0xFF4
 12880                           prodl	equ	0xFF3
 12881                           intcon	equ	0xFF2
 12882                           postinc0	equ	0xFEE
 12883                           wreg	equ	0xFE8
 12884                           indf1	equ	0xFE7
 12885                           postdec1	equ	0xFE5
 12886                           fsr1h	equ	0xFE2
 12887                           fsr1l	equ	0xFE1
 12888                           indf2	equ	0xFDF
 12889                           postinc2	equ	0xFDE
 12890                           postdec2	equ	0xFDD
 12891                           plusw2	equ	0xFDB
 12892                           fsr2h	equ	0xFDA
 12893                           fsr2l	equ	0xFD9
 12894                           status	equ	0xFD8
 12895                           
 12896 ;; *************** function _vscp_readStdReg *****************
 12897 ;; Defined at:
 12898 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;  reg             1    wreg     unsigned char 
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;  reg             1   42[COMRAM] unsigned char 
 12903 ;;  code            4   35[COMRAM] unsigned long 
 12904 ;;  idx             1   40[COMRAM] unsigned char 
 12905 ;;  code            4   31[COMRAM] unsigned long 
 12906 ;;  idx             1   39[COMRAM] unsigned char 
 12907 ;;  rv              1   41[COMRAM] unsigned char 
 12908 ;; Return value:  Size  Location     Type
 12909 ;;                  1    wreg      unsigned char 
 12910 ;; Registers used:
 12911 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12912 ;; Tracked objects:
 12913 ;;		On entry : F/0
 12914 ;;		On exit  : 0/0
 12915 ;;		Unchanged: 0/0
 12916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12917 ;;      Params:         0       0       0       0       0       0       0
 12918 ;;      Locals:        12       0       0       0       0       0       0
 12919 ;;      Temps:          5       0       0       0       0       0       0
 12920 ;;      Totals:        17       0       0       0       0       0       0
 12921 ;;Total ram usage:       17 bytes
 12922 ;; Hardware stack levels used:    1
 12923 ;; Hardware stack levels required when called:    4
 12924 ;; This function calls:
 12925 ;;		_vscp_getMajorVersion
 12926 ;;		_vscp_getMinorVersion
 12927 ;;		_vscp_getSubMinorVersion
 12928 ;;		_vscp_getGUID
 12929 ;;		_vscp_getMDF_URL
 12930 ;;		_vscp_getUserID
 12931 ;;		_vscp_getManufacturerId
 12932 ;;		_vscp_getBootLoaderAlgorithm
 12933 ;;		_vscp_getBufferSize
 12934 ;;		_vscp_getRegisterPagesUsed
 12935 ;;		_vscp_getFamilyCode
 12936 ;;		_vscp_getFamilyType
 12937 ;; This function is called by:
 12938 ;;		_vscp_readRegister
 12939 ;;		_vscp_handleProtocolEvent
 12940 ;; This function uses a non-reentrant model
 12941 ;;
 12942                           
 12943                           	psect	text46
 12944  003478                     __ptext46:
 12945                           	opt stack 0
 12946  003478                     _vscp_readStdReg:
 12947                           	opt stack 24
 12948                           
 12949                           ;incstack = 0
 12950                           ;incstack = 0
 12951                           ;vscp_readStdReg@reg stored from wreg
 12952  003478  CFE8 F02B          	movff	wreg,vscp_readStdReg@reg
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 12956  00347C  6A2A               	clrf	vscp_readStdReg@rv,c
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 12960  00347E  502B               	movf	vscp_readStdReg@reg,w,c
 12961  003480  0A80               	xorlw	128
 12962  003482  E104               	bnz	l11112
 12963                           
 12964                           ; BSR set to: 0
 12965                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 12966  003484  C04A  F02A         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12967                           
 12968                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 12969  003488  6A4A               	clrf	_vscp_alarmstatus,c
 12970                           
 12971                           ;vscp_firmware.c: 584: }
 12972  00348A  D0B3               	goto	l11200
 12973  00348C                     l11112:
 12974                           
 12975                           ; BSR set to: 0
 12976                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 12977  00348C  502B               	movf	vscp_readStdReg@reg,w,c
 12978  00348E  0A81               	xorlw	129
 12979  003490  E102               	bnz	l11116
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;vscp_firmware.c: 588: rv = 1;
 12983  003492  0E01               	movlw	1
 12984  003494  D075               	goto	L31
 12985  003496                     l11116:
 12986                           
 12987                           ; BSR set to: 0
 12988                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 12989  003496  502B               	movf	vscp_readStdReg@reg,w,c
 12990  003498  0A82               	xorlw	130
 12991  00349A  E102               	bnz	l11120
 12992                           
 12993                           ; BSR set to: 0
 12994                           ;vscp_firmware.c: 594: rv = 5;
 12995  00349C  0E05               	movlw	5
 12996  00349E  D070               	goto	L31
 12997  0034A0                     l11120:
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 13001  0034A0  502B               	movf	vscp_readStdReg@reg,w,c
 13002  0034A2  0A83               	xorlw	131
 13003  0034A4  E102               	bnz	l11124
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;vscp_firmware.c: 600: rv = 0;
 13007  0034A6  6A2A               	clrf	vscp_readStdReg@rv,c
 13008                           
 13009                           ;vscp_firmware.c: 602: }
 13010  0034A8  D0A4               	goto	l11200
 13011  0034AA                     l11124:
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 13015  0034AA  502B               	movf	vscp_readStdReg@reg,w,c
 13016  0034AC  0A94               	xorlw	148
 13017  0034AE  E103               	bnz	l11128
 13018                           
 13019                           ; BSR set to: 0
 13020                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 13021  0034B0  ECC8  F029         	call	_vscp_getMajorVersion	;wreg free
 13022  0034B4  D065               	goto	L31
 13023  0034B6                     l11128:
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 13027  0034B6  502B               	movf	vscp_readStdReg@reg,w,c
 13028  0034B8  0A95               	xorlw	149
 13029  0034BA  E103               	bnz	l11132
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 13033  0034BC  ECC7  F029         	call	_vscp_getMinorVersion	;wreg free
 13034  0034C0  D05F               	goto	L31
 13035  0034C2                     l11132:
 13036                           
 13037                           ; BSR set to: 0
 13038                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 13039  0034C2  502B               	movf	vscp_readStdReg@reg,w,c
 13040  0034C4  0A96               	xorlw	150
 13041  0034C6  E103               	bnz	l11136
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 13045  0034C8  ECC6  F029         	call	_vscp_getSubMinorVersion	;wreg free
 13046  0034CC  D059               	goto	L31
 13047  0034CE                     l11136:
 13048                           
 13049                           ; BSR set to: 0
 13050                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 13051  0034CE  0E89               	movlw	137
 13052  0034D0  602B               	cpfslt	vscp_readStdReg@reg,c
 13053  0034D2  D005               	goto	l11140
 13054                           
 13055                           ; BSR set to: 0
 13056                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 13057  0034D4  502B               	movf	vscp_readStdReg@reg,w,c
 13058  0034D6  0F7C               	addlw	124
 13059  0034D8  EC50  F029         	call	_vscp_getUserID
 13060  0034DC  D051               	goto	L31
 13061  0034DE                     l11140:
 13062                           
 13063                           ; BSR set to: 0
 13064                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 13065                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 13066  0034DE  0E88               	movlw	136
 13067  0034E0  642B               	cpfsgt	vscp_readStdReg@reg,c
 13068  0034E2  D008               	goto	l11146
 13069                           
 13070                           ; BSR set to: 0
 13071  0034E4  0E91               	movlw	145
 13072  0034E6  602B               	cpfslt	vscp_readStdReg@reg,c
 13073  0034E8  D005               	goto	l11146
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 13077  0034EA  502B               	movf	vscp_readStdReg@reg,w,c
 13078  0034EC  0F77               	addlw	119
 13079  0034EE  EC46  F029         	call	_vscp_getManufacturerId
 13080  0034F2  D046               	goto	L31
 13081  0034F4                     l11146:
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 13085  0034F4  502B               	movf	vscp_readStdReg@reg,w,c
 13086  0034F6  0A91               	xorlw	145
 13087  0034F8  E103               	bnz	l11150
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 13091  0034FA  C0BD  F02A         	movff	_vscp_nickname,vscp_readStdReg@rv
 13092                           
 13093                           ;vscp_firmware.c: 639: }
 13094  0034FE  D079               	goto	l11200
 13095  003500                     l11150:
 13096                           
 13097                           ; BSR set to: 0
 13098                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 13099  003500  502B               	movf	vscp_readStdReg@reg,w,c
 13100  003502  0A93               	xorlw	147
 13101  003504  E103               	bnz	l11154
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 13105  003506  C046  F02A         	movff	_vscp_page_select,vscp_readStdReg@rv
 13106                           
 13107                           ;vscp_firmware.c: 645: }
 13108  00350A  D073               	goto	l11200
 13109  00350C                     l11154:
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13113  00350C  502B               	movf	vscp_readStdReg@reg,w,c
 13114  00350E  0A92               	xorlw	146
 13115  003510  E102               	bnz	l11158
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13119  003512  5047               	movf	_vscp_page_select+1,w,c
 13120  003514  D035               	goto	L31
 13121  003516                     l11158:
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13125  003516  502B               	movf	vscp_readStdReg@reg,w,c
 13126  003518  0A97               	xorlw	151
 13127  00351A  E103               	bnz	l11162
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13131  00351C  ECC5  F029         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13132  003520  D02F               	goto	L31
 13133  003522                     l11162:
 13134                           
 13135                           ; BSR set to: 0
 13136                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13137  003522  502B               	movf	vscp_readStdReg@reg,w,c
 13138  003524  0A98               	xorlw	152
 13139  003526  E103               	bnz	l11166
 13140                           
 13141                           ; BSR set to: 0
 13142                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13143  003528  ECC4  F029         	call	_vscp_getBufferSize	;wreg free
 13144  00352C  D029               	goto	L31
 13145  00352E                     l11166:
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13149  00352E  502B               	movf	vscp_readStdReg@reg,w,c
 13150  003530  0A99               	xorlw	153
 13151  003532  E103               	bnz	l11170
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13155  003534  ECC3  F029         	call	_vscp_getRegisterPagesUsed	;wreg free
 13156  003538  D023               	goto	L31
 13157  00353A                     l11170:
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13161                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13162  00353A  0E99               	movlw	153
 13163  00353C  642B               	cpfsgt	vscp_readStdReg@reg,c
 13164  00353E  D022               	goto	l11180
 13165                           
 13166                           ; BSR set to: 0
 13167  003540  0E9E               	movlw	158
 13168  003542  602B               	cpfslt	vscp_readStdReg@reg,c
 13169  003544  D01F               	goto	l11180
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13173  003546  ECAA  F029         	call	_vscp_getFamilyCode	;wreg free
 13174  00354A  C011  F023         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13175  00354E  C010  F022         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13176  003552  C00F  F021         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13177  003556  C00E  F020         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13178                           
 13179                           ; BSR set to: 0
 13180                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13181  00355A  502B               	movf	vscp_readStdReg@reg,w,c
 13182  00355C  0F66               	addlw	102
 13183  00355E  6E28               	movwf	vscp_readStdReg@idx,c
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13187  003560  5028               	movf	vscp_readStdReg@idx,w,c
 13188  003562  D849               	call	PL34	;call to abstracted procedure
 13189  003564  C020  F01C         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13190  003568  C021  F01D         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13191  00356C  C022  F01E         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13192  003570  C023  F01F         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13193  003574  2AE8               	incf	wreg,f,c
 13194  003576  D001               	goto	u9370
 13195  003578                     u9375:
 13196  003578  D848               	call	PL82	;call to abstracted procedure
 13197  00357A                     u9370:
 13198  00357A  2EE8               	decfsz	wreg,f,c
 13199  00357C  D7FD               	goto	u9375
 13200  00357E  D024               	goto	L32
 13201  003580                     L31:
 13202  003580  6E2A               	movwf	vscp_readStdReg@rv,c
 13203                           
 13204                           ;vscp_firmware.c: 671: }
 13205  003582  D037               	goto	l11200
 13206  003584                     l11180:
 13207                           
 13208                           ; BSR set to: 0
 13209                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13210                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13211  003584  0E9D               	movlw	157
 13212  003586  642B               	cpfsgt	vscp_readStdReg@reg,c
 13213  003588  D021               	goto	l11190
 13214                           
 13215                           ; BSR set to: 0
 13216  00358A  0EA2               	movlw	162
 13217  00358C  602B               	cpfslt	vscp_readStdReg@reg,c
 13218  00358E  D01E               	goto	l11190
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13222  003590  ECA5  F029         	call	_vscp_getFamilyType	;wreg free
 13223  003594  C011  F027         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1139+3
 13224  003598  C010  F026         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1139+2
 13225  00359C  C00F  F025         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1139+1
 13226  0035A0  C00E  F024         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1139
 13227                           
 13228                           ; BSR set to: 0
 13229                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13230  0035A4  502B               	movf	vscp_readStdReg@reg,w,c
 13231  0035A6  0F62               	addlw	98
 13232  0035A8  6E29               	movwf	vscp_readStdReg@idx_1140,c
 13233                           
 13234                           ; BSR set to: 0
 13235                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13236  0035AA  5029               	movf	vscp_readStdReg@idx_1140,w,c
 13237  0035AC  D824               	call	PL34	;call to abstracted procedure
 13238  0035AE  C024  F01C         	movff	vscp_readStdReg@code_1139,??_vscp_readStdReg+1
 13239  0035B2  C025  F01D         	movff	vscp_readStdReg@code_1139+1,??_vscp_readStdReg+2
 13240  0035B6  C026  F01E         	movff	vscp_readStdReg@code_1139+2,??_vscp_readStdReg+3
 13241  0035BA  C027  F01F         	movff	vscp_readStdReg@code_1139+3,??_vscp_readStdReg+4
 13242  0035BE  2AE8               	incf	wreg,f,c
 13243  0035C0  D001               	goto	u9400
 13244  0035C2                     u9405:
 13245  0035C2  D823               	call	PL82	;call to abstracted procedure
 13246  0035C4                     u9400:
 13247  0035C4  2EE8               	decfsz	wreg,f,c
 13248  0035C6  D7FD               	goto	u9405
 13249  0035C8                     L32:
 13250  0035C8  501C               	movf	??_vscp_readStdReg+1,w,c
 13251  0035CA  D7DA               	goto	L31
 13252  0035CC                     l11190:
 13253                           
 13254                           ; BSR set to: 0
 13255                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13256                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13257  0035CC  0ECF               	movlw	207
 13258  0035CE  642B               	cpfsgt	vscp_readStdReg@reg,c
 13259  0035D0  D008               	goto	l11196
 13260                           
 13261                           ; BSR set to: 0
 13262  0035D2  0EE0               	movlw	224
 13263  0035D4  602B               	cpfslt	vscp_readStdReg@reg,c
 13264  0035D6  D005               	goto	l11196
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13268  0035D8  502B               	movf	vscp_readStdReg@reg,w,c
 13269  0035DA  0F30               	addlw	48
 13270  0035DC  EC5A  F029         	call	_vscp_getGUID
 13271  0035E0  D7CF               	goto	L31
 13272  0035E2                     l11196:
 13273                           
 13274                           ; BSR set to: 0
 13275                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13276  0035E2  0EDF               	movlw	223
 13277  0035E4  642B               	cpfsgt	vscp_readStdReg@reg,c
 13278  0035E6  D005               	goto	l11200
 13279                           
 13280                           ; BSR set to: 0
 13281                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13282  0035E8  502B               	movf	vscp_readStdReg@reg,w,c
 13283  0035EA  0F20               	addlw	32
 13284  0035EC  EC22  F029         	call	_vscp_getMDF_URL
 13285  0035F0  D7C7               	goto	L31
 13286  0035F2                     l11200:
 13287                           
 13288                           ;vscp_firmware.c: 691: }
 13289                           ;vscp_firmware.c: 693: return rv;
 13290  0035F2  502A               	movf	vscp_readStdReg@rv,w,c
 13291  0035F4  0012               	return	
 13292  0035F6                     __end_of_vscp_readStdReg:
 13293                           	opt stack 0
 13294  0035F6                     PL34:
 13295                           	opt stack 24
 13296  0035F6  0803               	sublw	3
 13297  0035F8  6E1B               	movwf	??_vscp_readStdReg& (0+255),c
 13298  0035FA  90D8               	bcf	status,0,c
 13299  0035FC  361B               	rlcf	??_vscp_readStdReg,f,c
 13300  0035FE  90D8               	bcf	status,0,c
 13301  003600  361B               	rlcf	??_vscp_readStdReg,f,c
 13302  003602  90D8               	bcf	status,0,c
 13303  003604  361B               	rlcf	??_vscp_readStdReg,f,c
 13304  003606  501B               	movf	??_vscp_readStdReg,w,c
 13305  003608  0012               	return	
 13306  00360A                     __end_ofPL34:
 13307                           	opt stack 0
 13308  00360A                     PL82:
 13309                           	opt stack 24
 13310  00360A  90D8               	bcf	status,0,c
 13311  00360C  321F               	rrcf	??_vscp_readStdReg+4,f,c
 13312  00360E  321E               	rrcf	??_vscp_readStdReg+3,f,c
 13313  003610  321D               	rrcf	??_vscp_readStdReg+2,f,c
 13314  003612  321C               	rrcf	??_vscp_readStdReg+1,f,c
 13315  003614  0012               	return	
 13316  003616                     __end_ofPL82:
 13317                           	opt stack 0
 13318                           tblptru	equ	0xFF8
 13319                           tblptrh	equ	0xFF7
 13320                           tblptrl	equ	0xFF6
 13321                           tablat	equ	0xFF5
 13322                           prodh	equ	0xFF4
 13323                           prodl	equ	0xFF3
 13324                           intcon	equ	0xFF2
 13325                           postinc0	equ	0xFEE
 13326                           wreg	equ	0xFE8
 13327                           indf1	equ	0xFE7
 13328                           postdec1	equ	0xFE5
 13329                           fsr1h	equ	0xFE2
 13330                           fsr1l	equ	0xFE1
 13331                           indf2	equ	0xFDF
 13332                           postinc2	equ	0xFDE
 13333                           postdec2	equ	0xFDD
 13334                           plusw2	equ	0xFDB
 13335                           fsr2h	equ	0xFDA
 13336                           fsr2l	equ	0xFD9
 13337                           status	equ	0xFD8
 13338                           
 13339 ;; *************** function _vscp_getFamilyType *****************
 13340 ;; Defined at:
 13341 ;;		line 2823 in file "../main.c"
 13342 ;; Parameters:    Size  Location     Type
 13343 ;;		None
 13344 ;; Auto vars:     Size  Location     Type
 13345 ;;		None
 13346 ;; Return value:  Size  Location     Type
 13347 ;;                  4   13[COMRAM] unsigned long 
 13348 ;; Registers used:
 13349 ;;		None
 13350 ;; Tracked objects:
 13351 ;;		On entry : F/0
 13352 ;;		On exit  : F/0
 13353 ;;		Unchanged: F/0
 13354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13355 ;;      Params:         4       0       0       0       0       0       0
 13356 ;;      Locals:         0       0       0       0       0       0       0
 13357 ;;      Temps:          0       0       0       0       0       0       0
 13358 ;;      Totals:         4       0       0       0       0       0       0
 13359 ;;Total ram usage:        4 bytes
 13360 ;; Hardware stack levels used:    1
 13361 ;; Hardware stack levels required when called:    2
 13362 ;; This function calls:
 13363 ;;		Nothing
 13364 ;; This function is called by:
 13365 ;;		_vscp_readStdReg
 13366 ;; This function uses a non-reentrant model
 13367 ;;
 13368                           
 13369                           	psect	text47
 13370  00534A                     __ptext47:
 13371                           	opt stack 0
 13372  00534A                     _vscp_getFamilyType:
 13373                           	opt stack 25
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;main.c: 2824: return 0;
 13377                           
 13378                           ;incstack = 0
 13379                           ;incstack = 0
 13380  00534A  6A0E               	clrf	?_vscp_getFamilyType,c
 13381  00534C  6A0F               	clrf	?_vscp_getFamilyType+1,c
 13382  00534E  6A10               	clrf	?_vscp_getFamilyType+2,c
 13383  005350  6A11               	clrf	?_vscp_getFamilyType+3,c
 13384                           
 13385                           ; BSR set to: 0
 13386  005352  0012               	return	
 13387  005354                     __end_of_vscp_getFamilyType:
 13388                           	opt stack 0
 13389                           tblptru	equ	0xFF8
 13390                           tblptrh	equ	0xFF7
 13391                           tblptrl	equ	0xFF6
 13392                           tablat	equ	0xFF5
 13393                           prodh	equ	0xFF4
 13394                           prodl	equ	0xFF3
 13395                           intcon	equ	0xFF2
 13396                           postinc0	equ	0xFEE
 13397                           wreg	equ	0xFE8
 13398                           indf1	equ	0xFE7
 13399                           postdec1	equ	0xFE5
 13400                           fsr1h	equ	0xFE2
 13401                           fsr1l	equ	0xFE1
 13402                           indf2	equ	0xFDF
 13403                           postinc2	equ	0xFDE
 13404                           postdec2	equ	0xFDD
 13405                           plusw2	equ	0xFDB
 13406                           fsr2h	equ	0xFDA
 13407                           fsr2l	equ	0xFD9
 13408                           status	equ	0xFD8
 13409                           
 13410 ;; *************** function _vscp_getFamilyCode *****************
 13411 ;; Defined at:
 13412 ;;		line 2813 in file "../main.c"
 13413 ;; Parameters:    Size  Location     Type
 13414 ;;		None
 13415 ;; Auto vars:     Size  Location     Type
 13416 ;;		None
 13417 ;; Return value:  Size  Location     Type
 13418 ;;                  4   13[COMRAM] unsigned long 
 13419 ;; Registers used:
 13420 ;;		None
 13421 ;; Tracked objects:
 13422 ;;		On entry : F/0
 13423 ;;		On exit  : F/0
 13424 ;;		Unchanged: F/0
 13425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13426 ;;      Params:         4       0       0       0       0       0       0
 13427 ;;      Locals:         0       0       0       0       0       0       0
 13428 ;;      Temps:          0       0       0       0       0       0       0
 13429 ;;      Totals:         4       0       0       0       0       0       0
 13430 ;;Total ram usage:        4 bytes
 13431 ;; Hardware stack levels used:    1
 13432 ;; Hardware stack levels required when called:    2
 13433 ;; This function calls:
 13434 ;;		Nothing
 13435 ;; This function is called by:
 13436 ;;		_vscp_readStdReg
 13437 ;; This function uses a non-reentrant model
 13438 ;;
 13439                           
 13440                           	psect	text48
 13441  005354                     __ptext48:
 13442                           	opt stack 0
 13443  005354                     _vscp_getFamilyCode:
 13444                           	opt stack 25
 13445                           
 13446                           ; BSR set to: 0
 13447                           ;main.c: 2814: return 0L;
 13448                           
 13449                           ; BSR set to: 0
 13450                           ;incstack = 0
 13451                           ;incstack = 0
 13452  005354  6A0E               	clrf	?_vscp_getFamilyCode,c
 13453  005356  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 13454  005358  6A10               	clrf	?_vscp_getFamilyCode+2,c
 13455  00535A  6A11               	clrf	?_vscp_getFamilyCode+3,c
 13456                           
 13457                           ; BSR set to: 0
 13458  00535C  0012               	return	
 13459  00535E                     __end_of_vscp_getFamilyCode:
 13460                           	opt stack 0
 13461                           tblptru	equ	0xFF8
 13462                           tblptrh	equ	0xFF7
 13463                           tblptrl	equ	0xFF6
 13464                           tablat	equ	0xFF5
 13465                           prodh	equ	0xFF4
 13466                           prodl	equ	0xFF3
 13467                           intcon	equ	0xFF2
 13468                           postinc0	equ	0xFEE
 13469                           wreg	equ	0xFE8
 13470                           indf1	equ	0xFE7
 13471                           postdec1	equ	0xFE5
 13472                           fsr1h	equ	0xFE2
 13473                           fsr1l	equ	0xFE1
 13474                           indf2	equ	0xFDF
 13475                           postinc2	equ	0xFDE
 13476                           postdec2	equ	0xFDD
 13477                           plusw2	equ	0xFDB
 13478                           fsr2h	equ	0xFDA
 13479                           fsr2l	equ	0xFD9
 13480                           status	equ	0xFD8
 13481                           
 13482 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13483 ;; Defined at:
 13484 ;;		line 2716 in file "../main.c"
 13485 ;; Parameters:    Size  Location     Type
 13486 ;;		None
 13487 ;; Auto vars:     Size  Location     Type
 13488 ;;		None
 13489 ;; Return value:  Size  Location     Type
 13490 ;;                  1    wreg      unsigned char 
 13491 ;; Registers used:
 13492 ;;		wreg
 13493 ;; Tracked objects:
 13494 ;;		On entry : F/0
 13495 ;;		On exit  : F/0
 13496 ;;		Unchanged: F/0
 13497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13498 ;;      Params:         0       0       0       0       0       0       0
 13499 ;;      Locals:         0       0       0       0       0       0       0
 13500 ;;      Temps:          0       0       0       0       0       0       0
 13501 ;;      Totals:         0       0       0       0       0       0       0
 13502 ;;Total ram usage:        0 bytes
 13503 ;; Hardware stack levels used:    1
 13504 ;; Hardware stack levels required when called:    2
 13505 ;; This function calls:
 13506 ;;		Nothing
 13507 ;; This function is called by:
 13508 ;;		_vscp_readStdReg
 13509 ;; This function uses a non-reentrant model
 13510 ;;
 13511                           
 13512                           	psect	text49
 13513  005386                     __ptext49:
 13514                           	opt stack 0
 13515  005386                     _vscp_getRegisterPagesUsed:
 13516                           	opt stack 25
 13517                           
 13518                           ; BSR set to: 0
 13519                           
 13520                           ; BSR set to: 0
 13521                           ;main.c: 2717: return 1;
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;incstack = 0
 13525                           ;incstack = 0
 13526  005386  0C01               	retlw	1
 13527  005388                     __end_of_vscp_getRegisterPagesUsed:
 13528                           	opt stack 0
 13529                           tblptru	equ	0xFF8
 13530                           tblptrh	equ	0xFF7
 13531                           tblptrl	equ	0xFF6
 13532                           tablat	equ	0xFF5
 13533                           prodh	equ	0xFF4
 13534                           prodl	equ	0xFF3
 13535                           intcon	equ	0xFF2
 13536                           postinc0	equ	0xFEE
 13537                           wreg	equ	0xFE8
 13538                           indf1	equ	0xFE7
 13539                           postdec1	equ	0xFE5
 13540                           fsr1h	equ	0xFE2
 13541                           fsr1l	equ	0xFE1
 13542                           indf2	equ	0xFDF
 13543                           postinc2	equ	0xFDE
 13544                           postdec2	equ	0xFDD
 13545                           plusw2	equ	0xFDB
 13546                           fsr2h	equ	0xFDA
 13547                           fsr2l	equ	0xFD9
 13548                           status	equ	0xFD8
 13549                           
 13550 ;; *************** function _vscp_getBufferSize *****************
 13551 ;; Defined at:
 13552 ;;		line 2669 in file "../main.c"
 13553 ;; Parameters:    Size  Location     Type
 13554 ;;		None
 13555 ;; Auto vars:     Size  Location     Type
 13556 ;;		None
 13557 ;; Return value:  Size  Location     Type
 13558 ;;                  1    wreg      unsigned char 
 13559 ;; Registers used:
 13560 ;;		wreg
 13561 ;; Tracked objects:
 13562 ;;		On entry : F/0
 13563 ;;		On exit  : F/0
 13564 ;;		Unchanged: F/0
 13565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13566 ;;      Params:         0       0       0       0       0       0       0
 13567 ;;      Locals:         0       0       0       0       0       0       0
 13568 ;;      Temps:          0       0       0       0       0       0       0
 13569 ;;      Totals:         0       0       0       0       0       0       0
 13570 ;;Total ram usage:        0 bytes
 13571 ;; Hardware stack levels used:    1
 13572 ;; Hardware stack levels required when called:    2
 13573 ;; This function calls:
 13574 ;;		Nothing
 13575 ;; This function is called by:
 13576 ;;		_vscp_readStdReg
 13577 ;; This function uses a non-reentrant model
 13578 ;;
 13579                           
 13580                           	psect	text50
 13581  005388                     __ptext50:
 13582                           	opt stack 0
 13583  005388                     _vscp_getBufferSize:
 13584                           	opt stack 25
 13585                           
 13586                           ; BSR set to: 0
 13587                           
 13588                           ; BSR set to: 0
 13589                           ;main.c: 2670: return 8;
 13590                           
 13591                           ; BSR set to: 0
 13592                           ;incstack = 0
 13593                           ;incstack = 0
 13594  005388  0C08               	retlw	8
 13595  00538A                     __end_of_vscp_getBufferSize:
 13596                           	opt stack 0
 13597                           tblptru	equ	0xFF8
 13598                           tblptrh	equ	0xFF7
 13599                           tblptrl	equ	0xFF6
 13600                           tablat	equ	0xFF5
 13601                           prodh	equ	0xFF4
 13602                           prodl	equ	0xFF3
 13603                           intcon	equ	0xFF2
 13604                           postinc0	equ	0xFEE
 13605                           wreg	equ	0xFE8
 13606                           indf1	equ	0xFE7
 13607                           postdec1	equ	0xFE5
 13608                           fsr1h	equ	0xFE2
 13609                           fsr1l	equ	0xFE1
 13610                           indf2	equ	0xFDF
 13611                           postinc2	equ	0xFDE
 13612                           postdec2	equ	0xFDD
 13613                           plusw2	equ	0xFDB
 13614                           fsr2h	equ	0xFDA
 13615                           fsr2l	equ	0xFD9
 13616                           status	equ	0xFD8
 13617                           
 13618 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13619 ;; Defined at:
 13620 ;;		line 2660 in file "../main.c"
 13621 ;; Parameters:    Size  Location     Type
 13622 ;;		None
 13623 ;; Auto vars:     Size  Location     Type
 13624 ;;		None
 13625 ;; Return value:  Size  Location     Type
 13626 ;;                  1    wreg      unsigned char 
 13627 ;; Registers used:
 13628 ;;		wreg
 13629 ;; Tracked objects:
 13630 ;;		On entry : F/0
 13631 ;;		On exit  : F/0
 13632 ;;		Unchanged: F/0
 13633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13634 ;;      Params:         0       0       0       0       0       0       0
 13635 ;;      Locals:         0       0       0       0       0       0       0
 13636 ;;      Temps:          0       0       0       0       0       0       0
 13637 ;;      Totals:         0       0       0       0       0       0       0
 13638 ;;Total ram usage:        0 bytes
 13639 ;; Hardware stack levels used:    1
 13640 ;; Hardware stack levels required when called:    2
 13641 ;; This function calls:
 13642 ;;		Nothing
 13643 ;; This function is called by:
 13644 ;;		_vscp_readStdReg
 13645 ;; This function uses a non-reentrant model
 13646 ;;
 13647                           
 13648                           	psect	text51
 13649  00538A                     __ptext51:
 13650                           	opt stack 0
 13651  00538A                     _vscp_getBootLoaderAlgorithm:
 13652                           	opt stack 25
 13653                           
 13654                           ; BSR set to: 0
 13655                           
 13656                           ; BSR set to: 0
 13657                           ;main.c: 2661: return 0x01;
 13658                           
 13659                           ; BSR set to: 0
 13660                           ;incstack = 0
 13661                           ;incstack = 0
 13662  00538A  0C01               	retlw	1
 13663  00538C                     __end_of_vscp_getBootLoaderAlgorithm:
 13664                           	opt stack 0
 13665                           tblptru	equ	0xFF8
 13666                           tblptrh	equ	0xFF7
 13667                           tblptrl	equ	0xFF6
 13668                           tablat	equ	0xFF5
 13669                           prodh	equ	0xFF4
 13670                           prodl	equ	0xFF3
 13671                           intcon	equ	0xFF2
 13672                           postinc0	equ	0xFEE
 13673                           wreg	equ	0xFE8
 13674                           indf1	equ	0xFE7
 13675                           postdec1	equ	0xFE5
 13676                           fsr1h	equ	0xFE2
 13677                           fsr1l	equ	0xFE1
 13678                           indf2	equ	0xFDF
 13679                           postinc2	equ	0xFDE
 13680                           postdec2	equ	0xFDD
 13681                           plusw2	equ	0xFDB
 13682                           fsr2h	equ	0xFDA
 13683                           fsr2l	equ	0xFD9
 13684                           status	equ	0xFD8
 13685                           
 13686 ;; *************** function _vscp_getManufacturerId *****************
 13687 ;; Defined at:
 13688 ;;		line 2640 in file "../main.c"
 13689 ;; Parameters:    Size  Location     Type
 13690 ;;  idx             1    wreg     unsigned char 
 13691 ;; Auto vars:     Size  Location     Type
 13692 ;;  idx             1   25[COMRAM] unsigned char 
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  1    wreg      unsigned char 
 13695 ;; Registers used:
 13696 ;;		wreg, status,2, status,0, cstack
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13702 ;;      Params:         0       0       0       0       0       0       0
 13703 ;;      Locals:         1       0       0       0       0       0       0
 13704 ;;      Temps:          0       0       0       0       0       0       0
 13705 ;;      Totals:         1       0       0       0       0       0       0
 13706 ;;Total ram usage:        1 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; Hardware stack levels required when called:    3
 13709 ;; This function calls:
 13710 ;;		_readEEPROM
 13711 ;; This function is called by:
 13712 ;;		_vscp_readStdReg
 13713 ;;		_vscp_writeStdReg
 13714 ;; This function uses a non-reentrant model
 13715 ;;
 13716                           
 13717                           	psect	text52
 13718  00528C                     __ptext52:
 13719                           	opt stack 0
 13720  00528C                     _vscp_getManufacturerId:
 13721                           	opt stack 24
 13722                           
 13723                           ; BSR set to: 0
 13724                           ;incstack = 0
 13725                           ;incstack = 0
 13726                           ;vscp_getManufacturerId@idx stored from wreg
 13727  00528C  CFE8 F01A          	movff	wreg,vscp_getManufacturerId@idx
 13728                           
 13729                           ;main.c: 2641: return readEEPROM(0x09 + idx);
 13730  005290  0E09               	movlw	9
 13731  005292  241A               	addwf	vscp_getManufacturerId@idx,w,c
 13732  005294  6E16               	movwf	?_readEEPROM,c
 13733  005296  6A17               	clrf	?_readEEPROM+1,c
 13734  005298  0E00               	movlw	0
 13735  00529A  2217               	addwfc	?_readEEPROM+1,f,c
 13736  00529C  EF64  F029         	goto	_readEEPROM	;wreg free
 13737  0052A0                     __end_of_vscp_getManufacturerId:
 13738                           	opt stack 0
 13739                           tblptru	equ	0xFF8
 13740                           tblptrh	equ	0xFF7
 13741                           tblptrl	equ	0xFF6
 13742                           tablat	equ	0xFF5
 13743                           prodh	equ	0xFF4
 13744                           prodl	equ	0xFF3
 13745                           intcon	equ	0xFF2
 13746                           postinc0	equ	0xFEE
 13747                           wreg	equ	0xFE8
 13748                           indf1	equ	0xFE7
 13749                           postdec1	equ	0xFE5
 13750                           fsr1h	equ	0xFE2
 13751                           fsr1l	equ	0xFE1
 13752                           indf2	equ	0xFDF
 13753                           postinc2	equ	0xFDE
 13754                           postdec2	equ	0xFDD
 13755                           plusw2	equ	0xFDB
 13756                           fsr2h	equ	0xFDA
 13757                           fsr2l	equ	0xFD9
 13758                           status	equ	0xFD8
 13759                           
 13760 ;; *************** function _vscp_getUserID *****************
 13761 ;; Defined at:
 13762 ;;		line 2620 in file "../main.c"
 13763 ;; Parameters:    Size  Location     Type
 13764 ;;  idx             1    wreg     unsigned char 
 13765 ;; Auto vars:     Size  Location     Type
 13766 ;;  idx             1   25[COMRAM] unsigned char 
 13767 ;; Return value:  Size  Location     Type
 13768 ;;                  1    wreg      unsigned char 
 13769 ;; Registers used:
 13770 ;;		wreg, status,2, status,0, cstack
 13771 ;; Tracked objects:
 13772 ;;		On entry : 0/0
 13773 ;;		On exit  : 0/0
 13774 ;;		Unchanged: 0/0
 13775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13776 ;;      Params:         0       0       0       0       0       0       0
 13777 ;;      Locals:         1       0       0       0       0       0       0
 13778 ;;      Temps:          0       0       0       0       0       0       0
 13779 ;;      Totals:         1       0       0       0       0       0       0
 13780 ;;Total ram usage:        1 bytes
 13781 ;; Hardware stack levels used:    1
 13782 ;; Hardware stack levels required when called:    3
 13783 ;; This function calls:
 13784 ;;		_readEEPROM
 13785 ;; This function is called by:
 13786 ;;		_vscp_readStdReg
 13787 ;;		_vscp_writeStdReg
 13788 ;; This function uses a non-reentrant model
 13789 ;;
 13790                           
 13791                           	psect	text53
 13792  0052A0                     __ptext53:
 13793                           	opt stack 0
 13794  0052A0                     _vscp_getUserID:
 13795                           	opt stack 24
 13796                           
 13797                           ;incstack = 0
 13798                           ;incstack = 0
 13799                           ;vscp_getUserID@idx stored from wreg
 13800  0052A0  CFE8 F01A          	movff	wreg,vscp_getUserID@idx
 13801                           
 13802                           ;main.c: 2621: return readEEPROM(0x04 + idx);
 13803  0052A4  0E04               	movlw	4
 13804  0052A6  241A               	addwf	vscp_getUserID@idx,w,c
 13805  0052A8  6E16               	movwf	?_readEEPROM,c
 13806  0052AA  6A17               	clrf	?_readEEPROM+1,c
 13807  0052AC  0E00               	movlw	0
 13808  0052AE  2217               	addwfc	?_readEEPROM+1,f,c
 13809  0052B0  EF64  F029         	goto	_readEEPROM	;wreg free
 13810  0052B4                     __end_of_vscp_getUserID:
 13811                           	opt stack 0
 13812                           tblptru	equ	0xFF8
 13813                           tblptrh	equ	0xFF7
 13814                           tblptrl	equ	0xFF6
 13815                           tablat	equ	0xFF5
 13816                           prodh	equ	0xFF4
 13817                           prodl	equ	0xFF3
 13818                           intcon	equ	0xFF2
 13819                           postinc0	equ	0xFEE
 13820                           wreg	equ	0xFE8
 13821                           indf1	equ	0xFE7
 13822                           postdec1	equ	0xFE5
 13823                           fsr1h	equ	0xFE2
 13824                           fsr1l	equ	0xFE1
 13825                           indf2	equ	0xFDF
 13826                           postinc2	equ	0xFDE
 13827                           postdec2	equ	0xFDD
 13828                           plusw2	equ	0xFDB
 13829                           fsr2h	equ	0xFDA
 13830                           fsr2l	equ	0xFD9
 13831                           status	equ	0xFD8
 13832                           
 13833 ;; *************** function _vscp_getMDF_URL *****************
 13834 ;; Defined at:
 13835 ;;		line 2611 in file "../main.c"
 13836 ;; Parameters:    Size  Location     Type
 13837 ;;  idx             1    wreg     unsigned char 
 13838 ;; Auto vars:     Size  Location     Type
 13839 ;;  idx             1   14[COMRAM] unsigned char 
 13840 ;; Return value:  Size  Location     Type
 13841 ;;                  1    wreg      unsigned char 
 13842 ;; Registers used:
 13843 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13844 ;; Tracked objects:
 13845 ;;		On entry : F/0
 13846 ;;		On exit  : F/0
 13847 ;;		Unchanged: F/0
 13848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13849 ;;      Params:         0       0       0       0       0       0       0
 13850 ;;      Locals:         1       0       0       0       0       0       0
 13851 ;;      Temps:          1       0       0       0       0       0       0
 13852 ;;      Totals:         2       0       0       0       0       0       0
 13853 ;;Total ram usage:        2 bytes
 13854 ;; Hardware stack levels used:    1
 13855 ;; Hardware stack levels required when called:    2
 13856 ;; This function calls:
 13857 ;;		Nothing
 13858 ;; This function is called by:
 13859 ;;		_vscp_readStdReg
 13860 ;;		_vscp_handleProtocolEvent
 13861 ;; This function uses a non-reentrant model
 13862 ;;
 13863                           
 13864                           	psect	text54
 13865  005244                     __ptext54:
 13866                           	opt stack 0
 13867  005244                     _vscp_getMDF_URL:
 13868                           	opt stack 25
 13869                           
 13870                           ;incstack = 0
 13871                           ;incstack = 0
 13872                           ;vscp_getMDF_URL@idx stored from wreg
 13873  005244  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13874                           
 13875                           ; BSR set to: 0
 13876                           ;main.c: 2612: return vscp_deviceURL[ idx ];
 13877  005248  500F               	movf	vscp_getMDF_URL@idx,w,c
 13878  00524A  0F00               	addlw	low _vscp_deviceURL
 13879  00524C  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13880  00524E  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13881  005252  0E06               	movlw	high __smallconst
 13882  005254  6EF7               	movwf	tblptrh,c
 13883  005256  0008               	tblrd		*
 13884  005258  50F5               	movf	tablat,w,c
 13885                           
 13886                           ; BSR set to: 0
 13887  00525A  0012               	return	
 13888  00525C                     __end_of_vscp_getMDF_URL:
 13889                           	opt stack 0
 13890                           tblptru	equ	0xFF8
 13891                           tblptrh	equ	0xFF7
 13892                           tblptrl	equ	0xFF6
 13893                           tablat	equ	0xFF5
 13894                           prodh	equ	0xFF4
 13895                           prodl	equ	0xFF3
 13896                           intcon	equ	0xFF2
 13897                           postinc0	equ	0xFEE
 13898                           wreg	equ	0xFE8
 13899                           indf1	equ	0xFE7
 13900                           postdec1	equ	0xFE5
 13901                           fsr1h	equ	0xFE2
 13902                           fsr1l	equ	0xFE1
 13903                           indf2	equ	0xFDF
 13904                           postinc2	equ	0xFDE
 13905                           postdec2	equ	0xFDD
 13906                           plusw2	equ	0xFDB
 13907                           fsr2h	equ	0xFDA
 13908                           fsr2l	equ	0xFD9
 13909                           status	equ	0xFD8
 13910                           
 13911 ;; *************** function _vscp_getGUID *****************
 13912 ;; Defined at:
 13913 ;;		line 2588 in file "../main.c"
 13914 ;; Parameters:    Size  Location     Type
 13915 ;;  idx             1    wreg     unsigned char 
 13916 ;; Auto vars:     Size  Location     Type
 13917 ;;  idx             1   25[COMRAM] unsigned char 
 13918 ;; Return value:  Size  Location     Type
 13919 ;;                  1    wreg      unsigned char 
 13920 ;; Registers used:
 13921 ;;		wreg, status,2, status,0, cstack
 13922 ;; Tracked objects:
 13923 ;;		On entry : 0/0
 13924 ;;		On exit  : 0/0
 13925 ;;		Unchanged: 0/0
 13926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13927 ;;      Params:         0       0       0       0       0       0       0
 13928 ;;      Locals:         1       0       0       0       0       0       0
 13929 ;;      Temps:          0       0       0       0       0       0       0
 13930 ;;      Totals:         1       0       0       0       0       0       0
 13931 ;;Total ram usage:        1 bytes
 13932 ;; Hardware stack levels used:    1
 13933 ;; Hardware stack levels required when called:    3
 13934 ;; This function calls:
 13935 ;;		_readEEPROM
 13936 ;; This function is called by:
 13937 ;;		_vscp_readStdReg
 13938 ;;		_vscp_writeStdReg
 13939 ;;		_vscp_handleProtocolEvent
 13940 ;; This function uses a non-reentrant model
 13941 ;;
 13942                           
 13943                           	psect	text55
 13944  0052B4                     __ptext55:
 13945                           	opt stack 0
 13946  0052B4                     _vscp_getGUID:
 13947                           	opt stack 24
 13948                           
 13949                           ; BSR set to: 0
 13950                           ;incstack = 0
 13951                           ;incstack = 0
 13952                           ;vscp_getGUID@idx stored from wreg
 13953  0052B4  CFE8 F01A          	movff	wreg,vscp_getGUID@idx
 13954                           
 13955                           ;main.c: 2589: return readEEPROM(0x11 + idx);
 13956  0052B8  0E11               	movlw	17
 13957  0052BA  241A               	addwf	vscp_getGUID@idx,w,c
 13958  0052BC  6E16               	movwf	?_readEEPROM,c
 13959  0052BE  6A17               	clrf	?_readEEPROM+1,c
 13960  0052C0  0E00               	movlw	0
 13961  0052C2  2217               	addwfc	?_readEEPROM+1,f,c
 13962  0052C4  EF64  F029         	goto	_readEEPROM	;wreg free
 13963  0052C8                     __end_of_vscp_getGUID:
 13964                           	opt stack 0
 13965                           tblptru	equ	0xFF8
 13966                           tblptrh	equ	0xFF7
 13967                           tblptrl	equ	0xFF6
 13968                           tablat	equ	0xFF5
 13969                           prodh	equ	0xFF4
 13970                           prodl	equ	0xFF3
 13971                           intcon	equ	0xFF2
 13972                           postinc0	equ	0xFEE
 13973                           wreg	equ	0xFE8
 13974                           indf1	equ	0xFE7
 13975                           postdec1	equ	0xFE5
 13976                           fsr1h	equ	0xFE2
 13977                           fsr1l	equ	0xFE1
 13978                           indf2	equ	0xFDF
 13979                           postinc2	equ	0xFDE
 13980                           postdec2	equ	0xFDD
 13981                           plusw2	equ	0xFDB
 13982                           fsr2h	equ	0xFDA
 13983                           fsr2l	equ	0xFD9
 13984                           status	equ	0xFD8
 13985                           
 13986 ;; *************** function _vscp_getSubMinorVersion *****************
 13987 ;; Defined at:
 13988 ;;		line 2577 in file "../main.c"
 13989 ;; Parameters:    Size  Location     Type
 13990 ;;		None
 13991 ;; Auto vars:     Size  Location     Type
 13992 ;;		None
 13993 ;; Return value:  Size  Location     Type
 13994 ;;                  1    wreg      unsigned char 
 13995 ;; Registers used:
 13996 ;;		wreg
 13997 ;; Tracked objects:
 13998 ;;		On entry : F/0
 13999 ;;		On exit  : F/0
 14000 ;;		Unchanged: F/0
 14001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14002 ;;      Params:         0       0       0       0       0       0       0
 14003 ;;      Locals:         0       0       0       0       0       0       0
 14004 ;;      Temps:          0       0       0       0       0       0       0
 14005 ;;      Totals:         0       0       0       0       0       0       0
 14006 ;;Total ram usage:        0 bytes
 14007 ;; Hardware stack levels used:    1
 14008 ;; Hardware stack levels required when called:    2
 14009 ;; This function calls:
 14010 ;;		Nothing
 14011 ;; This function is called by:
 14012 ;;		_vscp_readStdReg
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           	psect	text56
 14017  00538C                     __ptext56:
 14018                           	opt stack 0
 14019  00538C                     _vscp_getSubMinorVersion:
 14020                           	opt stack 25
 14021                           
 14022                           ; BSR set to: 0
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;main.c: 2578: return 2;
 14026                           
 14027                           ;incstack = 0
 14028                           ;incstack = 0
 14029  00538C  0C02               	retlw	2
 14030  00538E                     __end_of_vscp_getSubMinorVersion:
 14031                           	opt stack 0
 14032                           tblptru	equ	0xFF8
 14033                           tblptrh	equ	0xFF7
 14034                           tblptrl	equ	0xFF6
 14035                           tablat	equ	0xFF5
 14036                           prodh	equ	0xFF4
 14037                           prodl	equ	0xFF3
 14038                           intcon	equ	0xFF2
 14039                           postinc0	equ	0xFEE
 14040                           wreg	equ	0xFE8
 14041                           indf1	equ	0xFE7
 14042                           postdec1	equ	0xFE5
 14043                           fsr1h	equ	0xFE2
 14044                           fsr1l	equ	0xFE1
 14045                           indf2	equ	0xFDF
 14046                           postinc2	equ	0xFDE
 14047                           postdec2	equ	0xFDD
 14048                           plusw2	equ	0xFDB
 14049                           fsr2h	equ	0xFDA
 14050                           fsr2l	equ	0xFD9
 14051                           status	equ	0xFD8
 14052                           
 14053 ;; *************** function _vscp_getMinorVersion *****************
 14054 ;; Defined at:
 14055 ;;		line 2568 in file "../main.c"
 14056 ;; Parameters:    Size  Location     Type
 14057 ;;		None
 14058 ;; Auto vars:     Size  Location     Type
 14059 ;;		None
 14060 ;; Return value:  Size  Location     Type
 14061 ;;                  1    wreg      unsigned char 
 14062 ;; Registers used:
 14063 ;;		wreg
 14064 ;; Tracked objects:
 14065 ;;		On entry : F/0
 14066 ;;		On exit  : F/0
 14067 ;;		Unchanged: F/0
 14068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14069 ;;      Params:         0       0       0       0       0       0       0
 14070 ;;      Locals:         0       0       0       0       0       0       0
 14071 ;;      Temps:          0       0       0       0       0       0       0
 14072 ;;      Totals:         0       0       0       0       0       0       0
 14073 ;;Total ram usage:        0 bytes
 14074 ;; Hardware stack levels used:    1
 14075 ;; Hardware stack levels required when called:    2
 14076 ;; This function calls:
 14077 ;;		Nothing
 14078 ;; This function is called by:
 14079 ;;		_vscp_readStdReg
 14080 ;; This function uses a non-reentrant model
 14081 ;;
 14082                           
 14083                           	psect	text57
 14084  00538E                     __ptext57:
 14085                           	opt stack 0
 14086  00538E                     _vscp_getMinorVersion:
 14087                           	opt stack 25
 14088                           
 14089                           ; BSR set to: 0
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;main.c: 2569: return 2;
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;incstack = 0
 14096                           ;incstack = 0
 14097  00538E  0C02               	retlw	2
 14098  005390                     __end_of_vscp_getMinorVersion:
 14099                           	opt stack 0
 14100                           tblptru	equ	0xFF8
 14101                           tblptrh	equ	0xFF7
 14102                           tblptrl	equ	0xFF6
 14103                           tablat	equ	0xFF5
 14104                           prodh	equ	0xFF4
 14105                           prodl	equ	0xFF3
 14106                           intcon	equ	0xFF2
 14107                           postinc0	equ	0xFEE
 14108                           wreg	equ	0xFE8
 14109                           indf1	equ	0xFE7
 14110                           postdec1	equ	0xFE5
 14111                           fsr1h	equ	0xFE2
 14112                           fsr1l	equ	0xFE1
 14113                           indf2	equ	0xFDF
 14114                           postinc2	equ	0xFDE
 14115                           postdec2	equ	0xFDD
 14116                           plusw2	equ	0xFDB
 14117                           fsr2h	equ	0xFDA
 14118                           fsr2l	equ	0xFD9
 14119                           status	equ	0xFD8
 14120                           
 14121 ;; *************** function _vscp_getMajorVersion *****************
 14122 ;; Defined at:
 14123 ;;		line 2559 in file "../main.c"
 14124 ;; Parameters:    Size  Location     Type
 14125 ;;		None
 14126 ;; Auto vars:     Size  Location     Type
 14127 ;;		None
 14128 ;; Return value:  Size  Location     Type
 14129 ;;                  1    wreg      unsigned char 
 14130 ;; Registers used:
 14131 ;;		wreg
 14132 ;; Tracked objects:
 14133 ;;		On entry : F/0
 14134 ;;		On exit  : F/0
 14135 ;;		Unchanged: F/0
 14136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14137 ;;      Params:         0       0       0       0       0       0       0
 14138 ;;      Locals:         0       0       0       0       0       0       0
 14139 ;;      Temps:          0       0       0       0       0       0       0
 14140 ;;      Totals:         0       0       0       0       0       0       0
 14141 ;;Total ram usage:        0 bytes
 14142 ;; Hardware stack levels used:    1
 14143 ;; Hardware stack levels required when called:    2
 14144 ;; This function calls:
 14145 ;;		Nothing
 14146 ;; This function is called by:
 14147 ;;		_vscp_readStdReg
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           	psect	text58
 14152  005390                     __ptext58:
 14153                           	opt stack 0
 14154  005390                     _vscp_getMajorVersion:
 14155                           	opt stack 25
 14156                           
 14157                           ; BSR set to: 0
 14158                           
 14159                           ; BSR set to: 0
 14160                           ;main.c: 2560: return 1;
 14161                           
 14162                           ; BSR set to: 0
 14163                           ;incstack = 0
 14164                           ;incstack = 0
 14165  005390  0C01               	retlw	1
 14166  005392                     __end_of_vscp_getMajorVersion:
 14167                           	opt stack 0
 14168                           tblptru	equ	0xFF8
 14169                           tblptrh	equ	0xFF7
 14170                           tblptrl	equ	0xFF6
 14171                           tablat	equ	0xFF5
 14172                           prodh	equ	0xFF4
 14173                           prodl	equ	0xFF3
 14174                           intcon	equ	0xFF2
 14175                           postinc0	equ	0xFEE
 14176                           wreg	equ	0xFE8
 14177                           indf1	equ	0xFE7
 14178                           postdec1	equ	0xFE5
 14179                           fsr1h	equ	0xFE2
 14180                           fsr1l	equ	0xFE1
 14181                           indf2	equ	0xFDF
 14182                           postinc2	equ	0xFDE
 14183                           postdec2	equ	0xFDD
 14184                           plusw2	equ	0xFDB
 14185                           fsr2h	equ	0xFDA
 14186                           fsr2l	equ	0xFD9
 14187                           status	equ	0xFD8
 14188                           
 14189 ;; *************** function _vscp_newNodeOnline *****************
 14190 ;; Defined at:
 14191 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14192 ;; Parameters:    Size  Location     Type
 14193 ;;		None
 14194 ;; Auto vars:     Size  Location     Type
 14195 ;;		None
 14196 ;; Return value:  Size  Location     Type
 14197 ;;		None               void
 14198 ;; Registers used:
 14199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14200 ;; Tracked objects:
 14201 ;;		On entry : F/0
 14202 ;;		On exit  : F/0
 14203 ;;		Unchanged: 0/0
 14204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14205 ;;      Params:         0       0       0       0       0       0       0
 14206 ;;      Locals:         0       0       0       0       0       0       0
 14207 ;;      Temps:          1       0       0       0       0       0       0
 14208 ;;      Totals:         1       0       0       0       0       0       0
 14209 ;;Total ram usage:        1 bytes
 14210 ;; Hardware stack levels used:    1
 14211 ;; Hardware stack levels required when called:    7
 14212 ;; This function calls:
 14213 ;;		_vscp_sendEvent
 14214 ;; This function is called by:
 14215 ;;		_vscp_handleProtocolEvent
 14216 ;; This function uses a non-reentrant model
 14217 ;;
 14218                           
 14219                           	psect	text59
 14220  005004                     __ptext59:
 14221                           	opt stack 0
 14222  005004                     _vscp_newNodeOnline:
 14223                           	opt stack 21
 14224                           
 14225                           ; BSR set to: 0
 14226                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14227                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;incstack = 0
 14231                           ;incstack = 0
 14232  005004  C0BF  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14233  005008  0E0F               	movlw	15
 14234  00500A  1644               	andwf	??_vscp_newNodeOnline,f,c
 14235  00500C  0444               	decf	??_vscp_newNodeOnline,w,c
 14236  00500E  E10E               	bnz	l1090
 14237                           
 14238                           ; BSR set to: 0
 14239  005010  51BD               	movf	_vscp_nickname& (0+255),w,b
 14240  005012  EE20  F0C5         	lfsr	2,_vscp_imsg+6
 14241  005016  62DF               	cpfseq	indf2,c
 14242  005018  D009               	goto	l1090
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14246  00501A  0E80               	movlw	128
 14247  00501C  6FCD               	movwf	_vscp_omsg& (0+255),b
 14248                           
 14249                           ; BSR set to: 0
 14250                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14251  00501E  6BCE               	clrf	(_vscp_omsg+1)& (0+255),b
 14252                           
 14253                           ; BSR set to: 0
 14254                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14255  005020  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
 14256  005022  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
 14257                           
 14258                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14259  005024  0E03               	movlw	3
 14260  005026  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14264  005028  EC40  F028         	call	_vscp_sendEvent	;wreg free
 14265  00502C                     l1090:
 14266                           
 14267                           ; BSR set to: 0
 14268  00502C  0012               	return	
 14269  00502E                     __end_of_vscp_newNodeOnline:
 14270                           	opt stack 0
 14271                           tblptru	equ	0xFF8
 14272                           tblptrh	equ	0xFF7
 14273                           tblptrl	equ	0xFF6
 14274                           tablat	equ	0xFF5
 14275                           prodh	equ	0xFF4
 14276                           prodl	equ	0xFF3
 14277                           intcon	equ	0xFF2
 14278                           postinc0	equ	0xFEE
 14279                           wreg	equ	0xFE8
 14280                           indf1	equ	0xFE7
 14281                           postdec1	equ	0xFE5
 14282                           fsr1h	equ	0xFE2
 14283                           fsr1l	equ	0xFE1
 14284                           indf2	equ	0xFDF
 14285                           postinc2	equ	0xFDE
 14286                           postdec2	equ	0xFDD
 14287                           plusw2	equ	0xFDB
 14288                           fsr2h	equ	0xFDA
 14289                           fsr2l	equ	0xFD9
 14290                           status	equ	0xFD8
 14291                           
 14292 ;; *************** function _vscp_handleDropNickname *****************
 14293 ;; Defined at:
 14294 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14295 ;; Parameters:    Size  Location     Type
 14296 ;;		None
 14297 ;; Auto vars:     Size  Location     Type
 14298 ;;  bytes           1   25[COMRAM] unsigned char 
 14299 ;; Return value:  Size  Location     Type
 14300 ;;		None               void
 14301 ;; Registers used:
 14302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14303 ;; Tracked objects:
 14304 ;;		On entry : F/0
 14305 ;;		On exit  : F/0
 14306 ;;		Unchanged: 0/0
 14307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14308 ;;      Params:         0       0       0       0       0       0       0
 14309 ;;      Locals:         1       0       0       0       0       0       0
 14310 ;;      Temps:          0       0       0       0       0       0       0
 14311 ;;      Totals:         1       0       0       0       0       0       0
 14312 ;;Total ram usage:        1 bytes
 14313 ;; Hardware stack levels used:    1
 14314 ;; Hardware stack levels required when called:    5
 14315 ;; This function calls:
 14316 ;;		_vscp_init
 14317 ;;		_vscp_writeNicknamePermanent
 14318 ;; This function is called by:
 14319 ;;		_vscp_handleProtocolEvent
 14320 ;; This function uses a non-reentrant model
 14321 ;;
 14322                           
 14323                           	psect	text60
 14324  004F7E                     __ptext60:
 14325                           	opt stack 0
 14326  004F7E                     _vscp_handleDropNickname:
 14327                           	opt stack 23
 14328                           
 14329                           ; BSR set to: 0
 14330                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14331                           
 14332                           ; BSR set to: 0
 14333                           ;incstack = 0
 14334                           ;incstack = 0
 14335  004F7E  51BF               	movf	_vscp_imsg& (0+255),w,b
 14336  004F80  0B0F               	andlw	15
 14337  004F82  6E1A               	movwf	vscp_handleDropNickname@bytes,c
 14338                           
 14339                           ; BSR set to: 0
 14340                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14341  004F84  501A               	movf	vscp_handleDropNickname@bytes,w,c
 14342  004F86  E012               	bz	l1086
 14343                           
 14344                           ; BSR set to: 0
 14345  004F88  51BD               	movf	_vscp_nickname& (0+255),w,b
 14346  004F8A  EE20  F0C5         	lfsr	2,_vscp_imsg+6
 14347  004F8E  62DF               	cpfseq	indf2,c
 14348  004F90  D00D               	goto	l1086
 14349                           
 14350                           ; BSR set to: 0
 14351                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14352  004F92  041A               	decf	vscp_handleDropNickname@bytes,w,c
 14353  004F94  E005               	bz	l1085
 14354                           
 14355                           ; BSR set to: 0
 14356  004F96  0E01               	movlw	1
 14357  004F98  641A               	cpfsgt	vscp_handleDropNickname@bytes,c
 14358  004F9A  D008               	goto	l1086
 14359                           
 14360                           ; BSR set to: 0
 14361  004F9C  67C6               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14362  004F9E  D006               	goto	l1086
 14363  004FA0                     l1085:
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14367  004FA0  69BD               	setf	_vscp_nickname& (0+255),b
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14371  004FA2  0EFF               	movlw	255
 14372  004FA4  EC80  F029         	call	_vscp_writeNicknamePermanent
 14373                           
 14374                           ;vscp_firmware.c: 481: vscp_init();
 14375  004FA8  EC87  F026         	call	_vscp_init	;wreg free
 14376  004FAC                     l1086:
 14377                           
 14378                           ; BSR set to: 0
 14379  004FAC  0012               	return	
 14380  004FAE                     __end_of_vscp_handleDropNickname:
 14381                           	opt stack 0
 14382                           tblptru	equ	0xFF8
 14383                           tblptrh	equ	0xFF7
 14384                           tblptrl	equ	0xFF6
 14385                           tablat	equ	0xFF5
 14386                           prodh	equ	0xFF4
 14387                           prodl	equ	0xFF3
 14388                           intcon	equ	0xFF2
 14389                           postinc0	equ	0xFEE
 14390                           wreg	equ	0xFE8
 14391                           indf1	equ	0xFE7
 14392                           postdec1	equ	0xFE5
 14393                           fsr1h	equ	0xFE2
 14394                           fsr1l	equ	0xFE1
 14395                           indf2	equ	0xFDF
 14396                           postinc2	equ	0xFDE
 14397                           postdec2	equ	0xFDD
 14398                           plusw2	equ	0xFDB
 14399                           fsr2h	equ	0xFDA
 14400                           fsr2l	equ	0xFD9
 14401                           status	equ	0xFD8
 14402                           
 14403 ;; *************** function _vscp_init *****************
 14404 ;; Defined at:
 14405 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14406 ;; Parameters:    Size  Location     Type
 14407 ;;		None
 14408 ;; Auto vars:     Size  Location     Type
 14409 ;;		None
 14410 ;; Return value:  Size  Location     Type
 14411 ;;		None               void
 14412 ;; Registers used:
 14413 ;;		wreg, status,2, cstack
 14414 ;; Tracked objects:
 14415 ;;		On entry : 0/0
 14416 ;;		On exit  : F/0
 14417 ;;		Unchanged: 0/0
 14418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14419 ;;      Params:         0       0       0       0       0       0       0
 14420 ;;      Locals:         0       0       0       0       0       0       0
 14421 ;;      Temps:          0       0       0       0       0       0       0
 14422 ;;      Totals:         0       0       0       0       0       0       0
 14423 ;;Total ram usage:        0 bytes
 14424 ;; Hardware stack levels used:    1
 14425 ;; Hardware stack levels required when called:    4
 14426 ;; This function calls:
 14427 ;;		_vscp_readNicknamePermanent
 14428 ;; This function is called by:
 14429 ;;		_main
 14430 ;;		_vscp_handleDropNickname
 14431 ;;		_vscp_handleProtocolEvent
 14432 ;; This function uses a non-reentrant model
 14433 ;;
 14434                           
 14435                           	psect	text61
 14436  004D0E                     __ptext61:
 14437                           	opt stack 0
 14438  004D0E                     _vscp_init:
 14439                           	opt stack 23
 14440                           
 14441                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14442                           
 14443                           ; BSR set to: 0
 14444                           ;incstack = 0
 14445                           ;incstack = 0
 14446  004D0E  0E02               	movlw	2
 14447  004D10  6E4C               	movwf	_vscp_initledfunc,c
 14448                           
 14449                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14450  004D12  ECAF  F029         	call	_vscp_readNicknamePermanent	;wreg free
 14451  004D16  0100               	movlb	0	; () banked
 14452  004D18  6FBD               	movwf	_vscp_nickname& (0+255),b
 14453                           
 14454                           ; BSR set to: 0
 14455                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14456  004D1A  67BD               	tstfsz	_vscp_nickname& (0+255),b
 14457  004D1C  D001               	goto	l1027
 14458                           
 14459                           ; BSR set to: 0
 14460  004D1E  69BD               	setf	_vscp_nickname& (0+255),b
 14461  004D20                     l1027:
 14462                           
 14463                           ; BSR set to: 0
 14464                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14465  004D20  6BBF               	clrf	_vscp_imsg& (0+255),b
 14466                           
 14467                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14468  004D22  6BC0               	clrf	(_vscp_imsg+1)& (0+255),b
 14469                           
 14470                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14471  004D24  6BC1               	clrf	(_vscp_imsg+2)& (0+255),b
 14472  004D26  6BC2               	clrf	(_vscp_imsg+3)& (0+255),b
 14473                           
 14474                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14475  004D28  6BC3               	clrf	(_vscp_imsg+4)& (0+255),b
 14476                           
 14477                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14478  004D2A  6BCD               	clrf	_vscp_omsg& (0+255),b
 14479                           
 14480                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14481  004D2C  6BCE               	clrf	(_vscp_omsg+1)& (0+255),b
 14482                           
 14483                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14484  004D2E  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
 14485  004D30  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
 14486                           
 14487                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14488  004D32  6BD1               	clrf	(_vscp_omsg+4)& (0+255),b
 14489                           
 14490                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14491  004D34  6A4A               	clrf	_vscp_alarmstatus,c
 14492                           
 14493                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14494  004D36  6A4F               	clrf	_vscp_probe_address,c
 14495                           
 14496                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14497  004D38  6BBE               	clrf	_vscp_node_state& (0+255),b
 14498                           
 14499                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14500  004D3A  6A4E               	clrf	_vscp_node_substate,c
 14501                           
 14502                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14503  004D3C  6A50               	clrf	_vscp_probe_cnt,c
 14504                           
 14505                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14506  004D3E  6A46               	clrf	_vscp_page_select,c
 14507  004D40  6A47               	clrf	_vscp_page_select+1,c
 14508                           
 14509                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14510  004D42  0101               	movlb	1	; () banked
 14511  004D44  6B12               	clrf	_vscp_timer& (0+255),b	;volatile
 14512  004D46  6B13               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14513                           
 14514                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14515  004D48  6B10               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14516  004D4A  6B11               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14517                           
 14518                           ;vscp_firmware.c: 155: vscp_second = 0;
 14519  004D4C  6A51               	clrf	_vscp_second,c
 14520                           
 14521                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14522  004D4E  6A4D               	clrf	_vscp_minute,c
 14523                           
 14524                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14525  004D50  0100               	movlb	0	; () banked
 14526  004D52  6BBB               	clrf	_vscp_hour& (0+255),b
 14527                           
 14528                           ; BSR set to: 0
 14529  004D54  0012               	return	
 14530  004D56                     __end_of_vscp_init:
 14531                           	opt stack 0
 14532                           tblptru	equ	0xFF8
 14533                           tblptrh	equ	0xFF7
 14534                           tblptrl	equ	0xFF6
 14535                           tablat	equ	0xFF5
 14536                           prodh	equ	0xFF4
 14537                           prodl	equ	0xFF3
 14538                           intcon	equ	0xFF2
 14539                           postinc0	equ	0xFEE
 14540                           wreg	equ	0xFE8
 14541                           indf1	equ	0xFE7
 14542                           postdec1	equ	0xFE5
 14543                           fsr1h	equ	0xFE2
 14544                           fsr1l	equ	0xFE1
 14545                           indf2	equ	0xFDF
 14546                           postinc2	equ	0xFDE
 14547                           postdec2	equ	0xFDD
 14548                           plusw2	equ	0xFDB
 14549                           fsr2h	equ	0xFDA
 14550                           fsr2l	equ	0xFD9
 14551                           status	equ	0xFD8
 14552                           
 14553 ;; *************** function _vscp_readNicknamePermanent *****************
 14554 ;; Defined at:
 14555 ;;		line 2758 in file "../main.c"
 14556 ;; Parameters:    Size  Location     Type
 14557 ;;		None
 14558 ;; Auto vars:     Size  Location     Type
 14559 ;;		None
 14560 ;; Return value:  Size  Location     Type
 14561 ;;                  1    wreg      unsigned char 
 14562 ;; Registers used:
 14563 ;;		wreg, status,2, cstack
 14564 ;; Tracked objects:
 14565 ;;		On entry : 0/0
 14566 ;;		On exit  : 0/0
 14567 ;;		Unchanged: 0/0
 14568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14569 ;;      Params:         0       0       0       0       0       0       0
 14570 ;;      Locals:         0       0       0       0       0       0       0
 14571 ;;      Temps:          0       0       0       0       0       0       0
 14572 ;;      Totals:         0       0       0       0       0       0       0
 14573 ;;Total ram usage:        0 bytes
 14574 ;; Hardware stack levels used:    1
 14575 ;; Hardware stack levels required when called:    3
 14576 ;; This function calls:
 14577 ;;		_readEEPROM
 14578 ;; This function is called by:
 14579 ;;		_vscp_init
 14580 ;; This function uses a non-reentrant model
 14581 ;;
 14582                           
 14583                           	psect	text62
 14584  00535E                     __ptext62:
 14585                           	opt stack 0
 14586  00535E                     _vscp_readNicknamePermanent:
 14587                           	opt stack 23
 14588                           
 14589                           ;main.c: 2759: return readEEPROM( 0x01 );
 14590                           
 14591                           ; BSR set to: 0
 14592                           ;incstack = 0
 14593                           ;incstack = 0
 14594  00535E  6A17               	clrf	?_readEEPROM+1,c
 14595  005360  0E01               	movlw	1
 14596  005362  6E16               	movwf	?_readEEPROM,c
 14597  005364  EF64  F029         	goto	_readEEPROM	;wreg free
 14598  005368                     __end_of_vscp_readNicknamePermanent:
 14599                           	opt stack 0
 14600                           tblptru	equ	0xFF8
 14601                           tblptrh	equ	0xFF7
 14602                           tblptrl	equ	0xFF6
 14603                           tablat	equ	0xFF5
 14604                           prodh	equ	0xFF4
 14605                           prodl	equ	0xFF3
 14606                           intcon	equ	0xFF2
 14607                           postinc0	equ	0xFEE
 14608                           wreg	equ	0xFE8
 14609                           indf1	equ	0xFE7
 14610                           postdec1	equ	0xFE5
 14611                           fsr1h	equ	0xFE2
 14612                           fsr1l	equ	0xFE1
 14613                           indf2	equ	0xFDF
 14614                           postinc2	equ	0xFDE
 14615                           postdec2	equ	0xFDD
 14616                           plusw2	equ	0xFDB
 14617                           fsr2h	equ	0xFDA
 14618                           fsr2l	equ	0xFD9
 14619                           status	equ	0xFD8
 14620                           
 14621 ;; *************** function _readEEPROM *****************
 14622 ;; Defined at:
 14623 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 14624 ;; Parameters:    Size  Location     Type
 14625 ;;  address         2   21[COMRAM] unsigned short 
 14626 ;; Auto vars:     Size  Location     Type
 14627 ;;  data            1   24[COMRAM] unsigned char 
 14628 ;; Return value:  Size  Location     Type
 14629 ;;                  1    wreg      unsigned char 
 14630 ;; Registers used:
 14631 ;;		wreg, status,2
 14632 ;; Tracked objects:
 14633 ;;		On entry : 0/0
 14634 ;;		On exit  : 0/0
 14635 ;;		Unchanged: 0/0
 14636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14637 ;;      Params:         2       0       0       0       0       0       0
 14638 ;;      Locals:         2       0       0       0       0       0       0
 14639 ;;      Temps:          0       0       0       0       0       0       0
 14640 ;;      Totals:         4       0       0       0       0       0       0
 14641 ;;Total ram usage:        4 bytes
 14642 ;; Hardware stack levels used:    1
 14643 ;; Hardware stack levels required when called:    2
 14644 ;; This function calls:
 14645 ;;		Nothing
 14646 ;; This function is called by:
 14647 ;;		_doWork
 14648 ;;		_doOneSecondWork
 14649 ;;		_sendTempEvent
 14650 ;;		_getCalibrationValue
 14651 ;;		_writeCoeffs2Ram
 14652 ;;		_handle_sync
 14653 ;;		_vscp_readAppReg
 14654 ;;		_vscp_writeAppReg
 14655 ;;		_vscp_getGUID
 14656 ;;		_vscp_getUserID
 14657 ;;		_vscp_getManufacturerId
 14658 ;;		_vscp_getZone
 14659 ;;		_vscp_getSubzone
 14660 ;;		_vscp_readNicknamePermanent
 14661 ;;		_vscp_getSegmentCRC
 14662 ;; This function uses a non-reentrant model
 14663 ;;
 14664                           
 14665                           	psect	text63
 14666  0052C8                     __ptext63:
 14667                           	opt stack 0
 14668  0052C8                     _readEEPROM:
 14669                           	opt stack 25
 14670                           
 14671                           ;eeprom.c: 95: uint8_t data;
 14672                           ;eeprom.c: 100: EEADR = address & 0xff;
 14673                           
 14674                           ;incstack = 0
 14675                           ;incstack = 0
 14676  0052C8  C016  FFA9         	movff	readEEPROM@address,4009	;volatile
 14677                           
 14678                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 14679  0052CC  9EA6               	bcf	4006,7,c	;volatile
 14680                           
 14681                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 14682  0052CE  9CA6               	bcf	4006,6,c	;volatile
 14683                           
 14684                           ;eeprom.c: 103: EECON1bits.RD = 1;
 14685  0052D0  80A6               	bsf	4006,0,c	;volatile
 14686  0052D2  F000               	nop		;# 
 14687                           
 14688                           ;eeprom.c: 105: data = EEDATA;
 14689  0052D4  CFA8 F019          	movff	4008,readEEPROM@data	;volatile
 14690                           
 14691                           ;eeprom.c: 107: return data;
 14692  0052D8  5019               	movf	readEEPROM@data,w,c
 14693  0052DA  0012               	return	
 14694  0052DC                     __end_of_readEEPROM:
 14695                           	opt stack 0
 14696                           tblptru	equ	0xFF8
 14697                           tblptrh	equ	0xFF7
 14698                           tblptrl	equ	0xFF6
 14699                           tablat	equ	0xFF5
 14700                           prodh	equ	0xFF4
 14701                           prodl	equ	0xFF3
 14702                           intcon	equ	0xFF2
 14703                           postinc0	equ	0xFEE
 14704                           wreg	equ	0xFE8
 14705                           indf1	equ	0xFE7
 14706                           postdec1	equ	0xFE5
 14707                           fsr1h	equ	0xFE2
 14708                           fsr1l	equ	0xFE1
 14709                           indf2	equ	0xFDF
 14710                           postinc2	equ	0xFDE
 14711                           postdec2	equ	0xFDD
 14712                           plusw2	equ	0xFDB
 14713                           fsr2h	equ	0xFDA
 14714                           fsr2l	equ	0xFD9
 14715                           status	equ	0xFD8
 14716                           
 14717 ;; *************** function _vscp_handleSetNickname *****************
 14718 ;; Defined at:
 14719 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14720 ;; Parameters:    Size  Location     Type
 14721 ;;		None
 14722 ;; Auto vars:     Size  Location     Type
 14723 ;;		None
 14724 ;; Return value:  Size  Location     Type
 14725 ;;		None               void
 14726 ;; Registers used:
 14727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14728 ;; Tracked objects:
 14729 ;;		On entry : F/0
 14730 ;;		On exit  : 0/0
 14731 ;;		Unchanged: 0/0
 14732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14733 ;;      Params:         0       0       0       0       0       0       0
 14734 ;;      Locals:         0       0       0       0       0       0       0
 14735 ;;      Temps:          0       0       0       0       0       0       0
 14736 ;;      Totals:         0       0       0       0       0       0       0
 14737 ;;Total ram usage:        0 bytes
 14738 ;; Hardware stack levels used:    1
 14739 ;; Hardware stack levels required when called:    4
 14740 ;; This function calls:
 14741 ;;		_vscp_writeNicknamePermanent
 14742 ;;		_vscp_setSegmentCRC
 14743 ;; This function is called by:
 14744 ;;		_vscp_handleProtocolEvent
 14745 ;; This function uses a non-reentrant model
 14746 ;;
 14747                           
 14748                           	psect	text64
 14749  005118                     __ptext64:
 14750                           	opt stack 0
 14751  005118                     _vscp_handleSetNickname:
 14752                           	opt stack 24
 14753                           
 14754                           ; BSR set to: 0
 14755                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 14756                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14757                           
 14758                           ;incstack = 0
 14759                           ;incstack = 0
 14760  005118  51BF               	movf	_vscp_imsg& (0+255),w,b
 14761  00511A  0B0F               	andlw	15
 14762  00511C  0A02               	xorlw	2
 14763  00511E  E10D               	bnz	l1079
 14764                           
 14765                           ; BSR set to: 0
 14766  005120  51BD               	movf	_vscp_nickname& (0+255),w,b
 14767  005122  EE20  F0C5         	lfsr	2,_vscp_imsg+6
 14768  005126  62DF               	cpfseq	indf2,c
 14769  005128  D008               	goto	l1079
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 14773  00512A  C0C6  F0BD         	movff	_vscp_imsg+7,_vscp_nickname
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 14777  00512E  51BD               	movf	_vscp_nickname& (0+255),w,b
 14778  005130  EC80  F029         	call	_vscp_writeNicknamePermanent
 14779                           
 14780                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 14781  005134  0E40               	movlw	64
 14782  005136  EC77  F029         	call	_vscp_setSegmentCRC
 14783  00513A                     l1079:
 14784  00513A  0012               	return	
 14785  00513C                     __end_of_vscp_handleSetNickname:
 14786                           	opt stack 0
 14787                           tblptru	equ	0xFF8
 14788                           tblptrh	equ	0xFF7
 14789                           tblptrl	equ	0xFF6
 14790                           tablat	equ	0xFF5
 14791                           prodh	equ	0xFF4
 14792                           prodl	equ	0xFF3
 14793                           intcon	equ	0xFF2
 14794                           postinc0	equ	0xFEE
 14795                           wreg	equ	0xFE8
 14796                           indf1	equ	0xFE7
 14797                           postdec1	equ	0xFE5
 14798                           fsr1h	equ	0xFE2
 14799                           fsr1l	equ	0xFE1
 14800                           indf2	equ	0xFDF
 14801                           postinc2	equ	0xFDE
 14802                           postdec2	equ	0xFDD
 14803                           plusw2	equ	0xFDB
 14804                           fsr2h	equ	0xFDA
 14805                           fsr2l	equ	0xFD9
 14806                           status	equ	0xFD8
 14807                           
 14808 ;; *************** function _vscp_handleHeartbeat *****************
 14809 ;; Defined at:
 14810 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 14811 ;; Parameters:    Size  Location     Type
 14812 ;;		None
 14813 ;; Auto vars:     Size  Location     Type
 14814 ;;		None
 14815 ;; Return value:  Size  Location     Type
 14816 ;;		None               void
 14817 ;; Registers used:
 14818 ;;		wreg, status,2, status,0, cstack
 14819 ;; Tracked objects:
 14820 ;;		On entry : F/0
 14821 ;;		On exit  : 0/0
 14822 ;;		Unchanged: 0/0
 14823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14824 ;;      Params:         0       0       0       0       0       0       0
 14825 ;;      Locals:         0       0       0       0       0       0       0
 14826 ;;      Temps:          0       0       0       0       0       0       0
 14827 ;;      Totals:         0       0       0       0       0       0       0
 14828 ;;Total ram usage:        0 bytes
 14829 ;; Hardware stack levels used:    1
 14830 ;; Hardware stack levels required when called:    4
 14831 ;; This function calls:
 14832 ;;		_vscp_writeNicknamePermanent
 14833 ;;		_vscp_getSegmentCRC
 14834 ;;		_vscp_setSegmentCRC
 14835 ;; This function is called by:
 14836 ;;		_vscp_handleProtocolEvent
 14837 ;; This function uses a non-reentrant model
 14838 ;;
 14839                           
 14840                           	psect	text65
 14841  004E26                     __ptext65:
 14842                           	opt stack 0
 14843  004E26                     _vscp_handleHeartbeat:
 14844                           	opt stack 24
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 14848                           
 14849                           ;incstack = 0
 14850                           ;incstack = 0
 14851  004E26  ECB4  F029         	call	_vscp_getSegmentCRC	;wreg free
 14852  004E2A  0900               	iorlw	0
 14853  004E2C  E116               	bnz	l11066
 14854                           
 14855                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14856                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14857  004E2E  0100               	movlb	0	; () banked
 14858  004E30  51BF               	movf	_vscp_imsg& (0+255),w,b
 14859  004E32  0B0F               	andlw	15
 14860  004E34  0A05               	xorlw	5
 14861  004E36  E115               	bnz	l1075
 14862                           
 14863                           ; BSR set to: 0
 14864  004E38  ECB4  F029         	call	_vscp_getSegmentCRC	;wreg free
 14865  004E3C  0100               	movlb	0	; () banked
 14866  004E3E  19C5               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14867  004E40  E010               	bz	l1075
 14868                           
 14869                           ; BSR set to: 0
 14870                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14871  004E42  51C5               	movf	(_vscp_imsg+6)& (0+255),w,b
 14872  004E44  EC77  F029         	call	_vscp_setSegmentCRC
 14873                           
 14874                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 14875  004E48  0100               	movlb	0	; () banked
 14876  004E4A  69BD               	setf	_vscp_nickname& (0+255),b
 14877                           
 14878                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 14879  004E4C  0EFF               	movlw	255
 14880  004E4E  EC80  F029         	call	_vscp_writeNicknamePermanent
 14881                           
 14882                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 14883  004E52  0E01               	movlw	1
 14884  004E54  0100               	movlb	0	; () banked
 14885  004E56  6FBE               	movwf	_vscp_node_state& (0+255),b
 14886  004E58  D004               	goto	l1075
 14887  004E5A                     l11066:
 14888                           
 14889                           ;vscp_firmware.c: 411: else {
 14890                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14891  004E5A  0100               	movlb	0	; () banked
 14892  004E5C  51C5               	movf	(_vscp_imsg+6)& (0+255),w,b
 14893  004E5E  EC77  F029         	call	_vscp_setSegmentCRC
 14894  004E62                     l1075:
 14895  004E62  0012               	return	
 14896  004E64                     __end_of_vscp_handleHeartbeat:
 14897                           	opt stack 0
 14898                           tblptru	equ	0xFF8
 14899                           tblptrh	equ	0xFF7
 14900                           tblptrl	equ	0xFF6
 14901                           tablat	equ	0xFF5
 14902                           prodh	equ	0xFF4
 14903                           prodl	equ	0xFF3
 14904                           intcon	equ	0xFF2
 14905                           postinc0	equ	0xFEE
 14906                           wreg	equ	0xFE8
 14907                           indf1	equ	0xFE7
 14908                           postdec1	equ	0xFE5
 14909                           fsr1h	equ	0xFE2
 14910                           fsr1l	equ	0xFE1
 14911                           indf2	equ	0xFDF
 14912                           postinc2	equ	0xFDE
 14913                           postdec2	equ	0xFDD
 14914                           plusw2	equ	0xFDB
 14915                           fsr2h	equ	0xFDA
 14916                           fsr2l	equ	0xFD9
 14917                           status	equ	0xFD8
 14918                           
 14919 ;; *************** function _vscp_goBootloaderMode *****************
 14920 ;; Defined at:
 14921 ;;		line 2743 in file "../main.c"
 14922 ;; Parameters:    Size  Location     Type
 14923 ;;  algorithm       1    wreg     unsigned char 
 14924 ;; Auto vars:     Size  Location     Type
 14925 ;;  algorithm       1   16[COMRAM] unsigned char 
 14926 ;; Return value:  Size  Location     Type
 14927 ;;		None               void
 14928 ;; Registers used:
 14929 ;;		wreg, status,2, status,0, cstack
 14930 ;; Tracked objects:
 14931 ;;		On entry : F/0
 14932 ;;		On exit  : 0/0
 14933 ;;		Unchanged: 0/0
 14934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14935 ;;      Params:         0       0       0       0       0       0       0
 14936 ;;      Locals:         1       0       0       0       0       0       0
 14937 ;;      Temps:          0       0       0       0       0       0       0
 14938 ;;      Totals:         1       0       0       0       0       0       0
 14939 ;;Total ram usage:        1 bytes
 14940 ;; Hardware stack levels used:    1
 14941 ;; Hardware stack levels required when called:    3
 14942 ;; This function calls:
 14943 ;;		_writeEEPROM
 14944 ;; This function is called by:
 14945 ;;		_vscp_handleProtocolEvent
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           	psect	text66
 14950  00525C                     __ptext66:
 14951                           	opt stack 0
 14952  00525C                     _vscp_goBootloaderMode:
 14953                           	opt stack 25
 14954                           
 14955                           ;incstack = 0
 14956                           ;incstack = 0
 14957                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14958  00525C  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14959                           
 14960                           ; BSR set to: 0
 14961                           ;main.c: 2744: if ( 0x01 != algorithm ) return;
 14962  005260  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14963  005262  E107               	bnz	l590
 14964                           
 14965                           ; BSR set to: 0
 14966                           ;main.c: 2748: writeEEPROM(0x00, 0xff);
 14967  005264  6A0F               	clrf	?_writeEEPROM+1,c
 14968  005266  6A0E               	clrf	?_writeEEPROM,c
 14969  005268  0EFF               	movlw	255
 14970  00526A  6810               	setf	?_writeEEPROM+2,c
 14971  00526C  EC67  F028         	call	_writeEEPROM	;wreg free
 14972  005270  00FF               	reset		;# 
 14973  005272                     l590:
 14974  005272  0012               	return	
 14975  005274                     __end_of_vscp_goBootloaderMode:
 14976                           	opt stack 0
 14977                           tblptru	equ	0xFF8
 14978                           tblptrh	equ	0xFF7
 14979                           tblptrl	equ	0xFF6
 14980                           tablat	equ	0xFF5
 14981                           prodh	equ	0xFF4
 14982                           prodl	equ	0xFF3
 14983                           intcon	equ	0xFF2
 14984                           postinc0	equ	0xFEE
 14985                           wreg	equ	0xFE8
 14986                           indf1	equ	0xFE7
 14987                           postdec1	equ	0xFE5
 14988                           fsr1h	equ	0xFE2
 14989                           fsr1l	equ	0xFE1
 14990                           indf2	equ	0xFDF
 14991                           postinc2	equ	0xFDE
 14992                           postdec2	equ	0xFDD
 14993                           plusw2	equ	0xFDB
 14994                           fsr2h	equ	0xFDA
 14995                           fsr2l	equ	0xFD9
 14996                           status	equ	0xFD8
 14997                           
 14998 ;; *************** function _vscp_getMatrixInfo *****************
 14999 ;; Defined at:
 15000 ;;		line 2678 in file "../main.c"
 15001 ;; Parameters:    Size  Location     Type
 15002 ;;  pData           1    wreg     PTR unsigned char 
 15003 ;;		 -> vscp_omsg(13), 
 15004 ;; Auto vars:     Size  Location     Type
 15005 ;;  pData           1   13[COMRAM] PTR unsigned char 
 15006 ;;		 -> vscp_omsg(13), 
 15007 ;;  i               1   14[COMRAM] unsigned char 
 15008 ;; Return value:  Size  Location     Type
 15009 ;;		None               void
 15010 ;; Registers used:
 15011 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15012 ;; Tracked objects:
 15013 ;;		On entry : F/0
 15014 ;;		On exit  : F/0
 15015 ;;		Unchanged: F/0
 15016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15017 ;;      Params:         0       0       0       0       0       0       0
 15018 ;;      Locals:         2       0       0       0       0       0       0
 15019 ;;      Temps:          0       0       0       0       0       0       0
 15020 ;;      Totals:         2       0       0       0       0       0       0
 15021 ;;Total ram usage:        2 bytes
 15022 ;; Hardware stack levels used:    1
 15023 ;; Hardware stack levels required when called:    2
 15024 ;; This function calls:
 15025 ;;		Nothing
 15026 ;; This function is called by:
 15027 ;;		_vscp_handleProtocolEvent
 15028 ;; This function uses a non-reentrant model
 15029 ;;
 15030                           
 15031                           	psect	text67
 15032  0051FA                     __ptext67:
 15033                           	opt stack 0
 15034  0051FA                     _vscp_getMatrixInfo:
 15035                           	opt stack 26
 15036                           
 15037                           ;incstack = 0
 15038                           ;incstack = 0
 15039                           ;vscp_getMatrixInfo@pData stored from wreg
 15040  0051FA  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 15041                           
 15042                           ; BSR set to: 0
 15043                           ;main.c: 2679: uint8_t i;
 15044                           ;main.c: 2683: for (i = 0; i < 8; i++) {
 15045  0051FE  6A0F               	clrf	vscp_getMatrixInfo@i,c
 15046  005200                     l8026:
 15047                           
 15048                           ; BSR set to: 0
 15049                           ;main.c: 2684: pData[ i ] = 0;
 15050  005200  500E               	movf	vscp_getMatrixInfo@pData,w,c
 15051  005202  240F               	addwf	vscp_getMatrixInfo@i,w,c
 15052  005204  6ED9               	movwf	fsr2l,c
 15053  005206  6ADA               	clrf	fsr2h,c
 15054  005208  6ADF               	clrf	indf2,c
 15055                           
 15056                           ; BSR set to: 0
 15057  00520A  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 15058                           
 15059                           ; BSR set to: 0
 15060  00520C  0E07               	movlw	7
 15061  00520E  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 15062  005210  D7F7               	goto	l8026
 15063                           
 15064                           ; BSR set to: 0
 15065  005212  0C07               	retlw	7
 15066  005214                     __end_of_vscp_getMatrixInfo:
 15067                           	opt stack 0
 15068                           tblptru	equ	0xFF8
 15069                           tblptrh	equ	0xFF7
 15070                           tblptrl	equ	0xFF6
 15071                           tablat	equ	0xFF5
 15072                           prodh	equ	0xFF4
 15073                           prodl	equ	0xFF3
 15074                           intcon	equ	0xFF2
 15075                           postinc0	equ	0xFEE
 15076                           wreg	equ	0xFE8
 15077                           indf1	equ	0xFE7
 15078                           postdec1	equ	0xFE5
 15079                           fsr1h	equ	0xFE2
 15080                           fsr1l	equ	0xFE1
 15081                           indf2	equ	0xFDF
 15082                           postinc2	equ	0xFDE
 15083                           postdec2	equ	0xFDD
 15084                           plusw2	equ	0xFDB
 15085                           fsr2h	equ	0xFDA
 15086                           fsr2l	equ	0xFD9
 15087                           status	equ	0xFD8
 15088                           
 15089 ;; *************** function _vscp_handleProbeState *****************
 15090 ;; Defined at:
 15091 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 15092 ;; Parameters:    Size  Location     Type
 15093 ;;		None
 15094 ;; Auto vars:     Size  Location     Type
 15095 ;;		None
 15096 ;; Return value:  Size  Location     Type
 15097 ;;		None               void
 15098 ;; Registers used:
 15099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15100 ;; Tracked objects:
 15101 ;;		On entry : 0/0
 15102 ;;		On exit  : F/0
 15103 ;;		Unchanged: 0/0
 15104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15105 ;;      Params:         0       0       0       0       0       0       0
 15106 ;;      Locals:         0       0       0       0       0       0       0
 15107 ;;      Temps:          0       0       0       0       0       0       0
 15108 ;;      Totals:         0       0       0       0       0       0       0
 15109 ;;Total ram usage:        0 bytes
 15110 ;; Hardware stack levels used:    1
 15111 ;; Hardware stack levels required when called:    8
 15112 ;; This function calls:
 15113 ;;		_vscp_goActiveState
 15114 ;;		_vscp_sendEvent
 15115 ;;		_vscp_writeNicknamePermanent
 15116 ;;		_vscp_setSegmentCRC
 15117 ;; This function is called by:
 15118 ;;		_main
 15119 ;; This function uses a non-reentrant model
 15120 ;;
 15121                           
 15122                           	psect	text68
 15123  00400A                     __ptext68:
 15124                           	opt stack 0
 15125  00400A                     _vscp_handleProbeState:
 15126                           	opt stack 21
 15127                           
 15128                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 15129                           
 15130                           ; BSR set to: 0
 15131                           ;incstack = 0
 15132                           ;incstack = 0
 15133  00400A  D058               	goto	l9590
 15134  00400C                     l9520:
 15135                           
 15136                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 15137  00400C  284F               	incf	_vscp_probe_address,w,c
 15138  00400E  E012               	bz	l9536
 15139                           
 15140                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 15141  004010  0E81               	movlw	129
 15142  004012  0100               	movlb	0	; () banked
 15143  004014  6FCD               	movwf	_vscp_omsg& (0+255),b
 15144                           
 15145                           ; BSR set to: 0
 15146                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 15147  004016  6BCE               	clrf	(_vscp_omsg+1)& (0+255),b
 15148                           
 15149                           ; BSR set to: 0
 15150                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 15151  004018  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
 15152  00401A  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
 15153                           
 15154                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 15155  00401C  0E02               	movlw	2
 15156  00401E  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
 15157                           
 15158                           ; BSR set to: 0
 15159                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15160  004020  C04F  F0D2         	movff	_vscp_probe_address,_vscp_omsg+5
 15161                           
 15162                           ; BSR set to: 0
 15163                           ;vscp_firmware.c: 216: vscp_sendEvent();
 15164  004024  EC40  F028         	call	_vscp_sendEvent	;wreg free
 15165                           
 15166                           ; BSR set to: 0
 15167                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 15168  004028  0E01               	movlw	1
 15169  00402A  6E4E               	movwf	_vscp_node_substate,c
 15170  00402C                     l9534:
 15171                           
 15172                           ; BSR set to: 0
 15173                           ;vscp_firmware.c: 219: vscp_timer = 0;
 15174  00402C  0101               	movlb	1	; () banked
 15175  00402E  6B12               	clrf	_vscp_timer& (0+255),b	;volatile
 15176  004030  6B13               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15177                           
 15178                           ;vscp_firmware.c: 221: }
 15179  004032  D04A               	goto	l1042
 15180  004034                     l9536:
 15181                           
 15182                           ;vscp_firmware.c: 222: else {
 15183                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 15184  004034  0E04               	movlw	4
 15185  004036  0100               	movlb	0	; () banked
 15186  004038  6FBE               	movwf	_vscp_node_state& (0+255),b
 15187                           
 15188                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 15189  00403A  0E81               	movlw	129
 15190  00403C  6FCD               	movwf	_vscp_omsg& (0+255),b
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 15194  00403E  69D2               	setf	(_vscp_omsg+5)& (0+255),b
 15195                           
 15196                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 15197  004040  0E07               	movlw	7
 15198  004042  6FCE               	movwf	(_vscp_omsg+1)& (0+255),b
 15199                           
 15200                           ; BSR set to: 0
 15201                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 15202  004044  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
 15203  004046  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
 15204                           
 15205                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 15206  004048  0E03               	movlw	3
 15207  00404A  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
 15208                           
 15209                           ; BSR set to: 0
 15210                           ;vscp_firmware.c: 235: vscp_sendEvent();
 15211  00404C  EC40  F028         	call	_vscp_sendEvent	;wreg free
 15212  004050  D03B               	goto	l1042
 15213  004052                     l1043:
 15214                           
 15215                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 15216  004052  0100               	movlb	0	; () banked
 15217  004054  AFBF               	btfss	_vscp_imsg& (0+255),7,b
 15218  004056  D00F               	goto	l9560
 15219                           
 15220                           ; BSR set to: 0
 15221                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 15222                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 15223  004058  51C2               	movf	(_vscp_imsg+3)& (0+255),w,b
 15224  00405A  11C1               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15225  00405C  E135               	bnz	l1042
 15226                           
 15227                           ; BSR set to: 0
 15228  00405E  51C3               	movf	(_vscp_imsg+4)& (0+255),w,b
 15229  004060  0A03               	xorlw	3
 15230  004062  E132               	bnz	l1042
 15231                           
 15232                           ; BSR set to: 0
 15233                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 15234  004064  664F               	tstfsz	_vscp_probe_address,c
 15235  004066  D003               	goto	l9554
 15236                           
 15237                           ; BSR set to: 0
 15238                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 15239  004068  0E02               	movlw	2
 15240  00406A  6FBE               	movwf	_vscp_node_state& (0+255),b
 15241  00406C  D7DF               	goto	l9534
 15242  00406E                     l9554:
 15243                           
 15244                           ; BSR set to: 0
 15245                           ;vscp_firmware.c: 257: else {
 15246                           ;vscp_firmware.c: 260: vscp_probe_address++;
 15247  00406E  2A4F               	incf	_vscp_probe_address,f,c
 15248                           
 15249                           ; BSR set to: 0
 15250                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 15251  004070  6A4E               	clrf	_vscp_node_substate,c
 15252  004072                     l9558:
 15253                           
 15254                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 15255  004072  6A50               	clrf	_vscp_probe_cnt,c
 15256  004074  D029               	goto	l1042
 15257  004076                     l9560:
 15258                           
 15259                           ; BSR set to: 0
 15260                           ;vscp_firmware.c: 267: else {
 15261                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 15262  004076  0EE9               	movlw	233
 15263  004078  0101               	movlb	1	; () banked
 15264  00407A  5D12               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15265  00407C  0E03               	movlw	3
 15266  00407E  5913               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15267  004080  E323               	bnc	l1042
 15268                           
 15269                           ; BSR set to: 1
 15270                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15271  004082  2A50               	incf	_vscp_probe_cnt,f,c
 15272                           
 15273                           ; BSR set to: 1
 15274                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15275  004084  0E02               	movlw	2
 15276  004086  6450               	cpfsgt	_vscp_probe_cnt,c
 15277  004088  D017               	goto	l1050
 15278                           
 15279                           ; BSR set to: 1
 15280                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15281  00408A  664F               	tstfsz	_vscp_probe_address,c
 15282  00408C  D005               	goto	l1051
 15283                           
 15284                           ; BSR set to: 1
 15285                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15286  00408E  2A4F               	incf	_vscp_probe_address,f,c
 15287                           
 15288                           ; BSR set to: 1
 15289                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15290  004090  6A4E               	clrf	_vscp_node_substate,c
 15291                           
 15292                           ; BSR set to: 1
 15293                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15294  004092  6B12               	clrf	_vscp_timer& (0+255),b	;volatile
 15295  004094  6B13               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15296  004096  D7ED               	goto	l9558
 15297  004098                     l1051:
 15298                           
 15299                           ; BSR set to: 1
 15300                           ;vscp_firmware.c: 285: else {
 15301                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15302  004098  C04F  F0BD         	movff	_vscp_probe_address,_vscp_nickname
 15303                           
 15304                           ; BSR set to: 1
 15305                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15306  00409C  0E03               	movlw	3
 15307  00409E  0100               	movlb	0	; () banked
 15308  0040A0  6FBE               	movwf	_vscp_node_state& (0+255),b
 15309                           
 15310                           ; BSR set to: 0
 15311                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15312  0040A2  6A4E               	clrf	_vscp_node_substate,c
 15313                           
 15314                           ; BSR set to: 0
 15315                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15316  0040A4  51BD               	movf	_vscp_nickname& (0+255),w,b
 15317  0040A6  EC80  F029         	call	_vscp_writeNicknamePermanent
 15318                           
 15319                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15320  0040AA  0E40               	movlw	64
 15321  0040AC  EC77  F029         	call	_vscp_setSegmentCRC
 15322                           
 15323                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15324  0040B0  6A50               	clrf	_vscp_probe_cnt,c
 15325                           
 15326                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15327  0040B2  ECD2  F028         	call	_vscp_goActiveState	;wreg free
 15328  0040B6  D008               	goto	l1042
 15329  0040B8                     l1050:
 15330                           
 15331                           ;vscp_firmware.c: 300: else {
 15332                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15333  0040B8  6A4E               	clrf	_vscp_node_substate,c
 15334  0040BA  D006               	goto	l1042
 15335  0040BC                     l9590:
 15336  0040BC  504E               	movf	_vscp_node_substate,w,c
 15337                           
 15338                           ; Switch size 1, requested type "space"
 15339                           ; Number of cases is 3, Range of values is 0 to 2
 15340                           ; switch strategies available:
 15341                           ; Name         Instructions Cycles
 15342                           ; simple_byte           10     6 (average)
 15343                           ;	Chosen strategy is simple_byte
 15344  0040BE  E0A6               	bz	l9520
 15345  0040C0  0A01               	xorlw	1	; case 1
 15346  0040C2  E0C7               	bz	l1043
 15347  0040C4  0A03               	xorlw	3	; case 2
 15348  0040C6  E1F8               	bnz	l1050
 15349  0040C8                     l1042:
 15350                           
 15351                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15352  0040C8  0100               	movlb	0	; () banked
 15353  0040CA  6BBF               	clrf	_vscp_imsg& (0+255),b
 15354                           
 15355                           ; BSR set to: 0
 15356  0040CC  0012               	return	
 15357  0040CE                     __end_of_vscp_handleProbeState:
 15358                           	opt stack 0
 15359                           tblptru	equ	0xFF8
 15360                           tblptrh	equ	0xFF7
 15361                           tblptrl	equ	0xFF6
 15362                           tablat	equ	0xFF5
 15363                           prodh	equ	0xFF4
 15364                           prodl	equ	0xFF3
 15365                           intcon	equ	0xFF2
 15366                           postinc0	equ	0xFEE
 15367                           wreg	equ	0xFE8
 15368                           indf1	equ	0xFE7
 15369                           postdec1	equ	0xFE5
 15370                           fsr1h	equ	0xFE2
 15371                           fsr1l	equ	0xFE1
 15372                           indf2	equ	0xFDF
 15373                           postinc2	equ	0xFDE
 15374                           postdec2	equ	0xFDD
 15375                           plusw2	equ	0xFDB
 15376                           fsr2h	equ	0xFDA
 15377                           fsr2l	equ	0xFD9
 15378                           status	equ	0xFD8
 15379                           
 15380 ;; *************** function _vscp_goActiveState *****************
 15381 ;; Defined at:
 15382 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15383 ;; Parameters:    Size  Location     Type
 15384 ;;		None
 15385 ;; Auto vars:     Size  Location     Type
 15386 ;;		None
 15387 ;; Return value:  Size  Location     Type
 15388 ;;		None               void
 15389 ;; Registers used:
 15390 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15391 ;; Tracked objects:
 15392 ;;		On entry : 0/0
 15393 ;;		On exit  : F/0
 15394 ;;		Unchanged: 0/0
 15395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15396 ;;      Params:         0       0       0       0       0       0       0
 15397 ;;      Locals:         0       0       0       0       0       0       0
 15398 ;;      Temps:          0       0       0       0       0       0       0
 15399 ;;      Totals:         0       0       0       0       0       0       0
 15400 ;;Total ram usage:        0 bytes
 15401 ;; Hardware stack levels used:    1
 15402 ;; Hardware stack levels required when called:    7
 15403 ;; This function calls:
 15404 ;;		_vscp_sendEvent
 15405 ;; This function is called by:
 15406 ;;		_main
 15407 ;;		_vscp_handleProbeState
 15408 ;; This function uses a non-reentrant model
 15409 ;;
 15410                           
 15411                           	psect	text69
 15412  0051A4                     __ptext69:
 15413                           	opt stack 0
 15414  0051A4                     _vscp_goActiveState:
 15415                           	opt stack 21
 15416                           
 15417                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15418                           
 15419                           ; BSR set to: 0
 15420                           ;incstack = 0
 15421                           ;incstack = 0
 15422  0051A4  0E81               	movlw	129
 15423  0051A6  0100               	movlb	0	; () banked
 15424  0051A8  6FCD               	movwf	_vscp_omsg& (0+255),b
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15428  0051AA  6BCE               	clrf	(_vscp_omsg+1)& (0+255),b
 15429                           
 15430                           ; BSR set to: 0
 15431                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15432  0051AC  6BCF               	clrf	(_vscp_omsg+2)& (0+255),b
 15433  0051AE  6BD0               	clrf	(_vscp_omsg+3)& (0+255),b
 15434                           
 15435                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15436  0051B0  0E02               	movlw	2
 15437  0051B2  6FD1               	movwf	(_vscp_omsg+4)& (0+255),b
 15438                           
 15439                           ; BSR set to: 0
 15440                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15441  0051B4  C0BD  F0D2         	movff	_vscp_nickname,_vscp_omsg+5
 15442                           
 15443                           ; BSR set to: 0
 15444                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15445  0051B8  EC40  F028         	call	_vscp_sendEvent	;wreg free
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15449  0051BC  0E01               	movlw	1
 15450  0051BE  6E4C               	movwf	_vscp_initledfunc,c
 15451                           
 15452                           ; BSR set to: 0
 15453  0051C0  0C01               	retlw	1
 15454  0051C2                     __end_of_vscp_goActiveState:
 15455                           	opt stack 0
 15456                           tblptru	equ	0xFF8
 15457                           tblptrh	equ	0xFF7
 15458                           tblptrl	equ	0xFF6
 15459                           tablat	equ	0xFF5
 15460                           prodh	equ	0xFF4
 15461                           prodl	equ	0xFF3
 15462                           intcon	equ	0xFF2
 15463                           postinc0	equ	0xFEE
 15464                           wreg	equ	0xFE8
 15465                           indf1	equ	0xFE7
 15466                           postdec1	equ	0xFE5
 15467                           fsr1h	equ	0xFE2
 15468                           fsr1l	equ	0xFE1
 15469                           indf2	equ	0xFDF
 15470                           postinc2	equ	0xFDE
 15471                           postdec2	equ	0xFDD
 15472                           plusw2	equ	0xFDB
 15473                           fsr2h	equ	0xFDA
 15474                           fsr2l	equ	0xFD9
 15475                           status	equ	0xFD8
 15476                           
 15477 ;; *************** function _vscp_sendEvent *****************
 15478 ;; Defined at:
 15479 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15480 ;; Parameters:    Size  Location     Type
 15481 ;;		None
 15482 ;; Auto vars:     Size  Location     Type
 15483 ;;  rv              1   66[COMRAM] unsigned char 
 15484 ;; Return value:  Size  Location     Type
 15485 ;;                  1    wreg      unsigned char 
 15486 ;; Registers used:
 15487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15488 ;; Tracked objects:
 15489 ;;		On entry : F/0
 15490 ;;		On exit  : F/0
 15491 ;;		Unchanged: 0/0
 15492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15493 ;;      Params:         0       0       0       0       0       0       0
 15494 ;;      Locals:         1       0       0       0       0       0       0
 15495 ;;      Temps:          0       0       0       0       0       0       0
 15496 ;;      Totals:         1       0       0       0       0       0       0
 15497 ;;Total ram usage:        1 bytes
 15498 ;; Hardware stack levels used:    1
 15499 ;; Hardware stack levels required when called:    6
 15500 ;; This function calls:
 15501 ;;		_sendVSCPFrame
 15502 ;; This function is called by:
 15503 ;;		_doOneSecondWork
 15504 ;;		_sendTempEvent
 15505 ;;		_vscp_handleProbeState
 15506 ;;		_vscp_goActiveState
 15507 ;;		_vscp_sendHeartBeat
 15508 ;;		_vscp_newNodeOnline
 15509 ;;		_vscp_handleProtocolEvent
 15510 ;; This function uses a non-reentrant model
 15511 ;;
 15512                           
 15513                           	psect	text70
 15514  005080                     __ptext70:
 15515                           	opt stack 0
 15516  005080                     _vscp_sendEvent:
 15517                           	opt stack 21
 15518                           
 15519                           ; BSR set to: 0
 15520                           ;vscp_firmware.c: 1297: vscp_errorcnt++;
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;incstack = 0
 15524                           ;incstack = 0
 15525  005080  C0CF  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15526  005084  C0D0  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15527  005088  C0D1  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15528  00508C  C0BD  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15529  005090  C0CE  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15530  005094  51CD               	movf	_vscp_omsg& (0+255),w,b
 15531  005096  0B0F               	andlw	15
 15532  005098  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15533  00509A  0ED2               	movlw	low (_vscp_omsg+5)
 15534  00509C  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15535  00509E  EC7D  F021         	call	_sendVSCPFrame	;wreg free
 15536  0050A2  6E43               	movwf	vscp_sendEvent@rv,c
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;vscp_firmware.c: 1298: }
 15540                           ;vscp_firmware.c: 1300: return rv;
 15541  0050A4  5043               	movf	vscp_sendEvent@rv,w,c
 15542                           
 15543                           ; BSR set to: 0
 15544  0050A6  0012               	return	
 15545  0050A8                     __end_of_vscp_sendEvent:
 15546                           	opt stack 0
 15547                           tblptru	equ	0xFF8
 15548                           tblptrh	equ	0xFF7
 15549                           tblptrl	equ	0xFF6
 15550                           tablat	equ	0xFF5
 15551                           prodh	equ	0xFF4
 15552                           prodl	equ	0xFF3
 15553                           intcon	equ	0xFF2
 15554                           postinc0	equ	0xFEE
 15555                           wreg	equ	0xFE8
 15556                           indf1	equ	0xFE7
 15557                           postdec1	equ	0xFE5
 15558                           fsr1h	equ	0xFE2
 15559                           fsr1l	equ	0xFE1
 15560                           indf2	equ	0xFDF
 15561                           postinc2	equ	0xFDE
 15562                           postdec2	equ	0xFDD
 15563                           plusw2	equ	0xFDB
 15564                           fsr2h	equ	0xFDA
 15565                           fsr2l	equ	0xFD9
 15566                           status	equ	0xFD8
 15567                           
 15568 ;; *************** function _sendVSCPFrame *****************
 15569 ;; Defined at:
 15570 ;;		line 2847 in file "../main.c"
 15571 ;; Parameters:    Size  Location     Type
 15572 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15573 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15574 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15575 ;;  priority        1    4[BANK0 ] unsigned char 
 15576 ;;  size            1    5[BANK0 ] unsigned char 
 15577 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15578 ;;		 -> vscp_omsg(13), 
 15579 ;; Auto vars:     Size  Location     Type
 15580 ;;  id              4   27[BANK0 ] unsigned long 
 15581 ;; Return value:  Size  Location     Type
 15582 ;;                  1    wreg      unsigned char 
 15583 ;; Registers used:
 15584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15585 ;; Tracked objects:
 15586 ;;		On entry : F/0
 15587 ;;		On exit  : F/0
 15588 ;;		Unchanged: 0/0
 15589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15590 ;;      Params:         0       7       0       0       0       0       0
 15591 ;;      Locals:         0       4       0       0       0       0       0
 15592 ;;      Temps:          0      20       0       0       0       0       0
 15593 ;;      Totals:         0      31       0       0       0       0       0
 15594 ;;Total ram usage:       31 bytes
 15595 ;; Hardware stack levels used:    1
 15596 ;; Hardware stack levels required when called:    5
 15597 ;; This function calls:
 15598 ;;		_sendCANFrame
 15599 ;; This function is called by:
 15600 ;;		_vscp_sendEvent
 15601 ;; This function uses a non-reentrant model
 15602 ;;
 15603                           
 15604                           	psect	text71
 15605  0042FA                     __ptext71:
 15606                           	opt stack 0
 15607  0042FA                     _sendVSCPFrame:
 15608                           	opt stack 21
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;main.c: 2848: uint32_t id = ((uint32_t) priority << 26) |
 15612                           ;main.c: 2849: ((uint32_t) vscpclass << 16) |
 15613                           ;main.c: 2850: ((uint32_t) vscptype << 8) |
 15614                           ;main.c: 2851: nodeid;
 15615                           
 15616                           ; BSR set to: 0
 15617                           ;incstack = 0
 15618                           ;incstack = 0
 15619  0042FA  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15620  0042FE  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15621  004300  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15622  004302  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15623  004304  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15624  004308  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15625  00430C  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15626  004310  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15627  004312  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15628  004314  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15629  004316  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15630  004318  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15631  00431A  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15632  00431C  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15633  00431E  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15634  004322  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15635  004326  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15636  004328  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15637  00432A  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15638  00432E  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15639  004330  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15640  004332  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15641  004334  0E1A               	movlw	26
 15642  004336                     u8915:
 15643  004336  90D8               	bcf	status,0,c
 15644  004338  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15645  00433A  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15646  00433C  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15647  00433E  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15648  004340  2EE8               	decfsz	wreg,f,c
 15649  004342  D7F9               	goto	u8915
 15650  004344  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15651  004346  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15652  004348  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15653  00434A  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15654  00434C  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15655  00434E  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15656  004350  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15657  004352  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15658  004354  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15659  004356  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15660  004358  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15661  00435A  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15662  00435C  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15663  00435E  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15664  004360  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15665  004362  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15666  004364  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15667  004366  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15668  004368  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15669  00436A  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15670  00436C  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15671  00436E  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15672  004370  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15673  004372  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15674  004374  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15675  004376  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15676  004378  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15677  00437A  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15678  00437C  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15679  00437E  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15680  004380  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15681  004382  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15682  004384  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15683                           
 15684                           ; BSR set to: 0
 15685                           ;main.c: 2855: vscp_errorcnt++;
 15686  004386  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15687  00438A  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15688  00438E  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15689  004392  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15690  004396  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15691  00439A  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15692  00439E  ECAB  F026         	call	_sendCANFrame	;wreg free
 15693  0043A2  0900               	iorlw	0
 15694                           
 15695                           ; BSR set to: 0
 15696                           ;main.c: 2856: return 0;
 15697  0043A4  0E00               	movlw	0
 15698  0043A6  A4D8               	btfss	status,2,c
 15699                           
 15700                           ; BSR set to: 0
 15701                           ;main.c: 2857: }
 15702                           ;main.c: 2859: return 1;
 15703  0043A8  0E01               	movlw	1
 15704                           
 15705                           ; BSR set to: 0
 15706  0043AA  0012               	return	
 15707  0043AC                     __end_of_sendVSCPFrame:
 15708                           	opt stack 0
 15709                           tblptru	equ	0xFF8
 15710                           tblptrh	equ	0xFF7
 15711                           tblptrl	equ	0xFF6
 15712                           tablat	equ	0xFF5
 15713                           prodh	equ	0xFF4
 15714                           prodl	equ	0xFF3
 15715                           intcon	equ	0xFF2
 15716                           postinc0	equ	0xFEE
 15717                           wreg	equ	0xFE8
 15718                           indf1	equ	0xFE7
 15719                           postdec1	equ	0xFE5
 15720                           fsr1h	equ	0xFE2
 15721                           fsr1l	equ	0xFE1
 15722                           indf2	equ	0xFDF
 15723                           postinc2	equ	0xFDE
 15724                           postdec2	equ	0xFDD
 15725                           plusw2	equ	0xFDB
 15726                           fsr2h	equ	0xFDA
 15727                           fsr2l	equ	0xFD9
 15728                           status	equ	0xFD8
 15729                           
 15730 ;; *************** function _sendCANFrame *****************
 15731 ;; Defined at:
 15732 ;;		line 2894 in file "../main.c"
 15733 ;; Parameters:    Size  Location     Type
 15734 ;;  id              4   59[COMRAM] unsigned long 
 15735 ;;  dlc             1   63[COMRAM] unsigned char 
 15736 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15737 ;;		 -> vscp_omsg(13), 
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;  rv              1   65[COMRAM] unsigned char 
 15740 ;; Return value:  Size  Location     Type
 15741 ;;                  1    wreg      unsigned char 
 15742 ;; Registers used:
 15743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15744 ;; Tracked objects:
 15745 ;;		On entry : F/0
 15746 ;;		On exit  : F/0
 15747 ;;		Unchanged: 0/0
 15748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15749 ;;      Params:         6       0       0       0       0       0       0
 15750 ;;      Locals:         1       0       0       0       0       0       0
 15751 ;;      Temps:          0       0       0       0       0       0       0
 15752 ;;      Totals:         7       0       0       0       0       0       0
 15753 ;;Total ram usage:        7 bytes
 15754 ;; Hardware stack levels used:    1
 15755 ;; Hardware stack levels required when called:    4
 15756 ;; This function calls:
 15757 ;;		_ECANSendMessage
 15758 ;; This function is called by:
 15759 ;;		_sendVSCPFrame
 15760 ;; This function uses a non-reentrant model
 15761 ;;
 15762                           
 15763                           	psect	text72
 15764  004D56                     __ptext72:
 15765                           	opt stack 0
 15766  004D56                     _sendCANFrame:
 15767                           	opt stack 21
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;main.c: 2895: uint8_t rv = 0;
 15771                           
 15772                           ; BSR set to: 0
 15773                           ;incstack = 0
 15774                           ;incstack = 0
 15775  004D56  6A42               	clrf	sendCANFrame@rv,c
 15776                           
 15777                           ;main.c: 2897: sendTimer = 0;
 15778  004D58  0101               	movlb	1	; () banked
 15779  004D5A  6B0E               	clrf	_sendTimer& (0+255),b	;volatile
 15780  004D5C  6B0F               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 15781                           
 15782                           ;main.c: 2898: while ( sendTimer < 1000 ) {
 15783  004D5E  D015               	goto	l10938
 15784  004D60                     l10934:
 15785                           
 15786                           ; BSR set to: 1
 15787                           ;main.c: 2899: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15788  004D60  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15789  004D64  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15790  004D68  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15791  004D6C  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15792  004D70  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15793  004D74  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15794  004D78  0E20               	movlw	32
 15795  004D7A  6E1E               	movwf	?_ECANSendMessage+6,c
 15796  004D7C  EC0B  F01B         	call	_ECANSendMessage	;wreg free
 15797  004D80  0900               	iorlw	0
 15798  004D82  E003               	bz	l10938
 15799                           
 15800                           ;main.c: 2900: rv = 1;
 15801  004D84  0E01               	movlw	1
 15802  004D86  6E42               	movwf	sendCANFrame@rv,c
 15803                           
 15804                           ;main.c: 2901: break;
 15805  004D88  D006               	goto	l631
 15806  004D8A                     l10938:
 15807  004D8A  0EE8               	movlw	232
 15808  004D8C  0101               	movlb	1	; () banked
 15809  004D8E  5D0E               	subwf	_sendTimer& (0+255),w,b	;volatile
 15810  004D90  0E03               	movlw	3
 15811  004D92  590F               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 15812  004D94  E3E5               	bnc	l10934
 15813  004D96                     l631:
 15814                           
 15815                           ;main.c: 2902: }
 15816                           ;main.c: 2903: }
 15817                           ;main.c: 2905: vscp_omsg.flags = 0;
 15818  004D96  0100               	movlb	0	; () banked
 15819  004D98  6BCD               	clrf	_vscp_omsg& (0+255),b
 15820                           
 15821                           ; BSR set to: 0
 15822                           ;main.c: 2907: return rv;
 15823  004D9A  5042               	movf	sendCANFrame@rv,w,c
 15824                           
 15825                           ; BSR set to: 0
 15826  004D9C  0012               	return	
 15827  004D9E                     __end_of_sendCANFrame:
 15828                           	opt stack 0
 15829                           tblptru	equ	0xFF8
 15830                           tblptrh	equ	0xFF7
 15831                           tblptrl	equ	0xFF6
 15832                           tablat	equ	0xFF5
 15833                           prodh	equ	0xFF4
 15834                           prodl	equ	0xFF3
 15835                           intcon	equ	0xFF2
 15836                           postinc0	equ	0xFEE
 15837                           wreg	equ	0xFE8
 15838                           indf1	equ	0xFE7
 15839                           postdec1	equ	0xFE5
 15840                           fsr1h	equ	0xFE2
 15841                           fsr1l	equ	0xFE1
 15842                           indf2	equ	0xFDF
 15843                           postinc2	equ	0xFDE
 15844                           postdec2	equ	0xFDD
 15845                           plusw2	equ	0xFDB
 15846                           fsr2h	equ	0xFDA
 15847                           fsr2l	equ	0xFD9
 15848                           status	equ	0xFD8
 15849                           
 15850 ;; *************** function _ECANSendMessage *****************
 15851 ;; Defined at:
 15852 ;;		line 617 in file "../ECAN.c"
 15853 ;; Parameters:    Size  Location     Type
 15854 ;;  id              4   23[COMRAM] unsigned long 
 15855 ;;  data            1   27[COMRAM] PTR unsigned char 
 15856 ;;		 -> vscp_omsg(13), 
 15857 ;;  dataLen         1   28[COMRAM] unsigned char 
 15858 ;;  msgFlags        1   29[COMRAM] enum E16315
 15859 ;; Auto vars:     Size  Location     Type
 15860 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15861 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15862 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15863 ;;		 -> B0CON(1), 
 15864 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15865 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15866 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15867 ;;		 -> B0CON(1), 
 15868 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15869 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15870 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15871 ;;		 -> B0CON(1), 
 15872 ;;  i               1   56[COMRAM] unsigned char 
 15873 ;;  temp            1   55[COMRAM] unsigned char 
 15874 ;;  tempBSEL0       1   52[COMRAM] struct .
 15875 ;;  j               1   51[COMRAM] unsigned char 
 15876 ;;  buffers         1   50[COMRAM] unsigned char 
 15877 ;;  mode            1   49[COMRAM] unsigned char 
 15878 ;; Return value:  Size  Location     Type
 15879 ;;                  1    wreg      enum E15660
 15880 ;; Registers used:
 15881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15882 ;; Tracked objects:
 15883 ;;		On entry : E/1
 15884 ;;		On exit  : 3/1
 15885 ;;		Unchanged: 0/0
 15886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15887 ;;      Params:         7       0       0       0       0       0       0
 15888 ;;      Locals:        28       0       0       0       0       0       0
 15889 ;;      Temps:          1       0       0       0       0       0       0
 15890 ;;      Totals:        36       0       0       0       0       0       0
 15891 ;;Total ram usage:       36 bytes
 15892 ;; Hardware stack levels used:    1
 15893 ;; Hardware stack levels required when called:    3
 15894 ;; This function calls:
 15895 ;;		__CANIDToRegs
 15896 ;; This function is called by:
 15897 ;;		_sendCANFrame
 15898 ;; This function uses a non-reentrant model
 15899 ;;
 15900                           
 15901                           	psect	text73
 15902  003616                     __ptext73:
 15903                           	opt stack 0
 15904  003616                     _ECANSendMessage:
 15905                           	opt stack 21
 15906                           
 15907                           ;ECAN.c: 619: BYTE mode;
 15908                           ;ECAN.c: 620: BYTE buffers;
 15909                           ;ECAN.c: 628: BYTE i,j;
 15910                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15911                           ;ECAN.c: 630: BYTE* pb[9];
 15912                           ;ECAN.c: 631: BYTE temp;
 15913                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15914                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15915                           
 15916                           ; BSR set to: 0
 15917                           ;incstack = 0
 15918                           ;incstack = 0
 15919  003616  0E0F               	movlw	15	;volatile
 15920  003618  6E21               	movwf	ECANSendMessage@pb+1,c
 15921  00361A  0E40               	movlw	64	;volatile
 15922  00361C  6E20               	movwf	ECANSendMessage@pb,c
 15923                           
 15924                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15925  00361E  0E0F               	movlw	15	;volatile
 15926  003620  6E23               	movwf	ECANSendMessage@pb+3,c
 15927  003622  0E30               	movlw	48	;volatile
 15928  003624  6E22               	movwf	ECANSendMessage@pb+2,c
 15929                           
 15930                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15931  003626  0E0F               	movlw	15	;volatile
 15932  003628  6E25               	movwf	ECANSendMessage@pb+5,c
 15933  00362A  0E20               	movlw	32	;volatile
 15934  00362C  6E24               	movwf	ECANSendMessage@pb+4,c
 15935                           
 15936                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15937  00362E  0E0E               	movlw	14	;volatile
 15938  003630  6E27               	movwf	ECANSendMessage@pb+7,c
 15939  003632  0E20               	movlw	32	;volatile
 15940  003634  6E26               	movwf	ECANSendMessage@pb+6,c
 15941                           
 15942                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15943  003636  0E0E               	movlw	14	;volatile
 15944  003638  6E29               	movwf	ECANSendMessage@pb+9,c
 15945  00363A  0E30               	movlw	48	;volatile
 15946  00363C  6E28               	movwf	ECANSendMessage@pb+8,c
 15947                           
 15948                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15949  00363E  0E0E               	movlw	14	;volatile
 15950  003640  6E2B               	movwf	ECANSendMessage@pb+11,c
 15951  003642  0E40               	movlw	64	;volatile
 15952  003644  6E2A               	movwf	ECANSendMessage@pb+10,c
 15953                           
 15954                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15955  003646  0E0E               	movlw	14	;volatile
 15956  003648  6E2D               	movwf	ECANSendMessage@pb+13,c
 15957  00364A  0E50               	movlw	80	;volatile
 15958  00364C  6E2C               	movwf	ECANSendMessage@pb+12,c
 15959                           
 15960                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15961  00364E  0E0E               	movlw	14	;volatile
 15962  003650  6E2F               	movwf	ECANSendMessage@pb+15,c
 15963  003652  0E60               	movlw	96	;volatile
 15964  003654  6E2E               	movwf	ECANSendMessage@pb+14,c
 15965                           
 15966                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15967  003656  0E0E               	movlw	14	;volatile
 15968  003658  6E31               	movwf	ECANSendMessage@pb+17,c
 15969  00365A  0E70               	movlw	112	;volatile
 15970  00365C  6E30               	movwf	ECANSendMessage@pb+16,c
 15971                           
 15972                           ; BSR set to: 14
 15973                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15974  00365E  5077               	movf	3959,w,c	;volatile
 15975  003660  0BC0               	andlw	192
 15976  003662  6E32               	movwf	ECANSendMessage@mode,c
 15977                           
 15978                           ; BSR set to: 14
 15979                           ;ECAN.c: 660: if ( mode == 0x00 )
 15980  003664  6632               	tstfsz	ECANSendMessage@mode,c
 15981  003666  D002               	goto	l10952
 15982                           
 15983                           ; BSR set to: 14
 15984                           ;ECAN.c: 661: buffers = 2;
 15985  003668  0E02               	movlw	2
 15986  00366A  D001               	goto	L33
 15987  00366C                     l10952:
 15988                           
 15989                           ; BSR set to: 14
 15990                           ;ECAN.c: 662: else
 15991                           ;ECAN.c: 663: buffers = 8;
 15992  00366C  0E08               	movlw	8
 15993  00366E                     L33:
 15994  00366E  6E33               	movwf	ECANSendMessage@buffers,c
 15995                           
 15996                           ; BSR set to: 14
 15997                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15998  003670  010D               	movlb	13	; () banked
 15999  003672  90D8               	bcf	status,0,c
 16000  003674  31F8               	rrcf	248,w,b	;volatile
 16001  003676  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 16002                           
 16003                           ; BSR set to: 13
 16004                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16005  003678  6A39               	clrf	ECANSendMessage@i,c
 16006  00367A  D07B               	goto	l11012
 16007  00367C                     l10958:
 16008                           
 16009                           ;ECAN.c: 688: {
 16010                           ;ECAN.c: 693: ptr = pb[i];
 16011  00367C  5039               	movf	ECANSendMessage@i,w,c
 16012  00367E  0D02               	mullw	2
 16013  003680  50F3               	movf	prodl,w,c
 16014  003682  0F20               	addlw	low ECANSendMessage@pb
 16015  003684  6ED9               	movwf	fsr2l,c
 16016  003686  6ADA               	clrf	fsr2h,c
 16017  003688  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 16018  00368C  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 16019                           
 16020                           ;ECAN.c: 694: tempPtr = ptr;
 16021  003690  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16022  003694  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16023                           
 16024                           ;ECAN.c: 702: if ( i > 2 )
 16025  003698  0E02               	movlw	2
 16026  00369A  6439               	cpfsgt	ECANSendMessage@i,c
 16027  00369C  D004               	goto	l10970
 16028                           
 16029                           ;ECAN.c: 703: {
 16030                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16031  00369E  90D8               	bcf	status,0,c
 16032  0036A0  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 16033                           
 16034                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16035  0036A2  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 16036  0036A4  D065               	goto	l11010
 16037  0036A6                     l10970:
 16038                           
 16039                           ;ECAN.c: 714: }
 16040                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16041  0036A6  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16042  0036AA  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16043  0036AE  50DF               	movf	indf2,w,c
 16044  0036B0  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 16045  0036B2  B61F               	btfsc	??_ECANSendMessage,3,c
 16046  0036B4  D05D               	goto	l11010
 16047                           
 16048                           ;ECAN.c: 721: {
 16049                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16050  0036B6  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16051  0036BA  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16052  0036BE  0EFC               	movlw	252
 16053  0036C0  16DF               	andwf	indf2,f,c
 16054                           
 16055                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16056  0036C2  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16057  0036C6  0E03               	movlw	3
 16058  0036C8  161F               	andwf	??_ECANSendMessage,f,c
 16059  0036CA  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16060  0036CE  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16061  0036D2  501F               	movf	??_ECANSendMessage,w,c
 16062  0036D4  12DF               	iorwf	indf2,f,c
 16063                           
 16064                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16065  0036D6  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 16066  0036D8  D004               	goto	l819
 16067                           
 16068                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16069  0036DA  501D               	movf	ECANSendMessage@dataLen,w,c
 16070  0036DC  0940               	iorlw	64
 16071  0036DE  6E38               	movwf	ECANSendMessage@temp,c
 16072  0036E0  D002               	goto	l10980
 16073  0036E2                     l819:
 16074                           
 16075                           ;ECAN.c: 729: else
 16076                           ;ECAN.c: 730: temp = dataLen;
 16077  0036E2  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16078  0036E6                     l10980:
 16079                           
 16080                           ;ECAN.c: 732: *(ptr+5) = temp;
 16081  0036E6  EE20 F005          	lfsr	2,5
 16082  0036EA  503A               	movf	ECANSendMessage@ptr,w,c
 16083  0036EC  26D9               	addwf	fsr2l,f,c
 16084  0036EE  503B               	movf	ECANSendMessage@ptr+1,w,c
 16085  0036F0  22DA               	addwfc	fsr2h,f,c
 16086  0036F2  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 16087                           
 16088                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16089  0036F6  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 16090  0036F8  D003               	goto	l821
 16091                           
 16092                           ;ECAN.c: 736: temp = 1;
 16093  0036FA  0E01               	movlw	1
 16094  0036FC  6E38               	movwf	ECANSendMessage@temp,c
 16095  0036FE  D001               	goto	l10986
 16096  003700                     l821:
 16097                           
 16098                           ;ECAN.c: 738: else
 16099                           ;ECAN.c: 739: temp = 0;
 16100  003700  6A38               	clrf	ECANSendMessage@temp,c
 16101  003702                     l10986:
 16102                           
 16103                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16104  003702  283A               	incf	ECANSendMessage@ptr,w,c
 16105  003704  6E0E               	movwf	?__CANIDToRegs,c
 16106  003706  0E00               	movlw	0
 16107  003708  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 16108  00370A  6E0F               	movwf	?__CANIDToRegs+1,c
 16109  00370C  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16110  003710  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16111  003714  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16112  003718  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16113  00371C  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16114  003720  EC8C  F01D         	call	__CANIDToRegs	;wreg free
 16115                           
 16116                           ;ECAN.c: 745: ptr += 6;
 16117  003724  0E06               	movlw	6
 16118  003726  263A               	addwf	ECANSendMessage@ptr,f,c
 16119  003728  0E00               	movlw	0
 16120  00372A  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 16121                           
 16122                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16123  00372C  6A34               	clrf	ECANSendMessage@j,c
 16124  00372E  D00D               	goto	l11000
 16125  003730                     l10992:
 16126                           
 16127                           ;ECAN.c: 748: *ptr++ = *data++;
 16128  003730  501C               	movf	ECANSendMessage@data,w,c
 16129  003732  6ED9               	movwf	fsr2l,c
 16130  003734  6ADA               	clrf	fsr2h,c
 16131  003736  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16132  00373A  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16133  00373E  CFDF FFE7          	movff	indf2,indf1
 16134  003742  2A1C               	incf	ECANSendMessage@data,f,c
 16135  003744  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 16136  003746  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 16137  003748  2A34               	incf	ECANSendMessage@j,f,c
 16138  00374A                     l11000:
 16139  00374A  501D               	movf	ECANSendMessage@dataLen,w,c
 16140  00374C  5C34               	subwf	ECANSendMessage@j,w,c
 16141  00374E  E3F0               	bnc	l10992
 16142                           
 16143                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16144  003750  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16145  003754  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16146  003758  50DF               	movf	indf2,w,c
 16147  00375A  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 16148  00375C  B41F               	btfsc	??_ECANSendMessage,2,c
 16149  00375E  D006               	goto	l11006
 16150                           
 16151                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16152  003760  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16153  003764  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16154  003768  0E00               	movlw	0
 16155  00376A  86DB               	bsf	plusw2,3,c
 16156  00376C                     l11006:
 16157                           
 16158                           ;ECAN.c: 755: return TRUE;
 16159  00376C  0E01               	movlw	1
 16160  00376E  D005               	goto	l827
 16161  003770                     l11010:
 16162  003770  2A39               	incf	ECANSendMessage@i,f,c
 16163  003772                     l11012:
 16164  003772  5033               	movf	ECANSendMessage@buffers,w,c
 16165  003774  5C39               	subwf	ECANSendMessage@i,w,c
 16166  003776  E382               	bnc	l10958
 16167                           
 16168                           ;ECAN.c: 756: }
 16169                           ;ECAN.c: 757: }
 16170                           ;ECAN.c: 760: return FALSE;
 16171  003778  0E00               	movlw	0
 16172  00377A                     l827:
 16173  00377A  0012               	return	
 16174  00377C                     __end_of_ECANSendMessage:
 16175                           	opt stack 0
 16176                           tblptru	equ	0xFF8
 16177                           tblptrh	equ	0xFF7
 16178                           tblptrl	equ	0xFF6
 16179                           tablat	equ	0xFF5
 16180                           prodh	equ	0xFF4
 16181                           prodl	equ	0xFF3
 16182                           intcon	equ	0xFF2
 16183                           postinc0	equ	0xFEE
 16184                           wreg	equ	0xFE8
 16185                           indf1	equ	0xFE7
 16186                           postdec1	equ	0xFE5
 16187                           fsr1h	equ	0xFE2
 16188                           fsr1l	equ	0xFE1
 16189                           indf2	equ	0xFDF
 16190                           postinc2	equ	0xFDE
 16191                           postdec2	equ	0xFDD
 16192                           plusw2	equ	0xFDB
 16193                           fsr2h	equ	0xFDA
 16194                           fsr2l	equ	0xFD9
 16195                           status	equ	0xFD8
 16196                           
 16197 ;; *************** function __CANIDToRegs *****************
 16198 ;; Defined at:
 16199 ;;		line 1099 in file "../ECAN.c"
 16200 ;; Parameters:    Size  Location     Type
 16201 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16202 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16203 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16204 ;;		 -> B0CON(1), 
 16205 ;;  val             4   15[COMRAM] unsigned long 
 16206 ;;  type            1   19[COMRAM] unsigned char 
 16207 ;; Auto vars:     Size  Location     Type
 16208 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 16209 ;;		 -> _CANIDToRegs@val(4), 
 16210 ;; Return value:  Size  Location     Type
 16211 ;;		None               void
 16212 ;; Registers used:
 16213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16214 ;; Tracked objects:
 16215 ;;		On entry : 3/D
 16216 ;;		On exit  : 3/1
 16217 ;;		Unchanged: 2/0
 16218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16219 ;;      Params:         7       0       0       0       0       0       0
 16220 ;;      Locals:         1       0       0       0       0       0       0
 16221 ;;      Temps:          2       0       0       0       0       0       0
 16222 ;;      Totals:        10       0       0       0       0       0       0
 16223 ;;Total ram usage:       10 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; Hardware stack levels required when called:    2
 16226 ;; This function calls:
 16227 ;;		Nothing
 16228 ;; This function is called by:
 16229 ;;		_ECANSendMessage
 16230 ;; This function uses a non-reentrant model
 16231 ;;
 16232                           
 16233                           	psect	text74
 16234  003B18                     __ptext74:
 16235                           	opt stack 0
 16236  003B18                     __CANIDToRegs:
 16237                           	opt stack 21
 16238                           
 16239                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16240                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16241                           
 16242                           ;incstack = 0
 16243                           ;incstack = 0
 16244  003B18  0E10               	movlw	low __CANIDToRegs@val
 16245  003B1A  6E17               	movwf	__CANIDToRegs@Value,c
 16246                           
 16247                           ;ECAN.c: 1104: if ( type == 0 )
 16248  003B1C  6614               	tstfsz	__CANIDToRegs@type,c
 16249  003B1E  D022               	goto	l11028
 16250                           
 16251                           ;ECAN.c: 1105: {
 16252                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16253  003B20  5017               	movf	__CANIDToRegs@Value,w,c
 16254  003B22  6ED9               	movwf	fsr2l,c
 16255  003B24  6ADA               	clrf	fsr2h,c
 16256  003B26  50DF               	movf	indf2,w,c
 16257  003B28  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16258  003B2A  90D8               	bcf	status,0,c
 16259  003B2C  3215               	rrcf	??__CANIDToRegs,f,c
 16260  003B2E  90D8               	bcf	status,0,c
 16261  003B30  3215               	rrcf	??__CANIDToRegs,f,c
 16262  003B32  90D8               	bcf	status,0,c
 16263  003B34  3015               	rrcf	??__CANIDToRegs,w,c
 16264                           
 16265                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16266  003B36  D862               	call	PL26	;call to abstracted procedure
 16267  003B38  2AD9               	incf	fsr2l,f,c
 16268  003B3A  6ADA               	clrf	fsr2h,c
 16269  003B3C  D872               	call	PL80	;call to abstracted procedure
 16270  003B3E                     u9055:
 16271  003B3E  90D8               	bcf	status,0,c
 16272  003B40  3615               	rlcf	??__CANIDToRegs,f,c
 16273  003B42  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16274  003B44  D7FC               	goto	u9055
 16275  003B46  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16276                           
 16277                           ;ECAN.c: 1109: ptr++;
 16278                           
 16279                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16280  003B4A  D846               	call	PL14	;call to abstracted procedure
 16281  003B4C  D86A               	call	PL80	;call to abstracted procedure
 16282  003B4E                     u9065:
 16283  003B4E  90D8               	bcf	status,0,c
 16284  003B50  3615               	rlcf	??__CANIDToRegs,f,c
 16285  003B52  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16286  003B54  D7FC               	goto	u9065
 16287  003B56  5015               	movf	??__CANIDToRegs,w,c
 16288  003B58  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16289  003B5C  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16290  003B60  6EDF               	movwf	indf2,c
 16291                           
 16292                           ;ECAN.c: 1111: }
 16293  003B62  D039               	goto	l881
 16294  003B64                     l11028:
 16295                           
 16296                           ;ECAN.c: 1112: else
 16297                           ;ECAN.c: 1113: {
 16298                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16299  003B64  5017               	movf	__CANIDToRegs@Value,w,c
 16300  003B66  D842               	call	PL22	;call to abstracted procedure
 16301  003B68  0E05               	movlw	5
 16302  003B6A  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16303  003B6C                     u9075:
 16304  003B6C  90D8               	bcf	status,0,c
 16305  003B6E  3215               	rrcf	??__CANIDToRegs,f,c
 16306  003B70  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16307  003B72  D7FC               	goto	u9075
 16308  003B74  5015               	movf	??__CANIDToRegs,w,c
 16309                           
 16310                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16311  003B76  D842               	call	PL26	;call to abstracted procedure
 16312  003B78  0E03               	movlw	3
 16313  003B7A  D849               	call	PL46	;call to abstracted procedure
 16314  003B7C  3615               	rlcf	??__CANIDToRegs,f,c
 16315  003B7E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16316                           
 16317                           ;ECAN.c: 1117: ptr++;
 16318                           
 16319                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16320  003B82  D82A               	call	PL14	;call to abstracted procedure
 16321  003B84  0E02               	movlw	2
 16322  003B86  D843               	call	PL46	;call to abstracted procedure
 16323  003B88  3415               	rlcf	??__CANIDToRegs,w,c
 16324  003B8A  0BE0               	andlw	224
 16325  003B8C  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16326  003B90  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16327  003B94  6EDF               	movwf	indf2,c
 16328                           
 16329                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16330  003B96  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16331  003B9A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16332  003B9E  0E00               	movlw	0
 16333  003BA0  86DB               	bsf	plusw2,3,c
 16334                           
 16335                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16336  003BA2  5017               	movf	__CANIDToRegs@Value,w,c
 16337  003BA4  D823               	call	PL22	;call to abstracted procedure
 16338  003BA6  0E03               	movlw	3
 16339  003BA8  1615               	andwf	??__CANIDToRegs,f,c
 16340  003BAA  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16341                           
 16342                           ;ECAN.c: 1122: ptr++;
 16343                           
 16344                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16345  003BAE  D814               	call	PL14	;call to abstracted procedure
 16346  003BB0  2AD9               	incf	fsr2l,f,c
 16347  003BB2  6ADA               	clrf	fsr2h,c
 16348  003BB4  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16349  003BB8  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16350  003BBC  CFDF FFE7          	movff	indf2,indf1
 16351                           
 16352                           ;ECAN.c: 1124: ptr++;
 16353  003BC0  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16354  003BC2  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16355                           
 16356                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16357  003BC4  5017               	movf	__CANIDToRegs@Value,w,c
 16358  003BC6  6ED9               	movwf	fsr2l,c
 16359  003BC8  6ADA               	clrf	fsr2h,c
 16360  003BCA  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16361  003BCE  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16362  003BD2  CFDF FFE7          	movff	indf2,indf1
 16363  003BD6                     l881:
 16364  003BD6  0012               	return	
 16365  003BD8                     __end_of__CANIDToRegs:
 16366                           	opt stack 0
 16367  003BD8                     PL14:
 16368                           	opt stack 21
 16369  003BD8  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16370  003BDC  5015               	movf	??__CANIDToRegs,w,c
 16371  003BDE  12DF               	iorwf	indf2,f,c
 16372  003BE0  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16373  003BE2  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16374  003BE4  5017               	movf	__CANIDToRegs@Value,w,c
 16375  003BE6  6ED9               	movwf	fsr2l,c
 16376  003BE8  6ADA               	clrf	fsr2h,c
 16377  003BEA  0012               	return	
 16378  003BEC                     __end_ofPL14:
 16379                           	opt stack 0
 16380  003BEC                     PL22:
 16381                           	opt stack 21
 16382  003BEC  6ED9               	movwf	fsr2l,c
 16383  003BEE  6ADA               	clrf	fsr2h,c
 16384  003BF0  0E02               	movlw	2
 16385  003BF2  26D9               	addwf	fsr2l,f,c
 16386  003BF4  6ADA               	clrf	fsr2h,c
 16387  003BF6  50DF               	movf	indf2,w,c
 16388  003BF8  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16389  003BFA  0012               	return	
 16390  003BFC                     __end_ofPL22:
 16391                           	opt stack 0
 16392  003BFC                     PL26:
 16393                           	opt stack 21
 16394  003BFC  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16395  003C00  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16396  003C04  6EDF               	movwf	indf2,c
 16397  003C06  5017               	movf	__CANIDToRegs@Value,w,c
 16398  003C08  6ED9               	movwf	fsr2l,c
 16399  003C0A  6ADA               	clrf	fsr2h,c
 16400  003C0C  0012               	return	
 16401  003C0E                     __end_ofPL26:
 16402                           	opt stack 0
 16403  003C0E                     PL46:
 16404                           	opt stack 21
 16405  003C0E  26D9               	addwf	fsr2l,f,c
 16406  003C10  6ADA               	clrf	fsr2h,c
 16407  003C12  50DF               	movf	indf2,w,c
 16408  003C14  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16409  003C16  90D8               	bcf	status,0,c
 16410  003C18  3615               	rlcf	??__CANIDToRegs,f,c
 16411  003C1A  90D8               	bcf	status,0,c
 16412  003C1C  3615               	rlcf	??__CANIDToRegs,f,c
 16413  003C1E  90D8               	bcf	status,0,c
 16414  003C20  0012               	return	
 16415  003C22                     __end_ofPL46:
 16416                           	opt stack 0
 16417  003C22                     PL80:
 16418                           	opt stack 21
 16419  003C22  50DF               	movf	indf2,w,c
 16420  003C24  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16421  003C26  0E05               	movlw	5
 16422  003C28  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16423  003C2A  0C05               	retlw	5
 16424  003C2C                     __end_ofPL80:
 16425                           	opt stack 0
 16426                           tblptru	equ	0xFF8
 16427                           tblptrh	equ	0xFF7
 16428                           tblptrl	equ	0xFF6
 16429                           tablat	equ	0xFF5
 16430                           prodh	equ	0xFF4
 16431                           prodl	equ	0xFF3
 16432                           intcon	equ	0xFF2
 16433                           postinc0	equ	0xFEE
 16434                           wreg	equ	0xFE8
 16435                           indf1	equ	0xFE7
 16436                           postdec1	equ	0xFE5
 16437                           fsr1h	equ	0xFE2
 16438                           fsr1l	equ	0xFE1
 16439                           indf2	equ	0xFDF
 16440                           postinc2	equ	0xFDE
 16441                           postdec2	equ	0xFDD
 16442                           plusw2	equ	0xFDB
 16443                           fsr2h	equ	0xFDA
 16444                           fsr2l	equ	0xFD9
 16445                           status	equ	0xFD8
 16446                           
 16447 ;; *************** function _vscp_getEvent *****************
 16448 ;; Defined at:
 16449 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16450 ;; Parameters:    Size  Location     Type
 16451 ;;		None
 16452 ;; Auto vars:     Size  Location     Type
 16453 ;;  rv              1   49[COMRAM] unsigned char 
 16454 ;; Return value:  Size  Location     Type
 16455 ;;                  1    wreg      unsigned char 
 16456 ;; Registers used:
 16457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16458 ;; Tracked objects:
 16459 ;;		On entry : F/0
 16460 ;;		On exit  : 0/0
 16461 ;;		Unchanged: 0/0
 16462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16463 ;;      Params:         0       0       0       0       0       0       0
 16464 ;;      Locals:         1       0       0       0       0       0       0
 16465 ;;      Temps:          0       0       0       0       0       0       0
 16466 ;;      Totals:         1       0       0       0       0       0       0
 16467 ;;Total ram usage:        1 bytes
 16468 ;; Hardware stack levels used:    1
 16469 ;; Hardware stack levels required when called:    6
 16470 ;; This function calls:
 16471 ;;		_getVSCPFrame
 16472 ;; This function is called by:
 16473 ;;		_main
 16474 ;; This function uses a non-reentrant model
 16475 ;;
 16476                           
 16477                           	psect	text75
 16478  00502E                     __ptext75:
 16479                           	opt stack 0
 16480  00502E                     _vscp_getEvent:
 16481                           	opt stack 23
 16482                           
 16483                           ; BSR set to: 0
 16484                           ;vscp_firmware.c: 1309: int8_t rv;
 16485                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16486                           
 16487                           ;incstack = 0
 16488                           ;incstack = 0
 16489  00502E  BFBF               	btfsc	_vscp_imsg& (0+255),7,b
 16490  005030  D012               	goto	l1276
 16491                           
 16492                           ; BSR set to: 0
 16493                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16494                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16495                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16496                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16497                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16498                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16499  005032  0EC3               	movlw	low (_vscp_imsg+4)
 16500  005034  6E24               	movwf	?_getVSCPFrame,c
 16501  005036  0EC4               	movlw	low (_vscp_imsg+5)
 16502  005038  6E25               	movwf	?_getVSCPFrame+1,c
 16503  00503A  0EC0               	movlw	low (_vscp_imsg+1)
 16504  00503C  6E26               	movwf	?_getVSCPFrame+2,c
 16505  00503E  0EBF               	movlw	low _vscp_imsg
 16506  005040  6E27               	movwf	?_getVSCPFrame+3,c
 16507  005042  0EC5               	movlw	low (_vscp_imsg+6)
 16508  005044  6E28               	movwf	?_getVSCPFrame+4,c
 16509  005046  0EC1               	movlw	(_vscp_imsg+2)& (0+255)
 16510  005048  EC7B  F024         	call	_getVSCPFrame
 16511  00504C  6E32               	movwf	vscp_getEvent@rv,c
 16512  00504E  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16513  005050  E002               	bz	l1276
 16514                           
 16515                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16516  005052  0100               	movlb	0	; () banked
 16517  005054  8FBF               	bsf	_vscp_imsg& (0+255),7,b
 16518  005056                     l1276:
 16519  005056  0012               	return	
 16520  005058                     __end_of_vscp_getEvent:
 16521                           	opt stack 0
 16522                           tblptru	equ	0xFF8
 16523                           tblptrh	equ	0xFF7
 16524                           tblptrl	equ	0xFF6
 16525                           tablat	equ	0xFF5
 16526                           prodh	equ	0xFF4
 16527                           prodl	equ	0xFF3
 16528                           intcon	equ	0xFF2
 16529                           postinc0	equ	0xFEE
 16530                           wreg	equ	0xFE8
 16531                           indf1	equ	0xFE7
 16532                           postdec1	equ	0xFE5
 16533                           fsr1h	equ	0xFE2
 16534                           fsr1l	equ	0xFE1
 16535                           indf2	equ	0xFDF
 16536                           postinc2	equ	0xFDE
 16537                           postdec2	equ	0xFDD
 16538                           plusw2	equ	0xFDB
 16539                           fsr2h	equ	0xFDA
 16540                           fsr2l	equ	0xFD9
 16541                           status	equ	0xFD8
 16542                           
 16543 ;; *************** function _getVSCPFrame *****************
 16544 ;; Defined at:
 16545 ;;		line 2873 in file "../main.c"
 16546 ;; Parameters:    Size  Location     Type
 16547 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16548 ;;		 -> vscp_imsg(14), 
 16549 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16550 ;;		 -> vscp_imsg(14), 
 16551 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16552 ;;		 -> vscp_imsg(14), 
 16553 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16554 ;;		 -> vscp_imsg(14), 
 16555 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16556 ;;		 -> vscp_imsg(14), 
 16557 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16558 ;;		 -> vscp_imsg(14), 
 16559 ;; Auto vars:     Size  Location     Type
 16560 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16561 ;;		 -> vscp_imsg(14), 
 16562 ;;  id              4   45[COMRAM] unsigned long 
 16563 ;; Return value:  Size  Location     Type
 16564 ;;                  1    wreg      unsigned char 
 16565 ;; Registers used:
 16566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16567 ;; Tracked objects:
 16568 ;;		On entry : F/0
 16569 ;;		On exit  : 0/0
 16570 ;;		Unchanged: 0/0
 16571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16572 ;;      Params:         5       0       0       0       0       0       0
 16573 ;;      Locals:         5       0       0       0       0       0       0
 16574 ;;      Temps:          4       0       0       0       0       0       0
 16575 ;;      Totals:        14       0       0       0       0       0       0
 16576 ;;Total ram usage:       14 bytes
 16577 ;; Hardware stack levels used:    1
 16578 ;; Hardware stack levels required when called:    5
 16579 ;; This function calls:
 16580 ;;		_getCANFrame
 16581 ;; This function is called by:
 16582 ;;		_vscp_getEvent
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           	psect	text76
 16587  0048F6                     __ptext76:
 16588                           	opt stack 0
 16589  0048F6                     _getVSCPFrame:
 16590                           	opt stack 23
 16591                           
 16592                           ;incstack = 0
 16593                           ;incstack = 0
 16594                           ;getVSCPFrame@pvscpclass stored from wreg
 16595  0048F6  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16596                           
 16597                           ; BSR set to: 0
 16598                           ;main.c: 2874: uint32_t id;
 16599                           ;main.c: 2876: if (!getCANFrame(&id, pSize, pData)) {
 16600  0048FA  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16601  0048FE  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16602  004902  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16603  004904  ECD7  F027         	call	_getCANFrame
 16604  004908  0900               	iorlw	0
 16605  00490A  E102               	bnz	l8102
 16606                           
 16607                           ;main.c: 2877: return 0;
 16608  00490C  0E00               	movlw	0
 16609  00490E  D02E               	goto	l625
 16610  004910                     l8102:
 16611                           
 16612                           ;main.c: 2878: }
 16613                           ;main.c: 2880: *pNodeId = id & 0x0ff;
 16614  004910  5025               	movf	getVSCPFrame@pNodeId,w,c
 16615  004912  6ED9               	movwf	fsr2l,c
 16616  004914  6ADA               	clrf	fsr2h,c
 16617  004916  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16618                           
 16619                           ;main.c: 2881: *pvscptype = (id >> 8) & 0xff;
 16620  00491A  5024               	movf	getVSCPFrame@pvscptype,w,c
 16621  00491C  6ED9               	movwf	fsr2l,c
 16622  00491E  6ADA               	clrf	fsr2h,c
 16623  004920  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16624                           
 16625                           ;main.c: 2882: *pvscpclass = (id >> 16) & 0x1ff;
 16626  004924  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16627  004926  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16628  004928  0E01               	movlw	1
 16629  00492A  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16630  00492C  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16631  00492E  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16632  004930  6ED9               	movwf	fsr2l,c
 16633  004932  6ADA               	clrf	fsr2h,c
 16634  004934  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16635  004938  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16636                           
 16637                           ;main.c: 2883: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16638  00493C  5026               	movf	getVSCPFrame@pPriority,w,c
 16639  00493E  6ED9               	movwf	fsr2l,c
 16640  004940  6ADA               	clrf	fsr2h,c
 16641  004942  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16642  004946  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16643  00494A  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16644  00494E  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16645  004952  0E1B               	movlw	27
 16646  004954  D005               	goto	u5420
 16647  004956                     u5425:
 16648  004956  90D8               	bcf	status,0,c
 16649  004958  322C               	rrcf	??_getVSCPFrame+3,f,c
 16650  00495A  322B               	rrcf	??_getVSCPFrame+2,f,c
 16651  00495C  322A               	rrcf	??_getVSCPFrame+1,f,c
 16652  00495E  3229               	rrcf	??_getVSCPFrame,f,c
 16653  004960                     u5420:
 16654  004960  2EE8               	decfsz	wreg,f,c
 16655  004962  D7F9               	goto	u5425
 16656  004964  5029               	movf	??_getVSCPFrame,w,c
 16657  004966  0B07               	andlw	7
 16658  004968  6EDF               	movwf	indf2,c
 16659                           
 16660                           ;main.c: 2885: return 1;
 16661  00496A  0E01               	movlw	1
 16662  00496C                     l625:
 16663  00496C  0012               	return	
 16664  00496E                     __end_of_getVSCPFrame:
 16665                           	opt stack 0
 16666                           tblptru	equ	0xFF8
 16667                           tblptrh	equ	0xFF7
 16668                           tblptrl	equ	0xFF6
 16669                           tablat	equ	0xFF5
 16670                           prodh	equ	0xFF4
 16671                           prodl	equ	0xFF3
 16672                           intcon	equ	0xFF2
 16673                           postinc0	equ	0xFEE
 16674                           wreg	equ	0xFE8
 16675                           indf1	equ	0xFE7
 16676                           postdec1	equ	0xFE5
 16677                           fsr1h	equ	0xFE2
 16678                           fsr1l	equ	0xFE1
 16679                           indf2	equ	0xFDF
 16680                           postinc2	equ	0xFDE
 16681                           postdec2	equ	0xFDD
 16682                           plusw2	equ	0xFDB
 16683                           fsr2h	equ	0xFDA
 16684                           fsr2l	equ	0xFD9
 16685                           status	equ	0xFD8
 16686                           
 16687 ;; *************** function _getCANFrame *****************
 16688 ;; Defined at:
 16689 ;;		line 2915 in file "../main.c"
 16690 ;; Parameters:    Size  Location     Type
 16691 ;;  pid             1    wreg     PTR unsigned long 
 16692 ;;		 -> getVSCPFrame@id(4), 
 16693 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16694 ;;		 -> vscp_imsg(14), 
 16695 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16696 ;;		 -> vscp_imsg(14), 
 16697 ;; Auto vars:     Size  Location     Type
 16698 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16699 ;;		 -> getVSCPFrame@id(4), 
 16700 ;;  flags           1   34[COMRAM] enum E16418
 16701 ;; Return value:  Size  Location     Type
 16702 ;;                  1    wreg      unsigned char 
 16703 ;; Registers used:
 16704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16705 ;; Tracked objects:
 16706 ;;		On entry : F/0
 16707 ;;		On exit  : 0/0
 16708 ;;		Unchanged: 0/0
 16709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16710 ;;      Params:         2       0       0       0       0       0       0
 16711 ;;      Locals:         2       0       0       0       0       0       0
 16712 ;;      Temps:          0       0       0       0       0       0       0
 16713 ;;      Totals:         4       0       0       0       0       0       0
 16714 ;;Total ram usage:        4 bytes
 16715 ;; Hardware stack levels used:    1
 16716 ;; Hardware stack levels required when called:    4
 16717 ;; This function calls:
 16718 ;;		_ECANReceiveMessage
 16719 ;; This function is called by:
 16720 ;;		_getVSCPFrame
 16721 ;; This function uses a non-reentrant model
 16722 ;;
 16723                           
 16724                           	psect	text77
 16725  004FAE                     __ptext77:
 16726                           	opt stack 0
 16727  004FAE                     _getCANFrame:
 16728                           	opt stack 23
 16729                           
 16730                           ;incstack = 0
 16731                           ;incstack = 0
 16732                           ;getCANFrame@pid stored from wreg
 16733  004FAE  CFE8 F022          	movff	wreg,getCANFrame@pid
 16734                           
 16735                           ; BSR set to: 0
 16736                           ;main.c: 2916: ECAN_RX_MSG_FLAGS flags;
 16737                           ;main.c: 2920: if (vscp_imsg.flags & 0x80) return 0;
 16738  004FB2  AFBF               	btfss	_vscp_imsg& (0+255),7,b
 16739  004FB4  D002               	goto	l8118
 16740  004FB6                     l8114:
 16741  004FB6  0E00               	movlw	0
 16742  004FB8  D00F               	goto	l636
 16743  004FBA                     l8118:
 16744                           
 16745                           ; BSR set to: 0
 16746                           ;main.c: 2922: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16747  004FBA  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16748  004FBE  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16749  004FC2  0E23               	movlw	low getCANFrame@flags
 16750  004FC4  6E17               	movwf	?_ECANReceiveMessage+2,c
 16751  004FC6  5022               	movf	getCANFrame@pid,w,c
 16752  004FC8  EC46  F018         	call	_ECANReceiveMessage
 16753  004FCC  0900               	iorlw	0
 16754  004FCE  E0F3               	bz	l8114
 16755                           
 16756                           ;main.c: 2924: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16757  004FD0  AC23               	btfss	getCANFrame@flags,6,c
 16758                           
 16759                           ;main.c: 2927: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16760  004FD2  AA23               	btfss	getCANFrame@flags,5,c
 16761  004FD4  D7F0               	goto	l8114
 16762                           
 16763                           ;main.c: 2929: return 1;
 16764  004FD6  0E01               	movlw	1
 16765  004FD8                     l636:
 16766  004FD8  0012               	return	
 16767  004FDA                     __end_of_getCANFrame:
 16768                           	opt stack 0
 16769                           tblptru	equ	0xFF8
 16770                           tblptrh	equ	0xFF7
 16771                           tblptrl	equ	0xFF6
 16772                           tablat	equ	0xFF5
 16773                           prodh	equ	0xFF4
 16774                           prodl	equ	0xFF3
 16775                           intcon	equ	0xFF2
 16776                           postinc0	equ	0xFEE
 16777                           wreg	equ	0xFE8
 16778                           indf1	equ	0xFE7
 16779                           postdec1	equ	0xFE5
 16780                           fsr1h	equ	0xFE2
 16781                           fsr1l	equ	0xFE1
 16782                           indf2	equ	0xFDF
 16783                           postinc2	equ	0xFDE
 16784                           postdec2	equ	0xFDD
 16785                           plusw2	equ	0xFDB
 16786                           fsr2h	equ	0xFDA
 16787                           fsr2l	equ	0xFD9
 16788                           status	equ	0xFD8
 16789                           
 16790 ;; *************** function _ECANReceiveMessage *****************
 16791 ;; Defined at:
 16792 ;;		line 803 in file "../ECAN.c"
 16793 ;; Parameters:    Size  Location     Type
 16794 ;;  id              1    wreg     PTR unsigned long 
 16795 ;;		 -> getVSCPFrame@id(4), 
 16796 ;;  data            1   20[COMRAM] PTR unsigned char 
 16797 ;;		 -> vscp_imsg(14), 
 16798 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16799 ;;		 -> vscp_imsg(14), 
 16800 ;;  msgFlags        1   22[COMRAM] PTR enum E16333
 16801 ;;		 -> getCANFrame@flags(1), 
 16802 ;; Auto vars:     Size  Location     Type
 16803 ;;  id              1   25[COMRAM] PTR unsigned long 
 16804 ;;		 -> getVSCPFrame@id(4), 
 16805 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16806 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16807 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16808 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16809 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16810 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16811 ;;  temp            1   28[COMRAM] struct .
 16812 ;;  mode            1   27[COMRAM] unsigned char 
 16813 ;;  i               1   26[COMRAM] unsigned char 
 16814 ;; Return value:  Size  Location     Type
 16815 ;;                  1    wreg      enum E15660
 16816 ;; Registers used:
 16817 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16818 ;; Tracked objects:
 16819 ;;		On entry : F/0
 16820 ;;		On exit  : 0/0
 16821 ;;		Unchanged: 0/0
 16822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16823 ;;      Params:         3       0       0       0       0       0       0
 16824 ;;      Locals:         8       0       0       0       0       0       0
 16825 ;;      Temps:          0       0       0       0       0       0       0
 16826 ;;      Totals:        11       0       0       0       0       0       0
 16827 ;;Total ram usage:       11 bytes
 16828 ;; Hardware stack levels used:    1
 16829 ;; Hardware stack levels required when called:    3
 16830 ;; This function calls:
 16831 ;;		__ECANPointBuffer
 16832 ;;		__RegsToCANID
 16833 ;; This function is called by:
 16834 ;;		_getCANFrame
 16835 ;; This function uses a non-reentrant model
 16836 ;;
 16837                           
 16838                           	psect	text78
 16839  00308C                     __ptext78:
 16840                           	opt stack 0
 16841  00308C                     _ECANReceiveMessage:
 16842                           	opt stack 23
 16843                           
 16844                           ;incstack = 0
 16845                           ;incstack = 0
 16846                           ;ECANReceiveMessage@id stored from wreg
 16847  00308C  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16848                           
 16849                           ; BSR set to: 0
 16850                           ;ECAN.c: 805: BYTE mode;
 16851                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16852                           ;ECAN.c: 809: char i;
 16853                           ;ECAN.c: 810: BYTE_VAL temp;
 16854                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16855  003090  6A48               	clrf	__ECANRxFilterHitInfo,c
 16856                           
 16857                           ; BSR set to: 0
 16858                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16859  003092  5077               	movf	3959,w,c	;volatile
 16860  003094  0BC0               	andlw	192
 16861  003096  6E1C               	movwf	ECANReceiveMessage@mode,c
 16862                           
 16863                           ; BSR set to: 0
 16864                           ;ECAN.c: 816: if ( mode == 0x00 )
 16865  003098  661C               	tstfsz	ECANReceiveMessage@mode,c
 16866  00309A  D032               	goto	l8250
 16867                           
 16868                           ; BSR set to: 0
 16869                           ;ECAN.c: 822: {
 16870                           ;ECAN.c: 824: if ( RXB0FUL )
 16871  00309C  AE60               	btfss	3936,7,c	;volatile
 16872  00309E  D012               	goto	l832
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;ECAN.c: 825: {
 16876                           ;ECAN.c: 827: RXB0IF = 0;
 16877  0030A0  90A4               	bcf	4004,0,c	;volatile
 16878                           
 16879                           ;ECAN.c: 830: if ( RXB0OVFL )
 16880  0030A2  AE74               	btfss	3956,7,c	;volatile
 16881  0030A4  D006               	goto	l8226
 16882                           
 16883                           ; BSR set to: 0
 16884                           ;ECAN.c: 831: {
 16885                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16886  0030A6  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16887  0030A8  6ED9               	movwf	fsr2l,c
 16888  0030AA  6ADA               	clrf	fsr2h,c
 16889  0030AC  0E00               	movlw	0
 16890  0030AE  86DB               	bsf	plusw2,3,c
 16891                           
 16892                           ; BSR set to: 0
 16893                           ;ECAN.c: 833: RXB0OVFL = 0;
 16894  0030B0  9E74               	bcf	3956,7,c	;volatile
 16895  0030B2                     l8226:
 16896                           
 16897                           ; BSR set to: 0
 16898                           ;ECAN.c: 834: }
 16899                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16900  0030B2  A060               	btfss	3936,0,c	;volatile
 16901  0030B4  D002               	bra	u5595
 16902  0030B6  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16903  0030B8  D001               	bra	u5597
 16904  0030BA                     u5595:
 16905  0030BA  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16906  0030BC                     u5597:
 16907                           
 16908                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16909  0030BC  0E0F               	movlw	15	;volatile
 16910  0030BE  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16911  0030C0  0E60               	movlw	96	;volatile
 16912  0030C2  D01A               	goto	L34
 16913  0030C4                     l832:
 16914                           
 16915                           ; BSR set to: 0
 16916                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16917  0030C4  010F               	movlb	15	; () banked
 16918  0030C6  AF50               	btfss	80,7,b	;volatile
 16919  0030C8  D019               	goto	l8244
 16920                           
 16921                           ; BSR set to: 15
 16922                           ;ECAN.c: 842: {
 16923                           ;ECAN.c: 844: RXB1IF = 0;
 16924  0030CA  92A4               	bcf	4004,1,c	;volatile
 16925                           
 16926                           ;ECAN.c: 847: if ( RXB1OVFL )
 16927  0030CC  AC74               	btfss	3956,6,c	;volatile
 16928  0030CE  D006               	goto	l8236
 16929                           
 16930                           ; BSR set to: 15
 16931                           ;ECAN.c: 848: {
 16932                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16933  0030D0  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16934  0030D2  6ED9               	movwf	fsr2l,c
 16935  0030D4  6ADA               	clrf	fsr2h,c
 16936  0030D6  0E00               	movlw	0
 16937  0030D8  86DB               	bsf	plusw2,3,c
 16938                           
 16939                           ; BSR set to: 15
 16940                           ;ECAN.c: 850: RXB1OVFL = 0;
 16941  0030DA  9C74               	bcf	3956,6,c	;volatile
 16942  0030DC                     l8236:
 16943                           
 16944                           ; BSR set to: 15
 16945                           ;ECAN.c: 851: }
 16946                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16947  0030DC  5150               	movf	80,w,b	;volatile
 16948  0030DE  0B07               	andlw	7
 16949  0030E0  6E48               	movwf	__ECANRxFilterHitInfo,c
 16950                           
 16951                           ; BSR set to: 15
 16952                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16953  0030E2  0E02               	movlw	2
 16954  0030E4  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16955  0030E6  D005               	goto	l8242
 16956                           
 16957                           ; BSR set to: 15
 16958                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16959  0030E8  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16960  0030EA  6ED9               	movwf	fsr2l,c
 16961  0030EC  6ADA               	clrf	fsr2h,c
 16962  0030EE  0E00               	movlw	0
 16963  0030F0  8EDB               	bsf	plusw2,7,c
 16964  0030F2                     l8242:
 16965                           
 16966                           ; BSR set to: 15
 16967                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16968  0030F2  0E0F               	movlw	15	;volatile
 16969  0030F4  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16970  0030F6  0E50               	movlw	80	;volatile
 16971  0030F8                     L34:
 16972  0030F8  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16973                           
 16974                           ;ECAN.c: 860: }
 16975  0030FA  D065               	goto	l8304
 16976  0030FC                     l8244:
 16977                           
 16978                           ;ECAN.c: 861: else
 16979                           ;ECAN.c: 862: return FALSE;
 16980  0030FC  0E00               	movlw	0
 16981  0030FE  D0C2               	goto	l839
 16982  003100                     l8250:
 16983                           
 16984                           ; BSR set to: 0
 16985                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16986  003100  501C               	movf	ECANReceiveMessage@mode,w,c
 16987  003102  0A40               	xorlw	64
 16988  003104  E146               	bnz	l842
 16989                           
 16990                           ; BSR set to: 0
 16991                           ;ECAN.c: 875: {
 16992                           ;ECAN.c: 876: if ( RXB0FUL )
 16993  003106  AE60               	btfss	3936,7,c	;volatile
 16994  003108  D004               	goto	l843
 16995                           
 16996                           ; BSR set to: 0
 16997                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16998  00310A  0E0F               	movlw	15	;volatile
 16999  00310C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17000  00310E  0E60               	movlw	96	;volatile
 17001  003110  D03E               	goto	L41
 17002  003112                     l843:
 17003                           
 17004                           ; BSR set to: 0
 17005                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 17006  003112  010F               	movlb	15	; () banked
 17007  003114  AF50               	btfss	80,7,b	;volatile
 17008  003116  D004               	goto	l845
 17009                           
 17010                           ; BSR set to: 15
 17011                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 17012  003118  0E0F               	movlw	15	;volatile
 17013  00311A  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17014  00311C  0E50               	movlw	80	;volatile
 17015  00311E  D037               	goto	L41
 17016  003120                     l845:
 17017                           
 17018                           ; BSR set to: 15
 17019                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 17020  003120  010D               	movlb	13
 17021  003122  B5F8               	btfsc	248,2,b	;volatile
 17022  003124  D007               	goto	l847
 17023  003126  010E               	movlb	14
 17024  003128  AF20               	btfss	32,7,b	;volatile
 17025  00312A  D004               	goto	l847
 17026                           
 17027                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 17028  00312C  0E0E               	movlw	14	;volatile
 17029  00312E  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17030  003130  0E20               	movlw	32	;volatile
 17031  003132  D02D               	goto	L41
 17032  003134                     l847:
 17033                           
 17034                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 17035  003134  010D               	movlb	13
 17036  003136  B7F8               	btfsc	248,3,b	;volatile
 17037  003138  D007               	goto	l849
 17038  00313A  010E               	movlb	14
 17039  00313C  AF30               	btfss	48,7,b	;volatile
 17040  00313E  D004               	goto	l849
 17041                           
 17042                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 17043  003140  0E0E               	movlw	14	;volatile
 17044  003142  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17045  003144  0E30               	movlw	48	;volatile
 17046  003146  D023               	goto	L41
 17047  003148                     l849:
 17048                           
 17049                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 17050  003148  010D               	movlb	13
 17051  00314A  B9F8               	btfsc	248,4,b	;volatile
 17052  00314C  D007               	goto	l851
 17053  00314E  010E               	movlb	14
 17054  003150  AF40               	btfss	64,7,b	;volatile
 17055  003152  D004               	goto	l851
 17056                           
 17057                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 17058  003154  0E0E               	movlw	14	;volatile
 17059  003156  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17060  003158  0E40               	movlw	64	;volatile
 17061  00315A  D019               	goto	L41
 17062  00315C                     l851:
 17063                           
 17064                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 17065  00315C  010D               	movlb	13
 17066  00315E  BBF8               	btfsc	248,5,b	;volatile
 17067  003160  D005               	goto	l853
 17068  003162  010E               	movlb	14
 17069  003164  AF50               	btfss	80,7,b	;volatile
 17070  003166  D002               	goto	l853
 17071                           
 17072                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 17073  003168  0E0E               	movlw	14	;volatile
 17074  00316A  D7D7               	goto	L42
 17075  00316C                     l853:
 17076                           
 17077                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 17078  00316C  010D               	movlb	13
 17079  00316E  BDF8               	btfsc	248,6,b	;volatile
 17080  003170  D005               	goto	l855
 17081  003172  010E               	movlb	14
 17082  003174  AF60               	btfss	96,7,b	;volatile
 17083  003176  D002               	goto	l855
 17084                           
 17085                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 17086  003178  0E0E               	movlw	14	;volatile
 17087  00317A  D7C8               	goto	L43
 17088  00317C                     l855:
 17089                           
 17090                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 17091  00317C  010D               	movlb	13
 17092  00317E  BFF8               	btfsc	248,7,b	;volatile
 17093  003180  D7BD               	goto	l8244
 17094  003182  010E               	movlb	14
 17095  003184  AF70               	btfss	112,7,b	;volatile
 17096  003186  D7BA               	goto	l8244
 17097                           
 17098                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 17099  003188  0E0E               	movlw	14	;volatile
 17100  00318A  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17101  00318C  0E70               	movlw	112	;volatile
 17102  00318E                     L41:
 17103  00318E  6E1E               	movwf	ECANReceiveMessage@ptr,c
 17104  003190  D00A               	goto	l8294
 17105  003192                     l842:
 17106                           
 17107                           ; BSR set to: 0
 17108                           ;ECAN.c: 910: else
 17109                           ;ECAN.c: 915: {
 17110                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 17111  003192  AE74               	btfss	3956,7,c	;volatile
 17112  003194  D7B3               	goto	l8244
 17113                           
 17114                           ; BSR set to: 0
 17115                           ;ECAN.c: 917: {
 17116                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 17117  003196  506F               	movf	3951,w,c	;volatile
 17118  003198  0B07               	andlw	7
 17119  00319A  ECB7  F024         	call	__ECANPointBuffer
 17120  00319E  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 17121  0031A2  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 17122  0031A6                     l8294:
 17123                           
 17124                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 17125  0031A6  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17126  0031AA  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17127  0031AE  50DF               	movf	indf2,w,c
 17128  0031B0  0B1F               	andlw	31
 17129  0031B2  6E48               	movwf	__ECANRxFilterHitInfo,c
 17130                           
 17131                           ;ECAN.c: 932: RXB1IF = 0;
 17132  0031B4  92A4               	bcf	4004,1,c	;volatile
 17133                           
 17134                           ;ECAN.c: 934: if ( RXB1OVFL )
 17135  0031B6  AC74               	btfss	3956,6,c	;volatile
 17136  0031B8  D006               	goto	l8304
 17137                           
 17138                           ;ECAN.c: 935: {
 17139                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 17140  0031BA  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17141  0031BC  6ED9               	movwf	fsr2l,c
 17142  0031BE  6ADA               	clrf	fsr2h,c
 17143  0031C0  0E00               	movlw	0
 17144  0031C2  86DB               	bsf	plusw2,3,c
 17145                           
 17146                           ;ECAN.c: 937: RXB1OVFL = 0;
 17147  0031C4  9C74               	bcf	3956,6,c	;volatile
 17148  0031C6                     l8304:
 17149                           
 17150                           ;ECAN.c: 942: savedPtr = ptr;
 17151  0031C6  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 17152  0031CA  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 17153                           
 17154                           ;ECAN.c: 943: *msgFlags = 0;
 17155  0031CE  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17156  0031D0  6ED9               	movwf	fsr2l,c
 17157  0031D2  6ADA               	clrf	fsr2h,c
 17158  0031D4  6ADF               	clrf	indf2,c
 17159                           
 17160                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17161  0031D6  EE20 F005          	lfsr	2,5
 17162  0031DA  D855               	call	PL66	;call to abstracted procedure
 17163                           
 17164                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17165  0031DC  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17166  0031DE  6ED9               	movwf	fsr2l,c
 17167  0031E0  6ADA               	clrf	fsr2h,c
 17168  0031E2  501D               	movf	ECANReceiveMessage@temp,w,c
 17169  0031E4  0B0F               	andlw	15
 17170  0031E6  6EDF               	movwf	indf2,c
 17171                           
 17172                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17173  0031E8  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 17174  0031EA  D005               	goto	l863
 17175                           
 17176                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17177  0031EC  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17178  0031EE  6ED9               	movwf	fsr2l,c
 17179  0031F0  6ADA               	clrf	fsr2h,c
 17180  0031F2  0E00               	movlw	0
 17181  0031F4  8CDB               	bsf	plusw2,6,c
 17182  0031F6                     l863:
 17183                           
 17184                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17185  0031F6  EE20 F002          	lfsr	2,2
 17186  0031FA  D845               	call	PL66	;call to abstracted procedure
 17187                           
 17188                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17189  0031FC  A61D               	btfss	ECANReceiveMessage@temp,3,c
 17190  0031FE  D008               	goto	l864
 17191                           
 17192                           ;ECAN.c: 956: {
 17193                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17194  003200  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17195  003202  6ED9               	movwf	fsr2l,c
 17196  003204  6ADA               	clrf	fsr2h,c
 17197  003206  0E00               	movlw	0
 17198  003208  8ADB               	bsf	plusw2,5,c
 17199                           
 17200                           ;ECAN.c: 958: temp.Val = 1;
 17201  00320A  0E01               	movlw	1
 17202  00320C  6E1D               	movwf	ECANReceiveMessage@temp,c
 17203                           
 17204                           ;ECAN.c: 959: }
 17205  00320E  D001               	goto	l8322
 17206  003210                     l864:
 17207                           
 17208                           ;ECAN.c: 960: else
 17209                           ;ECAN.c: 961: temp.Val = 0;
 17210  003210  6A1D               	clrf	ECANReceiveMessage@temp,c
 17211  003212                     l8322:
 17212                           
 17213                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17214  003212  281E               	incf	ECANReceiveMessage@ptr,w,c
 17215  003214  6E0E               	movwf	?__RegsToCANID,c
 17216  003216  0E00               	movlw	0
 17217  003218  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17218  00321A  6E0F               	movwf	?__RegsToCANID+1,c
 17219  00321C  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17220  003220  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17221  003224  ECFD  F01C         	call	__RegsToCANID	;wreg free
 17222                           
 17223                           ;ECAN.c: 966: ptr += 6;
 17224  003228  0E06               	movlw	6
 17225  00322A  261E               	addwf	ECANReceiveMessage@ptr,f,c
 17226  00322C  0E00               	movlw	0
 17227  00322E  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17228                           
 17229                           ;ECAN.c: 967: temp.Val = *dataLen;
 17230  003230  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17231  003232  6ED9               	movwf	fsr2l,c
 17232  003234  6ADA               	clrf	fsr2h,c
 17233  003236  50DF               	movf	indf2,w,c
 17234  003238  6E1D               	movwf	ECANReceiveMessage@temp,c
 17235                           
 17236                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17237  00323A  6A1B               	clrf	ECANReceiveMessage@i,c
 17238  00323C  D00D               	goto	l8338
 17239  00323E                     l8330:
 17240                           
 17241                           ;ECAN.c: 969: *data++ = *ptr++;
 17242  00323E  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17243  003242  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17244  003246  5015               	movf	ECANReceiveMessage@data,w,c
 17245  003248  6EE1               	movwf	fsr1l,c
 17246  00324A  6AE2               	clrf	fsr1h,c
 17247  00324C  CFDF FFE7          	movff	indf2,indf1
 17248  003250  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 17249  003252  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 17250  003254  2A15               	incf	ECANReceiveMessage@data,f,c
 17251  003256  2A1B               	incf	ECANReceiveMessage@i,f,c
 17252  003258                     l8338:
 17253  003258  501D               	movf	ECANReceiveMessage@temp,w,c
 17254  00325A  5C1B               	subwf	ECANReceiveMessage@i,w,c
 17255  00325C  E3F0               	bnc	l8330
 17256                           
 17257                           ;ECAN.c: 972: if ( IRXIF )
 17258  00325E  AEA4               	btfss	4004,7,c	;volatile
 17259  003260  D006               	goto	l8344
 17260                           
 17261                           ;ECAN.c: 973: {
 17262                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17263  003262  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17264  003264  6ED9               	movwf	fsr2l,c
 17265  003266  6ADA               	clrf	fsr2h,c
 17266  003268  0E00               	movlw	0
 17267  00326A  88DB               	bsf	plusw2,4,c
 17268                           
 17269                           ;ECAN.c: 975: IRXIF = 0;
 17270  00326C  9EA4               	bcf	4004,7,c	;volatile
 17271  00326E                     l8344:
 17272                           
 17273                           ;ECAN.c: 976: }
 17274                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17275  00326E  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17276  003272  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17277  003276  0E7F               	movlw	127
 17278  003278  16DF               	andwf	indf2,f,c
 17279                           
 17280                           ;ECAN.c: 983: if ( mode == 0x80 )
 17281  00327A  501C               	movf	ECANReceiveMessage@mode,w,c
 17282  00327C  0A80               	xorlw	128
 17283  00327E  B4D8               	btfsc	status,2,c
 17284                           
 17285                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17286  003280  9E74               	bcf	3956,7,c	;volatile
 17287                           
 17288                           ;ECAN.c: 990: return TRUE;
 17289  003282  0E01               	movlw	1
 17290  003284                     l839:
 17291  003284  0012               	return	
 17292  003286                     __end_of_ECANReceiveMessage:
 17293                           	opt stack 0
 17294  003286                     PL66:
 17295                           	opt stack 23
 17296  003286  501E               	movf	ECANReceiveMessage@ptr,w,c
 17297  003288  26D9               	addwf	fsr2l,f,c
 17298  00328A  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 17299  00328C  22DA               	addwfc	fsr2h,f,c
 17300  00328E  50DF               	movf	indf2,w,c
 17301  003290  6E1D               	movwf	ECANReceiveMessage@temp,c
 17302  003292  0012               	return	
 17303  003294                     __end_ofPL66:
 17304                           	opt stack 0
 17305                           tblptru	equ	0xFF8
 17306                           tblptrh	equ	0xFF7
 17307                           tblptrl	equ	0xFF6
 17308                           tablat	equ	0xFF5
 17309                           prodh	equ	0xFF4
 17310                           prodl	equ	0xFF3
 17311                           intcon	equ	0xFF2
 17312                           postinc0	equ	0xFEE
 17313                           wreg	equ	0xFE8
 17314                           indf1	equ	0xFE7
 17315                           postdec1	equ	0xFE5
 17316                           fsr1h	equ	0xFE2
 17317                           fsr1l	equ	0xFE1
 17318                           indf2	equ	0xFDF
 17319                           postinc2	equ	0xFDE
 17320                           postdec2	equ	0xFDD
 17321                           plusw2	equ	0xFDB
 17322                           fsr2h	equ	0xFDA
 17323                           fsr2l	equ	0xFD9
 17324                           status	equ	0xFD8
 17325                           
 17326 ;; *************** function __RegsToCANID *****************
 17327 ;; Defined at:
 17328 ;;		line 1156 in file "../ECAN.c"
 17329 ;; Parameters:    Size  Location     Type
 17330 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17331 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17332 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17333 ;;  val             1   15[COMRAM] PTR unsigned long 
 17334 ;;		 -> getVSCPFrame@id(4), 
 17335 ;;  type            1   16[COMRAM] unsigned char 
 17336 ;; Auto vars:     Size  Location     Type
 17337 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17338 ;;		 -> getVSCPFrame@id(4), 
 17339 ;; Return value:  Size  Location     Type
 17340 ;;		None               void
 17341 ;; Registers used:
 17342 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17343 ;; Tracked objects:
 17344 ;;		On entry : 0/0
 17345 ;;		On exit  : 0/0
 17346 ;;		Unchanged: 0/0
 17347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17348 ;;      Params:         4       0       0       0       0       0       0
 17349 ;;      Locals:         1       0       0       0       0       0       0
 17350 ;;      Temps:          2       0       0       0       0       0       0
 17351 ;;      Totals:         7       0       0       0       0       0       0
 17352 ;;Total ram usage:        7 bytes
 17353 ;; Hardware stack levels used:    1
 17354 ;; Hardware stack levels required when called:    2
 17355 ;; This function calls:
 17356 ;;		Nothing
 17357 ;; This function is called by:
 17358 ;;		_ECANReceiveMessage
 17359 ;; This function uses a non-reentrant model
 17360 ;;
 17361                           
 17362                           	psect	text79
 17363  0039FA                     __ptext79:
 17364                           	opt stack 0
 17365  0039FA                     __RegsToCANID:
 17366                           	opt stack 23
 17367                           
 17368                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17369                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17370                           
 17371                           ;incstack = 0
 17372                           ;incstack = 0
 17373  0039FA  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17374                           
 17375                           ;ECAN.c: 1161: if ( type == 0 )
 17376  0039FE  6611               	tstfsz	__RegsToCANID@type,c
 17377  003A00  D02B               	goto	l8418
 17378                           
 17379                           ;ECAN.c: 1162: {
 17380                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17381  003A02  5014               	movf	__RegsToCANID@Value,w,c
 17382  003A04  6ED9               	movwf	fsr2l,c
 17383  003A06  D86C               	call	PL42	;call to abstracted procedure
 17384  003A08  3612               	rlcf	??__RegsToCANID,f,c
 17385  003A0A  90D8               	bcf	status,0,c
 17386  003A0C  3612               	rlcf	??__RegsToCANID,f,c
 17387  003A0E  90D8               	bcf	status,0,c
 17388  003A10  3412               	rlcf	??__RegsToCANID,w,c
 17389  003A12  6EDF               	movwf	indf2,c
 17390                           
 17391                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17392  003A14  5014               	movf	__RegsToCANID@Value,w,c
 17393  003A16  6ED9               	movwf	fsr2l,c
 17394  003A18  6ADA               	clrf	fsr2h,c
 17395  003A1A  2AD9               	incf	fsr2l,f,c
 17396  003A1C  6ADA               	clrf	fsr2h,c
 17397  003A1E  D873               	call	PL50	;call to abstracted procedure
 17398  003A20                     u5915:
 17399  003A20  90D8               	bcf	status,0,c
 17400  003A22  3212               	rrcf	??__RegsToCANID,f,c
 17401  003A24  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17402  003A26  D7FC               	goto	u5915
 17403  003A28  5012               	movf	??__RegsToCANID,w,c
 17404                           
 17405                           ;ECAN.c: 1166: ptr++;
 17406                           
 17407                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17408  003A2A  D863               	call	PL44	;call to abstracted procedure
 17409  003A2C  0E05               	movlw	5
 17410  003A2E  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17411  003A30                     u5925:
 17412  003A30  90D8               	bcf	status,0,c
 17413  003A32  3212               	rrcf	??__RegsToCANID,f,c
 17414  003A34  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17415  003A36  D7FC               	goto	u5925
 17416  003A38  5014               	movf	__RegsToCANID@Value,w,c
 17417  003A3A  6ED9               	movwf	fsr2l,c
 17418  003A3C  6ADA               	clrf	fsr2h,c
 17419  003A3E  5012               	movf	??__RegsToCANID,w,c
 17420  003A40  12DF               	iorwf	indf2,f,c
 17421                           
 17422                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17423  003A42  D83D               	call	PL18	;call to abstracted procedure
 17424  003A44  6ADF               	clrf	indf2,c
 17425                           
 17426                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17427  003A46  5014               	movf	__RegsToCANID@Value,w,c
 17428  003A48  6ED9               	movwf	fsr2l,c
 17429  003A4A  6ADA               	clrf	fsr2h,c
 17430  003A4C  0E03               	movlw	3
 17431  003A4E  26D9               	addwf	fsr2l,f,c
 17432  003A50  6ADA               	clrf	fsr2h,c
 17433  003A52  0E00               	movlw	0
 17434  003A54  6EDF               	movwf	indf2,c
 17435                           
 17436                           ;ECAN.c: 1170: }
 17437  003A56  D032               	goto	l886
 17438  003A58                     l8418:
 17439                           
 17440                           ;ECAN.c: 1171: else
 17441                           ;ECAN.c: 1172: {
 17442                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17443  003A58  D832               	call	PL18	;call to abstracted procedure
 17444  003A5A  D855               	call	PL50	;call to abstracted procedure
 17445  003A5C                     u5935:
 17446  003A5C  90D8               	bcf	status,0,c
 17447  003A5E  3612               	rlcf	??__RegsToCANID,f,c
 17448  003A60  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17449  003A62  D7FC               	goto	u5935
 17450  003A64  5012               	movf	??__RegsToCANID,w,c
 17451  003A66  6EDF               	movwf	indf2,c
 17452                           
 17453                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17454  003A68  5014               	movf	__RegsToCANID@Value,w,c
 17455  003A6A  6ED9               	movwf	fsr2l,c
 17456  003A6C  6ADA               	clrf	fsr2h,c
 17457  003A6E  0E03               	movlw	3
 17458  003A70  26D9               	addwf	fsr2l,f,c
 17459  003A72  D836               	call	PL42	;call to abstracted procedure
 17460  003A74  3212               	rrcf	??__RegsToCANID,f,c
 17461  003A76  90D8               	bcf	status,0,c
 17462  003A78  3212               	rrcf	??__RegsToCANID,f,c
 17463  003A7A  90D8               	bcf	status,0,c
 17464  003A7C  3012               	rrcf	??__RegsToCANID,w,c
 17465                           
 17466                           ;ECAN.c: 1176: ptr++;
 17467                           
 17468                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17469  003A7E  D839               	call	PL44	;call to abstracted procedure
 17470  003A80  0E03               	movlw	3
 17471  003A82  1612               	andwf	??__RegsToCANID,f,c
 17472  003A84  D81C               	call	PL18	;call to abstracted procedure
 17473  003A86  5012               	movf	??__RegsToCANID,w,c
 17474  003A88  12DF               	iorwf	indf2,f,c
 17475                           
 17476                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17477  003A8A  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17478  003A8E  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17479  003A92  50DF               	movf	indf2,w,c
 17480  003A94  6E12               	movwf	??__RegsToCANID& (0+255),c
 17481  003A96  90D8               	bcf	status,0,c
 17482  003A98  3212               	rrcf	??__RegsToCANID,f,c
 17483  003A9A  90D8               	bcf	status,0,c
 17484  003A9C  3212               	rrcf	??__RegsToCANID,f,c
 17485  003A9E  90D8               	bcf	status,0,c
 17486  003AA0  3212               	rrcf	??__RegsToCANID,f,c
 17487  003AA2  0E1C               	movlw	28
 17488  003AA4  1612               	andwf	??__RegsToCANID,f,c
 17489  003AA6  D80B               	call	PL18	;call to abstracted procedure
 17490  003AA8  5012               	movf	??__RegsToCANID,w,c
 17491  003AAA  12DF               	iorwf	indf2,f,c
 17492                           
 17493                           ;ECAN.c: 1180: ptr++;
 17494                           
 17495                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17496  003AAC  D80F               	call	PL36	;call to abstracted procedure
 17497  003AAE  2AE1               	incf	fsr1l,f,c
 17498  003AB0  6AE2               	clrf	fsr1h,c
 17499  003AB2  CFDF FFE7          	movff	indf2,indf1
 17500                           
 17501                           ;ECAN.c: 1182: ptr++;
 17502                           
 17503                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17504  003AB6  D80A               	call	PL36	;call to abstracted procedure
 17505  003AB8  CFDF FFE7          	movff	indf2,indf1
 17506  003ABC                     l886:
 17507  003ABC  0012               	return	
 17508  003ABE                     __end_of__RegsToCANID:
 17509                           	opt stack 0
 17510  003ABE                     PL18:
 17511                           	opt stack 23
 17512  003ABE  5014               	movf	__RegsToCANID@Value,w,c
 17513  003AC0  6ED9               	movwf	fsr2l,c
 17514  003AC2  6ADA               	clrf	fsr2h,c
 17515  003AC4  0E02               	movlw	2
 17516  003AC6  26D9               	addwf	fsr2l,f,c
 17517  003AC8  6ADA               	clrf	fsr2h,c
 17518  003ACA  0012               	return	
 17519  003ACC                     __end_ofPL18:
 17520                           	opt stack 0
 17521  003ACC                     PL36:
 17522                           	opt stack 23
 17523  003ACC  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17524  003ACE  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17525  003AD0  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17526  003AD4  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17527  003AD8  5014               	movf	__RegsToCANID@Value,w,c
 17528  003ADA  6EE1               	movwf	fsr1l,c
 17529  003ADC  6AE2               	clrf	fsr1h,c
 17530  003ADE  0012               	return	
 17531  003AE0                     __end_ofPL36:
 17532                           	opt stack 0
 17533  003AE0                     PL42:
 17534                           	opt stack 23
 17535  003AE0  6ADA               	clrf	fsr2h,c
 17536  003AE2  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17537  003AE6  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17538  003AEA  50E7               	movf	indf1,w,c
 17539  003AEC  6E12               	movwf	??__RegsToCANID& (0+255),c
 17540  003AEE  90D8               	bcf	status,0,c
 17541  003AF0  0012               	return	
 17542  003AF2                     __end_ofPL42:
 17543                           	opt stack 0
 17544  003AF2                     PL44:
 17545                           	opt stack 23
 17546  003AF2  6EDF               	movwf	indf2,c
 17547  003AF4  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17548  003AF6  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17549  003AF8  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17550  003AFC  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17551  003B00  50DF               	movf	indf2,w,c
 17552  003B02  6E12               	movwf	??__RegsToCANID& (0+255),c
 17553  003B04  0012               	return	
 17554  003B06                     __end_ofPL44:
 17555                           	opt stack 0
 17556  003B06                     PL50:
 17557                           	opt stack 23
 17558  003B06  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17559  003B0A  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17560  003B0E  50E7               	movf	indf1,w,c
 17561  003B10  6E12               	movwf	??__RegsToCANID& (0+255),c
 17562  003B12  0E05               	movlw	5
 17563  003B14  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17564  003B16  0C05               	retlw	5
 17565  003B18                     __end_ofPL50:
 17566                           	opt stack 0
 17567                           tblptru	equ	0xFF8
 17568                           tblptrh	equ	0xFF7
 17569                           tblptrl	equ	0xFF6
 17570                           tablat	equ	0xFF5
 17571                           prodh	equ	0xFF4
 17572                           prodl	equ	0xFF3
 17573                           intcon	equ	0xFF2
 17574                           postinc0	equ	0xFEE
 17575                           wreg	equ	0xFE8
 17576                           indf1	equ	0xFE7
 17577                           postdec1	equ	0xFE5
 17578                           fsr1h	equ	0xFE2
 17579                           fsr1l	equ	0xFE1
 17580                           indf2	equ	0xFDF
 17581                           postinc2	equ	0xFDE
 17582                           postdec2	equ	0xFDD
 17583                           plusw2	equ	0xFDB
 17584                           fsr2h	equ	0xFDA
 17585                           fsr2l	equ	0xFD9
 17586                           status	equ	0xFD8
 17587                           
 17588 ;; *************** function __ECANPointBuffer *****************
 17589 ;; Defined at:
 17590 ;;		line 1207 in file "../ECAN.c"
 17591 ;; Parameters:    Size  Location     Type
 17592 ;;  b               1    wreg     unsigned char 
 17593 ;; Auto vars:     Size  Location     Type
 17594 ;;  b               1   16[COMRAM] unsigned char 
 17595 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17596 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17597 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17598 ;; Return value:  Size  Location     Type
 17599 ;;                  2   13[COMRAM] PTR unsigned char 
 17600 ;; Registers used:
 17601 ;;		wreg, status,2, status,0
 17602 ;; Tracked objects:
 17603 ;;		On entry : F/0
 17604 ;;		On exit  : 0/0
 17605 ;;		Unchanged: 0/0
 17606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17607 ;;      Params:         3       0       0       0       0       0       0
 17608 ;;      Locals:         3       0       0       0       0       0       0
 17609 ;;      Temps:          0       0       0       0       0       0       0
 17610 ;;      Totals:         6       0       0       0       0       0       0
 17611 ;;Total ram usage:        6 bytes
 17612 ;; Hardware stack levels used:    1
 17613 ;; Hardware stack levels required when called:    2
 17614 ;; This function calls:
 17615 ;;		Nothing
 17616 ;; This function is called by:
 17617 ;;		_ECANReceiveMessage
 17618 ;; This function uses a non-reentrant model
 17619 ;;
 17620                           
 17621                           	psect	text80
 17622  00496E                     __ptext80:
 17623                           	opt stack 0
 17624  00496E                     __ECANPointBuffer:
 17625                           	opt stack 23
 17626                           
 17627                           ;incstack = 0
 17628                           ;incstack = 0
 17629                           ;__ECANPointBuffer@b stored from wreg
 17630  00496E  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17631                           
 17632                           ; BSR set to: 0
 17633                           ;ECAN.c: 1208: BYTE* pt;
 17634                           ;ECAN.c: 1210: switch(b)
 17635  004972  D024               	goto	l8404
 17636  004974                     l8386:
 17637                           
 17638                           ; BSR set to: 0
 17639                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17640  004974  0E0F               	movlw	15	;volatile
 17641  004976  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17642  004978  0E60               	movlw	96	;volatile
 17643  00497A  D01E               	goto	L50
 17644  00497C                     l8388:
 17645                           
 17646                           ; BSR set to: 0
 17647                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17648  00497C  010F               	movlb	15	; () banked
 17649  00497E  0E0F               	movlw	15	;volatile
 17650  004980  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17651  004982  0E50               	movlw	80	;volatile
 17652  004984  D019               	goto	L50
 17653  004986                     l8390:
 17654                           
 17655                           ; BSR set to: 0
 17656                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17657  004986  010E               	movlb	14	; () banked
 17658  004988  0E0E               	movlw	14	;volatile
 17659  00498A  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17660  00498C  0E20               	movlw	32	;volatile
 17661  00498E  D014               	goto	L50
 17662  004990                     l8392:
 17663                           
 17664                           ; BSR set to: 0
 17665                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17666  004990  010E               	movlb	14	; () banked
 17667  004992  0E0E               	movlw	14	;volatile
 17668  004994  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17669  004996  0E30               	movlw	48	;volatile
 17670  004998  D00F               	goto	L50
 17671  00499A                     l8394:
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17675  00499A  010E               	movlb	14	; () banked
 17676  00499C  0E0E               	movlw	14	;volatile
 17677  00499E  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17678  0049A0  0E40               	movlw	64	;volatile
 17679  0049A2  D00A               	goto	L50
 17680  0049A4                     l8396:
 17681                           
 17682                           ; BSR set to: 0
 17683                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17684  0049A4  010E               	movlb	14	; () banked
 17685  0049A6  0E0E               	movlw	14	;volatile
 17686  0049A8  D7EB               	goto	L51
 17687  0049AA                     l8398:
 17688                           
 17689                           ; BSR set to: 0
 17690                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17691  0049AA  010E               	movlb	14	; () banked
 17692  0049AC  0E0E               	movlw	14	;volatile
 17693  0049AE  D7E3               	goto	L52
 17694  0049B0                     l8400:
 17695                           
 17696                           ; BSR set to: 0
 17697                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17698  0049B0  010E               	movlb	14	; () banked
 17699  0049B2  0E0E               	movlw	14	;volatile
 17700  0049B4  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17701  0049B6  0E70               	movlw	112	;volatile
 17702  0049B8                     L50:
 17703  0049B8  6E12               	movwf	__ECANPointBuffer@pt,c
 17704                           
 17705                           ;ECAN.c: 1235: break;
 17706  0049BA  D00F               	goto	l891
 17707  0049BC                     l8404:
 17708                           
 17709                           ; BSR set to: 0
 17710  0049BC  5011               	movf	__ECANPointBuffer@b,w,c
 17711                           
 17712                           ; Switch size 1, requested type "space"
 17713                           ; Number of cases is 7, Range of values is 0 to 6
 17714                           ; switch strategies available:
 17715                           ; Name         Instructions Cycles
 17716                           ; simple_byte           22    12 (average)
 17717                           ;	Chosen strategy is simple_byte
 17718  0049BE  E0DA               	bz	l8386
 17719  0049C0  0A01               	xorlw	1	; case 1
 17720  0049C2  E0DC               	bz	l8388
 17721  0049C4  0A03               	xorlw	3	; case 2
 17722  0049C6  E0DF               	bz	l8390
 17723  0049C8  0A01               	xorlw	1	; case 3
 17724  0049CA  E0E2               	bz	l8392
 17725  0049CC  0A07               	xorlw	7	; case 4
 17726  0049CE  E0E5               	bz	l8394
 17727  0049D0  0A01               	xorlw	1	; case 5
 17728  0049D2  E0E8               	bz	l8396
 17729  0049D4  0A03               	xorlw	3	; case 6
 17730  0049D6  E0E9               	bz	l8398
 17731  0049D8  D7EB               	goto	l8400
 17732  0049DA                     l891:
 17733                           
 17734                           ;ECAN.c: 1237: return (pt);
 17735  0049DA  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17736  0049DE  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17737  0049E2  0012               	return	
 17738  0049E4                     __end_of__ECANPointBuffer:
 17739                           	opt stack 0
 17740                           tblptru	equ	0xFF8
 17741                           tblptrh	equ	0xFF7
 17742                           tblptrl	equ	0xFF6
 17743                           tablat	equ	0xFF5
 17744                           prodh	equ	0xFF4
 17745                           prodl	equ	0xFF3
 17746                           intcon	equ	0xFF2
 17747                           postinc0	equ	0xFEE
 17748                           wreg	equ	0xFE8
 17749                           indf1	equ	0xFE7
 17750                           postdec1	equ	0xFE5
 17751                           fsr1h	equ	0xFE2
 17752                           fsr1l	equ	0xFE1
 17753                           indf2	equ	0xFDF
 17754                           postinc2	equ	0xFDE
 17755                           postdec2	equ	0xFDD
 17756                           plusw2	equ	0xFDB
 17757                           fsr2h	equ	0xFDA
 17758                           fsr2l	equ	0xFD9
 17759                           status	equ	0xFD8
 17760                           
 17761 ;; *************** function _vscp_check_pstorage *****************
 17762 ;; Defined at:
 17763 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 17764 ;; Parameters:    Size  Location     Type
 17765 ;;		None
 17766 ;; Auto vars:     Size  Location     Type
 17767 ;;		None
 17768 ;; Return value:  Size  Location     Type
 17769 ;;                  1    wreg      unsigned char 
 17770 ;; Registers used:
 17771 ;;		wreg, status,2, status,0, cstack
 17772 ;; Tracked objects:
 17773 ;;		On entry : 0/0
 17774 ;;		On exit  : 0/0
 17775 ;;		Unchanged: 0/0
 17776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17777 ;;      Params:         0       0       0       0       0       0       0
 17778 ;;      Locals:         0       0       0       0       0       0       0
 17779 ;;      Temps:          0       0       0       0       0       0       0
 17780 ;;      Totals:         0       0       0       0       0       0       0
 17781 ;;Total ram usage:        0 bytes
 17782 ;; Hardware stack levels used:    1
 17783 ;; Hardware stack levels required when called:    4
 17784 ;; This function calls:
 17785 ;;		_vscp_writeNicknamePermanent
 17786 ;;		_vscp_getSegmentCRC
 17787 ;;		_vscp_setSegmentCRC
 17788 ;;		_vscp_setControlByte
 17789 ;; This function is called by:
 17790 ;;		_main
 17791 ;; This function uses a non-reentrant model
 17792 ;;
 17793                           
 17794                           	psect	text81
 17795  00513C                     __ptext81:
 17796                           	opt stack 0
 17797  00513C                     _vscp_check_pstorage:
 17798                           	opt stack 25
 17799                           
 17800                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17801                           
 17802                           ;incstack = 0
 17803                           ;incstack = 0
 17804  00513C  ECB4  F029         	call	_vscp_getSegmentCRC	;wreg free
 17805  005140  0BC0               	andlw	192
 17806  005142  0A40               	xorlw	64
 17807  005144  E102               	bnz	l9492
 17808                           
 17809                           ;vscp_firmware.c: 172: return !0;
 17810  005146  0E01               	movlw	1
 17811  005148  D00A               	goto	l1032
 17812  00514A                     l9492:
 17813                           
 17814                           ;vscp_firmware.c: 173: }
 17815                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 17816  00514A  0EFF               	movlw	255
 17817  00514C  EC80  F029         	call	_vscp_writeNicknamePermanent
 17818                           
 17819                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 17820  005150  0E00               	movlw	0
 17821  005152  EC77  F029         	call	_vscp_setSegmentCRC
 17822                           
 17823                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 17824  005156  0EA0               	movlw	160
 17825  005158  EC6E  F029         	call	_vscp_setControlByte
 17826                           
 17827                           ;vscp_firmware.c: 185: return 0;
 17828  00515C  0E00               	movlw	0
 17829  00515E                     l1032:
 17830  00515E  0012               	return	
 17831  005160                     __end_of_vscp_check_pstorage:
 17832                           	opt stack 0
 17833                           tblptru	equ	0xFF8
 17834                           tblptrh	equ	0xFF7
 17835                           tblptrl	equ	0xFF6
 17836                           tablat	equ	0xFF5
 17837                           prodh	equ	0xFF4
 17838                           prodl	equ	0xFF3
 17839                           intcon	equ	0xFF2
 17840                           postinc0	equ	0xFEE
 17841                           wreg	equ	0xFE8
 17842                           indf1	equ	0xFE7
 17843                           postdec1	equ	0xFE5
 17844                           fsr1h	equ	0xFE2
 17845                           fsr1l	equ	0xFE1
 17846                           indf2	equ	0xFDF
 17847                           postinc2	equ	0xFDE
 17848                           postdec2	equ	0xFDD
 17849                           plusw2	equ	0xFDB
 17850                           fsr2h	equ	0xFDA
 17851                           fsr2l	equ	0xFD9
 17852                           status	equ	0xFD8
 17853                           
 17854 ;; *************** function _vscp_setControlByte *****************
 17855 ;; Defined at:
 17856 ;;		line 2794 in file "../main.c"
 17857 ;; Parameters:    Size  Location     Type
 17858 ;;  ctrl            1    wreg     unsigned char 
 17859 ;; Auto vars:     Size  Location     Type
 17860 ;;  ctrl            1   16[COMRAM] unsigned char 
 17861 ;; Return value:  Size  Location     Type
 17862 ;;		None               void
 17863 ;; Registers used:
 17864 ;;		wreg, status,2, cstack
 17865 ;; Tracked objects:
 17866 ;;		On entry : 0/0
 17867 ;;		On exit  : 0/0
 17868 ;;		Unchanged: 0/0
 17869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17870 ;;      Params:         0       0       0       0       0       0       0
 17871 ;;      Locals:         1       0       0       0       0       0       0
 17872 ;;      Temps:          0       0       0       0       0       0       0
 17873 ;;      Totals:         1       0       0       0       0       0       0
 17874 ;;Total ram usage:        1 bytes
 17875 ;; Hardware stack levels used:    1
 17876 ;; Hardware stack levels required when called:    3
 17877 ;; This function calls:
 17878 ;;		_writeEEPROM
 17879 ;; This function is called by:
 17880 ;;		_vscp_check_pstorage
 17881 ;; This function uses a non-reentrant model
 17882 ;;
 17883                           
 17884                           	psect	text82
 17885  0052DC                     __ptext82:
 17886                           	opt stack 0
 17887  0052DC                     _vscp_setControlByte:
 17888                           	opt stack 25
 17889                           
 17890                           ;incstack = 0
 17891                           ;incstack = 0
 17892                           ;vscp_setControlByte@ctrl stored from wreg
 17893  0052DC  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17894                           
 17895                           ;main.c: 2795: writeEEPROM(0x03, ctrl);
 17896  0052E0  6A0F               	clrf	?_writeEEPROM+1,c
 17897  0052E2  0E03               	movlw	3
 17898  0052E4  6E0E               	movwf	?_writeEEPROM,c
 17899  0052E6  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17900  0052EA  EF67  F028         	goto	_writeEEPROM	;wreg free
 17901  0052EE                     __end_of_vscp_setControlByte:
 17902                           	opt stack 0
 17903                           tblptru	equ	0xFF8
 17904                           tblptrh	equ	0xFF7
 17905                           tblptrl	equ	0xFF6
 17906                           tablat	equ	0xFF5
 17907                           prodh	equ	0xFF4
 17908                           prodl	equ	0xFF3
 17909                           intcon	equ	0xFF2
 17910                           postinc0	equ	0xFEE
 17911                           wreg	equ	0xFE8
 17912                           indf1	equ	0xFE7
 17913                           postdec1	equ	0xFE5
 17914                           fsr1h	equ	0xFE2
 17915                           fsr1l	equ	0xFE1
 17916                           indf2	equ	0xFDF
 17917                           postinc2	equ	0xFDE
 17918                           postdec2	equ	0xFDD
 17919                           plusw2	equ	0xFDB
 17920                           fsr2h	equ	0xFDA
 17921                           fsr2l	equ	0xFD9
 17922                           status	equ	0xFD8
 17923                           
 17924 ;; *************** function _vscp_setSegmentCRC *****************
 17925 ;; Defined at:
 17926 ;;		line 2785 in file "../main.c"
 17927 ;; Parameters:    Size  Location     Type
 17928 ;;  crc             1    wreg     unsigned char 
 17929 ;; Auto vars:     Size  Location     Type
 17930 ;;  crc             1   16[COMRAM] unsigned char 
 17931 ;; Return value:  Size  Location     Type
 17932 ;;		None               void
 17933 ;; Registers used:
 17934 ;;		wreg, status,2, cstack
 17935 ;; Tracked objects:
 17936 ;;		On entry : 0/0
 17937 ;;		On exit  : 0/0
 17938 ;;		Unchanged: 0/0
 17939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17940 ;;      Params:         0       0       0       0       0       0       0
 17941 ;;      Locals:         1       0       0       0       0       0       0
 17942 ;;      Temps:          0       0       0       0       0       0       0
 17943 ;;      Totals:         1       0       0       0       0       0       0
 17944 ;;Total ram usage:        1 bytes
 17945 ;; Hardware stack levels used:    1
 17946 ;; Hardware stack levels required when called:    3
 17947 ;; This function calls:
 17948 ;;		_writeEEPROM
 17949 ;; This function is called by:
 17950 ;;		_vscp_check_pstorage
 17951 ;;		_vscp_handleProbeState
 17952 ;;		_vscp_handleHeartbeat
 17953 ;;		_vscp_handleSetNickname
 17954 ;; This function uses a non-reentrant model
 17955 ;;
 17956                           
 17957                           	psect	text83
 17958  0052EE                     __ptext83:
 17959                           	opt stack 0
 17960  0052EE                     _vscp_setSegmentCRC:
 17961                           	opt stack 24
 17962                           
 17963                           ;incstack = 0
 17964                           ;incstack = 0
 17965                           ;vscp_setSegmentCRC@crc stored from wreg
 17966  0052EE  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17967                           
 17968                           ;main.c: 2786: writeEEPROM(0x02, crc);
 17969  0052F2  6A0F               	clrf	?_writeEEPROM+1,c
 17970  0052F4  0E02               	movlw	2
 17971  0052F6  6E0E               	movwf	?_writeEEPROM,c
 17972  0052F8  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17973  0052FC  EF67  F028         	goto	_writeEEPROM	;wreg free
 17974  005300                     __end_of_vscp_setSegmentCRC:
 17975                           	opt stack 0
 17976                           tblptru	equ	0xFF8
 17977                           tblptrh	equ	0xFF7
 17978                           tblptrl	equ	0xFF6
 17979                           tablat	equ	0xFF5
 17980                           prodh	equ	0xFF4
 17981                           prodl	equ	0xFF3
 17982                           intcon	equ	0xFF2
 17983                           postinc0	equ	0xFEE
 17984                           wreg	equ	0xFE8
 17985                           indf1	equ	0xFE7
 17986                           postdec1	equ	0xFE5
 17987                           fsr1h	equ	0xFE2
 17988                           fsr1l	equ	0xFE1
 17989                           indf2	equ	0xFDF
 17990                           postinc2	equ	0xFDE
 17991                           postdec2	equ	0xFDD
 17992                           plusw2	equ	0xFDB
 17993                           fsr2h	equ	0xFDA
 17994                           fsr2l	equ	0xFD9
 17995                           status	equ	0xFD8
 17996                           
 17997 ;; *************** function _vscp_getSegmentCRC *****************
 17998 ;; Defined at:
 17999 ;;		line 2776 in file "../main.c"
 18000 ;; Parameters:    Size  Location     Type
 18001 ;;		None
 18002 ;; Auto vars:     Size  Location     Type
 18003 ;;		None
 18004 ;; Return value:  Size  Location     Type
 18005 ;;                  1    wreg      unsigned char 
 18006 ;; Registers used:
 18007 ;;		wreg, status,2, cstack
 18008 ;; Tracked objects:
 18009 ;;		On entry : 0/0
 18010 ;;		On exit  : 0/0
 18011 ;;		Unchanged: 0/0
 18012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18013 ;;      Params:         0       0       0       0       0       0       0
 18014 ;;      Locals:         0       0       0       0       0       0       0
 18015 ;;      Temps:          0       0       0       0       0       0       0
 18016 ;;      Totals:         0       0       0       0       0       0       0
 18017 ;;Total ram usage:        0 bytes
 18018 ;; Hardware stack levels used:    1
 18019 ;; Hardware stack levels required when called:    3
 18020 ;; This function calls:
 18021 ;;		_readEEPROM
 18022 ;; This function is called by:
 18023 ;;		_vscp_check_pstorage
 18024 ;;		_vscp_handleHeartbeat
 18025 ;; This function uses a non-reentrant model
 18026 ;;
 18027                           
 18028                           	psect	text84
 18029  005368                     __ptext84:
 18030                           	opt stack 0
 18031  005368                     _vscp_getSegmentCRC:
 18032                           	opt stack 24
 18033                           
 18034                           ;main.c: 2777: return readEEPROM(0x02);
 18035                           
 18036                           ;incstack = 0
 18037                           ;incstack = 0
 18038  005368  6A17               	clrf	?_readEEPROM+1,c
 18039  00536A  0E02               	movlw	2
 18040  00536C  6E16               	movwf	?_readEEPROM,c
 18041  00536E  EF64  F029         	goto	_readEEPROM	;wreg free
 18042  005372                     __end_of_vscp_getSegmentCRC:
 18043                           	opt stack 0
 18044                           tblptru	equ	0xFF8
 18045                           tblptrh	equ	0xFF7
 18046                           tblptrl	equ	0xFF6
 18047                           tablat	equ	0xFF5
 18048                           prodh	equ	0xFF4
 18049                           prodl	equ	0xFF3
 18050                           intcon	equ	0xFF2
 18051                           postinc0	equ	0xFEE
 18052                           wreg	equ	0xFE8
 18053                           indf1	equ	0xFE7
 18054                           postdec1	equ	0xFE5
 18055                           fsr1h	equ	0xFE2
 18056                           fsr1l	equ	0xFE1
 18057                           indf2	equ	0xFDF
 18058                           postinc2	equ	0xFDE
 18059                           postdec2	equ	0xFDD
 18060                           plusw2	equ	0xFDB
 18061                           fsr2h	equ	0xFDA
 18062                           fsr2l	equ	0xFD9
 18063                           status	equ	0xFD8
 18064                           
 18065 ;; *************** function _vscp_writeNicknamePermanent *****************
 18066 ;; Defined at:
 18067 ;;		line 2767 in file "../main.c"
 18068 ;; Parameters:    Size  Location     Type
 18069 ;;  nickname        1    wreg     unsigned char 
 18070 ;; Auto vars:     Size  Location     Type
 18071 ;;  nickname        1   16[COMRAM] unsigned char 
 18072 ;; Return value:  Size  Location     Type
 18073 ;;		None               void
 18074 ;; Registers used:
 18075 ;;		wreg, status,2, cstack
 18076 ;; Tracked objects:
 18077 ;;		On entry : 0/0
 18078 ;;		On exit  : 0/0
 18079 ;;		Unchanged: 0/0
 18080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18081 ;;      Params:         0       0       0       0       0       0       0
 18082 ;;      Locals:         1       0       0       0       0       0       0
 18083 ;;      Temps:          0       0       0       0       0       0       0
 18084 ;;      Totals:         1       0       0       0       0       0       0
 18085 ;;Total ram usage:        1 bytes
 18086 ;; Hardware stack levels used:    1
 18087 ;; Hardware stack levels required when called:    3
 18088 ;; This function calls:
 18089 ;;		_writeEEPROM
 18090 ;; This function is called by:
 18091 ;;		_vscp_check_pstorage
 18092 ;;		_vscp_handleProbeState
 18093 ;;		_vscp_handleHeartbeat
 18094 ;;		_vscp_handleSetNickname
 18095 ;;		_vscp_handleDropNickname
 18096 ;; This function uses a non-reentrant model
 18097 ;;
 18098                           
 18099                           	psect	text85
 18100  005300                     __ptext85:
 18101                           	opt stack 0
 18102  005300                     _vscp_writeNicknamePermanent:
 18103                           	opt stack 24
 18104                           
 18105                           ;incstack = 0
 18106                           ;incstack = 0
 18107                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18108  005300  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18109                           
 18110                           ;main.c: 2768: writeEEPROM( 0x01, nickname );
 18111  005304  6A0F               	clrf	?_writeEEPROM+1,c
 18112  005306  0E01               	movlw	1
 18113  005308  6E0E               	movwf	?_writeEEPROM,c
 18114  00530A  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 18115  00530E  EF67  F028         	goto	_writeEEPROM	;wreg free
 18116  005312                     __end_of_vscp_writeNicknamePermanent:
 18117                           	opt stack 0
 18118                           tblptru	equ	0xFF8
 18119                           tblptrh	equ	0xFF7
 18120                           tblptrl	equ	0xFF6
 18121                           tablat	equ	0xFF5
 18122                           prodh	equ	0xFF4
 18123                           prodl	equ	0xFF3
 18124                           intcon	equ	0xFF2
 18125                           postinc0	equ	0xFEE
 18126                           wreg	equ	0xFE8
 18127                           indf1	equ	0xFE7
 18128                           postdec1	equ	0xFE5
 18129                           fsr1h	equ	0xFE2
 18130                           fsr1l	equ	0xFE1
 18131                           indf2	equ	0xFDF
 18132                           postinc2	equ	0xFDE
 18133                           postdec2	equ	0xFDD
 18134                           plusw2	equ	0xFDB
 18135                           fsr2h	equ	0xFDA
 18136                           fsr2l	equ	0xFD9
 18137                           status	equ	0xFD8
 18138                           
 18139 ;; *************** function _writeEEPROM *****************
 18140 ;; Defined at:
 18141 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 18142 ;; Parameters:    Size  Location     Type
 18143 ;;  address         2   13[COMRAM] unsigned short 
 18144 ;;  data            1   15[COMRAM] unsigned char 
 18145 ;; Auto vars:     Size  Location     Type
 18146 ;;		None
 18147 ;; Return value:  Size  Location     Type
 18148 ;;		None               void
 18149 ;; Registers used:
 18150 ;;		wreg, status,2
 18151 ;; Tracked objects:
 18152 ;;		On entry : 0/0
 18153 ;;		On exit  : 0/0
 18154 ;;		Unchanged: 0/0
 18155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18156 ;;      Params:         3       0       0       0       0       0       0
 18157 ;;      Locals:         0       0       0       0       0       0       0
 18158 ;;      Temps:          0       0       0       0       0       0       0
 18159 ;;      Totals:         3       0       0       0       0       0       0
 18160 ;;Total ram usage:        3 bytes
 18161 ;; Hardware stack levels used:    1
 18162 ;; Hardware stack levels required when called:    2
 18163 ;; This function calls:
 18164 ;;		Nothing
 18165 ;; This function is called by:
 18166 ;;		_main
 18167 ;;		_doOneSecondWork
 18168 ;;		_init_app_eeprom
 18169 ;;		_vscp_writeAppReg
 18170 ;;		_vscp_setGUID
 18171 ;;		_vscp_setUserID
 18172 ;;		_vscp_setManufacturerId
 18173 ;;		_vscp_goBootloaderMode
 18174 ;;		_vscp_writeNicknamePermanent
 18175 ;;		_vscp_setSegmentCRC
 18176 ;;		_vscp_setControlByte
 18177 ;; This function uses a non-reentrant model
 18178 ;;
 18179                           
 18180                           	psect	text86
 18181  0050CE                     __ptext86:
 18182                           	opt stack 0
 18183  0050CE                     _writeEEPROM:
 18184                           	opt stack 26
 18185                           
 18186                           ;eeprom.c: 30: EEADR = address & 0xff;
 18187                           
 18188                           ;incstack = 0
 18189                           ;incstack = 0
 18190  0050CE  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 18191                           
 18192                           ;eeprom.c: 31: EEDATA = data;
 18193  0050D2  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18194                           
 18195                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 18196  0050D6  9EA6               	bcf	4006,7,c	;volatile
 18197                           
 18198                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 18199  0050D8  9CA6               	bcf	4006,6,c	;volatile
 18200                           
 18201                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 18202  0050DA  84A6               	bsf	4006,2,c	;volatile
 18203                           
 18204                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 18205  0050DC  9EF2               	bcf	intcon,7,c	;volatile
 18206                           
 18207                           ;eeprom.c: 38: EECON2 = 0x55;
 18208  0050DE  0E55               	movlw	85
 18209  0050E0  6EA7               	movwf	4007,c	;volatile
 18210                           
 18211                           ;eeprom.c: 39: EECON2 = 0xaa;
 18212  0050E2  0EAA               	movlw	170
 18213  0050E4  6EA7               	movwf	4007,c	;volatile
 18214                           
 18215                           ;eeprom.c: 40: EECON1bits.WR = 1;
 18216  0050E6  82A6               	bsf	4006,1,c	;volatile
 18217                           
 18218                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 18219  0050E8  8EF2               	bsf	intcon,7,c	;volatile
 18220  0050EA                     l914:
 18221  0050EA  A8A1               	btfss	4001,4,c	;volatile
 18222  0050EC  D7FE               	goto	l914
 18223                           
 18224                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 18225  0050EE  98A1               	bcf	4001,4,c	;volatile
 18226                           
 18227                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 18228  0050F0  94A6               	bcf	4006,2,c	;volatile
 18229  0050F2  0012               	return	
 18230  0050F4                     __end_of_writeEEPROM:
 18231                           	opt stack 0
 18232                           tblptru	equ	0xFF8
 18233                           tblptrh	equ	0xFF7
 18234                           tblptrl	equ	0xFF6
 18235                           tablat	equ	0xFF5
 18236                           prodh	equ	0xFF4
 18237                           prodl	equ	0xFF3
 18238                           intcon	equ	0xFF2
 18239                           postinc0	equ	0xFEE
 18240                           wreg	equ	0xFE8
 18241                           indf1	equ	0xFE7
 18242                           postdec1	equ	0xFE5
 18243                           fsr1h	equ	0xFE2
 18244                           fsr1l	equ	0xFE1
 18245                           indf2	equ	0xFDF
 18246                           postinc2	equ	0xFDE
 18247                           postdec2	equ	0xFDD
 18248                           plusw2	equ	0xFDB
 18249                           fsr2h	equ	0xFDA
 18250                           fsr2l	equ	0xFD9
 18251                           status	equ	0xFD8
 18252                           
 18253 ;; *************** function _init *****************
 18254 ;; Defined at:
 18255 ;;		line 879 in file "../main.c"
 18256 ;; Parameters:    Size  Location     Type
 18257 ;;		None
 18258 ;; Auto vars:     Size  Location     Type
 18259 ;;		None
 18260 ;; Return value:  Size  Location     Type
 18261 ;;		None               void
 18262 ;; Registers used:
 18263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18264 ;; Tracked objects:
 18265 ;;		On entry : 0/0
 18266 ;;		On exit  : 0/0
 18267 ;;		Unchanged: 0/0
 18268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18269 ;;      Params:         0       0       0       0       0       0       0
 18270 ;;      Locals:         0       0       0       0       0       0       0
 18271 ;;      Temps:          0       0       0       0       0       0       0
 18272 ;;      Totals:         0       0       0       0       0       0       0
 18273 ;;Total ram usage:        0 bytes
 18274 ;; Hardware stack levels used:    1
 18275 ;; Hardware stack levels required when called:    4
 18276 ;; This function calls:
 18277 ;;		_WriteTimer0
 18278 ;;		_ConvertADC
 18279 ;;		_init_app_ram
 18280 ;;		_OpenTimer0
 18281 ;;		_OpenADC
 18282 ;;		_ECANInitialize
 18283 ;; This function is called by:
 18284 ;;		_main
 18285 ;; This function uses a non-reentrant model
 18286 ;;
 18287                           
 18288                           	psect	text87
 18289  004EA0                     __ptext87:
 18290                           	opt stack 0
 18291  004EA0                     _init:
 18292                           	opt stack 25
 18293                           
 18294                           ;main.c: 883: init_app_ram();
 18295                           
 18296                           ;incstack = 0
 18297                           ;incstack = 0
 18298  004EA0  ECCF  F026         	call	_init_app_ram	;wreg free
 18299                           
 18300                           ; BSR set to: 0
 18301                           ;main.c: 891: TRISA = 0x07;
 18302  004EA4  0E07               	movlw	7
 18303  004EA6  6E92               	movwf	3986,c	;volatile
 18304                           
 18305                           ; BSR set to: 0
 18306                           ;main.c: 902: TRISB = 0x1B;
 18307  004EA8  0E1B               	movlw	27
 18308  004EAA  6E93               	movwf	3987,c	;volatile
 18309                           
 18310                           ; BSR set to: 0
 18311                           ;main.c: 912: TRISC = 0x01;
 18312  004EAC  0E01               	movlw	1
 18313  004EAE  6E94               	movwf	3988,c	;volatile
 18314                           
 18315                           ; BSR set to: 0
 18316                           ;main.c: 913: PORTC = 0x00;
 18317  004EB0  6A82               	clrf	3970,c	;volatile
 18318                           
 18319                           ; BSR set to: 0
 18320                           ;main.c: 915: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18321  004EB2  0E92               	movlw	146
 18322  004EB4  ECE1  F028         	call	_OpenTimer0
 18323                           
 18324                           ; BSR set to: 0
 18325                           ;main.c: 916: WriteTimer0(0xfb1d);
 18326  004EB8  0EFB               	movlw	251
 18327  004EBA  6E0F               	movwf	?_WriteTimer0+1,c
 18328  004EBC  0E1D               	movlw	29
 18329  004EBE  6E0E               	movwf	?_WriteTimer0,c
 18330  004EC0  EC89  F029         	call	_WriteTimer0	;wreg free
 18331                           
 18332                           ; BSR set to: 0
 18333                           ;main.c: 918: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18334                           ;main.c: 919: 0b10000111 & 0b11111111 & 0b11110100 &
 18335                           ;main.c: 920: 0b11111110 & 0b11111101,
 18336                           ;main.c: 921: 15);
 18337  004EC4  0E84               	movlw	132
 18338  004EC6  6E0E               	movwf	?_OpenADC,c
 18339  004EC8  0E0F               	movlw	15
 18340  004ECA  6E0F               	movwf	?_OpenADC+1,c
 18341  004ECC  0EEF               	movlw	239
 18342  004ECE  EC2C  F025         	call	_OpenADC
 18343                           
 18344                           ; BSR set to: 0
 18345                           ;main.c: 924: ECANInitialize();
 18346  004ED2  EC73  F023         	call	_ECANInitialize	;wreg free
 18347                           
 18348                           ;main.c: 948: INTCONbits.GIE = 1;
 18349  004ED6  8EF2               	bsf	intcon,7,c	;volatile
 18350                           
 18351                           ;main.c: 950: ConvertADC();
 18352  004ED8  EFBF  F029         	goto	_ConvertADC	;wreg free
 18353  004EDC                     __end_of_init:
 18354                           	opt stack 0
 18355                           tblptru	equ	0xFF8
 18356                           tblptrh	equ	0xFF7
 18357                           tblptrl	equ	0xFF6
 18358                           tablat	equ	0xFF5
 18359                           prodh	equ	0xFF4
 18360                           prodl	equ	0xFF3
 18361                           intcon	equ	0xFF2
 18362                           postinc0	equ	0xFEE
 18363                           wreg	equ	0xFE8
 18364                           indf1	equ	0xFE7
 18365                           postdec1	equ	0xFE5
 18366                           fsr1h	equ	0xFE2
 18367                           fsr1l	equ	0xFE1
 18368                           indf2	equ	0xFDF
 18369                           postinc2	equ	0xFDE
 18370                           postdec2	equ	0xFDD
 18371                           plusw2	equ	0xFDB
 18372                           fsr2h	equ	0xFDA
 18373                           fsr2l	equ	0xFD9
 18374                           status	equ	0xFD8
 18375                           
 18376 ;; *************** function _ECANInitialize *****************
 18377 ;; Defined at:
 18378 ;;		line 168 in file "../ECAN.c"
 18379 ;; Parameters:    Size  Location     Type
 18380 ;;		None
 18381 ;; Auto vars:     Size  Location     Type
 18382 ;;		None
 18383 ;; Return value:  Size  Location     Type
 18384 ;;		None               void
 18385 ;; Registers used:
 18386 ;;		wreg, status,2, status,0, cstack
 18387 ;; Tracked objects:
 18388 ;;		On entry : F/0
 18389 ;;		On exit  : 0/0
 18390 ;;		Unchanged: 0/0
 18391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18392 ;;      Params:         0       0       0       0       0       0       0
 18393 ;;      Locals:         0       0       0       0       0       0       0
 18394 ;;      Temps:          0       0       0       0       0       0       0
 18395 ;;      Totals:         0       0       0       0       0       0       0
 18396 ;;Total ram usage:        0 bytes
 18397 ;; Hardware stack levels used:    1
 18398 ;; Hardware stack levels required when called:    3
 18399 ;; This function calls:
 18400 ;;		_ECANSetOperationMode
 18401 ;; This function is called by:
 18402 ;;		_init
 18403 ;; This function uses a non-reentrant model
 18404 ;;
 18405                           
 18406                           	psect	text88
 18407  0046E6                     __ptext88:
 18408                           	opt stack 0
 18409  0046E6                     _ECANInitialize:
 18410                           	opt stack 25
 18411                           
 18412                           ; BSR set to: 0
 18413                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18414                           
 18415                           ;incstack = 0
 18416                           ;incstack = 0
 18417  0046E6  0E80               	movlw	128
 18418  0046E8  EC3A  F029         	call	_ECANSetOperationMode
 18419                           
 18420                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18421  0046EC  0E09               	movlw	9
 18422  0046EE  6E70               	movwf	3952,c	;volatile
 18423                           
 18424                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18425  0046F0  0EFC               	movlw	252
 18426  0046F2  6E71               	movwf	3953,c	;volatile
 18427                           
 18428                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18429                           ;ECAN.c: 181: (0 << 6) |
 18430                           ;ECAN.c: 182: (2-1);
 18431  0046F4  0E01               	movlw	1
 18432  0046F6  6E72               	movwf	3954,c	;volatile
 18433                           
 18434                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18435  0046F8  0E20               	movlw	32
 18436  0046FA  6E73               	movwf	3955,c	;volatile
 18437                           
 18438                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18439  0046FC  8E77               	bsf	3959,7,c	;volatile
 18440                           
 18441                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18442  0046FE  9C77               	bcf	3959,6,c	;volatile
 18443                           
 18444                           ;ECAN.c: 205: RXB0CON = 0;
 18445  004700  6A60               	clrf	3936,c	;volatile
 18446                           
 18447                           ;ECAN.c: 211: RXB1CON = 0;
 18448  004702  010F               	movlb	15	; () banked
 18449  004704  6B50               	clrf	80,b	;volatile
 18450                           
 18451                           ; BSR set to: 15
 18452                           ;ECAN.c: 221: B0CON = 0;
 18453  004706  010E               	movlb	14	; () banked
 18454  004708  6B20               	clrf	32,b	;volatile
 18455                           
 18456                           ; BSR set to: 14
 18457                           ;ECAN.c: 231: B1CON = 0;
 18458  00470A  6B30               	clrf	48,b	;volatile
 18459                           
 18460                           ; BSR set to: 14
 18461                           ;ECAN.c: 241: B2CON = 0;
 18462  00470C  6B40               	clrf	64,b	;volatile
 18463                           
 18464                           ; BSR set to: 14
 18465                           ;ECAN.c: 254: B3CON = 0 << 2;
 18466  00470E  6B50               	clrf	80,b	;volatile
 18467                           
 18468                           ; BSR set to: 14
 18469                           ;ECAN.c: 264: B4CON = 0 << 2;
 18470  004710  6B60               	clrf	96,b	;volatile
 18471                           
 18472                           ; BSR set to: 14
 18473                           ;ECAN.c: 274: B5CON = 0 << 2;
 18474  004712  6B70               	clrf	112,b	;volatile
 18475                           
 18476                           ; BSR set to: 14
 18477                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18478  004714  0EE0               	movlw	224
 18479  004716  010D               	movlb	13	; () banked
 18480  004718  6FF8               	movwf	248,b	;volatile
 18481                           
 18482                           ; BSR set to: 13
 18483                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18484  00471A  010F               	movlb	15	; () banked
 18485  00471C  6B00               	clrf	0,b	;volatile
 18486                           
 18487                           ; BSR set to: 15
 18488  00471E  0E08               	movlw	8
 18489  004720  6F01               	movwf	1,b	;volatile
 18490                           
 18491                           ; BSR set to: 15
 18492  004722  6B02               	clrf	2,b	;volatile
 18493                           
 18494                           ; BSR set to: 15
 18495  004724  6B03               	clrf	3,b	;volatile
 18496                           
 18497                           ; BSR set to: 15
 18498                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18499  004726  6B04               	clrf	4,b	;volatile
 18500                           
 18501                           ; BSR set to: 15
 18502  004728  0EE8               	movlw	232
 18503  00472A  6F05               	movwf	5,b	;volatile
 18504                           
 18505                           ; BSR set to: 15
 18506  00472C  0E1A               	movlw	26
 18507  00472E  6F06               	movwf	6,b	;volatile
 18508                           
 18509                           ; BSR set to: 15
 18510  004730  6B07               	clrf	7,b	;volatile
 18511                           
 18512                           ; BSR set to: 15
 18513                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18514  004732  0E03               	movlw	3
 18515  004734  010D               	movlb	13	; () banked
 18516  004736  6FD4               	movwf	212,b	;volatile
 18517                           
 18518                           ; BSR set to: 13
 18519                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18520  004738  6BD5               	clrf	213,b	;volatile
 18521                           
 18522                           ; BSR set to: 13
 18523                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18524  00473A  6BE0               	clrf	224,b	;volatile
 18525                           
 18526                           ; BSR set to: 13
 18527                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18528  00473C  0E11               	movlw	17
 18529  00473E  6FE1               	movwf	225,b	;volatile
 18530                           
 18531                           ; BSR set to: 13
 18532                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18533  004740  6FE2               	movwf	226,b	;volatile
 18534                           
 18535                           ; BSR set to: 13
 18536                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18537  004742  6BE3               	clrf	227,b	;volatile
 18538                           
 18539                           ; BSR set to: 13
 18540                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18541  004744  6BE4               	clrf	228,b	;volatile
 18542                           
 18543                           ; BSR set to: 13
 18544                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18545  004746  6BE5               	clrf	229,b	;volatile
 18546                           
 18547                           ; BSR set to: 13
 18548                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18549  004748  6BE6               	clrf	230,b	;volatile
 18550                           
 18551                           ; BSR set to: 13
 18552                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18553  00474A  6BE7               	clrf	231,b	;volatile
 18554                           
 18555                           ; BSR set to: 13
 18556                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18557  00474C  0E54               	movlw	84
 18558  00474E  6FF0               	movwf	240,b	;volatile
 18559                           
 18560                           ; BSR set to: 13
 18561                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18562  004750  0E05               	movlw	5
 18563  004752  6FF1               	movwf	241,b	;volatile
 18564                           
 18565                           ; BSR set to: 13
 18566                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18567  004754  6BF2               	clrf	242,b	;volatile
 18568                           
 18569                           ; BSR set to: 13
 18570                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18571  004756  6BF2               	clrf	242,b	;volatile
 18572                           
 18573                           ; BSR set to: 13
 18574                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18575  004758  0E0F               	movlw	15
 18576  00475A  010F               	movlb	15	; () banked
 18577  00475C  6F18               	movwf	24,b	;volatile
 18578                           
 18579                           ; BSR set to: 15
 18580  00475E  0EE0               	movlw	224
 18581  004760  6F19               	movwf	25,b	;volatile
 18582                           
 18583                           ; BSR set to: 15
 18584  004762  6B1A               	clrf	26,b	;volatile
 18585                           
 18586                           ; BSR set to: 15
 18587  004764  6B1B               	clrf	27,b	;volatile
 18588                           
 18589                           ; BSR set to: 15
 18590                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18591  004766  8719               	bsf	25,3,b	;volatile
 18592                           
 18593                           ; BSR set to: 15
 18594                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18595  004768  0E0F               	movlw	15
 18596  00476A  6F1C               	movwf	28,b	;volatile
 18597                           
 18598                           ; BSR set to: 15
 18599  00476C  0EE0               	movlw	224
 18600  00476E  6F1D               	movwf	29,b	;volatile
 18601                           
 18602                           ; BSR set to: 15
 18603  004770  691E               	setf	30,b	;volatile
 18604                           
 18605                           ; BSR set to: 15
 18606  004772  6B1F               	clrf	31,b	;volatile
 18607                           
 18608                           ; BSR set to: 15
 18609                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18610  004774  871D               	bsf	29,3,b	;volatile
 18611                           
 18612                           ; BSR set to: 15
 18613                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18614  004776  0E00               	movlw	0
 18615  004778  EF3A  F029         	goto	_ECANSetOperationMode
 18616  00477C                     __end_of_ECANInitialize:
 18617                           	opt stack 0
 18618                           tblptru	equ	0xFF8
 18619                           tblptrh	equ	0xFF7
 18620                           tblptrl	equ	0xFF6
 18621                           tablat	equ	0xFF5
 18622                           prodh	equ	0xFF4
 18623                           prodl	equ	0xFF3
 18624                           intcon	equ	0xFF2
 18625                           postinc0	equ	0xFEE
 18626                           wreg	equ	0xFE8
 18627                           indf1	equ	0xFE7
 18628                           postdec1	equ	0xFE5
 18629                           fsr1h	equ	0xFE2
 18630                           fsr1l	equ	0xFE1
 18631                           indf2	equ	0xFDF
 18632                           postinc2	equ	0xFDE
 18633                           postdec2	equ	0xFDD
 18634                           plusw2	equ	0xFDB
 18635                           fsr2h	equ	0xFDA
 18636                           fsr2l	equ	0xFD9
 18637                           status	equ	0xFD8
 18638                           
 18639 ;; *************** function _ECANSetOperationMode *****************
 18640 ;; Defined at:
 18641 ;;		line 1012 in file "../ECAN.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;  mode            1    wreg     enum E16346
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;  mode            1   13[COMRAM] enum E16346
 18646 ;; Return value:  Size  Location     Type
 18647 ;;		None               void
 18648 ;; Registers used:
 18649 ;;		wreg, status,2, status,0
 18650 ;; Tracked objects:
 18651 ;;		On entry : 0/0
 18652 ;;		On exit  : 0/0
 18653 ;;		Unchanged: 0/0
 18654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18655 ;;      Params:         0       0       0       0       0       0       0
 18656 ;;      Locals:         1       0       0       0       0       0       0
 18657 ;;      Temps:          0       0       0       0       0       0       0
 18658 ;;      Totals:         1       0       0       0       0       0       0
 18659 ;;Total ram usage:        1 bytes
 18660 ;; Hardware stack levels used:    1
 18661 ;; Hardware stack levels required when called:    2
 18662 ;; This function calls:
 18663 ;;		Nothing
 18664 ;; This function is called by:
 18665 ;;		_ECANInitialize
 18666 ;; This function uses a non-reentrant model
 18667 ;;
 18668                           
 18669                           	psect	text89
 18670  005274                     __ptext89:
 18671                           	opt stack 0
 18672  005274                     _ECANSetOperationMode:
 18673                           	opt stack 25
 18674                           
 18675                           ;incstack = 0
 18676                           ;incstack = 0
 18677                           ;ECANSetOperationMode@mode stored from wreg
 18678  005274  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18679                           
 18680                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18681  005278  0E1F               	movlw	31
 18682  00527A  166F               	andwf	3951,f,c	;volatile
 18683                           
 18684                           ;ECAN.c: 1014: CANCON |= mode;
 18685  00527C  500E               	movf	ECANSetOperationMode@mode,w,c
 18686  00527E  126F               	iorwf	3951,f,c	;volatile
 18687  005280                     l8356:
 18688  005280  506F               	movf	3951,w,c	;volatile
 18689  005282  0BE0               	andlw	224
 18690  005284  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18691  005286  B4D8               	btfsc	status,2,c
 18692  005288  0012               	return	
 18693  00528A  D7FA               	goto	l8356
 18694  00528C                     __end_of_ECANSetOperationMode:
 18695                           	opt stack 0
 18696                           tblptru	equ	0xFF8
 18697                           tblptrh	equ	0xFF7
 18698                           tblptrl	equ	0xFF6
 18699                           tablat	equ	0xFF5
 18700                           prodh	equ	0xFF4
 18701                           prodl	equ	0xFF3
 18702                           intcon	equ	0xFF2
 18703                           postinc0	equ	0xFEE
 18704                           wreg	equ	0xFE8
 18705                           indf1	equ	0xFE7
 18706                           postdec1	equ	0xFE5
 18707                           fsr1h	equ	0xFE2
 18708                           fsr1l	equ	0xFE1
 18709                           indf2	equ	0xFDF
 18710                           postinc2	equ	0xFDE
 18711                           postdec2	equ	0xFDD
 18712                           plusw2	equ	0xFDB
 18713                           fsr2h	equ	0xFDA
 18714                           fsr2l	equ	0xFD9
 18715                           status	equ	0xFD8
 18716                           
 18717 ;; *************** function _OpenADC *****************
 18718 ;; Defined at:
 18719 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18720 ;; Parameters:    Size  Location     Type
 18721 ;;  config          1    wreg     unsigned char 
 18722 ;;  config2         1   13[COMRAM] unsigned char 
 18723 ;;  portconfig      1   14[COMRAM] unsigned char 
 18724 ;; Auto vars:     Size  Location     Type
 18725 ;;  config          1   17[COMRAM] unsigned char 
 18726 ;; Return value:  Size  Location     Type
 18727 ;;		None               void
 18728 ;; Registers used:
 18729 ;;		wreg, status,2, status,0
 18730 ;; Tracked objects:
 18731 ;;		On entry : F/0
 18732 ;;		On exit  : F/0
 18733 ;;		Unchanged: F/0
 18734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18735 ;;      Params:         2       0       0       0       0       0       0
 18736 ;;      Locals:         1       0       0       0       0       0       0
 18737 ;;      Temps:          2       0       0       0       0       0       0
 18738 ;;      Totals:         5       0       0       0       0       0       0
 18739 ;;Total ram usage:        5 bytes
 18740 ;; Hardware stack levels used:    1
 18741 ;; Hardware stack levels required when called:    2
 18742 ;; This function calls:
 18743 ;;		Nothing
 18744 ;; This function is called by:
 18745 ;;		_init
 18746 ;; This function uses a non-reentrant model
 18747 ;;
 18748                           
 18749                           	psect	text90
 18750  004A58                     __ptext90:
 18751                           	opt stack 0
 18752  004A58                     _OpenADC:
 18753                           	opt stack 26
 18754                           
 18755                           ;incstack = 0
 18756                           ;incstack = 0
 18757                           ;OpenADC@config stored from wreg
 18758  004A58  CFE8 F012          	movff	wreg,OpenADC@config
 18759                           
 18760                           ; BSR set to: 0
 18761  004A5C  6AC2               	clrf	4034,c	;volatile
 18762  004A5E  6AC0               	clrf	4032,c	;volatile
 18763                           
 18764                           ; BSR set to: 0
 18765  004A60  90D8               	bcf	status,0,c
 18766  004A62  300E               	rrcf	OpenADC@config2,w,c
 18767  004A64  0B3C               	andlw	60
 18768  004A66  6EC2               	movwf	4034,c	;volatile
 18769  004A68  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18770  004A6C  3A10               	swapf	??_OpenADC,f,c
 18771  004A6E  0EF0               	movlw	240
 18772  004A70  1610               	andwf	??_OpenADC,f,c
 18773  004A72  0E30               	movlw	48
 18774  004A74  1610               	andwf	??_OpenADC,f,c
 18775  004A76  500F               	movf	OpenADC@portconfig,w,c
 18776  004A78  0B0F               	andlw	15
 18777  004A7A  1010               	iorwf	??_OpenADC,w,c
 18778  004A7C  6EC1               	movwf	4033,c	;volatile
 18779  004A7E  C012  F010         	movff	OpenADC@config,??_OpenADC
 18780  004A82  90D8               	bcf	status,0,c
 18781  004A84  3610               	rlcf	??_OpenADC,f,c
 18782  004A86  90D8               	bcf	status,0,c
 18783  004A88  3610               	rlcf	??_OpenADC,f,c
 18784  004A8A  0E38               	movlw	56
 18785  004A8C  1610               	andwf	??_OpenADC,f,c
 18786  004A8E  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18787  004A92  3A11               	swapf	??_OpenADC+1,f,c
 18788  004A94  0E0F               	movlw	15
 18789  004A96  1611               	andwf	??_OpenADC+1,f,c
 18790  004A98  0E07               	movlw	7
 18791  004A9A  1611               	andwf	??_OpenADC+1,f,c
 18792  004A9C  5012               	movf	OpenADC@config,w,c
 18793  004A9E  0B80               	andlw	128
 18794  004AA0  1011               	iorwf	??_OpenADC+1,w,c
 18795  004AA2  1010               	iorwf	??_OpenADC,w,c
 18796  004AA4  6EC0               	movwf	4032,c	;volatile
 18797                           
 18798                           ; BSR set to: 0
 18799  004AA6  AE0E               	btfss	OpenADC@config2,7,c
 18800  004AA8  D003               	goto	l1299
 18801                           
 18802                           ; BSR set to: 0
 18803  004AAA  9C9E               	bcf	3998,6,c	;volatile
 18804  004AAC  8C9D               	bsf	3997,6,c	;volatile
 18805  004AAE  8CF2               	bsf	intcon,6,c	;volatile
 18806  004AB0                     l1299:
 18807                           
 18808                           ; BSR set to: 0
 18809  004AB0  80C2               	bsf	4034,0,c	;volatile
 18810                           
 18811                           ; BSR set to: 0
 18812  004AB2  0012               	return	
 18813  004AB4                     __end_of_OpenADC:
 18814                           	opt stack 0
 18815                           tblptru	equ	0xFF8
 18816                           tblptrh	equ	0xFF7
 18817                           tblptrl	equ	0xFF6
 18818                           tablat	equ	0xFF5
 18819                           prodh	equ	0xFF4
 18820                           prodl	equ	0xFF3
 18821                           intcon	equ	0xFF2
 18822                           postinc0	equ	0xFEE
 18823                           wreg	equ	0xFE8
 18824                           indf1	equ	0xFE7
 18825                           postdec1	equ	0xFE5
 18826                           fsr1h	equ	0xFE2
 18827                           fsr1l	equ	0xFE1
 18828                           indf2	equ	0xFDF
 18829                           postinc2	equ	0xFDE
 18830                           postdec2	equ	0xFDD
 18831                           plusw2	equ	0xFDB
 18832                           fsr2h	equ	0xFDA
 18833                           fsr2l	equ	0xFD9
 18834                           status	equ	0xFD8
 18835                           
 18836 ;; *************** function _OpenTimer0 *****************
 18837 ;; Defined at:
 18838 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18839 ;; Parameters:    Size  Location     Type
 18840 ;;  config          1    wreg     unsigned char 
 18841 ;; Auto vars:     Size  Location     Type
 18842 ;;  config          1   13[COMRAM] unsigned char 
 18843 ;; Return value:  Size  Location     Type
 18844 ;;		None               void
 18845 ;; Registers used:
 18846 ;;		wreg, status,2, status,0
 18847 ;; Tracked objects:
 18848 ;;		On entry : F/0
 18849 ;;		On exit  : F/0
 18850 ;;		Unchanged: F/0
 18851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18852 ;;      Params:         0       0       0       0       0       0       0
 18853 ;;      Locals:         1       0       0       0       0       0       0
 18854 ;;      Temps:          0       0       0       0       0       0       0
 18855 ;;      Totals:         1       0       0       0       0       0       0
 18856 ;;Total ram usage:        1 bytes
 18857 ;; Hardware stack levels used:    1
 18858 ;; Hardware stack levels required when called:    2
 18859 ;; This function calls:
 18860 ;;		Nothing
 18861 ;; This function is called by:
 18862 ;;		_init
 18863 ;; This function uses a non-reentrant model
 18864 ;;
 18865                           
 18866                           	psect	text91
 18867  0051C2                     __ptext91:
 18868                           	opt stack 0
 18869  0051C2                     _OpenTimer0:
 18870                           	opt stack 26
 18871                           
 18872                           ; BSR set to: 0
 18873                           ;incstack = 0
 18874                           ;incstack = 0
 18875                           ;OpenTimer0@config stored from wreg
 18876  0051C2  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18877                           
 18878                           ; BSR set to: 0
 18879  0051C6  500E               	movf	OpenTimer0@config,w,c
 18880  0051C8  0B7F               	andlw	127
 18881  0051CA  6ED5               	movwf	4053,c	;volatile
 18882                           
 18883                           ; BSR set to: 0
 18884  0051CC  6AD7               	clrf	4055,c	;volatile
 18885                           
 18886                           ; BSR set to: 0
 18887  0051CE  6AD6               	clrf	4054,c	;volatile
 18888                           
 18889                           ; BSR set to: 0
 18890  0051D0  94F2               	bcf	intcon,2,c	;volatile
 18891                           
 18892                           ; BSR set to: 0
 18893  0051D2  AE0E               	btfss	OpenTimer0@config,7,c
 18894  0051D4  D002               	goto	l1313
 18895                           
 18896                           ; BSR set to: 0
 18897  0051D6  8AF2               	bsf	intcon,5,c	;volatile
 18898  0051D8  D001               	goto	l1314
 18899  0051DA                     l1313:
 18900                           
 18901                           ; BSR set to: 0
 18902  0051DA  9AF2               	bcf	intcon,5,c	;volatile
 18903  0051DC                     l1314:
 18904                           
 18905                           ; BSR set to: 0
 18906  0051DC  8ED5               	bsf	4053,7,c	;volatile
 18907                           
 18908                           ; BSR set to: 0
 18909  0051DE  0012               	return	
 18910  0051E0                     __end_of_OpenTimer0:
 18911                           	opt stack 0
 18912                           tblptru	equ	0xFF8
 18913                           tblptrh	equ	0xFF7
 18914                           tblptrl	equ	0xFF6
 18915                           tablat	equ	0xFF5
 18916                           prodh	equ	0xFF4
 18917                           prodl	equ	0xFF3
 18918                           intcon	equ	0xFF2
 18919                           postinc0	equ	0xFEE
 18920                           wreg	equ	0xFE8
 18921                           indf1	equ	0xFE7
 18922                           postdec1	equ	0xFE5
 18923                           fsr1h	equ	0xFE2
 18924                           fsr1l	equ	0xFE1
 18925                           indf2	equ	0xFDF
 18926                           postinc2	equ	0xFDE
 18927                           postdec2	equ	0xFDD
 18928                           plusw2	equ	0xFDB
 18929                           fsr2h	equ	0xFDA
 18930                           fsr2l	equ	0xFD9
 18931                           status	equ	0xFD8
 18932                           
 18933 ;; *************** function _init_app_ram *****************
 18934 ;; Defined at:
 18935 ;;		line 978 in file "../main.c"
 18936 ;; Parameters:    Size  Location     Type
 18937 ;;		None
 18938 ;; Auto vars:     Size  Location     Type
 18939 ;;  i               1   13[COMRAM] unsigned char 
 18940 ;; Return value:  Size  Location     Type
 18941 ;;		None               void
 18942 ;; Registers used:
 18943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18944 ;; Tracked objects:
 18945 ;;		On entry : 0/1
 18946 ;;		On exit  : F/0
 18947 ;;		Unchanged: 0/0
 18948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18949 ;;      Params:         0       0       0       0       0       0       0
 18950 ;;      Locals:         1       0       0       0       0       0       0
 18951 ;;      Temps:          0       0       0       0       0       0       0
 18952 ;;      Totals:         1       0       0       0       0       0       0
 18953 ;;Total ram usage:        1 bytes
 18954 ;; Hardware stack levels used:    1
 18955 ;; Hardware stack levels required when called:    2
 18956 ;; This function calls:
 18957 ;;		Nothing
 18958 ;; This function is called by:
 18959 ;;		_init
 18960 ;;		_vscp_restoreDefaults
 18961 ;; This function uses a non-reentrant model
 18962 ;;
 18963                           
 18964                           	psect	text92
 18965  004D9E                     __ptext92:
 18966                           	opt stack 0
 18967  004D9E                     _init_app_ram:
 18968                           	opt stack 24
 18969                           
 18970                           ;main.c: 979: char i;
 18971                           ;main.c: 981: measurement_clock = 0;
 18972                           
 18973                           ; BSR set to: 0
 18974                           ;incstack = 0
 18975                           ;incstack = 0
 18976  004D9E  0101               	movlb	1	; () banked
 18977  004DA0  6B06               	clrf	_measurement_clock& (0+255),b	;volatile
 18978  004DA2  6B07               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 18979  004DA4  6B08               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 18980  004DA6  6B09               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 18981                           
 18982                           ;main.c: 982: seconds = 0;
 18983  004DA8  0100               	movlb	0	; () banked
 18984  004DAA  6BBA               	clrf	_seconds& (0+255),b
 18985                           
 18986                           ;main.c: 985: for (i = 0; i < 6; i++) {
 18987  004DAC  6A0E               	clrf	init_app_ram@i,c
 18988  004DAE                     l7366:
 18989                           
 18990                           ; BSR set to: 0
 18991                           ;main.c: 986: seconds_temp[i] = 0;
 18992  004DAE  0E00               	movlw	low _seconds_temp
 18993  004DB0  240E               	addwf	init_app_ram@i,w,c
 18994  004DB2  6ED9               	movwf	fsr2l,c
 18995  004DB4  6ADA               	clrf	fsr2h,c
 18996  004DB6  0E01               	movlw	high _seconds_temp
 18997  004DB8  22DA               	addwfc	fsr2h,f,c
 18998  004DBA  6ADF               	clrf	indf2,c
 18999                           
 19000                           ; BSR set to: 1
 19001                           ;main.c: 987: current_temp[i] = 0;
 19002  004DBC  500E               	movf	init_app_ram@i,w,c
 19003  004DBE  D80B               	call	PL32	;call to abstracted procedure
 19004  004DC0  6ADE               	clrf	postinc2,c
 19005  004DC2  6ADD               	clrf	postdec2,c
 19006                           
 19007                           ; BSR set to: 0
 19008  004DC4  2A0E               	incf	init_app_ram@i,f,c
 19009                           
 19010                           ; BSR set to: 0
 19011  004DC6  0E05               	movlw	5
 19012  004DC8  640E               	cpfsgt	init_app_ram@i,c
 19013  004DCA  D7F1               	goto	l7366
 19014                           
 19015                           ; BSR set to: 0
 19016                           ;main.c: 988: }
 19017                           ;main.c: 991: adc_conversion_flags = 0;
 19018  004DCC  6BB7               	clrf	_adc_conversion_flags& (0+255),b
 19019                           
 19020                           ;main.c: 994: adc_series_counter = 0;
 19021  004DCE  6A49               	clrf	_adc_series_counter,c
 19022                           
 19023                           ;main.c: 997: low_alarm = 0;
 19024  004DD0  6BB9               	clrf	_low_alarm& (0+255),b
 19025                           
 19026                           ;main.c: 1000: high_alarm = 0;
 19027  004DD2  6BB8               	clrf	_high_alarm& (0+255),b
 19028                           
 19029                           ; BSR set to: 0
 19030  004DD4  0012               	return	
 19031  004DD6                     __end_of_init_app_ram:
 19032                           	opt stack 0
 19033  004DD6                     PL32:
 19034                           	opt stack 22
 19035  004DD6  0D02               	mullw	2
 19036  004DD8  50F3               	movf	prodl,w,c
 19037  004DDA  0100               	movlb	0	; () banked
 19038  004DDC  0FA9               	addlw	low _current_temp
 19039  004DDE  6ED9               	movwf	fsr2l,c
 19040  004DE0  6ADA               	clrf	fsr2h,c
 19041  004DE2  0012               	return	
 19042  004DE4                     __end_ofPL32:
 19043                           	opt stack 0
 19044                           tblptru	equ	0xFF8
 19045                           tblptrh	equ	0xFF7
 19046                           tblptrl	equ	0xFF6
 19047                           tablat	equ	0xFF5
 19048                           prodh	equ	0xFF4
 19049                           prodl	equ	0xFF3
 19050                           intcon	equ	0xFF2
 19051                           postinc0	equ	0xFEE
 19052                           wreg	equ	0xFE8
 19053                           indf1	equ	0xFE7
 19054                           postdec1	equ	0xFE5
 19055                           fsr1h	equ	0xFE2
 19056                           fsr1l	equ	0xFE1
 19057                           indf2	equ	0xFDF
 19058                           postinc2	equ	0xFDE
 19059                           postdec2	equ	0xFDD
 19060                           plusw2	equ	0xFDB
 19061                           fsr2h	equ	0xFDA
 19062                           fsr2l	equ	0xFD9
 19063                           status	equ	0xFD8
 19064                           
 19065 ;; *************** function _ConvertADC *****************
 19066 ;; Defined at:
 19067 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19068 ;; Parameters:    Size  Location     Type
 19069 ;;		None
 19070 ;; Auto vars:     Size  Location     Type
 19071 ;;		None
 19072 ;; Return value:  Size  Location     Type
 19073 ;;		None               void
 19074 ;; Registers used:
 19075 ;;		None
 19076 ;; Tracked objects:
 19077 ;;		On entry : 0/0
 19078 ;;		On exit  : 0/0
 19079 ;;		Unchanged: 0/0
 19080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19081 ;;      Params:         0       0       0       0       0       0       0
 19082 ;;      Locals:         0       0       0       0       0       0       0
 19083 ;;      Temps:          0       0       0       0       0       0       0
 19084 ;;      Totals:         0       0       0       0       0       0       0
 19085 ;;Total ram usage:        0 bytes
 19086 ;; Hardware stack levels used:    1
 19087 ;; Hardware stack levels required when called:    2
 19088 ;; This function calls:
 19089 ;;		Nothing
 19090 ;; This function is called by:
 19091 ;;		_init
 19092 ;; This function uses a non-reentrant model
 19093 ;;
 19094                           
 19095                           	psect	text93
 19096  00537E                     __ptext93:
 19097                           	opt stack 0
 19098  00537E                     _ConvertADC:
 19099                           	opt stack 26
 19100                           
 19101                           ; BSR set to: 0
 19102                           ;incstack = 0
 19103                           ;incstack = 0
 19104  00537E  82C2               	bsf	4034,1,c	;volatile
 19105  005380  0012               	return	
 19106  005382                     __end_of_ConvertADC:
 19107                           	opt stack 0
 19108                           tblptru	equ	0xFF8
 19109                           tblptrh	equ	0xFF7
 19110                           tblptrl	equ	0xFF6
 19111                           tablat	equ	0xFF5
 19112                           prodh	equ	0xFF4
 19113                           prodl	equ	0xFF3
 19114                           intcon	equ	0xFF2
 19115                           postinc0	equ	0xFEE
 19116                           wreg	equ	0xFE8
 19117                           indf1	equ	0xFE7
 19118                           postdec1	equ	0xFE5
 19119                           fsr1h	equ	0xFE2
 19120                           fsr1l	equ	0xFE1
 19121                           indf2	equ	0xFDF
 19122                           postinc2	equ	0xFDE
 19123                           postdec2	equ	0xFDD
 19124                           plusw2	equ	0xFDB
 19125                           fsr2h	equ	0xFDA
 19126                           fsr2l	equ	0xFD9
 19127                           status	equ	0xFD8
 19128                           
 19129 ;; *************** function _WriteTimer0 *****************
 19130 ;; Defined at:
 19131 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19132 ;; Parameters:    Size  Location     Type
 19133 ;;  timer0          2   13[COMRAM] unsigned int 
 19134 ;; Auto vars:     Size  Location     Type
 19135 ;;  timer           2   15[COMRAM] struct Timers
 19136 ;; Return value:  Size  Location     Type
 19137 ;;		None               void
 19138 ;; Registers used:
 19139 ;;		None
 19140 ;; Tracked objects:
 19141 ;;		On entry : F/0
 19142 ;;		On exit  : F/0
 19143 ;;		Unchanged: F/0
 19144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19145 ;;      Params:         2       0       0       0       0       0       0
 19146 ;;      Locals:         2       0       0       0       0       0       0
 19147 ;;      Temps:          0       0       0       0       0       0       0
 19148 ;;      Totals:         4       0       0       0       0       0       0
 19149 ;;Total ram usage:        4 bytes
 19150 ;; Hardware stack levels used:    1
 19151 ;; Hardware stack levels required when called:    2
 19152 ;; This function calls:
 19153 ;;		Nothing
 19154 ;; This function is called by:
 19155 ;;		_init
 19156 ;; This function uses a non-reentrant model
 19157 ;;
 19158                           
 19159                           	psect	text94
 19160  005312                     __ptext94:
 19161                           	opt stack 0
 19162  005312                     _WriteTimer0:
 19163                           	opt stack 26
 19164                           
 19165                           ; BSR set to: 0
 19166                           
 19167                           ;incstack = 0
 19168                           ;incstack = 0
 19169  005312  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19170  005316  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19171  00531A  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19172  00531E  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19173                           
 19174                           ; BSR set to: 0
 19175  005322  0012               	return	
 19176  005324                     __end_of_WriteTimer0:
 19177                           	opt stack 0
 19178                           tblptru	equ	0xFF8
 19179                           tblptrh	equ	0xFF7
 19180                           tblptrl	equ	0xFF6
 19181                           tablat	equ	0xFF5
 19182                           prodh	equ	0xFF4
 19183                           prodl	equ	0xFF3
 19184                           intcon	equ	0xFF2
 19185                           postinc0	equ	0xFEE
 19186                           wreg	equ	0xFE8
 19187                           indf1	equ	0xFE7
 19188                           postdec1	equ	0xFE5
 19189                           fsr1h	equ	0xFE2
 19190                           fsr1l	equ	0xFE1
 19191                           indf2	equ	0xFDF
 19192                           postinc2	equ	0xFDE
 19193                           postdec2	equ	0xFDD
 19194                           plusw2	equ	0xFDB
 19195                           fsr2h	equ	0xFDA
 19196                           fsr2l	equ	0xFD9
 19197                           status	equ	0xFD8
 19198                           
 19199 ;; *************** function ___awtofl *****************
 19200 ;; Defined at:
 19201 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19202 ;; Parameters:    Size  Location     Type
 19203 ;;  c               2   23[COMRAM] int 
 19204 ;; Auto vars:     Size  Location     Type
 19205 ;;  f1              4    0        int 
 19206 ;;  sign            1   28[COMRAM] unsigned char 
 19207 ;; Return value:  Size  Location     Type
 19208 ;;                  4   23[COMRAM] unsigned char 
 19209 ;; Registers used:
 19210 ;;		wreg, status,2, status,0, cstack
 19211 ;; Tracked objects:
 19212 ;;		On entry : F/0
 19213 ;;		On exit  : 0/0
 19214 ;;		Unchanged: 0/0
 19215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19216 ;;      Params:         4       0       0       0       0       0       0
 19217 ;;      Locals:         2       0       0       0       0       0       0
 19218 ;;      Temps:          0       0       0       0       0       0       0
 19219 ;;      Totals:         6       0       0       0       0       0       0
 19220 ;;Total ram usage:        6 bytes
 19221 ;; Hardware stack levels used:    1
 19222 ;; Hardware stack levels required when called:    3
 19223 ;; This function calls:
 19224 ;;		___flpack
 19225 ;; This function is called by:
 19226 ;;		_setEventData
 19227 ;;		_exp
 19228 ;;		_log
 19229 ;; This function uses a non-reentrant model
 19230 ;;
 19231                           
 19232                           	psect	text95
 19233  004EDC                     __ptext95:
 19234                           	opt stack 0
 19235  004EDC                     ___awtofl:
 19236                           	opt stack 24
 19237                           
 19238                           ; BSR set to: 0
 19239                           
 19240                           ; BSR set to: 0
 19241                           ;incstack = 0
 19242                           ;incstack = 0
 19243  004EDC  6A1D               	clrf	___awtofl@sign,c
 19244  004EDE  AE19               	btfss	___awtofl@c+1,7,c
 19245  004EE0  D005               	goto	l14150
 19246                           
 19247                           ; BSR set to: 0
 19248  004EE2  6C18               	negf	___awtofl@c,c
 19249  004EE4  1E19               	comf	___awtofl@c+1,f,c
 19250  004EE6  B0D8               	btfsc	status,0,c
 19251  004EE8  2A19               	incf	___awtofl@c+1,f,c
 19252  004EEA  2A1D               	incf	___awtofl@sign,f,c
 19253  004EEC                     l14150:
 19254                           
 19255                           ; BSR set to: 0
 19256  004EEC  C018  F00E         	movff	___awtofl@c,?___flpack
 19257  004EF0  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19258  004EF4  6A10               	clrf	?___flpack+2,c
 19259  004EF6  6A11               	clrf	?___flpack+3,c
 19260  004EF8  0E96               	movlw	150
 19261  004EFA  6E12               	movwf	?___flpack+4,c
 19262  004EFC  C01D  F013         	movff	___awtofl@sign,?___flpack+5
 19263  004F00  ECC5  F020         	call	___flpack	;wreg free
 19264  004F04  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19265  004F08  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19266  004F0C  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19267  004F10  C00E  F018         	movff	?___flpack,?___awtofl
 19268  004F14  0012               	return	
 19269  004F16                     __end_of___awtofl:
 19270                           	opt stack 0
 19271                           tblptru	equ	0xFF8
 19272                           tblptrh	equ	0xFF7
 19273                           tblptrl	equ	0xFF6
 19274                           tablat	equ	0xFF5
 19275                           prodh	equ	0xFF4
 19276                           prodl	equ	0xFF3
 19277                           intcon	equ	0xFF2
 19278                           postinc0	equ	0xFEE
 19279                           wreg	equ	0xFE8
 19280                           indf1	equ	0xFE7
 19281                           postdec1	equ	0xFE5
 19282                           fsr1h	equ	0xFE2
 19283                           fsr1l	equ	0xFE1
 19284                           indf2	equ	0xFDF
 19285                           postinc2	equ	0xFDE
 19286                           postdec2	equ	0xFDD
 19287                           plusw2	equ	0xFDB
 19288                           fsr2h	equ	0xFDA
 19289                           fsr2l	equ	0xFD9
 19290                           status	equ	0xFD8
 19291                           
 19292 ;; *************** function ___flpack *****************
 19293 ;; Defined at:
 19294 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19295 ;; Parameters:    Size  Location     Type
 19296 ;;  arg             4   13[COMRAM] unsigned long 
 19297 ;;  exp             1   17[COMRAM] unsigned char 
 19298 ;;  sign            1   18[COMRAM] unsigned char 
 19299 ;; Auto vars:     Size  Location     Type
 19300 ;;		None
 19301 ;; Return value:  Size  Location     Type
 19302 ;;                  4   13[COMRAM] unsigned char 
 19303 ;; Registers used:
 19304 ;;		wreg, status,2, status,0
 19305 ;; Tracked objects:
 19306 ;;		On entry : 0/0
 19307 ;;		On exit  : 0/0
 19308 ;;		Unchanged: 0/0
 19309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19310 ;;      Params:         6       0       0       0       0       0       0
 19311 ;;      Locals:         0       0       0       0       0       0       0
 19312 ;;      Temps:          4       0       0       0       0       0       0
 19313 ;;      Totals:        10       0       0       0       0       0       0
 19314 ;;Total ram usage:       10 bytes
 19315 ;; Hardware stack levels used:    1
 19316 ;; Hardware stack levels required when called:    2
 19317 ;; This function calls:
 19318 ;;		Nothing
 19319 ;; This function is called by:
 19320 ;;		___altofl
 19321 ;;		___awtofl
 19322 ;;		___fladd
 19323 ;;		___fldiv
 19324 ;;		___flmul
 19325 ;;		___lwtofl
 19326 ;; This function uses a non-reentrant model
 19327 ;;
 19328                           
 19329                           	psect	text96
 19330  00418A                     __ptext96:
 19331                           	opt stack 0
 19332  00418A                     ___flpack:
 19333                           	opt stack 25
 19334                           
 19335                           ;incstack = 0
 19336                           ;incstack = 0
 19337  00418A  5012               	movf	___flpack@exp,w,c
 19338  00418C  E005               	bz	l1549
 19339  00418E  5011               	movf	___flpack@arg+3,w,c
 19340  004190  100E               	iorwf	___flpack@arg,w,c
 19341  004192  100F               	iorwf	___flpack@arg+1,w,c
 19342  004194  1010               	iorwf	___flpack@arg+2,w,c
 19343  004196  E107               	bnz	l13942
 19344  004198                     l1549:
 19345  004198  6A0E               	clrf	?___flpack,c
 19346  00419A  6A0F               	clrf	?___flpack+1,c
 19347  00419C  6A10               	clrf	?___flpack+2,c
 19348  00419E  6A11               	clrf	?___flpack+3,c
 19349  0041A0  D04B               	goto	l1550
 19350  0041A2                     l13940:
 19351  0041A2  2A12               	incf	___flpack@exp,f,c
 19352  0041A4  D84A               	call	PL84	;call to abstracted procedure
 19353  0041A6                     l13942:
 19354  0041A6  6A14               	clrf	??___flpack& (0+255),c
 19355  0041A8  6A15               	clrf	(??___flpack+1)& (0+255),c
 19356  0041AA  6A16               	clrf	(??___flpack+2)& (0+255),c
 19357  0041AC  0EFE               	movlw	254
 19358  0041AE  1411               	andwf	___flpack@arg+3,w,c
 19359  0041B0  6E17               	movwf	(??___flpack+3)& (0+255),c
 19360  0041B2  5017               	movf	??___flpack+3,w,c
 19361  0041B4  1014               	iorwf	??___flpack,w,c
 19362  0041B6  1015               	iorwf	??___flpack+1,w,c
 19363  0041B8  1016               	iorwf	??___flpack+2,w,c
 19364  0041BA  E008               	bz	l1554
 19365  0041BC  D7F2               	goto	l13940
 19366  0041BE                     l13944:
 19367  0041BE  2A12               	incf	___flpack@exp,f,c
 19368  0041C0  2A0E               	incf	___flpack@arg,f,c
 19369  0041C2  0E00               	movlw	0
 19370  0041C4  220F               	addwfc	___flpack@arg+1,f,c
 19371  0041C6  2210               	addwfc	___flpack@arg+2,f,c
 19372  0041C8  2211               	addwfc	___flpack@arg+3,f,c
 19373  0041CA  D837               	call	PL84	;call to abstracted procedure
 19374  0041CC                     l1554:
 19375  0041CC  6A14               	clrf	??___flpack& (0+255),c
 19376  0041CE  6A15               	clrf	(??___flpack+1)& (0+255),c
 19377  0041D0  6A16               	clrf	(??___flpack+2)& (0+255),c
 19378  0041D2  5011               	movf	___flpack@arg+3,w,c
 19379  0041D4  6E17               	movwf	(??___flpack+3)& (0+255),c
 19380  0041D6  5017               	movf	??___flpack+3,w,c
 19381  0041D8  1014               	iorwf	??___flpack,w,c
 19382  0041DA  1015               	iorwf	??___flpack+1,w,c
 19383  0041DC  1016               	iorwf	??___flpack+2,w,c
 19384  0041DE  E007               	bz	l13952
 19385  0041E0  D7EE               	goto	l13944
 19386  0041E2                     l13950:
 19387  0041E2  0612               	decf	___flpack@exp,f,c
 19388  0041E4  90D8               	bcf	status,0,c
 19389  0041E6  360E               	rlcf	___flpack@arg,f,c
 19390  0041E8  360F               	rlcf	___flpack@arg+1,f,c
 19391  0041EA  3610               	rlcf	___flpack@arg+2,f,c
 19392  0041EC  3611               	rlcf	___flpack@arg+3,f,c
 19393  0041EE                     l13952:
 19394  0041EE  AE10               	btfss	___flpack@arg+2,7,c
 19395  0041F0  D7F8               	goto	l13950
 19396  0041F2  B012               	btfsc	___flpack@exp,0,c
 19397  0041F4  D002               	goto	l1560
 19398  0041F6  0E7F               	movlw	127
 19399  0041F8  1610               	andwf	___flpack@arg+2,f,c
 19400  0041FA                     l1560:
 19401  0041FA  90D8               	bcf	status,0,c
 19402  0041FC  3212               	rrcf	___flpack@exp,f,c
 19403  0041FE  C012  F014         	movff	___flpack@exp,??___flpack
 19404  004202  6A15               	clrf	(??___flpack+1)& (0+255),c
 19405  004204  6A16               	clrf	(??___flpack+2)& (0+255),c
 19406  004206  6A17               	clrf	(??___flpack+3)& (0+255),c
 19407  004208  C014  F017         	movff	??___flpack,??___flpack+3
 19408  00420C  6A16               	clrf	??___flpack+2,c
 19409  00420E  6A15               	clrf	??___flpack+1,c
 19410  004210  6A14               	clrf	??___flpack,c
 19411  004212  5014               	movf	??___flpack,w,c
 19412  004214  120E               	iorwf	___flpack@arg,f,c
 19413  004216  5015               	movf	??___flpack+1,w,c
 19414  004218  120F               	iorwf	___flpack@arg+1,f,c
 19415  00421A  5016               	movf	??___flpack+2,w,c
 19416  00421C  1210               	iorwf	___flpack@arg+2,f,c
 19417  00421E  5017               	movf	??___flpack+3,w,c
 19418  004220  1211               	iorwf	___flpack@arg+3,f,c
 19419  004222  5013               	movf	___flpack@sign,w,c
 19420  004224  A4D8               	btfss	status,2,c
 19421  004226  8E11               	bsf	___flpack@arg+3,7,c
 19422  004228  C00E  F00E         	movff	___flpack@arg,?___flpack
 19423  00422C  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19424  004230  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19425  004234  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19426  004238                     l1550:
 19427  004238  0012               	return	
 19428  00423A                     __end_of___flpack:
 19429                           	opt stack 0
 19430  00423A                     PL84:
 19431                           	opt stack 25
 19432  00423A  90D8               	bcf	status,0,c
 19433  00423C  3211               	rrcf	___flpack@arg+3,f,c
 19434  00423E  3210               	rrcf	___flpack@arg+2,f,c
 19435  004240  320F               	rrcf	___flpack@arg+1,f,c
 19436  004242  320E               	rrcf	___flpack@arg,f,c
 19437  004244  0012               	return	
 19438  004246                     __end_ofPL84:
 19439                           	opt stack 0
 19440                           tblptru	equ	0xFF8
 19441                           tblptrh	equ	0xFF7
 19442                           tblptrl	equ	0xFF6
 19443                           tablat	equ	0xFF5
 19444                           prodh	equ	0xFF4
 19445                           prodl	equ	0xFF3
 19446                           intcon	equ	0xFF2
 19447                           postinc0	equ	0xFEE
 19448                           wreg	equ	0xFE8
 19449                           indf1	equ	0xFE7
 19450                           postdec1	equ	0xFE5
 19451                           fsr1h	equ	0xFE2
 19452                           fsr1l	equ	0xFE1
 19453                           indf2	equ	0xFDF
 19454                           postinc2	equ	0xFDE
 19455                           postdec2	equ	0xFDD
 19456                           plusw2	equ	0xFDB
 19457                           fsr2h	equ	0xFDA
 19458                           fsr2l	equ	0xFD9
 19459                           status	equ	0xFD8
 19460                           
 19461 ;; *************** function ___flmul *****************
 19462 ;; Defined at:
 19463 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19464 ;; Parameters:    Size  Location     Type
 19465 ;;  f1              4    0[BANK0 ] unsigned char 
 19466 ;;  f2              4    4[BANK0 ] unsigned char 
 19467 ;; Auto vars:     Size  Location     Type
 19468 ;;  f3_as_produc    4   59[COMRAM] unsigned long 
 19469 ;;  sign            1   64[COMRAM] unsigned char 
 19470 ;;  cntr            1   63[COMRAM] unsigned char 
 19471 ;;  exp             1   58[COMRAM] unsigned char 
 19472 ;; Return value:  Size  Location     Type
 19473 ;;                  4    0[BANK0 ] unsigned char 
 19474 ;; Registers used:
 19475 ;;		wreg, status,2, status,0, cstack
 19476 ;; Tracked objects:
 19477 ;;		On entry : 0/0
 19478 ;;		On exit  : 0/0
 19479 ;;		Unchanged: 0/0
 19480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19481 ;;      Params:         0       8       0       0       0       0       0
 19482 ;;      Locals:        14       0       0       0       0       0       0
 19483 ;;      Temps:          0       0       0       0       0       0       0
 19484 ;;      Totals:        14       8       0       0       0       0       0
 19485 ;;Total ram usage:       22 bytes
 19486 ;; Hardware stack levels used:    1
 19487 ;; Hardware stack levels required when called:    3
 19488 ;; This function calls:
 19489 ;;		___flpack
 19490 ;; This function is called by:
 19491 ;;		_doWork
 19492 ;;		_Celsius2Fahrenheit
 19493 ;;		___asflmul
 19494 ;;		_log
 19495 ;;		_eval_poly
 19496 ;; This function uses a non-reentrant model
 19497 ;;
 19498                           
 19499                           	psect	text97
 19500  003F42                     __ptext97:
 19501                           	opt stack 0
 19502  003F42                     ___flmul:
 19503                           	opt stack 25
 19504                           
 19505                           ;incstack = 0
 19506                           ;incstack = 0
 19507  003F42  0100               	movlb	0	; () banked
 19508  003F44  3562               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19509  003F46  3563               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19510  003F48  6E3B               	movwf	___flmul@exp,c
 19511  003F4A  663B               	tstfsz	___flmul@exp& (0+255),c
 19512  003F4C  D001               	goto	l14094
 19513  003F4E  D006               	goto	u13560
 19514  003F50                     l14094:
 19515  003F50  0100               	movlb	0	; () banked
 19516  003F52  3566               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19517  003F54  3567               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19518  003F56  6E41               	movwf	___flmul@sign,c
 19519  003F58  6641               	tstfsz	___flmul@sign& (0+255),c
 19520  003F5A  D006               	goto	l14098
 19521  003F5C                     u13560:
 19522  003F5C  0100               	movlb	0	; () banked
 19523  003F5E  6B60               	clrf	?___flmul& (0+255),b
 19524  003F60  6B61               	clrf	(?___flmul+1)& (0+255),b
 19525  003F62  6B62               	clrf	(?___flmul+2)& (0+255),b
 19526  003F64  6B63               	clrf	(?___flmul+3)& (0+255),b
 19527  003F66  D041               	goto	l1634
 19528  003F68                     l14098:
 19529  003F68  5041               	movf	___flmul@sign,w,c
 19530  003F6A  0F7B               	addlw	123
 19531  003F6C  263B               	addwf	___flmul@exp,f,c
 19532  003F6E  C063  F041         	movff	___flmul@f1+3,___flmul@sign
 19533  003F72  0100               	movlb	0	; () banked
 19534  003F74  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19535  003F76  1A41               	xorwf	___flmul@sign,f,c
 19536  003F78  0E80               	movlw	128
 19537  003F7A  1641               	andwf	___flmul@sign,f,c
 19538                           
 19539                           ; BSR set to: 0
 19540  003F7C  8F62               	bsf	(___flmul@f1+2)& (0+255),7,b
 19541                           
 19542                           ; BSR set to: 0
 19543  003F7E  8F66               	bsf	(___flmul@f2+2)& (0+255),7,b
 19544  003F80  6B67               	clrf	(___flmul@f2+3)& (0+255),b
 19545                           
 19546                           ; BSR set to: 0
 19547  003F82  6A3C               	clrf	___flmul@f3_as_product,c
 19548  003F84  6A3D               	clrf	___flmul@f3_as_product+1,c
 19549  003F86  6A3E               	clrf	___flmul@f3_as_product+2,c
 19550  003F88  6A3F               	clrf	___flmul@f3_as_product+3,c
 19551                           
 19552                           ; BSR set to: 0
 19553  003F8A  0E07               	movlw	7
 19554  003F8C  6E40               	movwf	___flmul@cntr,c
 19555  003F8E                     l14110:
 19556                           
 19557                           ; BSR set to: 0
 19558  003F8E  A160               	btfss	___flmul@f1& (0+255),0,b
 19559  003F90  D002               	goto	l14114
 19560                           
 19561                           ; BSR set to: 0
 19562  003F92  5164               	movf	___flmul@f2& (0+255),w,b
 19563  003F94  D82B               	call	PL62	;call to abstracted procedure
 19564  003F96                     l14114:
 19565                           
 19566                           ; BSR set to: 0
 19567                           
 19568                           ; BSR set to: 0
 19569  003F96  D832               	call	PL72	;call to abstracted procedure
 19570  003F98  3764               	rlcf	___flmul@f2& (0+255),f,b
 19571  003F9A  3765               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19572  003F9C  3766               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19573  003F9E  3767               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19574                           
 19575                           ; BSR set to: 0
 19576  003FA0  2E40               	decfsz	___flmul@cntr,f,c
 19577  003FA2  D7F5               	goto	l14110
 19578                           
 19579                           ; BSR set to: 0
 19580  003FA4  0E11               	movlw	17
 19581  003FA6  6E40               	movwf	___flmul@cntr,c
 19582  003FA8                     l14122:
 19583                           
 19584                           ; BSR set to: 0
 19585  003FA8  A160               	btfss	___flmul@f1& (0+255),0,b
 19586  003FAA  D002               	goto	l14126
 19587                           
 19588                           ; BSR set to: 0
 19589  003FAC  5164               	movf	___flmul@f2& (0+255),w,b
 19590  003FAE  D81E               	call	PL62	;call to abstracted procedure
 19591  003FB0                     l14126:
 19592                           
 19593                           ; BSR set to: 0
 19594                           
 19595                           ; BSR set to: 0
 19596  003FB0  D825               	call	PL72	;call to abstracted procedure
 19597  003FB2  323F               	rrcf	___flmul@f3_as_product+3,f,c
 19598  003FB4  323E               	rrcf	___flmul@f3_as_product+2,f,c
 19599  003FB6  323D               	rrcf	___flmul@f3_as_product+1,f,c
 19600  003FB8  323C               	rrcf	___flmul@f3_as_product,f,c
 19601                           
 19602                           ; BSR set to: 0
 19603  003FBA  2E40               	decfsz	___flmul@cntr,f,c
 19604  003FBC  D7F5               	goto	l14122
 19605                           
 19606                           ; BSR set to: 0
 19607  003FBE  C03C  F00E         	movff	___flmul@f3_as_product,?___flpack
 19608  003FC2  C03D  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19609  003FC6  C03E  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19610  003FCA  C03F  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19611  003FCE  C03B  F012         	movff	___flmul@exp,?___flpack+4
 19612  003FD2  C041  F013         	movff	___flmul@sign,?___flpack+5
 19613  003FD6  ECC5  F020         	call	___flpack	;wreg free
 19614  003FDA  C011  F063         	movff	?___flpack+3,?___flmul+3
 19615  003FDE  C010  F062         	movff	?___flpack+2,?___flmul+2
 19616  003FE2  C00F  F061         	movff	?___flpack+1,?___flmul+1
 19617  003FE6  C00E  F060         	movff	?___flpack,?___flmul
 19618  003FEA                     l1634:
 19619  003FEA  0012               	return	
 19620  003FEC                     __end_of___flmul:
 19621                           	opt stack 0
 19622  003FEC                     PL62:
 19623                           	opt stack 25
 19624  003FEC  263C               	addwf	___flmul@f3_as_product,f,c
 19625  003FEE  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19626  003FF0  223D               	addwfc	___flmul@f3_as_product+1,f,c
 19627  003FF2  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19628  003FF4  223E               	addwfc	___flmul@f3_as_product+2,f,c
 19629  003FF6  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19630  003FF8  223F               	addwfc	___flmul@f3_as_product+3,f,c
 19631  003FFA  0012               	return	
 19632  003FFC                     __end_ofPL62:
 19633                           	opt stack 0
 19634  003FFC                     PL72:
 19635                           	opt stack 25
 19636  003FFC  90D8               	bcf	status,0,c
 19637  003FFE  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19638  004000  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19639  004002  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19640  004004  3360               	rrcf	___flmul@f1& (0+255),f,b
 19641  004006  90D8               	bcf	status,0,c
 19642  004008  0012               	return	
 19643  00400A                     __end_ofPL72:
 19644                           	opt stack 0
 19645                           tblptru	equ	0xFF8
 19646                           tblptrh	equ	0xFF7
 19647                           tblptrl	equ	0xFF6
 19648                           tablat	equ	0xFF5
 19649                           prodh	equ	0xFF4
 19650                           prodl	equ	0xFF3
 19651                           intcon	equ	0xFF2
 19652                           postinc0	equ	0xFEE
 19653                           wreg	equ	0xFE8
 19654                           indf1	equ	0xFE7
 19655                           postdec1	equ	0xFE5
 19656                           fsr1h	equ	0xFE2
 19657                           fsr1l	equ	0xFE1
 19658                           indf2	equ	0xFDF
 19659                           postinc2	equ	0xFDE
 19660                           postdec2	equ	0xFDD
 19661                           plusw2	equ	0xFDB
 19662                           fsr2h	equ	0xFDA
 19663                           fsr2l	equ	0xFD9
 19664                           status	equ	0xFD8
 19665                           
 19666 ;; *************** function _vscp_readAppReg *****************
 19667 ;; Defined at:
 19668 ;;		line 1273 in file "../main.c"
 19669 ;; Parameters:    Size  Location     Type
 19670 ;;  reg             1    wreg     unsigned char 
 19671 ;; Auto vars:     Size  Location     Type
 19672 ;;  reg             1   26[COMRAM] unsigned char 
 19673 ;;  pos             1   25[COMRAM] unsigned char 
 19674 ;;  rv              1   27[COMRAM] unsigned char 
 19675 ;; Return value:  Size  Location     Type
 19676 ;;                  1    wreg      unsigned char 
 19677 ;; Registers used:
 19678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19679 ;; Tracked objects:
 19680 ;;		On entry : F/0
 19681 ;;		On exit  : 0/0
 19682 ;;		Unchanged: 0/0
 19683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19684 ;;      Params:         0       0       0       0       0       0       0
 19685 ;;      Locals:         3       0       0       0       0       0       0
 19686 ;;      Temps:          0       0       0       0       0       0       0
 19687 ;;      Totals:         3       0       0       0       0       0       0
 19688 ;;Total ram usage:        3 bytes
 19689 ;; Hardware stack levels used:    1
 19690 ;; Hardware stack levels required when called:    3
 19691 ;; This function calls:
 19692 ;;		_readEEPROM
 19693 ;; This function is called by:
 19694 ;;		_vscp_readRegister
 19695 ;;		_vscp_handleProtocolEvent
 19696 ;; This function uses a non-reentrant model
 19697 ;;
 19698                           
 19699                           	psect	text98
 19700  001368                     __ptext98:
 19701                           	opt stack 0
 19702  001368                     _vscp_readAppReg:
 19703                           	opt stack 24
 19704                           
 19705                           ;incstack = 0
 19706                           ;incstack = 0
 19707                           ;vscp_readAppReg@reg stored from wreg
 19708  001368  CFE8 F01B          	movff	wreg,vscp_readAppReg@reg
 19709                           
 19710                           ; BSR set to: 0
 19711                           ;main.c: 1274: uint8_t rv;
 19712                           ;main.c: 1279: if (0 == vscp_page_select) {
 19713  00136C  5047               	movf	_vscp_page_select+1,w,c
 19714  00136E  1046               	iorwf	_vscp_page_select,w,c
 19715  001370  E101 D255          	bz	l10640
 19716  001374  D399               	goto	l10642
 19717  001376                     l10438:
 19718                           
 19719                           ; BSR set to: 0
 19720                           ;main.c: 1285: rv = readEEPROM( 0x41 );
 19721  001376  6A17               	clrf	?_readEEPROM+1,c
 19722  001378  0E41               	movlw	65
 19723  00137A  6E16               	movwf	?_readEEPROM,c
 19724  00137C  EC64  F029         	call	_readEEPROM	;wreg free
 19725  001380  D3C0               	goto	L53
 19726  001382                     l10440:
 19727                           
 19728                           ; BSR set to: 0
 19729                           ;main.c: 1290: rv = readEEPROM( 0x42 );
 19730  001382  6A17               	clrf	?_readEEPROM+1,c
 19731  001384  0E42               	movlw	66
 19732  001386  6E16               	movwf	?_readEEPROM,c
 19733  001388  EC64  F029         	call	_readEEPROM	;wreg free
 19734  00138C  D3BA               	goto	L53
 19735  00138E                     l10442:
 19736                           
 19737                           ; BSR set to: 0
 19738                           ;main.c: 1295: rv = readEEPROM( 0x43 );
 19739  00138E  6A17               	clrf	?_readEEPROM+1,c
 19740  001390  0E43               	movlw	67
 19741  001392  6E16               	movwf	?_readEEPROM,c
 19742  001394  EC64  F029         	call	_readEEPROM	;wreg free
 19743  001398  D3B4               	goto	L53
 19744  00139A                     l10444:
 19745                           
 19746                           ; BSR set to: 0
 19747                           ;main.c: 1300: rv = readEEPROM (0x44 );
 19748  00139A  6A17               	clrf	?_readEEPROM+1,c
 19749  00139C  0E44               	movlw	68
 19750  00139E  6E16               	movwf	?_readEEPROM,c
 19751  0013A0  EC64  F029         	call	_readEEPROM	;wreg free
 19752  0013A4  D3AE               	goto	L53
 19753  0013A6                     l10446:
 19754                           
 19755                           ; BSR set to: 0
 19756                           ;main.c: 1305: rv = readEEPROM( 0x45 );
 19757  0013A6  6A17               	clrf	?_readEEPROM+1,c
 19758  0013A8  0E45               	movlw	69
 19759  0013AA  6E16               	movwf	?_readEEPROM,c
 19760  0013AC  EC64  F029         	call	_readEEPROM	;wreg free
 19761  0013B0  D3A8               	goto	L53
 19762  0013B2                     l10448:
 19763                           
 19764                           ; BSR set to: 0
 19765                           ;main.c: 1310: rv = readEEPROM( 0x46 );
 19766  0013B2  6A17               	clrf	?_readEEPROM+1,c
 19767  0013B4  0E46               	movlw	70
 19768  0013B6  6E16               	movwf	?_readEEPROM,c
 19769  0013B8  EC64  F029         	call	_readEEPROM	;wreg free
 19770  0013BC  D3A2               	goto	L53
 19771  0013BE                     l10450:
 19772                           
 19773                           ; BSR set to: 0
 19774                           ;main.c: 1315: rv = readEEPROM( 0x47 );
 19775  0013BE  6A17               	clrf	?_readEEPROM+1,c
 19776  0013C0  0E47               	movlw	71
 19777  0013C2  6E16               	movwf	?_readEEPROM,c
 19778  0013C4  EC64  F029         	call	_readEEPROM	;wreg free
 19779  0013C8  D39C               	goto	L53
 19780  0013CA                     l10452:
 19781                           
 19782                           ; BSR set to: 0
 19783                           ;main.c: 1320: rv = readEEPROM( 0x48 );
 19784  0013CA  6A17               	clrf	?_readEEPROM+1,c
 19785  0013CC  0E48               	movlw	72
 19786  0013CE  6E16               	movwf	?_readEEPROM,c
 19787  0013D0  EC64  F029         	call	_readEEPROM	;wreg free
 19788  0013D4  D396               	goto	L53
 19789  0013D6                     l10454:
 19790                           
 19791                           ; BSR set to: 0
 19792                           ;main.c: 1325: rv = ((current_temp[0] & 0xff00) >> 8);
 19793  0013D6  51AA               	movf	(_current_temp+1)& (0+255),w,b
 19794  0013D8  D394               	goto	L53
 19795  0013DA                     l311:
 19796                           
 19797                           ; BSR set to: 0
 19798                           ;main.c: 1330: rv = (current_temp[0] & 0x00ff);
 19799  0013DA  C0A9  F01C         	movff	_current_temp,vscp_readAppReg@rv
 19800                           
 19801                           ;main.c: 1331: break;
 19802  0013DE  D392               	goto	l10664
 19803  0013E0                     l10456:
 19804                           
 19805                           ; BSR set to: 0
 19806                           ;main.c: 1335: rv = ((current_temp[1] & 0xff00) >> 8);
 19807  0013E0  51AC               	movf	(_current_temp+3)& (0+255),w,b
 19808  0013E2  D38F               	goto	L53
 19809  0013E4                     l313:
 19810                           
 19811                           ; BSR set to: 0
 19812                           ;main.c: 1340: rv = (current_temp[1] & 0x00ff);
 19813  0013E4  C0AB  F01C         	movff	_current_temp+2,vscp_readAppReg@rv
 19814                           
 19815                           ;main.c: 1341: break;
 19816  0013E8  D38D               	goto	l10664
 19817  0013EA                     l10458:
 19818                           
 19819                           ; BSR set to: 0
 19820                           ;main.c: 1345: rv = ((current_temp[2] & 0xff00) >> 8);
 19821  0013EA  51AE               	movf	(_current_temp+5)& (0+255),w,b
 19822  0013EC  D38A               	goto	L53
 19823  0013EE                     l315:
 19824                           
 19825                           ; BSR set to: 0
 19826                           ;main.c: 1350: rv = (current_temp[2] & 0x00ff);
 19827  0013EE  C0AD  F01C         	movff	_current_temp+4,vscp_readAppReg@rv
 19828                           
 19829                           ;main.c: 1351: break;
 19830  0013F2  D388               	goto	l10664
 19831  0013F4                     l10460:
 19832                           
 19833                           ; BSR set to: 0
 19834                           ;main.c: 1355: rv = ((current_temp[3] & 0xff00) >> 8);
 19835  0013F4  51B0               	movf	(_current_temp+7)& (0+255),w,b
 19836  0013F6  D385               	goto	L53
 19837  0013F8                     l317:
 19838                           
 19839                           ; BSR set to: 0
 19840                           ;main.c: 1360: rv = (current_temp[3] & 0x00ff);
 19841  0013F8  C0AF  F01C         	movff	_current_temp+6,vscp_readAppReg@rv
 19842                           
 19843                           ;main.c: 1361: break;
 19844  0013FC  D383               	goto	l10664
 19845  0013FE                     l10462:
 19846                           
 19847                           ; BSR set to: 0
 19848                           ;main.c: 1365: rv = ((current_temp[4] & 0xff00) >> 8);
 19849  0013FE  51B2               	movf	(_current_temp+9)& (0+255),w,b
 19850  001400  D380               	goto	L53
 19851  001402                     l319:
 19852                           
 19853                           ; BSR set to: 0
 19854                           ;main.c: 1370: rv = (current_temp[4] & 0x00ff);
 19855  001402  C0B1  F01C         	movff	_current_temp+8,vscp_readAppReg@rv
 19856                           
 19857                           ;main.c: 1371: break;
 19858  001406  D37E               	goto	l10664
 19859  001408                     l10464:
 19860                           
 19861                           ; BSR set to: 0
 19862                           ;main.c: 1375: rv = ((current_temp[5] & 0xff00) >> 8);
 19863  001408  51B4               	movf	(_current_temp+11)& (0+255),w,b
 19864  00140A  D37B               	goto	L53
 19865  00140C                     l321:
 19866                           
 19867                           ; BSR set to: 0
 19868                           ;main.c: 1380: rv = (current_temp[5] & 0x00ff);
 19869  00140C  C0B3  F01C         	movff	_current_temp+10,vscp_readAppReg@rv
 19870                           
 19871                           ;main.c: 1381: break;
 19872  001410  D379               	goto	l10664
 19873  001412                     l10466:
 19874                           
 19875                           ; BSR set to: 0
 19876                           ;main.c: 1385: rv = readEEPROM(0x49);
 19877  001412  6A17               	clrf	?_readEEPROM+1,c
 19878  001414  0E49               	movlw	73
 19879  001416  6E16               	movwf	?_readEEPROM,c
 19880  001418  EC64  F029         	call	_readEEPROM	;wreg free
 19881  00141C  D372               	goto	L53
 19882  00141E                     l10468:
 19883                           
 19884                           ; BSR set to: 0
 19885                           ;main.c: 1390: rv = readEEPROM(0x4A);
 19886  00141E  6A17               	clrf	?_readEEPROM+1,c
 19887  001420  0E4A               	movlw	74
 19888  001422  6E16               	movwf	?_readEEPROM,c
 19889  001424  EC64  F029         	call	_readEEPROM	;wreg free
 19890  001428  D36C               	goto	L53
 19891  00142A                     l10470:
 19892                           
 19893                           ; BSR set to: 0
 19894                           ;main.c: 1395: rv = readEEPROM(0x4B);
 19895  00142A  6A17               	clrf	?_readEEPROM+1,c
 19896  00142C  0E4B               	movlw	75
 19897  00142E  6E16               	movwf	?_readEEPROM,c
 19898  001430  EC64  F029         	call	_readEEPROM	;wreg free
 19899  001434  D366               	goto	L53
 19900  001436                     l10472:
 19901                           
 19902                           ; BSR set to: 0
 19903                           ;main.c: 1400: rv = readEEPROM(0x4C);
 19904  001436  6A17               	clrf	?_readEEPROM+1,c
 19905  001438  0E4C               	movlw	76
 19906  00143A  6E16               	movwf	?_readEEPROM,c
 19907  00143C  EC64  F029         	call	_readEEPROM	;wreg free
 19908  001440  D360               	goto	L53
 19909  001442                     l10474:
 19910                           
 19911                           ; BSR set to: 0
 19912                           ;main.c: 1405: rv = readEEPROM(0x4D);
 19913  001442  6A17               	clrf	?_readEEPROM+1,c
 19914  001444  0E4D               	movlw	77
 19915  001446  6E16               	movwf	?_readEEPROM,c
 19916  001448  EC64  F029         	call	_readEEPROM	;wreg free
 19917  00144C  D35A               	goto	L53
 19918  00144E                     l10476:
 19919                           
 19920                           ; BSR set to: 0
 19921                           ;main.c: 1410: rv = readEEPROM(0x4E);
 19922  00144E  6A17               	clrf	?_readEEPROM+1,c
 19923  001450  0E4E               	movlw	78
 19924  001452  6E16               	movwf	?_readEEPROM,c
 19925  001454  EC64  F029         	call	_readEEPROM	;wreg free
 19926  001458  D354               	goto	L53
 19927  00145A                     l10478:
 19928                           
 19929                           ; BSR set to: 0
 19930                           ;main.c: 1417: rv = readEEPROM(0x4F);
 19931  00145A  6A17               	clrf	?_readEEPROM+1,c
 19932  00145C  0E4F               	movlw	79
 19933  00145E  6E16               	movwf	?_readEEPROM,c
 19934  001460  EC64  F029         	call	_readEEPROM	;wreg free
 19935  001464  D34E               	goto	L53
 19936  001466                     l10480:
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;main.c: 1422: rv = readEEPROM(0x50);
 19940  001466  6A17               	clrf	?_readEEPROM+1,c
 19941  001468  0E50               	movlw	80
 19942  00146A  6E16               	movwf	?_readEEPROM,c
 19943  00146C  EC64  F029         	call	_readEEPROM	;wreg free
 19944  001470  D348               	goto	L53
 19945  001472                     l10482:
 19946                           
 19947                           ; BSR set to: 0
 19948                           ;main.c: 1427: rv = readEEPROM(0x51);
 19949  001472  6A17               	clrf	?_readEEPROM+1,c
 19950  001474  0E51               	movlw	81
 19951  001476  6E16               	movwf	?_readEEPROM,c
 19952  001478  EC64  F029         	call	_readEEPROM	;wreg free
 19953  00147C  D342               	goto	L53
 19954  00147E                     l10484:
 19955                           
 19956                           ; BSR set to: 0
 19957                           ;main.c: 1432: rv = readEEPROM(0x52);
 19958  00147E  6A17               	clrf	?_readEEPROM+1,c
 19959  001480  0E52               	movlw	82
 19960  001482  6E16               	movwf	?_readEEPROM,c
 19961  001484  EC64  F029         	call	_readEEPROM	;wreg free
 19962  001488  D33C               	goto	L53
 19963  00148A                     l10486:
 19964                           
 19965                           ; BSR set to: 0
 19966                           ;main.c: 1437: rv = readEEPROM(0x53);
 19967  00148A  6A17               	clrf	?_readEEPROM+1,c
 19968  00148C  0E53               	movlw	83
 19969  00148E  6E16               	movwf	?_readEEPROM,c
 19970  001490  EC64  F029         	call	_readEEPROM	;wreg free
 19971  001494  D336               	goto	L53
 19972  001496                     l10488:
 19973                           
 19974                           ; BSR set to: 0
 19975                           ;main.c: 1442: rv = readEEPROM(0x54);
 19976  001496  6A17               	clrf	?_readEEPROM+1,c
 19977  001498  0E54               	movlw	84
 19978  00149A  6E16               	movwf	?_readEEPROM,c
 19979  00149C  EC64  F029         	call	_readEEPROM	;wreg free
 19980  0014A0  D330               	goto	L53
 19981  0014A2                     l10490:
 19982                           
 19983                           ; BSR set to: 0
 19984                           ;main.c: 1447: rv = readEEPROM(0x55);
 19985  0014A2  6A17               	clrf	?_readEEPROM+1,c
 19986  0014A4  0E55               	movlw	85
 19987  0014A6  6E16               	movwf	?_readEEPROM,c
 19988  0014A8  EC64  F029         	call	_readEEPROM	;wreg free
 19989  0014AC  D32A               	goto	L53
 19990  0014AE                     l10492:
 19991                           
 19992                           ; BSR set to: 0
 19993                           ;main.c: 1452: rv = readEEPROM(0x56);
 19994  0014AE  6A17               	clrf	?_readEEPROM+1,c
 19995  0014B0  0E56               	movlw	86
 19996  0014B2  6E16               	movwf	?_readEEPROM,c
 19997  0014B4  EC64  F029         	call	_readEEPROM	;wreg free
 19998  0014B8  D324               	goto	L53
 19999  0014BA                     l10494:
 20000                           
 20001                           ; BSR set to: 0
 20002                           ;main.c: 1457: rv = readEEPROM(0x57);
 20003  0014BA  6A17               	clrf	?_readEEPROM+1,c
 20004  0014BC  0E57               	movlw	87
 20005  0014BE  6E16               	movwf	?_readEEPROM,c
 20006  0014C0  EC64  F029         	call	_readEEPROM	;wreg free
 20007  0014C4  D31E               	goto	L53
 20008  0014C6                     l10496:
 20009                           
 20010                           ; BSR set to: 0
 20011                           ;main.c: 1462: rv = readEEPROM(0x58);
 20012  0014C6  6A17               	clrf	?_readEEPROM+1,c
 20013  0014C8  0E58               	movlw	88
 20014  0014CA  6E16               	movwf	?_readEEPROM,c
 20015  0014CC  EC64  F029         	call	_readEEPROM	;wreg free
 20016  0014D0  D318               	goto	L53
 20017  0014D2                     l10498:
 20018                           
 20019                           ; BSR set to: 0
 20020                           ;main.c: 1467: rv = readEEPROM(0x59);
 20021  0014D2  6A17               	clrf	?_readEEPROM+1,c
 20022  0014D4  0E59               	movlw	89
 20023  0014D6  6E16               	movwf	?_readEEPROM,c
 20024  0014D8  EC64  F029         	call	_readEEPROM	;wreg free
 20025  0014DC  D312               	goto	L53
 20026  0014DE                     l10500:
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;main.c: 1472: rv = readEEPROM(0x5A);
 20030  0014DE  6A17               	clrf	?_readEEPROM+1,c
 20031  0014E0  0E5A               	movlw	90
 20032  0014E2  6E16               	movwf	?_readEEPROM,c
 20033  0014E4  EC64  F029         	call	_readEEPROM	;wreg free
 20034  0014E8  D30C               	goto	L53
 20035  0014EA                     l10502:
 20036                           
 20037                           ; BSR set to: 0
 20038                           ;main.c: 1481: rv = readEEPROM(0x5B);
 20039  0014EA  6A17               	clrf	?_readEEPROM+1,c
 20040  0014EC  0E5B               	movlw	91
 20041  0014EE  6E16               	movwf	?_readEEPROM,c
 20042  0014F0  EC64  F029         	call	_readEEPROM	;wreg free
 20043  0014F4  D306               	goto	L53
 20044  0014F6                     l10504:
 20045                           
 20046                           ; BSR set to: 0
 20047                           ;main.c: 1486: rv = readEEPROM(0x5C);
 20048  0014F6  6A17               	clrf	?_readEEPROM+1,c
 20049  0014F8  0E5C               	movlw	92
 20050  0014FA  6E16               	movwf	?_readEEPROM,c
 20051  0014FC  EC64  F029         	call	_readEEPROM	;wreg free
 20052  001500  D300               	goto	L53
 20053  001502                     l10506:
 20054                           
 20055                           ; BSR set to: 0
 20056                           ;main.c: 1491: rv = readEEPROM(0x5D);
 20057  001502  6A17               	clrf	?_readEEPROM+1,c
 20058  001504  0E5D               	movlw	93
 20059  001506  6E16               	movwf	?_readEEPROM,c
 20060  001508  EC64  F029         	call	_readEEPROM	;wreg free
 20061  00150C  D2FA               	goto	L53
 20062  00150E                     l10508:
 20063                           
 20064                           ; BSR set to: 0
 20065                           ;main.c: 1496: rv = readEEPROM(0x5E);
 20066  00150E  6A17               	clrf	?_readEEPROM+1,c
 20067  001510  0E5E               	movlw	94
 20068  001512  6E16               	movwf	?_readEEPROM,c
 20069  001514  EC64  F029         	call	_readEEPROM	;wreg free
 20070  001518  D2F4               	goto	L53
 20071  00151A                     l10510:
 20072                           
 20073                           ; BSR set to: 0
 20074                           ;main.c: 1501: rv = readEEPROM(0x5F);
 20075  00151A  6A17               	clrf	?_readEEPROM+1,c
 20076  00151C  0E5F               	movlw	95
 20077  00151E  6E16               	movwf	?_readEEPROM,c
 20078  001520  EC64  F029         	call	_readEEPROM	;wreg free
 20079  001524  D2EE               	goto	L53
 20080  001526                     l10512:
 20081                           
 20082                           ; BSR set to: 0
 20083                           ;main.c: 1506: rv = readEEPROM(0x60);
 20084  001526  6A17               	clrf	?_readEEPROM+1,c
 20085  001528  0E60               	movlw	96
 20086  00152A  6E16               	movwf	?_readEEPROM,c
 20087  00152C  EC64  F029         	call	_readEEPROM	;wreg free
 20088  001530  D2E8               	goto	L53
 20089  001532                     l10514:
 20090                           
 20091                           ; BSR set to: 0
 20092                           ;main.c: 1511: rv = readEEPROM(0x61);
 20093  001532  6A17               	clrf	?_readEEPROM+1,c
 20094  001534  0E61               	movlw	97
 20095  001536  6E16               	movwf	?_readEEPROM,c
 20096  001538  EC64  F029         	call	_readEEPROM	;wreg free
 20097  00153C  D2E2               	goto	L53
 20098  00153E                     l10516:
 20099                           
 20100                           ; BSR set to: 0
 20101                           ;main.c: 1516: rv = readEEPROM(0x62);
 20102  00153E  6A17               	clrf	?_readEEPROM+1,c
 20103  001540  0E62               	movlw	98
 20104  001542  6E16               	movwf	?_readEEPROM,c
 20105  001544  EC64  F029         	call	_readEEPROM	;wreg free
 20106  001548  D2DC               	goto	L53
 20107  00154A                     l10518:
 20108                           
 20109                           ; BSR set to: 0
 20110                           ;main.c: 1521: rv = readEEPROM(0x63);
 20111  00154A  6A17               	clrf	?_readEEPROM+1,c
 20112  00154C  0E63               	movlw	99
 20113  00154E  6E16               	movwf	?_readEEPROM,c
 20114  001550  EC64  F029         	call	_readEEPROM	;wreg free
 20115  001554  D2D6               	goto	L53
 20116  001556                     l10520:
 20117                           
 20118                           ; BSR set to: 0
 20119                           ;main.c: 1526: rv = readEEPROM(0x64);
 20120  001556  6A17               	clrf	?_readEEPROM+1,c
 20121  001558  0E64               	movlw	100
 20122  00155A  6E16               	movwf	?_readEEPROM,c
 20123  00155C  EC64  F029         	call	_readEEPROM	;wreg free
 20124  001560  D2D0               	goto	L53
 20125  001562                     l10522:
 20126                           
 20127                           ; BSR set to: 0
 20128                           ;main.c: 1531: rv = readEEPROM(0x65);
 20129  001562  6A17               	clrf	?_readEEPROM+1,c
 20130  001564  0E65               	movlw	101
 20131  001566  6E16               	movwf	?_readEEPROM,c
 20132  001568  EC64  F029         	call	_readEEPROM	;wreg free
 20133  00156C  D2CA               	goto	L53
 20134  00156E                     l10524:
 20135                           
 20136                           ; BSR set to: 0
 20137                           ;main.c: 1536: rv = readEEPROM(0x66);
 20138  00156E  6A17               	clrf	?_readEEPROM+1,c
 20139  001570  0E66               	movlw	102
 20140  001572  6E16               	movwf	?_readEEPROM,c
 20141  001574  EC64  F029         	call	_readEEPROM	;wreg free
 20142  001578  D2C4               	goto	L53
 20143  00157A                     l10526:
 20144                           
 20145                           ; BSR set to: 0
 20146                           ;main.c: 1546: rv = readEEPROM(0x67);
 20147  00157A  6A17               	clrf	?_readEEPROM+1,c
 20148  00157C  0E67               	movlw	103
 20149  00157E  6E16               	movwf	?_readEEPROM,c
 20150  001580  EC64  F029         	call	_readEEPROM	;wreg free
 20151  001584  D2BE               	goto	L53
 20152  001586                     l10528:
 20153                           
 20154                           ; BSR set to: 0
 20155                           ;main.c: 1551: rv = readEEPROM(0x68);
 20156  001586  6A17               	clrf	?_readEEPROM+1,c
 20157  001588  0E68               	movlw	104
 20158  00158A  6E16               	movwf	?_readEEPROM,c
 20159  00158C  EC64  F029         	call	_readEEPROM	;wreg free
 20160  001590  D2B8               	goto	L53
 20161  001592                     l10530:
 20162                           
 20163                           ; BSR set to: 0
 20164                           ;main.c: 1556: rv = readEEPROM(0x69);
 20165  001592  6A17               	clrf	?_readEEPROM+1,c
 20166  001594  0E69               	movlw	105
 20167  001596  6E16               	movwf	?_readEEPROM,c
 20168  001598  EC64  F029         	call	_readEEPROM	;wreg free
 20169  00159C  D2B2               	goto	L53
 20170  00159E                     l10532:
 20171                           
 20172                           ; BSR set to: 0
 20173                           ;main.c: 1561: rv = readEEPROM(0x6A);
 20174  00159E  6A17               	clrf	?_readEEPROM+1,c
 20175  0015A0  0E6A               	movlw	106
 20176  0015A2  6E16               	movwf	?_readEEPROM,c
 20177  0015A4  EC64  F029         	call	_readEEPROM	;wreg free
 20178  0015A8  D2AC               	goto	L53
 20179  0015AA                     l10534:
 20180                           
 20181                           ; BSR set to: 0
 20182                           ;main.c: 1566: rv = readEEPROM(0x6B);
 20183  0015AA  6A17               	clrf	?_readEEPROM+1,c
 20184  0015AC  0E6B               	movlw	107
 20185  0015AE  6E16               	movwf	?_readEEPROM,c
 20186  0015B0  EC64  F029         	call	_readEEPROM	;wreg free
 20187  0015B4  D2A6               	goto	L53
 20188  0015B6                     l10536:
 20189                           
 20190                           ; BSR set to: 0
 20191                           ;main.c: 1571: rv = readEEPROM(0x6C);
 20192  0015B6  6A17               	clrf	?_readEEPROM+1,c
 20193  0015B8  0E6C               	movlw	108
 20194  0015BA  6E16               	movwf	?_readEEPROM,c
 20195  0015BC  EC64  F029         	call	_readEEPROM	;wreg free
 20196  0015C0  D2A0               	goto	L53
 20197  0015C2                     l10538:
 20198                           
 20199                           ; BSR set to: 0
 20200                           ;main.c: 1576: rv = readEEPROM(0x6D);
 20201  0015C2  6A17               	clrf	?_readEEPROM+1,c
 20202  0015C4  0E6D               	movlw	109
 20203  0015C6  6E16               	movwf	?_readEEPROM,c
 20204  0015C8  EC64  F029         	call	_readEEPROM	;wreg free
 20205  0015CC  D29A               	goto	L53
 20206  0015CE                     l10540:
 20207                           
 20208                           ; BSR set to: 0
 20209                           ;main.c: 1581: rv = readEEPROM(0x6E);
 20210  0015CE  6A17               	clrf	?_readEEPROM+1,c
 20211  0015D0  0E6E               	movlw	110
 20212  0015D2  6E16               	movwf	?_readEEPROM,c
 20213  0015D4  EC64  F029         	call	_readEEPROM	;wreg free
 20214  0015D8  D294               	goto	L53
 20215  0015DA                     l10542:
 20216                           
 20217                           ; BSR set to: 0
 20218                           ;main.c: 1586: rv = readEEPROM(0x6F);
 20219  0015DA  6A17               	clrf	?_readEEPROM+1,c
 20220  0015DC  0E6F               	movlw	111
 20221  0015DE  6E16               	movwf	?_readEEPROM,c
 20222  0015E0  EC64  F029         	call	_readEEPROM	;wreg free
 20223  0015E4  D28E               	goto	L53
 20224  0015E6                     l10544:
 20225                           
 20226                           ; BSR set to: 0
 20227                           ;main.c: 1591: rv = readEEPROM(0x70);
 20228  0015E6  6A17               	clrf	?_readEEPROM+1,c
 20229  0015E8  0E70               	movlw	112
 20230  0015EA  6E16               	movwf	?_readEEPROM,c
 20231  0015EC  EC64  F029         	call	_readEEPROM	;wreg free
 20232  0015F0  D288               	goto	L53
 20233  0015F2                     l10546:
 20234                           
 20235                           ; BSR set to: 0
 20236                           ;main.c: 1596: rv = readEEPROM(0x71);
 20237  0015F2  6A17               	clrf	?_readEEPROM+1,c
 20238  0015F4  0E71               	movlw	113
 20239  0015F6  6E16               	movwf	?_readEEPROM,c
 20240  0015F8  EC64  F029         	call	_readEEPROM	;wreg free
 20241  0015FC  D282               	goto	L53
 20242  0015FE                     l10548:
 20243                           
 20244                           ; BSR set to: 0
 20245                           ;main.c: 1601: rv = readEEPROM(0x72);
 20246  0015FE  6A17               	clrf	?_readEEPROM+1,c
 20247  001600  0E72               	movlw	114
 20248  001602  6E16               	movwf	?_readEEPROM,c
 20249  001604  EC64  F029         	call	_readEEPROM	;wreg free
 20250  001608  D27C               	goto	L53
 20251  00160A                     l10550:
 20252                           
 20253                           ; BSR set to: 0
 20254                           ;main.c: 1610: rv = readEEPROM(0x73);
 20255  00160A  6A17               	clrf	?_readEEPROM+1,c
 20256  00160C  0E73               	movlw	115
 20257  00160E  6E16               	movwf	?_readEEPROM,c
 20258  001610  EC64  F029         	call	_readEEPROM	;wreg free
 20259  001614  D276               	goto	L53
 20260  001616                     l10552:
 20261                           
 20262                           ; BSR set to: 0
 20263                           ;main.c: 1615: rv = readEEPROM(0x74);
 20264  001616  6A17               	clrf	?_readEEPROM+1,c
 20265  001618  0E74               	movlw	116
 20266  00161A  6E16               	movwf	?_readEEPROM,c
 20267  00161C  EC64  F029         	call	_readEEPROM	;wreg free
 20268  001620  D270               	goto	L53
 20269  001622                     l10554:
 20270                           
 20271                           ; BSR set to: 0
 20272                           ;main.c: 1620: rv = readEEPROM(0x75);
 20273  001622  6A17               	clrf	?_readEEPROM+1,c
 20274  001624  0E75               	movlw	117
 20275  001626  6E16               	movwf	?_readEEPROM,c
 20276  001628  EC64  F029         	call	_readEEPROM	;wreg free
 20277  00162C  D26A               	goto	L53
 20278  00162E                     l10556:
 20279                           
 20280                           ; BSR set to: 0
 20281                           ;main.c: 1625: rv = readEEPROM(0x76);
 20282  00162E  6A17               	clrf	?_readEEPROM+1,c
 20283  001630  0E76               	movlw	118
 20284  001632  6E16               	movwf	?_readEEPROM,c
 20285  001634  EC64  F029         	call	_readEEPROM	;wreg free
 20286  001638  D264               	goto	L53
 20287  00163A                     l10558:
 20288                           
 20289                           ; BSR set to: 0
 20290                           ;main.c: 1630: rv = readEEPROM(0x77);
 20291  00163A  6A17               	clrf	?_readEEPROM+1,c
 20292  00163C  0E77               	movlw	119
 20293  00163E  6E16               	movwf	?_readEEPROM,c
 20294  001640  EC64  F029         	call	_readEEPROM	;wreg free
 20295  001644  D25E               	goto	L53
 20296  001646                     l10560:
 20297                           
 20298                           ; BSR set to: 0
 20299                           ;main.c: 1635: rv = readEEPROM(0x78);
 20300  001646  6A17               	clrf	?_readEEPROM+1,c
 20301  001648  0E78               	movlw	120
 20302  00164A  6E16               	movwf	?_readEEPROM,c
 20303  00164C  EC64  F029         	call	_readEEPROM	;wreg free
 20304  001650  D258               	goto	L53
 20305  001652                     l10562:
 20306                           
 20307                           ; BSR set to: 0
 20308                           ;main.c: 1640: rv = readEEPROM(0x79);
 20309  001652  6A17               	clrf	?_readEEPROM+1,c
 20310  001654  0E79               	movlw	121
 20311  001656  6E16               	movwf	?_readEEPROM,c
 20312  001658  EC64  F029         	call	_readEEPROM	;wreg free
 20313  00165C  D252               	goto	L53
 20314  00165E                     l10564:
 20315                           
 20316                           ; BSR set to: 0
 20317                           ;main.c: 1645: rv = readEEPROM(0x7A);
 20318  00165E  6A17               	clrf	?_readEEPROM+1,c
 20319  001660  0E7A               	movlw	122
 20320  001662  6E16               	movwf	?_readEEPROM,c
 20321  001664  EC64  F029         	call	_readEEPROM	;wreg free
 20322  001668  D24C               	goto	L53
 20323  00166A                     l10566:
 20324                           
 20325                           ; BSR set to: 0
 20326                           ;main.c: 1650: rv = readEEPROM(0x7B);
 20327  00166A  6A17               	clrf	?_readEEPROM+1,c
 20328  00166C  0E7B               	movlw	123
 20329  00166E  6E16               	movwf	?_readEEPROM,c
 20330  001670  EC64  F029         	call	_readEEPROM	;wreg free
 20331  001674  D246               	goto	L53
 20332  001676                     l10568:
 20333                           
 20334                           ; BSR set to: 0
 20335                           ;main.c: 1655: rv = readEEPROM(0x7C);
 20336  001676  6A17               	clrf	?_readEEPROM+1,c
 20337  001678  0E7C               	movlw	124
 20338  00167A  6E16               	movwf	?_readEEPROM,c
 20339  00167C  EC64  F029         	call	_readEEPROM	;wreg free
 20340  001680  D240               	goto	L53
 20341  001682                     l10570:
 20342                           
 20343                           ; BSR set to: 0
 20344                           ;main.c: 1660: rv = readEEPROM(0x7D);
 20345  001682  6A17               	clrf	?_readEEPROM+1,c
 20346  001684  0E7D               	movlw	125
 20347  001686  6E16               	movwf	?_readEEPROM,c
 20348  001688  EC64  F029         	call	_readEEPROM	;wreg free
 20349  00168C  D23A               	goto	L53
 20350  00168E                     l10572:
 20351                           
 20352                           ; BSR set to: 0
 20353                           ;main.c: 1665: rv = readEEPROM(0x7E);
 20354  00168E  6A17               	clrf	?_readEEPROM+1,c
 20355  001690  0E7E               	movlw	126
 20356  001692  6E16               	movwf	?_readEEPROM,c
 20357  001694  EC64  F029         	call	_readEEPROM	;wreg free
 20358  001698  D234               	goto	L53
 20359  00169A                     l10574:
 20360                           
 20361                           ; BSR set to: 0
 20362                           ;main.c: 1674: rv = readEEPROM(0x7F);
 20363  00169A  6A17               	clrf	?_readEEPROM+1,c
 20364  00169C  0E7F               	movlw	127
 20365  00169E  6E16               	movwf	?_readEEPROM,c
 20366  0016A0  EC64  F029         	call	_readEEPROM	;wreg free
 20367  0016A4  D22E               	goto	L53
 20368  0016A6                     l10576:
 20369                           
 20370                           ; BSR set to: 0
 20371                           ;main.c: 1679: rv = readEEPROM(0x80);
 20372  0016A6  6A17               	clrf	?_readEEPROM+1,c
 20373  0016A8  0E80               	movlw	128
 20374  0016AA  6E16               	movwf	?_readEEPROM,c
 20375  0016AC  EC64  F029         	call	_readEEPROM	;wreg free
 20376  0016B0  D228               	goto	L53
 20377  0016B2                     l10578:
 20378                           
 20379                           ; BSR set to: 0
 20380                           ;main.c: 1684: rv = readEEPROM(0x81);
 20381  0016B2  6A17               	clrf	?_readEEPROM+1,c
 20382  0016B4  0E81               	movlw	129
 20383  0016B6  6E16               	movwf	?_readEEPROM,c
 20384  0016B8  EC64  F029         	call	_readEEPROM	;wreg free
 20385  0016BC  D222               	goto	L53
 20386  0016BE                     l10580:
 20387                           
 20388                           ; BSR set to: 0
 20389                           ;main.c: 1689: rv = readEEPROM(0x82);
 20390  0016BE  6A17               	clrf	?_readEEPROM+1,c
 20391  0016C0  0E82               	movlw	130
 20392  0016C2  6E16               	movwf	?_readEEPROM,c
 20393  0016C4  EC64  F029         	call	_readEEPROM	;wreg free
 20394  0016C8  D21C               	goto	L53
 20395  0016CA                     l10582:
 20396                           
 20397                           ; BSR set to: 0
 20398                           ;main.c: 1694: rv = readEEPROM(0x83);
 20399  0016CA  6A17               	clrf	?_readEEPROM+1,c
 20400  0016CC  0E83               	movlw	131
 20401  0016CE  6E16               	movwf	?_readEEPROM,c
 20402  0016D0  EC64  F029         	call	_readEEPROM	;wreg free
 20403  0016D4  D216               	goto	L53
 20404  0016D6                     l10584:
 20405                           
 20406                           ; BSR set to: 0
 20407                           ;main.c: 1699: rv = readEEPROM(0x84);
 20408  0016D6  6A17               	clrf	?_readEEPROM+1,c
 20409  0016D8  0E84               	movlw	132
 20410  0016DA  6E16               	movwf	?_readEEPROM,c
 20411  0016DC  EC64  F029         	call	_readEEPROM	;wreg free
 20412  0016E0  D210               	goto	L53
 20413  0016E2                     l10586:
 20414                           
 20415                           ; BSR set to: 0
 20416                           ;main.c: 1704: rv = readEEPROM(0x85);
 20417  0016E2  6A17               	clrf	?_readEEPROM+1,c
 20418  0016E4  0E85               	movlw	133
 20419  0016E6  6E16               	movwf	?_readEEPROM,c
 20420  0016E8  EC64  F029         	call	_readEEPROM	;wreg free
 20421  0016EC  D20A               	goto	L53
 20422  0016EE                     l10588:
 20423                           
 20424                           ; BSR set to: 0
 20425                           ;main.c: 1709: rv = readEEPROM(0x86);
 20426  0016EE  6A17               	clrf	?_readEEPROM+1,c
 20427  0016F0  0E86               	movlw	134
 20428  0016F2  6E16               	movwf	?_readEEPROM,c
 20429  0016F4  EC64  F029         	call	_readEEPROM	;wreg free
 20430  0016F8  D204               	goto	L53
 20431  0016FA                     l10590:
 20432                           
 20433                           ; BSR set to: 0
 20434                           ;main.c: 1714: rv = readEEPROM(0x87);
 20435  0016FA  6A17               	clrf	?_readEEPROM+1,c
 20436  0016FC  0E87               	movlw	135
 20437  0016FE  6E16               	movwf	?_readEEPROM,c
 20438  001700  EC64  F029         	call	_readEEPROM	;wreg free
 20439  001704  D1FE               	goto	L53
 20440  001706                     l10592:
 20441                           
 20442                           ; BSR set to: 0
 20443                           ;main.c: 1719: rv = readEEPROM(0x88);
 20444  001706  6A17               	clrf	?_readEEPROM+1,c
 20445  001708  0E88               	movlw	136
 20446  00170A  6E16               	movwf	?_readEEPROM,c
 20447  00170C  EC64  F029         	call	_readEEPROM	;wreg free
 20448  001710  D1F8               	goto	L53
 20449  001712                     l10594:
 20450                           
 20451                           ; BSR set to: 0
 20452                           ;main.c: 1724: rv = readEEPROM(0x89);
 20453  001712  6A17               	clrf	?_readEEPROM+1,c
 20454  001714  0E89               	movlw	137
 20455  001716  6E16               	movwf	?_readEEPROM,c
 20456  001718  EC64  F029         	call	_readEEPROM	;wreg free
 20457  00171C  D1F2               	goto	L53
 20458  00171E                     l10596:
 20459                           
 20460                           ; BSR set to: 0
 20461                           ;main.c: 1729: rv = readEEPROM(0x8A);
 20462  00171E  6A17               	clrf	?_readEEPROM+1,c
 20463  001720  0E8A               	movlw	138
 20464  001722  6E16               	movwf	?_readEEPROM,c
 20465  001724  EC64  F029         	call	_readEEPROM	;wreg free
 20466  001728  D1EC               	goto	L53
 20467  00172A                     l10598:
 20468                           
 20469                           ; BSR set to: 0
 20470                           ;main.c: 1738: rv = readEEPROM(0x8B);
 20471  00172A  6A17               	clrf	?_readEEPROM+1,c
 20472  00172C  0E8B               	movlw	139
 20473  00172E  6E16               	movwf	?_readEEPROM,c
 20474  001730  EC64  F029         	call	_readEEPROM	;wreg free
 20475  001734  D1E6               	goto	L53
 20476  001736                     l10600:
 20477                           
 20478                           ; BSR set to: 0
 20479                           ;main.c: 1743: rv = readEEPROM(0x8C);
 20480  001736  6A17               	clrf	?_readEEPROM+1,c
 20481  001738  0E8C               	movlw	140
 20482  00173A  6E16               	movwf	?_readEEPROM,c
 20483  00173C  EC64  F029         	call	_readEEPROM	;wreg free
 20484  001740  D1E0               	goto	L53
 20485  001742                     l10602:
 20486                           
 20487                           ; BSR set to: 0
 20488                           ;main.c: 1748: rv = readEEPROM(0x8D);
 20489  001742  6A17               	clrf	?_readEEPROM+1,c
 20490  001744  0E8D               	movlw	141
 20491  001746  6E16               	movwf	?_readEEPROM,c
 20492  001748  EC64  F029         	call	_readEEPROM	;wreg free
 20493  00174C  D1DA               	goto	L53
 20494  00174E                     l10604:
 20495                           
 20496                           ; BSR set to: 0
 20497                           ;main.c: 1753: rv = readEEPROM(0x8E);
 20498  00174E  6A17               	clrf	?_readEEPROM+1,c
 20499  001750  0E8E               	movlw	142
 20500  001752  6E16               	movwf	?_readEEPROM,c
 20501  001754  EC64  F029         	call	_readEEPROM	;wreg free
 20502  001758  D1D4               	goto	L53
 20503  00175A                     l10606:
 20504                           
 20505                           ; BSR set to: 0
 20506                           ;main.c: 1758: rv = readEEPROM(0x8F);
 20507  00175A  6A17               	clrf	?_readEEPROM+1,c
 20508  00175C  0E8F               	movlw	143
 20509  00175E  6E16               	movwf	?_readEEPROM,c
 20510  001760  EC64  F029         	call	_readEEPROM	;wreg free
 20511  001764  D1CE               	goto	L53
 20512  001766                     l10608:
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;main.c: 1763: rv = readEEPROM(0x90);
 20516  001766  6A17               	clrf	?_readEEPROM+1,c
 20517  001768  0E90               	movlw	144
 20518  00176A  6E16               	movwf	?_readEEPROM,c
 20519  00176C  EC64  F029         	call	_readEEPROM	;wreg free
 20520  001770  D1C8               	goto	L53
 20521  001772                     l10610:
 20522                           
 20523                           ; BSR set to: 0
 20524                           ;main.c: 1768: rv = readEEPROM(0x91);
 20525  001772  6A17               	clrf	?_readEEPROM+1,c
 20526  001774  0E91               	movlw	145
 20527  001776  6E16               	movwf	?_readEEPROM,c
 20528  001778  EC64  F029         	call	_readEEPROM	;wreg free
 20529  00177C  D1C2               	goto	L53
 20530  00177E                     l10612:
 20531                           
 20532                           ; BSR set to: 0
 20533                           ;main.c: 1773: rv = readEEPROM(0x92);
 20534  00177E  6A17               	clrf	?_readEEPROM+1,c
 20535  001780  0E92               	movlw	146
 20536  001782  6E16               	movwf	?_readEEPROM,c
 20537  001784  EC64  F029         	call	_readEEPROM	;wreg free
 20538  001788  D1BC               	goto	L53
 20539  00178A                     l10614:
 20540                           
 20541                           ; BSR set to: 0
 20542                           ;main.c: 1778: rv = readEEPROM(0x93);
 20543  00178A  6A17               	clrf	?_readEEPROM+1,c
 20544  00178C  0E93               	movlw	147
 20545  00178E  6E16               	movwf	?_readEEPROM,c
 20546  001790  EC64  F029         	call	_readEEPROM	;wreg free
 20547  001794  D1B6               	goto	L53
 20548  001796                     l10616:
 20549                           
 20550                           ; BSR set to: 0
 20551                           ;main.c: 1783: rv = readEEPROM(0x94);
 20552  001796  6A17               	clrf	?_readEEPROM+1,c
 20553  001798  0E94               	movlw	148
 20554  00179A  6E16               	movwf	?_readEEPROM,c
 20555  00179C  EC64  F029         	call	_readEEPROM	;wreg free
 20556  0017A0  D1B0               	goto	L53
 20557  0017A2                     l10618:
 20558                           
 20559                           ; BSR set to: 0
 20560                           ;main.c: 1788: rv = readEEPROM(0x95);
 20561  0017A2  6A17               	clrf	?_readEEPROM+1,c
 20562  0017A4  0E95               	movlw	149
 20563  0017A6  6E16               	movwf	?_readEEPROM,c
 20564  0017A8  EC64  F029         	call	_readEEPROM	;wreg free
 20565  0017AC  D1AA               	goto	L53
 20566  0017AE                     l10620:
 20567                           
 20568                           ; BSR set to: 0
 20569                           ;main.c: 1793: rv = readEEPROM(0x96);
 20570  0017AE  6A17               	clrf	?_readEEPROM+1,c
 20571  0017B0  0E96               	movlw	150
 20572  0017B2  6E16               	movwf	?_readEEPROM,c
 20573  0017B4  EC64  F029         	call	_readEEPROM	;wreg free
 20574  0017B8  D1A4               	goto	L53
 20575  0017BA                     l10622:
 20576                           
 20577                           ; BSR set to: 0
 20578                           ;main.c: 1803: rv = readEEPROM(0x97);
 20579  0017BA  6A17               	clrf	?_readEEPROM+1,c
 20580  0017BC  0E97               	movlw	151
 20581  0017BE  6E16               	movwf	?_readEEPROM,c
 20582  0017C0  EC64  F029         	call	_readEEPROM	;wreg free
 20583  0017C4  D19E               	goto	L53
 20584  0017C6                     l10624:
 20585                           
 20586                           ; BSR set to: 0
 20587                           ;main.c: 1808: rv = readEEPROM(0x98);
 20588  0017C6  6A17               	clrf	?_readEEPROM+1,c
 20589  0017C8  0E98               	movlw	152
 20590  0017CA  6E16               	movwf	?_readEEPROM,c
 20591  0017CC  EC64  F029         	call	_readEEPROM	;wreg free
 20592  0017D0  D198               	goto	L53
 20593  0017D2                     l10626:
 20594                           
 20595                           ; BSR set to: 0
 20596                           ;main.c: 1813: rv = readEEPROM(0x99);
 20597  0017D2  6A17               	clrf	?_readEEPROM+1,c
 20598  0017D4  0E99               	movlw	153
 20599  0017D6  6E16               	movwf	?_readEEPROM,c
 20600  0017D8  EC64  F029         	call	_readEEPROM	;wreg free
 20601  0017DC  D192               	goto	L53
 20602  0017DE                     l10628:
 20603                           
 20604                           ; BSR set to: 0
 20605                           ;main.c: 1818: rv = readEEPROM(0x9A);
 20606  0017DE  6A17               	clrf	?_readEEPROM+1,c
 20607  0017E0  0E9A               	movlw	154
 20608  0017E2  6E16               	movwf	?_readEEPROM,c
 20609  0017E4  EC64  F029         	call	_readEEPROM	;wreg free
 20610  0017E8  D18C               	goto	L53
 20611  0017EA                     l10630:
 20612                           
 20613                           ; BSR set to: 0
 20614                           ;main.c: 1823: rv = readEEPROM(0x9B);
 20615  0017EA  6A17               	clrf	?_readEEPROM+1,c
 20616  0017EC  0E9B               	movlw	155
 20617  0017EE  6E16               	movwf	?_readEEPROM,c
 20618  0017F0  EC64  F029         	call	_readEEPROM	;wreg free
 20619  0017F4  D186               	goto	L53
 20620  0017F6                     l10632:
 20621                           
 20622                           ; BSR set to: 0
 20623                           ;main.c: 1828: rv = readEEPROM(0x9C);
 20624  0017F6  6A17               	clrf	?_readEEPROM+1,c
 20625  0017F8  0E9C               	movlw	156
 20626  0017FA  6E16               	movwf	?_readEEPROM,c
 20627  0017FC  EC64  F029         	call	_readEEPROM	;wreg free
 20628  001800  D180               	goto	L53
 20629  001802                     l406:
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;main.c: 1833: rv = 0;
 20633  001802  6A1C               	clrf	vscp_readAppReg@rv,c
 20634                           
 20635                           ;main.c: 1834: break;
 20636  001804  D17F               	goto	l10664
 20637  001806                     l10634:
 20638                           
 20639                           ; BSR set to: 0
 20640                           ;main.c: 1843: rv = readEEPROM(0xF2);
 20641  001806  6A17               	clrf	?_readEEPROM+1,c
 20642  001808  0EF2               	movlw	242
 20643  00180A  6E16               	movwf	?_readEEPROM,c
 20644  00180C  EC64  F029         	call	_readEEPROM	;wreg free
 20645  001810  D178               	goto	L53
 20646  001812                     l10636:
 20647                           
 20648                           ; BSR set to: 0
 20649                           ;main.c: 1848: rv = readEEPROM(0xF3);
 20650  001812  6A17               	clrf	?_readEEPROM+1,c
 20651  001814  0EF3               	movlw	243
 20652  001816  6E16               	movwf	?_readEEPROM,c
 20653  001818  EC64  F029         	call	_readEEPROM	;wreg free
 20654  00181C  D172               	goto	L53
 20655  00181E                     l10640:
 20656                           
 20657                           ; BSR set to: 0
 20658  00181E  501B               	movf	vscp_readAppReg@reg,w,c
 20659                           
 20660                           ; Switch size 1, requested type "space"
 20661                           ; Number of cases is 108, Range of values is 0 to 119
 20662                           ; switch strategies available:
 20663                           ; Name         Instructions Cycles
 20664                           ; simple_byte          325   163 (average)
 20665                           ;	Chosen strategy is simple_byte
 20666  001820  E101 D5A9          	bz	l10438
 20667  001824  0A01               	xorlw	1	; case 1
 20668  001826  E101 D5AC          	bz	l10440
 20669  00182A  0A03               	xorlw	3	; case 2
 20670  00182C  E101 D5AF          	bz	l10442
 20671  001830  0A01               	xorlw	1	; case 3
 20672  001832  E101 D5B2          	bz	l10444
 20673  001836  0A07               	xorlw	7	; case 4
 20674  001838  E101 D5B5          	bz	l10446
 20675  00183C  0A01               	xorlw	1	; case 5
 20676  00183E  E101 D5B8          	bz	l10448
 20677  001842  0A03               	xorlw	3	; case 6
 20678  001844  E101 D5BB          	bz	l10450
 20679  001848  0A01               	xorlw	1	; case 7
 20680  00184A  E101 D5BE          	bz	l10452
 20681  00184E  0A0F               	xorlw	15	; case 8
 20682  001850  E101 D5C1          	bz	l10454
 20683  001854  0A01               	xorlw	1	; case 9
 20684  001856  E101 D5C0          	bz	l311
 20685  00185A  0A03               	xorlw	3	; case 10
 20686  00185C  E101 D5C0          	bz	l10456
 20687  001860  0A01               	xorlw	1	; case 11
 20688  001862  E101 D5BF          	bz	l313
 20689  001866  0A07               	xorlw	7	; case 12
 20690  001868  E101 D5BF          	bz	l10458
 20691  00186C  0A01               	xorlw	1	; case 13
 20692  00186E  E101 D5BE          	bz	l315
 20693  001872  0A03               	xorlw	3	; case 14
 20694  001874  E101 D5BE          	bz	l10460
 20695  001878  0A01               	xorlw	1	; case 15
 20696  00187A  E101 D5BD          	bz	l317
 20697  00187E  0A1F               	xorlw	31	; case 16
 20698  001880  E101 D5BD          	bz	l10462
 20699  001884  0A01               	xorlw	1	; case 17
 20700  001886  E101 D5BC          	bz	l319
 20701  00188A  0A03               	xorlw	3	; case 18
 20702  00188C  E101 D5BC          	bz	l10464
 20703  001890  0A01               	xorlw	1	; case 19
 20704  001892  E101 D5BB          	bz	l321
 20705  001896  0A07               	xorlw	7	; case 20
 20706  001898  E101 D5BB          	bz	l10466
 20707  00189C  0A01               	xorlw	1	; case 21
 20708  00189E  E101 D5BE          	bz	l10468
 20709  0018A2  0A03               	xorlw	3	; case 22
 20710  0018A4  E101 D5C1          	bz	l10470
 20711  0018A8  0A01               	xorlw	1	; case 23
 20712  0018AA  E101 D5C4          	bz	l10472
 20713  0018AE  0A0F               	xorlw	15	; case 24
 20714  0018B0  E101 D5C7          	bz	l10474
 20715  0018B4  0A01               	xorlw	1	; case 25
 20716  0018B6  E101 D5CA          	bz	l10476
 20717  0018BA  0A3F               	xorlw	63	; case 38
 20718  0018BC  E101 D5CD          	bz	l10478
 20719  0018C0  0A01               	xorlw	1	; case 39
 20720  0018C2  E101 D5D0          	bz	l10480
 20721  0018C6  0A0F               	xorlw	15	; case 40
 20722  0018C8  E101 D5D3          	bz	l10482
 20723  0018CC  0A01               	xorlw	1	; case 41
 20724  0018CE  E101 D5D6          	bz	l10484
 20725  0018D2  0A03               	xorlw	3	; case 42
 20726  0018D4  E101 D5D9          	bz	l10486
 20727  0018D8  0A01               	xorlw	1	; case 43
 20728  0018DA  E101 D5DC          	bz	l10488
 20729  0018DE  0A07               	xorlw	7	; case 44
 20730  0018E0  E101 D5DF          	bz	l10490
 20731  0018E4  0A01               	xorlw	1	; case 45
 20732  0018E6  E101 D5E2          	bz	l10492
 20733  0018EA  0A03               	xorlw	3	; case 46
 20734  0018EC  E101 D5E5          	bz	l10494
 20735  0018F0  0A01               	xorlw	1	; case 47
 20736  0018F2  E101 D5E8          	bz	l10496
 20737  0018F6  0A1F               	xorlw	31	; case 48
 20738  0018F8  E101 D5EB          	bz	l10498
 20739  0018FC  0A01               	xorlw	1	; case 49
 20740  0018FE  E101 D5EE          	bz	l10500
 20741  001902  0A03               	xorlw	3	; case 50
 20742  001904  E101 D5F1          	bz	l10502
 20743  001908  0A01               	xorlw	1	; case 51
 20744  00190A  E101 D5F4          	bz	l10504
 20745  00190E  0A07               	xorlw	7	; case 52
 20746  001910  E101 D5F7          	bz	l10506
 20747  001914  0A01               	xorlw	1	; case 53
 20748  001916  E101 D5FA          	bz	l10508
 20749  00191A  0A03               	xorlw	3	; case 54
 20750  00191C  E101 D5FD          	bz	l10510
 20751  001920  0A01               	xorlw	1	; case 55
 20752  001922  E101 D600          	bz	l10512
 20753  001926  0A0F               	xorlw	15	; case 56
 20754  001928  E101 D603          	bz	l10514
 20755  00192C  0A01               	xorlw	1	; case 57
 20756  00192E  E101 D606          	bz	l10516
 20757  001932  0A03               	xorlw	3	; case 58
 20758  001934  E101 D609          	bz	l10518
 20759  001938  0A01               	xorlw	1	; case 59
 20760  00193A  E101 D60C          	bz	l10520
 20761  00193E  0A07               	xorlw	7	; case 60
 20762  001940  E101 D60F          	bz	l10522
 20763  001944  0A01               	xorlw	1	; case 61
 20764  001946  E101 D612          	bz	l10524
 20765  00194A  0A03               	xorlw	3	; case 62
 20766  00194C  E101 D615          	bz	l10526
 20767  001950  0A01               	xorlw	1	; case 63
 20768  001952  E101 D618          	bz	l10528
 20769  001956  0A7F               	xorlw	127	; case 64
 20770  001958  E101 D61B          	bz	l10530
 20771  00195C  0A01               	xorlw	1	; case 65
 20772  00195E  E101 D61E          	bz	l10532
 20773  001962  0A03               	xorlw	3	; case 66
 20774  001964  E101 D621          	bz	l10534
 20775  001968  0A01               	xorlw	1	; case 67
 20776  00196A  E101 D624          	bz	l10536
 20777  00196E  0A07               	xorlw	7	; case 68
 20778  001970  E101 D627          	bz	l10538
 20779  001974  0A01               	xorlw	1	; case 69
 20780  001976  E101 D62A          	bz	l10540
 20781  00197A  0A03               	xorlw	3	; case 70
 20782  00197C  E101 D62D          	bz	l10542
 20783  001980  0A01               	xorlw	1	; case 71
 20784  001982  E101 D630          	bz	l10544
 20785  001986  0A0F               	xorlw	15	; case 72
 20786  001988  E101 D633          	bz	l10546
 20787  00198C  0A01               	xorlw	1	; case 73
 20788  00198E  E101 D636          	bz	l10548
 20789  001992  0A03               	xorlw	3	; case 74
 20790  001994  E101 D639          	bz	l10550
 20791  001998  0A01               	xorlw	1	; case 75
 20792  00199A  E101 D63C          	bz	l10552
 20793  00199E  0A07               	xorlw	7	; case 76
 20794  0019A0  E101 D63F          	bz	l10554
 20795  0019A4  0A01               	xorlw	1	; case 77
 20796  0019A6  E101 D642          	bz	l10556
 20797  0019AA  0A03               	xorlw	3	; case 78
 20798  0019AC  E101 D645          	bz	l10558
 20799  0019B0  0A01               	xorlw	1	; case 79
 20800  0019B2  E101 D648          	bz	l10560
 20801  0019B6  0A1F               	xorlw	31	; case 80
 20802  0019B8  E101 D64B          	bz	l10562
 20803  0019BC  0A01               	xorlw	1	; case 81
 20804  0019BE  E101 D64E          	bz	l10564
 20805  0019C2  0A03               	xorlw	3	; case 82
 20806  0019C4  E101 D651          	bz	l10566
 20807  0019C8  0A01               	xorlw	1	; case 83
 20808  0019CA  E101 D654          	bz	l10568
 20809  0019CE  0A07               	xorlw	7	; case 84
 20810  0019D0  E101 D657          	bz	l10570
 20811  0019D4  0A01               	xorlw	1	; case 85
 20812  0019D6  E101 D65A          	bz	l10572
 20813  0019DA  0A03               	xorlw	3	; case 86
 20814  0019DC  E101 D65D          	bz	l10574
 20815  0019E0  0A01               	xorlw	1	; case 87
 20816  0019E2  E101 D660          	bz	l10576
 20817  0019E6  0A0F               	xorlw	15	; case 88
 20818  0019E8  E101 D663          	bz	l10578
 20819  0019EC  0A01               	xorlw	1	; case 89
 20820  0019EE  E101 D666          	bz	l10580
 20821  0019F2  0A03               	xorlw	3	; case 90
 20822  0019F4  E101 D669          	bz	l10582
 20823  0019F8  0A01               	xorlw	1	; case 91
 20824  0019FA  E101 D66C          	bz	l10584
 20825  0019FE  0A07               	xorlw	7	; case 92
 20826  001A00  E101 D66F          	bz	l10586
 20827  001A04  0A01               	xorlw	1	; case 93
 20828  001A06  E101 D672          	bz	l10588
 20829  001A0A  0A03               	xorlw	3	; case 94
 20830  001A0C  E101 D675          	bz	l10590
 20831  001A10  0A01               	xorlw	1	; case 95
 20832  001A12  E101 D678          	bz	l10592
 20833  001A16  0A3F               	xorlw	63	; case 96
 20834  001A18  E101 D67B          	bz	l10594
 20835  001A1C  0A01               	xorlw	1	; case 97
 20836  001A1E  E101 D67E          	bz	l10596
 20837  001A22  0A03               	xorlw	3	; case 98
 20838  001A24  E101 D681          	bz	l10598
 20839  001A28  0A01               	xorlw	1	; case 99
 20840  001A2A  E101 D684          	bz	l10600
 20841  001A2E  0A07               	xorlw	7	; case 100
 20842  001A30  E101 D687          	bz	l10602
 20843  001A34  0A01               	xorlw	1	; case 101
 20844  001A36  E101 D68A          	bz	l10604
 20845  001A3A  0A03               	xorlw	3	; case 102
 20846  001A3C  E101 D68D          	bz	l10606
 20847  001A40  0A01               	xorlw	1	; case 103
 20848  001A42  E101 D690          	bz	l10608
 20849  001A46  0A0F               	xorlw	15	; case 104
 20850  001A48  E101 D693          	bz	l10610
 20851  001A4C  0A01               	xorlw	1	; case 105
 20852  001A4E  E101 D696          	bz	l10612
 20853  001A52  0A03               	xorlw	3	; case 106
 20854  001A54  E101 D699          	bz	l10614
 20855  001A58  0A01               	xorlw	1	; case 107
 20856  001A5A  E101 D69C          	bz	l10616
 20857  001A5E  0A07               	xorlw	7	; case 108
 20858  001A60  E101 D69F          	bz	l10618
 20859  001A64  0A01               	xorlw	1	; case 109
 20860  001A66  E101 D6A2          	bz	l10620
 20861  001A6A  0A03               	xorlw	3	; case 110
 20862  001A6C  E101 D6A5          	bz	l10622
 20863  001A70  0A01               	xorlw	1	; case 111
 20864  001A72  E101 D6A8          	bz	l10624
 20865  001A76  0A1F               	xorlw	31	; case 112
 20866  001A78  E101 D6AB          	bz	l10626
 20867  001A7C  0A01               	xorlw	1	; case 113
 20868  001A7E  E101 D6AE          	bz	l10628
 20869  001A82  0A03               	xorlw	3	; case 114
 20870  001A84  E101 D6B1          	bz	l10630
 20871  001A88  0A01               	xorlw	1	; case 115
 20872  001A8A  E101 D6B4          	bz	l10632
 20873  001A8E  0A07               	xorlw	7	; case 116
 20874  001A90  E101 D6B7          	bz	l406
 20875  001A94  0A01               	xorlw	1	; case 117
 20876  001A96  E101 D6B4          	bz	l406
 20877  001A9A  0A03               	xorlw	3	; case 118
 20878  001A9C  E101 D6B3          	bz	l10634
 20879  001AA0  0A01               	xorlw	1	; case 119
 20880  001AA2  E101 D6B6          	bz	l10636
 20881  001AA6  D6AD               	goto	l406
 20882  001AA8                     l10642:
 20883                           
 20884                           ; BSR set to: 0
 20885                           ;main.c: 1856: else if (1 == vscp_page_select) {
 20886  001AA8  0446               	decf	_vscp_page_select,w,c
 20887  001AAA  1047               	iorwf	_vscp_page_select+1,w,c
 20888  001AAC  E12B               	bnz	l10664
 20889                           
 20890                           ; BSR set to: 0
 20891                           ;main.c: 1859: if (reg < 72) {
 20892  001AAE  0E48               	movlw	72
 20893  001AB0  601B               	cpfslt	vscp_readAppReg@reg,c
 20894  001AB2  D009               	goto	l10648
 20895                           
 20896                           ; BSR set to: 0
 20897                           ;main.c: 1860: rv = readEEPROM(0xAA + reg ) ;
 20898  001AB4  0EAA               	movlw	170
 20899  001AB6  241B               	addwf	vscp_readAppReg@reg,w,c
 20900  001AB8  6E16               	movwf	?_readEEPROM,c
 20901  001ABA  6A17               	clrf	?_readEEPROM+1,c
 20902  001ABC  0E00               	movlw	0
 20903  001ABE  2217               	addwfc	?_readEEPROM+1,f,c
 20904  001AC0  EC64  F029         	call	_readEEPROM	;wreg free
 20905  001AC4  D01E               	goto	L53
 20906  001AC6                     l10648:
 20907                           
 20908                           ; BSR set to: 0
 20909                           ;main.c: 1863: else if (reg < 84) {
 20910  001AC6  0E54               	movlw	84
 20911  001AC8  601B               	cpfslt	vscp_readAppReg@reg,c
 20912  001ACA  D010               	goto	l10660
 20913                           
 20914                           ; BSR set to: 0
 20915                           ;main.c: 1865: uint8_t pos = reg - 72;
 20916  001ACC  501B               	movf	vscp_readAppReg@reg,w,c
 20917  001ACE  0FB8               	addlw	184
 20918  001AD0  6E1A               	movwf	vscp_readAppReg@pos,c
 20919                           
 20920                           ; BSR set to: 0
 20921                           ;main.c: 1866: if ( pos % 2 ) {
 20922  001AD2  A01A               	btfss	vscp_readAppReg@pos,0,c
 20923  001AD4  D002               	goto	l10656
 20924                           
 20925                           ; BSR set to: 0
 20926                           ;main.c: 1867: pos--;
 20927  001AD6  061A               	decf	vscp_readAppReg@pos,f,c
 20928                           
 20929                           ;main.c: 1868: }
 20930  001AD8  D001               	goto	l10658
 20931  001ADA                     l10656:
 20932                           
 20933                           ; BSR set to: 0
 20934                           ;main.c: 1869: else {
 20935                           ;main.c: 1870: pos++;
 20936  001ADA  2A1A               	incf	vscp_readAppReg@pos,f,c
 20937  001ADC                     l10658:
 20938                           
 20939                           ; BSR set to: 0
 20940                           ;main.c: 1871: }
 20941                           ;main.c: 1872: rv = adc[ pos ];
 20942  001ADC  0E94               	movlw	low _adc
 20943  001ADE  241A               	addwf	vscp_readAppReg@pos,w,c
 20944  001AE0  6ED9               	movwf	fsr2l,c
 20945  001AE2  6ADA               	clrf	fsr2h,c
 20946  001AE4  0E01               	movlw	high _adc
 20947  001AE6  22DA               	addwfc	fsr2h,f,c
 20948  001AE8  50DF               	movf	indf2,w,c
 20949  001AEA  D00B               	goto	L53
 20950  001AEC                     l10660:
 20951                           
 20952                           ; BSR set to: 0
 20953                           ;main.c: 1875: else if (reg < 98) {
 20954  001AEC  0E62               	movlw	98
 20955  001AEE  601B               	cpfslt	vscp_readAppReg@reg,c
 20956  001AF0  D009               	goto	l10664
 20957                           
 20958                           ; BSR set to: 0
 20959                           ;main.c: 1876: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20960  001AF2  0E4A               	movlw	74
 20961  001AF4  241B               	addwf	vscp_readAppReg@reg,w,c
 20962  001AF6  6E16               	movwf	?_readEEPROM,c
 20963  001AF8  6A17               	clrf	?_readEEPROM+1,c
 20964  001AFA  0E00               	movlw	0
 20965  001AFC  2217               	addwfc	?_readEEPROM+1,f,c
 20966  001AFE  EC64  F029         	call	_readEEPROM	;wreg free
 20967  001B02                     L53:
 20968  001B02  6E1C               	movwf	vscp_readAppReg@rv,c
 20969  001B04                     l10664:
 20970                           
 20971                           ;main.c: 1877: }
 20972                           ;main.c: 1878: }
 20973                           ;main.c: 1880: return rv;
 20974  001B04  501C               	movf	vscp_readAppReg@rv,w,c
 20975  001B06  0012               	return	
 20976  001B08                     __end_of_vscp_readAppReg:
 20977                           	opt stack 0
 20978                           tblptru	equ	0xFF8
 20979                           tblptrh	equ	0xFF7
 20980                           tblptrl	equ	0xFF6
 20981                           tablat	equ	0xFF5
 20982                           prodh	equ	0xFF4
 20983                           prodl	equ	0xFF3
 20984                           intcon	equ	0xFF2
 20985                           postinc0	equ	0xFEE
 20986                           wreg	equ	0xFE8
 20987                           indf1	equ	0xFE7
 20988                           postdec1	equ	0xFE5
 20989                           fsr1h	equ	0xFE2
 20990                           fsr1l	equ	0xFE1
 20991                           indf2	equ	0xFDF
 20992                           postinc2	equ	0xFDE
 20993                           postdec2	equ	0xFDD
 20994                           plusw2	equ	0xFDB
 20995                           fsr2h	equ	0xFDA
 20996                           fsr2l	equ	0xFD9
 20997                           status	equ	0xFD8
 20998                           
 20999 ;; *************** function _interrupt_at_low_vector *****************
 21000 ;; Defined at:
 21001 ;;		line 134 in file "../main.c"
 21002 ;; Parameters:    Size  Location     Type
 21003 ;;		None
 21004 ;; Auto vars:     Size  Location     Type
 21005 ;;		None
 21006 ;; Return value:  Size  Location     Type
 21007 ;;		None               void
 21008 ;; Registers used:
 21009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21010 ;; Tracked objects:
 21011 ;;		On entry : 0/0
 21012 ;;		On exit  : 0/0
 21013 ;;		Unchanged: 0/0
 21014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21015 ;;      Params:         0       0       0       0       0       0       0
 21016 ;;      Locals:         0       0       0       0       0       0       0
 21017 ;;      Temps:          9       0       0       0       0       0       0
 21018 ;;      Totals:         9       0       0       0       0       0       0
 21019 ;;Total ram usage:        9 bytes
 21020 ;; Hardware stack levels used:    1
 21021 ;; Hardware stack levels required when called:    1
 21022 ;; This function calls:
 21023 ;;		i1_ConvertADC
 21024 ;;		i1_WriteTimer0
 21025 ;; This function is called by:
 21026 ;;		Interrupt level 1
 21027 ;; This function uses a non-reentrant model
 21028 ;;
 21029                           
 21030                           	psect	intcodelo
 21031  000018                     __pintcodelo:
 21032                           	opt stack 0
 21033  000018                     _interrupt_at_low_vector:
 21034                           	opt stack 21
 21035                           
 21036                           ;incstack = 0
 21037  000018  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 21038  00001C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 21039  000020  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 21040  000024  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 21041  000028  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 21042  00002C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 21043  000030  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 21044  000034                     
 21045                           ;main.c: 136: if (INTCONbits.TMR0IF) {
 21046  000034  A4F2               	btfss	intcon,2,c	;volatile
 21047  000036  D001               	goto	i1u712_21
 21048  000038  D001               	goto	i1u712_20
 21049  00003A                     i1u712_21:
 21050  00003A  D047               	goto	i1l9152
 21051  00003C                     i1u712_20:
 21052  00003C                     
 21053                           ;main.c: 139: WriteTimer0(0xfb1d);
 21054  00003C  0EFB               	movlw	251
 21055  00003E  6E02               	movwf	?i1_WriteTimer0+1,c
 21056  000040  0E1D               	movlw	29
 21057  000042  6E01               	movwf	?i1_WriteTimer0,c
 21058  000044  EC92  F029         	call	i1_WriteTimer0	;wreg free
 21059  000048                     
 21060                           ;main.c: 141: vscp_timer++;
 21061  000048  0101               	movlb	1	; () banked
 21062  00004A  4B12               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 21063  00004C  2B13               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 21064  00004E                     
 21065                           ; BSR set to: 1
 21066                           ;main.c: 142: vscp_configtimer++;
 21067  00004E  4B10               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 21068  000050  2B11               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 21069  000052                     
 21070                           ; BSR set to: 1
 21071                           ;main.c: 143: measurement_clock++;
 21072  000052  0E01               	movlw	1
 21073  000054  2706               	addwf	_measurement_clock& (0+255),f,b	;volatile
 21074  000056  0E00               	movlw	0
 21075  000058  2307               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 21076  00005A  0E00               	movlw	0
 21077  00005C  2308               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 21078  00005E  0E00               	movlw	0
 21079  000060  2309               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 21080  000062                     
 21081                           ; BSR set to: 1
 21082                           ;main.c: 144: timeout_clock++;
 21083  000062  0E01               	movlw	1
 21084  000064  270A               	addwf	_timeout_clock& (0+255),f,b	;volatile
 21085  000066  0E00               	movlw	0
 21086  000068  230B               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 21087  00006A  0E00               	movlw	0
 21088  00006C  230C               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 21089  00006E  0E00               	movlw	0
 21090  000070  230D               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 21091  000072                     
 21092                           ; BSR set to: 1
 21093                           ;main.c: 145: sendTimer++;
 21094  000072  4B0E               	infsnz	_sendTimer& (0+255),f,b	;volatile
 21095  000074  2B0F               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 21096  000076                     
 21097                           ; BSR set to: 1
 21098                           ;main.c: 148: if (!(PORTC & 0x01)) {
 21099  000076  B082               	btfsc	3970,0,c	;volatile
 21100  000078  D001               	goto	i1u713_21
 21101  00007A  D001               	goto	i1u713_20
 21102  00007C                     i1u713_21:
 21103  00007C  D003               	goto	i1l138
 21104  00007E                     i1u713_20:
 21105  00007E                     
 21106                           ; BSR set to: 1
 21107                           ;main.c: 150: vscp_initbtncnt++;
 21108  00007E  0100               	movlb	0	; () banked
 21109  000080  2BBC               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21110                           
 21111                           ;main.c: 151: }
 21112  000082  D002               	goto	i1l9126
 21113  000084                     i1l138:
 21114                           
 21115                           ; BSR set to: 1
 21116                           ;main.c: 152: else {
 21117                           ;main.c: 153: vscp_initbtncnt = 0;
 21118  000084  0100               	movlb	0	; () banked
 21119  000086  6BBC               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21120  000088                     i1l9126:
 21121                           
 21122                           ; BSR set to: 0
 21123                           ;main.c: 154: }
 21124                           ;main.c: 157: vscp_statuscnt++;
 21125  000088  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21126  00008A                     
 21127                           ; BSR set to: 0
 21128                           ;main.c: 158: if ( ( 0x02 ==
 21129                           ;main.c: 159: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21130  00008A  504C               	movf	_vscp_initledfunc,w,c
 21131  00008C  0A02               	xorlw	2
 21132  00008E  A4D8               	btfss	status,2,c
 21133  000090  D001               	goto	i1u714_21
 21134  000092  D001               	goto	i1u714_20
 21135  000094                     i1u714_21:
 21136  000094  D00E               	goto	i1l9140
 21137  000096                     i1u714_20:
 21138  000096                     
 21139                           ; BSR set to: 0
 21140  000096  0E64               	movlw	100
 21141  000098  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21142  00009A  D001               	goto	i1u715_21
 21143  00009C  D001               	goto	i1u715_20
 21144  00009E                     i1u715_21:
 21145  00009E  D009               	goto	i1l9140
 21146  0000A0                     i1u715_20:
 21147  0000A0                     
 21148                           ; BSR set to: 0
 21149                           ;main.c: 160: if ( PORTC & 0x02 ) {
 21150  0000A0  A282               	btfss	3970,1,c	;volatile
 21151  0000A2  D001               	goto	i1u716_21
 21152  0000A4  D001               	goto	i1u716_20
 21153  0000A6                     i1u716_21:
 21154  0000A6  D002               	goto	i1l9136
 21155  0000A8                     i1u716_20:
 21156  0000A8                     i1l9134:
 21157                           
 21158                           ; BSR set to: 0
 21159                           ;main.c: 161: PORTC &= ~0x02;
 21160  0000A8  9282               	bcf	3970,1,c	;volatile
 21161                           
 21162                           ;main.c: 162: }
 21163  0000AA  D001               	goto	i1l9138
 21164  0000AC                     i1l9136:
 21165                           
 21166                           ; BSR set to: 0
 21167                           ;main.c: 163: else {
 21168                           ;main.c: 164: PORTC |= 0x02;
 21169  0000AC  8282               	bsf	3970,1,c	;volatile
 21170  0000AE                     i1l9138:
 21171                           
 21172                           ; BSR set to: 0
 21173                           ;main.c: 165: }
 21174                           ;main.c: 166: vscp_statuscnt = 0;
 21175  0000AE  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21176                           
 21177                           ;main.c: 167: }
 21178  0000B0  D00B               	goto	i1l9150
 21179  0000B2                     i1l9140:
 21180                           
 21181                           ; BSR set to: 0
 21182                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 21183  0000B2  044C               	decf	_vscp_initledfunc,w,c
 21184  0000B4  A4D8               	btfss	status,2,c
 21185  0000B6  D001               	goto	i1u717_21
 21186  0000B8  D001               	goto	i1u717_20
 21187  0000BA                     i1u717_21:
 21188  0000BA  D001               	goto	i1l144
 21189  0000BC                     i1u717_20:
 21190  0000BC  D7F7               	goto	i1l9136
 21191  0000BE                     i1l144:
 21192                           
 21193                           ; BSR set to: 0
 21194                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 21195  0000BE  664C               	tstfsz	_vscp_initledfunc,c
 21196  0000C0  D001               	goto	i1u718_21
 21197  0000C2  D001               	goto	i1u718_20
 21198  0000C4                     i1u718_21:
 21199  0000C4  D001               	goto	i1l9150
 21200  0000C6                     i1u718_20:
 21201  0000C6  D7F0               	goto	i1l9134
 21202  0000C8                     i1l9150:
 21203                           
 21204                           ; BSR set to: 0
 21205                           ;main.c: 175: }
 21206                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 21207  0000C8  94F2               	bcf	intcon,2,c	;volatile
 21208  0000CA                     i1l9152:
 21209                           
 21210                           ;main.c: 179: }
 21211                           ;main.c: 182: if ( PIR1bits.ADIF ) {
 21212  0000CA  AC9E               	btfss	3998,6,c	;volatile
 21213  0000CC  D001               	goto	i1u719_21
 21214  0000CE  D001               	goto	i1u719_20
 21215  0000D0                     i1u719_21:
 21216  0000D0  D0E5               	goto	i1l164
 21217  0000D2                     i1u719_20:
 21218  0000D2  D0C4               	goto	i1l9214
 21219  0000D4                     i1l9156:
 21220                           
 21221                           ;main.c: 188: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21222  0000D4  5049               	movf	_adc_series_counter,w,c
 21223  0000D6  0D0C               	mullw	12
 21224  0000D8  0E94               	movlw	low _adc
 21225  0000DA  24F3               	addwf	prodl,w,c
 21226  0000DC  6ED9               	movwf	fsr2l,c
 21227  0000DE  0E01               	movlw	high _adc
 21228  0000E0  20F4               	addwfc	prodh,w,c
 21229  0000E2  6EDA               	movwf	fsr2h,c
 21230  0000E4  CFC4 FFDF          	movff	4036,indf2	;volatile
 21231                           
 21232                           ;main.c: 189: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21233  0000E8  5049               	movf	_adc_series_counter,w,c
 21234  0000EA  0D0C               	mullw	12
 21235  0000EC  0E95               	movlw	low (_adc+1)
 21236  0000EE  24F3               	addwf	prodl,w,c
 21237  0000F0  6ED9               	movwf	fsr2l,c
 21238  0000F2  0E01               	movlw	high (_adc+1)
 21239  0000F4  20F4               	addwfc	prodh,w,c
 21240  0000F6  6EDA               	movwf	fsr2h,c
 21241  0000F8  CFC3 FFDF          	movff	4035,indf2	;volatile
 21242  0000FC                     
 21243                           ;main.c: 191: ADCON0 = (2<<2) + 1;
 21244  0000FC  0E09               	movlw	9
 21245  0000FE  6EC2               	movwf	4034,c	;volatile
 21246  000100                     
 21247                           ;main.c: 195: if ((80 - 1) == adc_series_counter) {
 21248  000100  5049               	movf	_adc_series_counter,w,c
 21249  000102  0A4F               	xorlw	79
 21250  000104  A4D8               	btfss	status,2,c
 21251  000106  D001               	goto	i1u720_21
 21252  000108  D001               	goto	i1u720_20
 21253  00010A                     i1u720_21:
 21254  00010A  D0C5               	goto	i1l9216
 21255  00010C                     i1u720_20:
 21256  00010C                     
 21257                           ;main.c: 196: adc_conversion_flags |= 1;
 21258  00010C  0100               	movlb	0	; () banked
 21259  00010E  81B7               	bsf	_adc_conversion_flags& (0+255),0,b
 21260  000110  D0C2               	goto	i1l9216
 21261  000112                     i1l9164:
 21262                           
 21263                           ;main.c: 202: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21264  000112  5049               	movf	_adc_series_counter,w,c
 21265  000114  0D0C               	mullw	12
 21266  000116  0E96               	movlw	low (_adc+2)
 21267  000118  24F3               	addwf	prodl,w,c
 21268  00011A  6ED9               	movwf	fsr2l,c
 21269  00011C  0E01               	movlw	high (_adc+2)
 21270  00011E  20F4               	addwfc	prodh,w,c
 21271  000120  6EDA               	movwf	fsr2h,c
 21272  000122  CFC4 FFDF          	movff	4036,indf2	;volatile
 21273                           
 21274                           ;main.c: 203: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21275  000126  5049               	movf	_adc_series_counter,w,c
 21276  000128  0D0C               	mullw	12
 21277  00012A  0E97               	movlw	low (_adc+3)
 21278  00012C  24F3               	addwf	prodl,w,c
 21279  00012E  6ED9               	movwf	fsr2l,c
 21280  000130  0E01               	movlw	high (_adc+3)
 21281  000132  20F4               	addwfc	prodh,w,c
 21282  000134  6EDA               	movwf	fsr2h,c
 21283  000136  CFC3 FFDF          	movff	4035,indf2	;volatile
 21284  00013A                     
 21285                           ;main.c: 206: ADCON0 = (1<<2) + 1;
 21286  00013A  0E05               	movlw	5
 21287  00013C  6EC2               	movwf	4034,c	;volatile
 21288  00013E                     
 21289                           ;main.c: 210: if ((80 - 1) == adc_series_counter) {
 21290  00013E  5049               	movf	_adc_series_counter,w,c
 21291  000140  0A4F               	xorlw	79
 21292  000142  A4D8               	btfss	status,2,c
 21293  000144  D001               	goto	i1u721_21
 21294  000146  D001               	goto	i1u721_20
 21295  000148                     i1u721_21:
 21296  000148  D0A6               	goto	i1l9216
 21297  00014A                     i1u721_20:
 21298  00014A                     
 21299                           ;main.c: 211: adc_conversion_flags |= 1 << 1;
 21300  00014A  0100               	movlb	0	; () banked
 21301  00014C  83B7               	bsf	_adc_conversion_flags& (0+255),1,b
 21302  00014E  D0A3               	goto	i1l9216
 21303  000150                     i1l9172:
 21304                           
 21305                           ;main.c: 217: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21306  000150  5049               	movf	_adc_series_counter,w,c
 21307  000152  0D0C               	mullw	12
 21308  000154  0E98               	movlw	low (_adc+4)
 21309  000156  24F3               	addwf	prodl,w,c
 21310  000158  6ED9               	movwf	fsr2l,c
 21311  00015A  0E01               	movlw	high (_adc+4)
 21312  00015C  20F4               	addwfc	prodh,w,c
 21313  00015E  6EDA               	movwf	fsr2h,c
 21314  000160  CFC4 FFDF          	movff	4036,indf2	;volatile
 21315                           
 21316                           ;main.c: 218: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21317  000164  5049               	movf	_adc_series_counter,w,c
 21318  000166  0D0C               	mullw	12
 21319  000168  0E99               	movlw	low (_adc+5)
 21320  00016A  24F3               	addwf	prodl,w,c
 21321  00016C  6ED9               	movwf	fsr2l,c
 21322  00016E  0E01               	movlw	high (_adc+5)
 21323  000170  20F4               	addwfc	prodh,w,c
 21324  000172  6EDA               	movwf	fsr2h,c
 21325  000174  CFC3 FFDF          	movff	4035,indf2	;volatile
 21326  000178                     
 21327                           ;main.c: 221: ADCON0 = (0<<2) + 1;
 21328  000178  0E01               	movlw	1
 21329  00017A  6EC2               	movwf	4034,c	;volatile
 21330  00017C                     
 21331                           ;main.c: 225: if ((80 - 1) == adc_series_counter) {
 21332  00017C  5049               	movf	_adc_series_counter,w,c
 21333  00017E  0A4F               	xorlw	79
 21334  000180  A4D8               	btfss	status,2,c
 21335  000182  D001               	goto	i1u722_21
 21336  000184  D001               	goto	i1u722_20
 21337  000186                     i1u722_21:
 21338  000186  D087               	goto	i1l9216
 21339  000188                     i1u722_20:
 21340  000188                     
 21341                           ;main.c: 226: adc_conversion_flags |= 1 << 2;
 21342  000188  0100               	movlb	0	; () banked
 21343  00018A  85B7               	bsf	_adc_conversion_flags& (0+255),2,b
 21344  00018C  D084               	goto	i1l9216
 21345  00018E                     i1l9180:
 21346                           
 21347                           ;main.c: 232: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21348  00018E  5049               	movf	_adc_series_counter,w,c
 21349  000190  0D0C               	mullw	12
 21350  000192  0E9A               	movlw	low (_adc+6)
 21351  000194  24F3               	addwf	prodl,w,c
 21352  000196  6ED9               	movwf	fsr2l,c
 21353  000198  0E01               	movlw	high (_adc+6)
 21354  00019A  20F4               	addwfc	prodh,w,c
 21355  00019C  6EDA               	movwf	fsr2h,c
 21356  00019E  CFC4 FFDF          	movff	4036,indf2	;volatile
 21357                           
 21358                           ;main.c: 233: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21359  0001A2  5049               	movf	_adc_series_counter,w,c
 21360  0001A4  0D0C               	mullw	12
 21361  0001A6  0E9B               	movlw	low (_adc+7)
 21362  0001A8  24F3               	addwf	prodl,w,c
 21363  0001AA  6ED9               	movwf	fsr2l,c
 21364  0001AC  0E01               	movlw	high (_adc+7)
 21365  0001AE  20F4               	addwfc	prodh,w,c
 21366  0001B0  6EDA               	movwf	fsr2h,c
 21367  0001B2  CFC3 FFDF          	movff	4035,indf2	;volatile
 21368  0001B6                     
 21369                           ;main.c: 235: ADCON0 = (9<<2) + 1;
 21370  0001B6  0E25               	movlw	37
 21371  0001B8  6EC2               	movwf	4034,c	;volatile
 21372  0001BA                     
 21373                           ;main.c: 239: if ((80 - 1) == adc_series_counter) {
 21374  0001BA  5049               	movf	_adc_series_counter,w,c
 21375  0001BC  0A4F               	xorlw	79
 21376  0001BE  A4D8               	btfss	status,2,c
 21377  0001C0  D001               	goto	i1u723_21
 21378  0001C2  D001               	goto	i1u723_20
 21379  0001C4                     i1u723_21:
 21380  0001C4  D068               	goto	i1l9216
 21381  0001C6                     i1u723_20:
 21382  0001C6                     
 21383                           ;main.c: 240: adc_conversion_flags |= 1 << 3;
 21384  0001C6  0100               	movlb	0	; () banked
 21385  0001C8  87B7               	bsf	_adc_conversion_flags& (0+255),3,b
 21386  0001CA  D065               	goto	i1l9216
 21387  0001CC                     i1l9188:
 21388                           
 21389                           ;main.c: 246: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21390  0001CC  5049               	movf	_adc_series_counter,w,c
 21391  0001CE  0D0C               	mullw	12
 21392  0001D0  0E9C               	movlw	low (_adc+8)
 21393  0001D2  24F3               	addwf	prodl,w,c
 21394  0001D4  6ED9               	movwf	fsr2l,c
 21395  0001D6  0E01               	movlw	high (_adc+8)
 21396  0001D8  20F4               	addwfc	prodh,w,c
 21397  0001DA  6EDA               	movwf	fsr2h,c
 21398  0001DC  CFC4 FFDF          	movff	4036,indf2	;volatile
 21399                           
 21400                           ;main.c: 247: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21401  0001E0  5049               	movf	_adc_series_counter,w,c
 21402  0001E2  0D0C               	mullw	12
 21403  0001E4  0E9D               	movlw	low (_adc+9)
 21404  0001E6  24F3               	addwf	prodl,w,c
 21405  0001E8  6ED9               	movwf	fsr2l,c
 21406  0001EA  0E01               	movlw	high (_adc+9)
 21407  0001EC  20F4               	addwfc	prodh,w,c
 21408  0001EE  6EDA               	movwf	fsr2h,c
 21409  0001F0  CFC3 FFDF          	movff	4035,indf2	;volatile
 21410  0001F4                     
 21411                           ;main.c: 249: ADCON0 = (8<<2) + 1;
 21412  0001F4  0E21               	movlw	33
 21413  0001F6  6EC2               	movwf	4034,c	;volatile
 21414  0001F8                     
 21415                           ;main.c: 253: if ((80 - 1) == adc_series_counter) {
 21416  0001F8  5049               	movf	_adc_series_counter,w,c
 21417  0001FA  0A4F               	xorlw	79
 21418  0001FC  A4D8               	btfss	status,2,c
 21419  0001FE  D001               	goto	i1u724_21
 21420  000200  D001               	goto	i1u724_20
 21421  000202                     i1u724_21:
 21422  000202  D049               	goto	i1l9216
 21423  000204                     i1u724_20:
 21424  000204                     
 21425                           ;main.c: 254: adc_conversion_flags |= 1 << 4;
 21426  000204  0100               	movlb	0	; () banked
 21427  000206  89B7               	bsf	_adc_conversion_flags& (0+255),4,b
 21428  000208  D046               	goto	i1l9216
 21429  00020A                     i1l9196:
 21430                           
 21431                           ;main.c: 260: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21432  00020A  5049               	movf	_adc_series_counter,w,c
 21433  00020C  0D0C               	mullw	12
 21434  00020E  0E9E               	movlw	low (_adc+10)
 21435  000210  24F3               	addwf	prodl,w,c
 21436  000212  6ED9               	movwf	fsr2l,c
 21437  000214  0E01               	movlw	high (_adc+10)
 21438  000216  20F4               	addwfc	prodh,w,c
 21439  000218  6EDA               	movwf	fsr2h,c
 21440  00021A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21441                           
 21442                           ;main.c: 261: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21443  00021E  5049               	movf	_adc_series_counter,w,c
 21444  000220  0D0C               	mullw	12
 21445  000222  0E9F               	movlw	low (_adc+11)
 21446  000224  24F3               	addwf	prodl,w,c
 21447  000226  6ED9               	movwf	fsr2l,c
 21448  000228  0E01               	movlw	high (_adc+11)
 21449  00022A  20F4               	addwfc	prodh,w,c
 21450  00022C  6EDA               	movwf	fsr2h,c
 21451  00022E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21452  000232                     
 21453                           ;main.c: 263: ADCON0 = (10<<2) + 1;
 21454  000232  0E29               	movlw	41
 21455  000234  6EC2               	movwf	4034,c	;volatile
 21456  000236                     
 21457                           ;main.c: 267: if ((80 - 1) == adc_series_counter) {
 21458  000236  5049               	movf	_adc_series_counter,w,c
 21459  000238  0A4F               	xorlw	79
 21460  00023A  A4D8               	btfss	status,2,c
 21461  00023C  D001               	goto	i1u725_21
 21462  00023E  D001               	goto	i1u725_20
 21463  000240                     i1u725_21:
 21464  000240  D002               	goto	i1l161
 21465  000242                     i1u725_20:
 21466  000242                     
 21467                           ;main.c: 268: adc_conversion_flags |= 1 << 5;
 21468  000242  0100               	movlb	0	; () banked
 21469  000244  8BB7               	bsf	_adc_conversion_flags& (0+255),5,b
 21470  000246                     i1l161:
 21471                           
 21472                           ;main.c: 269: }
 21473                           ;main.c: 272: adc_series_counter++;
 21474  000246  2A49               	incf	_adc_series_counter,f,c
 21475  000248                     
 21476                           ;main.c: 273: if (adc_series_counter >= 80) {
 21477  000248  0E4F               	movlw	79
 21478  00024A  6449               	cpfsgt	_adc_series_counter,c
 21479  00024C  D001               	goto	i1u726_21
 21480  00024E  D001               	goto	i1u726_20
 21481  000250                     i1u726_21:
 21482  000250  D022               	goto	i1l9216
 21483  000252                     i1u726_20:
 21484  000252                     i1l9206:
 21485                           
 21486                           ;main.c: 274: adc_series_counter = 0;
 21487  000252  6A49               	clrf	_adc_series_counter,c
 21488  000254  D020               	goto	i1l9216
 21489  000256                     i1l9208:
 21490                           
 21491                           ;main.c: 280: ADCON0 = (10<<2) + 1;
 21492  000256  0E29               	movlw	41
 21493  000258  6EC2               	movwf	4034,c	;volatile
 21494  00025A  D7FB               	goto	i1l9206
 21495  00025C                     i1l9214:
 21496  00025C  50C2               	movf	4034,w,c	;volatile
 21497  00025E  0B3C               	andlw	60
 21498  000260  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21499  000262  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21500                           
 21501                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21502                           ; Switch size 1, requested type "space"
 21503                           ; Number of cases is 1, Range of values is 0 to 0
 21504                           ; switch strategies available:
 21505                           ; Name         Instructions Cycles
 21506                           ; simple_byte            4     3 (average)
 21507                           ;	Chosen strategy is simple_byte
 21508  000264  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21509  000266  0A00               	xorlw	0	; case 0
 21510  000268  B4D8               	btfsc	status,2,c
 21511  00026A  D001               	goto	i1l14236
 21512  00026C  D7F4               	goto	i1l9208
 21513  00026E                     i1l14236:
 21514                           
 21515                           ; Switch size 1, requested type "space"
 21516                           ; Number of cases is 6, Range of values is 0 to 40
 21517                           ; switch strategies available:
 21518                           ; Name         Instructions Cycles
 21519                           ; simple_byte           19    10 (average)
 21520                           ;	Chosen strategy is simple_byte
 21521  00026E  5005               	movf	??_interrupt_at_low_vector,w,c
 21522  000270  0A00               	xorlw	0	; case 0
 21523  000272  B4D8               	btfsc	status,2,c
 21524  000274  D78C               	goto	i1l9180
 21525  000276  0A04               	xorlw	4	; case 4
 21526  000278  B4D8               	btfsc	status,2,c
 21527  00027A  D76A               	goto	i1l9172
 21528  00027C  0A0C               	xorlw	12	; case 8
 21529  00027E  B4D8               	btfsc	status,2,c
 21530  000280  D748               	goto	i1l9164
 21531  000282  0A28               	xorlw	40	; case 32
 21532  000284  B4D8               	btfsc	status,2,c
 21533  000286  D7C1               	goto	i1l9196
 21534  000288  0A04               	xorlw	4	; case 36
 21535  00028A  B4D8               	btfsc	status,2,c
 21536  00028C  D79F               	goto	i1l9188
 21537  00028E  0A0C               	xorlw	12	; case 40
 21538  000290  B4D8               	btfsc	status,2,c
 21539  000292  D720               	goto	i1l9156
 21540  000294  D7E0               	goto	i1l9208
 21541  000296                     i1l9216:
 21542                           
 21543                           ;main.c: 286: ConvertADC();
 21544  000296  ECC1  F029         	call	i1_ConvertADC	;wreg free
 21545  00029A                     
 21546                           ;main.c: 288: PIR1bits.ADIF = 0;
 21547  00029A  9C9E               	bcf	3998,6,c	;volatile
 21548  00029C                     i1l164:
 21549  00029C  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21550  0002A0  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21551  0002A4  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21552  0002A8  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21553  0002AC  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21554  0002B0  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21555  0002B4  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21556  0002B8  0010               	retfie	
 21557  0002BA                     __end_of_interrupt_at_low_vector:
 21558                           	opt stack 0
 21559                           tblptru	equ	0xFF8
 21560                           tblptrh	equ	0xFF7
 21561                           tblptrl	equ	0xFF6
 21562                           tablat	equ	0xFF5
 21563                           prodh	equ	0xFF4
 21564                           prodl	equ	0xFF3
 21565                           intcon	equ	0xFF2
 21566                           postinc0	equ	0xFEE
 21567                           wreg	equ	0xFE8
 21568                           indf1	equ	0xFE7
 21569                           postdec1	equ	0xFE5
 21570                           fsr1h	equ	0xFE2
 21571                           fsr1l	equ	0xFE1
 21572                           bsr	equ	0xFE0
 21573                           indf2	equ	0xFDF
 21574                           postinc2	equ	0xFDE
 21575                           postdec2	equ	0xFDD
 21576                           plusw2	equ	0xFDB
 21577                           fsr2h	equ	0xFDA
 21578                           fsr2l	equ	0xFD9
 21579                           status	equ	0xFD8
 21580                           
 21581 ;; *************** function i1_WriteTimer0 *****************
 21582 ;; Defined at:
 21583 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21584 ;; Parameters:    Size  Location     Type
 21585 ;;  timer0          2    0[COMRAM] unsigned int 
 21586 ;; Auto vars:     Size  Location     Type
 21587 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21588 ;; Return value:  Size  Location     Type
 21589 ;;		None               void
 21590 ;; Registers used:
 21591 ;;		None
 21592 ;; Tracked objects:
 21593 ;;		On entry : 0/0
 21594 ;;		On exit  : 0/0
 21595 ;;		Unchanged: 0/0
 21596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21597 ;;      Params:         2       0       0       0       0       0       0
 21598 ;;      Locals:         2       0       0       0       0       0       0
 21599 ;;      Temps:          0       0       0       0       0       0       0
 21600 ;;      Totals:         4       0       0       0       0       0       0
 21601 ;;Total ram usage:        4 bytes
 21602 ;; Hardware stack levels used:    1
 21603 ;; This function calls:
 21604 ;;		Nothing
 21605 ;; This function is called by:
 21606 ;;		_interrupt_at_low_vector
 21607 ;; This function uses a non-reentrant model
 21608 ;;
 21609                           
 21610                           	psect	text100
 21611  005324                     __ptext100:
 21612                           	opt stack 0
 21613  005324                     i1_WriteTimer0:
 21614                           	opt stack 21
 21615                           
 21616                           ;incstack = 0
 21617                           ;incstack = 0
 21618  005324  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21619  005328  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21620  00532C  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21621  005330  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21622  005334  0012               	return	
 21623  005336                     __end_ofi1_WriteTimer0:
 21624                           	opt stack 0
 21625                           tblptru	equ	0xFF8
 21626                           tblptrh	equ	0xFF7
 21627                           tblptrl	equ	0xFF6
 21628                           tablat	equ	0xFF5
 21629                           prodh	equ	0xFF4
 21630                           prodl	equ	0xFF3
 21631                           intcon	equ	0xFF2
 21632                           postinc0	equ	0xFEE
 21633                           wreg	equ	0xFE8
 21634                           indf1	equ	0xFE7
 21635                           postdec1	equ	0xFE5
 21636                           fsr1h	equ	0xFE2
 21637                           fsr1l	equ	0xFE1
 21638                           bsr	equ	0xFE0
 21639                           indf2	equ	0xFDF
 21640                           postinc2	equ	0xFDE
 21641                           postdec2	equ	0xFDD
 21642                           plusw2	equ	0xFDB
 21643                           fsr2h	equ	0xFDA
 21644                           fsr2l	equ	0xFD9
 21645                           status	equ	0xFD8
 21646                           
 21647 ;; *************** function i1_ConvertADC *****************
 21648 ;; Defined at:
 21649 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21650 ;; Parameters:    Size  Location     Type
 21651 ;;		None
 21652 ;; Auto vars:     Size  Location     Type
 21653 ;;		None
 21654 ;; Return value:  Size  Location     Type
 21655 ;;		None               void
 21656 ;; Registers used:
 21657 ;;		None
 21658 ;; Tracked objects:
 21659 ;;		On entry : 0/0
 21660 ;;		On exit  : 0/0
 21661 ;;		Unchanged: 0/0
 21662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21663 ;;      Params:         0       0       0       0       0       0       0
 21664 ;;      Locals:         0       0       0       0       0       0       0
 21665 ;;      Temps:          0       0       0       0       0       0       0
 21666 ;;      Totals:         0       0       0       0       0       0       0
 21667 ;;Total ram usage:        0 bytes
 21668 ;; Hardware stack levels used:    1
 21669 ;; This function calls:
 21670 ;;		Nothing
 21671 ;; This function is called by:
 21672 ;;		_interrupt_at_low_vector
 21673 ;; This function uses a non-reentrant model
 21674 ;;
 21675                           
 21676                           	psect	text101
 21677  005382                     __ptext101:
 21678                           	opt stack 0
 21679  005382                     i1_ConvertADC:
 21680                           	opt stack 21
 21681                           
 21682                           ;incstack = 0
 21683                           ;incstack = 0
 21684  005382  82C2               	bsf	4034,1,c	;volatile
 21685  005384  0012               	return	
 21686  005386                     __end_ofi1_ConvertADC:
 21687                           	opt stack 0
 21688                           tblptru	equ	0xFF8
 21689                           tblptrh	equ	0xFF7
 21690                           tblptrl	equ	0xFF6
 21691                           tablat	equ	0xFF5
 21692                           prodh	equ	0xFF4
 21693                           prodl	equ	0xFF3
 21694                           intcon	equ	0xFF2
 21695                           postinc0	equ	0xFEE
 21696                           wreg	equ	0xFE8
 21697                           indf1	equ	0xFE7
 21698                           postdec1	equ	0xFE5
 21699                           fsr1h	equ	0xFE2
 21700                           fsr1l	equ	0xFE1
 21701                           bsr	equ	0xFE0
 21702                           indf2	equ	0xFDF
 21703                           postinc2	equ	0xFDE
 21704                           postdec2	equ	0xFDD
 21705                           plusw2	equ	0xFDB
 21706                           fsr2h	equ	0xFDA
 21707                           fsr2l	equ	0xFD9
 21708                           status	equ	0xFD8
 21709                           tblptru	equ	0xFF8
 21710                           tblptrh	equ	0xFF7
 21711                           tblptrl	equ	0xFF6
 21712                           tablat	equ	0xFF5
 21713                           prodh	equ	0xFF4
 21714                           prodl	equ	0xFF3
 21715                           intcon	equ	0xFF2
 21716                           postinc0	equ	0xFEE
 21717                           wreg	equ	0xFE8
 21718                           indf1	equ	0xFE7
 21719                           postdec1	equ	0xFE5
 21720                           fsr1h	equ	0xFE2
 21721                           fsr1l	equ	0xFE1
 21722                           bsr	equ	0xFE0
 21723                           indf2	equ	0xFDF
 21724                           postinc2	equ	0xFDE
 21725                           postdec2	equ	0xFDD
 21726                           plusw2	equ	0xFDB
 21727                           fsr2h	equ	0xFDA
 21728                           fsr2l	equ	0xFD9
 21729                           status	equ	0xFD8
 21730                           
 21731                           	psect	text102
 21732  000000                     __ptext102:
 21733                           	opt stack 0
 21734                           tblptru	equ	0xFF8
 21735                           tblptrh	equ	0xFF7
 21736                           tblptrl	equ	0xFF6
 21737                           tablat	equ	0xFF5
 21738                           prodh	equ	0xFF4
 21739                           prodl	equ	0xFF3
 21740                           intcon	equ	0xFF2
 21741                           postinc0	equ	0xFEE
 21742                           wreg	equ	0xFE8
 21743                           indf1	equ	0xFE7
 21744                           postdec1	equ	0xFE5
 21745                           fsr1h	equ	0xFE2
 21746                           fsr1l	equ	0xFE1
 21747                           bsr	equ	0xFE0
 21748                           indf2	equ	0xFDF
 21749                           postinc2	equ	0xFDE
 21750                           postdec2	equ	0xFDD
 21751                           plusw2	equ	0xFDB
 21752                           fsr2h	equ	0xFDA
 21753                           fsr2l	equ	0xFD9
 21754                           status	equ	0xFD8
 21755                           
 21756                           	psect	rparam
 21757  0000                     tblptru	equ	0xFF8
 21758                           tblptrh	equ	0xFF7
 21759                           tblptrl	equ	0xFF6
 21760                           tablat	equ	0xFF5
 21761                           prodh	equ	0xFF4
 21762                           prodl	equ	0xFF3
 21763                           intcon	equ	0xFF2
 21764                           postinc0	equ	0xFEE
 21765                           wreg	equ	0xFE8
 21766                           indf1	equ	0xFE7
 21767                           postdec1	equ	0xFE5
 21768                           fsr1h	equ	0xFE2
 21769                           fsr1l	equ	0xFE1
 21770                           bsr	equ	0xFE0
 21771                           indf2	equ	0xFDF
 21772                           postinc2	equ	0xFDE
 21773                           postdec2	equ	0xFDD
 21774                           plusw2	equ	0xFDB
 21775                           fsr2h	equ	0xFDA
 21776                           fsr2l	equ	0xFD9
 21777                           status	equ	0xFD8
 21778                           tblptru	equ	0xFF8
 21779                           tblptrh	equ	0xFF7
 21780                           tblptrl	equ	0xFF6
 21781                           tablat	equ	0xFF5
 21782                           prodh	equ	0xFF4
 21783                           prodl	equ	0xFF3
 21784                           intcon	equ	0xFF2
 21785                           postinc0	equ	0xFEE
 21786                           wreg	equ	0xFE8
 21787                           indf1	equ	0xFE7
 21788                           postdec1	equ	0xFE5
 21789                           fsr1h	equ	0xFE2
 21790                           fsr1l	equ	0xFE1
 21791                           bsr	equ	0xFE0
 21792                           indf2	equ	0xFDF
 21793                           postinc2	equ	0xFDE
 21794                           postdec2	equ	0xFDD
 21795                           plusw2	equ	0xFDB
 21796                           fsr2h	equ	0xFDA
 21797                           fsr2l	equ	0xFD9
 21798                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1117
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     73     122
    BANK1           256     52     148
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___fladd	short  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	short  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___fltol
    ___lwtofl->_readEEPROM
    ___asfldiv->___fldiv
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->___flmul
    _exp->___asflmul
    _exp->___fltol
    _eval_poly->___flmul
    _floor->___fltol
    ___fltol->___flmul
    ___altofl->___fltol
    ___flsub->___flmul
    ___asflmul->___flmul
    ___fldiv->___lwtofl
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    ___fladd->___flmul
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeStdReg->_vscp_getGUID
    _vscp_writeStdReg->_vscp_getUserID
    _vscp_writeStdReg->_vscp_getManufacturerId
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _writeCoeffs2Ram->_readEEPROM
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_readNicknamePermanent->_readEEPROM
    _readEEPROM->___wmul
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_OpenADC
    _ECANInitialize->_ECANSetOperationMode
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___asfladd->___fladd
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _eval_poly->___fladd
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___fladd
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->_Celsius2Kelvin
    _setEventData->_Celsius2Fahrenheit
    _Celsius2Fahrenheit->___fladd
    ___fladd->___flmul
    _Celsius2Kelvin->___fladd
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  141463
                                             69 BANK0      4     4      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              66    66      0   67603
                                             55 BANK0     14    14      0
                                              0 BANK1     52    52      0
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     865
                                             25 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6    2070
                                             51 COMRAM     6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    3985
                                             23 BANK0      6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             14 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             25 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   14303
                                             35 BANK0      6     2      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   24732
                                             44 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             35 BANK0      9     3      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    6410
                                             23 BANK0     12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    6633
                                             33 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             65 COMRAM     4     0      4
                                              8 BANK0      6     6      0
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                8     3      5     322
                                             13 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4    1120
                                             28 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    4140
                                             31 BANK0      6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3930
                                             23 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4    2255
                                             65 COMRAM     4     0      4
                                              8 BANK0      1     1      0
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    1860
                                             29 COMRAM    22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                     11    11      0   22431
                                             38 BANK0     11    11      0
                        _writeEEPROM
                         _readEEPROM
                      _sendTempEvent
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0   15142
                                             38 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0   14697
                                             36 BANK0      2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3   12082
                                             27 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    6955
                                             23 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    3775
                                              8 BANK0     15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    3050
                                             23 BANK0      4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   24226
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    6122
                                             38 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1581
                                             26 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     134
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      0     0      0      44
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4386
                                             34 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeCoeffs2Ram                                      9     9      0     555
                                             25 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     159
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             43 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             26 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             25 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             21 COMRAM     4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      44
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     402
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0      90
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    1120
                                             23 COMRAM     6     2      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    2045
                                             51 COMRAM    14    14      0
                                              0 BANK0      8     0      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             25 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
         ___wmul (ARG)
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
         ___wmul (ARG)
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
           ___wmul (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
         ___wmul (ARG)
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
         ___wmul (ARG)
       _writeCoeffs2Ram
         _readEEPROM
           ___wmul (ARG)
         ___wmul
       _vscp_readAppReg (ARG)
         _readEEPROM
           ___wmul (ARG)
     _vscp_getGUID
       _readEEPROM
         ___wmul (ARG)
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
           ___wmul (ARG)
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
           ___wmul (ARG)
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
           ___wmul (ARG)
         _writeCoeffs2Ram
           _readEEPROM
             ___wmul (ARG)
           ___wmul
         _vscp_readAppReg (ARG)
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _handle_sync
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _writeEEPROM
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
         ___wmul (ARG)
     _vscp_getSubzone
       _readEEPROM
         ___wmul (ARG)
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
           ___wmul (ARG)
       _vscp_getSubzone (ARG)
         _readEEPROM
           ___wmul (ARG)
   _doWork
     _readEEPROM
       ___wmul (ARG)
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
                 ___wmul (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
         ___wmul (ARG)
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
           ___wmul (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
             ___wmul (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
         ___wmul (ARG)
       ___flpack (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     3C0      16       63.2%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     34      94       6       57.8%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     49      7A       4       76.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     160      15        0.0%
DATA                 0      0     52B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Wed Nov 25 18:04:44 2015

                          ___asfldiv@f1p 0034                            ___altofl@sign 0080  
                           ___fldiv@cntr 002D                  __end_of_vscp_readAppReg 1B08  
                           ___fldiv@sign 0033                    __end_of_sendVSCPFrame 43AC  
                           ___asflmul@mp 0068                             ___asflsub@f2 0081  
                                     PL2 2B14                                       PL4 2B2C  
                                     PL6 2B48                                       PL8 2B56  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 000E  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 0011  
                    ___wmul@multiplicand 0010                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 35F6                            ___asflsub@f1p 007F  
                           ___flpack@arg 000E                                      PL10 2B72  
                                    PL20 2BA6                                      PL12 2B80  
                                    PL30 2BD8                                      PL22 3BEC  
                                    PL14 3BD8                                      PL40 2100  
                                    PL32 4DD6                                      PL24 20E8  
                                    PL16 2B96                                      PL50 3B06  
                                    PL42 3AE0                                      PL34 35F6  
                                    PL26 3BFC                                      PL18 3ABE  
                                    PL60 2C12                                      PL52 2C00  
                                    PL44 3AF2                                      PL36 3ACC  
                                    PL28 2BC0                                      PL70 48E8  
                                    PL62 3FEC                                      PL54 38C6  
                                    PL46 3C0E                                      PL38 42E6  
                                    PL80 3C22                                      PL72 3FFC  
                                    PL64 1358                                      PL56 307A  
                                    PL48 2BEE                                      PL90 2122  
                                    PL82 360A                                      PL74 2114  
                                    PL66 3286                                      PL58 4F6E  
                                    PL84 423A                                      PL76 2C30  
                                    PL68 2C22                                      PL86 2C4C  
                                    PL78 2C3E                                      PL88 2C52  
                           ___flpack@exp 0012                           _Celsius2Kelvin 4F16  
                                    l311 13DA                                      l207 2772  
                                    l321 140C                                      l313 13E4  
                                    l315 13EE                                      l251 4436  
                                    l227 2A18                                      l317 13F8  
                                    l406 1802                                      l319 1402  
                                    l183 3CAE                                      l168 3C40  
                                    l177 3C84                       vscp_readStdReg@idx 0028  
                                    l515 0FE4                                      l291 47C6  
                                    l518 1032                                      l631 4D96  
                                    l625 496C                                      l636 4FD8  
                                    l548 51A2                                      l821 3700  
                                    l590 5272                                      l832 30C4  
                                    l914 50EA                                      l842 3192  
                                    l851 315C                                      l843 3112  
                                    l827 377A                                      l819 36E2  
                                    l853 316C                                      l845 3120  
                     vscp_readStdReg@reg 002B                                      l863 31F6  
                                    l855 317C                                      l847 3134  
                                    l839 3284                                      l864 3210  
                                    l849 3148                                      l881 3BD6  
                                    l891 49DA                                      l886 3ABC  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00C4  
                       setEventData@ival 0082                           getVSCPFrame@id 002E  
          __end_of_vscp_handleProbeState 40CE                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                         setEventData@unit 007D  
                                    _adc 0194                                      _exp 3294  
                                    _log 38D8                                      fsr2 000FD9  
                                    prod 000FF3                                      wreg 000FE8  
                           ___flmul@cntr 0040                             ___flmul@sign 0041  
                           __CFG_LVP$OFF 000000                            ___flpack@sign 0013  
                           ___fltol@exp1 006D                             __CFG_WDT$OFF 000000  
                                   l1103 51F8                                     l1032 515E  
                                   l1050 40B8                                     l1042 40C8  
                                   l1051 4098                                     l1043 4052  
                                   l1027 4D20                                     l1232 1E52  
                                   l1208 1CCE                                     l1313 51DA  
                                   l1233 1E66                                     l1314 51DC  
                                   l1090 502C                                     l1234 1EA2  
                                   l1075 4E62                                     l1243 1EDE  
                                   l1148 5180                                     l1085 4FA0  
                                   l1086 4FAC                                     l1174 3E42  
                                   l1079 513A                                     l1602 385C  
                                   l1099 4C32                                     l1276 5056  
                                   l1268 20E6                                     l1700 45A6  
                                   l1550 4238                                     l1560 41FA  
                                   l1634 3FEA                                     l1554 41CC  
                                   l1299 4AB0                                     l1619 4502  
                                   l1627 4B7C                                     l1628 4B9A  
                                   l1549 4198                                     l1591 37C8  
                                   l1671 3F30                                     l1575 3476  
                                   l1680 46E4                                     l1578 3342  
                                   l1587 37A0                                     l1579 3466  
                                   l1588 38C4                                     l1668 3E78  
                                   l1669 3F40                                     l1696 487A  
                __end_of_doOneSecondWork 2B14                                     l1867 39F8  
                    vscp_readStdReg@code 0020                                     l8102 4910  
              vscp_getManufacturerId@idx 001A                                     l8114 4FB6  
                                   l8026 5200                                     ?_exp 008C  
                                   ?_log 0083                                     l8118 4FBA  
                                   l8400 49B0                                     l8304 31C6  
                                   l8330 323E                                     l8322 3212  
                                   l8242 30F2                                     l8226 30B2  
                                   l8250 3100                                     l8404 49BC  
                                   l8236 30DC                                     l8244 30FC  
                                   l7366 4DAE                                     l8344 326E  
                                   l9080 5062                                     l8418 3A58  
                                   l8338 3258                                     l8356 5280  
                                   l8390 4986                                     l8294 31A6  
                                   l8392 4990                                     l9520 400C  
                                   l9088 5078                                     l9600 1B1E  
                                   l8394 499A                                     l8386 4974  
                                   l9602 1B24                                     l8396 49A4  
                                   l8388 497C                                     l9604 1B2A  
                                   l8398 49AA                                     l9534 402C  
                                   l9622 1B62                                     l9560 4076  
                                   l9536 4034                                     l9624 1B68  
                                   l9554 406E                                     l9730 1CD2  
                                   l9492 514A                                     l9900 1EE0  
                                   l9812 1E26                                     l9740 1D18  
                                   l9708 1C66                                     l9732 1CF0  
                                   l9558 4072                                     l9590 40BC  
                                   l9750 1D78                                     l9718 1C9A  
                                   l9638 1B70                                     l9736 1D00  
                                   l9672 1BA2                                     l7994 518E  
                                   l9914 1F08                                     l9770 1DAA  
                                   l9746 1D62                                     l9658 1B96  
                                   l9940 1F68                                     l9924 1F2A  
                                   l9860 1E8E                                     l9828 1E46  
                                   l9596 1B12                                     l9942 1F6E  
                                   l9766 1D9E                                     l9598 1B18  
                                   l9936 1F56                                     l9864 1E96  
                                   l9856 1E86                                     l9848 1E68  
                                   l9784 1DF4                                     l9768 1DA0  
                                   l9688 1BFE                                     l9970 1FCA  
                                   l9962 1F98                                     l9874 1EA4  
                                   l9778 1DC4                                     l9698 1C32  
                                   l9980 1FF4                                     l9796 1E06  
                                   l9966 1FAE                                     l9958 1F7E  
                                   l9878 1EBE                                     l9992 2036  
                                   l9988 200E              __size_of_vscp_getMatrixInfo 001A  
                                   u5420 4960                           sendCANFrame@id 003C  
                                   u5425 4956                                     u5915 3A20  
                                   u5595 30BA                                     u5925 3A30  
                                   u5597 30BC                                     u5935 3A5C  
                                   u9055 3B3E                                     u9400 35C4  
                                   u9065 3B4E                                     u9075 3B6C  
                                   u9405 35C2                           sendCANFrame@rv 0042  
                                   u9370 357A                                     u9375 3578  
                                   u8915 4336                         ??_ECANInitialize 000F  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 0012  
                                   ___IT 000101                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 3C2C  
                                   _init 4EA0                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     exp@x 008C  
                                   log@x 0083                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 066E  
                            _vscp_minute 004D                              _vscp_second 0051  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 02BA            __size_of_vscp_doOneSecondWork 004C  
                      vscp_getUserID@idx 001A                    __size_of_vscp_setGUID 0022  
                       _vscp_writeStdReg 3D3E                              _writeEEPROM 50CE  
              ECANReceiveMessage@dataLen 0016                    getVSCPFrame@pPriority 0026  
                        __end_of_OpenADC 4AB4                          _sh_coefficients 0117  
                   __end_of_getVSCPFrame 496E                                    ??_exp 0046  
                                  ??_log 0042              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 0010                         __RegsToCANID@ptr 000E  
                 __end_of_Celsius2Kelvin 4F4C                     __size_of_getCANFrame 002C  
                                  l10014 2086                                    l11000 374A  
                                  l11010 3770                                    l11012 3772  
                                  l10220 4C12                                    l11006 376C  
                                  l11102 51F2                                    l10214 4C08  
                                  l11120 34A0                                    l11200 35F2  
                                  l11112 348C                                    l10224 4C1A  
                                  l10500 14DE                                    l11028 3B64  
                                  l11140 34DE                                    l11132 34C2  
                                  l11124 34AA                                    l11116 3496  
                                  l11212 5176                                    l10510 151A  
                                  l10502 14EA                                    l11150 3500  
                                  l10422 45B2                                    l11230 3D88  
                                  l10600 1736                                    l10520 1556  
                                  l10512 1526                                    l10504 14F6  
                                  l10440 1382                                    l11136 34CE  
                                  l11128 34B6                                    l10416 45AC  
                                  l11224 3D68                                    _B0CON 000E20  
                                  l10610 1772                                    l10602 1742  
                                  l10530 1592                                    l10522 1562  
                                  l10514 1532                                    l10506 1502  
                                  l10450 13BE                                    l10442 138E  
                                  l11066 4E5A                                    l11170 353A  
                                  l11162 3522                                    l11154 350C  
                                  l11146 34F4                                    l11330 4124  
                                  l11322 4100                                    l10620 17AE  
                                  l10612 177E                                    l10604 174E  
                                  l10540 15CE                                    l10532 159E  
                                  l10524 156E                                    l10516 153E  
                                  l10508 150E                                    l10460 13F4  
                                  l10452 13CA                                    l10444 139A  
                                  l11180 3584                                    l10700 080C  
                                  l11260 3E10                                    l11244 3DC2  
                                  l11236 3DA4                                    l11340 4156  
                                  l11332 4128                                    l11316 40E8  
                                  l10630 17EA                                    l10622 17BA  
                                  l10614 178A                                    l10606 175A  
                                  l10550 160A                                    l10542 15DA  
                                  l10534 15AA                                    l10526 157A  
                                  l10518 154A                                    l10470 142A  
                                  l10462 13FE                                    l10454 13D6  
                                  l10446 13A6                                    l10438 1376  
                                  l11190 35CC                                    l11166 352E  
                                  l11158 3516                                    l10710 0898  
                                  l10702 0828                                    l11246 3DC6  
                                  l10632 17F6                                    l10624 17C6  
                                  l10616 1796                                    l10608 1766  
                                  l10560 1646                                    l10552 1616  
                                  l10544 15E6                                    l10536 15B6  
                                  l10528 1586                                    l10480 1466  
                                  l10472 1436                                    l10464 1408  
                                  l10456 13E0                                    l10448 13B2  
                                  l10640 181E                                    l10800 0D5C  
                                  l10720 0924                                    l10712 08B4  
                                  l10704 0844                                    l11248 3DDC  
                                  l11328 4118                                    l11344 4164  
                                  _B1CON 000E30                                    l10634 1806  
                                  l10626 17D2                                    l10618 17A2  
                                  l10570 1682                                    l10562 1652  
                                  l10554 1622                                    l10546 15F2  
                                  l10538 15C2                                    l10490 14A2  
                                  l10482 1472                                    l10474 1442  
                                  l10466 1412                                    l10458 13EA  
                                  l10642 1AA8                                    l10810 0DDE  
                                  l10802 0D76                                    l10730 09B0  
                                  l10722 0940                                    l10714 08D0  
                                  l10706 0860                                    l11610 4B98  
                                  l10660 1AEC                                    l10636 1812  
                                  l10628 17DE                                    l10580 16BE  
                                  l10572 168E                                    l10564 165E  
                                  l10556 162E                                    l10548 15FE  
                                  l10492 14AE                                    l10484 147E  
                                  l10476 144E                                    l10468 141E  
                                  l11196 35E2                                    l10820 0E60  
                                  l10812 0DF8                                    l10804 0D90  
                                  l10740 0A3C                                    l10732 09CC  
                                  l10724 095C                                    l10716 08EC  
                                  l10708 087C                                    l11268 3E26  
                                  l14012 3812                                    l11604 4B66  
                                  l11348 4178                                    l10590 16FA  
                                  l10582 16CA                                    l10574 169A  
                                  l10566 166A                                    l10558 163A  
                                  l10494 14BA                                    l10486 148A  
                                  l10478 145A                                    l14110 3F8E  
                                  l10830 0EE2                                    l10822 0E7A  
                                  l10814 0E12                                    l10806 0DAA  
                                  l10750 0AC8                                    l10742 0A58  
                                  l10734 09E8                                    l10726 0978  
                                  l10718 0908                                    l11278 3E44  
                                  l14030 3872                                    l14014 381E  
                                  l14006 37F4                                    l11630 4822  
                                  l10656 1ADA                                    l10648 1AC6  
                                  l10592 1706                                    l10584 16D6  
                                  l10576 16A6                                    l10568 1676  
                                  l10496 14C6                                    l10488 1496  
                                  l10664 1B04                                    l10840 0F64  
                                  l10832 0EFC                                    l10824 0E94  
                                  l10816 0E2C                                    l10808 0DC4  
                                  l10760 0B54                                    l10752 0AE4  
                                  l10744 0A74                                    l10736 0A04  
                                  l10728 0994                                    l10680 06F4  
                                  l10672 0684                                    l14024 384A  
                                  l14016 3826                                    _B2CON 000E40  
                                  l10658 1ADC                                    l10594 1712  
                                  l10586 16E2                                    l10578 16B2  
                                  l10498 14D2                                    l14122 3FA8  
                                  l14114 3F96                                    l10850 0FFE  
                                  l10842 0F7E                                    l10834 0F16  
                                  l10826 0EAE                                    l10818 0E46  
                                  l10770 0BD6                                    l10762 0B6E  
                                  l10754 0B00                                    l10746 0A90  
                                  l10738 0A20                                    l10690 0780  
                                  l10682 0710                                    l10674 06A0  
                                  l14042 3898                                    l14034 387A  
                                  l14026 3856                                    l14018 382C  
                                  l11618 5106                                    l10596 171E  
                                  l10588 16EE                                    l10852 1018  
                                  l10844 0F98                                    l10836 0F30  
                                  l10828 0EC8                                    l10780 0C58  
                                  l10772 0BF0                                    l10764 0B88  
                                  l10756 0B1C                                    l10748 0AAC  
                                  l10692 079C                                    l10684 072C  
                                  l10676 06BC                                    l11660 4698  
                                  l11644 4654                                    l11580 4544  
                                  l10598 172A                                    l14126 3FB0  
                                  l14150 4EEC                                    l10934 4D60  
                                  l10854 1036                                    l10846 0FB2  
                                  l10838 0F4A                                    l10790 0CDA  
                                  l10782 0C72                                    l10774 0C0A  
                                  l10766 0BA2                                    l10758 0B38  
                                  l10694 07B8                                    l10686 0748  
                                  l10678 06D8                                    l10862 106E  
                                  l14070 449A                                    l14054 4468  
                                  l11670 46BC                                    l11646 465E  
                                  l11590 4562                                    l10952 366C  
                                  l10880 1322                                    l10872 130E  
                                  l10856 1050                                    l10848 0FCC  
                                  l10792 0CF4                                    l10784 0C8C  
                                  l10776 0C24                                    l10768 0BBC  
                                  l10696 07D4                                    l10688 0764  
                                  l10864 12E2                                    l11672 46C0  
                                  l11664 46A8                                    _B3CON 000E50  
                                  l10970 36A6                                    l10938 4D8A  
                                  l10882 1324                                    l10858 106A  
                                  l10794 0D0E                                    l10786 0CA6  
                                  l10778 0C3E                                    l10698 07F0  
                                  l13610 47D2                                    l13602 477E  
                                  l14058 447C                                    l11594 456E  
                                  l10980 36E6                                    l10884 1334  
                                  l10796 0D28                                    l10788 0CC0  
                                  l11676 46D4                                    l11668 46B0  
                                  l14164 3E82                                    l13540 3C74  
                                  l13532 3C62                                    l14094 3F50  
                                  l10958 367C                                    l10798 0D42  
                                  l13614 47E6                                    l13606 47A2  
                                  l13702 295E                                    l14078 44C8  
                                  l13542 3C78                                    l10992 3730  
                                  l10888 1354                                    l13616 47F2  
                                  l13704 2978                                    l13632 27EE  
                                  l14168 3E9E                                    l14176 4262  
                                  l13552 3C94                                    l13544 3C7E  
                                  l13536 3C6A                                    _B4CON 000E60  
                                  l14098 3F68                                    l10986 3702  
                                  l13642 282A                                    l13626 26F8  
                                  l14178 42CC                                    l13562 3CB2  
          __size_of_vscp_getMajorVersion 0002                                    l13740 2A54  
                                  l13724 29FA                                    l13660 289A  
                                  l13580 3CFA                                    l13564 3CCA  
                                  l13742 2A6E                                    l13726 2A00  
                                  l13670 28B8                                    l13590 3D2E  
                                  l13558 3CA8                                    _B5CON 000E70  
                                  l13922 441A                                    l13762 2AEC  
                                  l13658 2894                                    l13586 3D26  
                                  l13940 41A2                                    l13764 2AF2  
                                  l13684 2900                                    l13950 41E2  
                                  l13942 41A6                                    l13918 43E2  
                                  l13686 2906                                    l13774 2B0A  
                                  l13854 32E6                                    l13838 306E  
                                  l13952 41EE                                    l13944 41BE  
                                  l13696 2926                                    l13848 32B2  
                                  l13792 2CBA                                    l13784 2C90  
                                  l13970 4CE0                                    l13874 3434  
                                  l13858 3310                                    l13990 37DA  
                                  l13886 38F6                                    l13984 37B2  
             __end_of_vscp_goActiveState 51C2                            ___fltol@sign1 006C  
                        __end_of___aldiv 418A            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 38C6  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                          __end_of___fldiv 4504  
                          i1_WriteTimer0 5324                          __end_of___flneg 5118  
                                  _EEADR 000FA9                          __end_of___lbmod 5080  
                        __end_of___flmul 3FEC                          __end_of___flsub 4EA0  
                        __end_of___fltol 46E6                  _vscp_handleDropNickname 4F7E  
                                  _BSEL0 000DF8                                    u10080 453A  
                                  u10170 467C                                    u10175 4672  
                                  _T0CON 000FD5                                    u13004 2A64  
                                  u13005 2A60                                    u13210 38EC  
                                  u13114 3066                                    u13115 3062  
                                  u13084 2CA2                                    u13085 2C9E  
                                  u13190 342A                                    u13530 4472  
                                  u13560 3F5C                                    u12904 296E  
                                  u12824 2B24                                    u12905 296A  
                                  u12825 2B20                                    u12774 284A  
                                  u12775 2846                                    i1l144 00BE  
                                  i1l161 0246                                    i1l138 0084  
                                  i1l164 029C                          sendCANFrame@dlc 0040  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                      ??_writeCoeffs2Ram 001A                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 5368  
             _vscp_readNicknamePermanent 535E                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                       setEventData@newval 007E  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                          ___awtofl@sign 001D                           __CFG_EBTR3$OFF 000000  
                  __end_of_sendTempEvent 48E8                             _vscp_getGUID 52B4  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                                  _floor 3E48                                    _ldexp 4504  
                           _vscp_getZone 5340                                    _frexp 47FE  
                     vscp_writeAppReg@rv 0026                _vscp_getRegisterPagesUsed 5386  
                 __size_of_vscp_getEvent 002A                                    main@i 00A5  
                             _ConvertADC 537E                             _vscp_setGUID 5182  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 538C  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 50CE                              exp@exponent 0094  
                            ldexp@newexp 0087                     _ECANSetOperationMode 5274  
                        __initialization 4DE4                              log@exponent 0087  
                           __end_of_main 3D3E                             __end_of_init 4EDC  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                        ?_Celsius2Kelvin 0077                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001F                           ?i1_WriteTimer0 0001  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 0024  
                 ??_vscp_restoreDefaults 0011                                   ??_main 0046  
                                 ??_init 0013            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 001A                 ??_vscp_setManufacturerId 0012  
               _vscp_handleProtocolEvent 1B08                            __activetblptr 000002  
                      __RegsToCANID@type 0011               ECANReceiveMessage@msgFlags 0017  
                       doWork@calVoltage 0163                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_floor 0081  
                                 ?_ldexp 0083                     __size_of_handle_sync 0082  
                                 ?_frexp 000E                         __end_of___altofl 4D0E  
             ECANReceiveMessage@savedPtr 0018                                   _CANCON 000F6F  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                         __end_of___flpack 423A  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                       __end_of___awtofl 4F16                         ?_doOneSecondWork 0001  
                     vscp_writeStdReg@rv 0020                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 51C2                                   i1l9110 003C  
                                 i1l9200 0236                                   i1l9120 0072  
                                 i1l9112 0048                                   i1l9202 0242  
                                 i1l9130 0096                                   i1l9122 0076  
                                 i1l9114 004E                                   i1l9204 0248  
                                 i1l9132 00A0                                   i1l9140 00B2  
                                 i1l9124 007E                                   i1l9116 0052  
                                 i1l9108 0034                                   i1l9206 0252  
                                 i1l9214 025C                                   i1l9150 00C8  
                                 i1l9134 00A8                                   i1l9126 0088  
                                 i1l9118 0062                                   i1l9208 0256  
                                 i1l9216 0296                                   i1l9160 0100  
                                 i1l9136 00AC                                   i1l9128 008A  
                                 i1l9152 00CA                                   i1l9218 029A  
                                 i1l9170 014A                                   i1l9162 010C  
                                 i1l9138 00AE                                   i1l9180 018E  
                                 i1l9172 0150                                   i1l9164 0112  
                                 i1l9156 00D4                                   i1l9190 01F4  
                                 i1l9182 01B6                                   i1l9174 0178  
                                 i1l9166 013A                                   i1l9158 00FC  
                                 i1l9192 01F8                                   i1l9184 01BA  
                                 i1l9176 017C                                   i1l9168 013E  
                                 i1l9194 0204                                   i1l9186 01C6  
                                 i1l9178 0188                                   i1l9196 020A  
                                 i1l9188 01CC                                   i1l9198 0232  
                        _init_app_eeprom 212C                         __end_of___lwtofl 5004  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                 ECANReceiveMessage@data 0015                   ECANReceiveMessage@mode 001C  
                 ECANReceiveMessage@temp 001D                        getVSCPFrame@pData 0028  
                      getVSCPFrame@pSize 0027                                ??_OpenADC 0010  
                     _vscp_newNodeOnline 5004                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0017   vscp_handleProtocolEvent@page_save_1166 0088  
                                 ___flge 4B50                           getCANFrame@pid 0022  
                              ??___aldiv 0046                                ??___fladd 0070  
                                 ___wmul 4F4C                                ??___fldiv 0026  
                              ??___flneg 0012                           __CFG_STVREN$ON 000000  
                              ??___lbmod 000F                                ??___flmul 0034  
                              ??___flsub 0042                                ??___fltol 0068  
                          _vscp_getEvent 502E                                   _doWork 2C58  
                       OpenTimer0@config 000E                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 001A                      vscp_writeAppReg@reg 0025  
             __end_of_vscp_setSegmentCRC 5300                      vscp_writeAppReg@val 0023  
                    vscp_writeAppReg@pos 0024                                   clear_0 4DEC  
                                 clear_1 4DFE                                   clear_2 4E0A  
                                 clear_3 4E16                            ?_sendCANFrame 003C  
           vscp_handleProtocolEvent@byte 0095                                   floor@i 0085  
                                 floor@x 0081                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 00BD                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 0011  
              ??_vscp_getSubMinorVersion 000E     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000E                     ??_vscp_newNodeOnline 0044  
                            ?_ConvertADC 0001                       __size_of___asfladd 004E  
                     __size_of___asfldiv 004A                       __size_of___asflmul 004C  
                             ___fladd@f1 0068                               ___fladd@f2 006C  
                     __size_of___asflsub 004E                               ___flge@ff1 000E  
                             ___flge@ff2 0012                         __end_ofexp@coeff 0648  
                       __end_oflog@coeff 066C                          ___lbmod@divisor 000E  
                             ___altofl@c 007C                               ___fldiv@f1 001E  
                             ___fldiv@f2 0022                               ___fldiv@f3 002E  
                             __accesstop 0060                  __end_of__initialization 4E1C  
                        ___lbmod@counter 0010                       _Celsius2Fahrenheit 49E4  
                             ___flneg@f1 000E            __size_of_vscp_getMinorVersion 0002  
                             ___flmul@f1 0060                               ___flmul@f2 0064  
                           eval_poly@res 007F                               ___flsub@f1 0077  
                             ___flsub@f2 007B                               ___fltol@f1 0042  
                        writeEEPROM@data 0010                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 5160                               ___awtofl@c 0018  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0028  
                    ?_Celsius2Fahrenheit 0077                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                   ___asflmul@multiplicand 0042  
            __end_of_vscp_check_pstorage 5160                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                            __end_of_floor 3F42  
                          __end_of_ldexp 45A8                            __end_of_frexp 487C  
                    ?_vscp_writeRegister 0027                               __end_ofPL2 2B2C  
                             __end_ofPL4 2B48                               __end_ofPL6 2B56  
                             __end_ofPL8 2B72                           ??_sendCANFrame 0042  
                             ___lwtofl@c 001A               __end_of_vscp_getFamilyCode 535E  
                          ?__RegsToCANID 000E              __size_of_ECANReceiveMessage 01FA  
           __size_of_getCalibrationValue 0048                       sendVSCPFrame@pData 0066  
             __end_of_vscp_getFamilyType 5354          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 0027          __size_of_vscp_setManufacturerId 0018  
               __end_of_vscp_writeAppReg 1358                   getVSCPFrame@pvscpclass 002D  
                __end_of_init_app_eeprom 26F4                     ??_Celsius2Fahrenheit 0042  
            __end_of_vscp_setControlByte 52EE                 __end_of_vscp_writeStdReg 3E48  
                     __RegsToCANID@Value 0014                                  ??_floor 0046  
                                ??_ldexp 0089                                  ??_frexp 0013  
                          ?_setEventData 007B                     ??_vscp_writeRegister 0028  
        __end_of_vscp_handleDropNickname 4FAE                             _getVSCPFrame 48F6  
                             __pbssBANK0 00A9                               __pbssBANK1 0100  
                            ?_OpenTimer0 0001                       __size_of_eval_poly 00A0  
             __end_of_vscp_getBufferSize 538A                         Celsius2Kelvin@tc 0077  
                  vscp_writeRegister@reg 0028                   ??_ECANSetOperationMode 000E  
                           __IT_INT_MASK 00B5                             __IT_SAVE_BSR 0114  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 000E  
                        _writeCoeffs2Ram 45A8                                  ?___flge 000E  
        __end_of_vscp_getSubMinorVersion 538E                 ECANSetOperationMode@mode 000E  
                                ?___wmul 000E                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0048  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0011                                  _B5RXFUL 007387  
                      __end_of___asfladd 4B02                        __end_of___asfldiv 4C7E  
                       WriteTimer0@timer 0010                                ?___altofl 007C  
                      __end_of___asflmul 4BE8                                  _ECANCON 000F77  
                      __end_of___asflsub 4B50                                ?___flpack 000E  
                          ??_WriteTimer0 0010                         doWork@resistance 0185  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                    sendVSCPFrame@priority 0064  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72                                ?___lwtofl 001A  
                    vscp_writeStdReg@reg 0021             __end_of_vscp_doOneSecondWork 4C34  
                                i1l14236 026E                       _adc_series_counter 0049  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0062  
                             _high_alarm 00B8          __end_of_interrupt_at_low_vector 02BA  
               vscp_readStdReg@code_1139 0024                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 400A                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 496E               __end_of_vscp_getMatrixInfo 5214  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                           ??_setEventData 0046  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                          setEventData@v 007B                       _vscp_goActiveState 51A4  
                 __size_of_sendVSCPFrame 00B2             __end_of_vscp_getMajorVersion 5392  
                     __size_of_vscp_init 0048                               _readEEPROM 52C8  
                 _vscp_getManufacturerId 528C                   _vscp_setManufacturerId 5214  
                        _ECANSendMessage 3616                      ?_vscp_goActiveState 0001  
                                _OpenADC 4A58                                  __Hparam 0000  
                        ??_vscp_getEvent 0032                         ??_Celsius2Kelvin 0042  
                                __Lparam 0000                       _vscp_node_substate 004E  
             __end_of_vscp_getSegmentCRC 5372               ??_vscp_handleProtocolEvent 007F  
                          ??_getCANFrame 0022        __end_of_vscp_getRegisterPagesUsed 5388  
               __size_of_vscp_getMDF_URL 0018                                  ___aldiv 40CE  
                        __size_of___flge 004C                                  ___fladd 377C  
                                ___fldiv 445C                                  ___flneg 50F4  
                                ___lbmod 5058                                  ___flmul 3F42  
                                ___flsub 4E64                                  ___fltol 4648  
                        __size_of___wmul 0022                          getCANFrame@pdlc 0020  
                              _FIFOEMPTY 007BA7                            ?i1_ConvertADC 0001  
                        __size_of_doWork 0422                             __psmallconst 0600  
                             ??___altofl 0046                     __end_of_init_app_ram 4DD6  
                             ??___flpack 0014                       _vscp_sendHeartBeat 50A8  
                                __pcinit 4DE4                               ??___awtofl 001C  
                         _vscp_deviceURL 0600                        __end_of_eval_poly 42E6  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 3C2C                                  __ptext1 2C58  
                                __ptext2 4FDA                                  __ptext3 4C34  
                                __ptext4 4AB4                                  __ptext5 40CE  
                                __ptext6 4C7E                                  __ptext7 38D8  
                                __ptext8 3294                                  __ptext9 50F4  
                             ??___lwtofl 001E                           _vscp_getUserID 52A0  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 0044  
                           __size_of_exp 01E4                             __size_of_log 0122  
                  vscp_writeStdReg@value 001B                         ___aldiv@dividend 006E  
                    ?_vscp_sendHeartBeat 0044                 ??_vscp_handleSetNickname 0012  
                                _seconds 00BA                                  doWork@B 0183  
                                doWork@i 0192                                  doWork@j 0189  
                                doWork@v 017F                      __end_of_WriteTimer0 5324  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 001C  
                     vscp_getMDF_URL@idx 000F                           OpenADC@config2 000E  
          vscp_handleProtocolEvent@bytes 008C                     end_of_initialization 4E1C  
                                exp@sign 0096             __end_of_vscp_handleHeartbeat 4E64  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                __end_of_writeCoeffs2Ram 4648                     __end_of_sendCANFrame 4D9E  
                             doWork@Rinf 015F                       doOneSecondWork@tmp 008D  
                             doWork@temp 018E                vscp_handleProtocolEvent@i 0099  
              vscp_handleProtocolEvent@j 009A                vscp_handleProtocolEvent@k 0093  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 5080  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 0078                                  postdec1 000FE5  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                 __size_of_sendTempEvent 006C                           _vscp_setUserID 522C  
                                postinc0 000FEE                                  postinc2 000FDE  
                         ??i1_ConvertADC 0001                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 5312              _vscp_writeNicknamePermanent 5300  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 42FA  
                 __end_of_vscp_getUserID 52B4             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 4D56  
                         _vscp_probe_cnt 0050                      __end_of_getCANFrame 4FDA  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 0086                 __size_of_vscp_readAppReg 07A0  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001C  
                       writeCoeffs2Ram@i 001F                         writeCoeffs2Ram@j 0021  
                            ___fldiv@exp 0032                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 017E                       _vscp_setSegmentCRC 52EE  
                      readEEPROM@address 0016                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 0091                  __end_of_ECANSendMessage 377C  
                      vscp_readStdReg@rv 002A                              ___lbmod@rem 0011  
                            ___flmul@exp 003B                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 3ABE                      _getCalibrationValue 4C7E  
                            ?_readEEPROM 0016                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 50A8                               _vscp_error 537A  
                   _vscp_doOneSecondWork 4BE8                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0112                   __end_of_vscp_setUserID 5244  
               __size_of_doOneSecondWork 0420                   vscp_sendHeartBeat@zone 0045  
                   __end_of_setEventData 445C                           ?_sendVSCPFrame 0060  
                         __end_of___flge 4B9C                     __size_of_writeEEPROM 0026  
                         __end_of___wmul 4F6E                          ?_vscp_getUserID 0001  
                         __end_of_doWork 307A             __end_of_vscp_getMinorVersion 5390  
                            _WriteTimer0 5312                     _vscp_getMajorVersion 5390  
                     __end_of_ConvertADC 5382                     ?_getCalibrationValue 001A  
                   ??_vscp_setSegmentCRC 0011                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 0089  
                              ___DCDelay 0193                              __end_ofPL10 2B80  
                            __end_ofPL20 2BC0                              __end_ofPL12 2B96  
                      ?_vscp_writeAppReg 0023                              __end_ofPL30 2BEE  
                            __end_ofPL22 3BFC                              __end_ofPL14 3BEC  
                            __end_ofPL40 2114                              __end_ofPL32 4DE4  
                            __end_ofPL24 2100                              __end_ofPL16 2BA6  
                            __end_ofPL50 3B18                              __end_ofPL42 3AF2  
                            __end_ofPL34 360A                              __end_ofPL26 3C0E  
                            __end_ofPL18 3ACC                              __end_ofPL60 2C22  
                            __end_ofPL52 2C12                              __end_ofPL44 3B06  
                            __end_ofPL36 3AE0                              __end_ofPL28 2BD8  
                            __end_ofPL70 48F6                              __end_ofPL62 3FFC  
                            __end_ofPL54 38D8                              __end_ofPL46 3C22  
                            __end_ofPL38 42FA                              __end_ofPL80 3C2C  
                            __end_ofPL72 400A                              __end_ofPL64 1368  
                            __end_ofPL56 308C                              __end_ofPL48 2C00  
                            __end_ofPL90 212C                              __end_ofPL82 3616  
                            __end_ofPL74 2122                              __end_ofPL66 3294  
                            __end_ofPL58 4F7E                              __end_ofPL84 4246  
                            __end_ofPL76 2C3E                              __end_ofPL68 2C30  
                            __end_ofPL86 2C52                              __end_ofPL78 2C4C  
                            __end_ofPL88 2C58                      start_initialization 4DE4  
                             eval_poly@d 007B                               eval_poly@n 007C  
                             eval_poly@x 0077                               ldexp@value 0083  
        __size_of_vscp_handleSetNickname 0024                              __end_of_exp 3478  
                            __end_of_log 39FA                       ??_vscp_writeAppReg 0024  
                          _sendTempEvent 487C                        ?_vscp_writeStdReg 001B  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 001C  
                     _vscp_getFamilyCode 5354                      __end_of_handle_sync 47FE  
                doOneSecondWork@setpoint 008E                           ??__CANIDToRegs 0015  
                     _vscp_getFamilyType 534A                               frexp@value 000E  
                    sendVSCPFrame@nodeid 0063                         ?_writeCoeffs2Ram 0001  
                      _vscp_readRegister 51E0                     Celsius2Fahrenheit@tc 0077  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 0090  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 001E  
                    ?_vscp_getFamilyCode 000E                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 20E8                          ?_vscp_setUserID 0011  
                    ?_vscp_getFamilyType 000E                    __size_of_init_app_ram 0038  
               ?_vscp_handleDropNickname 0001                   getCalibrationValue@cal 001F  
                      ??_vscp_getSubzone 001A                                 ??___flge 0016  
               __end_of__ECANPointBuffer 49E4                        __CANIDToRegs@type 0014  
                            _getCANFrame 4FAE                                 ??___wmul 0012  
                               ??_doWork 0097                       _vscp_getBufferSize 5388  
            vscp_handleProtocolEvent@len 008D              vscp_handleProtocolEvent@pos 008B  
             __end_of_ECANReceiveMessage 3286                      ??_vscp_readRegister 002C  
         __size_of_vscp_goBootloaderMode 0018                    ?_vscp_getMajorVersion 0001  
                  ??_getCalibrationValue 001C                    __end_ofi1_WriteTimer0 5336  
          __end_of_vscp_goBootloaderMode 5274                     _vscp_handleHeartbeat 4E26  
                     __end_of_OpenTimer0 51E0                        __size_of___altofl 0048  
                      __size_of___flpack 00B0                                ___asfladd 4AB4  
                    ?_vscp_getBufferSize 0001                        __size_of___awtofl 003A  
                    __size_of_readEEPROM 0014                                ___asfldiv 4C34  
                            __pbssBIGRAM 0194                                ___asflmul 4B9C  
                              ___asflsub 4B02             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 0012                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0046                     ??_vscp_getFamilyType 0012  
                      __size_of___lwtofl 002A                          __IT_SAVE_STATUS 0115  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 015F                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004A              __size_of_Celsius2Fahrenheit 0074  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0048  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 5386                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 001A                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 51FA                             _init_app_ram 4D9E  
                   getCalibrationValue@i 0021                              _doWork$2276 0167  
                            _doWork$2277 016B                              _doWork$2278 016F  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 018A  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 001B  
                   ??_vscp_getBufferSize 000E                             _current_temp 00A9  
                              __pnvBANK1 0193                            __IT_SAVE_WREG 0116  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 51FA  
                 _vscp_handleSetNickname 5118            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 46E6  
                               ?___aldiv 006E                                 ?___fladd 0068  
                               ?___fldiv 001E                                __ptext100 5324  
                              __ptext101 5382                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 0060                                 ?___flsub 0077  
                               ?___fltol 0042                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 001A                              __pintcodelo 0018  
                      ??_doOneSecondWork 0086                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1156 008F                  vscp_readStdReg@idx_1140 0029  
             vscp_setManufacturerId@data 0011                             _sendCANFrame 4D56  
                            __smallconst 0600                               ?___asfladd 0077  
                      WriteTimer0@timer0 000E                               ?___asfldiv 0034  
                             ?___asflmul 0042                               ?___asflsub 007F  
                     _vscp_getSegmentCRC 5368                           ??_vscp_getGUID 001A  
                              _eval_poly 4246                              _handle_sync 477C  
                         ??_vscp_getZone 001A           __end_of_vscp_getManufacturerId 52A0  
         __end_of_vscp_setManufacturerId 522C                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1155 008E                           __size_of_floor 00FA  
                         __size_of_ldexp 00A4                           ??_vscp_setGUID 0012  
                         __size_of_frexp 007E                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 000E                         _vscp_configtimer 0110  
                        ___aldiv@divisor 0072                          ___aldiv@counter 0076  
                         ___wmul@product 0014                   ??_vscp_doOneSecondWork 007F  
                 sendVSCPFrame@vscpclass 0060                            OpenADC@config 0012  
                   _vscp_getMinorVersion 538E                                _sendTimer 010E  
                               _PIE1bits 000F9D                                _low_alarm 00B9  
                  __size_of_setEventData 00B0                   __end_of_ECANInitialize 477C  
                               i1u720_20 010C                                 i1u712_20 003C  
                               i1u720_21 010A                                 i1u712_21 003A  
                               i1u721_20 014A                                 i1u713_20 007E  
                               i1u721_21 0148                                 i1u713_21 007C  
                               i1u722_20 0188                                 i1u714_20 0096  
                               i1u722_21 0186                                 i1u714_21 0094  
                               i1u723_20 01C6                                 i1u715_20 00A0  
                               i1u723_21 01C4                                 i1u715_21 009E  
                               i1u724_20 0204                                 i1u716_20 00A8  
                               i1u724_21 0202                                 i1u716_21 00A6  
                               i1u725_20 0242                                 i1u717_20 00BC  
                               i1u725_21 0240                                 i1u717_21 00BA  
                               i1u726_20 0252                                 i1u718_20 00C6  
                               i1u726_21 0250                                 i1u718_21 00C4  
                               i1u719_20 00D2                                 i1u719_21 00D0  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 5058                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 001A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 3BD8  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 000E  
                           __RegsToCANID 39FA                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0084              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 0077                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 4D0E                                _vscp_imsg 00BF  
                              _vscp_hour 00BB                                _vscp_omsg 00CD  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 05E0  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 43AC               __size_of_vscp_readRegister 001A  
                               ___DCByte 00B6                        _measurement_clock 0106  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 0018  
               __size_of_init_app_eeprom 05C8             __end_of_vscp_restoreDefaults 537A  
                              frexp@eptr 0012                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                                 __Hrparam 0000  
                   ECANReceiveMessage@id 001A                             _seconds_temp 0100  
            __size_of_vscp_sendHeartBeat 0026                         __size_of_OpenADC 005C  
                       ??_vscp_getUserID 001A                          _vscp_getMDF_URL 5244  
                               __Lrparam 0000                         __CANIDToRegs@val 0010  
                       __CANIDToRegs@ptr 000E                         __size_of___aldiv 00BC  
                       __size_of___fladd 014A                         __size_of___fldiv 00A8  
                       __size_of___flneg 0024                         _vscp_initledfunc 004C  
                       __size_of___lbmod 0028                         __size_of___flmul 00AA  
                 ??_vscp_handleHeartbeat 001A                         __size_of___flsub 003C  
                       __size_of___fltol 009E                                 ___altofl 4CC6  
                               ___flpack 418A                         getCANFrame@flags 0023  
                           ?_WriteTimer0 000E                                 ___awtofl 4EDC  
                       getCANFrame@pdata 0021                                 ___lwtofl 4FDA  
                         sendTempEvent@i 0085                  __size_of_Celsius2Kelvin 0036  
                            ??___asfladd 0042                              ??___asfldiv 003A  
                            ??___asflmul 0046                                 _exp$2282 0090  
                            ??___asflsub 0042                       __end_of_readEEPROM 52DC  
                  __size_ofi1_ConvertADC 0004                               ?_vscp_init 0001  
                               __ptext10 4504                                 __ptext11 4246  
                               __ptext20 445C                                 __ptext12 3E48  
                               __ptext21 4BE8                                 __ptext13 4648  
                               __ptext30 49E4                                 __ptext22 50A8  
                               __ptext14 47FE                                 __ptext31 377C  
                               __ptext23 5336                                 __ptext15 4B50  
                               __ptext40 522C                                 __ptext32 4F16  
                               __ptext24 5340                                 __ptext16 4CC6  
                               __ptext41 5182                                 __ptext33 1B08  
                               __ptext25 26F4                                 __ptext17 4B02  
                               __ptext50 5388                                 __ptext42 066E  
                               __ptext34 5058                                 __ptext26 537A  
                               __ptext18 4E64                                 __ptext51 538A  
                               __ptext43 45A8                                 __ptext35 5160  
                               __ptext27 477C                                 __ptext19 4B9C  
                               __ptext60 4F7E                                 __ptext52 528C  
                               __ptext44 4F4C                                 __ptext36 3D3E  
                               __ptext28 487C                                 __ptext61 4D0E  
                               __ptext53 52A0                                 __ptext45 51E0  
                               __ptext37 5372                                 __ptext29 43AC  
                               __ptext70 5080                                 __ptext62 535E  
                               __ptext54 5244                                 __ptext46 3478  
                               __ptext38 212C                                 __ptext71 42FA  
                               __ptext63 52C8                                 __ptext55 52B4  
                               __ptext47 534A                                 __ptext39 5214  
                               __ptext80 496E                                 __ptext72 4D56  
                               __ptext64 5118                                 __ptext56 538C  
                               __ptext48 5354                                 __ptext81 513C  
                               __ptext73 3616                                 __ptext65 4E26  
                               __ptext57 538E                                 __ptext49 5386  
                               __ptext90 4A58                                 __ptext82 52DC  
                               __ptext74 3B18                                 __ptext66 525C  
                               __ptext58 5390                                 __ptext91 51C2  
                               __ptext83 52EE                                 __ptext75 502E  
                               __ptext67 51FA                                 __ptext59 5004  
                               __ptext92 4D9E                                 __ptext84 5368  
                               __ptext76 48F6                                 __ptext68 400A  
                               __ptext93 537E                                 __ptext85 5300  
                               __ptext77 4FAE                                 __ptext69 51A4  
                               __ptext94 5312                                 __ptext86 50CE  
                               __ptext78 308C                                 __ptext95 4EDC  
                               __ptext87 4EA0                                 __ptext79 39FA  
                               __ptext96 418A                                 __ptext88 46E6  
                               __ptext97 3F42                                 __ptext89 5274  
                               __ptext98 1368           vscp_goBootloaderMode@algorithm 0011  
              vscp_sendHeartBeat@subzone 0044                            ?_getVSCPFrame 0024  
                       ??_vscp_sendEvent 0043                          _vscp_getSubzone 5336  
                       ??_vscp_setUserID 0012                            __size_of_main 0112  
                          __size_of_init 003C                __size_of_vscp_writeAppReg 0CEA  
                    _vscp_check_pstorage 513C                            init_app_ram@i 000E  
         vscp_handleProtocolEvent@i_1154 0094           vscp_handleProtocolEvent@i_1157 0098  
         vscp_handleProtocolEvent@i_1165 0092                         doOneSecondWork@i 0090  
                   __end_of_vscp_getGUID 52C8                            ??_writeEEPROM 0011  
              __size_of_vscp_writeStdReg 010A                      ECANSendMessage@data 001C  
               ECANSendMessage@tempBSEL0 0035                             ?_getCANFrame 0020  
                    ECANSendMessage@mode 0032                     __end_of_vscp_getZone 534A  
                    ECANSendMessage@temp 0038                        ?__ECANPointBuffer 000E  
                      vscp_setUserID@idx 0012                     __end_of_vscp_setGUID 51A4  
                     vscp_readAppReg@reg 001B                       vscp_readAppReg@pos 001A  
                           i1_ConvertADC 5382                         vscp_sendEvent@rv 0043  
                     ??__ECANPointBuffer 0011           vscp_handleProtocolEvent@offset 008A  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 0012  
                    _vscp_setControlByte 52DC                                 exp@coeff 0620  
                  ___flmul@f3_as_product 003C                                 log@coeff 0648  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 1368  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
                            ??_eval_poly 007E             ??_vscp_readNicknamePermanent 001A  
                    ECANReceiveMessage@i 001B                          _vscp_guid_reset 004B  
                        _vscp_readStdReg 3478             vscp_handleDropNickname@bytes 001A  
             __end_of_vscp_newNodeOnline 502E                       _ECANReceiveMessage 308C  
                         ??_getVSCPFrame 0029                          _vscp_initbtncnt 00BC  
                        sendVSCPFrame@id 007B                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 525C                     ?_vscp_setControlByte 0001  
                          _timeout_clock 010A                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 00BE                             handle_sync@i 0088  
                        _doOneSecondWork 26F4                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0011              __end_of_getCalibrationValue 4CC6  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0011  
                  __size_of__CANIDToRegs 00C0                           readEEPROM@data 0019  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 538C              _vscp_getBootLoaderAlgorithm 538A  
       __size_of_interrupt_at_low_vector 02A2                   ECANSendMessage@dataLen 001D  
                    __end_of_writeEEPROM 50F4                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 0018                    ??_vscp_check_pstorage 001A  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 525C  
             __end_of_Celsius2Fahrenheit 4A58             __end_of_ECANSetOperationMode 528C  
                   _vscp_restoreDefaults 5372              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 001A                  __end_of_vscp_getSubzone 5340  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 0077                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 5182                       __end_of_vscp_error 537E  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 00B7  
         __end_of_vscp_handleSetNickname 513C       vscp_handleProtocolEvent@bytes_1161 0096  
                  ??_vscp_setControlByte 0011                     vscp_readRegister@reg 002C  
                           ___fladd@exp1 0076                             ___fladd@exp2 0075  
                           ___fladd@sign 0074                             __CANIDToRegs 3B18  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 0086  
                          ___asfladd@f1p 0077              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 0079                 __size_of_ECANSendMessage 0166  
                           ___asfldiv@f2 0036  



Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Nov 26 10:51:45 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   120                           	psect	pa_nodes,global,class=CODE,delta=1
   121  0000                     tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           prodh	equ	0xFF4
   125                           prodl	equ	0xFF3
   126                           intcon	equ	0xFF2
   127                           wreg	equ	0xFE8
   128                           indf1	equ	0xFE7
   129                           fsr1h	equ	0xFE2
   130                           fsr1l	equ	0xFE1
   131                           indf2	equ	0xFDF
   132                           postinc2	equ	0xFDE
   133                           postdec2	equ	0xFDD
   134                           plusw2	equ	0xFDB
   135                           fsr2h	equ	0xFDA
   136                           fsr2l	equ	0xFD9
   137                           status	equ	0xFD8
   138                           
   139                           	psect	smallconst
   140  000600                     __psmallconst:
   141                           	opt stack 0
   142  000600                     _vscp_deviceURL:
   143                           	opt stack 0
   144  000600  77                 	db	119
   145  000601  77                 	db	119
   146  000602  77                 	db	119
   147  000603  2E                 	db	46
   148  000604  65                 	db	101
   149  000605  75                 	db	117
   150  000606  72                 	db	114
   151  000607  6F                 	db	111
   152  000608  73                 	db	115
   153  000609  6F                 	db	111
   154  00060A  75                 	db	117
   155  00060B  72                 	db	114
   156  00060C  63                 	db	99
   157  00060D  65                 	db	101
   158  00060E  2E                 	db	46
   159  00060F  73                 	db	115
   160  000610  65                 	db	101
   161  000611  2F                 	db	47
   162  000612  6E                 	db	110
   163  000613  74                 	db	116
   164  000614  63                 	db	99
   165  000615  31                 	db	49
   166  000616  30                 	db	48
   167  000617  4B                 	db	75
   168  000618  41                 	db	65
   169  000619  5F                 	db	95
   170  00061A  33                 	db	51
   171  00061B  2E                 	db	46
   172  00061C  78                 	db	120
   173  00061D  6D                 	db	109
   174  00061E  6C                 	db	108
   175  00061F  00                 	db	0
   176  000620                     __end_of_vscp_deviceURL:
   177                           	opt stack 0
   178  000620                     exp@coeff:
   179                           	opt stack 0
   180  000620  0000               	dw	0
   181  000622  3F80               	dw	16256
   182  000624  7218               	dw	29208
   183  000626  3F31               	dw	16177
   184  000628  FDF0               	dw	65008
   185  00062A  3E75               	dw	15989
   186  00062C  5847               	dw	22599
   187  00062E  3D63               	dw	15715
   188  000630  9558               	dw	38232
   189  000632  3C1D               	dw	15389
   190  000634  C482               	dw	50306
   191  000636  3AAE               	dw	15022
   192  000638  78A8               	dw	30888
   193  00063A  3921               	dw	14625
   194  00063C  93EF               	dw	37871
   195  00063E  3780               	dw	14208
   196  000640  92A0               	dw	37536
   197  000642  35A7               	dw	13735
   198  000644  5646               	dw	22086
   199  000646  3415               	dw	13333
   200  000648                     __end_ofexp@coeff:
   201                           	opt stack 0
   202  000648                     log@coeff:
   203                           	opt stack 0
   204  000648  0000               	dw	0
   205  00064A  0000               	dw	0
   206  00064C  FFC4               	dw	65476
   207  00064E  3F7F               	dw	16255
   208  000650  EF80               	dw	61312
   209  000652  BEFF               	dw	48895
   210  000654  E190               	dw	57744
   211  000656  3EA9               	dw	16041
   212  000658  82EC               	dw	33516
   213  00065A  BE76               	dw	48758
   214  00065C  AD82               	dw	44418
   215  00065E  3E2B               	dw	15915
   216  000660  3C0E               	dw	15374
   217  000662  BDC3               	dw	48579
   218  000664  D187               	dw	53639
   219  000666  3D13               	dw	15635
   220  000668  7841               	dw	30785
   221  00066A  BBD3               	dw	48083
   222  00066C                     __end_oflog@coeff:
   223                           	opt stack 0
   224  0000                     _ADCON0	set	4034
   225  0000                     _ADCON0bits	set	4034
   226  0000                     _ADCON1	set	4033
   227  0000                     _ADCON2	set	4032
   228  0000                     _ADRESH	set	4036
   229  0000                     _ADRESL	set	4035
   230  0000                     _BRGCON1	set	3952
   231  0000                     _BRGCON2	set	3953
   232  0000                     _BRGCON3	set	3954
   233  0000                     _BSEL0	set	3576
   234  0000                     _CANCON	set	3951
   235  0000                     _CIOCON	set	3955
   236  0000                     _ECANCON	set	3959
   237  0000                     _EEADR	set	4009
   238  0000                     _EECON1bits	set	4006
   239  0000                     _EECON2	set	4007
   240  0000                     _EEDATA	set	4008
   241  0000                     _INTCONbits	set	4082
   242  0000                     _MSEL0	set	3568
   243  0000                     _MSEL1	set	3569
   244  0000                     _MSEL2	set	3570
   245  0000                     _PIE1bits	set	3997
   246  0000                     _PIR1bits	set	3998
   247  0000                     _PIR2bits	set	4001
   248  0000                     _PORTC	set	3970
   249  0000                     _RXB1CONbits	set	3920
   250  0000                     _RXF0EIDH	set	3842
   251  0000                     _RXF0EIDL	set	3843
   252  0000                     _RXF0SIDH	set	3840
   253  0000                     _RXF0SIDL	set	3841
   254  0000                     _RXF1EIDH	set	3846
   255  0000                     _RXF1EIDL	set	3847
   256  0000                     _RXF1SIDH	set	3844
   257  0000                     _RXF1SIDL	set	3845
   258  0000                     _RXFBCON0	set	3552
   259  0000                     _RXFBCON1	set	3553
   260  0000                     _RXFBCON2	set	3554
   261  0000                     _RXFBCON3	set	3555
   262  0000                     _RXFBCON4	set	3556
   263  0000                     _RXFBCON5	set	3557
   264  0000                     _RXFBCON6	set	3558
   265  0000                     _RXFBCON7	set	3559
   266  0000                     _RXFCON0	set	3540
   267  0000                     _RXFCON1	set	3541
   268  0000                     _RXM0EIDH	set	3866
   269  0000                     _RXM0EIDL	set	3867
   270  0000                     _RXM0SIDH	set	3864
   271  0000                     _RXM0SIDL	set	3865
   272  0000                     _RXM1EIDH	set	3870
   273  0000                     _RXM1EIDL	set	3871
   274  0000                     _RXM1SIDH	set	3868
   275  0000                     _RXM1SIDL	set	3869
   276  0000                     _T0CON	set	4053
   277  0000                     _T0CONbits	set	4053
   278  0000                     _TMR0H	set	4055
   279  0000                     _TMR0L	set	4054
   280  0000                     _TRISA	set	3986
   281  0000                     _TRISB	set	3987
   282  0000                     _TRISC	set	3988
   283  0000                     _B0RXFUL	set	28935
   284  0000                     _B0TXEN	set	28610
   285  0000                     _B1RXFUL	set	29063
   286  0000                     _B1TXEN	set	28611
   287  0000                     _B2RXFUL	set	29191
   288  0000                     _B2TXEN	set	28612
   289  0000                     _B3RXFUL	set	29319
   290  0000                     _B3TXEN	set	28613
   291  0000                     _B4RXFUL	set	29447
   292  0000                     _B4TXEN	set	28614
   293  0000                     _B5RXFUL	set	29575
   294  0000                     _B5TXEN	set	28615
   295  0000                     _FIFOEMPTY	set	31655
   296  0000                     _IRXIF	set	32039
   297  0000                     _MDSEL0	set	31678
   298  0000                     _MDSEL1	set	31679
   299  0000                     _RXB0FILHIT0	set	31488
   300  0000                     _RXB0FUL	set	31495
   301  0000                     _RXB0IF	set	32032
   302  0000                     _RXB0OVFL	set	31655
   303  0000                     _RXB1IF	set	32033
   304  0000                     _RXB1OVFL	set	31654
   305  0000                     _RXM0EXIDM	set	30923
   306  0000                     _RXM1EXIDEN	set	30955
   307  0000                     _B0CON	set	3616
   308  0000                     _B1CON	set	3632
   309  0000                     _B2CON	set	3648
   310  0000                     _B3CON	set	3664
   311  0000                     _B4CON	set	3680
   312  0000                     _B5CON	set	3696
   313  0000                     _RXB0CON	set	3936
   314  0000                     _RXB1CON	set	3920
   315  0000                     _TXB0CON	set	3904
   316  0000                     _TXB1CON	set	3888
   317  0000                     _TXB2CON	set	3872
   318  00066C  00                 	db	0	; dummy byte at the end
   319  0000                     tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           prodh	equ	0xFF4
   323                           prodl	equ	0xFF3
   324                           intcon	equ	0xFF2
   325                           wreg	equ	0xFE8
   326                           indf1	equ	0xFE7
   327                           fsr1h	equ	0xFE2
   328                           fsr1l	equ	0xFE1
   329                           indf2	equ	0xFDF
   330                           postinc2	equ	0xFDE
   331                           postdec2	equ	0xFDD
   332                           plusw2	equ	0xFDB
   333                           fsr2h	equ	0xFDA
   334                           fsr2l	equ	0xFD9
   335                           status	equ	0xFD8
   336                           
   337                           	psect	nvBANK1
   338  0001AA                     __pnvBANK1:
   339                           	opt stack 0
   340  0001AA                     ___DCDelay:
   341                           	opt stack 0
   342  0001AA                     	ds	1
   343                           
   344                           ; #config settings
   345  0000                     tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           prodh	equ	0xFF4
   349                           prodl	equ	0xFF3
   350                           intcon	equ	0xFF2
   351                           wreg	equ	0xFE8
   352                           indf1	equ	0xFE7
   353                           fsr1h	equ	0xFE2
   354                           fsr1l	equ	0xFE1
   355                           indf2	equ	0xFDF
   356                           postinc2	equ	0xFDE
   357                           postdec2	equ	0xFDD
   358                           plusw2	equ	0xFDB
   359                           fsr2h	equ	0xFDA
   360                           fsr2l	equ	0xFD9
   361                           status	equ	0xFD8
   362                           
   363                           	psect	cinit
   364  004F38                     __pcinit:
   365                           	opt stack 0
   366  004F38                     start_initialization:
   367                           	opt stack 0
   368  004F38                     __initialization:
   369                           	opt stack 0
   370                           
   371                           ; Clear objects allocated to BIGRAM (960 bytes)
   372  004F38  EE01  F0AB         	lfsr	0,__pbssBIGRAM
   373  004F3C  EE13 F0C0          	lfsr	1,960
   374  004F40                     clear_0:
   375  004F40  6AEE               	clrf	postinc0,c
   376  004F42  50E5               	movf	postdec1,w,c
   377  004F44  50E1               	movf	fsr1l,w,c
   378  004F46  E1FC               	bnz	clear_0
   379  004F48  50E2               	movf	fsr1h,w,c
   380  004F4A  E1FA               	bnz	clear_0
   381                           
   382                           ; Clear objects allocated to BANK1 (118 bytes)
   383  004F4C  EE01  F000         	lfsr	0,__pbssBANK1
   384  004F50  0E76               	movlw	118
   385  004F52                     clear_1:
   386  004F52  6AEE               	clrf	postinc0,c
   387  004F54  06E8               	decf	wreg,f,c
   388  004F56  E1FD               	bnz	clear_1
   389                           
   390                           ; Clear objects allocated to BANK0 (26 bytes)
   391  004F58  EE00  F0BF         	lfsr	0,__pbssBANK0
   392  004F5C  0E1A               	movlw	26
   393  004F5E                     clear_2:
   394  004F5E  6AEE               	clrf	postinc0,c
   395  004F60  06E8               	decf	wreg,f,c
   396  004F62  E1FD               	bnz	clear_2
   397                           
   398                           ; Clear objects allocated to COMRAM (13 bytes)
   399  004F64  EE00  F046         	lfsr	0,__pbssCOMRAM
   400  004F68  0E0D               	movlw	13
   401  004F6A                     clear_3:
   402  004F6A  6AEE               	clrf	postinc0,c
   403  004F6C  06E8               	decf	wreg,f,c
   404  004F6E  E1FD               	bnz	clear_3
   405  004F70                     end_of_initialization:
   406                           	opt stack 0
   407  004F70                     __end_of__initialization:
   408                           	opt stack 0
   409  004F70  0E00               	movlw	low (__Lmediumconst shr (0+16))
   410  004F72  6EF8               	movwf	tblptru,c
   411  004F74  0100               	movlb	0
   412  004F76  EF1D  F01E         	goto	_main	;jump to C main() function
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           prodh	equ	0xFF4
   418                           prodl	equ	0xFF3
   419                           intcon	equ	0xFF2
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           indf1	equ	0xFE7
   423                           postdec1	equ	0xFE5
   424                           fsr1h	equ	0xFE2
   425                           fsr1l	equ	0xFE1
   426                           indf2	equ	0xFDF
   427                           postinc2	equ	0xFDE
   428                           postdec2	equ	0xFDD
   429                           plusw2	equ	0xFDB
   430                           fsr2h	equ	0xFDA
   431                           fsr2l	equ	0xFD9
   432                           status	equ	0xFD8
   433                           
   434                           	psect	bssCOMRAM
   435  000046                     __pbssCOMRAM:
   436                           	opt stack 0
   437  000046                     _vscp_page_select:
   438                           	opt stack 0
   439  000046                     	ds	2
   440  000048                     __ECANRxFilterHitInfo:
   441                           	opt stack 0
   442  000048                     	ds	1
   443  000049                     _adc_series_counter:
   444                           	opt stack 0
   445  000049                     	ds	1
   446  00004A                     _vscp_alarmstatus:
   447                           	opt stack 0
   448  00004A                     	ds	1
   449  00004B                     _vscp_guid_reset:
   450                           	opt stack 0
   451  00004B                     	ds	1
   452  00004C                     _vscp_initledfunc:
   453                           	opt stack 0
   454  00004C                     	ds	1
   455  00004D                     _vscp_minute:
   456                           	opt stack 0
   457  00004D                     	ds	1
   458  00004E                     _vscp_node_substate:
   459                           	opt stack 0
   460  00004E                     	ds	1
   461  00004F                     _vscp_probe_address:
   462                           	opt stack 0
   463  00004F                     	ds	1
   464  000050                     _vscp_probe_cnt:
   465                           	opt stack 0
   466  000050                     	ds	1
   467  000051                     _vscp_second:
   468                           	opt stack 0
   469  000051                     	ds	1
   470  000052                     _vscp_statuscnt:
   471                           	opt stack 0
   472  000052                     	ds	1
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           prodh	equ	0xFF4
   478                           prodl	equ	0xFF3
   479                           intcon	equ	0xFF2
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           indf1	equ	0xFE7
   483                           postdec1	equ	0xFE5
   484                           fsr1h	equ	0xFE2
   485                           fsr1l	equ	0xFE1
   486                           indf2	equ	0xFDF
   487                           postinc2	equ	0xFDE
   488                           postdec2	equ	0xFDD
   489                           plusw2	equ	0xFDB
   490                           fsr2h	equ	0xFDA
   491                           fsr2l	equ	0xFD9
   492                           status	equ	0xFD8
   493                           
   494                           	psect	bssBANK0
   495  0000BF                     __pbssBANK0:
   496                           	opt stack 0
   497  0000BF                     __IT_INT_MASK:
   498                           	opt stack 0
   499  0000BF                     	ds	1
   500  0000C0                     __IT_SAVE_BSR:
   501                           	opt stack 0
   502  0000C0                     	ds	1
   503  0000C1                     __IT_SAVE_STATUS:
   504                           	opt stack 0
   505  0000C1                     	ds	1
   506  0000C2                     __IT_SAVE_WREG:
   507                           	opt stack 0
   508  0000C2                     	ds	1
   509  0000C3                     ___DCByte:
   510                           	opt stack 0
   511  0000C3                     	ds	1
   512  0000C4                     _adc_conversion_flags:
   513                           	opt stack 0
   514  0000C4                     	ds	1
   515  0000C5                     _high_alarm:
   516                           	opt stack 0
   517  0000C5                     	ds	1
   518  0000C6                     _low_alarm:
   519                           	opt stack 0
   520  0000C6                     	ds	1
   521  0000C7                     _seconds:
   522                           	opt stack 0
   523  0000C7                     	ds	1
   524  0000C8                     _vscp_hour:
   525                           	opt stack 0
   526  0000C8                     	ds	1
   527  0000C9                     _vscp_initbtncnt:
   528                           	opt stack 0
   529  0000C9                     	ds	1
   530  0000CA                     _vscp_nickname:
   531                           	opt stack 0
   532  0000CA                     	ds	1
   533  0000CB                     _vscp_node_state:
   534                           	opt stack 0
   535  0000CB                     	ds	1
   536  0000CC                     _vscp_omsg:
   537                           	opt stack 0
   538  0000CC                     	ds	13
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           prodh	equ	0xFF4
   544                           prodl	equ	0xFF3
   545                           intcon	equ	0xFF2
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           indf1	equ	0xFE7
   549                           postdec1	equ	0xFE5
   550                           fsr1h	equ	0xFE2
   551                           fsr1l	equ	0xFE1
   552                           indf2	equ	0xFDF
   553                           postinc2	equ	0xFDE
   554                           postdec2	equ	0xFDD
   555                           plusw2	equ	0xFDB
   556                           fsr2h	equ	0xFDA
   557                           fsr2l	equ	0xFD9
   558                           status	equ	0xFD8
   559                           
   560                           	psect	bssBANK1
   561  000100                     __pbssBANK1:
   562                           	opt stack 0
   563  000100                     _current_temp:
   564                           	opt stack 0
   565  000100                     	ds	12
   566  00010C                     _seconds_temp:
   567                           	opt stack 0
   568  00010C                     	ds	6
   569  000112                     _measurement_clock:
   570                           	opt stack 0
   571  000112                     	ds	4
   572  000116                     _timeout_clock:
   573                           	opt stack 0
   574  000116                     	ds	4
   575  00011A                     _sendTimer:
   576                           	opt stack 0
   577  00011A                     	ds	2
   578  00011C                     _vscp_configtimer:
   579                           	opt stack 0
   580  00011C                     	ds	2
   581  00011E                     _vscp_timer:
   582                           	opt stack 0
   583  00011E                     	ds	2
   584  000120                     _sh_coefficients:
   585                           	opt stack 0
   586  000120                     	ds	72
   587  000168                     _vscp_imsg:
   588                           	opt stack 0
   589  000168                     	ds	14
   590                           tblptru	equ	0xFF8
   591                           tblptrh	equ	0xFF7
   592                           tblptrl	equ	0xFF6
   593                           tablat	equ	0xFF5
   594                           prodh	equ	0xFF4
   595                           prodl	equ	0xFF3
   596                           intcon	equ	0xFF2
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           indf1	equ	0xFE7
   600                           postdec1	equ	0xFE5
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           indf2	equ	0xFDF
   604                           postinc2	equ	0xFDE
   605                           postdec2	equ	0xFDD
   606                           plusw2	equ	0xFDB
   607                           fsr2h	equ	0xFDA
   608                           fsr2l	equ	0xFD9
   609                           status	equ	0xFD8
   610                           
   611                           	psect	bssBIGRAM
   612  0001AB                     __pbssBIGRAM:
   613                           	opt stack 0
   614  0001AB                     _adc:
   615                           	opt stack 0
   616  0001AB                     	ds	960
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           prodh	equ	0xFF4
   622                           prodl	equ	0xFF3
   623                           intcon	equ	0xFF2
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           indf1	equ	0xFE7
   627                           postdec1	equ	0xFE5
   628                           fsr1h	equ	0xFE2
   629                           fsr1l	equ	0xFE1
   630                           indf2	equ	0xFDF
   631                           postinc2	equ	0xFDE
   632                           postdec2	equ	0xFDD
   633                           plusw2	equ	0xFDB
   634                           fsr2h	equ	0xFDA
   635                           fsr2l	equ	0xFD9
   636                           status	equ	0xFD8
   637                           
   638                           	psect	cstackBANK1
   639  000176                     __pcstackBANK1:
   640                           	opt stack 0
   641  000176                     doWork@Rinf:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x0
   645  000176                     	ds	4
   646  00017A                     doWork@calVoltage:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x4
   650  00017A                     	ds	4
   651  00017E                     _doWork$2288:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x8
   655  00017E                     	ds	4
   656  000182                     _doWork$2289:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0xC
   660  000182                     	ds	4
   661  000186                     _doWork$2290:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x10
   665  000186                     	ds	16
   666  000196                     doWork@v:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x20
   670  000196                     	ds	4
   671  00019A                     doWork@B:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x24
   675  00019A                     	ds	2
   676  00019C                     doWork@resistance:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x26
   680  00019C                     	ds	4
   681  0001A0                     doWork@j:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x2A
   685  0001A0                     	ds	1
   686  0001A1                     doWork@avarage:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x2B
   690  0001A1                     	ds	4
   691  0001A5                     doWork@temp:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0x2F
   695  0001A5                     	ds	4
   696  0001A9                     doWork@i:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x33
   700  0001A9                     	ds	1
   701                           tblptru	equ	0xFF8
   702                           tblptrh	equ	0xFF7
   703                           tblptrl	equ	0xFF6
   704                           tablat	equ	0xFF5
   705                           prodh	equ	0xFF4
   706                           prodl	equ	0xFF3
   707                           intcon	equ	0xFF2
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           indf1	equ	0xFE7
   711                           postdec1	equ	0xFE5
   712                           fsr1h	equ	0xFE2
   713                           fsr1l	equ	0xFE1
   714                           indf2	equ	0xFDF
   715                           postinc2	equ	0xFDE
   716                           postdec2	equ	0xFDD
   717                           plusw2	equ	0xFDB
   718                           fsr2h	equ	0xFDA
   719                           fsr2l	equ	0xFD9
   720                           status	equ	0xFD8
   721                           
   722                           	psect	cstackBANK0
   723  000060                     __pcstackBANK0:
   724                           	opt stack 0
   725  000060                     ?_sendVSCPFrame:
   726                           	opt stack 0
   727  000060                     ?___fldiv:
   728                           	opt stack 0
   729  000060                     sendVSCPFrame@vscpclass:
   730                           	opt stack 0
   731  000060                     ___fldiv@f1:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0x0
   735  000060                     	ds	2
   736  000062                     sendVSCPFrame@vscptype:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x2
   740  000062                     	ds	1
   741  000063                     sendVSCPFrame@nodeid:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x3
   745  000063                     	ds	1
   746  000064                     sendVSCPFrame@priority:
   747                           	opt stack 0
   748  000064                     ___fldiv@f2:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x4
   752  000064                     	ds	1
   753  000065                     sendVSCPFrame@size:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x5
   757  000065                     	ds	1
   758  000066                     sendVSCPFrame@pData:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x6
   762  000066                     	ds	1
   763  000067                     ??_sendVSCPFrame:
   764                           
   765                           ; 0 bytes @ 0x7
   766  000067                     	ds	1
   767  000068                     ?___flmul:
   768                           	opt stack 0
   769  000068                     ?___asfldiv:
   770                           	opt stack 0
   771  000068                     ___asfldiv@f1p:
   772                           	opt stack 0
   773  000068                     ___flmul@f1:
   774                           	opt stack 0
   775                           
   776                           ; 4 bytes @ 0x8
   777  000068                     	ds	2
   778  00006A                     ___asfldiv@f2:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0xA
   782  00006A                     	ds	2
   783  00006C                     ___flmul@f2:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0xC
   787  00006C                     	ds	11
   788  000077                     ___flmul@exp:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x17
   792  000077                     	ds	1
   793  000078                     ___flmul@f3_as_product:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x18
   797  000078                     	ds	3
   798  00007B                     sendVSCPFrame@id:
   799                           	opt stack 0
   800                           
   801                           ; 4 bytes @ 0x1B
   802  00007B                     	ds	1
   803  00007C                     ___flmul@cntr:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x1C
   807  00007C                     	ds	1
   808  00007D                     ___flmul@sign:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x1D
   812  00007D                     	ds	1
   813  00007E                     ?_Celsius2Fahrenheit:
   814                           	opt stack 0
   815  00007E                     ?_eval_poly:
   816                           	opt stack 0
   817  00007E                     ?___asflmul:
   818                           	opt stack 0
   819  00007E                     ?___fltol:
   820                           	opt stack 0
   821  00007E                     Celsius2Fahrenheit@tc:
   822                           	opt stack 0
   823  00007E                     ___asflmul@multiplicand:
   824                           	opt stack 0
   825  00007E                     ___fltol@f1:
   826                           	opt stack 0
   827  00007E                     eval_poly@x:
   828                           	opt stack 0
   829                           
   830                           ; 4 bytes @ 0x1E
   831  00007E                     	ds	1
   832  00007F                     ??_vscp_handleProtocolEvent:
   833  00007F                     ??_vscp_doOneSecondWork:
   834                           
   835                           ; 0 bytes @ 0x1F
   836  00007F                     	ds	3
   837  000082                     ??___fltol:
   838  000082                     eval_poly@d:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x22
   842  000082                     	ds	1
   843  000083                     eval_poly@n:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x23
   847  000083                     	ds	2
   848  000085                     eval_poly@res:
   849                           	opt stack 0
   850                           
   851                           ; 4 bytes @ 0x25
   852  000085                     	ds	1
   853  000086                     ?_setEventData:
   854                           	opt stack 0
   855  000086                     ?___aldiv:
   856                           	opt stack 0
   857  000086                     setEventData@v:
   858                           	opt stack 0
   859  000086                     vscp_handleProtocolEvent@page_save:
   860                           	opt stack 0
   861  000086                     ___aldiv@dividend:
   862                           	opt stack 0
   863                           
   864                           ; 4 bytes @ 0x26
   865  000086                     	ds	2
   866  000088                     setEventData@unit:
   867                           	opt stack 0
   868  000088                     vscp_handleProtocolEvent@page_save_1174:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x28
   872  000088                     	ds	1
   873  000089                     ?_log:
   874                           	opt stack 0
   875  000089                     ?_ldexp:
   876                           	opt stack 0
   877  000089                     setEventData@newval:
   878                           	opt stack 0
   879  000089                     ldexp@value:
   880                           	opt stack 0
   881  000089                     log@x:
   882                           	opt stack 0
   883                           
   884                           ; 4 bytes @ 0x29
   885  000089                     	ds	1
   886  00008A                     vscp_handleProtocolEvent@offset:
   887                           	opt stack 0
   888  00008A                     ___aldiv@divisor:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x2A
   892  00008A                     	ds	1
   893  00008B                     vscp_handleProtocolEvent@pos:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x2B
   897  00008B                     	ds	1
   898  00008C                     vscp_handleProtocolEvent@bytes:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x2C
   902  00008C                     	ds	1
   903  00008D                     vscp_handleProtocolEvent@len:
   904                           	opt stack 0
   905  00008D                     setEventData@ival:
   906                           	opt stack 0
   907  00008D                     ldexp@newexp:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x2D
   911  00008D                     	ds	1
   912  00008E                     vscp_handleProtocolEvent@pos_1163:
   913                           	opt stack 0
   914  00008E                     ___aldiv@counter:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x2E
   918  00008E                     	ds	1
   919  00008F                     ??_ldexp:
   920  00008F                     sendTempEvent@i:
   921                           	opt stack 0
   922  00008F                     vscp_handleProtocolEvent@len_1164:
   923                           	opt stack 0
   924  00008F                     ___aldiv@sign:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x2F
   928  00008F                     	ds	1
   929  000090                     ??_handle_sync:
   930  000090                     ??_doOneSecondWork:
   931  000090                     vscp_handleProtocolEvent@bytes_this_time:
   932                           	opt stack 0
   933  000090                     ___aldiv@quotient:
   934                           	opt stack 0
   935                           
   936                           ; 4 bytes @ 0x30
   937  000090                     	ds	1
   938  000091                     vscp_handleProtocolEvent@cb:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x31
   942  000091                     	ds	1
   943  000092                     handle_sync@i:
   944                           	opt stack 0
   945  000092                     vscp_handleProtocolEvent@i_1173:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x32
   949  000092                     	ds	1
   950  000093                     vscp_handleProtocolEvent@k:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x33
   954  000093                     	ds	1
   955  000094                     ?___altofl:
   956                           	opt stack 0
   957  000094                     vscp_handleProtocolEvent@i_1162:
   958                           	opt stack 0
   959  000094                     ___altofl@c:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x34
   963  000094                     	ds	1
   964  000095                     vscp_handleProtocolEvent@byte:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x35
   968  000095                     	ds	1
   969  000096                     vscp_handleProtocolEvent@bytes_1169:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x36
   973  000096                     	ds	1
   974  000097                     doOneSecondWork@tmp:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x37
   978  000097                     	ds	1
   979  000098                     ?_floor:
   980                           	opt stack 0
   981  000098                     vscp_handleProtocolEvent@i_1165:
   982                           	opt stack 0
   983  000098                     doOneSecondWork@setpoint:
   984                           	opt stack 0
   985  000098                     floor@x:
   986                           	opt stack 0
   987                           
   988                           ; 4 bytes @ 0x38
   989  000098                     	ds	1
   990  000099                     vscp_handleProtocolEvent@i:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x39
   994  000099                     	ds	1
   995  00009A                     doOneSecondWork@i:
   996                           	opt stack 0
   997  00009A                     vscp_handleProtocolEvent@j:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x3A
  1001  00009A                     	ds	2
  1002  00009C                     floor@i:
  1003                           	opt stack 0
  1004                           
  1005                           ; 4 bytes @ 0x3C
  1006  00009C                     	ds	4
  1007  0000A0                     floor@expon:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x40
  1011  0000A0                     	ds	2
  1012  0000A2                     ?_exp:
  1013                           	opt stack 0
  1014  0000A2                     exp@x:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x42
  1018  0000A2                     	ds	4
  1019  0000A6                     _exp$2294:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x46
  1023  0000A6                     	ds	4
  1024  0000AA                     exp@exponent:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x4A
  1028  0000AA                     	ds	2
  1029  0000AC                     exp@sign:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x4C
  1033  0000AC                     	ds	1
  1034  0000AD                     ??_doWork:
  1035                           
  1036                           ; 0 bytes @ 0x4D
  1037  0000AD                     	ds	14
  1038  0000BB                     main@i:
  1039                           	opt stack 0
  1040                           
  1041                           ; 4 bytes @ 0x5B
  1042  0000BB                     	ds	4
  1043                           tblptru	equ	0xFF8
  1044                           tblptrh	equ	0xFF7
  1045                           tblptrl	equ	0xFF6
  1046                           tablat	equ	0xFF5
  1047                           prodh	equ	0xFF4
  1048                           prodl	equ	0xFF3
  1049                           intcon	equ	0xFF2
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           indf1	equ	0xFE7
  1053                           postdec1	equ	0xFE5
  1054                           fsr1h	equ	0xFE2
  1055                           fsr1l	equ	0xFE1
  1056                           indf2	equ	0xFDF
  1057                           postinc2	equ	0xFDE
  1058                           postdec2	equ	0xFDD
  1059                           plusw2	equ	0xFDB
  1060                           fsr2h	equ	0xFDA
  1061                           fsr2l	equ	0xFD9
  1062                           status	equ	0xFD8
  1063                           
  1064                           	psect	cstackCOMRAM
  1065  000001                     __pcstackCOMRAM:
  1066                           	opt stack 0
  1067  000001                     ?i1_WriteTimer0:
  1068                           	opt stack 0
  1069  000001                     i1WriteTimer0@timer0:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x0
  1073  000001                     	ds	2
  1074  000003                     i1WriteTimer0@timer:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x2
  1078  000003                     	ds	2
  1079  000005                     ??_interrupt_at_low_vector:
  1080                           
  1081                           ; 0 bytes @ 0x4
  1082  000005                     	ds	9
  1083  00000E                     ?_WriteTimer0:
  1084                           	opt stack 0
  1085  00000E                     ?_writeEEPROM:
  1086                           	opt stack 0
  1087  00000E                     ?_OpenADC:
  1088                           	opt stack 0
  1089  00000E                     ?__CANIDToRegs:
  1090                           	opt stack 0
  1091  00000E                     ?__RegsToCANID:
  1092                           	opt stack 0
  1093  00000E                     ??_vscp_getMDF_URL:
  1094  00000E                     ?___flge:
  1095                           	opt stack 0
  1096  00000E                     ?___lbmod:
  1097                           	opt stack 0
  1098  00000E                     ?__ECANPointBuffer:
  1099                           	opt stack 0
  1100  00000E                     ?___wmul:
  1101                           	opt stack 0
  1102  00000E                     ?___flpack:
  1103                           	opt stack 0
  1104  00000E                     ?_frexp:
  1105                           	opt stack 0
  1106  00000E                     ?_vscp_getFamilyCode:
  1107                           	opt stack 0
  1108  00000E                     ?_vscp_getFamilyType:
  1109                           	opt stack 0
  1110  00000E                     ?___flneg:
  1111                           	opt stack 0
  1112  00000E                     init_app_ram@i:
  1113                           	opt stack 0
  1114  00000E                     vscp_getMatrixInfo@pData:
  1115                           	opt stack 0
  1116  00000E                     ECANSetOperationMode@mode:
  1117                           	opt stack 0
  1118  00000E                     OpenADC@config2:
  1119                           	opt stack 0
  1120  00000E                     OpenTimer0@config:
  1121                           	opt stack 0
  1122  00000E                     ___lbmod@divisor:
  1123                           	opt stack 0
  1124  00000E                     __CANIDToRegs@ptr:
  1125                           	opt stack 0
  1126  00000E                     __RegsToCANID@ptr:
  1127                           	opt stack 0
  1128  00000E                     writeEEPROM@address:
  1129                           	opt stack 0
  1130  00000E                     WriteTimer0@timer0:
  1131                           	opt stack 0
  1132  00000E                     ___wmul@multiplier:
  1133                           	opt stack 0
  1134  00000E                     ___flpack@arg:
  1135                           	opt stack 0
  1136  00000E                     ___flge@ff1:
  1137                           	opt stack 0
  1138  00000E                     ___flneg@f1:
  1139                           	opt stack 0
  1140  00000E                     frexp@value:
  1141                           	opt stack 0
  1142                           
  1143                           ; 4 bytes @ 0xD
  1144  00000E                     	ds	1
  1145  00000F                     vscp_getMDF_URL@idx:
  1146                           	opt stack 0
  1147  00000F                     vscp_getMatrixInfo@i:
  1148                           	opt stack 0
  1149  00000F                     OpenADC@portconfig:
  1150                           	opt stack 0
  1151  00000F                     ___lbmod@dividend:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0xE
  1155  00000F                     	ds	1
  1156  000010                     ??_OpenADC:
  1157  000010                     __RegsToCANID@val:
  1158                           	opt stack 0
  1159  000010                     writeEEPROM@data:
  1160                           	opt stack 0
  1161  000010                     ___lbmod@counter:
  1162                           	opt stack 0
  1163  000010                     WriteTimer0@timer:
  1164                           	opt stack 0
  1165  000010                     ___wmul@multiplicand:
  1166                           	opt stack 0
  1167  000010                     __CANIDToRegs@val:
  1168                           	opt stack 0
  1169                           
  1170                           ; 4 bytes @ 0xF
  1171  000010                     	ds	1
  1172  000011                     ?_vscp_setGUID:
  1173                           	opt stack 0
  1174  000011                     ?_vscp_setUserID:
  1175                           	opt stack 0
  1176  000011                     ?_vscp_setManufacturerId:
  1177                           	opt stack 0
  1178  000011                     vscp_setGUID@data:
  1179                           	opt stack 0
  1180  000011                     vscp_setUserID@data:
  1181                           	opt stack 0
  1182  000011                     vscp_setManufacturerId@data:
  1183                           	opt stack 0
  1184  000011                     vscp_goBootloaderMode@algorithm:
  1185                           	opt stack 0
  1186  000011                     vscp_writeNicknamePermanent@nickname:
  1187                           	opt stack 0
  1188  000011                     vscp_setSegmentCRC@crc:
  1189                           	opt stack 0
  1190  000011                     vscp_setControlByte@ctrl:
  1191                           	opt stack 0
  1192  000011                     __RegsToCANID@type:
  1193                           	opt stack 0
  1194  000011                     __ECANPointBuffer@b:
  1195                           	opt stack 0
  1196  000011                     ___lbmod@rem:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x10
  1200  000011                     	ds	1
  1201  000012                     ??__RegsToCANID:
  1202  000012                     vscp_setGUID@idx:
  1203                           	opt stack 0
  1204  000012                     vscp_setUserID@idx:
  1205                           	opt stack 0
  1206  000012                     vscp_setManufacturerId@idx:
  1207                           	opt stack 0
  1208  000012                     OpenADC@config:
  1209                           	opt stack 0
  1210  000012                     ___flpack@exp:
  1211                           	opt stack 0
  1212  000012                     __ECANPointBuffer@pt:
  1213                           	opt stack 0
  1214  000012                     frexp@eptr:
  1215                           	opt stack 0
  1216  000012                     ___flge@ff2:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x11
  1220  000012                     	ds	1
  1221  000013                     ___flpack@sign:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x12
  1225  000013                     	ds	1
  1226  000014                     ??___flpack:
  1227  000014                     ??_frexp:
  1228  000014                     __CANIDToRegs@type:
  1229                           	opt stack 0
  1230  000014                     __RegsToCANID@Value:
  1231                           	opt stack 0
  1232  000014                     ___wmul@product:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x13
  1236  000014                     	ds	1
  1237  000015                     ??__CANIDToRegs:
  1238  000015                     ?_ECANReceiveMessage:
  1239                           	opt stack 0
  1240  000015                     ECANReceiveMessage@data:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x14
  1244  000015                     	ds	1
  1245  000016                     ?_readEEPROM:
  1246                           	opt stack 0
  1247  000016                     readEEPROM@address:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0x15
  1251  000016                     	ds	1
  1252  000017                     __CANIDToRegs@Value:
  1253                           	opt stack 0
  1254  000017                     ECANReceiveMessage@dataLen:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x16
  1258  000017                     	ds	1
  1259  000018                     ?_ECANSendMessage:
  1260                           	opt stack 0
  1261  000018                     ?___awtofl:
  1262                           	opt stack 0
  1263  000018                     ___awtofl@c:
  1264                           	opt stack 0
  1265  000018                     ECANSendMessage@id:
  1266                           	opt stack 0
  1267                           
  1268                           ; 4 bytes @ 0x17
  1269  000018                     	ds	1
  1270  000019                     ECANReceiveMessage@msgFlags:
  1271                           	opt stack 0
  1272  000019                     readEEPROM@data:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x18
  1276  000019                     	ds	1
  1277  00001A                     ??_writeCoeffs2Ram:
  1278  00001A                     ?_getCalibrationValue:
  1279                           	opt stack 0
  1280  00001A                     ?___lwtofl:
  1281                           	opt stack 0
  1282  00001A                     vscp_readAppReg@pos:
  1283                           	opt stack 0
  1284  00001A                     vscp_getGUID@idx:
  1285                           	opt stack 0
  1286  00001A                     vscp_getUserID@idx:
  1287                           	opt stack 0
  1288  00001A                     vscp_getManufacturerId@idx:
  1289                           	opt stack 0
  1290  00001A                     vscp_handleDropNickname@bytes:
  1291                           	opt stack 0
  1292  00001A                     ECANReceiveMessage@savedPtr:
  1293                           	opt stack 0
  1294  00001A                     ___lwtofl@c:
  1295                           	opt stack 0
  1296                           
  1297                           ; 2 bytes @ 0x19
  1298  00001A                     	ds	1
  1299  00001B                     ??_vscp_readStdReg:
  1300  00001B                     ?_vscp_writeStdReg:
  1301                           	opt stack 0
  1302  00001B                     vscp_readAppReg@reg:
  1303                           	opt stack 0
  1304  00001B                     vscp_writeStdReg@value:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x1A
  1308  00001B                     	ds	1
  1309  00001C                     ??_getCalibrationValue:
  1310  00001C                     ??_vscp_writeStdReg:
  1311  00001C                     vscp_readAppReg@rv:
  1312                           	opt stack 0
  1313  00001C                     ECANSendMessage@data:
  1314                           	opt stack 0
  1315  00001C                     ECANReceiveMessage@id:
  1316                           	opt stack 0
  1317  00001C                     writeCoeffs2Ram@c:
  1318                           	opt stack 0
  1319                           
  1320                           ; 3 bytes @ 0x1B
  1321  00001C                     	ds	1
  1322  00001D                     ECANSendMessage@dataLen:
  1323                           	opt stack 0
  1324  00001D                     ECANReceiveMessage@i:
  1325                           	opt stack 0
  1326  00001D                     ___awtofl@sign:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x1C
  1330  00001D                     	ds	1
  1331  00001E                     ?___fladd:
  1332                           	opt stack 0
  1333  00001E                     ECANSendMessage@msgFlags:
  1334                           	opt stack 0
  1335  00001E                     ECANReceiveMessage@mode:
  1336                           	opt stack 0
  1337  00001E                     ___fladd@f1:
  1338                           	opt stack 0
  1339                           
  1340                           ; 4 bytes @ 0x1D
  1341  00001E                     	ds	1
  1342  00001F                     ??_ECANSendMessage:
  1343  00001F                     ECANReceiveMessage@temp:
  1344                           	opt stack 0
  1345  00001F                     writeCoeffs2Ram@i:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x1E
  1349  00001F                     	ds	1
  1350  000020                     vscp_writeStdReg@rv:
  1351                           	opt stack 0
  1352  000020                     ECANReceiveMessage@ptr:
  1353                           	opt stack 0
  1354  000020                     vscp_readStdReg@code:
  1355                           	opt stack 0
  1356  000020                     ECANSendMessage@pb:
  1357                           	opt stack 0
  1358                           
  1359                           ; 18 bytes @ 0x1F
  1360  000020                     	ds	1
  1361  000021                     vscp_writeStdReg@reg:
  1362                           	opt stack 0
  1363  000021                     getCalibrationValue@cal:
  1364                           	opt stack 0
  1365  000021                     writeCoeffs2Ram@j:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x20
  1369  000021                     	ds	1
  1370  000022                     ?_getCANFrame:
  1371                           	opt stack 0
  1372  000022                     getCANFrame@pdlc:
  1373                           	opt stack 0
  1374  000022                     ___fladd@f2:
  1375                           	opt stack 0
  1376                           
  1377                           ; 4 bytes @ 0x21
  1378  000022                     	ds	1
  1379  000023                     ?_vscp_writeAppReg:
  1380                           	opt stack 0
  1381  000023                     getCalibrationValue@i:
  1382                           	opt stack 0
  1383  000023                     vscp_writeAppReg@val:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x22
  1387  000023                     	ds	1
  1388  000024                     vscp_writeAppReg@pos:
  1389                           	opt stack 0
  1390  000024                     getCANFrame@pdata:
  1391                           	opt stack 0
  1392  000024                     vscp_readStdReg@code_1147:
  1393                           	opt stack 0
  1394                           
  1395                           ; 4 bytes @ 0x23
  1396  000024                     	ds	1
  1397  000025                     vscp_writeAppReg@reg:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x24
  1401  000025                     	ds	1
  1402  000026                     ??___fladd:
  1403  000026                     vscp_writeAppReg@rv:
  1404                           	opt stack 0
  1405  000026                     getCANFrame@pid:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x25
  1409  000026                     	ds	1
  1410  000027                     ?_vscp_writeRegister:
  1411                           	opt stack 0
  1412  000027                     getCANFrame@flags:
  1413                           	opt stack 0
  1414  000027                     vscp_writeRegister@value:
  1415                           	opt stack 0
  1416                           
  1417                           ; 1 bytes @ 0x26
  1418  000027                     	ds	1
  1419  000028                     ?_getVSCPFrame:
  1420                           	opt stack 0
  1421  000028                     vscp_readStdReg@idx:
  1422                           	opt stack 0
  1423  000028                     vscp_writeRegister@reg:
  1424                           	opt stack 0
  1425  000028                     getVSCPFrame@pvscpclass:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x27
  1429  000028                     	ds	1
  1430  000029                     vscp_readStdReg@idx_1148:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x28
  1434  000029                     	ds	1
  1435  00002A                     vscp_readStdReg@rv:
  1436                           	opt stack 0
  1437  00002A                     ___fladd@sign:
  1438                           	opt stack 0
  1439  00002A                     getVSCPFrame@pvscptype:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x29
  1443  00002A                     	ds	1
  1444  00002B                     vscp_readStdReg@reg:
  1445                           	opt stack 0
  1446  00002B                     ___fladd@exp2:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x2A
  1450  00002B                     	ds	1
  1451  00002C                     vscp_readRegister@reg:
  1452                           	opt stack 0
  1453  00002C                     ___fladd@exp1:
  1454                           	opt stack 0
  1455  00002C                     getVSCPFrame@pNodeId:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x2B
  1459  00002C                     	ds	1
  1460  00002D                     ?_Celsius2Kelvin:
  1461                           	opt stack 0
  1462  00002D                     ?___flsub:
  1463                           	opt stack 0
  1464  00002D                     ?___asfladd:
  1465                           	opt stack 0
  1466  00002D                     ___asfladd@f1p:
  1467                           	opt stack 0
  1468  00002D                     Celsius2Kelvin@tc:
  1469                           	opt stack 0
  1470  00002D                     ___flsub@f1:
  1471                           	opt stack 0
  1472                           
  1473                           ; 4 bytes @ 0x2C
  1474  00002D                     	ds	1
  1475  00002E                     getVSCPFrame@pPriority:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0x2D
  1479  00002E                     	ds	1
  1480  00002F                     ___asfladd@f2:
  1481                           	opt stack 0
  1482                           
  1483                           ; 4 bytes @ 0x2E
  1484  00002F                     	ds	1
  1485  000030                     getVSCPFrame@pSize:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0x2F
  1489  000030                     	ds	1
  1490  000031                     ___flsub@f2:
  1491                           	opt stack 0
  1492                           
  1493                           ; 4 bytes @ 0x30
  1494  000031                     	ds	1
  1495  000032                     ECANSendMessage@mode:
  1496                           	opt stack 0
  1497  000032                     getVSCPFrame@pData:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x31
  1501  000032                     	ds	1
  1502  000033                     ECANSendMessage@buffers:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x32
  1506  000033                     	ds	1
  1507  000034                     ??_getVSCPFrame:
  1508  000034                     ECANSendMessage@j:
  1509                           	opt stack 0
  1510                           
  1511                           ; 1 bytes @ 0x33
  1512  000034                     	ds	1
  1513  000035                     ?___asflsub:
  1514                           	opt stack 0
  1515  000035                     ECANSendMessage@tempBSEL0:
  1516                           	opt stack 0
  1517  000035                     ___asflsub@f1p:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x34
  1521  000035                     	ds	1
  1522  000036                     ECANSendMessage@tempPtr:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x35
  1526  000036                     	ds	1
  1527  000037                     ___asflsub@f2:
  1528                           	opt stack 0
  1529                           
  1530                           ; 4 bytes @ 0x36
  1531  000037                     	ds	1
  1532  000038                     ECANSendMessage@temp:
  1533                           	opt stack 0
  1534  000038                     getVSCPFrame@id:
  1535                           	opt stack 0
  1536                           
  1537                           ; 4 bytes @ 0x37
  1538  000038                     	ds	1
  1539  000039                     ECANSendMessage@i:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x38
  1543  000039                     	ds	1
  1544  00003A                     ECANSendMessage@ptr:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x39
  1548  00003A                     	ds	1
  1549  00003B                     
  1550                           ; 0 bytes @ 0x3A
  1551  00003B                     	ds	1
  1552  00003C                     ?_sendCANFrame:
  1553                           	opt stack 0
  1554  00003C                     vscp_getEvent@rv:
  1555                           	opt stack 0
  1556  00003C                     sendCANFrame@id:
  1557                           	opt stack 0
  1558  00003C                     ___fldiv@f3:
  1559                           	opt stack 0
  1560                           
  1561                           ; 4 bytes @ 0x3B
  1562  00003C                     	ds	4
  1563  000040                     sendCANFrame@dlc:
  1564                           	opt stack 0
  1565  000040                     ___fldiv@cntr:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x3F
  1569  000040                     	ds	1
  1570  000041                     sendCANFrame@pdata:
  1571                           	opt stack 0
  1572  000041                     ___fldiv@exp:
  1573                           	opt stack 0
  1574                           
  1575                           ; 1 bytes @ 0x40
  1576  000041                     	ds	1
  1577  000042                     sendCANFrame@rv:
  1578                           	opt stack 0
  1579  000042                     ___fldiv@sign:
  1580                           	opt stack 0
  1581                           
  1582                           ; 1 bytes @ 0x41
  1583  000042                     	ds	1
  1584  000043                     ??_eval_poly:
  1585  000043                     vscp_sendEvent@rv:
  1586                           	opt stack 0
  1587  000043                     ___asflmul@mp:
  1588                           	opt stack 0
  1589  000043                     ___fltol@sign1:
  1590                           	opt stack 0
  1591                           
  1592                           ; 1 bytes @ 0x42
  1593  000043                     	ds	1
  1594  000044                     ?_vscp_sendHeartBeat:
  1595                           	opt stack 0
  1596  000044                     ??_vscp_newNodeOnline:
  1597  000044                     vscp_sendHeartBeat@subzone:
  1598                           	opt stack 0
  1599  000044                     ___fltol@exp1:
  1600                           	opt stack 0
  1601  000044                     log@exponent:
  1602                           	opt stack 0
  1603                           
  1604                           ; 2 bytes @ 0x43
  1605  000044                     	ds	1
  1606  000045                     ??_sendTempEvent:
  1607  000045                     vscp_sendHeartBeat@zone:
  1608                           	opt stack 0
  1609  000045                     ___altofl@sign:
  1610                           	opt stack 0
  1611                           
  1612                           ; 1 bytes @ 0x44
  1613  000045                     	ds	1
  1614  000046                     tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           prodh	equ	0xFF4
  1619                           prodl	equ	0xFF3
  1620                           intcon	equ	0xFF2
  1621                           postinc0	equ	0xFEE
  1622                           wreg	equ	0xFE8
  1623                           indf1	equ	0xFE7
  1624                           postdec1	equ	0xFE5
  1625                           fsr1h	equ	0xFE2
  1626                           fsr1l	equ	0xFE1
  1627                           indf2	equ	0xFDF
  1628                           postinc2	equ	0xFDE
  1629                           postdec2	equ	0xFDD
  1630                           plusw2	equ	0xFDB
  1631                           fsr2h	equ	0xFDA
  1632                           fsr2l	equ	0xFD9
  1633                           status	equ	0xFD8
  1634                           
  1635                           ; 0 bytes @ 0x45
  1636 ;;
  1637 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1638 ;;
  1639 ;; *************** function _main *****************
  1640 ;; Defined at:
  1641 ;;		line 301 in file "../main.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;  i               4   91[BANK0 ] unsigned long 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;		None               void
  1648 ;; Registers used:
  1649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : F/1
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1655 ;;      Params:         0       0       0       0       0       0       0
  1656 ;;      Locals:         0       4       0       0       0       0       0
  1657 ;;      Temps:          0       0       0       0       0       0       0
  1658 ;;      Totals:         0       4       0       0       0       0       0
  1659 ;;Total ram usage:        4 bytes
  1660 ;; Hardware stack levels required when called:    9
  1661 ;; This function calls:
  1662 ;;		_init
  1663 ;;		_vscp_check_pstorage
  1664 ;;		_init_app_eeprom
  1665 ;;		_vscp_init
  1666 ;;		_writeEEPROM
  1667 ;;		_vscp_getEvent
  1668 ;;		_vscp_goActiveState
  1669 ;;		_vscp_handleProbeState
  1670 ;;		_vscp_handleProtocolEvent
  1671 ;;		_handle_sync
  1672 ;;		_vscp_error
  1673 ;;		_doOneSecondWork
  1674 ;;		_vscp_doOneSecondWork
  1675 ;;		_doWork
  1676 ;; This function is called by:
  1677 ;;		Startup code after reset
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text0
  1682  003C3A                     __ptext0:
  1683                           	opt stack 0
  1684  003C3A                     _main:
  1685                           	opt stack 21
  1686                           
  1687                           ;main.c: 302: uint32_t i;
  1688                           ;main.c: 304: init();
  1689                           
  1690                           ;incstack = 0
  1691                           ;incstack = 0
  1692  003C3A  ECFB  F027         	call	_init	;wreg free
  1693                           
  1694                           ;main.c: 308: if ( !vscp_check_pstorage() ) {
  1695  003C3E  EC5E  F029         	call	_vscp_check_pstorage	;wreg free
  1696  003C42  0900               	iorlw	0
  1697  003C44  B4D8               	btfsc	status,2,c
  1698                           
  1699                           ;main.c: 311: init_app_eeprom();
  1700  003C46  ECCC  F013         	call	_init_app_eeprom	;wreg free
  1701                           
  1702                           ;main.c: 313: }
  1703                           ;main.c: 315: vscp_init();
  1704  003C4A  ECC2  F026         	call	_vscp_init	;wreg free
  1705  003C4E                     l170:
  1706  003C4E  0004               	clrwdt		;# 
  1707                           
  1708                           ;main.c: 321: if ( ( vscp_initbtncnt > 250 ) &&
  1709                           ;main.c: 322: ( 0x01 != vscp_node_state ) ) {
  1710  003C50  0EFA               	movlw	250
  1711  003C52  0100               	movlb	0	; () banked
  1712  003C54  65C9               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1713  003C56  D00C               	goto	l9529
  1714                           
  1715                           ; BSR set to: 0
  1716  003C58  05CB               	decf	_vscp_node_state& (0+255),w,b
  1717  003C5A  E00A               	bz	l9529
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 325: vscp_nickname = 0xff;
  1721  003C5C  69CA               	setf	_vscp_nickname& (0+255),b
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;main.c: 326: writeEEPROM(0x01, 0xff);
  1725  003C5E  6A0F               	clrf	?_writeEEPROM+1,c
  1726  003C60  0E01               	movlw	1
  1727  003C62  6E0E               	movwf	?_writeEEPROM,c
  1728  003C64  0EFF               	movlw	255
  1729  003C66  6810               	setf	?_writeEEPROM+2,c
  1730  003C68  EC39  F029         	call	_writeEEPROM	;wreg free
  1731                           
  1732                           ;main.c: 327: vscp_init();
  1733  003C6C  ECC2  F026         	call	_vscp_init	;wreg free
  1734  003C70                     l9529:
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;main.c: 329: }
  1738                           ;main.c: 333: vscp_imsg.flags = 0;
  1739  003C70  0101               	movlb	1	; () banked
  1740  003C72  6B68               	clrf	_vscp_imsg& (0+255),b
  1741                           
  1742                           ; BSR set to: 1
  1743                           ;main.c: 334: vscp_getEvent();
  1744  003C74  EC7A  F027         	call	_vscp_getEvent	;wreg free
  1745                           
  1746                           ;main.c: 337: switch (vscp_node_state) {
  1747  003C78  D025               	goto	l9559
  1748  003C7A                     l9533:
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 342: if (0xff == vscp_nickname) {
  1752  003C7A  29CA               	incf	_vscp_nickname& (0+255),w,b
  1753  003C7C  E103               	bnz	l9537
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 344: vscp_node_state = 0x01;
  1757  003C7E  0E01               	movlw	1
  1758  003C80  6FCB               	movwf	_vscp_node_state& (0+255),b
  1759                           
  1760                           ;main.c: 345: }
  1761  003C82  D02C               	goto	l9561
  1762  003C84                     l9537:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;main.c: 346: else {
  1766                           ;main.c: 348: vscp_node_state = 0x03;
  1767  003C84  0E03               	movlw	3
  1768  003C86  6FCB               	movwf	_vscp_node_state& (0+255),b
  1769  003C88                     l9539:
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;main.c: 349: vscp_goActiveState();
  1773  003C88  ECA1  F029         	call	_vscp_goActiveState	;wreg free
  1774  003C8C  D027               	goto	l9561
  1775  003C8E                     l9541:
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;main.c: 354: vscp_handleProbeState();
  1779  003C8E  EC98  F020         	call	_vscp_handleProbeState	;wreg free
  1780                           
  1781                           ;main.c: 355: break;
  1782  003C92  D024               	goto	l9561
  1783  003C94                     l179:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 364: if (vscp_imsg.flags & 0x80) {
  1787  003C94  0101               	movlb	1	; () banked
  1788  003C96  AF68               	btfss	_vscp_imsg& (0+255),7,b
  1789  003C98  D021               	goto	l9561
  1790                           
  1791                           ; BSR set to: 1
  1792                           ;main.c: 366: if ( 0 == vscp_imsg.vscp_class ) {
  1793  003C9A  516B               	movf	(_vscp_imsg+3)& (0+255),w,b
  1794  003C9C  116A               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1795  003C9E  E103               	bnz	l9549
  1796                           
  1797                           ; BSR set to: 1
  1798                           ;main.c: 369: vscp_handleProtocolEvent();
  1799  003CA0  EC8A  F00D         	call	_vscp_handleProtocolEvent	;wreg free
  1800                           
  1801                           ;main.c: 371: }
  1802  003CA4  D01B               	goto	l9561
  1803  003CA6                     l9549:
  1804                           
  1805                           ; BSR set to: 1
  1806                           ;main.c: 372: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1807                           ;main.c: 373: ( 26 == vscp_imsg.vscp_type ) ) {
  1808  003CA6  516A               	movf	(_vscp_imsg+2)& (0+255),w,b
  1809  003CA8  0A1E               	xorlw	30
  1810  003CAA  116B               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1811  003CAC  E117               	bnz	l9561
  1812                           
  1813                           ; BSR set to: 1
  1814  003CAE  516C               	movf	(_vscp_imsg+4)& (0+255),w,b
  1815  003CB0  0A1A               	xorlw	26
  1816  003CB2  E114               	bnz	l9561
  1817                           
  1818                           ; BSR set to: 1
  1819                           ;main.c: 374: handle_sync();
  1820  003CB4  ECDC  F024         	call	_handle_sync	;wreg free
  1821  003CB8  D011               	goto	l9561
  1822  003CBA                     l9555:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 381: vscp_error();
  1826  003CBA  EC80  F02A         	call	_vscp_error	;wreg free
  1827                           
  1828                           ;main.c: 382: break;
  1829  003CBE  D00E               	goto	l9561
  1830  003CC0                     l185:
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 385: vscp_node_state = 0x00;
  1834  003CC0  6BCB               	clrf	_vscp_node_state& (0+255),b
  1835                           
  1836                           ;main.c: 386: break;
  1837  003CC2  D00C               	goto	l9561
  1838  003CC4                     l9559:
  1839  003CC4  0100               	movlb	0	; () banked
  1840  003CC6  51CB               	movf	_vscp_node_state& (0+255),w,b
  1841                           
  1842                           ; Switch size 1, requested type "space"
  1843                           ; Number of cases is 5, Range of values is 0 to 4
  1844                           ; switch strategies available:
  1845                           ; Name         Instructions Cycles
  1846                           ; simple_byte           16     9 (average)
  1847                           ;	Chosen strategy is simple_byte
  1848  003CC8  E0D8               	bz	l9533
  1849  003CCA  0A01               	xorlw	1	; case 1
  1850  003CCC  E0E0               	bz	l9541
  1851  003CCE  0A03               	xorlw	3	; case 2
  1852  003CD0  E0DB               	bz	l9539
  1853  003CD2  0A01               	xorlw	1	; case 3
  1854  003CD4  E0DF               	bz	l179
  1855  003CD6  0A07               	xorlw	7	; case 4
  1856  003CD8  E0F0               	bz	l9555
  1857  003CDA  D7F2               	goto	l185
  1858  003CDC                     l9561:
  1859                           
  1860                           ;main.c: 392: if ( measurement_clock > 1000 ) {
  1861  003CDC  0EE9               	movlw	233
  1862  003CDE  0101               	movlb	1	; () banked
  1863  003CE0  5D12               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1864  003CE2  0E03               	movlw	3
  1865  003CE4  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1866  003CE6  0E00               	movlw	0
  1867  003CE8  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1868  003CEA  0E00               	movlw	0
  1869  003CEC  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1870  003CEE  E3AF               	bnc	l170
  1871                           
  1872                           ; BSR set to: 1
  1873                           ;main.c: 394: measurement_clock = 0;
  1874  003CF0  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
  1875  003CF2  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1876  003CF4  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1877  003CF6  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1878                           
  1879                           ; BSR set to: 1
  1880                           ;main.c: 395: doOneSecondWork();
  1881  003CF8  ECDC  F010         	call	_doOneSecondWork	;wreg free
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 396: seconds++;
  1885  003CFC  2BC7               	incf	_seconds& (0+255),f,b
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 400: if (0x03 == vscp_node_state) {
  1889  003CFE  51CB               	movf	_vscp_node_state& (0+255),w,b
  1890  003D00  0A03               	xorlw	3
  1891  003D02  E11A               	bnz	l9583
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;main.c: 401: for (i = 0; i < 6; i++) {
  1895  003D04  6BBB               	clrf	main@i& (0+255),b
  1896  003D06  6BBC               	clrf	(main@i+1)& (0+255),b
  1897  003D08  6BBD               	clrf	(main@i+2)& (0+255),b
  1898  003D0A  6BBE               	clrf	(main@i+3)& (0+255),b
  1899  003D0C                     l9577:
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;main.c: 402: seconds_temp[i]++;
  1903  003D0C  0E0C               	movlw	low _seconds_temp
  1904  003D0E  0100               	movlb	0	; () banked
  1905  003D10  25BB               	addwf	main@i& (0+255),w,b
  1906  003D12  6ED9               	movwf	fsr2l,c
  1907  003D14  0E01               	movlw	high _seconds_temp
  1908  003D16  21BC               	addwfc	(main@i+1)& (0+255),w,b
  1909  003D18  6EDA               	movwf	fsr2h,c
  1910  003D1A  2ADF               	incf	indf2,f,c
  1911                           
  1912                           ; BSR set to: 0
  1913  003D1C  2BBB               	incf	main@i& (0+255),f,b
  1914  003D1E  0E00               	movlw	0
  1915  003D20  23BC               	addwfc	(main@i+1)& (0+255),f,b
  1916  003D22  23BD               	addwfc	(main@i+2)& (0+255),f,b
  1917  003D24  23BE               	addwfc	(main@i+3)& (0+255),f,b
  1918                           
  1919                           ; BSR set to: 0
  1920  003D26  0E06               	movlw	6
  1921  003D28  5DBB               	subwf	main@i& (0+255),w,b
  1922  003D2A  0E00               	movlw	0
  1923  003D2C  59BC               	subwfb	(main@i+1)& (0+255),w,b
  1924  003D2E  0E00               	movlw	0
  1925  003D30  59BD               	subwfb	(main@i+2)& (0+255),w,b
  1926  003D32  0E00               	movlw	0
  1927  003D34  59BE               	subwfb	(main@i+3)& (0+255),w,b
  1928  003D36  E3EA               	bnc	l9577
  1929  003D38                     l9583:
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;main.c: 403: }
  1933                           ;main.c: 404: }
  1934                           ;main.c: 406: if (seconds > 60) {
  1935  003D38  0E3C               	movlw	60
  1936  003D3A  65C7               	cpfsgt	_seconds& (0+255),b
  1937  003D3C  D001               	goto	l9587
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;main.c: 407: seconds = 0;
  1941  003D3E  6BC7               	clrf	_seconds& (0+255),b
  1942  003D40                     l9587:
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 408: }
  1946                           ;main.c: 412: if (0x03 == vscp_node_state) {
  1947  003D40  51CB               	movf	_vscp_node_state& (0+255),w,b
  1948  003D42  0A03               	xorlw	3
  1949  003D44  B4D8               	btfsc	status,2,c
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;main.c: 413: vscp_doOneSecondWork();
  1953  003D46  EC9C  F026         	call	_vscp_doOneSecondWork	;wreg free
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;main.c: 414: }
  1957                           ;main.c: 417: doWork();
  1958  003D4A  ECB0  F016         	call	_doWork	;wreg free
  1959  003D4E  D77F               	goto	l170
  1960  003D50                     __end_of_main:
  1961                           	opt stack 0
  1962                           tblptru	equ	0xFF8
  1963                           tblptrh	equ	0xFF7
  1964                           tblptrl	equ	0xFF6
  1965                           tablat	equ	0xFF5
  1966                           prodh	equ	0xFF4
  1967                           prodl	equ	0xFF3
  1968                           intcon	equ	0xFF2
  1969                           postinc0	equ	0xFEE
  1970                           wreg	equ	0xFE8
  1971                           indf1	equ	0xFE7
  1972                           postdec1	equ	0xFE5
  1973                           fsr1h	equ	0xFE2
  1974                           fsr1l	equ	0xFE1
  1975                           indf2	equ	0xFDF
  1976                           postinc2	equ	0xFDE
  1977                           postdec2	equ	0xFDD
  1978                           plusw2	equ	0xFDB
  1979                           fsr2h	equ	0xFDA
  1980                           fsr2l	equ	0xFD9
  1981                           status	equ	0xFD8
  1982                           
  1983 ;; *************** function _doWork *****************
  1984 ;; Defined at:
  1985 ;;		line 432 in file "../main.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;		None
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  temp            4   47[BANK1 ] unsigned long 
  1990 ;;  avarage         4   43[BANK1 ] unsigned long 
  1991 ;;  resistance      4   38[BANK1 ] unsigned long 
  1992 ;;  v               4   32[BANK1 ] unsigned long 
  1993 ;;  calVoltage      4    4[BANK1 ] unsigned long 
  1994 ;;  Rinf            4    0[BANK1 ] unsigned long 
  1995 ;;  B               2   36[BANK1 ] unsigned short 
  1996 ;;  i               1   51[BANK1 ] unsigned char 
  1997 ;;  j               1   42[BANK1 ] unsigned char 
  1998 ;; Return value:  Size  Location     Type
  1999 ;;		None               void
  2000 ;; Registers used:
  2001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2002 ;; Tracked objects:
  2003 ;;		On entry : F/0
  2004 ;;		On exit  : F/1
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2007 ;;      Params:         0       0       0       0       0       0       0
  2008 ;;      Locals:         0       0      52       0       0       0       0
  2009 ;;      Temps:          0      14       0       0       0       0       0
  2010 ;;      Totals:         0      14      52       0       0       0       0
  2011 ;;Total ram usage:       66 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    7
  2014 ;; This function calls:
  2015 ;;		_readEEPROM
  2016 ;;		_exp
  2017 ;;		_log
  2018 ;;		_getCalibrationValue
  2019 ;;		___aldiv
  2020 ;;		___altofl
  2021 ;;		___asfladd
  2022 ;;		___fladd
  2023 ;;		___asfldiv
  2024 ;;		___fldiv
  2025 ;;		___flmul
  2026 ;;		___asflsub
  2027 ;;		___flsub
  2028 ;;		___fltol
  2029 ;;		___lwtofl
  2030 ;; This function is called by:
  2031 ;;		_main
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text1
  2036  002D60                     __ptext1:
  2037                           	opt stack 0
  2038  002D60                     _doWork:
  2039                           	opt stack 22
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;main.c: 433: uint8_t i, j;
  2043                           ;main.c: 434: uint16_t B;
  2044                           ;main.c: 435: double avarage;
  2045                           ;main.c: 436: double resistance;
  2046                           ;main.c: 437: double Rinf;
  2047                           ;main.c: 438: double temp;
  2048                           ;main.c: 439: double v;
  2049                           ;main.c: 440: double calVoltage;
  2050                           ;main.c: 442: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  2051                           ;main.c: 443: readEEPROM(0xF3));
  2052                           
  2053                           ; BSR set to: 1
  2054                           ;incstack = 0
  2055                           ;incstack = 0
  2056  002D60  6A17               	clrf	?_readEEPROM+1,c
  2057  002D62  0EF3               	movlw	243
  2058  002D64  6E16               	movwf	?_readEEPROM,c
  2059  002D66  EC27  F02A         	call	_readEEPROM	;wreg free
  2060  002D6A  0100               	movlb	0	; () banked
  2061  002D6C  6FAD               	movwf	??_doWork& (0+255),b
  2062  002D6E  6A17               	clrf	?_readEEPROM+1,c
  2063  002D70  0EF2               	movlw	242
  2064  002D72  6E16               	movwf	?_readEEPROM,c
  2065  002D74  EC27  F02A         	call	_readEEPROM	;wreg free
  2066  002D78  6E1B               	movwf	?___lwtofl+1,c
  2067  002D7A  0100               	movlb	0	; () banked
  2068  002D7C  51AD               	movf	??_doWork& (0+255),w,b
  2069  002D7E  6E1A               	movwf	?___lwtofl,c
  2070  002D80  ECD3  F028         	call	___lwtofl	;wreg free
  2071  002D84  C01D  F17D         	movff	?___lwtofl+3,doWork@calVoltage+3
  2072  002D88  C01C  F17C         	movff	?___lwtofl+2,doWork@calVoltage+2
  2073  002D8C  C01B  F17B         	movff	?___lwtofl+1,doWork@calVoltage+1
  2074  002D90  C01A  F17A         	movff	?___lwtofl,doWork@calVoltage
  2075                           
  2076                           ;main.c: 448: for (i = 0; i < 6; i++) {
  2077  002D94  0101               	movlb	1	; () banked
  2078  002D96  6BA9               	clrf	doWork@i& (0+255),b
  2079  002D98                     l10349:
  2080                           
  2081                           ; BSR set to: 1
  2082                           ;main.c: 450: if (adc_conversion_flags & 1 << i) {
  2083  002D98  C1A9  F0AD         	movff	doWork@i,??_doWork
  2084  002D9C  0E01               	movlw	1
  2085  002D9E  0100               	movlb	0	; () banked
  2086  002DA0  6FAE               	movwf	(??_doWork+1)& (0+255),b
  2087  002DA2  2BAD               	incf	??_doWork& (0+255),f,b
  2088  002DA4  D002               	goto	u8624
  2089  002DA6                     u8625:
  2090  002DA6  90D8               	bcf	status,0,c
  2091  002DA8  37AE               	rlcf	(??_doWork+1)& (0+255),f,b
  2092  002DAA                     u8624:
  2093  002DAA  2FAD               	decfsz	??_doWork& (0+255),f,b
  2094  002DAC  D7FC               	goto	u8625
  2095  002DAE  51AE               	movf	(??_doWork+1)& (0+255),w,b
  2096  002DB0  15C4               	andwf	_adc_conversion_flags& (0+255),w,b
  2097  002DB2  E101 D1E5          	bz	l10403
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;main.c: 453: avarage = 0;
  2101  002DB6  0101               	movlb	1	; () banked
  2102  002DB8  6BA1               	clrf	doWork@avarage& (0+255),b
  2103  002DBA  6BA2               	clrf	(doWork@avarage+1)& (0+255),b
  2104  002DBC  6BA3               	clrf	(doWork@avarage+2)& (0+255),b
  2105  002DBE  6BA4               	clrf	(doWork@avarage+3)& (0+255),b
  2106                           
  2107                           ;main.c: 454: for (j = 0; j < 80; j++) {
  2108  002DC0  6BA0               	clrf	doWork@j& (0+255),b
  2109  002DC2                     l10357:
  2110                           
  2111                           ; BSR set to: 1
  2112                           ;main.c: 455: avarage += ((uint16_t)adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  2113  002DC2  0E01               	movlw	high doWork@avarage
  2114  002DC4  6E2E               	movwf	?___asfladd+1,c
  2115  002DC6  0EA1               	movlw	low doWork@avarage
  2116  002DC8  6E2D               	movwf	?___asfladd,c
  2117  002DCA  90D8               	bcf	status,0,c
  2118  002DCC  35A9               	rlcf	doWork@i& (0+255),w,b
  2119  002DCE  0100               	movlb	0	; () banked
  2120  002DD0  6FAD               	movwf	??_doWork& (0+255),b
  2121  002DD2  6BAE               	clrf	(??_doWork+1)& (0+255),b
  2122  002DD4  37AE               	rlcf	(??_doWork+1)& (0+255),f,b
  2123  002DD6  0101               	movlb	1	; () banked
  2124  002DD8  51A0               	movf	doWork@j& (0+255),w,b
  2125  002DDA  0D0C               	mullw	12
  2126  002DDC  0EAC               	movlw	low (_adc+1)
  2127  002DDE  24F3               	addwf	prodl,w,c
  2128  002DE0  0100               	movlb	0	; () banked
  2129  002DE2  6FAF               	movwf	(??_doWork+2)& (0+255),b
  2130  002DE4  0E01               	movlw	high (_adc+1)
  2131  002DE6  20F4               	addwfc	prodh,w,c
  2132  002DE8  6FB0               	movwf	(??_doWork+3)& (0+255),b
  2133  002DEA  51AD               	movf	??_doWork& (0+255),w,b
  2134  002DEC  25AF               	addwf	(??_doWork+2)& (0+255),w,b
  2135  002DEE  6ED9               	movwf	fsr2l,c
  2136  002DF0  51AE               	movf	(??_doWork+1)& (0+255),w,b
  2137  002DF2  21B0               	addwfc	(??_doWork+3)& (0+255),w,b
  2138  002DF4  6EDA               	movwf	fsr2h,c
  2139  002DF6  50DF               	movf	indf2,w,c
  2140  002DF8  6FB1               	movwf	(??_doWork+4)& (0+255),b
  2141  002DFA  90D8               	bcf	status,0,c
  2142  002DFC  0101               	movlb	1	; () banked
  2143  002DFE  35A9               	rlcf	doWork@i& (0+255),w,b
  2144  002E00  0100               	movlb	0	; () banked
  2145  002E02  6FB2               	movwf	(??_doWork+5)& (0+255),b
  2146  002E04  6BB3               	clrf	(??_doWork+6)& (0+255),b
  2147  002E06  37B3               	rlcf	(??_doWork+6)& (0+255),f,b
  2148  002E08  0101               	movlb	1	; () banked
  2149  002E0A  51A0               	movf	doWork@j& (0+255),w,b
  2150  002E0C  0D0C               	mullw	12
  2151  002E0E  0EAB               	movlw	low _adc
  2152  002E10  24F3               	addwf	prodl,w,c
  2153  002E12  0100               	movlb	0	; () banked
  2154  002E14  6FB4               	movwf	(??_doWork+7)& (0+255),b
  2155  002E16  0E01               	movlw	high _adc
  2156  002E18  20F4               	addwfc	prodh,w,c
  2157  002E1A  6FB5               	movwf	(??_doWork+8)& (0+255),b
  2158  002E1C  51B2               	movf	(??_doWork+5)& (0+255),w,b
  2159  002E1E  25B4               	addwf	(??_doWork+7)& (0+255),w,b
  2160  002E20  6ED9               	movwf	fsr2l,c
  2161  002E22  51B3               	movf	(??_doWork+6)& (0+255),w,b
  2162  002E24  21B5               	addwfc	(??_doWork+8)& (0+255),w,b
  2163  002E26  6EDA               	movwf	fsr2h,c
  2164  002E28  50DF               	movf	indf2,w,c
  2165  002E2A  6E1B               	movwf	?___lwtofl+1,c
  2166  002E2C  51B1               	movf	(??_doWork+4)& (0+255),w,b
  2167  002E2E  6E1A               	movwf	?___lwtofl,c
  2168  002E30  ECD3  F028         	call	___lwtofl	;wreg free
  2169  002E34  C01D  F032         	movff	?___lwtofl+3,?___asfladd+5
  2170  002E38  C01C  F031         	movff	?___lwtofl+2,?___asfladd+4
  2171  002E3C  C01B  F030         	movff	?___lwtofl+1,?___asfladd+3
  2172  002E40  C01A  F02F         	movff	?___lwtofl,?___asfladd+2
  2173  002E44  ECE8  F026         	call	___asfladd	;wreg free
  2174  002E48  0101               	movlb	1	; () banked
  2175  002E4A  2BA0               	incf	doWork@j& (0+255),f,b
  2176                           
  2177                           ; BSR set to: 1
  2178  002E4C  0E4F               	movlw	79
  2179  002E4E  65A0               	cpfsgt	doWork@j& (0+255),b
  2180  002E50  D7B8               	goto	l10357
  2181                           
  2182                           ; BSR set to: 1
  2183                           ;main.c: 459: if (1) {
  2184  002E52  0E01               	movlw	high doWork@avarage
  2185  002E54  0100               	movlb	0	; () banked
  2186  002E56  6F69               	movwf	(?___asfldiv+1)& (0+255),b
  2187  002E58  0EA1               	movlw	low doWork@avarage
  2188  002E5A  6F68               	movwf	?___asfldiv& (0+255),b
  2189  002E5C  6B6A               	clrf	(?___asfldiv+2)& (0+255),b
  2190  002E5E  6B6B               	clrf	(?___asfldiv+3)& (0+255),b
  2191  002E60  0EA0               	movlw	160
  2192  002E62  6F6C               	movwf	(?___asfldiv+4)& (0+255),b
  2193  002E64  0E42               	movlw	66
  2194  002E66  6F6D               	movwf	(?___asfldiv+5)& (0+255),b
  2195  002E68  EC2A  F026         	call	___asfldiv	;wreg free
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;main.c: 467: B = (uint16_t)readEEPROM(2 * i + 0x4F)*256 +
  2199                           ;main.c: 468: readEEPROM(2 * i + 0x50);
  2200  002E6C  0101               	movlb	1	; () banked
  2201  002E6E  51A9               	movf	doWork@i& (0+255),w,b
  2202  002E70  0D02               	mullw	2
  2203  002E72  0E50               	movlw	80
  2204  002E74  24F3               	addwf	prodl,w,c
  2205  002E76  6E16               	movwf	?_readEEPROM,c
  2206  002E78  0E00               	movlw	0
  2207  002E7A  20F4               	addwfc	prodh,w,c
  2208  002E7C  6E17               	movwf	?_readEEPROM+1,c
  2209  002E7E  EC27  F02A         	call	_readEEPROM	;wreg free
  2210  002E82  0100               	movlb	0	; () banked
  2211  002E84  6FAD               	movwf	??_doWork& (0+255),b
  2212  002E86  0101               	movlb	1	; () banked
  2213  002E88  51A9               	movf	doWork@i& (0+255),w,b
  2214  002E8A  0D02               	mullw	2
  2215  002E8C  0E4F               	movlw	79
  2216  002E8E  24F3               	addwf	prodl,w,c
  2217  002E90  6E16               	movwf	?_readEEPROM,c
  2218  002E92  0E00               	movlw	0
  2219  002E94  20F4               	addwfc	prodh,w,c
  2220  002E96  6E17               	movwf	?_readEEPROM+1,c
  2221  002E98  EC27  F02A         	call	_readEEPROM	;wreg free
  2222  002E9C  0101               	movlb	1	; () banked
  2223  002E9E  6F9B               	movwf	(doWork@B+1)& (0+255),b
  2224  002EA0  0100               	movlb	0	; () banked
  2225  002EA2  51AD               	movf	??_doWork& (0+255),w,b
  2226  002EA4  0101               	movlb	1	; () banked
  2227  002EA6  6F9A               	movwf	doWork@B& (0+255),b
  2228                           
  2229                           ; BSR set to: 1
  2230                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2231  002EA8  0E33               	movlw	51
  2232  002EAA  0100               	movlb	0	; () banked
  2233  002EAC  6F64               	movwf	(?___fldiv+4)& (0+255),b
  2234  002EAE  0E13               	movlw	19
  2235  002EB0  6F65               	movwf	(?___fldiv+5)& (0+255),b
  2236  002EB2  0E95               	movlw	149
  2237  002EB4  6F66               	movwf	(?___fldiv+6)& (0+255),b
  2238  002EB6  0EC3               	movlw	195
  2239  002EB8  6F67               	movwf	(?___fldiv+7)& (0+255),b
  2240  002EBA  C19A  F01A         	movff	doWork@B,?___lwtofl
  2241  002EBE  C19B  F01B         	movff	doWork@B+1,?___lwtofl+1
  2242  002EC2  ECD3  F028         	call	___lwtofl	;wreg free
  2243  002EC6  C01D  F063         	movff	?___lwtofl+3,?___fldiv+3
  2244  002ECA  C01C  F062         	movff	?___lwtofl+2,?___fldiv+2
  2245  002ECE  C01B  F061         	movff	?___lwtofl+1,?___fldiv+1
  2246  002ED2  C01A  F060         	movff	?___lwtofl,?___fldiv
  2247  002ED6  EC69  F022         	call	___fldiv	;wreg free
  2248  002EDA  C063  F181         	movff	?___fldiv+3,_doWork$2288+3
  2249  002EDE  C062  F180         	movff	?___fldiv+2,_doWork$2288+2
  2250  002EE2  C061  F17F         	movff	?___fldiv+1,_doWork$2288+1
  2251  002EE6  C060  F17E         	movff	?___fldiv,_doWork$2288
  2252                           
  2253                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2254  002EEA  C17E  F0A2         	movff	_doWork$2288,?_exp
  2255  002EEE  C17F  F0A3         	movff	_doWork$2288+1,?_exp+1
  2256  002EF2  C180  F0A4         	movff	_doWork$2288+2,?_exp+2
  2257  002EF6  C181  F0A5         	movff	_doWork$2288+3,?_exp+3
  2258  002EFA  ECD7  F019         	call	_exp	;wreg free
  2259  002EFE  C0A5  F185         	movff	?_exp+3,_doWork$2289+3
  2260  002F02  C0A4  F184         	movff	?_exp+2,_doWork$2289+2
  2261  002F06  C0A3  F183         	movff	?_exp+1,_doWork$2289+1
  2262  002F0A  C0A2  F182         	movff	?_exp,_doWork$2289
  2263                           
  2264                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2265  002F0E  C182  F068         	movff	_doWork$2289,?___flmul
  2266  002F12  C183  F069         	movff	_doWork$2289+1,?___flmul+1
  2267  002F16  C184  F06A         	movff	_doWork$2289+2,?___flmul+2
  2268  002F1A  C185  F06B         	movff	_doWork$2289+3,?___flmul+3
  2269  002F1E  D936               	call	PL52	;call to abstracted procedure
  2270  002F20  EC35  F020         	call	___flmul	;wreg free
  2271  002F24  C06B  F179         	movff	?___flmul+3,doWork@Rinf+3
  2272  002F28  C06A  F178         	movff	?___flmul+2,doWork@Rinf+2
  2273  002F2C  C069  F177         	movff	?___flmul+1,doWork@Rinf+1
  2274  002F30  C068  F176         	movff	?___flmul,doWork@Rinf
  2275                           
  2276                           ;main.c: 473: v = 5.0 * (double) avarage / 1025;
  2277  002F34  0100               	movlb	0	; () banked
  2278  002F36  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2279  002F38  6B6D               	clrf	(?___flmul+5)& (0+255),b
  2280  002F3A  0EA0               	movlw	160
  2281  002F3C  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2282  002F3E  0E40               	movlw	64
  2283  002F40  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2284  002F42  C1A1  F068         	movff	doWork@avarage,?___flmul
  2285  002F46  C1A2  F069         	movff	doWork@avarage+1,?___flmul+1
  2286  002F4A  C1A3  F06A         	movff	doWork@avarage+2,?___flmul+2
  2287  002F4E  C1A4  F06B         	movff	doWork@avarage+3,?___flmul+3
  2288  002F52  EC35  F020         	call	___flmul	;wreg free
  2289  002F56  C06B  F063         	movff	?___flmul+3,?___fldiv+3
  2290  002F5A  C06A  F062         	movff	?___flmul+2,?___fldiv+2
  2291  002F5E  C069  F061         	movff	?___flmul+1,?___fldiv+1
  2292  002F62  C068  F060         	movff	?___flmul,?___fldiv
  2293  002F66  0100               	movlb	0	; () banked
  2294  002F68  6B64               	clrf	(?___fldiv+4)& (0+255),b
  2295  002F6A  0E20               	movlw	32
  2296  002F6C  6F65               	movwf	(?___fldiv+5)& (0+255),b
  2297  002F6E  0E80               	movlw	128
  2298  002F70  6F66               	movwf	(?___fldiv+6)& (0+255),b
  2299  002F72  0E44               	movlw	68
  2300  002F74  6F67               	movwf	(?___fldiv+7)& (0+255),b
  2301  002F76  EC69  F022         	call	___fldiv	;wreg free
  2302  002F7A  C063  F199         	movff	?___fldiv+3,doWork@v+3
  2303  002F7E  C062  F198         	movff	?___fldiv+2,doWork@v+2
  2304  002F82  C061  F197         	movff	?___fldiv+1,doWork@v+1
  2305  002F86  C060  F196         	movff	?___fldiv,doWork@v
  2306                           
  2307                           ;main.c: 475: resistance = (calVoltage - 10000.0 * v) / v;
  2308  002F8A  D900               	call	PL52	;call to abstracted procedure
  2309  002F8C  C196  F068         	movff	doWork@v,?___flmul
  2310  002F90  C197  F069         	movff	doWork@v+1,?___flmul+1
  2311  002F94  C198  F06A         	movff	doWork@v+2,?___flmul+2
  2312  002F98  C199  F06B         	movff	doWork@v+3,?___flmul+3
  2313  002F9C  EC35  F020         	call	___flmul	;wreg free
  2314  002FA0  C06B  F034         	movff	?___flmul+3,?___flsub+7
  2315  002FA4  C06A  F033         	movff	?___flmul+2,?___flsub+6
  2316  002FA8  C069  F032         	movff	?___flmul+1,?___flsub+5
  2317  002FAC  C068  F031         	movff	?___flmul,?___flsub+4
  2318  002FB0  C17A  F02D         	movff	doWork@calVoltage,?___flsub
  2319  002FB4  C17B  F02E         	movff	doWork@calVoltage+1,?___flsub+1
  2320  002FB8  C17C  F02F         	movff	doWork@calVoltage+2,?___flsub+2
  2321  002FBC  C17D  F030         	movff	doWork@calVoltage+3,?___flsub+3
  2322  002FC0  EC19  F028         	call	___flsub	;wreg free
  2323  002FC4  C030  F063         	movff	?___flsub+3,?___fldiv+3
  2324  002FC8  C02F  F062         	movff	?___flsub+2,?___fldiv+2
  2325  002FCC  C02E  F061         	movff	?___flsub+1,?___fldiv+1
  2326  002FD0  C02D  F060         	movff	?___flsub,?___fldiv
  2327  002FD4  C196  F064         	movff	doWork@v,?___fldiv+4
  2328  002FD8  C197  F065         	movff	doWork@v+1,?___fldiv+5
  2329  002FDC  C198  F066         	movff	doWork@v+2,?___fldiv+6
  2330  002FE0  C199  F067         	movff	doWork@v+3,?___fldiv+7
  2331  002FE4  EC69  F022         	call	___fldiv	;wreg free
  2332  002FE8  C063  F19F         	movff	?___fldiv+3,doWork@resistance+3
  2333  002FEC  C062  F19E         	movff	?___fldiv+2,doWork@resistance+2
  2334  002FF0  C061  F19D         	movff	?___fldiv+1,doWork@resistance+1
  2335  002FF4  C060  F19C         	movff	?___fldiv,doWork@resistance
  2336                           
  2337                           ;main.c: 477: temp = ((double) B) / log(resistance / Rinf);
  2338  002FF8  C176  F064         	movff	doWork@Rinf,?___fldiv+4
  2339  002FFC  C177  F065         	movff	doWork@Rinf+1,?___fldiv+5
  2340  003000  C178  F066         	movff	doWork@Rinf+2,?___fldiv+6
  2341  003004  C179  F067         	movff	doWork@Rinf+3,?___fldiv+7
  2342  003008  C19C  F060         	movff	doWork@resistance,?___fldiv
  2343  00300C  C19D  F061         	movff	doWork@resistance+1,?___fldiv+1
  2344  003010  C19E  F062         	movff	doWork@resistance+2,?___fldiv+2
  2345  003014  C19F  F063         	movff	doWork@resistance+3,?___fldiv+3
  2346  003018  EC69  F022         	call	___fldiv	;wreg free
  2347  00301C  C063  F08C         	movff	?___fldiv+3,?_log+3
  2348  003020  C062  F08B         	movff	?___fldiv+2,?_log+2
  2349  003024  C061  F08A         	movff	?___fldiv+1,?_log+1
  2350  003028  C060  F089         	movff	?___fldiv,?_log
  2351  00302C  ECF7  F01C         	call	_log	;wreg free
  2352  003030  C08C  F189         	movff	?_log+3,_doWork$2290+3
  2353  003034  C08B  F188         	movff	?_log+2,_doWork$2290+2
  2354  003038  C08A  F187         	movff	?_log+1,_doWork$2290+1
  2355  00303C  C089  F186         	movff	?_log,_doWork$2290
  2356                           
  2357                           ;main.c: 477: temp = ((double) B) / log(resistance / Rinf);
  2358  003040  C19A  F01A         	movff	doWork@B,?___lwtofl
  2359  003044  C19B  F01B         	movff	doWork@B+1,?___lwtofl+1
  2360  003048  ECD3  F028         	call	___lwtofl	;wreg free
  2361  00304C  C01D  F063         	movff	?___lwtofl+3,?___fldiv+3
  2362  003050  C01C  F062         	movff	?___lwtofl+2,?___fldiv+2
  2363  003054  C01B  F061         	movff	?___lwtofl+1,?___fldiv+1
  2364  003058  C01A  F060         	movff	?___lwtofl,?___fldiv
  2365  00305C  C186  F064         	movff	_doWork$2290,?___fldiv+4
  2366  003060  C187  F065         	movff	_doWork$2290+1,?___fldiv+5
  2367  003064  C188  F066         	movff	_doWork$2290+2,?___fldiv+6
  2368  003068  C189  F067         	movff	_doWork$2290+3,?___fldiv+7
  2369  00306C  EC69  F022         	call	___fldiv	;wreg free
  2370  003070  C063  F1A8         	movff	?___fldiv+3,doWork@temp+3
  2371  003074  C062  F1A7         	movff	?___fldiv+2,doWork@temp+2
  2372  003078  C061  F1A6         	movff	?___fldiv+1,doWork@temp+1
  2373  00307C  C060  F1A5         	movff	?___fldiv,doWork@temp
  2374                           
  2375                           ;main.c: 479: temp -= 273.15;
  2376  003080  0101               	movlb	1	; () banked
  2377  003082  0E01               	movlw	high doWork@temp
  2378  003084  6E36               	movwf	?___asflsub+1,c
  2379  003086  0EA5               	movlw	low doWork@temp
  2380  003088  6E35               	movwf	?___asflsub,c
  2381  00308A  0E33               	movlw	51
  2382  00308C  6E37               	movwf	?___asflsub+2,c
  2383  00308E  0E93               	movlw	147
  2384  003090  6E38               	movwf	?___asflsub+3,c
  2385  003092  0E88               	movlw	136
  2386  003094  6E39               	movwf	?___asflsub+4,c
  2387  003096  0E43               	movlw	67
  2388  003098  6E3A               	movwf	?___asflsub+5,c
  2389  00309A  EC0D  F027         	call	___asflsub	;wreg free
  2390                           
  2391                           ;main.c: 494: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2392  00309E  0101               	movlb	1	; () banked
  2393  0030A0  51A9               	movf	doWork@i& (0+255),w,b
  2394  0030A2  0D02               	mullw	2
  2395  0030A4  EC37  F013         	call	PL2	;call to abstracted procedure
  2396  0030A8  CFDE F0AD          	movff	postinc2,??_doWork
  2397  0030AC  CFDD F0AE          	movff	postdec2,??_doWork+1
  2398  0030B0  C0AD  F0AF         	movff	??_doWork,??_doWork+2
  2399  0030B4  C0AE  F0B0         	movff	??_doWork+1,??_doWork+3
  2400  0030B8  0E00               	movlw	0
  2401  0030BA  0100               	movlb	0	; () banked
  2402  0030BC  BFB0               	btfsc	(??_doWork+3)& (0+255),7,b
  2403  0030BE  0EFF               	movlw	255
  2404  0030C0  6FB1               	movwf	(??_doWork+4)& (0+255),b
  2405  0030C2  6FB2               	movwf	(??_doWork+5)& (0+255),b
  2406  0030C4  0101               	movlb	1	; () banked
  2407  0030C6  51A9               	movf	doWork@i& (0+255),w,b
  2408  0030C8  ECCE  F025         	call	_getCalibrationValue
  2409  0030CC  C01A  F0B3         	movff	?_getCalibrationValue,??_doWork+6
  2410  0030D0  C01B  F0B4         	movff	?_getCalibrationValue+1,??_doWork+7
  2411  0030D4  0E00               	movlw	0
  2412  0030D6  0100               	movlb	0	; () banked
  2413  0030D8  BFB4               	btfsc	(??_doWork+7)& (0+255),7,b
  2414  0030DA  0EFF               	movlw	255
  2415  0030DC  6FB5               	movwf	(??_doWork+8)& (0+255),b
  2416  0030DE  6FB6               	movwf	(??_doWork+9)& (0+255),b
  2417  0030E0  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2418  0030E2  6B6D               	clrf	(?___flmul+5)& (0+255),b
  2419  0030E4  0EC8               	movlw	200
  2420  0030E6  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2421  0030E8  0E42               	movlw	66
  2422  0030EA  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2423  0030EC  C1A5  F068         	movff	doWork@temp,?___flmul
  2424  0030F0  C1A6  F069         	movff	doWork@temp+1,?___flmul+1
  2425  0030F4  C1A7  F06A         	movff	doWork@temp+2,?___flmul+2
  2426  0030F8  C1A8  F06B         	movff	doWork@temp+3,?___flmul+3
  2427  0030FC  EC35  F020         	call	___flmul	;wreg free
  2428  003100  C06B  F081         	movff	?___flmul+3,?___fltol+3
  2429  003104  C06A  F080         	movff	?___flmul+2,?___fltol+2
  2430  003108  C069  F07F         	movff	?___flmul+1,?___fltol+1
  2431  00310C  C068  F07E         	movff	?___flmul,?___fltol
  2432  003110  EC6B  F023         	call	___fltol	;wreg free
  2433  003114  51B3               	movf	(??_doWork+6)& (0+255),w,b
  2434  003116  257E               	addwf	?___fltol& (0+255),w,b
  2435  003118  6FB7               	movwf	(??_doWork+10)& (0+255),b
  2436  00311A  51B4               	movf	(??_doWork+7)& (0+255),w,b
  2437  00311C  217F               	addwfc	(?___fltol+1)& (0+255),w,b
  2438  00311E  6FB8               	movwf	(??_doWork+11)& (0+255),b
  2439  003120  51B5               	movf	(??_doWork+8)& (0+255),w,b
  2440  003122  2180               	addwfc	(?___fltol+2)& (0+255),w,b
  2441  003124  6FB9               	movwf	(??_doWork+12)& (0+255),b
  2442  003126  51B6               	movf	(??_doWork+9)& (0+255),w,b
  2443  003128  2181               	addwfc	(?___fltol+3)& (0+255),w,b
  2444  00312A  6FBA               	movwf	(??_doWork+13)& (0+255),b
  2445  00312C  51AF               	movf	(??_doWork+2)& (0+255),w,b
  2446  00312E  25B7               	addwf	(??_doWork+10)& (0+255),w,b
  2447  003130  6F86               	movwf	?___aldiv& (0+255),b
  2448  003132  51B0               	movf	(??_doWork+3)& (0+255),w,b
  2449  003134  21B8               	addwfc	(??_doWork+11)& (0+255),w,b
  2450  003136  6F87               	movwf	(?___aldiv+1)& (0+255),b
  2451  003138  51B1               	movf	(??_doWork+4)& (0+255),w,b
  2452  00313A  21B9               	addwfc	(??_doWork+12)& (0+255),w,b
  2453  00313C  6F88               	movwf	(?___aldiv+2)& (0+255),b
  2454  00313E  51B2               	movf	(??_doWork+5)& (0+255),w,b
  2455  003140  21BA               	addwfc	(??_doWork+13)& (0+255),w,b
  2456  003142  6F89               	movwf	(?___aldiv+3)& (0+255),b
  2457  003144  0E02               	movlw	2
  2458  003146  6F8A               	movwf	(?___aldiv+4)& (0+255),b
  2459  003148  0E00               	movlw	0
  2460  00314A  6B8B               	clrf	(?___aldiv+5)& (0+255),b
  2461  00314C  6B8C               	clrf	(?___aldiv+6)& (0+255),b
  2462  00314E  6B8D               	clrf	(?___aldiv+7)& (0+255),b
  2463  003150  ECFA  F020         	call	___aldiv	;wreg free
  2464  003154  0101               	movlb	1	; () banked
  2465  003156  51A9               	movf	doWork@i& (0+255),w,b
  2466  003158  0D02               	mullw	2
  2467  00315A  EC37  F013         	call	PL2	;call to abstracted procedure
  2468  00315E  0100               	movlb	0	; () banked
  2469  003160  C086  FFDE         	movff	?___aldiv,postinc2
  2470  003164  C087  FFDD         	movff	?___aldiv+1,postdec2
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;main.c: 515: }
  2474                           ;main.c: 518: adc_conversion_flags &= ~(1 << i);
  2475                           
  2476                           ;main.c: 496: }
  2477  003168  C1A9  F0AD         	movff	doWork@i,??_doWork
  2478  00316C  0E01               	movlw	1
  2479  00316E  6FAE               	movwf	(??_doWork+1)& (0+255),b
  2480  003170  2BAD               	incf	??_doWork& (0+255),f,b
  2481  003172  D002               	goto	u8654
  2482  003174                     u8655:
  2483  003174  90D8               	bcf	status,0,c
  2484  003176  37AE               	rlcf	(??_doWork+1)& (0+255),f,b
  2485  003178                     u8654:
  2486  003178  2FAD               	decfsz	??_doWork& (0+255),f,b
  2487  00317A  D7FC               	goto	u8655
  2488  00317C  1DAE               	comf	(??_doWork+1)& (0+255),w,b
  2489  00317E  17C4               	andwf	_adc_conversion_flags& (0+255),f,b
  2490  003180                     l10403:
  2491                           
  2492                           ; BSR set to: 0
  2493  003180  0101               	movlb	1	; () banked
  2494  003182  2BA9               	incf	doWork@i& (0+255),f,b
  2495                           
  2496                           ; BSR set to: 1
  2497  003184  0E05               	movlw	5
  2498  003186  65A9               	cpfsgt	doWork@i& (0+255),b
  2499  003188  D607               	goto	l10349
  2500                           
  2501                           ; BSR set to: 1
  2502  00318A  0C05               	retlw	5
  2503  00318C                     __end_of_doWork:
  2504                           	opt stack 0
  2505  00318C                     PL52:
  2506                           	opt stack 22
  2507  00318C  0100               	movlb	0	; () banked
  2508  00318E  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2509  003190  0E40               	movlw	64
  2510  003192  6F6D               	movwf	(?___flmul+5)& (0+255),b
  2511  003194  0E1C               	movlw	28
  2512  003196  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2513  003198  0E46               	movlw	70
  2514  00319A  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2515  00319C  0C46               	retlw	70
  2516  00319E                     __end_ofPL52:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           prodh	equ	0xFF4
  2523                           prodl	equ	0xFF3
  2524                           intcon	equ	0xFF2
  2525                           postinc0	equ	0xFEE
  2526                           wreg	equ	0xFE8
  2527                           indf1	equ	0xFE7
  2528                           postdec1	equ	0xFE5
  2529                           fsr1h	equ	0xFE2
  2530                           fsr1l	equ	0xFE1
  2531                           indf2	equ	0xFDF
  2532                           postinc2	equ	0xFDE
  2533                           postdec2	equ	0xFDD
  2534                           plusw2	equ	0xFDB
  2535                           fsr2h	equ	0xFDA
  2536                           fsr2l	equ	0xFD9
  2537                           status	equ	0xFD8
  2538                           
  2539 ;; *************** function ___lwtofl *****************
  2540 ;; Defined at:
  2541 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;  c               2   25[COMRAM] unsigned int 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;		None
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  4   25[COMRAM] unsigned int 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2555 ;;      Params:         4       0       0       0       0       0       0
  2556 ;;      Locals:         0       0       0       0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0
  2558 ;;      Totals:         4       0       0       0       0       0       0
  2559 ;;Total ram usage:        4 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    3
  2562 ;; This function calls:
  2563 ;;		___flpack
  2564 ;; This function is called by:
  2565 ;;		_doWork
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           	psect	text2
  2570  0051A6                     __ptext2:
  2571                           	opt stack 0
  2572  0051A6                     ___lwtofl:
  2573                           	opt stack 25
  2574                           
  2575                           ; BSR set to: 1
  2576                           ;incstack = 0
  2577                           ;incstack = 0
  2578  0051A6  C01A  F00E         	movff	___lwtofl@c,?___flpack
  2579  0051AA  C01B  F00F         	movff	___lwtofl@c+1,?___flpack+1
  2580  0051AE  6A10               	clrf	?___flpack+2,c
  2581  0051B0  6A11               	clrf	?___flpack+3,c
  2582  0051B2  0E96               	movlw	150
  2583  0051B4  6E12               	movwf	?___flpack+4,c
  2584  0051B6  0E00               	movlw	0
  2585  0051B8  6A13               	clrf	?___flpack+5,c
  2586  0051BA  EC58  F021         	call	___flpack	;wreg free
  2587  0051BE  C011  F01D         	movff	?___flpack+3,?___lwtofl+3
  2588  0051C2  C010  F01C         	movff	?___flpack+2,?___lwtofl+2
  2589  0051C6  C00F  F01B         	movff	?___flpack+1,?___lwtofl+1
  2590  0051CA  C00E  F01A         	movff	?___flpack,?___lwtofl
  2591  0051CE  0012               	return	
  2592  0051D0                     __end_of___lwtofl:
  2593                           	opt stack 0
  2594                           tblptru	equ	0xFF8
  2595                           tblptrh	equ	0xFF7
  2596                           tblptrl	equ	0xFF6
  2597                           tablat	equ	0xFF5
  2598                           prodh	equ	0xFF4
  2599                           prodl	equ	0xFF3
  2600                           intcon	equ	0xFF2
  2601                           postinc0	equ	0xFEE
  2602                           wreg	equ	0xFE8
  2603                           indf1	equ	0xFE7
  2604                           postdec1	equ	0xFE5
  2605                           fsr1h	equ	0xFE2
  2606                           fsr1l	equ	0xFE1
  2607                           indf2	equ	0xFDF
  2608                           postinc2	equ	0xFDE
  2609                           postdec2	equ	0xFDD
  2610                           plusw2	equ	0xFDB
  2611                           fsr2h	equ	0xFDA
  2612                           fsr2l	equ	0xFD9
  2613                           status	equ	0xFD8
  2614                           
  2615 ;; *************** function ___asfldiv *****************
  2616 ;; Defined at:
  2617 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  f1p             2    8[BANK0 ] PTR 
  2620 ;;		 -> doWork@avarage(4), 
  2621 ;;  f2              4   10[BANK0 ] PTR 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;		None
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  4    8[BANK0 ] PTR 
  2626 ;; Registers used:
  2627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2628 ;; Tracked objects:
  2629 ;;		On entry : F/0
  2630 ;;		On exit  : F/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2633 ;;      Params:         0       6       0       0       0       0       0
  2634 ;;      Locals:         0       0       0       0       0       0       0
  2635 ;;      Temps:          0       0       0       0       0       0       0
  2636 ;;      Totals:         0       6       0       0       0       0       0
  2637 ;;Total ram usage:        6 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    4
  2640 ;; This function calls:
  2641 ;;		___fldiv
  2642 ;; This function is called by:
  2643 ;;		_doWork
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           	psect	text3
  2648  004C54                     __ptext3:
  2649                           	opt stack 0
  2650  004C54                     ___asfldiv:
  2651                           	opt stack 24
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;	Return value of ___asfldiv is never used
  2655                           
  2656                           ;incstack = 0
  2657                           ;incstack = 0
  2658  004C54  C068  FFD9         	movff	___asfldiv@f1p,fsr2l
  2659  004C58  C069  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2660  004C5C  CFDE F060          	movff	postinc2,?___fldiv
  2661  004C60  CFDE F061          	movff	postinc2,?___fldiv+1
  2662  004C64  CFDE F062          	movff	postinc2,?___fldiv+2
  2663  004C68  CFDE F063          	movff	postinc2,?___fldiv+3
  2664  004C6C  C06A  F064         	movff	___asfldiv@f2,?___fldiv+4
  2665  004C70  C06B  F065         	movff	___asfldiv@f2+1,?___fldiv+5
  2666  004C74  C06C  F066         	movff	___asfldiv@f2+2,?___fldiv+6
  2667  004C78  C06D  F067         	movff	___asfldiv@f2+3,?___fldiv+7
  2668  004C7C  EC69  F022         	call	___fldiv	;wreg free
  2669  004C80  C068  FFD9         	movff	___asfldiv@f1p,fsr2l
  2670  004C84  C069  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2671  004C88  0100               	movlb	0	; () banked
  2672  004C8A  C060  FFDE         	movff	?___fldiv,postinc2
  2673  004C8E  C061  FFDE         	movff	?___fldiv+1,postinc2
  2674  004C92  C062  FFDE         	movff	?___fldiv+2,postinc2
  2675  004C96  C063  FFDD         	movff	?___fldiv+3,postdec2
  2676  004C9A  06D9               	decf	fsr2l,f,c
  2677  004C9C  06D9               	decf	fsr2l,f,c
  2678                           
  2679                           ; BSR set to: 0
  2680  004C9E  0012               	return	
  2681  004CA0                     __end_of___asfldiv:
  2682                           	opt stack 0
  2683                           tblptru	equ	0xFF8
  2684                           tblptrh	equ	0xFF7
  2685                           tblptrl	equ	0xFF6
  2686                           tablat	equ	0xFF5
  2687                           prodh	equ	0xFF4
  2688                           prodl	equ	0xFF3
  2689                           intcon	equ	0xFF2
  2690                           postinc0	equ	0xFEE
  2691                           wreg	equ	0xFE8
  2692                           indf1	equ	0xFE7
  2693                           postdec1	equ	0xFE5
  2694                           fsr1h	equ	0xFE2
  2695                           fsr1l	equ	0xFE1
  2696                           indf2	equ	0xFDF
  2697                           postinc2	equ	0xFDE
  2698                           postdec2	equ	0xFDD
  2699                           plusw2	equ	0xFDB
  2700                           fsr2h	equ	0xFDA
  2701                           fsr2l	equ	0xFD9
  2702                           status	equ	0xFD8
  2703                           
  2704 ;; *************** function ___asfladd *****************
  2705 ;; Defined at:
  2706 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;  f1p             2   44[COMRAM] PTR 
  2709 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  2710 ;;  f2              4   46[COMRAM] PTR 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  4   44[COMRAM] PTR 
  2715 ;; Registers used:
  2716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2722 ;;      Params:         6       0       0       0       0       0       0
  2723 ;;      Locals:         0       0       0       0       0       0       0
  2724 ;;      Temps:          0       0       0       0       0       0       0
  2725 ;;      Totals:         6       0       0       0       0       0       0
  2726 ;;Total ram usage:        6 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    4
  2729 ;; This function calls:
  2730 ;;		___fladd
  2731 ;; This function is called by:
  2732 ;;		_doWork
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text4
  2737  004DD0                     __ptext4:
  2738                           	opt stack 0
  2739  004DD0                     ___asfladd:
  2740                           	opt stack 24
  2741                           
  2742                           ;	Return value of ___asfladd is never used
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;incstack = 0
  2746                           ;incstack = 0
  2747  004DD0  C02D  FFD9         	movff	___asfladd@f1p,fsr2l
  2748  004DD4  C02E  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2749  004DD8  CFDE F01E          	movff	postinc2,?___fladd
  2750  004DDC  CFDE F01F          	movff	postinc2,?___fladd+1
  2751  004DE0  CFDE F020          	movff	postinc2,?___fladd+2
  2752  004DE4  CFDE F021          	movff	postinc2,?___fladd+3
  2753  004DE8  C02F  F022         	movff	___asfladd@f2,?___fladd+4
  2754  004DEC  C030  F023         	movff	___asfladd@f2+1,?___fladd+5
  2755  004DF0  C031  F024         	movff	___asfladd@f2+2,?___fladd+6
  2756  004DF4  C032  F025         	movff	___asfladd@f2+3,?___fladd+7
  2757  004DF8  EC4C  F01C         	call	___fladd	;wreg free
  2758  004DFC  C02D  FFD9         	movff	___asfladd@f1p,fsr2l
  2759  004E00  C02E  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2760  004E04  C01E  FFDE         	movff	?___fladd,postinc2
  2761  004E08  C01F  FFDE         	movff	?___fladd+1,postinc2
  2762  004E0C  C020  FFDE         	movff	?___fladd+2,postinc2
  2763  004E10  C021  FFDD         	movff	?___fladd+3,postdec2
  2764  004E14  06D9               	decf	fsr2l,f,c
  2765  004E16  06D9               	decf	fsr2l,f,c
  2766  004E18  0012               	return	
  2767  004E1A                     __end_of___asfladd:
  2768                           	opt stack 0
  2769                           tblptru	equ	0xFF8
  2770                           tblptrh	equ	0xFF7
  2771                           tblptrl	equ	0xFF6
  2772                           tablat	equ	0xFF5
  2773                           prodh	equ	0xFF4
  2774                           prodl	equ	0xFF3
  2775                           intcon	equ	0xFF2
  2776                           postinc0	equ	0xFEE
  2777                           wreg	equ	0xFE8
  2778                           indf1	equ	0xFE7
  2779                           postdec1	equ	0xFE5
  2780                           fsr1h	equ	0xFE2
  2781                           fsr1l	equ	0xFE1
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           plusw2	equ	0xFDB
  2786                           fsr2h	equ	0xFDA
  2787                           fsr2l	equ	0xFD9
  2788                           status	equ	0xFD8
  2789                           
  2790 ;; *************** function ___aldiv *****************
  2791 ;; Defined at:
  2792 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  dividend        4   38[BANK0 ] long 
  2795 ;;  divisor         4   42[BANK0 ] long 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  quotient        4   48[BANK0 ] long 
  2798 ;;  sign            1   47[BANK0 ] unsigned char 
  2799 ;;  counter         1   46[BANK0 ] unsigned char 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  4   38[BANK0 ] long 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0
  2804 ;; Tracked objects:
  2805 ;;		On entry : F/0
  2806 ;;		On exit  : F/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2809 ;;      Params:         0       8       0       0       0       0       0
  2810 ;;      Locals:         0       6       0       0       0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0
  2812 ;;      Totals:         0      14       0       0       0       0       0
  2813 ;;Total ram usage:       14 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    2
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_doWork
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text5
  2824  0041F4                     __ptext5:
  2825                           	opt stack 0
  2826  0041F4                     ___aldiv:
  2827                           	opt stack 26
  2828                           
  2829                           ; BSR set to: 0
  2830                           
  2831                           ;incstack = 0
  2832                           ;incstack = 0
  2833  0041F4  6B8F               	clrf	___aldiv@sign& (0+255),b
  2834  0041F6  AF8D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2835  0041F8  D00A               	goto	l11425
  2836                           
  2837                           ; BSR set to: 0
  2838  0041FA  1F8D               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2839  0041FC  1F8C               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2840  0041FE  1F8B               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2841  004200  6D8A               	negf	___aldiv@divisor& (0+255),b
  2842  004202  0E00               	movlw	0
  2843  004204  238B               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2844  004206  238C               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2845  004208  238D               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2846                           
  2847                           ; BSR set to: 0
  2848  00420A  0E01               	movlw	1
  2849  00420C  6F8F               	movwf	___aldiv@sign& (0+255),b
  2850  00420E                     l11425:
  2851                           
  2852                           ; BSR set to: 0
  2853  00420E  AF89               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2854  004210  D00A               	goto	l11431
  2855                           
  2856                           ; BSR set to: 0
  2857  004212  1F89               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2858  004214  1F88               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2859  004216  1F87               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2860  004218  6D86               	negf	___aldiv@dividend& (0+255),b
  2861  00421A  0E00               	movlw	0
  2862  00421C  2387               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2863  00421E  2388               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2864  004220  2389               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2865                           
  2866                           ; BSR set to: 0
  2867  004222  0E01               	movlw	1
  2868  004224  1B8F               	xorwf	___aldiv@sign& (0+255),f,b
  2869  004226                     l11431:
  2870                           
  2871                           ; BSR set to: 0
  2872  004226  6B90               	clrf	___aldiv@quotient& (0+255),b
  2873  004228  6B91               	clrf	(___aldiv@quotient+1)& (0+255),b
  2874  00422A  6B92               	clrf	(___aldiv@quotient+2)& (0+255),b
  2875  00422C  6B93               	clrf	(___aldiv@quotient+3)& (0+255),b
  2876                           
  2877                           ; BSR set to: 0
  2878  00422E  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2879  004230  118A               	iorwf	___aldiv@divisor& (0+255),w,b
  2880  004232  118B               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2881  004234  118C               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2882  004236  E029               	bz	l11453
  2883                           
  2884                           ; BSR set to: 0
  2885  004238  0E01               	movlw	1
  2886  00423A  6F8E               	movwf	___aldiv@counter& (0+255),b
  2887  00423C  D006               	goto	l11439
  2888  00423E                     l11437:
  2889                           
  2890                           ; BSR set to: 0
  2891  00423E  90D8               	bcf	status,0,c
  2892  004240  378A               	rlcf	___aldiv@divisor& (0+255),f,b
  2893  004242  378B               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2894  004244  378C               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2895  004246  378D               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2896  004248  2B8E               	incf	___aldiv@counter& (0+255),f,b
  2897  00424A                     l11439:
  2898                           
  2899                           ; BSR set to: 0
  2900  00424A  AF8D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2901  00424C  D7F8               	goto	l11437
  2902  00424E                     l11441:
  2903                           
  2904                           ; BSR set to: 0
  2905  00424E  90D8               	bcf	status,0,c
  2906  004250  3790               	rlcf	___aldiv@quotient& (0+255),f,b
  2907  004252  3791               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2908  004254  3792               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2909  004256  3793               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2910                           
  2911                           ; BSR set to: 0
  2912  004258  518A               	movf	___aldiv@divisor& (0+255),w,b
  2913  00425A  5D86               	subwf	___aldiv@dividend& (0+255),w,b
  2914  00425C  518B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2915  00425E  5987               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2916  004260  518C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2917  004262  5988               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2918  004264  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2919  004266  5989               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2920  004268  E309               	bnc	l11449
  2921                           
  2922                           ; BSR set to: 0
  2923  00426A  518A               	movf	___aldiv@divisor& (0+255),w,b
  2924  00426C  5F86               	subwf	___aldiv@dividend& (0+255),f,b
  2925  00426E  518B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2926  004270  5B87               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2927  004272  518C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2928  004274  5B88               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2929  004276  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2930  004278  5B89               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2931                           
  2932                           ; BSR set to: 0
  2933  00427A  8190               	bsf	___aldiv@quotient& (0+255),0,b
  2934  00427C                     l11449:
  2935                           
  2936                           ; BSR set to: 0
  2937  00427C  90D8               	bcf	status,0,c
  2938  00427E  338D               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2939  004280  338C               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2940  004282  338B               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2941  004284  338A               	rrcf	___aldiv@divisor& (0+255),f,b
  2942                           
  2943                           ; BSR set to: 0
  2944  004286  2F8E               	decfsz	___aldiv@counter& (0+255),f,b
  2945  004288  D7E2               	goto	l11441
  2946  00428A                     l11453:
  2947                           
  2948                           ; BSR set to: 0
  2949  00428A  518F               	movf	___aldiv@sign& (0+255),w,b
  2950  00428C  E008               	bz	l11457
  2951                           
  2952                           ; BSR set to: 0
  2953  00428E  1F93               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2954  004290  1F92               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2955  004292  1F91               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2956  004294  6D90               	negf	___aldiv@quotient& (0+255),b
  2957  004296  0E00               	movlw	0
  2958  004298  2391               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2959  00429A  2392               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2960  00429C  2393               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2961  00429E                     l11457:
  2962                           
  2963                           ; BSR set to: 0
  2964  00429E  C090  F086         	movff	___aldiv@quotient,?___aldiv
  2965  0042A2  C091  F087         	movff	___aldiv@quotient+1,?___aldiv+1
  2966  0042A6  C092  F088         	movff	___aldiv@quotient+2,?___aldiv+2
  2967  0042AA  C093  F089         	movff	___aldiv@quotient+3,?___aldiv+3
  2968                           
  2969                           ; BSR set to: 0
  2970  0042AE  0012               	return	
  2971  0042B0                     __end_of___aldiv:
  2972                           	opt stack 0
  2973                           tblptru	equ	0xFF8
  2974                           tblptrh	equ	0xFF7
  2975                           tblptrl	equ	0xFF6
  2976                           tablat	equ	0xFF5
  2977                           prodh	equ	0xFF4
  2978                           prodl	equ	0xFF3
  2979                           intcon	equ	0xFF2
  2980                           postinc0	equ	0xFEE
  2981                           wreg	equ	0xFE8
  2982                           indf1	equ	0xFE7
  2983                           postdec1	equ	0xFE5
  2984                           fsr1h	equ	0xFE2
  2985                           fsr1l	equ	0xFE1
  2986                           indf2	equ	0xFDF
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           plusw2	equ	0xFDB
  2990                           fsr2h	equ	0xFDA
  2991                           fsr2l	equ	0xFD9
  2992                           status	equ	0xFD8
  2993                           
  2994 ;; *************** function _getCalibrationValue *****************
  2995 ;; Defined at:
  2996 ;;		line 878 in file "../main.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  i               1    wreg     unsigned char 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  i               1   34[COMRAM] unsigned char 
  3001 ;;  cal             2   32[COMRAM] short 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  2   25[COMRAM] short 
  3004 ;; Registers used:
  3005 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : F/1
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3011 ;;      Params:         2       0       0       0       0       0       0
  3012 ;;      Locals:         3       0       0       0       0       0       0
  3013 ;;      Temps:          5       0       0       0       0       0       0
  3014 ;;      Totals:        10       0       0       0       0       0       0
  3015 ;;Total ram usage:       10 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    3
  3018 ;; This function calls:
  3019 ;;		_readEEPROM
  3020 ;; This function is called by:
  3021 ;;		_doWork
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text6
  3026  004B9C                     __ptext6:
  3027                           	opt stack 0
  3028  004B9C                     _getCalibrationValue:
  3029                           	opt stack 25
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;incstack = 0
  3033                           ;incstack = 0
  3034                           ;getCalibrationValue@i stored from wreg
  3035  004B9C  CFE8 F023          	movff	wreg,getCalibrationValue@i
  3036                           
  3037                           ; BSR set to: 1
  3038                           ;main.c: 879: int16_t cal;
  3039                           ;main.c: 881: cal = ((uint8_t)readEEPROM(2 * i + 0x9E))<<8 +
  3040                           ;main.c: 882: readEEPROM(2 * i + 0x9F);
  3041  004BA0  5023               	movf	getCalibrationValue@i,w,c
  3042  004BA2  0D02               	mullw	2
  3043  004BA4  0E9F               	movlw	159
  3044  004BA6  24F3               	addwf	prodl,w,c
  3045  004BA8  6E16               	movwf	?_readEEPROM,c
  3046  004BAA  0E00               	movlw	0
  3047  004BAC  20F4               	addwfc	prodh,w,c
  3048  004BAE  6E17               	movwf	?_readEEPROM+1,c
  3049  004BB0  EC27  F02A         	call	_readEEPROM	;wreg free
  3050  004BB4  6E1C               	movwf	??_getCalibrationValue& (0+255),c
  3051  004BB6  0E08               	movlw	8
  3052  004BB8  261C               	addwf	??_getCalibrationValue,f,c
  3053  004BBA  90D8               	bcf	status,0,c
  3054  004BBC  3423               	rlcf	getCalibrationValue@i,w,c
  3055  004BBE  6E1D               	movwf	(??_getCalibrationValue+1)& (0+255),c
  3056  004BC0  6A1E               	clrf	(??_getCalibrationValue+2)& (0+255),c
  3057  004BC2  361E               	rlcf	(??_getCalibrationValue+2)& (0+255),f,c
  3058  004BC4  0E9E               	movlw	158
  3059  004BC6  241D               	addwf	??_getCalibrationValue+1,w,c
  3060  004BC8  6E16               	movwf	?_readEEPROM,c
  3061  004BCA  0E00               	movlw	0
  3062  004BCC  201E               	addwfc	??_getCalibrationValue+2,w,c
  3063  004BCE  6E17               	movwf	?_readEEPROM+1,c
  3064  004BD0  EC27  F02A         	call	_readEEPROM	;wreg free
  3065  004BD4  6E1F               	movwf	(??_getCalibrationValue+3)& (0+255),c
  3066  004BD6  6A20               	clrf	(??_getCalibrationValue+4)& (0+255),c
  3067  004BD8  2A1C               	incf	??_getCalibrationValue,f,c
  3068  004BDA  D003               	goto	u8764
  3069  004BDC                     u8765:
  3070  004BDC  90D8               	bcf	status,0,c
  3071  004BDE  361F               	rlcf	??_getCalibrationValue+3,f,c
  3072  004BE0  3620               	rlcf	??_getCalibrationValue+4,f,c
  3073  004BE2                     u8764:
  3074  004BE2  2E1C               	decfsz	??_getCalibrationValue,f,c
  3075  004BE4  D7FB               	goto	u8765
  3076  004BE6  C01F  F021         	movff	??_getCalibrationValue+3,getCalibrationValue@cal
  3077  004BEA  C020  F022         	movff	??_getCalibrationValue+4,getCalibrationValue@cal+1
  3078                           
  3079                           ;main.c: 884: return cal;
  3080  004BEE  C021  F01A         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3081  004BF2  C022  F01B         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3082  004BF6  0012               	return	
  3083  004BF8                     __end_of_getCalibrationValue:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           prodh	equ	0xFF4
  3090                           prodl	equ	0xFF3
  3091                           intcon	equ	0xFF2
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           indf1	equ	0xFE7
  3095                           postdec1	equ	0xFE5
  3096                           fsr1h	equ	0xFE2
  3097                           fsr1l	equ	0xFE1
  3098                           indf2	equ	0xFDF
  3099                           postinc2	equ	0xFDE
  3100                           postdec2	equ	0xFDD
  3101                           plusw2	equ	0xFDB
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function _log *****************
  3107 ;; Defined at:
  3108 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  x               4   41[BANK0 ] short 
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  exponent        2   67[COMRAM] int 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  4   41[BANK0 ] int 
  3115 ;; Registers used:
  3116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/1
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3122 ;;      Params:         0       4       0       0       0       0       0
  3123 ;;      Locals:         2       0       0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0
  3125 ;;      Totals:         2       4       0       0       0       0       0
  3126 ;;Total ram usage:        6 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    5
  3129 ;; This function calls:
  3130 ;;		___fladd
  3131 ;;		___flmul
  3132 ;;		___awtofl
  3133 ;;		_eval_poly
  3134 ;;		_frexp
  3135 ;; This function is called by:
  3136 ;;		_doWork
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text7
  3141  0039EE                     __ptext7:
  3142                           	opt stack 0
  3143  0039EE                     _log:
  3144                           	opt stack 23
  3145                           
  3146                           ;incstack = 0
  3147                           ;incstack = 0
  3148  0039EE  0100               	movlb	0	; () banked
  3149  0039F0  BF8C               	btfsc	(log@x+3)& (0+255),7,b
  3150  0039F2  D007               	goto	u8750
  3151                           
  3152                           ; BSR set to: 0
  3153                           
  3154                           ; BSR set to: 0
  3155  0039F4  EE20  F089         	lfsr	2,log@x
  3156  0039F8  50DE               	movf	postinc2,w,c
  3157  0039FA  10DE               	iorwf	postinc2,w,c
  3158  0039FC  10DE               	iorwf	postinc2,w,c
  3159  0039FE  10DE               	iorwf	postinc2,w,c
  3160  003A00  E105               	bnz	l10457
  3161  003A02                     u8750:
  3162                           
  3163                           ; BSR set to: 0
  3164  003A02  6B89               	clrf	?_log& (0+255),b
  3165  003A04  6B8A               	clrf	(?_log+1)& (0+255),b
  3166  003A06  6B8B               	clrf	(?_log+2)& (0+255),b
  3167  003A08  6B8C               	clrf	(?_log+3)& (0+255),b
  3168  003A0A  D087               	goto	l1870
  3169  003A0C                     l10457:
  3170                           
  3171                           ; BSR set to: 0
  3172  003A0C  6B6C               	clrf	(?___flmul+4)& (0+255),b
  3173  003A0E  6B6D               	clrf	(?___flmul+5)& (0+255),b
  3174  003A10  6B6E               	clrf	(?___flmul+6)& (0+255),b
  3175  003A12  0E40               	movlw	64
  3176  003A14  6F6F               	movwf	(?___flmul+7)& (0+255),b
  3177  003A16  0E44               	movlw	low log@exponent
  3178  003A18  6E12               	movwf	?_frexp+4,c
  3179  003A1A  0E00               	movlw	high log@exponent
  3180  003A1C  6E13               	movwf	?_frexp+5,c
  3181  003A1E  0E0F               	movlw	15
  3182  003A20  6E13               	movwf	?_frexp+5,c
  3183  003A22  0E5F               	movlw	__accesstop+-1
  3184  003A24  6412               	cpfsgt	?_frexp+4,c
  3185  003A26  6A13               	clrf	?_frexp+5,c
  3186  003A28  C089  F00E         	movff	log@x,?_frexp
  3187  003A2C  C08A  F00F         	movff	log@x+1,?_frexp+1
  3188  003A30  C08B  F010         	movff	log@x+2,?_frexp+2
  3189  003A34  C08C  F011         	movff	log@x+3,?_frexp+3
  3190  003A38  EC57  F024         	call	_frexp	;wreg free
  3191  003A3C  C011  F06B         	movff	?_frexp+3,?___flmul+3
  3192  003A40  C010  F06A         	movff	?_frexp+2,?___flmul+2
  3193  003A44  C00F  F069         	movff	?_frexp+1,?___flmul+1
  3194  003A48  C00E  F068         	movff	?_frexp,?___flmul
  3195  003A4C  EC35  F020         	call	___flmul	;wreg free
  3196  003A50  C06B  F021         	movff	?___flmul+3,?___fladd+3
  3197  003A54  C06A  F020         	movff	?___flmul+2,?___fladd+2
  3198  003A58  C069  F01F         	movff	?___flmul+1,?___fladd+1
  3199  003A5C  C068  F01E         	movff	?___flmul,?___fladd
  3200  003A60  6A22               	clrf	?___fladd+4,c
  3201  003A62  6A23               	clrf	?___fladd+5,c
  3202  003A64  0E80               	movlw	128
  3203  003A66  6E24               	movwf	?___fladd+6,c
  3204  003A68  0EBF               	movlw	191
  3205  003A6A  6E25               	movwf	?___fladd+7,c
  3206  003A6C  EC4C  F01C         	call	___fladd	;wreg free
  3207  003A70  C021  F08C         	movff	?___fladd+3,log@x+3
  3208  003A74  C020  F08B         	movff	?___fladd+2,log@x+2
  3209  003A78  C01F  F08A         	movff	?___fladd+1,log@x+1
  3210  003A7C  C01E  F089         	movff	?___fladd,log@x
  3211  003A80  0644               	decf	log@exponent,f,c
  3212  003A82  A0D8               	btfss	status,0,c
  3213  003A84  0645               	decf	log@exponent+1,f,c
  3214  003A86  C089  F07E         	movff	log@x,?_eval_poly
  3215  003A8A  C08A  F07F         	movff	log@x+1,?_eval_poly+1
  3216  003A8E  C08B  F080         	movff	log@x+2,?_eval_poly+2
  3217  003A92  C08C  F081         	movff	log@x+3,?_eval_poly+3
  3218  003A96  0E48               	movlw	low log@coeff
  3219  003A98  0100               	movlb	0	; () banked
  3220  003A9A  6F82               	movwf	(?_eval_poly+4)& (0+255),b
  3221  003A9C  6B84               	clrf	(?_eval_poly+6)& (0+255),b
  3222  003A9E  0E08               	movlw	8
  3223  003AA0  6F83               	movwf	(?_eval_poly+5)& (0+255),b
  3224  003AA2  ECB6  F021         	call	_eval_poly	;wreg free
  3225  003AA6  C081  F08C         	movff	?_eval_poly+3,log@x+3
  3226  003AAA  C080  F08B         	movff	?_eval_poly+2,log@x+2
  3227  003AAE  C07F  F08A         	movff	?_eval_poly+1,log@x+1
  3228  003AB2  C07E  F089         	movff	?_eval_poly,log@x
  3229                           
  3230                           ; BSR set to: 0
  3231  003AB6  0E18               	movlw	24
  3232  003AB8  6F6C               	movwf	(?___flmul+4)& (0+255),b
  3233  003ABA  0E72               	movlw	114
  3234  003ABC  6F6D               	movwf	(?___flmul+5)& (0+255),b
  3235  003ABE  0E31               	movlw	49
  3236  003AC0  6F6E               	movwf	(?___flmul+6)& (0+255),b
  3237  003AC2  0E3F               	movlw	63
  3238  003AC4  6F6F               	movwf	(?___flmul+7)& (0+255),b
  3239  003AC6  C044  F018         	movff	log@exponent,?___awtofl
  3240  003ACA  C045  F019         	movff	log@exponent+1,?___awtofl+1
  3241  003ACE  EC36  F028         	call	___awtofl	;wreg free
  3242  003AD2  C01B  F06B         	movff	?___awtofl+3,?___flmul+3
  3243  003AD6  C01A  F06A         	movff	?___awtofl+2,?___flmul+2
  3244  003ADA  C019  F069         	movff	?___awtofl+1,?___flmul+1
  3245  003ADE  C018  F068         	movff	?___awtofl,?___flmul
  3246  003AE2  EC35  F020         	call	___flmul	;wreg free
  3247  003AE6  C06B  F021         	movff	?___flmul+3,?___fladd+3
  3248  003AEA  C06A  F020         	movff	?___flmul+2,?___fladd+2
  3249  003AEE  C069  F01F         	movff	?___flmul+1,?___fladd+1
  3250  003AF2  C068  F01E         	movff	?___flmul,?___fladd
  3251  003AF6  C089  F022         	movff	log@x,?___fladd+4
  3252  003AFA  C08A  F023         	movff	log@x+1,?___fladd+5
  3253  003AFE  C08B  F024         	movff	log@x+2,?___fladd+6
  3254  003B02  C08C  F025         	movff	log@x+3,?___fladd+7
  3255  003B06  EC4C  F01C         	call	___fladd	;wreg free
  3256  003B0A  C021  F08C         	movff	?___fladd+3,?_log+3
  3257  003B0E  C020  F08B         	movff	?___fladd+2,?_log+2
  3258  003B12  C01F  F08A         	movff	?___fladd+1,?_log+1
  3259  003B16  C01E  F089         	movff	?___fladd,?_log
  3260  003B1A                     l1870:
  3261  003B1A  0012               	return	
  3262  003B1C                     __end_of_log:
  3263                           	opt stack 0
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           intcon	equ	0xFF2
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           indf1	equ	0xFE7
  3274                           postdec1	equ	0xFE5
  3275                           fsr1h	equ	0xFE2
  3276                           fsr1l	equ	0xFE1
  3277                           indf2	equ	0xFDF
  3278                           postinc2	equ	0xFDE
  3279                           postdec2	equ	0xFDD
  3280                           plusw2	equ	0xFDB
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _exp *****************
  3286 ;; Defined at:
  3287 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  x               4   66[BANK0 ] int 
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  exponent        2   74[BANK0 ] int 
  3292 ;;  sign            1   76[BANK0 ] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  4   66[BANK0 ] unsigned char 
  3295 ;; Registers used:
  3296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/1
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3302 ;;      Params:         0       4       0       0       0       0       0
  3303 ;;      Locals:         0       7       0       0       0       0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0
  3305 ;;      Totals:         0      11       0       0       0       0       0
  3306 ;;Total ram usage:       11 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    6
  3309 ;; This function calls:
  3310 ;;		___fldiv
  3311 ;;		___asflmul
  3312 ;;		___asflsub
  3313 ;;		___awtofl
  3314 ;;		_floor
  3315 ;;		_eval_poly
  3316 ;;		_ldexp
  3317 ;;		___flge
  3318 ;;		___flneg
  3319 ;;		___fltol
  3320 ;; This function is called by:
  3321 ;;		_doWork
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text8
  3326  0033AE                     __ptext8:
  3327                           	opt stack 0
  3328  0033AE                     _exp:
  3329                           	opt stack 22
  3330                           
  3331                           ;incstack = 0
  3332                           ;incstack = 0
  3333  0033AE  0100               	movlb	0	; () banked
  3334  0033B0  EE20  F0A2         	lfsr	2,exp@x
  3335  0033B4  50DE               	movf	postinc2,w,c
  3336  0033B6  10DE               	iorwf	postinc2,w,c
  3337  0033B8  10DE               	iorwf	postinc2,w,c
  3338  0033BA  10DE               	iorwf	postinc2,w,c
  3339  0033BC  E107               	bnz	l10419
  3340                           
  3341                           ; BSR set to: 0
  3342  0033BE  0E00               	movlw	0
  3343  0033C0  6FA2               	movwf	?_exp& (0+255),b
  3344  0033C2  6FA3               	movwf	(?_exp+1)& (0+255),b
  3345  0033C4  0E80               	movlw	128
  3346  0033C6  6FA4               	movwf	(?_exp+2)& (0+255),b
  3347  0033C8  0E3F               	movlw	63
  3348  0033CA  D018               	goto	L1
  3349  0033CC                     l10419:
  3350                           
  3351                           ; BSR set to: 0
  3352  0033CC  0E18               	movlw	24
  3353  0033CE  6E0E               	movwf	?___flge,c
  3354  0033D0  0E72               	movlw	114
  3355  0033D2  6E0F               	movwf	?___flge+1,c
  3356  0033D4  0E31               	movlw	49
  3357  0033D6  6E10               	movwf	?___flge+2,c
  3358  0033D8  0E44               	movlw	68
  3359  0033DA  6E11               	movwf	?___flge+3,c
  3360  0033DC  C0A2  F012         	movff	exp@x,?___flge+4
  3361  0033E0  C0A3  F013         	movff	exp@x+1,?___flge+5
  3362  0033E4  C0A4  F014         	movff	exp@x+2,?___flge+6
  3363  0033E8  C0A5  F015         	movff	exp@x+3,?___flge+7
  3364  0033EC  EC50  F026         	call	___flge	;wreg free
  3365  0033F0  E207               	bc	l10425
  3366  0033F2  0100               	movlb	0	; () banked
  3367  0033F4  69A2               	setf	?_exp& (0+255),b
  3368  0033F6  69A3               	setf	(?_exp+1)& (0+255),b
  3369  0033F8  0E7F               	movlw	127
  3370  0033FA  6FA4               	movwf	(?_exp+2)& (0+255),b
  3371  0033FC                     L1:
  3372  0033FC  6FA5               	movwf	(?_exp+3)& (0+255),b
  3373  0033FE  D0C9               	goto	l1578
  3374  003400                     l10425:
  3375  003400  C0A2  F00E         	movff	exp@x,?___flge
  3376  003404  C0A3  F00F         	movff	exp@x+1,?___flge+1
  3377  003408  C0A4  F010         	movff	exp@x+2,?___flge+2
  3378  00340C  C0A5  F011         	movff	exp@x+3,?___flge+3
  3379  003410  0E87               	movlw	135
  3380  003412  6E12               	movwf	?___flge+4,c
  3381  003414  0E48               	movlw	72
  3382  003416  6E13               	movwf	?___flge+5,c
  3383  003418  0E3A               	movlw	58
  3384  00341A  6E14               	movwf	?___flge+6,c
  3385  00341C  0EC4               	movlw	196
  3386  00341E  6E15               	movwf	?___flge+7,c
  3387  003420  EC50  F026         	call	___flge	;wreg free
  3388  003424  E202               	bc	l10429
  3389  003426  0100               	movlb	0	; () banked
  3390  003428  D08E               	goto	u8730
  3391  00342A                     l10429:
  3392  00342A  0100               	movlb	0	; () banked
  3393  00342C  0E01               	movlw	1
  3394  00342E  AFA5               	btfss	(exp@x+3)& (0+255),7,b
  3395  003430  0E00               	movlw	0
  3396  003432  6FAC               	movwf	exp@sign& (0+255),b
  3397  003434  51AC               	movf	exp@sign& (0+255),w,b
  3398  003436  E012               	bz	l1581
  3399                           
  3400                           ; BSR set to: 0
  3401  003438  C0A2  F00E         	movff	exp@x,?___flneg
  3402  00343C  C0A3  F00F         	movff	exp@x+1,?___flneg+1
  3403  003440  C0A4  F010         	movff	exp@x+2,?___flneg+2
  3404  003444  C0A5  F011         	movff	exp@x+3,?___flneg+3
  3405  003448  EC4C  F029         	call	___flneg	;wreg free
  3406  00344C  C011  F0A5         	movff	?___flneg+3,exp@x+3
  3407  003450  C010  F0A4         	movff	?___flneg+2,exp@x+2
  3408  003454  C00F  F0A3         	movff	?___flneg+1,exp@x+1
  3409  003458  C00E  F0A2         	movff	?___flneg,exp@x
  3410  00345C                     l1581:
  3411                           
  3412                           ; BSR set to: 0
  3413  00345C  0E3B               	movlw	59
  3414  00345E  6F7E               	movwf	?___asflmul& (0+255),b
  3415  003460  0EAA               	movlw	170
  3416  003462  6F7F               	movwf	(?___asflmul+1)& (0+255),b
  3417  003464  0EB8               	movlw	184
  3418  003466  6F80               	movwf	(?___asflmul+2)& (0+255),b
  3419  003468  0E3F               	movlw	63
  3420  00346A  6F81               	movwf	(?___asflmul+3)& (0+255),b
  3421  00346C  0EA2               	movlw	exp@x& (0+255)
  3422  00346E  EC76  F026         	call	___asflmul
  3423  003472  C0A2  F098         	movff	exp@x,?_floor
  3424  003476  C0A3  F099         	movff	exp@x+1,?_floor+1
  3425  00347A  C0A4  F09A         	movff	exp@x+2,?_floor+2
  3426  00347E  C0A5  F09B         	movff	exp@x+3,?_floor+3
  3427  003482  ECB7  F01F         	call	_floor	;wreg free
  3428  003486  C09B  F0A9         	movff	?_floor+3,_exp$2294+3
  3429  00348A  C09A  F0A8         	movff	?_floor+2,_exp$2294+2
  3430  00348E  C099  F0A7         	movff	?_floor+1,_exp$2294+1
  3431  003492  C098  F0A6         	movff	?_floor,_exp$2294
  3432  003496  C0A6  F07E         	movff	_exp$2294,?___fltol
  3433  00349A  C0A7  F07F         	movff	_exp$2294+1,?___fltol+1
  3434  00349E  C0A8  F080         	movff	_exp$2294+2,?___fltol+2
  3435  0034A2  C0A9  F081         	movff	_exp$2294+3,?___fltol+3
  3436  0034A6  EC6B  F023         	call	___fltol	;wreg free
  3437  0034AA  C07E  F0AA         	movff	?___fltol,exp@exponent
  3438  0034AE  C07F  F0AB         	movff	?___fltol+1,exp@exponent+1
  3439                           
  3440                           ; BSR set to: 0
  3441  0034B2  0E00               	movlw	high exp@x
  3442  0034B4  6E36               	movwf	?___asflsub+1,c
  3443  0034B6  0EA2               	movlw	low exp@x
  3444  0034B8  6E35               	movwf	?___asflsub,c
  3445  0034BA  C0AA  F018         	movff	exp@exponent,?___awtofl
  3446  0034BE  C0AB  F019         	movff	exp@exponent+1,?___awtofl+1
  3447  0034C2  EC36  F028         	call	___awtofl	;wreg free
  3448  0034C6  C01B  F03A         	movff	?___awtofl+3,?___asflsub+5
  3449  0034CA  C01A  F039         	movff	?___awtofl+2,?___asflsub+4
  3450  0034CE  C019  F038         	movff	?___awtofl+1,?___asflsub+3
  3451  0034D2  C018  F037         	movff	?___awtofl,?___asflsub+2
  3452  0034D6  EC0D  F027         	call	___asflsub	;wreg free
  3453  0034DA  C0A2  F07E         	movff	exp@x,?_eval_poly
  3454  0034DE  C0A3  F07F         	movff	exp@x+1,?_eval_poly+1
  3455  0034E2  C0A4  F080         	movff	exp@x+2,?_eval_poly+2
  3456  0034E6  C0A5  F081         	movff	exp@x+3,?_eval_poly+3
  3457  0034EA  0E20               	movlw	low exp@coeff
  3458  0034EC  0100               	movlb	0	; () banked
  3459  0034EE  6F82               	movwf	(?_eval_poly+4)& (0+255),b
  3460  0034F0  6B84               	clrf	(?_eval_poly+6)& (0+255),b
  3461  0034F2  0E09               	movlw	9
  3462  0034F4  6F83               	movwf	(?_eval_poly+5)& (0+255),b
  3463  0034F6  ECB6  F021         	call	_eval_poly	;wreg free
  3464  0034FA  C081  F08C         	movff	?_eval_poly+3,?_ldexp+3
  3465  0034FE  C080  F08B         	movff	?_eval_poly+2,?_ldexp+2
  3466  003502  C07F  F08A         	movff	?_eval_poly+1,?_ldexp+1
  3467  003506  C07E  F089         	movff	?_eval_poly,?_ldexp
  3468  00350A  C0AA  F08D         	movff	exp@exponent,?_ldexp+4
  3469  00350E  C0AB  F08E         	movff	exp@exponent+1,?_ldexp+5
  3470  003512  EC19  F023         	call	_ldexp	;wreg free
  3471  003516  C08C  F0A5         	movff	?_ldexp+3,exp@x+3
  3472  00351A  C08B  F0A4         	movff	?_ldexp+2,exp@x+2
  3473  00351E  C08A  F0A3         	movff	?_ldexp+1,exp@x+1
  3474  003522  C089  F0A2         	movff	?_ldexp,exp@x
  3475                           
  3476                           ; BSR set to: 0
  3477  003526  51AC               	movf	exp@sign& (0+255),w,b
  3478  003528  E02C               	bz	l1582
  3479                           
  3480                           ; BSR set to: 0
  3481  00352A  EE20  F0A2         	lfsr	2,exp@x
  3482  00352E  0EFF               	movlw	255
  3483  003530  18DE               	xorwf	postinc2,w,c
  3484  003532  0EFF               	movlw	255
  3485  003534  B4D8               	btfsc	status,2,c
  3486  003536  18DE               	xorwf	postinc2,w,c
  3487  003538  0E7F               	movlw	127
  3488  00353A  B4D8               	btfsc	status,2,c
  3489  00353C  18DE               	xorwf	postinc2,w,c
  3490  00353E  0E7F               	movlw	127
  3491  003540  B4D8               	btfsc	status,2,c
  3492  003542  18DE               	xorwf	postinc2,w,c
  3493  003544  E105               	bnz	l10445
  3494  003546                     u8730:
  3495                           
  3496                           ; BSR set to: 0
  3497  003546  6BA2               	clrf	?_exp& (0+255),b
  3498  003548  6BA3               	clrf	(?_exp+1)& (0+255),b
  3499  00354A  6BA4               	clrf	(?_exp+2)& (0+255),b
  3500  00354C  6BA5               	clrf	(?_exp+3)& (0+255),b
  3501  00354E  D021               	goto	l1578
  3502  003550                     l10445:
  3503                           
  3504                           ; BSR set to: 0
  3505  003550  6B60               	clrf	?___fldiv& (0+255),b
  3506  003552  6B61               	clrf	(?___fldiv+1)& (0+255),b
  3507  003554  0E80               	movlw	128
  3508  003556  6F62               	movwf	(?___fldiv+2)& (0+255),b
  3509  003558  0E3F               	movlw	63
  3510  00355A  6F63               	movwf	(?___fldiv+3)& (0+255),b
  3511  00355C  C0A2  F064         	movff	exp@x,?___fldiv+4
  3512  003560  C0A3  F065         	movff	exp@x+1,?___fldiv+5
  3513  003564  C0A4  F066         	movff	exp@x+2,?___fldiv+6
  3514  003568  C0A5  F067         	movff	exp@x+3,?___fldiv+7
  3515  00356C  EC69  F022         	call	___fldiv	;wreg free
  3516  003570  C063  F0A5         	movff	?___fldiv+3,?_exp+3
  3517  003574  C062  F0A4         	movff	?___fldiv+2,?_exp+2
  3518  003578  C061  F0A3         	movff	?___fldiv+1,?_exp+1
  3519  00357C  C060  F0A2         	movff	?___fldiv,?_exp
  3520  003580  D008               	goto	l1578
  3521  003582                     l1582:
  3522                           
  3523                           ; BSR set to: 0
  3524  003582  C0A2  F0A2         	movff	exp@x,?_exp
  3525  003586  C0A3  F0A3         	movff	exp@x+1,?_exp+1
  3526  00358A  C0A4  F0A4         	movff	exp@x+2,?_exp+2
  3527  00358E  C0A5  F0A5         	movff	exp@x+3,?_exp+3
  3528  003592                     l1578:
  3529  003592  0012               	return	
  3530  003594                     __end_of_exp:
  3531                           	opt stack 0
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           prodh	equ	0xFF4
  3537                           prodl	equ	0xFF3
  3538                           intcon	equ	0xFF2
  3539                           postinc0	equ	0xFEE
  3540                           wreg	equ	0xFE8
  3541                           indf1	equ	0xFE7
  3542                           postdec1	equ	0xFE5
  3543                           fsr1h	equ	0xFE2
  3544                           fsr1l	equ	0xFE1
  3545                           indf2	equ	0xFDF
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           plusw2	equ	0xFDB
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553 ;; *************** function ___flneg *****************
  3554 ;; Defined at:
  3555 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  f1              4   13[COMRAM] unsigned char 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  4   13[COMRAM] unsigned char 
  3562 ;; Registers used:
  3563 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3564 ;; Tracked objects:
  3565 ;;		On entry : F/0
  3566 ;;		On exit  : F/0
  3567 ;;		Unchanged: F/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3569 ;;      Params:         4       0       0       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0
  3572 ;;      Totals:         4       0       0       0       0       0       0
  3573 ;;Total ram usage:        4 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    2
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_exp
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text9
  3584  005298                     __ptext9:
  3585                           	opt stack 0
  3586  005298                     ___flneg:
  3587                           	opt stack 25
  3588                           
  3589                           ; BSR set to: 0
  3590                           
  3591                           ;incstack = 0
  3592                           ;incstack = 0
  3593  005298  EE20  F00E         	lfsr	2,___flneg@f1
  3594  00529C  50DE               	movf	postinc2,w,c
  3595  00529E  10DE               	iorwf	postinc2,w,c
  3596  0052A0  10DE               	iorwf	postinc2,w,c
  3597  0052A2  10DE               	iorwf	postinc2,w,c
  3598  0052A4  E002               	bz	l11727
  3599                           
  3600                           ; BSR set to: 0
  3601  0052A6  0E80               	movlw	128
  3602  0052A8  1A11               	xorwf	___flneg@f1+3,f,c
  3603  0052AA                     l11727:
  3604                           
  3605                           ; BSR set to: 0
  3606  0052AA  C00E  F00E         	movff	___flneg@f1,?___flneg
  3607  0052AE  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  3608  0052B2  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  3609  0052B6  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  3610                           
  3611                           ; BSR set to: 0
  3612  0052BA  0012               	return	
  3613  0052BC                     __end_of___flneg:
  3614                           	opt stack 0
  3615                           tblptru	equ	0xFF8
  3616                           tblptrh	equ	0xFF7
  3617                           tblptrl	equ	0xFF6
  3618                           tablat	equ	0xFF5
  3619                           prodh	equ	0xFF4
  3620                           prodl	equ	0xFF3
  3621                           intcon	equ	0xFF2
  3622                           postinc0	equ	0xFEE
  3623                           wreg	equ	0xFE8
  3624                           indf1	equ	0xFE7
  3625                           postdec1	equ	0xFE5
  3626                           fsr1h	equ	0xFE2
  3627                           fsr1l	equ	0xFE1
  3628                           indf2	equ	0xFDF
  3629                           postinc2	equ	0xFDE
  3630                           postdec2	equ	0xFDD
  3631                           plusw2	equ	0xFDB
  3632                           fsr2h	equ	0xFDA
  3633                           fsr2l	equ	0xFD9
  3634                           status	equ	0xFD8
  3635                           
  3636 ;; *************** function _ldexp *****************
  3637 ;; Defined at:
  3638 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  value           4   41[BANK0 ] unsigned char 
  3641 ;;  newexp          2   45[BANK0 ] int 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;		None
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  4   41[BANK0 ] int 
  3646 ;; Registers used:
  3647 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3648 ;; Tracked objects:
  3649 ;;		On entry : F/0
  3650 ;;		On exit  : F/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3653 ;;      Params:         0       6       0       0       0       0       0
  3654 ;;      Locals:         0       0       0       0       0       0       0
  3655 ;;      Temps:          0       3       0       0       0       0       0
  3656 ;;      Totals:         0       9       0       0       0       0       0
  3657 ;;Total ram usage:        9 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; Hardware stack levels required when called:    2
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_exp
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text10
  3668  004632                     __ptext10:
  3669                           	opt stack 0
  3670  004632                     _ldexp:
  3671                           	opt stack 25
  3672                           
  3673                           ; BSR set to: 0
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;incstack = 0
  3677                           ;incstack = 0
  3678  004632  EE20  F089         	lfsr	2,ldexp@value
  3679  004636  50DE               	movf	postinc2,w,c
  3680  004638  10DE               	iorwf	postinc2,w,c
  3681  00463A  10DE               	iorwf	postinc2,w,c
  3682  00463C  10DE               	iorwf	postinc2,w,c
  3683  00463E  E014               	bz	u10110
  3684                           
  3685                           ; BSR set to: 0
  3686                           
  3687                           ; BSR set to: 0
  3688  004640  518C               	movf	(ldexp@value+3)& (0+255),w,b
  3689  004642  0B7F               	andlw	127
  3690  004644  6F8F               	movwf	??_ldexp& (0+255),b
  3691  004646  90D8               	bcf	status,0,c
  3692  004648  358F               	rlcf	??_ldexp& (0+255),w,b
  3693  00464A  6F90               	movwf	(??_ldexp+1)& (0+255),b
  3694  00464C  6B91               	clrf	(??_ldexp+2)& (0+255),b
  3695  00464E  3791               	rlcf	(??_ldexp+2)& (0+255),f,b
  3696  004650  5190               	movf	(??_ldexp+1)& (0+255),w,b
  3697  004652  278D               	addwf	ldexp@newexp& (0+255),f,b
  3698  004654  5191               	movf	(??_ldexp+2)& (0+255),w,b
  3699  004656  238E               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3700  004658  358B               	rlcf	(ldexp@value+2)& (0+255),w,b
  3701  00465A  36E8               	rlcf	wreg,f,c
  3702  00465C  0B01               	andlw	1
  3703  00465E  278D               	addwf	ldexp@newexp& (0+255),f,b
  3704  004660  0E00               	movlw	0
  3705  004662  238E               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3706                           
  3707                           ; BSR set to: 0
  3708  004664  AF8E               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3709  004666  D005               	goto	l11689
  3710  004668                     u10110:
  3711                           
  3712                           ; BSR set to: 0
  3713  004668  6B89               	clrf	?_ldexp& (0+255),b
  3714  00466A  6B8A               	clrf	(?_ldexp+1)& (0+255),b
  3715  00466C  6B8B               	clrf	(?_ldexp+2)& (0+255),b
  3716  00466E  6B8C               	clrf	(?_ldexp+3)& (0+255),b
  3717  004670  D031               	goto	l1703
  3718  004672                     l11689:
  3719                           
  3720                           ; BSR set to: 0
  3721  004672  518E               	movf	(ldexp@newexp+1)& (0+255),w,b
  3722  004674  0A80               	xorlw	128
  3723  004676  0F7F               	addlw	-129
  3724  004678  0E00               	movlw	0
  3725  00467A  B4D8               	btfsc	status,2,c
  3726  00467C  5D8D               	subwf	ldexp@newexp& (0+255),w,b
  3727  00467E  E30E               	bnc	l11703
  3728                           
  3729                           ; BSR set to: 0
  3730  004680  AF8C               	btfss	(ldexp@value+3)& (0+255),7,b
  3731  004682  D006               	goto	l11699
  3732                           
  3733                           ; BSR set to: 0
  3734  004684  6989               	setf	?_ldexp& (0+255),b
  3735  004686  698A               	setf	(?_ldexp+1)& (0+255),b
  3736  004688  0E7F               	movlw	127
  3737  00468A  6F8B               	movwf	(?_ldexp+2)& (0+255),b
  3738  00468C  0EFF               	movlw	255
  3739  00468E  D004               	goto	L2
  3740  004690                     l11699:
  3741                           
  3742                           ; BSR set to: 0
  3743  004690  6989               	setf	?_ldexp& (0+255),b
  3744  004692  698A               	setf	(?_ldexp+1)& (0+255),b
  3745  004694  0E7F               	movlw	127
  3746  004696  6F8B               	movwf	(?_ldexp+2)& (0+255),b
  3747  004698                     L2:
  3748  004698  6F8C               	movwf	(?_ldexp+3)& (0+255),b
  3749  00469A  D01C               	goto	l1703
  3750  00469C                     l11703:
  3751                           
  3752                           ; BSR set to: 0
  3753  00469C  358E               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3754  00469E  318E               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3755  0046A0  6F90               	movwf	(??_ldexp+1)& (0+255),b
  3756  0046A2  318D               	rrcf	ldexp@newexp& (0+255),w,b
  3757  0046A4  6F8F               	movwf	??_ldexp& (0+255),b
  3758  0046A6  198C               	xorwf	(ldexp@value+3)& (0+255),w,b
  3759  0046A8  0B80               	andlw	-128
  3760  0046AA  198F               	xorwf	??_ldexp& (0+255),w,b
  3761  0046AC  6F8C               	movwf	(ldexp@value+3)& (0+255),b
  3762  0046AE  C08D  F08F         	movff	ldexp@newexp,??_ldexp
  3763  0046B2  0E01               	movlw	1
  3764  0046B4  178F               	andwf	??_ldexp& (0+255),f,b
  3765  0046B6  338F               	rrcf	??_ldexp& (0+255),f,b
  3766  0046B8  338F               	rrcf	??_ldexp& (0+255),f,b
  3767  0046BA  518B               	movf	(ldexp@value+2)& (0+255),w,b
  3768  0046BC  198F               	xorwf	??_ldexp& (0+255),w,b
  3769  0046BE  0B7F               	andlw	-129
  3770  0046C0  198F               	xorwf	??_ldexp& (0+255),w,b
  3771  0046C2  6F8B               	movwf	(ldexp@value+2)& (0+255),b
  3772                           
  3773                           ; BSR set to: 0
  3774  0046C4  C089  F089         	movff	ldexp@value,?_ldexp
  3775  0046C8  C08A  F08A         	movff	ldexp@value+1,?_ldexp+1
  3776  0046CC  C08B  F08B         	movff	ldexp@value+2,?_ldexp+2
  3777  0046D0  C08C  F08C         	movff	ldexp@value+3,?_ldexp+3
  3778  0046D4                     l1703:
  3779                           
  3780                           ; BSR set to: 0
  3781  0046D4  0012               	return	
  3782  0046D6                     __end_of_ldexp:
  3783                           	opt stack 0
  3784                           tblptru	equ	0xFF8
  3785                           tblptrh	equ	0xFF7
  3786                           tblptrl	equ	0xFF6
  3787                           tablat	equ	0xFF5
  3788                           prodh	equ	0xFF4
  3789                           prodl	equ	0xFF3
  3790                           intcon	equ	0xFF2
  3791                           postinc0	equ	0xFEE
  3792                           wreg	equ	0xFE8
  3793                           indf1	equ	0xFE7
  3794                           postdec1	equ	0xFE5
  3795                           fsr1h	equ	0xFE2
  3796                           fsr1l	equ	0xFE1
  3797                           indf2	equ	0xFDF
  3798                           postinc2	equ	0xFDE
  3799                           postdec2	equ	0xFDD
  3800                           plusw2	equ	0xFDB
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function _eval_poly *****************
  3806 ;; Defined at:
  3807 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  x               4   30[BANK0 ] int 
  3810 ;;  d               1   34[BANK0 ] PTR const 
  3811 ;;		 -> log@coeff(36), exp@coeff(40), 
  3812 ;;  n               2   35[BANK0 ] int 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  res             4   37[BANK0 ] int 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  4   30[BANK0 ] int 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : F/0
  3821 ;;		On exit  : F/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3824 ;;      Params:         0       7       0       0       0       0       0
  3825 ;;      Locals:         0       4       0       0       0       0       0
  3826 ;;      Temps:          1       0       0       0       0       0       0
  3827 ;;      Totals:         1      11       0       0       0       0       0
  3828 ;;Total ram usage:       12 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    4
  3831 ;; This function calls:
  3832 ;;		___fladd
  3833 ;;		___flmul
  3834 ;; This function is called by:
  3835 ;;		_exp
  3836 ;;		_log
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text11
  3841  00436C                     __ptext11:
  3842                           	opt stack 0
  3843  00436C                     _eval_poly:
  3844                           	opt stack 23
  3845                           
  3846                           ; BSR set to: 0
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;incstack = 0
  3850                           ;incstack = 0
  3851  00436C  5183               	movf	eval_poly@n& (0+255),w,b
  3852  00436E  D84E               	call	PL34	;call to abstracted procedure
  3853  004370  CFF5 F085          	movff	tablat,eval_poly@res
  3854  004374  0009               	tblrd		*+
  3855  004376  CFF5 F086          	movff	tablat,eval_poly@res+1
  3856  00437A  0009               	tblrd		*+
  3857  00437C  CFF5 F087          	movff	tablat,eval_poly@res+2
  3858  004380  000A               	tblrd		*-
  3859  004382  CFF5 F088          	movff	tablat,eval_poly@res+3
  3860  004386  D035               	goto	l11675
  3861  004388                     l11673:
  3862                           
  3863                           ; BSR set to: 0
  3864  004388  C085  F06C         	movff	eval_poly@res,?___flmul+4
  3865  00438C  C086  F06D         	movff	eval_poly@res+1,?___flmul+5
  3866  004390  C087  F06E         	movff	eval_poly@res+2,?___flmul+6
  3867  004394  C088  F06F         	movff	eval_poly@res+3,?___flmul+7
  3868  004398  C07E  F068         	movff	eval_poly@x,?___flmul
  3869  00439C  C07F  F069         	movff	eval_poly@x+1,?___flmul+1
  3870  0043A0  C080  F06A         	movff	eval_poly@x+2,?___flmul+2
  3871  0043A4  C081  F06B         	movff	eval_poly@x+3,?___flmul+3
  3872  0043A8  EC35  F020         	call	___flmul	;wreg free
  3873  0043AC  C06B  F021         	movff	?___flmul+3,?___fladd+3
  3874  0043B0  C06A  F020         	movff	?___flmul+2,?___fladd+2
  3875  0043B4  C069  F01F         	movff	?___flmul+1,?___fladd+1
  3876  0043B8  C068  F01E         	movff	?___flmul,?___fladd
  3877  0043BC  0100               	movlb	0	; () banked
  3878  0043BE  0783               	decf	eval_poly@n& (0+255),f,b
  3879  0043C0  A0D8               	btfss	status,0,c
  3880  0043C2  0784               	decf	(eval_poly@n+1)& (0+255),f,b
  3881  0043C4  5183               	movf	eval_poly@n& (0+255),w,b
  3882  0043C6  D822               	call	PL34	;call to abstracted procedure
  3883  0043C8  CFF5 F022          	movff	tablat,?___fladd+4
  3884  0043CC  0009               	tblrd		*+
  3885  0043CE  CFF5 F023          	movff	tablat,?___fladd+5
  3886  0043D2  0009               	tblrd		*+
  3887  0043D4  CFF5 F024          	movff	tablat,?___fladd+6
  3888  0043D8  000A               	tblrd		*-
  3889  0043DA  CFF5 F025          	movff	tablat,?___fladd+7
  3890  0043DE  EC4C  F01C         	call	___fladd	;wreg free
  3891  0043E2  C021  F088         	movff	?___fladd+3,eval_poly@res+3
  3892  0043E6  C020  F087         	movff	?___fladd+2,eval_poly@res+2
  3893  0043EA  C01F  F086         	movff	?___fladd+1,eval_poly@res+1
  3894  0043EE  C01E  F085         	movff	?___fladd,eval_poly@res
  3895  0043F2                     l11675:
  3896  0043F2  0100               	movlb	0	; () banked
  3897  0043F4  5184               	movf	(eval_poly@n+1)& (0+255),w,b
  3898  0043F6  1183               	iorwf	eval_poly@n& (0+255),w,b
  3899  0043F8  E1C7               	bnz	l11673
  3900                           
  3901                           ; BSR set to: 0
  3902  0043FA  C085  F07E         	movff	eval_poly@res,?_eval_poly
  3903  0043FE  C086  F07F         	movff	eval_poly@res+1,?_eval_poly+1
  3904  004402  C087  F080         	movff	eval_poly@res+2,?_eval_poly+2
  3905  004406  C088  F081         	movff	eval_poly@res+3,?_eval_poly+3
  3906                           
  3907                           ; BSR set to: 0
  3908  00440A  0012               	return	
  3909  00440C                     __end_of_eval_poly:
  3910                           	opt stack 0
  3911  00440C                     PL34:
  3912                           	opt stack 23
  3913  00440C  0D04               	mullw	4
  3914  00440E  5182               	movf	eval_poly@d& (0+255),w,b
  3915  004410  24F3               	addwf	prodl,w,c
  3916  004412  6E43               	movwf	??_eval_poly& (0+255),c
  3917  004414  C043  FFF6         	movff	??_eval_poly,tblptrl
  3918  004418  0E06               	movlw	high __smallconst
  3919  00441A  6EF7               	movwf	tblptrh,c
  3920  00441C  0009               	tblrd		*+
  3921  00441E  0012               	return	
  3922  004420                     __end_ofPL34:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           postinc0	equ	0xFEE
  3932                           wreg	equ	0xFE8
  3933                           indf1	equ	0xFE7
  3934                           postdec1	equ	0xFE5
  3935                           fsr1h	equ	0xFE2
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           plusw2	equ	0xFDB
  3941                           fsr2h	equ	0xFDA
  3942                           fsr2l	equ	0xFD9
  3943                           status	equ	0xFD8
  3944                           
  3945 ;; *************** function _floor *****************
  3946 ;; Defined at:
  3947 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  x               4   56[BANK0 ] int 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  i               4   60[BANK0 ] int 
  3952 ;;  expon           2   64[BANK0 ] int 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  4   56[BANK0 ] int 
  3955 ;; Registers used:
  3956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : F/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3962 ;;      Params:         0       4       0       0       0       0       0
  3963 ;;      Locals:         0       6       0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0
  3965 ;;      Totals:         0      10       0       0       0       0       0
  3966 ;;Total ram usage:       10 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    4
  3969 ;; This function calls:
  3970 ;;		___altofl
  3971 ;;		___fladd
  3972 ;;		___flge
  3973 ;;		_frexp
  3974 ;;		___fltol
  3975 ;; This function is called by:
  3976 ;;		_exp
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text12
  3981  003F6E                     __ptext12:
  3982                           	opt stack 0
  3983  003F6E                     _floor:
  3984                           	opt stack 23
  3985                           
  3986                           ; BSR set to: 0
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;incstack = 0
  3990                           ;incstack = 0
  3991  003F6E  C098  F00E         	movff	floor@x,?_frexp
  3992  003F72  C099  F00F         	movff	floor@x+1,?_frexp+1
  3993  003F76  C09A  F010         	movff	floor@x+2,?_frexp+2
  3994  003F7A  C09B  F011         	movff	floor@x+3,?_frexp+3
  3995  003F7E  0E00               	movlw	high floor@expon
  3996  003F80  6E13               	movwf	?_frexp+5,c
  3997  003F82  0EA0               	movlw	low floor@expon
  3998  003F84  6E12               	movwf	?_frexp+4,c
  3999  003F86  EC57  F024         	call	_frexp	;wreg free
  4000                           
  4001                           ; BSR set to: 0
  4002  003F8A  AFA1               	btfss	(floor@expon+1)& (0+255),7,b
  4003  003F8C  D00F               	goto	l11661
  4004                           
  4005                           ; BSR set to: 0
  4006  003F8E  AF9B               	btfss	(floor@x+3)& (0+255),7,b
  4007  003F90  D008               	goto	l1671
  4008                           
  4009                           ; BSR set to: 0
  4010  003F92  0E00               	movlw	0
  4011  003F94  6F98               	movwf	?_floor& (0+255),b
  4012  003F96  6F99               	movwf	(?_floor+1)& (0+255),b
  4013  003F98  0E80               	movlw	128
  4014  003F9A  6F9A               	movwf	(?_floor+2)& (0+255),b
  4015  003F9C  0EBF               	movlw	191
  4016  003F9E  6F9B               	movwf	(?_floor+3)& (0+255),b
  4017  003FA0  D063               	goto	l1672
  4018  003FA2                     l1671:
  4019                           
  4020                           ; BSR set to: 0
  4021  003FA2  6B98               	clrf	?_floor& (0+255),b
  4022  003FA4  6B99               	clrf	(?_floor+1)& (0+255),b
  4023  003FA6  6B9A               	clrf	(?_floor+2)& (0+255),b
  4024  003FA8  6B9B               	clrf	(?_floor+3)& (0+255),b
  4025  003FAA  D05E               	goto	l1672
  4026  003FAC                     l11661:
  4027                           
  4028                           ; BSR set to: 0
  4029  003FAC  0E1D               	movlw	29
  4030  003FAE  5DA0               	subwf	floor@expon& (0+255),w,b
  4031  003FB0  0E00               	movlw	0
  4032  003FB2  59A1               	subwfb	(floor@expon+1)& (0+255),w,b
  4033  003FB4  E309               	bnc	l11665
  4034                           
  4035                           ; BSR set to: 0
  4036  003FB6  C098  F098         	movff	floor@x,?_floor
  4037  003FBA  C099  F099         	movff	floor@x+1,?_floor+1
  4038  003FBE  C09A  F09A         	movff	floor@x+2,?_floor+2
  4039  003FC2  C09B  F09B         	movff	floor@x+3,?_floor+3
  4040  003FC6  D050               	goto	l1672
  4041  003FC8                     l11665:
  4042                           
  4043                           ; BSR set to: 0
  4044  003FC8  C098  F07E         	movff	floor@x,?___fltol
  4045  003FCC  C099  F07F         	movff	floor@x+1,?___fltol+1
  4046  003FD0  C09A  F080         	movff	floor@x+2,?___fltol+2
  4047  003FD4  C09B  F081         	movff	floor@x+3,?___fltol+3
  4048  003FD8  EC6B  F023         	call	___fltol	;wreg free
  4049  003FDC  C081  F097         	movff	?___fltol+3,?___altofl+3
  4050  003FE0  C080  F096         	movff	?___fltol+2,?___altofl+2
  4051  003FE4  C07F  F095         	movff	?___fltol+1,?___altofl+1
  4052  003FE8  C07E  F094         	movff	?___fltol,?___altofl
  4053  003FEC  EC32  F027         	call	___altofl	;wreg free
  4054  003FF0  C097  F09F         	movff	?___altofl+3,floor@i+3
  4055  003FF4  C096  F09E         	movff	?___altofl+2,floor@i+2
  4056  003FF8  C095  F09D         	movff	?___altofl+1,floor@i+1
  4057  003FFC  C094  F09C         	movff	?___altofl,floor@i
  4058  004000  C098  F00E         	movff	floor@x,?___flge
  4059  004004  C099  F00F         	movff	floor@x+1,?___flge+1
  4060  004008  C09A  F010         	movff	floor@x+2,?___flge+2
  4061  00400C  C09B  F011         	movff	floor@x+3,?___flge+3
  4062  004010  C09C  F012         	movff	floor@i,?___flge+4
  4063  004014  C09D  F013         	movff	floor@i+1,?___flge+5
  4064  004018  C09E  F014         	movff	floor@i+2,?___flge+6
  4065  00401C  C09F  F015         	movff	floor@i+3,?___flge+7
  4066  004020  EC50  F026         	call	___flge	;wreg free
  4067  004024  E219               	bc	l1674
  4068  004026  C09C  F01E         	movff	floor@i,?___fladd
  4069  00402A  C09D  F01F         	movff	floor@i+1,?___fladd+1
  4070  00402E  C09E  F020         	movff	floor@i+2,?___fladd+2
  4071  004032  C09F  F021         	movff	floor@i+3,?___fladd+3
  4072  004036  6A22               	clrf	?___fladd+4,c
  4073  004038  6A23               	clrf	?___fladd+5,c
  4074  00403A  0E80               	movlw	128
  4075  00403C  6E24               	movwf	?___fladd+6,c
  4076  00403E  0EBF               	movlw	191
  4077  004040  6E25               	movwf	?___fladd+7,c
  4078  004042  EC4C  F01C         	call	___fladd	;wreg free
  4079  004046  C021  F09B         	movff	?___fladd+3,?_floor+3
  4080  00404A  C020  F09A         	movff	?___fladd+2,?_floor+2
  4081  00404E  C01F  F099         	movff	?___fladd+1,?_floor+1
  4082  004052  C01E  F098         	movff	?___fladd,?_floor
  4083  004056  D008               	goto	l1672
  4084  004058                     l1674:
  4085  004058  C09C  F098         	movff	floor@i,?_floor
  4086  00405C  C09D  F099         	movff	floor@i+1,?_floor+1
  4087  004060  C09E  F09A         	movff	floor@i+2,?_floor+2
  4088  004064  C09F  F09B         	movff	floor@i+3,?_floor+3
  4089  004068                     l1672:
  4090  004068  0012               	return	
  4091  00406A                     __end_of_floor:
  4092                           	opt stack 0
  4093                           tblptru	equ	0xFF8
  4094                           tblptrh	equ	0xFF7
  4095                           tblptrl	equ	0xFF6
  4096                           tablat	equ	0xFF5
  4097                           prodh	equ	0xFF4
  4098                           prodl	equ	0xFF3
  4099                           intcon	equ	0xFF2
  4100                           postinc0	equ	0xFEE
  4101                           wreg	equ	0xFE8
  4102                           indf1	equ	0xFE7
  4103                           postdec1	equ	0xFE5
  4104                           fsr1h	equ	0xFE2
  4105                           fsr1l	equ	0xFE1
  4106                           indf2	equ	0xFDF
  4107                           postinc2	equ	0xFDE
  4108                           postdec2	equ	0xFDD
  4109                           plusw2	equ	0xFDB
  4110                           fsr2h	equ	0xFDA
  4111                           fsr2l	equ	0xFD9
  4112                           status	equ	0xFD8
  4113                           
  4114 ;; *************** function ___fltol *****************
  4115 ;; Defined at:
  4116 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  f1              4   30[BANK0 ] int 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  exp1            1   67[COMRAM] unsigned char 
  4121 ;;  sign1           1   66[COMRAM] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  4   30[BANK0 ] long 
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : F/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4131 ;;      Params:         0       4       0       0       0       0       0
  4132 ;;      Locals:         2       0       0       0       0       0       0
  4133 ;;      Temps:          0       4       0       0       0       0       0
  4134 ;;      Totals:         2       8       0       0       0       0       0
  4135 ;;Total ram usage:       10 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    2
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_doWork
  4142 ;;		_setEventData
  4143 ;;		_exp
  4144 ;;		_floor
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text13
  4149  0046D6                     __ptext13:
  4150                           	opt stack 0
  4151  0046D6                     ___fltol:
  4152                           	opt stack 26
  4153                           
  4154                           ;incstack = 0
  4155                           ;incstack = 0
  4156  0046D6  0100               	movlb	0	; () banked
  4157  0046D8  3580               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4158  0046DA  3581               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4159  0046DC  6E44               	movwf	___fltol@exp1,c
  4160  0046DE  6644               	tstfsz	___fltol@exp1& (0+255),c
  4161  0046E0  D006               	goto	l11755
  4162  0046E2                     l11753:
  4163  0046E2  0100               	movlb	0	; () banked
  4164  0046E4  6B7E               	clrf	?___fltol& (0+255),b
  4165  0046E6  6B7F               	clrf	(?___fltol+1)& (0+255),b
  4166  0046E8  6B80               	clrf	(?___fltol+2)& (0+255),b
  4167  0046EA  6B81               	clrf	(?___fltol+3)& (0+255),b
  4168  0046EC  D044               	goto	l1683
  4169  0046EE                     l11755:
  4170  0046EE  0100               	movlb	0	; () banked
  4171  0046F0  C07E  F082         	movff	___fltol@f1,??___fltol
  4172  0046F4  C07F  F083         	movff	___fltol@f1+1,??___fltol+1
  4173  0046F8  C080  F084         	movff	___fltol@f1+2,??___fltol+2
  4174  0046FC  C081  F085         	movff	___fltol@f1+3,??___fltol+3
  4175  004700  0E20               	movlw	32
  4176  004702  D005               	goto	u10200
  4177  004704                     u10205:
  4178  004704  90D8               	bcf	status,0,c
  4179  004706  3385               	rrcf	(??___fltol+3)& (0+255),f,b
  4180  004708  3384               	rrcf	(??___fltol+2)& (0+255),f,b
  4181  00470A  3383               	rrcf	(??___fltol+1)& (0+255),f,b
  4182  00470C  3382               	rrcf	??___fltol& (0+255),f,b
  4183  00470E                     u10200:
  4184  00470E  2EE8               	decfsz	wreg,f,c
  4185  004710  D7F9               	goto	u10205
  4186  004712  5182               	movf	??___fltol& (0+255),w,b
  4187  004714  6E43               	movwf	___fltol@sign1,c
  4188                           
  4189                           ; BSR set to: 0
  4190  004716  8F80               	bsf	(___fltol@f1+2)& (0+255),7,b
  4191                           
  4192                           ; BSR set to: 0
  4193  004718  6B81               	clrf	(___fltol@f1+3)& (0+255),b
  4194                           
  4195                           ; BSR set to: 0
  4196  00471A  0E96               	movlw	150
  4197  00471C  5E44               	subwf	___fltol@exp1,f,c
  4198                           
  4199                           ; BSR set to: 0
  4200  00471E  AE44               	btfss	___fltol@exp1,7,c
  4201  004720  D00C               	goto	l11773
  4202                           
  4203                           ; BSR set to: 0
  4204  004722  5044               	movf	___fltol@exp1,w,c
  4205  004724  0A80               	xorlw	128
  4206  004726  0F97               	addlw	151
  4207  004728  E3DC               	bnc	l11753
  4208  00472A                     l11769:
  4209                           
  4210                           ; BSR set to: 0
  4211  00472A  90D8               	bcf	status,0,c
  4212  00472C  3381               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4213  00472E  3380               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4214  004730  337F               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4215  004732  337E               	rrcf	___fltol@f1& (0+255),f,b
  4216                           
  4217                           ; BSR set to: 0
  4218  004734  3E44               	incfsz	___fltol@exp1,f,c
  4219  004736  D7F9               	goto	l11769
  4220  004738  D00C               	goto	l11781
  4221  00473A                     l11773:
  4222                           
  4223                           ; BSR set to: 0
  4224  00473A  0E1F               	movlw	31
  4225  00473C  6444               	cpfsgt	___fltol@exp1,c
  4226  00473E  D007               	goto	l11779
  4227  004740  D7D0               	goto	l11753
  4228  004742                     l11777:
  4229                           
  4230                           ; BSR set to: 0
  4231  004742  90D8               	bcf	status,0,c
  4232  004744  377E               	rlcf	___fltol@f1& (0+255),f,b
  4233  004746  377F               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4234  004748  3780               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4235  00474A  3781               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4236  00474C  0644               	decf	___fltol@exp1,f,c
  4237  00474E                     l11779:
  4238                           
  4239                           ; BSR set to: 0
  4240  00474E  6644               	tstfsz	___fltol@exp1,c
  4241  004750  D7F8               	goto	l11777
  4242  004752                     l11781:
  4243                           
  4244                           ; BSR set to: 0
  4245  004752  5043               	movf	___fltol@sign1,w,c
  4246  004754  E008               	bz	l11785
  4247                           
  4248                           ; BSR set to: 0
  4249  004756  1F81               	comf	(___fltol@f1+3)& (0+255),f,b
  4250  004758  1F80               	comf	(___fltol@f1+2)& (0+255),f,b
  4251  00475A  1F7F               	comf	(___fltol@f1+1)& (0+255),f,b
  4252  00475C  6D7E               	negf	___fltol@f1& (0+255),b
  4253  00475E  0E00               	movlw	0
  4254  004760  237F               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4255  004762  2380               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4256  004764  2381               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4257  004766                     l11785:
  4258                           
  4259                           ; BSR set to: 0
  4260  004766  C07E  F07E         	movff	___fltol@f1,?___fltol
  4261  00476A  C07F  F07F         	movff	___fltol@f1+1,?___fltol+1
  4262  00476E  C080  F080         	movff	___fltol@f1+2,?___fltol+2
  4263  004772  C081  F081         	movff	___fltol@f1+3,?___fltol+3
  4264  004776                     l1683:
  4265                           
  4266                           ; BSR set to: 0
  4267  004776  0012               	return	
  4268  004778                     __end_of___fltol:
  4269                           	opt stack 0
  4270                           tblptru	equ	0xFF8
  4271                           tblptrh	equ	0xFF7
  4272                           tblptrl	equ	0xFF6
  4273                           tablat	equ	0xFF5
  4274                           prodh	equ	0xFF4
  4275                           prodl	equ	0xFF3
  4276                           intcon	equ	0xFF2
  4277                           postinc0	equ	0xFEE
  4278                           wreg	equ	0xFE8
  4279                           indf1	equ	0xFE7
  4280                           postdec1	equ	0xFE5
  4281                           fsr1h	equ	0xFE2
  4282                           fsr1l	equ	0xFE1
  4283                           indf2	equ	0xFDF
  4284                           postinc2	equ	0xFDE
  4285                           postdec2	equ	0xFDD
  4286                           plusw2	equ	0xFDB
  4287                           fsr2h	equ	0xFDA
  4288                           fsr2l	equ	0xFD9
  4289                           status	equ	0xFD8
  4290                           
  4291 ;; *************** function _frexp *****************
  4292 ;; Defined at:
  4293 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;  value           4   13[COMRAM] long 
  4296 ;;  eptr            2   17[COMRAM] PTR int 
  4297 ;;		 -> log@exponent(2), floor@expon(2), 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  4   13[COMRAM] PTR int 
  4302 ;; Registers used:
  4303 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4304 ;; Tracked objects:
  4305 ;;		On entry : F/0
  4306 ;;		On exit  : F/0
  4307 ;;		Unchanged: F/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4309 ;;      Params:         6       0       0       0       0       0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0
  4311 ;;      Temps:          3       0       0       0       0       0       0
  4312 ;;      Totals:         9       0       0       0       0       0       0
  4313 ;;Total ram usage:        9 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    2
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_floor
  4320 ;;		_log
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text14
  4325  0048AE                     __ptext14:
  4326                           	opt stack 0
  4327  0048AE                     _frexp:
  4328                           	opt stack 25
  4329                           
  4330                           ; BSR set to: 0
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;incstack = 0
  4334                           ;incstack = 0
  4335  0048AE  EE20  F00E         	lfsr	2,frexp@value
  4336  0048B2  50DE               	movf	postinc2,w,c
  4337  0048B4  10DE               	iorwf	postinc2,w,c
  4338  0048B6  10DE               	iorwf	postinc2,w,c
  4339  0048B8  10DE               	iorwf	postinc2,w,c
  4340  0048BA  E10C               	bnz	l11739
  4341                           
  4342                           ; BSR set to: 0
  4343  0048BC  C012  FFD9         	movff	frexp@eptr,fsr2l
  4344  0048C0  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4345  0048C4  0E00               	movlw	0
  4346  0048C6  6ADE               	clrf	postinc2,c
  4347  0048C8  6ADD               	clrf	postdec2,c
  4348                           
  4349                           ; BSR set to: 0
  4350  0048CA  6A0E               	clrf	?_frexp,c
  4351  0048CC  6A0F               	clrf	?_frexp+1,c
  4352  0048CE  6A10               	clrf	?_frexp+2,c
  4353  0048D0  6A11               	clrf	?_frexp+3,c
  4354  0048D2  D02F               	goto	l1699
  4355  0048D4                     l11739:
  4356                           
  4357                           ; BSR set to: 0
  4358  0048D4  5011               	movf	frexp@value+3,w,c
  4359  0048D6  0B7F               	andlw	127
  4360  0048D8  6E14               	movwf	??_frexp& (0+255),c
  4361  0048DA  90D8               	bcf	status,0,c
  4362  0048DC  3414               	rlcf	??_frexp,w,c
  4363  0048DE  6E15               	movwf	(??_frexp+1)& (0+255),c
  4364  0048E0  6A16               	clrf	(??_frexp+2)& (0+255),c
  4365  0048E2  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  4366  0048E4  C012  FFD9         	movff	frexp@eptr,fsr2l
  4367  0048E8  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4368  0048EC  C015  FFDE         	movff	??_frexp+1,postinc2
  4369  0048F0  C016  FFDD         	movff	??_frexp+2,postdec2
  4370  0048F4  3410               	rlcf	frexp@value+2,w,c
  4371  0048F6  36E8               	rlcf	wreg,f,c
  4372  0048F8  0B01               	andlw	1
  4373  0048FA  C012  FFD9         	movff	frexp@eptr,fsr2l
  4374  0048FE  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4375  004902  12DE               	iorwf	postinc2,f,c
  4376  004904  0E00               	movlw	0
  4377  004906  12DD               	iorwf	postdec2,f,c
  4378                           
  4379                           ; BSR set to: 0
  4380  004908  C012  FFD9         	movff	frexp@eptr,fsr2l
  4381  00490C  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4382  004910  0E82               	movlw	130
  4383  004912  26DE               	addwf	postinc2,f,c
  4384  004914  0EFF               	movlw	255
  4385  004916  22DD               	addwfc	postdec2,f,c
  4386                           
  4387                           ; BSR set to: 0
  4388  004918  5011               	movf	frexp@value+3,w,c
  4389  00491A  0B80               	andlw	-128
  4390  00491C  093F               	iorlw	63
  4391  00491E  6E11               	movwf	frexp@value+3,c
  4392                           
  4393                           ; BSR set to: 0
  4394  004920  9E10               	bcf	frexp@value+2,7,c
  4395                           
  4396                           ; BSR set to: 0
  4397  004922  C00E  F00E         	movff	frexp@value,?_frexp
  4398  004926  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4399  00492A  C010  F010         	movff	frexp@value+2,?_frexp+2
  4400  00492E  C011  F011         	movff	frexp@value+3,?_frexp+3
  4401  004932                     l1699:
  4402                           
  4403                           ; BSR set to: 0
  4404  004932  0012               	return	
  4405  004934                     __end_of_frexp:
  4406                           	opt stack 0
  4407                           tblptru	equ	0xFF8
  4408                           tblptrh	equ	0xFF7
  4409                           tblptrl	equ	0xFF6
  4410                           tablat	equ	0xFF5
  4411                           prodh	equ	0xFF4
  4412                           prodl	equ	0xFF3
  4413                           intcon	equ	0xFF2
  4414                           postinc0	equ	0xFEE
  4415                           wreg	equ	0xFE8
  4416                           indf1	equ	0xFE7
  4417                           postdec1	equ	0xFE5
  4418                           fsr1h	equ	0xFE2
  4419                           fsr1l	equ	0xFE1
  4420                           indf2	equ	0xFDF
  4421                           postinc2	equ	0xFDE
  4422                           postdec2	equ	0xFDD
  4423                           plusw2	equ	0xFDB
  4424                           fsr2h	equ	0xFDA
  4425                           fsr2l	equ	0xFD9
  4426                           status	equ	0xFD8
  4427                           
  4428 ;; *************** function ___flge *****************
  4429 ;; Defined at:
  4430 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  4431 ;; Parameters:    Size  Location     Type
  4432 ;;  ff1             4   13[COMRAM] PTR int 
  4433 ;;  ff2             4   17[COMRAM] PTR int 
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;		None
  4436 ;; Return value:  Size  Location     Type
  4437 ;;		None               void
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4445 ;;      Params:         8       0       0       0       0       0       0
  4446 ;;      Locals:         0       0       0       0       0       0       0
  4447 ;;      Temps:          0       0       0       0       0       0       0
  4448 ;;      Totals:         8       0       0       0       0       0       0
  4449 ;;Total ram usage:        8 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    2
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_exp
  4456 ;;		_floor
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           	psect	text15
  4461  004CA0                     __ptext15:
  4462                           	opt stack 0
  4463  004CA0                     ___flge:
  4464                           	opt stack 25
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;incstack = 0
  4468                           ;incstack = 0
  4469  004CA0  AE11               	btfss	___flge@ff1+3,7,c
  4470  004CA2  D009               	goto	l11713
  4471  004CA4  6C0E               	negf	___flge@ff1,c
  4472  004CA6  1E0F               	comf	___flge@ff1+1,f,c
  4473  004CA8  B0D8               	btfsc	status,0,c
  4474  004CAA  2A0F               	incf	___flge@ff1+1,f,c
  4475  004CAC  1E10               	comf	___flge@ff1+2,f,c
  4476  004CAE  B0D8               	btfsc	status,0,c
  4477  004CB0  2A10               	incf	___flge@ff1+2,f,c
  4478  004CB2  0E80               	movlw	128
  4479  004CB4  5611               	subfwb	___flge@ff1+3,f,c
  4480  004CB6                     l11713:
  4481  004CB6  AE15               	btfss	___flge@ff2+3,7,c
  4482  004CB8  D009               	goto	l1630
  4483  004CBA  6C12               	negf	___flge@ff2,c
  4484  004CBC  1E13               	comf	___flge@ff2+1,f,c
  4485  004CBE  B0D8               	btfsc	status,0,c
  4486  004CC0  2A13               	incf	___flge@ff2+1,f,c
  4487  004CC2  1E14               	comf	___flge@ff2+2,f,c
  4488  004CC4  B0D8               	btfsc	status,0,c
  4489  004CC6  2A14               	incf	___flge@ff2+2,f,c
  4490  004CC8  0E80               	movlw	128
  4491  004CCA  5615               	subfwb	___flge@ff2+3,f,c
  4492  004CCC                     l1630:
  4493  004CCC  0E80               	movlw	128
  4494  004CCE  1A11               	xorwf	___flge@ff1+3,f,c
  4495  004CD0  1A15               	xorwf	___flge@ff2+3,f,c
  4496  004CD2  5012               	movf	___flge@ff2,w,c
  4497  004CD4  5C0E               	subwf	___flge@ff1,w,c
  4498  004CD6  5013               	movf	___flge@ff2+1,w,c
  4499  004CD8  580F               	subwfb	___flge@ff1+1,w,c
  4500  004CDA  5014               	movf	___flge@ff2+2,w,c
  4501  004CDC  5810               	subwfb	___flge@ff1+2,w,c
  4502  004CDE  5015               	movf	___flge@ff2+3,w,c
  4503  004CE0  5811               	subwfb	___flge@ff1+3,w,c
  4504  004CE2  E202               	bc	l11719
  4505  004CE4  90D8               	bcf	status,0,c
  4506  004CE6  D001               	goto	l1631
  4507  004CE8                     l11719:
  4508  004CE8  80D8               	bsf	status,0,c
  4509  004CEA                     l1631:
  4510  004CEA  0012               	return	
  4511  004CEC                     __end_of___flge:
  4512                           	opt stack 0
  4513                           tblptru	equ	0xFF8
  4514                           tblptrh	equ	0xFF7
  4515                           tblptrl	equ	0xFF6
  4516                           tablat	equ	0xFF5
  4517                           prodh	equ	0xFF4
  4518                           prodl	equ	0xFF3
  4519                           intcon	equ	0xFF2
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           indf1	equ	0xFE7
  4523                           postdec1	equ	0xFE5
  4524                           fsr1h	equ	0xFE2
  4525                           fsr1l	equ	0xFE1
  4526                           indf2	equ	0xFDF
  4527                           postinc2	equ	0xFDE
  4528                           postdec2	equ	0xFDD
  4529                           plusw2	equ	0xFDB
  4530                           fsr2h	equ	0xFDA
  4531                           fsr2l	equ	0xFD9
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function ___altofl *****************
  4535 ;; Defined at:
  4536 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  c               4   52[BANK0 ] long 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  sign            1   68[COMRAM] unsigned char 
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  4   52[BANK0 ] unsigned char 
  4543 ;; Registers used:
  4544 ;;		wreg, status,2, status,0, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : F/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4550 ;;      Params:         0       4       0       0       0       0       0
  4551 ;;      Locals:         1       0       0       0       0       0       0
  4552 ;;      Temps:          0       0       0       0       0       0       0
  4553 ;;      Totals:         1       4       0       0       0       0       0
  4554 ;;Total ram usage:        5 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    3
  4557 ;; This function calls:
  4558 ;;		___flpack
  4559 ;; This function is called by:
  4560 ;;		_doWork
  4561 ;;		_floor
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text16
  4566  004E64                     __ptext16:
  4567                           	opt stack 0
  4568  004E64                     ___altofl:
  4569                           	opt stack 25
  4570                           
  4571                           ; BSR set to: 0
  4572                           
  4573                           ;incstack = 0
  4574                           ;incstack = 0
  4575  004E64  6A45               	clrf	___altofl@sign,c
  4576  004E66  AF97               	btfss	(___altofl@c+3)& (0+255),7,b
  4577  004E68  D00A               	goto	l11467
  4578                           
  4579                           ; BSR set to: 0
  4580  004E6A  1F97               	comf	(___altofl@c+3)& (0+255),f,b
  4581  004E6C  1F96               	comf	(___altofl@c+2)& (0+255),f,b
  4582  004E6E  1F95               	comf	(___altofl@c+1)& (0+255),f,b
  4583  004E70  6D94               	negf	___altofl@c& (0+255),b
  4584  004E72  0E00               	movlw	0
  4585  004E74  2395               	addwfc	(___altofl@c+1)& (0+255),f,b
  4586  004E76  2396               	addwfc	(___altofl@c+2)& (0+255),f,b
  4587  004E78  2397               	addwfc	(___altofl@c+3)& (0+255),f,b
  4588                           
  4589                           ; BSR set to: 0
  4590  004E7A  0E01               	movlw	1
  4591  004E7C  6E45               	movwf	___altofl@sign,c
  4592  004E7E                     l11467:
  4593                           
  4594                           ; BSR set to: 0
  4595  004E7E  C094  F00E         	movff	___altofl@c,?___flpack
  4596  004E82  C095  F00F         	movff	___altofl@c+1,?___flpack+1
  4597  004E86  C096  F010         	movff	___altofl@c+2,?___flpack+2
  4598  004E8A  C097  F011         	movff	___altofl@c+3,?___flpack+3
  4599  004E8E  0E96               	movlw	150
  4600  004E90  6E12               	movwf	?___flpack+4,c
  4601  004E92  C045  F013         	movff	___altofl@sign,?___flpack+5
  4602  004E96  EC58  F021         	call	___flpack	;wreg free
  4603  004E9A  C011  F097         	movff	?___flpack+3,?___altofl+3
  4604  004E9E  C010  F096         	movff	?___flpack+2,?___altofl+2
  4605  004EA2  C00F  F095         	movff	?___flpack+1,?___altofl+1
  4606  004EA6  C00E  F094         	movff	?___flpack,?___altofl
  4607  004EAA  0012               	return	
  4608  004EAC                     __end_of___altofl:
  4609                           	opt stack 0
  4610                           tblptru	equ	0xFF8
  4611                           tblptrh	equ	0xFF7
  4612                           tblptrl	equ	0xFF6
  4613                           tablat	equ	0xFF5
  4614                           prodh	equ	0xFF4
  4615                           prodl	equ	0xFF3
  4616                           intcon	equ	0xFF2
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           indf1	equ	0xFE7
  4620                           postdec1	equ	0xFE5
  4621                           fsr1h	equ	0xFE2
  4622                           fsr1l	equ	0xFE1
  4623                           indf2	equ	0xFDF
  4624                           postinc2	equ	0xFDE
  4625                           postdec2	equ	0xFDD
  4626                           plusw2	equ	0xFDB
  4627                           fsr2h	equ	0xFDA
  4628                           fsr2l	equ	0xFD9
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function ___asflsub *****************
  4632 ;; Defined at:
  4633 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  f1p             2   52[COMRAM] PTR 
  4636 ;;		 -> exp@x(4), doWork@temp(4), 
  4637 ;;  f2              4   54[COMRAM] PTR 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;		None
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  4   52[COMRAM] PTR 
  4642 ;; Registers used:
  4643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/1
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4649 ;;      Params:         6       0       0       0       0       0       0
  4650 ;;      Locals:         0       0       0       0       0       0       0
  4651 ;;      Temps:          0       0       0       0       0       0       0
  4652 ;;      Totals:         6       0       0       0       0       0       0
  4653 ;;Total ram usage:        6 bytes
  4654 ;; Hardware stack levels used:    1
  4655 ;; Hardware stack levels required when called:    5
  4656 ;; This function calls:
  4657 ;;		___flsub
  4658 ;; This function is called by:
  4659 ;;		_doWork
  4660 ;;		_exp
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text17
  4665  004E1A                     __ptext17:
  4666                           	opt stack 0
  4667  004E1A                     ___asflsub:
  4668                           	opt stack 23
  4669                           
  4670                           ;	Return value of ___asflsub is never used
  4671                           
  4672                           ;incstack = 0
  4673                           ;incstack = 0
  4674  004E1A  C035  FFD9         	movff	___asflsub@f1p,fsr2l
  4675  004E1E  C036  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4676  004E22  CFDE F02D          	movff	postinc2,?___flsub
  4677  004E26  CFDE F02E          	movff	postinc2,?___flsub+1
  4678  004E2A  CFDE F02F          	movff	postinc2,?___flsub+2
  4679  004E2E  CFDE F030          	movff	postinc2,?___flsub+3
  4680  004E32  C037  F031         	movff	___asflsub@f2,?___flsub+4
  4681  004E36  C038  F032         	movff	___asflsub@f2+1,?___flsub+5
  4682  004E3A  C039  F033         	movff	___asflsub@f2+2,?___flsub+6
  4683  004E3E  C03A  F034         	movff	___asflsub@f2+3,?___flsub+7
  4684  004E42  EC19  F028         	call	___flsub	;wreg free
  4685  004E46  C035  FFD9         	movff	___asflsub@f1p,fsr2l
  4686  004E4A  C036  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4687  004E4E  C02D  FFDE         	movff	?___flsub,postinc2
  4688  004E52  C02E  FFDE         	movff	?___flsub+1,postinc2
  4689  004E56  C02F  FFDE         	movff	?___flsub+2,postinc2
  4690  004E5A  C030  FFDD         	movff	?___flsub+3,postdec2
  4691  004E5E  06D9               	decf	fsr2l,f,c
  4692  004E60  06D9               	decf	fsr2l,f,c
  4693  004E62  0012               	return	
  4694  004E64                     __end_of___asflsub:
  4695                           	opt stack 0
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           intcon	equ	0xFF2
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           indf1	equ	0xFE7
  4706                           postdec1	equ	0xFE5
  4707                           fsr1h	equ	0xFE2
  4708                           fsr1l	equ	0xFE1
  4709                           indf2	equ	0xFDF
  4710                           postinc2	equ	0xFDE
  4711                           postdec2	equ	0xFDD
  4712                           plusw2	equ	0xFDB
  4713                           fsr2h	equ	0xFDA
  4714                           fsr2l	equ	0xFD9
  4715                           status	equ	0xFD8
  4716                           
  4717 ;; *************** function ___flsub *****************
  4718 ;; Defined at:
  4719 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  f1              4   44[COMRAM] PTR 
  4722 ;;  f2              4   48[COMRAM] PTR 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  4   44[COMRAM] PTR 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4734 ;;      Params:         8       0       0       0       0       0       0
  4735 ;;      Locals:         0       0       0       0       0       0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0
  4737 ;;      Totals:         8       0       0       0       0       0       0
  4738 ;;Total ram usage:        8 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    4
  4741 ;; This function calls:
  4742 ;;		___fladd
  4743 ;; This function is called by:
  4744 ;;		_doWork
  4745 ;;		___asflsub
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text18
  4750  005032                     __ptext18:
  4751                           	opt stack 0
  4752  005032                     ___flsub:
  4753                           	opt stack 24
  4754                           
  4755                           ;incstack = 0
  4756                           ;incstack = 0
  4757  005032  0E80               	movlw	128
  4758  005034  1A34               	xorwf	___flsub@f2+3,f,c
  4759  005036  C02D  F01E         	movff	___flsub@f1,?___fladd
  4760  00503A  C02E  F01F         	movff	___flsub@f1+1,?___fladd+1
  4761  00503E  C02F  F020         	movff	___flsub@f1+2,?___fladd+2
  4762  005042  C030  F021         	movff	___flsub@f1+3,?___fladd+3
  4763  005046  C031  F022         	movff	___flsub@f2,?___fladd+4
  4764  00504A  C032  F023         	movff	___flsub@f2+1,?___fladd+5
  4765  00504E  C033  F024         	movff	___flsub@f2+2,?___fladd+6
  4766  005052  C034  F025         	movff	___flsub@f2+3,?___fladd+7
  4767  005056  EC4C  F01C         	call	___fladd	;wreg free
  4768  00505A  C021  F030         	movff	?___fladd+3,?___flsub+3
  4769  00505E  C020  F02F         	movff	?___fladd+2,?___flsub+2
  4770  005062  C01F  F02E         	movff	?___fladd+1,?___flsub+1
  4771  005066  C01E  F02D         	movff	?___fladd,?___flsub
  4772  00506A  0012               	return	
  4773  00506C                     __end_of___flsub:
  4774                           	opt stack 0
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodh	equ	0xFF4
  4780                           prodl	equ	0xFF3
  4781                           intcon	equ	0xFF2
  4782                           postinc0	equ	0xFEE
  4783                           wreg	equ	0xFE8
  4784                           indf1	equ	0xFE7
  4785                           postdec1	equ	0xFE5
  4786                           fsr1h	equ	0xFE2
  4787                           fsr1l	equ	0xFE1
  4788                           indf2	equ	0xFDF
  4789                           postinc2	equ	0xFDE
  4790                           postdec2	equ	0xFDD
  4791                           plusw2	equ	0xFDB
  4792                           fsr2h	equ	0xFDA
  4793                           fsr2l	equ	0xFD9
  4794                           status	equ	0xFD8
  4795                           
  4796 ;; *************** function ___asflmul *****************
  4797 ;; Defined at:
  4798 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  mp              1    wreg     PTR 
  4801 ;;		 -> exp@x(4), 
  4802 ;;  multiplicand    4   30[BANK0 ] PTR 
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;  mp              1   66[COMRAM] PTR 
  4805 ;;		 -> exp@x(4), 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  4   30[BANK0 ] PTR 
  4808 ;; Registers used:
  4809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : F/0
  4812 ;;		On exit  : F/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4815 ;;      Params:         0       4       0       0       0       0       0
  4816 ;;      Locals:         1       0       0       0       0       0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0
  4818 ;;      Totals:         1       4       0       0       0       0       0
  4819 ;;Total ram usage:        5 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    4
  4822 ;; This function calls:
  4823 ;;		___flmul
  4824 ;; This function is called by:
  4825 ;;		_exp
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           	psect	text19
  4830  004CEC                     __ptext19:
  4831                           	opt stack 0
  4832  004CEC                     ___asflmul:
  4833                           	opt stack 23
  4834                           
  4835                           ;incstack = 0
  4836                           ;incstack = 0
  4837                           ;___asflmul@mp stored from wreg
  4838  004CEC  CFE8 F043          	movff	wreg,___asflmul@mp
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;	Return value of ___asflmul is never used
  4842  004CF0  5043               	movf	___asflmul@mp,w,c
  4843  004CF2  6ED9               	movwf	fsr2l,c
  4844  004CF4  6ADA               	clrf	fsr2h,c
  4845  004CF6  CFDE F068          	movff	postinc2,?___flmul
  4846  004CFA  CFDE F069          	movff	postinc2,?___flmul+1
  4847  004CFE  CFDE F06A          	movff	postinc2,?___flmul+2
  4848  004D02  CFDE F06B          	movff	postinc2,?___flmul+3
  4849  004D06  C07E  F06C         	movff	___asflmul@multiplicand,?___flmul+4
  4850  004D0A  C07F  F06D         	movff	___asflmul@multiplicand+1,?___flmul+5
  4851  004D0E  C080  F06E         	movff	___asflmul@multiplicand+2,?___flmul+6
  4852  004D12  C081  F06F         	movff	___asflmul@multiplicand+3,?___flmul+7
  4853  004D16  EC35  F020         	call	___flmul	;wreg free
  4854  004D1A  5043               	movf	___asflmul@mp,w,c
  4855  004D1C  6ED9               	movwf	fsr2l,c
  4856  004D1E  6ADA               	clrf	fsr2h,c
  4857  004D20  0100               	movlb	0	; () banked
  4858  004D22  C068  FFDE         	movff	?___flmul,postinc2
  4859  004D26  C069  FFDE         	movff	?___flmul+1,postinc2
  4860  004D2A  C06A  FFDE         	movff	?___flmul+2,postinc2
  4861  004D2E  C06B  FFDD         	movff	?___flmul+3,postdec2
  4862  004D32  06D9               	decf	fsr2l,f,c
  4863  004D34  06D9               	decf	fsr2l,f,c
  4864                           
  4865                           ; BSR set to: 0
  4866  004D36  0012               	return	
  4867  004D38                     __end_of___asflmul:
  4868                           	opt stack 0
  4869                           tblptru	equ	0xFF8
  4870                           tblptrh	equ	0xFF7
  4871                           tblptrl	equ	0xFF6
  4872                           tablat	equ	0xFF5
  4873                           prodh	equ	0xFF4
  4874                           prodl	equ	0xFF3
  4875                           intcon	equ	0xFF2
  4876                           postinc0	equ	0xFEE
  4877                           wreg	equ	0xFE8
  4878                           indf1	equ	0xFE7
  4879                           postdec1	equ	0xFE5
  4880                           fsr1h	equ	0xFE2
  4881                           fsr1l	equ	0xFE1
  4882                           indf2	equ	0xFDF
  4883                           postinc2	equ	0xFDE
  4884                           postdec2	equ	0xFDD
  4885                           plusw2	equ	0xFDB
  4886                           fsr2h	equ	0xFDA
  4887                           fsr2l	equ	0xFD9
  4888                           status	equ	0xFD8
  4889                           
  4890 ;; *************** function ___fldiv *****************
  4891 ;; Defined at:
  4892 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  f1              4    0[BANK0 ] PTR 
  4895 ;;  f2              4    4[BANK0 ] PTR 
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  f3              4   59[COMRAM] PTR 
  4898 ;;  sign            1   65[COMRAM] unsigned char 
  4899 ;;  exp             1   64[COMRAM] unsigned char 
  4900 ;;  cntr            1   63[COMRAM] unsigned char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  4    0[BANK0 ] unsigned char 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0, cstack
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4910 ;;      Params:         0       8       0       0       0       0       0
  4911 ;;      Locals:        14       0       0       0       0       0       0
  4912 ;;      Temps:          0       0       0       0       0       0       0
  4913 ;;      Totals:        14       8       0       0       0       0       0
  4914 ;;Total ram usage:       22 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    3
  4917 ;; This function calls:
  4918 ;;		___flpack
  4919 ;; This function is called by:
  4920 ;;		_doWork
  4921 ;;		_Celsius2Fahrenheit
  4922 ;;		___asfldiv
  4923 ;;		_exp
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text20
  4928  0044D2                     __ptext20:
  4929                           	opt stack 0
  4930  0044D2                     ___fldiv:
  4931                           	opt stack 25
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;incstack = 0
  4935                           ;incstack = 0
  4936  0044D2  0100               	movlb	0	; () banked
  4937  0044D4  3562               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  4938  0044D6  3563               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  4939  0044D8  6E41               	movwf	___fldiv@exp,c
  4940  0044DA  6641               	tstfsz	___fldiv@exp& (0+255),c
  4941  0044DC  D001               	goto	l11551
  4942  0044DE  D006               	goto	u9980
  4943  0044E0                     l11551:
  4944  0044E0  0100               	movlb	0	; () banked
  4945  0044E2  3566               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  4946  0044E4  3567               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  4947  0044E6  6E42               	movwf	___fldiv@sign,c
  4948  0044E8  6642               	tstfsz	___fldiv@sign& (0+255),c
  4949  0044EA  D006               	goto	l11555
  4950  0044EC                     u9980:
  4951  0044EC  0100               	movlb	0	; () banked
  4952  0044EE  6B60               	clrf	?___fldiv& (0+255),b
  4953  0044F0  6B61               	clrf	(?___fldiv+1)& (0+255),b
  4954  0044F2  6B62               	clrf	(?___fldiv+2)& (0+255),b
  4955  0044F4  6B63               	clrf	(?___fldiv+3)& (0+255),b
  4956  0044F6  D044               	goto	l1622
  4957  0044F8                     l11555:
  4958  0044F8  5042               	movf	___fldiv@sign,w,c
  4959  0044FA  0F89               	addlw	137
  4960  0044FC  5E41               	subwf	___fldiv@exp,f,c
  4961  0044FE  C063  F042         	movff	___fldiv@f1+3,___fldiv@sign
  4962  004502  0100               	movlb	0	; () banked
  4963  004504  5167               	movf	(___fldiv@f2+3)& (0+255),w,b
  4964  004506  1A42               	xorwf	___fldiv@sign,f,c
  4965  004508  0E80               	movlw	128
  4966  00450A  1642               	andwf	___fldiv@sign,f,c
  4967                           
  4968                           ; BSR set to: 0
  4969  00450C  8F62               	bsf	(___fldiv@f1+2)& (0+255),7,b
  4970                           
  4971                           ; BSR set to: 0
  4972  00450E  6B63               	clrf	(___fldiv@f1+3)& (0+255),b
  4973  004510  8F66               	bsf	(___fldiv@f2+2)& (0+255),7,b
  4974                           
  4975                           ; BSR set to: 0
  4976  004512  6B67               	clrf	(___fldiv@f2+3)& (0+255),b
  4977                           
  4978                           ; BSR set to: 0
  4979  004514  0E20               	movlw	32
  4980  004516  6E40               	movwf	___fldiv@cntr,c
  4981  004518                     l11567:
  4982                           
  4983                           ; BSR set to: 0
  4984  004518  90D8               	bcf	status,0,c
  4985  00451A  363C               	rlcf	___fldiv@f3,f,c
  4986  00451C  363D               	rlcf	___fldiv@f3+1,f,c
  4987  00451E  363E               	rlcf	___fldiv@f3+2,f,c
  4988  004520  363F               	rlcf	___fldiv@f3+3,f,c
  4989                           
  4990                           ; BSR set to: 0
  4991  004522  5164               	movf	___fldiv@f2& (0+255),w,b
  4992  004524  5D60               	subwf	___fldiv@f1& (0+255),w,b
  4993  004526  5165               	movf	(___fldiv@f2+1)& (0+255),w,b
  4994  004528  5961               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  4995  00452A  5166               	movf	(___fldiv@f2+2)& (0+255),w,b
  4996  00452C  5962               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  4997  00452E  5167               	movf	(___fldiv@f2+3)& (0+255),w,b
  4998  004530  5963               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  4999  004532  E309               	bnc	l11575
  5000                           
  5001                           ; BSR set to: 0
  5002  004534  5164               	movf	___fldiv@f2& (0+255),w,b
  5003  004536  5F60               	subwf	___fldiv@f1& (0+255),f,b
  5004  004538  5165               	movf	(___fldiv@f2+1)& (0+255),w,b
  5005  00453A  5B61               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  5006  00453C  5166               	movf	(___fldiv@f2+2)& (0+255),w,b
  5007  00453E  5B62               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  5008  004540  5167               	movf	(___fldiv@f2+3)& (0+255),w,b
  5009  004542  5B63               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  5010                           
  5011                           ; BSR set to: 0
  5012  004544  803C               	bsf	___fldiv@f3,0,c
  5013  004546                     l11575:
  5014                           
  5015                           ; BSR set to: 0
  5016  004546  90D8               	bcf	status,0,c
  5017  004548  3760               	rlcf	___fldiv@f1& (0+255),f,b
  5018  00454A  3761               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  5019  00454C  3762               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  5020  00454E  3763               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  5021                           
  5022                           ; BSR set to: 0
  5023  004550  2E40               	decfsz	___fldiv@cntr,f,c
  5024  004552  D7E2               	goto	l11567
  5025                           
  5026                           ; BSR set to: 0
  5027  004554  C03C  F00E         	movff	___fldiv@f3,?___flpack
  5028  004558  C03D  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5029  00455C  C03E  F010         	movff	___fldiv@f3+2,?___flpack+2
  5030  004560  C03F  F011         	movff	___fldiv@f3+3,?___flpack+3
  5031  004564  C041  F012         	movff	___fldiv@exp,?___flpack+4
  5032  004568  C042  F013         	movff	___fldiv@sign,?___flpack+5
  5033  00456C  EC58  F021         	call	___flpack	;wreg free
  5034  004570  C011  F063         	movff	?___flpack+3,?___fldiv+3
  5035  004574  C010  F062         	movff	?___flpack+2,?___fldiv+2
  5036  004578  C00F  F061         	movff	?___flpack+1,?___fldiv+1
  5037  00457C  C00E  F060         	movff	?___flpack,?___fldiv
  5038  004580                     l1622:
  5039  004580  0012               	return	
  5040  004582                     __end_of___fldiv:
  5041                           	opt stack 0
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           prodh	equ	0xFF4
  5047                           prodl	equ	0xFF3
  5048                           intcon	equ	0xFF2
  5049                           postinc0	equ	0xFEE
  5050                           wreg	equ	0xFE8
  5051                           indf1	equ	0xFE7
  5052                           postdec1	equ	0xFE5
  5053                           fsr1h	equ	0xFE2
  5054                           fsr1l	equ	0xFE1
  5055                           indf2	equ	0xFDF
  5056                           postinc2	equ	0xFDE
  5057                           postdec2	equ	0xFDD
  5058                           plusw2	equ	0xFDB
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063 ;; *************** function _vscp_doOneSecondWork *****************
  5064 ;; Defined at:
  5065 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;		None
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;		None
  5070 ;; Return value:  Size  Location     Type
  5071 ;;		None               void
  5072 ;; Registers used:
  5073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5074 ;; Tracked objects:
  5075 ;;		On entry : F/0
  5076 ;;		On exit  : F/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5079 ;;      Params:         0       0       0       0       0       0       0
  5080 ;;      Locals:         0       0       0       0       0       0       0
  5081 ;;      Temps:          0       1       0       0       0       0       0
  5082 ;;      Totals:         0       1       0       0       0       0       0
  5083 ;;Total ram usage:        1 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; Hardware stack levels required when called:    8
  5086 ;; This function calls:
  5087 ;;		_vscp_getZone
  5088 ;;		_vscp_getSubzone
  5089 ;;		_vscp_sendHeartBeat
  5090 ;; This function is called by:
  5091 ;;		_main
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text21
  5096  004D38                     __ptext21:
  5097                           	opt stack 0
  5098  004D38                     _vscp_doOneSecondWork:
  5099                           	opt stack 21
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;vscp_firmware.c: 526: ++vscp_second;
  5103                           
  5104                           ;incstack = 0
  5105                           ;incstack = 0
  5106  004D38  2A51               	incf	_vscp_second,f,c
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  5110  004D3A  0E3B               	movlw	59
  5111  004D3C  6451               	cpfsgt	_vscp_second,c
  5112  004D3E  D00C               	goto	l10323
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;vscp_firmware.c: 529: vscp_second = 0;
  5116  004D40  6A51               	clrf	_vscp_second,c
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;vscp_firmware.c: 530: vscp_minute++;
  5120  004D42  2A4D               	incf	_vscp_minute,f,c
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  5124  004D44  51CB               	movf	_vscp_node_state& (0+255),w,b
  5125  004D46  0A03               	xorlw	3
  5126  004D48  E107               	bnz	l10323
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  5130                           ;vscp_firmware.c: 535: vscp_getSubzone());
  5131  004D4A  EC5E  F02A         	call	_vscp_getSubzone	;wreg free
  5132  004D4E  6E44               	movwf	?_vscp_sendHeartBeat,c
  5133  004D50  EC63  F02A         	call	_vscp_getZone	;wreg free
  5134  004D54  EC26  F029         	call	_vscp_sendHeartBeat
  5135  004D58                     l10323:
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;vscp_firmware.c: 536: }
  5139                           ;vscp_firmware.c: 537: }
  5140                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  5141  004D58  0E3B               	movlw	59
  5142  004D5A  644D               	cpfsgt	_vscp_minute,c
  5143  004D5C  D002               	goto	l10329
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;vscp_firmware.c: 540: vscp_minute = 0;
  5147  004D5E  6A4D               	clrf	_vscp_minute,c
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;vscp_firmware.c: 541: vscp_hour++;
  5151  004D60  2BC8               	incf	_vscp_hour& (0+255),f,b
  5152  004D62                     l10329:
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;vscp_firmware.c: 542: }
  5156                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  5157  004D62  0E17               	movlw	23
  5158  004D64  65C8               	cpfsgt	_vscp_hour& (0+255),b
  5159  004D66  D001               	goto	l10333
  5160                           
  5161                           ; BSR set to: 0
  5162  004D68  6BC8               	clrf	_vscp_hour& (0+255),b
  5163  004D6A                     l10333:
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  5167  004D6A  51CB               	movf	_vscp_node_state& (0+255),w,b
  5168  004D6C  0A03               	xorlw	3
  5169  004D6E  E109               	bnz	l1102
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  5173  004D70  2A4B               	incf	_vscp_guid_reset,f,c
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  5177  004D72  C04B  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5178  004D76  0E0F               	movlw	15
  5179  004D78  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5180  004D7A  0E02               	movlw	2
  5181  004D7C  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5182  004D7E  B0D8               	btfsc	status,0,c
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  5186  004D80  6A4B               	clrf	_vscp_guid_reset,c
  5187  004D82                     l1102:
  5188                           
  5189                           ; BSR set to: 0
  5190  004D82  0012               	return	
  5191  004D84                     __end_of_vscp_doOneSecondWork:
  5192                           	opt stack 0
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           postinc0	equ	0xFEE
  5201                           wreg	equ	0xFE8
  5202                           indf1	equ	0xFE7
  5203                           postdec1	equ	0xFE5
  5204                           fsr1h	equ	0xFE2
  5205                           fsr1l	equ	0xFE1
  5206                           indf2	equ	0xFDF
  5207                           postinc2	equ	0xFDE
  5208                           postdec2	equ	0xFDD
  5209                           plusw2	equ	0xFDB
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8
  5213                           
  5214 ;; *************** function _vscp_sendHeartBeat *****************
  5215 ;; Defined at:
  5216 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;  zone            1    wreg     unsigned char 
  5219 ;;  subzone         1   67[COMRAM] unsigned char 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  zone            1   68[COMRAM] unsigned char 
  5222 ;; Return value:  Size  Location     Type
  5223 ;;		None               void
  5224 ;; Registers used:
  5225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : F/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5231 ;;      Params:         1       0       0       0       0       0       0
  5232 ;;      Locals:         1       0       0       0       0       0       0
  5233 ;;      Temps:          0       0       0       0       0       0       0
  5234 ;;      Totals:         2       0       0       0       0       0       0
  5235 ;;Total ram usage:        2 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    7
  5238 ;; This function calls:
  5239 ;;		_vscp_sendEvent
  5240 ;; This function is called by:
  5241 ;;		_vscp_doOneSecondWork
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           	psect	text22
  5246  00524C                     __ptext22:
  5247                           	opt stack 0
  5248  00524C                     _vscp_sendHeartBeat:
  5249                           	opt stack 21
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;incstack = 0
  5253                           ;incstack = 0
  5254                           ;vscp_sendHeartBeat@zone stored from wreg
  5255  00524C  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5256                           
  5257                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  5258  005250  0E83               	movlw	131
  5259  005252  0100               	movlb	0	; () banked
  5260  005254  6FCC               	movwf	_vscp_omsg& (0+255),b
  5261                           
  5262                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  5263  005256  0E07               	movlw	7
  5264  005258  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  5265                           
  5266                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  5267  00525A  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5268  00525C  0E14               	movlw	20
  5269  00525E  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  5270                           
  5271                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  5272  005260  0E09               	movlw	9
  5273  005262  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  5277  005264  6BD1               	clrf	(_vscp_omsg+5)& (0+255),b
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  5281  005266  C045  F0D2         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  5285  00526A  C044  F0D3         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;vscp_firmware.c: 388: vscp_sendEvent();
  5289  00526E  EFFD  F028         	goto	_vscp_sendEvent	;wreg free
  5290  005272                     __end_of_vscp_sendHeartBeat:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           intcon	equ	0xFF2
  5299                           postinc0	equ	0xFEE
  5300                           wreg	equ	0xFE8
  5301                           indf1	equ	0xFE7
  5302                           postdec1	equ	0xFE5
  5303                           fsr1h	equ	0xFE2
  5304                           fsr1l	equ	0xFE1
  5305                           indf2	equ	0xFDF
  5306                           postinc2	equ	0xFDE
  5307                           postdec2	equ	0xFDD
  5308                           plusw2	equ	0xFDB
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313 ;; *************** function _vscp_getSubzone *****************
  5314 ;; Defined at:
  5315 ;;		line 2747 in file "../main.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      unsigned char 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : F/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5329 ;;      Params:         0       0       0       0       0       0       0
  5330 ;;      Locals:         0       0       0       0       0       0       0
  5331 ;;      Temps:          0       0       0       0       0       0       0
  5332 ;;      Totals:         0       0       0       0       0       0       0
  5333 ;;Total ram usage:        0 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    3
  5336 ;; This function calls:
  5337 ;;		_readEEPROM
  5338 ;; This function is called by:
  5339 ;;		_vscp_doOneSecondWork
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text23
  5344  0054BC                     __ptext23:
  5345                           	opt stack 0
  5346  0054BC                     _vscp_getSubzone:
  5347                           	opt stack 25
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;main.c: 2748: return readEEPROM(0x42);
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;incstack = 0
  5354                           ;incstack = 0
  5355  0054BC  6A17               	clrf	?_readEEPROM+1,c
  5356  0054BE  0E42               	movlw	66
  5357  0054C0  6E16               	movwf	?_readEEPROM,c
  5358  0054C2  EF27  F02A         	goto	_readEEPROM	;wreg free
  5359  0054C6                     __end_of_vscp_getSubzone:
  5360                           	opt stack 0
  5361                           tblptru	equ	0xFF8
  5362                           tblptrh	equ	0xFF7
  5363                           tblptrl	equ	0xFF6
  5364                           tablat	equ	0xFF5
  5365                           prodh	equ	0xFF4
  5366                           prodl	equ	0xFF3
  5367                           intcon	equ	0xFF2
  5368                           postinc0	equ	0xFEE
  5369                           wreg	equ	0xFE8
  5370                           indf1	equ	0xFE7
  5371                           postdec1	equ	0xFE5
  5372                           fsr1h	equ	0xFE2
  5373                           fsr1l	equ	0xFE1
  5374                           indf2	equ	0xFDF
  5375                           postinc2	equ	0xFDE
  5376                           postdec2	equ	0xFDD
  5377                           plusw2	equ	0xFDB
  5378                           fsr2h	equ	0xFDA
  5379                           fsr2l	equ	0xFD9
  5380                           status	equ	0xFD8
  5381                           
  5382 ;; *************** function _vscp_getZone *****************
  5383 ;; Defined at:
  5384 ;;		line 2738 in file "../main.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;		None
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      unsigned char 
  5391 ;; Registers used:
  5392 ;;		wreg, status,2, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5398 ;;      Params:         0       0       0       0       0       0       0
  5399 ;;      Locals:         0       0       0       0       0       0       0
  5400 ;;      Temps:          0       0       0       0       0       0       0
  5401 ;;      Totals:         0       0       0       0       0       0       0
  5402 ;;Total ram usage:        0 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    3
  5405 ;; This function calls:
  5406 ;;		_readEEPROM
  5407 ;; This function is called by:
  5408 ;;		_vscp_doOneSecondWork
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text24
  5413  0054C6                     __ptext24:
  5414                           	opt stack 0
  5415  0054C6                     _vscp_getZone:
  5416                           	opt stack 25
  5417                           
  5418                           ;main.c: 2739: return readEEPROM(0x41);
  5419                           
  5420                           ;incstack = 0
  5421                           ;incstack = 0
  5422  0054C6  6A17               	clrf	?_readEEPROM+1,c
  5423  0054C8  0E41               	movlw	65
  5424  0054CA  6E16               	movwf	?_readEEPROM,c
  5425  0054CC  EF27  F02A         	goto	_readEEPROM	;wreg free
  5426  0054D0                     __end_of_vscp_getZone:
  5427                           	opt stack 0
  5428                           tblptru	equ	0xFF8
  5429                           tblptrh	equ	0xFF7
  5430                           tblptrl	equ	0xFF6
  5431                           tablat	equ	0xFF5
  5432                           prodh	equ	0xFF4
  5433                           prodl	equ	0xFF3
  5434                           intcon	equ	0xFF2
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           indf1	equ	0xFE7
  5438                           postdec1	equ	0xFE5
  5439                           fsr1h	equ	0xFE2
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           plusw2	equ	0xFDB
  5445                           fsr2h	equ	0xFDA
  5446                           fsr2l	equ	0xFD9
  5447                           status	equ	0xFD8
  5448                           
  5449 ;; *************** function _doOneSecondWork *****************
  5450 ;; Defined at:
  5451 ;;		line 530 in file "../main.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;		None
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  setpoint        2   56[BANK0 ] short 
  5456 ;;  i               1   58[BANK0 ] unsigned char 
  5457 ;;  tmp             1   55[BANK0 ] unsigned char 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;		None               void
  5460 ;; Registers used:
  5461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : F/1
  5464 ;;		On exit  : F/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5467 ;;      Params:         0       0       0       0       0       0       0
  5468 ;;      Locals:         0       4       0       0       0       0       0
  5469 ;;      Temps:          0       7       0       0       0       0       0
  5470 ;;      Totals:         0      11       0       0       0       0       0
  5471 ;;Total ram usage:       11 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    8
  5474 ;; This function calls:
  5475 ;;		_writeEEPROM
  5476 ;;		_readEEPROM
  5477 ;;		_sendTempEvent
  5478 ;;		_vscp_sendEvent
  5479 ;;		___wmul
  5480 ;; This function is called by:
  5481 ;;		_main
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text25
  5486  0021B8                     __ptext25:
  5487                           	opt stack 0
  5488  0021B8                     _doOneSecondWork:
  5489                           	opt stack 21
  5490                           
  5491                           ; BSR set to: 1
  5492                           ;main.c: 531: uint8_t tmp;
  5493                           ;main.c: 532: uint8_t i;
  5494                           ;main.c: 533: int16_t setpoint;
  5495                           ;main.c: 535: for (i = 0; i < 6; i++) {
  5496                           
  5497                           ;incstack = 0
  5498                           ;incstack = 0
  5499  0021B8  0100               	movlb	0	; () banked
  5500  0021BA  6B9A               	clrf	doOneSecondWork@i& (0+255),b
  5501  0021BC                     l10157:
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;main.c: 541: if (current_temp[ i ] < ((int16_t)( (((uint16_t)readEEPROM(0x7F + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x80 + 2*i)) ) ) {
  5505  0021BC  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5506  0021BE  0D02               	mullw	2
  5507  0021C0  0E7F               	movlw	127
  5508  0021C2  24F3               	addwf	prodl,w,c
  5509  0021C4  6E16               	movwf	?_readEEPROM,c
  5510  0021C6  0E00               	movlw	0
  5511  0021C8  20F4               	addwfc	prodh,w,c
  5512  0021CA  6E17               	movwf	?_readEEPROM+1,c
  5513  0021CC  EC27  F02A         	call	_readEEPROM	;wreg free
  5514  0021D0  0100               	movlb	0	; () banked
  5515  0021D2  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5516  0021D4  6B90               	clrf	??_doOneSecondWork& (0+255),b
  5517  0021D6  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5518  0021D8  0D02               	mullw	2
  5519  0021DA  0E80               	movlw	128
  5520  0021DC  24F3               	addwf	prodl,w,c
  5521  0021DE  6E16               	movwf	?_readEEPROM,c
  5522  0021E0  0E00               	movlw	0
  5523  0021E2  20F4               	addwfc	prodh,w,c
  5524  0021E4  6E17               	movwf	?_readEEPROM+1,c
  5525  0021E6  EC27  F02A         	call	_readEEPROM	;wreg free
  5526  0021EA  0100               	movlb	0	; () banked
  5527  0021EC  2790               	addwf	??_doOneSecondWork& (0+255),f,b
  5528  0021EE  0E00               	movlw	0
  5529  0021F0  2391               	addwfc	(??_doOneSecondWork+1)& (0+255),f,b
  5530  0021F2  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5531  0021F4  0D02               	mullw	2
  5532  0021F6  DA3B               	call	PL2	;call to abstracted procedure
  5533  0021F8  CFDE F092          	movff	postinc2,??_doOneSecondWork+2
  5534  0021FC  CFDD F093          	movff	postdec2,??_doOneSecondWork+3
  5535  002200  DAA2               	call	PL50	;call to abstracted procedure
  5536  002202  E214               	bc	l209
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;main.c: 544: writeEEPROM(0x7F + 2*i, current_temp[ i ] >> 8);
  5540  002204  90D8               	bcf	status,0,c
  5541  002206  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5542  002208  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5543  00220A  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5544  00220C  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5545  00220E  0E7F               	movlw	127
  5546  002210  DA65               	call	PL12	;call to abstracted procedure
  5547  002212  DA2D               	call	PL2	;call to abstracted procedure
  5548  002214  DA78               	call	PL26	;call to abstracted procedure
  5549  002216  EC39  F029         	call	_writeEEPROM	;wreg free
  5550                           
  5551                           ;main.c: 545: writeEEPROM(0x80 + 2*i, current_temp[ i ] & 0xff);
  5552  00221A  DAAC               	call	PL74	;call to abstracted procedure
  5553  00221C  0E80               	movlw	128
  5554  00221E  DA5E               	call	PL12	;call to abstracted procedure
  5555  002220  0101               	movlb	1	; () banked
  5556  002222  DA25               	call	PL2	;call to abstracted procedure
  5557  002224  50DF               	movf	indf2,w,c
  5558  002226  6E10               	movwf	?_writeEEPROM+2,c
  5559  002228  EC39  F029         	call	_writeEEPROM	;wreg free
  5560  00222C                     l209:
  5561                           
  5562                           ;main.c: 546: }
  5563                           ;main.c: 552: if (current_temp[ i ] > ((int16_t)( (((uint16_t)readEEPROM(0x8B + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x8C + 2*i )) ) ) {
  5564  00222C  0100               	movlb	0	; () banked
  5565  00222E  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5566  002230  0D02               	mullw	2
  5567  002232  DA1D               	call	PL2	;call to abstracted procedure
  5568  002234  CFDE F090          	movff	postinc2,??_doOneSecondWork
  5569  002238  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  5570  00223C  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5571  00223E  0D02               	mullw	2
  5572  002240  0E8B               	movlw	139
  5573  002242  24F3               	addwf	prodl,w,c
  5574  002244  6E16               	movwf	?_readEEPROM,c
  5575  002246  0E00               	movlw	0
  5576  002248  20F4               	addwfc	prodh,w,c
  5577  00224A  6E17               	movwf	?_readEEPROM+1,c
  5578  00224C  EC27  F02A         	call	_readEEPROM	;wreg free
  5579  002250  0100               	movlb	0	; () banked
  5580  002252  6F93               	movwf	(??_doOneSecondWork+3)& (0+255),b
  5581  002254  6B92               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5582  002256  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5583  002258  0D02               	mullw	2
  5584  00225A  0E8C               	movlw	140
  5585  00225C  24F3               	addwf	prodl,w,c
  5586  00225E  6E16               	movwf	?_readEEPROM,c
  5587  002260  0E00               	movlw	0
  5588  002262  20F4               	addwfc	prodh,w,c
  5589  002264  6E17               	movwf	?_readEEPROM+1,c
  5590  002266  EC27  F02A         	call	_readEEPROM	;wreg free
  5591  00226A  0100               	movlb	0	; () banked
  5592  00226C  2792               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  5593  00226E  0E00               	movlw	0
  5594  002270  2393               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  5595  002272  DA69               	call	PL50	;call to abstracted procedure
  5596  002274  E214               	bc	l10163
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;main.c: 555: writeEEPROM(0x8B + 2*i, current_temp[ i ] >> 8);
  5600  002276  90D8               	bcf	status,0,c
  5601  002278  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5602  00227A  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5603  00227C  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5604  00227E  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5605  002280  0E8B               	movlw	139
  5606  002282  DA2C               	call	PL12	;call to abstracted procedure
  5607  002284  D9F4               	call	PL2	;call to abstracted procedure
  5608  002286  DA3F               	call	PL26	;call to abstracted procedure
  5609  002288  EC39  F029         	call	_writeEEPROM	;wreg free
  5610                           
  5611                           ;main.c: 556: writeEEPROM(0x8C + 2*i, current_temp[ i ] & 0xff );
  5612  00228C  DA73               	call	PL74	;call to abstracted procedure
  5613  00228E  0E8C               	movlw	140
  5614  002290  DA25               	call	PL12	;call to abstracted procedure
  5615  002292  0101               	movlb	1	; () banked
  5616  002294  D9EC               	call	PL2	;call to abstracted procedure
  5617  002296  50DF               	movf	indf2,w,c
  5618  002298  6E10               	movwf	?_writeEEPROM+2,c
  5619  00229A  EC39  F029         	call	_writeEEPROM	;wreg free
  5620  00229E                     l10163:
  5621                           
  5622                           ;main.c: 557: }
  5623                           ;main.c: 562: tmp = readEEPROM(0x49 + i);
  5624  00229E  0E49               	movlw	73
  5625  0022A0  DA62               	call	PL72	;call to abstracted procedure
  5626  0022A2  EC27  F02A         	call	_readEEPROM	;wreg free
  5627  0022A6  0100               	movlb	0	; () banked
  5628  0022A8  6F97               	movwf	doOneSecondWork@tmp& (0+255),b
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;main.c: 563: if (tmp && (seconds_temp[i] > tmp)) {
  5632  0022AA  5197               	movf	doOneSecondWork@tmp& (0+255),w,b
  5633  0022AC  E016               	bz	l10173
  5634                           
  5635                           ; BSR set to: 0
  5636  0022AE  0E0C               	movlw	low _seconds_temp
  5637  0022B0  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5638  0022B2  6ED9               	movwf	fsr2l,c
  5639  0022B4  6ADA               	clrf	fsr2h,c
  5640  0022B6  0E01               	movlw	high _seconds_temp
  5641  0022B8  22DA               	addwfc	fsr2h,f,c
  5642  0022BA  50DF               	movf	indf2,w,c
  5643  0022BC  6197               	cpfslt	doOneSecondWork@tmp& (0+255),b
  5644  0022BE  D00D               	goto	l10173
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;main.c: 566: if (sendTempEvent(i)) {
  5648  0022C0  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5649  0022C2  EC1D  F025         	call	_sendTempEvent
  5650  0022C6  0900               	iorlw	0
  5651  0022C8  E008               	bz	l10173
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;main.c: 567: seconds_temp[i] = 0;
  5655  0022CA  0E0C               	movlw	low _seconds_temp
  5656  0022CC  0100               	movlb	0	; () banked
  5657  0022CE  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5658  0022D0  6ED9               	movwf	fsr2l,c
  5659  0022D2  6ADA               	clrf	fsr2h,c
  5660  0022D4  0E01               	movlw	high _seconds_temp
  5661  0022D6  22DA               	addwfc	fsr2h,f,c
  5662  0022D8  6ADF               	clrf	indf2,c
  5663  0022DA                     l10173:
  5664                           
  5665                           ;main.c: 568: }
  5666                           ;main.c: 570: }
  5667                           ;main.c: 575: if (0x80 & readEEPROM(0x43 + i)) {
  5668  0022DA  0E43               	movlw	67
  5669  0022DC  DA44               	call	PL72	;call to abstracted procedure
  5670  0022DE  EC27  F02A         	call	_readEEPROM	;wreg free
  5671  0022E2  0100               	movlb	0	; () banked
  5672  0022E4  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5673  0022E6  AF90               	btfss	??_doOneSecondWork& (0+255),7,b
  5674  0022E8  D072               	goto	l10227
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;main.c: 578: if (low_alarm & (1 << i)) {
  5678  0022EA  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  5679  0022EE  0E01               	movlw	1
  5680  0022F0  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5681  0022F2  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  5682  0022F4  D002               	goto	u8254
  5683  0022F6                     u8255:
  5684  0022F6  90D8               	bcf	status,0,c
  5685  0022F8  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5686  0022FA                     u8254:
  5687  0022FA  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  5688  0022FC  D7FC               	goto	u8255
  5689  0022FE  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5690  002300  15C6               	andwf	_low_alarm& (0+255),w,b
  5691  002302  E030               	bz	l10201
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;main.c: 581: if (readEEPROM(0x43 + i) & (1<<3)) {
  5695  002304  D9E4               	call	PL10	;call to abstracted procedure
  5696  002306  EC27  F02A         	call	_readEEPROM	;wreg free
  5697  00230A  0100               	movlb	0	; () banked
  5698  00230C  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5699  00230E  A790               	btfss	??_doOneSecondWork& (0+255),3,b
  5700  002310  D029               	goto	l10201
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;main.c: 583: vscp_omsg.priority = 0x00;
  5704  002312  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;main.c: 584: vscp_omsg.flags = 0x80 + 3;
  5708  002314  0E83               	movlw	131
  5709  002316  6FCC               	movwf	_vscp_omsg& (0+255),b
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;main.c: 587: if (readEEPROM(0x43 + i) & (1<<5)) {
  5713  002318  D9DA               	call	PL10	;call to abstracted procedure
  5714  00231A  EC27  F02A         	call	_readEEPROM	;wreg free
  5715  00231E  0100               	movlb	0	; () banked
  5716  002320  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5717  002322  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  5718  002324  D011               	goto	l10191
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;main.c: 589: if (readEEPROM(0x43 + i) & (1<<6)) {
  5722  002326  0E43               	movlw	67
  5723  002328  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5724  00232A  6E16               	movwf	?_readEEPROM,c
  5725  00232C  6A17               	clrf	?_readEEPROM+1,c
  5726  00232E  0E00               	movlw	0
  5727  002330  2217               	addwfc	?_readEEPROM+1,f,c
  5728  002332  EC27  F02A         	call	_readEEPROM	;wreg free
  5729  002336  0100               	movlb	0	; () banked
  5730  002338  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5731  00233A  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  5732  00233C  D003               	goto	l10189
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;main.c: 590: vscp_omsg.vscp_class = 30;
  5736  00233E  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5737                           
  5738                           ;main.c: 591: vscp_omsg.vscp_type = 5;
  5739  002340  DA24               	call	PL86	;call to abstracted procedure
  5740  002342  D006               	goto	L4
  5741  002344                     l10189:
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;main.c: 593: else {
  5745                           ;main.c: 594: vscp_omsg.vscp_class = 30;
  5746                           
  5747                           ;main.c: 595: vscp_omsg.vscp_type = 6;
  5748  002344  DA25               	call	PL88	;call to abstracted procedure
  5749  002346  D004               	goto	L4
  5750  002348                     l10191:
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;main.c: 599: else {
  5754                           ;main.c: 601: vscp_omsg.vscp_class = 1;
  5755  002348  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5756  00234A  0E01               	movlw	1
  5757  00234C  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  5758                           
  5759                           ;main.c: 602: vscp_omsg.vscp_type = 2;
  5760  00234E  0E02               	movlw	2
  5761  002350                     L4:
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;main.c: 603: }
  5765                           ;main.c: 605: vscp_omsg.data[ 0 ] = i;
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;main.c: 606: vscp_omsg.data[ 1 ] =
  5769                           ;main.c: 607: readEEPROM(0x73 + 2*i);
  5770  002350  D995               	call	PL4	;call to abstracted procedure
  5771  002352  EC27  F02A         	call	_readEEPROM	;wreg free
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;main.c: 608: vscp_omsg.data[ 2 ] =
  5775                           ;main.c: 609: readEEPROM(0x74 + 2*i);
  5776  002356  D9AD               	call	PL8	;call to abstracted procedure
  5777  002358  EC27  F02A         	call	_readEEPROM	;wreg free
  5778  00235C  0100               	movlb	0	; () banked
  5779  00235E  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;main.c: 614: vscp_sendEvent();
  5783  002360  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  5784  002364                     l10201:
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;main.c: 616: }
  5788                           ;main.c: 617: }
  5789                           ;main.c: 620: if (high_alarm & (1 << i)) {
  5790  002364  D99A               	call	PL6	;call to abstracted procedure
  5791  002366  15C5               	andwf	_high_alarm& (0+255),w,b
  5792  002368  E032               	bz	l10227
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;main.c: 623: if ((readEEPROM(0x43 + i) & (1<<4))) {
  5796  00236A  D9B1               	call	PL10	;call to abstracted procedure
  5797  00236C  EC27  F02A         	call	_readEEPROM	;wreg free
  5798  002370  0100               	movlb	0	; () banked
  5799  002372  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5800  002374  A990               	btfss	??_doOneSecondWork& (0+255),4,b
  5801  002376  D02B               	goto	l10227
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;main.c: 625: vscp_omsg.priority = 0x00;
  5805  002378  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;main.c: 626: vscp_omsg.flags = 0x80 + 3;
  5809  00237A  0E83               	movlw	131
  5810  00237C  6FCC               	movwf	_vscp_omsg& (0+255),b
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;main.c: 628: if (readEEPROM(0x43 + i) & (1<<5)) {
  5814  00237E  D9A7               	call	PL10	;call to abstracted procedure
  5815  002380  EC27  F02A         	call	_readEEPROM	;wreg free
  5816  002384  0100               	movlb	0	; () banked
  5817  002386  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5818  002388  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  5819  00238A  D013               	goto	l10217
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;main.c: 630: if (readEEPROM(0x43 + i) & (1<<6)) {
  5823  00238C  0E43               	movlw	67
  5824  00238E  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5825  002390  6E16               	movwf	?_readEEPROM,c
  5826  002392  6A17               	clrf	?_readEEPROM+1,c
  5827  002394  0E00               	movlw	0
  5828  002396  2217               	addwfc	?_readEEPROM+1,f,c
  5829  002398  EC27  F02A         	call	_readEEPROM	;wreg free
  5830  00239C  0100               	movlb	0	; () banked
  5831  00239E  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5832  0023A0  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  5833  0023A2  D005               	goto	l10215
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;main.c: 631: vscp_omsg.vscp_class = 30;
  5837  0023A4  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5838  0023A6  0E1E               	movlw	30
  5839  0023A8  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  5840                           
  5841                           ;main.c: 632: vscp_omsg.vscp_type = 6;
  5842  0023AA  0E06               	movlw	6
  5843  0023AC  D006               	goto	L5
  5844  0023AE                     l10215:
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;main.c: 634: else {
  5848                           ;main.c: 635: vscp_omsg.vscp_class = 30;
  5849                           
  5850                           ;main.c: 636: vscp_omsg.vscp_type = 5;
  5851  0023AE  D9E9               	call	PL84	;call to abstracted procedure
  5852  0023B0  D004               	goto	L5
  5853  0023B2                     l10217:
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;main.c: 639: else {
  5857                           ;main.c: 641: vscp_omsg.vscp_class = 1;
  5858  0023B2  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5859  0023B4  0E01               	movlw	1
  5860  0023B6  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  5861                           
  5862                           ;main.c: 642: vscp_omsg.vscp_type = 2;
  5863  0023B8  0E02               	movlw	2
  5864  0023BA                     L5:
  5865                           
  5866                           ; BSR set to: 0
  5867                           ;main.c: 643: }
  5868                           ;main.c: 645: vscp_omsg.data[ 0 ] = i;
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;main.c: 646: vscp_omsg.data[ 1 ] =
  5872                           ;main.c: 647: readEEPROM(0x73 + 2*i);
  5873  0023BA  D960               	call	PL4	;call to abstracted procedure
  5874  0023BC  EC27  F02A         	call	_readEEPROM	;wreg free
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;main.c: 648: vscp_omsg.data[ 2 ] =
  5878                           ;main.c: 649: readEEPROM(0x74 + 2*i);
  5879  0023C0  D978               	call	PL8	;call to abstracted procedure
  5880  0023C2  EC27  F02A         	call	_readEEPROM	;wreg free
  5881  0023C6  0100               	movlb	0	; () banked
  5882  0023C8  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;main.c: 654: vscp_sendEvent();
  5886  0023CA  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  5887  0023CE                     l10227:
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;main.c: 655: }
  5891                           ;main.c: 656: }
  5892                           ;main.c: 657: }
  5893                           ;main.c: 663: if (low_alarm & (1 << i)) {
  5894  0023CE  D965               	call	PL6	;call to abstracted procedure
  5895  0023D0  15C6               	andwf	_low_alarm& (0+255),w,b
  5896  0023D2  E044               	bz	l10235
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;main.c: 666: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2*i))<<8) + (uint16_t
      +                          )readEEPROM(0x5C + 2*i)) ) +
  5900                           ;main.c: 668: (int8_t) readEEPROM(0x97 + i);
  5901  0023D4  D9C1               	call	PL62	;call to abstracted procedure
  5902  0023D6  EC27  F02A         	call	_readEEPROM	;wreg free
  5903  0023DA  0100               	movlb	0	; () banked
  5904  0023DC  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5905  0023DE  90D8               	bcf	status,0,c
  5906  0023E0  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5907  0023E2  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5908  0023E4  6B92               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5909  0023E6  3792               	rlcf	(??_doOneSecondWork+2)& (0+255),f,b
  5910  0023E8  0E5B               	movlw	91
  5911  0023EA  2591               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  5912  0023EC  6E16               	movwf	?_readEEPROM,c
  5913  0023EE  0E00               	movlw	0
  5914  0023F0  2192               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  5915  0023F2  6E17               	movwf	?_readEEPROM+1,c
  5916  0023F4  EC27  F02A         	call	_readEEPROM	;wreg free
  5917  0023F8  0100               	movlb	0	; () banked
  5918  0023FA  6F94               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5919  0023FC  6B93               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5920  0023FE  90D8               	bcf	status,0,c
  5921  002400  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5922  002402  6F95               	movwf	(??_doOneSecondWork+5)& (0+255),b
  5923  002404  6B96               	clrf	(??_doOneSecondWork+6)& (0+255),b
  5924  002406  3796               	rlcf	(??_doOneSecondWork+6)& (0+255),f,b
  5925  002408  0E5C               	movlw	92
  5926  00240A  2595               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  5927  00240C  6E16               	movwf	?_readEEPROM,c
  5928  00240E  0E00               	movlw	0
  5929  002410  2196               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  5930  002412  6E17               	movwf	?_readEEPROM+1,c
  5931  002414  EC27  F02A         	call	_readEEPROM	;wreg free
  5932  002418  0100               	movlb	0	; () banked
  5933  00241A  2793               	addwf	(??_doOneSecondWork+3)& (0+255),f,b
  5934  00241C  0E00               	movlw	0
  5935  00241E  2394               	addwfc	(??_doOneSecondWork+4)& (0+255),f,b
  5936  002420  5190               	movf	??_doOneSecondWork& (0+255),w,b
  5937  002422  2593               	addwf	(??_doOneSecondWork+3)& (0+255),w,b
  5938  002424  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  5939  002426  0E00               	movlw	0
  5940  002428  2194               	addwfc	(??_doOneSecondWork+4)& (0+255),w,b
  5941  00242A  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;main.c: 673: if (current_temp[ i ] > (setpoint * 100)) {
  5945  00242C  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5946  00242E  0D02               	mullw	2
  5947  002430  0101               	movlb	1	; () banked
  5948  002432  D91D               	call	PL2	;call to abstracted procedure
  5949  002434  CFDE F090          	movff	postinc2,??_doOneSecondWork
  5950  002438  D972               	call	PL36	;call to abstracted procedure
  5951  00243A  ECA2  F028         	call	___wmul	;wreg free
  5952  00243E  D979               	call	PL42	;call to abstracted procedure
  5953  002440  E26B               	bc	l228
  5954  002442                     l10233:
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;main.c: 676: low_alarm &= ~(1 << i);
  5958  002442  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  5959  002446  0E01               	movlw	1
  5960  002448  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5961  00244A  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  5962  00244C  D002               	goto	u8384
  5963  00244E                     u8385:
  5964  00244E  90D8               	bcf	status,0,c
  5965  002450  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5966  002452                     u8384:
  5967  002452  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  5968  002454  D7FC               	goto	u8385
  5969  002456  1D91               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  5970  002458  17C6               	andwf	_low_alarm& (0+255),f,b
  5971  00245A  D05E               	goto	l228
  5972  00245C                     l10235:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;main.c: 681: else {
  5976                           ;main.c: 685: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2*i ))<<8) + (uint16_
      +                          t)readEEPROM(0x5C + 2*i )) );
  5977  00245C  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5978  00245E  0D02               	mullw	2
  5979  002460  0E5C               	movlw	92
  5980  002462  24F3               	addwf	prodl,w,c
  5981  002464  6E16               	movwf	?_readEEPROM,c
  5982  002466  0E00               	movlw	0
  5983  002468  20F4               	addwfc	prodh,w,c
  5984  00246A  6E17               	movwf	?_readEEPROM+1,c
  5985  00246C  EC27  F02A         	call	_readEEPROM	;wreg free
  5986  002470  0100               	movlb	0	; () banked
  5987  002472  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5988  002474  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5989  002476  0D02               	mullw	2
  5990  002478  0E5B               	movlw	91
  5991  00247A  24F3               	addwf	prodl,w,c
  5992  00247C  6E16               	movwf	?_readEEPROM,c
  5993  00247E  0E00               	movlw	0
  5994  002480  20F4               	addwfc	prodh,w,c
  5995  002482  6E17               	movwf	?_readEEPROM+1,c
  5996  002484  EC27  F02A         	call	_readEEPROM	;wreg free
  5997  002488  0100               	movlb	0	; () banked
  5998  00248A  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5999  00248C  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6000  00248E  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;main.c: 688: if (current_temp[ i ] < (setpoint * 100)) {
  6004  002490  C098  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6005  002494  C099  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6006  002498  6A11               	clrf	?___wmul+3,c
  6007  00249A  0E64               	movlw	100
  6008  00249C  6E10               	movwf	?___wmul+2,c
  6009  00249E  ECA2  F028         	call	___wmul	;wreg free
  6010  0024A2  0100               	movlb	0	; () banked
  6011  0024A4  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6012  0024A6  0D02               	mullw	2
  6013  0024A8  D8E2               	call	PL2	;call to abstracted procedure
  6014  0024AA  D920               	call	PL18	;call to abstracted procedure
  6015  0024AC  E235               	bc	l228
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;main.c: 691: low_alarm |= (1 << i);
  6019  0024AE  D8F5               	call	PL6	;call to abstracted procedure
  6020  0024B0  13C6               	iorwf	_low_alarm& (0+255),f,b
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;main.c: 696: vscp_alarmstatus |= 1;
  6024  0024B2  804A               	bsf	_vscp_alarmstatus,0,c
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;main.c: 699: if ( readEEPROM(i + 0x43) & (1<<3) ) {
  6028  0024B4  D90C               	call	PL10	;call to abstracted procedure
  6029  0024B6  EC27  F02A         	call	_readEEPROM	;wreg free
  6030  0024BA  0100               	movlb	0	; () banked
  6031  0024BC  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6032  0024BE  A790               	btfss	??_doOneSecondWork& (0+255),3,b
  6033  0024C0  D02B               	goto	l228
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;main.c: 701: vscp_omsg.priority = 0x00;
  6037  0024C2  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;main.c: 702: vscp_omsg.flags = 0x80 + 3;
  6041  0024C4  0E83               	movlw	131
  6042  0024C6  6FCC               	movwf	_vscp_omsg& (0+255),b
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;main.c: 705: if (readEEPROM(0x43 + i) & (1<<5)) {
  6046  0024C8  D902               	call	PL10	;call to abstracted procedure
  6047  0024CA  EC27  F02A         	call	_readEEPROM	;wreg free
  6048  0024CE  0100               	movlb	0	; () banked
  6049  0024D0  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6050  0024D2  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  6051  0024D4  D011               	goto	l10257
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;main.c: 707: if (readEEPROM(0x43 + i) & (1<<6)) {
  6055  0024D6  0E43               	movlw	67
  6056  0024D8  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6057  0024DA  6E16               	movwf	?_readEEPROM,c
  6058  0024DC  6A17               	clrf	?_readEEPROM+1,c
  6059  0024DE  0E00               	movlw	0
  6060  0024E0  2217               	addwfc	?_readEEPROM+1,f,c
  6061  0024E2  EC27  F02A         	call	_readEEPROM	;wreg free
  6062  0024E6  0100               	movlb	0	; () banked
  6063  0024E8  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6064  0024EA  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  6065  0024EC  D003               	goto	l10255
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;main.c: 708: vscp_omsg.vscp_class = 30;
  6069  0024EE  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6070                           
  6071                           ;main.c: 709: vscp_omsg.vscp_type = 5;
  6072  0024F0  D94C               	call	PL86	;call to abstracted procedure
  6073  0024F2  D006               	goto	L6
  6074  0024F4                     l10255:
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;main.c: 711: else {
  6078                           ;main.c: 712: vscp_omsg.vscp_class = 30;
  6079                           
  6080                           ;main.c: 713: vscp_omsg.vscp_type = 6;
  6081  0024F4  D94D               	call	PL88	;call to abstracted procedure
  6082  0024F6  D004               	goto	L6
  6083  0024F8                     l10257:
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;main.c: 717: else {
  6087                           ;main.c: 718: vscp_omsg.vscp_class = 1;
  6088  0024F8  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6089  0024FA  0E01               	movlw	1
  6090  0024FC  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6091                           
  6092                           ;main.c: 719: vscp_omsg.vscp_type = 2;
  6093  0024FE  0E02               	movlw	2
  6094  002500                     L6:
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;main.c: 720: }
  6098                           ;main.c: 722: vscp_omsg.data[ 0 ] = i;
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;main.c: 723: vscp_omsg.data[ 1 ] = readEEPROM(0x73 + 2 * i);
  6102  002500  D8BD               	call	PL4	;call to abstracted procedure
  6103  002502  EC27  F02A         	call	_readEEPROM	;wreg free
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;main.c: 724: vscp_omsg.data[ 2 ] = readEEPROM(0x74 + 2 * i);
  6107  002506  D8D5               	call	PL8	;call to abstracted procedure
  6108  002508  EC27  F02A         	call	_readEEPROM	;wreg free
  6109  00250C  0100               	movlb	0	; () banked
  6110  00250E  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;main.c: 727: if (!vscp_sendEvent()) {
  6114  002510  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  6115  002514  0900               	iorlw	0
  6116  002516  E095               	bz	l10233
  6117  002518                     l228:
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;main.c: 731: }
  6121                           ;main.c: 733: }
  6122                           ;main.c: 734: }
  6123                           ;main.c: 735: }
  6124                           ;main.c: 740: if (high_alarm & (1 << i)) {
  6125  002518  D8C0               	call	PL6	;call to abstracted procedure
  6126  00251A  15C5               	andwf	_high_alarm& (0+255),w,b
  6127  00251C  E047               	bz	l10275
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;main.c: 744: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x68 + 2 * i)) ) -
  6131                           ;main.c: 746: (int8_t) readEEPROM(0x97 + i);
  6132  00251E  90D8               	bcf	status,0,c
  6133  002520  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6134  002522  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6135  002524  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6136  002526  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6137  002528  0E67               	movlw	103
  6138  00252A  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6139  00252C  6E16               	movwf	?_readEEPROM,c
  6140  00252E  0E00               	movlw	0
  6141  002530  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6142  002532  6E17               	movwf	?_readEEPROM+1,c
  6143  002534  EC27  F02A         	call	_readEEPROM	;wreg free
  6144  002538  0100               	movlb	0	; () banked
  6145  00253A  6F93               	movwf	(??_doOneSecondWork+3)& (0+255),b
  6146  00253C  6B92               	clrf	(??_doOneSecondWork+2)& (0+255),b
  6147  00253E  90D8               	bcf	status,0,c
  6148  002540  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6149  002542  6F94               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6150  002544  6B95               	clrf	(??_doOneSecondWork+5)& (0+255),b
  6151  002546  3795               	rlcf	(??_doOneSecondWork+5)& (0+255),f,b
  6152  002548  0E68               	movlw	104
  6153  00254A  2594               	addwf	(??_doOneSecondWork+4)& (0+255),w,b
  6154  00254C  6E16               	movwf	?_readEEPROM,c
  6155  00254E  0E00               	movlw	0
  6156  002550  2195               	addwfc	(??_doOneSecondWork+5)& (0+255),w,b
  6157  002552  6E17               	movwf	?_readEEPROM+1,c
  6158  002554  EC27  F02A         	call	_readEEPROM	;wreg free
  6159  002558  0100               	movlb	0	; () banked
  6160  00255A  2792               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  6161  00255C  0E00               	movlw	0
  6162  00255E  2393               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  6163  002560  D8FB               	call	PL62	;call to abstracted procedure
  6164  002562  EC27  F02A         	call	_readEEPROM	;wreg free
  6165  002566  0100               	movlb	0	; () banked
  6166  002568  5D92               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6167  00256A  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  6168  00256C  5193               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6169  00256E  A0D8               	btfss	status,0,c
  6170  002570  0593               	decf	(??_doOneSecondWork+3)& (0+255),w,b
  6171  002572  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;main.c: 749: if (current_temp[ i ] < (setpoint * 100) ) {
  6175  002574  C098  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6176  002578  C099  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6177  00257C  6A11               	clrf	?___wmul+3,c
  6178  00257E  0E64               	movlw	100
  6179  002580  6E10               	movwf	?___wmul+2,c
  6180  002582  ECA2  F028         	call	___wmul	;wreg free
  6181  002586  0100               	movlb	0	; () banked
  6182  002588  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6183  00258A  0D02               	mullw	2
  6184  00258C  D870               	call	PL2	;call to abstracted procedure
  6185  00258E  D8AE               	call	PL18	;call to abstracted procedure
  6186  002590  E269               	bc	l10309
  6187  002592                     l10273:
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;main.c: 752: high_alarm &= ~(1 << i);
  6191  002592  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  6192  002596  0E01               	movlw	1
  6193  002598  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6194  00259A  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  6195  00259C  D002               	goto	u8484
  6196  00259E                     u8485:
  6197  00259E  90D8               	bcf	status,0,c
  6198  0025A0  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6199  0025A2                     u8484:
  6200  0025A2  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  6201  0025A4  D7FC               	goto	u8485
  6202  0025A6  1D91               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  6203  0025A8  17C5               	andwf	_high_alarm& (0+255),f,b
  6204  0025AA  D05C               	goto	l10309
  6205  0025AC                     l10275:
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;main.c: 757: else {
  6209                           ;main.c: 762: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x68 + 2 * i)) );
  6210  0025AC  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6211  0025AE  0D02               	mullw	2
  6212  0025B0  0E68               	movlw	104
  6213  0025B2  24F3               	addwf	prodl,w,c
  6214  0025B4  6E16               	movwf	?_readEEPROM,c
  6215  0025B6  0E00               	movlw	0
  6216  0025B8  20F4               	addwfc	prodh,w,c
  6217  0025BA  6E17               	movwf	?_readEEPROM+1,c
  6218  0025BC  EC27  F02A         	call	_readEEPROM	;wreg free
  6219  0025C0  0100               	movlb	0	; () banked
  6220  0025C2  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6221  0025C4  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6222  0025C6  0D02               	mullw	2
  6223  0025C8  0E67               	movlw	103
  6224  0025CA  24F3               	addwf	prodl,w,c
  6225  0025CC  6E16               	movwf	?_readEEPROM,c
  6226  0025CE  0E00               	movlw	0
  6227  0025D0  20F4               	addwfc	prodh,w,c
  6228  0025D2  6E17               	movwf	?_readEEPROM+1,c
  6229  0025D4  EC27  F02A         	call	_readEEPROM	;wreg free
  6230  0025D8  0100               	movlb	0	; () banked
  6231  0025DA  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6232  0025DC  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6233  0025DE  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;main.c: 765: if (current_temp[ i ] > (setpoint * 100)) {
  6237  0025E0  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6238  0025E2  0D02               	mullw	2
  6239  0025E4  0101               	movlb	1	; () banked
  6240  0025E6  D843               	call	PL2	;call to abstracted procedure
  6241  0025E8  CFDE F090          	movff	postinc2,??_doOneSecondWork
  6242  0025EC  D898               	call	PL36	;call to abstracted procedure
  6243  0025EE  ECA2  F028         	call	___wmul	;wreg free
  6244  0025F2  D89F               	call	PL42	;call to abstracted procedure
  6245  0025F4  E237               	bc	l10309
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;main.c: 768: high_alarm |= (1 << i);
  6249  0025F6  D851               	call	PL6	;call to abstracted procedure
  6250  0025F8  13C5               	iorwf	_high_alarm& (0+255),f,b
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;main.c: 774: vscp_alarmstatus |= 2;
  6254  0025FA  824A               	bsf	_vscp_alarmstatus,1,c
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;main.c: 777: if (readEEPROM(0x43 + i) & (1<<4)) {
  6258  0025FC  D868               	call	PL10	;call to abstracted procedure
  6259  0025FE  EC27  F02A         	call	_readEEPROM	;wreg free
  6260  002602  0100               	movlb	0	; () banked
  6261  002604  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6262  002606  A990               	btfss	??_doOneSecondWork& (0+255),4,b
  6263  002608  D02D               	goto	l10309
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;main.c: 779: vscp_omsg.priority = 0x00;
  6267  00260A  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;main.c: 780: vscp_omsg.flags = 0x80 + 3;
  6271  00260C  0E83               	movlw	131
  6272  00260E  6FCC               	movwf	_vscp_omsg& (0+255),b
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;main.c: 782: if (readEEPROM(0x43 + i) & (1<<5)) {
  6276  002610  D85E               	call	PL10	;call to abstracted procedure
  6277  002612  EC27  F02A         	call	_readEEPROM	;wreg free
  6278  002616  0100               	movlb	0	; () banked
  6279  002618  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6280  00261A  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  6281  00261C  D013               	goto	l10297
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;main.c: 784: if (readEEPROM(0x43 + i) & (1<<6)) {
  6285  00261E  0E43               	movlw	67
  6286  002620  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6287  002622  6E16               	movwf	?_readEEPROM,c
  6288  002624  6A17               	clrf	?_readEEPROM+1,c
  6289  002626  0E00               	movlw	0
  6290  002628  2217               	addwfc	?_readEEPROM+1,f,c
  6291  00262A  EC27  F02A         	call	_readEEPROM	;wreg free
  6292  00262E  0100               	movlb	0	; () banked
  6293  002630  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6294  002632  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  6295  002634  D005               	goto	l10295
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;main.c: 785: vscp_omsg.vscp_class = 30;
  6299  002636  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6300  002638  0E1E               	movlw	30
  6301  00263A  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6302                           
  6303                           ;main.c: 786: vscp_omsg.vscp_type = 6;
  6304  00263C  0E06               	movlw	6
  6305  00263E  D006               	goto	L7
  6306  002640                     l10295:
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;main.c: 788: else {
  6310                           ;main.c: 789: vscp_omsg.vscp_class = 30;
  6311                           
  6312                           ;main.c: 790: vscp_omsg.vscp_type = 5;
  6313  002640  D8A0               	call	PL84	;call to abstracted procedure
  6314  002642  D004               	goto	L7
  6315  002644                     l10297:
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;main.c: 793: else {
  6319                           ;main.c: 794: vscp_omsg.vscp_class = 1;
  6320  002644  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6321  002646  0E01               	movlw	1
  6322  002648  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6323                           
  6324                           ;main.c: 795: vscp_omsg.vscp_type = 2;
  6325  00264A  0E02               	movlw	2
  6326  00264C                     L7:
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;main.c: 796: }
  6330                           ;main.c: 798: vscp_omsg.data[ 0 ] = i;
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;main.c: 799: vscp_omsg.data[ 1 ] = readEEPROM(0x73 + 2 * i);
  6334  00264C  D817               	call	PL4	;call to abstracted procedure
  6335  00264E  EC27  F02A         	call	_readEEPROM	;wreg free
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;main.c: 800: vscp_omsg.data[ 2 ] = readEEPROM(0x74 + 2 * i);
  6339  002652  D82F               	call	PL8	;call to abstracted procedure
  6340  002654  EC27  F02A         	call	_readEEPROM	;wreg free
  6341  002658  0100               	movlb	0	; () banked
  6342  00265A  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;main.c: 803: if (!vscp_sendEvent()) {
  6346  00265C  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  6347  002660  0900               	iorlw	0
  6348  002662  E097               	bz	l10273
  6349  002664                     l10309:
  6350                           
  6351                           ; BSR set to: 0
  6352  002664  2B9A               	incf	doOneSecondWork@i& (0+255),f,b
  6353  002666  0E05               	movlw	5
  6354  002668  659A               	cpfsgt	doOneSecondWork@i& (0+255),b
  6355  00266A  D5A8               	goto	l10157
  6356                           
  6357                           ; BSR set to: 0
  6358  00266C  0C05               	retlw	5
  6359  00266E                     __end_of_doOneSecondWork:
  6360                           	opt stack 0
  6361  00266E                     PL2:
  6362                           	opt stack 22
  6363  00266E  0E00               	movlw	low _current_temp
  6364  002670  24F3               	addwf	prodl,w,c
  6365  002672  6ED9               	movwf	fsr2l,c
  6366  002674  0E01               	movlw	high _current_temp
  6367  002676  20F4               	addwfc	prodh,w,c
  6368  002678  6EDA               	movwf	fsr2h,c
  6369  00267A  0012               	return	
  6370  00267C                     __end_ofPL2:
  6371                           	opt stack 0
  6372  00267C                     PL4:
  6373                           	opt stack 21
  6374  00267C  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  6375  00267E  C09A  F0D1         	movff	doOneSecondWork@i,_vscp_omsg+5
  6376  002682  90D8               	bcf	status,0,c
  6377  002684  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6378  002686  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6379  002688  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6380  00268A  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6381  00268C  0E73               	movlw	115
  6382  00268E  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6383  002690  6E16               	movwf	?_readEEPROM,c
  6384  002692  0E00               	movlw	0
  6385  002694  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6386  002696  6E17               	movwf	?_readEEPROM+1,c
  6387  002698  0012               	return	
  6388  00269A                     __end_ofPL4:
  6389                           	opt stack 0
  6390  00269A                     PL6:
  6391                           	opt stack 21
  6392  00269A  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  6393  00269E  0E01               	movlw	1
  6394  0026A0  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6395  0026A2  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  6396  0026A4  D002               	goto	u8304
  6397  0026A6                     u8305:
  6398  0026A6  90D8               	bcf	status,0,c
  6399  0026A8  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6400  0026AA                     u8304:
  6401  0026AA  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  6402  0026AC  D7FC               	goto	u8305
  6403  0026AE  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6404  0026B0  0012               	return	
  6405  0026B2                     __end_ofPL6:
  6406                           	opt stack 0
  6407  0026B2                     PL8:
  6408                           	opt stack 21
  6409  0026B2  0100               	movlb	0	; () banked
  6410  0026B4  6FD2               	movwf	(_vscp_omsg+6)& (0+255),b
  6411  0026B6  90D8               	bcf	status,0,c
  6412  0026B8  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6413  0026BA  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6414  0026BC  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6415  0026BE  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6416  0026C0  0E74               	movlw	116
  6417  0026C2  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6418  0026C4  6E16               	movwf	?_readEEPROM,c
  6419  0026C6  0E00               	movlw	0
  6420  0026C8  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6421  0026CA  6E17               	movwf	?_readEEPROM+1,c
  6422  0026CC  0012               	return	
  6423  0026CE                     __end_ofPL8:
  6424                           	opt stack 0
  6425  0026CE                     PL10:
  6426                           	opt stack 21
  6427  0026CE  0E43               	movlw	67
  6428  0026D0  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6429  0026D2  6E16               	movwf	?_readEEPROM,c
  6430  0026D4  6A17               	clrf	?_readEEPROM+1,c
  6431  0026D6  0E00               	movlw	0
  6432  0026D8  2217               	addwfc	?_readEEPROM+1,f,c
  6433  0026DA  0C00               	retlw	0
  6434  0026DC                     __end_ofPL10:
  6435                           	opt stack 0
  6436  0026DC                     PL12:
  6437                           	opt stack 21
  6438  0026DC  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6439  0026DE  6E0E               	movwf	?_writeEEPROM,c
  6440  0026E0  0E00               	movlw	0
  6441  0026E2  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6442  0026E4  6E0F               	movwf	?_writeEEPROM+1,c
  6443  0026E6  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6444  0026E8  0D02               	mullw	2
  6445  0026EA  0012               	return	
  6446  0026EC                     __end_ofPL12:
  6447                           	opt stack 0
  6448  0026EC                     PL18:
  6449                           	opt stack 21
  6450  0026EC  CFDE F090          	movff	postinc2,??_doOneSecondWork
  6451  0026F0  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  6452  0026F4  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6453  0026F6  0A80               	xorlw	128
  6454  0026F8  6F92               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6455  0026FA  500E               	movf	?___wmul,w,c
  6456  0026FC  5D90               	subwf	??_doOneSecondWork& (0+255),w,b
  6457  0026FE  500F               	movf	?___wmul+1,w,c
  6458  002700  0A80               	xorlw	128
  6459  002702  5992               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6460  002704  0012               	return	
  6461  002706                     __end_ofPL18:
  6462                           	opt stack 0
  6463  002706                     PL26:
  6464                           	opt stack 21
  6465  002706  CFDE F092          	movff	postinc2,??_doOneSecondWork+2
  6466  00270A  CFDD F093          	movff	postdec2,??_doOneSecondWork+3
  6467  00270E  C093  F092         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  6468  002712  6B93               	clrf	(??_doOneSecondWork+3)& (0+255),b
  6469  002714  BF92               	btfsc	(??_doOneSecondWork+2)& (0+255),7,b
  6470  002716  6993               	setf	(??_doOneSecondWork+3)& (0+255),b
  6471  002718  5192               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  6472  00271A  6E10               	movwf	?_writeEEPROM+2,c
  6473  00271C  0012               	return	
  6474  00271E                     __end_ofPL26:
  6475                           	opt stack 0
  6476  00271E                     PL36:
  6477                           	opt stack 21
  6478  00271E  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  6479  002722  C098  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6480  002726  C099  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6481  00272A  6A11               	clrf	?___wmul+3,c
  6482  00272C  0E64               	movlw	100
  6483  00272E  6E10               	movwf	?___wmul+2,c
  6484  002730  0C64               	retlw	100
  6485  002732                     __end_ofPL36:
  6486                           	opt stack 0
  6487  002732                     PL42:
  6488                           	opt stack 21
  6489  002732  500F               	movf	?___wmul+1,w,c
  6490  002734  0A80               	xorlw	128
  6491  002736  0100               	movlb	0	; () banked
  6492  002738  6F92               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6493  00273A  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6494  00273C  5C0E               	subwf	?___wmul,w,c
  6495  00273E  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6496  002740  0A80               	xorlw	128
  6497  002742  5992               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6498  002744  0012               	return	
  6499  002746                     __end_ofPL42:
  6500                           	opt stack 0
  6501  002746                     PL50:
  6502                           	opt stack 21
  6503  002746  5193               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6504  002748  0A80               	xorlw	128
  6505  00274A  6F94               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6506  00274C  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6507  00274E  5D92               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6508  002750  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6509  002752  0A80               	xorlw	128
  6510  002754  5994               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  6511  002756  0012               	return	
  6512  002758                     __end_ofPL50:
  6513                           	opt stack 0
  6514  002758                     PL62:
  6515                           	opt stack 21
  6516  002758  0E97               	movlw	151
  6517  00275A  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6518  00275C  6E16               	movwf	?_readEEPROM,c
  6519  00275E  6A17               	clrf	?_readEEPROM+1,c
  6520  002760  0E00               	movlw	0
  6521  002762  2217               	addwfc	?_readEEPROM+1,f,c
  6522  002764  0C00               	retlw	0
  6523  002766                     __end_ofPL62:
  6524                           	opt stack 0
  6525  002766                     PL72:
  6526                           	opt stack 21
  6527  002766  0100               	movlb	0	; () banked
  6528  002768  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6529  00276A  6E16               	movwf	?_readEEPROM,c
  6530  00276C  6A17               	clrf	?_readEEPROM+1,c
  6531  00276E  0E00               	movlw	0
  6532  002770  2217               	addwfc	?_readEEPROM+1,f,c
  6533  002772  0C00               	retlw	0
  6534  002774                     __end_ofPL72:
  6535                           	opt stack 0
  6536  002774                     PL74:
  6537                           	opt stack 21
  6538  002774  90D8               	bcf	status,0,c
  6539  002776  0100               	movlb	0	; () banked
  6540  002778  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6541  00277A  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6542  00277C  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6543  00277E  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6544  002780  0012               	return	
  6545  002782                     __end_ofPL74:
  6546                           	opt stack 0
  6547  002782                     PL84:
  6548                           	opt stack 21
  6549  002782  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6550  002784  0E1E               	movlw	30
  6551  002786  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6552  002788  0C05               	retlw	5
  6553  00278A                     __end_ofPL84:
  6554                           	opt stack 0
  6555  00278A                     PL86:
  6556                           	opt stack 21
  6557  00278A  0E1E               	movlw	30
  6558  00278C  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6559  00278E  0C05               	retlw	5
  6560  002790                     __end_ofPL86:
  6561                           	opt stack 0
  6562  002790                     PL88:
  6563                           	opt stack 21
  6564  002790  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6565  002792  0E1E               	movlw	30
  6566  002794  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6567  002796  0C06               	retlw	6
  6568  002798                     __end_ofPL88:
  6569                           	opt stack 0
  6570                           tblptru	equ	0xFF8
  6571                           tblptrh	equ	0xFF7
  6572                           tblptrl	equ	0xFF6
  6573                           tablat	equ	0xFF5
  6574                           prodh	equ	0xFF4
  6575                           prodl	equ	0xFF3
  6576                           intcon	equ	0xFF2
  6577                           postinc0	equ	0xFEE
  6578                           wreg	equ	0xFE8
  6579                           indf1	equ	0xFE7
  6580                           postdec1	equ	0xFE5
  6581                           fsr1h	equ	0xFE2
  6582                           fsr1l	equ	0xFE1
  6583                           indf2	equ	0xFDF
  6584                           postinc2	equ	0xFDE
  6585                           postdec2	equ	0xFDD
  6586                           plusw2	equ	0xFDB
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591 ;; *************** function _vscp_error *****************
  6592 ;; Defined at:
  6593 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;		None
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;		None
  6598 ;; Return value:  Size  Location     Type
  6599 ;;		None               void
  6600 ;; Registers used:
  6601 ;;		None
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6607 ;;      Params:         0       0       0       0       0       0       0
  6608 ;;      Locals:         0       0       0       0       0       0       0
  6609 ;;      Temps:          0       0       0       0       0       0       0
  6610 ;;      Totals:         0       0       0       0       0       0       0
  6611 ;;Total ram usage:        0 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    2
  6614 ;; This function calls:
  6615 ;;		Nothing
  6616 ;; This function is called by:
  6617 ;;		_main
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text26
  6622  005500                     __ptext26:
  6623                           	opt stack 0
  6624  005500                     _vscp_error:
  6625                           	opt stack 27
  6626                           
  6627                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;incstack = 0
  6631                           ;incstack = 0
  6632  005500  6A4C               	clrf	_vscp_initledfunc,c
  6633  005502  0012               	return	
  6634  005504                     __end_of_vscp_error:
  6635                           	opt stack 0
  6636                           tblptru	equ	0xFF8
  6637                           tblptrh	equ	0xFF7
  6638                           tblptrl	equ	0xFF6
  6639                           tablat	equ	0xFF5
  6640                           prodh	equ	0xFF4
  6641                           prodl	equ	0xFF3
  6642                           intcon	equ	0xFF2
  6643                           postinc0	equ	0xFEE
  6644                           wreg	equ	0xFE8
  6645                           indf1	equ	0xFE7
  6646                           postdec1	equ	0xFE5
  6647                           fsr1h	equ	0xFE2
  6648                           fsr1l	equ	0xFE1
  6649                           indf2	equ	0xFDF
  6650                           postinc2	equ	0xFDE
  6651                           postdec2	equ	0xFDD
  6652                           plusw2	equ	0xFDB
  6653                           fsr2h	equ	0xFDA
  6654                           fsr2l	equ	0xFD9
  6655                           status	equ	0xFD8
  6656                           
  6657 ;; *************** function _handle_sync *****************
  6658 ;; Defined at:
  6659 ;;		line 1262 in file "../main.c"
  6660 ;; Parameters:    Size  Location     Type
  6661 ;;		None
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  i               1   50[BANK0 ] unsigned char 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;		None               void
  6666 ;; Registers used:
  6667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6668 ;; Tracked objects:
  6669 ;;		On entry : F/1
  6670 ;;		On exit  : F/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6673 ;;      Params:         0       0       0       0       0       0       0
  6674 ;;      Locals:         0       1       0       0       0       0       0
  6675 ;;      Temps:          0       2       0       0       0       0       0
  6676 ;;      Totals:         0       3       0       0       0       0       0
  6677 ;;Total ram usage:        3 bytes
  6678 ;; Hardware stack levels used:    1
  6679 ;; Hardware stack levels required when called:    8
  6680 ;; This function calls:
  6681 ;;		_readEEPROM
  6682 ;;		_sendTempEvent
  6683 ;; This function is called by:
  6684 ;;		_main
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	text27
  6689  0049B8                     __ptext27:
  6690                           	opt stack 0
  6691  0049B8                     _handle_sync:
  6692                           	opt stack 21
  6693                           
  6694                           ; BSR set to: 1
  6695                           ;main.c: 1263: uint8_t i;
  6696                           ;main.c: 1265: for (i = 0; i < 6; i++) {
  6697                           
  6698                           ;incstack = 0
  6699                           ;incstack = 0
  6700  0049B8  0100               	movlb	0	; () banked
  6701  0049BA  6B92               	clrf	handle_sync@i& (0+255),b
  6702  0049BC                     l10133:
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;main.c: 1267: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6706                           ;main.c: 1268: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6707                           ;main.c: 1269: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6708                           ;main.c: 1270: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6709  0049BC  0101               	movlb	1	; () banked
  6710  0049BE  296F               	incf	(_vscp_imsg+7)& (0+255),w,b
  6711  0049C0  E00C               	bz	l10137
  6712                           
  6713                           ; BSR set to: 1
  6714  0049C2  D834               	call	PL66	;call to abstracted procedure
  6715  0049C4  0E73               	movlw	115
  6716  0049C6  2590               	addwf	??_handle_sync& (0+255),w,b
  6717  0049C8  6E16               	movwf	?_readEEPROM,c
  6718  0049CA  0E00               	movlw	0
  6719  0049CC  2191               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6720  0049CE  6E17               	movwf	?_readEEPROM+1,c
  6721  0049D0  EC27  F02A         	call	_readEEPROM	;wreg free
  6722  0049D4  0101               	movlb	1	; () banked
  6723  0049D6  196F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6724  0049D8  E123               	bnz	l10147
  6725  0049DA                     l10137:
  6726                           
  6727                           ; BSR set to: 1
  6728  0049DA  2970               	incf	(_vscp_imsg+8)& (0+255),w,b
  6729  0049DC  E00C               	bz	l294
  6730                           
  6731                           ; BSR set to: 1
  6732  0049DE  D826               	call	PL66	;call to abstracted procedure
  6733  0049E0  0E74               	movlw	116
  6734  0049E2  2590               	addwf	??_handle_sync& (0+255),w,b
  6735  0049E4  6E16               	movwf	?_readEEPROM,c
  6736  0049E6  0E00               	movlw	0
  6737  0049E8  2191               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6738  0049EA  6E17               	movwf	?_readEEPROM+1,c
  6739  0049EC  EC27  F02A         	call	_readEEPROM	;wreg free
  6740  0049F0  0101               	movlb	1	; () banked
  6741  0049F2  1970               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6742  0049F4  E115               	bnz	l10147
  6743  0049F6                     l294:
  6744                           
  6745                           ; BSR set to: 1
  6746                           ;main.c: 1273: timeout_clock = 0;
  6747  0049F6  6B16               	clrf	_timeout_clock& (0+255),b	;volatile
  6748  0049F8  6B17               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6749  0049FA  6B18               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6750  0049FC  6B19               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6751                           
  6752                           ;main.c: 1274: while (!sendTempEvent(i)) {
  6753  0049FE  D00A               	goto	l10145
  6754  004A00                     l10141:
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;main.c: 1275: if (timeout_clock > 1000) break;
  6758  004A00  0EE9               	movlw	233
  6759  004A02  0101               	movlb	1	; () banked
  6760  004A04  5D16               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6761  004A06  0E03               	movlw	3
  6762  004A08  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6763  004A0A  0E00               	movlw	0
  6764  004A0C  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6765  004A0E  0E00               	movlw	0
  6766  004A10  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6767  004A12  E206               	bc	l10147
  6768  004A14                     l10145:
  6769                           
  6770                           ; BSR set to: 1
  6771  004A14  0100               	movlb	0	; () banked
  6772  004A16  5192               	movf	handle_sync@i& (0+255),w,b
  6773  004A18  EC1D  F025         	call	_sendTempEvent
  6774  004A1C  0900               	iorlw	0
  6775  004A1E  E0F0               	bz	l10141
  6776  004A20                     l10147:
  6777  004A20  0100               	movlb	0	; () banked
  6778  004A22  2B92               	incf	handle_sync@i& (0+255),f,b
  6779                           
  6780                           ; BSR set to: 0
  6781  004A24  0E05               	movlw	5
  6782  004A26  6592               	cpfsgt	handle_sync@i& (0+255),b
  6783  004A28  D7C9               	goto	l10133
  6784                           
  6785                           ; BSR set to: 0
  6786  004A2A  0C05               	retlw	5
  6787  004A2C                     __end_of_handle_sync:
  6788                           	opt stack 0
  6789  004A2C                     PL66:
  6790                           	opt stack 21
  6791  004A2C  90D8               	bcf	status,0,c
  6792  004A2E  0100               	movlb	0	; () banked
  6793  004A30  3592               	rlcf	handle_sync@i& (0+255),w,b
  6794  004A32  6F90               	movwf	??_handle_sync& (0+255),b
  6795  004A34  6B91               	clrf	(??_handle_sync+1)& (0+255),b
  6796  004A36  3791               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6797  004A38  0012               	return	
  6798  004A3A                     __end_ofPL66:
  6799                           	opt stack 0
  6800                           tblptru	equ	0xFF8
  6801                           tblptrh	equ	0xFF7
  6802                           tblptrl	equ	0xFF6
  6803                           tablat	equ	0xFF5
  6804                           prodh	equ	0xFF4
  6805                           prodl	equ	0xFF3
  6806                           intcon	equ	0xFF2
  6807                           postinc0	equ	0xFEE
  6808                           wreg	equ	0xFE8
  6809                           indf1	equ	0xFE7
  6810                           postdec1	equ	0xFE5
  6811                           fsr1h	equ	0xFE2
  6812                           fsr1l	equ	0xFE1
  6813                           indf2	equ	0xFDF
  6814                           postinc2	equ	0xFDE
  6815                           postdec2	equ	0xFDD
  6816                           plusw2	equ	0xFDB
  6817                           fsr2h	equ	0xFDA
  6818                           fsr2l	equ	0xFD9
  6819                           status	equ	0xFD8
  6820                           
  6821 ;; *************** function _sendTempEvent *****************
  6822 ;; Defined at:
  6823 ;;		line 821 in file "../main.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  i               1    wreg     unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  i               1   47[BANK0 ] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      unsigned char 
  6830 ;; Registers used:
  6831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : F/0
  6834 ;;		On exit  : F/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6837 ;;      Params:         0       0       0       0       0       0       0
  6838 ;;      Locals:         0       1       0       0       0       0       0
  6839 ;;      Temps:          1       0       0       0       0       0       0
  6840 ;;      Totals:         1       1       0       0       0       0       0
  6841 ;;Total ram usage:        2 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    7
  6844 ;; This function calls:
  6845 ;;		_readEEPROM
  6846 ;;		_vscp_sendEvent
  6847 ;;		_setEventData
  6848 ;; This function is called by:
  6849 ;;		_doOneSecondWork
  6850 ;;		_handle_sync
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text28
  6855  004A3A                     __ptext28:
  6856                           	opt stack 0
  6857  004A3A                     _sendTempEvent:
  6858                           	opt stack 21
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;incstack = 0
  6862                           ;incstack = 0
  6863                           ;sendTempEvent@i stored from wreg
  6864  004A3A  CFE8 F08F          	movff	wreg,sendTempEvent@i
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;main.c: 822: vscp_omsg.priority = 0x03;
  6868  004A3E  0E03               	movlw	3
  6869  004A40  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  6870                           
  6871                           ;main.c: 823: vscp_omsg.flags = 0x80 + 4;
  6872  004A42  0E84               	movlw	132
  6873  004A44  6FCC               	movwf	_vscp_omsg& (0+255),b
  6874                           
  6875                           ;main.c: 824: vscp_omsg.vscp_class = 10;
  6876  004A46  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6877  004A48  0E0A               	movlw	10
  6878  004A4A  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6879                           
  6880                           ;main.c: 825: vscp_omsg.vscp_type = 6;
  6881  004A4C  0E06               	movlw	6
  6882  004A4E  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;main.c: 828: vscp_omsg.data[ 0 ] = 0x80 |
  6886                           ;main.c: 829: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6887                           ;main.c: 830: i;
  6888  004A50  D828               	call	PL64	;call to abstracted procedure
  6889  004A52  EC27  F02A         	call	_readEEPROM	;wreg free
  6890  004A56  6E45               	movwf	??_sendTempEvent& (0+255),c
  6891  004A58  0E03               	movlw	3
  6892  004A5A  1645               	andwf	??_sendTempEvent,f,c
  6893  004A5C  90D8               	bcf	status,0,c
  6894  004A5E  3645               	rlcf	??_sendTempEvent,f,c
  6895  004A60  90D8               	bcf	status,0,c
  6896  004A62  3645               	rlcf	??_sendTempEvent,f,c
  6897  004A64  90D8               	bcf	status,0,c
  6898  004A66  3445               	rlcf	??_sendTempEvent,w,c
  6899  004A68  0100               	movlb	0	; () banked
  6900  004A6A  118F               	iorwf	sendTempEvent@i& (0+255),w,b
  6901  004A6C  0980               	iorlw	128
  6902  004A6E  6FD1               	movwf	(_vscp_omsg+5)& (0+255),b
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;main.c: 832: vscp_omsg.data[ 1 ] = 0x82;
  6906  004A70  0E82               	movlw	130
  6907  004A72  6FD2               	movwf	(_vscp_omsg+6)& (0+255),b
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;main.c: 834: setEventData( current_temp[i],
  6911                           ;main.c: 835: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6912  004A74  518F               	movf	sendTempEvent@i& (0+255),w,b
  6913  004A76  0D02               	mullw	2
  6914  004A78  EC37  F013         	call	PL2	;call to abstracted procedure
  6915  004A7C  CFDE F086          	movff	postinc2,?_setEventData
  6916  004A80  CFDD F087          	movff	postdec2,?_setEventData+1
  6917  004A84  D80E               	call	PL64	;call to abstracted procedure
  6918  004A86  EC27  F02A         	call	_readEEPROM	;wreg free
  6919  004A8A  0B03               	andlw	3
  6920  004A8C  0100               	movlb	0	; () banked
  6921  004A8E  6F88               	movwf	(?_setEventData+2)& (0+255),b
  6922  004A90  ECC1  F022         	call	_setEventData	;wreg free
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;main.c: 838: if (!vscp_sendEvent()) {
  6926  004A94  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  6927  004A98  0900               	iorlw	0
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;main.c: 839: return 0;
  6931  004A9A  0E00               	movlw	0
  6932  004A9C  A4D8               	btfss	status,2,c
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;main.c: 840: }
  6936                           ;main.c: 842: return 1;
  6937  004A9E  0E01               	movlw	1
  6938                           
  6939                           ; BSR set to: 0
  6940  004AA0  0012               	return	
  6941  004AA2                     __end_of_sendTempEvent:
  6942                           	opt stack 0
  6943  004AA2                     PL64:
  6944                           	opt stack 21
  6945  004AA2  0E43               	movlw	67
  6946  004AA4  258F               	addwf	sendTempEvent@i& (0+255),w,b
  6947  004AA6  6E16               	movwf	?_readEEPROM,c
  6948  004AA8  6A17               	clrf	?_readEEPROM+1,c
  6949  004AAA  0E00               	movlw	0
  6950  004AAC  2217               	addwfc	?_readEEPROM+1,f,c
  6951  004AAE  0C00               	retlw	0
  6952  004AB0                     __end_ofPL64:
  6953                           	opt stack 0
  6954                           tblptru	equ	0xFF8
  6955                           tblptrh	equ	0xFF7
  6956                           tblptrl	equ	0xFF6
  6957                           tablat	equ	0xFF5
  6958                           prodh	equ	0xFF4
  6959                           prodl	equ	0xFF3
  6960                           intcon	equ	0xFF2
  6961                           postinc0	equ	0xFEE
  6962                           wreg	equ	0xFE8
  6963                           indf1	equ	0xFE7
  6964                           postdec1	equ	0xFE5
  6965                           fsr1h	equ	0xFE2
  6966                           fsr1l	equ	0xFE1
  6967                           indf2	equ	0xFDF
  6968                           postinc2	equ	0xFDE
  6969                           postdec2	equ	0xFDD
  6970                           plusw2	equ	0xFDB
  6971                           fsr2h	equ	0xFDA
  6972                           fsr2l	equ	0xFD9
  6973                           status	equ	0xFD8
  6974                           
  6975 ;; *************** function _setEventData *****************
  6976 ;; Defined at:
  6977 ;;		line 850 in file "../main.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;  v               2   38[BANK0 ] int 
  6980 ;;  unit            1   40[BANK0 ] unsigned char 
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  newval          4   41[BANK0 ] unsigned char 
  6983 ;;  ival            2   45[BANK0 ] int 
  6984 ;; Return value:  Size  Location     Type
  6985 ;;		None               void
  6986 ;; Registers used:
  6987 ;;		wreg, status,2, status,0, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : F/0
  6990 ;;		On exit  : F/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6993 ;;      Params:         0       3       0       0       0       0       0
  6994 ;;      Locals:         0       6       0       0       0       0       0
  6995 ;;      Temps:          0       0       0       0       0       0       0
  6996 ;;      Totals:         0       9       0       0       0       0       0
  6997 ;;Total ram usage:        9 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    5
  7000 ;; This function calls:
  7001 ;;		_Celsius2Kelvin
  7002 ;;		_Celsius2Fahrenheit
  7003 ;;		___awtofl
  7004 ;;		___fltol
  7005 ;; This function is called by:
  7006 ;;		_sendTempEvent
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           	psect	text29
  7011  004582                     __ptext29:
  7012                           	opt stack 0
  7013  004582                     _setEventData:
  7014                           	opt stack 22
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;main.c: 851: double newval;
  7018                           ;main.c: 852: int ival;
  7019                           ;main.c: 854: if (0 == unit) {
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;incstack = 0
  7023                           ;incstack = 0
  7024  004582  6788               	tstfsz	setEventData@unit& (0+255),b
  7025  004584  D019               	goto	l10501
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;main.c: 856: newval = Celsius2Kelvin(v);
  7029  004586  C086  F018         	movff	setEventData@v,?___awtofl
  7030  00458A  C087  F019         	movff	setEventData@v+1,?___awtofl+1
  7031  00458E  EC36  F028         	call	___awtofl	;wreg free
  7032  004592  C01B  F030         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  7033  004596  C01A  F02F         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  7034  00459A  C019  F02E         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  7035  00459E  C018  F02D         	movff	?___awtofl,?_Celsius2Kelvin
  7036  0045A2  EC6E  F028         	call	_Celsius2Kelvin	;wreg free
  7037  0045A6  C030  F08C         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  7038  0045AA  C02F  F08B         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  7039  0045AE  C02E  F08A         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  7040  0045B2  C02D  F089         	movff	?_Celsius2Kelvin,setEventData@newval
  7041                           
  7042                           ;main.c: 857: } else if (2 == unit) {
  7043  0045B6  D02A               	goto	l254
  7044  0045B8                     l10501:
  7045                           
  7046                           ; BSR set to: 0
  7047  0045B8  5188               	movf	setEventData@unit& (0+255),w,b
  7048  0045BA  0A02               	xorlw	2
  7049  0045BC  E119               	bnz	l10505
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;main.c: 859: newval = Celsius2Fahrenheit(v);
  7053  0045BE  C086  F018         	movff	setEventData@v,?___awtofl
  7054  0045C2  C087  F019         	movff	setEventData@v+1,?___awtofl+1
  7055  0045C6  EC36  F028         	call	___awtofl	;wreg free
  7056  0045CA  C01B  F081         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  7057  0045CE  C01A  F080         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  7058  0045D2  C019  F07F         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  7059  0045D6  C018  F07E         	movff	?___awtofl,?_Celsius2Fahrenheit
  7060  0045DA  EC58  F025         	call	_Celsius2Fahrenheit	;wreg free
  7061  0045DE  C081  F08C         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  7062  0045E2  C080  F08B         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  7063  0045E6  C07F  F08A         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  7064  0045EA  C07E  F089         	movff	?_Celsius2Fahrenheit,setEventData@newval
  7065                           
  7066                           ;main.c: 860: } else {
  7067  0045EE  D00E               	goto	l254
  7068  0045F0                     l10505:
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;main.c: 862: newval = v;
  7072  0045F0  C086  F018         	movff	setEventData@v,?___awtofl
  7073  0045F4  C087  F019         	movff	setEventData@v+1,?___awtofl+1
  7074  0045F8  EC36  F028         	call	___awtofl	;wreg free
  7075  0045FC  C01B  F08C         	movff	?___awtofl+3,setEventData@newval+3
  7076  004600  C01A  F08B         	movff	?___awtofl+2,setEventData@newval+2
  7077  004604  C019  F08A         	movff	?___awtofl+1,setEventData@newval+1
  7078  004608  C018  F089         	movff	?___awtofl,setEventData@newval
  7079  00460C                     l254:
  7080                           
  7081                           ;main.c: 863: }
  7082                           ;main.c: 865: ival = (int) newval;
  7083  00460C  C089  F07E         	movff	setEventData@newval,?___fltol
  7084  004610  C08A  F07F         	movff	setEventData@newval+1,?___fltol+1
  7085  004614  C08B  F080         	movff	setEventData@newval+2,?___fltol+2
  7086  004618  C08C  F081         	movff	setEventData@newval+3,?___fltol+3
  7087  00461C  EC6B  F023         	call	___fltol	;wreg free
  7088  004620  C07E  F08D         	movff	?___fltol,setEventData@ival
  7089  004624  C07F  F08E         	movff	?___fltol+1,setEventData@ival+1
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;main.c: 867: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7093  004628  518E               	movf	(setEventData@ival+1)& (0+255),w,b
  7094  00462A  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;main.c: 868: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7098  00462C  C08D  F0D4         	movff	setEventData@ival,_vscp_omsg+8
  7099                           
  7100                           ; BSR set to: 0
  7101  004630  0012               	return	
  7102  004632                     __end_of_setEventData:
  7103                           	opt stack 0
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           intcon	equ	0xFF2
  7111                           postinc0	equ	0xFEE
  7112                           wreg	equ	0xFE8
  7113                           indf1	equ	0xFE7
  7114                           postdec1	equ	0xFE5
  7115                           fsr1h	equ	0xFE2
  7116                           fsr1l	equ	0xFE1
  7117                           indf2	equ	0xFDF
  7118                           postinc2	equ	0xFDE
  7119                           postdec2	equ	0xFDD
  7120                           plusw2	equ	0xFDB
  7121                           fsr2h	equ	0xFDA
  7122                           fsr2l	equ	0xFD9
  7123                           status	equ	0xFD8
  7124                           
  7125 ;; *************** function _Celsius2Fahrenheit *****************
  7126 ;; Defined at:
  7127 ;;		line 42 in file "../ntc.c"
  7128 ;; Parameters:    Size  Location     Type
  7129 ;;  tc              4   30[BANK0 ] int 
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;		None
  7132 ;; Return value:  Size  Location     Type
  7133 ;;                  4   30[BANK0 ] int 
  7134 ;; Registers used:
  7135 ;;		wreg, status,2, status,0, cstack
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7141 ;;      Params:         0       4       0       0       0       0       0
  7142 ;;      Locals:         0       0       0       0       0       0       0
  7143 ;;      Temps:          0       0       0       0       0       0       0
  7144 ;;      Totals:         0       4       0       0       0       0       0
  7145 ;;Total ram usage:        4 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; Hardware stack levels required when called:    4
  7148 ;; This function calls:
  7149 ;;		___fladd
  7150 ;;		___fldiv
  7151 ;;		___flmul
  7152 ;; This function is called by:
  7153 ;;		_setEventData
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           	psect	text30
  7158  004AB0                     __ptext30:
  7159                           	opt stack 0
  7160  004AB0                     _Celsius2Fahrenheit:
  7161                           	opt stack 22
  7162                           
  7163                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;incstack = 0
  7167                           ;incstack = 0
  7168  004AB0  6A22               	clrf	?___fladd+4,c
  7169  004AB2  6A23               	clrf	?___fladd+5,c
  7170  004AB4  0E7A               	movlw	122
  7171  004AB6  6E24               	movwf	?___fladd+6,c
  7172  004AB8  0E46               	movlw	70
  7173  004ABA  6E25               	movwf	?___fladd+7,c
  7174  004ABC  0100               	movlb	0	; () banked
  7175  004ABE  6B6C               	clrf	(?___flmul+4)& (0+255),b
  7176  004AC0  6B6D               	clrf	(?___flmul+5)& (0+255),b
  7177  004AC2  0E10               	movlw	16
  7178  004AC4  6F6E               	movwf	(?___flmul+6)& (0+255),b
  7179  004AC6  0E41               	movlw	65
  7180  004AC8  6F6F               	movwf	(?___flmul+7)& (0+255),b
  7181  004ACA  C07E  F068         	movff	Celsius2Fahrenheit@tc,?___flmul
  7182  004ACE  C07F  F069         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7183  004AD2  C080  F06A         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7184  004AD6  C081  F06B         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7185  004ADA  EC35  F020         	call	___flmul	;wreg free
  7186  004ADE  C06B  F021         	movff	?___flmul+3,?___fladd+3
  7187  004AE2  C06A  F020         	movff	?___flmul+2,?___fladd+2
  7188  004AE6  C069  F01F         	movff	?___flmul+1,?___fladd+1
  7189  004AEA  C068  F01E         	movff	?___flmul,?___fladd
  7190  004AEE  EC4C  F01C         	call	___fladd	;wreg free
  7191  004AF2  C021  F063         	movff	?___fladd+3,?___fldiv+3
  7192  004AF6  C020  F062         	movff	?___fladd+2,?___fldiv+2
  7193  004AFA  C01F  F061         	movff	?___fladd+1,?___fldiv+1
  7194  004AFE  C01E  F060         	movff	?___fladd,?___fldiv
  7195  004B02  0100               	movlb	0	; () banked
  7196  004B04  6B64               	clrf	(?___fldiv+4)& (0+255),b
  7197  004B06  6B65               	clrf	(?___fldiv+5)& (0+255),b
  7198  004B08  0EA0               	movlw	160
  7199  004B0A  6F66               	movwf	(?___fldiv+6)& (0+255),b
  7200  004B0C  0E40               	movlw	64
  7201  004B0E  6F67               	movwf	(?___fldiv+7)& (0+255),b
  7202  004B10  EC69  F022         	call	___fldiv	;wreg free
  7203  004B14  C063  F081         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7204  004B18  C062  F080         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7205  004B1C  C061  F07F         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7206  004B20  C060  F07E         	movff	?___fldiv,?_Celsius2Fahrenheit
  7207  004B24  0012               	return	
  7208  004B26                     __end_of_Celsius2Fahrenheit:
  7209                           	opt stack 0
  7210                           tblptru	equ	0xFF8
  7211                           tblptrh	equ	0xFF7
  7212                           tblptrl	equ	0xFF6
  7213                           tablat	equ	0xFF5
  7214                           prodh	equ	0xFF4
  7215                           prodl	equ	0xFF3
  7216                           intcon	equ	0xFF2
  7217                           postinc0	equ	0xFEE
  7218                           wreg	equ	0xFE8
  7219                           indf1	equ	0xFE7
  7220                           postdec1	equ	0xFE5
  7221                           fsr1h	equ	0xFE2
  7222                           fsr1l	equ	0xFE1
  7223                           indf2	equ	0xFDF
  7224                           postinc2	equ	0xFDE
  7225                           postdec2	equ	0xFDD
  7226                           plusw2	equ	0xFDB
  7227                           fsr2h	equ	0xFDA
  7228                           fsr2l	equ	0xFD9
  7229                           status	equ	0xFD8
  7230                           
  7231 ;; *************** function ___fladd *****************
  7232 ;; Defined at:
  7233 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;  f1              4   29[COMRAM] int 
  7236 ;;  f2              4   33[COMRAM] int 
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;  exp1            1   43[COMRAM] unsigned char 
  7239 ;;  exp2            1   42[COMRAM] unsigned char 
  7240 ;;  sign            1   41[COMRAM] unsigned char 
  7241 ;; Return value:  Size  Location     Type
  7242 ;;                  4   29[COMRAM] unsigned char 
  7243 ;; Registers used:
  7244 ;;		wreg, status,2, status,0, cstack
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7250 ;;      Params:         8       0       0       0       0       0       0
  7251 ;;      Locals:         6       0       0       0       0       0       0
  7252 ;;      Temps:          1       0       0       0       0       0       0
  7253 ;;      Totals:        15       0       0       0       0       0       0
  7254 ;;Total ram usage:       15 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:    3
  7257 ;; This function calls:
  7258 ;;		___flpack
  7259 ;; This function is called by:
  7260 ;;		_doWork
  7261 ;;		_Celsius2Fahrenheit
  7262 ;;		_Celsius2Kelvin
  7263 ;;		___asfladd
  7264 ;;		_floor
  7265 ;;		___flsub
  7266 ;;		_log
  7267 ;;		_eval_poly
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           	psect	text31
  7272  003898                     __ptext31:
  7273                           	opt stack 0
  7274  003898                     ___fladd:
  7275                           	opt stack 24
  7276                           
  7277                           ;incstack = 0
  7278                           ;incstack = 0
  7279  003898  3420               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7280  00389A  3421               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7281  00389C  6E2C               	movwf	___fladd@exp1,c
  7282  00389E  3424               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7283  0038A0  3425               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7284  0038A2  6E2B               	movwf	___fladd@exp2,c
  7285  0038A4  502C               	movf	___fladd@exp1,w,c
  7286  0038A6  E009               	bz	l1590
  7287  0038A8  502B               	movf	___fladd@exp2,w,c
  7288  0038AA  602C               	cpfslt	___fladd@exp1,c
  7289  0038AC  D00F               	goto	l11481
  7290  0038AE  502C               	movf	___fladd@exp1,w,c
  7291  0038B0  5C2B               	subwf	___fladd@exp2,w,c
  7292  0038B2  6E26               	movwf	??___fladd& (0+255),c
  7293  0038B4  0E21               	movlw	33
  7294  0038B6  5C26               	subwf	??___fladd,w,c
  7295  0038B8  E309               	bnc	l11481
  7296  0038BA                     l1590:
  7297  0038BA  C022  F01E         	movff	___fladd@f2,?___fladd
  7298  0038BE  C023  F01F         	movff	___fladd@f2+1,?___fladd+1
  7299  0038C2  C024  F020         	movff	___fladd@f2+2,?___fladd+2
  7300  0038C6  C025  F021         	movff	___fladd@f2+3,?___fladd+3
  7301  0038CA  D087               	goto	l1591
  7302  0038CC                     l11481:
  7303  0038CC  502B               	movf	___fladd@exp2,w,c
  7304  0038CE  E009               	bz	l1594
  7305  0038D0  502C               	movf	___fladd@exp1,w,c
  7306  0038D2  602B               	cpfslt	___fladd@exp2,c
  7307  0038D4  D00F               	goto	l11487
  7308  0038D6  502B               	movf	___fladd@exp2,w,c
  7309  0038D8  5C2C               	subwf	___fladd@exp1,w,c
  7310  0038DA  6E26               	movwf	??___fladd& (0+255),c
  7311  0038DC  0E21               	movlw	33
  7312  0038DE  5C26               	subwf	??___fladd,w,c
  7313  0038E0  E309               	bnc	l11487
  7314  0038E2                     l1594:
  7315  0038E2  C01E  F01E         	movff	___fladd@f1,?___fladd
  7316  0038E6  C01F  F01F         	movff	___fladd@f1+1,?___fladd+1
  7317  0038EA  C020  F020         	movff	___fladd@f1+2,?___fladd+2
  7318  0038EE  C021  F021         	movff	___fladd@f1+3,?___fladd+3
  7319  0038F2  D073               	goto	l1591
  7320  0038F4                     l11487:
  7321  0038F4  0E06               	movlw	6
  7322  0038F6  6E2A               	movwf	___fladd@sign,c
  7323  0038F8  BE21               	btfsc	___fladd@f1+3,7,c
  7324  0038FA  8E2A               	bsf	___fladd@sign,7,c
  7325  0038FC  BE25               	btfsc	___fladd@f2+3,7,c
  7326  0038FE  8C2A               	bsf	___fladd@sign,6,c
  7327  003900  8E20               	bsf	___fladd@f1+2,7,c
  7328  003902  6A21               	clrf	___fladd@f1+3,c
  7329  003904  8E24               	bsf	___fladd@f2+2,7,c
  7330  003906  6A25               	clrf	___fladd@f2+3,c
  7331  003908  502B               	movf	___fladd@exp2,w,c
  7332  00390A  602C               	cpfslt	___fladd@exp1,c
  7333  00390C  D018               	goto	l11513
  7334  00390E                     l11503:
  7335  00390E  90D8               	bcf	status,0,c
  7336  003910  3622               	rlcf	___fladd@f2,f,c
  7337  003912  3623               	rlcf	___fladd@f2+1,f,c
  7338  003914  3624               	rlcf	___fladd@f2+2,f,c
  7339  003916  3625               	rlcf	___fladd@f2+3,f,c
  7340  003918  062B               	decf	___fladd@exp2,f,c
  7341  00391A  502B               	movf	___fladd@exp2,w,c
  7342  00391C  182C               	xorwf	___fladd@exp1,w,c
  7343  00391E  E00B               	bz	l11511
  7344  003920  062A               	decf	___fladd@sign,f,c
  7345  003922  502A               	movf	___fladd@sign& (0+255),w,c
  7346  003924  0B07               	andlw	7
  7347  003926  E007               	bz	l11511
  7348  003928  D7F2               	goto	l11503
  7349  00392A                     l11509:
  7350  00392A  90D8               	bcf	status,0,c
  7351  00392C  3221               	rrcf	___fladd@f1+3,f,c
  7352  00392E  3220               	rrcf	___fladd@f1+2,f,c
  7353  003930  321F               	rrcf	___fladd@f1+1,f,c
  7354  003932  321E               	rrcf	___fladd@f1,f,c
  7355  003934  2A2C               	incf	___fladd@exp1,f,c
  7356  003936                     l11511:
  7357  003936  502B               	movf	___fladd@exp2,w,c
  7358  003938  622C               	cpfseq	___fladd@exp1,c
  7359  00393A  D7F7               	goto	l11509
  7360  00393C  D01A               	goto	l1605
  7361  00393E                     l11513:
  7362  00393E  502C               	movf	___fladd@exp1,w,c
  7363  003940  602B               	cpfslt	___fladd@exp2,c
  7364  003942  D017               	goto	l1605
  7365  003944                     l11515:
  7366  003944  90D8               	bcf	status,0,c
  7367  003946  361E               	rlcf	___fladd@f1,f,c
  7368  003948  361F               	rlcf	___fladd@f1+1,f,c
  7369  00394A  3620               	rlcf	___fladd@f1+2,f,c
  7370  00394C  3621               	rlcf	___fladd@f1+3,f,c
  7371  00394E  062C               	decf	___fladd@exp1,f,c
  7372  003950  502B               	movf	___fladd@exp2,w,c
  7373  003952  182C               	xorwf	___fladd@exp1,w,c
  7374  003954  E00B               	bz	l11523
  7375  003956  062A               	decf	___fladd@sign,f,c
  7376  003958  502A               	movf	___fladd@sign& (0+255),w,c
  7377  00395A  0B07               	andlw	7
  7378  00395C  E007               	bz	l11523
  7379  00395E  D7F2               	goto	l11515
  7380  003960                     l11521:
  7381  003960  90D8               	bcf	status,0,c
  7382  003962  3225               	rrcf	___fladd@f2+3,f,c
  7383  003964  3224               	rrcf	___fladd@f2+2,f,c
  7384  003966  3223               	rrcf	___fladd@f2+1,f,c
  7385  003968  3222               	rrcf	___fladd@f2,f,c
  7386  00396A  2A2B               	incf	___fladd@exp2,f,c
  7387  00396C                     l11523:
  7388  00396C  502B               	movf	___fladd@exp2,w,c
  7389  00396E  622C               	cpfseq	___fladd@exp1,c
  7390  003970  D7F7               	goto	l11521
  7391  003972                     l1605:
  7392  003972  AE2A               	btfss	___fladd@sign,7,c
  7393  003974  D009               	goto	l11527
  7394  003976  1E1E               	comf	___fladd@f1,f,c
  7395  003978  1E1F               	comf	___fladd@f1+1,f,c
  7396  00397A  1E20               	comf	___fladd@f1+2,f,c
  7397  00397C  1E21               	comf	___fladd@f1+3,f,c
  7398  00397E  2A1E               	incf	___fladd@f1,f,c
  7399  003980  0E00               	movlw	0
  7400  003982  221F               	addwfc	___fladd@f1+1,f,c
  7401  003984  2220               	addwfc	___fladd@f1+2,f,c
  7402  003986  2221               	addwfc	___fladd@f1+3,f,c
  7403  003988                     l11527:
  7404  003988  AC2A               	btfss	___fladd@sign,6,c
  7405  00398A  D002               	goto	l11531
  7406  00398C  1E22               	comf	___fladd@f2,f,c
  7407  00398E  D826               	call	PL46	;call to abstracted procedure
  7408  003990                     l11531:
  7409  003990  6A2A               	clrf	___fladd@sign,c
  7410  003992  501E               	movf	___fladd@f1,w,c
  7411  003994  2622               	addwf	___fladd@f2,f,c
  7412  003996  501F               	movf	___fladd@f1+1,w,c
  7413  003998  2223               	addwfc	___fladd@f2+1,f,c
  7414  00399A  5020               	movf	___fladd@f1+2,w,c
  7415  00399C  2224               	addwfc	___fladd@f2+2,f,c
  7416  00399E  5021               	movf	___fladd@f1+3,w,c
  7417  0039A0  2225               	addwfc	___fladd@f2+3,f,c
  7418  0039A2  AE25               	btfss	___fladd@f2+3,7,c
  7419  0039A4  D004               	goto	l11539
  7420  0039A6  1E22               	comf	___fladd@f2,f,c
  7421  0039A8  D819               	call	PL46	;call to abstracted procedure
  7422  0039AA  0E01               	movlw	1
  7423  0039AC  6E2A               	movwf	___fladd@sign,c
  7424  0039AE                     l11539:
  7425  0039AE  C022  F00E         	movff	___fladd@f2,?___flpack
  7426  0039B2  C023  F00F         	movff	___fladd@f2+1,?___flpack+1
  7427  0039B6  C024  F010         	movff	___fladd@f2+2,?___flpack+2
  7428  0039BA  C025  F011         	movff	___fladd@f2+3,?___flpack+3
  7429  0039BE  C02C  F012         	movff	___fladd@exp1,?___flpack+4
  7430  0039C2  C02A  F013         	movff	___fladd@sign,?___flpack+5
  7431  0039C6  EC58  F021         	call	___flpack	;wreg free
  7432  0039CA  C011  F021         	movff	?___flpack+3,?___fladd+3
  7433  0039CE  C010  F020         	movff	?___flpack+2,?___fladd+2
  7434  0039D2  C00F  F01F         	movff	?___flpack+1,?___fladd+1
  7435  0039D6  C00E  F01E         	movff	?___flpack,?___fladd
  7436  0039DA                     l1591:
  7437  0039DA  0012               	return	
  7438  0039DC                     __end_of___fladd:
  7439                           	opt stack 0
  7440  0039DC                     PL46:
  7441                           	opt stack 24
  7442  0039DC  1E23               	comf	___fladd@f2+1,f,c
  7443  0039DE  1E24               	comf	___fladd@f2+2,f,c
  7444  0039E0  1E25               	comf	___fladd@f2+3,f,c
  7445  0039E2  2A22               	incf	___fladd@f2,f,c
  7446  0039E4  0E00               	movlw	0
  7447  0039E6  2223               	addwfc	___fladd@f2+1,f,c
  7448  0039E8  2224               	addwfc	___fladd@f2+2,f,c
  7449  0039EA  2225               	addwfc	___fladd@f2+3,f,c
  7450  0039EC  0C00               	retlw	0
  7451  0039EE                     __end_ofPL46:
  7452                           	opt stack 0
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodh	equ	0xFF4
  7458                           prodl	equ	0xFF3
  7459                           intcon	equ	0xFF2
  7460                           postinc0	equ	0xFEE
  7461                           wreg	equ	0xFE8
  7462                           indf1	equ	0xFE7
  7463                           postdec1	equ	0xFE5
  7464                           fsr1h	equ	0xFE2
  7465                           fsr1l	equ	0xFE1
  7466                           indf2	equ	0xFDF
  7467                           postinc2	equ	0xFDE
  7468                           postdec2	equ	0xFDD
  7469                           plusw2	equ	0xFDB
  7470                           fsr2h	equ	0xFDA
  7471                           fsr2l	equ	0xFD9
  7472                           status	equ	0xFD8
  7473                           
  7474 ;; *************** function _Celsius2Kelvin *****************
  7475 ;; Defined at:
  7476 ;;		line 61 in file "../ntc.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  tc              4   44[COMRAM] unsigned char 
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;		None
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  4   44[COMRAM] unsigned char 
  7483 ;; Registers used:
  7484 ;;		wreg, status,2, status,0, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7490 ;;      Params:         4       0       0       0       0       0       0
  7491 ;;      Locals:         0       0       0       0       0       0       0
  7492 ;;      Temps:          0       0       0       0       0       0       0
  7493 ;;      Totals:         4       0       0       0       0       0       0
  7494 ;;Total ram usage:        4 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    4
  7497 ;; This function calls:
  7498 ;;		___fladd
  7499 ;; This function is called by:
  7500 ;;		_setEventData
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           	psect	text32
  7505  0050DC                     __ptext32:
  7506                           	opt stack 0
  7507  0050DC                     _Celsius2Kelvin:
  7508                           	opt stack 22
  7509                           
  7510                           ;ntc.c: 62: return (27316.0 + tc);
  7511                           
  7512                           ;incstack = 0
  7513                           ;incstack = 0
  7514  0050DC  C02D  F01E         	movff	Celsius2Kelvin@tc,?___fladd
  7515  0050E0  C02E  F01F         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7516  0050E4  C02F  F020         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7517  0050E8  C030  F021         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7518  0050EC  6A22               	clrf	?___fladd+4,c
  7519  0050EE  0E68               	movlw	104
  7520  0050F0  6E23               	movwf	?___fladd+5,c
  7521  0050F2  0ED5               	movlw	213
  7522  0050F4  6E24               	movwf	?___fladd+6,c
  7523  0050F6  0E46               	movlw	70
  7524  0050F8  6E25               	movwf	?___fladd+7,c
  7525  0050FA  EC4C  F01C         	call	___fladd	;wreg free
  7526  0050FE  C021  F030         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7527  005102  C020  F02F         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7528  005106  C01F  F02E         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7529  00510A  C01E  F02D         	movff	?___fladd,?_Celsius2Kelvin
  7530  00510E  0012               	return	
  7531  005110                     __end_of_Celsius2Kelvin:
  7532                           	opt stack 0
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           postinc0	equ	0xFEE
  7541                           wreg	equ	0xFE8
  7542                           indf1	equ	0xFE7
  7543                           postdec1	equ	0xFE5
  7544                           fsr1h	equ	0xFE2
  7545                           fsr1l	equ	0xFE1
  7546                           indf2	equ	0xFDF
  7547                           postinc2	equ	0xFDE
  7548                           postdec2	equ	0xFDD
  7549                           plusw2	equ	0xFDB
  7550                           fsr2h	equ	0xFDA
  7551                           fsr2l	equ	0xFD9
  7552                           status	equ	0xFD8
  7553                           
  7554 ;; *************** function _vscp_handleProtocolEvent *****************
  7555 ;; Defined at:
  7556 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;		None
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;  bytes           1   44[BANK0 ] unsigned char 
  7561 ;;  page_save       2   40[BANK0 ] unsigned short 
  7562 ;;  i               1   50[BANK0 ] unsigned char 
  7563 ;;  bytes           2   54[BANK0 ] unsigned short 
  7564 ;;  page_save       2   38[BANK0 ] unsigned short 
  7565 ;;  byte            1   53[BANK0 ] unsigned char 
  7566 ;;  cb              1   49[BANK0 ] unsigned char 
  7567 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7568 ;;  j               1   58[BANK0 ] unsigned char 
  7569 ;;  i               1   56[BANK0 ] unsigned char 
  7570 ;;  k               1   51[BANK0 ] unsigned char 
  7571 ;;  i               1   52[BANK0 ] unsigned char 
  7572 ;;  len             1   47[BANK0 ] unsigned char 
  7573 ;;  pos             1   46[BANK0 ] unsigned char 
  7574 ;;  i               1   57[BANK0 ] unsigned char 
  7575 ;;  len             1   45[BANK0 ] unsigned char 
  7576 ;;  pos             1   43[BANK0 ] unsigned char 
  7577 ;;  offset          1   42[BANK0 ] unsigned char 
  7578 ;; Return value:  Size  Location     Type
  7579 ;;		None               void
  7580 ;; Registers used:
  7581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : F/1
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7587 ;;      Params:         0       0       0       0       0       0       0
  7588 ;;      Locals:         0      21       0       0       0       0       0
  7589 ;;      Temps:          0       7       0       0       0       0       0
  7590 ;;      Totals:         0      28       0       0       0       0       0
  7591 ;;Total ram usage:       28 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    8
  7594 ;; This function calls:
  7595 ;;		_vscp_init
  7596 ;;		_vscp_sendEvent
  7597 ;;		_vscp_readAppReg
  7598 ;;		_vscp_writeAppReg
  7599 ;;		_vscp_getGUID
  7600 ;;		_vscp_getMDF_URL
  7601 ;;		_vscp_getMatrixInfo
  7602 ;;		_vscp_goBootloaderMode
  7603 ;;		_vscp_handleHeartbeat
  7604 ;;		_vscp_handleSetNickname
  7605 ;;		_vscp_handleDropNickname
  7606 ;;		_vscp_newNodeOnline
  7607 ;;		_vscp_readRegister
  7608 ;;		_vscp_readStdReg
  7609 ;;		_vscp_writeRegister
  7610 ;;		_vscp_writeStdReg
  7611 ;;		___lbmod
  7612 ;; This function is called by:
  7613 ;;		_main
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text33
  7618  001B14                     __ptext33:
  7619                           	opt stack 0
  7620  001B14                     _vscp_handleProtocolEvent:
  7621                           	opt stack 21
  7622                           
  7623                           ; BSR set to: 1
  7624                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  7625                           
  7626                           ;incstack = 0
  7627                           ;incstack = 0
  7628  001B14  516B               	movf	(_vscp_imsg+3)& (0+255),w,b
  7629  001B16  116A               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7630  001B18  E101 D2F9          	bz	l10119
  7631  001B1C  D329               	goto	l1271
  7632  001B1E                     l9701:
  7633                           
  7634                           ; BSR set to: 1
  7635                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  7636  001B1E  ECBD  F027         	call	_vscp_handleHeartbeat	;wreg free
  7637                           
  7638                           ;vscp_firmware.c: 807: break;
  7639  001B22  D326               	goto	l1271
  7640  001B24                     l9703:
  7641                           
  7642                           ; BSR set to: 1
  7643                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  7644  001B24  ECBB  F028         	call	_vscp_newNodeOnline	;wreg free
  7645                           
  7646                           ;vscp_firmware.c: 812: break;
  7647  001B28  D323               	goto	l1271
  7648  001B2A                     l9705:
  7649                           
  7650                           ; BSR set to: 1
  7651                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7652  001B2A  ECE8  F028         	call	_vscp_handleSetNickname	;wreg free
  7653                           
  7654                           ;vscp_firmware.c: 817: break;
  7655  001B2E  D320               	goto	l1271
  7656  001B30                     l9707:
  7657                           
  7658                           ; BSR set to: 1
  7659                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7660  001B30  EC53  F028         	call	_vscp_handleDropNickname	;wreg free
  7661                           
  7662                           ;vscp_firmware.c: 822: break;
  7663  001B34  D31D               	goto	l1271
  7664  001B36                     l9709:
  7665                           
  7666                           ; BSR set to: 1
  7667                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7668                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7669  001B36  5168               	movf	_vscp_imsg& (0+255),w,b
  7670  001B38  0B0F               	andlw	15
  7671  001B3A  0A02               	xorlw	2
  7672  001B3C  E001 D318          	bnz	l1271
  7673                           
  7674                           ; BSR set to: 1
  7675  001B40  0100               	movlb	0	; () banked
  7676  001B42  51CA               	movf	_vscp_nickname& (0+255),w,b
  7677  001B44  0101               	movlb	1	; () banked
  7678  001B46  EE21  F06E         	lfsr	2,_vscp_imsg+6
  7679  001B4A  62DF               	cpfseq	indf2,c
  7680  001B4C  D311               	goto	l1271
  7681                           
  7682                           ; BSR set to: 1
  7683                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7684  001B4E  0E80               	movlw	128
  7685  001B50  616F               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7686  001B52  D012               	goto	l9729
  7687                           
  7688                           ; BSR set to: 1
  7689                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7690  001B54  516F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7691  001B56  ECB4  F009         	call	_vscp_readAppReg
  7692  001B5A                     L8:
  7693  001B5A  0100               	movlb	0	; () banked
  7694  001B5C  6FD2               	movwf	(_vscp_omsg+6)& (0+255),b
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7698  001B5E  C16F  F0D1         	movff	_vscp_imsg+7,_vscp_omsg+5
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7702  001B62  0E03               	movlw	3
  7703  001B64  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7707  001B66  0E82               	movlw	130
  7708  001B68  6FCC               	movwf	_vscp_omsg& (0+255),b
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7712  001B6A  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  7713  001B6C  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7717  001B6E  0E0A               	movlw	10
  7718  001B70  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  7719  001B72                     l9727:
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7723  001B72  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  7724                           
  7725                           ;vscp_firmware.c: 844: }
  7726  001B76  D2FC               	goto	l1271
  7727  001B78                     l9729:
  7728                           
  7729                           ; BSR set to: 1
  7730                           ;vscp_firmware.c: 845: else {
  7731                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7732                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7733  001B78  516F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7734  001B7A  ECCA  F01A         	call	_vscp_readStdReg
  7735  001B7E  D7ED               	goto	L8
  7736  001B80                     l9743:
  7737                           
  7738                           ; BSR set to: 1
  7739                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7740                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7741  001B80  5168               	movf	_vscp_imsg& (0+255),w,b
  7742  001B82  0B0F               	andlw	15
  7743  001B84  0A03               	xorlw	3
  7744  001B86  E001 D2F3          	bnz	l1271
  7745                           
  7746                           ; BSR set to: 1
  7747  001B8A  0100               	movlb	0	; () banked
  7748  001B8C  51CA               	movf	_vscp_nickname& (0+255),w,b
  7749  001B8E  0101               	movlb	1	; () banked
  7750  001B90  EE21  F06E         	lfsr	2,_vscp_imsg+6
  7751  001B94  62DF               	cpfseq	indf2,c
  7752  001B96  D2EC               	goto	l1271
  7753                           
  7754                           ; BSR set to: 1
  7755                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7756  001B98  0E80               	movlw	128
  7757  001B9A  616F               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7758  001B9C  D006               	goto	l9763
  7759                           
  7760                           ; BSR set to: 1
  7761                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7762                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7763  001B9E  C170  F023         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7764  001BA2  516F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7765  001BA4  EC37  F003         	call	_vscp_writeAppReg
  7766  001BA8  D7D8               	goto	L8
  7767  001BAA                     l9763:
  7768                           
  7769                           ; BSR set to: 1
  7770                           ;vscp_firmware.c: 888: else {
  7771                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7772                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7773  001BAA  C170  F01B         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7774  001BAE  516F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7775  001BB0  EC32  F01F         	call	_vscp_writeStdReg
  7776  001BB4  D7D2               	goto	L8
  7777  001BB6                     l9777:
  7778                           
  7779                           ; BSR set to: 1
  7780                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7781                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7782                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7783                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7784                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7785                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7786                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7787  001BB6  0100               	movlb	0	; () banked
  7788  001BB8  51CA               	movf	_vscp_nickname& (0+255),w,b
  7789  001BBA  0101               	movlb	1	; () banked
  7790  001BBC  EE21  F06E         	lfsr	2,_vscp_imsg+6
  7791  001BC0  62DF               	cpfseq	indf2,c
  7792  001BC2  D2D6               	goto	l1271
  7793                           
  7794                           ; BSR set to: 1
  7795  001BC4  0E00               	movlw	0
  7796  001BC6  EC1D  F02A         	call	_vscp_getGUID
  7797  001BCA  0101               	movlb	1	; () banked
  7798  001BCC  1970               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7799  001BCE  E001 D2CF          	bnz	l1271
  7800                           
  7801                           ; BSR set to: 1
  7802  001BD2  0E03               	movlw	3
  7803  001BD4  EC1D  F02A         	call	_vscp_getGUID
  7804  001BD8  0101               	movlb	1	; () banked
  7805  001BDA  1971               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7806  001BDC  E001 D2C8          	bnz	l1271
  7807                           
  7808                           ; BSR set to: 1
  7809  001BE0  0E05               	movlw	5
  7810  001BE2  EC1D  F02A         	call	_vscp_getGUID
  7811  001BE6  0101               	movlb	1	; () banked
  7812  001BE8  1972               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7813  001BEA  E001 D2C1          	bnz	l1271
  7814                           
  7815                           ; BSR set to: 1
  7816  001BEE  0E07               	movlw	7
  7817  001BF0  EC1D  F02A         	call	_vscp_getGUID
  7818  001BF4  0101               	movlb	1	; () banked
  7819  001BF6  1973               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7820  001BF8  E001 D2BA          	bnz	l1271
  7821                           
  7822                           ; BSR set to: 1
  7823  001BFC  5047               	movf	_vscp_page_select+1,w,c
  7824  001BFE  1974               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7825  001C00  E001 D2B6          	bnz	l1271
  7826                           
  7827                           ; BSR set to: 1
  7828  001C04  5046               	movf	_vscp_page_select,w,c
  7829  001C06  EE21  F075         	lfsr	2,_vscp_imsg+13
  7830  001C0A  62DF               	cpfseq	indf2,c
  7831  001C0C  D2B1               	goto	l1271
  7832                           
  7833                           ; BSR set to: 1
  7834                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7835  001C0E  516F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7836  001C10  EC92  F029         	call	_vscp_goBootloaderMode
  7837  001C14  D2AD               	goto	l1271
  7838  001C16                     l9793:
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7842                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7843                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7844                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7845  001C16  0E00               	movlw	0
  7846  001C18  EC1D  F02A         	call	_vscp_getGUID
  7847  001C1C  0101               	movlb	1	; () banked
  7848  001C1E  196F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7849  001C20  E174               	bnz	l9837
  7850                           
  7851                           ; BSR set to: 1
  7852  001C22  0E01               	movlw	1
  7853  001C24  EC1D  F02A         	call	_vscp_getGUID
  7854  001C28  0101               	movlb	1	; () banked
  7855  001C2A  1970               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7856  001C2C  E16E               	bnz	l9837
  7857                           
  7858                           ; BSR set to: 1
  7859  001C2E  0E02               	movlw	2
  7860  001C30  EC1D  F02A         	call	_vscp_getGUID
  7861  001C34  0101               	movlb	1	; () banked
  7862  001C36  1971               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7863  001C38  E168               	bnz	l9837
  7864                           
  7865                           ; BSR set to: 1
  7866  001C3A  0E03               	movlw	3
  7867  001C3C  EC1D  F02A         	call	_vscp_getGUID
  7868  001C40  0101               	movlb	1	; () banked
  7869  001C42  1972               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7870  001C44  E162               	bnz	l9837
  7871                           
  7872                           ; BSR set to: 1
  7873                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7874  001C46  884B               	bsf	_vscp_guid_reset,4,c
  7875  001C48  D060               	goto	l9837
  7876  001C4A                     l9803:
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7880                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7881                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7882                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7883  001C4A  0E04               	movlw	4
  7884  001C4C  EC1D  F02A         	call	_vscp_getGUID
  7885  001C50  0101               	movlb	1	; () banked
  7886  001C52  196F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7887  001C54  E15A               	bnz	l9837
  7888                           
  7889                           ; BSR set to: 1
  7890  001C56  0E05               	movlw	5
  7891  001C58  EC1D  F02A         	call	_vscp_getGUID
  7892  001C5C  0101               	movlb	1	; () banked
  7893  001C5E  1970               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7894  001C60  E154               	bnz	l9837
  7895                           
  7896                           ; BSR set to: 1
  7897  001C62  0E06               	movlw	6
  7898  001C64  EC1D  F02A         	call	_vscp_getGUID
  7899  001C68  0101               	movlb	1	; () banked
  7900  001C6A  1971               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7901  001C6C  E14E               	bnz	l9837
  7902                           
  7903                           ; BSR set to: 1
  7904  001C6E  0E07               	movlw	7
  7905  001C70  EC1D  F02A         	call	_vscp_getGUID
  7906  001C74  0101               	movlb	1	; () banked
  7907  001C76  1972               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7908  001C78  E148               	bnz	l9837
  7909                           
  7910                           ; BSR set to: 1
  7911                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7912  001C7A  8A4B               	bsf	_vscp_guid_reset,5,c
  7913  001C7C  D046               	goto	l9837
  7914  001C7E                     l9813:
  7915                           
  7916                           ; BSR set to: 0
  7917                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7918                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7919                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7920                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7921  001C7E  0E08               	movlw	8
  7922  001C80  EC1D  F02A         	call	_vscp_getGUID
  7923  001C84  0101               	movlb	1	; () banked
  7924  001C86  196F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7925  001C88  E140               	bnz	l9837
  7926                           
  7927                           ; BSR set to: 1
  7928  001C8A  0E09               	movlw	9
  7929  001C8C  EC1D  F02A         	call	_vscp_getGUID
  7930  001C90  0101               	movlb	1	; () banked
  7931  001C92  1970               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7932  001C94  E13A               	bnz	l9837
  7933                           
  7934                           ; BSR set to: 1
  7935  001C96  0E0A               	movlw	10
  7936  001C98  EC1D  F02A         	call	_vscp_getGUID
  7937  001C9C  0101               	movlb	1	; () banked
  7938  001C9E  1971               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7939  001CA0  E134               	bnz	l9837
  7940                           
  7941                           ; BSR set to: 1
  7942  001CA2  0E0B               	movlw	11
  7943  001CA4  EC1D  F02A         	call	_vscp_getGUID
  7944  001CA8  0101               	movlb	1	; () banked
  7945  001CAA  1972               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7946  001CAC  E12E               	bnz	l9837
  7947                           
  7948                           ; BSR set to: 1
  7949                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7950  001CAE  8C4B               	bsf	_vscp_guid_reset,6,c
  7951  001CB0  D02C               	goto	l9837
  7952  001CB2                     l9823:
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7956                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7957                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7958                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7959  001CB2  0E0C               	movlw	12
  7960  001CB4  EC1D  F02A         	call	_vscp_getGUID
  7961  001CB8  0101               	movlb	1	; () banked
  7962  001CBA  196F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7963  001CBC  E126               	bnz	l9837
  7964                           
  7965                           ; BSR set to: 1
  7966  001CBE  0E0D               	movlw	13
  7967  001CC0  EC1D  F02A         	call	_vscp_getGUID
  7968  001CC4  0101               	movlb	1	; () banked
  7969  001CC6  1970               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7970  001CC8  E120               	bnz	l9837
  7971                           
  7972                           ; BSR set to: 1
  7973  001CCA  0E0E               	movlw	14
  7974  001CCC  EC1D  F02A         	call	_vscp_getGUID
  7975  001CD0  0101               	movlb	1	; () banked
  7976  001CD2  1971               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7977  001CD4  E11A               	bnz	l9837
  7978                           
  7979                           ; BSR set to: 1
  7980  001CD6  0E0F               	movlw	15
  7981  001CD8  EC1D  F02A         	call	_vscp_getGUID
  7982  001CDC  0101               	movlb	1	; () banked
  7983  001CDE  1972               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7984  001CE0  E114               	bnz	l9837
  7985                           
  7986                           ; BSR set to: 1
  7987                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7988  001CE2  8E4B               	bsf	_vscp_guid_reset,7,c
  7989  001CE4  D012               	goto	l9837
  7990  001CE6                     l1211:
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7994  001CE6  6A4B               	clrf	_vscp_guid_reset,c
  7995                           
  7996                           ;vscp_firmware.c: 965: break;
  7997  001CE8  D010               	goto	l9837
  7998  001CEA                     l9835:
  7999                           
  8000                           ; BSR set to: 1
  8001  001CEA  396E               	swapf	(_vscp_imsg+6)& (0+255),w,b
  8002  001CEC  0B0F               	andlw	15
  8003  001CEE  0100               	movlb	0	; () banked
  8004  001CF0  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8005  001CF2  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8006                           
  8007                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8008                           ; Switch size 1, requested type "space"
  8009                           ; Number of cases is 1, Range of values is 0 to 0
  8010                           ; switch strategies available:
  8011                           ; Name         Instructions Cycles
  8012                           ; simple_byte            4     3 (average)
  8013                           ;	Chosen strategy is simple_byte
  8014  001CF4  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8015  001CF6  E1F7               	bnz	l1211
  8016                           
  8017                           ; BSR set to: 0
  8018                           ; Switch size 1, requested type "space"
  8019                           ; Number of cases is 4, Range of values is 0 to 3
  8020                           ; switch strategies available:
  8021                           ; Name         Instructions Cycles
  8022                           ; simple_byte           13     7 (average)
  8023                           ;	Chosen strategy is simple_byte
  8024  001CF8  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  8025  001CFA  E08D               	bz	l9793
  8026  001CFC  0A01               	xorlw	1	; case 1
  8027  001CFE  E0A5               	bz	l9803
  8028  001D00  0A03               	xorlw	3	; case 2
  8029  001D02  E0BD               	bz	l9813
  8030  001D04  0A01               	xorlw	1	; case 3
  8031  001D06  E0D5               	bz	l9823
  8032  001D08  D7EE               	goto	l1211
  8033  001D0A                     l9837:
  8034                           
  8035                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  8036  001D0A  504B               	movf	_vscp_guid_reset,w,c
  8037  001D0C  0BF0               	andlw	240
  8038  001D0E  0AF0               	xorlw	240
  8039  001D10  E001 D22E          	bnz	l1271
  8040                           
  8041                           ;vscp_firmware.c: 970: vscp_init();
  8042  001D14  ECC2  F026         	call	_vscp_init	;wreg free
  8043  001D18  D22B               	goto	l1271
  8044  001D1A                     l9841:
  8045                           
  8046                           ; BSR set to: 1
  8047                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8048  001D1A  0100               	movlb	0	; () banked
  8049  001D1C  51CA               	movf	_vscp_nickname& (0+255),w,b
  8050  001D1E  0101               	movlb	1	; () banked
  8051  001D20  EE21  F06E         	lfsr	2,_vscp_imsg+6
  8052  001D24  62DF               	cpfseq	indf2,c
  8053  001D26  D224               	goto	l1271
  8054                           
  8055                           ; BSR set to: 1
  8056                           ;vscp_firmware.c: 978: uint8_t i;
  8057                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  8058  001D28  0100               	movlb	0	; () banked
  8059  001D2A  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  8060                           
  8061                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  8062  001D2C  C16F  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  8063                           
  8064                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  8065  001D30  C170  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  8066                           
  8067                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  8068  001D34  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  8069  001D36  D044               	goto	l9873
  8070  001D38                     l9845:
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  8074  001D38  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  8075  001D3A  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8076  001D3C  ECBF  F029         	call	_vscp_readRegister
  8077  001D40  0100               	movlb	0	; () banked
  8078  001D42  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8079  001D44  0E07               	movlw	7
  8080  001D46  6E0E               	movwf	?___lbmod,c
  8081  001D48  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8082  001D4A  EC12  F029         	call	___lbmod
  8083  001D4E  0100               	movlb	0	; () banked
  8084  001D50  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8085  001D52  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8086  001D54  0FD2               	addlw	low (_vscp_omsg+6)
  8087  001D56  6ED9               	movwf	fsr2l,c
  8088  001D58  6ADA               	clrf	fsr2h,c
  8089  001D5A  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  8093  001D5E  0E07               	movlw	7
  8094  001D60  6E0E               	movwf	?___lbmod,c
  8095  001D62  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8096  001D64  EC12  F029         	call	___lbmod
  8097  001D68  0A06               	xorlw	6
  8098  001D6A  E00B               	bz	l9851
  8099  001D6C  0EFF               	movlw	255
  8100  001D6E  0100               	movlb	0	; () banked
  8101  001D70  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8102  001D72  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8103  001D74  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8104  001D76  0EFF               	movlw	255
  8105  001D78  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8106  001D7A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8107  001D7C  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8108  001D7E  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8109  001D80  E11E               	bnz	l9871
  8110  001D82                     l9851:
  8111                           
  8112                           ;vscp_firmware.c: 988: uint8_t bytes;
  8113                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  8114  001D82  0E07               	movlw	7
  8115  001D84  6E0E               	movwf	?___lbmod,c
  8116  001D86  0100               	movlb	0	; () banked
  8117  001D88  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8118  001D8A  EC12  F029         	call	___lbmod
  8119  001D8E  0A06               	xorlw	6
  8120  001D90  E103               	bnz	l9855
  8121                           
  8122                           ;vscp_firmware.c: 991: bytes = 7;
  8123  001D92  0E07               	movlw	7
  8124  001D94  0100               	movlb	0	; () banked
  8125  001D96  D009               	goto	L9
  8126  001D98                     l9855:
  8127                           
  8128                           ;vscp_firmware.c: 993: else {
  8129                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  8130  001D98  0E07               	movlw	7
  8131  001D9A  6E0E               	movwf	?___lbmod,c
  8132  001D9C  0100               	movlb	0	; () banked
  8133  001D9E  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8134  001DA0  EC12  F029         	call	___lbmod
  8135  001DA4  0100               	movlb	0	; () banked
  8136  001DA6  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8137  001DA8  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8138  001DAA                     L9:
  8139  001DAA  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;vscp_firmware.c: 995: }
  8143                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  8144  001DAC  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8145  001DAE  0F81               	addlw	129
  8146  001DB0  6FCC               	movwf	_vscp_omsg& (0+255),b
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  8156  001DB2  D9F6               	call	PL70	;call to abstracted procedure
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  8160  001DB4  C08B  F0D1         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  8164  001DB8  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;vscp_firmware.c: 1005: pos++;
  8168  001DBC  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8169  001DBE                     l9871:
  8170                           
  8171                           ; BSR set to: 0
  8172  001DBE  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8173  001DC0                     l9873:
  8174                           
  8175                           ; BSR set to: 0
  8176  001DC0  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8177  001DC2  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8178  001DC4  E301 D1D4          	bc	l1271
  8179  001DC8  D7B7               	goto	l9845
  8180  001DCA                     l9875:
  8181                           
  8182                           ; BSR set to: 1
  8183                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8184  001DCA  0100               	movlb	0	; () banked
  8185  001DCC  51CA               	movf	_vscp_nickname& (0+255),w,b
  8186  001DCE  0101               	movlb	1	; () banked
  8187  001DD0  EE21  F06E         	lfsr	2,_vscp_imsg+6
  8188  001DD4  62DF               	cpfseq	indf2,c
  8189  001DD6  D1CC               	goto	l1271
  8190                           
  8191                           ; BSR set to: 1
  8192                           ;vscp_firmware.c: 1014: uint8_t i;
  8193                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  8194  001DD8  C16F  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1163
  8195                           
  8196                           ; BSR set to: 1
  8197                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8198  001DDC  5168               	movf	_vscp_imsg& (0+255),w,b
  8199  001DDE  0FFE               	addlw	254
  8200  001DE0  0B07               	andlw	7
  8201  001DE2  0100               	movlb	0	; () banked
  8202  001DE4  6F8F               	movwf	vscp_handleProtocolEvent@len_1164& (0+255),b
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  8206  001DE6  6B94               	clrf	vscp_handleProtocolEvent@i_1162& (0+255),b
  8207  001DE8  D01B               	goto	l9889
  8208  001DEA                     l9883:
  8209                           
  8210                           ; BSR set to: 0
  8211                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8212  001DEA  0E70               	movlw	low (_vscp_imsg+8)
  8213  001DEC  0100               	movlb	0	; () banked
  8214  001DEE  2594               	addwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8215  001DF0  6ED9               	movwf	fsr2l,c
  8216  001DF2  6ADA               	clrf	fsr2h,c
  8217  001DF4  0E01               	movlw	high (_vscp_imsg+8)
  8218  001DF6  22DA               	addwfc	fsr2h,f,c
  8219  001DF8  50DF               	movf	indf2,w,c
  8220  001DFA  6E27               	movwf	?_vscp_writeRegister,c
  8221  001DFC  518E               	movf	vscp_handleProtocolEvent@pos_1163& (0+255),w,b
  8222  001DFE  2594               	addwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8223  001E00  EC70  F029         	call	_vscp_writeRegister
  8224                           
  8225                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8226  001E04  0100               	movlb	0	; () banked
  8227  001E06  518E               	movf	vscp_handleProtocolEvent@pos_1163& (0+255),w,b
  8228  001E08  2594               	addwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8229  001E0A  ECBF  F029         	call	_vscp_readRegister
  8230  001E0E  0100               	movlb	0	; () banked
  8231  001E10  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8232  001E12  5194               	movf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8233  001E14  0FD2               	addlw	low (_vscp_omsg+6)
  8234  001E16  6ED9               	movwf	fsr2l,c
  8235  001E18  6ADA               	clrf	fsr2h,c
  8236  001E1A  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8237                           
  8238                           ; BSR set to: 0
  8239  001E1E  2B94               	incf	vscp_handleProtocolEvent@i_1162& (0+255),f,b
  8240  001E20                     l9889:
  8241                           
  8242                           ; BSR set to: 0
  8243  001E20  518F               	movf	vscp_handleProtocolEvent@len_1164& (0+255),w,b
  8244  001E22  5D94               	subwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8245  001E24  E3E2               	bnc	l9883
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;vscp_firmware.c: 1022: }
  8249                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  8253                           
  8254                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  8255  001E26  D9BC               	call	PL70	;call to abstracted procedure
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  8259  001E28  6BD1               	clrf	(_vscp_omsg+5)& (0+255),b
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  8263  001E2A  518F               	movf	vscp_handleProtocolEvent@len_1164& (0+255),w,b
  8264  001E2C  0F81               	addlw	129
  8265  001E2E  6FCC               	movwf	_vscp_omsg& (0+255),b
  8266  001E30  D6A0               	goto	l9727
  8267  001E32                     l9901:
  8268                           
  8269                           ; BSR set to: 1
  8270                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8271  001E32  0100               	movlb	0	; () banked
  8272  001E34  51CA               	movf	_vscp_nickname& (0+255),w,b
  8273  001E36  0101               	movlb	1	; () banked
  8274  001E38  EE21  F06E         	lfsr	2,_vscp_imsg+6
  8275  001E3C  62DF               	cpfseq	indf2,c
  8276  001E3E  D198               	goto	l1271
  8277                           
  8278                           ; BSR set to: 1
  8279                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8280                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  8281                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8282  001E40  516F               	movf	(_vscp_imsg+7)& (0+255),w,b
  8283  001E42  ECB4  F009         	call	_vscp_readAppReg
  8284  001E46  0100               	movlb	0	; () banked
  8285  001E48  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8286  001E4A  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8287  001E4C  6E23               	movwf	?_vscp_writeAppReg,c
  8288  001E4E  0101               	movlb	1	; () banked
  8289  001E50  516F               	movf	(_vscp_imsg+7)& (0+255),w,b
  8290  001E52  EC37  F003         	call	_vscp_writeAppReg
  8291  001E56  D681               	goto	L8
  8292  001E58                     l9917:
  8293                           
  8294                           ; BSR set to: 1
  8295                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8296  001E58  0100               	movlb	0	; () banked
  8297  001E5A  51CA               	movf	_vscp_nickname& (0+255),w,b
  8298  001E5C  0101               	movlb	1	; () banked
  8299  001E5E  EE21  F06E         	lfsr	2,_vscp_imsg+6
  8300  001E62  62DF               	cpfseq	indf2,c
  8301  001E64  D185               	goto	l1271
  8302                           
  8303                           ; BSR set to: 1
  8304                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8305                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  8306                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8307  001E66  516F               	movf	(_vscp_imsg+7)& (0+255),w,b
  8308  001E68  ECB4  F009         	call	_vscp_readAppReg
  8309  001E6C  0100               	movlb	0	; () banked
  8310  001E6E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8311  001E70  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8312  001E72  6E23               	movwf	?_vscp_writeAppReg,c
  8313  001E74  0101               	movlb	1	; () banked
  8314  001E76  516F               	movf	(_vscp_imsg+7)& (0+255),w,b
  8315  001E78  EC37  F003         	call	_vscp_writeAppReg
  8316  001E7C  D66E               	goto	L8
  8317  001E7E                     l9933:
  8318                           
  8319                           ; BSR set to: 1
  8320                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8321                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  8322  001E7E  516E               	movf	(_vscp_imsg+6)& (0+255),w,b
  8323  001E80  0100               	movlb	0	; () banked
  8324  001E82  19CA               	xorwf	_vscp_nickname& (0+255),w,b
  8325  001E84  E004               	bz	l1235
  8326                           
  8327                           ; BSR set to: 0
  8328  001E86  0101               	movlb	1	; () banked
  8329  001E88  296E               	incf	(_vscp_imsg+6)& (0+255),w,b
  8330  001E8A  E001 D171          	bnz	l1271
  8331  001E8E                     l1235:
  8332                           
  8333                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  8334  001E8E  0100               	movlb	0	; () banked
  8335  001E90  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  8339  001E92  0E03               	movlw	3
  8340  001E94  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8341                           
  8342                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  8343  001E96  0E88               	movlw	136
  8344  001E98  6FCC               	movwf	_vscp_omsg& (0+255),b
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  8348  001E9A  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  8349  001E9C  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  8350                           
  8351                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  8352  001E9E  0E20               	movlw	32
  8353  001EA0  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  8357  001EA2  6B98               	clrf	vscp_handleProtocolEvent@i_1165& (0+255),b
  8358  001EA4                     l1236:
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;vscp_firmware.c: 1091: {
  8362                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  8366  001EA4  D984               	call	PL82	;call to abstracted procedure
  8367  001EA6                     l9953:
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8371  001EA6  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8372  001EA8  0FD1               	addlw	low (_vscp_omsg+5)
  8373  001EAA  6ED9               	movwf	fsr2l,c
  8374  001EAC  6ADA               	clrf	fsr2h,c
  8375  001EAE  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8376  001EB0  080F               	sublw	15
  8377  001EB2  EC1D  F02A         	call	_vscp_getGUID
  8378  001EB6  6EDF               	movwf	indf2,c
  8379  001EB8  0100               	movlb	0	; () banked
  8380  001EBA  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;vscp_firmware.c: 1096: if (k > 16)
  8384  001EBC  0E10               	movlw	16
  8385  001EBE  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8386  001EC0  D001               	goto	l9961
  8387  001EC2  D004               	goto	l9965
  8388  001EC4                     l9961:
  8389                           
  8390                           ; BSR set to: 0
  8391  001EC4  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8392                           
  8393                           ; BSR set to: 0
  8394  001EC6  0E07               	movlw	7
  8395  001EC8  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8396  001ECA  D7ED               	goto	l9953
  8397  001ECC                     l9965:
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;vscp_firmware.c: 1098: }
  8401                           ;vscp_firmware.c: 1100: if (k > 16)
  8402  001ECC  0E10               	movlw	16
  8403  001ECE  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8404  001ED0  D001               	goto	l9969
  8405  001ED2  D006               	goto	l1237
  8406  001ED4                     l9969:
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  8410  001ED4  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  8411                           
  8412                           ; BSR set to: 0
  8413  001ED8  2B98               	incf	vscp_handleProtocolEvent@i_1165& (0+255),f,b
  8414                           
  8415                           ; BSR set to: 0
  8416  001EDA  0E02               	movlw	2
  8417  001EDC  6598               	cpfsgt	vscp_handleProtocolEvent@i_1165& (0+255),b
  8418  001EDE  D7E2               	goto	l1236
  8419  001EE0                     l1237:
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;vscp_firmware.c: 1104: }
  8423                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  8424  001EE0  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8425  001EE2                     l9979:
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;vscp_firmware.c: 1107: {
  8429                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  8430  001EE2  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8431  001EE4  ECF1  F029         	call	_vscp_getMDF_URL
  8432  001EE8  0900               	iorlw	0
  8433  001EEA  E009               	bz	l9983
  8434                           
  8435                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8436  001EEC  0100               	movlb	0	; () banked
  8437  001EEE  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8438  001EF0  0FD4               	addlw	low (_vscp_omsg+8)
  8439  001EF2  6ED9               	movwf	fsr2l,c
  8440  001EF4  6ADA               	clrf	fsr2h,c
  8441  001EF6  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8442  001EF8  ECF1  F029         	call	_vscp_getMDF_URL
  8443  001EFC  D006               	goto	L10
  8444  001EFE                     l9983:
  8445                           
  8446                           ;vscp_firmware.c: 1110: else
  8447                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  8448  001EFE  0100               	movlb	0	; () banked
  8449  001F00  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8450  001F02  0FD4               	addlw	low (_vscp_omsg+8)
  8451  001F04  6ED9               	movwf	fsr2l,c
  8452  001F06  6ADA               	clrf	fsr2h,c
  8453  001F08  0E00               	movlw	0
  8454  001F0A                     L10:
  8455  001F0A  6EDF               	movwf	indf2,c
  8456  001F0C  0100               	movlb	0	; () banked
  8457  001F0E  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8458                           
  8459                           ; BSR set to: 0
  8460  001F10  0E04               	movlw	4
  8461  001F12  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8462  001F14  D7E6               	goto	l9979
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;vscp_firmware.c: 1112: }
  8466                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  8467  001F16  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;vscp_firmware.c: 1116: k = 5;
  8471  001F1A  0E05               	movlw	5
  8472  001F1C  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  8476  001F1E  0E03               	movlw	3
  8477  001F20  6F98               	movwf	vscp_handleProtocolEvent@i_1165& (0+255),b
  8478  001F22                     l1246:
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;vscp_firmware.c: 1118: {
  8482                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  8486  001F22  D945               	call	PL82	;call to abstracted procedure
  8487  001F24                     l10005:
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8491  001F24  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8492  001F26  0FD1               	addlw	low (_vscp_omsg+5)
  8493  001F28  6ED9               	movwf	fsr2l,c
  8494  001F2A  6ADA               	clrf	fsr2h,c
  8495  001F2C  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8496  001F2E  ECF1  F029         	call	_vscp_getMDF_URL
  8497  001F32  6EDF               	movwf	indf2,c
  8498  001F34  0100               	movlb	0	; () banked
  8499  001F36  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8500                           
  8501                           ; BSR set to: 0
  8502  001F38  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8503                           
  8504                           ; BSR set to: 0
  8505  001F3A  0E07               	movlw	7
  8506  001F3C  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8507  001F3E  D7F2               	goto	l10005
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;vscp_firmware.c: 1123: }
  8511                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  8512  001F40  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  8513                           
  8514                           ; BSR set to: 0
  8515  001F44  2B98               	incf	vscp_handleProtocolEvent@i_1165& (0+255),f,b
  8516                           
  8517                           ; BSR set to: 0
  8518  001F46  0E06               	movlw	6
  8519  001F48  6598               	cpfsgt	vscp_handleProtocolEvent@i_1165& (0+255),b
  8520  001F4A  D7EB               	goto	l1246
  8521  001F4C  D111               	goto	l1271
  8522  001F4E                     l10019:
  8523                           
  8524                           ; BSR set to: 1
  8525                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8526  001F4E  0100               	movlb	0	; () banked
  8527  001F50  51CA               	movf	_vscp_nickname& (0+255),w,b
  8528  001F52  0101               	movlb	1	; () banked
  8529  001F54  EE21  F06E         	lfsr	2,_vscp_imsg+6
  8530  001F58  62DF               	cpfseq	indf2,c
  8531  001F5A  D10A               	goto	l1271
  8532                           
  8533                           ; BSR set to: 1
  8534                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  8535  001F5C  0E03               	movlw	3
  8536  001F5E  0100               	movlb	0	; () banked
  8537  001F60  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8538                           
  8539                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  8540  001F62  0E87               	movlw	135
  8541  001F64  6FCC               	movwf	_vscp_omsg& (0+255),b
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  8545  001F66  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  8546  001F68  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  8547                           
  8548                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  8549  001F6A  0E22               	movlw	34
  8550  001F6C  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8554  001F6E  0ED1               	movlw	(_vscp_omsg+5)& (0+255)
  8555  001F70  ECCC  F029         	call	_vscp_getMatrixInfo
  8556  001F74  D5FE               	goto	l9727
  8557  001F76                     l10029:
  8558                           
  8559                           ; BSR set to: 1
  8560                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8561  001F76  0100               	movlb	0	; () banked
  8562  001F78  51CA               	movf	_vscp_nickname& (0+255),w,b
  8563  001F7A  0101               	movlb	1	; () banked
  8564  001F7C  EE21  F06E         	lfsr	2,_vscp_imsg+6
  8565  001F80  62DF               	cpfseq	indf2,c
  8566  001F82  D0F6               	goto	l1271
  8567                           
  8568                           ; BSR set to: 1
  8569                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  8570  001F84  0100               	movlb	0	; () banked
  8571  001F86  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  8575                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8576  001F88  C168  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8577  001F8C  0E0F               	movlw	15
  8578  001F8E  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8579  001F90  0E04               	movlw	4
  8580  001F92  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8581  001F94  E312               	bnc	l10045
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  8585  001F96  C172  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1169
  8586  001F9A  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  8590  001F9C  5197               	movf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8591  001F9E  1196               	iorwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8592  001FA0  E103               	bnz	l10041
  8593                           
  8594                           ; BSR set to: 0
  8595  001FA2  0E01               	movlw	1
  8596  001FA4  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8597  001FA6  6B96               	clrf	vscp_handleProtocolEvent@bytes_1169& (0+255),b
  8598  001FA8                     l10041:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  8602  001FA8  0E01               	movlw	1
  8603  001FAA  5D96               	subwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8604  001FAC  0E01               	movlw	1
  8605  001FAE  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8606  001FB0  E307               	bnc	l10047
  8607                           
  8608                           ; BSR set to: 0
  8609  001FB2  0E01               	movlw	1
  8610  001FB4  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8611  001FB6  0E00               	movlw	0
  8612  001FB8  D002               	goto	L12
  8613  001FBA                     l10045:
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;vscp_firmware.c: 1173: else {
  8617                           ;vscp_firmware.c: 1174: bytes = 1;
  8618  001FBA  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8619  001FBC  0E01               	movlw	1
  8620  001FBE                     L12:
  8621  001FBE  6F96               	movwf	vscp_handleProtocolEvent@bytes_1169& (0+255),b
  8622  001FC0                     l10047:
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;vscp_firmware.c: 1175: }
  8626                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  8627  001FC0  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8628  001FC4  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8632  001FC8  0101               	movlb	1	; () banked
  8633  001FCA  D8D3               	call	PL20	;call to abstracted procedure
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  8637  001FCC  0E07               	movlw	7
  8638  001FCE  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  8645                           
  8646                           ; BSR set to: 0
  8647                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  8648                           
  8649                           ; BSR set to: 0
  8650                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  8654  001FD0  D8DD               	call	PL32	;call to abstracted procedure
  8655  001FD2                     l10063:
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  8659  001FD2  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8660  001FD4  5D96               	subwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8661  001FD6  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8662  001FD8  0E00               	movlw	0
  8663  001FDA  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8664  001FDC  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8665  001FDE  0E04               	movlw	4
  8666  001FE0  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8667  001FE2  0E00               	movlw	0
  8668  001FE4  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8669  001FE6  E302               	bnc	l10067
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  8673  001FE8  0E04               	movlw	4
  8674  001FEA  D002               	goto	L13
  8675  001FEC                     l10067:
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;vscp_firmware.c: 1198: else {
  8679                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  8680  001FEC  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8681  001FEE  5D96               	subwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8682  001FF0                     L13:
  8683  001FF0  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;vscp_firmware.c: 1200: }
  8687                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8688  001FF2  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8689  001FF4  0F84               	addlw	132
  8690  001FF6  6FCC               	movwf	_vscp_omsg& (0+255),b
  8691                           
  8692                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  8693                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  8694  001FF8  0101               	movlb	1	; () banked
  8695  001FFA  5171               	movf	(_vscp_imsg+9)& (0+255),w,b
  8696  001FFC  0100               	movlb	0	; () banked
  8697  001FFE  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8698  002000  6FD4               	movwf	(_vscp_omsg+8)& (0+255),b
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8702  002002  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8703  002004  D010               	goto	l10075
  8704  002006                     l10071:
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  8708                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8709  002006  0101               	movlb	1	; () banked
  8710  002008  5171               	movf	(_vscp_imsg+9)& (0+255),w,b
  8711  00200A  0100               	movlb	0	; () banked
  8712  00200C  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8713  00200E  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8714  002010  ECBF  F029         	call	_vscp_readRegister
  8715  002014  0100               	movlb	0	; () banked
  8716  002016  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8717  002018  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8718  00201A  0FD5               	addlw	low (_vscp_omsg+9)
  8719  00201C  6ED9               	movwf	fsr2l,c
  8720  00201E  6ADA               	clrf	fsr2h,c
  8721  002020  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8722                           
  8723                           ; BSR set to: 0
  8724  002024  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8725  002026                     l10075:
  8726                           
  8727                           ; BSR set to: 0
  8728  002026  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8729  002028  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8730  00202A  E3ED               	bnc	l10071
  8731                           
  8732                           ; BSR set to: 0
  8733                           ;vscp_firmware.c: 1211: }
  8734                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  8735  00202C  ECFD  F028         	call	_vscp_sendEvent	;wreg free
  8736                           
  8737                           ; BSR set to: 0
  8738                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  8739  002030  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8740  002032  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8741                           
  8742                           ; BSR set to: 0
  8743                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  8744  002034  2BD1               	incf	(_vscp_omsg+5)& (0+255),f,b
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  8748  002036  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8749  002038  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8750  00203A  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8751  00203C  5196               	movf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8752  00203E  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8753  002040  5197               	movf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8754  002042  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8755  002044  E3C6               	bnc	l10063
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  8759  002046  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8760  00204A  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8761  00204E  D090               	goto	l1271
  8762  002050                     l10085:
  8763                           
  8764                           ; BSR set to: 1
  8765                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8766  002050  0100               	movlb	0	; () banked
  8767  002052  51CA               	movf	_vscp_nickname& (0+255),w,b
  8768  002054  0101               	movlb	1	; () banked
  8769  002056  EE21  F06E         	lfsr	2,_vscp_imsg+6
  8770  00205A  62DF               	cpfseq	indf2,c
  8771  00205C  D089               	goto	l1271
  8772                           
  8773                           ; BSR set to: 1
  8774                           ;vscp_firmware.c: 1234: uint8_t i;
  8775                           ;vscp_firmware.c: 1235: uint16_t page_save;
  8776                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  8777  00205E  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1174
  8778  002062  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1174+1
  8779                           
  8780                           ; BSR set to: 1
  8781                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8782  002066  D885               	call	PL20	;call to abstracted procedure
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  8786  002068  C171  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1173
  8787                           
  8788                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8789                           ;vscp_firmware.c: 1248: i++) {
  8790  00206C  D022               	goto	l10097
  8791  00206E                     l10093:
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8795                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8796  00206E  0E72               	movlw	low (_vscp_imsg+10)
  8797  002070  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8798  002072  0E01               	movlw	high (_vscp_imsg+10)
  8799  002074  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8800  002076  5192               	movf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8801  002078  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8802  00207A  0E00               	movlw	0
  8803  00207C  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8804  00207E  0101               	movlb	1	; () banked
  8805  002080  5171               	movf	(_vscp_imsg+9)& (0+255),w,b
  8806  002082  0100               	movlb	0	; () banked
  8807  002084  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8808  002086  6ED9               	movwf	fsr2l,c
  8809  002088  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8810  00208A  A0D8               	btfss	status,0,c
  8811  00208C  0580               	decf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8812  00208E  6EDA               	movwf	fsr2h,c
  8813  002090  50DF               	movf	indf2,w,c
  8814  002092  6E27               	movwf	?_vscp_writeRegister,c
  8815  002094  5192               	movf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8816  002096  EC70  F029         	call	_vscp_writeRegister
  8817  00209A  0100               	movlb	0	; () banked
  8818  00209C  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8819  00209E  0101               	movlb	1	; () banked
  8820  0020A0  5171               	movf	(_vscp_imsg+9)& (0+255),w,b
  8821  0020A2  0100               	movlb	0	; () banked
  8822  0020A4  08D5               	sublw	low (_vscp_omsg+9)
  8823  0020A6  2592               	addwf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8824  0020A8  6ED9               	movwf	fsr2l,c
  8825  0020AA  6ADA               	clrf	fsr2h,c
  8826  0020AC  C081  FFDF         	movff	??_vscp_handleProtocolEvent+2,indf2
  8827                           
  8828                           ; BSR set to: 0
  8829  0020B0  2B92               	incf	vscp_handleProtocolEvent@i_1173& (0+255),f,b
  8830  0020B2                     l10097:
  8831                           
  8832                           ; BSR set to: 0
  8833  0020B2  0101               	movlb	1	; () banked
  8834  0020B4  5168               	movf	_vscp_imsg& (0+255),w,b
  8835  0020B6  0B0F               	andlw	15
  8836  0020B8  0100               	movlb	0	; () banked
  8837  0020BA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8838  0020BC  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8839  0020BE  0101               	movlb	1	; () banked
  8840  0020C0  5171               	movf	(_vscp_imsg+9)& (0+255),w,b
  8841  0020C2  0100               	movlb	0	; () banked
  8842  0020C4  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8843  0020C6  0E00               	movlw	0
  8844  0020C8  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8845  0020CA  0EFC               	movlw	252
  8846  0020CC  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8847  0020CE  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8848  0020D0  0EFF               	movlw	255
  8849  0020D2  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8850  0020D4  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8851  0020D6  5192               	movf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8852  0020D8  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8853  0020DA  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8854  0020DC  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8855  0020DE  0A80               	xorlw	128
  8856  0020E0  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8857  0020E2  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8858  0020E4  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8859  0020E6  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8860  0020E8  0A80               	xorlw	128
  8861  0020EA  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8862  0020EC  E3C0               	bnc	l10093
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;vscp_firmware.c: 1251: }
  8866                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8867  0020EE  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1174,_vscp_page_select
  8868  0020F2  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1174+1,_vscp_page_select+1
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8872  0020F6  0E07               	movlw	7
  8873  0020F8  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8877  0020FA  0101               	movlb	1	; () banked
  8878  0020FC  5168               	movf	_vscp_imsg& (0+255),w,b
  8879  0020FE  0B0F               	andlw	15
  8880  002100  0F80               	addlw	128
  8881  002102  0100               	movlb	0	; () banked
  8882  002104  6FCC               	movwf	_vscp_omsg& (0+255),b
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8898  002106  D842               	call	PL32	;call to abstracted procedure
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8902  002108  C171  F0D4         	movff	_vscp_imsg+9,_vscp_omsg+8
  8903  00210C  D532               	goto	l9727
  8904  00210E                     l10119:
  8905                           
  8906                           ; BSR set to: 1
  8907  00210E  516C               	movf	(_vscp_imsg+4)& (0+255),w,b
  8908                           
  8909                           ; Switch size 1, requested type "space"
  8910                           ; Number of cases is 16, Range of values is 1 to 38
  8911                           ; switch strategies available:
  8912                           ; Name         Instructions Cycles
  8913                           ; simple_byte           49    25 (average)
  8914                           ;	Chosen strategy is simple_byte
  8915  002110  0A01               	xorlw	1	; case 1
  8916  002112  E101 D504          	bz	l9701
  8917  002116  0A03               	xorlw	3	; case 2
  8918  002118  E101 D504          	bz	l9703
  8919  00211C  0A04               	xorlw	4	; case 6
  8920  00211E  E101 D504          	bz	l9705
  8921  002122  0A0E               	xorlw	14	; case 8
  8922  002124  E101 D504          	bz	l9707
  8923  002128  0A01               	xorlw	1	; case 9
  8924  00212A  E101 D504          	bz	l9709
  8925  00212E  0A02               	xorlw	2	; case 11
  8926  002130  E101 D526          	bz	l9743
  8927  002134  0A07               	xorlw	7	; case 12
  8928  002136  E101 D53E          	bz	l9777
  8929  00213A  0A1B               	xorlw	27	; case 23
  8930  00213C  E101 D5D5          	bz	l9835
  8931  002140  0A0F               	xorlw	15	; case 24
  8932  002142  E101 D5EA          	bz	l9841
  8933  002146  0A01               	xorlw	1	; case 25
  8934  002148  E101 D63F          	bz	l9875
  8935  00214C  0A04               	xorlw	4	; case 29
  8936  00214E  E101 D670          	bz	l9901
  8937  002152  0A03               	xorlw	3	; case 30
  8938  002154  E101 D680          	bz	l9917
  8939  002158  0A01               	xorlw	1	; case 31
  8940  00215A  E101 D690          	bz	l9933
  8941  00215E  0A3E               	xorlw	62	; case 33
  8942  002160  E101 D6F5          	bz	l10019
  8943  002164  0A04               	xorlw	4	; case 37
  8944  002166  E101 D706          	bz	l10029
  8945  00216A  0A03               	xorlw	3	; case 38
  8946  00216C  E101 D770          	bz	l10085
  8947  002170                     l1271:
  8948  002170  0012               	return	
  8949  002172                     __end_of_vscp_handleProtocolEvent:
  8950                           	opt stack 0
  8951  002172                     PL20:
  8952                           	opt stack 21
  8953  002172  5170               	movf	(_vscp_imsg+8)& (0+255),w,b
  8954  002174  C16F  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8955  002178  0100               	movlb	0	; () banked
  8956  00217A  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8957  00217C  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8958  002180  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8959  002182  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8960  002184  6E46               	movwf	_vscp_page_select,c
  8961  002186  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8962  002188  6E47               	movwf	_vscp_page_select+1,c
  8963  00218A  0012               	return	
  8964  00218C                     __end_ofPL20:
  8965                           	opt stack 0
  8966  00218C                     PL32:
  8967                           	opt stack 21
  8968  00218C  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  8969  00218E  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  8970  002190  0E27               	movlw	39
  8971  002192  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  8972  002194  6BD1               	clrf	(_vscp_omsg+5)& (0+255),b
  8973  002196  C16F  F0D2         	movff	_vscp_imsg+7,_vscp_omsg+6
  8974  00219A  C170  F0D3         	movff	_vscp_imsg+8,_vscp_omsg+7
  8975  00219E  0012               	return	
  8976  0021A0                     __end_ofPL32:
  8977                           	opt stack 0
  8978  0021A0                     PL70:
  8979                           	opt stack 21
  8980  0021A0  0E07               	movlw	7
  8981  0021A2  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8982  0021A4  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  8983  0021A6  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  8984  0021A8  0E1A               	movlw	26
  8985  0021AA  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  8986  0021AC  0C1A               	retlw	26
  8987  0021AE                     __end_ofPL70:
  8988                           	opt stack 0
  8989  0021AE                     PL82:
  8990                           	opt stack 21
  8991  0021AE  C098  F0D1         	movff	vscp_handleProtocolEvent@i_1165,_vscp_omsg+5
  8992  0021B2  0E01               	movlw	1
  8993  0021B4  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8994  0021B6  0C01               	retlw	1
  8995  0021B8                     __end_ofPL82:
  8996                           	opt stack 0
  8997                           tblptru	equ	0xFF8
  8998                           tblptrh	equ	0xFF7
  8999                           tblptrl	equ	0xFF6
  9000                           tablat	equ	0xFF5
  9001                           prodh	equ	0xFF4
  9002                           prodl	equ	0xFF3
  9003                           intcon	equ	0xFF2
  9004                           postinc0	equ	0xFEE
  9005                           wreg	equ	0xFE8
  9006                           indf1	equ	0xFE7
  9007                           postdec1	equ	0xFE5
  9008                           fsr1h	equ	0xFE2
  9009                           fsr1l	equ	0xFE1
  9010                           indf2	equ	0xFDF
  9011                           postinc2	equ	0xFDE
  9012                           postdec2	equ	0xFDD
  9013                           plusw2	equ	0xFDB
  9014                           fsr2h	equ	0xFDA
  9015                           fsr2l	equ	0xFD9
  9016                           status	equ	0xFD8
  9017                           
  9018 ;; *************** function ___lbmod *****************
  9019 ;; Defined at:
  9020 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;  dividend        1    wreg     unsigned char 
  9023 ;;  divisor         1   13[COMRAM] unsigned char 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  dividend        1   14[COMRAM] unsigned char 
  9026 ;;  rem             1   16[COMRAM] unsigned char 
  9027 ;;  counter         1   15[COMRAM] unsigned char 
  9028 ;; Return value:  Size  Location     Type
  9029 ;;                  1    wreg      unsigned char 
  9030 ;; Registers used:
  9031 ;;		wreg, status,2, status,0
  9032 ;; Tracked objects:
  9033 ;;		On entry : F/0
  9034 ;;		On exit  : 0/0
  9035 ;;		Unchanged: 0/0
  9036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9037 ;;      Params:         1       0       0       0       0       0       0
  9038 ;;      Locals:         3       0       0       0       0       0       0
  9039 ;;      Temps:          0       0       0       0       0       0       0
  9040 ;;      Totals:         4       0       0       0       0       0       0
  9041 ;;Total ram usage:        4 bytes
  9042 ;; Hardware stack levels used:    1
  9043 ;; Hardware stack levels required when called:    2
  9044 ;; This function calls:
  9045 ;;		Nothing
  9046 ;; This function is called by:
  9047 ;;		_vscp_handleProtocolEvent
  9048 ;; This function uses a non-reentrant model
  9049 ;;
  9050                           
  9051                           	psect	text34
  9052  005224                     __ptext34:
  9053                           	opt stack 0
  9054  005224                     ___lbmod:
  9055                           	opt stack 26
  9056                           
  9057                           ;incstack = 0
  9058                           ;incstack = 0
  9059                           ;___lbmod@dividend stored from wreg
  9060  005224  CFE8 F00F          	movff	wreg,___lbmod@dividend
  9061                           
  9062                           ; BSR set to: 0
  9063  005228  0E08               	movlw	8
  9064  00522A  6E10               	movwf	___lbmod@counter,c
  9065                           
  9066                           ; BSR set to: 0
  9067  00522C  6A11               	clrf	___lbmod@rem,c
  9068  00522E                     l9167:
  9069  00522E  90D8               	bcf	status,0,c
  9070  005230  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  9071  005232  3411               	rlcf	___lbmod@rem& (0+255),w,c
  9072  005234  6E11               	movwf	___lbmod@rem,c
  9073  005236  90D8               	bcf	status,0,c
  9074  005238  360F               	rlcf	___lbmod@dividend,f,c
  9075  00523A  500E               	movf	___lbmod@divisor,w,c
  9076  00523C  5C11               	subwf	___lbmod@rem,w,c
  9077  00523E  E302               	bnc	l9175
  9078  005240  500E               	movf	___lbmod@divisor,w,c
  9079  005242  5E11               	subwf	___lbmod@rem,f,c
  9080  005244                     l9175:
  9081  005244  2E10               	decfsz	___lbmod@counter,f,c
  9082  005246  D7F3               	goto	l9167
  9083  005248  5011               	movf	___lbmod@rem,w,c
  9084  00524A  0012               	return	
  9085  00524C                     __end_of___lbmod:
  9086                           	opt stack 0
  9087                           tblptru	equ	0xFF8
  9088                           tblptrh	equ	0xFF7
  9089                           tblptrl	equ	0xFF6
  9090                           tablat	equ	0xFF5
  9091                           prodh	equ	0xFF4
  9092                           prodl	equ	0xFF3
  9093                           intcon	equ	0xFF2
  9094                           postinc0	equ	0xFEE
  9095                           wreg	equ	0xFE8
  9096                           indf1	equ	0xFE7
  9097                           postdec1	equ	0xFE5
  9098                           fsr1h	equ	0xFE2
  9099                           fsr1l	equ	0xFE1
  9100                           indf2	equ	0xFDF
  9101                           postinc2	equ	0xFDE
  9102                           postdec2	equ	0xFDD
  9103                           plusw2	equ	0xFDB
  9104                           fsr2h	equ	0xFDA
  9105                           fsr2l	equ	0xFD9
  9106                           status	equ	0xFD8
  9107                           
  9108 ;; *************** function _vscp_writeRegister *****************
  9109 ;; Defined at:
  9110 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;  reg             1    wreg     unsigned char 
  9113 ;;  value           1   38[COMRAM] unsigned char 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  reg             1   39[COMRAM] unsigned char 
  9116 ;; Return value:  Size  Location     Type
  9117 ;;                  1    wreg      unsigned char 
  9118 ;; Registers used:
  9119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9120 ;; Tracked objects:
  9121 ;;		On entry : F/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9125 ;;      Params:         1       0       0       0       0       0       0
  9126 ;;      Locals:         1       0       0       0       0       0       0
  9127 ;;      Temps:          0       0       0       0       0       0       0
  9128 ;;      Totals:         2       0       0       0       0       0       0
  9129 ;;Total ram usage:        2 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    6
  9132 ;; This function calls:
  9133 ;;		_vscp_writeAppReg
  9134 ;;		_vscp_writeStdReg
  9135 ;; This function is called by:
  9136 ;;		_vscp_handleProtocolEvent
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           	psect	text35
  9141  0052E0                     __ptext35:
  9142                           	opt stack 0
  9143  0052E0                     _vscp_writeRegister:
  9144                           	opt stack 22
  9145                           
  9146                           ;incstack = 0
  9147                           ;incstack = 0
  9148                           ;vscp_writeRegister@reg stored from wreg
  9149  0052E0  CFE8 F028          	movff	wreg,vscp_writeRegister@reg
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  9153  0052E4  0E7F               	movlw	127
  9154  0052E6  6428               	cpfsgt	vscp_writeRegister@reg,c
  9155  0052E8  D006               	goto	l11321
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  9159  0052EA  C027  F01B         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9160  0052EE  5028               	movf	vscp_writeRegister@reg,w,c
  9161  0052F0  EC32  F01F         	call	_vscp_writeStdReg
  9162  0052F4  D005               	goto	l1151
  9163  0052F6                     l11321:
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;vscp_firmware.c: 705: else {
  9167                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  9168  0052F6  C027  F023         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9169  0052FA  5028               	movf	vscp_writeRegister@reg,w,c
  9170  0052FC  EC37  F003         	call	_vscp_writeAppReg
  9171  005300                     l1151:
  9172  005300  0012               	return	
  9173  005302                     __end_of_vscp_writeRegister:
  9174                           	opt stack 0
  9175                           tblptru	equ	0xFF8
  9176                           tblptrh	equ	0xFF7
  9177                           tblptrl	equ	0xFF6
  9178                           tablat	equ	0xFF5
  9179                           prodh	equ	0xFF4
  9180                           prodl	equ	0xFF3
  9181                           intcon	equ	0xFF2
  9182                           postinc0	equ	0xFEE
  9183                           wreg	equ	0xFE8
  9184                           indf1	equ	0xFE7
  9185                           postdec1	equ	0xFE5
  9186                           fsr1h	equ	0xFE2
  9187                           fsr1l	equ	0xFE1
  9188                           indf2	equ	0xFDF
  9189                           postinc2	equ	0xFDE
  9190                           postdec2	equ	0xFDD
  9191                           plusw2	equ	0xFDB
  9192                           fsr2h	equ	0xFDA
  9193                           fsr2l	equ	0xFD9
  9194                           status	equ	0xFD8
  9195                           
  9196 ;; *************** function _vscp_writeStdReg *****************
  9197 ;; Defined at:
  9198 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;  reg             1    wreg     unsigned char 
  9201 ;;  value           1   26[COMRAM] unsigned char 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  reg             1   32[COMRAM] unsigned char 
  9204 ;;  rv              1   31[COMRAM] unsigned char 
  9205 ;; Return value:  Size  Location     Type
  9206 ;;                  1    wreg      unsigned char 
  9207 ;; Registers used:
  9208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : E/1
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9214 ;;      Params:         1       0       0       0       0       0       0
  9215 ;;      Locals:         2       0       0       0       0       0       0
  9216 ;;      Temps:          4       0       0       0       0       0       0
  9217 ;;      Totals:         7       0       0       0       0       0       0
  9218 ;;Total ram usage:        7 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    5
  9221 ;; This function calls:
  9222 ;;		_vscp_getGUID
  9223 ;;		_vscp_setGUID
  9224 ;;		_vscp_getUserID
  9225 ;;		_vscp_setUserID
  9226 ;;		_vscp_getManufacturerId
  9227 ;;		_vscp_setManufacturerId
  9228 ;;		_vscp_restoreDefaults
  9229 ;; This function is called by:
  9230 ;;		_vscp_writeRegister
  9231 ;;		_vscp_handleProtocolEvent
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           	psect	text36
  9236  003E64                     __ptext36:
  9237                           	opt stack 0
  9238  003E64                     _vscp_writeStdReg:
  9239                           	opt stack 23
  9240                           
  9241                           ;incstack = 0
  9242                           ;incstack = 0
  9243                           ;vscp_writeStdReg@reg stored from wreg
  9244  003E64  CFE8 F021          	movff	wreg,vscp_writeStdReg@reg
  9245                           
  9246                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  9247  003E68  1C1B               	comf	vscp_writeStdReg@value,w,c
  9248  003E6A  6E20               	movwf	vscp_writeStdReg@rv,c
  9249                           
  9250                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  9251                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  9252  003E6C  0E83               	movlw	131
  9253  003E6E  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9254  003E70  D00E               	goto	l11333
  9255  003E72  0E89               	movlw	137
  9256  003E74  6021               	cpfslt	vscp_writeStdReg@reg,c
  9257  003E76  D00B               	goto	l11333
  9258                           
  9259                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  9260  003E78  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9261  003E7C  5021               	movf	vscp_writeStdReg@reg,w,c
  9262  003E7E  0F7C               	addlw	124
  9263  003E80  ECE5  F029         	call	_vscp_setUserID
  9264                           
  9265                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  9266  003E84  5021               	movf	vscp_writeStdReg@reg,w,c
  9267  003E86  0F7C               	addlw	124
  9268  003E88  EC13  F02A         	call	_vscp_getUserID
  9269  003E8C  D06B               	goto	L19
  9270  003E8E                     l11333:
  9271                           
  9272                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  9273  003E8E  5021               	movf	vscp_writeStdReg@reg,w,c
  9274  003E90  0A92               	xorlw	146
  9275  003E92  E10D               	bnz	l11339
  9276                           
  9277                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9278  003E94  501B               	movf	vscp_writeStdReg@value,w,c
  9279  003E96  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9280  003E98  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9281  003E9A  5046               	movf	_vscp_page_select,w,c
  9282  003E9C  6E1E               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9283  003E9E  6A1F               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9284  003EA0  101C               	iorwf	??_vscp_writeStdReg,w,c
  9285  003EA2  6E46               	movwf	_vscp_page_select,c
  9286  003EA4  501D               	movf	??_vscp_writeStdReg+1,w,c
  9287  003EA6  101F               	iorwf	??_vscp_writeStdReg+3,w,c
  9288  003EA8  6E47               	movwf	_vscp_page_select+1,c
  9289                           
  9290                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  9291  003EAA  5047               	movf	_vscp_page_select+1,w,c
  9292  003EAC  D05B               	goto	L19
  9293  003EAE                     l11339:
  9294                           
  9295                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  9296  003EAE  5021               	movf	vscp_writeStdReg@reg,w,c
  9297  003EB0  0A93               	xorlw	147
  9298  003EB2  E10B               	bnz	l11345
  9299                           
  9300                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9301  003EB4  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9302  003EB6  5047               	movf	_vscp_page_select+1,w,c
  9303  003EB8  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9304  003EBA  501B               	movf	vscp_writeStdReg@value,w,c
  9305  003EBC  101C               	iorwf	??_vscp_writeStdReg,w,c
  9306  003EBE  6E46               	movwf	_vscp_page_select,c
  9307  003EC0  501D               	movf	??_vscp_writeStdReg+1,w,c
  9308  003EC2  6E47               	movwf	_vscp_page_select+1,c
  9309                           
  9310                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  9311  003EC4  C046  F020         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9312                           
  9313                           ;vscp_firmware.c: 737: }
  9314  003EC8  D050               	goto	l11387
  9315  003ECA                     l11345:
  9316                           
  9317                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  9318  003ECA  0E88               	movlw	136
  9319  003ECC  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9320  003ECE  D019               	goto	l11357
  9321  003ED0  0E91               	movlw	145
  9322  003ED2  6021               	cpfslt	vscp_writeStdReg@reg,c
  9323  003ED4  D016               	goto	l11357
  9324                           
  9325                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9326                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  9327  003ED6  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9328  003EDA  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9329  003EDE  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9330  003EE0  281D               	incf	??_vscp_writeStdReg+1,w,c
  9331  003EE2  E102               	bnz	l11353
  9332  003EE4  2846               	incf	_vscp_page_select,w,c
  9333  003EE6  E002               	bz	l11355
  9334  003EE8                     l11353:
  9335                           
  9336                           ;vscp_firmware.c: 747: rv = ~value;
  9337  003EE8  1C1B               	comf	vscp_writeStdReg@value,w,c
  9338  003EEA  D03C               	goto	L19
  9339  003EEC                     l11355:
  9340                           
  9341                           ;vscp_firmware.c: 749: else {
  9342                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  9343  003EEC  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9344  003EF0  5021               	movf	vscp_writeStdReg@reg,w,c
  9345  003EF2  0F77               	addlw	119
  9346  003EF4  ECD9  F029         	call	_vscp_setManufacturerId
  9347                           
  9348                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  9349  003EF8  5021               	movf	vscp_writeStdReg@reg,w,c
  9350  003EFA  0F77               	addlw	119
  9351  003EFC  EC09  F02A         	call	_vscp_getManufacturerId
  9352  003F00  D031               	goto	L19
  9353  003F02                     l11357:
  9354                           
  9355                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9356  003F02  0ECF               	movlw	207
  9357  003F04  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9358  003F06  D017               	goto	l11369
  9359  003F08  0EE0               	movlw	224
  9360  003F0A  6021               	cpfslt	vscp_writeStdReg@reg,c
  9361  003F0C  D014               	goto	l11369
  9362                           
  9363                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9364                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  9365  003F0E  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9366  003F12  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9367  003F16  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9368  003F18  281D               	incf	??_vscp_writeStdReg+1,w,c
  9369  003F1A  E1E6               	bnz	l11353
  9370  003F1C  2846               	incf	_vscp_page_select,w,c
  9371  003F1E  E1E4               	bnz	l11353
  9372                           
  9373                           ;vscp_firmware.c: 762: else {
  9374                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  9375  003F20  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9376  003F24  5021               	movf	vscp_writeStdReg@reg,w,c
  9377  003F26  0F30               	addlw	48
  9378  003F28  EC81  F029         	call	_vscp_setGUID
  9379                           
  9380                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  9381  003F2C  5021               	movf	vscp_writeStdReg@reg,w,c
  9382  003F2E  0F30               	addlw	48
  9383  003F30  EC1D  F02A         	call	_vscp_getGUID
  9384  003F34  D017               	goto	L19
  9385  003F36                     l11369:
  9386                           
  9387                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  9388  003F36  5021               	movf	vscp_writeStdReg@reg,w,c
  9389  003F38  0AA2               	xorlw	162
  9390  003F3A  E1D6               	bnz	l11353
  9391                           
  9392                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  9393  003F3C  501B               	movf	vscp_writeStdReg@value,w,c
  9394  003F3E  0A55               	xorlw	85
  9395  003F40  E105               	bnz	l11377
  9396                           
  9397                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  9398  003F42  0101               	movlb	1	; () banked
  9399  003F44  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9400  003F46  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9401                           
  9402                           ; BSR set to: 1
  9403                           ;vscp_firmware.c: 771: rv = 0x55;
  9404  003F48  0E55               	movlw	85
  9405  003F4A  D00C               	goto	L19
  9406  003F4C                     l11377:
  9407                           
  9408                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  9409  003F4C  501B               	movf	vscp_writeStdReg@value,w,c
  9410  003F4E  0AAA               	xorlw	170
  9411  003F50  E10C               	bnz	l11387
  9412                           
  9413                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  9414  003F52  0EE8               	movlw	232
  9415  003F54  0101               	movlb	1	; () banked
  9416  003F56  5D1C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9417  003F58  0E03               	movlw	3
  9418  003F5A  591D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9419  003F5C  E205               	bc	l1177
  9420                           
  9421                           ; BSR set to: 1
  9422                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  9423  003F5E  EC7C  F02A         	call	_vscp_restoreDefaults	;wreg free
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;vscp_firmware.c: 776: rv = 0xaa;
  9427  003F62  0EAA               	movlw	170
  9428  003F64                     L19:
  9429  003F64  6E20               	movwf	vscp_writeStdReg@rv,c
  9430                           
  9431                           ;vscp_firmware.c: 777: }
  9432  003F66  D001               	goto	l11387
  9433  003F68                     l1177:
  9434                           
  9435                           ; BSR set to: 1
  9436                           ;vscp_firmware.c: 778: else {
  9437                           ;vscp_firmware.c: 779: rv = 0;
  9438  003F68  6A20               	clrf	vscp_writeStdReg@rv,c
  9439  003F6A                     l11387:
  9440                           
  9441                           ;vscp_firmware.c: 787: }
  9442                           ;vscp_firmware.c: 789: return rv;
  9443  003F6A  5020               	movf	vscp_writeStdReg@rv,w,c
  9444  003F6C  0012               	return	
  9445  003F6E                     __end_of_vscp_writeStdReg:
  9446                           	opt stack 0
  9447                           tblptru	equ	0xFF8
  9448                           tblptrh	equ	0xFF7
  9449                           tblptrl	equ	0xFF6
  9450                           tablat	equ	0xFF5
  9451                           prodh	equ	0xFF4
  9452                           prodl	equ	0xFF3
  9453                           intcon	equ	0xFF2
  9454                           postinc0	equ	0xFEE
  9455                           wreg	equ	0xFE8
  9456                           indf1	equ	0xFE7
  9457                           postdec1	equ	0xFE5
  9458                           fsr1h	equ	0xFE2
  9459                           fsr1l	equ	0xFE1
  9460                           indf2	equ	0xFDF
  9461                           postinc2	equ	0xFDE
  9462                           postdec2	equ	0xFDD
  9463                           plusw2	equ	0xFDB
  9464                           fsr2h	equ	0xFDA
  9465                           fsr2l	equ	0xFD9
  9466                           status	equ	0xFD8
  9467                           
  9468 ;; *************** function _vscp_restoreDefaults *****************
  9469 ;; Defined at:
  9470 ;;		line 2849 in file "../main.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;		None
  9475 ;; Return value:  Size  Location     Type
  9476 ;;		None               void
  9477 ;; Registers used:
  9478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9479 ;; Tracked objects:
  9480 ;;		On entry : F/1
  9481 ;;		On exit  : F/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9484 ;;      Params:         0       0       0       0       0       0       0
  9485 ;;      Locals:         0       0       0       0       0       0       0
  9486 ;;      Temps:          0       0       0       0       0       0       0
  9487 ;;      Totals:         0       0       0       0       0       0       0
  9488 ;;Total ram usage:        0 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    4
  9491 ;; This function calls:
  9492 ;;		_init_app_eeprom
  9493 ;;		_init_app_ram
  9494 ;; This function is called by:
  9495 ;;		_vscp_writeStdReg
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           	psect	text37
  9500  0054F8                     __ptext37:
  9501                           	opt stack 0
  9502  0054F8                     _vscp_restoreDefaults:
  9503                           	opt stack 23
  9504                           
  9505                           ; BSR set to: 1
  9506                           ;main.c: 2850: init_app_eeprom();
  9507                           
  9508                           ;incstack = 0
  9509                           ;incstack = 0
  9510  0054F8  ECCC  F013         	call	_init_app_eeprom	;wreg free
  9511                           
  9512                           ;main.c: 2851: init_app_ram();
  9513  0054FC  EFDC  F027         	goto	_init_app_ram	;wreg free
  9514  005500                     __end_of_vscp_restoreDefaults:
  9515                           	opt stack 0
  9516                           tblptru	equ	0xFF8
  9517                           tblptrh	equ	0xFF7
  9518                           tblptrl	equ	0xFF6
  9519                           tablat	equ	0xFF5
  9520                           prodh	equ	0xFF4
  9521                           prodl	equ	0xFF3
  9522                           intcon	equ	0xFF2
  9523                           postinc0	equ	0xFEE
  9524                           wreg	equ	0xFE8
  9525                           indf1	equ	0xFE7
  9526                           postdec1	equ	0xFE5
  9527                           fsr1h	equ	0xFE2
  9528                           fsr1l	equ	0xFE1
  9529                           indf2	equ	0xFDF
  9530                           postinc2	equ	0xFDE
  9531                           postdec2	equ	0xFDD
  9532                           plusw2	equ	0xFDB
  9533                           fsr2h	equ	0xFDA
  9534                           fsr2l	equ	0xFD9
  9535                           status	equ	0xFD8
  9536                           
  9537 ;; *************** function _init_app_eeprom *****************
  9538 ;; Defined at:
  9539 ;;		line 1026 in file "../main.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;		None
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;		None
  9544 ;; Return value:  Size  Location     Type
  9545 ;;		None               void
  9546 ;; Registers used:
  9547 ;;		wreg, status,2, cstack
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9553 ;;      Params:         0       0       0       0       0       0       0
  9554 ;;      Locals:         0       0       0       0       0       0       0
  9555 ;;      Temps:          0       0       0       0       0       0       0
  9556 ;;      Totals:         0       0       0       0       0       0       0
  9557 ;;Total ram usage:        0 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    3
  9560 ;; This function calls:
  9561 ;;		_writeEEPROM
  9562 ;; This function is called by:
  9563 ;;		_main
  9564 ;;		_vscp_restoreDefaults
  9565 ;; This function uses a non-reentrant model
  9566 ;;
  9567                           
  9568                           	psect	text38
  9569  002798                     __ptext38:
  9570                           	opt stack 0
  9571  002798                     _init_app_eeprom:
  9572                           	opt stack 23
  9573                           
  9574                           ;main.c: 1028: writeEEPROM( 0x41, 0 );
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;incstack = 0
  9578                           ;incstack = 0
  9579  002798  6A0F               	clrf	?_writeEEPROM+1,c
  9580  00279A  0E41               	movlw	65
  9581  00279C  6E0E               	movwf	?_writeEEPROM,c
  9582  00279E  0E00               	movlw	0
  9583  0027A0  6A10               	clrf	?_writeEEPROM+2,c
  9584  0027A2  EC39  F029         	call	_writeEEPROM	;wreg free
  9585                           
  9586                           ;main.c: 1029: writeEEPROM( 0x41, 0 );
  9587  0027A6  6A0F               	clrf	?_writeEEPROM+1,c
  9588  0027A8  0E41               	movlw	65
  9589  0027AA  6E0E               	movwf	?_writeEEPROM,c
  9590  0027AC  0E00               	movlw	0
  9591  0027AE  6A10               	clrf	?_writeEEPROM+2,c
  9592  0027B0  EC39  F029         	call	_writeEEPROM	;wreg free
  9593                           
  9594                           ;main.c: 1031: writeEEPROM(0x43, 0b00000001);
  9595  0027B4  6A0F               	clrf	?_writeEEPROM+1,c
  9596  0027B6  0E43               	movlw	67
  9597  0027B8  6E0E               	movwf	?_writeEEPROM,c
  9598  0027BA  0E01               	movlw	1
  9599  0027BC  6E10               	movwf	?_writeEEPROM+2,c
  9600  0027BE  EC39  F029         	call	_writeEEPROM	;wreg free
  9601                           
  9602                           ;main.c: 1032: writeEEPROM(0x44, 0b00000001);
  9603  0027C2  6A0F               	clrf	?_writeEEPROM+1,c
  9604  0027C4  0E44               	movlw	68
  9605  0027C6  6E0E               	movwf	?_writeEEPROM,c
  9606  0027C8  0E01               	movlw	1
  9607  0027CA  6E10               	movwf	?_writeEEPROM+2,c
  9608  0027CC  EC39  F029         	call	_writeEEPROM	;wreg free
  9609                           
  9610                           ;main.c: 1033: writeEEPROM(0x45, 0b00000001);
  9611  0027D0  6A0F               	clrf	?_writeEEPROM+1,c
  9612  0027D2  0E45               	movlw	69
  9613  0027D4  6E0E               	movwf	?_writeEEPROM,c
  9614  0027D6  0E01               	movlw	1
  9615  0027D8  6E10               	movwf	?_writeEEPROM+2,c
  9616  0027DA  EC39  F029         	call	_writeEEPROM	;wreg free
  9617                           
  9618                           ;main.c: 1034: writeEEPROM(0x46, 0b00000001);
  9619  0027DE  6A0F               	clrf	?_writeEEPROM+1,c
  9620  0027E0  0E46               	movlw	70
  9621  0027E2  6E0E               	movwf	?_writeEEPROM,c
  9622  0027E4  0E01               	movlw	1
  9623  0027E6  6E10               	movwf	?_writeEEPROM+2,c
  9624  0027E8  EC39  F029         	call	_writeEEPROM	;wreg free
  9625                           
  9626                           ;main.c: 1035: writeEEPROM(0x47, 0b00000001);
  9627  0027EC  6A0F               	clrf	?_writeEEPROM+1,c
  9628  0027EE  0E47               	movlw	71
  9629  0027F0  6E0E               	movwf	?_writeEEPROM,c
  9630  0027F2  0E01               	movlw	1
  9631  0027F4  6E10               	movwf	?_writeEEPROM+2,c
  9632  0027F6  EC39  F029         	call	_writeEEPROM	;wreg free
  9633                           
  9634                           ;main.c: 1036: writeEEPROM(0x48, 0b00000001);
  9635  0027FA  6A0F               	clrf	?_writeEEPROM+1,c
  9636  0027FC  0E48               	movlw	72
  9637  0027FE  6E0E               	movwf	?_writeEEPROM,c
  9638  002800  0E01               	movlw	1
  9639  002802  6E10               	movwf	?_writeEEPROM+2,c
  9640  002804  EC39  F029         	call	_writeEEPROM	;wreg free
  9641                           
  9642                           ;main.c: 1038: writeEEPROM(0x49, 30);
  9643  002808  6A0F               	clrf	?_writeEEPROM+1,c
  9644  00280A  0E49               	movlw	73
  9645  00280C  6E0E               	movwf	?_writeEEPROM,c
  9646  00280E  0E1E               	movlw	30
  9647  002810  6E10               	movwf	?_writeEEPROM+2,c
  9648  002812  EC39  F029         	call	_writeEEPROM	;wreg free
  9649                           
  9650                           ;main.c: 1039: writeEEPROM(0x4A, 0);
  9651  002816  6A0F               	clrf	?_writeEEPROM+1,c
  9652  002818  0E4A               	movlw	74
  9653  00281A  6E0E               	movwf	?_writeEEPROM,c
  9654  00281C  0E00               	movlw	0
  9655  00281E  6A10               	clrf	?_writeEEPROM+2,c
  9656  002820  EC39  F029         	call	_writeEEPROM	;wreg free
  9657                           
  9658                           ;main.c: 1040: writeEEPROM(0x4B, 0);
  9659  002824  6A0F               	clrf	?_writeEEPROM+1,c
  9660  002826  0E4B               	movlw	75
  9661  002828  6E0E               	movwf	?_writeEEPROM,c
  9662  00282A  0E00               	movlw	0
  9663  00282C  6A10               	clrf	?_writeEEPROM+2,c
  9664  00282E  EC39  F029         	call	_writeEEPROM	;wreg free
  9665                           
  9666                           ;main.c: 1041: writeEEPROM(0x4C, 0);
  9667  002832  6A0F               	clrf	?_writeEEPROM+1,c
  9668  002834  0E4C               	movlw	76
  9669  002836  6E0E               	movwf	?_writeEEPROM,c
  9670  002838  0E00               	movlw	0
  9671  00283A  6A10               	clrf	?_writeEEPROM+2,c
  9672  00283C  EC39  F029         	call	_writeEEPROM	;wreg free
  9673                           
  9674                           ;main.c: 1042: writeEEPROM(0x4D, 0);
  9675  002840  6A0F               	clrf	?_writeEEPROM+1,c
  9676  002842  0E4D               	movlw	77
  9677  002844  6E0E               	movwf	?_writeEEPROM,c
  9678  002846  0E00               	movlw	0
  9679  002848  6A10               	clrf	?_writeEEPROM+2,c
  9680  00284A  EC39  F029         	call	_writeEEPROM	;wreg free
  9681                           
  9682                           ;main.c: 1043: writeEEPROM(0x4E, 0);
  9683  00284E  6A0F               	clrf	?_writeEEPROM+1,c
  9684  002850  0E4E               	movlw	78
  9685  002852  6E0E               	movwf	?_writeEEPROM,c
  9686  002854  0E00               	movlw	0
  9687  002856  6A10               	clrf	?_writeEEPROM+2,c
  9688  002858  EC39  F029         	call	_writeEEPROM	;wreg free
  9689                           
  9690                           ;main.c: 1047: writeEEPROM(0x4F, 0x0F);
  9691  00285C  6A0F               	clrf	?_writeEEPROM+1,c
  9692  00285E  0E4F               	movlw	79
  9693  002860  6E0E               	movwf	?_writeEEPROM,c
  9694  002862  0E0F               	movlw	15
  9695  002864  6E10               	movwf	?_writeEEPROM+2,c
  9696  002866  EC39  F029         	call	_writeEEPROM	;wreg free
  9697                           
  9698                           ;main.c: 1048: writeEEPROM(0x50, 0x68);
  9699  00286A  6A0F               	clrf	?_writeEEPROM+1,c
  9700  00286C  0E50               	movlw	80
  9701  00286E  6E0E               	movwf	?_writeEEPROM,c
  9702  002870  0E68               	movlw	104
  9703  002872  6E10               	movwf	?_writeEEPROM+2,c
  9704  002874  EC39  F029         	call	_writeEEPROM	;wreg free
  9705                           
  9706                           ;main.c: 1050: writeEEPROM(0x51, 0x0D);
  9707  002878  6A0F               	clrf	?_writeEEPROM+1,c
  9708  00287A  0E51               	movlw	81
  9709  00287C  6E0E               	movwf	?_writeEEPROM,c
  9710  00287E  0E0D               	movlw	13
  9711  002880  6E10               	movwf	?_writeEEPROM+2,c
  9712  002882  EC39  F029         	call	_writeEEPROM	;wreg free
  9713                           
  9714                           ;main.c: 1051: writeEEPROM(0x52, 0x7F);
  9715  002886  6A0F               	clrf	?_writeEEPROM+1,c
  9716  002888  0E52               	movlw	82
  9717  00288A  6E0E               	movwf	?_writeEEPROM,c
  9718  00288C  0E7F               	movlw	127
  9719  00288E  6E10               	movwf	?_writeEEPROM+2,c
  9720  002890  EC39  F029         	call	_writeEEPROM	;wreg free
  9721                           
  9722                           ;main.c: 1053: writeEEPROM(0x53, 0x0D);
  9723  002894  6A0F               	clrf	?_writeEEPROM+1,c
  9724  002896  0E53               	movlw	83
  9725  002898  6E0E               	movwf	?_writeEEPROM,c
  9726  00289A  0E0D               	movlw	13
  9727  00289C  6E10               	movwf	?_writeEEPROM+2,c
  9728  00289E  EC39  F029         	call	_writeEEPROM	;wreg free
  9729                           
  9730                           ;main.c: 1054: writeEEPROM(0x54, 0x7F);
  9731  0028A2  6A0F               	clrf	?_writeEEPROM+1,c
  9732  0028A4  0E54               	movlw	84
  9733  0028A6  6E0E               	movwf	?_writeEEPROM,c
  9734  0028A8  0E7F               	movlw	127
  9735  0028AA  6E10               	movwf	?_writeEEPROM+2,c
  9736  0028AC  EC39  F029         	call	_writeEEPROM	;wreg free
  9737                           
  9738                           ;main.c: 1056: writeEEPROM(0x55, 0x0D);
  9739  0028B0  6A0F               	clrf	?_writeEEPROM+1,c
  9740  0028B2  0E55               	movlw	85
  9741  0028B4  6E0E               	movwf	?_writeEEPROM,c
  9742  0028B6  0E0D               	movlw	13
  9743  0028B8  6E10               	movwf	?_writeEEPROM+2,c
  9744  0028BA  EC39  F029         	call	_writeEEPROM	;wreg free
  9745                           
  9746                           ;main.c: 1057: writeEEPROM(0x56, 0x7F);
  9747  0028BE  6A0F               	clrf	?_writeEEPROM+1,c
  9748  0028C0  0E56               	movlw	86
  9749  0028C2  6E0E               	movwf	?_writeEEPROM,c
  9750  0028C4  0E7F               	movlw	127
  9751  0028C6  6E10               	movwf	?_writeEEPROM+2,c
  9752  0028C8  EC39  F029         	call	_writeEEPROM	;wreg free
  9753                           
  9754                           ;main.c: 1059: writeEEPROM(0x57, 0x0D);
  9755  0028CC  6A0F               	clrf	?_writeEEPROM+1,c
  9756  0028CE  0E57               	movlw	87
  9757  0028D0  6E0E               	movwf	?_writeEEPROM,c
  9758  0028D2  0E0D               	movlw	13
  9759  0028D4  6E10               	movwf	?_writeEEPROM+2,c
  9760  0028D6  EC39  F029         	call	_writeEEPROM	;wreg free
  9761                           
  9762                           ;main.c: 1060: writeEEPROM(0x58, 0x7F);
  9763  0028DA  6A0F               	clrf	?_writeEEPROM+1,c
  9764  0028DC  0E58               	movlw	88
  9765  0028DE  6E0E               	movwf	?_writeEEPROM,c
  9766  0028E0  0E7F               	movlw	127
  9767  0028E2  6E10               	movwf	?_writeEEPROM+2,c
  9768  0028E4  EC39  F029         	call	_writeEEPROM	;wreg free
  9769                           
  9770                           ;main.c: 1062: writeEEPROM(0x59, 0x0D);
  9771  0028E8  6A0F               	clrf	?_writeEEPROM+1,c
  9772  0028EA  0E59               	movlw	89
  9773  0028EC  6E0E               	movwf	?_writeEEPROM,c
  9774  0028EE  0E0D               	movlw	13
  9775  0028F0  6E10               	movwf	?_writeEEPROM+2,c
  9776  0028F2  EC39  F029         	call	_writeEEPROM	;wreg free
  9777                           
  9778                           ;main.c: 1063: writeEEPROM(0x5A, 0x7F);
  9779  0028F6  6A0F               	clrf	?_writeEEPROM+1,c
  9780  0028F8  0E5A               	movlw	90
  9781  0028FA  6E0E               	movwf	?_writeEEPROM,c
  9782  0028FC  0E7F               	movlw	127
  9783  0028FE  6E10               	movwf	?_writeEEPROM+2,c
  9784  002900  EC39  F029         	call	_writeEEPROM	;wreg free
  9785                           
  9786                           ;main.c: 1067: writeEEPROM(0x5B, 0x80);
  9787  002904  6A0F               	clrf	?_writeEEPROM+1,c
  9788  002906  0E5B               	movlw	91
  9789  002908  6E0E               	movwf	?_writeEEPROM,c
  9790  00290A  0E80               	movlw	128
  9791  00290C  6E10               	movwf	?_writeEEPROM+2,c
  9792  00290E  EC39  F029         	call	_writeEEPROM	;wreg free
  9793                           
  9794                           ;main.c: 1068: writeEEPROM(0x5C, 0xff);
  9795  002912  6A0F               	clrf	?_writeEEPROM+1,c
  9796  002914  0E5C               	movlw	92
  9797  002916  6E0E               	movwf	?_writeEEPROM,c
  9798  002918  0EFF               	movlw	255
  9799  00291A  6810               	setf	?_writeEEPROM+2,c
  9800  00291C  EC39  F029         	call	_writeEEPROM	;wreg free
  9801                           
  9802                           ;main.c: 1070: writeEEPROM(0x5D, 0x80);
  9803  002920  6A0F               	clrf	?_writeEEPROM+1,c
  9804  002922  0E5D               	movlw	93
  9805  002924  6E0E               	movwf	?_writeEEPROM,c
  9806  002926  0E80               	movlw	128
  9807  002928  6E10               	movwf	?_writeEEPROM+2,c
  9808  00292A  EC39  F029         	call	_writeEEPROM	;wreg free
  9809                           
  9810                           ;main.c: 1071: writeEEPROM(0x5E, 0xff);
  9811  00292E  6A0F               	clrf	?_writeEEPROM+1,c
  9812  002930  0E5E               	movlw	94
  9813  002932  6E0E               	movwf	?_writeEEPROM,c
  9814  002934  0EFF               	movlw	255
  9815  002936  6810               	setf	?_writeEEPROM+2,c
  9816  002938  EC39  F029         	call	_writeEEPROM	;wreg free
  9817                           
  9818                           ;main.c: 1073: writeEEPROM(0x5F, 0x80);
  9819  00293C  6A0F               	clrf	?_writeEEPROM+1,c
  9820  00293E  0E5F               	movlw	95
  9821  002940  6E0E               	movwf	?_writeEEPROM,c
  9822  002942  0E80               	movlw	128
  9823  002944  6E10               	movwf	?_writeEEPROM+2,c
  9824  002946  EC39  F029         	call	_writeEEPROM	;wreg free
  9825                           
  9826                           ;main.c: 1074: writeEEPROM(0x60, 0xff);
  9827  00294A  6A0F               	clrf	?_writeEEPROM+1,c
  9828  00294C  0E60               	movlw	96
  9829  00294E  6E0E               	movwf	?_writeEEPROM,c
  9830  002950  0EFF               	movlw	255
  9831  002952  6810               	setf	?_writeEEPROM+2,c
  9832  002954  EC39  F029         	call	_writeEEPROM	;wreg free
  9833                           
  9834                           ;main.c: 1076: writeEEPROM(0x61, 0x80);
  9835  002958  6A0F               	clrf	?_writeEEPROM+1,c
  9836  00295A  0E61               	movlw	97
  9837  00295C  6E0E               	movwf	?_writeEEPROM,c
  9838  00295E  0E80               	movlw	128
  9839  002960  6E10               	movwf	?_writeEEPROM+2,c
  9840  002962  EC39  F029         	call	_writeEEPROM	;wreg free
  9841                           
  9842                           ;main.c: 1077: writeEEPROM(0x62, 0xff);
  9843  002966  6A0F               	clrf	?_writeEEPROM+1,c
  9844  002968  0E62               	movlw	98
  9845  00296A  6E0E               	movwf	?_writeEEPROM,c
  9846  00296C  0EFF               	movlw	255
  9847  00296E  6810               	setf	?_writeEEPROM+2,c
  9848  002970  EC39  F029         	call	_writeEEPROM	;wreg free
  9849                           
  9850                           ;main.c: 1079: writeEEPROM(0x63, 0x80);
  9851  002974  6A0F               	clrf	?_writeEEPROM+1,c
  9852  002976  0E63               	movlw	99
  9853  002978  6E0E               	movwf	?_writeEEPROM,c
  9854  00297A  0E80               	movlw	128
  9855  00297C  6E10               	movwf	?_writeEEPROM+2,c
  9856  00297E  EC39  F029         	call	_writeEEPROM	;wreg free
  9857                           
  9858                           ;main.c: 1080: writeEEPROM(0x64, 0xff);
  9859  002982  6A0F               	clrf	?_writeEEPROM+1,c
  9860  002984  0E64               	movlw	100
  9861  002986  6E0E               	movwf	?_writeEEPROM,c
  9862  002988  0EFF               	movlw	255
  9863  00298A  6810               	setf	?_writeEEPROM+2,c
  9864  00298C  EC39  F029         	call	_writeEEPROM	;wreg free
  9865                           
  9866                           ;main.c: 1082: writeEEPROM(0x65, 0x80);
  9867  002990  6A0F               	clrf	?_writeEEPROM+1,c
  9868  002992  0E65               	movlw	101
  9869  002994  6E0E               	movwf	?_writeEEPROM,c
  9870  002996  0E80               	movlw	128
  9871  002998  6E10               	movwf	?_writeEEPROM+2,c
  9872  00299A  EC39  F029         	call	_writeEEPROM	;wreg free
  9873                           
  9874                           ;main.c: 1083: writeEEPROM(0x66, 0xff);
  9875  00299E  6A0F               	clrf	?_writeEEPROM+1,c
  9876  0029A0  0E66               	movlw	102
  9877  0029A2  6E0E               	movwf	?_writeEEPROM,c
  9878  0029A4  0EFF               	movlw	255
  9879  0029A6  6810               	setf	?_writeEEPROM+2,c
  9880  0029A8  EC39  F029         	call	_writeEEPROM	;wreg free
  9881                           
  9882                           ;main.c: 1087: writeEEPROM(0x67, 0x7f);
  9883  0029AC  6A0F               	clrf	?_writeEEPROM+1,c
  9884  0029AE  0E67               	movlw	103
  9885  0029B0  6E0E               	movwf	?_writeEEPROM,c
  9886  0029B2  0E7F               	movlw	127
  9887  0029B4  6E10               	movwf	?_writeEEPROM+2,c
  9888  0029B6  EC39  F029         	call	_writeEEPROM	;wreg free
  9889                           
  9890                           ;main.c: 1088: writeEEPROM(0x68, 0xff);
  9891  0029BA  6A0F               	clrf	?_writeEEPROM+1,c
  9892  0029BC  0E68               	movlw	104
  9893  0029BE  6E0E               	movwf	?_writeEEPROM,c
  9894  0029C0  0EFF               	movlw	255
  9895  0029C2  6810               	setf	?_writeEEPROM+2,c
  9896  0029C4  EC39  F029         	call	_writeEEPROM	;wreg free
  9897                           
  9898                           ;main.c: 1090: writeEEPROM(0x69, 0x7f);
  9899  0029C8  6A0F               	clrf	?_writeEEPROM+1,c
  9900  0029CA  0E69               	movlw	105
  9901  0029CC  6E0E               	movwf	?_writeEEPROM,c
  9902  0029CE  0E7F               	movlw	127
  9903  0029D0  6E10               	movwf	?_writeEEPROM+2,c
  9904  0029D2  EC39  F029         	call	_writeEEPROM	;wreg free
  9905                           
  9906                           ;main.c: 1091: writeEEPROM(0x6A, 0xff);
  9907  0029D6  6A0F               	clrf	?_writeEEPROM+1,c
  9908  0029D8  0E6A               	movlw	106
  9909  0029DA  6E0E               	movwf	?_writeEEPROM,c
  9910  0029DC  0EFF               	movlw	255
  9911  0029DE  6810               	setf	?_writeEEPROM+2,c
  9912  0029E0  EC39  F029         	call	_writeEEPROM	;wreg free
  9913                           
  9914                           ;main.c: 1093: writeEEPROM(0x6B, 0x7f);
  9915  0029E4  6A0F               	clrf	?_writeEEPROM+1,c
  9916  0029E6  0E6B               	movlw	107
  9917  0029E8  6E0E               	movwf	?_writeEEPROM,c
  9918  0029EA  0E7F               	movlw	127
  9919  0029EC  6E10               	movwf	?_writeEEPROM+2,c
  9920  0029EE  EC39  F029         	call	_writeEEPROM	;wreg free
  9921                           
  9922                           ;main.c: 1094: writeEEPROM(0x6C, 0xff);
  9923  0029F2  6A0F               	clrf	?_writeEEPROM+1,c
  9924  0029F4  0E6C               	movlw	108
  9925  0029F6  6E0E               	movwf	?_writeEEPROM,c
  9926  0029F8  0EFF               	movlw	255
  9927  0029FA  6810               	setf	?_writeEEPROM+2,c
  9928  0029FC  EC39  F029         	call	_writeEEPROM	;wreg free
  9929                           
  9930                           ;main.c: 1096: writeEEPROM(0x6D, 0x7f);
  9931  002A00  6A0F               	clrf	?_writeEEPROM+1,c
  9932  002A02  0E6D               	movlw	109
  9933  002A04  6E0E               	movwf	?_writeEEPROM,c
  9934  002A06  0E7F               	movlw	127
  9935  002A08  6E10               	movwf	?_writeEEPROM+2,c
  9936  002A0A  EC39  F029         	call	_writeEEPROM	;wreg free
  9937                           
  9938                           ;main.c: 1097: writeEEPROM(0x6E, 0xff);
  9939  002A0E  6A0F               	clrf	?_writeEEPROM+1,c
  9940  002A10  0E6E               	movlw	110
  9941  002A12  6E0E               	movwf	?_writeEEPROM,c
  9942  002A14  0EFF               	movlw	255
  9943  002A16  6810               	setf	?_writeEEPROM+2,c
  9944  002A18  EC39  F029         	call	_writeEEPROM	;wreg free
  9945                           
  9946                           ;main.c: 1099: writeEEPROM(0x6F, 0x7f);
  9947  002A1C  6A0F               	clrf	?_writeEEPROM+1,c
  9948  002A1E  0E6F               	movlw	111
  9949  002A20  6E0E               	movwf	?_writeEEPROM,c
  9950  002A22  0E7F               	movlw	127
  9951  002A24  6E10               	movwf	?_writeEEPROM+2,c
  9952  002A26  EC39  F029         	call	_writeEEPROM	;wreg free
  9953                           
  9954                           ;main.c: 1100: writeEEPROM(0x70, 0xff);
  9955  002A2A  6A0F               	clrf	?_writeEEPROM+1,c
  9956  002A2C  0E70               	movlw	112
  9957  002A2E  6E0E               	movwf	?_writeEEPROM,c
  9958  002A30  0EFF               	movlw	255
  9959  002A32  6810               	setf	?_writeEEPROM+2,c
  9960  002A34  EC39  F029         	call	_writeEEPROM	;wreg free
  9961                           
  9962                           ;main.c: 1102: writeEEPROM(0x71, 0x7f);
  9963  002A38  6A0F               	clrf	?_writeEEPROM+1,c
  9964  002A3A  0E71               	movlw	113
  9965  002A3C  6E0E               	movwf	?_writeEEPROM,c
  9966  002A3E  0E7F               	movlw	127
  9967  002A40  6E10               	movwf	?_writeEEPROM+2,c
  9968  002A42  EC39  F029         	call	_writeEEPROM	;wreg free
  9969                           
  9970                           ;main.c: 1103: writeEEPROM(0x72, 0xff);
  9971  002A46  6A0F               	clrf	?_writeEEPROM+1,c
  9972  002A48  0E72               	movlw	114
  9973  002A4A  6E0E               	movwf	?_writeEEPROM,c
  9974  002A4C  0EFF               	movlw	255
  9975  002A4E  6810               	setf	?_writeEEPROM+2,c
  9976  002A50  EC39  F029         	call	_writeEEPROM	;wreg free
  9977                           
  9978                           ;main.c: 1107: writeEEPROM(0x73, 0);
  9979  002A54  6A0F               	clrf	?_writeEEPROM+1,c
  9980  002A56  0E73               	movlw	115
  9981  002A58  6E0E               	movwf	?_writeEEPROM,c
  9982  002A5A  0E00               	movlw	0
  9983  002A5C  6A10               	clrf	?_writeEEPROM+2,c
  9984  002A5E  EC39  F029         	call	_writeEEPROM	;wreg free
  9985                           
  9986                           ;main.c: 1108: writeEEPROM(0x74, 0);
  9987  002A62  6A0F               	clrf	?_writeEEPROM+1,c
  9988  002A64  0E74               	movlw	116
  9989  002A66  6E0E               	movwf	?_writeEEPROM,c
  9990  002A68  0E00               	movlw	0
  9991  002A6A  6A10               	clrf	?_writeEEPROM+2,c
  9992  002A6C  EC39  F029         	call	_writeEEPROM	;wreg free
  9993                           
  9994                           ;main.c: 1110: writeEEPROM(0x75, 0);
  9995  002A70  6A0F               	clrf	?_writeEEPROM+1,c
  9996  002A72  0E75               	movlw	117
  9997  002A74  6E0E               	movwf	?_writeEEPROM,c
  9998  002A76  0E00               	movlw	0
  9999  002A78  6A10               	clrf	?_writeEEPROM+2,c
 10000  002A7A  EC39  F029         	call	_writeEEPROM	;wreg free
 10001                           
 10002                           ;main.c: 1111: writeEEPROM(0x76, 0);
 10003  002A7E  6A0F               	clrf	?_writeEEPROM+1,c
 10004  002A80  0E76               	movlw	118
 10005  002A82  6E0E               	movwf	?_writeEEPROM,c
 10006  002A84  0E00               	movlw	0
 10007  002A86  6A10               	clrf	?_writeEEPROM+2,c
 10008  002A88  EC39  F029         	call	_writeEEPROM	;wreg free
 10009                           
 10010                           ;main.c: 1113: writeEEPROM(0x77, 0);
 10011  002A8C  6A0F               	clrf	?_writeEEPROM+1,c
 10012  002A8E  0E77               	movlw	119
 10013  002A90  6E0E               	movwf	?_writeEEPROM,c
 10014  002A92  0E00               	movlw	0
 10015  002A94  6A10               	clrf	?_writeEEPROM+2,c
 10016  002A96  EC39  F029         	call	_writeEEPROM	;wreg free
 10017                           
 10018                           ;main.c: 1114: writeEEPROM(0x78, 0);
 10019  002A9A  6A0F               	clrf	?_writeEEPROM+1,c
 10020  002A9C  0E78               	movlw	120
 10021  002A9E  6E0E               	movwf	?_writeEEPROM,c
 10022  002AA0  0E00               	movlw	0
 10023  002AA2  6A10               	clrf	?_writeEEPROM+2,c
 10024  002AA4  EC39  F029         	call	_writeEEPROM	;wreg free
 10025                           
 10026                           ;main.c: 1116: writeEEPROM(0x79, 0);
 10027  002AA8  6A0F               	clrf	?_writeEEPROM+1,c
 10028  002AAA  0E79               	movlw	121
 10029  002AAC  6E0E               	movwf	?_writeEEPROM,c
 10030  002AAE  0E00               	movlw	0
 10031  002AB0  6A10               	clrf	?_writeEEPROM+2,c
 10032  002AB2  EC39  F029         	call	_writeEEPROM	;wreg free
 10033                           
 10034                           ;main.c: 1117: writeEEPROM(0x7A, 0);
 10035  002AB6  6A0F               	clrf	?_writeEEPROM+1,c
 10036  002AB8  0E7A               	movlw	122
 10037  002ABA  6E0E               	movwf	?_writeEEPROM,c
 10038  002ABC  0E00               	movlw	0
 10039  002ABE  6A10               	clrf	?_writeEEPROM+2,c
 10040  002AC0  EC39  F029         	call	_writeEEPROM	;wreg free
 10041                           
 10042                           ;main.c: 1119: writeEEPROM(0x7B, 0);
 10043  002AC4  6A0F               	clrf	?_writeEEPROM+1,c
 10044  002AC6  0E7B               	movlw	123
 10045  002AC8  6E0E               	movwf	?_writeEEPROM,c
 10046  002ACA  0E00               	movlw	0
 10047  002ACC  6A10               	clrf	?_writeEEPROM+2,c
 10048  002ACE  EC39  F029         	call	_writeEEPROM	;wreg free
 10049                           
 10050                           ;main.c: 1120: writeEEPROM(0x7C, 0);
 10051  002AD2  6A0F               	clrf	?_writeEEPROM+1,c
 10052  002AD4  0E7C               	movlw	124
 10053  002AD6  6E0E               	movwf	?_writeEEPROM,c
 10054  002AD8  0E00               	movlw	0
 10055  002ADA  6A10               	clrf	?_writeEEPROM+2,c
 10056  002ADC  EC39  F029         	call	_writeEEPROM	;wreg free
 10057                           
 10058                           ;main.c: 1122: writeEEPROM(0x7D, 0);
 10059  002AE0  6A0F               	clrf	?_writeEEPROM+1,c
 10060  002AE2  0E7D               	movlw	125
 10061  002AE4  6E0E               	movwf	?_writeEEPROM,c
 10062  002AE6  0E00               	movlw	0
 10063  002AE8  6A10               	clrf	?_writeEEPROM+2,c
 10064  002AEA  EC39  F029         	call	_writeEEPROM	;wreg free
 10065                           
 10066                           ;main.c: 1123: writeEEPROM(0x7E, 0);
 10067  002AEE  6A0F               	clrf	?_writeEEPROM+1,c
 10068  002AF0  0E7E               	movlw	126
 10069  002AF2  6E0E               	movwf	?_writeEEPROM,c
 10070  002AF4  0E00               	movlw	0
 10071  002AF6  6A10               	clrf	?_writeEEPROM+2,c
 10072  002AF8  EC39  F029         	call	_writeEEPROM	;wreg free
 10073                           
 10074                           ;main.c: 1127: writeEEPROM(0x7F, 0x7f);
 10075  002AFC  6A0F               	clrf	?_writeEEPROM+1,c
 10076  002AFE  0E7F               	movlw	127
 10077  002B00  6E0E               	movwf	?_writeEEPROM,c
 10078  002B02  6E10               	movwf	?_writeEEPROM+2,c
 10079  002B04  EC39  F029         	call	_writeEEPROM	;wreg free
 10080                           
 10081                           ;main.c: 1128: writeEEPROM(0x80, 0xff);
 10082  002B08  6A0F               	clrf	?_writeEEPROM+1,c
 10083  002B0A  0E80               	movlw	128
 10084  002B0C  6E0E               	movwf	?_writeEEPROM,c
 10085  002B0E  0EFF               	movlw	255
 10086  002B10  6810               	setf	?_writeEEPROM+2,c
 10087  002B12  EC39  F029         	call	_writeEEPROM	;wreg free
 10088                           
 10089                           ;main.c: 1130: writeEEPROM(0x81, 0x7f);
 10090  002B16  6A0F               	clrf	?_writeEEPROM+1,c
 10091  002B18  0E81               	movlw	129
 10092  002B1A  6E0E               	movwf	?_writeEEPROM,c
 10093  002B1C  0E7F               	movlw	127
 10094  002B1E  6E10               	movwf	?_writeEEPROM+2,c
 10095  002B20  EC39  F029         	call	_writeEEPROM	;wreg free
 10096                           
 10097                           ;main.c: 1131: writeEEPROM(0x82, 0xff);
 10098  002B24  6A0F               	clrf	?_writeEEPROM+1,c
 10099  002B26  0E82               	movlw	130
 10100  002B28  6E0E               	movwf	?_writeEEPROM,c
 10101  002B2A  0EFF               	movlw	255
 10102  002B2C  6810               	setf	?_writeEEPROM+2,c
 10103  002B2E  EC39  F029         	call	_writeEEPROM	;wreg free
 10104                           
 10105                           ;main.c: 1133: writeEEPROM(0x83, 0x7f);
 10106  002B32  6A0F               	clrf	?_writeEEPROM+1,c
 10107  002B34  0E83               	movlw	131
 10108  002B36  6E0E               	movwf	?_writeEEPROM,c
 10109  002B38  0E7F               	movlw	127
 10110  002B3A  6E10               	movwf	?_writeEEPROM+2,c
 10111  002B3C  EC39  F029         	call	_writeEEPROM	;wreg free
 10112                           
 10113                           ;main.c: 1134: writeEEPROM(0x84, 0xff);
 10114  002B40  6A0F               	clrf	?_writeEEPROM+1,c
 10115  002B42  0E84               	movlw	132
 10116  002B44  6E0E               	movwf	?_writeEEPROM,c
 10117  002B46  0EFF               	movlw	255
 10118  002B48  6810               	setf	?_writeEEPROM+2,c
 10119  002B4A  EC39  F029         	call	_writeEEPROM	;wreg free
 10120                           
 10121                           ;main.c: 1136: writeEEPROM(0x85, 0x7f);
 10122  002B4E  6A0F               	clrf	?_writeEEPROM+1,c
 10123  002B50  0E85               	movlw	133
 10124  002B52  6E0E               	movwf	?_writeEEPROM,c
 10125  002B54  0E7F               	movlw	127
 10126  002B56  6E10               	movwf	?_writeEEPROM+2,c
 10127  002B58  EC39  F029         	call	_writeEEPROM	;wreg free
 10128                           
 10129                           ;main.c: 1137: writeEEPROM(0x86, 0xff);
 10130  002B5C  6A0F               	clrf	?_writeEEPROM+1,c
 10131  002B5E  0E86               	movlw	134
 10132  002B60  6E0E               	movwf	?_writeEEPROM,c
 10133  002B62  0EFF               	movlw	255
 10134  002B64  6810               	setf	?_writeEEPROM+2,c
 10135  002B66  EC39  F029         	call	_writeEEPROM	;wreg free
 10136                           
 10137                           ;main.c: 1139: writeEEPROM(0x87, 0x7f);
 10138  002B6A  6A0F               	clrf	?_writeEEPROM+1,c
 10139  002B6C  0E87               	movlw	135
 10140  002B6E  6E0E               	movwf	?_writeEEPROM,c
 10141  002B70  0E7F               	movlw	127
 10142  002B72  6E10               	movwf	?_writeEEPROM+2,c
 10143  002B74  EC39  F029         	call	_writeEEPROM	;wreg free
 10144                           
 10145                           ;main.c: 1140: writeEEPROM(0x88, 0xff);
 10146  002B78  6A0F               	clrf	?_writeEEPROM+1,c
 10147  002B7A  0E88               	movlw	136
 10148  002B7C  6E0E               	movwf	?_writeEEPROM,c
 10149  002B7E  0EFF               	movlw	255
 10150  002B80  6810               	setf	?_writeEEPROM+2,c
 10151  002B82  EC39  F029         	call	_writeEEPROM	;wreg free
 10152                           
 10153                           ;main.c: 1142: writeEEPROM(0x89, 0x7f);
 10154  002B86  6A0F               	clrf	?_writeEEPROM+1,c
 10155  002B88  0E89               	movlw	137
 10156  002B8A  6E0E               	movwf	?_writeEEPROM,c
 10157  002B8C  0E7F               	movlw	127
 10158  002B8E  6E10               	movwf	?_writeEEPROM+2,c
 10159  002B90  EC39  F029         	call	_writeEEPROM	;wreg free
 10160                           
 10161                           ;main.c: 1143: writeEEPROM(0x8A, 0xff);
 10162  002B94  6A0F               	clrf	?_writeEEPROM+1,c
 10163  002B96  0E8A               	movlw	138
 10164  002B98  6E0E               	movwf	?_writeEEPROM,c
 10165  002B9A  0EFF               	movlw	255
 10166  002B9C  6810               	setf	?_writeEEPROM+2,c
 10167  002B9E  EC39  F029         	call	_writeEEPROM	;wreg free
 10168                           
 10169                           ;main.c: 1147: writeEEPROM(0x8B, 0x80);
 10170  002BA2  6A0F               	clrf	?_writeEEPROM+1,c
 10171  002BA4  0E8B               	movlw	139
 10172  002BA6  6E0E               	movwf	?_writeEEPROM,c
 10173  002BA8  0E80               	movlw	128
 10174  002BAA  6E10               	movwf	?_writeEEPROM+2,c
 10175  002BAC  EC39  F029         	call	_writeEEPROM	;wreg free
 10176                           
 10177                           ;main.c: 1148: writeEEPROM(0x8C, 0x00);
 10178  002BB0  6A0F               	clrf	?_writeEEPROM+1,c
 10179  002BB2  0E8C               	movlw	140
 10180  002BB4  6E0E               	movwf	?_writeEEPROM,c
 10181  002BB6  0E00               	movlw	0
 10182  002BB8  6A10               	clrf	?_writeEEPROM+2,c
 10183  002BBA  EC39  F029         	call	_writeEEPROM	;wreg free
 10184                           
 10185                           ;main.c: 1150: writeEEPROM(0x8D, 0x80);
 10186  002BBE  6A0F               	clrf	?_writeEEPROM+1,c
 10187  002BC0  0E8D               	movlw	141
 10188  002BC2  6E0E               	movwf	?_writeEEPROM,c
 10189  002BC4  0E80               	movlw	128
 10190  002BC6  6E10               	movwf	?_writeEEPROM+2,c
 10191  002BC8  EC39  F029         	call	_writeEEPROM	;wreg free
 10192                           
 10193                           ;main.c: 1151: writeEEPROM(0x8E, 0x00);
 10194  002BCC  6A0F               	clrf	?_writeEEPROM+1,c
 10195  002BCE  0E8E               	movlw	142
 10196  002BD0  6E0E               	movwf	?_writeEEPROM,c
 10197  002BD2  0E00               	movlw	0
 10198  002BD4  6A10               	clrf	?_writeEEPROM+2,c
 10199  002BD6  EC39  F029         	call	_writeEEPROM	;wreg free
 10200                           
 10201                           ;main.c: 1153: writeEEPROM(0x8F, 0x80);
 10202  002BDA  6A0F               	clrf	?_writeEEPROM+1,c
 10203  002BDC  0E8F               	movlw	143
 10204  002BDE  6E0E               	movwf	?_writeEEPROM,c
 10205  002BE0  0E80               	movlw	128
 10206  002BE2  6E10               	movwf	?_writeEEPROM+2,c
 10207  002BE4  EC39  F029         	call	_writeEEPROM	;wreg free
 10208                           
 10209                           ;main.c: 1154: writeEEPROM(0x90, 0x00);
 10210  002BE8  6A0F               	clrf	?_writeEEPROM+1,c
 10211  002BEA  0E90               	movlw	144
 10212  002BEC  6E0E               	movwf	?_writeEEPROM,c
 10213  002BEE  0E00               	movlw	0
 10214  002BF0  6A10               	clrf	?_writeEEPROM+2,c
 10215  002BF2  EC39  F029         	call	_writeEEPROM	;wreg free
 10216                           
 10217                           ;main.c: 1156: writeEEPROM(0x91, 0x80);
 10218  002BF6  6A0F               	clrf	?_writeEEPROM+1,c
 10219  002BF8  0E91               	movlw	145
 10220  002BFA  6E0E               	movwf	?_writeEEPROM,c
 10221  002BFC  0E80               	movlw	128
 10222  002BFE  6E10               	movwf	?_writeEEPROM+2,c
 10223  002C00  EC39  F029         	call	_writeEEPROM	;wreg free
 10224                           
 10225                           ;main.c: 1157: writeEEPROM(0x92, 0x00);
 10226  002C04  6A0F               	clrf	?_writeEEPROM+1,c
 10227  002C06  0E92               	movlw	146
 10228  002C08  6E0E               	movwf	?_writeEEPROM,c
 10229  002C0A  0E00               	movlw	0
 10230  002C0C  6A10               	clrf	?_writeEEPROM+2,c
 10231  002C0E  EC39  F029         	call	_writeEEPROM	;wreg free
 10232                           
 10233                           ;main.c: 1159: writeEEPROM(0x93, 0x80);
 10234  002C12  6A0F               	clrf	?_writeEEPROM+1,c
 10235  002C14  0E93               	movlw	147
 10236  002C16  6E0E               	movwf	?_writeEEPROM,c
 10237  002C18  0E80               	movlw	128
 10238  002C1A  6E10               	movwf	?_writeEEPROM+2,c
 10239  002C1C  EC39  F029         	call	_writeEEPROM	;wreg free
 10240                           
 10241                           ;main.c: 1160: writeEEPROM(0x94, 0x00);
 10242  002C20  6A0F               	clrf	?_writeEEPROM+1,c
 10243  002C22  0E94               	movlw	148
 10244  002C24  6E0E               	movwf	?_writeEEPROM,c
 10245  002C26  0E00               	movlw	0
 10246  002C28  6A10               	clrf	?_writeEEPROM+2,c
 10247  002C2A  EC39  F029         	call	_writeEEPROM	;wreg free
 10248                           
 10249                           ;main.c: 1162: writeEEPROM(0x95, 0x80);
 10250  002C2E  6A0F               	clrf	?_writeEEPROM+1,c
 10251  002C30  0E95               	movlw	149
 10252  002C32  6E0E               	movwf	?_writeEEPROM,c
 10253  002C34  0E80               	movlw	128
 10254  002C36  6E10               	movwf	?_writeEEPROM+2,c
 10255  002C38  EC39  F029         	call	_writeEEPROM	;wreg free
 10256                           
 10257                           ;main.c: 1163: writeEEPROM(0x96, 0x00);
 10258  002C3C  6A0F               	clrf	?_writeEEPROM+1,c
 10259  002C3E  0E96               	movlw	150
 10260  002C40  6E0E               	movwf	?_writeEEPROM,c
 10261  002C42  0E00               	movlw	0
 10262  002C44  6A10               	clrf	?_writeEEPROM+2,c
 10263  002C46  EC39  F029         	call	_writeEEPROM	;wreg free
 10264                           
 10265                           ;main.c: 1167: writeEEPROM(0x97, 2);
 10266  002C4A  6A0F               	clrf	?_writeEEPROM+1,c
 10267  002C4C  0E97               	movlw	151
 10268  002C4E  6E0E               	movwf	?_writeEEPROM,c
 10269  002C50  0E02               	movlw	2
 10270  002C52  6E10               	movwf	?_writeEEPROM+2,c
 10271  002C54  EC39  F029         	call	_writeEEPROM	;wreg free
 10272                           
 10273                           ;main.c: 1168: writeEEPROM(0x98, 2);
 10274  002C58  6A0F               	clrf	?_writeEEPROM+1,c
 10275  002C5A  0E98               	movlw	152
 10276  002C5C  6E0E               	movwf	?_writeEEPROM,c
 10277  002C5E  0E02               	movlw	2
 10278  002C60  6E10               	movwf	?_writeEEPROM+2,c
 10279  002C62  EC39  F029         	call	_writeEEPROM	;wreg free
 10280                           
 10281                           ;main.c: 1169: writeEEPROM(0x99, 2);
 10282  002C66  6A0F               	clrf	?_writeEEPROM+1,c
 10283  002C68  0E99               	movlw	153
 10284  002C6A  6E0E               	movwf	?_writeEEPROM,c
 10285  002C6C  0E02               	movlw	2
 10286  002C6E  6E10               	movwf	?_writeEEPROM+2,c
 10287  002C70  EC39  F029         	call	_writeEEPROM	;wreg free
 10288                           
 10289                           ;main.c: 1170: writeEEPROM(0x9A, 2);
 10290  002C74  6A0F               	clrf	?_writeEEPROM+1,c
 10291  002C76  0E9A               	movlw	154
 10292  002C78  6E0E               	movwf	?_writeEEPROM,c
 10293  002C7A  0E02               	movlw	2
 10294  002C7C  6E10               	movwf	?_writeEEPROM+2,c
 10295  002C7E  EC39  F029         	call	_writeEEPROM	;wreg free
 10296                           
 10297                           ;main.c: 1171: writeEEPROM(0x9B, 2);
 10298  002C82  6A0F               	clrf	?_writeEEPROM+1,c
 10299  002C84  0E9B               	movlw	155
 10300  002C86  6E0E               	movwf	?_writeEEPROM,c
 10301  002C88  0E02               	movlw	2
 10302  002C8A  6E10               	movwf	?_writeEEPROM+2,c
 10303  002C8C  EC39  F029         	call	_writeEEPROM	;wreg free
 10304                           
 10305                           ;main.c: 1172: writeEEPROM(0x9C, 2);
 10306  002C90  6A0F               	clrf	?_writeEEPROM+1,c
 10307  002C92  0E9C               	movlw	156
 10308  002C94  6E0E               	movwf	?_writeEEPROM,c
 10309  002C96  0E02               	movlw	2
 10310  002C98  6E10               	movwf	?_writeEEPROM+2,c
 10311  002C9A  EC39  F029         	call	_writeEEPROM	;wreg free
 10312                           
 10313                           ;main.c: 1176: writeEEPROM(0xF2, 0xc3);
 10314  002C9E  6A0F               	clrf	?_writeEEPROM+1,c
 10315  002CA0  0EF2               	movlw	242
 10316  002CA2  6E0E               	movwf	?_writeEEPROM,c
 10317  002CA4  0EC3               	movlw	195
 10318  002CA6  6E10               	movwf	?_writeEEPROM+2,c
 10319  002CA8  EC39  F029         	call	_writeEEPROM	;wreg free
 10320                           
 10321                           ;main.c: 1177: writeEEPROM(0xF3, 0x50);
 10322  002CAC  6A0F               	clrf	?_writeEEPROM+1,c
 10323  002CAE  0EF3               	movlw	243
 10324  002CB0  6E0E               	movwf	?_writeEEPROM,c
 10325  002CB2  0E50               	movlw	80
 10326  002CB4  6E10               	movwf	?_writeEEPROM+2,c
 10327  002CB6  EC39  F029         	call	_writeEEPROM	;wreg free
 10328                           
 10329                           ;main.c: 1181: writeEEPROM(0x9E, 0);
 10330  002CBA  6A0F               	clrf	?_writeEEPROM+1,c
 10331  002CBC  0E9E               	movlw	158
 10332  002CBE  6E0E               	movwf	?_writeEEPROM,c
 10333  002CC0  0E00               	movlw	0
 10334  002CC2  6A10               	clrf	?_writeEEPROM+2,c
 10335  002CC4  EC39  F029         	call	_writeEEPROM	;wreg free
 10336                           
 10337                           ;main.c: 1182: writeEEPROM(0x9F, 0);
 10338  002CC8  6A0F               	clrf	?_writeEEPROM+1,c
 10339  002CCA  0E9F               	movlw	159
 10340  002CCC  6E0E               	movwf	?_writeEEPROM,c
 10341  002CCE  0E00               	movlw	0
 10342  002CD0  6A10               	clrf	?_writeEEPROM+2,c
 10343  002CD2  EC39  F029         	call	_writeEEPROM	;wreg free
 10344                           
 10345                           ;main.c: 1183: writeEEPROM(0xA0, 0);
 10346  002CD6  6A0F               	clrf	?_writeEEPROM+1,c
 10347  002CD8  0EA0               	movlw	160
 10348  002CDA  6E0E               	movwf	?_writeEEPROM,c
 10349  002CDC  0E00               	movlw	0
 10350  002CDE  6A10               	clrf	?_writeEEPROM+2,c
 10351  002CE0  EC39  F029         	call	_writeEEPROM	;wreg free
 10352                           
 10353                           ;main.c: 1184: writeEEPROM(0xA1, 0);
 10354  002CE4  6A0F               	clrf	?_writeEEPROM+1,c
 10355  002CE6  0EA1               	movlw	161
 10356  002CE8  6E0E               	movwf	?_writeEEPROM,c
 10357  002CEA  0E00               	movlw	0
 10358  002CEC  6A10               	clrf	?_writeEEPROM+2,c
 10359  002CEE  EC39  F029         	call	_writeEEPROM	;wreg free
 10360                           
 10361                           ;main.c: 1185: writeEEPROM(0xA2, 0);
 10362  002CF2  6A0F               	clrf	?_writeEEPROM+1,c
 10363  002CF4  0EA2               	movlw	162
 10364  002CF6  6E0E               	movwf	?_writeEEPROM,c
 10365  002CF8  0E00               	movlw	0
 10366  002CFA  6A10               	clrf	?_writeEEPROM+2,c
 10367  002CFC  EC39  F029         	call	_writeEEPROM	;wreg free
 10368                           
 10369                           ;main.c: 1186: writeEEPROM(0xA3, 0);
 10370  002D00  6A0F               	clrf	?_writeEEPROM+1,c
 10371  002D02  0EA3               	movlw	163
 10372  002D04  6E0E               	movwf	?_writeEEPROM,c
 10373  002D06  0E00               	movlw	0
 10374  002D08  6A10               	clrf	?_writeEEPROM+2,c
 10375  002D0A  EC39  F029         	call	_writeEEPROM	;wreg free
 10376                           
 10377                           ;main.c: 1187: writeEEPROM(0xA4, 0);
 10378  002D0E  6A0F               	clrf	?_writeEEPROM+1,c
 10379  002D10  0EA4               	movlw	164
 10380  002D12  6E0E               	movwf	?_writeEEPROM,c
 10381  002D14  0E00               	movlw	0
 10382  002D16  6A10               	clrf	?_writeEEPROM+2,c
 10383  002D18  EC39  F029         	call	_writeEEPROM	;wreg free
 10384                           
 10385                           ;main.c: 1188: writeEEPROM(0xA5, 0);
 10386  002D1C  6A0F               	clrf	?_writeEEPROM+1,c
 10387  002D1E  0EA5               	movlw	165
 10388  002D20  6E0E               	movwf	?_writeEEPROM,c
 10389  002D22  0E00               	movlw	0
 10390  002D24  6A10               	clrf	?_writeEEPROM+2,c
 10391  002D26  EC39  F029         	call	_writeEEPROM	;wreg free
 10392                           
 10393                           ;main.c: 1189: writeEEPROM(0xA6, 0);
 10394  002D2A  6A0F               	clrf	?_writeEEPROM+1,c
 10395  002D2C  0EA6               	movlw	166
 10396  002D2E  6E0E               	movwf	?_writeEEPROM,c
 10397  002D30  0E00               	movlw	0
 10398  002D32  6A10               	clrf	?_writeEEPROM+2,c
 10399  002D34  EC39  F029         	call	_writeEEPROM	;wreg free
 10400                           
 10401                           ;main.c: 1190: writeEEPROM(0xA7, 0);
 10402  002D38  6A0F               	clrf	?_writeEEPROM+1,c
 10403  002D3A  0EA7               	movlw	167
 10404  002D3C  6E0E               	movwf	?_writeEEPROM,c
 10405  002D3E  0E00               	movlw	0
 10406  002D40  6A10               	clrf	?_writeEEPROM+2,c
 10407  002D42  EC39  F029         	call	_writeEEPROM	;wreg free
 10408                           
 10409                           ;main.c: 1191: writeEEPROM(0xA8, 0);
 10410  002D46  6A0F               	clrf	?_writeEEPROM+1,c
 10411  002D48  0EA8               	movlw	168
 10412  002D4A  6E0E               	movwf	?_writeEEPROM,c
 10413  002D4C  0E00               	movlw	0
 10414  002D4E  6A10               	clrf	?_writeEEPROM+2,c
 10415  002D50  EC39  F029         	call	_writeEEPROM	;wreg free
 10416                           
 10417                           ;main.c: 1192: writeEEPROM(0xA9, 0);
 10418  002D54  6A0F               	clrf	?_writeEEPROM+1,c
 10419  002D56  0EA9               	movlw	169
 10420  002D58  6E0E               	movwf	?_writeEEPROM,c
 10421  002D5A  6A10               	clrf	?_writeEEPROM+2,c
 10422  002D5C  EF39  F029         	goto	_writeEEPROM	;wreg free
 10423  002D60                     __end_of_init_app_eeprom:
 10424                           	opt stack 0
 10425                           tblptru	equ	0xFF8
 10426                           tblptrh	equ	0xFF7
 10427                           tblptrl	equ	0xFF6
 10428                           tablat	equ	0xFF5
 10429                           prodh	equ	0xFF4
 10430                           prodl	equ	0xFF3
 10431                           intcon	equ	0xFF2
 10432                           postinc0	equ	0xFEE
 10433                           wreg	equ	0xFE8
 10434                           indf1	equ	0xFE7
 10435                           postdec1	equ	0xFE5
 10436                           fsr1h	equ	0xFE2
 10437                           fsr1l	equ	0xFE1
 10438                           indf2	equ	0xFDF
 10439                           postinc2	equ	0xFDE
 10440                           postdec2	equ	0xFDD
 10441                           plusw2	equ	0xFDB
 10442                           fsr2h	equ	0xFDA
 10443                           fsr2l	equ	0xFD9
 10444                           status	equ	0xFD8
 10445                           
 10446 ;; *************** function _vscp_setManufacturerId *****************
 10447 ;; Defined at:
 10448 ;;		line 2664 in file "../main.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;  idx             1    wreg     unsigned char 
 10451 ;;  data            1   16[COMRAM] unsigned char 
 10452 ;; Auto vars:     Size  Location     Type
 10453 ;;  idx             1   17[COMRAM] unsigned char 
 10454 ;; Return value:  Size  Location     Type
 10455 ;;		None               void
 10456 ;; Registers used:
 10457 ;;		wreg, status,2, status,0, cstack
 10458 ;; Tracked objects:
 10459 ;;		On entry : E/1
 10460 ;;		On exit  : 0/0
 10461 ;;		Unchanged: 0/0
 10462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10463 ;;      Params:         1       0       0       0       0       0       0
 10464 ;;      Locals:         1       0       0       0       0       0       0
 10465 ;;      Temps:          0       0       0       0       0       0       0
 10466 ;;      Totals:         2       0       0       0       0       0       0
 10467 ;;Total ram usage:        2 bytes
 10468 ;; Hardware stack levels used:    1
 10469 ;; Hardware stack levels required when called:    3
 10470 ;; This function calls:
 10471 ;;		_writeEEPROM
 10472 ;; This function is called by:
 10473 ;;		_vscp_writeStdReg
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           	psect	text39
 10478  0053B2                     __ptext39:
 10479                           	opt stack 0
 10480  0053B2                     _vscp_setManufacturerId:
 10481                           	opt stack 24
 10482                           
 10483                           ;incstack = 0
 10484                           ;incstack = 0
 10485                           ;vscp_setManufacturerId@idx stored from wreg
 10486  0053B2  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10487                           
 10488                           ;main.c: 2665: writeEEPROM(0x09 + idx, data);
 10489  0053B6  0E09               	movlw	9
 10490  0053B8  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10491  0053BA  6E0E               	movwf	?_writeEEPROM,c
 10492  0053BC  6A0F               	clrf	?_writeEEPROM+1,c
 10493  0053BE  0E00               	movlw	0
 10494  0053C0  220F               	addwfc	?_writeEEPROM+1,f,c
 10495  0053C2  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10496  0053C6  EF39  F029         	goto	_writeEEPROM	;wreg free
 10497  0053CA                     __end_of_vscp_setManufacturerId:
 10498                           	opt stack 0
 10499                           tblptru	equ	0xFF8
 10500                           tblptrh	equ	0xFF7
 10501                           tblptrl	equ	0xFF6
 10502                           tablat	equ	0xFF5
 10503                           prodh	equ	0xFF4
 10504                           prodl	equ	0xFF3
 10505                           intcon	equ	0xFF2
 10506                           postinc0	equ	0xFEE
 10507                           wreg	equ	0xFE8
 10508                           indf1	equ	0xFE7
 10509                           postdec1	equ	0xFE5
 10510                           fsr1h	equ	0xFE2
 10511                           fsr1l	equ	0xFE1
 10512                           indf2	equ	0xFDF
 10513                           postinc2	equ	0xFDE
 10514                           postdec2	equ	0xFDD
 10515                           plusw2	equ	0xFDB
 10516                           fsr2h	equ	0xFDA
 10517                           fsr2l	equ	0xFD9
 10518                           status	equ	0xFD8
 10519                           
 10520 ;; *************** function _vscp_setUserID *****************
 10521 ;; Defined at:
 10522 ;;		line 2642 in file "../main.c"
 10523 ;; Parameters:    Size  Location     Type
 10524 ;;  idx             1    wreg     unsigned char 
 10525 ;;  data            1   16[COMRAM] unsigned char 
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;  idx             1   17[COMRAM] unsigned char 
 10528 ;; Return value:  Size  Location     Type
 10529 ;;		None               void
 10530 ;; Registers used:
 10531 ;;		wreg, status,2, status,0, cstack
 10532 ;; Tracked objects:
 10533 ;;		On entry : E/1
 10534 ;;		On exit  : 0/0
 10535 ;;		Unchanged: 0/0
 10536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10537 ;;      Params:         1       0       0       0       0       0       0
 10538 ;;      Locals:         1       0       0       0       0       0       0
 10539 ;;      Temps:          0       0       0       0       0       0       0
 10540 ;;      Totals:         2       0       0       0       0       0       0
 10541 ;;Total ram usage:        2 bytes
 10542 ;; Hardware stack levels used:    1
 10543 ;; Hardware stack levels required when called:    3
 10544 ;; This function calls:
 10545 ;;		_writeEEPROM
 10546 ;; This function is called by:
 10547 ;;		_vscp_writeStdReg
 10548 ;; This function uses a non-reentrant model
 10549 ;;
 10550                           
 10551                           	psect	text40
 10552  0053CA                     __ptext40:
 10553                           	opt stack 0
 10554  0053CA                     _vscp_setUserID:
 10555                           	opt stack 24
 10556                           
 10557                           ;incstack = 0
 10558                           ;incstack = 0
 10559                           ;vscp_setUserID@idx stored from wreg
 10560  0053CA  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10561                           
 10562                           ;main.c: 2643: writeEEPROM(idx + 0x04, data);
 10563  0053CE  0E04               	movlw	4
 10564  0053D0  2412               	addwf	vscp_setUserID@idx,w,c
 10565  0053D2  6E0E               	movwf	?_writeEEPROM,c
 10566  0053D4  6A0F               	clrf	?_writeEEPROM+1,c
 10567  0053D6  0E00               	movlw	0
 10568  0053D8  220F               	addwfc	?_writeEEPROM+1,f,c
 10569  0053DA  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10570  0053DE  EF39  F029         	goto	_writeEEPROM	;wreg free
 10571  0053E2                     __end_of_vscp_setUserID:
 10572                           	opt stack 0
 10573                           tblptru	equ	0xFF8
 10574                           tblptrh	equ	0xFF7
 10575                           tblptrl	equ	0xFF6
 10576                           tablat	equ	0xFF5
 10577                           prodh	equ	0xFF4
 10578                           prodl	equ	0xFF3
 10579                           intcon	equ	0xFF2
 10580                           postinc0	equ	0xFEE
 10581                           wreg	equ	0xFE8
 10582                           indf1	equ	0xFE7
 10583                           postdec1	equ	0xFE5
 10584                           fsr1h	equ	0xFE2
 10585                           fsr1l	equ	0xFE1
 10586                           indf2	equ	0xFDF
 10587                           postinc2	equ	0xFDE
 10588                           postdec2	equ	0xFDD
 10589                           plusw2	equ	0xFDB
 10590                           fsr2h	equ	0xFDA
 10591                           fsr2l	equ	0xFD9
 10592                           status	equ	0xFD8
 10593                           
 10594 ;; *************** function _vscp_setGUID *****************
 10595 ;; Defined at:
 10596 ;;		line 2611 in file "../main.c"
 10597 ;; Parameters:    Size  Location     Type
 10598 ;;  idx             1    wreg     unsigned char 
 10599 ;;  data            1   16[COMRAM] unsigned char 
 10600 ;; Auto vars:     Size  Location     Type
 10601 ;;  idx             1   17[COMRAM] unsigned char 
 10602 ;; Return value:  Size  Location     Type
 10603 ;;		None               void
 10604 ;; Registers used:
 10605 ;;		wreg, status,2, status,0, cstack
 10606 ;; Tracked objects:
 10607 ;;		On entry : E/1
 10608 ;;		On exit  : 0/0
 10609 ;;		Unchanged: 0/0
 10610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10611 ;;      Params:         1       0       0       0       0       0       0
 10612 ;;      Locals:         1       0       0       0       0       0       0
 10613 ;;      Temps:          0       0       0       0       0       0       0
 10614 ;;      Totals:         2       0       0       0       0       0       0
 10615 ;;Total ram usage:        2 bytes
 10616 ;; Hardware stack levels used:    1
 10617 ;; Hardware stack levels required when called:    3
 10618 ;; This function calls:
 10619 ;;		_writeEEPROM
 10620 ;; This function is called by:
 10621 ;;		_vscp_writeStdReg
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           	psect	text41
 10626  005302                     __ptext41:
 10627                           	opt stack 0
 10628  005302                     _vscp_setGUID:
 10629                           	opt stack 24
 10630                           
 10631                           ;incstack = 0
 10632                           ;incstack = 0
 10633                           ;vscp_setGUID@idx stored from wreg
 10634  005302  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10635                           
 10636                           ;main.c: 2612: if ( idx>15 ) return;
 10637  005306  0E0F               	movlw	15
 10638  005308  6412               	cpfsgt	vscp_setGUID@idx,c
 10639  00530A  D001               	goto	l8079
 10640  00530C  D00A               	goto	l551
 10641  00530E                     l8079:
 10642                           
 10643                           ;main.c: 2613: writeEEPROM( 0x11 + idx, data );
 10644  00530E  0E11               	movlw	17
 10645  005310  2412               	addwf	vscp_setGUID@idx,w,c
 10646  005312  6E0E               	movwf	?_writeEEPROM,c
 10647  005314  6A0F               	clrf	?_writeEEPROM+1,c
 10648  005316  0E00               	movlw	0
 10649  005318  220F               	addwfc	?_writeEEPROM+1,f,c
 10650  00531A  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 10651  00531E  EC39  F029         	call	_writeEEPROM	;wreg free
 10652  005322                     l551:
 10653  005322  0012               	return	
 10654  005324                     __end_of_vscp_setGUID:
 10655                           	opt stack 0
 10656                           tblptru	equ	0xFF8
 10657                           tblptrh	equ	0xFF7
 10658                           tblptrl	equ	0xFF6
 10659                           tablat	equ	0xFF5
 10660                           prodh	equ	0xFF4
 10661                           prodl	equ	0xFF3
 10662                           intcon	equ	0xFF2
 10663                           postinc0	equ	0xFEE
 10664                           wreg	equ	0xFE8
 10665                           indf1	equ	0xFE7
 10666                           postdec1	equ	0xFE5
 10667                           fsr1h	equ	0xFE2
 10668                           fsr1l	equ	0xFE1
 10669                           indf2	equ	0xFDF
 10670                           postinc2	equ	0xFDE
 10671                           postdec2	equ	0xFDD
 10672                           plusw2	equ	0xFDB
 10673                           fsr2h	equ	0xFDA
 10674                           fsr2l	equ	0xFD9
 10675                           status	equ	0xFD8
 10676                           
 10677 ;; *************** function _vscp_writeAppReg *****************
 10678 ;; Defined at:
 10679 ;;		line 1902 in file "../main.c"
 10680 ;; Parameters:    Size  Location     Type
 10681 ;;  reg             1    wreg     unsigned char 
 10682 ;;  val             1   34[COMRAM] unsigned char 
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;  reg             1   36[COMRAM] unsigned char 
 10685 ;;  pos             1   35[COMRAM] unsigned char 
 10686 ;;  rv              1   37[COMRAM] unsigned char 
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      unsigned char 
 10689 ;; Registers used:
 10690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10691 ;; Tracked objects:
 10692 ;;		On entry : E/1
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10696 ;;      Params:         1       0       0       0       0       0       0
 10697 ;;      Locals:         3       0       0       0       0       0       0
 10698 ;;      Temps:          0       0       0       0       0       0       0
 10699 ;;      Totals:         4       0       0       0       0       0       0
 10700 ;;Total ram usage:        4 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; Hardware stack levels required when called:    4
 10703 ;; This function calls:
 10704 ;;		_writeEEPROM
 10705 ;;		_readEEPROM
 10706 ;;		_writeCoeffs2Ram
 10707 ;; This function is called by:
 10708 ;;		_vscp_writeRegister
 10709 ;;		_vscp_handleProtocolEvent
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           	psect	text42
 10714  00066E                     __ptext42:
 10715                           	opt stack 0
 10716  00066E                     _vscp_writeAppReg:
 10717                           	opt stack 23
 10718                           
 10719                           ;incstack = 0
 10720                           ;incstack = 0
 10721                           ;vscp_writeAppReg@reg stored from wreg
 10722  00066E  CFE8 F025          	movff	wreg,vscp_writeAppReg@reg
 10723                           
 10724                           ;main.c: 1903: uint8_t rv;
 10725                           ;main.c: 1910: rv = ~val;
 10726  000672  1C23               	comf	vscp_writeAppReg@val,w,c
 10727  000674  6E26               	movwf	vscp_writeAppReg@rv,c
 10728                           
 10729                           ;main.c: 1912: if (0 == vscp_page_select) {
 10730  000676  5047               	movf	_vscp_page_select+1,w,c
 10731  000678  1046               	iorwf	_vscp_page_select,w,c
 10732  00067A  E102 EF37  F008    	bz	l10971
 10733  000680  EF71  F009         	goto	l10973
 10734  000684                     l10781:
 10735                           
 10736                           ;main.c: 1918: writeEEPROM(0x41, val);
 10737  000684  6A0F               	clrf	?_writeEEPROM+1,c
 10738  000686  0E41               	movlw	65
 10739  000688  6E0E               	movwf	?_writeEEPROM,c
 10740  00068A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10741  00068E  EC39  F029         	call	_writeEEPROM	;wreg free
 10742                           
 10743                           ;main.c: 1919: rv = readEEPROM(0x41);
 10744  000692  6A17               	clrf	?_readEEPROM+1,c
 10745  000694  0E41               	movlw	65
 10746  000696  6E16               	movwf	?_readEEPROM,c
 10747  000698  EC27  F02A         	call	_readEEPROM	;wreg free
 10748  00069C  EFA9  F009         	goto	L20
 10749  0006A0                     l10783:
 10750                           
 10751                           ;main.c: 1924: writeEEPROM(0x42, val);
 10752  0006A0  6A0F               	clrf	?_writeEEPROM+1,c
 10753  0006A2  0E42               	movlw	66
 10754  0006A4  6E0E               	movwf	?_writeEEPROM,c
 10755  0006A6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10756  0006AA  EC39  F029         	call	_writeEEPROM	;wreg free
 10757                           
 10758                           ;main.c: 1925: rv = readEEPROM(0x42);
 10759  0006AE  6A17               	clrf	?_readEEPROM+1,c
 10760  0006B0  0E42               	movlw	66
 10761  0006B2  6E16               	movwf	?_readEEPROM,c
 10762  0006B4  EC27  F02A         	call	_readEEPROM	;wreg free
 10763  0006B8  EFA9  F009         	goto	L20
 10764  0006BC                     l10785:
 10765                           
 10766                           ;main.c: 1934: writeEEPROM(0x43, val);
 10767  0006BC  6A0F               	clrf	?_writeEEPROM+1,c
 10768  0006BE  0E43               	movlw	67
 10769  0006C0  6E0E               	movwf	?_writeEEPROM,c
 10770  0006C2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10771  0006C6  EC39  F029         	call	_writeEEPROM	;wreg free
 10772                           
 10773                           ;main.c: 1935: rv = readEEPROM(0x43);
 10774  0006CA  6A17               	clrf	?_readEEPROM+1,c
 10775  0006CC  0E43               	movlw	67
 10776  0006CE  6E16               	movwf	?_readEEPROM,c
 10777  0006D0  EC27  F02A         	call	_readEEPROM	;wreg free
 10778  0006D4  EFA9  F009         	goto	L20
 10779  0006D8                     l10787:
 10780                           
 10781                           ;main.c: 1940: writeEEPROM(0x44, val);
 10782  0006D8  6A0F               	clrf	?_writeEEPROM+1,c
 10783  0006DA  0E44               	movlw	68
 10784  0006DC  6E0E               	movwf	?_writeEEPROM,c
 10785  0006DE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10786  0006E2  EC39  F029         	call	_writeEEPROM	;wreg free
 10787                           
 10788                           ;main.c: 1941: rv = readEEPROM(0x44);
 10789  0006E6  6A17               	clrf	?_readEEPROM+1,c
 10790  0006E8  0E44               	movlw	68
 10791  0006EA  6E16               	movwf	?_readEEPROM,c
 10792  0006EC  EC27  F02A         	call	_readEEPROM	;wreg free
 10793  0006F0  EFA9  F009         	goto	L20
 10794  0006F4                     l10789:
 10795                           
 10796                           ;main.c: 1946: writeEEPROM(0x45, val);
 10797  0006F4  6A0F               	clrf	?_writeEEPROM+1,c
 10798  0006F6  0E45               	movlw	69
 10799  0006F8  6E0E               	movwf	?_writeEEPROM,c
 10800  0006FA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10801  0006FE  EC39  F029         	call	_writeEEPROM	;wreg free
 10802                           
 10803                           ;main.c: 1947: rv = readEEPROM(0x45);
 10804  000702  6A17               	clrf	?_readEEPROM+1,c
 10805  000704  0E45               	movlw	69
 10806  000706  6E16               	movwf	?_readEEPROM,c
 10807  000708  EC27  F02A         	call	_readEEPROM	;wreg free
 10808  00070C  EFA9  F009         	goto	L20
 10809  000710                     l10791:
 10810                           
 10811                           ;main.c: 1952: writeEEPROM(0x46, val);
 10812  000710  6A0F               	clrf	?_writeEEPROM+1,c
 10813  000712  0E46               	movlw	70
 10814  000714  6E0E               	movwf	?_writeEEPROM,c
 10815  000716  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10816  00071A  EC39  F029         	call	_writeEEPROM	;wreg free
 10817                           
 10818                           ;main.c: 1953: rv = readEEPROM(0x46);
 10819  00071E  6A17               	clrf	?_readEEPROM+1,c
 10820  000720  0E46               	movlw	70
 10821  000722  6E16               	movwf	?_readEEPROM,c
 10822  000724  EC27  F02A         	call	_readEEPROM	;wreg free
 10823  000728  EFA9  F009         	goto	L20
 10824  00072C                     l10793:
 10825                           
 10826                           ;main.c: 1958: writeEEPROM(0x47, val);
 10827  00072C  6A0F               	clrf	?_writeEEPROM+1,c
 10828  00072E  0E47               	movlw	71
 10829  000730  6E0E               	movwf	?_writeEEPROM,c
 10830  000732  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10831  000736  EC39  F029         	call	_writeEEPROM	;wreg free
 10832                           
 10833                           ;main.c: 1959: rv = readEEPROM(0x47);
 10834  00073A  6A17               	clrf	?_readEEPROM+1,c
 10835  00073C  0E47               	movlw	71
 10836  00073E  6E16               	movwf	?_readEEPROM,c
 10837  000740  EC27  F02A         	call	_readEEPROM	;wreg free
 10838  000744  EFA9  F009         	goto	L20
 10839  000748                     l10795:
 10840                           
 10841                           ;main.c: 1964: writeEEPROM(0x48, val);
 10842  000748  6A0F               	clrf	?_writeEEPROM+1,c
 10843  00074A  0E48               	movlw	72
 10844  00074C  6E0E               	movwf	?_writeEEPROM,c
 10845  00074E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10846  000752  EC39  F029         	call	_writeEEPROM	;wreg free
 10847                           
 10848                           ;main.c: 1965: rv = readEEPROM(0x48);
 10849  000756  6A17               	clrf	?_readEEPROM+1,c
 10850  000758  0E48               	movlw	72
 10851  00075A  6E16               	movwf	?_readEEPROM,c
 10852  00075C  EC27  F02A         	call	_readEEPROM	;wreg free
 10853  000760  EFA9  F009         	goto	L20
 10854  000764                     l10797:
 10855                           
 10856                           ;main.c: 1974: writeEEPROM(0x49, val);
 10857  000764  6A0F               	clrf	?_writeEEPROM+1,c
 10858  000766  0E49               	movlw	73
 10859  000768  6E0E               	movwf	?_writeEEPROM,c
 10860  00076A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10861  00076E  EC39  F029         	call	_writeEEPROM	;wreg free
 10862                           
 10863                           ;main.c: 1975: rv = readEEPROM(0x49);
 10864  000772  6A17               	clrf	?_readEEPROM+1,c
 10865  000774  0E49               	movlw	73
 10866  000776  6E16               	movwf	?_readEEPROM,c
 10867  000778  EC27  F02A         	call	_readEEPROM	;wreg free
 10868  00077C  EFA9  F009         	goto	L20
 10869  000780                     l10799:
 10870                           
 10871                           ;main.c: 1980: writeEEPROM(0x4A, val);
 10872  000780  6A0F               	clrf	?_writeEEPROM+1,c
 10873  000782  0E4A               	movlw	74
 10874  000784  6E0E               	movwf	?_writeEEPROM,c
 10875  000786  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10876  00078A  EC39  F029         	call	_writeEEPROM	;wreg free
 10877                           
 10878                           ;main.c: 1981: rv = readEEPROM(0x4A);
 10879  00078E  6A17               	clrf	?_readEEPROM+1,c
 10880  000790  0E4A               	movlw	74
 10881  000792  6E16               	movwf	?_readEEPROM,c
 10882  000794  EC27  F02A         	call	_readEEPROM	;wreg free
 10883  000798  EFA9  F009         	goto	L20
 10884  00079C                     l10801:
 10885                           
 10886                           ;main.c: 1986: writeEEPROM(0x4B, val);
 10887  00079C  6A0F               	clrf	?_writeEEPROM+1,c
 10888  00079E  0E4B               	movlw	75
 10889  0007A0  6E0E               	movwf	?_writeEEPROM,c
 10890  0007A2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10891  0007A6  EC39  F029         	call	_writeEEPROM	;wreg free
 10892                           
 10893                           ;main.c: 1987: rv = readEEPROM(0x4B);
 10894  0007AA  6A17               	clrf	?_readEEPROM+1,c
 10895  0007AC  0E4B               	movlw	75
 10896  0007AE  6E16               	movwf	?_readEEPROM,c
 10897  0007B0  EC27  F02A         	call	_readEEPROM	;wreg free
 10898  0007B4  EFA9  F009         	goto	L20
 10899  0007B8                     l10803:
 10900                           
 10901                           ;main.c: 1992: writeEEPROM(0x4C, val);
 10902  0007B8  6A0F               	clrf	?_writeEEPROM+1,c
 10903  0007BA  0E4C               	movlw	76
 10904  0007BC  6E0E               	movwf	?_writeEEPROM,c
 10905  0007BE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10906  0007C2  EC39  F029         	call	_writeEEPROM	;wreg free
 10907                           
 10908                           ;main.c: 1993: rv = readEEPROM(0x4C);
 10909  0007C6  6A17               	clrf	?_readEEPROM+1,c
 10910  0007C8  0E4C               	movlw	76
 10911  0007CA  6E16               	movwf	?_readEEPROM,c
 10912  0007CC  EC27  F02A         	call	_readEEPROM	;wreg free
 10913  0007D0  EFA9  F009         	goto	L20
 10914  0007D4                     l10805:
 10915                           
 10916                           ;main.c: 1998: writeEEPROM(0x4D, val);
 10917  0007D4  6A0F               	clrf	?_writeEEPROM+1,c
 10918  0007D6  0E4D               	movlw	77
 10919  0007D8  6E0E               	movwf	?_writeEEPROM,c
 10920  0007DA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10921  0007DE  EC39  F029         	call	_writeEEPROM	;wreg free
 10922                           
 10923                           ;main.c: 1999: rv = readEEPROM(0x4D);
 10924  0007E2  6A17               	clrf	?_readEEPROM+1,c
 10925  0007E4  0E4D               	movlw	77
 10926  0007E6  6E16               	movwf	?_readEEPROM,c
 10927  0007E8  EC27  F02A         	call	_readEEPROM	;wreg free
 10928  0007EC  EFA9  F009         	goto	L20
 10929  0007F0                     l10807:
 10930                           
 10931                           ;main.c: 2004: writeEEPROM(0x4E, val);
 10932  0007F0  6A0F               	clrf	?_writeEEPROM+1,c
 10933  0007F2  0E4E               	movlw	78
 10934  0007F4  6E0E               	movwf	?_writeEEPROM,c
 10935  0007F6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10936  0007FA  EC39  F029         	call	_writeEEPROM	;wreg free
 10937                           
 10938                           ;main.c: 2005: rv = readEEPROM(0x4E);
 10939  0007FE  6A17               	clrf	?_readEEPROM+1,c
 10940  000800  0E4E               	movlw	78
 10941  000802  6E16               	movwf	?_readEEPROM,c
 10942  000804  EC27  F02A         	call	_readEEPROM	;wreg free
 10943  000808  EFA9  F009         	goto	L20
 10944  00080C                     l10809:
 10945                           
 10946                           ;main.c: 2014: writeEEPROM(0x4F, val);
 10947  00080C  6A0F               	clrf	?_writeEEPROM+1,c
 10948  00080E  0E4F               	movlw	79
 10949  000810  6E0E               	movwf	?_writeEEPROM,c
 10950  000812  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10951  000816  EC39  F029         	call	_writeEEPROM	;wreg free
 10952                           
 10953                           ;main.c: 2015: rv = readEEPROM(0x4F);
 10954  00081A  6A17               	clrf	?_readEEPROM+1,c
 10955  00081C  0E4F               	movlw	79
 10956  00081E  6E16               	movwf	?_readEEPROM,c
 10957  000820  EC27  F02A         	call	_readEEPROM	;wreg free
 10958  000824  EFA9  F009         	goto	L20
 10959  000828                     l10811:
 10960                           
 10961                           ;main.c: 2020: writeEEPROM(0x50, val);
 10962  000828  6A0F               	clrf	?_writeEEPROM+1,c
 10963  00082A  0E50               	movlw	80
 10964  00082C  6E0E               	movwf	?_writeEEPROM,c
 10965  00082E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10966  000832  EC39  F029         	call	_writeEEPROM	;wreg free
 10967                           
 10968                           ;main.c: 2021: rv = readEEPROM(0x50);
 10969  000836  6A17               	clrf	?_readEEPROM+1,c
 10970  000838  0E50               	movlw	80
 10971  00083A  6E16               	movwf	?_readEEPROM,c
 10972  00083C  EC27  F02A         	call	_readEEPROM	;wreg free
 10973  000840  EFA9  F009         	goto	L20
 10974  000844                     l10813:
 10975                           
 10976                           ;main.c: 2026: writeEEPROM(0x51, val);
 10977  000844  6A0F               	clrf	?_writeEEPROM+1,c
 10978  000846  0E51               	movlw	81
 10979  000848  6E0E               	movwf	?_writeEEPROM,c
 10980  00084A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10981  00084E  EC39  F029         	call	_writeEEPROM	;wreg free
 10982                           
 10983                           ;main.c: 2027: rv = readEEPROM(0x51);
 10984  000852  6A17               	clrf	?_readEEPROM+1,c
 10985  000854  0E51               	movlw	81
 10986  000856  6E16               	movwf	?_readEEPROM,c
 10987  000858  EC27  F02A         	call	_readEEPROM	;wreg free
 10988  00085C  EFA9  F009         	goto	L20
 10989  000860                     l10815:
 10990                           
 10991                           ;main.c: 2032: writeEEPROM(0x52, val);
 10992  000860  6A0F               	clrf	?_writeEEPROM+1,c
 10993  000862  0E52               	movlw	82
 10994  000864  6E0E               	movwf	?_writeEEPROM,c
 10995  000866  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10996  00086A  EC39  F029         	call	_writeEEPROM	;wreg free
 10997                           
 10998                           ;main.c: 2033: rv = readEEPROM(0x52);
 10999  00086E  6A17               	clrf	?_readEEPROM+1,c
 11000  000870  0E52               	movlw	82
 11001  000872  6E16               	movwf	?_readEEPROM,c
 11002  000874  EC27  F02A         	call	_readEEPROM	;wreg free
 11003  000878  EFA9  F009         	goto	L20
 11004  00087C                     l10817:
 11005                           
 11006                           ;main.c: 2038: writeEEPROM(0x53, val);
 11007  00087C  6A0F               	clrf	?_writeEEPROM+1,c
 11008  00087E  0E53               	movlw	83
 11009  000880  6E0E               	movwf	?_writeEEPROM,c
 11010  000882  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11011  000886  EC39  F029         	call	_writeEEPROM	;wreg free
 11012                           
 11013                           ;main.c: 2039: rv = readEEPROM(0x53);
 11014  00088A  6A17               	clrf	?_readEEPROM+1,c
 11015  00088C  0E53               	movlw	83
 11016  00088E  6E16               	movwf	?_readEEPROM,c
 11017  000890  EC27  F02A         	call	_readEEPROM	;wreg free
 11018  000894  EFA9  F009         	goto	L20
 11019  000898                     l10819:
 11020                           
 11021                           ;main.c: 2044: writeEEPROM(0x54, val);
 11022  000898  6A0F               	clrf	?_writeEEPROM+1,c
 11023  00089A  0E54               	movlw	84
 11024  00089C  6E0E               	movwf	?_writeEEPROM,c
 11025  00089E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11026  0008A2  EC39  F029         	call	_writeEEPROM	;wreg free
 11027                           
 11028                           ;main.c: 2045: rv = readEEPROM(0x54);
 11029  0008A6  6A17               	clrf	?_readEEPROM+1,c
 11030  0008A8  0E54               	movlw	84
 11031  0008AA  6E16               	movwf	?_readEEPROM,c
 11032  0008AC  EC27  F02A         	call	_readEEPROM	;wreg free
 11033  0008B0  EFA9  F009         	goto	L20
 11034  0008B4                     l10821:
 11035                           
 11036                           ;main.c: 2050: writeEEPROM(0x55, val);
 11037  0008B4  6A0F               	clrf	?_writeEEPROM+1,c
 11038  0008B6  0E55               	movlw	85
 11039  0008B8  6E0E               	movwf	?_writeEEPROM,c
 11040  0008BA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11041  0008BE  EC39  F029         	call	_writeEEPROM	;wreg free
 11042                           
 11043                           ;main.c: 2051: rv = readEEPROM(0x55);
 11044  0008C2  6A17               	clrf	?_readEEPROM+1,c
 11045  0008C4  0E55               	movlw	85
 11046  0008C6  6E16               	movwf	?_readEEPROM,c
 11047  0008C8  EC27  F02A         	call	_readEEPROM	;wreg free
 11048  0008CC  EFA9  F009         	goto	L20
 11049  0008D0                     l10823:
 11050                           
 11051                           ;main.c: 2056: writeEEPROM(0x56, val);
 11052  0008D0  6A0F               	clrf	?_writeEEPROM+1,c
 11053  0008D2  0E56               	movlw	86
 11054  0008D4  6E0E               	movwf	?_writeEEPROM,c
 11055  0008D6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11056  0008DA  EC39  F029         	call	_writeEEPROM	;wreg free
 11057                           
 11058                           ;main.c: 2057: rv = readEEPROM(0x56);
 11059  0008DE  6A17               	clrf	?_readEEPROM+1,c
 11060  0008E0  0E56               	movlw	86
 11061  0008E2  6E16               	movwf	?_readEEPROM,c
 11062  0008E4  EC27  F02A         	call	_readEEPROM	;wreg free
 11063  0008E8  EFA9  F009         	goto	L20
 11064  0008EC                     l10825:
 11065                           
 11066                           ;main.c: 2062: writeEEPROM(0x57, val);
 11067  0008EC  6A0F               	clrf	?_writeEEPROM+1,c
 11068  0008EE  0E57               	movlw	87
 11069  0008F0  6E0E               	movwf	?_writeEEPROM,c
 11070  0008F2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11071  0008F6  EC39  F029         	call	_writeEEPROM	;wreg free
 11072                           
 11073                           ;main.c: 2063: rv = readEEPROM(0x57);
 11074  0008FA  6A17               	clrf	?_readEEPROM+1,c
 11075  0008FC  0E57               	movlw	87
 11076  0008FE  6E16               	movwf	?_readEEPROM,c
 11077  000900  EC27  F02A         	call	_readEEPROM	;wreg free
 11078  000904  EFA9  F009         	goto	L20
 11079  000908                     l10827:
 11080                           
 11081                           ;main.c: 2068: writeEEPROM(0x58, val);
 11082  000908  6A0F               	clrf	?_writeEEPROM+1,c
 11083  00090A  0E58               	movlw	88
 11084  00090C  6E0E               	movwf	?_writeEEPROM,c
 11085  00090E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11086  000912  EC39  F029         	call	_writeEEPROM	;wreg free
 11087                           
 11088                           ;main.c: 2069: rv = readEEPROM(0x58);
 11089  000916  6A17               	clrf	?_readEEPROM+1,c
 11090  000918  0E58               	movlw	88
 11091  00091A  6E16               	movwf	?_readEEPROM,c
 11092  00091C  EC27  F02A         	call	_readEEPROM	;wreg free
 11093  000920  EFA9  F009         	goto	L20
 11094  000924                     l10829:
 11095                           
 11096                           ;main.c: 2074: writeEEPROM(0x59, val);
 11097  000924  6A0F               	clrf	?_writeEEPROM+1,c
 11098  000926  0E59               	movlw	89
 11099  000928  6E0E               	movwf	?_writeEEPROM,c
 11100  00092A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11101  00092E  EC39  F029         	call	_writeEEPROM	;wreg free
 11102                           
 11103                           ;main.c: 2075: rv = readEEPROM(0x59);
 11104  000932  6A17               	clrf	?_readEEPROM+1,c
 11105  000934  0E59               	movlw	89
 11106  000936  6E16               	movwf	?_readEEPROM,c
 11107  000938  EC27  F02A         	call	_readEEPROM	;wreg free
 11108  00093C  EFA9  F009         	goto	L20
 11109  000940                     l10831:
 11110                           
 11111                           ;main.c: 2080: writeEEPROM(0x5A, val);
 11112  000940  6A0F               	clrf	?_writeEEPROM+1,c
 11113  000942  0E5A               	movlw	90
 11114  000944  6E0E               	movwf	?_writeEEPROM,c
 11115  000946  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11116  00094A  EC39  F029         	call	_writeEEPROM	;wreg free
 11117                           
 11118                           ;main.c: 2081: rv = readEEPROM(0x5A);
 11119  00094E  6A17               	clrf	?_readEEPROM+1,c
 11120  000950  0E5A               	movlw	90
 11121  000952  6E16               	movwf	?_readEEPROM,c
 11122  000954  EC27  F02A         	call	_readEEPROM	;wreg free
 11123  000958  EFA9  F009         	goto	L20
 11124  00095C                     l10833:
 11125                           
 11126                           ;main.c: 2090: writeEEPROM(0x5B, val);
 11127  00095C  6A0F               	clrf	?_writeEEPROM+1,c
 11128  00095E  0E5B               	movlw	91
 11129  000960  6E0E               	movwf	?_writeEEPROM,c
 11130  000962  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11131  000966  EC39  F029         	call	_writeEEPROM	;wreg free
 11132                           
 11133                           ;main.c: 2091: rv = readEEPROM(0x5B);
 11134  00096A  6A17               	clrf	?_readEEPROM+1,c
 11135  00096C  0E5B               	movlw	91
 11136  00096E  6E16               	movwf	?_readEEPROM,c
 11137  000970  EC27  F02A         	call	_readEEPROM	;wreg free
 11138  000974  EFA9  F009         	goto	L20
 11139  000978                     l10835:
 11140                           
 11141                           ;main.c: 2096: writeEEPROM(0x5C, val);
 11142  000978  6A0F               	clrf	?_writeEEPROM+1,c
 11143  00097A  0E5C               	movlw	92
 11144  00097C  6E0E               	movwf	?_writeEEPROM,c
 11145  00097E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11146  000982  EC39  F029         	call	_writeEEPROM	;wreg free
 11147                           
 11148                           ;main.c: 2097: rv = readEEPROM(0x5C);
 11149  000986  6A17               	clrf	?_readEEPROM+1,c
 11150  000988  0E5C               	movlw	92
 11151  00098A  6E16               	movwf	?_readEEPROM,c
 11152  00098C  EC27  F02A         	call	_readEEPROM	;wreg free
 11153  000990  EFA9  F009         	goto	L20
 11154  000994                     l10837:
 11155                           
 11156                           ;main.c: 2102: writeEEPROM(0x5D, val);
 11157  000994  6A0F               	clrf	?_writeEEPROM+1,c
 11158  000996  0E5D               	movlw	93
 11159  000998  6E0E               	movwf	?_writeEEPROM,c
 11160  00099A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11161  00099E  EC39  F029         	call	_writeEEPROM	;wreg free
 11162                           
 11163                           ;main.c: 2103: rv = readEEPROM(0x5D);
 11164  0009A2  6A17               	clrf	?_readEEPROM+1,c
 11165  0009A4  0E5D               	movlw	93
 11166  0009A6  6E16               	movwf	?_readEEPROM,c
 11167  0009A8  EC27  F02A         	call	_readEEPROM	;wreg free
 11168  0009AC  EFA9  F009         	goto	L20
 11169  0009B0                     l10839:
 11170                           
 11171                           ;main.c: 2108: writeEEPROM(0x5E, val);
 11172  0009B0  6A0F               	clrf	?_writeEEPROM+1,c
 11173  0009B2  0E5E               	movlw	94
 11174  0009B4  6E0E               	movwf	?_writeEEPROM,c
 11175  0009B6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11176  0009BA  EC39  F029         	call	_writeEEPROM	;wreg free
 11177                           
 11178                           ;main.c: 2109: rv = readEEPROM(0x5E);
 11179  0009BE  6A17               	clrf	?_readEEPROM+1,c
 11180  0009C0  0E5E               	movlw	94
 11181  0009C2  6E16               	movwf	?_readEEPROM,c
 11182  0009C4  EC27  F02A         	call	_readEEPROM	;wreg free
 11183  0009C8  EFA9  F009         	goto	L20
 11184  0009CC                     l10841:
 11185                           
 11186                           ;main.c: 2114: writeEEPROM(0x5F, val);
 11187  0009CC  6A0F               	clrf	?_writeEEPROM+1,c
 11188  0009CE  0E5F               	movlw	95
 11189  0009D0  6E0E               	movwf	?_writeEEPROM,c
 11190  0009D2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11191  0009D6  EC39  F029         	call	_writeEEPROM	;wreg free
 11192                           
 11193                           ;main.c: 2115: rv = readEEPROM(0x5F);
 11194  0009DA  6A17               	clrf	?_readEEPROM+1,c
 11195  0009DC  0E5F               	movlw	95
 11196  0009DE  6E16               	movwf	?_readEEPROM,c
 11197  0009E0  EC27  F02A         	call	_readEEPROM	;wreg free
 11198  0009E4  EFA9  F009         	goto	L20
 11199  0009E8                     l10843:
 11200                           
 11201                           ;main.c: 2120: writeEEPROM(0x60, val);
 11202  0009E8  6A0F               	clrf	?_writeEEPROM+1,c
 11203  0009EA  0E60               	movlw	96
 11204  0009EC  6E0E               	movwf	?_writeEEPROM,c
 11205  0009EE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11206  0009F2  EC39  F029         	call	_writeEEPROM	;wreg free
 11207                           
 11208                           ;main.c: 2121: rv = readEEPROM(0x60);
 11209  0009F6  6A17               	clrf	?_readEEPROM+1,c
 11210  0009F8  0E60               	movlw	96
 11211  0009FA  6E16               	movwf	?_readEEPROM,c
 11212  0009FC  EC27  F02A         	call	_readEEPROM	;wreg free
 11213  000A00  EFA9  F009         	goto	L20
 11214  000A04                     l10845:
 11215                           
 11216                           ;main.c: 2126: writeEEPROM(0x61, val);
 11217  000A04  6A0F               	clrf	?_writeEEPROM+1,c
 11218  000A06  0E61               	movlw	97
 11219  000A08  6E0E               	movwf	?_writeEEPROM,c
 11220  000A0A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11221  000A0E  EC39  F029         	call	_writeEEPROM	;wreg free
 11222                           
 11223                           ;main.c: 2127: rv = readEEPROM(0x61);
 11224  000A12  6A17               	clrf	?_readEEPROM+1,c
 11225  000A14  0E61               	movlw	97
 11226  000A16  6E16               	movwf	?_readEEPROM,c
 11227  000A18  EC27  F02A         	call	_readEEPROM	;wreg free
 11228  000A1C  EFA9  F009         	goto	L20
 11229  000A20                     l10847:
 11230                           
 11231                           ;main.c: 2132: writeEEPROM(0x62, val);
 11232  000A20  6A0F               	clrf	?_writeEEPROM+1,c
 11233  000A22  0E62               	movlw	98
 11234  000A24  6E0E               	movwf	?_writeEEPROM,c
 11235  000A26  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11236  000A2A  EC39  F029         	call	_writeEEPROM	;wreg free
 11237                           
 11238                           ;main.c: 2133: rv = readEEPROM(0x62);
 11239  000A2E  6A17               	clrf	?_readEEPROM+1,c
 11240  000A30  0E62               	movlw	98
 11241  000A32  6E16               	movwf	?_readEEPROM,c
 11242  000A34  EC27  F02A         	call	_readEEPROM	;wreg free
 11243  000A38  EFA9  F009         	goto	L20
 11244  000A3C                     l10849:
 11245                           
 11246                           ;main.c: 2138: writeEEPROM(0x63, val);
 11247  000A3C  6A0F               	clrf	?_writeEEPROM+1,c
 11248  000A3E  0E63               	movlw	99
 11249  000A40  6E0E               	movwf	?_writeEEPROM,c
 11250  000A42  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11251  000A46  EC39  F029         	call	_writeEEPROM	;wreg free
 11252                           
 11253                           ;main.c: 2139: rv = readEEPROM(0x63);
 11254  000A4A  6A17               	clrf	?_readEEPROM+1,c
 11255  000A4C  0E63               	movlw	99
 11256  000A4E  6E16               	movwf	?_readEEPROM,c
 11257  000A50  EC27  F02A         	call	_readEEPROM	;wreg free
 11258  000A54  EFA9  F009         	goto	L20
 11259  000A58                     l10851:
 11260                           
 11261                           ;main.c: 2144: writeEEPROM(0x64, val);
 11262  000A58  6A0F               	clrf	?_writeEEPROM+1,c
 11263  000A5A  0E64               	movlw	100
 11264  000A5C  6E0E               	movwf	?_writeEEPROM,c
 11265  000A5E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11266  000A62  EC39  F029         	call	_writeEEPROM	;wreg free
 11267                           
 11268                           ;main.c: 2145: rv = readEEPROM(0x64);
 11269  000A66  6A17               	clrf	?_readEEPROM+1,c
 11270  000A68  0E64               	movlw	100
 11271  000A6A  6E16               	movwf	?_readEEPROM,c
 11272  000A6C  EC27  F02A         	call	_readEEPROM	;wreg free
 11273  000A70  EFA9  F009         	goto	L20
 11274  000A74                     l10853:
 11275                           
 11276                           ;main.c: 2150: writeEEPROM(0x65, val);
 11277  000A74  6A0F               	clrf	?_writeEEPROM+1,c
 11278  000A76  0E65               	movlw	101
 11279  000A78  6E0E               	movwf	?_writeEEPROM,c
 11280  000A7A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11281  000A7E  EC39  F029         	call	_writeEEPROM	;wreg free
 11282                           
 11283                           ;main.c: 2151: rv = readEEPROM(0x65);
 11284  000A82  6A17               	clrf	?_readEEPROM+1,c
 11285  000A84  0E65               	movlw	101
 11286  000A86  6E16               	movwf	?_readEEPROM,c
 11287  000A88  EC27  F02A         	call	_readEEPROM	;wreg free
 11288  000A8C  EFA9  F009         	goto	L20
 11289  000A90                     l10855:
 11290                           
 11291                           ;main.c: 2156: writeEEPROM(0x66, val);
 11292  000A90  6A0F               	clrf	?_writeEEPROM+1,c
 11293  000A92  0E66               	movlw	102
 11294  000A94  6E0E               	movwf	?_writeEEPROM,c
 11295  000A96  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11296  000A9A  EC39  F029         	call	_writeEEPROM	;wreg free
 11297                           
 11298                           ;main.c: 2157: rv = readEEPROM(0x66);
 11299  000A9E  6A17               	clrf	?_readEEPROM+1,c
 11300  000AA0  0E66               	movlw	102
 11301  000AA2  6E16               	movwf	?_readEEPROM,c
 11302  000AA4  EC27  F02A         	call	_readEEPROM	;wreg free
 11303  000AA8  EFA9  F009         	goto	L20
 11304  000AAC                     l10857:
 11305                           
 11306                           ;main.c: 2166: writeEEPROM(0x67, val);
 11307  000AAC  6A0F               	clrf	?_writeEEPROM+1,c
 11308  000AAE  0E67               	movlw	103
 11309  000AB0  6E0E               	movwf	?_writeEEPROM,c
 11310  000AB2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11311  000AB6  EC39  F029         	call	_writeEEPROM	;wreg free
 11312                           
 11313                           ;main.c: 2167: rv = readEEPROM(0x67);
 11314  000ABA  6A17               	clrf	?_readEEPROM+1,c
 11315  000ABC  0E67               	movlw	103
 11316  000ABE  6E16               	movwf	?_readEEPROM,c
 11317  000AC0  EC27  F02A         	call	_readEEPROM	;wreg free
 11318  000AC4  EFA9  F009         	goto	L20
 11319  000AC8                     l10859:
 11320                           
 11321                           ;main.c: 2172: writeEEPROM(0x68, val);
 11322  000AC8  6A0F               	clrf	?_writeEEPROM+1,c
 11323  000ACA  0E68               	movlw	104
 11324  000ACC  6E0E               	movwf	?_writeEEPROM,c
 11325  000ACE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11326  000AD2  EC39  F029         	call	_writeEEPROM	;wreg free
 11327                           
 11328                           ;main.c: 2173: rv = readEEPROM(0x68);
 11329  000AD6  6A17               	clrf	?_readEEPROM+1,c
 11330  000AD8  0E68               	movlw	104
 11331  000ADA  6E16               	movwf	?_readEEPROM,c
 11332  000ADC  EC27  F02A         	call	_readEEPROM	;wreg free
 11333  000AE0  EFA9  F009         	goto	L20
 11334  000AE4                     l10861:
 11335                           
 11336                           ;main.c: 2178: writeEEPROM(0x69, val);
 11337  000AE4  6A0F               	clrf	?_writeEEPROM+1,c
 11338  000AE6  0E69               	movlw	105
 11339  000AE8  6E0E               	movwf	?_writeEEPROM,c
 11340  000AEA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11341  000AEE  EC39  F029         	call	_writeEEPROM	;wreg free
 11342                           
 11343                           ;main.c: 2179: rv = readEEPROM(0x69);
 11344  000AF2  6A17               	clrf	?_readEEPROM+1,c
 11345  000AF4  0E69               	movlw	105
 11346  000AF6  6E16               	movwf	?_readEEPROM,c
 11347  000AF8  EC27  F02A         	call	_readEEPROM	;wreg free
 11348  000AFC  EFA9  F009         	goto	L20
 11349  000B00                     l10863:
 11350                           
 11351                           ;main.c: 2184: writeEEPROM(0x6A, val);
 11352  000B00  6A0F               	clrf	?_writeEEPROM+1,c
 11353  000B02  0E6A               	movlw	106
 11354  000B04  6E0E               	movwf	?_writeEEPROM,c
 11355  000B06  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11356  000B0A  EC39  F029         	call	_writeEEPROM	;wreg free
 11357                           
 11358                           ;main.c: 2185: rv = readEEPROM(0x6A);
 11359  000B0E  6A17               	clrf	?_readEEPROM+1,c
 11360  000B10  0E6A               	movlw	106
 11361  000B12  6E16               	movwf	?_readEEPROM,c
 11362  000B14  EC27  F02A         	call	_readEEPROM	;wreg free
 11363  000B18  EFA9  F009         	goto	L20
 11364  000B1C                     l10865:
 11365                           
 11366                           ;main.c: 2190: writeEEPROM(0x6B, val);
 11367  000B1C  6A0F               	clrf	?_writeEEPROM+1,c
 11368  000B1E  0E6B               	movlw	107
 11369  000B20  6E0E               	movwf	?_writeEEPROM,c
 11370  000B22  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11371  000B26  EC39  F029         	call	_writeEEPROM	;wreg free
 11372                           
 11373                           ;main.c: 2191: rv = readEEPROM(0x6B);
 11374  000B2A  6A17               	clrf	?_readEEPROM+1,c
 11375  000B2C  0E6B               	movlw	107
 11376  000B2E  6E16               	movwf	?_readEEPROM,c
 11377  000B30  EC27  F02A         	call	_readEEPROM	;wreg free
 11378  000B34  EFA9  F009         	goto	L20
 11379  000B38                     l10867:
 11380                           
 11381                           ;main.c: 2196: writeEEPROM(0x6C, val);
 11382  000B38  6A0F               	clrf	?_writeEEPROM+1,c
 11383  000B3A  0E6C               	movlw	108
 11384  000B3C  6E0E               	movwf	?_writeEEPROM,c
 11385  000B3E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11386  000B42  EC39  F029         	call	_writeEEPROM	;wreg free
 11387                           
 11388                           ;main.c: 2197: rv = readEEPROM(0x6C);
 11389  000B46  6A17               	clrf	?_readEEPROM+1,c
 11390  000B48  0E6C               	movlw	108
 11391  000B4A  6E16               	movwf	?_readEEPROM,c
 11392  000B4C  EC27  F02A         	call	_readEEPROM	;wreg free
 11393  000B50  EFA9  F009         	goto	L20
 11394  000B54                     l10869:
 11395                           
 11396                           ;main.c: 2202: writeEEPROM(0x6D, val);
 11397  000B54  6A0F               	clrf	?_writeEEPROM+1,c
 11398  000B56  0E6D               	movlw	109
 11399  000B58  6E0E               	movwf	?_writeEEPROM,c
 11400  000B5A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11401  000B5E  EC39  F029         	call	_writeEEPROM	;wreg free
 11402                           
 11403                           ;main.c: 2203: rv = readEEPROM(0x6D);
 11404  000B62  6A17               	clrf	?_readEEPROM+1,c
 11405  000B64  0E6D               	movlw	109
 11406  000B66  6E16               	movwf	?_readEEPROM,c
 11407  000B68  EC27  F02A         	call	_readEEPROM	;wreg free
 11408  000B6C  D3F2               	goto	L20
 11409  000B6E                     l10871:
 11410                           
 11411                           ;main.c: 2208: writeEEPROM(0x6E, val);
 11412  000B6E  6A0F               	clrf	?_writeEEPROM+1,c
 11413  000B70  0E6E               	movlw	110
 11414  000B72  6E0E               	movwf	?_writeEEPROM,c
 11415  000B74  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11416  000B78  EC39  F029         	call	_writeEEPROM	;wreg free
 11417                           
 11418                           ;main.c: 2209: rv = readEEPROM(0x6E);
 11419  000B7C  6A17               	clrf	?_readEEPROM+1,c
 11420  000B7E  0E6E               	movlw	110
 11421  000B80  6E16               	movwf	?_readEEPROM,c
 11422  000B82  EC27  F02A         	call	_readEEPROM	;wreg free
 11423  000B86  D3E5               	goto	L20
 11424  000B88                     l10873:
 11425                           
 11426                           ;main.c: 2214: writeEEPROM(0x6F, val);
 11427  000B88  6A0F               	clrf	?_writeEEPROM+1,c
 11428  000B8A  0E6F               	movlw	111
 11429  000B8C  6E0E               	movwf	?_writeEEPROM,c
 11430  000B8E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11431  000B92  EC39  F029         	call	_writeEEPROM	;wreg free
 11432                           
 11433                           ;main.c: 2215: rv = readEEPROM(0x6F);
 11434  000B96  6A17               	clrf	?_readEEPROM+1,c
 11435  000B98  0E6F               	movlw	111
 11436  000B9A  6E16               	movwf	?_readEEPROM,c
 11437  000B9C  EC27  F02A         	call	_readEEPROM	;wreg free
 11438  000BA0  D3D8               	goto	L20
 11439  000BA2                     l10875:
 11440                           
 11441                           ;main.c: 2220: writeEEPROM(0x70, val);
 11442  000BA2  6A0F               	clrf	?_writeEEPROM+1,c
 11443  000BA4  0E70               	movlw	112
 11444  000BA6  6E0E               	movwf	?_writeEEPROM,c
 11445  000BA8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11446  000BAC  EC39  F029         	call	_writeEEPROM	;wreg free
 11447                           
 11448                           ;main.c: 2221: rv = readEEPROM(0x70);
 11449  000BB0  6A17               	clrf	?_readEEPROM+1,c
 11450  000BB2  0E70               	movlw	112
 11451  000BB4  6E16               	movwf	?_readEEPROM,c
 11452  000BB6  EC27  F02A         	call	_readEEPROM	;wreg free
 11453  000BBA  D3CB               	goto	L20
 11454  000BBC                     l10877:
 11455                           
 11456                           ;main.c: 2226: writeEEPROM(0x71, val);
 11457  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 11458  000BBE  0E71               	movlw	113
 11459  000BC0  6E0E               	movwf	?_writeEEPROM,c
 11460  000BC2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11461  000BC6  EC39  F029         	call	_writeEEPROM	;wreg free
 11462                           
 11463                           ;main.c: 2227: rv = readEEPROM(0x71);
 11464  000BCA  6A17               	clrf	?_readEEPROM+1,c
 11465  000BCC  0E71               	movlw	113
 11466  000BCE  6E16               	movwf	?_readEEPROM,c
 11467  000BD0  EC27  F02A         	call	_readEEPROM	;wreg free
 11468  000BD4  D3BE               	goto	L20
 11469  000BD6                     l10879:
 11470                           
 11471                           ;main.c: 2232: writeEEPROM(0x72, val);
 11472  000BD6  6A0F               	clrf	?_writeEEPROM+1,c
 11473  000BD8  0E72               	movlw	114
 11474  000BDA  6E0E               	movwf	?_writeEEPROM,c
 11475  000BDC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11476  000BE0  EC39  F029         	call	_writeEEPROM	;wreg free
 11477                           
 11478                           ;main.c: 2233: rv = readEEPROM(0x72);
 11479  000BE4  6A17               	clrf	?_readEEPROM+1,c
 11480  000BE6  0E72               	movlw	114
 11481  000BE8  6E16               	movwf	?_readEEPROM,c
 11482  000BEA  EC27  F02A         	call	_readEEPROM	;wreg free
 11483  000BEE  D3B1               	goto	L20
 11484  000BF0                     l10881:
 11485                           
 11486                           ;main.c: 2242: writeEEPROM(0x73, val);
 11487  000BF0  6A0F               	clrf	?_writeEEPROM+1,c
 11488  000BF2  0E73               	movlw	115
 11489  000BF4  6E0E               	movwf	?_writeEEPROM,c
 11490  000BF6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11491  000BFA  EC39  F029         	call	_writeEEPROM	;wreg free
 11492                           
 11493                           ;main.c: 2243: rv = readEEPROM(0x73);
 11494  000BFE  6A17               	clrf	?_readEEPROM+1,c
 11495  000C00  0E73               	movlw	115
 11496  000C02  6E16               	movwf	?_readEEPROM,c
 11497  000C04  EC27  F02A         	call	_readEEPROM	;wreg free
 11498  000C08  D3A4               	goto	L20
 11499  000C0A                     l10883:
 11500                           
 11501                           ;main.c: 2248: writeEEPROM(0x74, val);
 11502  000C0A  6A0F               	clrf	?_writeEEPROM+1,c
 11503  000C0C  0E74               	movlw	116
 11504  000C0E  6E0E               	movwf	?_writeEEPROM,c
 11505  000C10  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11506  000C14  EC39  F029         	call	_writeEEPROM	;wreg free
 11507                           
 11508                           ;main.c: 2249: rv = readEEPROM(0x74);
 11509  000C18  6A17               	clrf	?_readEEPROM+1,c
 11510  000C1A  0E74               	movlw	116
 11511  000C1C  6E16               	movwf	?_readEEPROM,c
 11512  000C1E  EC27  F02A         	call	_readEEPROM	;wreg free
 11513  000C22  D397               	goto	L20
 11514  000C24                     l10885:
 11515                           
 11516                           ;main.c: 2254: writeEEPROM(0x75, val);
 11517  000C24  6A0F               	clrf	?_writeEEPROM+1,c
 11518  000C26  0E75               	movlw	117
 11519  000C28  6E0E               	movwf	?_writeEEPROM,c
 11520  000C2A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11521  000C2E  EC39  F029         	call	_writeEEPROM	;wreg free
 11522                           
 11523                           ;main.c: 2255: rv = readEEPROM(0x75);
 11524  000C32  6A17               	clrf	?_readEEPROM+1,c
 11525  000C34  0E75               	movlw	117
 11526  000C36  6E16               	movwf	?_readEEPROM,c
 11527  000C38  EC27  F02A         	call	_readEEPROM	;wreg free
 11528  000C3C  D38A               	goto	L20
 11529  000C3E                     l10887:
 11530                           
 11531                           ;main.c: 2260: writeEEPROM(0x76, val);
 11532  000C3E  6A0F               	clrf	?_writeEEPROM+1,c
 11533  000C40  0E76               	movlw	118
 11534  000C42  6E0E               	movwf	?_writeEEPROM,c
 11535  000C44  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11536  000C48  EC39  F029         	call	_writeEEPROM	;wreg free
 11537                           
 11538                           ;main.c: 2261: rv = readEEPROM(0x76);
 11539  000C4C  6A17               	clrf	?_readEEPROM+1,c
 11540  000C4E  0E76               	movlw	118
 11541  000C50  6E16               	movwf	?_readEEPROM,c
 11542  000C52  EC27  F02A         	call	_readEEPROM	;wreg free
 11543  000C56  D37D               	goto	L20
 11544  000C58                     l10889:
 11545                           
 11546                           ;main.c: 2266: writeEEPROM(0x77, val);
 11547  000C58  6A0F               	clrf	?_writeEEPROM+1,c
 11548  000C5A  0E77               	movlw	119
 11549  000C5C  6E0E               	movwf	?_writeEEPROM,c
 11550  000C5E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11551  000C62  EC39  F029         	call	_writeEEPROM	;wreg free
 11552                           
 11553                           ;main.c: 2267: rv = readEEPROM(0x77);
 11554  000C66  6A17               	clrf	?_readEEPROM+1,c
 11555  000C68  0E77               	movlw	119
 11556  000C6A  6E16               	movwf	?_readEEPROM,c
 11557  000C6C  EC27  F02A         	call	_readEEPROM	;wreg free
 11558  000C70  D370               	goto	L20
 11559  000C72                     l10891:
 11560                           
 11561                           ;main.c: 2272: writeEEPROM(0x78, val);
 11562  000C72  6A0F               	clrf	?_writeEEPROM+1,c
 11563  000C74  0E78               	movlw	120
 11564  000C76  6E0E               	movwf	?_writeEEPROM,c
 11565  000C78  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11566  000C7C  EC39  F029         	call	_writeEEPROM	;wreg free
 11567                           
 11568                           ;main.c: 2273: rv = readEEPROM(0x78);
 11569  000C80  6A17               	clrf	?_readEEPROM+1,c
 11570  000C82  0E78               	movlw	120
 11571  000C84  6E16               	movwf	?_readEEPROM,c
 11572  000C86  EC27  F02A         	call	_readEEPROM	;wreg free
 11573  000C8A  D363               	goto	L20
 11574  000C8C                     l10893:
 11575                           
 11576                           ;main.c: 2278: writeEEPROM(0x79, val);
 11577  000C8C  6A0F               	clrf	?_writeEEPROM+1,c
 11578  000C8E  0E79               	movlw	121
 11579  000C90  6E0E               	movwf	?_writeEEPROM,c
 11580  000C92  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11581  000C96  EC39  F029         	call	_writeEEPROM	;wreg free
 11582                           
 11583                           ;main.c: 2279: rv = readEEPROM(0x79);
 11584  000C9A  6A17               	clrf	?_readEEPROM+1,c
 11585  000C9C  0E79               	movlw	121
 11586  000C9E  6E16               	movwf	?_readEEPROM,c
 11587  000CA0  EC27  F02A         	call	_readEEPROM	;wreg free
 11588  000CA4  D356               	goto	L20
 11589  000CA6                     l10895:
 11590                           
 11591                           ;main.c: 2284: writeEEPROM(0x7A, val);
 11592  000CA6  6A0F               	clrf	?_writeEEPROM+1,c
 11593  000CA8  0E7A               	movlw	122
 11594  000CAA  6E0E               	movwf	?_writeEEPROM,c
 11595  000CAC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11596  000CB0  EC39  F029         	call	_writeEEPROM	;wreg free
 11597                           
 11598                           ;main.c: 2285: rv = readEEPROM(0x7A);
 11599  000CB4  6A17               	clrf	?_readEEPROM+1,c
 11600  000CB6  0E7A               	movlw	122
 11601  000CB8  6E16               	movwf	?_readEEPROM,c
 11602  000CBA  EC27  F02A         	call	_readEEPROM	;wreg free
 11603  000CBE  D349               	goto	L20
 11604  000CC0                     l10897:
 11605                           
 11606                           ;main.c: 2290: writeEEPROM(0x7B, val);
 11607  000CC0  6A0F               	clrf	?_writeEEPROM+1,c
 11608  000CC2  0E7B               	movlw	123
 11609  000CC4  6E0E               	movwf	?_writeEEPROM,c
 11610  000CC6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11611  000CCA  EC39  F029         	call	_writeEEPROM	;wreg free
 11612                           
 11613                           ;main.c: 2291: rv = readEEPROM(0x7B);
 11614  000CCE  6A17               	clrf	?_readEEPROM+1,c
 11615  000CD0  0E7B               	movlw	123
 11616  000CD2  6E16               	movwf	?_readEEPROM,c
 11617  000CD4  EC27  F02A         	call	_readEEPROM	;wreg free
 11618  000CD8  D33C               	goto	L20
 11619  000CDA                     l10899:
 11620                           
 11621                           ;main.c: 2296: writeEEPROM(0x7C, val);
 11622  000CDA  6A0F               	clrf	?_writeEEPROM+1,c
 11623  000CDC  0E7C               	movlw	124
 11624  000CDE  6E0E               	movwf	?_writeEEPROM,c
 11625  000CE0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11626  000CE4  EC39  F029         	call	_writeEEPROM	;wreg free
 11627                           
 11628                           ;main.c: 2297: rv = readEEPROM(0x7C);
 11629  000CE8  6A17               	clrf	?_readEEPROM+1,c
 11630  000CEA  0E7C               	movlw	124
 11631  000CEC  6E16               	movwf	?_readEEPROM,c
 11632  000CEE  EC27  F02A         	call	_readEEPROM	;wreg free
 11633  000CF2  D32F               	goto	L20
 11634  000CF4                     l10901:
 11635                           
 11636                           ;main.c: 2302: writeEEPROM(0x7D, val);
 11637  000CF4  6A0F               	clrf	?_writeEEPROM+1,c
 11638  000CF6  0E7D               	movlw	125
 11639  000CF8  6E0E               	movwf	?_writeEEPROM,c
 11640  000CFA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11641  000CFE  EC39  F029         	call	_writeEEPROM	;wreg free
 11642                           
 11643                           ;main.c: 2303: rv = readEEPROM(0x7D);
 11644  000D02  6A17               	clrf	?_readEEPROM+1,c
 11645  000D04  0E7D               	movlw	125
 11646  000D06  6E16               	movwf	?_readEEPROM,c
 11647  000D08  EC27  F02A         	call	_readEEPROM	;wreg free
 11648  000D0C  D322               	goto	L20
 11649  000D0E                     l10903:
 11650                           
 11651                           ;main.c: 2308: writeEEPROM(0x7E, val);
 11652  000D0E  6A0F               	clrf	?_writeEEPROM+1,c
 11653  000D10  0E7E               	movlw	126
 11654  000D12  6E0E               	movwf	?_writeEEPROM,c
 11655  000D14  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11656  000D18  EC39  F029         	call	_writeEEPROM	;wreg free
 11657                           
 11658                           ;main.c: 2309: rv = readEEPROM(0x7E);
 11659  000D1C  6A17               	clrf	?_readEEPROM+1,c
 11660  000D1E  0E7E               	movlw	126
 11661  000D20  6E16               	movwf	?_readEEPROM,c
 11662  000D22  EC27  F02A         	call	_readEEPROM	;wreg free
 11663  000D26  D315               	goto	L20
 11664  000D28                     l10905:
 11665                           
 11666                           ;main.c: 2318: writeEEPROM(0x7F, val );
 11667  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 11668  000D2A  0E7F               	movlw	127
 11669  000D2C  6E0E               	movwf	?_writeEEPROM,c
 11670  000D2E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11671  000D32  EC39  F029         	call	_writeEEPROM	;wreg free
 11672                           
 11673                           ;main.c: 2319: rv = readEEPROM(0x7F);
 11674  000D36  6A17               	clrf	?_readEEPROM+1,c
 11675  000D38  0E7F               	movlw	127
 11676  000D3A  6E16               	movwf	?_readEEPROM,c
 11677  000D3C  EC27  F02A         	call	_readEEPROM	;wreg free
 11678  000D40  D308               	goto	L20
 11679  000D42                     l10907:
 11680                           
 11681                           ;main.c: 2324: writeEEPROM(0x80, val );
 11682  000D42  6A0F               	clrf	?_writeEEPROM+1,c
 11683  000D44  0E80               	movlw	128
 11684  000D46  6E0E               	movwf	?_writeEEPROM,c
 11685  000D48  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11686  000D4C  EC39  F029         	call	_writeEEPROM	;wreg free
 11687                           
 11688                           ;main.c: 2325: rv = readEEPROM(0x80);
 11689  000D50  6A17               	clrf	?_readEEPROM+1,c
 11690  000D52  0E80               	movlw	128
 11691  000D54  6E16               	movwf	?_readEEPROM,c
 11692  000D56  EC27  F02A         	call	_readEEPROM	;wreg free
 11693  000D5A  D2FB               	goto	L20
 11694  000D5C                     l10909:
 11695                           
 11696                           ;main.c: 2330: writeEEPROM(0x81, val );
 11697  000D5C  6A0F               	clrf	?_writeEEPROM+1,c
 11698  000D5E  0E81               	movlw	129
 11699  000D60  6E0E               	movwf	?_writeEEPROM,c
 11700  000D62  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11701  000D66  EC39  F029         	call	_writeEEPROM	;wreg free
 11702                           
 11703                           ;main.c: 2331: rv = readEEPROM(0x81);
 11704  000D6A  6A17               	clrf	?_readEEPROM+1,c
 11705  000D6C  0E81               	movlw	129
 11706  000D6E  6E16               	movwf	?_readEEPROM,c
 11707  000D70  EC27  F02A         	call	_readEEPROM	;wreg free
 11708  000D74  D2EE               	goto	L20
 11709  000D76                     l10911:
 11710                           
 11711                           ;main.c: 2336: writeEEPROM(0x82, val );
 11712  000D76  6A0F               	clrf	?_writeEEPROM+1,c
 11713  000D78  0E82               	movlw	130
 11714  000D7A  6E0E               	movwf	?_writeEEPROM,c
 11715  000D7C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11716  000D80  EC39  F029         	call	_writeEEPROM	;wreg free
 11717                           
 11718                           ;main.c: 2337: rv = readEEPROM(0x82);
 11719  000D84  6A17               	clrf	?_readEEPROM+1,c
 11720  000D86  0E82               	movlw	130
 11721  000D88  6E16               	movwf	?_readEEPROM,c
 11722  000D8A  EC27  F02A         	call	_readEEPROM	;wreg free
 11723  000D8E  D2E1               	goto	L20
 11724  000D90                     l10913:
 11725                           
 11726                           ;main.c: 2342: writeEEPROM(0x83, val );
 11727  000D90  6A0F               	clrf	?_writeEEPROM+1,c
 11728  000D92  0E83               	movlw	131
 11729  000D94  6E0E               	movwf	?_writeEEPROM,c
 11730  000D96  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11731  000D9A  EC39  F029         	call	_writeEEPROM	;wreg free
 11732                           
 11733                           ;main.c: 2343: rv = readEEPROM(0x83);
 11734  000D9E  6A17               	clrf	?_readEEPROM+1,c
 11735  000DA0  0E83               	movlw	131
 11736  000DA2  6E16               	movwf	?_readEEPROM,c
 11737  000DA4  EC27  F02A         	call	_readEEPROM	;wreg free
 11738  000DA8  D2D4               	goto	L20
 11739  000DAA                     l10915:
 11740                           
 11741                           ;main.c: 2348: writeEEPROM(0x84, val );
 11742  000DAA  6A0F               	clrf	?_writeEEPROM+1,c
 11743  000DAC  0E84               	movlw	132
 11744  000DAE  6E0E               	movwf	?_writeEEPROM,c
 11745  000DB0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11746  000DB4  EC39  F029         	call	_writeEEPROM	;wreg free
 11747                           
 11748                           ;main.c: 2349: rv = readEEPROM(0x84);
 11749  000DB8  6A17               	clrf	?_readEEPROM+1,c
 11750  000DBA  0E84               	movlw	132
 11751  000DBC  6E16               	movwf	?_readEEPROM,c
 11752  000DBE  EC27  F02A         	call	_readEEPROM	;wreg free
 11753  000DC2  D2C7               	goto	L20
 11754  000DC4                     l10917:
 11755                           
 11756                           ;main.c: 2354: writeEEPROM(0x85, val );
 11757  000DC4  6A0F               	clrf	?_writeEEPROM+1,c
 11758  000DC6  0E85               	movlw	133
 11759  000DC8  6E0E               	movwf	?_writeEEPROM,c
 11760  000DCA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11761  000DCE  EC39  F029         	call	_writeEEPROM	;wreg free
 11762                           
 11763                           ;main.c: 2355: rv = readEEPROM(0x85);
 11764  000DD2  6A17               	clrf	?_readEEPROM+1,c
 11765  000DD4  0E85               	movlw	133
 11766  000DD6  6E16               	movwf	?_readEEPROM,c
 11767  000DD8  EC27  F02A         	call	_readEEPROM	;wreg free
 11768  000DDC  D2BA               	goto	L20
 11769  000DDE                     l10919:
 11770                           
 11771                           ;main.c: 2360: writeEEPROM(0x86, val );
 11772  000DDE  6A0F               	clrf	?_writeEEPROM+1,c
 11773  000DE0  0E86               	movlw	134
 11774  000DE2  6E0E               	movwf	?_writeEEPROM,c
 11775  000DE4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11776  000DE8  EC39  F029         	call	_writeEEPROM	;wreg free
 11777                           
 11778                           ;main.c: 2361: rv = readEEPROM(0x86);
 11779  000DEC  6A17               	clrf	?_readEEPROM+1,c
 11780  000DEE  0E86               	movlw	134
 11781  000DF0  6E16               	movwf	?_readEEPROM,c
 11782  000DF2  EC27  F02A         	call	_readEEPROM	;wreg free
 11783  000DF6  D2AD               	goto	L20
 11784  000DF8                     l10921:
 11785                           
 11786                           ;main.c: 2366: writeEEPROM(0x87, val );
 11787  000DF8  6A0F               	clrf	?_writeEEPROM+1,c
 11788  000DFA  0E87               	movlw	135
 11789  000DFC  6E0E               	movwf	?_writeEEPROM,c
 11790  000DFE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11791  000E02  EC39  F029         	call	_writeEEPROM	;wreg free
 11792                           
 11793                           ;main.c: 2367: rv = readEEPROM(0x87);
 11794  000E06  6A17               	clrf	?_readEEPROM+1,c
 11795  000E08  0E87               	movlw	135
 11796  000E0A  6E16               	movwf	?_readEEPROM,c
 11797  000E0C  EC27  F02A         	call	_readEEPROM	;wreg free
 11798  000E10  D2A0               	goto	L20
 11799  000E12                     l10923:
 11800                           
 11801                           ;main.c: 2372: writeEEPROM(0x88, val );
 11802  000E12  6A0F               	clrf	?_writeEEPROM+1,c
 11803  000E14  0E88               	movlw	136
 11804  000E16  6E0E               	movwf	?_writeEEPROM,c
 11805  000E18  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11806  000E1C  EC39  F029         	call	_writeEEPROM	;wreg free
 11807                           
 11808                           ;main.c: 2373: rv = readEEPROM(0x88);
 11809  000E20  6A17               	clrf	?_readEEPROM+1,c
 11810  000E22  0E88               	movlw	136
 11811  000E24  6E16               	movwf	?_readEEPROM,c
 11812  000E26  EC27  F02A         	call	_readEEPROM	;wreg free
 11813  000E2A  D293               	goto	L20
 11814  000E2C                     l10925:
 11815                           
 11816                           ;main.c: 2378: writeEEPROM(0x89, val );
 11817  000E2C  6A0F               	clrf	?_writeEEPROM+1,c
 11818  000E2E  0E89               	movlw	137
 11819  000E30  6E0E               	movwf	?_writeEEPROM,c
 11820  000E32  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11821  000E36  EC39  F029         	call	_writeEEPROM	;wreg free
 11822                           
 11823                           ;main.c: 2379: rv = readEEPROM(0x89);
 11824  000E3A  6A17               	clrf	?_readEEPROM+1,c
 11825  000E3C  0E89               	movlw	137
 11826  000E3E  6E16               	movwf	?_readEEPROM,c
 11827  000E40  EC27  F02A         	call	_readEEPROM	;wreg free
 11828  000E44  D286               	goto	L20
 11829  000E46                     l10927:
 11830                           
 11831                           ;main.c: 2384: writeEEPROM(0x8A, val );
 11832  000E46  6A0F               	clrf	?_writeEEPROM+1,c
 11833  000E48  0E8A               	movlw	138
 11834  000E4A  6E0E               	movwf	?_writeEEPROM,c
 11835  000E4C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11836  000E50  EC39  F029         	call	_writeEEPROM	;wreg free
 11837                           
 11838                           ;main.c: 2385: rv = readEEPROM(0x8A);
 11839  000E54  6A17               	clrf	?_readEEPROM+1,c
 11840  000E56  0E8A               	movlw	138
 11841  000E58  6E16               	movwf	?_readEEPROM,c
 11842  000E5A  EC27  F02A         	call	_readEEPROM	;wreg free
 11843  000E5E  D279               	goto	L20
 11844  000E60                     l10929:
 11845                           
 11846                           ;main.c: 2394: writeEEPROM(0x8B, val );
 11847  000E60  6A0F               	clrf	?_writeEEPROM+1,c
 11848  000E62  0E8B               	movlw	139
 11849  000E64  6E0E               	movwf	?_writeEEPROM,c
 11850  000E66  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11851  000E6A  EC39  F029         	call	_writeEEPROM	;wreg free
 11852                           
 11853                           ;main.c: 2395: rv = readEEPROM(0x8B);
 11854  000E6E  6A17               	clrf	?_readEEPROM+1,c
 11855  000E70  0E8B               	movlw	139
 11856  000E72  6E16               	movwf	?_readEEPROM,c
 11857  000E74  EC27  F02A         	call	_readEEPROM	;wreg free
 11858  000E78  D26C               	goto	L20
 11859  000E7A                     l10931:
 11860                           
 11861                           ;main.c: 2400: writeEEPROM(0x8C, val );
 11862  000E7A  6A0F               	clrf	?_writeEEPROM+1,c
 11863  000E7C  0E8C               	movlw	140
 11864  000E7E  6E0E               	movwf	?_writeEEPROM,c
 11865  000E80  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11866  000E84  EC39  F029         	call	_writeEEPROM	;wreg free
 11867                           
 11868                           ;main.c: 2401: rv = readEEPROM(0x8C);
 11869  000E88  6A17               	clrf	?_readEEPROM+1,c
 11870  000E8A  0E8C               	movlw	140
 11871  000E8C  6E16               	movwf	?_readEEPROM,c
 11872  000E8E  EC27  F02A         	call	_readEEPROM	;wreg free
 11873  000E92  D25F               	goto	L20
 11874  000E94                     l10933:
 11875                           
 11876                           ;main.c: 2406: writeEEPROM(0x8D, val );
 11877  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 11878  000E96  0E8D               	movlw	141
 11879  000E98  6E0E               	movwf	?_writeEEPROM,c
 11880  000E9A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11881  000E9E  EC39  F029         	call	_writeEEPROM	;wreg free
 11882                           
 11883                           ;main.c: 2407: rv = readEEPROM(0x8D);
 11884  000EA2  6A17               	clrf	?_readEEPROM+1,c
 11885  000EA4  0E8D               	movlw	141
 11886  000EA6  6E16               	movwf	?_readEEPROM,c
 11887  000EA8  EC27  F02A         	call	_readEEPROM	;wreg free
 11888  000EAC  D252               	goto	L20
 11889  000EAE                     l10935:
 11890                           
 11891                           ;main.c: 2412: writeEEPROM(0x8E, val );
 11892  000EAE  6A0F               	clrf	?_writeEEPROM+1,c
 11893  000EB0  0E8E               	movlw	142
 11894  000EB2  6E0E               	movwf	?_writeEEPROM,c
 11895  000EB4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11896  000EB8  EC39  F029         	call	_writeEEPROM	;wreg free
 11897                           
 11898                           ;main.c: 2413: rv = readEEPROM(0x8E);
 11899  000EBC  6A17               	clrf	?_readEEPROM+1,c
 11900  000EBE  0E8E               	movlw	142
 11901  000EC0  6E16               	movwf	?_readEEPROM,c
 11902  000EC2  EC27  F02A         	call	_readEEPROM	;wreg free
 11903  000EC6  D245               	goto	L20
 11904  000EC8                     l10937:
 11905                           
 11906                           ;main.c: 2418: writeEEPROM(0x8F, val );
 11907  000EC8  6A0F               	clrf	?_writeEEPROM+1,c
 11908  000ECA  0E8F               	movlw	143
 11909  000ECC  6E0E               	movwf	?_writeEEPROM,c
 11910  000ECE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11911  000ED2  EC39  F029         	call	_writeEEPROM	;wreg free
 11912                           
 11913                           ;main.c: 2419: rv = readEEPROM(0x8F);
 11914  000ED6  6A17               	clrf	?_readEEPROM+1,c
 11915  000ED8  0E8F               	movlw	143
 11916  000EDA  6E16               	movwf	?_readEEPROM,c
 11917  000EDC  EC27  F02A         	call	_readEEPROM	;wreg free
 11918  000EE0  D238               	goto	L20
 11919  000EE2                     l10939:
 11920                           
 11921                           ;main.c: 2424: writeEEPROM(0x90, val );
 11922  000EE2  6A0F               	clrf	?_writeEEPROM+1,c
 11923  000EE4  0E90               	movlw	144
 11924  000EE6  6E0E               	movwf	?_writeEEPROM,c
 11925  000EE8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11926  000EEC  EC39  F029         	call	_writeEEPROM	;wreg free
 11927                           
 11928                           ;main.c: 2425: rv = readEEPROM(0x90);
 11929  000EF0  6A17               	clrf	?_readEEPROM+1,c
 11930  000EF2  0E90               	movlw	144
 11931  000EF4  6E16               	movwf	?_readEEPROM,c
 11932  000EF6  EC27  F02A         	call	_readEEPROM	;wreg free
 11933  000EFA  D22B               	goto	L20
 11934  000EFC                     l10941:
 11935                           
 11936                           ;main.c: 2430: writeEEPROM(0x91, val );
 11937  000EFC  6A0F               	clrf	?_writeEEPROM+1,c
 11938  000EFE  0E91               	movlw	145
 11939  000F00  6E0E               	movwf	?_writeEEPROM,c
 11940  000F02  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11941  000F06  EC39  F029         	call	_writeEEPROM	;wreg free
 11942                           
 11943                           ;main.c: 2431: rv = readEEPROM(0x91);
 11944  000F0A  6A17               	clrf	?_readEEPROM+1,c
 11945  000F0C  0E91               	movlw	145
 11946  000F0E  6E16               	movwf	?_readEEPROM,c
 11947  000F10  EC27  F02A         	call	_readEEPROM	;wreg free
 11948  000F14  D21E               	goto	L20
 11949  000F16                     l10943:
 11950                           
 11951                           ;main.c: 2436: writeEEPROM(0x92, val );
 11952  000F16  6A0F               	clrf	?_writeEEPROM+1,c
 11953  000F18  0E92               	movlw	146
 11954  000F1A  6E0E               	movwf	?_writeEEPROM,c
 11955  000F1C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11956  000F20  EC39  F029         	call	_writeEEPROM	;wreg free
 11957                           
 11958                           ;main.c: 2437: rv = readEEPROM(0x92);
 11959  000F24  6A17               	clrf	?_readEEPROM+1,c
 11960  000F26  0E92               	movlw	146
 11961  000F28  6E16               	movwf	?_readEEPROM,c
 11962  000F2A  EC27  F02A         	call	_readEEPROM	;wreg free
 11963  000F2E  D211               	goto	L20
 11964  000F30                     l10945:
 11965                           
 11966                           ;main.c: 2442: writeEEPROM(0x93, val );
 11967  000F30  6A0F               	clrf	?_writeEEPROM+1,c
 11968  000F32  0E93               	movlw	147
 11969  000F34  6E0E               	movwf	?_writeEEPROM,c
 11970  000F36  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11971  000F3A  EC39  F029         	call	_writeEEPROM	;wreg free
 11972                           
 11973                           ;main.c: 2443: rv = readEEPROM(0x93);
 11974  000F3E  6A17               	clrf	?_readEEPROM+1,c
 11975  000F40  0E93               	movlw	147
 11976  000F42  6E16               	movwf	?_readEEPROM,c
 11977  000F44  EC27  F02A         	call	_readEEPROM	;wreg free
 11978  000F48  D204               	goto	L20
 11979  000F4A                     l10947:
 11980                           
 11981                           ;main.c: 2448: writeEEPROM(0x94, val );
 11982  000F4A  6A0F               	clrf	?_writeEEPROM+1,c
 11983  000F4C  0E94               	movlw	148
 11984  000F4E  6E0E               	movwf	?_writeEEPROM,c
 11985  000F50  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11986  000F54  EC39  F029         	call	_writeEEPROM	;wreg free
 11987                           
 11988                           ;main.c: 2449: rv = readEEPROM(0x94);
 11989  000F58  6A17               	clrf	?_readEEPROM+1,c
 11990  000F5A  0E94               	movlw	148
 11991  000F5C  6E16               	movwf	?_readEEPROM,c
 11992  000F5E  EC27  F02A         	call	_readEEPROM	;wreg free
 11993  000F62  D1F7               	goto	L20
 11994  000F64                     l10949:
 11995                           
 11996                           ;main.c: 2454: writeEEPROM(0x95, val );
 11997  000F64  6A0F               	clrf	?_writeEEPROM+1,c
 11998  000F66  0E95               	movlw	149
 11999  000F68  6E0E               	movwf	?_writeEEPROM,c
 12000  000F6A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12001  000F6E  EC39  F029         	call	_writeEEPROM	;wreg free
 12002                           
 12003                           ;main.c: 2455: rv = readEEPROM(0x95);
 12004  000F72  6A17               	clrf	?_readEEPROM+1,c
 12005  000F74  0E95               	movlw	149
 12006  000F76  6E16               	movwf	?_readEEPROM,c
 12007  000F78  EC27  F02A         	call	_readEEPROM	;wreg free
 12008  000F7C  D1EA               	goto	L20
 12009  000F7E                     l10951:
 12010                           
 12011                           ;main.c: 2460: writeEEPROM(0x96, val );
 12012  000F7E  6A0F               	clrf	?_writeEEPROM+1,c
 12013  000F80  0E96               	movlw	150
 12014  000F82  6E0E               	movwf	?_writeEEPROM,c
 12015  000F84  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12016  000F88  EC39  F029         	call	_writeEEPROM	;wreg free
 12017                           
 12018                           ;main.c: 2461: rv = readEEPROM(0x96);
 12019  000F8C  6A17               	clrf	?_readEEPROM+1,c
 12020  000F8E  0E96               	movlw	150
 12021  000F90  6E16               	movwf	?_readEEPROM,c
 12022  000F92  EC27  F02A         	call	_readEEPROM	;wreg free
 12023  000F96  D1DD               	goto	L20
 12024  000F98                     l10953:
 12025                           
 12026                           ;main.c: 2470: writeEEPROM(0x97, val);
 12027  000F98  6A0F               	clrf	?_writeEEPROM+1,c
 12028  000F9A  0E97               	movlw	151
 12029  000F9C  6E0E               	movwf	?_writeEEPROM,c
 12030  000F9E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12031  000FA2  EC39  F029         	call	_writeEEPROM	;wreg free
 12032                           
 12033                           ;main.c: 2471: rv = readEEPROM(0x97);
 12034  000FA6  6A17               	clrf	?_readEEPROM+1,c
 12035  000FA8  0E97               	movlw	151
 12036  000FAA  6E16               	movwf	?_readEEPROM,c
 12037  000FAC  EC27  F02A         	call	_readEEPROM	;wreg free
 12038  000FB0  D1D0               	goto	L20
 12039  000FB2                     l10955:
 12040                           
 12041                           ;main.c: 2476: writeEEPROM(0x98, val);
 12042  000FB2  6A0F               	clrf	?_writeEEPROM+1,c
 12043  000FB4  0E98               	movlw	152
 12044  000FB6  6E0E               	movwf	?_writeEEPROM,c
 12045  000FB8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12046  000FBC  EC39  F029         	call	_writeEEPROM	;wreg free
 12047                           
 12048                           ;main.c: 2477: rv = readEEPROM(0x98);
 12049  000FC0  6A17               	clrf	?_readEEPROM+1,c
 12050  000FC2  0E98               	movlw	152
 12051  000FC4  6E16               	movwf	?_readEEPROM,c
 12052  000FC6  EC27  F02A         	call	_readEEPROM	;wreg free
 12053  000FCA  D1C3               	goto	L20
 12054  000FCC                     l10957:
 12055                           
 12056                           ;main.c: 2482: writeEEPROM(0x99, val);
 12057  000FCC  6A0F               	clrf	?_writeEEPROM+1,c
 12058  000FCE  0E99               	movlw	153
 12059  000FD0  6E0E               	movwf	?_writeEEPROM,c
 12060  000FD2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12061  000FD6  EC39  F029         	call	_writeEEPROM	;wreg free
 12062  000FDA  6A17               	clrf	?_readEEPROM+1,c
 12063  000FDC  0E99               	movlw	153
 12064  000FDE  6E16               	movwf	?_readEEPROM,c
 12065  000FE0  EC27  F02A         	call	_readEEPROM	;wreg free
 12066  000FE4                     l518:
 12067                           
 12068                           ;main.c: 2487: writeEEPROM(0x9A, val);
 12069  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 12070  000FE6  0E9A               	movlw	154
 12071  000FE8  6E0E               	movwf	?_writeEEPROM,c
 12072  000FEA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12073  000FEE  EC39  F029         	call	_writeEEPROM	;wreg free
 12074                           
 12075                           ;main.c: 2488: rv = readEEPROM(0x9A);
 12076  000FF2  6A17               	clrf	?_readEEPROM+1,c
 12077  000FF4  0E9A               	movlw	154
 12078  000FF6  6E16               	movwf	?_readEEPROM,c
 12079  000FF8  EC27  F02A         	call	_readEEPROM	;wreg free
 12080  000FFC  D1AA               	goto	L20
 12081  000FFE                     l10959:
 12082                           
 12083                           ;main.c: 2493: writeEEPROM(0x9B, val);
 12084  000FFE  6A0F               	clrf	?_writeEEPROM+1,c
 12085  001000  0E9B               	movlw	155
 12086  001002  6E0E               	movwf	?_writeEEPROM,c
 12087  001004  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12088  001008  EC39  F029         	call	_writeEEPROM	;wreg free
 12089                           
 12090                           ;main.c: 2494: rv = readEEPROM(0x9B);
 12091  00100C  6A17               	clrf	?_readEEPROM+1,c
 12092  00100E  0E9B               	movlw	155
 12093  001010  6E16               	movwf	?_readEEPROM,c
 12094  001012  EC27  F02A         	call	_readEEPROM	;wreg free
 12095  001016  D19D               	goto	L20
 12096  001018                     l10961:
 12097                           
 12098                           ;main.c: 2499: writeEEPROM(0x9C, val);
 12099  001018  6A0F               	clrf	?_writeEEPROM+1,c
 12100  00101A  0E9C               	movlw	156
 12101  00101C  6E0E               	movwf	?_writeEEPROM,c
 12102  00101E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12103  001022  EC39  F029         	call	_writeEEPROM	;wreg free
 12104                           
 12105                           ;main.c: 2500: rv = readEEPROM(0x9C);
 12106  001026  6A17               	clrf	?_readEEPROM+1,c
 12107  001028  0E9C               	movlw	156
 12108  00102A  6E16               	movwf	?_readEEPROM,c
 12109  00102C  EC27  F02A         	call	_readEEPROM	;wreg free
 12110  001030  D190               	goto	L20
 12111  001032                     l521:
 12112                           
 12113                           ;main.c: 2505: rv = 0;
 12114  001032  6A26               	clrf	vscp_writeAppReg@rv,c
 12115                           
 12116                           ;main.c: 2506: break;
 12117  001034  D18F               	goto	l10997
 12118  001036                     l10963:
 12119                           
 12120                           ;main.c: 2515: writeEEPROM(0xF2, val);
 12121  001036  6A0F               	clrf	?_writeEEPROM+1,c
 12122  001038  0EF2               	movlw	242
 12123  00103A  6E0E               	movwf	?_writeEEPROM,c
 12124  00103C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12125  001040  EC39  F029         	call	_writeEEPROM	;wreg free
 12126                           
 12127                           ;main.c: 2516: rv = readEEPROM(0xF2);
 12128  001044  6A17               	clrf	?_readEEPROM+1,c
 12129  001046  0EF2               	movlw	242
 12130  001048  6E16               	movwf	?_readEEPROM,c
 12131  00104A  EC27  F02A         	call	_readEEPROM	;wreg free
 12132  00104E  D181               	goto	L20
 12133  001050                     l10965:
 12134                           
 12135                           ;main.c: 2521: writeEEPROM(0xF3, val);
 12136  001050  6A0F               	clrf	?_writeEEPROM+1,c
 12137  001052  0EF3               	movlw	243
 12138  001054  6E0E               	movwf	?_writeEEPROM,c
 12139  001056  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12140  00105A  EC39  F029         	call	_writeEEPROM	;wreg free
 12141                           
 12142                           ;main.c: 2522: rv = readEEPROM(0xF3);
 12143  00105E  6A17               	clrf	?_readEEPROM+1,c
 12144  001060  0EF3               	movlw	243
 12145  001062  6E16               	movwf	?_readEEPROM,c
 12146  001064  EC27  F02A         	call	_readEEPROM	;wreg free
 12147  001068  D174               	goto	L20
 12148  00106A                     l10967:
 12149                           
 12150                           ;main.c: 2526: rv = ~val;
 12151  00106A  1C23               	comf	vscp_writeAppReg@val,w,c
 12152  00106C  D172               	goto	L20
 12153  00106E                     l10971:
 12154  00106E  5025               	movf	vscp_writeAppReg@reg,w,c
 12155                           
 12156                           ; Switch size 1, requested type "space"
 12157                           ; Number of cases is 96, Range of values is 0 to 119
 12158                           ; switch strategies available:
 12159                           ; Name         Instructions Cycles
 12160                           ; simple_byte          289   145 (average)
 12161                           ;	Chosen strategy is simple_byte
 12162  001070  E102 EF42  F003    	bz	l10781
 12163  001076  0A01               	xorlw	1	; case 1
 12164  001078  E102 EF50  F003    	bz	l10783
 12165  00107E  0A03               	xorlw	3	; case 2
 12166  001080  E102 EF5E  F003    	bz	l10785
 12167  001086  0A01               	xorlw	1	; case 3
 12168  001088  E102 EF6C  F003    	bz	l10787
 12169  00108E  0A07               	xorlw	7	; case 4
 12170  001090  E102 EF7A  F003    	bz	l10789
 12171  001096  0A01               	xorlw	1	; case 5
 12172  001098  E102 EF88  F003    	bz	l10791
 12173  00109E  0A03               	xorlw	3	; case 6
 12174  0010A0  E102 EF96  F003    	bz	l10793
 12175  0010A6  0A01               	xorlw	1	; case 7
 12176  0010A8  E102 EFA4  F003    	bz	l10795
 12177  0010AE  0A13               	xorlw	19	; case 20
 12178  0010B0  E102 EFB2  F003    	bz	l10797
 12179  0010B6  0A01               	xorlw	1	; case 21
 12180  0010B8  E102 EFC0  F003    	bz	l10799
 12181  0010BE  0A03               	xorlw	3	; case 22
 12182  0010C0  E102 EFCE  F003    	bz	l10801
 12183  0010C6  0A01               	xorlw	1	; case 23
 12184  0010C8  E102 EFDC  F003    	bz	l10803
 12185  0010CE  0A0F               	xorlw	15	; case 24
 12186  0010D0  E102 EFEA  F003    	bz	l10805
 12187  0010D6  0A01               	xorlw	1	; case 25
 12188  0010D8  E102 EFF8  F003    	bz	l10807
 12189  0010DE  0A3F               	xorlw	63	; case 38
 12190  0010E0  E102 EF06  F004    	bz	l10809
 12191  0010E6  0A01               	xorlw	1	; case 39
 12192  0010E8  E102 EF14  F004    	bz	l10811
 12193  0010EE  0A0F               	xorlw	15	; case 40
 12194  0010F0  E102 EF22  F004    	bz	l10813
 12195  0010F6  0A01               	xorlw	1	; case 41
 12196  0010F8  E102 EF30  F004    	bz	l10815
 12197  0010FE  0A03               	xorlw	3	; case 42
 12198  001100  E102 EF3E  F004    	bz	l10817
 12199  001106  0A01               	xorlw	1	; case 43
 12200  001108  E102 EF4C  F004    	bz	l10819
 12201  00110E  0A07               	xorlw	7	; case 44
 12202  001110  E102 EF5A  F004    	bz	l10821
 12203  001116  0A01               	xorlw	1	; case 45
 12204  001118  E102 EF68  F004    	bz	l10823
 12205  00111E  0A03               	xorlw	3	; case 46
 12206  001120  E102 EF76  F004    	bz	l10825
 12207  001126  0A01               	xorlw	1	; case 47
 12208  001128  E102 EF84  F004    	bz	l10827
 12209  00112E  0A1F               	xorlw	31	; case 48
 12210  001130  E102 EF92  F004    	bz	l10829
 12211  001136  0A01               	xorlw	1	; case 49
 12212  001138  E101 D402          	bz	l10831
 12213  00113C  0A03               	xorlw	3	; case 50
 12214  00113E  E101 D40D          	bz	l10833
 12215  001142  0A01               	xorlw	1	; case 51
 12216  001144  E101 D418          	bz	l10835
 12217  001148  0A07               	xorlw	7	; case 52
 12218  00114A  E101 D423          	bz	l10837
 12219  00114E  0A01               	xorlw	1	; case 53
 12220  001150  E101 D42E          	bz	l10839
 12221  001154  0A03               	xorlw	3	; case 54
 12222  001156  E101 D439          	bz	l10841
 12223  00115A  0A01               	xorlw	1	; case 55
 12224  00115C  E101 D444          	bz	l10843
 12225  001160  0A0F               	xorlw	15	; case 56
 12226  001162  E101 D44F          	bz	l10845
 12227  001166  0A01               	xorlw	1	; case 57
 12228  001168  E101 D45A          	bz	l10847
 12229  00116C  0A03               	xorlw	3	; case 58
 12230  00116E  E101 D465          	bz	l10849
 12231  001172  0A01               	xorlw	1	; case 59
 12232  001174  E101 D470          	bz	l10851
 12233  001178  0A07               	xorlw	7	; case 60
 12234  00117A  E101 D47B          	bz	l10853
 12235  00117E  0A01               	xorlw	1	; case 61
 12236  001180  E101 D486          	bz	l10855
 12237  001184  0A03               	xorlw	3	; case 62
 12238  001186  E101 D491          	bz	l10857
 12239  00118A  0A01               	xorlw	1	; case 63
 12240  00118C  E101 D49C          	bz	l10859
 12241  001190  0A7F               	xorlw	127	; case 64
 12242  001192  E101 D4A7          	bz	l10861
 12243  001196  0A01               	xorlw	1	; case 65
 12244  001198  E101 D4B2          	bz	l10863
 12245  00119C  0A03               	xorlw	3	; case 66
 12246  00119E  E101 D4BD          	bz	l10865
 12247  0011A2  0A01               	xorlw	1	; case 67
 12248  0011A4  E101 D4C8          	bz	l10867
 12249  0011A8  0A07               	xorlw	7	; case 68
 12250  0011AA  E101 D4D3          	bz	l10869
 12251  0011AE  0A01               	xorlw	1	; case 69
 12252  0011B0  E101 D4DD          	bz	l10871
 12253  0011B4  0A03               	xorlw	3	; case 70
 12254  0011B6  E101 D4E7          	bz	l10873
 12255  0011BA  0A01               	xorlw	1	; case 71
 12256  0011BC  E101 D4F1          	bz	l10875
 12257  0011C0  0A0F               	xorlw	15	; case 72
 12258  0011C2  E101 D4FB          	bz	l10877
 12259  0011C6  0A01               	xorlw	1	; case 73
 12260  0011C8  E101 D505          	bz	l10879
 12261  0011CC  0A03               	xorlw	3	; case 74
 12262  0011CE  E101 D50F          	bz	l10881
 12263  0011D2  0A01               	xorlw	1	; case 75
 12264  0011D4  E101 D519          	bz	l10883
 12265  0011D8  0A07               	xorlw	7	; case 76
 12266  0011DA  E101 D523          	bz	l10885
 12267  0011DE  0A01               	xorlw	1	; case 77
 12268  0011E0  E101 D52D          	bz	l10887
 12269  0011E4  0A03               	xorlw	3	; case 78
 12270  0011E6  E101 D537          	bz	l10889
 12271  0011EA  0A01               	xorlw	1	; case 79
 12272  0011EC  E101 D541          	bz	l10891
 12273  0011F0  0A1F               	xorlw	31	; case 80
 12274  0011F2  E101 D54B          	bz	l10893
 12275  0011F6  0A01               	xorlw	1	; case 81
 12276  0011F8  E101 D555          	bz	l10895
 12277  0011FC  0A03               	xorlw	3	; case 82
 12278  0011FE  E101 D55F          	bz	l10897
 12279  001202  0A01               	xorlw	1	; case 83
 12280  001204  E101 D569          	bz	l10899
 12281  001208  0A07               	xorlw	7	; case 84
 12282  00120A  E101 D573          	bz	l10901
 12283  00120E  0A01               	xorlw	1	; case 85
 12284  001210  E101 D57D          	bz	l10903
 12285  001214  0A03               	xorlw	3	; case 86
 12286  001216  E101 D587          	bz	l10905
 12287  00121A  0A01               	xorlw	1	; case 87
 12288  00121C  E101 D591          	bz	l10907
 12289  001220  0A0F               	xorlw	15	; case 88
 12290  001222  E101 D59B          	bz	l10909
 12291  001226  0A01               	xorlw	1	; case 89
 12292  001228  E101 D5A5          	bz	l10911
 12293  00122C  0A03               	xorlw	3	; case 90
 12294  00122E  E101 D5AF          	bz	l10913
 12295  001232  0A01               	xorlw	1	; case 91
 12296  001234  E101 D5B9          	bz	l10915
 12297  001238  0A07               	xorlw	7	; case 92
 12298  00123A  E101 D5C3          	bz	l10917
 12299  00123E  0A01               	xorlw	1	; case 93
 12300  001240  E101 D5CD          	bz	l10919
 12301  001244  0A03               	xorlw	3	; case 94
 12302  001246  E101 D5D7          	bz	l10921
 12303  00124A  0A01               	xorlw	1	; case 95
 12304  00124C  E101 D5E1          	bz	l10923
 12305  001250  0A3F               	xorlw	63	; case 96
 12306  001252  E101 D5EB          	bz	l10925
 12307  001256  0A01               	xorlw	1	; case 97
 12308  001258  E101 D5F5          	bz	l10927
 12309  00125C  0A03               	xorlw	3	; case 98
 12310  00125E  E101 D5FF          	bz	l10929
 12311  001262  0A01               	xorlw	1	; case 99
 12312  001264  E101 D609          	bz	l10931
 12313  001268  0A07               	xorlw	7	; case 100
 12314  00126A  E101 D613          	bz	l10933
 12315  00126E  0A01               	xorlw	1	; case 101
 12316  001270  E101 D61D          	bz	l10935
 12317  001274  0A03               	xorlw	3	; case 102
 12318  001276  E101 D627          	bz	l10937
 12319  00127A  0A01               	xorlw	1	; case 103
 12320  00127C  E101 D631          	bz	l10939
 12321  001280  0A0F               	xorlw	15	; case 104
 12322  001282  E101 D63B          	bz	l10941
 12323  001286  0A01               	xorlw	1	; case 105
 12324  001288  E101 D645          	bz	l10943
 12325  00128C  0A03               	xorlw	3	; case 106
 12326  00128E  E101 D64F          	bz	l10945
 12327  001292  0A01               	xorlw	1	; case 107
 12328  001294  E101 D659          	bz	l10947
 12329  001298  0A07               	xorlw	7	; case 108
 12330  00129A  E101 D663          	bz	l10949
 12331  00129E  0A01               	xorlw	1	; case 109
 12332  0012A0  E101 D66D          	bz	l10951
 12333  0012A4  0A03               	xorlw	3	; case 110
 12334  0012A6  E101 D677          	bz	l10953
 12335  0012AA  0A01               	xorlw	1	; case 111
 12336  0012AC  E101 D681          	bz	l10955
 12337  0012B0  0A1F               	xorlw	31	; case 112
 12338  0012B2  E101 D68B          	bz	l10957
 12339  0012B6  0A01               	xorlw	1	; case 113
 12340  0012B8  E101 D694          	bz	l518
 12341  0012BC  0A03               	xorlw	3	; case 114
 12342  0012BE  E101 D69E          	bz	l10959
 12343  0012C2  0A01               	xorlw	1	; case 115
 12344  0012C4  E101 D6A8          	bz	l10961
 12345  0012C8  0A07               	xorlw	7	; case 116
 12346  0012CA  E101 D6B2          	bz	l521
 12347  0012CE  0A01               	xorlw	1	; case 117
 12348  0012D0  E101 D6AF          	bz	l521
 12349  0012D4  0A03               	xorlw	3	; case 118
 12350  0012D6  E101 D6AE          	bz	l10963
 12351  0012DA  0A01               	xorlw	1	; case 119
 12352  0012DC  E101 D6B8          	bz	l10965
 12353  0012E0  D6C4               	goto	l10967
 12354  0012E2                     l10973:
 12355                           
 12356                           ;main.c: 2530: else if (1 == vscp_page_select) {
 12357  0012E2  0446               	decf	_vscp_page_select,w,c
 12358  0012E4  1047               	iorwf	_vscp_page_select+1,w,c
 12359  0012E6  E136               	bnz	l10997
 12360                           
 12361                           ;main.c: 2533: if (reg < 72) {
 12362  0012E8  0E48               	movlw	72
 12363  0012EA  6025               	cpfslt	vscp_writeAppReg@reg,c
 12364  0012EC  D010               	goto	l10981
 12365                           
 12366                           ;main.c: 2534: writeEEPROM(0xAA + reg, val);
 12367  0012EE  0EAA               	movlw	170
 12368  0012F0  D833               	call	PL56	;call to abstracted procedure
 12369  0012F2  EC39  F029         	call	_writeEEPROM	;wreg free
 12370                           
 12371                           ;main.c: 2535: rv = readEEPROM(0xAA + reg );
 12372  0012F6  0EAA               	movlw	170
 12373  0012F8  2425               	addwf	vscp_writeAppReg@reg,w,c
 12374  0012FA  6E16               	movwf	?_readEEPROM,c
 12375  0012FC  6A17               	clrf	?_readEEPROM+1,c
 12376  0012FE  0E00               	movlw	0
 12377  001300  2217               	addwfc	?_readEEPROM+1,f,c
 12378  001302  EC27  F02A         	call	_readEEPROM	;wreg free
 12379  001306  6E26               	movwf	vscp_writeAppReg@rv,c
 12380                           
 12381                           ;main.c: 2536: writeCoeffs2Ram();
 12382  001308  ECBC  F023         	call	_writeCoeffs2Ram	;wreg free
 12383                           
 12384                           ;main.c: 2537: }
 12385  00130C  D023               	goto	l10997
 12386  00130E                     l10981:
 12387                           
 12388                           ;main.c: 2539: else if (reg < 84) {
 12389  00130E  0E54               	movlw	84
 12390  001310  6025               	cpfslt	vscp_writeAppReg@reg,c
 12391  001312  D010               	goto	l10993
 12392                           
 12393                           ;main.c: 2541: uint8_t pos = reg - 72;
 12394  001314  5025               	movf	vscp_writeAppReg@reg,w,c
 12395  001316  0FB8               	addlw	184
 12396  001318  6E24               	movwf	vscp_writeAppReg@pos,c
 12397                           
 12398                           ;main.c: 2542: if ( pos % 2 ) {
 12399  00131A  A024               	btfss	vscp_writeAppReg@pos,0,c
 12400  00131C  D002               	goto	l10989
 12401                           
 12402                           ;main.c: 2543: pos--;
 12403  00131E  0624               	decf	vscp_writeAppReg@pos,f,c
 12404                           
 12405                           ;main.c: 2544: }
 12406  001320  D001               	goto	l10991
 12407  001322                     l10989:
 12408                           
 12409                           ;main.c: 2545: else {
 12410                           ;main.c: 2546: pos++;
 12411  001322  2A24               	incf	vscp_writeAppReg@pos,f,c
 12412  001324                     l10991:
 12413                           
 12414                           ;main.c: 2547: }
 12415                           ;main.c: 2548: rv = adc[ pos ];
 12416  001324  0EAB               	movlw	low _adc
 12417  001326  2424               	addwf	vscp_writeAppReg@pos,w,c
 12418  001328  6ED9               	movwf	fsr2l,c
 12419  00132A  6ADA               	clrf	fsr2h,c
 12420  00132C  0E01               	movlw	high _adc
 12421  00132E  22DA               	addwfc	fsr2h,f,c
 12422  001330  50DF               	movf	indf2,w,c
 12423  001332  D00F               	goto	L20
 12424  001334                     l10993:
 12425                           
 12426                           ;main.c: 2551: else if (reg < 98) {
 12427  001334  0E62               	movlw	98
 12428  001336  6025               	cpfslt	vscp_writeAppReg@reg,c
 12429  001338  D00D               	goto	l10997
 12430                           
 12431                           ;main.c: 2552: writeEEPROM( 0x9E + reg - 84, val );
 12432  00133A  0E4A               	movlw	74
 12433  00133C  D80D               	call	PL56	;call to abstracted procedure
 12434  00133E  EC39  F029         	call	_writeEEPROM	;wreg free
 12435                           
 12436                           ;main.c: 2553: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12437  001342  0E4A               	movlw	74
 12438  001344  2425               	addwf	vscp_writeAppReg@reg,w,c
 12439  001346  6E16               	movwf	?_readEEPROM,c
 12440  001348  6A17               	clrf	?_readEEPROM+1,c
 12441  00134A  0E00               	movlw	0
 12442  00134C  2217               	addwfc	?_readEEPROM+1,f,c
 12443  00134E  EC27  F02A         	call	_readEEPROM	;wreg free
 12444  001352                     L20:
 12445  001352  6E26               	movwf	vscp_writeAppReg@rv,c
 12446  001354                     l10997:
 12447                           
 12448                           ;main.c: 2554: }
 12449                           ;main.c: 2555: }
 12450                           ;main.c: 2557: return rv;
 12451  001354  5026               	movf	vscp_writeAppReg@rv,w,c
 12452  001356  0012               	return	
 12453  001358                     __end_of_vscp_writeAppReg:
 12454                           	opt stack 0
 12455  001358                     PL56:
 12456                           	opt stack 23
 12457  001358  2425               	addwf	vscp_writeAppReg@reg,w,c
 12458  00135A  6E0E               	movwf	?_writeEEPROM,c
 12459  00135C  6A0F               	clrf	?_writeEEPROM+1,c
 12460  00135E  0E00               	movlw	0
 12461  001360  220F               	addwfc	?_writeEEPROM+1,f,c
 12462  001362  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12463  001366  0C00               	retlw	0
 12464  001368                     __end_ofPL56:
 12465                           	opt stack 0
 12466                           tblptru	equ	0xFF8
 12467                           tblptrh	equ	0xFF7
 12468                           tblptrl	equ	0xFF6
 12469                           tablat	equ	0xFF5
 12470                           prodh	equ	0xFF4
 12471                           prodl	equ	0xFF3
 12472                           intcon	equ	0xFF2
 12473                           postinc0	equ	0xFEE
 12474                           wreg	equ	0xFE8
 12475                           indf1	equ	0xFE7
 12476                           postdec1	equ	0xFE5
 12477                           fsr1h	equ	0xFE2
 12478                           fsr1l	equ	0xFE1
 12479                           indf2	equ	0xFDF
 12480                           postinc2	equ	0xFDE
 12481                           postdec2	equ	0xFDD
 12482                           plusw2	equ	0xFDB
 12483                           fsr2h	equ	0xFDA
 12484                           fsr2l	equ	0xFD9
 12485                           status	equ	0xFD8
 12486                           
 12487 ;; *************** function _writeCoeffs2Ram *****************
 12488 ;; Defined at:
 12489 ;;		line 973 in file "../main.c"
 12490 ;; Parameters:    Size  Location     Type
 12491 ;;		None
 12492 ;; Auto vars:     Size  Location     Type
 12493 ;;  c               3   27[COMRAM] unsigned char [3]
 12494 ;;  j               2   32[COMRAM] int 
 12495 ;;  i               2   30[COMRAM] int 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;		None               void
 12498 ;; Registers used:
 12499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/1
 12502 ;;		On exit  : F/1
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12505 ;;      Params:         0       0       0       0       0       0       0
 12506 ;;      Locals:         7       0       0       0       0       0       0
 12507 ;;      Temps:          2       0       0       0       0       0       0
 12508 ;;      Totals:         9       0       0       0       0       0       0
 12509 ;;Total ram usage:        9 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    3
 12512 ;; This function calls:
 12513 ;;		_readEEPROM
 12514 ;;		___wmul
 12515 ;; This function is called by:
 12516 ;;		_vscp_writeAppReg
 12517 ;; This function uses a non-reentrant model
 12518 ;;
 12519                           
 12520                           	psect	text43
 12521  004778                     __ptext43:
 12522                           	opt stack 0
 12523  004778                     _writeCoeffs2Ram:
 12524                           	opt stack 23
 12525                           
 12526                           ;main.c: 974: int i, j;
 12527                           ;main.c: 975: uint8_t c[3];
 12528                           ;main.c: 977: for (i = 0; i < 6; i++) {
 12529                           
 12530                           ;incstack = 0
 12531                           ;incstack = 0
 12532  004778  6A1F               	clrf	writeCoeffs2Ram@i,c
 12533  00477A  6A20               	clrf	writeCoeffs2Ram@i+1,c
 12534  00477C                     l10525:
 12535                           
 12536                           ;main.c: 978: for (j = 2; j > 0; j--) {
 12537  00477C  6A22               	clrf	writeCoeffs2Ram@j+1,c
 12538  00477E  0E02               	movlw	2
 12539  004780  6E21               	movwf	writeCoeffs2Ram@j,c
 12540  004782                     l10531:
 12541                           
 12542                           ;main.c: 980: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 12543  004782  5021               	movf	writeCoeffs2Ram@j,w,c
 12544  004784  0802               	sublw	2
 12545  004786  6E1A               	movwf	??_writeCoeffs2Ram& (0+255),c
 12546  004788  501A               	movf	??_writeCoeffs2Ram,w,c
 12547  00478A  0F1C               	addlw	low writeCoeffs2Ram@c
 12548  00478C  6ED9               	movwf	fsr2l,c
 12549  00478E  6ADA               	clrf	fsr2h,c
 12550  004790  C01F  F00E         	movff	writeCoeffs2Ram@i,?___wmul
 12551  004794  C020  F00F         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 12552  004798  6A11               	clrf	?___wmul+3,c
 12553  00479A  0E03               	movlw	3
 12554  00479C  6E10               	movwf	?___wmul+2,c
 12555  00479E  ECA2  F028         	call	___wmul	;wreg free
 12556  0047A2  5021               	movf	writeCoeffs2Ram@j,w,c
 12557  0047A4  260E               	addwf	?___wmul,f,c
 12558  0047A6  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12559  0047A8  220F               	addwfc	?___wmul+1,f,c
 12560  0047AA  0EAA               	movlw	170
 12561  0047AC  240E               	addwf	?___wmul,w,c
 12562  0047AE  6E16               	movwf	?_readEEPROM,c
 12563  0047B0  0E00               	movlw	0
 12564  0047B2  200F               	addwfc	?___wmul+1,w,c
 12565  0047B4  6E17               	movwf	?_readEEPROM+1,c
 12566  0047B6  EC27  F02A         	call	_readEEPROM	;wreg free
 12567  0047BA  6EDF               	movwf	indf2,c
 12568  0047BC  0621               	decf	writeCoeffs2Ram@j,f,c
 12569  0047BE  A0D8               	btfss	status,0,c
 12570  0047C0  0622               	decf	writeCoeffs2Ram@j+1,f,c
 12571  0047C2  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12572  0047C4  0A80               	xorlw	128
 12573  0047C6  0F80               	addlw	-128
 12574  0047C8  0E01               	movlw	1
 12575  0047CA  B4D8               	btfsc	status,2,c
 12576  0047CC  5C21               	subwf	writeCoeffs2Ram@j,w,c
 12577  0047CE  E2D9               	bc	l10531
 12578                           
 12579                           ;main.c: 981: }
 12580                           ;main.c: 982: sh_coefficients[i] = *((double*) c);
 12581  0047D0  C01F  F01A         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 12582  0047D4  C020  F01B         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 12583  0047D8  90D8               	bcf	status,0,c
 12584  0047DA  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12585  0047DC  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12586  0047DE  90D8               	bcf	status,0,c
 12587  0047E0  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12588  0047E2  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12589  0047E4  0101               	movlb	1	; () banked
 12590  0047E6  0E20               	movlw	low _sh_coefficients
 12591  0047E8  241A               	addwf	??_writeCoeffs2Ram,w,c
 12592  0047EA  6ED9               	movwf	fsr2l,c
 12593  0047EC  0E01               	movlw	high _sh_coefficients
 12594  0047EE  201B               	addwfc	??_writeCoeffs2Ram+1,w,c
 12595  0047F0  6EDA               	movwf	fsr2h,c
 12596  0047F2  C01C  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 12597  0047F6  C01D  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 12598  0047FA  C01E  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 12599  0047FE  C01F  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 12600                           
 12601                           ; BSR set to: 1
 12602  004802  4A1F               	infsnz	writeCoeffs2Ram@i,f,c
 12603  004804  2A20               	incf	writeCoeffs2Ram@i+1,f,c
 12604                           
 12605                           ; BSR set to: 1
 12606  004806  5020               	movf	writeCoeffs2Ram@i+1,w,c
 12607  004808  0A80               	xorlw	128
 12608  00480A  0F80               	addlw	-128
 12609  00480C  0E06               	movlw	6
 12610  00480E  B4D8               	btfsc	status,2,c
 12611  004810  5C1F               	subwf	writeCoeffs2Ram@i,w,c
 12612  004812  B0D8               	btfsc	status,0,c
 12613                           
 12614                           ; BSR set to: 1
 12615  004814  0012               	return	
 12616  004816  D7B2               	goto	l10525
 12617  004818                     __end_of_writeCoeffs2Ram:
 12618                           	opt stack 0
 12619                           tblptru	equ	0xFF8
 12620                           tblptrh	equ	0xFF7
 12621                           tblptrl	equ	0xFF6
 12622                           tablat	equ	0xFF5
 12623                           prodh	equ	0xFF4
 12624                           prodl	equ	0xFF3
 12625                           intcon	equ	0xFF2
 12626                           postinc0	equ	0xFEE
 12627                           wreg	equ	0xFE8
 12628                           indf1	equ	0xFE7
 12629                           postdec1	equ	0xFE5
 12630                           fsr1h	equ	0xFE2
 12631                           fsr1l	equ	0xFE1
 12632                           indf2	equ	0xFDF
 12633                           postinc2	equ	0xFDE
 12634                           postdec2	equ	0xFDD
 12635                           plusw2	equ	0xFDB
 12636                           fsr2h	equ	0xFDA
 12637                           fsr2l	equ	0xFD9
 12638                           status	equ	0xFD8
 12639                           
 12640 ;; *************** function ___wmul *****************
 12641 ;; Defined at:
 12642 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;  multiplier      2   13[COMRAM] unsigned int 
 12645 ;;  multiplicand    2   15[COMRAM] unsigned int 
 12646 ;; Auto vars:     Size  Location     Type
 12647 ;;  product         2   19[COMRAM] unsigned int 
 12648 ;; Return value:  Size  Location     Type
 12649 ;;                  2   13[COMRAM] unsigned int 
 12650 ;; Registers used:
 12651 ;;		wreg, status,2, status,0, prodl, prodh
 12652 ;; Tracked objects:
 12653 ;;		On entry : 0/1
 12654 ;;		On exit  : 0/0
 12655 ;;		Unchanged: 0/0
 12656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12657 ;;      Params:         4       0       0       0       0       0       0
 12658 ;;      Locals:         4       0       0       0       0       0       0
 12659 ;;      Temps:          0       0       0       0       0       0       0
 12660 ;;      Totals:         8       0       0       0       0       0       0
 12661 ;;Total ram usage:        8 bytes
 12662 ;; Hardware stack levels used:    1
 12663 ;; Hardware stack levels required when called:    2
 12664 ;; This function calls:
 12665 ;;		Nothing
 12666 ;; This function is called by:
 12667 ;;		_doOneSecondWork
 12668 ;;		_writeCoeffs2Ram
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           	psect	text44
 12673  005144                     __ptext44:
 12674                           	opt stack 0
 12675  005144                     ___wmul:
 12676                           	opt stack 26
 12677                           
 12678                           ; BSR set to: 1
 12679                           ;incstack = 0
 12680                           ;incstack = 0
 12681  005144  500E               	movf	___wmul@multiplier,w,c
 12682  005146  0210               	mulwf	___wmul@multiplicand,c
 12683  005148  CFF3 F014          	movff	prodl,___wmul@product
 12684  00514C  CFF4 F015          	movff	prodh,___wmul@product+1
 12685  005150  500E               	movf	___wmul@multiplier,w,c
 12686  005152  0211               	mulwf	___wmul@multiplicand+1,c
 12687  005154  D808               	call	PL54	;call to abstracted procedure
 12688  005156  500F               	movf	___wmul@multiplier+1,w,c
 12689  005158  0210               	mulwf	___wmul@multiplicand,c
 12690  00515A  D805               	call	PL54	;call to abstracted procedure
 12691  00515C  C014  F00E         	movff	___wmul@product,?___wmul
 12692  005160  C015  F00F         	movff	___wmul@product+1,?___wmul+1
 12693  005164  0012               	return	
 12694  005166                     __end_of___wmul:
 12695                           	opt stack 0
 12696  005166                     PL54:
 12697                           	opt stack 26
 12698  005166  CFF3 FFF4          	movff	prodl,prodh
 12699  00516A  6AF3               	clrf	prodl,c
 12700  00516C  50F3               	movf	prodl,w,c
 12701  00516E  2614               	addwf	___wmul@product,f,c
 12702  005170  50F4               	movf	prodh,w,c
 12703  005172  2215               	addwfc	___wmul@product+1,f,c
 12704  005174  0012               	return	
 12705  005176                     __end_ofPL54:
 12706                           	opt stack 0
 12707                           tblptru	equ	0xFF8
 12708                           tblptrh	equ	0xFF7
 12709                           tblptrl	equ	0xFF6
 12710                           tablat	equ	0xFF5
 12711                           prodh	equ	0xFF4
 12712                           prodl	equ	0xFF3
 12713                           intcon	equ	0xFF2
 12714                           postinc0	equ	0xFEE
 12715                           wreg	equ	0xFE8
 12716                           indf1	equ	0xFE7
 12717                           postdec1	equ	0xFE5
 12718                           fsr1h	equ	0xFE2
 12719                           fsr1l	equ	0xFE1
 12720                           indf2	equ	0xFDF
 12721                           postinc2	equ	0xFDE
 12722                           postdec2	equ	0xFDD
 12723                           plusw2	equ	0xFDB
 12724                           fsr2h	equ	0xFDA
 12725                           fsr2l	equ	0xFD9
 12726                           status	equ	0xFD8
 12727                           
 12728 ;; *************** function _vscp_readRegister *****************
 12729 ;; Defined at:
 12730 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 12731 ;; Parameters:    Size  Location     Type
 12732 ;;  reg             1    wreg     unsigned char 
 12733 ;; Auto vars:     Size  Location     Type
 12734 ;;  reg             1   43[COMRAM] unsigned char 
 12735 ;; Return value:  Size  Location     Type
 12736 ;;                  1    wreg      unsigned char 
 12737 ;; Registers used:
 12738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12739 ;; Tracked objects:
 12740 ;;		On entry : F/0
 12741 ;;		On exit  : 0/0
 12742 ;;		Unchanged: 0/0
 12743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12744 ;;      Params:         0       0       0       0       0       0       0
 12745 ;;      Locals:         1       0       0       0       0       0       0
 12746 ;;      Temps:          0       0       0       0       0       0       0
 12747 ;;      Totals:         1       0       0       0       0       0       0
 12748 ;;Total ram usage:        1 bytes
 12749 ;; Hardware stack levels used:    1
 12750 ;; Hardware stack levels required when called:    5
 12751 ;; This function calls:
 12752 ;;		_vscp_readAppReg
 12753 ;;		_vscp_readStdReg
 12754 ;; This function is called by:
 12755 ;;		_vscp_handleProtocolEvent
 12756 ;; This function uses a non-reentrant model
 12757 ;;
 12758                           
 12759                           	psect	text45
 12760  00537E                     __ptext45:
 12761                           	opt stack 0
 12762  00537E                     _vscp_readRegister:
 12763                           	opt stack 23
 12764                           
 12765                           ;incstack = 0
 12766                           ;incstack = 0
 12767                           ;vscp_readRegister@reg stored from wreg
 12768  00537E  CFE8 F02C          	movff	wreg,vscp_readRegister@reg
 12769                           
 12770                           ; BSR set to: 0
 12771                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 12772  005382  0E7F               	movlw	127
 12773  005384  642C               	cpfsgt	vscp_readRegister@reg,c
 12774  005386  D004               	goto	l11211
 12775                           
 12776                           ; BSR set to: 0
 12777                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 12778  005388  502C               	movf	vscp_readRegister@reg,w,c
 12779  00538A  ECCA  F01A         	call	_vscp_readStdReg
 12780  00538E  D003               	goto	l1106
 12781  005390                     l11211:
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;vscp_firmware.c: 565: else {
 12785                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 12786  005390  502C               	movf	vscp_readRegister@reg,w,c
 12787  005392  ECB4  F009         	call	_vscp_readAppReg
 12788  005396                     l1106:
 12789  005396  0012               	return	
 12790  005398                     __end_of_vscp_readRegister:
 12791                           	opt stack 0
 12792                           tblptru	equ	0xFF8
 12793                           tblptrh	equ	0xFF7
 12794                           tblptrl	equ	0xFF6
 12795                           tablat	equ	0xFF5
 12796                           prodh	equ	0xFF4
 12797                           prodl	equ	0xFF3
 12798                           intcon	equ	0xFF2
 12799                           postinc0	equ	0xFEE
 12800                           wreg	equ	0xFE8
 12801                           indf1	equ	0xFE7
 12802                           postdec1	equ	0xFE5
 12803                           fsr1h	equ	0xFE2
 12804                           fsr1l	equ	0xFE1
 12805                           indf2	equ	0xFDF
 12806                           postinc2	equ	0xFDE
 12807                           postdec2	equ	0xFDD
 12808                           plusw2	equ	0xFDB
 12809                           fsr2h	equ	0xFDA
 12810                           fsr2l	equ	0xFD9
 12811                           status	equ	0xFD8
 12812                           
 12813 ;; *************** function _vscp_readStdReg *****************
 12814 ;; Defined at:
 12815 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 12816 ;; Parameters:    Size  Location     Type
 12817 ;;  reg             1    wreg     unsigned char 
 12818 ;; Auto vars:     Size  Location     Type
 12819 ;;  reg             1   42[COMRAM] unsigned char 
 12820 ;;  code            4   35[COMRAM] unsigned long 
 12821 ;;  idx             1   40[COMRAM] unsigned char 
 12822 ;;  code            4   31[COMRAM] unsigned long 
 12823 ;;  idx             1   39[COMRAM] unsigned char 
 12824 ;;  rv              1   41[COMRAM] unsigned char 
 12825 ;; Return value:  Size  Location     Type
 12826 ;;                  1    wreg      unsigned char 
 12827 ;; Registers used:
 12828 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12829 ;; Tracked objects:
 12830 ;;		On entry : E/1
 12831 ;;		On exit  : 0/0
 12832 ;;		Unchanged: 0/0
 12833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12834 ;;      Params:         0       0       0       0       0       0       0
 12835 ;;      Locals:        12       0       0       0       0       0       0
 12836 ;;      Temps:          5       0       0       0       0       0       0
 12837 ;;      Totals:        17       0       0       0       0       0       0
 12838 ;;Total ram usage:       17 bytes
 12839 ;; Hardware stack levels used:    1
 12840 ;; Hardware stack levels required when called:    4
 12841 ;; This function calls:
 12842 ;;		_vscp_getMajorVersion
 12843 ;;		_vscp_getMinorVersion
 12844 ;;		_vscp_getSubMinorVersion
 12845 ;;		_vscp_getGUID
 12846 ;;		_vscp_getMDF_URL
 12847 ;;		_vscp_getUserID
 12848 ;;		_vscp_getManufacturerId
 12849 ;;		_vscp_getBootLoaderAlgorithm
 12850 ;;		_vscp_getBufferSize
 12851 ;;		_vscp_getRegisterPagesUsed
 12852 ;;		_vscp_getFamilyCode
 12853 ;;		_vscp_getFamilyType
 12854 ;; This function is called by:
 12855 ;;		_vscp_readRegister
 12856 ;;		_vscp_handleProtocolEvent
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           	psect	text46
 12861  003594                     __ptext46:
 12862                           	opt stack 0
 12863  003594                     _vscp_readStdReg:
 12864                           	opt stack 24
 12865                           
 12866                           ;incstack = 0
 12867                           ;incstack = 0
 12868                           ;vscp_readStdReg@reg stored from wreg
 12869  003594  CFE8 F02B          	movff	wreg,vscp_readStdReg@reg
 12870                           
 12871                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 12872  003598  6A2A               	clrf	vscp_readStdReg@rv,c
 12873                           
 12874                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 12875  00359A  502B               	movf	vscp_readStdReg@reg,w,c
 12876  00359C  0A80               	xorlw	128
 12877  00359E  E104               	bnz	l11221
 12878                           
 12879                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 12880  0035A0  C04A  F02A         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12881                           
 12882                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 12883  0035A4  6A4A               	clrf	_vscp_alarmstatus,c
 12884                           
 12885                           ;vscp_firmware.c: 584: }
 12886  0035A6  D0B3               	goto	l11309
 12887  0035A8                     l11221:
 12888                           
 12889                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 12890  0035A8  502B               	movf	vscp_readStdReg@reg,w,c
 12891  0035AA  0A81               	xorlw	129
 12892  0035AC  E102               	bnz	l11225
 12893                           
 12894                           ;vscp_firmware.c: 588: rv = 1;
 12895  0035AE  0E01               	movlw	1
 12896  0035B0  D075               	goto	L31
 12897  0035B2                     l11225:
 12898                           
 12899                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 12900  0035B2  502B               	movf	vscp_readStdReg@reg,w,c
 12901  0035B4  0A82               	xorlw	130
 12902  0035B6  E102               	bnz	l11229
 12903                           
 12904                           ;vscp_firmware.c: 594: rv = 5;
 12905  0035B8  0E05               	movlw	5
 12906  0035BA  D070               	goto	L31
 12907  0035BC                     l11229:
 12908                           
 12909                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 12910  0035BC  502B               	movf	vscp_readStdReg@reg,w,c
 12911  0035BE  0A83               	xorlw	131
 12912  0035C0  E102               	bnz	l11233
 12913                           
 12914                           ;vscp_firmware.c: 600: rv = 0;
 12915  0035C2  6A2A               	clrf	vscp_readStdReg@rv,c
 12916                           
 12917                           ;vscp_firmware.c: 602: }
 12918  0035C4  D0A4               	goto	l11309
 12919  0035C6                     l11233:
 12920                           
 12921                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 12922  0035C6  502B               	movf	vscp_readStdReg@reg,w,c
 12923  0035C8  0A94               	xorlw	148
 12924  0035CA  E103               	bnz	l11237
 12925                           
 12926                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 12927  0035CC  EC8B  F02A         	call	_vscp_getMajorVersion	;wreg free
 12928  0035D0  D065               	goto	L31
 12929  0035D2                     l11237:
 12930                           
 12931                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 12932  0035D2  502B               	movf	vscp_readStdReg@reg,w,c
 12933  0035D4  0A95               	xorlw	149
 12934  0035D6  E103               	bnz	l11241
 12935                           
 12936                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 12937  0035D8  EC8A  F02A         	call	_vscp_getMinorVersion	;wreg free
 12938  0035DC  D05F               	goto	L31
 12939  0035DE                     l11241:
 12940                           
 12941                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 12942  0035DE  502B               	movf	vscp_readStdReg@reg,w,c
 12943  0035E0  0A96               	xorlw	150
 12944  0035E2  E103               	bnz	l11245
 12945                           
 12946                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 12947  0035E4  EC89  F02A         	call	_vscp_getSubMinorVersion	;wreg free
 12948  0035E8  D059               	goto	L31
 12949  0035EA                     l11245:
 12950                           
 12951                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 12952  0035EA  0E89               	movlw	137
 12953  0035EC  602B               	cpfslt	vscp_readStdReg@reg,c
 12954  0035EE  D005               	goto	l11249
 12955                           
 12956                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 12957  0035F0  502B               	movf	vscp_readStdReg@reg,w,c
 12958  0035F2  0F7C               	addlw	124
 12959  0035F4  EC13  F02A         	call	_vscp_getUserID
 12960  0035F8  D051               	goto	L31
 12961  0035FA                     l11249:
 12962                           
 12963                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 12964                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 12965  0035FA  0E88               	movlw	136
 12966  0035FC  642B               	cpfsgt	vscp_readStdReg@reg,c
 12967  0035FE  D008               	goto	l11255
 12968  003600  0E91               	movlw	145
 12969  003602  602B               	cpfslt	vscp_readStdReg@reg,c
 12970  003604  D005               	goto	l11255
 12971                           
 12972                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 12973  003606  502B               	movf	vscp_readStdReg@reg,w,c
 12974  003608  0F77               	addlw	119
 12975  00360A  EC09  F02A         	call	_vscp_getManufacturerId
 12976  00360E  D046               	goto	L31
 12977  003610                     l11255:
 12978                           
 12979                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 12980  003610  502B               	movf	vscp_readStdReg@reg,w,c
 12981  003612  0A91               	xorlw	145
 12982  003614  E103               	bnz	l11259
 12983                           
 12984                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 12985  003616  C0CA  F02A         	movff	_vscp_nickname,vscp_readStdReg@rv
 12986                           
 12987                           ;vscp_firmware.c: 639: }
 12988  00361A  D079               	goto	l11309
 12989  00361C                     l11259:
 12990                           
 12991                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 12992  00361C  502B               	movf	vscp_readStdReg@reg,w,c
 12993  00361E  0A93               	xorlw	147
 12994  003620  E103               	bnz	l11263
 12995                           
 12996                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 12997  003622  C046  F02A         	movff	_vscp_page_select,vscp_readStdReg@rv
 12998                           
 12999                           ;vscp_firmware.c: 645: }
 13000  003626  D073               	goto	l11309
 13001  003628                     l11263:
 13002                           
 13003                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13004  003628  502B               	movf	vscp_readStdReg@reg,w,c
 13005  00362A  0A92               	xorlw	146
 13006  00362C  E102               	bnz	l11267
 13007                           
 13008                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13009  00362E  5047               	movf	_vscp_page_select+1,w,c
 13010  003630  D035               	goto	L31
 13011  003632                     l11267:
 13012                           
 13013                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13014  003632  502B               	movf	vscp_readStdReg@reg,w,c
 13015  003634  0A97               	xorlw	151
 13016  003636  E103               	bnz	l11271
 13017                           
 13018                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13019  003638  EC88  F02A         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13020  00363C  D02F               	goto	L31
 13021  00363E                     l11271:
 13022                           
 13023                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13024  00363E  502B               	movf	vscp_readStdReg@reg,w,c
 13025  003640  0A98               	xorlw	152
 13026  003642  E103               	bnz	l11275
 13027                           
 13028                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13029  003644  EC87  F02A         	call	_vscp_getBufferSize	;wreg free
 13030  003648  D029               	goto	L31
 13031  00364A                     l11275:
 13032                           
 13033                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13034  00364A  502B               	movf	vscp_readStdReg@reg,w,c
 13035  00364C  0A99               	xorlw	153
 13036  00364E  E103               	bnz	l11279
 13037                           
 13038                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13039  003650  EC86  F02A         	call	_vscp_getRegisterPagesUsed	;wreg free
 13040  003654  D023               	goto	L31
 13041  003656                     l11279:
 13042                           
 13043                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13044                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13045  003656  0E99               	movlw	153
 13046  003658  642B               	cpfsgt	vscp_readStdReg@reg,c
 13047  00365A  D022               	goto	l11289
 13048  00365C  0E9E               	movlw	158
 13049  00365E  602B               	cpfslt	vscp_readStdReg@reg,c
 13050  003660  D01F               	goto	l11289
 13051                           
 13052                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13053  003662  EC6D  F02A         	call	_vscp_getFamilyCode	;wreg free
 13054  003666  C011  F023         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13055  00366A  C010  F022         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13056  00366E  C00F  F021         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13057  003672  C00E  F020         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13058                           
 13059                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13060  003676  502B               	movf	vscp_readStdReg@reg,w,c
 13061  003678  0F66               	addlw	102
 13062  00367A  6E28               	movwf	vscp_readStdReg@idx,c
 13063                           
 13064                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13065  00367C  5028               	movf	vscp_readStdReg@idx,w,c
 13066  00367E  D849               	call	PL28	;call to abstracted procedure
 13067  003680  C020  F01C         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13068  003684  C021  F01D         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13069  003688  C022  F01E         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13070  00368C  C023  F01F         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13071  003690  2AE8               	incf	wreg,f,c
 13072  003692  D001               	goto	u9400
 13073  003694                     u9405:
 13074  003694  D848               	call	PL78	;call to abstracted procedure
 13075  003696                     u9400:
 13076  003696  2EE8               	decfsz	wreg,f,c
 13077  003698  D7FD               	goto	u9405
 13078  00369A  D024               	goto	L32
 13079  00369C                     L31:
 13080  00369C  6E2A               	movwf	vscp_readStdReg@rv,c
 13081                           
 13082                           ;vscp_firmware.c: 671: }
 13083  00369E  D037               	goto	l11309
 13084  0036A0                     l11289:
 13085                           
 13086                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13087                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13088  0036A0  0E9D               	movlw	157
 13089  0036A2  642B               	cpfsgt	vscp_readStdReg@reg,c
 13090  0036A4  D021               	goto	l11299
 13091  0036A6  0EA2               	movlw	162
 13092  0036A8  602B               	cpfslt	vscp_readStdReg@reg,c
 13093  0036AA  D01E               	goto	l11299
 13094                           
 13095                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13096  0036AC  EC68  F02A         	call	_vscp_getFamilyType	;wreg free
 13097  0036B0  C011  F027         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1147+3
 13098  0036B4  C010  F026         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1147+2
 13099  0036B8  C00F  F025         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1147+1
 13100  0036BC  C00E  F024         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1147
 13101                           
 13102                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13103  0036C0  502B               	movf	vscp_readStdReg@reg,w,c
 13104  0036C2  0F62               	addlw	98
 13105  0036C4  6E29               	movwf	vscp_readStdReg@idx_1148,c
 13106                           
 13107                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13108  0036C6  5029               	movf	vscp_readStdReg@idx_1148,w,c
 13109  0036C8  D824               	call	PL28	;call to abstracted procedure
 13110  0036CA  C024  F01C         	movff	vscp_readStdReg@code_1147,??_vscp_readStdReg+1
 13111  0036CE  C025  F01D         	movff	vscp_readStdReg@code_1147+1,??_vscp_readStdReg+2
 13112  0036D2  C026  F01E         	movff	vscp_readStdReg@code_1147+2,??_vscp_readStdReg+3
 13113  0036D6  C027  F01F         	movff	vscp_readStdReg@code_1147+3,??_vscp_readStdReg+4
 13114  0036DA  2AE8               	incf	wreg,f,c
 13115  0036DC  D001               	goto	u9430
 13116  0036DE                     u9435:
 13117  0036DE  D823               	call	PL78	;call to abstracted procedure
 13118  0036E0                     u9430:
 13119  0036E0  2EE8               	decfsz	wreg,f,c
 13120  0036E2  D7FD               	goto	u9435
 13121  0036E4                     L32:
 13122  0036E4  501C               	movf	??_vscp_readStdReg+1,w,c
 13123  0036E6  D7DA               	goto	L31
 13124  0036E8                     l11299:
 13125                           
 13126                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13127                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13128  0036E8  0ECF               	movlw	207
 13129  0036EA  642B               	cpfsgt	vscp_readStdReg@reg,c
 13130  0036EC  D008               	goto	l11305
 13131  0036EE  0EE0               	movlw	224
 13132  0036F0  602B               	cpfslt	vscp_readStdReg@reg,c
 13133  0036F2  D005               	goto	l11305
 13134                           
 13135                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13136  0036F4  502B               	movf	vscp_readStdReg@reg,w,c
 13137  0036F6  0F30               	addlw	48
 13138  0036F8  EC1D  F02A         	call	_vscp_getGUID
 13139  0036FC  D7CF               	goto	L31
 13140  0036FE                     l11305:
 13141                           
 13142                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13143  0036FE  0EDF               	movlw	223
 13144  003700  642B               	cpfsgt	vscp_readStdReg@reg,c
 13145  003702  D005               	goto	l11309
 13146                           
 13147                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13148  003704  502B               	movf	vscp_readStdReg@reg,w,c
 13149  003706  0F20               	addlw	32
 13150  003708  ECF1  F029         	call	_vscp_getMDF_URL
 13151  00370C  D7C7               	goto	L31
 13152  00370E                     l11309:
 13153                           
 13154                           ;vscp_firmware.c: 691: }
 13155                           ;vscp_firmware.c: 693: return rv;
 13156  00370E  502A               	movf	vscp_readStdReg@rv,w,c
 13157  003710  0012               	return	
 13158  003712                     __end_of_vscp_readStdReg:
 13159                           	opt stack 0
 13160  003712                     PL28:
 13161                           	opt stack 24
 13162  003712  0803               	sublw	3
 13163  003714  6E1B               	movwf	??_vscp_readStdReg& (0+255),c
 13164  003716  90D8               	bcf	status,0,c
 13165  003718  361B               	rlcf	??_vscp_readStdReg,f,c
 13166  00371A  90D8               	bcf	status,0,c
 13167  00371C  361B               	rlcf	??_vscp_readStdReg,f,c
 13168  00371E  90D8               	bcf	status,0,c
 13169  003720  361B               	rlcf	??_vscp_readStdReg,f,c
 13170  003722  501B               	movf	??_vscp_readStdReg,w,c
 13171  003724  0012               	return	
 13172  003726                     __end_ofPL28:
 13173                           	opt stack 0
 13174  003726                     PL78:
 13175                           	opt stack 24
 13176  003726  90D8               	bcf	status,0,c
 13177  003728  321F               	rrcf	??_vscp_readStdReg+4,f,c
 13178  00372A  321E               	rrcf	??_vscp_readStdReg+3,f,c
 13179  00372C  321D               	rrcf	??_vscp_readStdReg+2,f,c
 13180  00372E  321C               	rrcf	??_vscp_readStdReg+1,f,c
 13181  003730  0012               	return	
 13182  003732                     __end_ofPL78:
 13183                           	opt stack 0
 13184                           tblptru	equ	0xFF8
 13185                           tblptrh	equ	0xFF7
 13186                           tblptrl	equ	0xFF6
 13187                           tablat	equ	0xFF5
 13188                           prodh	equ	0xFF4
 13189                           prodl	equ	0xFF3
 13190                           intcon	equ	0xFF2
 13191                           postinc0	equ	0xFEE
 13192                           wreg	equ	0xFE8
 13193                           indf1	equ	0xFE7
 13194                           postdec1	equ	0xFE5
 13195                           fsr1h	equ	0xFE2
 13196                           fsr1l	equ	0xFE1
 13197                           indf2	equ	0xFDF
 13198                           postinc2	equ	0xFDE
 13199                           postdec2	equ	0xFDD
 13200                           plusw2	equ	0xFDB
 13201                           fsr2h	equ	0xFDA
 13202                           fsr2l	equ	0xFD9
 13203                           status	equ	0xFD8
 13204                           
 13205 ;; *************** function _vscp_getFamilyType *****************
 13206 ;; Defined at:
 13207 ;;		line 2840 in file "../main.c"
 13208 ;; Parameters:    Size  Location     Type
 13209 ;;		None
 13210 ;; Auto vars:     Size  Location     Type
 13211 ;;		None
 13212 ;; Return value:  Size  Location     Type
 13213 ;;                  4   13[COMRAM] unsigned long 
 13214 ;; Registers used:
 13215 ;;		None
 13216 ;; Tracked objects:
 13217 ;;		On entry : E/1
 13218 ;;		On exit  : E/0
 13219 ;;		Unchanged: E/0
 13220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13221 ;;      Params:         4       0       0       0       0       0       0
 13222 ;;      Locals:         0       0       0       0       0       0       0
 13223 ;;      Temps:          0       0       0       0       0       0       0
 13224 ;;      Totals:         4       0       0       0       0       0       0
 13225 ;;Total ram usage:        4 bytes
 13226 ;; Hardware stack levels used:    1
 13227 ;; Hardware stack levels required when called:    2
 13228 ;; This function calls:
 13229 ;;		Nothing
 13230 ;; This function is called by:
 13231 ;;		_vscp_readStdReg
 13232 ;; This function uses a non-reentrant model
 13233 ;;
 13234                           
 13235                           	psect	text47
 13236  0054D0                     __ptext47:
 13237                           	opt stack 0
 13238  0054D0                     _vscp_getFamilyType:
 13239                           	opt stack 25
 13240                           
 13241                           ;main.c: 2841: return 0;
 13242                           
 13243                           ;incstack = 0
 13244                           ;incstack = 0
 13245  0054D0  6A0E               	clrf	?_vscp_getFamilyType,c
 13246  0054D2  6A0F               	clrf	?_vscp_getFamilyType+1,c
 13247  0054D4  6A10               	clrf	?_vscp_getFamilyType+2,c
 13248  0054D6  6A11               	clrf	?_vscp_getFamilyType+3,c
 13249  0054D8  0012               	return	
 13250  0054DA                     __end_of_vscp_getFamilyType:
 13251                           	opt stack 0
 13252                           tblptru	equ	0xFF8
 13253                           tblptrh	equ	0xFF7
 13254                           tblptrl	equ	0xFF6
 13255                           tablat	equ	0xFF5
 13256                           prodh	equ	0xFF4
 13257                           prodl	equ	0xFF3
 13258                           intcon	equ	0xFF2
 13259                           postinc0	equ	0xFEE
 13260                           wreg	equ	0xFE8
 13261                           indf1	equ	0xFE7
 13262                           postdec1	equ	0xFE5
 13263                           fsr1h	equ	0xFE2
 13264                           fsr1l	equ	0xFE1
 13265                           indf2	equ	0xFDF
 13266                           postinc2	equ	0xFDE
 13267                           postdec2	equ	0xFDD
 13268                           plusw2	equ	0xFDB
 13269                           fsr2h	equ	0xFDA
 13270                           fsr2l	equ	0xFD9
 13271                           status	equ	0xFD8
 13272                           
 13273 ;; *************** function _vscp_getFamilyCode *****************
 13274 ;; Defined at:
 13275 ;;		line 2830 in file "../main.c"
 13276 ;; Parameters:    Size  Location     Type
 13277 ;;		None
 13278 ;; Auto vars:     Size  Location     Type
 13279 ;;		None
 13280 ;; Return value:  Size  Location     Type
 13281 ;;                  4   13[COMRAM] unsigned long 
 13282 ;; Registers used:
 13283 ;;		None
 13284 ;; Tracked objects:
 13285 ;;		On entry : E/1
 13286 ;;		On exit  : E/0
 13287 ;;		Unchanged: E/0
 13288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13289 ;;      Params:         4       0       0       0       0       0       0
 13290 ;;      Locals:         0       0       0       0       0       0       0
 13291 ;;      Temps:          0       0       0       0       0       0       0
 13292 ;;      Totals:         4       0       0       0       0       0       0
 13293 ;;Total ram usage:        4 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    2
 13296 ;; This function calls:
 13297 ;;		Nothing
 13298 ;; This function is called by:
 13299 ;;		_vscp_readStdReg
 13300 ;; This function uses a non-reentrant model
 13301 ;;
 13302                           
 13303                           	psect	text48
 13304  0054DA                     __ptext48:
 13305                           	opt stack 0
 13306  0054DA                     _vscp_getFamilyCode:
 13307                           	opt stack 25
 13308                           
 13309                           ;main.c: 2831: return 0L;
 13310                           
 13311                           ;incstack = 0
 13312                           ;incstack = 0
 13313  0054DA  6A0E               	clrf	?_vscp_getFamilyCode,c
 13314  0054DC  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 13315  0054DE  6A10               	clrf	?_vscp_getFamilyCode+2,c
 13316  0054E0  6A11               	clrf	?_vscp_getFamilyCode+3,c
 13317  0054E2  0012               	return	
 13318  0054E4                     __end_of_vscp_getFamilyCode:
 13319                           	opt stack 0
 13320                           tblptru	equ	0xFF8
 13321                           tblptrh	equ	0xFF7
 13322                           tblptrl	equ	0xFF6
 13323                           tablat	equ	0xFF5
 13324                           prodh	equ	0xFF4
 13325                           prodl	equ	0xFF3
 13326                           intcon	equ	0xFF2
 13327                           postinc0	equ	0xFEE
 13328                           wreg	equ	0xFE8
 13329                           indf1	equ	0xFE7
 13330                           postdec1	equ	0xFE5
 13331                           fsr1h	equ	0xFE2
 13332                           fsr1l	equ	0xFE1
 13333                           indf2	equ	0xFDF
 13334                           postinc2	equ	0xFDE
 13335                           postdec2	equ	0xFDD
 13336                           plusw2	equ	0xFDB
 13337                           fsr2h	equ	0xFDA
 13338                           fsr2l	equ	0xFD9
 13339                           status	equ	0xFD8
 13340                           
 13341 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13342 ;; Defined at:
 13343 ;;		line 2729 in file "../main.c"
 13344 ;; Parameters:    Size  Location     Type
 13345 ;;		None
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;		None
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  1    wreg      unsigned char 
 13350 ;; Registers used:
 13351 ;;		wreg
 13352 ;; Tracked objects:
 13353 ;;		On entry : E/1
 13354 ;;		On exit  : E/0
 13355 ;;		Unchanged: E/0
 13356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13357 ;;      Params:         0       0       0       0       0       0       0
 13358 ;;      Locals:         0       0       0       0       0       0       0
 13359 ;;      Temps:          0       0       0       0       0       0       0
 13360 ;;      Totals:         0       0       0       0       0       0       0
 13361 ;;Total ram usage:        0 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; Hardware stack levels required when called:    2
 13364 ;; This function calls:
 13365 ;;		Nothing
 13366 ;; This function is called by:
 13367 ;;		_vscp_readStdReg
 13368 ;; This function uses a non-reentrant model
 13369 ;;
 13370                           
 13371                           	psect	text49
 13372  00550C                     __ptext49:
 13373                           	opt stack 0
 13374  00550C                     _vscp_getRegisterPagesUsed:
 13375                           	opt stack 25
 13376                           
 13377                           ;main.c: 2730: return 1;
 13378                           
 13379                           ;incstack = 0
 13380                           ;incstack = 0
 13381  00550C  0C01               	retlw	1
 13382  00550E                     __end_of_vscp_getRegisterPagesUsed:
 13383                           	opt stack 0
 13384                           tblptru	equ	0xFF8
 13385                           tblptrh	equ	0xFF7
 13386                           tblptrl	equ	0xFF6
 13387                           tablat	equ	0xFF5
 13388                           prodh	equ	0xFF4
 13389                           prodl	equ	0xFF3
 13390                           intcon	equ	0xFF2
 13391                           postinc0	equ	0xFEE
 13392                           wreg	equ	0xFE8
 13393                           indf1	equ	0xFE7
 13394                           postdec1	equ	0xFE5
 13395                           fsr1h	equ	0xFE2
 13396                           fsr1l	equ	0xFE1
 13397                           indf2	equ	0xFDF
 13398                           postinc2	equ	0xFDE
 13399                           postdec2	equ	0xFDD
 13400                           plusw2	equ	0xFDB
 13401                           fsr2h	equ	0xFDA
 13402                           fsr2l	equ	0xFD9
 13403                           status	equ	0xFD8
 13404                           
 13405 ;; *************** function _vscp_getBufferSize *****************
 13406 ;; Defined at:
 13407 ;;		line 2682 in file "../main.c"
 13408 ;; Parameters:    Size  Location     Type
 13409 ;;		None
 13410 ;; Auto vars:     Size  Location     Type
 13411 ;;		None
 13412 ;; Return value:  Size  Location     Type
 13413 ;;                  1    wreg      unsigned char 
 13414 ;; Registers used:
 13415 ;;		wreg
 13416 ;; Tracked objects:
 13417 ;;		On entry : E/1
 13418 ;;		On exit  : E/0
 13419 ;;		Unchanged: E/0
 13420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13421 ;;      Params:         0       0       0       0       0       0       0
 13422 ;;      Locals:         0       0       0       0       0       0       0
 13423 ;;      Temps:          0       0       0       0       0       0       0
 13424 ;;      Totals:         0       0       0       0       0       0       0
 13425 ;;Total ram usage:        0 bytes
 13426 ;; Hardware stack levels used:    1
 13427 ;; Hardware stack levels required when called:    2
 13428 ;; This function calls:
 13429 ;;		Nothing
 13430 ;; This function is called by:
 13431 ;;		_vscp_readStdReg
 13432 ;; This function uses a non-reentrant model
 13433 ;;
 13434                           
 13435                           	psect	text50
 13436  00550E                     __ptext50:
 13437                           	opt stack 0
 13438  00550E                     _vscp_getBufferSize:
 13439                           	opt stack 25
 13440                           
 13441                           ;main.c: 2683: return 8;
 13442                           
 13443                           ;incstack = 0
 13444                           ;incstack = 0
 13445  00550E  0C08               	retlw	8
 13446  005510                     __end_of_vscp_getBufferSize:
 13447                           	opt stack 0
 13448                           tblptru	equ	0xFF8
 13449                           tblptrh	equ	0xFF7
 13450                           tblptrl	equ	0xFF6
 13451                           tablat	equ	0xFF5
 13452                           prodh	equ	0xFF4
 13453                           prodl	equ	0xFF3
 13454                           intcon	equ	0xFF2
 13455                           postinc0	equ	0xFEE
 13456                           wreg	equ	0xFE8
 13457                           indf1	equ	0xFE7
 13458                           postdec1	equ	0xFE5
 13459                           fsr1h	equ	0xFE2
 13460                           fsr1l	equ	0xFE1
 13461                           indf2	equ	0xFDF
 13462                           postinc2	equ	0xFDE
 13463                           postdec2	equ	0xFDD
 13464                           plusw2	equ	0xFDB
 13465                           fsr2h	equ	0xFDA
 13466                           fsr2l	equ	0xFD9
 13467                           status	equ	0xFD8
 13468                           
 13469 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13470 ;; Defined at:
 13471 ;;		line 2673 in file "../main.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;		None
 13474 ;; Auto vars:     Size  Location     Type
 13475 ;;		None
 13476 ;; Return value:  Size  Location     Type
 13477 ;;                  1    wreg      unsigned char 
 13478 ;; Registers used:
 13479 ;;		wreg
 13480 ;; Tracked objects:
 13481 ;;		On entry : E/1
 13482 ;;		On exit  : E/0
 13483 ;;		Unchanged: E/0
 13484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13485 ;;      Params:         0       0       0       0       0       0       0
 13486 ;;      Locals:         0       0       0       0       0       0       0
 13487 ;;      Temps:          0       0       0       0       0       0       0
 13488 ;;      Totals:         0       0       0       0       0       0       0
 13489 ;;Total ram usage:        0 bytes
 13490 ;; Hardware stack levels used:    1
 13491 ;; Hardware stack levels required when called:    2
 13492 ;; This function calls:
 13493 ;;		Nothing
 13494 ;; This function is called by:
 13495 ;;		_vscp_readStdReg
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           	psect	text51
 13500  005510                     __ptext51:
 13501                           	opt stack 0
 13502  005510                     _vscp_getBootLoaderAlgorithm:
 13503                           	opt stack 25
 13504                           
 13505                           ;main.c: 2674: return 0x01;
 13506                           
 13507                           ;incstack = 0
 13508                           ;incstack = 0
 13509  005510  0C01               	retlw	1
 13510  005512                     __end_of_vscp_getBootLoaderAlgorithm:
 13511                           	opt stack 0
 13512                           tblptru	equ	0xFF8
 13513                           tblptrh	equ	0xFF7
 13514                           tblptrl	equ	0xFF6
 13515                           tablat	equ	0xFF5
 13516                           prodh	equ	0xFF4
 13517                           prodl	equ	0xFF3
 13518                           intcon	equ	0xFF2
 13519                           postinc0	equ	0xFEE
 13520                           wreg	equ	0xFE8
 13521                           indf1	equ	0xFE7
 13522                           postdec1	equ	0xFE5
 13523                           fsr1h	equ	0xFE2
 13524                           fsr1l	equ	0xFE1
 13525                           indf2	equ	0xFDF
 13526                           postinc2	equ	0xFDE
 13527                           postdec2	equ	0xFDD
 13528                           plusw2	equ	0xFDB
 13529                           fsr2h	equ	0xFDA
 13530                           fsr2l	equ	0xFD9
 13531                           status	equ	0xFD8
 13532                           
 13533 ;; *************** function _vscp_getManufacturerId *****************
 13534 ;; Defined at:
 13535 ;;		line 2653 in file "../main.c"
 13536 ;; Parameters:    Size  Location     Type
 13537 ;;  idx             1    wreg     unsigned char 
 13538 ;; Auto vars:     Size  Location     Type
 13539 ;;  idx             1   25[COMRAM] unsigned char 
 13540 ;; Return value:  Size  Location     Type
 13541 ;;                  1    wreg      unsigned char 
 13542 ;; Registers used:
 13543 ;;		wreg, status,2, status,0, cstack
 13544 ;; Tracked objects:
 13545 ;;		On entry : 0/1
 13546 ;;		On exit  : 0/0
 13547 ;;		Unchanged: 0/0
 13548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13549 ;;      Params:         0       0       0       0       0       0       0
 13550 ;;      Locals:         1       0       0       0       0       0       0
 13551 ;;      Temps:          0       0       0       0       0       0       0
 13552 ;;      Totals:         1       0       0       0       0       0       0
 13553 ;;Total ram usage:        1 bytes
 13554 ;; Hardware stack levels used:    1
 13555 ;; Hardware stack levels required when called:    3
 13556 ;; This function calls:
 13557 ;;		_readEEPROM
 13558 ;; This function is called by:
 13559 ;;		_vscp_readStdReg
 13560 ;;		_vscp_writeStdReg
 13561 ;; This function uses a non-reentrant model
 13562 ;;
 13563                           
 13564                           	psect	text52
 13565  005412                     __ptext52:
 13566                           	opt stack 0
 13567  005412                     _vscp_getManufacturerId:
 13568                           	opt stack 24
 13569                           
 13570                           ;incstack = 0
 13571                           ;incstack = 0
 13572                           ;vscp_getManufacturerId@idx stored from wreg
 13573  005412  CFE8 F01A          	movff	wreg,vscp_getManufacturerId@idx
 13574                           
 13575                           ;main.c: 2654: return readEEPROM(0x09 + idx);
 13576  005416  0E09               	movlw	9
 13577  005418  241A               	addwf	vscp_getManufacturerId@idx,w,c
 13578  00541A  6E16               	movwf	?_readEEPROM,c
 13579  00541C  6A17               	clrf	?_readEEPROM+1,c
 13580  00541E  0E00               	movlw	0
 13581  005420  2217               	addwfc	?_readEEPROM+1,f,c
 13582  005422  EF27  F02A         	goto	_readEEPROM	;wreg free
 13583  005426                     __end_of_vscp_getManufacturerId:
 13584                           	opt stack 0
 13585                           tblptru	equ	0xFF8
 13586                           tblptrh	equ	0xFF7
 13587                           tblptrl	equ	0xFF6
 13588                           tablat	equ	0xFF5
 13589                           prodh	equ	0xFF4
 13590                           prodl	equ	0xFF3
 13591                           intcon	equ	0xFF2
 13592                           postinc0	equ	0xFEE
 13593                           wreg	equ	0xFE8
 13594                           indf1	equ	0xFE7
 13595                           postdec1	equ	0xFE5
 13596                           fsr1h	equ	0xFE2
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           postdec2	equ	0xFDD
 13601                           plusw2	equ	0xFDB
 13602                           fsr2h	equ	0xFDA
 13603                           fsr2l	equ	0xFD9
 13604                           status	equ	0xFD8
 13605                           
 13606 ;; *************** function _vscp_getUserID *****************
 13607 ;; Defined at:
 13608 ;;		line 2633 in file "../main.c"
 13609 ;; Parameters:    Size  Location     Type
 13610 ;;  idx             1    wreg     unsigned char 
 13611 ;; Auto vars:     Size  Location     Type
 13612 ;;  idx             1   25[COMRAM] unsigned char 
 13613 ;; Return value:  Size  Location     Type
 13614 ;;                  1    wreg      unsigned char 
 13615 ;; Registers used:
 13616 ;;		wreg, status,2, status,0, cstack
 13617 ;; Tracked objects:
 13618 ;;		On entry : 0/1
 13619 ;;		On exit  : 0/0
 13620 ;;		Unchanged: 0/0
 13621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13622 ;;      Params:         0       0       0       0       0       0       0
 13623 ;;      Locals:         1       0       0       0       0       0       0
 13624 ;;      Temps:          0       0       0       0       0       0       0
 13625 ;;      Totals:         1       0       0       0       0       0       0
 13626 ;;Total ram usage:        1 bytes
 13627 ;; Hardware stack levels used:    1
 13628 ;; Hardware stack levels required when called:    3
 13629 ;; This function calls:
 13630 ;;		_readEEPROM
 13631 ;; This function is called by:
 13632 ;;		_vscp_readStdReg
 13633 ;;		_vscp_writeStdReg
 13634 ;; This function uses a non-reentrant model
 13635 ;;
 13636                           
 13637                           	psect	text53
 13638  005426                     __ptext53:
 13639                           	opt stack 0
 13640  005426                     _vscp_getUserID:
 13641                           	opt stack 24
 13642                           
 13643                           ;incstack = 0
 13644                           ;incstack = 0
 13645                           ;vscp_getUserID@idx stored from wreg
 13646  005426  CFE8 F01A          	movff	wreg,vscp_getUserID@idx
 13647                           
 13648                           ;main.c: 2634: return readEEPROM(0x04 + idx);
 13649  00542A  0E04               	movlw	4
 13650  00542C  241A               	addwf	vscp_getUserID@idx,w,c
 13651  00542E  6E16               	movwf	?_readEEPROM,c
 13652  005430  6A17               	clrf	?_readEEPROM+1,c
 13653  005432  0E00               	movlw	0
 13654  005434  2217               	addwfc	?_readEEPROM+1,f,c
 13655  005436  EF27  F02A         	goto	_readEEPROM	;wreg free
 13656  00543A                     __end_of_vscp_getUserID:
 13657                           	opt stack 0
 13658                           tblptru	equ	0xFF8
 13659                           tblptrh	equ	0xFF7
 13660                           tblptrl	equ	0xFF6
 13661                           tablat	equ	0xFF5
 13662                           prodh	equ	0xFF4
 13663                           prodl	equ	0xFF3
 13664                           intcon	equ	0xFF2
 13665                           postinc0	equ	0xFEE
 13666                           wreg	equ	0xFE8
 13667                           indf1	equ	0xFE7
 13668                           postdec1	equ	0xFE5
 13669                           fsr1h	equ	0xFE2
 13670                           fsr1l	equ	0xFE1
 13671                           indf2	equ	0xFDF
 13672                           postinc2	equ	0xFDE
 13673                           postdec2	equ	0xFDD
 13674                           plusw2	equ	0xFDB
 13675                           fsr2h	equ	0xFDA
 13676                           fsr2l	equ	0xFD9
 13677                           status	equ	0xFD8
 13678                           
 13679 ;; *************** function _vscp_getMDF_URL *****************
 13680 ;; Defined at:
 13681 ;;		line 2624 in file "../main.c"
 13682 ;; Parameters:    Size  Location     Type
 13683 ;;  idx             1    wreg     unsigned char 
 13684 ;; Auto vars:     Size  Location     Type
 13685 ;;  idx             1   14[COMRAM] unsigned char 
 13686 ;; Return value:  Size  Location     Type
 13687 ;;                  1    wreg      unsigned char 
 13688 ;; Registers used:
 13689 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13690 ;; Tracked objects:
 13691 ;;		On entry : E/0
 13692 ;;		On exit  : E/0
 13693 ;;		Unchanged: E/0
 13694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13695 ;;      Params:         0       0       0       0       0       0       0
 13696 ;;      Locals:         1       0       0       0       0       0       0
 13697 ;;      Temps:          1       0       0       0       0       0       0
 13698 ;;      Totals:         2       0       0       0       0       0       0
 13699 ;;Total ram usage:        2 bytes
 13700 ;; Hardware stack levels used:    1
 13701 ;; Hardware stack levels required when called:    2
 13702 ;; This function calls:
 13703 ;;		Nothing
 13704 ;; This function is called by:
 13705 ;;		_vscp_readStdReg
 13706 ;;		_vscp_handleProtocolEvent
 13707 ;; This function uses a non-reentrant model
 13708 ;;
 13709                           
 13710                           	psect	text54
 13711  0053E2                     __ptext54:
 13712                           	opt stack 0
 13713  0053E2                     _vscp_getMDF_URL:
 13714                           	opt stack 25
 13715                           
 13716                           ;incstack = 0
 13717                           ;incstack = 0
 13718                           ;vscp_getMDF_URL@idx stored from wreg
 13719  0053E2  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13720                           
 13721                           ;main.c: 2625: return vscp_deviceURL[ idx ];
 13722  0053E6  500F               	movf	vscp_getMDF_URL@idx,w,c
 13723  0053E8  0F00               	addlw	low _vscp_deviceURL
 13724  0053EA  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13725  0053EC  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13726  0053F0  0E06               	movlw	high __smallconst
 13727  0053F2  6EF7               	movwf	tblptrh,c
 13728  0053F4  0008               	tblrd		*
 13729  0053F6  50F5               	movf	tablat,w,c
 13730  0053F8  0012               	return	
 13731  0053FA                     __end_of_vscp_getMDF_URL:
 13732                           	opt stack 0
 13733                           tblptru	equ	0xFF8
 13734                           tblptrh	equ	0xFF7
 13735                           tblptrl	equ	0xFF6
 13736                           tablat	equ	0xFF5
 13737                           prodh	equ	0xFF4
 13738                           prodl	equ	0xFF3
 13739                           intcon	equ	0xFF2
 13740                           postinc0	equ	0xFEE
 13741                           wreg	equ	0xFE8
 13742                           indf1	equ	0xFE7
 13743                           postdec1	equ	0xFE5
 13744                           fsr1h	equ	0xFE2
 13745                           fsr1l	equ	0xFE1
 13746                           indf2	equ	0xFDF
 13747                           postinc2	equ	0xFDE
 13748                           postdec2	equ	0xFDD
 13749                           plusw2	equ	0xFDB
 13750                           fsr2h	equ	0xFDA
 13751                           fsr2l	equ	0xFD9
 13752                           status	equ	0xFD8
 13753                           
 13754 ;; *************** function _vscp_getGUID *****************
 13755 ;; Defined at:
 13756 ;;		line 2601 in file "../main.c"
 13757 ;; Parameters:    Size  Location     Type
 13758 ;;  idx             1    wreg     unsigned char 
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;  idx             1   25[COMRAM] unsigned char 
 13761 ;; Return value:  Size  Location     Type
 13762 ;;                  1    wreg      unsigned char 
 13763 ;; Registers used:
 13764 ;;		wreg, status,2, status,0, cstack
 13765 ;; Tracked objects:
 13766 ;;		On entry : 0/1
 13767 ;;		On exit  : 0/0
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13770 ;;      Params:         0       0       0       0       0       0       0
 13771 ;;      Locals:         1       0       0       0       0       0       0
 13772 ;;      Temps:          0       0       0       0       0       0       0
 13773 ;;      Totals:         1       0       0       0       0       0       0
 13774 ;;Total ram usage:        1 bytes
 13775 ;; Hardware stack levels used:    1
 13776 ;; Hardware stack levels required when called:    3
 13777 ;; This function calls:
 13778 ;;		_readEEPROM
 13779 ;; This function is called by:
 13780 ;;		_vscp_readStdReg
 13781 ;;		_vscp_writeStdReg
 13782 ;;		_vscp_handleProtocolEvent
 13783 ;; This function uses a non-reentrant model
 13784 ;;
 13785                           
 13786                           	psect	text55
 13787  00543A                     __ptext55:
 13788                           	opt stack 0
 13789  00543A                     _vscp_getGUID:
 13790                           	opt stack 24
 13791                           
 13792                           ;incstack = 0
 13793                           ;incstack = 0
 13794                           ;vscp_getGUID@idx stored from wreg
 13795  00543A  CFE8 F01A          	movff	wreg,vscp_getGUID@idx
 13796                           
 13797                           ;main.c: 2602: return readEEPROM(0x11 + idx);
 13798  00543E  0E11               	movlw	17
 13799  005440  241A               	addwf	vscp_getGUID@idx,w,c
 13800  005442  6E16               	movwf	?_readEEPROM,c
 13801  005444  6A17               	clrf	?_readEEPROM+1,c
 13802  005446  0E00               	movlw	0
 13803  005448  2217               	addwfc	?_readEEPROM+1,f,c
 13804  00544A  EF27  F02A         	goto	_readEEPROM	;wreg free
 13805  00544E                     __end_of_vscp_getGUID:
 13806                           	opt stack 0
 13807                           tblptru	equ	0xFF8
 13808                           tblptrh	equ	0xFF7
 13809                           tblptrl	equ	0xFF6
 13810                           tablat	equ	0xFF5
 13811                           prodh	equ	0xFF4
 13812                           prodl	equ	0xFF3
 13813                           intcon	equ	0xFF2
 13814                           postinc0	equ	0xFEE
 13815                           wreg	equ	0xFE8
 13816                           indf1	equ	0xFE7
 13817                           postdec1	equ	0xFE5
 13818                           fsr1h	equ	0xFE2
 13819                           fsr1l	equ	0xFE1
 13820                           indf2	equ	0xFDF
 13821                           postinc2	equ	0xFDE
 13822                           postdec2	equ	0xFDD
 13823                           plusw2	equ	0xFDB
 13824                           fsr2h	equ	0xFDA
 13825                           fsr2l	equ	0xFD9
 13826                           status	equ	0xFD8
 13827                           
 13828 ;; *************** function _vscp_getSubMinorVersion *****************
 13829 ;; Defined at:
 13830 ;;		line 2590 in file "../main.c"
 13831 ;; Parameters:    Size  Location     Type
 13832 ;;		None
 13833 ;; Auto vars:     Size  Location     Type
 13834 ;;		None
 13835 ;; Return value:  Size  Location     Type
 13836 ;;                  1    wreg      unsigned char 
 13837 ;; Registers used:
 13838 ;;		wreg
 13839 ;; Tracked objects:
 13840 ;;		On entry : E/1
 13841 ;;		On exit  : E/0
 13842 ;;		Unchanged: E/0
 13843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13844 ;;      Params:         0       0       0       0       0       0       0
 13845 ;;      Locals:         0       0       0       0       0       0       0
 13846 ;;      Temps:          0       0       0       0       0       0       0
 13847 ;;      Totals:         0       0       0       0       0       0       0
 13848 ;;Total ram usage:        0 bytes
 13849 ;; Hardware stack levels used:    1
 13850 ;; Hardware stack levels required when called:    2
 13851 ;; This function calls:
 13852 ;;		Nothing
 13853 ;; This function is called by:
 13854 ;;		_vscp_readStdReg
 13855 ;; This function uses a non-reentrant model
 13856 ;;
 13857                           
 13858                           	psect	text56
 13859  005512                     __ptext56:
 13860                           	opt stack 0
 13861  005512                     _vscp_getSubMinorVersion:
 13862                           	opt stack 25
 13863                           
 13864                           ;main.c: 2591: return 2;
 13865                           
 13866                           ;incstack = 0
 13867                           ;incstack = 0
 13868  005512  0C02               	retlw	2
 13869  005514                     __end_of_vscp_getSubMinorVersion:
 13870                           	opt stack 0
 13871                           tblptru	equ	0xFF8
 13872                           tblptrh	equ	0xFF7
 13873                           tblptrl	equ	0xFF6
 13874                           tablat	equ	0xFF5
 13875                           prodh	equ	0xFF4
 13876                           prodl	equ	0xFF3
 13877                           intcon	equ	0xFF2
 13878                           postinc0	equ	0xFEE
 13879                           wreg	equ	0xFE8
 13880                           indf1	equ	0xFE7
 13881                           postdec1	equ	0xFE5
 13882                           fsr1h	equ	0xFE2
 13883                           fsr1l	equ	0xFE1
 13884                           indf2	equ	0xFDF
 13885                           postinc2	equ	0xFDE
 13886                           postdec2	equ	0xFDD
 13887                           plusw2	equ	0xFDB
 13888                           fsr2h	equ	0xFDA
 13889                           fsr2l	equ	0xFD9
 13890                           status	equ	0xFD8
 13891                           
 13892 ;; *************** function _vscp_getMinorVersion *****************
 13893 ;; Defined at:
 13894 ;;		line 2581 in file "../main.c"
 13895 ;; Parameters:    Size  Location     Type
 13896 ;;		None
 13897 ;; Auto vars:     Size  Location     Type
 13898 ;;		None
 13899 ;; Return value:  Size  Location     Type
 13900 ;;                  1    wreg      unsigned char 
 13901 ;; Registers used:
 13902 ;;		wreg
 13903 ;; Tracked objects:
 13904 ;;		On entry : E/1
 13905 ;;		On exit  : E/0
 13906 ;;		Unchanged: E/0
 13907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13908 ;;      Params:         0       0       0       0       0       0       0
 13909 ;;      Locals:         0       0       0       0       0       0       0
 13910 ;;      Temps:          0       0       0       0       0       0       0
 13911 ;;      Totals:         0       0       0       0       0       0       0
 13912 ;;Total ram usage:        0 bytes
 13913 ;; Hardware stack levels used:    1
 13914 ;; Hardware stack levels required when called:    2
 13915 ;; This function calls:
 13916 ;;		Nothing
 13917 ;; This function is called by:
 13918 ;;		_vscp_readStdReg
 13919 ;; This function uses a non-reentrant model
 13920 ;;
 13921                           
 13922                           	psect	text57
 13923  005514                     __ptext57:
 13924                           	opt stack 0
 13925  005514                     _vscp_getMinorVersion:
 13926                           	opt stack 25
 13927                           
 13928                           ;main.c: 2582: return 2;
 13929                           
 13930                           ;incstack = 0
 13931                           ;incstack = 0
 13932  005514  0C02               	retlw	2
 13933  005516                     __end_of_vscp_getMinorVersion:
 13934                           	opt stack 0
 13935                           tblptru	equ	0xFF8
 13936                           tblptrh	equ	0xFF7
 13937                           tblptrl	equ	0xFF6
 13938                           tablat	equ	0xFF5
 13939                           prodh	equ	0xFF4
 13940                           prodl	equ	0xFF3
 13941                           intcon	equ	0xFF2
 13942                           postinc0	equ	0xFEE
 13943                           wreg	equ	0xFE8
 13944                           indf1	equ	0xFE7
 13945                           postdec1	equ	0xFE5
 13946                           fsr1h	equ	0xFE2
 13947                           fsr1l	equ	0xFE1
 13948                           indf2	equ	0xFDF
 13949                           postinc2	equ	0xFDE
 13950                           postdec2	equ	0xFDD
 13951                           plusw2	equ	0xFDB
 13952                           fsr2h	equ	0xFDA
 13953                           fsr2l	equ	0xFD9
 13954                           status	equ	0xFD8
 13955                           
 13956 ;; *************** function _vscp_getMajorVersion *****************
 13957 ;; Defined at:
 13958 ;;		line 2572 in file "../main.c"
 13959 ;; Parameters:    Size  Location     Type
 13960 ;;		None
 13961 ;; Auto vars:     Size  Location     Type
 13962 ;;		None
 13963 ;; Return value:  Size  Location     Type
 13964 ;;                  1    wreg      unsigned char 
 13965 ;; Registers used:
 13966 ;;		wreg
 13967 ;; Tracked objects:
 13968 ;;		On entry : E/1
 13969 ;;		On exit  : E/0
 13970 ;;		Unchanged: E/0
 13971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13972 ;;      Params:         0       0       0       0       0       0       0
 13973 ;;      Locals:         0       0       0       0       0       0       0
 13974 ;;      Temps:          0       0       0       0       0       0       0
 13975 ;;      Totals:         0       0       0       0       0       0       0
 13976 ;;Total ram usage:        0 bytes
 13977 ;; Hardware stack levels used:    1
 13978 ;; Hardware stack levels required when called:    2
 13979 ;; This function calls:
 13980 ;;		Nothing
 13981 ;; This function is called by:
 13982 ;;		_vscp_readStdReg
 13983 ;; This function uses a non-reentrant model
 13984 ;;
 13985                           
 13986                           	psect	text58
 13987  005516                     __ptext58:
 13988                           	opt stack 0
 13989  005516                     _vscp_getMajorVersion:
 13990                           	opt stack 25
 13991                           
 13992                           ;main.c: 2573: return 1;
 13993                           
 13994                           ;incstack = 0
 13995                           ;incstack = 0
 13996  005516  0C01               	retlw	1
 13997  005518                     __end_of_vscp_getMajorVersion:
 13998                           	opt stack 0
 13999                           tblptru	equ	0xFF8
 14000                           tblptrh	equ	0xFF7
 14001                           tblptrl	equ	0xFF6
 14002                           tablat	equ	0xFF5
 14003                           prodh	equ	0xFF4
 14004                           prodl	equ	0xFF3
 14005                           intcon	equ	0xFF2
 14006                           postinc0	equ	0xFEE
 14007                           wreg	equ	0xFE8
 14008                           indf1	equ	0xFE7
 14009                           postdec1	equ	0xFE5
 14010                           fsr1h	equ	0xFE2
 14011                           fsr1l	equ	0xFE1
 14012                           indf2	equ	0xFDF
 14013                           postinc2	equ	0xFDE
 14014                           postdec2	equ	0xFDD
 14015                           plusw2	equ	0xFDB
 14016                           fsr2h	equ	0xFDA
 14017                           fsr2l	equ	0xFD9
 14018                           status	equ	0xFD8
 14019                           
 14020 ;; *************** function _vscp_newNodeOnline *****************
 14021 ;; Defined at:
 14022 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14023 ;; Parameters:    Size  Location     Type
 14024 ;;		None
 14025 ;; Auto vars:     Size  Location     Type
 14026 ;;		None
 14027 ;; Return value:  Size  Location     Type
 14028 ;;		None               void
 14029 ;; Registers used:
 14030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14031 ;; Tracked objects:
 14032 ;;		On entry : F/1
 14033 ;;		On exit  : E/0
 14034 ;;		Unchanged: 0/0
 14035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14036 ;;      Params:         0       0       0       0       0       0       0
 14037 ;;      Locals:         0       0       0       0       0       0       0
 14038 ;;      Temps:          1       0       0       0       0       0       0
 14039 ;;      Totals:         1       0       0       0       0       0       0
 14040 ;;Total ram usage:        1 bytes
 14041 ;; Hardware stack levels used:    1
 14042 ;; Hardware stack levels required when called:    7
 14043 ;; This function calls:
 14044 ;;		_vscp_sendEvent
 14045 ;; This function is called by:
 14046 ;;		_vscp_handleProtocolEvent
 14047 ;; This function uses a non-reentrant model
 14048 ;;
 14049                           
 14050                           	psect	text59
 14051  005176                     __ptext59:
 14052                           	opt stack 0
 14053  005176                     _vscp_newNodeOnline:
 14054                           	opt stack 21
 14055                           
 14056                           ; BSR set to: 1
 14057                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14058                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14059                           
 14060                           ;incstack = 0
 14061                           ;incstack = 0
 14062  005176  C168  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14063  00517A  0E0F               	movlw	15
 14064  00517C  1644               	andwf	??_vscp_newNodeOnline,f,c
 14065  00517E  0444               	decf	??_vscp_newNodeOnline,w,c
 14066  005180  E111               	bnz	l1093
 14067                           
 14068                           ; BSR set to: 1
 14069  005182  0100               	movlb	0	; () banked
 14070  005184  51CA               	movf	_vscp_nickname& (0+255),w,b
 14071  005186  0101               	movlb	1	; () banked
 14072  005188  EE21  F06E         	lfsr	2,_vscp_imsg+6
 14073  00518C  62DF               	cpfseq	indf2,c
 14074  00518E  D00A               	goto	l1093
 14075                           
 14076                           ; BSR set to: 1
 14077                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14078  005190  0E80               	movlw	128
 14079  005192  0100               	movlb	0	; () banked
 14080  005194  6FCC               	movwf	_vscp_omsg& (0+255),b
 14081                           
 14082                           ; BSR set to: 0
 14083                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14084  005196  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14088  005198  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 14089  00519A  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 14090                           
 14091                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14092  00519C  0E03               	movlw	3
 14093  00519E  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14097  0051A0  ECFD  F028         	call	_vscp_sendEvent	;wreg free
 14098  0051A4                     l1093:
 14099  0051A4  0012               	return	
 14100  0051A6                     __end_of_vscp_newNodeOnline:
 14101                           	opt stack 0
 14102                           tblptru	equ	0xFF8
 14103                           tblptrh	equ	0xFF7
 14104                           tblptrl	equ	0xFF6
 14105                           tablat	equ	0xFF5
 14106                           prodh	equ	0xFF4
 14107                           prodl	equ	0xFF3
 14108                           intcon	equ	0xFF2
 14109                           postinc0	equ	0xFEE
 14110                           wreg	equ	0xFE8
 14111                           indf1	equ	0xFE7
 14112                           postdec1	equ	0xFE5
 14113                           fsr1h	equ	0xFE2
 14114                           fsr1l	equ	0xFE1
 14115                           indf2	equ	0xFDF
 14116                           postinc2	equ	0xFDE
 14117                           postdec2	equ	0xFDD
 14118                           plusw2	equ	0xFDB
 14119                           fsr2h	equ	0xFDA
 14120                           fsr2l	equ	0xFD9
 14121                           status	equ	0xFD8
 14122                           
 14123 ;; *************** function _vscp_handleDropNickname *****************
 14124 ;; Defined at:
 14125 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;		None
 14128 ;; Auto vars:     Size  Location     Type
 14129 ;;  bytes           1   25[COMRAM] unsigned char 
 14130 ;; Return value:  Size  Location     Type
 14131 ;;		None               void
 14132 ;; Registers used:
 14133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14134 ;; Tracked objects:
 14135 ;;		On entry : F/1
 14136 ;;		On exit  : E/0
 14137 ;;		Unchanged: 0/0
 14138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14139 ;;      Params:         0       0       0       0       0       0       0
 14140 ;;      Locals:         1       0       0       0       0       0       0
 14141 ;;      Temps:          0       0       0       0       0       0       0
 14142 ;;      Totals:         1       0       0       0       0       0       0
 14143 ;;Total ram usage:        1 bytes
 14144 ;; Hardware stack levels used:    1
 14145 ;; Hardware stack levels required when called:    5
 14146 ;; This function calls:
 14147 ;;		_vscp_init
 14148 ;;		_vscp_writeNicknamePermanent
 14149 ;; This function is called by:
 14150 ;;		_vscp_handleProtocolEvent
 14151 ;; This function uses a non-reentrant model
 14152 ;;
 14153                           
 14154                           	psect	text60
 14155  0050A6                     __ptext60:
 14156                           	opt stack 0
 14157  0050A6                     _vscp_handleDropNickname:
 14158                           	opt stack 23
 14159                           
 14160                           ; BSR set to: 1
 14161                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14162                           
 14163                           ;incstack = 0
 14164                           ;incstack = 0
 14165  0050A6  5168               	movf	_vscp_imsg& (0+255),w,b
 14166  0050A8  0B0F               	andlw	15
 14167  0050AA  6E1A               	movwf	vscp_handleDropNickname@bytes,c
 14168                           
 14169                           ; BSR set to: 1
 14170                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14171  0050AC  501A               	movf	vscp_handleDropNickname@bytes,w,c
 14172  0050AE  E015               	bz	l1089
 14173                           
 14174                           ; BSR set to: 1
 14175  0050B0  0100               	movlb	0	; () banked
 14176  0050B2  51CA               	movf	_vscp_nickname& (0+255),w,b
 14177  0050B4  0101               	movlb	1	; () banked
 14178  0050B6  EE21  F06E         	lfsr	2,_vscp_imsg+6
 14179  0050BA  62DF               	cpfseq	indf2,c
 14180  0050BC  D00E               	goto	l1089
 14181                           
 14182                           ; BSR set to: 1
 14183                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14184  0050BE  041A               	decf	vscp_handleDropNickname@bytes,w,c
 14185  0050C0  E005               	bz	l1088
 14186                           
 14187                           ; BSR set to: 1
 14188  0050C2  0E01               	movlw	1
 14189  0050C4  641A               	cpfsgt	vscp_handleDropNickname@bytes,c
 14190  0050C6  D009               	goto	l1089
 14191                           
 14192                           ; BSR set to: 1
 14193  0050C8  676F               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14194  0050CA  D007               	goto	l1089
 14195  0050CC                     l1088:
 14196                           
 14197                           ; BSR set to: 1
 14198                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14199  0050CC  0100               	movlb	0	; () banked
 14200  0050CE  69CA               	setf	_vscp_nickname& (0+255),b
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14204  0050D0  0EFF               	movlw	255
 14205  0050D2  EC43  F02A         	call	_vscp_writeNicknamePermanent
 14206                           
 14207                           ;vscp_firmware.c: 481: vscp_init();
 14208  0050D6  ECC2  F026         	call	_vscp_init	;wreg free
 14209  0050DA                     l1089:
 14210  0050DA  0012               	return	
 14211  0050DC                     __end_of_vscp_handleDropNickname:
 14212                           	opt stack 0
 14213                           tblptru	equ	0xFF8
 14214                           tblptrh	equ	0xFF7
 14215                           tblptrl	equ	0xFF6
 14216                           tablat	equ	0xFF5
 14217                           prodh	equ	0xFF4
 14218                           prodl	equ	0xFF3
 14219                           intcon	equ	0xFF2
 14220                           postinc0	equ	0xFEE
 14221                           wreg	equ	0xFE8
 14222                           indf1	equ	0xFE7
 14223                           postdec1	equ	0xFE5
 14224                           fsr1h	equ	0xFE2
 14225                           fsr1l	equ	0xFE1
 14226                           indf2	equ	0xFDF
 14227                           postinc2	equ	0xFDE
 14228                           postdec2	equ	0xFDD
 14229                           plusw2	equ	0xFDB
 14230                           fsr2h	equ	0xFDA
 14231                           fsr2l	equ	0xFD9
 14232                           status	equ	0xFD8
 14233                           
 14234 ;; *************** function _vscp_init *****************
 14235 ;; Defined at:
 14236 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14237 ;; Parameters:    Size  Location     Type
 14238 ;;		None
 14239 ;; Auto vars:     Size  Location     Type
 14240 ;;		None
 14241 ;; Return value:  Size  Location     Type
 14242 ;;		None               void
 14243 ;; Registers used:
 14244 ;;		wreg, status,2, cstack
 14245 ;; Tracked objects:
 14246 ;;		On entry : 0/0
 14247 ;;		On exit  : F/0
 14248 ;;		Unchanged: 0/0
 14249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14250 ;;      Params:         0       0       0       0       0       0       0
 14251 ;;      Locals:         0       0       0       0       0       0       0
 14252 ;;      Temps:          0       0       0       0       0       0       0
 14253 ;;      Totals:         0       0       0       0       0       0       0
 14254 ;;Total ram usage:        0 bytes
 14255 ;; Hardware stack levels used:    1
 14256 ;; Hardware stack levels required when called:    4
 14257 ;; This function calls:
 14258 ;;		_vscp_readNicknamePermanent
 14259 ;; This function is called by:
 14260 ;;		_main
 14261 ;;		_vscp_handleDropNickname
 14262 ;;		_vscp_handleProtocolEvent
 14263 ;; This function uses a non-reentrant model
 14264 ;;
 14265                           
 14266                           	psect	text61
 14267  004D84                     __ptext61:
 14268                           	opt stack 0
 14269  004D84                     _vscp_init:
 14270                           	opt stack 23
 14271                           
 14272                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14273                           
 14274                           ;incstack = 0
 14275                           ;incstack = 0
 14276  004D84  0E02               	movlw	2
 14277  004D86  6E4C               	movwf	_vscp_initledfunc,c
 14278                           
 14279                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14280  004D88  EC72  F02A         	call	_vscp_readNicknamePermanent	;wreg free
 14281  004D8C  0100               	movlb	0	; () banked
 14282  004D8E  6FCA               	movwf	_vscp_nickname& (0+255),b
 14283                           
 14284                           ; BSR set to: 0
 14285                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14286  004D90  67CA               	tstfsz	_vscp_nickname& (0+255),b
 14287  004D92  D001               	goto	l1030
 14288                           
 14289                           ; BSR set to: 0
 14290  004D94  69CA               	setf	_vscp_nickname& (0+255),b
 14291  004D96                     l1030:
 14292                           
 14293                           ; BSR set to: 0
 14294                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14295  004D96  0101               	movlb	1	; () banked
 14296  004D98  6B68               	clrf	_vscp_imsg& (0+255),b
 14297                           
 14298                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14299  004D9A  6B69               	clrf	(_vscp_imsg+1)& (0+255),b
 14300                           
 14301                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14302  004D9C  6B6A               	clrf	(_vscp_imsg+2)& (0+255),b
 14303  004D9E  6B6B               	clrf	(_vscp_imsg+3)& (0+255),b
 14304                           
 14305                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14306  004DA0  6B6C               	clrf	(_vscp_imsg+4)& (0+255),b
 14307                           
 14308                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14309  004DA2  0100               	movlb	0	; () banked
 14310  004DA4  6BCC               	clrf	_vscp_omsg& (0+255),b
 14311                           
 14312                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14313  004DA6  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
 14314                           
 14315                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14316  004DA8  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 14317  004DAA  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 14318                           
 14319                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14320  004DAC  6BD0               	clrf	(_vscp_omsg+4)& (0+255),b
 14321                           
 14322                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14323  004DAE  6A4A               	clrf	_vscp_alarmstatus,c
 14324                           
 14325                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14326  004DB0  6A4F               	clrf	_vscp_probe_address,c
 14327                           
 14328                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14329  004DB2  6BCB               	clrf	_vscp_node_state& (0+255),b
 14330                           
 14331                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14332  004DB4  6A4E               	clrf	_vscp_node_substate,c
 14333                           
 14334                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14335  004DB6  6A50               	clrf	_vscp_probe_cnt,c
 14336                           
 14337                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14338  004DB8  6A46               	clrf	_vscp_page_select,c
 14339  004DBA  6A47               	clrf	_vscp_page_select+1,c
 14340                           
 14341                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14342  004DBC  0101               	movlb	1	; () banked
 14343  004DBE  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 14344  004DC0  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14345                           
 14346                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14347  004DC2  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14348  004DC4  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14349                           
 14350                           ;vscp_firmware.c: 155: vscp_second = 0;
 14351  004DC6  6A51               	clrf	_vscp_second,c
 14352                           
 14353                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14354  004DC8  6A4D               	clrf	_vscp_minute,c
 14355                           
 14356                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14357  004DCA  0100               	movlb	0	; () banked
 14358  004DCC  6BC8               	clrf	_vscp_hour& (0+255),b
 14359                           
 14360                           ; BSR set to: 0
 14361  004DCE  0012               	return	
 14362  004DD0                     __end_of_vscp_init:
 14363                           	opt stack 0
 14364                           tblptru	equ	0xFF8
 14365                           tblptrh	equ	0xFF7
 14366                           tblptrl	equ	0xFF6
 14367                           tablat	equ	0xFF5
 14368                           prodh	equ	0xFF4
 14369                           prodl	equ	0xFF3
 14370                           intcon	equ	0xFF2
 14371                           postinc0	equ	0xFEE
 14372                           wreg	equ	0xFE8
 14373                           indf1	equ	0xFE7
 14374                           postdec1	equ	0xFE5
 14375                           fsr1h	equ	0xFE2
 14376                           fsr1l	equ	0xFE1
 14377                           indf2	equ	0xFDF
 14378                           postinc2	equ	0xFDE
 14379                           postdec2	equ	0xFDD
 14380                           plusw2	equ	0xFDB
 14381                           fsr2h	equ	0xFDA
 14382                           fsr2l	equ	0xFD9
 14383                           status	equ	0xFD8
 14384                           
 14385 ;; *************** function _vscp_readNicknamePermanent *****************
 14386 ;; Defined at:
 14387 ;;		line 2775 in file "../main.c"
 14388 ;; Parameters:    Size  Location     Type
 14389 ;;		None
 14390 ;; Auto vars:     Size  Location     Type
 14391 ;;		None
 14392 ;; Return value:  Size  Location     Type
 14393 ;;                  1    wreg      unsigned char 
 14394 ;; Registers used:
 14395 ;;		wreg, status,2, cstack
 14396 ;; Tracked objects:
 14397 ;;		On entry : 0/0
 14398 ;;		On exit  : 0/0
 14399 ;;		Unchanged: 0/0
 14400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14401 ;;      Params:         0       0       0       0       0       0       0
 14402 ;;      Locals:         0       0       0       0       0       0       0
 14403 ;;      Temps:          0       0       0       0       0       0       0
 14404 ;;      Totals:         0       0       0       0       0       0       0
 14405 ;;Total ram usage:        0 bytes
 14406 ;; Hardware stack levels used:    1
 14407 ;; Hardware stack levels required when called:    3
 14408 ;; This function calls:
 14409 ;;		_readEEPROM
 14410 ;; This function is called by:
 14411 ;;		_vscp_init
 14412 ;; This function uses a non-reentrant model
 14413 ;;
 14414                           
 14415                           	psect	text62
 14416  0054E4                     __ptext62:
 14417                           	opt stack 0
 14418  0054E4                     _vscp_readNicknamePermanent:
 14419                           	opt stack 23
 14420                           
 14421                           ;main.c: 2776: return readEEPROM( 0x01 );
 14422                           
 14423                           ; BSR set to: 0
 14424                           ;incstack = 0
 14425                           ;incstack = 0
 14426  0054E4  6A17               	clrf	?_readEEPROM+1,c
 14427  0054E6  0E01               	movlw	1
 14428  0054E8  6E16               	movwf	?_readEEPROM,c
 14429  0054EA  EF27  F02A         	goto	_readEEPROM	;wreg free
 14430  0054EE                     __end_of_vscp_readNicknamePermanent:
 14431                           	opt stack 0
 14432                           tblptru	equ	0xFF8
 14433                           tblptrh	equ	0xFF7
 14434                           tblptrl	equ	0xFF6
 14435                           tablat	equ	0xFF5
 14436                           prodh	equ	0xFF4
 14437                           prodl	equ	0xFF3
 14438                           intcon	equ	0xFF2
 14439                           postinc0	equ	0xFEE
 14440                           wreg	equ	0xFE8
 14441                           indf1	equ	0xFE7
 14442                           postdec1	equ	0xFE5
 14443                           fsr1h	equ	0xFE2
 14444                           fsr1l	equ	0xFE1
 14445                           indf2	equ	0xFDF
 14446                           postinc2	equ	0xFDE
 14447                           postdec2	equ	0xFDD
 14448                           plusw2	equ	0xFDB
 14449                           fsr2h	equ	0xFDA
 14450                           fsr2l	equ	0xFD9
 14451                           status	equ	0xFD8
 14452                           
 14453 ;; *************** function _readEEPROM *****************
 14454 ;; Defined at:
 14455 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 14456 ;; Parameters:    Size  Location     Type
 14457 ;;  address         2   21[COMRAM] unsigned short 
 14458 ;; Auto vars:     Size  Location     Type
 14459 ;;  data            1   24[COMRAM] unsigned char 
 14460 ;; Return value:  Size  Location     Type
 14461 ;;                  1    wreg      unsigned char 
 14462 ;; Registers used:
 14463 ;;		wreg, status,2
 14464 ;; Tracked objects:
 14465 ;;		On entry : 0/0
 14466 ;;		On exit  : 0/0
 14467 ;;		Unchanged: 0/0
 14468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14469 ;;      Params:         2       0       0       0       0       0       0
 14470 ;;      Locals:         2       0       0       0       0       0       0
 14471 ;;      Temps:          0       0       0       0       0       0       0
 14472 ;;      Totals:         4       0       0       0       0       0       0
 14473 ;;Total ram usage:        4 bytes
 14474 ;; Hardware stack levels used:    1
 14475 ;; Hardware stack levels required when called:    2
 14476 ;; This function calls:
 14477 ;;		Nothing
 14478 ;; This function is called by:
 14479 ;;		_doWork
 14480 ;;		_doOneSecondWork
 14481 ;;		_sendTempEvent
 14482 ;;		_getCalibrationValue
 14483 ;;		_writeCoeffs2Ram
 14484 ;;		_handle_sync
 14485 ;;		_vscp_readAppReg
 14486 ;;		_vscp_writeAppReg
 14487 ;;		_vscp_getGUID
 14488 ;;		_vscp_getUserID
 14489 ;;		_vscp_getManufacturerId
 14490 ;;		_vscp_getZone
 14491 ;;		_vscp_getSubzone
 14492 ;;		_vscp_readNicknamePermanent
 14493 ;;		_vscp_getSegmentCRC
 14494 ;; This function uses a non-reentrant model
 14495 ;;
 14496                           
 14497                           	psect	text63
 14498  00544E                     __ptext63:
 14499                           	opt stack 0
 14500  00544E                     _readEEPROM:
 14501                           	opt stack 25
 14502                           
 14503                           ;eeprom.c: 95: uint8_t data;
 14504                           ;eeprom.c: 100: EEADR = address & 0xff;
 14505                           
 14506                           ;incstack = 0
 14507                           ;incstack = 0
 14508  00544E  C016  FFA9         	movff	readEEPROM@address,4009	;volatile
 14509                           
 14510                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 14511  005452  9EA6               	bcf	4006,7,c	;volatile
 14512                           
 14513                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 14514  005454  9CA6               	bcf	4006,6,c	;volatile
 14515                           
 14516                           ;eeprom.c: 103: EECON1bits.RD = 1;
 14517  005456  80A6               	bsf	4006,0,c	;volatile
 14518  005458  F000               	nop		;# 
 14519                           
 14520                           ;eeprom.c: 105: data = EEDATA;
 14521  00545A  CFA8 F019          	movff	4008,readEEPROM@data	;volatile
 14522                           
 14523                           ;eeprom.c: 107: return data;
 14524  00545E  5019               	movf	readEEPROM@data,w,c
 14525  005460  0012               	return	
 14526  005462                     __end_of_readEEPROM:
 14527                           	opt stack 0
 14528                           tblptru	equ	0xFF8
 14529                           tblptrh	equ	0xFF7
 14530                           tblptrl	equ	0xFF6
 14531                           tablat	equ	0xFF5
 14532                           prodh	equ	0xFF4
 14533                           prodl	equ	0xFF3
 14534                           intcon	equ	0xFF2
 14535                           postinc0	equ	0xFEE
 14536                           wreg	equ	0xFE8
 14537                           indf1	equ	0xFE7
 14538                           postdec1	equ	0xFE5
 14539                           fsr1h	equ	0xFE2
 14540                           fsr1l	equ	0xFE1
 14541                           indf2	equ	0xFDF
 14542                           postinc2	equ	0xFDE
 14543                           postdec2	equ	0xFDD
 14544                           plusw2	equ	0xFDB
 14545                           fsr2h	equ	0xFDA
 14546                           fsr2l	equ	0xFD9
 14547                           status	equ	0xFD8
 14548                           
 14549 ;; *************** function _vscp_handleSetNickname *****************
 14550 ;; Defined at:
 14551 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14552 ;; Parameters:    Size  Location     Type
 14553 ;;		None
 14554 ;; Auto vars:     Size  Location     Type
 14555 ;;		None
 14556 ;; Return value:  Size  Location     Type
 14557 ;;		None               void
 14558 ;; Registers used:
 14559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14560 ;; Tracked objects:
 14561 ;;		On entry : F/1
 14562 ;;		On exit  : 0/0
 14563 ;;		Unchanged: 0/0
 14564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14565 ;;      Params:         0       0       0       0       0       0       0
 14566 ;;      Locals:         0       0       0       0       0       0       0
 14567 ;;      Temps:          0       0       0       0       0       0       0
 14568 ;;      Totals:         0       0       0       0       0       0       0
 14569 ;;Total ram usage:        0 bytes
 14570 ;; Hardware stack levels used:    1
 14571 ;; Hardware stack levels required when called:    4
 14572 ;; This function calls:
 14573 ;;		_vscp_writeNicknamePermanent
 14574 ;;		_vscp_setSegmentCRC
 14575 ;; This function is called by:
 14576 ;;		_vscp_handleProtocolEvent
 14577 ;; This function uses a non-reentrant model
 14578 ;;
 14579                           
 14580                           	psect	text64
 14581  0051D0                     __ptext64:
 14582                           	opt stack 0
 14583  0051D0                     _vscp_handleSetNickname:
 14584                           	opt stack 24
 14585                           
 14586                           ; BSR set to: 1
 14587                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 14588                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14589                           
 14590                           ;incstack = 0
 14591                           ;incstack = 0
 14592  0051D0  5168               	movf	_vscp_imsg& (0+255),w,b
 14593  0051D2  0B0F               	andlw	15
 14594  0051D4  0A02               	xorlw	2
 14595  0051D6  E110               	bnz	l1082
 14596                           
 14597                           ; BSR set to: 1
 14598  0051D8  0100               	movlb	0	; () banked
 14599  0051DA  51CA               	movf	_vscp_nickname& (0+255),w,b
 14600  0051DC  0101               	movlb	1	; () banked
 14601  0051DE  EE21  F06E         	lfsr	2,_vscp_imsg+6
 14602  0051E2  62DF               	cpfseq	indf2,c
 14603  0051E4  D009               	goto	l1082
 14604                           
 14605                           ; BSR set to: 1
 14606                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 14607  0051E6  C16F  F0CA         	movff	_vscp_imsg+7,_vscp_nickname
 14608                           
 14609                           ; BSR set to: 1
 14610                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 14611  0051EA  0100               	movlb	0	; () banked
 14612  0051EC  51CA               	movf	_vscp_nickname& (0+255),w,b
 14613  0051EE  EC43  F02A         	call	_vscp_writeNicknamePermanent
 14614                           
 14615                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 14616  0051F2  0E40               	movlw	64
 14617  0051F4  EC3A  F02A         	call	_vscp_setSegmentCRC
 14618  0051F8                     l1082:
 14619  0051F8  0012               	return	
 14620  0051FA                     __end_of_vscp_handleSetNickname:
 14621                           	opt stack 0
 14622                           tblptru	equ	0xFF8
 14623                           tblptrh	equ	0xFF7
 14624                           tblptrl	equ	0xFF6
 14625                           tablat	equ	0xFF5
 14626                           prodh	equ	0xFF4
 14627                           prodl	equ	0xFF3
 14628                           intcon	equ	0xFF2
 14629                           postinc0	equ	0xFEE
 14630                           wreg	equ	0xFE8
 14631                           indf1	equ	0xFE7
 14632                           postdec1	equ	0xFE5
 14633                           fsr1h	equ	0xFE2
 14634                           fsr1l	equ	0xFE1
 14635                           indf2	equ	0xFDF
 14636                           postinc2	equ	0xFDE
 14637                           postdec2	equ	0xFDD
 14638                           plusw2	equ	0xFDB
 14639                           fsr2h	equ	0xFDA
 14640                           fsr2l	equ	0xFD9
 14641                           status	equ	0xFD8
 14642                           
 14643 ;; *************** function _vscp_handleHeartbeat *****************
 14644 ;; Defined at:
 14645 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 14646 ;; Parameters:    Size  Location     Type
 14647 ;;		None
 14648 ;; Auto vars:     Size  Location     Type
 14649 ;;		None
 14650 ;; Return value:  Size  Location     Type
 14651 ;;		None               void
 14652 ;; Registers used:
 14653 ;;		wreg, status,2, status,0, cstack
 14654 ;; Tracked objects:
 14655 ;;		On entry : F/1
 14656 ;;		On exit  : 0/0
 14657 ;;		Unchanged: 0/0
 14658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14659 ;;      Params:         0       0       0       0       0       0       0
 14660 ;;      Locals:         0       0       0       0       0       0       0
 14661 ;;      Temps:          0       0       0       0       0       0       0
 14662 ;;      Totals:         0       0       0       0       0       0       0
 14663 ;;Total ram usage:        0 bytes
 14664 ;; Hardware stack levels used:    1
 14665 ;; Hardware stack levels required when called:    4
 14666 ;; This function calls:
 14667 ;;		_vscp_writeNicknamePermanent
 14668 ;;		_vscp_getSegmentCRC
 14669 ;;		_vscp_setSegmentCRC
 14670 ;; This function is called by:
 14671 ;;		_vscp_handleProtocolEvent
 14672 ;; This function uses a non-reentrant model
 14673 ;;
 14674                           
 14675                           	psect	text65
 14676  004F7A                     __ptext65:
 14677                           	opt stack 0
 14678  004F7A                     _vscp_handleHeartbeat:
 14679                           	opt stack 24
 14680                           
 14681                           ; BSR set to: 1
 14682                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 14683                           
 14684                           ;incstack = 0
 14685                           ;incstack = 0
 14686  004F7A  EC77  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14687  004F7E  0900               	iorlw	0
 14688  004F80  E116               	bnz	l11175
 14689                           
 14690                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14691                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14692  004F82  0101               	movlb	1	; () banked
 14693  004F84  5168               	movf	_vscp_imsg& (0+255),w,b
 14694  004F86  0B0F               	andlw	15
 14695  004F88  0A05               	xorlw	5
 14696  004F8A  E115               	bnz	l1078
 14697                           
 14698                           ; BSR set to: 1
 14699  004F8C  EC77  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14700  004F90  0101               	movlb	1	; () banked
 14701  004F92  196E               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14702  004F94  E010               	bz	l1078
 14703                           
 14704                           ; BSR set to: 1
 14705                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14706  004F96  516E               	movf	(_vscp_imsg+6)& (0+255),w,b
 14707  004F98  EC3A  F02A         	call	_vscp_setSegmentCRC
 14708                           
 14709                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 14710  004F9C  0100               	movlb	0	; () banked
 14711  004F9E  69CA               	setf	_vscp_nickname& (0+255),b
 14712                           
 14713                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 14714  004FA0  0EFF               	movlw	255
 14715  004FA2  EC43  F02A         	call	_vscp_writeNicknamePermanent
 14716                           
 14717                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 14718  004FA6  0E01               	movlw	1
 14719  004FA8  0100               	movlb	0	; () banked
 14720  004FAA  6FCB               	movwf	_vscp_node_state& (0+255),b
 14721  004FAC  D004               	goto	l1078
 14722  004FAE                     l11175:
 14723                           
 14724                           ;vscp_firmware.c: 411: else {
 14725                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14726  004FAE  0101               	movlb	1	; () banked
 14727  004FB0  516E               	movf	(_vscp_imsg+6)& (0+255),w,b
 14728  004FB2  EC3A  F02A         	call	_vscp_setSegmentCRC
 14729  004FB6                     l1078:
 14730  004FB6  0012               	return	
 14731  004FB8                     __end_of_vscp_handleHeartbeat:
 14732                           	opt stack 0
 14733                           tblptru	equ	0xFF8
 14734                           tblptrh	equ	0xFF7
 14735                           tblptrl	equ	0xFF6
 14736                           tablat	equ	0xFF5
 14737                           prodh	equ	0xFF4
 14738                           prodl	equ	0xFF3
 14739                           intcon	equ	0xFF2
 14740                           postinc0	equ	0xFEE
 14741                           wreg	equ	0xFE8
 14742                           indf1	equ	0xFE7
 14743                           postdec1	equ	0xFE5
 14744                           fsr1h	equ	0xFE2
 14745                           fsr1l	equ	0xFE1
 14746                           indf2	equ	0xFDF
 14747                           postinc2	equ	0xFDE
 14748                           postdec2	equ	0xFDD
 14749                           plusw2	equ	0xFDB
 14750                           fsr2h	equ	0xFDA
 14751                           fsr2l	equ	0xFD9
 14752                           status	equ	0xFD8
 14753                           
 14754 ;; *************** function _vscp_goBootloaderMode *****************
 14755 ;; Defined at:
 14756 ;;		line 2756 in file "../main.c"
 14757 ;; Parameters:    Size  Location     Type
 14758 ;;  algorithm       1    wreg     unsigned char 
 14759 ;; Auto vars:     Size  Location     Type
 14760 ;;  algorithm       1   16[COMRAM] unsigned char 
 14761 ;; Return value:  Size  Location     Type
 14762 ;;		None               void
 14763 ;; Registers used:
 14764 ;;		wreg, status,2, status,0, cstack
 14765 ;; Tracked objects:
 14766 ;;		On entry : F/1
 14767 ;;		On exit  : 0/0
 14768 ;;		Unchanged: 0/0
 14769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14770 ;;      Params:         0       0       0       0       0       0       0
 14771 ;;      Locals:         1       0       0       0       0       0       0
 14772 ;;      Temps:          0       0       0       0       0       0       0
 14773 ;;      Totals:         1       0       0       0       0       0       0
 14774 ;;Total ram usage:        1 bytes
 14775 ;; Hardware stack levels used:    1
 14776 ;; Hardware stack levels required when called:    3
 14777 ;; This function calls:
 14778 ;;		_writeEEPROM
 14779 ;;		_ECANSetOperationMode
 14780 ;; This function is called by:
 14781 ;;		_vscp_handleProtocolEvent
 14782 ;; This function uses a non-reentrant model
 14783 ;;
 14784                           
 14785                           	psect	text66
 14786  005324                     __ptext66:
 14787                           	opt stack 0
 14788  005324                     _vscp_goBootloaderMode:
 14789                           	opt stack 25
 14790                           
 14791                           ;incstack = 0
 14792                           ;incstack = 0
 14793                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14794  005324  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14795                           
 14796                           ; BSR set to: 1
 14797                           ;main.c: 2757: if ( 0x01 != algorithm ) return;
 14798  005328  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14799  00532A  E10A               	bnz	l593
 14800                           
 14801                           ; BSR set to: 1
 14802                           ;main.c: 2761: writeEEPROM(0x00, 0xff);
 14803  00532C  6A0F               	clrf	?_writeEEPROM+1,c
 14804  00532E  6A0E               	clrf	?_writeEEPROM,c
 14805  005330  0EFF               	movlw	255
 14806  005332  6810               	setf	?_writeEEPROM+2,c
 14807  005334  EC39  F029         	call	_writeEEPROM	;wreg free
 14808                           
 14809                           ;main.c: 2764: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 14810  005338  0E80               	movlw	128
 14811  00533A  ECFD  F029         	call	_ECANSetOperationMode
 14812  00533E  00FF               	reset		;# 
 14813  005340                     l593:
 14814  005340  0012               	return	
 14815  005342                     __end_of_vscp_goBootloaderMode:
 14816                           	opt stack 0
 14817                           tblptru	equ	0xFF8
 14818                           tblptrh	equ	0xFF7
 14819                           tblptrl	equ	0xFF6
 14820                           tablat	equ	0xFF5
 14821                           prodh	equ	0xFF4
 14822                           prodl	equ	0xFF3
 14823                           intcon	equ	0xFF2
 14824                           postinc0	equ	0xFEE
 14825                           wreg	equ	0xFE8
 14826                           indf1	equ	0xFE7
 14827                           postdec1	equ	0xFE5
 14828                           fsr1h	equ	0xFE2
 14829                           fsr1l	equ	0xFE1
 14830                           indf2	equ	0xFDF
 14831                           postinc2	equ	0xFDE
 14832                           postdec2	equ	0xFDD
 14833                           plusw2	equ	0xFDB
 14834                           fsr2h	equ	0xFDA
 14835                           fsr2l	equ	0xFD9
 14836                           status	equ	0xFD8
 14837                           
 14838 ;; *************** function _vscp_getMatrixInfo *****************
 14839 ;; Defined at:
 14840 ;;		line 2691 in file "../main.c"
 14841 ;; Parameters:    Size  Location     Type
 14842 ;;  pData           1    wreg     PTR unsigned char 
 14843 ;;		 -> vscp_omsg(13), 
 14844 ;; Auto vars:     Size  Location     Type
 14845 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14846 ;;		 -> vscp_omsg(13), 
 14847 ;;  i               1   14[COMRAM] unsigned char 
 14848 ;; Return value:  Size  Location     Type
 14849 ;;		None               void
 14850 ;; Registers used:
 14851 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14852 ;; Tracked objects:
 14853 ;;		On entry : F/0
 14854 ;;		On exit  : F/0
 14855 ;;		Unchanged: F/0
 14856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14857 ;;      Params:         0       0       0       0       0       0       0
 14858 ;;      Locals:         2       0       0       0       0       0       0
 14859 ;;      Temps:          0       0       0       0       0       0       0
 14860 ;;      Totals:         2       0       0       0       0       0       0
 14861 ;;Total ram usage:        2 bytes
 14862 ;; Hardware stack levels used:    1
 14863 ;; Hardware stack levels required when called:    2
 14864 ;; This function calls:
 14865 ;;		Nothing
 14866 ;; This function is called by:
 14867 ;;		_vscp_handleProtocolEvent
 14868 ;; This function uses a non-reentrant model
 14869 ;;
 14870                           
 14871                           	psect	text67
 14872  005398                     __ptext67:
 14873                           	opt stack 0
 14874  005398                     _vscp_getMatrixInfo:
 14875                           	opt stack 26
 14876                           
 14877                           ;incstack = 0
 14878                           ;incstack = 0
 14879                           ;vscp_getMatrixInfo@pData stored from wreg
 14880  005398  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14881                           
 14882                           ; BSR set to: 0
 14883                           ;main.c: 2692: uint8_t i;
 14884                           ;main.c: 2696: for (i = 0; i < 8; i++) {
 14885  00539C  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14886  00539E                     l8111:
 14887                           
 14888                           ; BSR set to: 0
 14889                           ;main.c: 2697: pData[ i ] = 0;
 14890  00539E  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14891  0053A0  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14892  0053A2  6ED9               	movwf	fsr2l,c
 14893  0053A4  6ADA               	clrf	fsr2h,c
 14894  0053A6  6ADF               	clrf	indf2,c
 14895                           
 14896                           ; BSR set to: 0
 14897  0053A8  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14898                           
 14899                           ; BSR set to: 0
 14900  0053AA  0E07               	movlw	7
 14901  0053AC  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14902  0053AE  D7F7               	goto	l8111
 14903                           
 14904                           ; BSR set to: 0
 14905  0053B0  0C07               	retlw	7
 14906  0053B2                     __end_of_vscp_getMatrixInfo:
 14907                           	opt stack 0
 14908                           tblptru	equ	0xFF8
 14909                           tblptrh	equ	0xFF7
 14910                           tblptrl	equ	0xFF6
 14911                           tablat	equ	0xFF5
 14912                           prodh	equ	0xFF4
 14913                           prodl	equ	0xFF3
 14914                           intcon	equ	0xFF2
 14915                           postinc0	equ	0xFEE
 14916                           wreg	equ	0xFE8
 14917                           indf1	equ	0xFE7
 14918                           postdec1	equ	0xFE5
 14919                           fsr1h	equ	0xFE2
 14920                           fsr1l	equ	0xFE1
 14921                           indf2	equ	0xFDF
 14922                           postinc2	equ	0xFDE
 14923                           postdec2	equ	0xFDD
 14924                           plusw2	equ	0xFDB
 14925                           fsr2h	equ	0xFDA
 14926                           fsr2l	equ	0xFD9
 14927                           status	equ	0xFD8
 14928                           
 14929 ;; *************** function _vscp_handleProbeState *****************
 14930 ;; Defined at:
 14931 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 14932 ;; Parameters:    Size  Location     Type
 14933 ;;		None
 14934 ;; Auto vars:     Size  Location     Type
 14935 ;;		None
 14936 ;; Return value:  Size  Location     Type
 14937 ;;		None               void
 14938 ;; Registers used:
 14939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14940 ;; Tracked objects:
 14941 ;;		On entry : 0/0
 14942 ;;		On exit  : F/1
 14943 ;;		Unchanged: 0/0
 14944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14945 ;;      Params:         0       0       0       0       0       0       0
 14946 ;;      Locals:         0       0       0       0       0       0       0
 14947 ;;      Temps:          0       0       0       0       0       0       0
 14948 ;;      Totals:         0       0       0       0       0       0       0
 14949 ;;Total ram usage:        0 bytes
 14950 ;; Hardware stack levels used:    1
 14951 ;; Hardware stack levels required when called:    8
 14952 ;; This function calls:
 14953 ;;		_vscp_goActiveState
 14954 ;;		_vscp_sendEvent
 14955 ;;		_vscp_writeNicknamePermanent
 14956 ;;		_vscp_setSegmentCRC
 14957 ;; This function is called by:
 14958 ;;		_main
 14959 ;; This function uses a non-reentrant model
 14960 ;;
 14961                           
 14962                           	psect	text68
 14963  004130                     __ptext68:
 14964                           	opt stack 0
 14965  004130                     _vscp_handleProbeState:
 14966                           	opt stack 21
 14967                           
 14968                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 14969                           
 14970                           ; BSR set to: 0
 14971                           ;incstack = 0
 14972                           ;incstack = 0
 14973  004130  D058               	goto	l9695
 14974  004132                     l9625:
 14975                           
 14976                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 14977  004132  284F               	incf	_vscp_probe_address,w,c
 14978  004134  E012               	bz	l9641
 14979                           
 14980                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 14981  004136  0E81               	movlw	129
 14982  004138  0100               	movlb	0	; () banked
 14983  00413A  6FCC               	movwf	_vscp_omsg& (0+255),b
 14984                           
 14985                           ; BSR set to: 0
 14986                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 14987  00413C  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
 14988                           
 14989                           ; BSR set to: 0
 14990                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 14991  00413E  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 14992  004140  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 14993                           
 14994                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 14995  004142  0E02               	movlw	2
 14996  004144  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
 14997                           
 14998                           ; BSR set to: 0
 14999                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15000  004146  C04F  F0D1         	movff	_vscp_probe_address,_vscp_omsg+5
 15001                           
 15002                           ; BSR set to: 0
 15003                           ;vscp_firmware.c: 216: vscp_sendEvent();
 15004  00414A  ECFD  F028         	call	_vscp_sendEvent	;wreg free
 15005                           
 15006                           ; BSR set to: 0
 15007                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 15008  00414E  0E01               	movlw	1
 15009  004150  6E4E               	movwf	_vscp_node_substate,c
 15010  004152                     l9639:
 15011                           
 15012                           ; BSR set to: 0
 15013                           ;vscp_firmware.c: 219: vscp_timer = 0;
 15014  004152  0101               	movlb	1	; () banked
 15015  004154  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 15016  004156  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15017                           
 15018                           ;vscp_firmware.c: 221: }
 15019  004158  D04A               	goto	l1045
 15020  00415A                     l9641:
 15021                           
 15022                           ;vscp_firmware.c: 222: else {
 15023                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 15024  00415A  0E04               	movlw	4
 15025  00415C  0100               	movlb	0	; () banked
 15026  00415E  6FCB               	movwf	_vscp_node_state& (0+255),b
 15027                           
 15028                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 15029  004160  0E81               	movlw	129
 15030  004162  6FCC               	movwf	_vscp_omsg& (0+255),b
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 15034  004164  69D1               	setf	(_vscp_omsg+5)& (0+255),b
 15035                           
 15036                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 15037  004166  0E07               	movlw	7
 15038  004168  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 15042  00416A  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 15043  00416C  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 15044                           
 15045                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 15046  00416E  0E03               	movlw	3
 15047  004170  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
 15048                           
 15049                           ; BSR set to: 0
 15050                           ;vscp_firmware.c: 235: vscp_sendEvent();
 15051  004172  ECFD  F028         	call	_vscp_sendEvent	;wreg free
 15052  004176  D03B               	goto	l1045
 15053  004178                     l1046:
 15054                           
 15055                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 15056  004178  0101               	movlb	1	; () banked
 15057  00417A  AF68               	btfss	_vscp_imsg& (0+255),7,b
 15058  00417C  D010               	goto	l9665
 15059                           
 15060                           ; BSR set to: 1
 15061                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 15062                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 15063  00417E  516B               	movf	(_vscp_imsg+3)& (0+255),w,b
 15064  004180  116A               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15065  004182  E135               	bnz	l1045
 15066                           
 15067                           ; BSR set to: 1
 15068  004184  516C               	movf	(_vscp_imsg+4)& (0+255),w,b
 15069  004186  0A03               	xorlw	3
 15070  004188  E132               	bnz	l1045
 15071                           
 15072                           ; BSR set to: 1
 15073                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 15074  00418A  664F               	tstfsz	_vscp_probe_address,c
 15075  00418C  D004               	goto	l9659
 15076                           
 15077                           ; BSR set to: 1
 15078                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 15079  00418E  0E02               	movlw	2
 15080  004190  0100               	movlb	0	; () banked
 15081  004192  6FCB               	movwf	_vscp_node_state& (0+255),b
 15082  004194  D7DE               	goto	l9639
 15083  004196                     l9659:
 15084                           
 15085                           ; BSR set to: 1
 15086                           ;vscp_firmware.c: 257: else {
 15087                           ;vscp_firmware.c: 260: vscp_probe_address++;
 15088  004196  2A4F               	incf	_vscp_probe_address,f,c
 15089                           
 15090                           ; BSR set to: 1
 15091                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 15092  004198  6A4E               	clrf	_vscp_node_substate,c
 15093  00419A                     l9663:
 15094                           
 15095                           ; BSR set to: 1
 15096                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 15097  00419A  6A50               	clrf	_vscp_probe_cnt,c
 15098  00419C  D028               	goto	l1045
 15099  00419E                     l9665:
 15100                           
 15101                           ; BSR set to: 1
 15102                           ;vscp_firmware.c: 267: else {
 15103                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 15104  00419E  0EE9               	movlw	233
 15105  0041A0  5D1E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15106  0041A2  0E03               	movlw	3
 15107  0041A4  591F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15108  0041A6  E323               	bnc	l1045
 15109                           
 15110                           ; BSR set to: 1
 15111                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15112  0041A8  2A50               	incf	_vscp_probe_cnt,f,c
 15113                           
 15114                           ; BSR set to: 1
 15115                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15116  0041AA  0E02               	movlw	2
 15117  0041AC  6450               	cpfsgt	_vscp_probe_cnt,c
 15118  0041AE  D017               	goto	l1053
 15119                           
 15120                           ; BSR set to: 1
 15121                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15122  0041B0  664F               	tstfsz	_vscp_probe_address,c
 15123  0041B2  D005               	goto	l1054
 15124                           
 15125                           ; BSR set to: 1
 15126                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15127  0041B4  2A4F               	incf	_vscp_probe_address,f,c
 15128                           
 15129                           ; BSR set to: 1
 15130                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15131  0041B6  6A4E               	clrf	_vscp_node_substate,c
 15132                           
 15133                           ; BSR set to: 1
 15134                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15135  0041B8  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 15136  0041BA  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15137  0041BC  D7EE               	goto	l9663
 15138  0041BE                     l1054:
 15139                           
 15140                           ; BSR set to: 1
 15141                           ;vscp_firmware.c: 285: else {
 15142                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15143  0041BE  C04F  F0CA         	movff	_vscp_probe_address,_vscp_nickname
 15144                           
 15145                           ; BSR set to: 1
 15146                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15147  0041C2  0E03               	movlw	3
 15148  0041C4  0100               	movlb	0	; () banked
 15149  0041C6  6FCB               	movwf	_vscp_node_state& (0+255),b
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15153  0041C8  6A4E               	clrf	_vscp_node_substate,c
 15154                           
 15155                           ; BSR set to: 0
 15156                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15157  0041CA  51CA               	movf	_vscp_nickname& (0+255),w,b
 15158  0041CC  EC43  F02A         	call	_vscp_writeNicknamePermanent
 15159                           
 15160                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15161  0041D0  0E40               	movlw	64
 15162  0041D2  EC3A  F02A         	call	_vscp_setSegmentCRC
 15163                           
 15164                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15165  0041D6  6A50               	clrf	_vscp_probe_cnt,c
 15166                           
 15167                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15168  0041D8  ECA1  F029         	call	_vscp_goActiveState	;wreg free
 15169  0041DC  D008               	goto	l1045
 15170  0041DE                     l1053:
 15171                           
 15172                           ;vscp_firmware.c: 300: else {
 15173                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15174  0041DE  6A4E               	clrf	_vscp_node_substate,c
 15175  0041E0  D006               	goto	l1045
 15176  0041E2                     l9695:
 15177  0041E2  504E               	movf	_vscp_node_substate,w,c
 15178                           
 15179                           ; Switch size 1, requested type "space"
 15180                           ; Number of cases is 3, Range of values is 0 to 2
 15181                           ; switch strategies available:
 15182                           ; Name         Instructions Cycles
 15183                           ; simple_byte           10     6 (average)
 15184                           ;	Chosen strategy is simple_byte
 15185  0041E4  E0A6               	bz	l9625
 15186  0041E6  0A01               	xorlw	1	; case 1
 15187  0041E8  E0C7               	bz	l1046
 15188  0041EA  0A03               	xorlw	3	; case 2
 15189  0041EC  E1F8               	bnz	l1053
 15190  0041EE                     l1045:
 15191                           
 15192                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15193  0041EE  0101               	movlb	1	; () banked
 15194  0041F0  6B68               	clrf	_vscp_imsg& (0+255),b
 15195                           
 15196                           ; BSR set to: 1
 15197  0041F2  0012               	return	
 15198  0041F4                     __end_of_vscp_handleProbeState:
 15199                           	opt stack 0
 15200                           tblptru	equ	0xFF8
 15201                           tblptrh	equ	0xFF7
 15202                           tblptrl	equ	0xFF6
 15203                           tablat	equ	0xFF5
 15204                           prodh	equ	0xFF4
 15205                           prodl	equ	0xFF3
 15206                           intcon	equ	0xFF2
 15207                           postinc0	equ	0xFEE
 15208                           wreg	equ	0xFE8
 15209                           indf1	equ	0xFE7
 15210                           postdec1	equ	0xFE5
 15211                           fsr1h	equ	0xFE2
 15212                           fsr1l	equ	0xFE1
 15213                           indf2	equ	0xFDF
 15214                           postinc2	equ	0xFDE
 15215                           postdec2	equ	0xFDD
 15216                           plusw2	equ	0xFDB
 15217                           fsr2h	equ	0xFDA
 15218                           fsr2l	equ	0xFD9
 15219                           status	equ	0xFD8
 15220                           
 15221 ;; *************** function _vscp_goActiveState *****************
 15222 ;; Defined at:
 15223 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15224 ;; Parameters:    Size  Location     Type
 15225 ;;		None
 15226 ;; Auto vars:     Size  Location     Type
 15227 ;;		None
 15228 ;; Return value:  Size  Location     Type
 15229 ;;		None               void
 15230 ;; Registers used:
 15231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : F/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15237 ;;      Params:         0       0       0       0       0       0       0
 15238 ;;      Locals:         0       0       0       0       0       0       0
 15239 ;;      Temps:          0       0       0       0       0       0       0
 15240 ;;      Totals:         0       0       0       0       0       0       0
 15241 ;;Total ram usage:        0 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; Hardware stack levels required when called:    7
 15244 ;; This function calls:
 15245 ;;		_vscp_sendEvent
 15246 ;; This function is called by:
 15247 ;;		_main
 15248 ;;		_vscp_handleProbeState
 15249 ;; This function uses a non-reentrant model
 15250 ;;
 15251                           
 15252                           	psect	text69
 15253  005342                     __ptext69:
 15254                           	opt stack 0
 15255  005342                     _vscp_goActiveState:
 15256                           	opt stack 21
 15257                           
 15258                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15259                           
 15260                           ; BSR set to: 1
 15261                           ;incstack = 0
 15262                           ;incstack = 0
 15263  005342  0E81               	movlw	129
 15264  005344  0100               	movlb	0	; () banked
 15265  005346  6FCC               	movwf	_vscp_omsg& (0+255),b
 15266                           
 15267                           ; BSR set to: 0
 15268                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15269  005348  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
 15270                           
 15271                           ; BSR set to: 0
 15272                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15273  00534A  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 15274  00534C  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 15275                           
 15276                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15277  00534E  0E02               	movlw	2
 15278  005350  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15282  005352  C0CA  F0D1         	movff	_vscp_nickname,_vscp_omsg+5
 15283                           
 15284                           ; BSR set to: 0
 15285                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15286  005356  ECFD  F028         	call	_vscp_sendEvent	;wreg free
 15287                           
 15288                           ; BSR set to: 0
 15289                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15290  00535A  0E01               	movlw	1
 15291  00535C  6E4C               	movwf	_vscp_initledfunc,c
 15292                           
 15293                           ; BSR set to: 0
 15294  00535E  0C01               	retlw	1
 15295  005360                     __end_of_vscp_goActiveState:
 15296                           	opt stack 0
 15297                           tblptru	equ	0xFF8
 15298                           tblptrh	equ	0xFF7
 15299                           tblptrl	equ	0xFF6
 15300                           tablat	equ	0xFF5
 15301                           prodh	equ	0xFF4
 15302                           prodl	equ	0xFF3
 15303                           intcon	equ	0xFF2
 15304                           postinc0	equ	0xFEE
 15305                           wreg	equ	0xFE8
 15306                           indf1	equ	0xFE7
 15307                           postdec1	equ	0xFE5
 15308                           fsr1h	equ	0xFE2
 15309                           fsr1l	equ	0xFE1
 15310                           indf2	equ	0xFDF
 15311                           postinc2	equ	0xFDE
 15312                           postdec2	equ	0xFDD
 15313                           plusw2	equ	0xFDB
 15314                           fsr2h	equ	0xFDA
 15315                           fsr2l	equ	0xFD9
 15316                           status	equ	0xFD8
 15317                           
 15318 ;; *************** function _vscp_sendEvent *****************
 15319 ;; Defined at:
 15320 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15321 ;; Parameters:    Size  Location     Type
 15322 ;;		None
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;  rv              1   66[COMRAM] unsigned char 
 15325 ;; Return value:  Size  Location     Type
 15326 ;;                  1    wreg      unsigned char 
 15327 ;; Registers used:
 15328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15329 ;; Tracked objects:
 15330 ;;		On entry : E/0
 15331 ;;		On exit  : F/0
 15332 ;;		Unchanged: 0/0
 15333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15334 ;;      Params:         0       0       0       0       0       0       0
 15335 ;;      Locals:         1       0       0       0       0       0       0
 15336 ;;      Temps:          0       0       0       0       0       0       0
 15337 ;;      Totals:         1       0       0       0       0       0       0
 15338 ;;Total ram usage:        1 bytes
 15339 ;; Hardware stack levels used:    1
 15340 ;; Hardware stack levels required when called:    6
 15341 ;; This function calls:
 15342 ;;		_sendVSCPFrame
 15343 ;; This function is called by:
 15344 ;;		_doOneSecondWork
 15345 ;;		_sendTempEvent
 15346 ;;		_vscp_handleProbeState
 15347 ;;		_vscp_goActiveState
 15348 ;;		_vscp_sendHeartBeat
 15349 ;;		_vscp_newNodeOnline
 15350 ;;		_vscp_handleProtocolEvent
 15351 ;; This function uses a non-reentrant model
 15352 ;;
 15353                           
 15354                           	psect	text70
 15355  0051FA                     __ptext70:
 15356                           	opt stack 0
 15357  0051FA                     _vscp_sendEvent:
 15358                           	opt stack 21
 15359                           
 15360                           ;vscp_firmware.c: 1297: vscp_errorcnt++;
 15361                           
 15362                           ; BSR set to: 0
 15363                           ;incstack = 0
 15364                           ;incstack = 0
 15365  0051FA  C0CE  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15366  0051FE  C0CF  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15367  005202  C0D0  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15368  005206  C0CA  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15369  00520A  C0CD  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15370  00520E  0100               	movlb	0	; () banked
 15371  005210  51CC               	movf	_vscp_omsg& (0+255),w,b
 15372  005212  0B0F               	andlw	15
 15373  005214  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15374  005216  0ED1               	movlw	low (_vscp_omsg+5)
 15375  005218  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15376  00521A  EC10  F022         	call	_sendVSCPFrame	;wreg free
 15377  00521E  6E43               	movwf	vscp_sendEvent@rv,c
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;vscp_firmware.c: 1298: }
 15381                           ;vscp_firmware.c: 1300: return rv;
 15382  005220  5043               	movf	vscp_sendEvent@rv,w,c
 15383                           
 15384                           ; BSR set to: 0
 15385  005222  0012               	return	
 15386  005224                     __end_of_vscp_sendEvent:
 15387                           	opt stack 0
 15388                           tblptru	equ	0xFF8
 15389                           tblptrh	equ	0xFF7
 15390                           tblptrl	equ	0xFF6
 15391                           tablat	equ	0xFF5
 15392                           prodh	equ	0xFF4
 15393                           prodl	equ	0xFF3
 15394                           intcon	equ	0xFF2
 15395                           postinc0	equ	0xFEE
 15396                           wreg	equ	0xFE8
 15397                           indf1	equ	0xFE7
 15398                           postdec1	equ	0xFE5
 15399                           fsr1h	equ	0xFE2
 15400                           fsr1l	equ	0xFE1
 15401                           indf2	equ	0xFDF
 15402                           postinc2	equ	0xFDE
 15403                           postdec2	equ	0xFDD
 15404                           plusw2	equ	0xFDB
 15405                           fsr2h	equ	0xFDA
 15406                           fsr2l	equ	0xFD9
 15407                           status	equ	0xFD8
 15408                           
 15409 ;; *************** function _sendVSCPFrame *****************
 15410 ;; Defined at:
 15411 ;;		line 2864 in file "../main.c"
 15412 ;; Parameters:    Size  Location     Type
 15413 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15414 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15415 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15416 ;;  priority        1    4[BANK0 ] unsigned char 
 15417 ;;  size            1    5[BANK0 ] unsigned char 
 15418 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15419 ;;		 -> vscp_omsg(13), 
 15420 ;; Auto vars:     Size  Location     Type
 15421 ;;  id              4   27[BANK0 ] unsigned long 
 15422 ;; Return value:  Size  Location     Type
 15423 ;;                  1    wreg      unsigned char 
 15424 ;; Registers used:
 15425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15426 ;; Tracked objects:
 15427 ;;		On entry : F/0
 15428 ;;		On exit  : F/0
 15429 ;;		Unchanged: 0/0
 15430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15431 ;;      Params:         0       7       0       0       0       0       0
 15432 ;;      Locals:         0       4       0       0       0       0       0
 15433 ;;      Temps:          0      20       0       0       0       0       0
 15434 ;;      Totals:         0      31       0       0       0       0       0
 15435 ;;Total ram usage:       31 bytes
 15436 ;; Hardware stack levels used:    1
 15437 ;; Hardware stack levels required when called:    5
 15438 ;; This function calls:
 15439 ;;		_sendCANFrame
 15440 ;; This function is called by:
 15441 ;;		_vscp_sendEvent
 15442 ;; This function uses a non-reentrant model
 15443 ;;
 15444                           
 15445                           	psect	text71
 15446  004420                     __ptext71:
 15447                           	opt stack 0
 15448  004420                     _sendVSCPFrame:
 15449                           	opt stack 21
 15450                           
 15451                           ; BSR set to: 0
 15452                           ;main.c: 2865: uint32_t id = ((uint32_t) priority << 26) |
 15453                           ;main.c: 2866: ((uint32_t) vscpclass << 16) |
 15454                           ;main.c: 2867: ((uint32_t) vscptype << 8) |
 15455                           ;main.c: 2868: nodeid;
 15456                           
 15457                           ; BSR set to: 0
 15458                           ;incstack = 0
 15459                           ;incstack = 0
 15460  004420  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15461  004424  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15462  004426  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15463  004428  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15464  00442A  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15465  00442E  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15466  004432  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15467  004436  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15468  004438  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15469  00443A  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15470  00443C  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15471  00443E  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15472  004440  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15473  004442  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15474  004444  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15475  004448  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15476  00444C  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15477  00444E  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15478  004450  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15479  004454  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15480  004456  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15481  004458  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15482  00445A  0E1A               	movlw	26
 15483  00445C                     u8945:
 15484  00445C  90D8               	bcf	status,0,c
 15485  00445E  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15486  004460  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15487  004462  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15488  004464  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15489  004466  2EE8               	decfsz	wreg,f,c
 15490  004468  D7F9               	goto	u8945
 15491  00446A  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15492  00446C  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15493  00446E  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15494  004470  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15495  004472  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15496  004474  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15497  004476  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15498  004478  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15499  00447A  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15500  00447C  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15501  00447E  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15502  004480  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15503  004482  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15504  004484  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15505  004486  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15506  004488  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15507  00448A  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15508  00448C  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15509  00448E  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15510  004490  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15511  004492  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15512  004494  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15513  004496  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15514  004498  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15515  00449A  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15516  00449C  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15517  00449E  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15518  0044A0  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15519  0044A2  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15520  0044A4  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15521  0044A6  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15522  0044A8  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15523  0044AA  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15524                           
 15525                           ; BSR set to: 0
 15526                           ;main.c: 2872: vscp_errorcnt++;
 15527  0044AC  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15528  0044B0  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15529  0044B4  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15530  0044B8  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15531  0044BC  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15532  0044C0  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15533  0044C4  EC56  F027         	call	_sendCANFrame	;wreg free
 15534  0044C8  0900               	iorlw	0
 15535                           
 15536                           ; BSR set to: 0
 15537                           ;main.c: 2873: return 0;
 15538  0044CA  0E00               	movlw	0
 15539  0044CC  A4D8               	btfss	status,2,c
 15540                           
 15541                           ; BSR set to: 0
 15542                           ;main.c: 2874: }
 15543                           ;main.c: 2876: return 1;
 15544  0044CE  0E01               	movlw	1
 15545                           
 15546                           ; BSR set to: 0
 15547  0044D0  0012               	return	
 15548  0044D2                     __end_of_sendVSCPFrame:
 15549                           	opt stack 0
 15550                           tblptru	equ	0xFF8
 15551                           tblptrh	equ	0xFF7
 15552                           tblptrl	equ	0xFF6
 15553                           tablat	equ	0xFF5
 15554                           prodh	equ	0xFF4
 15555                           prodl	equ	0xFF3
 15556                           intcon	equ	0xFF2
 15557                           postinc0	equ	0xFEE
 15558                           wreg	equ	0xFE8
 15559                           indf1	equ	0xFE7
 15560                           postdec1	equ	0xFE5
 15561                           fsr1h	equ	0xFE2
 15562                           fsr1l	equ	0xFE1
 15563                           indf2	equ	0xFDF
 15564                           postinc2	equ	0xFDE
 15565                           postdec2	equ	0xFDD
 15566                           plusw2	equ	0xFDB
 15567                           fsr2h	equ	0xFDA
 15568                           fsr2l	equ	0xFD9
 15569                           status	equ	0xFD8
 15570                           
 15571 ;; *************** function _sendCANFrame *****************
 15572 ;; Defined at:
 15573 ;;		line 2911 in file "../main.c"
 15574 ;; Parameters:    Size  Location     Type
 15575 ;;  id              4   59[COMRAM] unsigned long 
 15576 ;;  dlc             1   63[COMRAM] unsigned char 
 15577 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15578 ;;		 -> vscp_omsg(13), 
 15579 ;; Auto vars:     Size  Location     Type
 15580 ;;  rv              1   65[COMRAM] unsigned char 
 15581 ;; Return value:  Size  Location     Type
 15582 ;;                  1    wreg      unsigned char 
 15583 ;; Registers used:
 15584 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15585 ;; Tracked objects:
 15586 ;;		On entry : F/0
 15587 ;;		On exit  : F/0
 15588 ;;		Unchanged: 0/0
 15589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15590 ;;      Params:         6       0       0       0       0       0       0
 15591 ;;      Locals:         1       0       0       0       0       0       0
 15592 ;;      Temps:          0       0       0       0       0       0       0
 15593 ;;      Totals:         7       0       0       0       0       0       0
 15594 ;;Total ram usage:        7 bytes
 15595 ;; Hardware stack levels used:    1
 15596 ;; Hardware stack levels required when called:    4
 15597 ;; This function calls:
 15598 ;;		_ECANSendMessage
 15599 ;; This function is called by:
 15600 ;;		_sendVSCPFrame
 15601 ;; This function uses a non-reentrant model
 15602 ;;
 15603                           
 15604                           	psect	text72
 15605  004EAC                     __ptext72:
 15606                           	opt stack 0
 15607  004EAC                     _sendCANFrame:
 15608                           	opt stack 21
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;main.c: 2912: uint8_t rv = 0;
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;incstack = 0
 15615                           ;incstack = 0
 15616  004EAC  6A42               	clrf	sendCANFrame@rv,c
 15617                           
 15618                           ;main.c: 2914: sendTimer = 0;
 15619  004EAE  0101               	movlb	1	; () banked
 15620  004EB0  6B1A               	clrf	_sendTimer& (0+255),b	;volatile
 15621  004EB2  6B1B               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 15622                           
 15623                           ;main.c: 2915: while ( sendTimer < 1000 ) {
 15624  004EB4  D015               	goto	l11047
 15625  004EB6                     l11043:
 15626                           
 15627                           ; BSR set to: 1
 15628                           ;main.c: 2916: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15629  004EB6  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15630  004EBA  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15631  004EBE  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15632  004EC2  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15633  004EC6  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15634  004ECA  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15635  004ECE  0E20               	movlw	32
 15636  004ED0  6E1E               	movwf	?_ECANSendMessage+6,c
 15637  004ED2  EC99  F01B         	call	_ECANSendMessage	;wreg free
 15638  004ED6  0900               	iorlw	0
 15639  004ED8  E003               	bz	l11047
 15640                           
 15641                           ;main.c: 2917: rv = 1;
 15642  004EDA  0E01               	movlw	1
 15643  004EDC  6E42               	movwf	sendCANFrame@rv,c
 15644                           
 15645                           ;main.c: 2918: break;
 15646  004EDE  D006               	goto	l634
 15647  004EE0                     l11047:
 15648  004EE0  0EE8               	movlw	232
 15649  004EE2  0101               	movlb	1	; () banked
 15650  004EE4  5D1A               	subwf	_sendTimer& (0+255),w,b	;volatile
 15651  004EE6  0E03               	movlw	3
 15652  004EE8  591B               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 15653  004EEA  E3E5               	bnc	l11043
 15654  004EEC                     l634:
 15655                           
 15656                           ;main.c: 2919: }
 15657                           ;main.c: 2920: }
 15658                           ;main.c: 2922: vscp_omsg.flags = 0;
 15659  004EEC  0100               	movlb	0	; () banked
 15660  004EEE  6BCC               	clrf	_vscp_omsg& (0+255),b
 15661                           
 15662                           ; BSR set to: 0
 15663                           ;main.c: 2924: return rv;
 15664  004EF0  5042               	movf	sendCANFrame@rv,w,c
 15665                           
 15666                           ; BSR set to: 0
 15667  004EF2  0012               	return	
 15668  004EF4                     __end_of_sendCANFrame:
 15669                           	opt stack 0
 15670                           tblptru	equ	0xFF8
 15671                           tblptrh	equ	0xFF7
 15672                           tblptrl	equ	0xFF6
 15673                           tablat	equ	0xFF5
 15674                           prodh	equ	0xFF4
 15675                           prodl	equ	0xFF3
 15676                           intcon	equ	0xFF2
 15677                           postinc0	equ	0xFEE
 15678                           wreg	equ	0xFE8
 15679                           indf1	equ	0xFE7
 15680                           postdec1	equ	0xFE5
 15681                           fsr1h	equ	0xFE2
 15682                           fsr1l	equ	0xFE1
 15683                           indf2	equ	0xFDF
 15684                           postinc2	equ	0xFDE
 15685                           postdec2	equ	0xFDD
 15686                           plusw2	equ	0xFDB
 15687                           fsr2h	equ	0xFDA
 15688                           fsr2l	equ	0xFD9
 15689                           status	equ	0xFD8
 15690                           
 15691 ;; *************** function _ECANSendMessage *****************
 15692 ;; Defined at:
 15693 ;;		line 617 in file "../ECAN.c"
 15694 ;; Parameters:    Size  Location     Type
 15695 ;;  id              4   23[COMRAM] unsigned long 
 15696 ;;  data            1   27[COMRAM] PTR unsigned char 
 15697 ;;		 -> vscp_omsg(13), 
 15698 ;;  dataLen         1   28[COMRAM] unsigned char 
 15699 ;;  msgFlags        1   29[COMRAM] enum E16315
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15702 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15703 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15704 ;;		 -> B0CON(1), 
 15705 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15706 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15707 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15708 ;;		 -> B0CON(1), 
 15709 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15710 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15711 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15712 ;;		 -> B0CON(1), 
 15713 ;;  i               1   56[COMRAM] unsigned char 
 15714 ;;  temp            1   55[COMRAM] unsigned char 
 15715 ;;  tempBSEL0       1   52[COMRAM] struct .
 15716 ;;  j               1   51[COMRAM] unsigned char 
 15717 ;;  buffers         1   50[COMRAM] unsigned char 
 15718 ;;  mode            1   49[COMRAM] unsigned char 
 15719 ;; Return value:  Size  Location     Type
 15720 ;;                  1    wreg      enum E15660
 15721 ;; Registers used:
 15722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15723 ;; Tracked objects:
 15724 ;;		On entry : E/1
 15725 ;;		On exit  : 3/1
 15726 ;;		Unchanged: 0/0
 15727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15728 ;;      Params:         7       0       0       0       0       0       0
 15729 ;;      Locals:        28       0       0       0       0       0       0
 15730 ;;      Temps:          1       0       0       0       0       0       0
 15731 ;;      Totals:        36       0       0       0       0       0       0
 15732 ;;Total ram usage:       36 bytes
 15733 ;; Hardware stack levels used:    1
 15734 ;; Hardware stack levels required when called:    3
 15735 ;; This function calls:
 15736 ;;		__CANIDToRegs
 15737 ;; This function is called by:
 15738 ;;		_sendCANFrame
 15739 ;; This function uses a non-reentrant model
 15740 ;;
 15741                           
 15742                           	psect	text73
 15743  003732                     __ptext73:
 15744                           	opt stack 0
 15745  003732                     _ECANSendMessage:
 15746                           	opt stack 21
 15747                           
 15748                           ;ECAN.c: 619: BYTE mode;
 15749                           ;ECAN.c: 620: BYTE buffers;
 15750                           ;ECAN.c: 628: BYTE i,j;
 15751                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15752                           ;ECAN.c: 630: BYTE* pb[9];
 15753                           ;ECAN.c: 631: BYTE temp;
 15754                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15755                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15756                           
 15757                           ; BSR set to: 0
 15758                           ;incstack = 0
 15759                           ;incstack = 0
 15760  003732  0E0F               	movlw	15	;volatile
 15761  003734  6E21               	movwf	ECANSendMessage@pb+1,c
 15762  003736  0E40               	movlw	64	;volatile
 15763  003738  6E20               	movwf	ECANSendMessage@pb,c
 15764                           
 15765                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15766  00373A  0E0F               	movlw	15	;volatile
 15767  00373C  6E23               	movwf	ECANSendMessage@pb+3,c
 15768  00373E  0E30               	movlw	48	;volatile
 15769  003740  6E22               	movwf	ECANSendMessage@pb+2,c
 15770                           
 15771                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15772  003742  0E0F               	movlw	15	;volatile
 15773  003744  6E25               	movwf	ECANSendMessage@pb+5,c
 15774  003746  0E20               	movlw	32	;volatile
 15775  003748  6E24               	movwf	ECANSendMessage@pb+4,c
 15776                           
 15777                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15778  00374A  0E0E               	movlw	14	;volatile
 15779  00374C  6E27               	movwf	ECANSendMessage@pb+7,c
 15780  00374E  0E20               	movlw	32	;volatile
 15781  003750  6E26               	movwf	ECANSendMessage@pb+6,c
 15782                           
 15783                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15784  003752  0E0E               	movlw	14	;volatile
 15785  003754  6E29               	movwf	ECANSendMessage@pb+9,c
 15786  003756  0E30               	movlw	48	;volatile
 15787  003758  6E28               	movwf	ECANSendMessage@pb+8,c
 15788                           
 15789                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15790  00375A  0E0E               	movlw	14	;volatile
 15791  00375C  6E2B               	movwf	ECANSendMessage@pb+11,c
 15792  00375E  0E40               	movlw	64	;volatile
 15793  003760  6E2A               	movwf	ECANSendMessage@pb+10,c
 15794                           
 15795                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15796  003762  0E0E               	movlw	14	;volatile
 15797  003764  6E2D               	movwf	ECANSendMessage@pb+13,c
 15798  003766  0E50               	movlw	80	;volatile
 15799  003768  6E2C               	movwf	ECANSendMessage@pb+12,c
 15800                           
 15801                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15802  00376A  0E0E               	movlw	14	;volatile
 15803  00376C  6E2F               	movwf	ECANSendMessage@pb+15,c
 15804  00376E  0E60               	movlw	96	;volatile
 15805  003770  6E2E               	movwf	ECANSendMessage@pb+14,c
 15806                           
 15807                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15808  003772  0E0E               	movlw	14	;volatile
 15809  003774  6E31               	movwf	ECANSendMessage@pb+17,c
 15810  003776  0E70               	movlw	112	;volatile
 15811  003778  6E30               	movwf	ECANSendMessage@pb+16,c
 15812                           
 15813                           ; BSR set to: 14
 15814                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15815  00377A  5077               	movf	3959,w,c	;volatile
 15816  00377C  0BC0               	andlw	192
 15817  00377E  6E32               	movwf	ECANSendMessage@mode,c
 15818                           
 15819                           ; BSR set to: 14
 15820                           ;ECAN.c: 660: if ( mode == 0x00 )
 15821  003780  6632               	tstfsz	ECANSendMessage@mode,c
 15822  003782  D002               	goto	l11061
 15823                           
 15824                           ; BSR set to: 14
 15825                           ;ECAN.c: 661: buffers = 2;
 15826  003784  0E02               	movlw	2
 15827  003786  D001               	goto	L33
 15828  003788                     l11061:
 15829                           
 15830                           ; BSR set to: 14
 15831                           ;ECAN.c: 662: else
 15832                           ;ECAN.c: 663: buffers = 8;
 15833  003788  0E08               	movlw	8
 15834  00378A                     L33:
 15835  00378A  6E33               	movwf	ECANSendMessage@buffers,c
 15836                           
 15837                           ; BSR set to: 14
 15838                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15839  00378C  010D               	movlb	13	; () banked
 15840  00378E  90D8               	bcf	status,0,c
 15841  003790  31F8               	rrcf	248,w,b	;volatile
 15842  003792  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15843                           
 15844                           ; BSR set to: 13
 15845                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15846  003794  6A39               	clrf	ECANSendMessage@i,c
 15847  003796  D07B               	goto	l11121
 15848  003798                     l11067:
 15849                           
 15850                           ;ECAN.c: 688: {
 15851                           ;ECAN.c: 693: ptr = pb[i];
 15852  003798  5039               	movf	ECANSendMessage@i,w,c
 15853  00379A  0D02               	mullw	2
 15854  00379C  50F3               	movf	prodl,w,c
 15855  00379E  0F20               	addlw	low ECANSendMessage@pb
 15856  0037A0  6ED9               	movwf	fsr2l,c
 15857  0037A2  6ADA               	clrf	fsr2h,c
 15858  0037A4  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15859  0037A8  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15860                           
 15861                           ;ECAN.c: 694: tempPtr = ptr;
 15862  0037AC  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15863  0037B0  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15864                           
 15865                           ;ECAN.c: 702: if ( i > 2 )
 15866  0037B4  0E02               	movlw	2
 15867  0037B6  6439               	cpfsgt	ECANSendMessage@i,c
 15868  0037B8  D004               	goto	l11079
 15869                           
 15870                           ;ECAN.c: 703: {
 15871                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15872  0037BA  90D8               	bcf	status,0,c
 15873  0037BC  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15874                           
 15875                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15876  0037BE  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15877  0037C0  D065               	goto	l11119
 15878  0037C2                     l11079:
 15879                           
 15880                           ;ECAN.c: 714: }
 15881                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15882  0037C2  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15883  0037C6  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15884  0037CA  50DF               	movf	indf2,w,c
 15885  0037CC  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15886  0037CE  B61F               	btfsc	??_ECANSendMessage,3,c
 15887  0037D0  D05D               	goto	l11119
 15888                           
 15889                           ;ECAN.c: 721: {
 15890                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15891  0037D2  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15892  0037D6  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15893  0037DA  0EFC               	movlw	252
 15894  0037DC  16DF               	andwf	indf2,f,c
 15895                           
 15896                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15897  0037DE  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15898  0037E2  0E03               	movlw	3
 15899  0037E4  161F               	andwf	??_ECANSendMessage,f,c
 15900  0037E6  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15901  0037EA  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15902  0037EE  501F               	movf	??_ECANSendMessage,w,c
 15903  0037F0  12DF               	iorwf	indf2,f,c
 15904                           
 15905                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15906  0037F2  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15907  0037F4  D004               	goto	l822
 15908                           
 15909                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15910  0037F6  501D               	movf	ECANSendMessage@dataLen,w,c
 15911  0037F8  0940               	iorlw	64
 15912  0037FA  6E38               	movwf	ECANSendMessage@temp,c
 15913  0037FC  D002               	goto	l11089
 15914  0037FE                     l822:
 15915                           
 15916                           ;ECAN.c: 729: else
 15917                           ;ECAN.c: 730: temp = dataLen;
 15918  0037FE  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15919  003802                     l11089:
 15920                           
 15921                           ;ECAN.c: 732: *(ptr+5) = temp;
 15922  003802  EE20 F005          	lfsr	2,5
 15923  003806  503A               	movf	ECANSendMessage@ptr,w,c
 15924  003808  26D9               	addwf	fsr2l,f,c
 15925  00380A  503B               	movf	ECANSendMessage@ptr+1,w,c
 15926  00380C  22DA               	addwfc	fsr2h,f,c
 15927  00380E  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15928                           
 15929                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15930  003812  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15931  003814  D003               	goto	l824
 15932                           
 15933                           ;ECAN.c: 736: temp = 1;
 15934  003816  0E01               	movlw	1
 15935  003818  6E38               	movwf	ECANSendMessage@temp,c
 15936  00381A  D001               	goto	l11095
 15937  00381C                     l824:
 15938                           
 15939                           ;ECAN.c: 738: else
 15940                           ;ECAN.c: 739: temp = 0;
 15941  00381C  6A38               	clrf	ECANSendMessage@temp,c
 15942  00381E                     l11095:
 15943                           
 15944                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15945  00381E  283A               	incf	ECANSendMessage@ptr,w,c
 15946  003820  6E0E               	movwf	?__CANIDToRegs,c
 15947  003822  0E00               	movlw	0
 15948  003824  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15949  003826  6E0F               	movwf	?__CANIDToRegs+1,c
 15950  003828  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15951  00382C  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15952  003830  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15953  003834  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15954  003838  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15955  00383C  ECA8  F01E         	call	__CANIDToRegs	;wreg free
 15956                           
 15957                           ;ECAN.c: 745: ptr += 6;
 15958  003840  0E06               	movlw	6
 15959  003842  263A               	addwf	ECANSendMessage@ptr,f,c
 15960  003844  0E00               	movlw	0
 15961  003846  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15962                           
 15963                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15964  003848  6A34               	clrf	ECANSendMessage@j,c
 15965  00384A  D00D               	goto	l11109
 15966  00384C                     l11101:
 15967                           
 15968                           ;ECAN.c: 748: *ptr++ = *data++;
 15969  00384C  501C               	movf	ECANSendMessage@data,w,c
 15970  00384E  6ED9               	movwf	fsr2l,c
 15971  003850  6ADA               	clrf	fsr2h,c
 15972  003852  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15973  003856  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15974  00385A  CFDF FFE7          	movff	indf2,indf1
 15975  00385E  2A1C               	incf	ECANSendMessage@data,f,c
 15976  003860  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15977  003862  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15978  003864  2A34               	incf	ECANSendMessage@j,f,c
 15979  003866                     l11109:
 15980  003866  501D               	movf	ECANSendMessage@dataLen,w,c
 15981  003868  5C34               	subwf	ECANSendMessage@j,w,c
 15982  00386A  E3F0               	bnc	l11101
 15983                           
 15984                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15985  00386C  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15986  003870  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15987  003874  50DF               	movf	indf2,w,c
 15988  003876  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15989  003878  B41F               	btfsc	??_ECANSendMessage,2,c
 15990  00387A  D006               	goto	l11115
 15991                           
 15992                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15993  00387C  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15994  003880  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15995  003884  0E00               	movlw	0
 15996  003886  86DB               	bsf	plusw2,3,c
 15997  003888                     l11115:
 15998                           
 15999                           ;ECAN.c: 755: return TRUE;
 16000  003888  0E01               	movlw	1
 16001  00388A  D005               	goto	l830
 16002  00388C                     l11119:
 16003  00388C  2A39               	incf	ECANSendMessage@i,f,c
 16004  00388E                     l11121:
 16005  00388E  5033               	movf	ECANSendMessage@buffers,w,c
 16006  003890  5C39               	subwf	ECANSendMessage@i,w,c
 16007  003892  E382               	bnc	l11067
 16008                           
 16009                           ;ECAN.c: 756: }
 16010                           ;ECAN.c: 757: }
 16011                           ;ECAN.c: 760: return FALSE;
 16012  003894  0E00               	movlw	0
 16013  003896                     l830:
 16014  003896  0012               	return	
 16015  003898                     __end_of_ECANSendMessage:
 16016                           	opt stack 0
 16017                           tblptru	equ	0xFF8
 16018                           tblptrh	equ	0xFF7
 16019                           tblptrl	equ	0xFF6
 16020                           tablat	equ	0xFF5
 16021                           prodh	equ	0xFF4
 16022                           prodl	equ	0xFF3
 16023                           intcon	equ	0xFF2
 16024                           postinc0	equ	0xFEE
 16025                           wreg	equ	0xFE8
 16026                           indf1	equ	0xFE7
 16027                           postdec1	equ	0xFE5
 16028                           fsr1h	equ	0xFE2
 16029                           fsr1l	equ	0xFE1
 16030                           indf2	equ	0xFDF
 16031                           postinc2	equ	0xFDE
 16032                           postdec2	equ	0xFDD
 16033                           plusw2	equ	0xFDB
 16034                           fsr2h	equ	0xFDA
 16035                           fsr2l	equ	0xFD9
 16036                           status	equ	0xFD8
 16037                           
 16038 ;; *************** function __CANIDToRegs *****************
 16039 ;; Defined at:
 16040 ;;		line 1099 in file "../ECAN.c"
 16041 ;; Parameters:    Size  Location     Type
 16042 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16043 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16044 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16045 ;;		 -> B0CON(1), 
 16046 ;;  val             4   15[COMRAM] unsigned long 
 16047 ;;  type            1   19[COMRAM] unsigned char 
 16048 ;; Auto vars:     Size  Location     Type
 16049 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 16050 ;;		 -> _CANIDToRegs@val(4), 
 16051 ;; Return value:  Size  Location     Type
 16052 ;;		None               void
 16053 ;; Registers used:
 16054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16055 ;; Tracked objects:
 16056 ;;		On entry : 3/D
 16057 ;;		On exit  : 3/1
 16058 ;;		Unchanged: 2/0
 16059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16060 ;;      Params:         7       0       0       0       0       0       0
 16061 ;;      Locals:         1       0       0       0       0       0       0
 16062 ;;      Temps:          2       0       0       0       0       0       0
 16063 ;;      Totals:        10       0       0       0       0       0       0
 16064 ;;Total ram usage:       10 bytes
 16065 ;; Hardware stack levels used:    1
 16066 ;; Hardware stack levels required when called:    2
 16067 ;; This function calls:
 16068 ;;		Nothing
 16069 ;; This function is called by:
 16070 ;;		_ECANSendMessage
 16071 ;; This function uses a non-reentrant model
 16072 ;;
 16073                           
 16074                           	psect	text74
 16075  003D50                     __ptext74:
 16076                           	opt stack 0
 16077  003D50                     __CANIDToRegs:
 16078                           	opt stack 21
 16079                           
 16080                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16081                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16082                           
 16083                           ;incstack = 0
 16084                           ;incstack = 0
 16085  003D50  0E10               	movlw	low __CANIDToRegs@val
 16086  003D52  6E17               	movwf	__CANIDToRegs@Value,c
 16087                           
 16088                           ;ECAN.c: 1104: if ( type == 0 )
 16089  003D54  6614               	tstfsz	__CANIDToRegs@type,c
 16090  003D56  D022               	goto	l11137
 16091                           
 16092                           ;ECAN.c: 1105: {
 16093                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16094  003D58  5017               	movf	__CANIDToRegs@Value,w,c
 16095  003D5A  6ED9               	movwf	fsr2l,c
 16096  003D5C  6ADA               	clrf	fsr2h,c
 16097  003D5E  50DF               	movf	indf2,w,c
 16098  003D60  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16099  003D62  90D8               	bcf	status,0,c
 16100  003D64  3215               	rrcf	??__CANIDToRegs,f,c
 16101  003D66  90D8               	bcf	status,0,c
 16102  003D68  3215               	rrcf	??__CANIDToRegs,f,c
 16103  003D6A  90D8               	bcf	status,0,c
 16104  003D6C  3015               	rrcf	??__CANIDToRegs,w,c
 16105                           
 16106                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16107  003D6E  D862               	call	PL24	;call to abstracted procedure
 16108  003D70  2AD9               	incf	fsr2l,f,c
 16109  003D72  6ADA               	clrf	fsr2h,c
 16110  003D74  D872               	call	PL76	;call to abstracted procedure
 16111  003D76                     u9085:
 16112  003D76  90D8               	bcf	status,0,c
 16113  003D78  3615               	rlcf	??__CANIDToRegs,f,c
 16114  003D7A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16115  003D7C  D7FC               	goto	u9085
 16116  003D7E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16117                           
 16118                           ;ECAN.c: 1109: ptr++;
 16119                           
 16120                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16121  003D82  D846               	call	PL14	;call to abstracted procedure
 16122  003D84  D86A               	call	PL76	;call to abstracted procedure
 16123  003D86                     u9095:
 16124  003D86  90D8               	bcf	status,0,c
 16125  003D88  3615               	rlcf	??__CANIDToRegs,f,c
 16126  003D8A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16127  003D8C  D7FC               	goto	u9095
 16128  003D8E  5015               	movf	??__CANIDToRegs,w,c
 16129  003D90  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16130  003D94  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16131  003D98  6EDF               	movwf	indf2,c
 16132                           
 16133                           ;ECAN.c: 1111: }
 16134  003D9A  D039               	goto	l884
 16135  003D9C                     l11137:
 16136                           
 16137                           ;ECAN.c: 1112: else
 16138                           ;ECAN.c: 1113: {
 16139                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16140  003D9C  5017               	movf	__CANIDToRegs@Value,w,c
 16141  003D9E  D842               	call	PL22	;call to abstracted procedure
 16142  003DA0  0E05               	movlw	5
 16143  003DA2  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16144  003DA4                     u9105:
 16145  003DA4  90D8               	bcf	status,0,c
 16146  003DA6  3215               	rrcf	??__CANIDToRegs,f,c
 16147  003DA8  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16148  003DAA  D7FC               	goto	u9105
 16149  003DAC  5015               	movf	??__CANIDToRegs,w,c
 16150                           
 16151                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16152  003DAE  D842               	call	PL24	;call to abstracted procedure
 16153  003DB0  0E03               	movlw	3
 16154  003DB2  D849               	call	PL44	;call to abstracted procedure
 16155  003DB4  3615               	rlcf	??__CANIDToRegs,f,c
 16156  003DB6  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16157                           
 16158                           ;ECAN.c: 1117: ptr++;
 16159                           
 16160                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16161  003DBA  D82A               	call	PL14	;call to abstracted procedure
 16162  003DBC  0E02               	movlw	2
 16163  003DBE  D843               	call	PL44	;call to abstracted procedure
 16164  003DC0  3415               	rlcf	??__CANIDToRegs,w,c
 16165  003DC2  0BE0               	andlw	224
 16166  003DC4  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16167  003DC8  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16168  003DCC  6EDF               	movwf	indf2,c
 16169                           
 16170                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16171  003DCE  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16172  003DD2  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16173  003DD6  0E00               	movlw	0
 16174  003DD8  86DB               	bsf	plusw2,3,c
 16175                           
 16176                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16177  003DDA  5017               	movf	__CANIDToRegs@Value,w,c
 16178  003DDC  D823               	call	PL22	;call to abstracted procedure
 16179  003DDE  0E03               	movlw	3
 16180  003DE0  1615               	andwf	??__CANIDToRegs,f,c
 16181  003DE2  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16182                           
 16183                           ;ECAN.c: 1122: ptr++;
 16184                           
 16185                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16186  003DE6  D814               	call	PL14	;call to abstracted procedure
 16187  003DE8  2AD9               	incf	fsr2l,f,c
 16188  003DEA  6ADA               	clrf	fsr2h,c
 16189  003DEC  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16190  003DF0  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16191  003DF4  CFDF FFE7          	movff	indf2,indf1
 16192                           
 16193                           ;ECAN.c: 1124: ptr++;
 16194  003DF8  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16195  003DFA  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16196                           
 16197                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16198  003DFC  5017               	movf	__CANIDToRegs@Value,w,c
 16199  003DFE  6ED9               	movwf	fsr2l,c
 16200  003E00  6ADA               	clrf	fsr2h,c
 16201  003E02  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16202  003E06  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16203  003E0A  CFDF FFE7          	movff	indf2,indf1
 16204  003E0E                     l884:
 16205  003E0E  0012               	return	
 16206  003E10                     __end_of__CANIDToRegs:
 16207                           	opt stack 0
 16208  003E10                     PL14:
 16209                           	opt stack 21
 16210  003E10  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16211  003E14  5015               	movf	??__CANIDToRegs,w,c
 16212  003E16  12DF               	iorwf	indf2,f,c
 16213  003E18  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16214  003E1A  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16215  003E1C  5017               	movf	__CANIDToRegs@Value,w,c
 16216  003E1E  6ED9               	movwf	fsr2l,c
 16217  003E20  6ADA               	clrf	fsr2h,c
 16218  003E22  0012               	return	
 16219  003E24                     __end_ofPL14:
 16220                           	opt stack 0
 16221  003E24                     PL22:
 16222                           	opt stack 21
 16223  003E24  6ED9               	movwf	fsr2l,c
 16224  003E26  6ADA               	clrf	fsr2h,c
 16225  003E28  0E02               	movlw	2
 16226  003E2A  26D9               	addwf	fsr2l,f,c
 16227  003E2C  6ADA               	clrf	fsr2h,c
 16228  003E2E  50DF               	movf	indf2,w,c
 16229  003E30  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16230  003E32  0012               	return	
 16231  003E34                     __end_ofPL22:
 16232                           	opt stack 0
 16233  003E34                     PL24:
 16234                           	opt stack 21
 16235  003E34  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16236  003E38  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16237  003E3C  6EDF               	movwf	indf2,c
 16238  003E3E  5017               	movf	__CANIDToRegs@Value,w,c
 16239  003E40  6ED9               	movwf	fsr2l,c
 16240  003E42  6ADA               	clrf	fsr2h,c
 16241  003E44  0012               	return	
 16242  003E46                     __end_ofPL24:
 16243                           	opt stack 0
 16244  003E46                     PL44:
 16245                           	opt stack 21
 16246  003E46  26D9               	addwf	fsr2l,f,c
 16247  003E48  6ADA               	clrf	fsr2h,c
 16248  003E4A  50DF               	movf	indf2,w,c
 16249  003E4C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16250  003E4E  90D8               	bcf	status,0,c
 16251  003E50  3615               	rlcf	??__CANIDToRegs,f,c
 16252  003E52  90D8               	bcf	status,0,c
 16253  003E54  3615               	rlcf	??__CANIDToRegs,f,c
 16254  003E56  90D8               	bcf	status,0,c
 16255  003E58  0012               	return	
 16256  003E5A                     __end_ofPL44:
 16257                           	opt stack 0
 16258  003E5A                     PL76:
 16259                           	opt stack 21
 16260  003E5A  50DF               	movf	indf2,w,c
 16261  003E5C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16262  003E5E  0E05               	movlw	5
 16263  003E60  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16264  003E62  0C05               	retlw	5
 16265  003E64                     __end_ofPL76:
 16266                           	opt stack 0
 16267                           tblptru	equ	0xFF8
 16268                           tblptrh	equ	0xFF7
 16269                           tblptrl	equ	0xFF6
 16270                           tablat	equ	0xFF5
 16271                           prodh	equ	0xFF4
 16272                           prodl	equ	0xFF3
 16273                           intcon	equ	0xFF2
 16274                           postinc0	equ	0xFEE
 16275                           wreg	equ	0xFE8
 16276                           indf1	equ	0xFE7
 16277                           postdec1	equ	0xFE5
 16278                           fsr1h	equ	0xFE2
 16279                           fsr1l	equ	0xFE1
 16280                           indf2	equ	0xFDF
 16281                           postinc2	equ	0xFDE
 16282                           postdec2	equ	0xFDD
 16283                           plusw2	equ	0xFDB
 16284                           fsr2h	equ	0xFDA
 16285                           fsr2l	equ	0xFD9
 16286                           status	equ	0xFD8
 16287                           
 16288 ;; *************** function _vscp_getEvent *****************
 16289 ;; Defined at:
 16290 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16291 ;; Parameters:    Size  Location     Type
 16292 ;;		None
 16293 ;; Auto vars:     Size  Location     Type
 16294 ;;  rv              1   59[COMRAM] unsigned char 
 16295 ;; Return value:  Size  Location     Type
 16296 ;;                  1    wreg      unsigned char 
 16297 ;; Registers used:
 16298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16299 ;; Tracked objects:
 16300 ;;		On entry : F/1
 16301 ;;		On exit  : 0/0
 16302 ;;		Unchanged: 0/0
 16303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16304 ;;      Params:         0       0       0       0       0       0       0
 16305 ;;      Locals:         1       0       0       0       0       0       0
 16306 ;;      Temps:          0       0       0       0       0       0       0
 16307 ;;      Totals:         1       0       0       0       0       0       0
 16308 ;;Total ram usage:        1 bytes
 16309 ;; Hardware stack levels used:    1
 16310 ;; Hardware stack levels required when called:    6
 16311 ;; This function calls:
 16312 ;;		_getVSCPFrame
 16313 ;; This function is called by:
 16314 ;;		_main
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           	psect	text75
 16319  004EF4                     __ptext75:
 16320                           	opt stack 0
 16321  004EF4                     _vscp_getEvent:
 16322                           	opt stack 23
 16323                           
 16324                           ; BSR set to: 1
 16325                           ;vscp_firmware.c: 1309: int8_t rv;
 16326                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16327                           
 16328                           ;incstack = 0
 16329                           ;incstack = 0
 16330  004EF4  BF68               	btfsc	_vscp_imsg& (0+255),7,b
 16331  004EF6  D01F               	goto	l1279
 16332                           
 16333                           ; BSR set to: 1
 16334                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16335                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16336                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16337                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16338                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16339                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16340  004EF8  0E01               	movlw	high (_vscp_imsg+2)
 16341  004EFA  6E29               	movwf	?_getVSCPFrame+1,c
 16342  004EFC  0E6A               	movlw	low (_vscp_imsg+2)
 16343  004EFE  6E28               	movwf	?_getVSCPFrame,c
 16344  004F00  0E01               	movlw	high (_vscp_imsg+4)
 16345  004F02  6E2B               	movwf	?_getVSCPFrame+3,c
 16346  004F04  0E6C               	movlw	low (_vscp_imsg+4)
 16347  004F06  6E2A               	movwf	?_getVSCPFrame+2,c
 16348  004F08  0E01               	movlw	high (_vscp_imsg+5)
 16349  004F0A  6E2D               	movwf	?_getVSCPFrame+5,c
 16350  004F0C  0E6D               	movlw	low (_vscp_imsg+5)
 16351  004F0E  6E2C               	movwf	?_getVSCPFrame+4,c
 16352  004F10  0E01               	movlw	high (_vscp_imsg+1)
 16353  004F12  6E2F               	movwf	?_getVSCPFrame+7,c
 16354  004F14  0E69               	movlw	low (_vscp_imsg+1)
 16355  004F16  6E2E               	movwf	?_getVSCPFrame+6,c
 16356  004F18  0E01               	movlw	high _vscp_imsg
 16357  004F1A  6E31               	movwf	?_getVSCPFrame+9,c
 16358  004F1C  0E68               	movlw	low _vscp_imsg
 16359  004F1E  6E30               	movwf	?_getVSCPFrame+8,c
 16360  004F20  0E01               	movlw	high (_vscp_imsg+6)
 16361  004F22  6E33               	movwf	?_getVSCPFrame+11,c
 16362  004F24  0E6E               	movlw	low (_vscp_imsg+6)
 16363  004F26  6E32               	movwf	?_getVSCPFrame+10,c
 16364  004F28  EC9A  F024         	call	_getVSCPFrame	;wreg free
 16365  004F2C  6E3C               	movwf	vscp_getEvent@rv,c
 16366  004F2E  503C               	movf	vscp_getEvent@rv& (0+255),w,c
 16367  004F30  E002               	bz	l1279
 16368                           
 16369                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16370  004F32  0101               	movlb	1	; () banked
 16371  004F34  8F68               	bsf	_vscp_imsg& (0+255),7,b
 16372  004F36                     l1279:
 16373  004F36  0012               	return	
 16374  004F38                     __end_of_vscp_getEvent:
 16375                           	opt stack 0
 16376                           tblptru	equ	0xFF8
 16377                           tblptrh	equ	0xFF7
 16378                           tblptrl	equ	0xFF6
 16379                           tablat	equ	0xFF5
 16380                           prodh	equ	0xFF4
 16381                           prodl	equ	0xFF3
 16382                           intcon	equ	0xFF2
 16383                           postinc0	equ	0xFEE
 16384                           wreg	equ	0xFE8
 16385                           indf1	equ	0xFE7
 16386                           postdec1	equ	0xFE5
 16387                           fsr1h	equ	0xFE2
 16388                           fsr1l	equ	0xFE1
 16389                           indf2	equ	0xFDF
 16390                           postinc2	equ	0xFDE
 16391                           postdec2	equ	0xFDD
 16392                           plusw2	equ	0xFDB
 16393                           fsr2h	equ	0xFDA
 16394                           fsr2l	equ	0xFD9
 16395                           status	equ	0xFD8
 16396                           
 16397 ;; *************** function _getVSCPFrame *****************
 16398 ;; Defined at:
 16399 ;;		line 2890 in file "../main.c"
 16400 ;; Parameters:    Size  Location     Type
 16401 ;;  pvscpclass      2   39[COMRAM] PTR unsigned short 
 16402 ;;		 -> vscp_imsg(14), 
 16403 ;;  pvscptype       2   41[COMRAM] PTR unsigned char 
 16404 ;;		 -> vscp_imsg(14), 
 16405 ;;  pNodeId         2   43[COMRAM] PTR unsigned char 
 16406 ;;		 -> vscp_imsg(14), 
 16407 ;;  pPriority       2   45[COMRAM] PTR unsigned char 
 16408 ;;		 -> vscp_imsg(14), 
 16409 ;;  pSize           2   47[COMRAM] PTR unsigned char 
 16410 ;;		 -> vscp_imsg(14), 
 16411 ;;  pData           2   49[COMRAM] PTR unsigned char 
 16412 ;;		 -> vscp_imsg(14), 
 16413 ;; Auto vars:     Size  Location     Type
 16414 ;;  id              4   55[COMRAM] unsigned long 
 16415 ;; Return value:  Size  Location     Type
 16416 ;;                  1    wreg      unsigned char 
 16417 ;; Registers used:
 16418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16419 ;; Tracked objects:
 16420 ;;		On entry : F/1
 16421 ;;		On exit  : 0/0
 16422 ;;		Unchanged: 0/0
 16423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16424 ;;      Params:        12       0       0       0       0       0       0
 16425 ;;      Locals:         4       0       0       0       0       0       0
 16426 ;;      Temps:          4       0       0       0       0       0       0
 16427 ;;      Totals:        20       0       0       0       0       0       0
 16428 ;;Total ram usage:       20 bytes
 16429 ;; Hardware stack levels used:    1
 16430 ;; Hardware stack levels required when called:    5
 16431 ;; This function calls:
 16432 ;;		_getCANFrame
 16433 ;; This function is called by:
 16434 ;;		_vscp_getEvent
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           	psect	text76
 16439  004934                     __ptext76:
 16440                           	opt stack 0
 16441  004934                     _getVSCPFrame:
 16442                           	opt stack 23
 16443                           
 16444                           ; BSR set to: 1
 16445                           ;main.c: 2891: uint32_t id;
 16446                           ;main.c: 2893: if (!getCANFrame(&id, pSize, pData)) {
 16447                           
 16448                           ;incstack = 0
 16449                           ;incstack = 0
 16450  004934  C030  F022         	movff	getVSCPFrame@pSize,?_getCANFrame
 16451  004938  C031  F023         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 16452  00493C  C032  F024         	movff	getVSCPFrame@pData,?_getCANFrame+2
 16453  004940  C033  F025         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 16454  004944  0E38               	movlw	getVSCPFrame@id& (0+255)
 16455  004946  EC88  F028         	call	_getCANFrame
 16456  00494A  0900               	iorlw	0
 16457  00494C  E102               	bnz	l8193
 16458                           
 16459                           ;main.c: 2894: return 0;
 16460  00494E  0E00               	movlw	0
 16461  004950  D032               	goto	l628
 16462  004952                     l8193:
 16463                           
 16464                           ;main.c: 2895: }
 16465                           ;main.c: 2897: *pNodeId = id & 0x0ff;
 16466  004952  C02C  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 16467  004956  C02D  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 16468  00495A  C038  FFDF         	movff	getVSCPFrame@id,indf2
 16469                           
 16470                           ;main.c: 2898: *pvscptype = (id >> 8) & 0xff;
 16471  00495E  C02A  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 16472  004962  C02B  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 16473  004966  C039  FFDF         	movff	getVSCPFrame@id+1,indf2
 16474                           
 16475                           ;main.c: 2899: *pvscpclass = (id >> 16) & 0x1ff;
 16476  00496A  503A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16477  00496C  6E34               	movwf	??_getVSCPFrame& (0+255),c
 16478  00496E  0E01               	movlw	1
 16479  004970  143B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16480  004972  6E35               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16481  004974  C028  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 16482  004978  C029  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 16483  00497C  C034  FFDE         	movff	??_getVSCPFrame,postinc2
 16484  004980  C035  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16485                           
 16486                           ;main.c: 2900: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16487  004984  C038  F034         	movff	getVSCPFrame@id,??_getVSCPFrame
 16488  004988  C039  F035         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16489  00498C  C03A  F036         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16490  004990  C03B  F037         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16491  004994  0E1B               	movlw	27
 16492  004996  D005               	goto	u5450
 16493  004998                     u5455:
 16494  004998  90D8               	bcf	status,0,c
 16495  00499A  3237               	rrcf	??_getVSCPFrame+3,f,c
 16496  00499C  3236               	rrcf	??_getVSCPFrame+2,f,c
 16497  00499E  3235               	rrcf	??_getVSCPFrame+1,f,c
 16498  0049A0  3234               	rrcf	??_getVSCPFrame,f,c
 16499  0049A2                     u5450:
 16500  0049A2  2EE8               	decfsz	wreg,f,c
 16501  0049A4  D7F9               	goto	u5455
 16502  0049A6  5034               	movf	??_getVSCPFrame,w,c
 16503  0049A8  0B07               	andlw	7
 16504  0049AA  C02E  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 16505  0049AE  C02F  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 16506  0049B2  6EDF               	movwf	indf2,c
 16507                           
 16508                           ;main.c: 2902: return 1;
 16509  0049B4  0E01               	movlw	1
 16510  0049B6                     l628:
 16511  0049B6  0012               	return	
 16512  0049B8                     __end_of_getVSCPFrame:
 16513                           	opt stack 0
 16514                           tblptru	equ	0xFF8
 16515                           tblptrh	equ	0xFF7
 16516                           tblptrl	equ	0xFF6
 16517                           tablat	equ	0xFF5
 16518                           prodh	equ	0xFF4
 16519                           prodl	equ	0xFF3
 16520                           intcon	equ	0xFF2
 16521                           postinc0	equ	0xFEE
 16522                           wreg	equ	0xFE8
 16523                           indf1	equ	0xFE7
 16524                           postdec1	equ	0xFE5
 16525                           fsr1h	equ	0xFE2
 16526                           fsr1l	equ	0xFE1
 16527                           indf2	equ	0xFDF
 16528                           postinc2	equ	0xFDE
 16529                           postdec2	equ	0xFDD
 16530                           plusw2	equ	0xFDB
 16531                           fsr2h	equ	0xFDA
 16532                           fsr2l	equ	0xFD9
 16533                           status	equ	0xFD8
 16534                           
 16535 ;; *************** function _getCANFrame *****************
 16536 ;; Defined at:
 16537 ;;		line 2932 in file "../main.c"
 16538 ;; Parameters:    Size  Location     Type
 16539 ;;  pid             1    wreg     PTR unsigned long 
 16540 ;;		 -> getVSCPFrame@id(4), 
 16541 ;;  pdlc            2   33[COMRAM] PTR unsigned char 
 16542 ;;		 -> vscp_imsg(14), 
 16543 ;;  pdata           2   35[COMRAM] PTR unsigned char 
 16544 ;;		 -> vscp_imsg(14), 
 16545 ;; Auto vars:     Size  Location     Type
 16546 ;;  pid             1   37[COMRAM] PTR unsigned long 
 16547 ;;		 -> getVSCPFrame@id(4), 
 16548 ;;  flags           1   38[COMRAM] enum E16418
 16549 ;; Return value:  Size  Location     Type
 16550 ;;                  1    wreg      unsigned char 
 16551 ;; Registers used:
 16552 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16553 ;; Tracked objects:
 16554 ;;		On entry : F/1
 16555 ;;		On exit  : 0/0
 16556 ;;		Unchanged: 0/0
 16557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16558 ;;      Params:         4       0       0       0       0       0       0
 16559 ;;      Locals:         2       0       0       0       0       0       0
 16560 ;;      Temps:          0       0       0       0       0       0       0
 16561 ;;      Totals:         6       0       0       0       0       0       0
 16562 ;;Total ram usage:        6 bytes
 16563 ;; Hardware stack levels used:    1
 16564 ;; Hardware stack levels required when called:    4
 16565 ;; This function calls:
 16566 ;;		_ECANReceiveMessage
 16567 ;; This function is called by:
 16568 ;;		_getVSCPFrame
 16569 ;; This function uses a non-reentrant model
 16570 ;;
 16571                           
 16572                           	psect	text77
 16573  005110                     __ptext77:
 16574                           	opt stack 0
 16575  005110                     _getCANFrame:
 16576                           	opt stack 23
 16577                           
 16578                           ;incstack = 0
 16579                           ;incstack = 0
 16580                           ;getCANFrame@pid stored from wreg
 16581  005110  CFE8 F026          	movff	wreg,getCANFrame@pid
 16582                           
 16583                           ; BSR set to: 1
 16584                           ;main.c: 2933: ECAN_RX_MSG_FLAGS flags;
 16585                           ;main.c: 2937: if (vscp_imsg.flags & 0x80) return 0;
 16586  005114  AF68               	btfss	_vscp_imsg& (0+255),7,b
 16587  005116  D002               	goto	l8209
 16588  005118                     l8205:
 16589  005118  0E00               	movlw	0
 16590  00511A  D013               	goto	l639
 16591  00511C                     l8209:
 16592                           
 16593                           ; BSR set to: 1
 16594                           ;main.c: 2939: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16595  00511C  C024  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16596  005120  C025  F016         	movff	getCANFrame@pdata+1,?_ECANReceiveMessage+1
 16597  005124  C022  F017         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+2
 16598  005128  C023  F018         	movff	getCANFrame@pdlc+1,?_ECANReceiveMessage+3
 16599  00512C  0E27               	movlw	low getCANFrame@flags
 16600  00512E  6E19               	movwf	?_ECANReceiveMessage+4,c
 16601  005130  5026               	movf	getCANFrame@pid,w,c
 16602  005132  ECCF  F018         	call	_ECANReceiveMessage
 16603  005136  0900               	iorlw	0
 16604  005138  E0EF               	bz	l8205
 16605                           
 16606                           ;main.c: 2941: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16607  00513A  AC27               	btfss	getCANFrame@flags,6,c
 16608                           
 16609                           ;main.c: 2944: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16610  00513C  AA27               	btfss	getCANFrame@flags,5,c
 16611  00513E  D7EC               	goto	l8205
 16612                           
 16613                           ;main.c: 2946: return 1;
 16614  005140  0E01               	movlw	1
 16615  005142                     l639:
 16616  005142  0012               	return	
 16617  005144                     __end_of_getCANFrame:
 16618                           	opt stack 0
 16619                           tblptru	equ	0xFF8
 16620                           tblptrh	equ	0xFF7
 16621                           tblptrl	equ	0xFF6
 16622                           tablat	equ	0xFF5
 16623                           prodh	equ	0xFF4
 16624                           prodl	equ	0xFF3
 16625                           intcon	equ	0xFF2
 16626                           postinc0	equ	0xFEE
 16627                           wreg	equ	0xFE8
 16628                           indf1	equ	0xFE7
 16629                           postdec1	equ	0xFE5
 16630                           fsr1h	equ	0xFE2
 16631                           fsr1l	equ	0xFE1
 16632                           indf2	equ	0xFDF
 16633                           postinc2	equ	0xFDE
 16634                           postdec2	equ	0xFDD
 16635                           plusw2	equ	0xFDB
 16636                           fsr2h	equ	0xFDA
 16637                           fsr2l	equ	0xFD9
 16638                           status	equ	0xFD8
 16639                           
 16640 ;; *************** function _ECANReceiveMessage *****************
 16641 ;; Defined at:
 16642 ;;		line 803 in file "../ECAN.c"
 16643 ;; Parameters:    Size  Location     Type
 16644 ;;  id              1    wreg     PTR unsigned long 
 16645 ;;		 -> getVSCPFrame@id(4), 
 16646 ;;  data            2   20[COMRAM] PTR unsigned char 
 16647 ;;		 -> vscp_imsg(14), 
 16648 ;;  dataLen         2   22[COMRAM] PTR unsigned char 
 16649 ;;		 -> vscp_imsg(14), 
 16650 ;;  msgFlags        1   24[COMRAM] PTR enum E16333
 16651 ;;		 -> getCANFrame@flags(1), 
 16652 ;; Auto vars:     Size  Location     Type
 16653 ;;  id              1   27[COMRAM] PTR unsigned long 
 16654 ;;		 -> getVSCPFrame@id(4), 
 16655 ;;  ptr             2   31[COMRAM] PTR unsigned char 
 16656 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16657 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16658 ;;  savedPtr        2   25[COMRAM] PTR unsigned char 
 16659 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16660 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16661 ;;  temp            1   30[COMRAM] struct .
 16662 ;;  mode            1   29[COMRAM] unsigned char 
 16663 ;;  i               1   28[COMRAM] unsigned char 
 16664 ;; Return value:  Size  Location     Type
 16665 ;;                  1    wreg      enum E15660
 16666 ;; Registers used:
 16667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16668 ;; Tracked objects:
 16669 ;;		On entry : F/1
 16670 ;;		On exit  : 0/0
 16671 ;;		Unchanged: 0/0
 16672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16673 ;;      Params:         5       0       0       0       0       0       0
 16674 ;;      Locals:         8       0       0       0       0       0       0
 16675 ;;      Temps:          0       0       0       0       0       0       0
 16676 ;;      Totals:        13       0       0       0       0       0       0
 16677 ;;Total ram usage:       13 bytes
 16678 ;; Hardware stack levels used:    1
 16679 ;; Hardware stack levels required when called:    3
 16680 ;; This function calls:
 16681 ;;		__ECANPointBuffer
 16682 ;;		__RegsToCANID
 16683 ;; This function is called by:
 16684 ;;		_getCANFrame
 16685 ;; This function uses a non-reentrant model
 16686 ;;
 16687                           
 16688                           	psect	text78
 16689  00319E                     __ptext78:
 16690                           	opt stack 0
 16691  00319E                     _ECANReceiveMessage:
 16692                           	opt stack 23
 16693                           
 16694                           ;incstack = 0
 16695                           ;incstack = 0
 16696                           ;ECANReceiveMessage@id stored from wreg
 16697  00319E  CFE8 F01C          	movff	wreg,ECANReceiveMessage@id
 16698                           
 16699                           ; BSR set to: 1
 16700                           ;ECAN.c: 805: BYTE mode;
 16701                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16702                           ;ECAN.c: 809: char i;
 16703                           ;ECAN.c: 810: BYTE_VAL temp;
 16704                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16705  0031A2  6A48               	clrf	__ECANRxFilterHitInfo,c
 16706                           
 16707                           ; BSR set to: 1
 16708                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16709  0031A4  5077               	movf	3959,w,c	;volatile
 16710  0031A6  0BC0               	andlw	192
 16711  0031A8  6E1E               	movwf	ECANReceiveMessage@mode,c
 16712                           
 16713                           ; BSR set to: 1
 16714                           ;ECAN.c: 816: if ( mode == 0x00 )
 16715  0031AA  661E               	tstfsz	ECANReceiveMessage@mode,c
 16716  0031AC  D032               	goto	l8341
 16717                           
 16718                           ; BSR set to: 1
 16719                           ;ECAN.c: 822: {
 16720                           ;ECAN.c: 824: if ( RXB0FUL )
 16721  0031AE  AE60               	btfss	3936,7,c	;volatile
 16722  0031B0  D012               	goto	l835
 16723                           
 16724                           ; BSR set to: 1
 16725                           ;ECAN.c: 825: {
 16726                           ;ECAN.c: 827: RXB0IF = 0;
 16727  0031B2  90A4               	bcf	4004,0,c	;volatile
 16728                           
 16729                           ;ECAN.c: 830: if ( RXB0OVFL )
 16730  0031B4  AE74               	btfss	3956,7,c	;volatile
 16731  0031B6  D006               	goto	l8317
 16732                           
 16733                           ; BSR set to: 1
 16734                           ;ECAN.c: 831: {
 16735                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16736  0031B8  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16737  0031BA  6ED9               	movwf	fsr2l,c
 16738  0031BC  6ADA               	clrf	fsr2h,c
 16739  0031BE  0E00               	movlw	0
 16740  0031C0  86DB               	bsf	plusw2,3,c
 16741                           
 16742                           ; BSR set to: 1
 16743                           ;ECAN.c: 833: RXB0OVFL = 0;
 16744  0031C2  9E74               	bcf	3956,7,c	;volatile
 16745  0031C4                     l8317:
 16746                           
 16747                           ; BSR set to: 1
 16748                           ;ECAN.c: 834: }
 16749                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16750  0031C4  A060               	btfss	3936,0,c	;volatile
 16751  0031C6  D002               	bra	u5625
 16752  0031C8  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16753  0031CA  D001               	bra	u5627
 16754  0031CC                     u5625:
 16755  0031CC  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16756  0031CE                     u5627:
 16757                           
 16758                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16759  0031CE  0E0F               	movlw	15	;volatile
 16760  0031D0  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16761  0031D2  0E60               	movlw	96	;volatile
 16762  0031D4  D01A               	goto	L34
 16763  0031D6                     l835:
 16764                           
 16765                           ; BSR set to: 1
 16766                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16767  0031D6  010F               	movlb	15	; () banked
 16768  0031D8  AF50               	btfss	80,7,b	;volatile
 16769  0031DA  D019               	goto	l8335
 16770                           
 16771                           ; BSR set to: 15
 16772                           ;ECAN.c: 842: {
 16773                           ;ECAN.c: 844: RXB1IF = 0;
 16774  0031DC  92A4               	bcf	4004,1,c	;volatile
 16775                           
 16776                           ;ECAN.c: 847: if ( RXB1OVFL )
 16777  0031DE  AC74               	btfss	3956,6,c	;volatile
 16778  0031E0  D006               	goto	l8327
 16779                           
 16780                           ; BSR set to: 15
 16781                           ;ECAN.c: 848: {
 16782                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16783  0031E2  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16784  0031E4  6ED9               	movwf	fsr2l,c
 16785  0031E6  6ADA               	clrf	fsr2h,c
 16786  0031E8  0E00               	movlw	0
 16787  0031EA  86DB               	bsf	plusw2,3,c
 16788                           
 16789                           ; BSR set to: 15
 16790                           ;ECAN.c: 850: RXB1OVFL = 0;
 16791  0031EC  9C74               	bcf	3956,6,c	;volatile
 16792  0031EE                     l8327:
 16793                           
 16794                           ; BSR set to: 15
 16795                           ;ECAN.c: 851: }
 16796                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16797  0031EE  5150               	movf	80,w,b	;volatile
 16798  0031F0  0B07               	andlw	7
 16799  0031F2  6E48               	movwf	__ECANRxFilterHitInfo,c
 16800                           
 16801                           ; BSR set to: 15
 16802                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16803  0031F4  0E02               	movlw	2
 16804  0031F6  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16805  0031F8  D005               	goto	l8333
 16806                           
 16807                           ; BSR set to: 15
 16808                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16809  0031FA  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16810  0031FC  6ED9               	movwf	fsr2l,c
 16811  0031FE  6ADA               	clrf	fsr2h,c
 16812  003200  0E00               	movlw	0
 16813  003202  8EDB               	bsf	plusw2,7,c
 16814  003204                     l8333:
 16815                           
 16816                           ; BSR set to: 15
 16817                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16818  003204  0E0F               	movlw	15	;volatile
 16819  003206  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16820  003208  0E50               	movlw	80	;volatile
 16821  00320A                     L34:
 16822  00320A  6E20               	movwf	ECANReceiveMessage@ptr,c
 16823                           
 16824                           ;ECAN.c: 860: }
 16825  00320C  D065               	goto	l8395
 16826  00320E                     l8335:
 16827                           
 16828                           ;ECAN.c: 861: else
 16829                           ;ECAN.c: 862: return FALSE;
 16830  00320E  0E00               	movlw	0
 16831  003210  D0C6               	goto	l842
 16832  003212                     l8341:
 16833                           
 16834                           ; BSR set to: 1
 16835                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16836  003212  501E               	movf	ECANReceiveMessage@mode,w,c
 16837  003214  0A40               	xorlw	64
 16838  003216  E146               	bnz	l845
 16839                           
 16840                           ; BSR set to: 1
 16841                           ;ECAN.c: 875: {
 16842                           ;ECAN.c: 876: if ( RXB0FUL )
 16843  003218  AE60               	btfss	3936,7,c	;volatile
 16844  00321A  D004               	goto	l846
 16845                           
 16846                           ; BSR set to: 1
 16847                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16848  00321C  0E0F               	movlw	15	;volatile
 16849  00321E  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16850  003220  0E60               	movlw	96	;volatile
 16851  003222  D03E               	goto	L41
 16852  003224                     l846:
 16853                           
 16854                           ; BSR set to: 1
 16855                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16856  003224  010F               	movlb	15	; () banked
 16857  003226  AF50               	btfss	80,7,b	;volatile
 16858  003228  D004               	goto	l848
 16859                           
 16860                           ; BSR set to: 15
 16861                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16862  00322A  0E0F               	movlw	15	;volatile
 16863  00322C  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16864  00322E  0E50               	movlw	80	;volatile
 16865  003230  D037               	goto	L41
 16866  003232                     l848:
 16867                           
 16868                           ; BSR set to: 15
 16869                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16870  003232  010D               	movlb	13
 16871  003234  B5F8               	btfsc	248,2,b	;volatile
 16872  003236  D007               	goto	l850
 16873  003238  010E               	movlb	14
 16874  00323A  AF20               	btfss	32,7,b	;volatile
 16875  00323C  D004               	goto	l850
 16876                           
 16877                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16878  00323E  0E0E               	movlw	14	;volatile
 16879  003240  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16880  003242  0E20               	movlw	32	;volatile
 16881  003244  D02D               	goto	L41
 16882  003246                     l850:
 16883                           
 16884                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16885  003246  010D               	movlb	13
 16886  003248  B7F8               	btfsc	248,3,b	;volatile
 16887  00324A  D007               	goto	l852
 16888  00324C  010E               	movlb	14
 16889  00324E  AF30               	btfss	48,7,b	;volatile
 16890  003250  D004               	goto	l852
 16891                           
 16892                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16893  003252  0E0E               	movlw	14	;volatile
 16894  003254  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16895  003256  0E30               	movlw	48	;volatile
 16896  003258  D023               	goto	L41
 16897  00325A                     l852:
 16898                           
 16899                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16900  00325A  010D               	movlb	13
 16901  00325C  B9F8               	btfsc	248,4,b	;volatile
 16902  00325E  D007               	goto	l854
 16903  003260  010E               	movlb	14
 16904  003262  AF40               	btfss	64,7,b	;volatile
 16905  003264  D004               	goto	l854
 16906                           
 16907                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16908  003266  0E0E               	movlw	14	;volatile
 16909  003268  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16910  00326A  0E40               	movlw	64	;volatile
 16911  00326C  D019               	goto	L41
 16912  00326E                     l854:
 16913                           
 16914                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16915  00326E  010D               	movlb	13
 16916  003270  BBF8               	btfsc	248,5,b	;volatile
 16917  003272  D005               	goto	l856
 16918  003274  010E               	movlb	14
 16919  003276  AF50               	btfss	80,7,b	;volatile
 16920  003278  D002               	goto	l856
 16921                           
 16922                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16923  00327A  0E0E               	movlw	14	;volatile
 16924  00327C  D7D7               	goto	L42
 16925  00327E                     l856:
 16926                           
 16927                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16928  00327E  010D               	movlb	13
 16929  003280  BDF8               	btfsc	248,6,b	;volatile
 16930  003282  D005               	goto	l858
 16931  003284  010E               	movlb	14
 16932  003286  AF60               	btfss	96,7,b	;volatile
 16933  003288  D002               	goto	l858
 16934                           
 16935                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16936  00328A  0E0E               	movlw	14	;volatile
 16937  00328C  D7C8               	goto	L43
 16938  00328E                     l858:
 16939                           
 16940                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16941  00328E  010D               	movlb	13
 16942  003290  BFF8               	btfsc	248,7,b	;volatile
 16943  003292  D7BD               	goto	l8335
 16944  003294  010E               	movlb	14
 16945  003296  AF70               	btfss	112,7,b	;volatile
 16946  003298  D7BA               	goto	l8335
 16947                           
 16948                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16949  00329A  0E0E               	movlw	14	;volatile
 16950  00329C  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16951  00329E  0E70               	movlw	112	;volatile
 16952  0032A0                     L41:
 16953  0032A0  6E20               	movwf	ECANReceiveMessage@ptr,c
 16954  0032A2  D00A               	goto	l8385
 16955  0032A4                     l845:
 16956                           
 16957                           ; BSR set to: 1
 16958                           ;ECAN.c: 910: else
 16959                           ;ECAN.c: 915: {
 16960                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16961  0032A4  AE74               	btfss	3956,7,c	;volatile
 16962  0032A6  D7B3               	goto	l8335
 16963                           
 16964                           ; BSR set to: 1
 16965                           ;ECAN.c: 917: {
 16966                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16967  0032A8  506F               	movf	3951,w,c	;volatile
 16968  0032AA  0B07               	andlw	7
 16969  0032AC  EC93  F025         	call	__ECANPointBuffer
 16970  0032B0  C00E  F020         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16971  0032B4  C00F  F021         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16972  0032B8                     l8385:
 16973                           
 16974                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16975  0032B8  C020  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16976  0032BC  C021  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16977  0032C0  50DF               	movf	indf2,w,c
 16978  0032C2  0B1F               	andlw	31
 16979  0032C4  6E48               	movwf	__ECANRxFilterHitInfo,c
 16980                           
 16981                           ;ECAN.c: 932: RXB1IF = 0;
 16982  0032C6  92A4               	bcf	4004,1,c	;volatile
 16983                           
 16984                           ;ECAN.c: 934: if ( RXB1OVFL )
 16985  0032C8  AC74               	btfss	3956,6,c	;volatile
 16986  0032CA  D006               	goto	l8395
 16987                           
 16988                           ;ECAN.c: 935: {
 16989                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16990  0032CC  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16991  0032CE  6ED9               	movwf	fsr2l,c
 16992  0032D0  6ADA               	clrf	fsr2h,c
 16993  0032D2  0E00               	movlw	0
 16994  0032D4  86DB               	bsf	plusw2,3,c
 16995                           
 16996                           ;ECAN.c: 937: RXB1OVFL = 0;
 16997  0032D6  9C74               	bcf	3956,6,c	;volatile
 16998  0032D8                     l8395:
 16999                           
 17000                           ;ECAN.c: 942: savedPtr = ptr;
 17001  0032D8  C020  F01A         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 17002  0032DC  C021  F01B         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 17003                           
 17004                           ;ECAN.c: 943: *msgFlags = 0;
 17005  0032E0  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 17006  0032E2  6ED9               	movwf	fsr2l,c
 17007  0032E4  6ADA               	clrf	fsr2h,c
 17008  0032E6  6ADF               	clrf	indf2,c
 17009                           
 17010                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17011  0032E8  EE20 F005          	lfsr	2,5
 17012  0032EC  D859               	call	PL60	;call to abstracted procedure
 17013                           
 17014                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17015  0032EE  501F               	movf	ECANReceiveMessage@temp,w,c
 17016  0032F0  0B0F               	andlw	15
 17017  0032F2  C017  FFD9         	movff	ECANReceiveMessage@dataLen,fsr2l
 17018  0032F6  C018  FFDA         	movff	ECANReceiveMessage@dataLen+1,fsr2h
 17019  0032FA  6EDF               	movwf	indf2,c
 17020                           
 17021                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17022  0032FC  AC1F               	btfss	ECANReceiveMessage@temp,6,c
 17023  0032FE  D005               	goto	l866
 17024                           
 17025                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17026  003300  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 17027  003302  6ED9               	movwf	fsr2l,c
 17028  003304  6ADA               	clrf	fsr2h,c
 17029  003306  0E00               	movlw	0
 17030  003308  8CDB               	bsf	plusw2,6,c
 17031  00330A                     l866:
 17032                           
 17033                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17034  00330A  EE20 F002          	lfsr	2,2
 17035  00330E  D848               	call	PL60	;call to abstracted procedure
 17036                           
 17037                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17038  003310  A61F               	btfss	ECANReceiveMessage@temp,3,c
 17039  003312  D008               	goto	l867
 17040                           
 17041                           ;ECAN.c: 956: {
 17042                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17043  003314  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 17044  003316  6ED9               	movwf	fsr2l,c
 17045  003318  6ADA               	clrf	fsr2h,c
 17046  00331A  0E00               	movlw	0
 17047  00331C  8ADB               	bsf	plusw2,5,c
 17048                           
 17049                           ;ECAN.c: 958: temp.Val = 1;
 17050  00331E  0E01               	movlw	1
 17051  003320  6E1F               	movwf	ECANReceiveMessage@temp,c
 17052                           
 17053                           ;ECAN.c: 959: }
 17054  003322  D001               	goto	l8413
 17055  003324                     l867:
 17056                           
 17057                           ;ECAN.c: 960: else
 17058                           ;ECAN.c: 961: temp.Val = 0;
 17059  003324  6A1F               	clrf	ECANReceiveMessage@temp,c
 17060  003326                     l8413:
 17061                           
 17062                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17063  003326  2820               	incf	ECANReceiveMessage@ptr,w,c
 17064  003328  6E0E               	movwf	?__RegsToCANID,c
 17065  00332A  0E00               	movlw	0
 17066  00332C  2021               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17067  00332E  6E0F               	movwf	?__RegsToCANID+1,c
 17068  003330  C01C  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17069  003334  C01F  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17070  003338  EC8E  F01D         	call	__RegsToCANID	;wreg free
 17071                           
 17072                           ;ECAN.c: 966: ptr += 6;
 17073  00333C  0E06               	movlw	6
 17074  00333E  2620               	addwf	ECANReceiveMessage@ptr,f,c
 17075  003340  0E00               	movlw	0
 17076  003342  2221               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17077                           
 17078                           ;ECAN.c: 967: temp.Val = *dataLen;
 17079  003344  C017  FFD9         	movff	ECANReceiveMessage@dataLen,fsr2l
 17080  003348  C018  FFDA         	movff	ECANReceiveMessage@dataLen+1,fsr2h
 17081  00334C  50DF               	movf	indf2,w,c
 17082  00334E  6E1F               	movwf	ECANReceiveMessage@temp,c
 17083                           
 17084                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17085  003350  6A1D               	clrf	ECANReceiveMessage@i,c
 17086  003352  D00F               	goto	l8429
 17087  003354                     l8421:
 17088                           
 17089                           ;ECAN.c: 969: *data++ = *ptr++;
 17090  003354  C020  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17091  003358  C021  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17092  00335C  C015  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 17093  003360  C016  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 17094  003364  CFDF FFE7          	movff	indf2,indf1
 17095  003368  4A20               	infsnz	ECANReceiveMessage@ptr,f,c
 17096  00336A  2A21               	incf	ECANReceiveMessage@ptr+1,f,c
 17097  00336C  4A15               	infsnz	ECANReceiveMessage@data,f,c
 17098  00336E  2A16               	incf	ECANReceiveMessage@data+1,f,c
 17099  003370  2A1D               	incf	ECANReceiveMessage@i,f,c
 17100  003372                     l8429:
 17101  003372  501F               	movf	ECANReceiveMessage@temp,w,c
 17102  003374  5C1D               	subwf	ECANReceiveMessage@i,w,c
 17103  003376  E3EE               	bnc	l8421
 17104                           
 17105                           ;ECAN.c: 972: if ( IRXIF )
 17106  003378  AEA4               	btfss	4004,7,c	;volatile
 17107  00337A  D006               	goto	l8435
 17108                           
 17109                           ;ECAN.c: 973: {
 17110                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17111  00337C  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 17112  00337E  6ED9               	movwf	fsr2l,c
 17113  003380  6ADA               	clrf	fsr2h,c
 17114  003382  0E00               	movlw	0
 17115  003384  88DB               	bsf	plusw2,4,c
 17116                           
 17117                           ;ECAN.c: 975: IRXIF = 0;
 17118  003386  9EA4               	bcf	4004,7,c	;volatile
 17119  003388                     l8435:
 17120                           
 17121                           ;ECAN.c: 976: }
 17122                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17123  003388  C01A  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17124  00338C  C01B  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17125  003390  0E7F               	movlw	127
 17126  003392  16DF               	andwf	indf2,f,c
 17127                           
 17128                           ;ECAN.c: 983: if ( mode == 0x80 )
 17129  003394  501E               	movf	ECANReceiveMessage@mode,w,c
 17130  003396  0A80               	xorlw	128
 17131  003398  B4D8               	btfsc	status,2,c
 17132                           
 17133                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17134  00339A  9E74               	bcf	3956,7,c	;volatile
 17135                           
 17136                           ;ECAN.c: 990: return TRUE;
 17137  00339C  0E01               	movlw	1
 17138  00339E                     l842:
 17139  00339E  0012               	return	
 17140  0033A0                     __end_of_ECANReceiveMessage:
 17141                           	opt stack 0
 17142  0033A0                     PL60:
 17143                           	opt stack 23
 17144  0033A0  5020               	movf	ECANReceiveMessage@ptr,w,c
 17145  0033A2  26D9               	addwf	fsr2l,f,c
 17146  0033A4  5021               	movf	ECANReceiveMessage@ptr+1,w,c
 17147  0033A6  22DA               	addwfc	fsr2h,f,c
 17148  0033A8  50DF               	movf	indf2,w,c
 17149  0033AA  6E1F               	movwf	ECANReceiveMessage@temp,c
 17150  0033AC  0012               	return	
 17151  0033AE                     __end_ofPL60:
 17152                           	opt stack 0
 17153                           tblptru	equ	0xFF8
 17154                           tblptrh	equ	0xFF7
 17155                           tblptrl	equ	0xFF6
 17156                           tablat	equ	0xFF5
 17157                           prodh	equ	0xFF4
 17158                           prodl	equ	0xFF3
 17159                           intcon	equ	0xFF2
 17160                           postinc0	equ	0xFEE
 17161                           wreg	equ	0xFE8
 17162                           indf1	equ	0xFE7
 17163                           postdec1	equ	0xFE5
 17164                           fsr1h	equ	0xFE2
 17165                           fsr1l	equ	0xFE1
 17166                           indf2	equ	0xFDF
 17167                           postinc2	equ	0xFDE
 17168                           postdec2	equ	0xFDD
 17169                           plusw2	equ	0xFDB
 17170                           fsr2h	equ	0xFDA
 17171                           fsr2l	equ	0xFD9
 17172                           status	equ	0xFD8
 17173                           
 17174 ;; *************** function __RegsToCANID *****************
 17175 ;; Defined at:
 17176 ;;		line 1156 in file "../ECAN.c"
 17177 ;; Parameters:    Size  Location     Type
 17178 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17179 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17180 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17181 ;;  val             1   15[COMRAM] PTR unsigned long 
 17182 ;;		 -> getVSCPFrame@id(4), 
 17183 ;;  type            1   16[COMRAM] unsigned char 
 17184 ;; Auto vars:     Size  Location     Type
 17185 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17186 ;;		 -> getVSCPFrame@id(4), 
 17187 ;; Return value:  Size  Location     Type
 17188 ;;		None               void
 17189 ;; Registers used:
 17190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17191 ;; Tracked objects:
 17192 ;;		On entry : 0/1
 17193 ;;		On exit  : 0/0
 17194 ;;		Unchanged: 0/0
 17195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17196 ;;      Params:         4       0       0       0       0       0       0
 17197 ;;      Locals:         1       0       0       0       0       0       0
 17198 ;;      Temps:          2       0       0       0       0       0       0
 17199 ;;      Totals:         7       0       0       0       0       0       0
 17200 ;;Total ram usage:        7 bytes
 17201 ;; Hardware stack levels used:    1
 17202 ;; Hardware stack levels required when called:    2
 17203 ;; This function calls:
 17204 ;;		Nothing
 17205 ;; This function is called by:
 17206 ;;		_ECANReceiveMessage
 17207 ;; This function uses a non-reentrant model
 17208 ;;
 17209                           
 17210                           	psect	text79
 17211  003B1C                     __ptext79:
 17212                           	opt stack 0
 17213  003B1C                     __RegsToCANID:
 17214                           	opt stack 23
 17215                           
 17216                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17217                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17218                           
 17219                           ;incstack = 0
 17220                           ;incstack = 0
 17221  003B1C  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17222                           
 17223                           ;ECAN.c: 1161: if ( type == 0 )
 17224  003B20  6611               	tstfsz	__RegsToCANID@type,c
 17225  003B22  D02B               	goto	l8505
 17226                           
 17227                           ;ECAN.c: 1162: {
 17228                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17229  003B24  5014               	movf	__RegsToCANID@Value,w,c
 17230  003B26  6ED9               	movwf	fsr2l,c
 17231  003B28  D86C               	call	PL38	;call to abstracted procedure
 17232  003B2A  3612               	rlcf	??__RegsToCANID,f,c
 17233  003B2C  90D8               	bcf	status,0,c
 17234  003B2E  3612               	rlcf	??__RegsToCANID,f,c
 17235  003B30  90D8               	bcf	status,0,c
 17236  003B32  3412               	rlcf	??__RegsToCANID,w,c
 17237  003B34  6EDF               	movwf	indf2,c
 17238                           
 17239                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17240  003B36  5014               	movf	__RegsToCANID@Value,w,c
 17241  003B38  6ED9               	movwf	fsr2l,c
 17242  003B3A  6ADA               	clrf	fsr2h,c
 17243  003B3C  2AD9               	incf	fsr2l,f,c
 17244  003B3E  6ADA               	clrf	fsr2h,c
 17245  003B40  D873               	call	PL48	;call to abstracted procedure
 17246  003B42                     u5935:
 17247  003B42  90D8               	bcf	status,0,c
 17248  003B44  3212               	rrcf	??__RegsToCANID,f,c
 17249  003B46  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17250  003B48  D7FC               	goto	u5935
 17251  003B4A  5012               	movf	??__RegsToCANID,w,c
 17252                           
 17253                           ;ECAN.c: 1166: ptr++;
 17254                           
 17255                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17256  003B4C  D863               	call	PL40	;call to abstracted procedure
 17257  003B4E  0E05               	movlw	5
 17258  003B50  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17259  003B52                     u5945:
 17260  003B52  90D8               	bcf	status,0,c
 17261  003B54  3212               	rrcf	??__RegsToCANID,f,c
 17262  003B56  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17263  003B58  D7FC               	goto	u5945
 17264  003B5A  5014               	movf	__RegsToCANID@Value,w,c
 17265  003B5C  6ED9               	movwf	fsr2l,c
 17266  003B5E  6ADA               	clrf	fsr2h,c
 17267  003B60  5012               	movf	??__RegsToCANID,w,c
 17268  003B62  12DF               	iorwf	indf2,f,c
 17269                           
 17270                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17271  003B64  D83D               	call	PL16	;call to abstracted procedure
 17272  003B66  6ADF               	clrf	indf2,c
 17273                           
 17274                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17275  003B68  5014               	movf	__RegsToCANID@Value,w,c
 17276  003B6A  6ED9               	movwf	fsr2l,c
 17277  003B6C  6ADA               	clrf	fsr2h,c
 17278  003B6E  0E03               	movlw	3
 17279  003B70  26D9               	addwf	fsr2l,f,c
 17280  003B72  6ADA               	clrf	fsr2h,c
 17281  003B74  0E00               	movlw	0
 17282  003B76  6EDF               	movwf	indf2,c
 17283                           
 17284                           ;ECAN.c: 1170: }
 17285  003B78  D032               	goto	l889
 17286  003B7A                     l8505:
 17287                           
 17288                           ;ECAN.c: 1171: else
 17289                           ;ECAN.c: 1172: {
 17290                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17291  003B7A  D832               	call	PL16	;call to abstracted procedure
 17292  003B7C  D855               	call	PL48	;call to abstracted procedure
 17293  003B7E                     u5955:
 17294  003B7E  90D8               	bcf	status,0,c
 17295  003B80  3612               	rlcf	??__RegsToCANID,f,c
 17296  003B82  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17297  003B84  D7FC               	goto	u5955
 17298  003B86  5012               	movf	??__RegsToCANID,w,c
 17299  003B88  6EDF               	movwf	indf2,c
 17300                           
 17301                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17302  003B8A  5014               	movf	__RegsToCANID@Value,w,c
 17303  003B8C  6ED9               	movwf	fsr2l,c
 17304  003B8E  6ADA               	clrf	fsr2h,c
 17305  003B90  0E03               	movlw	3
 17306  003B92  26D9               	addwf	fsr2l,f,c
 17307  003B94  D836               	call	PL38	;call to abstracted procedure
 17308  003B96  3212               	rrcf	??__RegsToCANID,f,c
 17309  003B98  90D8               	bcf	status,0,c
 17310  003B9A  3212               	rrcf	??__RegsToCANID,f,c
 17311  003B9C  90D8               	bcf	status,0,c
 17312  003B9E  3012               	rrcf	??__RegsToCANID,w,c
 17313                           
 17314                           ;ECAN.c: 1176: ptr++;
 17315                           
 17316                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17317  003BA0  D839               	call	PL40	;call to abstracted procedure
 17318  003BA2  0E03               	movlw	3
 17319  003BA4  1612               	andwf	??__RegsToCANID,f,c
 17320  003BA6  D81C               	call	PL16	;call to abstracted procedure
 17321  003BA8  5012               	movf	??__RegsToCANID,w,c
 17322  003BAA  12DF               	iorwf	indf2,f,c
 17323                           
 17324                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17325  003BAC  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17326  003BB0  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17327  003BB4  50DF               	movf	indf2,w,c
 17328  003BB6  6E12               	movwf	??__RegsToCANID& (0+255),c
 17329  003BB8  90D8               	bcf	status,0,c
 17330  003BBA  3212               	rrcf	??__RegsToCANID,f,c
 17331  003BBC  90D8               	bcf	status,0,c
 17332  003BBE  3212               	rrcf	??__RegsToCANID,f,c
 17333  003BC0  90D8               	bcf	status,0,c
 17334  003BC2  3212               	rrcf	??__RegsToCANID,f,c
 17335  003BC4  0E1C               	movlw	28
 17336  003BC6  1612               	andwf	??__RegsToCANID,f,c
 17337  003BC8  D80B               	call	PL16	;call to abstracted procedure
 17338  003BCA  5012               	movf	??__RegsToCANID,w,c
 17339  003BCC  12DF               	iorwf	indf2,f,c
 17340                           
 17341                           ;ECAN.c: 1180: ptr++;
 17342                           
 17343                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17344  003BCE  D80F               	call	PL30	;call to abstracted procedure
 17345  003BD0  2AE1               	incf	fsr1l,f,c
 17346  003BD2  6AE2               	clrf	fsr1h,c
 17347  003BD4  CFDF FFE7          	movff	indf2,indf1
 17348                           
 17349                           ;ECAN.c: 1182: ptr++;
 17350                           
 17351                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17352  003BD8  D80A               	call	PL30	;call to abstracted procedure
 17353  003BDA  CFDF FFE7          	movff	indf2,indf1
 17354  003BDE                     l889:
 17355  003BDE  0012               	return	
 17356  003BE0                     __end_of__RegsToCANID:
 17357                           	opt stack 0
 17358  003BE0                     PL16:
 17359                           	opt stack 23
 17360  003BE0  5014               	movf	__RegsToCANID@Value,w,c
 17361  003BE2  6ED9               	movwf	fsr2l,c
 17362  003BE4  6ADA               	clrf	fsr2h,c
 17363  003BE6  0E02               	movlw	2
 17364  003BE8  26D9               	addwf	fsr2l,f,c
 17365  003BEA  6ADA               	clrf	fsr2h,c
 17366  003BEC  0012               	return	
 17367  003BEE                     __end_ofPL16:
 17368                           	opt stack 0
 17369  003BEE                     PL30:
 17370                           	opt stack 23
 17371  003BEE  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17372  003BF0  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17373  003BF2  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17374  003BF6  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17375  003BFA  5014               	movf	__RegsToCANID@Value,w,c
 17376  003BFC  6EE1               	movwf	fsr1l,c
 17377  003BFE  6AE2               	clrf	fsr1h,c
 17378  003C00  0012               	return	
 17379  003C02                     __end_ofPL30:
 17380                           	opt stack 0
 17381  003C02                     PL38:
 17382                           	opt stack 23
 17383  003C02  6ADA               	clrf	fsr2h,c
 17384  003C04  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17385  003C08  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17386  003C0C  50E7               	movf	indf1,w,c
 17387  003C0E  6E12               	movwf	??__RegsToCANID& (0+255),c
 17388  003C10  90D8               	bcf	status,0,c
 17389  003C12  0012               	return	
 17390  003C14                     __end_ofPL38:
 17391                           	opt stack 0
 17392  003C14                     PL40:
 17393                           	opt stack 23
 17394  003C14  6EDF               	movwf	indf2,c
 17395  003C16  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17396  003C18  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17397  003C1A  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17398  003C1E  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17399  003C22  50DF               	movf	indf2,w,c
 17400  003C24  6E12               	movwf	??__RegsToCANID& (0+255),c
 17401  003C26  0012               	return	
 17402  003C28                     __end_ofPL40:
 17403                           	opt stack 0
 17404  003C28                     PL48:
 17405                           	opt stack 23
 17406  003C28  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17407  003C2C  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17408  003C30  50E7               	movf	indf1,w,c
 17409  003C32  6E12               	movwf	??__RegsToCANID& (0+255),c
 17410  003C34  0E05               	movlw	5
 17411  003C36  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17412  003C38  0C05               	retlw	5
 17413  003C3A                     __end_ofPL48:
 17414                           	opt stack 0
 17415                           tblptru	equ	0xFF8
 17416                           tblptrh	equ	0xFF7
 17417                           tblptrl	equ	0xFF6
 17418                           tablat	equ	0xFF5
 17419                           prodh	equ	0xFF4
 17420                           prodl	equ	0xFF3
 17421                           intcon	equ	0xFF2
 17422                           postinc0	equ	0xFEE
 17423                           wreg	equ	0xFE8
 17424                           indf1	equ	0xFE7
 17425                           postdec1	equ	0xFE5
 17426                           fsr1h	equ	0xFE2
 17427                           fsr1l	equ	0xFE1
 17428                           indf2	equ	0xFDF
 17429                           postinc2	equ	0xFDE
 17430                           postdec2	equ	0xFDD
 17431                           plusw2	equ	0xFDB
 17432                           fsr2h	equ	0xFDA
 17433                           fsr2l	equ	0xFD9
 17434                           status	equ	0xFD8
 17435                           
 17436 ;; *************** function __ECANPointBuffer *****************
 17437 ;; Defined at:
 17438 ;;		line 1207 in file "../ECAN.c"
 17439 ;; Parameters:    Size  Location     Type
 17440 ;;  b               1    wreg     unsigned char 
 17441 ;; Auto vars:     Size  Location     Type
 17442 ;;  b               1   16[COMRAM] unsigned char 
 17443 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17444 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17445 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17446 ;; Return value:  Size  Location     Type
 17447 ;;                  2   13[COMRAM] PTR unsigned char 
 17448 ;; Registers used:
 17449 ;;		wreg, status,2, status,0
 17450 ;; Tracked objects:
 17451 ;;		On entry : F/1
 17452 ;;		On exit  : 0/0
 17453 ;;		Unchanged: 0/0
 17454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17455 ;;      Params:         3       0       0       0       0       0       0
 17456 ;;      Locals:         3       0       0       0       0       0       0
 17457 ;;      Temps:          0       0       0       0       0       0       0
 17458 ;;      Totals:         6       0       0       0       0       0       0
 17459 ;;Total ram usage:        6 bytes
 17460 ;; Hardware stack levels used:    1
 17461 ;; Hardware stack levels required when called:    2
 17462 ;; This function calls:
 17463 ;;		Nothing
 17464 ;; This function is called by:
 17465 ;;		_ECANReceiveMessage
 17466 ;; This function uses a non-reentrant model
 17467 ;;
 17468                           
 17469                           	psect	text80
 17470  004B26                     __ptext80:
 17471                           	opt stack 0
 17472  004B26                     __ECANPointBuffer:
 17473                           	opt stack 23
 17474                           
 17475                           ;incstack = 0
 17476                           ;incstack = 0
 17477                           ;__ECANPointBuffer@b stored from wreg
 17478  004B26  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17479                           
 17480                           ; BSR set to: 1
 17481                           ;ECAN.c: 1208: BYTE* pt;
 17482                           ;ECAN.c: 1210: switch(b)
 17483  004B2A  D024               	goto	l8491
 17484  004B2C                     l8473:
 17485                           
 17486                           ; BSR set to: 1
 17487                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17488  004B2C  0E0F               	movlw	15	;volatile
 17489  004B2E  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17490  004B30  0E60               	movlw	96	;volatile
 17491  004B32  D01E               	goto	L50
 17492  004B34                     l8475:
 17493                           
 17494                           ; BSR set to: 1
 17495                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17496  004B34  010F               	movlb	15	; () banked
 17497  004B36  0E0F               	movlw	15	;volatile
 17498  004B38  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17499  004B3A  0E50               	movlw	80	;volatile
 17500  004B3C  D019               	goto	L50
 17501  004B3E                     l8477:
 17502                           
 17503                           ; BSR set to: 1
 17504                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17505  004B3E  010E               	movlb	14	; () banked
 17506  004B40  0E0E               	movlw	14	;volatile
 17507  004B42  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17508  004B44  0E20               	movlw	32	;volatile
 17509  004B46  D014               	goto	L50
 17510  004B48                     l8479:
 17511                           
 17512                           ; BSR set to: 1
 17513                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17514  004B48  010E               	movlb	14	; () banked
 17515  004B4A  0E0E               	movlw	14	;volatile
 17516  004B4C  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17517  004B4E  0E30               	movlw	48	;volatile
 17518  004B50  D00F               	goto	L50
 17519  004B52                     l8481:
 17520                           
 17521                           ; BSR set to: 1
 17522                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17523  004B52  010E               	movlb	14	; () banked
 17524  004B54  0E0E               	movlw	14	;volatile
 17525  004B56  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17526  004B58  0E40               	movlw	64	;volatile
 17527  004B5A  D00A               	goto	L50
 17528  004B5C                     l8483:
 17529                           
 17530                           ; BSR set to: 1
 17531                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17532  004B5C  010E               	movlb	14	; () banked
 17533  004B5E  0E0E               	movlw	14	;volatile
 17534  004B60  D7EB               	goto	L51
 17535  004B62                     l8485:
 17536                           
 17537                           ; BSR set to: 1
 17538                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17539  004B62  010E               	movlb	14	; () banked
 17540  004B64  0E0E               	movlw	14	;volatile
 17541  004B66  D7E3               	goto	L52
 17542  004B68                     l8487:
 17543                           
 17544                           ; BSR set to: 1
 17545                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17546  004B68  010E               	movlb	14	; () banked
 17547  004B6A  0E0E               	movlw	14	;volatile
 17548  004B6C  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17549  004B6E  0E70               	movlw	112	;volatile
 17550  004B70                     L50:
 17551  004B70  6E12               	movwf	__ECANPointBuffer@pt,c
 17552                           
 17553                           ;ECAN.c: 1235: break;
 17554  004B72  D00F               	goto	l894
 17555  004B74                     l8491:
 17556                           
 17557                           ; BSR set to: 1
 17558  004B74  5011               	movf	__ECANPointBuffer@b,w,c
 17559                           
 17560                           ; Switch size 1, requested type "space"
 17561                           ; Number of cases is 7, Range of values is 0 to 6
 17562                           ; switch strategies available:
 17563                           ; Name         Instructions Cycles
 17564                           ; simple_byte           22    12 (average)
 17565                           ;	Chosen strategy is simple_byte
 17566  004B76  E0DA               	bz	l8473
 17567  004B78  0A01               	xorlw	1	; case 1
 17568  004B7A  E0DC               	bz	l8475
 17569  004B7C  0A03               	xorlw	3	; case 2
 17570  004B7E  E0DF               	bz	l8477
 17571  004B80  0A01               	xorlw	1	; case 3
 17572  004B82  E0E2               	bz	l8479
 17573  004B84  0A07               	xorlw	7	; case 4
 17574  004B86  E0E5               	bz	l8481
 17575  004B88  0A01               	xorlw	1	; case 5
 17576  004B8A  E0E8               	bz	l8483
 17577  004B8C  0A03               	xorlw	3	; case 6
 17578  004B8E  E0E9               	bz	l8485
 17579  004B90  D7EB               	goto	l8487
 17580  004B92                     l894:
 17581                           
 17582                           ;ECAN.c: 1237: return (pt);
 17583  004B92  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17584  004B96  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17585  004B9A  0012               	return	
 17586  004B9C                     __end_of__ECANPointBuffer:
 17587                           	opt stack 0
 17588                           tblptru	equ	0xFF8
 17589                           tblptrh	equ	0xFF7
 17590                           tblptrl	equ	0xFF6
 17591                           tablat	equ	0xFF5
 17592                           prodh	equ	0xFF4
 17593                           prodl	equ	0xFF3
 17594                           intcon	equ	0xFF2
 17595                           postinc0	equ	0xFEE
 17596                           wreg	equ	0xFE8
 17597                           indf1	equ	0xFE7
 17598                           postdec1	equ	0xFE5
 17599                           fsr1h	equ	0xFE2
 17600                           fsr1l	equ	0xFE1
 17601                           indf2	equ	0xFDF
 17602                           postinc2	equ	0xFDE
 17603                           postdec2	equ	0xFDD
 17604                           plusw2	equ	0xFDB
 17605                           fsr2h	equ	0xFDA
 17606                           fsr2l	equ	0xFD9
 17607                           status	equ	0xFD8
 17608                           
 17609 ;; *************** function _vscp_check_pstorage *****************
 17610 ;; Defined at:
 17611 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 17612 ;; Parameters:    Size  Location     Type
 17613 ;;		None
 17614 ;; Auto vars:     Size  Location     Type
 17615 ;;		None
 17616 ;; Return value:  Size  Location     Type
 17617 ;;                  1    wreg      unsigned char 
 17618 ;; Registers used:
 17619 ;;		wreg, status,2, status,0, cstack
 17620 ;; Tracked objects:
 17621 ;;		On entry : 0/0
 17622 ;;		On exit  : 0/0
 17623 ;;		Unchanged: 0/0
 17624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17625 ;;      Params:         0       0       0       0       0       0       0
 17626 ;;      Locals:         0       0       0       0       0       0       0
 17627 ;;      Temps:          0       0       0       0       0       0       0
 17628 ;;      Totals:         0       0       0       0       0       0       0
 17629 ;;Total ram usage:        0 bytes
 17630 ;; Hardware stack levels used:    1
 17631 ;; Hardware stack levels required when called:    4
 17632 ;; This function calls:
 17633 ;;		_vscp_writeNicknamePermanent
 17634 ;;		_vscp_getSegmentCRC
 17635 ;;		_vscp_setSegmentCRC
 17636 ;;		_vscp_setControlByte
 17637 ;; This function is called by:
 17638 ;;		_main
 17639 ;; This function uses a non-reentrant model
 17640 ;;
 17641                           
 17642                           	psect	text81
 17643  0052BC                     __ptext81:
 17644                           	opt stack 0
 17645  0052BC                     _vscp_check_pstorage:
 17646                           	opt stack 25
 17647                           
 17648                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17649                           
 17650                           ;incstack = 0
 17651                           ;incstack = 0
 17652  0052BC  EC77  F02A         	call	_vscp_getSegmentCRC	;wreg free
 17653  0052C0  0BC0               	andlw	192
 17654  0052C2  0A40               	xorlw	64
 17655  0052C4  E102               	bnz	l9597
 17656                           
 17657                           ;vscp_firmware.c: 172: return !0;
 17658  0052C6  0E01               	movlw	1
 17659  0052C8  D00A               	goto	l1035
 17660  0052CA                     l9597:
 17661                           
 17662                           ;vscp_firmware.c: 173: }
 17663                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 17664  0052CA  0EFF               	movlw	255
 17665  0052CC  EC43  F02A         	call	_vscp_writeNicknamePermanent
 17666                           
 17667                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 17668  0052D0  0E00               	movlw	0
 17669  0052D2  EC3A  F02A         	call	_vscp_setSegmentCRC
 17670                           
 17671                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 17672  0052D6  0EA0               	movlw	160
 17673  0052D8  EC31  F02A         	call	_vscp_setControlByte
 17674                           
 17675                           ;vscp_firmware.c: 185: return 0;
 17676  0052DC  0E00               	movlw	0
 17677  0052DE                     l1035:
 17678  0052DE  0012               	return	
 17679  0052E0                     __end_of_vscp_check_pstorage:
 17680                           	opt stack 0
 17681                           tblptru	equ	0xFF8
 17682                           tblptrh	equ	0xFF7
 17683                           tblptrl	equ	0xFF6
 17684                           tablat	equ	0xFF5
 17685                           prodh	equ	0xFF4
 17686                           prodl	equ	0xFF3
 17687                           intcon	equ	0xFF2
 17688                           postinc0	equ	0xFEE
 17689                           wreg	equ	0xFE8
 17690                           indf1	equ	0xFE7
 17691                           postdec1	equ	0xFE5
 17692                           fsr1h	equ	0xFE2
 17693                           fsr1l	equ	0xFE1
 17694                           indf2	equ	0xFDF
 17695                           postinc2	equ	0xFDE
 17696                           postdec2	equ	0xFDD
 17697                           plusw2	equ	0xFDB
 17698                           fsr2h	equ	0xFDA
 17699                           fsr2l	equ	0xFD9
 17700                           status	equ	0xFD8
 17701                           
 17702 ;; *************** function _vscp_setControlByte *****************
 17703 ;; Defined at:
 17704 ;;		line 2811 in file "../main.c"
 17705 ;; Parameters:    Size  Location     Type
 17706 ;;  ctrl            1    wreg     unsigned char 
 17707 ;; Auto vars:     Size  Location     Type
 17708 ;;  ctrl            1   16[COMRAM] unsigned char 
 17709 ;; Return value:  Size  Location     Type
 17710 ;;		None               void
 17711 ;; Registers used:
 17712 ;;		wreg, status,2, cstack
 17713 ;; Tracked objects:
 17714 ;;		On entry : 0/0
 17715 ;;		On exit  : 0/0
 17716 ;;		Unchanged: 0/0
 17717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17718 ;;      Params:         0       0       0       0       0       0       0
 17719 ;;      Locals:         1       0       0       0       0       0       0
 17720 ;;      Temps:          0       0       0       0       0       0       0
 17721 ;;      Totals:         1       0       0       0       0       0       0
 17722 ;;Total ram usage:        1 bytes
 17723 ;; Hardware stack levels used:    1
 17724 ;; Hardware stack levels required when called:    3
 17725 ;; This function calls:
 17726 ;;		_writeEEPROM
 17727 ;; This function is called by:
 17728 ;;		_vscp_check_pstorage
 17729 ;; This function uses a non-reentrant model
 17730 ;;
 17731                           
 17732                           	psect	text82
 17733  005462                     __ptext82:
 17734                           	opt stack 0
 17735  005462                     _vscp_setControlByte:
 17736                           	opt stack 25
 17737                           
 17738                           ;incstack = 0
 17739                           ;incstack = 0
 17740                           ;vscp_setControlByte@ctrl stored from wreg
 17741  005462  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17742                           
 17743                           ;main.c: 2812: writeEEPROM(0x03, ctrl);
 17744  005466  6A0F               	clrf	?_writeEEPROM+1,c
 17745  005468  0E03               	movlw	3
 17746  00546A  6E0E               	movwf	?_writeEEPROM,c
 17747  00546C  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17748  005470  EF39  F029         	goto	_writeEEPROM	;wreg free
 17749  005474                     __end_of_vscp_setControlByte:
 17750                           	opt stack 0
 17751                           tblptru	equ	0xFF8
 17752                           tblptrh	equ	0xFF7
 17753                           tblptrl	equ	0xFF6
 17754                           tablat	equ	0xFF5
 17755                           prodh	equ	0xFF4
 17756                           prodl	equ	0xFF3
 17757                           intcon	equ	0xFF2
 17758                           postinc0	equ	0xFEE
 17759                           wreg	equ	0xFE8
 17760                           indf1	equ	0xFE7
 17761                           postdec1	equ	0xFE5
 17762                           fsr1h	equ	0xFE2
 17763                           fsr1l	equ	0xFE1
 17764                           indf2	equ	0xFDF
 17765                           postinc2	equ	0xFDE
 17766                           postdec2	equ	0xFDD
 17767                           plusw2	equ	0xFDB
 17768                           fsr2h	equ	0xFDA
 17769                           fsr2l	equ	0xFD9
 17770                           status	equ	0xFD8
 17771                           
 17772 ;; *************** function _vscp_setSegmentCRC *****************
 17773 ;; Defined at:
 17774 ;;		line 2802 in file "../main.c"
 17775 ;; Parameters:    Size  Location     Type
 17776 ;;  crc             1    wreg     unsigned char 
 17777 ;; Auto vars:     Size  Location     Type
 17778 ;;  crc             1   16[COMRAM] unsigned char 
 17779 ;; Return value:  Size  Location     Type
 17780 ;;		None               void
 17781 ;; Registers used:
 17782 ;;		wreg, status,2, cstack
 17783 ;; Tracked objects:
 17784 ;;		On entry : 0/0
 17785 ;;		On exit  : 0/0
 17786 ;;		Unchanged: 0/0
 17787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17788 ;;      Params:         0       0       0       0       0       0       0
 17789 ;;      Locals:         1       0       0       0       0       0       0
 17790 ;;      Temps:          0       0       0       0       0       0       0
 17791 ;;      Totals:         1       0       0       0       0       0       0
 17792 ;;Total ram usage:        1 bytes
 17793 ;; Hardware stack levels used:    1
 17794 ;; Hardware stack levels required when called:    3
 17795 ;; This function calls:
 17796 ;;		_writeEEPROM
 17797 ;; This function is called by:
 17798 ;;		_vscp_check_pstorage
 17799 ;;		_vscp_handleProbeState
 17800 ;;		_vscp_handleHeartbeat
 17801 ;;		_vscp_handleSetNickname
 17802 ;; This function uses a non-reentrant model
 17803 ;;
 17804                           
 17805                           	psect	text83
 17806  005474                     __ptext83:
 17807                           	opt stack 0
 17808  005474                     _vscp_setSegmentCRC:
 17809                           	opt stack 24
 17810                           
 17811                           ;incstack = 0
 17812                           ;incstack = 0
 17813                           ;vscp_setSegmentCRC@crc stored from wreg
 17814  005474  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17815                           
 17816                           ;main.c: 2803: writeEEPROM(0x02, crc);
 17817  005478  6A0F               	clrf	?_writeEEPROM+1,c
 17818  00547A  0E02               	movlw	2
 17819  00547C  6E0E               	movwf	?_writeEEPROM,c
 17820  00547E  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17821  005482  EF39  F029         	goto	_writeEEPROM	;wreg free
 17822  005486                     __end_of_vscp_setSegmentCRC:
 17823                           	opt stack 0
 17824                           tblptru	equ	0xFF8
 17825                           tblptrh	equ	0xFF7
 17826                           tblptrl	equ	0xFF6
 17827                           tablat	equ	0xFF5
 17828                           prodh	equ	0xFF4
 17829                           prodl	equ	0xFF3
 17830                           intcon	equ	0xFF2
 17831                           postinc0	equ	0xFEE
 17832                           wreg	equ	0xFE8
 17833                           indf1	equ	0xFE7
 17834                           postdec1	equ	0xFE5
 17835                           fsr1h	equ	0xFE2
 17836                           fsr1l	equ	0xFE1
 17837                           indf2	equ	0xFDF
 17838                           postinc2	equ	0xFDE
 17839                           postdec2	equ	0xFDD
 17840                           plusw2	equ	0xFDB
 17841                           fsr2h	equ	0xFDA
 17842                           fsr2l	equ	0xFD9
 17843                           status	equ	0xFD8
 17844                           
 17845 ;; *************** function _vscp_getSegmentCRC *****************
 17846 ;; Defined at:
 17847 ;;		line 2793 in file "../main.c"
 17848 ;; Parameters:    Size  Location     Type
 17849 ;;		None
 17850 ;; Auto vars:     Size  Location     Type
 17851 ;;		None
 17852 ;; Return value:  Size  Location     Type
 17853 ;;                  1    wreg      unsigned char 
 17854 ;; Registers used:
 17855 ;;		wreg, status,2, cstack
 17856 ;; Tracked objects:
 17857 ;;		On entry : 0/1
 17858 ;;		On exit  : 0/0
 17859 ;;		Unchanged: 0/0
 17860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17861 ;;      Params:         0       0       0       0       0       0       0
 17862 ;;      Locals:         0       0       0       0       0       0       0
 17863 ;;      Temps:          0       0       0       0       0       0       0
 17864 ;;      Totals:         0       0       0       0       0       0       0
 17865 ;;Total ram usage:        0 bytes
 17866 ;; Hardware stack levels used:    1
 17867 ;; Hardware stack levels required when called:    3
 17868 ;; This function calls:
 17869 ;;		_readEEPROM
 17870 ;; This function is called by:
 17871 ;;		_vscp_check_pstorage
 17872 ;;		_vscp_handleHeartbeat
 17873 ;; This function uses a non-reentrant model
 17874 ;;
 17875                           
 17876                           	psect	text84
 17877  0054EE                     __ptext84:
 17878                           	opt stack 0
 17879  0054EE                     _vscp_getSegmentCRC:
 17880                           	opt stack 24
 17881                           
 17882                           ;main.c: 2794: return readEEPROM(0x02);
 17883                           
 17884                           ;incstack = 0
 17885                           ;incstack = 0
 17886  0054EE  6A17               	clrf	?_readEEPROM+1,c
 17887  0054F0  0E02               	movlw	2
 17888  0054F2  6E16               	movwf	?_readEEPROM,c
 17889  0054F4  EF27  F02A         	goto	_readEEPROM	;wreg free
 17890  0054F8                     __end_of_vscp_getSegmentCRC:
 17891                           	opt stack 0
 17892                           tblptru	equ	0xFF8
 17893                           tblptrh	equ	0xFF7
 17894                           tblptrl	equ	0xFF6
 17895                           tablat	equ	0xFF5
 17896                           prodh	equ	0xFF4
 17897                           prodl	equ	0xFF3
 17898                           intcon	equ	0xFF2
 17899                           postinc0	equ	0xFEE
 17900                           wreg	equ	0xFE8
 17901                           indf1	equ	0xFE7
 17902                           postdec1	equ	0xFE5
 17903                           fsr1h	equ	0xFE2
 17904                           fsr1l	equ	0xFE1
 17905                           indf2	equ	0xFDF
 17906                           postinc2	equ	0xFDE
 17907                           postdec2	equ	0xFDD
 17908                           plusw2	equ	0xFDB
 17909                           fsr2h	equ	0xFDA
 17910                           fsr2l	equ	0xFD9
 17911                           status	equ	0xFD8
 17912                           
 17913 ;; *************** function _vscp_writeNicknamePermanent *****************
 17914 ;; Defined at:
 17915 ;;		line 2784 in file "../main.c"
 17916 ;; Parameters:    Size  Location     Type
 17917 ;;  nickname        1    wreg     unsigned char 
 17918 ;; Auto vars:     Size  Location     Type
 17919 ;;  nickname        1   16[COMRAM] unsigned char 
 17920 ;; Return value:  Size  Location     Type
 17921 ;;		None               void
 17922 ;; Registers used:
 17923 ;;		wreg, status,2, cstack
 17924 ;; Tracked objects:
 17925 ;;		On entry : 0/0
 17926 ;;		On exit  : 0/0
 17927 ;;		Unchanged: 0/0
 17928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17929 ;;      Params:         0       0       0       0       0       0       0
 17930 ;;      Locals:         1       0       0       0       0       0       0
 17931 ;;      Temps:          0       0       0       0       0       0       0
 17932 ;;      Totals:         1       0       0       0       0       0       0
 17933 ;;Total ram usage:        1 bytes
 17934 ;; Hardware stack levels used:    1
 17935 ;; Hardware stack levels required when called:    3
 17936 ;; This function calls:
 17937 ;;		_writeEEPROM
 17938 ;; This function is called by:
 17939 ;;		_vscp_check_pstorage
 17940 ;;		_vscp_handleProbeState
 17941 ;;		_vscp_handleHeartbeat
 17942 ;;		_vscp_handleSetNickname
 17943 ;;		_vscp_handleDropNickname
 17944 ;; This function uses a non-reentrant model
 17945 ;;
 17946                           
 17947                           	psect	text85
 17948  005486                     __ptext85:
 17949                           	opt stack 0
 17950  005486                     _vscp_writeNicknamePermanent:
 17951                           	opt stack 24
 17952                           
 17953                           ;incstack = 0
 17954                           ;incstack = 0
 17955                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 17956  005486  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 17957                           
 17958                           ;main.c: 2785: writeEEPROM( 0x01, nickname );
 17959  00548A  6A0F               	clrf	?_writeEEPROM+1,c
 17960  00548C  0E01               	movlw	1
 17961  00548E  6E0E               	movwf	?_writeEEPROM,c
 17962  005490  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 17963  005494  EF39  F029         	goto	_writeEEPROM	;wreg free
 17964  005498                     __end_of_vscp_writeNicknamePermanent:
 17965                           	opt stack 0
 17966                           tblptru	equ	0xFF8
 17967                           tblptrh	equ	0xFF7
 17968                           tblptrl	equ	0xFF6
 17969                           tablat	equ	0xFF5
 17970                           prodh	equ	0xFF4
 17971                           prodl	equ	0xFF3
 17972                           intcon	equ	0xFF2
 17973                           postinc0	equ	0xFEE
 17974                           wreg	equ	0xFE8
 17975                           indf1	equ	0xFE7
 17976                           postdec1	equ	0xFE5
 17977                           fsr1h	equ	0xFE2
 17978                           fsr1l	equ	0xFE1
 17979                           indf2	equ	0xFDF
 17980                           postinc2	equ	0xFDE
 17981                           postdec2	equ	0xFDD
 17982                           plusw2	equ	0xFDB
 17983                           fsr2h	equ	0xFDA
 17984                           fsr2l	equ	0xFD9
 17985                           status	equ	0xFD8
 17986                           
 17987 ;; *************** function _writeEEPROM *****************
 17988 ;; Defined at:
 17989 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 17990 ;; Parameters:    Size  Location     Type
 17991 ;;  address         2   13[COMRAM] unsigned short 
 17992 ;;  data            1   15[COMRAM] unsigned char 
 17993 ;; Auto vars:     Size  Location     Type
 17994 ;;		None
 17995 ;; Return value:  Size  Location     Type
 17996 ;;		None               void
 17997 ;; Registers used:
 17998 ;;		wreg, status,2
 17999 ;; Tracked objects:
 18000 ;;		On entry : 0/0
 18001 ;;		On exit  : 0/0
 18002 ;;		Unchanged: 0/0
 18003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18004 ;;      Params:         3       0       0       0       0       0       0
 18005 ;;      Locals:         0       0       0       0       0       0       0
 18006 ;;      Temps:          0       0       0       0       0       0       0
 18007 ;;      Totals:         3       0       0       0       0       0       0
 18008 ;;Total ram usage:        3 bytes
 18009 ;; Hardware stack levels used:    1
 18010 ;; Hardware stack levels required when called:    2
 18011 ;; This function calls:
 18012 ;;		Nothing
 18013 ;; This function is called by:
 18014 ;;		_main
 18015 ;;		_doOneSecondWork
 18016 ;;		_init_app_eeprom
 18017 ;;		_vscp_writeAppReg
 18018 ;;		_vscp_setGUID
 18019 ;;		_vscp_setUserID
 18020 ;;		_vscp_setManufacturerId
 18021 ;;		_vscp_goBootloaderMode
 18022 ;;		_vscp_writeNicknamePermanent
 18023 ;;		_vscp_setSegmentCRC
 18024 ;;		_vscp_setControlByte
 18025 ;; This function uses a non-reentrant model
 18026 ;;
 18027                           
 18028                           	psect	text86
 18029  005272                     __ptext86:
 18030                           	opt stack 0
 18031  005272                     _writeEEPROM:
 18032                           	opt stack 26
 18033                           
 18034                           ;eeprom.c: 30: EEADR = address & 0xff;
 18035                           
 18036                           ;incstack = 0
 18037                           ;incstack = 0
 18038  005272  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 18039                           
 18040                           ;eeprom.c: 31: EEDATA = data;
 18041  005276  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18042                           
 18043                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 18044  00527A  9EA6               	bcf	4006,7,c	;volatile
 18045                           
 18046                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 18047  00527C  9CA6               	bcf	4006,6,c	;volatile
 18048                           
 18049                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 18050  00527E  84A6               	bsf	4006,2,c	;volatile
 18051                           
 18052                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 18053  005280  9EF2               	bcf	intcon,7,c	;volatile
 18054                           
 18055                           ;eeprom.c: 38: EECON2 = 0x55;
 18056  005282  0E55               	movlw	85
 18057  005284  6EA7               	movwf	4007,c	;volatile
 18058                           
 18059                           ;eeprom.c: 39: EECON2 = 0xaa;
 18060  005286  0EAA               	movlw	170
 18061  005288  6EA7               	movwf	4007,c	;volatile
 18062                           
 18063                           ;eeprom.c: 40: EECON1bits.WR = 1;
 18064  00528A  82A6               	bsf	4006,1,c	;volatile
 18065                           
 18066                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 18067  00528C  8EF2               	bsf	intcon,7,c	;volatile
 18068  00528E                     l917:
 18069  00528E  A8A1               	btfss	4001,4,c	;volatile
 18070  005290  D7FE               	goto	l917
 18071                           
 18072                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 18073  005292  98A1               	bcf	4001,4,c	;volatile
 18074                           
 18075                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 18076  005294  94A6               	bcf	4006,2,c	;volatile
 18077  005296  0012               	return	
 18078  005298                     __end_of_writeEEPROM:
 18079                           	opt stack 0
 18080                           tblptru	equ	0xFF8
 18081                           tblptrh	equ	0xFF7
 18082                           tblptrl	equ	0xFF6
 18083                           tablat	equ	0xFF5
 18084                           prodh	equ	0xFF4
 18085                           prodl	equ	0xFF3
 18086                           intcon	equ	0xFF2
 18087                           postinc0	equ	0xFEE
 18088                           wreg	equ	0xFE8
 18089                           indf1	equ	0xFE7
 18090                           postdec1	equ	0xFE5
 18091                           fsr1h	equ	0xFE2
 18092                           fsr1l	equ	0xFE1
 18093                           indf2	equ	0xFDF
 18094                           postinc2	equ	0xFDE
 18095                           postdec2	equ	0xFDD
 18096                           plusw2	equ	0xFDB
 18097                           fsr2h	equ	0xFDA
 18098                           fsr2l	equ	0xFD9
 18099                           status	equ	0xFD8
 18100                           
 18101 ;; *************** function _init *****************
 18102 ;; Defined at:
 18103 ;;		line 892 in file "../main.c"
 18104 ;; Parameters:    Size  Location     Type
 18105 ;;		None
 18106 ;; Auto vars:     Size  Location     Type
 18107 ;;		None
 18108 ;; Return value:  Size  Location     Type
 18109 ;;		None               void
 18110 ;; Registers used:
 18111 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18112 ;; Tracked objects:
 18113 ;;		On entry : 0/0
 18114 ;;		On exit  : 0/0
 18115 ;;		Unchanged: 0/0
 18116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18117 ;;      Params:         0       0       0       0       0       0       0
 18118 ;;      Locals:         0       0       0       0       0       0       0
 18119 ;;      Temps:          0       0       0       0       0       0       0
 18120 ;;      Totals:         0       0       0       0       0       0       0
 18121 ;;Total ram usage:        0 bytes
 18122 ;; Hardware stack levels used:    1
 18123 ;; Hardware stack levels required when called:    4
 18124 ;; This function calls:
 18125 ;;		_WriteTimer0
 18126 ;;		_ConvertADC
 18127 ;;		_init_app_ram
 18128 ;;		_OpenTimer0
 18129 ;;		_OpenADC
 18130 ;;		_ECANInitialize
 18131 ;; This function is called by:
 18132 ;;		_main
 18133 ;; This function uses a non-reentrant model
 18134 ;;
 18135                           
 18136                           	psect	text87
 18137  004FF6                     __ptext87:
 18138                           	opt stack 0
 18139  004FF6                     _init:
 18140                           	opt stack 25
 18141                           
 18142                           ;main.c: 896: init_app_ram();
 18143                           
 18144                           ;incstack = 0
 18145                           ;incstack = 0
 18146  004FF6  ECDC  F027         	call	_init_app_ram	;wreg free
 18147                           
 18148                           ; BSR set to: 0
 18149                           ;main.c: 904: TRISA = 0x07;
 18150  004FFA  0E07               	movlw	7
 18151  004FFC  6E92               	movwf	3986,c	;volatile
 18152                           
 18153                           ; BSR set to: 0
 18154                           ;main.c: 915: TRISB = 0x1B;
 18155  004FFE  0E1B               	movlw	27
 18156  005000  6E93               	movwf	3987,c	;volatile
 18157                           
 18158                           ; BSR set to: 0
 18159                           ;main.c: 925: TRISC = 0x01;
 18160  005002  0E01               	movlw	1
 18161  005004  6E94               	movwf	3988,c	;volatile
 18162                           
 18163                           ; BSR set to: 0
 18164                           ;main.c: 926: PORTC = 0x00;
 18165  005006  6A82               	clrf	3970,c	;volatile
 18166                           
 18167                           ; BSR set to: 0
 18168                           ;main.c: 928: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18169  005008  0E92               	movlw	146
 18170  00500A  ECB0  F029         	call	_OpenTimer0
 18171                           
 18172                           ; BSR set to: 0
 18173                           ;main.c: 929: WriteTimer0(0xfb1d);
 18174  00500E  0EFB               	movlw	251
 18175  005010  6E0F               	movwf	?_WriteTimer0+1,c
 18176  005012  0E1D               	movlw	29
 18177  005014  6E0E               	movwf	?_WriteTimer0,c
 18178  005016  EC4C  F02A         	call	_WriteTimer0	;wreg free
 18179                           
 18180                           ; BSR set to: 0
 18181                           ;main.c: 931: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18182                           ;main.c: 932: 0b10000111 & 0b11111111 & 0b11110100 &
 18183                           ;main.c: 933: 0b11111110 & 0b11111101,
 18184                           ;main.c: 934: 15);
 18185  00501A  0E84               	movlw	132
 18186  00501C  6E0E               	movwf	?_OpenADC,c
 18187  00501E  0E0F               	movlw	15
 18188  005020  6E0F               	movwf	?_OpenADC+1,c
 18189  005022  0EEF               	movlw	239
 18190  005024  ECFC  F025         	call	_OpenADC
 18191                           
 18192                           ; BSR set to: 0
 18193                           ;main.c: 937: ECANInitialize();
 18194  005028  EC0C  F024         	call	_ECANInitialize	;wreg free
 18195                           
 18196                           ;main.c: 961: INTCONbits.GIE = 1;
 18197  00502C  8EF2               	bsf	intcon,7,c	;volatile
 18198                           
 18199                           ;main.c: 963: ConvertADC();
 18200  00502E  EF82  F02A         	goto	_ConvertADC	;wreg free
 18201  005032                     __end_of_init:
 18202                           	opt stack 0
 18203                           tblptru	equ	0xFF8
 18204                           tblptrh	equ	0xFF7
 18205                           tblptrl	equ	0xFF6
 18206                           tablat	equ	0xFF5
 18207                           prodh	equ	0xFF4
 18208                           prodl	equ	0xFF3
 18209                           intcon	equ	0xFF2
 18210                           postinc0	equ	0xFEE
 18211                           wreg	equ	0xFE8
 18212                           indf1	equ	0xFE7
 18213                           postdec1	equ	0xFE5
 18214                           fsr1h	equ	0xFE2
 18215                           fsr1l	equ	0xFE1
 18216                           indf2	equ	0xFDF
 18217                           postinc2	equ	0xFDE
 18218                           postdec2	equ	0xFDD
 18219                           plusw2	equ	0xFDB
 18220                           fsr2h	equ	0xFDA
 18221                           fsr2l	equ	0xFD9
 18222                           status	equ	0xFD8
 18223                           
 18224 ;; *************** function _ECANInitialize *****************
 18225 ;; Defined at:
 18226 ;;		line 168 in file "../ECAN.c"
 18227 ;; Parameters:    Size  Location     Type
 18228 ;;		None
 18229 ;; Auto vars:     Size  Location     Type
 18230 ;;		None
 18231 ;; Return value:  Size  Location     Type
 18232 ;;		None               void
 18233 ;; Registers used:
 18234 ;;		wreg, status,2, status,0, cstack
 18235 ;; Tracked objects:
 18236 ;;		On entry : F/0
 18237 ;;		On exit  : 0/0
 18238 ;;		Unchanged: 0/0
 18239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18240 ;;      Params:         0       0       0       0       0       0       0
 18241 ;;      Locals:         0       0       0       0       0       0       0
 18242 ;;      Temps:          0       0       0       0       0       0       0
 18243 ;;      Totals:         0       0       0       0       0       0       0
 18244 ;;Total ram usage:        0 bytes
 18245 ;; Hardware stack levels used:    1
 18246 ;; Hardware stack levels required when called:    3
 18247 ;; This function calls:
 18248 ;;		_ECANSetOperationMode
 18249 ;; This function is called by:
 18250 ;;		_init
 18251 ;; This function uses a non-reentrant model
 18252 ;;
 18253                           
 18254                           	psect	text88
 18255  004818                     __ptext88:
 18256                           	opt stack 0
 18257  004818                     _ECANInitialize:
 18258                           	opt stack 25
 18259                           
 18260                           ; BSR set to: 0
 18261                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18262                           
 18263                           ;incstack = 0
 18264                           ;incstack = 0
 18265  004818  0E80               	movlw	128
 18266  00481A  ECFD  F029         	call	_ECANSetOperationMode
 18267                           
 18268                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18269  00481E  0E09               	movlw	9
 18270  004820  6E70               	movwf	3952,c	;volatile
 18271                           
 18272                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18273  004822  0EFC               	movlw	252
 18274  004824  6E71               	movwf	3953,c	;volatile
 18275                           
 18276                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18277                           ;ECAN.c: 181: (0 << 6) |
 18278                           ;ECAN.c: 182: (2-1);
 18279  004826  0E01               	movlw	1
 18280  004828  6E72               	movwf	3954,c	;volatile
 18281                           
 18282                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18283  00482A  0E20               	movlw	32
 18284  00482C  6E73               	movwf	3955,c	;volatile
 18285                           
 18286                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18287  00482E  8E77               	bsf	3959,7,c	;volatile
 18288                           
 18289                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18290  004830  9C77               	bcf	3959,6,c	;volatile
 18291                           
 18292                           ;ECAN.c: 205: RXB0CON = 0;
 18293  004832  6A60               	clrf	3936,c	;volatile
 18294                           
 18295                           ;ECAN.c: 211: RXB1CON = 0;
 18296  004834  010F               	movlb	15	; () banked
 18297  004836  6B50               	clrf	80,b	;volatile
 18298                           
 18299                           ; BSR set to: 15
 18300                           ;ECAN.c: 221: B0CON = 0;
 18301  004838  010E               	movlb	14	; () banked
 18302  00483A  6B20               	clrf	32,b	;volatile
 18303                           
 18304                           ; BSR set to: 14
 18305                           ;ECAN.c: 231: B1CON = 0;
 18306  00483C  6B30               	clrf	48,b	;volatile
 18307                           
 18308                           ; BSR set to: 14
 18309                           ;ECAN.c: 241: B2CON = 0;
 18310  00483E  6B40               	clrf	64,b	;volatile
 18311                           
 18312                           ; BSR set to: 14
 18313                           ;ECAN.c: 254: B3CON = 0 << 2;
 18314  004840  6B50               	clrf	80,b	;volatile
 18315                           
 18316                           ; BSR set to: 14
 18317                           ;ECAN.c: 264: B4CON = 0 << 2;
 18318  004842  6B60               	clrf	96,b	;volatile
 18319                           
 18320                           ; BSR set to: 14
 18321                           ;ECAN.c: 274: B5CON = 0 << 2;
 18322  004844  6B70               	clrf	112,b	;volatile
 18323                           
 18324                           ; BSR set to: 14
 18325                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18326  004846  0EE0               	movlw	224
 18327  004848  010D               	movlb	13	; () banked
 18328  00484A  6FF8               	movwf	248,b	;volatile
 18329                           
 18330                           ; BSR set to: 13
 18331                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18332  00484C  010F               	movlb	15	; () banked
 18333  00484E  6B00               	clrf	0,b	;volatile
 18334                           
 18335                           ; BSR set to: 15
 18336  004850  0E08               	movlw	8
 18337  004852  6F01               	movwf	1,b	;volatile
 18338                           
 18339                           ; BSR set to: 15
 18340  004854  6B02               	clrf	2,b	;volatile
 18341                           
 18342                           ; BSR set to: 15
 18343  004856  6B03               	clrf	3,b	;volatile
 18344                           
 18345                           ; BSR set to: 15
 18346                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18347  004858  6B04               	clrf	4,b	;volatile
 18348                           
 18349                           ; BSR set to: 15
 18350  00485A  0EE8               	movlw	232
 18351  00485C  6F05               	movwf	5,b	;volatile
 18352                           
 18353                           ; BSR set to: 15
 18354  00485E  0E1A               	movlw	26
 18355  004860  6F06               	movwf	6,b	;volatile
 18356                           
 18357                           ; BSR set to: 15
 18358  004862  6B07               	clrf	7,b	;volatile
 18359                           
 18360                           ; BSR set to: 15
 18361                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18362  004864  0E03               	movlw	3
 18363  004866  010D               	movlb	13	; () banked
 18364  004868  6FD4               	movwf	212,b	;volatile
 18365                           
 18366                           ; BSR set to: 13
 18367                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18368  00486A  6BD5               	clrf	213,b	;volatile
 18369                           
 18370                           ; BSR set to: 13
 18371                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18372  00486C  6BE0               	clrf	224,b	;volatile
 18373                           
 18374                           ; BSR set to: 13
 18375                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18376  00486E  0E11               	movlw	17
 18377  004870  6FE1               	movwf	225,b	;volatile
 18378                           
 18379                           ; BSR set to: 13
 18380                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18381  004872  6FE2               	movwf	226,b	;volatile
 18382                           
 18383                           ; BSR set to: 13
 18384                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18385  004874  6BE3               	clrf	227,b	;volatile
 18386                           
 18387                           ; BSR set to: 13
 18388                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18389  004876  6BE4               	clrf	228,b	;volatile
 18390                           
 18391                           ; BSR set to: 13
 18392                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18393  004878  6BE5               	clrf	229,b	;volatile
 18394                           
 18395                           ; BSR set to: 13
 18396                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18397  00487A  6BE6               	clrf	230,b	;volatile
 18398                           
 18399                           ; BSR set to: 13
 18400                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18401  00487C  6BE7               	clrf	231,b	;volatile
 18402                           
 18403                           ; BSR set to: 13
 18404                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18405  00487E  0E54               	movlw	84
 18406  004880  6FF0               	movwf	240,b	;volatile
 18407                           
 18408                           ; BSR set to: 13
 18409                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18410  004882  0E05               	movlw	5
 18411  004884  6FF1               	movwf	241,b	;volatile
 18412                           
 18413                           ; BSR set to: 13
 18414                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18415  004886  6BF2               	clrf	242,b	;volatile
 18416                           
 18417                           ; BSR set to: 13
 18418                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18419  004888  6BF2               	clrf	242,b	;volatile
 18420                           
 18421                           ; BSR set to: 13
 18422                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18423  00488A  0E0F               	movlw	15
 18424  00488C  010F               	movlb	15	; () banked
 18425  00488E  6F18               	movwf	24,b	;volatile
 18426                           
 18427                           ; BSR set to: 15
 18428  004890  0EE0               	movlw	224
 18429  004892  6F19               	movwf	25,b	;volatile
 18430                           
 18431                           ; BSR set to: 15
 18432  004894  6B1A               	clrf	26,b	;volatile
 18433                           
 18434                           ; BSR set to: 15
 18435  004896  6B1B               	clrf	27,b	;volatile
 18436                           
 18437                           ; BSR set to: 15
 18438                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18439  004898  8719               	bsf	25,3,b	;volatile
 18440                           
 18441                           ; BSR set to: 15
 18442                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18443  00489A  0E0F               	movlw	15
 18444  00489C  6F1C               	movwf	28,b	;volatile
 18445                           
 18446                           ; BSR set to: 15
 18447  00489E  0EE0               	movlw	224
 18448  0048A0  6F1D               	movwf	29,b	;volatile
 18449                           
 18450                           ; BSR set to: 15
 18451  0048A2  691E               	setf	30,b	;volatile
 18452                           
 18453                           ; BSR set to: 15
 18454  0048A4  6B1F               	clrf	31,b	;volatile
 18455                           
 18456                           ; BSR set to: 15
 18457                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18458  0048A6  871D               	bsf	29,3,b	;volatile
 18459                           
 18460                           ; BSR set to: 15
 18461                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18462  0048A8  0E00               	movlw	0
 18463  0048AA  EFFD  F029         	goto	_ECANSetOperationMode
 18464  0048AE                     __end_of_ECANInitialize:
 18465                           	opt stack 0
 18466                           tblptru	equ	0xFF8
 18467                           tblptrh	equ	0xFF7
 18468                           tblptrl	equ	0xFF6
 18469                           tablat	equ	0xFF5
 18470                           prodh	equ	0xFF4
 18471                           prodl	equ	0xFF3
 18472                           intcon	equ	0xFF2
 18473                           postinc0	equ	0xFEE
 18474                           wreg	equ	0xFE8
 18475                           indf1	equ	0xFE7
 18476                           postdec1	equ	0xFE5
 18477                           fsr1h	equ	0xFE2
 18478                           fsr1l	equ	0xFE1
 18479                           indf2	equ	0xFDF
 18480                           postinc2	equ	0xFDE
 18481                           postdec2	equ	0xFDD
 18482                           plusw2	equ	0xFDB
 18483                           fsr2h	equ	0xFDA
 18484                           fsr2l	equ	0xFD9
 18485                           status	equ	0xFD8
 18486                           
 18487 ;; *************** function _ECANSetOperationMode *****************
 18488 ;; Defined at:
 18489 ;;		line 1012 in file "../ECAN.c"
 18490 ;; Parameters:    Size  Location     Type
 18491 ;;  mode            1    wreg     enum E16346
 18492 ;; Auto vars:     Size  Location     Type
 18493 ;;  mode            1   13[COMRAM] enum E16346
 18494 ;; Return value:  Size  Location     Type
 18495 ;;		None               void
 18496 ;; Registers used:
 18497 ;;		wreg, status,2, status,0
 18498 ;; Tracked objects:
 18499 ;;		On entry : 0/1
 18500 ;;		On exit  : 0/0
 18501 ;;		Unchanged: 0/0
 18502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18503 ;;      Params:         0       0       0       0       0       0       0
 18504 ;;      Locals:         1       0       0       0       0       0       0
 18505 ;;      Temps:          0       0       0       0       0       0       0
 18506 ;;      Totals:         1       0       0       0       0       0       0
 18507 ;;Total ram usage:        1 bytes
 18508 ;; Hardware stack levels used:    1
 18509 ;; Hardware stack levels required when called:    2
 18510 ;; This function calls:
 18511 ;;		Nothing
 18512 ;; This function is called by:
 18513 ;;		_vscp_goBootloaderMode
 18514 ;;		_ECANInitialize
 18515 ;; This function uses a non-reentrant model
 18516 ;;
 18517                           
 18518                           	psect	text89
 18519  0053FA                     __ptext89:
 18520                           	opt stack 0
 18521  0053FA                     _ECANSetOperationMode:
 18522                           	opt stack 25
 18523                           
 18524                           ;incstack = 0
 18525                           ;incstack = 0
 18526                           ;ECANSetOperationMode@mode stored from wreg
 18527  0053FA  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18528                           
 18529                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18530  0053FE  0E1F               	movlw	31
 18531  005400  166F               	andwf	3951,f,c	;volatile
 18532                           
 18533                           ;ECAN.c: 1014: CANCON |= mode;
 18534  005402  500E               	movf	ECANSetOperationMode@mode,w,c
 18535  005404  126F               	iorwf	3951,f,c	;volatile
 18536  005406                     l8139:
 18537  005406  506F               	movf	3951,w,c	;volatile
 18538  005408  0BE0               	andlw	224
 18539  00540A  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18540  00540C  B4D8               	btfsc	status,2,c
 18541  00540E  0012               	return	
 18542  005410  D7FA               	goto	l8139
 18543  005412                     __end_of_ECANSetOperationMode:
 18544                           	opt stack 0
 18545                           tblptru	equ	0xFF8
 18546                           tblptrh	equ	0xFF7
 18547                           tblptrl	equ	0xFF6
 18548                           tablat	equ	0xFF5
 18549                           prodh	equ	0xFF4
 18550                           prodl	equ	0xFF3
 18551                           intcon	equ	0xFF2
 18552                           postinc0	equ	0xFEE
 18553                           wreg	equ	0xFE8
 18554                           indf1	equ	0xFE7
 18555                           postdec1	equ	0xFE5
 18556                           fsr1h	equ	0xFE2
 18557                           fsr1l	equ	0xFE1
 18558                           indf2	equ	0xFDF
 18559                           postinc2	equ	0xFDE
 18560                           postdec2	equ	0xFDD
 18561                           plusw2	equ	0xFDB
 18562                           fsr2h	equ	0xFDA
 18563                           fsr2l	equ	0xFD9
 18564                           status	equ	0xFD8
 18565                           
 18566 ;; *************** function _OpenADC *****************
 18567 ;; Defined at:
 18568 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18569 ;; Parameters:    Size  Location     Type
 18570 ;;  config          1    wreg     unsigned char 
 18571 ;;  config2         1   13[COMRAM] unsigned char 
 18572 ;;  portconfig      1   14[COMRAM] unsigned char 
 18573 ;; Auto vars:     Size  Location     Type
 18574 ;;  config          1   17[COMRAM] unsigned char 
 18575 ;; Return value:  Size  Location     Type
 18576 ;;		None               void
 18577 ;; Registers used:
 18578 ;;		wreg, status,2, status,0
 18579 ;; Tracked objects:
 18580 ;;		On entry : F/0
 18581 ;;		On exit  : F/0
 18582 ;;		Unchanged: F/0
 18583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18584 ;;      Params:         2       0       0       0       0       0       0
 18585 ;;      Locals:         1       0       0       0       0       0       0
 18586 ;;      Temps:          2       0       0       0       0       0       0
 18587 ;;      Totals:         5       0       0       0       0       0       0
 18588 ;;Total ram usage:        5 bytes
 18589 ;; Hardware stack levels used:    1
 18590 ;; Hardware stack levels required when called:    2
 18591 ;; This function calls:
 18592 ;;		Nothing
 18593 ;; This function is called by:
 18594 ;;		_init
 18595 ;; This function uses a non-reentrant model
 18596 ;;
 18597                           
 18598                           	psect	text90
 18599  004BF8                     __ptext90:
 18600                           	opt stack 0
 18601  004BF8                     _OpenADC:
 18602                           	opt stack 26
 18603                           
 18604                           ;incstack = 0
 18605                           ;incstack = 0
 18606                           ;OpenADC@config stored from wreg
 18607  004BF8  CFE8 F012          	movff	wreg,OpenADC@config
 18608                           
 18609                           ; BSR set to: 0
 18610  004BFC  6AC2               	clrf	4034,c	;volatile
 18611  004BFE  6AC0               	clrf	4032,c	;volatile
 18612                           
 18613                           ; BSR set to: 0
 18614  004C00  90D8               	bcf	status,0,c
 18615  004C02  300E               	rrcf	OpenADC@config2,w,c
 18616  004C04  0B3C               	andlw	60
 18617  004C06  6EC2               	movwf	4034,c	;volatile
 18618  004C08  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18619  004C0C  3A10               	swapf	??_OpenADC,f,c
 18620  004C0E  0EF0               	movlw	240
 18621  004C10  1610               	andwf	??_OpenADC,f,c
 18622  004C12  0E30               	movlw	48
 18623  004C14  1610               	andwf	??_OpenADC,f,c
 18624  004C16  500F               	movf	OpenADC@portconfig,w,c
 18625  004C18  0B0F               	andlw	15
 18626  004C1A  1010               	iorwf	??_OpenADC,w,c
 18627  004C1C  6EC1               	movwf	4033,c	;volatile
 18628  004C1E  C012  F010         	movff	OpenADC@config,??_OpenADC
 18629  004C22  90D8               	bcf	status,0,c
 18630  004C24  3610               	rlcf	??_OpenADC,f,c
 18631  004C26  90D8               	bcf	status,0,c
 18632  004C28  3610               	rlcf	??_OpenADC,f,c
 18633  004C2A  0E38               	movlw	56
 18634  004C2C  1610               	andwf	??_OpenADC,f,c
 18635  004C2E  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18636  004C32  3A11               	swapf	??_OpenADC+1,f,c
 18637  004C34  0E0F               	movlw	15
 18638  004C36  1611               	andwf	??_OpenADC+1,f,c
 18639  004C38  0E07               	movlw	7
 18640  004C3A  1611               	andwf	??_OpenADC+1,f,c
 18641  004C3C  5012               	movf	OpenADC@config,w,c
 18642  004C3E  0B80               	andlw	128
 18643  004C40  1011               	iorwf	??_OpenADC+1,w,c
 18644  004C42  1010               	iorwf	??_OpenADC,w,c
 18645  004C44  6EC0               	movwf	4032,c	;volatile
 18646                           
 18647                           ; BSR set to: 0
 18648  004C46  AE0E               	btfss	OpenADC@config2,7,c
 18649  004C48  D003               	goto	l1302
 18650                           
 18651                           ; BSR set to: 0
 18652  004C4A  9C9E               	bcf	3998,6,c	;volatile
 18653  004C4C  8C9D               	bsf	3997,6,c	;volatile
 18654  004C4E  8CF2               	bsf	intcon,6,c	;volatile
 18655  004C50                     l1302:
 18656                           
 18657                           ; BSR set to: 0
 18658  004C50  80C2               	bsf	4034,0,c	;volatile
 18659                           
 18660                           ; BSR set to: 0
 18661  004C52  0012               	return	
 18662  004C54                     __end_of_OpenADC:
 18663                           	opt stack 0
 18664                           tblptru	equ	0xFF8
 18665                           tblptrh	equ	0xFF7
 18666                           tblptrl	equ	0xFF6
 18667                           tablat	equ	0xFF5
 18668                           prodh	equ	0xFF4
 18669                           prodl	equ	0xFF3
 18670                           intcon	equ	0xFF2
 18671                           postinc0	equ	0xFEE
 18672                           wreg	equ	0xFE8
 18673                           indf1	equ	0xFE7
 18674                           postdec1	equ	0xFE5
 18675                           fsr1h	equ	0xFE2
 18676                           fsr1l	equ	0xFE1
 18677                           indf2	equ	0xFDF
 18678                           postinc2	equ	0xFDE
 18679                           postdec2	equ	0xFDD
 18680                           plusw2	equ	0xFDB
 18681                           fsr2h	equ	0xFDA
 18682                           fsr2l	equ	0xFD9
 18683                           status	equ	0xFD8
 18684                           
 18685 ;; *************** function _OpenTimer0 *****************
 18686 ;; Defined at:
 18687 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18688 ;; Parameters:    Size  Location     Type
 18689 ;;  config          1    wreg     unsigned char 
 18690 ;; Auto vars:     Size  Location     Type
 18691 ;;  config          1   13[COMRAM] unsigned char 
 18692 ;; Return value:  Size  Location     Type
 18693 ;;		None               void
 18694 ;; Registers used:
 18695 ;;		wreg, status,2, status,0
 18696 ;; Tracked objects:
 18697 ;;		On entry : F/0
 18698 ;;		On exit  : F/0
 18699 ;;		Unchanged: F/0
 18700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18701 ;;      Params:         0       0       0       0       0       0       0
 18702 ;;      Locals:         1       0       0       0       0       0       0
 18703 ;;      Temps:          0       0       0       0       0       0       0
 18704 ;;      Totals:         1       0       0       0       0       0       0
 18705 ;;Total ram usage:        1 bytes
 18706 ;; Hardware stack levels used:    1
 18707 ;; Hardware stack levels required when called:    2
 18708 ;; This function calls:
 18709 ;;		Nothing
 18710 ;; This function is called by:
 18711 ;;		_init
 18712 ;; This function uses a non-reentrant model
 18713 ;;
 18714                           
 18715                           	psect	text91
 18716  005360                     __ptext91:
 18717                           	opt stack 0
 18718  005360                     _OpenTimer0:
 18719                           	opt stack 26
 18720                           
 18721                           ; BSR set to: 0
 18722                           ;incstack = 0
 18723                           ;incstack = 0
 18724                           ;OpenTimer0@config stored from wreg
 18725  005360  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18726                           
 18727                           ; BSR set to: 0
 18728  005364  500E               	movf	OpenTimer0@config,w,c
 18729  005366  0B7F               	andlw	127
 18730  005368  6ED5               	movwf	4053,c	;volatile
 18731                           
 18732                           ; BSR set to: 0
 18733  00536A  6AD7               	clrf	4055,c	;volatile
 18734                           
 18735                           ; BSR set to: 0
 18736  00536C  6AD6               	clrf	4054,c	;volatile
 18737                           
 18738                           ; BSR set to: 0
 18739  00536E  94F2               	bcf	intcon,2,c	;volatile
 18740                           
 18741                           ; BSR set to: 0
 18742  005370  AE0E               	btfss	OpenTimer0@config,7,c
 18743  005372  D002               	goto	l1316
 18744                           
 18745                           ; BSR set to: 0
 18746  005374  8AF2               	bsf	intcon,5,c	;volatile
 18747  005376  D001               	goto	l1317
 18748  005378                     l1316:
 18749                           
 18750                           ; BSR set to: 0
 18751  005378  9AF2               	bcf	intcon,5,c	;volatile
 18752  00537A                     l1317:
 18753                           
 18754                           ; BSR set to: 0
 18755  00537A  8ED5               	bsf	4053,7,c	;volatile
 18756                           
 18757                           ; BSR set to: 0
 18758  00537C  0012               	return	
 18759  00537E                     __end_of_OpenTimer0:
 18760                           	opt stack 0
 18761                           tblptru	equ	0xFF8
 18762                           tblptrh	equ	0xFF7
 18763                           tblptrl	equ	0xFF6
 18764                           tablat	equ	0xFF5
 18765                           prodh	equ	0xFF4
 18766                           prodl	equ	0xFF3
 18767                           intcon	equ	0xFF2
 18768                           postinc0	equ	0xFEE
 18769                           wreg	equ	0xFE8
 18770                           indf1	equ	0xFE7
 18771                           postdec1	equ	0xFE5
 18772                           fsr1h	equ	0xFE2
 18773                           fsr1l	equ	0xFE1
 18774                           indf2	equ	0xFDF
 18775                           postinc2	equ	0xFDE
 18776                           postdec2	equ	0xFDD
 18777                           plusw2	equ	0xFDB
 18778                           fsr2h	equ	0xFDA
 18779                           fsr2l	equ	0xFD9
 18780                           status	equ	0xFD8
 18781                           
 18782 ;; *************** function _init_app_ram *****************
 18783 ;; Defined at:
 18784 ;;		line 991 in file "../main.c"
 18785 ;; Parameters:    Size  Location     Type
 18786 ;;		None
 18787 ;; Auto vars:     Size  Location     Type
 18788 ;;  i               1   13[COMRAM] unsigned char 
 18789 ;; Return value:  Size  Location     Type
 18790 ;;		None               void
 18791 ;; Registers used:
 18792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18793 ;; Tracked objects:
 18794 ;;		On entry : 0/1
 18795 ;;		On exit  : F/0
 18796 ;;		Unchanged: 0/0
 18797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18798 ;;      Params:         0       0       0       0       0       0       0
 18799 ;;      Locals:         1       0       0       0       0       0       0
 18800 ;;      Temps:          0       0       0       0       0       0       0
 18801 ;;      Totals:         1       0       0       0       0       0       0
 18802 ;;Total ram usage:        1 bytes
 18803 ;; Hardware stack levels used:    1
 18804 ;; Hardware stack levels required when called:    2
 18805 ;; This function calls:
 18806 ;;		Nothing
 18807 ;; This function is called by:
 18808 ;;		_init
 18809 ;;		_vscp_restoreDefaults
 18810 ;; This function uses a non-reentrant model
 18811 ;;
 18812                           
 18813                           	psect	text92
 18814  004FB8                     __ptext92:
 18815                           	opt stack 0
 18816  004FB8                     _init_app_ram:
 18817                           	opt stack 24
 18818                           
 18819                           ;main.c: 992: char i;
 18820                           ;main.c: 994: measurement_clock = 0;
 18821                           
 18822                           ; BSR set to: 0
 18823                           ;incstack = 0
 18824                           ;incstack = 0
 18825  004FB8  0101               	movlb	1	; () banked
 18826  004FBA  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
 18827  004FBC  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 18828  004FBE  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 18829  004FC0  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 18830                           
 18831                           ;main.c: 995: seconds = 0;
 18832  004FC2  0100               	movlb	0	; () banked
 18833  004FC4  6BC7               	clrf	_seconds& (0+255),b
 18834                           
 18835                           ;main.c: 998: for (i = 0; i < 6; i++) {
 18836  004FC6  6A0E               	clrf	init_app_ram@i,c
 18837  004FC8                     l7451:
 18838                           
 18839                           ;main.c: 999: seconds_temp[i] = 0;
 18840  004FC8  0E0C               	movlw	low _seconds_temp
 18841  004FCA  240E               	addwf	init_app_ram@i,w,c
 18842  004FCC  6ED9               	movwf	fsr2l,c
 18843  004FCE  6ADA               	clrf	fsr2h,c
 18844  004FD0  0E01               	movlw	high _seconds_temp
 18845  004FD2  22DA               	addwfc	fsr2h,f,c
 18846  004FD4  6ADF               	clrf	indf2,c
 18847                           
 18848                           ; BSR set to: 1
 18849                           ;main.c: 1000: current_temp[i] = 0;
 18850  004FD6  500E               	movf	init_app_ram@i,w,c
 18851  004FD8  0D02               	mullw	2
 18852  004FDA  EC37  F013         	call	PL2	;call to abstracted procedure
 18853  004FDE  6ADE               	clrf	postinc2,c
 18854  004FE0  6ADD               	clrf	postdec2,c
 18855                           
 18856                           ; BSR set to: 1
 18857  004FE2  2A0E               	incf	init_app_ram@i,f,c
 18858                           
 18859                           ; BSR set to: 1
 18860  004FE4  0E05               	movlw	5
 18861  004FE6  640E               	cpfsgt	init_app_ram@i,c
 18862  004FE8  D7EF               	goto	l7451
 18863                           
 18864                           ; BSR set to: 1
 18865                           ;main.c: 1001: }
 18866                           ;main.c: 1004: adc_conversion_flags = 0;
 18867  004FEA  0100               	movlb	0	; () banked
 18868  004FEC  6BC4               	clrf	_adc_conversion_flags& (0+255),b
 18869                           
 18870                           ;main.c: 1007: adc_series_counter = 0;
 18871  004FEE  6A49               	clrf	_adc_series_counter,c
 18872                           
 18873                           ;main.c: 1010: low_alarm = 0;
 18874  004FF0  6BC6               	clrf	_low_alarm& (0+255),b
 18875                           
 18876                           ;main.c: 1013: high_alarm = 0;
 18877  004FF2  6BC5               	clrf	_high_alarm& (0+255),b
 18878                           
 18879                           ; BSR set to: 0
 18880  004FF4  0012               	return	
 18881  004FF6                     __end_of_init_app_ram:
 18882                           	opt stack 0
 18883                           tblptru	equ	0xFF8
 18884                           tblptrh	equ	0xFF7
 18885                           tblptrl	equ	0xFF6
 18886                           tablat	equ	0xFF5
 18887                           prodh	equ	0xFF4
 18888                           prodl	equ	0xFF3
 18889                           intcon	equ	0xFF2
 18890                           postinc0	equ	0xFEE
 18891                           wreg	equ	0xFE8
 18892                           indf1	equ	0xFE7
 18893                           postdec1	equ	0xFE5
 18894                           fsr1h	equ	0xFE2
 18895                           fsr1l	equ	0xFE1
 18896                           indf2	equ	0xFDF
 18897                           postinc2	equ	0xFDE
 18898                           postdec2	equ	0xFDD
 18899                           plusw2	equ	0xFDB
 18900                           fsr2h	equ	0xFDA
 18901                           fsr2l	equ	0xFD9
 18902                           status	equ	0xFD8
 18903                           
 18904 ;; *************** function _ConvertADC *****************
 18905 ;; Defined at:
 18906 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 18907 ;; Parameters:    Size  Location     Type
 18908 ;;		None
 18909 ;; Auto vars:     Size  Location     Type
 18910 ;;		None
 18911 ;; Return value:  Size  Location     Type
 18912 ;;		None               void
 18913 ;; Registers used:
 18914 ;;		None
 18915 ;; Tracked objects:
 18916 ;;		On entry : 0/0
 18917 ;;		On exit  : 0/0
 18918 ;;		Unchanged: 0/0
 18919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18920 ;;      Params:         0       0       0       0       0       0       0
 18921 ;;      Locals:         0       0       0       0       0       0       0
 18922 ;;      Temps:          0       0       0       0       0       0       0
 18923 ;;      Totals:         0       0       0       0       0       0       0
 18924 ;;Total ram usage:        0 bytes
 18925 ;; Hardware stack levels used:    1
 18926 ;; Hardware stack levels required when called:    2
 18927 ;; This function calls:
 18928 ;;		Nothing
 18929 ;; This function is called by:
 18930 ;;		_init
 18931 ;; This function uses a non-reentrant model
 18932 ;;
 18933                           
 18934                           	psect	text93
 18935  005504                     __ptext93:
 18936                           	opt stack 0
 18937  005504                     _ConvertADC:
 18938                           	opt stack 26
 18939                           
 18940                           ; BSR set to: 0
 18941                           ;incstack = 0
 18942                           ;incstack = 0
 18943  005504  82C2               	bsf	4034,1,c	;volatile
 18944  005506  0012               	return	
 18945  005508                     __end_of_ConvertADC:
 18946                           	opt stack 0
 18947                           tblptru	equ	0xFF8
 18948                           tblptrh	equ	0xFF7
 18949                           tblptrl	equ	0xFF6
 18950                           tablat	equ	0xFF5
 18951                           prodh	equ	0xFF4
 18952                           prodl	equ	0xFF3
 18953                           intcon	equ	0xFF2
 18954                           postinc0	equ	0xFEE
 18955                           wreg	equ	0xFE8
 18956                           indf1	equ	0xFE7
 18957                           postdec1	equ	0xFE5
 18958                           fsr1h	equ	0xFE2
 18959                           fsr1l	equ	0xFE1
 18960                           indf2	equ	0xFDF
 18961                           postinc2	equ	0xFDE
 18962                           postdec2	equ	0xFDD
 18963                           plusw2	equ	0xFDB
 18964                           fsr2h	equ	0xFDA
 18965                           fsr2l	equ	0xFD9
 18966                           status	equ	0xFD8
 18967                           
 18968 ;; *************** function _WriteTimer0 *****************
 18969 ;; Defined at:
 18970 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 18971 ;; Parameters:    Size  Location     Type
 18972 ;;  timer0          2   13[COMRAM] unsigned int 
 18973 ;; Auto vars:     Size  Location     Type
 18974 ;;  timer           2   15[COMRAM] struct Timers
 18975 ;; Return value:  Size  Location     Type
 18976 ;;		None               void
 18977 ;; Registers used:
 18978 ;;		None
 18979 ;; Tracked objects:
 18980 ;;		On entry : F/0
 18981 ;;		On exit  : F/0
 18982 ;;		Unchanged: F/0
 18983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18984 ;;      Params:         2       0       0       0       0       0       0
 18985 ;;      Locals:         2       0       0       0       0       0       0
 18986 ;;      Temps:          0       0       0       0       0       0       0
 18987 ;;      Totals:         4       0       0       0       0       0       0
 18988 ;;Total ram usage:        4 bytes
 18989 ;; Hardware stack levels used:    1
 18990 ;; Hardware stack levels required when called:    2
 18991 ;; This function calls:
 18992 ;;		Nothing
 18993 ;; This function is called by:
 18994 ;;		_init
 18995 ;; This function uses a non-reentrant model
 18996 ;;
 18997                           
 18998                           	psect	text94
 18999  005498                     __ptext94:
 19000                           	opt stack 0
 19001  005498                     _WriteTimer0:
 19002                           	opt stack 26
 19003                           
 19004                           ; BSR set to: 0
 19005                           
 19006                           ;incstack = 0
 19007                           ;incstack = 0
 19008  005498  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19009  00549C  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19010  0054A0  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19011  0054A4  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19012                           
 19013                           ; BSR set to: 0
 19014  0054A8  0012               	return	
 19015  0054AA                     __end_of_WriteTimer0:
 19016                           	opt stack 0
 19017                           tblptru	equ	0xFF8
 19018                           tblptrh	equ	0xFF7
 19019                           tblptrl	equ	0xFF6
 19020                           tablat	equ	0xFF5
 19021                           prodh	equ	0xFF4
 19022                           prodl	equ	0xFF3
 19023                           intcon	equ	0xFF2
 19024                           postinc0	equ	0xFEE
 19025                           wreg	equ	0xFE8
 19026                           indf1	equ	0xFE7
 19027                           postdec1	equ	0xFE5
 19028                           fsr1h	equ	0xFE2
 19029                           fsr1l	equ	0xFE1
 19030                           indf2	equ	0xFDF
 19031                           postinc2	equ	0xFDE
 19032                           postdec2	equ	0xFDD
 19033                           plusw2	equ	0xFDB
 19034                           fsr2h	equ	0xFDA
 19035                           fsr2l	equ	0xFD9
 19036                           status	equ	0xFD8
 19037                           
 19038 ;; *************** function ___flmul *****************
 19039 ;; Defined at:
 19040 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19041 ;; Parameters:    Size  Location     Type
 19042 ;;  f1              4    8[BANK0 ] struct Timers
 19043 ;;  f2              4   12[BANK0 ] struct Timers
 19044 ;; Auto vars:     Size  Location     Type
 19045 ;;  f3_as_produc    4   24[BANK0 ] unsigned long 
 19046 ;;  sign            1   29[BANK0 ] unsigned char 
 19047 ;;  cntr            1   28[BANK0 ] unsigned char 
 19048 ;;  exp             1   23[BANK0 ] unsigned char 
 19049 ;; Return value:  Size  Location     Type
 19050 ;;                  4    8[BANK0 ] unsigned char 
 19051 ;; Registers used:
 19052 ;;		wreg, status,2, status,0, cstack
 19053 ;; Tracked objects:
 19054 ;;		On entry : 0/0
 19055 ;;		On exit  : 0/0
 19056 ;;		Unchanged: 0/0
 19057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19058 ;;      Params:         0       8       0       0       0       0       0
 19059 ;;      Locals:         0      14       0       0       0       0       0
 19060 ;;      Temps:          0       0       0       0       0       0       0
 19061 ;;      Totals:         0      22       0       0       0       0       0
 19062 ;;Total ram usage:       22 bytes
 19063 ;; Hardware stack levels used:    1
 19064 ;; Hardware stack levels required when called:    3
 19065 ;; This function calls:
 19066 ;;		___flpack
 19067 ;; This function is called by:
 19068 ;;		_doWork
 19069 ;;		_Celsius2Fahrenheit
 19070 ;;		___asflmul
 19071 ;;		_log
 19072 ;;		_eval_poly
 19073 ;; This function uses a non-reentrant model
 19074 ;;
 19075                           
 19076                           	psect	text95
 19077  00406A                     __ptext95:
 19078                           	opt stack 0
 19079  00406A                     ___flmul:
 19080                           	opt stack 25
 19081                           
 19082                           ; BSR set to: 0
 19083                           ;incstack = 0
 19084                           ;incstack = 0
 19085  00406A  0100               	movlb	0	; () banked
 19086  00406C  356A               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19087  00406E  356B               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19088  004070  6F77               	movwf	___flmul@exp& (0+255),b
 19089  004072  6777               	tstfsz	___flmul@exp& (0+255),b
 19090  004074  D001               	goto	l11591
 19091  004076  D006               	goto	u10010
 19092  004078                     l11591:
 19093                           
 19094                           ; BSR set to: 0
 19095  004078  0100               	movlb	0	; () banked
 19096  00407A  356E               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19097  00407C  356F               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19098  00407E  6F7D               	movwf	___flmul@sign& (0+255),b
 19099  004080  677D               	tstfsz	___flmul@sign& (0+255),b
 19100  004082  D005               	goto	l11595
 19101  004084                     u10010:
 19102                           
 19103                           ; BSR set to: 0
 19104  004084  6B68               	clrf	?___flmul& (0+255),b
 19105  004086  6B69               	clrf	(?___flmul+1)& (0+255),b
 19106  004088  6B6A               	clrf	(?___flmul+2)& (0+255),b
 19107  00408A  6B6B               	clrf	(?___flmul+3)& (0+255),b
 19108  00408C  D041               	goto	l1637
 19109  00408E                     l11595:
 19110                           
 19111                           ; BSR set to: 0
 19112  00408E  517D               	movf	___flmul@sign& (0+255),w,b
 19113  004090  0F7B               	addlw	123
 19114  004092  2777               	addwf	___flmul@exp& (0+255),f,b
 19115                           
 19116                           ; BSR set to: 0
 19117  004094  C06B  F07D         	movff	___flmul@f1+3,___flmul@sign
 19118  004098  0100               	movlb	0	; () banked
 19119  00409A  516F               	movf	(___flmul@f2+3)& (0+255),w,b
 19120  00409C  1B7D               	xorwf	___flmul@sign& (0+255),f,b
 19121  00409E  0E80               	movlw	128
 19122  0040A0  177D               	andwf	___flmul@sign& (0+255),f,b
 19123                           
 19124                           ; BSR set to: 0
 19125  0040A2  8F6A               	bsf	(___flmul@f1+2)& (0+255),7,b
 19126                           
 19127                           ; BSR set to: 0
 19128  0040A4  8F6E               	bsf	(___flmul@f2+2)& (0+255),7,b
 19129  0040A6  6B6F               	clrf	(___flmul@f2+3)& (0+255),b
 19130                           
 19131                           ; BSR set to: 0
 19132  0040A8  6B78               	clrf	___flmul@f3_as_product& (0+255),b
 19133  0040AA  6B79               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 19134  0040AC  6B7A               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 19135  0040AE  6B7B               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 19136                           
 19137                           ; BSR set to: 0
 19138  0040B0  0E07               	movlw	7
 19139  0040B2  6F7C               	movwf	___flmul@cntr& (0+255),b
 19140  0040B4                     l11607:
 19141                           
 19142                           ; BSR set to: 0
 19143  0040B4  A168               	btfss	___flmul@f1& (0+255),0,b
 19144  0040B6  D002               	goto	l11611
 19145                           
 19146                           ; BSR set to: 0
 19147  0040B8  516C               	movf	___flmul@f2& (0+255),w,b
 19148  0040BA  D82B               	call	PL58	;call to abstracted procedure
 19149  0040BC                     l11611:
 19150                           
 19151                           ; BSR set to: 0
 19152                           
 19153                           ; BSR set to: 0
 19154  0040BC  D832               	call	PL68	;call to abstracted procedure
 19155  0040BE  376C               	rlcf	___flmul@f2& (0+255),f,b
 19156  0040C0  376D               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19157  0040C2  376E               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19158  0040C4  376F               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19159                           
 19160                           ; BSR set to: 0
 19161  0040C6  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
 19162  0040C8  D7F5               	goto	l11607
 19163                           
 19164                           ; BSR set to: 0
 19165  0040CA  0E11               	movlw	17
 19166  0040CC  6F7C               	movwf	___flmul@cntr& (0+255),b
 19167  0040CE                     l11619:
 19168                           
 19169                           ; BSR set to: 0
 19170  0040CE  A168               	btfss	___flmul@f1& (0+255),0,b
 19171  0040D0  D002               	goto	l11623
 19172                           
 19173                           ; BSR set to: 0
 19174  0040D2  516C               	movf	___flmul@f2& (0+255),w,b
 19175  0040D4  D81E               	call	PL58	;call to abstracted procedure
 19176  0040D6                     l11623:
 19177                           
 19178                           ; BSR set to: 0
 19179                           
 19180                           ; BSR set to: 0
 19181  0040D6  D825               	call	PL68	;call to abstracted procedure
 19182  0040D8  337B               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19183  0040DA  337A               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19184  0040DC  3379               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19185  0040DE  3378               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19186                           
 19187                           ; BSR set to: 0
 19188  0040E0  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
 19189  0040E2  D7F5               	goto	l11619
 19190                           
 19191                           ; BSR set to: 0
 19192  0040E4  C078  F00E         	movff	___flmul@f3_as_product,?___flpack
 19193  0040E8  C079  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19194  0040EC  C07A  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19195  0040F0  C07B  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19196  0040F4  C077  F012         	movff	___flmul@exp,?___flpack+4
 19197  0040F8  C07D  F013         	movff	___flmul@sign,?___flpack+5
 19198  0040FC  EC58  F021         	call	___flpack	;wreg free
 19199  004100  C011  F06B         	movff	?___flpack+3,?___flmul+3
 19200  004104  C010  F06A         	movff	?___flpack+2,?___flmul+2
 19201  004108  C00F  F069         	movff	?___flpack+1,?___flmul+1
 19202  00410C  C00E  F068         	movff	?___flpack,?___flmul
 19203  004110                     l1637:
 19204  004110  0012               	return	
 19205  004112                     __end_of___flmul:
 19206                           	opt stack 0
 19207  004112                     PL58:
 19208                           	opt stack 25
 19209  004112  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
 19210  004114  516D               	movf	(___flmul@f2+1)& (0+255),w,b
 19211  004116  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19212  004118  516E               	movf	(___flmul@f2+2)& (0+255),w,b
 19213  00411A  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19214  00411C  516F               	movf	(___flmul@f2+3)& (0+255),w,b
 19215  00411E  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19216  004120  0012               	return	
 19217  004122                     __end_ofPL58:
 19218                           	opt stack 0
 19219  004122                     PL68:
 19220                           	opt stack 25
 19221  004122  90D8               	bcf	status,0,c
 19222  004124  336B               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19223  004126  336A               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19224  004128  3369               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19225  00412A  3368               	rrcf	___flmul@f1& (0+255),f,b
 19226  00412C  90D8               	bcf	status,0,c
 19227  00412E  0012               	return	
 19228  004130                     __end_ofPL68:
 19229                           	opt stack 0
 19230                           tblptru	equ	0xFF8
 19231                           tblptrh	equ	0xFF7
 19232                           tblptrl	equ	0xFF6
 19233                           tablat	equ	0xFF5
 19234                           prodh	equ	0xFF4
 19235                           prodl	equ	0xFF3
 19236                           intcon	equ	0xFF2
 19237                           postinc0	equ	0xFEE
 19238                           wreg	equ	0xFE8
 19239                           indf1	equ	0xFE7
 19240                           postdec1	equ	0xFE5
 19241                           fsr1h	equ	0xFE2
 19242                           fsr1l	equ	0xFE1
 19243                           indf2	equ	0xFDF
 19244                           postinc2	equ	0xFDE
 19245                           postdec2	equ	0xFDD
 19246                           plusw2	equ	0xFDB
 19247                           fsr2h	equ	0xFDA
 19248                           fsr2l	equ	0xFD9
 19249                           status	equ	0xFD8
 19250                           
 19251 ;; *************** function ___awtofl *****************
 19252 ;; Defined at:
 19253 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19254 ;; Parameters:    Size  Location     Type
 19255 ;;  c               2   23[COMRAM] int 
 19256 ;; Auto vars:     Size  Location     Type
 19257 ;;  f1              4    0        int 
 19258 ;;  sign            1   28[COMRAM] unsigned char 
 19259 ;; Return value:  Size  Location     Type
 19260 ;;                  4   23[COMRAM] unsigned char 
 19261 ;; Registers used:
 19262 ;;		wreg, status,2, status,0, cstack
 19263 ;; Tracked objects:
 19264 ;;		On entry : F/0
 19265 ;;		On exit  : 0/0
 19266 ;;		Unchanged: 0/0
 19267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19268 ;;      Params:         4       0       0       0       0       0       0
 19269 ;;      Locals:         2       0       0       0       0       0       0
 19270 ;;      Temps:          0       0       0       0       0       0       0
 19271 ;;      Totals:         6       0       0       0       0       0       0
 19272 ;;Total ram usage:        6 bytes
 19273 ;; Hardware stack levels used:    1
 19274 ;; Hardware stack levels required when called:    3
 19275 ;; This function calls:
 19276 ;;		___flpack
 19277 ;; This function is called by:
 19278 ;;		_setEventData
 19279 ;;		_exp
 19280 ;;		_log
 19281 ;; This function uses a non-reentrant model
 19282 ;;
 19283                           
 19284                           	psect	text96
 19285  00506C                     __ptext96:
 19286                           	opt stack 0
 19287  00506C                     ___awtofl:
 19288                           	opt stack 24
 19289                           
 19290                           ; BSR set to: 0
 19291                           
 19292                           ;incstack = 0
 19293                           ;incstack = 0
 19294  00506C  6A1D               	clrf	___awtofl@sign,c
 19295  00506E  AE19               	btfss	___awtofl@c+1,7,c
 19296  005070  D005               	goto	l11647
 19297                           
 19298                           ; BSR set to: 0
 19299  005072  6C18               	negf	___awtofl@c,c
 19300  005074  1E19               	comf	___awtofl@c+1,f,c
 19301  005076  B0D8               	btfsc	status,0,c
 19302  005078  2A19               	incf	___awtofl@c+1,f,c
 19303  00507A  2A1D               	incf	___awtofl@sign,f,c
 19304  00507C                     l11647:
 19305                           
 19306                           ; BSR set to: 0
 19307  00507C  C018  F00E         	movff	___awtofl@c,?___flpack
 19308  005080  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19309  005084  6A10               	clrf	?___flpack+2,c
 19310  005086  6A11               	clrf	?___flpack+3,c
 19311  005088  0E96               	movlw	150
 19312  00508A  6E12               	movwf	?___flpack+4,c
 19313  00508C  C01D  F013         	movff	___awtofl@sign,?___flpack+5
 19314  005090  EC58  F021         	call	___flpack	;wreg free
 19315  005094  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19316  005098  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19317  00509C  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19318  0050A0  C00E  F018         	movff	?___flpack,?___awtofl
 19319  0050A4  0012               	return	
 19320  0050A6                     __end_of___awtofl:
 19321                           	opt stack 0
 19322                           tblptru	equ	0xFF8
 19323                           tblptrh	equ	0xFF7
 19324                           tblptrl	equ	0xFF6
 19325                           tablat	equ	0xFF5
 19326                           prodh	equ	0xFF4
 19327                           prodl	equ	0xFF3
 19328                           intcon	equ	0xFF2
 19329                           postinc0	equ	0xFEE
 19330                           wreg	equ	0xFE8
 19331                           indf1	equ	0xFE7
 19332                           postdec1	equ	0xFE5
 19333                           fsr1h	equ	0xFE2
 19334                           fsr1l	equ	0xFE1
 19335                           indf2	equ	0xFDF
 19336                           postinc2	equ	0xFDE
 19337                           postdec2	equ	0xFDD
 19338                           plusw2	equ	0xFDB
 19339                           fsr2h	equ	0xFDA
 19340                           fsr2l	equ	0xFD9
 19341                           status	equ	0xFD8
 19342                           
 19343 ;; *************** function ___flpack *****************
 19344 ;; Defined at:
 19345 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19346 ;; Parameters:    Size  Location     Type
 19347 ;;  arg             4   13[COMRAM] unsigned long 
 19348 ;;  exp             1   17[COMRAM] unsigned char 
 19349 ;;  sign            1   18[COMRAM] unsigned char 
 19350 ;; Auto vars:     Size  Location     Type
 19351 ;;		None
 19352 ;; Return value:  Size  Location     Type
 19353 ;;                  4   13[COMRAM] unsigned char 
 19354 ;; Registers used:
 19355 ;;		wreg, status,2, status,0
 19356 ;; Tracked objects:
 19357 ;;		On entry : 0/0
 19358 ;;		On exit  : 0/0
 19359 ;;		Unchanged: 0/0
 19360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19361 ;;      Params:         6       0       0       0       0       0       0
 19362 ;;      Locals:         0       0       0       0       0       0       0
 19363 ;;      Temps:          4       0       0       0       0       0       0
 19364 ;;      Totals:        10       0       0       0       0       0       0
 19365 ;;Total ram usage:       10 bytes
 19366 ;; Hardware stack levels used:    1
 19367 ;; Hardware stack levels required when called:    2
 19368 ;; This function calls:
 19369 ;;		Nothing
 19370 ;; This function is called by:
 19371 ;;		___altofl
 19372 ;;		___awtofl
 19373 ;;		___fladd
 19374 ;;		___fldiv
 19375 ;;		___flmul
 19376 ;;		___lwtofl
 19377 ;; This function uses a non-reentrant model
 19378 ;;
 19379                           
 19380                           	psect	text97
 19381  0042B0                     __ptext97:
 19382                           	opt stack 0
 19383  0042B0                     ___flpack:
 19384                           	opt stack 25
 19385                           
 19386                           ;incstack = 0
 19387                           ;incstack = 0
 19388  0042B0  5012               	movf	___flpack@exp,w,c
 19389  0042B2  E005               	bz	l1552
 19390  0042B4  5011               	movf	___flpack@arg+3,w,c
 19391  0042B6  100E               	iorwf	___flpack@arg,w,c
 19392  0042B8  100F               	iorwf	___flpack@arg+1,w,c
 19393  0042BA  1010               	iorwf	___flpack@arg+2,w,c
 19394  0042BC  E107               	bnz	l11397
 19395  0042BE                     l1552:
 19396  0042BE  6A0E               	clrf	?___flpack,c
 19397  0042C0  6A0F               	clrf	?___flpack+1,c
 19398  0042C2  6A10               	clrf	?___flpack+2,c
 19399  0042C4  6A11               	clrf	?___flpack+3,c
 19400  0042C6  D04B               	goto	l1553
 19401  0042C8                     l11395:
 19402  0042C8  2A12               	incf	___flpack@exp,f,c
 19403  0042CA  D84A               	call	PL80	;call to abstracted procedure
 19404  0042CC                     l11397:
 19405  0042CC  6A14               	clrf	??___flpack& (0+255),c
 19406  0042CE  6A15               	clrf	(??___flpack+1)& (0+255),c
 19407  0042D0  6A16               	clrf	(??___flpack+2)& (0+255),c
 19408  0042D2  0EFE               	movlw	254
 19409  0042D4  1411               	andwf	___flpack@arg+3,w,c
 19410  0042D6  6E17               	movwf	(??___flpack+3)& (0+255),c
 19411  0042D8  5017               	movf	??___flpack+3,w,c
 19412  0042DA  1014               	iorwf	??___flpack,w,c
 19413  0042DC  1015               	iorwf	??___flpack+1,w,c
 19414  0042DE  1016               	iorwf	??___flpack+2,w,c
 19415  0042E0  E008               	bz	l1557
 19416  0042E2  D7F2               	goto	l11395
 19417  0042E4                     l11399:
 19418  0042E4  2A12               	incf	___flpack@exp,f,c
 19419  0042E6  2A0E               	incf	___flpack@arg,f,c
 19420  0042E8  0E00               	movlw	0
 19421  0042EA  220F               	addwfc	___flpack@arg+1,f,c
 19422  0042EC  2210               	addwfc	___flpack@arg+2,f,c
 19423  0042EE  2211               	addwfc	___flpack@arg+3,f,c
 19424  0042F0  D837               	call	PL80	;call to abstracted procedure
 19425  0042F2                     l1557:
 19426  0042F2  6A14               	clrf	??___flpack& (0+255),c
 19427  0042F4  6A15               	clrf	(??___flpack+1)& (0+255),c
 19428  0042F6  6A16               	clrf	(??___flpack+2)& (0+255),c
 19429  0042F8  5011               	movf	___flpack@arg+3,w,c
 19430  0042FA  6E17               	movwf	(??___flpack+3)& (0+255),c
 19431  0042FC  5017               	movf	??___flpack+3,w,c
 19432  0042FE  1014               	iorwf	??___flpack,w,c
 19433  004300  1015               	iorwf	??___flpack+1,w,c
 19434  004302  1016               	iorwf	??___flpack+2,w,c
 19435  004304  E007               	bz	l11407
 19436  004306  D7EE               	goto	l11399
 19437  004308                     l11405:
 19438  004308  0612               	decf	___flpack@exp,f,c
 19439  00430A  90D8               	bcf	status,0,c
 19440  00430C  360E               	rlcf	___flpack@arg,f,c
 19441  00430E  360F               	rlcf	___flpack@arg+1,f,c
 19442  004310  3610               	rlcf	___flpack@arg+2,f,c
 19443  004312  3611               	rlcf	___flpack@arg+3,f,c
 19444  004314                     l11407:
 19445  004314  AE10               	btfss	___flpack@arg+2,7,c
 19446  004316  D7F8               	goto	l11405
 19447  004318  B012               	btfsc	___flpack@exp,0,c
 19448  00431A  D002               	goto	l1563
 19449  00431C  0E7F               	movlw	127
 19450  00431E  1610               	andwf	___flpack@arg+2,f,c
 19451  004320                     l1563:
 19452  004320  90D8               	bcf	status,0,c
 19453  004322  3212               	rrcf	___flpack@exp,f,c
 19454  004324  C012  F014         	movff	___flpack@exp,??___flpack
 19455  004328  6A15               	clrf	(??___flpack+1)& (0+255),c
 19456  00432A  6A16               	clrf	(??___flpack+2)& (0+255),c
 19457  00432C  6A17               	clrf	(??___flpack+3)& (0+255),c
 19458  00432E  C014  F017         	movff	??___flpack,??___flpack+3
 19459  004332  6A16               	clrf	??___flpack+2,c
 19460  004334  6A15               	clrf	??___flpack+1,c
 19461  004336  6A14               	clrf	??___flpack,c
 19462  004338  5014               	movf	??___flpack,w,c
 19463  00433A  120E               	iorwf	___flpack@arg,f,c
 19464  00433C  5015               	movf	??___flpack+1,w,c
 19465  00433E  120F               	iorwf	___flpack@arg+1,f,c
 19466  004340  5016               	movf	??___flpack+2,w,c
 19467  004342  1210               	iorwf	___flpack@arg+2,f,c
 19468  004344  5017               	movf	??___flpack+3,w,c
 19469  004346  1211               	iorwf	___flpack@arg+3,f,c
 19470  004348  5013               	movf	___flpack@sign,w,c
 19471  00434A  A4D8               	btfss	status,2,c
 19472  00434C  8E11               	bsf	___flpack@arg+3,7,c
 19473  00434E  C00E  F00E         	movff	___flpack@arg,?___flpack
 19474  004352  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19475  004356  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19476  00435A  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19477  00435E                     l1553:
 19478  00435E  0012               	return	
 19479  004360                     __end_of___flpack:
 19480                           	opt stack 0
 19481  004360                     PL80:
 19482                           	opt stack 25
 19483  004360  90D8               	bcf	status,0,c
 19484  004362  3211               	rrcf	___flpack@arg+3,f,c
 19485  004364  3210               	rrcf	___flpack@arg+2,f,c
 19486  004366  320F               	rrcf	___flpack@arg+1,f,c
 19487  004368  320E               	rrcf	___flpack@arg,f,c
 19488  00436A  0012               	return	
 19489  00436C                     __end_ofPL80:
 19490                           	opt stack 0
 19491                           tblptru	equ	0xFF8
 19492                           tblptrh	equ	0xFF7
 19493                           tblptrl	equ	0xFF6
 19494                           tablat	equ	0xFF5
 19495                           prodh	equ	0xFF4
 19496                           prodl	equ	0xFF3
 19497                           intcon	equ	0xFF2
 19498                           postinc0	equ	0xFEE
 19499                           wreg	equ	0xFE8
 19500                           indf1	equ	0xFE7
 19501                           postdec1	equ	0xFE5
 19502                           fsr1h	equ	0xFE2
 19503                           fsr1l	equ	0xFE1
 19504                           indf2	equ	0xFDF
 19505                           postinc2	equ	0xFDE
 19506                           postdec2	equ	0xFDD
 19507                           plusw2	equ	0xFDB
 19508                           fsr2h	equ	0xFDA
 19509                           fsr2l	equ	0xFD9
 19510                           status	equ	0xFD8
 19511                           
 19512 ;; *************** function _vscp_readAppReg *****************
 19513 ;; Defined at:
 19514 ;;		line 1286 in file "../main.c"
 19515 ;; Parameters:    Size  Location     Type
 19516 ;;  reg             1    wreg     unsigned char 
 19517 ;; Auto vars:     Size  Location     Type
 19518 ;;  reg             1   26[COMRAM] unsigned char 
 19519 ;;  pos             1   25[COMRAM] unsigned char 
 19520 ;;  rv              1   27[COMRAM] unsigned char 
 19521 ;; Return value:  Size  Location     Type
 19522 ;;                  1    wreg      unsigned char 
 19523 ;; Registers used:
 19524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19525 ;; Tracked objects:
 19526 ;;		On entry : E/1
 19527 ;;		On exit  : 0/0
 19528 ;;		Unchanged: 0/0
 19529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19530 ;;      Params:         0       0       0       0       0       0       0
 19531 ;;      Locals:         3       0       0       0       0       0       0
 19532 ;;      Temps:          0       0       0       0       0       0       0
 19533 ;;      Totals:         3       0       0       0       0       0       0
 19534 ;;Total ram usage:        3 bytes
 19535 ;; Hardware stack levels used:    1
 19536 ;; Hardware stack levels required when called:    3
 19537 ;; This function calls:
 19538 ;;		_readEEPROM
 19539 ;; This function is called by:
 19540 ;;		_vscp_readRegister
 19541 ;;		_vscp_handleProtocolEvent
 19542 ;; This function uses a non-reentrant model
 19543 ;;
 19544                           
 19545                           	psect	text98
 19546  001368                     __ptext98:
 19547                           	opt stack 0
 19548  001368                     _vscp_readAppReg:
 19549                           	opt stack 24
 19550                           
 19551                           ;incstack = 0
 19552                           ;incstack = 0
 19553                           ;vscp_readAppReg@reg stored from wreg
 19554  001368  CFE8 F01B          	movff	wreg,vscp_readAppReg@reg
 19555                           
 19556                           ;main.c: 1287: uint8_t rv;
 19557                           ;main.c: 1292: if (0 == vscp_page_select) {
 19558  00136C  5047               	movf	_vscp_page_select+1,w,c
 19559  00136E  1046               	iorwf	_vscp_page_select,w,c
 19560  001370  E101 D25B          	bz	l10749
 19561  001374  D39F               	goto	l10751
 19562  001376                     l10547:
 19563                           
 19564                           ;main.c: 1298: rv = readEEPROM( 0x41 );
 19565  001376  6A17               	clrf	?_readEEPROM+1,c
 19566  001378  0E41               	movlw	65
 19567  00137A  6E16               	movwf	?_readEEPROM,c
 19568  00137C  EC27  F02A         	call	_readEEPROM	;wreg free
 19569  001380  D3C6               	goto	L53
 19570  001382                     l10549:
 19571                           
 19572                           ;main.c: 1303: rv = readEEPROM( 0x42 );
 19573  001382  6A17               	clrf	?_readEEPROM+1,c
 19574  001384  0E42               	movlw	66
 19575  001386  6E16               	movwf	?_readEEPROM,c
 19576  001388  EC27  F02A         	call	_readEEPROM	;wreg free
 19577  00138C  D3C0               	goto	L53
 19578  00138E                     l10551:
 19579                           
 19580                           ;main.c: 1308: rv = readEEPROM( 0x43 );
 19581  00138E  6A17               	clrf	?_readEEPROM+1,c
 19582  001390  0E43               	movlw	67
 19583  001392  6E16               	movwf	?_readEEPROM,c
 19584  001394  EC27  F02A         	call	_readEEPROM	;wreg free
 19585  001398  D3BA               	goto	L53
 19586  00139A                     l10553:
 19587                           
 19588                           ;main.c: 1313: rv = readEEPROM (0x44 );
 19589  00139A  6A17               	clrf	?_readEEPROM+1,c
 19590  00139C  0E44               	movlw	68
 19591  00139E  6E16               	movwf	?_readEEPROM,c
 19592  0013A0  EC27  F02A         	call	_readEEPROM	;wreg free
 19593  0013A4  D3B4               	goto	L53
 19594  0013A6                     l10555:
 19595                           
 19596                           ;main.c: 1318: rv = readEEPROM( 0x45 );
 19597  0013A6  6A17               	clrf	?_readEEPROM+1,c
 19598  0013A8  0E45               	movlw	69
 19599  0013AA  6E16               	movwf	?_readEEPROM,c
 19600  0013AC  EC27  F02A         	call	_readEEPROM	;wreg free
 19601  0013B0  D3AE               	goto	L53
 19602  0013B2                     l10557:
 19603                           
 19604                           ;main.c: 1323: rv = readEEPROM( 0x46 );
 19605  0013B2  6A17               	clrf	?_readEEPROM+1,c
 19606  0013B4  0E46               	movlw	70
 19607  0013B6  6E16               	movwf	?_readEEPROM,c
 19608  0013B8  EC27  F02A         	call	_readEEPROM	;wreg free
 19609  0013BC  D3A8               	goto	L53
 19610  0013BE                     l10559:
 19611                           
 19612                           ;main.c: 1328: rv = readEEPROM( 0x47 );
 19613  0013BE  6A17               	clrf	?_readEEPROM+1,c
 19614  0013C0  0E47               	movlw	71
 19615  0013C2  6E16               	movwf	?_readEEPROM,c
 19616  0013C4  EC27  F02A         	call	_readEEPROM	;wreg free
 19617  0013C8  D3A2               	goto	L53
 19618  0013CA                     l10561:
 19619                           
 19620                           ;main.c: 1333: rv = readEEPROM( 0x48 );
 19621  0013CA  6A17               	clrf	?_readEEPROM+1,c
 19622  0013CC  0E48               	movlw	72
 19623  0013CE  6E16               	movwf	?_readEEPROM,c
 19624  0013D0  EC27  F02A         	call	_readEEPROM	;wreg free
 19625  0013D4  D39C               	goto	L53
 19626  0013D6                     l10563:
 19627                           
 19628                           ;main.c: 1338: rv = ((current_temp[0] & 0xff00) >> 8);
 19629  0013D6  0101               	movlb	1	; () banked
 19630  0013D8  5101               	movf	(_current_temp+1)& (0+255),w,b
 19631  0013DA  D399               	goto	L53
 19632  0013DC                     l314:
 19633                           
 19634                           ;main.c: 1343: rv = (current_temp[0] & 0x00ff);
 19635  0013DC  C100  F01C         	movff	_current_temp,vscp_readAppReg@rv
 19636                           
 19637                           ;main.c: 1344: break;
 19638  0013E0  D397               	goto	l10773
 19639  0013E2                     l10565:
 19640                           
 19641                           ;main.c: 1348: rv = ((current_temp[1] & 0xff00) >> 8);
 19642  0013E2  0101               	movlb	1	; () banked
 19643  0013E4  5103               	movf	(_current_temp+3)& (0+255),w,b
 19644  0013E6  D393               	goto	L53
 19645  0013E8                     l316:
 19646                           
 19647                           ;main.c: 1353: rv = (current_temp[1] & 0x00ff);
 19648  0013E8  C102  F01C         	movff	_current_temp+2,vscp_readAppReg@rv
 19649                           
 19650                           ;main.c: 1354: break;
 19651  0013EC  D391               	goto	l10773
 19652  0013EE                     l10567:
 19653                           
 19654                           ;main.c: 1358: rv = ((current_temp[2] & 0xff00) >> 8);
 19655  0013EE  0101               	movlb	1	; () banked
 19656  0013F0  5105               	movf	(_current_temp+5)& (0+255),w,b
 19657  0013F2  D38D               	goto	L53
 19658  0013F4                     l318:
 19659                           
 19660                           ;main.c: 1363: rv = (current_temp[2] & 0x00ff);
 19661  0013F4  C104  F01C         	movff	_current_temp+4,vscp_readAppReg@rv
 19662                           
 19663                           ;main.c: 1364: break;
 19664  0013F8  D38B               	goto	l10773
 19665  0013FA                     l10569:
 19666                           
 19667                           ;main.c: 1368: rv = ((current_temp[3] & 0xff00) >> 8);
 19668  0013FA  0101               	movlb	1	; () banked
 19669  0013FC  5107               	movf	(_current_temp+7)& (0+255),w,b
 19670  0013FE  D387               	goto	L53
 19671  001400                     l320:
 19672                           
 19673                           ;main.c: 1373: rv = (current_temp[3] & 0x00ff);
 19674  001400  C106  F01C         	movff	_current_temp+6,vscp_readAppReg@rv
 19675                           
 19676                           ;main.c: 1374: break;
 19677  001404  D385               	goto	l10773
 19678  001406                     l10571:
 19679                           
 19680                           ;main.c: 1378: rv = ((current_temp[4] & 0xff00) >> 8);
 19681  001406  0101               	movlb	1	; () banked
 19682  001408  5109               	movf	(_current_temp+9)& (0+255),w,b
 19683  00140A  D381               	goto	L53
 19684  00140C                     l322:
 19685                           
 19686                           ;main.c: 1383: rv = (current_temp[4] & 0x00ff);
 19687  00140C  C108  F01C         	movff	_current_temp+8,vscp_readAppReg@rv
 19688                           
 19689                           ;main.c: 1384: break;
 19690  001410  D37F               	goto	l10773
 19691  001412                     l10573:
 19692                           
 19693                           ;main.c: 1388: rv = ((current_temp[5] & 0xff00) >> 8);
 19694  001412  0101               	movlb	1	; () banked
 19695  001414  510B               	movf	(_current_temp+11)& (0+255),w,b
 19696  001416  D37B               	goto	L53
 19697  001418                     l324:
 19698                           
 19699                           ;main.c: 1393: rv = (current_temp[5] & 0x00ff);
 19700  001418  C10A  F01C         	movff	_current_temp+10,vscp_readAppReg@rv
 19701                           
 19702                           ;main.c: 1394: break;
 19703  00141C  D379               	goto	l10773
 19704  00141E                     l10575:
 19705                           
 19706                           ;main.c: 1398: rv = readEEPROM(0x49);
 19707  00141E  6A17               	clrf	?_readEEPROM+1,c
 19708  001420  0E49               	movlw	73
 19709  001422  6E16               	movwf	?_readEEPROM,c
 19710  001424  EC27  F02A         	call	_readEEPROM	;wreg free
 19711  001428  D372               	goto	L53
 19712  00142A                     l10577:
 19713                           
 19714                           ;main.c: 1403: rv = readEEPROM(0x4A);
 19715  00142A  6A17               	clrf	?_readEEPROM+1,c
 19716  00142C  0E4A               	movlw	74
 19717  00142E  6E16               	movwf	?_readEEPROM,c
 19718  001430  EC27  F02A         	call	_readEEPROM	;wreg free
 19719  001434  D36C               	goto	L53
 19720  001436                     l10579:
 19721                           
 19722                           ;main.c: 1408: rv = readEEPROM(0x4B);
 19723  001436  6A17               	clrf	?_readEEPROM+1,c
 19724  001438  0E4B               	movlw	75
 19725  00143A  6E16               	movwf	?_readEEPROM,c
 19726  00143C  EC27  F02A         	call	_readEEPROM	;wreg free
 19727  001440  D366               	goto	L53
 19728  001442                     l10581:
 19729                           
 19730                           ;main.c: 1413: rv = readEEPROM(0x4C);
 19731  001442  6A17               	clrf	?_readEEPROM+1,c
 19732  001444  0E4C               	movlw	76
 19733  001446  6E16               	movwf	?_readEEPROM,c
 19734  001448  EC27  F02A         	call	_readEEPROM	;wreg free
 19735  00144C  D360               	goto	L53
 19736  00144E                     l10583:
 19737                           
 19738                           ;main.c: 1418: rv = readEEPROM(0x4D);
 19739  00144E  6A17               	clrf	?_readEEPROM+1,c
 19740  001450  0E4D               	movlw	77
 19741  001452  6E16               	movwf	?_readEEPROM,c
 19742  001454  EC27  F02A         	call	_readEEPROM	;wreg free
 19743  001458  D35A               	goto	L53
 19744  00145A                     l10585:
 19745                           
 19746                           ;main.c: 1423: rv = readEEPROM(0x4E);
 19747  00145A  6A17               	clrf	?_readEEPROM+1,c
 19748  00145C  0E4E               	movlw	78
 19749  00145E  6E16               	movwf	?_readEEPROM,c
 19750  001460  EC27  F02A         	call	_readEEPROM	;wreg free
 19751  001464  D354               	goto	L53
 19752  001466                     l10587:
 19753                           
 19754                           ;main.c: 1430: rv = readEEPROM(0x4F);
 19755  001466  6A17               	clrf	?_readEEPROM+1,c
 19756  001468  0E4F               	movlw	79
 19757  00146A  6E16               	movwf	?_readEEPROM,c
 19758  00146C  EC27  F02A         	call	_readEEPROM	;wreg free
 19759  001470  D34E               	goto	L53
 19760  001472                     l10589:
 19761                           
 19762                           ;main.c: 1435: rv = readEEPROM(0x50);
 19763  001472  6A17               	clrf	?_readEEPROM+1,c
 19764  001474  0E50               	movlw	80
 19765  001476  6E16               	movwf	?_readEEPROM,c
 19766  001478  EC27  F02A         	call	_readEEPROM	;wreg free
 19767  00147C  D348               	goto	L53
 19768  00147E                     l10591:
 19769                           
 19770                           ;main.c: 1440: rv = readEEPROM(0x51);
 19771  00147E  6A17               	clrf	?_readEEPROM+1,c
 19772  001480  0E51               	movlw	81
 19773  001482  6E16               	movwf	?_readEEPROM,c
 19774  001484  EC27  F02A         	call	_readEEPROM	;wreg free
 19775  001488  D342               	goto	L53
 19776  00148A                     l10593:
 19777                           
 19778                           ;main.c: 1445: rv = readEEPROM(0x52);
 19779  00148A  6A17               	clrf	?_readEEPROM+1,c
 19780  00148C  0E52               	movlw	82
 19781  00148E  6E16               	movwf	?_readEEPROM,c
 19782  001490  EC27  F02A         	call	_readEEPROM	;wreg free
 19783  001494  D33C               	goto	L53
 19784  001496                     l10595:
 19785                           
 19786                           ;main.c: 1450: rv = readEEPROM(0x53);
 19787  001496  6A17               	clrf	?_readEEPROM+1,c
 19788  001498  0E53               	movlw	83
 19789  00149A  6E16               	movwf	?_readEEPROM,c
 19790  00149C  EC27  F02A         	call	_readEEPROM	;wreg free
 19791  0014A0  D336               	goto	L53
 19792  0014A2                     l10597:
 19793                           
 19794                           ;main.c: 1455: rv = readEEPROM(0x54);
 19795  0014A2  6A17               	clrf	?_readEEPROM+1,c
 19796  0014A4  0E54               	movlw	84
 19797  0014A6  6E16               	movwf	?_readEEPROM,c
 19798  0014A8  EC27  F02A         	call	_readEEPROM	;wreg free
 19799  0014AC  D330               	goto	L53
 19800  0014AE                     l10599:
 19801                           
 19802                           ;main.c: 1460: rv = readEEPROM(0x55);
 19803  0014AE  6A17               	clrf	?_readEEPROM+1,c
 19804  0014B0  0E55               	movlw	85
 19805  0014B2  6E16               	movwf	?_readEEPROM,c
 19806  0014B4  EC27  F02A         	call	_readEEPROM	;wreg free
 19807  0014B8  D32A               	goto	L53
 19808  0014BA                     l10601:
 19809                           
 19810                           ;main.c: 1465: rv = readEEPROM(0x56);
 19811  0014BA  6A17               	clrf	?_readEEPROM+1,c
 19812  0014BC  0E56               	movlw	86
 19813  0014BE  6E16               	movwf	?_readEEPROM,c
 19814  0014C0  EC27  F02A         	call	_readEEPROM	;wreg free
 19815  0014C4  D324               	goto	L53
 19816  0014C6                     l10603:
 19817                           
 19818                           ;main.c: 1470: rv = readEEPROM(0x57);
 19819  0014C6  6A17               	clrf	?_readEEPROM+1,c
 19820  0014C8  0E57               	movlw	87
 19821  0014CA  6E16               	movwf	?_readEEPROM,c
 19822  0014CC  EC27  F02A         	call	_readEEPROM	;wreg free
 19823  0014D0  D31E               	goto	L53
 19824  0014D2                     l10605:
 19825                           
 19826                           ;main.c: 1475: rv = readEEPROM(0x58);
 19827  0014D2  6A17               	clrf	?_readEEPROM+1,c
 19828  0014D4  0E58               	movlw	88
 19829  0014D6  6E16               	movwf	?_readEEPROM,c
 19830  0014D8  EC27  F02A         	call	_readEEPROM	;wreg free
 19831  0014DC  D318               	goto	L53
 19832  0014DE                     l10607:
 19833                           
 19834                           ;main.c: 1480: rv = readEEPROM(0x59);
 19835  0014DE  6A17               	clrf	?_readEEPROM+1,c
 19836  0014E0  0E59               	movlw	89
 19837  0014E2  6E16               	movwf	?_readEEPROM,c
 19838  0014E4  EC27  F02A         	call	_readEEPROM	;wreg free
 19839  0014E8  D312               	goto	L53
 19840  0014EA                     l10609:
 19841                           
 19842                           ;main.c: 1485: rv = readEEPROM(0x5A);
 19843  0014EA  6A17               	clrf	?_readEEPROM+1,c
 19844  0014EC  0E5A               	movlw	90
 19845  0014EE  6E16               	movwf	?_readEEPROM,c
 19846  0014F0  EC27  F02A         	call	_readEEPROM	;wreg free
 19847  0014F4  D30C               	goto	L53
 19848  0014F6                     l10611:
 19849                           
 19850                           ;main.c: 1494: rv = readEEPROM(0x5B);
 19851  0014F6  6A17               	clrf	?_readEEPROM+1,c
 19852  0014F8  0E5B               	movlw	91
 19853  0014FA  6E16               	movwf	?_readEEPROM,c
 19854  0014FC  EC27  F02A         	call	_readEEPROM	;wreg free
 19855  001500  D306               	goto	L53
 19856  001502                     l10613:
 19857                           
 19858                           ;main.c: 1499: rv = readEEPROM(0x5C);
 19859  001502  6A17               	clrf	?_readEEPROM+1,c
 19860  001504  0E5C               	movlw	92
 19861  001506  6E16               	movwf	?_readEEPROM,c
 19862  001508  EC27  F02A         	call	_readEEPROM	;wreg free
 19863  00150C  D300               	goto	L53
 19864  00150E                     l10615:
 19865                           
 19866                           ;main.c: 1504: rv = readEEPROM(0x5D);
 19867  00150E  6A17               	clrf	?_readEEPROM+1,c
 19868  001510  0E5D               	movlw	93
 19869  001512  6E16               	movwf	?_readEEPROM,c
 19870  001514  EC27  F02A         	call	_readEEPROM	;wreg free
 19871  001518  D2FA               	goto	L53
 19872  00151A                     l10617:
 19873                           
 19874                           ;main.c: 1509: rv = readEEPROM(0x5E);
 19875  00151A  6A17               	clrf	?_readEEPROM+1,c
 19876  00151C  0E5E               	movlw	94
 19877  00151E  6E16               	movwf	?_readEEPROM,c
 19878  001520  EC27  F02A         	call	_readEEPROM	;wreg free
 19879  001524  D2F4               	goto	L53
 19880  001526                     l10619:
 19881                           
 19882                           ;main.c: 1514: rv = readEEPROM(0x5F);
 19883  001526  6A17               	clrf	?_readEEPROM+1,c
 19884  001528  0E5F               	movlw	95
 19885  00152A  6E16               	movwf	?_readEEPROM,c
 19886  00152C  EC27  F02A         	call	_readEEPROM	;wreg free
 19887  001530  D2EE               	goto	L53
 19888  001532                     l10621:
 19889                           
 19890                           ;main.c: 1519: rv = readEEPROM(0x60);
 19891  001532  6A17               	clrf	?_readEEPROM+1,c
 19892  001534  0E60               	movlw	96
 19893  001536  6E16               	movwf	?_readEEPROM,c
 19894  001538  EC27  F02A         	call	_readEEPROM	;wreg free
 19895  00153C  D2E8               	goto	L53
 19896  00153E                     l10623:
 19897                           
 19898                           ;main.c: 1524: rv = readEEPROM(0x61);
 19899  00153E  6A17               	clrf	?_readEEPROM+1,c
 19900  001540  0E61               	movlw	97
 19901  001542  6E16               	movwf	?_readEEPROM,c
 19902  001544  EC27  F02A         	call	_readEEPROM	;wreg free
 19903  001548  D2E2               	goto	L53
 19904  00154A                     l10625:
 19905                           
 19906                           ;main.c: 1529: rv = readEEPROM(0x62);
 19907  00154A  6A17               	clrf	?_readEEPROM+1,c
 19908  00154C  0E62               	movlw	98
 19909  00154E  6E16               	movwf	?_readEEPROM,c
 19910  001550  EC27  F02A         	call	_readEEPROM	;wreg free
 19911  001554  D2DC               	goto	L53
 19912  001556                     l10627:
 19913                           
 19914                           ;main.c: 1534: rv = readEEPROM(0x63);
 19915  001556  6A17               	clrf	?_readEEPROM+1,c
 19916  001558  0E63               	movlw	99
 19917  00155A  6E16               	movwf	?_readEEPROM,c
 19918  00155C  EC27  F02A         	call	_readEEPROM	;wreg free
 19919  001560  D2D6               	goto	L53
 19920  001562                     l10629:
 19921                           
 19922                           ;main.c: 1539: rv = readEEPROM(0x64);
 19923  001562  6A17               	clrf	?_readEEPROM+1,c
 19924  001564  0E64               	movlw	100
 19925  001566  6E16               	movwf	?_readEEPROM,c
 19926  001568  EC27  F02A         	call	_readEEPROM	;wreg free
 19927  00156C  D2D0               	goto	L53
 19928  00156E                     l10631:
 19929                           
 19930                           ;main.c: 1544: rv = readEEPROM(0x65);
 19931  00156E  6A17               	clrf	?_readEEPROM+1,c
 19932  001570  0E65               	movlw	101
 19933  001572  6E16               	movwf	?_readEEPROM,c
 19934  001574  EC27  F02A         	call	_readEEPROM	;wreg free
 19935  001578  D2CA               	goto	L53
 19936  00157A                     l10633:
 19937                           
 19938                           ;main.c: 1549: rv = readEEPROM(0x66);
 19939  00157A  6A17               	clrf	?_readEEPROM+1,c
 19940  00157C  0E66               	movlw	102
 19941  00157E  6E16               	movwf	?_readEEPROM,c
 19942  001580  EC27  F02A         	call	_readEEPROM	;wreg free
 19943  001584  D2C4               	goto	L53
 19944  001586                     l10635:
 19945                           
 19946                           ;main.c: 1559: rv = readEEPROM(0x67);
 19947  001586  6A17               	clrf	?_readEEPROM+1,c
 19948  001588  0E67               	movlw	103
 19949  00158A  6E16               	movwf	?_readEEPROM,c
 19950  00158C  EC27  F02A         	call	_readEEPROM	;wreg free
 19951  001590  D2BE               	goto	L53
 19952  001592                     l10637:
 19953                           
 19954                           ;main.c: 1564: rv = readEEPROM(0x68);
 19955  001592  6A17               	clrf	?_readEEPROM+1,c
 19956  001594  0E68               	movlw	104
 19957  001596  6E16               	movwf	?_readEEPROM,c
 19958  001598  EC27  F02A         	call	_readEEPROM	;wreg free
 19959  00159C  D2B8               	goto	L53
 19960  00159E                     l10639:
 19961                           
 19962                           ;main.c: 1569: rv = readEEPROM(0x69);
 19963  00159E  6A17               	clrf	?_readEEPROM+1,c
 19964  0015A0  0E69               	movlw	105
 19965  0015A2  6E16               	movwf	?_readEEPROM,c
 19966  0015A4  EC27  F02A         	call	_readEEPROM	;wreg free
 19967  0015A8  D2B2               	goto	L53
 19968  0015AA                     l10641:
 19969                           
 19970                           ;main.c: 1574: rv = readEEPROM(0x6A);
 19971  0015AA  6A17               	clrf	?_readEEPROM+1,c
 19972  0015AC  0E6A               	movlw	106
 19973  0015AE  6E16               	movwf	?_readEEPROM,c
 19974  0015B0  EC27  F02A         	call	_readEEPROM	;wreg free
 19975  0015B4  D2AC               	goto	L53
 19976  0015B6                     l10643:
 19977                           
 19978                           ;main.c: 1579: rv = readEEPROM(0x6B);
 19979  0015B6  6A17               	clrf	?_readEEPROM+1,c
 19980  0015B8  0E6B               	movlw	107
 19981  0015BA  6E16               	movwf	?_readEEPROM,c
 19982  0015BC  EC27  F02A         	call	_readEEPROM	;wreg free
 19983  0015C0  D2A6               	goto	L53
 19984  0015C2                     l10645:
 19985                           
 19986                           ;main.c: 1584: rv = readEEPROM(0x6C);
 19987  0015C2  6A17               	clrf	?_readEEPROM+1,c
 19988  0015C4  0E6C               	movlw	108
 19989  0015C6  6E16               	movwf	?_readEEPROM,c
 19990  0015C8  EC27  F02A         	call	_readEEPROM	;wreg free
 19991  0015CC  D2A0               	goto	L53
 19992  0015CE                     l10647:
 19993                           
 19994                           ;main.c: 1589: rv = readEEPROM(0x6D);
 19995  0015CE  6A17               	clrf	?_readEEPROM+1,c
 19996  0015D0  0E6D               	movlw	109
 19997  0015D2  6E16               	movwf	?_readEEPROM,c
 19998  0015D4  EC27  F02A         	call	_readEEPROM	;wreg free
 19999  0015D8  D29A               	goto	L53
 20000  0015DA                     l10649:
 20001                           
 20002                           ;main.c: 1594: rv = readEEPROM(0x6E);
 20003  0015DA  6A17               	clrf	?_readEEPROM+1,c
 20004  0015DC  0E6E               	movlw	110
 20005  0015DE  6E16               	movwf	?_readEEPROM,c
 20006  0015E0  EC27  F02A         	call	_readEEPROM	;wreg free
 20007  0015E4  D294               	goto	L53
 20008  0015E6                     l10651:
 20009                           
 20010                           ;main.c: 1599: rv = readEEPROM(0x6F);
 20011  0015E6  6A17               	clrf	?_readEEPROM+1,c
 20012  0015E8  0E6F               	movlw	111
 20013  0015EA  6E16               	movwf	?_readEEPROM,c
 20014  0015EC  EC27  F02A         	call	_readEEPROM	;wreg free
 20015  0015F0  D28E               	goto	L53
 20016  0015F2                     l10653:
 20017                           
 20018                           ;main.c: 1604: rv = readEEPROM(0x70);
 20019  0015F2  6A17               	clrf	?_readEEPROM+1,c
 20020  0015F4  0E70               	movlw	112
 20021  0015F6  6E16               	movwf	?_readEEPROM,c
 20022  0015F8  EC27  F02A         	call	_readEEPROM	;wreg free
 20023  0015FC  D288               	goto	L53
 20024  0015FE                     l10655:
 20025                           
 20026                           ;main.c: 1609: rv = readEEPROM(0x71);
 20027  0015FE  6A17               	clrf	?_readEEPROM+1,c
 20028  001600  0E71               	movlw	113
 20029  001602  6E16               	movwf	?_readEEPROM,c
 20030  001604  EC27  F02A         	call	_readEEPROM	;wreg free
 20031  001608  D282               	goto	L53
 20032  00160A                     l10657:
 20033                           
 20034                           ;main.c: 1614: rv = readEEPROM(0x72);
 20035  00160A  6A17               	clrf	?_readEEPROM+1,c
 20036  00160C  0E72               	movlw	114
 20037  00160E  6E16               	movwf	?_readEEPROM,c
 20038  001610  EC27  F02A         	call	_readEEPROM	;wreg free
 20039  001614  D27C               	goto	L53
 20040  001616                     l10659:
 20041                           
 20042                           ;main.c: 1623: rv = readEEPROM(0x73);
 20043  001616  6A17               	clrf	?_readEEPROM+1,c
 20044  001618  0E73               	movlw	115
 20045  00161A  6E16               	movwf	?_readEEPROM,c
 20046  00161C  EC27  F02A         	call	_readEEPROM	;wreg free
 20047  001620  D276               	goto	L53
 20048  001622                     l10661:
 20049                           
 20050                           ;main.c: 1628: rv = readEEPROM(0x74);
 20051  001622  6A17               	clrf	?_readEEPROM+1,c
 20052  001624  0E74               	movlw	116
 20053  001626  6E16               	movwf	?_readEEPROM,c
 20054  001628  EC27  F02A         	call	_readEEPROM	;wreg free
 20055  00162C  D270               	goto	L53
 20056  00162E                     l10663:
 20057                           
 20058                           ;main.c: 1633: rv = readEEPROM(0x75);
 20059  00162E  6A17               	clrf	?_readEEPROM+1,c
 20060  001630  0E75               	movlw	117
 20061  001632  6E16               	movwf	?_readEEPROM,c
 20062  001634  EC27  F02A         	call	_readEEPROM	;wreg free
 20063  001638  D26A               	goto	L53
 20064  00163A                     l10665:
 20065                           
 20066                           ;main.c: 1638: rv = readEEPROM(0x76);
 20067  00163A  6A17               	clrf	?_readEEPROM+1,c
 20068  00163C  0E76               	movlw	118
 20069  00163E  6E16               	movwf	?_readEEPROM,c
 20070  001640  EC27  F02A         	call	_readEEPROM	;wreg free
 20071  001644  D264               	goto	L53
 20072  001646                     l10667:
 20073                           
 20074                           ;main.c: 1643: rv = readEEPROM(0x77);
 20075  001646  6A17               	clrf	?_readEEPROM+1,c
 20076  001648  0E77               	movlw	119
 20077  00164A  6E16               	movwf	?_readEEPROM,c
 20078  00164C  EC27  F02A         	call	_readEEPROM	;wreg free
 20079  001650  D25E               	goto	L53
 20080  001652                     l10669:
 20081                           
 20082                           ;main.c: 1648: rv = readEEPROM(0x78);
 20083  001652  6A17               	clrf	?_readEEPROM+1,c
 20084  001654  0E78               	movlw	120
 20085  001656  6E16               	movwf	?_readEEPROM,c
 20086  001658  EC27  F02A         	call	_readEEPROM	;wreg free
 20087  00165C  D258               	goto	L53
 20088  00165E                     l10671:
 20089                           
 20090                           ;main.c: 1653: rv = readEEPROM(0x79);
 20091  00165E  6A17               	clrf	?_readEEPROM+1,c
 20092  001660  0E79               	movlw	121
 20093  001662  6E16               	movwf	?_readEEPROM,c
 20094  001664  EC27  F02A         	call	_readEEPROM	;wreg free
 20095  001668  D252               	goto	L53
 20096  00166A                     l10673:
 20097                           
 20098                           ;main.c: 1658: rv = readEEPROM(0x7A);
 20099  00166A  6A17               	clrf	?_readEEPROM+1,c
 20100  00166C  0E7A               	movlw	122
 20101  00166E  6E16               	movwf	?_readEEPROM,c
 20102  001670  EC27  F02A         	call	_readEEPROM	;wreg free
 20103  001674  D24C               	goto	L53
 20104  001676                     l10675:
 20105                           
 20106                           ;main.c: 1663: rv = readEEPROM(0x7B);
 20107  001676  6A17               	clrf	?_readEEPROM+1,c
 20108  001678  0E7B               	movlw	123
 20109  00167A  6E16               	movwf	?_readEEPROM,c
 20110  00167C  EC27  F02A         	call	_readEEPROM	;wreg free
 20111  001680  D246               	goto	L53
 20112  001682                     l10677:
 20113                           
 20114                           ;main.c: 1668: rv = readEEPROM(0x7C);
 20115  001682  6A17               	clrf	?_readEEPROM+1,c
 20116  001684  0E7C               	movlw	124
 20117  001686  6E16               	movwf	?_readEEPROM,c
 20118  001688  EC27  F02A         	call	_readEEPROM	;wreg free
 20119  00168C  D240               	goto	L53
 20120  00168E                     l10679:
 20121                           
 20122                           ;main.c: 1673: rv = readEEPROM(0x7D);
 20123  00168E  6A17               	clrf	?_readEEPROM+1,c
 20124  001690  0E7D               	movlw	125
 20125  001692  6E16               	movwf	?_readEEPROM,c
 20126  001694  EC27  F02A         	call	_readEEPROM	;wreg free
 20127  001698  D23A               	goto	L53
 20128  00169A                     l10681:
 20129                           
 20130                           ;main.c: 1678: rv = readEEPROM(0x7E);
 20131  00169A  6A17               	clrf	?_readEEPROM+1,c
 20132  00169C  0E7E               	movlw	126
 20133  00169E  6E16               	movwf	?_readEEPROM,c
 20134  0016A0  EC27  F02A         	call	_readEEPROM	;wreg free
 20135  0016A4  D234               	goto	L53
 20136  0016A6                     l10683:
 20137                           
 20138                           ;main.c: 1687: rv = readEEPROM(0x7F);
 20139  0016A6  6A17               	clrf	?_readEEPROM+1,c
 20140  0016A8  0E7F               	movlw	127
 20141  0016AA  6E16               	movwf	?_readEEPROM,c
 20142  0016AC  EC27  F02A         	call	_readEEPROM	;wreg free
 20143  0016B0  D22E               	goto	L53
 20144  0016B2                     l10685:
 20145                           
 20146                           ;main.c: 1692: rv = readEEPROM(0x80);
 20147  0016B2  6A17               	clrf	?_readEEPROM+1,c
 20148  0016B4  0E80               	movlw	128
 20149  0016B6  6E16               	movwf	?_readEEPROM,c
 20150  0016B8  EC27  F02A         	call	_readEEPROM	;wreg free
 20151  0016BC  D228               	goto	L53
 20152  0016BE                     l10687:
 20153                           
 20154                           ;main.c: 1697: rv = readEEPROM(0x81);
 20155  0016BE  6A17               	clrf	?_readEEPROM+1,c
 20156  0016C0  0E81               	movlw	129
 20157  0016C2  6E16               	movwf	?_readEEPROM,c
 20158  0016C4  EC27  F02A         	call	_readEEPROM	;wreg free
 20159  0016C8  D222               	goto	L53
 20160  0016CA                     l10689:
 20161                           
 20162                           ;main.c: 1702: rv = readEEPROM(0x82);
 20163  0016CA  6A17               	clrf	?_readEEPROM+1,c
 20164  0016CC  0E82               	movlw	130
 20165  0016CE  6E16               	movwf	?_readEEPROM,c
 20166  0016D0  EC27  F02A         	call	_readEEPROM	;wreg free
 20167  0016D4  D21C               	goto	L53
 20168  0016D6                     l10691:
 20169                           
 20170                           ;main.c: 1707: rv = readEEPROM(0x83);
 20171  0016D6  6A17               	clrf	?_readEEPROM+1,c
 20172  0016D8  0E83               	movlw	131
 20173  0016DA  6E16               	movwf	?_readEEPROM,c
 20174  0016DC  EC27  F02A         	call	_readEEPROM	;wreg free
 20175  0016E0  D216               	goto	L53
 20176  0016E2                     l10693:
 20177                           
 20178                           ;main.c: 1712: rv = readEEPROM(0x84);
 20179  0016E2  6A17               	clrf	?_readEEPROM+1,c
 20180  0016E4  0E84               	movlw	132
 20181  0016E6  6E16               	movwf	?_readEEPROM,c
 20182  0016E8  EC27  F02A         	call	_readEEPROM	;wreg free
 20183  0016EC  D210               	goto	L53
 20184  0016EE                     l10695:
 20185                           
 20186                           ;main.c: 1717: rv = readEEPROM(0x85);
 20187  0016EE  6A17               	clrf	?_readEEPROM+1,c
 20188  0016F0  0E85               	movlw	133
 20189  0016F2  6E16               	movwf	?_readEEPROM,c
 20190  0016F4  EC27  F02A         	call	_readEEPROM	;wreg free
 20191  0016F8  D20A               	goto	L53
 20192  0016FA                     l10697:
 20193                           
 20194                           ;main.c: 1722: rv = readEEPROM(0x86);
 20195  0016FA  6A17               	clrf	?_readEEPROM+1,c
 20196  0016FC  0E86               	movlw	134
 20197  0016FE  6E16               	movwf	?_readEEPROM,c
 20198  001700  EC27  F02A         	call	_readEEPROM	;wreg free
 20199  001704  D204               	goto	L53
 20200  001706                     l10699:
 20201                           
 20202                           ;main.c: 1727: rv = readEEPROM(0x87);
 20203  001706  6A17               	clrf	?_readEEPROM+1,c
 20204  001708  0E87               	movlw	135
 20205  00170A  6E16               	movwf	?_readEEPROM,c
 20206  00170C  EC27  F02A         	call	_readEEPROM	;wreg free
 20207  001710  D1FE               	goto	L53
 20208  001712                     l10701:
 20209                           
 20210                           ;main.c: 1732: rv = readEEPROM(0x88);
 20211  001712  6A17               	clrf	?_readEEPROM+1,c
 20212  001714  0E88               	movlw	136
 20213  001716  6E16               	movwf	?_readEEPROM,c
 20214  001718  EC27  F02A         	call	_readEEPROM	;wreg free
 20215  00171C  D1F8               	goto	L53
 20216  00171E                     l10703:
 20217                           
 20218                           ;main.c: 1737: rv = readEEPROM(0x89);
 20219  00171E  6A17               	clrf	?_readEEPROM+1,c
 20220  001720  0E89               	movlw	137
 20221  001722  6E16               	movwf	?_readEEPROM,c
 20222  001724  EC27  F02A         	call	_readEEPROM	;wreg free
 20223  001728  D1F2               	goto	L53
 20224  00172A                     l10705:
 20225                           
 20226                           ;main.c: 1742: rv = readEEPROM(0x8A);
 20227  00172A  6A17               	clrf	?_readEEPROM+1,c
 20228  00172C  0E8A               	movlw	138
 20229  00172E  6E16               	movwf	?_readEEPROM,c
 20230  001730  EC27  F02A         	call	_readEEPROM	;wreg free
 20231  001734  D1EC               	goto	L53
 20232  001736                     l10707:
 20233                           
 20234                           ;main.c: 1751: rv = readEEPROM(0x8B);
 20235  001736  6A17               	clrf	?_readEEPROM+1,c
 20236  001738  0E8B               	movlw	139
 20237  00173A  6E16               	movwf	?_readEEPROM,c
 20238  00173C  EC27  F02A         	call	_readEEPROM	;wreg free
 20239  001740  D1E6               	goto	L53
 20240  001742                     l10709:
 20241                           
 20242                           ;main.c: 1756: rv = readEEPROM(0x8C);
 20243  001742  6A17               	clrf	?_readEEPROM+1,c
 20244  001744  0E8C               	movlw	140
 20245  001746  6E16               	movwf	?_readEEPROM,c
 20246  001748  EC27  F02A         	call	_readEEPROM	;wreg free
 20247  00174C  D1E0               	goto	L53
 20248  00174E                     l10711:
 20249                           
 20250                           ;main.c: 1761: rv = readEEPROM(0x8D);
 20251  00174E  6A17               	clrf	?_readEEPROM+1,c
 20252  001750  0E8D               	movlw	141
 20253  001752  6E16               	movwf	?_readEEPROM,c
 20254  001754  EC27  F02A         	call	_readEEPROM	;wreg free
 20255  001758  D1DA               	goto	L53
 20256  00175A                     l10713:
 20257                           
 20258                           ;main.c: 1766: rv = readEEPROM(0x8E);
 20259  00175A  6A17               	clrf	?_readEEPROM+1,c
 20260  00175C  0E8E               	movlw	142
 20261  00175E  6E16               	movwf	?_readEEPROM,c
 20262  001760  EC27  F02A         	call	_readEEPROM	;wreg free
 20263  001764  D1D4               	goto	L53
 20264  001766                     l10715:
 20265                           
 20266                           ;main.c: 1771: rv = readEEPROM(0x8F);
 20267  001766  6A17               	clrf	?_readEEPROM+1,c
 20268  001768  0E8F               	movlw	143
 20269  00176A  6E16               	movwf	?_readEEPROM,c
 20270  00176C  EC27  F02A         	call	_readEEPROM	;wreg free
 20271  001770  D1CE               	goto	L53
 20272  001772                     l10717:
 20273                           
 20274                           ;main.c: 1776: rv = readEEPROM(0x90);
 20275  001772  6A17               	clrf	?_readEEPROM+1,c
 20276  001774  0E90               	movlw	144
 20277  001776  6E16               	movwf	?_readEEPROM,c
 20278  001778  EC27  F02A         	call	_readEEPROM	;wreg free
 20279  00177C  D1C8               	goto	L53
 20280  00177E                     l10719:
 20281                           
 20282                           ;main.c: 1781: rv = readEEPROM(0x91);
 20283  00177E  6A17               	clrf	?_readEEPROM+1,c
 20284  001780  0E91               	movlw	145
 20285  001782  6E16               	movwf	?_readEEPROM,c
 20286  001784  EC27  F02A         	call	_readEEPROM	;wreg free
 20287  001788  D1C2               	goto	L53
 20288  00178A                     l10721:
 20289                           
 20290                           ;main.c: 1786: rv = readEEPROM(0x92);
 20291  00178A  6A17               	clrf	?_readEEPROM+1,c
 20292  00178C  0E92               	movlw	146
 20293  00178E  6E16               	movwf	?_readEEPROM,c
 20294  001790  EC27  F02A         	call	_readEEPROM	;wreg free
 20295  001794  D1BC               	goto	L53
 20296  001796                     l10723:
 20297                           
 20298                           ;main.c: 1791: rv = readEEPROM(0x93);
 20299  001796  6A17               	clrf	?_readEEPROM+1,c
 20300  001798  0E93               	movlw	147
 20301  00179A  6E16               	movwf	?_readEEPROM,c
 20302  00179C  EC27  F02A         	call	_readEEPROM	;wreg free
 20303  0017A0  D1B6               	goto	L53
 20304  0017A2                     l10725:
 20305                           
 20306                           ;main.c: 1796: rv = readEEPROM(0x94);
 20307  0017A2  6A17               	clrf	?_readEEPROM+1,c
 20308  0017A4  0E94               	movlw	148
 20309  0017A6  6E16               	movwf	?_readEEPROM,c
 20310  0017A8  EC27  F02A         	call	_readEEPROM	;wreg free
 20311  0017AC  D1B0               	goto	L53
 20312  0017AE                     l10727:
 20313                           
 20314                           ;main.c: 1801: rv = readEEPROM(0x95);
 20315  0017AE  6A17               	clrf	?_readEEPROM+1,c
 20316  0017B0  0E95               	movlw	149
 20317  0017B2  6E16               	movwf	?_readEEPROM,c
 20318  0017B4  EC27  F02A         	call	_readEEPROM	;wreg free
 20319  0017B8  D1AA               	goto	L53
 20320  0017BA                     l10729:
 20321                           
 20322                           ;main.c: 1806: rv = readEEPROM(0x96);
 20323  0017BA  6A17               	clrf	?_readEEPROM+1,c
 20324  0017BC  0E96               	movlw	150
 20325  0017BE  6E16               	movwf	?_readEEPROM,c
 20326  0017C0  EC27  F02A         	call	_readEEPROM	;wreg free
 20327  0017C4  D1A4               	goto	L53
 20328  0017C6                     l10731:
 20329                           
 20330                           ;main.c: 1816: rv = readEEPROM(0x97);
 20331  0017C6  6A17               	clrf	?_readEEPROM+1,c
 20332  0017C8  0E97               	movlw	151
 20333  0017CA  6E16               	movwf	?_readEEPROM,c
 20334  0017CC  EC27  F02A         	call	_readEEPROM	;wreg free
 20335  0017D0  D19E               	goto	L53
 20336  0017D2                     l10733:
 20337                           
 20338                           ;main.c: 1821: rv = readEEPROM(0x98);
 20339  0017D2  6A17               	clrf	?_readEEPROM+1,c
 20340  0017D4  0E98               	movlw	152
 20341  0017D6  6E16               	movwf	?_readEEPROM,c
 20342  0017D8  EC27  F02A         	call	_readEEPROM	;wreg free
 20343  0017DC  D198               	goto	L53
 20344  0017DE                     l10735:
 20345                           
 20346                           ;main.c: 1826: rv = readEEPROM(0x99);
 20347  0017DE  6A17               	clrf	?_readEEPROM+1,c
 20348  0017E0  0E99               	movlw	153
 20349  0017E2  6E16               	movwf	?_readEEPROM,c
 20350  0017E4  EC27  F02A         	call	_readEEPROM	;wreg free
 20351  0017E8  D192               	goto	L53
 20352  0017EA                     l10737:
 20353                           
 20354                           ;main.c: 1831: rv = readEEPROM(0x9A);
 20355  0017EA  6A17               	clrf	?_readEEPROM+1,c
 20356  0017EC  0E9A               	movlw	154
 20357  0017EE  6E16               	movwf	?_readEEPROM,c
 20358  0017F0  EC27  F02A         	call	_readEEPROM	;wreg free
 20359  0017F4  D18C               	goto	L53
 20360  0017F6                     l10739:
 20361                           
 20362                           ;main.c: 1836: rv = readEEPROM(0x9B);
 20363  0017F6  6A17               	clrf	?_readEEPROM+1,c
 20364  0017F8  0E9B               	movlw	155
 20365  0017FA  6E16               	movwf	?_readEEPROM,c
 20366  0017FC  EC27  F02A         	call	_readEEPROM	;wreg free
 20367  001800  D186               	goto	L53
 20368  001802                     l10741:
 20369                           
 20370                           ;main.c: 1841: rv = readEEPROM(0x9C);
 20371  001802  6A17               	clrf	?_readEEPROM+1,c
 20372  001804  0E9C               	movlw	156
 20373  001806  6E16               	movwf	?_readEEPROM,c
 20374  001808  EC27  F02A         	call	_readEEPROM	;wreg free
 20375  00180C  D180               	goto	L53
 20376  00180E                     l409:
 20377                           
 20378                           ;main.c: 1846: rv = 0;
 20379  00180E  6A1C               	clrf	vscp_readAppReg@rv,c
 20380                           
 20381                           ;main.c: 1847: break;
 20382  001810  D17F               	goto	l10773
 20383  001812                     l10743:
 20384                           
 20385                           ;main.c: 1856: rv = readEEPROM(0xF2);
 20386  001812  6A17               	clrf	?_readEEPROM+1,c
 20387  001814  0EF2               	movlw	242
 20388  001816  6E16               	movwf	?_readEEPROM,c
 20389  001818  EC27  F02A         	call	_readEEPROM	;wreg free
 20390  00181C  D178               	goto	L53
 20391  00181E                     l10745:
 20392                           
 20393                           ;main.c: 1861: rv = readEEPROM(0xF3);
 20394  00181E  6A17               	clrf	?_readEEPROM+1,c
 20395  001820  0EF3               	movlw	243
 20396  001822  6E16               	movwf	?_readEEPROM,c
 20397  001824  EC27  F02A         	call	_readEEPROM	;wreg free
 20398  001828  D172               	goto	L53
 20399  00182A                     l10749:
 20400  00182A  501B               	movf	vscp_readAppReg@reg,w,c
 20401                           
 20402                           ; Switch size 1, requested type "space"
 20403                           ; Number of cases is 108, Range of values is 0 to 119
 20404                           ; switch strategies available:
 20405                           ; Name         Instructions Cycles
 20406                           ; simple_byte          325   163 (average)
 20407                           ;	Chosen strategy is simple_byte
 20408  00182C  E101 D5A3          	bz	l10547
 20409  001830  0A01               	xorlw	1	; case 1
 20410  001832  E101 D5A6          	bz	l10549
 20411  001836  0A03               	xorlw	3	; case 2
 20412  001838  E101 D5A9          	bz	l10551
 20413  00183C  0A01               	xorlw	1	; case 3
 20414  00183E  E101 D5AC          	bz	l10553
 20415  001842  0A07               	xorlw	7	; case 4
 20416  001844  E101 D5AF          	bz	l10555
 20417  001848  0A01               	xorlw	1	; case 5
 20418  00184A  E101 D5B2          	bz	l10557
 20419  00184E  0A03               	xorlw	3	; case 6
 20420  001850  E101 D5B5          	bz	l10559
 20421  001854  0A01               	xorlw	1	; case 7
 20422  001856  E101 D5B8          	bz	l10561
 20423  00185A  0A0F               	xorlw	15	; case 8
 20424  00185C  E101 D5BB          	bz	l10563
 20425  001860  0A01               	xorlw	1	; case 9
 20426  001862  E101 D5BB          	bz	l314
 20427  001866  0A03               	xorlw	3	; case 10
 20428  001868  E101 D5BB          	bz	l10565
 20429  00186C  0A01               	xorlw	1	; case 11
 20430  00186E  E101 D5BB          	bz	l316
 20431  001872  0A07               	xorlw	7	; case 12
 20432  001874  E101 D5BB          	bz	l10567
 20433  001878  0A01               	xorlw	1	; case 13
 20434  00187A  E101 D5BB          	bz	l318
 20435  00187E  0A03               	xorlw	3	; case 14
 20436  001880  E101 D5BB          	bz	l10569
 20437  001884  0A01               	xorlw	1	; case 15
 20438  001886  E101 D5BB          	bz	l320
 20439  00188A  0A1F               	xorlw	31	; case 16
 20440  00188C  E101 D5BB          	bz	l10571
 20441  001890  0A01               	xorlw	1	; case 17
 20442  001892  E101 D5BB          	bz	l322
 20443  001896  0A03               	xorlw	3	; case 18
 20444  001898  E101 D5BB          	bz	l10573
 20445  00189C  0A01               	xorlw	1	; case 19
 20446  00189E  E101 D5BB          	bz	l324
 20447  0018A2  0A07               	xorlw	7	; case 20
 20448  0018A4  E101 D5BB          	bz	l10575
 20449  0018A8  0A01               	xorlw	1	; case 21
 20450  0018AA  E101 D5BE          	bz	l10577
 20451  0018AE  0A03               	xorlw	3	; case 22
 20452  0018B0  E101 D5C1          	bz	l10579
 20453  0018B4  0A01               	xorlw	1	; case 23
 20454  0018B6  E101 D5C4          	bz	l10581
 20455  0018BA  0A0F               	xorlw	15	; case 24
 20456  0018BC  E101 D5C7          	bz	l10583
 20457  0018C0  0A01               	xorlw	1	; case 25
 20458  0018C2  E101 D5CA          	bz	l10585
 20459  0018C6  0A3F               	xorlw	63	; case 38
 20460  0018C8  E101 D5CD          	bz	l10587
 20461  0018CC  0A01               	xorlw	1	; case 39
 20462  0018CE  E101 D5D0          	bz	l10589
 20463  0018D2  0A0F               	xorlw	15	; case 40
 20464  0018D4  E101 D5D3          	bz	l10591
 20465  0018D8  0A01               	xorlw	1	; case 41
 20466  0018DA  E101 D5D6          	bz	l10593
 20467  0018DE  0A03               	xorlw	3	; case 42
 20468  0018E0  E101 D5D9          	bz	l10595
 20469  0018E4  0A01               	xorlw	1	; case 43
 20470  0018E6  E101 D5DC          	bz	l10597
 20471  0018EA  0A07               	xorlw	7	; case 44
 20472  0018EC  E101 D5DF          	bz	l10599
 20473  0018F0  0A01               	xorlw	1	; case 45
 20474  0018F2  E101 D5E2          	bz	l10601
 20475  0018F6  0A03               	xorlw	3	; case 46
 20476  0018F8  E101 D5E5          	bz	l10603
 20477  0018FC  0A01               	xorlw	1	; case 47
 20478  0018FE  E101 D5E8          	bz	l10605
 20479  001902  0A1F               	xorlw	31	; case 48
 20480  001904  E101 D5EB          	bz	l10607
 20481  001908  0A01               	xorlw	1	; case 49
 20482  00190A  E101 D5EE          	bz	l10609
 20483  00190E  0A03               	xorlw	3	; case 50
 20484  001910  E101 D5F1          	bz	l10611
 20485  001914  0A01               	xorlw	1	; case 51
 20486  001916  E101 D5F4          	bz	l10613
 20487  00191A  0A07               	xorlw	7	; case 52
 20488  00191C  E101 D5F7          	bz	l10615
 20489  001920  0A01               	xorlw	1	; case 53
 20490  001922  E101 D5FA          	bz	l10617
 20491  001926  0A03               	xorlw	3	; case 54
 20492  001928  E101 D5FD          	bz	l10619
 20493  00192C  0A01               	xorlw	1	; case 55
 20494  00192E  E101 D600          	bz	l10621
 20495  001932  0A0F               	xorlw	15	; case 56
 20496  001934  E101 D603          	bz	l10623
 20497  001938  0A01               	xorlw	1	; case 57
 20498  00193A  E101 D606          	bz	l10625
 20499  00193E  0A03               	xorlw	3	; case 58
 20500  001940  E101 D609          	bz	l10627
 20501  001944  0A01               	xorlw	1	; case 59
 20502  001946  E101 D60C          	bz	l10629
 20503  00194A  0A07               	xorlw	7	; case 60
 20504  00194C  E101 D60F          	bz	l10631
 20505  001950  0A01               	xorlw	1	; case 61
 20506  001952  E101 D612          	bz	l10633
 20507  001956  0A03               	xorlw	3	; case 62
 20508  001958  E101 D615          	bz	l10635
 20509  00195C  0A01               	xorlw	1	; case 63
 20510  00195E  E101 D618          	bz	l10637
 20511  001962  0A7F               	xorlw	127	; case 64
 20512  001964  E101 D61B          	bz	l10639
 20513  001968  0A01               	xorlw	1	; case 65
 20514  00196A  E101 D61E          	bz	l10641
 20515  00196E  0A03               	xorlw	3	; case 66
 20516  001970  E101 D621          	bz	l10643
 20517  001974  0A01               	xorlw	1	; case 67
 20518  001976  E101 D624          	bz	l10645
 20519  00197A  0A07               	xorlw	7	; case 68
 20520  00197C  E101 D627          	bz	l10647
 20521  001980  0A01               	xorlw	1	; case 69
 20522  001982  E101 D62A          	bz	l10649
 20523  001986  0A03               	xorlw	3	; case 70
 20524  001988  E101 D62D          	bz	l10651
 20525  00198C  0A01               	xorlw	1	; case 71
 20526  00198E  E101 D630          	bz	l10653
 20527  001992  0A0F               	xorlw	15	; case 72
 20528  001994  E101 D633          	bz	l10655
 20529  001998  0A01               	xorlw	1	; case 73
 20530  00199A  E101 D636          	bz	l10657
 20531  00199E  0A03               	xorlw	3	; case 74
 20532  0019A0  E101 D639          	bz	l10659
 20533  0019A4  0A01               	xorlw	1	; case 75
 20534  0019A6  E101 D63C          	bz	l10661
 20535  0019AA  0A07               	xorlw	7	; case 76
 20536  0019AC  E101 D63F          	bz	l10663
 20537  0019B0  0A01               	xorlw	1	; case 77
 20538  0019B2  E101 D642          	bz	l10665
 20539  0019B6  0A03               	xorlw	3	; case 78
 20540  0019B8  E101 D645          	bz	l10667
 20541  0019BC  0A01               	xorlw	1	; case 79
 20542  0019BE  E101 D648          	bz	l10669
 20543  0019C2  0A1F               	xorlw	31	; case 80
 20544  0019C4  E101 D64B          	bz	l10671
 20545  0019C8  0A01               	xorlw	1	; case 81
 20546  0019CA  E101 D64E          	bz	l10673
 20547  0019CE  0A03               	xorlw	3	; case 82
 20548  0019D0  E101 D651          	bz	l10675
 20549  0019D4  0A01               	xorlw	1	; case 83
 20550  0019D6  E101 D654          	bz	l10677
 20551  0019DA  0A07               	xorlw	7	; case 84
 20552  0019DC  E101 D657          	bz	l10679
 20553  0019E0  0A01               	xorlw	1	; case 85
 20554  0019E2  E101 D65A          	bz	l10681
 20555  0019E6  0A03               	xorlw	3	; case 86
 20556  0019E8  E101 D65D          	bz	l10683
 20557  0019EC  0A01               	xorlw	1	; case 87
 20558  0019EE  E101 D660          	bz	l10685
 20559  0019F2  0A0F               	xorlw	15	; case 88
 20560  0019F4  E101 D663          	bz	l10687
 20561  0019F8  0A01               	xorlw	1	; case 89
 20562  0019FA  E101 D666          	bz	l10689
 20563  0019FE  0A03               	xorlw	3	; case 90
 20564  001A00  E101 D669          	bz	l10691
 20565  001A04  0A01               	xorlw	1	; case 91
 20566  001A06  E101 D66C          	bz	l10693
 20567  001A0A  0A07               	xorlw	7	; case 92
 20568  001A0C  E101 D66F          	bz	l10695
 20569  001A10  0A01               	xorlw	1	; case 93
 20570  001A12  E101 D672          	bz	l10697
 20571  001A16  0A03               	xorlw	3	; case 94
 20572  001A18  E101 D675          	bz	l10699
 20573  001A1C  0A01               	xorlw	1	; case 95
 20574  001A1E  E101 D678          	bz	l10701
 20575  001A22  0A3F               	xorlw	63	; case 96
 20576  001A24  E101 D67B          	bz	l10703
 20577  001A28  0A01               	xorlw	1	; case 97
 20578  001A2A  E101 D67E          	bz	l10705
 20579  001A2E  0A03               	xorlw	3	; case 98
 20580  001A30  E101 D681          	bz	l10707
 20581  001A34  0A01               	xorlw	1	; case 99
 20582  001A36  E101 D684          	bz	l10709
 20583  001A3A  0A07               	xorlw	7	; case 100
 20584  001A3C  E101 D687          	bz	l10711
 20585  001A40  0A01               	xorlw	1	; case 101
 20586  001A42  E101 D68A          	bz	l10713
 20587  001A46  0A03               	xorlw	3	; case 102
 20588  001A48  E101 D68D          	bz	l10715
 20589  001A4C  0A01               	xorlw	1	; case 103
 20590  001A4E  E101 D690          	bz	l10717
 20591  001A52  0A0F               	xorlw	15	; case 104
 20592  001A54  E101 D693          	bz	l10719
 20593  001A58  0A01               	xorlw	1	; case 105
 20594  001A5A  E101 D696          	bz	l10721
 20595  001A5E  0A03               	xorlw	3	; case 106
 20596  001A60  E101 D699          	bz	l10723
 20597  001A64  0A01               	xorlw	1	; case 107
 20598  001A66  E101 D69C          	bz	l10725
 20599  001A6A  0A07               	xorlw	7	; case 108
 20600  001A6C  E101 D69F          	bz	l10727
 20601  001A70  0A01               	xorlw	1	; case 109
 20602  001A72  E101 D6A2          	bz	l10729
 20603  001A76  0A03               	xorlw	3	; case 110
 20604  001A78  E101 D6A5          	bz	l10731
 20605  001A7C  0A01               	xorlw	1	; case 111
 20606  001A7E  E101 D6A8          	bz	l10733
 20607  001A82  0A1F               	xorlw	31	; case 112
 20608  001A84  E101 D6AB          	bz	l10735
 20609  001A88  0A01               	xorlw	1	; case 113
 20610  001A8A  E101 D6AE          	bz	l10737
 20611  001A8E  0A03               	xorlw	3	; case 114
 20612  001A90  E101 D6B1          	bz	l10739
 20613  001A94  0A01               	xorlw	1	; case 115
 20614  001A96  E101 D6B4          	bz	l10741
 20615  001A9A  0A07               	xorlw	7	; case 116
 20616  001A9C  E101 D6B7          	bz	l409
 20617  001AA0  0A01               	xorlw	1	; case 117
 20618  001AA2  E101 D6B4          	bz	l409
 20619  001AA6  0A03               	xorlw	3	; case 118
 20620  001AA8  E101 D6B3          	bz	l10743
 20621  001AAC  0A01               	xorlw	1	; case 119
 20622  001AAE  E101 D6B6          	bz	l10745
 20623  001AB2  D6AD               	goto	l409
 20624  001AB4                     l10751:
 20625                           
 20626                           ;main.c: 1869: else if (1 == vscp_page_select) {
 20627  001AB4  0446               	decf	_vscp_page_select,w,c
 20628  001AB6  1047               	iorwf	_vscp_page_select+1,w,c
 20629  001AB8  E12B               	bnz	l10773
 20630                           
 20631                           ;main.c: 1872: if (reg < 72) {
 20632  001ABA  0E48               	movlw	72
 20633  001ABC  601B               	cpfslt	vscp_readAppReg@reg,c
 20634  001ABE  D009               	goto	l10757
 20635                           
 20636                           ;main.c: 1873: rv = readEEPROM(0xAA + reg ) ;
 20637  001AC0  0EAA               	movlw	170
 20638  001AC2  241B               	addwf	vscp_readAppReg@reg,w,c
 20639  001AC4  6E16               	movwf	?_readEEPROM,c
 20640  001AC6  6A17               	clrf	?_readEEPROM+1,c
 20641  001AC8  0E00               	movlw	0
 20642  001ACA  2217               	addwfc	?_readEEPROM+1,f,c
 20643  001ACC  EC27  F02A         	call	_readEEPROM	;wreg free
 20644  001AD0  D01E               	goto	L53
 20645  001AD2                     l10757:
 20646                           
 20647                           ;main.c: 1876: else if (reg < 84) {
 20648  001AD2  0E54               	movlw	84
 20649  001AD4  601B               	cpfslt	vscp_readAppReg@reg,c
 20650  001AD6  D010               	goto	l10769
 20651                           
 20652                           ;main.c: 1878: uint8_t pos = reg - 72;
 20653  001AD8  501B               	movf	vscp_readAppReg@reg,w,c
 20654  001ADA  0FB8               	addlw	184
 20655  001ADC  6E1A               	movwf	vscp_readAppReg@pos,c
 20656                           
 20657                           ;main.c: 1879: if ( pos % 2 ) {
 20658  001ADE  A01A               	btfss	vscp_readAppReg@pos,0,c
 20659  001AE0  D002               	goto	l10765
 20660                           
 20661                           ;main.c: 1880: pos--;
 20662  001AE2  061A               	decf	vscp_readAppReg@pos,f,c
 20663                           
 20664                           ;main.c: 1881: }
 20665  001AE4  D001               	goto	l10767
 20666  001AE6                     l10765:
 20667                           
 20668                           ;main.c: 1882: else {
 20669                           ;main.c: 1883: pos++;
 20670  001AE6  2A1A               	incf	vscp_readAppReg@pos,f,c
 20671  001AE8                     l10767:
 20672                           
 20673                           ;main.c: 1884: }
 20674                           ;main.c: 1885: rv = adc[ pos ];
 20675  001AE8  0EAB               	movlw	low _adc
 20676  001AEA  241A               	addwf	vscp_readAppReg@pos,w,c
 20677  001AEC  6ED9               	movwf	fsr2l,c
 20678  001AEE  6ADA               	clrf	fsr2h,c
 20679  001AF0  0E01               	movlw	high _adc
 20680  001AF2  22DA               	addwfc	fsr2h,f,c
 20681  001AF4  50DF               	movf	indf2,w,c
 20682  001AF6  D00B               	goto	L53
 20683  001AF8                     l10769:
 20684                           
 20685                           ;main.c: 1888: else if (reg < 98) {
 20686  001AF8  0E62               	movlw	98
 20687  001AFA  601B               	cpfslt	vscp_readAppReg@reg,c
 20688  001AFC  D009               	goto	l10773
 20689                           
 20690                           ;main.c: 1889: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20691  001AFE  0E4A               	movlw	74
 20692  001B00  241B               	addwf	vscp_readAppReg@reg,w,c
 20693  001B02  6E16               	movwf	?_readEEPROM,c
 20694  001B04  6A17               	clrf	?_readEEPROM+1,c
 20695  001B06  0E00               	movlw	0
 20696  001B08  2217               	addwfc	?_readEEPROM+1,f,c
 20697  001B0A  EC27  F02A         	call	_readEEPROM	;wreg free
 20698  001B0E                     L53:
 20699  001B0E  6E1C               	movwf	vscp_readAppReg@rv,c
 20700  001B10                     l10773:
 20701                           
 20702                           ;main.c: 1890: }
 20703                           ;main.c: 1891: }
 20704                           ;main.c: 1893: return rv;
 20705  001B10  501C               	movf	vscp_readAppReg@rv,w,c
 20706  001B12  0012               	return	
 20707  001B14                     __end_of_vscp_readAppReg:
 20708                           	opt stack 0
 20709                           tblptru	equ	0xFF8
 20710                           tblptrh	equ	0xFF7
 20711                           tblptrl	equ	0xFF6
 20712                           tablat	equ	0xFF5
 20713                           prodh	equ	0xFF4
 20714                           prodl	equ	0xFF3
 20715                           intcon	equ	0xFF2
 20716                           postinc0	equ	0xFEE
 20717                           wreg	equ	0xFE8
 20718                           indf1	equ	0xFE7
 20719                           postdec1	equ	0xFE5
 20720                           fsr1h	equ	0xFE2
 20721                           fsr1l	equ	0xFE1
 20722                           indf2	equ	0xFDF
 20723                           postinc2	equ	0xFDE
 20724                           postdec2	equ	0xFDD
 20725                           plusw2	equ	0xFDB
 20726                           fsr2h	equ	0xFDA
 20727                           fsr2l	equ	0xFD9
 20728                           status	equ	0xFD8
 20729                           
 20730 ;; *************** function _interrupt_at_low_vector *****************
 20731 ;; Defined at:
 20732 ;;		line 134 in file "../main.c"
 20733 ;; Parameters:    Size  Location     Type
 20734 ;;		None
 20735 ;; Auto vars:     Size  Location     Type
 20736 ;;		None
 20737 ;; Return value:  Size  Location     Type
 20738 ;;		None               void
 20739 ;; Registers used:
 20740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20741 ;; Tracked objects:
 20742 ;;		On entry : 0/0
 20743 ;;		On exit  : 0/0
 20744 ;;		Unchanged: 0/0
 20745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20746 ;;      Params:         0       0       0       0       0       0       0
 20747 ;;      Locals:         0       0       0       0       0       0       0
 20748 ;;      Temps:          9       0       0       0       0       0       0
 20749 ;;      Totals:         9       0       0       0       0       0       0
 20750 ;;Total ram usage:        9 bytes
 20751 ;; Hardware stack levels used:    1
 20752 ;; Hardware stack levels required when called:    1
 20753 ;; This function calls:
 20754 ;;		i1_ConvertADC
 20755 ;;		i1_WriteTimer0
 20756 ;; This function is called by:
 20757 ;;		Interrupt level 1
 20758 ;; This function uses a non-reentrant model
 20759 ;;
 20760                           
 20761                           	psect	intcodelo
 20762  000018                     __pintcodelo:
 20763                           	opt stack 0
 20764  000018                     _interrupt_at_low_vector:
 20765                           	opt stack 21
 20766                           
 20767                           ;incstack = 0
 20768  000018  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 20769  00001C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 20770  000020  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 20771  000024  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 20772  000028  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 20773  00002C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 20774  000030  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 20775  000034                     
 20776                           ;main.c: 136: if (INTCONbits.TMR0IF) {
 20777  000034  A4F2               	btfss	intcon,2,c	;volatile
 20778  000036  D001               	goto	i1u714_21
 20779  000038  D001               	goto	i1u714_20
 20780  00003A                     i1u714_21:
 20781  00003A  D047               	goto	i1l9239
 20782  00003C                     i1u714_20:
 20783  00003C                     
 20784                           ;main.c: 139: WriteTimer0(0xfb1d);
 20785  00003C  0EFB               	movlw	251
 20786  00003E  6E02               	movwf	?i1_WriteTimer0+1,c
 20787  000040  0E1D               	movlw	29
 20788  000042  6E01               	movwf	?i1_WriteTimer0,c
 20789  000044  EC55  F02A         	call	i1_WriteTimer0	;wreg free
 20790  000048                     
 20791                           ;main.c: 141: vscp_timer++;
 20792  000048  0101               	movlb	1	; () banked
 20793  00004A  4B1E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 20794  00004C  2B1F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 20795  00004E                     
 20796                           ; BSR set to: 1
 20797                           ;main.c: 142: vscp_configtimer++;
 20798  00004E  4B1C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 20799  000050  2B1D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 20800  000052                     
 20801                           ; BSR set to: 1
 20802                           ;main.c: 143: measurement_clock++;
 20803  000052  0E01               	movlw	1
 20804  000054  2712               	addwf	_measurement_clock& (0+255),f,b	;volatile
 20805  000056  0E00               	movlw	0
 20806  000058  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 20807  00005A  0E00               	movlw	0
 20808  00005C  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 20809  00005E  0E00               	movlw	0
 20810  000060  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 20811  000062                     
 20812                           ; BSR set to: 1
 20813                           ;main.c: 144: timeout_clock++;
 20814  000062  0E01               	movlw	1
 20815  000064  2716               	addwf	_timeout_clock& (0+255),f,b	;volatile
 20816  000066  0E00               	movlw	0
 20817  000068  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 20818  00006A  0E00               	movlw	0
 20819  00006C  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 20820  00006E  0E00               	movlw	0
 20821  000070  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 20822  000072                     
 20823                           ; BSR set to: 1
 20824                           ;main.c: 145: sendTimer++;
 20825  000072  4B1A               	infsnz	_sendTimer& (0+255),f,b	;volatile
 20826  000074  2B1B               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 20827  000076                     
 20828                           ; BSR set to: 1
 20829                           ;main.c: 148: if (!(PORTC & 0x01)) {
 20830  000076  B082               	btfsc	3970,0,c	;volatile
 20831  000078  D001               	goto	i1u715_21
 20832  00007A  D001               	goto	i1u715_20
 20833  00007C                     i1u715_21:
 20834  00007C  D003               	goto	i1l140
 20835  00007E                     i1u715_20:
 20836  00007E                     
 20837                           ; BSR set to: 1
 20838                           ;main.c: 150: vscp_initbtncnt++;
 20839  00007E  0100               	movlb	0	; () banked
 20840  000080  2BC9               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 20841                           
 20842                           ;main.c: 151: }
 20843  000082  D002               	goto	i1l9213
 20844  000084                     i1l140:
 20845                           
 20846                           ; BSR set to: 1
 20847                           ;main.c: 152: else {
 20848                           ;main.c: 153: vscp_initbtncnt = 0;
 20849  000084  0100               	movlb	0	; () banked
 20850  000086  6BC9               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 20851  000088                     i1l9213:
 20852                           
 20853                           ; BSR set to: 0
 20854                           ;main.c: 154: }
 20855                           ;main.c: 157: vscp_statuscnt++;
 20856  000088  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 20857  00008A                     
 20858                           ; BSR set to: 0
 20859                           ;main.c: 158: if ( ( 0x02 ==
 20860                           ;main.c: 159: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 20861  00008A  504C               	movf	_vscp_initledfunc,w,c
 20862  00008C  0A02               	xorlw	2
 20863  00008E  A4D8               	btfss	status,2,c
 20864  000090  D001               	goto	i1u716_21
 20865  000092  D001               	goto	i1u716_20
 20866  000094                     i1u716_21:
 20867  000094  D00E               	goto	i1l9227
 20868  000096                     i1u716_20:
 20869  000096                     
 20870                           ; BSR set to: 0
 20871  000096  0E64               	movlw	100
 20872  000098  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 20873  00009A  D001               	goto	i1u717_21
 20874  00009C  D001               	goto	i1u717_20
 20875  00009E                     i1u717_21:
 20876  00009E  D009               	goto	i1l9227
 20877  0000A0                     i1u717_20:
 20878  0000A0                     
 20879                           ; BSR set to: 0
 20880                           ;main.c: 160: if ( PORTC & 0x02 ) {
 20881  0000A0  A282               	btfss	3970,1,c	;volatile
 20882  0000A2  D001               	goto	i1u718_21
 20883  0000A4  D001               	goto	i1u718_20
 20884  0000A6                     i1u718_21:
 20885  0000A6  D002               	goto	i1l9223
 20886  0000A8                     i1u718_20:
 20887  0000A8                     i1l9221:
 20888                           
 20889                           ; BSR set to: 0
 20890                           ;main.c: 161: PORTC &= ~0x02;
 20891  0000A8  9282               	bcf	3970,1,c	;volatile
 20892                           
 20893                           ;main.c: 162: }
 20894  0000AA  D001               	goto	i1l9225
 20895  0000AC                     i1l9223:
 20896                           
 20897                           ; BSR set to: 0
 20898                           ;main.c: 163: else {
 20899                           ;main.c: 164: PORTC |= 0x02;
 20900  0000AC  8282               	bsf	3970,1,c	;volatile
 20901  0000AE                     i1l9225:
 20902                           
 20903                           ; BSR set to: 0
 20904                           ;main.c: 165: }
 20905                           ;main.c: 166: vscp_statuscnt = 0;
 20906  0000AE  6A52               	clrf	_vscp_statuscnt,c	;volatile
 20907                           
 20908                           ;main.c: 167: }
 20909  0000B0  D00B               	goto	i1l9237
 20910  0000B2                     i1l9227:
 20911                           
 20912                           ; BSR set to: 0
 20913                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 20914  0000B2  044C               	decf	_vscp_initledfunc,w,c
 20915  0000B4  A4D8               	btfss	status,2,c
 20916  0000B6  D001               	goto	i1u719_21
 20917  0000B8  D001               	goto	i1u719_20
 20918  0000BA                     i1u719_21:
 20919  0000BA  D001               	goto	i1l146
 20920  0000BC                     i1u719_20:
 20921  0000BC  D7F7               	goto	i1l9223
 20922  0000BE                     i1l146:
 20923                           
 20924                           ; BSR set to: 0
 20925                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 20926  0000BE  664C               	tstfsz	_vscp_initledfunc,c
 20927  0000C0  D001               	goto	i1u720_21
 20928  0000C2  D001               	goto	i1u720_20
 20929  0000C4                     i1u720_21:
 20930  0000C4  D001               	goto	i1l9237
 20931  0000C6                     i1u720_20:
 20932  0000C6  D7F0               	goto	i1l9221
 20933  0000C8                     i1l9237:
 20934                           
 20935                           ; BSR set to: 0
 20936                           ;main.c: 175: }
 20937                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 20938  0000C8  94F2               	bcf	intcon,2,c	;volatile
 20939  0000CA                     i1l9239:
 20940                           
 20941                           ;main.c: 179: }
 20942                           ;main.c: 182: if ( PIR1bits.ADIF ) {
 20943  0000CA  AC9E               	btfss	3998,6,c	;volatile
 20944  0000CC  D001               	goto	i1u721_21
 20945  0000CE  D001               	goto	i1u721_20
 20946  0000D0                     i1u721_21:
 20947  0000D0  D0E5               	goto	i1l166
 20948  0000D2                     i1u721_20:
 20949  0000D2  D0C4               	goto	i1l9301
 20950  0000D4                     i1l9243:
 20951                           
 20952                           ;main.c: 188: adc[(12 * adc_series_counter) + 0] = ADRESH;
 20953  0000D4  5049               	movf	_adc_series_counter,w,c
 20954  0000D6  0D0C               	mullw	12
 20955  0000D8  0EAB               	movlw	low _adc
 20956  0000DA  24F3               	addwf	prodl,w,c
 20957  0000DC  6ED9               	movwf	fsr2l,c
 20958  0000DE  0E01               	movlw	high _adc
 20959  0000E0  20F4               	addwfc	prodh,w,c
 20960  0000E2  6EDA               	movwf	fsr2h,c
 20961  0000E4  CFC4 FFDF          	movff	4036,indf2	;volatile
 20962                           
 20963                           ;main.c: 189: adc[(12 * adc_series_counter) + 1] = ADRESL;
 20964  0000E8  5049               	movf	_adc_series_counter,w,c
 20965  0000EA  0D0C               	mullw	12
 20966  0000EC  0EAC               	movlw	low (_adc+1)
 20967  0000EE  24F3               	addwf	prodl,w,c
 20968  0000F0  6ED9               	movwf	fsr2l,c
 20969  0000F2  0E01               	movlw	high (_adc+1)
 20970  0000F4  20F4               	addwfc	prodh,w,c
 20971  0000F6  6EDA               	movwf	fsr2h,c
 20972  0000F8  CFC3 FFDF          	movff	4035,indf2	;volatile
 20973  0000FC                     
 20974                           ;main.c: 191: ADCON0 = (2<<2) + 1;
 20975  0000FC  0E09               	movlw	9
 20976  0000FE  6EC2               	movwf	4034,c	;volatile
 20977  000100                     
 20978                           ;main.c: 195: if ((80 - 1) == adc_series_counter) {
 20979  000100  5049               	movf	_adc_series_counter,w,c
 20980  000102  0A4F               	xorlw	79
 20981  000104  A4D8               	btfss	status,2,c
 20982  000106  D001               	goto	i1u722_21
 20983  000108  D001               	goto	i1u722_20
 20984  00010A                     i1u722_21:
 20985  00010A  D0C5               	goto	i1l9303
 20986  00010C                     i1u722_20:
 20987  00010C                     
 20988                           ;main.c: 196: adc_conversion_flags |= 1;
 20989  00010C  0100               	movlb	0	; () banked
 20990  00010E  81C4               	bsf	_adc_conversion_flags& (0+255),0,b
 20991  000110  D0C2               	goto	i1l9303
 20992  000112                     i1l9251:
 20993                           
 20994                           ;main.c: 202: adc[(12 * adc_series_counter) + 2] = ADRESH;
 20995  000112  5049               	movf	_adc_series_counter,w,c
 20996  000114  0D0C               	mullw	12
 20997  000116  0EAD               	movlw	low (_adc+2)
 20998  000118  24F3               	addwf	prodl,w,c
 20999  00011A  6ED9               	movwf	fsr2l,c
 21000  00011C  0E01               	movlw	high (_adc+2)
 21001  00011E  20F4               	addwfc	prodh,w,c
 21002  000120  6EDA               	movwf	fsr2h,c
 21003  000122  CFC4 FFDF          	movff	4036,indf2	;volatile
 21004                           
 21005                           ;main.c: 203: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21006  000126  5049               	movf	_adc_series_counter,w,c
 21007  000128  0D0C               	mullw	12
 21008  00012A  0EAE               	movlw	low (_adc+3)
 21009  00012C  24F3               	addwf	prodl,w,c
 21010  00012E  6ED9               	movwf	fsr2l,c
 21011  000130  0E01               	movlw	high (_adc+3)
 21012  000132  20F4               	addwfc	prodh,w,c
 21013  000134  6EDA               	movwf	fsr2h,c
 21014  000136  CFC3 FFDF          	movff	4035,indf2	;volatile
 21015  00013A                     
 21016                           ;main.c: 206: ADCON0 = (1<<2) + 1;
 21017  00013A  0E05               	movlw	5
 21018  00013C  6EC2               	movwf	4034,c	;volatile
 21019  00013E                     
 21020                           ;main.c: 210: if ((80 - 1) == adc_series_counter) {
 21021  00013E  5049               	movf	_adc_series_counter,w,c
 21022  000140  0A4F               	xorlw	79
 21023  000142  A4D8               	btfss	status,2,c
 21024  000144  D001               	goto	i1u723_21
 21025  000146  D001               	goto	i1u723_20
 21026  000148                     i1u723_21:
 21027  000148  D0A6               	goto	i1l9303
 21028  00014A                     i1u723_20:
 21029  00014A                     
 21030                           ;main.c: 211: adc_conversion_flags |= 1 << 1;
 21031  00014A  0100               	movlb	0	; () banked
 21032  00014C  83C4               	bsf	_adc_conversion_flags& (0+255),1,b
 21033  00014E  D0A3               	goto	i1l9303
 21034  000150                     i1l9259:
 21035                           
 21036                           ;main.c: 217: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21037  000150  5049               	movf	_adc_series_counter,w,c
 21038  000152  0D0C               	mullw	12
 21039  000154  0EAF               	movlw	low (_adc+4)
 21040  000156  24F3               	addwf	prodl,w,c
 21041  000158  6ED9               	movwf	fsr2l,c
 21042  00015A  0E01               	movlw	high (_adc+4)
 21043  00015C  20F4               	addwfc	prodh,w,c
 21044  00015E  6EDA               	movwf	fsr2h,c
 21045  000160  CFC4 FFDF          	movff	4036,indf2	;volatile
 21046                           
 21047                           ;main.c: 218: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21048  000164  5049               	movf	_adc_series_counter,w,c
 21049  000166  0D0C               	mullw	12
 21050  000168  0EB0               	movlw	low (_adc+5)
 21051  00016A  24F3               	addwf	prodl,w,c
 21052  00016C  6ED9               	movwf	fsr2l,c
 21053  00016E  0E01               	movlw	high (_adc+5)
 21054  000170  20F4               	addwfc	prodh,w,c
 21055  000172  6EDA               	movwf	fsr2h,c
 21056  000174  CFC3 FFDF          	movff	4035,indf2	;volatile
 21057  000178                     
 21058                           ;main.c: 221: ADCON0 = (0<<2) + 1;
 21059  000178  0E01               	movlw	1
 21060  00017A  6EC2               	movwf	4034,c	;volatile
 21061  00017C                     
 21062                           ;main.c: 225: if ((80 - 1) == adc_series_counter) {
 21063  00017C  5049               	movf	_adc_series_counter,w,c
 21064  00017E  0A4F               	xorlw	79
 21065  000180  A4D8               	btfss	status,2,c
 21066  000182  D001               	goto	i1u724_21
 21067  000184  D001               	goto	i1u724_20
 21068  000186                     i1u724_21:
 21069  000186  D087               	goto	i1l9303
 21070  000188                     i1u724_20:
 21071  000188                     
 21072                           ;main.c: 226: adc_conversion_flags |= 1 << 2;
 21073  000188  0100               	movlb	0	; () banked
 21074  00018A  85C4               	bsf	_adc_conversion_flags& (0+255),2,b
 21075  00018C  D084               	goto	i1l9303
 21076  00018E                     i1l9267:
 21077                           
 21078                           ;main.c: 232: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21079  00018E  5049               	movf	_adc_series_counter,w,c
 21080  000190  0D0C               	mullw	12
 21081  000192  0EB1               	movlw	low (_adc+6)
 21082  000194  24F3               	addwf	prodl,w,c
 21083  000196  6ED9               	movwf	fsr2l,c
 21084  000198  0E01               	movlw	high (_adc+6)
 21085  00019A  20F4               	addwfc	prodh,w,c
 21086  00019C  6EDA               	movwf	fsr2h,c
 21087  00019E  CFC4 FFDF          	movff	4036,indf2	;volatile
 21088                           
 21089                           ;main.c: 233: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21090  0001A2  5049               	movf	_adc_series_counter,w,c
 21091  0001A4  0D0C               	mullw	12
 21092  0001A6  0EB2               	movlw	low (_adc+7)
 21093  0001A8  24F3               	addwf	prodl,w,c
 21094  0001AA  6ED9               	movwf	fsr2l,c
 21095  0001AC  0E01               	movlw	high (_adc+7)
 21096  0001AE  20F4               	addwfc	prodh,w,c
 21097  0001B0  6EDA               	movwf	fsr2h,c
 21098  0001B2  CFC3 FFDF          	movff	4035,indf2	;volatile
 21099  0001B6                     
 21100                           ;main.c: 235: ADCON0 = (9<<2) + 1;
 21101  0001B6  0E25               	movlw	37
 21102  0001B8  6EC2               	movwf	4034,c	;volatile
 21103  0001BA                     
 21104                           ;main.c: 239: if ((80 - 1) == adc_series_counter) {
 21105  0001BA  5049               	movf	_adc_series_counter,w,c
 21106  0001BC  0A4F               	xorlw	79
 21107  0001BE  A4D8               	btfss	status,2,c
 21108  0001C0  D001               	goto	i1u725_21
 21109  0001C2  D001               	goto	i1u725_20
 21110  0001C4                     i1u725_21:
 21111  0001C4  D068               	goto	i1l9303
 21112  0001C6                     i1u725_20:
 21113  0001C6                     
 21114                           ;main.c: 240: adc_conversion_flags |= 1 << 3;
 21115  0001C6  0100               	movlb	0	; () banked
 21116  0001C8  87C4               	bsf	_adc_conversion_flags& (0+255),3,b
 21117  0001CA  D065               	goto	i1l9303
 21118  0001CC                     i1l9275:
 21119                           
 21120                           ;main.c: 246: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21121  0001CC  5049               	movf	_adc_series_counter,w,c
 21122  0001CE  0D0C               	mullw	12
 21123  0001D0  0EB3               	movlw	low (_adc+8)
 21124  0001D2  24F3               	addwf	prodl,w,c
 21125  0001D4  6ED9               	movwf	fsr2l,c
 21126  0001D6  0E01               	movlw	high (_adc+8)
 21127  0001D8  20F4               	addwfc	prodh,w,c
 21128  0001DA  6EDA               	movwf	fsr2h,c
 21129  0001DC  CFC4 FFDF          	movff	4036,indf2	;volatile
 21130                           
 21131                           ;main.c: 247: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21132  0001E0  5049               	movf	_adc_series_counter,w,c
 21133  0001E2  0D0C               	mullw	12
 21134  0001E4  0EB4               	movlw	low (_adc+9)
 21135  0001E6  24F3               	addwf	prodl,w,c
 21136  0001E8  6ED9               	movwf	fsr2l,c
 21137  0001EA  0E01               	movlw	high (_adc+9)
 21138  0001EC  20F4               	addwfc	prodh,w,c
 21139  0001EE  6EDA               	movwf	fsr2h,c
 21140  0001F0  CFC3 FFDF          	movff	4035,indf2	;volatile
 21141  0001F4                     
 21142                           ;main.c: 249: ADCON0 = (8<<2) + 1;
 21143  0001F4  0E21               	movlw	33
 21144  0001F6  6EC2               	movwf	4034,c	;volatile
 21145  0001F8                     
 21146                           ;main.c: 253: if ((80 - 1) == adc_series_counter) {
 21147  0001F8  5049               	movf	_adc_series_counter,w,c
 21148  0001FA  0A4F               	xorlw	79
 21149  0001FC  A4D8               	btfss	status,2,c
 21150  0001FE  D001               	goto	i1u726_21
 21151  000200  D001               	goto	i1u726_20
 21152  000202                     i1u726_21:
 21153  000202  D049               	goto	i1l9303
 21154  000204                     i1u726_20:
 21155  000204                     
 21156                           ;main.c: 254: adc_conversion_flags |= 1 << 4;
 21157  000204  0100               	movlb	0	; () banked
 21158  000206  89C4               	bsf	_adc_conversion_flags& (0+255),4,b
 21159  000208  D046               	goto	i1l9303
 21160  00020A                     i1l9283:
 21161                           
 21162                           ;main.c: 260: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21163  00020A  5049               	movf	_adc_series_counter,w,c
 21164  00020C  0D0C               	mullw	12
 21165  00020E  0EB5               	movlw	low (_adc+10)
 21166  000210  24F3               	addwf	prodl,w,c
 21167  000212  6ED9               	movwf	fsr2l,c
 21168  000214  0E01               	movlw	high (_adc+10)
 21169  000216  20F4               	addwfc	prodh,w,c
 21170  000218  6EDA               	movwf	fsr2h,c
 21171  00021A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21172                           
 21173                           ;main.c: 261: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21174  00021E  5049               	movf	_adc_series_counter,w,c
 21175  000220  0D0C               	mullw	12
 21176  000222  0EB6               	movlw	low (_adc+11)
 21177  000224  24F3               	addwf	prodl,w,c
 21178  000226  6ED9               	movwf	fsr2l,c
 21179  000228  0E01               	movlw	high (_adc+11)
 21180  00022A  20F4               	addwfc	prodh,w,c
 21181  00022C  6EDA               	movwf	fsr2h,c
 21182  00022E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21183  000232                     
 21184                           ;main.c: 263: ADCON0 = (10<<2) + 1;
 21185  000232  0E29               	movlw	41
 21186  000234  6EC2               	movwf	4034,c	;volatile
 21187  000236                     
 21188                           ;main.c: 267: if ((80 - 1) == adc_series_counter) {
 21189  000236  5049               	movf	_adc_series_counter,w,c
 21190  000238  0A4F               	xorlw	79
 21191  00023A  A4D8               	btfss	status,2,c
 21192  00023C  D001               	goto	i1u727_21
 21193  00023E  D001               	goto	i1u727_20
 21194  000240                     i1u727_21:
 21195  000240  D002               	goto	i1l163
 21196  000242                     i1u727_20:
 21197  000242                     
 21198                           ;main.c: 268: adc_conversion_flags |= 1 << 5;
 21199  000242  0100               	movlb	0	; () banked
 21200  000244  8BC4               	bsf	_adc_conversion_flags& (0+255),5,b
 21201  000246                     i1l163:
 21202                           
 21203                           ;main.c: 269: }
 21204                           ;main.c: 272: adc_series_counter++;
 21205  000246  2A49               	incf	_adc_series_counter,f,c
 21206  000248                     
 21207                           ;main.c: 273: if (adc_series_counter >= 80) {
 21208  000248  0E4F               	movlw	79
 21209  00024A  6449               	cpfsgt	_adc_series_counter,c
 21210  00024C  D001               	goto	i1u728_21
 21211  00024E  D001               	goto	i1u728_20
 21212  000250                     i1u728_21:
 21213  000250  D022               	goto	i1l9303
 21214  000252                     i1u728_20:
 21215  000252                     i1l9293:
 21216                           
 21217                           ;main.c: 274: adc_series_counter = 0;
 21218  000252  6A49               	clrf	_adc_series_counter,c
 21219  000254  D020               	goto	i1l9303
 21220  000256                     i1l9295:
 21221                           
 21222                           ;main.c: 280: ADCON0 = (10<<2) + 1;
 21223  000256  0E29               	movlw	41
 21224  000258  6EC2               	movwf	4034,c	;volatile
 21225  00025A  D7FB               	goto	i1l9293
 21226  00025C                     i1l9301:
 21227  00025C  50C2               	movf	4034,w,c	;volatile
 21228  00025E  0B3C               	andlw	60
 21229  000260  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21230  000262  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21231                           
 21232                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21233                           ; Switch size 1, requested type "space"
 21234                           ; Number of cases is 1, Range of values is 0 to 0
 21235                           ; switch strategies available:
 21236                           ; Name         Instructions Cycles
 21237                           ; simple_byte            4     3 (average)
 21238                           ;	Chosen strategy is simple_byte
 21239  000264  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21240  000266  0A00               	xorlw	0	; case 0
 21241  000268  B4D8               	btfsc	status,2,c
 21242  00026A  D001               	goto	i1l11855
 21243  00026C  D7F4               	goto	i1l9295
 21244  00026E                     i1l11855:
 21245                           
 21246                           ; Switch size 1, requested type "space"
 21247                           ; Number of cases is 6, Range of values is 0 to 40
 21248                           ; switch strategies available:
 21249                           ; Name         Instructions Cycles
 21250                           ; simple_byte           19    10 (average)
 21251                           ;	Chosen strategy is simple_byte
 21252  00026E  5005               	movf	??_interrupt_at_low_vector,w,c
 21253  000270  0A00               	xorlw	0	; case 0
 21254  000272  B4D8               	btfsc	status,2,c
 21255  000274  D78C               	goto	i1l9267
 21256  000276  0A04               	xorlw	4	; case 4
 21257  000278  B4D8               	btfsc	status,2,c
 21258  00027A  D76A               	goto	i1l9259
 21259  00027C  0A0C               	xorlw	12	; case 8
 21260  00027E  B4D8               	btfsc	status,2,c
 21261  000280  D748               	goto	i1l9251
 21262  000282  0A28               	xorlw	40	; case 32
 21263  000284  B4D8               	btfsc	status,2,c
 21264  000286  D7C1               	goto	i1l9283
 21265  000288  0A04               	xorlw	4	; case 36
 21266  00028A  B4D8               	btfsc	status,2,c
 21267  00028C  D79F               	goto	i1l9275
 21268  00028E  0A0C               	xorlw	12	; case 40
 21269  000290  B4D8               	btfsc	status,2,c
 21270  000292  D720               	goto	i1l9243
 21271  000294  D7E0               	goto	i1l9295
 21272  000296                     i1l9303:
 21273                           
 21274                           ;main.c: 286: ConvertADC();
 21275  000296  EC84  F02A         	call	i1_ConvertADC	;wreg free
 21276  00029A                     
 21277                           ;main.c: 288: PIR1bits.ADIF = 0;
 21278  00029A  9C9E               	bcf	3998,6,c	;volatile
 21279  00029C                     i1l166:
 21280  00029C  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21281  0002A0  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21282  0002A4  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21283  0002A8  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21284  0002AC  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21285  0002B0  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21286  0002B4  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21287  0002B8  0010               	retfie	
 21288  0002BA                     __end_of_interrupt_at_low_vector:
 21289                           	opt stack 0
 21290                           tblptru	equ	0xFF8
 21291                           tblptrh	equ	0xFF7
 21292                           tblptrl	equ	0xFF6
 21293                           tablat	equ	0xFF5
 21294                           prodh	equ	0xFF4
 21295                           prodl	equ	0xFF3
 21296                           intcon	equ	0xFF2
 21297                           postinc0	equ	0xFEE
 21298                           wreg	equ	0xFE8
 21299                           indf1	equ	0xFE7
 21300                           postdec1	equ	0xFE5
 21301                           fsr1h	equ	0xFE2
 21302                           fsr1l	equ	0xFE1
 21303                           bsr	equ	0xFE0
 21304                           indf2	equ	0xFDF
 21305                           postinc2	equ	0xFDE
 21306                           postdec2	equ	0xFDD
 21307                           plusw2	equ	0xFDB
 21308                           fsr2h	equ	0xFDA
 21309                           fsr2l	equ	0xFD9
 21310                           status	equ	0xFD8
 21311                           
 21312 ;; *************** function i1_WriteTimer0 *****************
 21313 ;; Defined at:
 21314 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21315 ;; Parameters:    Size  Location     Type
 21316 ;;  timer0          2    0[COMRAM] unsigned int 
 21317 ;; Auto vars:     Size  Location     Type
 21318 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21319 ;; Return value:  Size  Location     Type
 21320 ;;		None               void
 21321 ;; Registers used:
 21322 ;;		None
 21323 ;; Tracked objects:
 21324 ;;		On entry : 0/0
 21325 ;;		On exit  : 0/0
 21326 ;;		Unchanged: 0/0
 21327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21328 ;;      Params:         2       0       0       0       0       0       0
 21329 ;;      Locals:         2       0       0       0       0       0       0
 21330 ;;      Temps:          0       0       0       0       0       0       0
 21331 ;;      Totals:         4       0       0       0       0       0       0
 21332 ;;Total ram usage:        4 bytes
 21333 ;; Hardware stack levels used:    1
 21334 ;; This function calls:
 21335 ;;		Nothing
 21336 ;; This function is called by:
 21337 ;;		_interrupt_at_low_vector
 21338 ;; This function uses a non-reentrant model
 21339 ;;
 21340                           
 21341                           	psect	text100
 21342  0054AA                     __ptext100:
 21343                           	opt stack 0
 21344  0054AA                     i1_WriteTimer0:
 21345                           	opt stack 21
 21346                           
 21347                           ;incstack = 0
 21348                           ;incstack = 0
 21349  0054AA  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21350  0054AE  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21351  0054B2  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21352  0054B6  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21353  0054BA  0012               	return	
 21354  0054BC                     __end_ofi1_WriteTimer0:
 21355                           	opt stack 0
 21356                           tblptru	equ	0xFF8
 21357                           tblptrh	equ	0xFF7
 21358                           tblptrl	equ	0xFF6
 21359                           tablat	equ	0xFF5
 21360                           prodh	equ	0xFF4
 21361                           prodl	equ	0xFF3
 21362                           intcon	equ	0xFF2
 21363                           postinc0	equ	0xFEE
 21364                           wreg	equ	0xFE8
 21365                           indf1	equ	0xFE7
 21366                           postdec1	equ	0xFE5
 21367                           fsr1h	equ	0xFE2
 21368                           fsr1l	equ	0xFE1
 21369                           bsr	equ	0xFE0
 21370                           indf2	equ	0xFDF
 21371                           postinc2	equ	0xFDE
 21372                           postdec2	equ	0xFDD
 21373                           plusw2	equ	0xFDB
 21374                           fsr2h	equ	0xFDA
 21375                           fsr2l	equ	0xFD9
 21376                           status	equ	0xFD8
 21377                           
 21378 ;; *************** function i1_ConvertADC *****************
 21379 ;; Defined at:
 21380 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21381 ;; Parameters:    Size  Location     Type
 21382 ;;		None
 21383 ;; Auto vars:     Size  Location     Type
 21384 ;;		None
 21385 ;; Return value:  Size  Location     Type
 21386 ;;		None               void
 21387 ;; Registers used:
 21388 ;;		None
 21389 ;; Tracked objects:
 21390 ;;		On entry : 0/0
 21391 ;;		On exit  : 0/0
 21392 ;;		Unchanged: 0/0
 21393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21394 ;;      Params:         0       0       0       0       0       0       0
 21395 ;;      Locals:         0       0       0       0       0       0       0
 21396 ;;      Temps:          0       0       0       0       0       0       0
 21397 ;;      Totals:         0       0       0       0       0       0       0
 21398 ;;Total ram usage:        0 bytes
 21399 ;; Hardware stack levels used:    1
 21400 ;; This function calls:
 21401 ;;		Nothing
 21402 ;; This function is called by:
 21403 ;;		_interrupt_at_low_vector
 21404 ;; This function uses a non-reentrant model
 21405 ;;
 21406                           
 21407                           	psect	text101
 21408  005508                     __ptext101:
 21409                           	opt stack 0
 21410  005508                     i1_ConvertADC:
 21411                           	opt stack 21
 21412                           
 21413                           ;incstack = 0
 21414                           ;incstack = 0
 21415  005508  82C2               	bsf	4034,1,c	;volatile
 21416  00550A  0012               	return	
 21417  00550C                     __end_ofi1_ConvertADC:
 21418                           	opt stack 0
 21419                           tblptru	equ	0xFF8
 21420                           tblptrh	equ	0xFF7
 21421                           tblptrl	equ	0xFF6
 21422                           tablat	equ	0xFF5
 21423                           prodh	equ	0xFF4
 21424                           prodl	equ	0xFF3
 21425                           intcon	equ	0xFF2
 21426                           postinc0	equ	0xFEE
 21427                           wreg	equ	0xFE8
 21428                           indf1	equ	0xFE7
 21429                           postdec1	equ	0xFE5
 21430                           fsr1h	equ	0xFE2
 21431                           fsr1l	equ	0xFE1
 21432                           bsr	equ	0xFE0
 21433                           indf2	equ	0xFDF
 21434                           postinc2	equ	0xFDE
 21435                           postdec2	equ	0xFDD
 21436                           plusw2	equ	0xFDB
 21437                           fsr2h	equ	0xFDA
 21438                           fsr2l	equ	0xFD9
 21439                           status	equ	0xFD8
 21440                           tblptru	equ	0xFF8
 21441                           tblptrh	equ	0xFF7
 21442                           tblptrl	equ	0xFF6
 21443                           tablat	equ	0xFF5
 21444                           prodh	equ	0xFF4
 21445                           prodl	equ	0xFF3
 21446                           intcon	equ	0xFF2
 21447                           postinc0	equ	0xFEE
 21448                           wreg	equ	0xFE8
 21449                           indf1	equ	0xFE7
 21450                           postdec1	equ	0xFE5
 21451                           fsr1h	equ	0xFE2
 21452                           fsr1l	equ	0xFE1
 21453                           bsr	equ	0xFE0
 21454                           indf2	equ	0xFDF
 21455                           postinc2	equ	0xFDE
 21456                           postdec2	equ	0xFDD
 21457                           plusw2	equ	0xFDB
 21458                           fsr2h	equ	0xFDA
 21459                           fsr2l	equ	0xFD9
 21460                           status	equ	0xFD8
 21461                           
 21462                           	psect	text102
 21463  000000                     __ptext102:
 21464                           	opt stack 0
 21465                           tblptru	equ	0xFF8
 21466                           tblptrh	equ	0xFF7
 21467                           tblptrl	equ	0xFF6
 21468                           tablat	equ	0xFF5
 21469                           prodh	equ	0xFF4
 21470                           prodl	equ	0xFF3
 21471                           intcon	equ	0xFF2
 21472                           postinc0	equ	0xFEE
 21473                           wreg	equ	0xFE8
 21474                           indf1	equ	0xFE7
 21475                           postdec1	equ	0xFE5
 21476                           fsr1h	equ	0xFE2
 21477                           fsr1l	equ	0xFE1
 21478                           bsr	equ	0xFE0
 21479                           indf2	equ	0xFDF
 21480                           postinc2	equ	0xFDE
 21481                           postdec2	equ	0xFDD
 21482                           plusw2	equ	0xFDB
 21483                           fsr2h	equ	0xFDA
 21484                           fsr2l	equ	0xFD9
 21485                           status	equ	0xFD8
 21486                           
 21487                           	psect	rparam
 21488  0000                     tblptru	equ	0xFF8
 21489                           tblptrh	equ	0xFF7
 21490                           tblptrl	equ	0xFF6
 21491                           tablat	equ	0xFF5
 21492                           prodh	equ	0xFF4
 21493                           prodl	equ	0xFF3
 21494                           intcon	equ	0xFF2
 21495                           postinc0	equ	0xFEE
 21496                           wreg	equ	0xFE8
 21497                           indf1	equ	0xFE7
 21498                           postdec1	equ	0xFE5
 21499                           fsr1h	equ	0xFE2
 21500                           fsr1l	equ	0xFE1
 21501                           bsr	equ	0xFE0
 21502                           indf2	equ	0xFDF
 21503                           postinc2	equ	0xFDE
 21504                           postdec2	equ	0xFDD
 21505                           plusw2	equ	0xFDB
 21506                           fsr2h	equ	0xFDA
 21507                           fsr2l	equ	0xFD9
 21508                           status	equ	0xFD8
 21509                           tblptru	equ	0xFF8
 21510                           tblptrh	equ	0xFF7
 21511                           tblptrl	equ	0xFF6
 21512                           tablat	equ	0xFF5
 21513                           prodh	equ	0xFF4
 21514                           prodl	equ	0xFF3
 21515                           intcon	equ	0xFF2
 21516                           postinc0	equ	0xFEE
 21517                           wreg	equ	0xFE8
 21518                           indf1	equ	0xFE7
 21519                           postdec1	equ	0xFE5
 21520                           fsr1h	equ	0xFE2
 21521                           fsr1l	equ	0xFE1
 21522                           bsr	equ	0xFE0
 21523                           indf2	equ	0xFDF
 21524                           postinc2	equ	0xFDE
 21525                           postdec2	equ	0xFDD
 21526                           plusw2	equ	0xFDB
 21527                           fsr2h	equ	0xFDA
 21528                           fsr2l	equ	0xFD9
 21529                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1117
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     95     121
    BANK1           256     52     171
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->_log
    _doWork->___altofl
    ___lwtofl->_readEEPROM
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _ldexp->_eval_poly
    _floor->___altofl
    ___altofl->___fltol
    ___asflsub->___flsub
    ___flsub->___fladd
    ___fldiv->___flsub
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    ___fladd->___awtofl
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeStdReg->_vscp_getGUID
    _vscp_writeStdReg->_vscp_getUserID
    _vscp_writeStdReg->_vscp_getManufacturerId
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _writeCoeffs2Ram->_readEEPROM
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_readNicknamePermanent->_readEEPROM
    _readEEPROM->___wmul
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_OpenADC
    _ECANInitialize->_ECANSetOperationMode
    ___flmul->___fldiv
    ___awtofl->___flpack
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___asfldiv->___fldiv
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame
    ___flmul->___fldiv

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   85572
                                             91 BANK0      4     4      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              66    66      0   29188
                                             77 BANK0     14    14      0
                                              0 BANK1     52    52      0
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             25 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     822
                                              8 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             44 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             38 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                 10     8      2     161
                                             25 COMRAM    10     8      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             67 COMRAM     2     2      0
                                             41 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             66 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             41 BANK0      9     3      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             66 COMRAM     1     1      0
                                             30 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             56 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             66 COMRAM     2     2      0
                                             30 BANK0      8     4      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             68 COMRAM     1     1      0
                                             52 BANK0      4     0      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             52 COMRAM     6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             44 COMRAM     8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             66 COMRAM     1     1      0
                                             30 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             52 COMRAM    14    14      0
                                              0 BANK0      8     0      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                     11    11      0   12426
                                             48 BANK0     11    11      0
                        _writeEEPROM
                         _readEEPROM
                      _sendTempEvent
                     _vscp_sendEvent
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7768
                                             48 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7542
                                             68 COMRAM     1     1      0
                                             47 BANK0      1     1      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             38 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             30 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             29 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             44 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   24270
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    6122
                                             38 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1581
                                             26 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     134
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      0     0      0      44
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4386
                                             34 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeCoeffs2Ram                                      9     9      0     555
                                             25 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             43 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             26 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             25 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             21 COMRAM     4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     110
                                             16 COMRAM     1     1      0
                        _writeEEPROM
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             59 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        20     8     12    1592
                                             39 COMRAM    20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          6     2      4    1328
                                             33 COMRAM     6     2      4
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  13     8      5    1180
                                             20 COMRAM    13     8      5
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      44
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     402
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0      90
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              8 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     6     2      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             25 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
         ___wmul (ARG)
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
         ___wmul (ARG)
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
           ___wmul (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
         ___wmul (ARG)
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
         ___wmul (ARG)
       _writeCoeffs2Ram
         _readEEPROM
           ___wmul (ARG)
         ___wmul
       _vscp_readAppReg (ARG)
         _readEEPROM
           ___wmul (ARG)
     _vscp_getGUID
       _readEEPROM
         ___wmul (ARG)
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
       _ECANSetOperationMode
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
           ___wmul (ARG)
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
           ___wmul (ARG)
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
           ___wmul (ARG)
         _writeCoeffs2Ram
           _readEEPROM
             ___wmul (ARG)
           ___wmul
         _vscp_readAppReg (ARG)
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _handle_sync
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _writeEEPROM
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___wmul
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
         ___wmul (ARG)
     _vscp_getSubzone
       _readEEPROM
         ___wmul (ARG)
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
           ___wmul (ARG)
       _vscp_getSubzone (ARG)
         _readEEPROM
           ___wmul (ARG)
   _doWork
     _readEEPROM
       ___wmul (ARG)
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
                 ___wmul (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
         ___wmul (ARG)
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
           ___wmul (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
             ___wmul (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
         ___wmul (ARG)
       ___flpack (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     3C0      16       63.2%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     34      AB       6       66.8%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     5F      79       4       75.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     176      15        0.0%
DATA                 0      0     541      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Nov 26 10:51:45 2015

                          ___asfldiv@f1p 0068                            ___altofl@sign 0045  
                           ___fldiv@cntr 0040                  __end_of_vscp_readAppReg 1B14  
                           ___fldiv@sign 0042                    __end_of_sendVSCPFrame 44D2  
                           ___asflmul@mp 0043                             ___asflsub@f2 0037  
                                     PL2 266E                                       PL4 267C  
                                     PL6 269A                                       PL8 26B2  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 000E  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 0011  
                    ___wmul@multiplicand 0010                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 3712                            ___asflsub@f1p 0035  
                           ___flpack@arg 000E                                      PL10 26CE  
                                    PL20 2172                                      PL12 26DC  
                                    PL30 3BEE                                      PL22 3E24  
                                    PL14 3E10                                      PL40 3C14  
                                    PL32 218C                                      PL24 3E34  
                                    PL16 3BE0                                      PL50 2746  
                                    PL42 2732                                      PL34 440C  
                                    PL26 2706                                      PL18 26EC  
                                    PL60 33A0                                      PL52 318C  
                                    PL44 3E46                                      PL36 271E  
                                    PL28 3712                                      PL70 21A0  
                                    PL62 2758                                      PL54 5166  
                                    PL46 39DC                                      PL38 3C02  
                                    PL80 4360                                      PL72 2766  
                                    PL64 4AA2                                      PL56 1358  
                                    PL48 3C28                                      PL82 21AE  
                                    PL74 2774                                      PL66 4A2C  
                                    PL58 4112                                      PL84 2782  
                                    PL76 3E5A                                      PL68 4122  
                                    PL86 278A                                      PL78 3726  
                                    PL88 2790                             ___flpack@exp 0012  
                         _Celsius2Kelvin 50DC                                      l320 1400  
                                    l209 222C                                      l322 140C  
                                    l314 13DC                                      l170 3C4E  
                                    l324 1418                                      l316 13E8  
                                    l228 2518                                      l318 13F4  
                                    l254 460C                                      l409 180E  
                                    l521 1032                                      l185 3CC0  
                     vscp_readStdReg@idx 0028                                      l179 3C94  
                                    l518 0FE4                                      l294 49F6  
                                    l551 5322                                      l634 4EEC  
                                    l628 49B6                                      l830 3896  
                                    l822 37FE                                      l639 5142  
                                    l824 381C                                      l593 5340  
                                    l850 3246                                      l842 339E  
                                    l835 31D6                                      l852 325A  
                                    l917 528E                                      l845 32A4  
                                    l854 326E                                      l846 3224  
                     vscp_readStdReg@reg 002B                                      l856 327E  
                                    l848 3232                                      l866 330A  
                                    l858 328E                                      l867 3324  
                                    l884 3E0E                                      l894 4B92  
                                    l889 3BDE                             __CFG_CPB$OFF 000000  
         __size_of_vscp_handleProbeState 00C4                         setEventData@ival 008D  
                         getVSCPFrame@id 0038            __end_of_vscp_handleProbeState 41F4  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                       setEventData@unit 0088                                      _adc 01AB  
                                    _exp 33AE                                      _log 39EE  
                                    fsr2 000FD9                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 007C  
                           ___flmul@sign 007D                             __CFG_LVP$OFF 000000  
                          ___flpack@sign 0013                             ___fltol@exp1 0044  
                           __CFG_WDT$OFF 000000                                     l1030 4D96  
                                   l1102 4D82                                     l1106 5396  
                                   l1035 52DE                                     l1211 1CE6  
                                   l1053 41DE                                     l1045 41EE  
                                   l1302 4C50                                     l1054 41BE  
                                   l1046 4178                                     l1151 5300  
                                   l1082 51F8                                     l1235 1E8E  
                                   l1316 5378                                     l1236 1EA4  
                                   l1317 537A                                     l1093 51A4  
                                   l1237 1EE0                                     l1078 4FB6  
                                   l1246 1F22                                     l1271 2170  
                                   l1088 50CC                                     l1089 50DA  
                                   l1177 3F68                                     l1605 3972  
                                   l1622 4580                                     l1630 4CCC  
                                   l1279 4F36                                     l1631 4CEA  
                                   l1703 46D4                                     l1552 42BE  
                                   l1553 435E                                     l1563 4320  
                                   l1557 42F2                                     l1637 4110  
                                   l1581 345C                                     l1590 38BA  
                                   l1582 3582                                     l1591 39DA  
                                   l1671 3FA2                                     l1672 4068  
                                   l1594 38E2                                     l1674 4058  
                                   l1578 3592                                     l1683 4776  
                                   l1870 3B1A                  __end_of_doOneSecondWork 266E  
                                   l1699 4932                      vscp_readStdReg@code 0020  
                                   l8111 539E                vscp_getManufacturerId@idx 001A  
                                   ?_exp 00A2                                     l8205 5118  
                                   ?_log 0089                                     l8209 511C  
                                   l7451 4FC8                                     l8139 5406  
                                   l8421 3354                                     l8413 3326  
                                   l8333 3204                                     l8317 31C4  
                                   l8341 3212                                     l8327 31EE  
                                   l8335 320E                                     l8079 530E  
                                   l8505 3B7A                                     l8193 4952  
                                   l8435 3388                                     l8429 3372  
                                   l9175 5244                                     l9167 522E  
                                   l8481 4B52                                     l8473 4B2C  
                                   l8385 32B8                                     l8483 4B5C  
                                   l8475 4B34                                     l8491 4B74  
                                   l8395 32D8                                     l8485 4B62  
                                   l8477 4B3E                                     l9701 1B1E  
                                   l9541 3C8E                                     l9533 3C7A  
                                   l8487 4B68                                     l8479 4B48  
                                   l9703 1B24                                     l9641 415A  
                                   l9625 4132                                     l9705 1B2A  
                                   l9561 3CDC                                     l9537 3C84  
                                   l9529 3C70                                     l9803 1C4A  
                                   l9707 1B30                                     l9555 3CBA  
                                   l9539 3C88                                     l9901 1E32  
                                   l9813 1C7E                                     l9709 1B36  
                                   l9549 3CA6                                     l9663 419A  
                                   l9639 4152                                     l9823 1CB2  
                                   l9743 1B80                                     l9727 1B72  
                                   l9583 3D38                                     l9559 3CC4  
                                   l9665 419E                                     l9841 1D1A  
                                   l9729 1B78                                     l9577 3D0C  
                                   l9659 4196                                     l9851 1D82  
                                   l9835 1CEA                                     l9763 1BAA  
                                   l9587 3D40                                     l9597 52CA  
                                   l9933 1E7E                                     l9917 1E58  
                                   l9845 1D38                                     l9837 1D0A  
                                   l9695 41E2                                     l9855 1D98  
                                   l9871 1DBE                                     l9961 1EC4  
                                   l9953 1EA6                                     l9873 1DC0  
                                   l9793 1C16                                     l9777 1BB6  
                                   l9883 1DEA                                     l9875 1DCA  
                                   l9965 1ECC                                     l9983 1EFE  
                                   l9969 1ED4                                     l9889 1E20  
                                   l9979 1EE2              __size_of_vscp_getMatrixInfo 001A  
                         sendCANFrame@id 003C                                     u5450 49A2  
                                   u5455 4998                                     u5625 31CC  
                                   u5627 31CE                                     u8304 26AA  
                                   u9105 3DA4                                     u8305 26A6  
                                   u8254 22FA                                     u5935 3B42  
                                   u8255 22F6                                     u9400 3696  
                                   u5945 3B52                                     u5955 3B7E  
                                   u9085 3D76                                     u9405 3694  
                                   u9430 36E0                                     u9095 3D86  
                                   u8384 2452                                     u8624 2DAA  
                         sendCANFrame@rv 0042                                     u8385 244E  
                                   u8625 2DA6                                     u8730 3546  
                                   u9435 36DE                                     u8484 25A2  
                                   u8485 259E                                     u8750 3A02  
                                   u8654 3178                                     u8655 3174  
                                   u8764 4BE2                                     u8765 4BDC  
                                   u8945 445C                                     u9980 44EC  
                       ??_ECANInitialize 000F                             __CFG_PWRT$ON 000000  
              vscp_setManufacturerId@idx 0012                                     ___IT 000101  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 3C3A                                     _init 4FF6  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 00A2                                     log@x 0089  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 066E                              _vscp_minute 004D  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 02BA  
          __size_of_vscp_doOneSecondWork 004C                        vscp_getUserID@idx 001A  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 3E64  
                            _writeEEPROM 5272                ECANReceiveMessage@dataLen 0017  
                  getVSCPFrame@pPriority 002E                          __end_of_OpenADC 4C54  
                        _sh_coefficients 0120                     __end_of_getVSCPFrame 49B8  
                                  ??_exp 0046                                    ??_log 0044  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 5110  
                   __size_of_getCANFrame 0034                                    l10005 1F24  
                                  l10041 1FA8                                    l10201 2364  
                                  l10019 1F4E                                    l11101 384C  
                                  l10045 1FBA                                    l10029 1F76  
                                  l10141 4A00                                    l10133 49BC  
                                  l10071 2006                                    l10063 1FD2  
                                  l10047 1FC0                                    l10119 210E  
                                  l10215 23AE                                    l11121 388E  
                                  l10145 4A14                                    l10137 49DA  
                                  l10233 2442                                    l10217 23B2  
                                  l11115 3888                                    l11043 4EB6  
                                  l11211 5390                                    l10075 2026  
                                  l10067 1FEC                                    l10147 4A20  
                                  l10235 245C                                    l10227 23CE  
                                  l10163 229E                                    l10323 4D58  
                                  l10403 3180                                    l11109 3866  
                                  l11061 3788                                    l11221 35A8  
                                  l10093 206E                                    l10085 2050  
                                  l10501 45B8                                    l10309 2664  
                                  l10173 22DA                                    l10157 21BC  
                                  l10333 4D6A                                    l11119 388C  
                                  l11047 4EE0                                    l10255 24F4  
                                  l10191 2348                                    _B0CON 000E20  
                                  l10601 14BA                                    l11137 3D9C  
                                  l11305 36FE                                    l11241 35DE  
                                  l11233 35C6                                    l11225 35B2  
                                  l11321 52F6                                    l10097 20B2  
                                  l10505 45F0                                    l10273 2592  
                                  l10257 24F8                                    l10329 4D62  
                                  l10425 3400                                    l10611 14F6  
                                  l10603 14C6                                    l11067 3798  
                                  l10531 4782                                    l10275 25AC  
                                  l10419 33CC                                    l10701 1712  
                                  l10621 1532                                    l10613 1502  
                                  l10605 14D2                                    l11405 4308  
                                  l11245 35EA                                    l11237 35D2  
                                  l11229 35BC                                    l11309 370E  
                                  l10525 477C                                    l11333 3E8E  
                                  l10189 2344                                    l10445 3550  
                                  l10429 342A                                    l10357 2DC2  
                                  l10349 2D98                                    l10711 174E  
                                  l10703 171E                                    l10631 156E  
                                  l10623 153E                                    l10615 150E  
                                  l10607 14DE                                    l10551 138E  
                                  l11407 4314                                    l11095 381E  
                                  l11079 37C2                                    l11175 4FAE  
                                  l11271 363E                                    l11263 3628  
                                  l11255 3610                                    l11511 3936  
                                  l11503 390E                                    l10295 2640  
                                  l11431 4226                                    _B1CON 000E30  
                                  l10721 178A                                    l10713 175A  
                                  l10705 172A                                    l10641 15AA  
                                  l10633 157A                                    l10625 154A  
                                  l10617 151A                                    l10609 14EA  
                                  l10561 13CA                                    l10553 139A  
                                  l11089 3802                                    l11249 35FA  
                                  l10801 079C                                    l11353 3EE8  
                                  l11345 3ECA                                    l11521 3960  
                                  l11513 393E                                    l10297 2644  
                                  l10457 3A0C                                    l11441 424E  
                                  l11425 420E                                    l10731 17C6  
                                  l10723 1796                                    l10715 1766  
                                  l10707 1736                                    l10651 15E6  
                                  l10643 15B6                                    l10635 1586  
                                  l10627 1556                                    l10619 1526  
                                  l10571 1406                                    l10563 13D6  
                                  l10555 13A6                                    l10547 1376  
                                  l11611 40BC                                    l11275 364A  
                                  l11267 3632                                    l11259 361C  
                                  l10811 0828                                    l10803 07B8  
                                  l11355 3EEC                                    l11339 3EAE  
                                  l11531 3990                                    l11523 396C  
                                  l11515 3944                                    l10741 1802  
                                  l10733 17D2                                    l10725 17A2  
                                  l10717 1772                                    l10709 1742  
                                  l10661 1622                                    l10653 15F2  
                                  l10645 15C2                                    l10637 1592  
                                  l10629 1562                                    l10581 1442  
                                  l10573 1412                                    l10565 13E2  
                                  l10557 13B2                                    l10549 1382  
                                  l10901 0CF4                                    l10821 08B4  
                                  l10813 0844                                    l10805 07D4  
                                  l11357 3F02                                    l11509 392A  
                                  l11437 423E                                    l11453 428A  
                                  l10743 1812                                    l10735 17DE  
                                  l10727 17AE                                    l10719 177E  
                                  l10671 165E                                    l10663 162E  
                                  l10655 15FE                                    l10647 15CE  
                                  l10639 159E                                    l10591 147E  
                                  l10583 144E                                    l10575 141E  
                                  l10567 13EE                                    l10559 13BE  
                                  l10751 1AB4                                    l11623 40D6  
                                  l11607 40B4                                    l11279 3656  
                                  l10911 0D76                                    l10903 0D0E  
                                  l10831 0940                                    l10823 08D0  
                                  l10815 0860                                    l10807 07F0  
                                  l11527 3988                                    l11551 44E0  
                                  l11703 469C                                    l11439 424A  
                                  _B2CON 000E40                                    l10745 181E  
                                  l10737 17EA                                    l10729 17BA  
                                  l10681 169A                                    l10673 166A  
                                  l10665 163A                                    l10657 160A  
                                  l10649 15DA                                    l10593 148A  
                                  l10585 145A                                    l10577 142A  
                                  l10569 13FA                                    l11289 36A0  
                                  l10921 0DF8                                    l10913 0D90  
                                  l10905 0D28                                    l10841 09CC  
                                  l10833 095C                                    l10825 08EC  
                                  l10817 087C                                    l10809 080C  
                                  l11377 3F4C                                    l11369 3F36  
                                  l11481 38CC                                    l11713 4CB6  
                                  l11457 429E                                    l11449 427C  
                                  l10739 17F6                                    l10691 16D6  
                                  l10683 16A6                                    l10675 1676  
                                  l10667 1646                                    l10659 1616  
                                  l10595 1496                                    l10587 1466  
                                  l10579 1436                                    l11395 42C8  
                                  l11619 40CE                                    l11299 36E8  
                                  l10931 0E7A                                    l10923 0E12  
                                  l10915 0DAA                                    l10907 0D42  
                                  l10851 0A58                                    l10843 09E8  
                                  l10835 0978                                    l10827 0908  
                                  l10819 0898                                    l11387 3F6A  
                                  l11539 39AE                                    l11555 44F8  
                                  l11467 4E7E                                    l10765 1AE6  
                                  l10757 1AD2                                    l10693 16E2  
                                  l10685 16B2                                    l10677 1682  
                                  l10669 1652                                    l10597 14A2  
                                  l10589 1472                                    l10773 1B10  
                                  l10749 182A                                    l11397 42CC  
                                  l10941 0EFC                                    l10933 0E94  
                                  l10925 0E2C                                    l10917 0DC4  
                                  l10909 0D5C                                    l10861 0AE4  
                                  l10853 0A74                                    l10845 0A04  
                                  l10837 0994                                    l10829 0924  
                                  l10781 0684                                    l11661 3FAC  
                                  l10767 1AE8                                    l10695 16EE  
                                  l10687 16BE                                    l10679 168E  
                                  l10599 14AE                                    l11399 42E4  
                                  l11647 507C                                    l11591 4078  
                                  l10951 0F7E                                    l10943 0F16  
                                  l10935 0EAE                                    l10927 0E46  
                                  l10919 0DDE                                    l10871 0B6E  
                                  l10863 0B00                                    l10855 0A90  
                                  l10847 0A20                                    l10839 09B0  
                                  l10791 0710                                    l10783 06A0  
                                  l11487 38F4                                    l11575 4546  
                                  l11567 4518                                    l11719 4CE8  
                                  l11727 52AA                                    _B3CON 000E50  
                                  l10769 1AF8                                    l10697 16FA  
                                  l10689 16CA                                    l10961 1018  
                                  l10953 0F98                                    l10945 0F30  
                                  l10937 0EC8                                    l10929 0E60  
                                  l10881 0BF0                                    l10873 0B88  
                                  l10865 0B1C                                    l10857 0AAC  
                                  l10849 0A3C                                    l10793 072C  
                                  l10785 06BC                                    l11753 46E2  
                                  l11665 3FC8                                    l11673 4388  
                                  l10699 1706                                    l11595 408E  
                                  l10963 1036                                    l10955 0FB2  
                                  l10947 0F4A                                    l10939 0EE2  
                                  l10891 0C72                                    l10883 0C0A  
                                  l10875 0BA2                                    l10867 0B38  
                                  l10859 0AC8                                    l10795 0748  
                                  l10787 06D8                                    l10971 106E  
                                  l11739 48D4                                    l11755 46EE  
                                  l11675 43F2                                    l10981 130E  
                                  l10965 1050                                    l10957 0FCC  
                                  l10949 0F64                                    l10893 0C8C  
                                  l10885 0C24                                    l10877 0BBC  
                                  l10869 0B54                                    l10797 0764  
                                  l10789 06F4                                    l10973 12E2  
                                  l11781 4752                                    l11773 473A  
                                  l10991 1324                                    l10967 106A  
                                  l10959 0FFE                                    l10895 0CA6  
                                  l10887 0C3E                                    l10879 0BD6  
                                  l10799 0780                                    _B4CON 000E60  
                                  l10993 1334                                    l10897 0CC0  
                                  l10889 0C58                                    l11785 4766  
                                  l11777 4742                                    l11769 472A  
                                  l11689 4672                                    l10899 0CDA  
                                  l11779 474E                                    l11699 4690  
          __size_of_vscp_getMajorVersion 0002                                    l10989 1322  
                                  l10997 1354                                    _B5CON 000E70  
             __end_of_vscp_goActiveState 5360                            ___fltol@sign1 0043  
                        __end_of___aldiv 42B0            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 39DC  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                          __end_of___fldiv 4582  
                          i1_WriteTimer0 54AA                          __end_of___flneg 52BC  
                                  _EEADR 000FA9                          __end_of___lbmod 524C  
                        __end_of___flmul 4112                          __end_of___flsub 506C  
                        __end_of___fltol 4778                  _vscp_handleDropNickname 50A6  
                                  _BSEL0 000DF8                                    u10010 4084  
                                  u10110 4668                                    u10200 470E  
                                  u10205 4704                                    _T0CON 000FD5  
                                  i1l140 0084                                    i1l146 00BE  
                                  i1l163 0246                                    i1l166 029C  
                        sendCANFrame@dlc 0040                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                        ??_writeCoeffs2Ram 001A  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 54EE               _vscp_readNicknamePermanent 54E4  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                     setEventData@newval 0089                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                            ___awtofl@sign 001D  
                         __CFG_EBTR3$OFF 000000                    __end_of_sendTempEvent 4AA2  
                           _vscp_getGUID 543A                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                                    _floor 3F6E  
                                  _ldexp 4632                             _vscp_getZone 54C6  
                                  _frexp 48AE                       vscp_writeAppReg@rv 0026  
              _vscp_getRegisterPagesUsed 550C                   __size_of_vscp_getEvent 0044  
                                  main@i 00BB                               _ConvertADC 5504  
                           _vscp_setGUID 5302                                    tablat 000FF5  
                _vscp_getSubMinorVersion 5512                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 5272  
                            exp@exponent 00AA                              ldexp@newexp 008D  
                   _ECANSetOperationMode 53FA                          __initialization 4F38  
                            log@exponent 0044                             __end_of_main 3D50  
                           __end_of_init 5032                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0018                          ?_Celsius2Kelvin 002D  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001F  
                         ?i1_WriteTimer0 0001                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 002A                   ??_vscp_restoreDefaults 0011  
                                 ??_main 0046                                   ??_init 0013  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 001A  
               ??_vscp_setManufacturerId 0012                 _vscp_handleProtocolEvent 1B14  
                          __activetblptr 000002                        __RegsToCANID@type 0011  
             ECANReceiveMessage@msgFlags 0019                         doWork@calVoltage 017A  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_floor 0098                                   ?_ldexp 0089  
                   __size_of_handle_sync 0074                                   ?_frexp 000E  
                       __end_of___altofl 4EAC               ECANReceiveMessage@savedPtr 001A  
                                 _CANCON 000F6F                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                       __end_of___flpack 4360                                   _EECON2 000FA7  
                                 _CIOCON 000F73                         __end_of___awtofl 50A6  
                       ?_doOneSecondWork 0001                       vscp_writeStdReg@rv 0020  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 5360  
                                 i1l9201 004E                                   i1l9211 007E  
                                 i1l9203 0052                                   i1l9301 025C  
                                 i1l9221 00A8                                   i1l9213 0088  
                                 i1l9205 0062                                   i1l9303 0296  
                                 i1l9223 00AC                                   i1l9215 008A  
                                 i1l9207 0072                                   i1l9305 029A  
                                 i1l9225 00AE                                   i1l9217 0096  
                                 i1l9209 0076                                   i1l9251 0112  
                                 i1l9243 00D4                                   i1l9219 00A0  
                                 i1l9227 00B2                                   i1l9261 0178  
                                 i1l9253 013A                                   i1l9245 00FC  
                                 i1l9237 00C8                                   i1l9271 01BA  
                                 i1l9263 017C                                   i1l9255 013E  
                                 i1l9247 0100                                   i1l9239 00CA  
                                 i1l9281 0204                                   i1l9273 01C6  
                                 i1l9265 0188                                   i1l9257 014A  
                                 i1l9249 010C                                   i1l9291 0248  
                                 i1l9283 020A                                   i1l9275 01CC  
                                 i1l9267 018E                                   i1l9259 0150  
                                 i1l9195 0034                                   i1l9293 0252  
                                 i1l9285 0232                                   i1l9277 01F4  
                                 i1l9269 01B6                                   i1l9197 003C  
                                 i1l9295 0256                                   i1l9287 0236  
                                 i1l9279 01F8                                   i1l9199 0048  
                                 i1l9289 0242                          _init_app_eeprom 2798  
                       __end_of___lwtofl 51D0                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001E                   ECANReceiveMessage@temp 001F  
                      getVSCPFrame@pData 0032                        getVSCPFrame@pSize 0030  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 5176  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1174 0088                                   ___flge 4CA0  
                         getCANFrame@pid 0026                                ??___aldiv 0045  
                              ??___fladd 0026                                   ___wmul 5144  
                              ??___fldiv 0035                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0043                                ??___flsub 0035  
                              ??___fltol 0082                            _vscp_getEvent 4EF4  
                                 _doWork 2D60                         OpenTimer0@config 000E  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 001A  
                    vscp_writeAppReg@reg 0025               __end_of_vscp_setSegmentCRC 5486  
                    vscp_writeAppReg@val 0023                      vscp_writeAppReg@pos 0024  
                                 clear_0 4F40                                   clear_1 4F52  
                                 clear_2 4F5E                                   clear_3 4F6A  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 0095  
                                 floor@i 009C                                   floor@x 0098  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 00CA  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 0011                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000E  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004A                       __size_of___asfldiv 004C  
                     __size_of___asflmul 004C                               ___fladd@f1 001E  
                             ___fladd@f2 0022                       __size_of___asflsub 004A  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0648                         __end_oflog@coeff 066C  
                        ___lbmod@divisor 000E                               ___altofl@c 0094  
                             ___fldiv@f1 0060                               ___fldiv@f2 0064  
                             ___fldiv@f3 003C                               __accesstop 0060  
                __end_of__initialization 4F70                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 4AB0                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                               ___flmul@f1 0068  
                             ___flmul@f2 006C                             eval_poly@res 0085  
                             ___flsub@f1 002D                               ___flsub@f2 0031  
                             ___fltol@f1 007E                          writeEEPROM@data 0010  
                  __size_of_getVSCPFrame 0084                       _vscp_writeRegister 52E0  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 002A                      ?_Celsius2Fahrenheit 007E  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 007E              __end_of_vscp_check_pstorage 52E0  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 406A                            __end_of_ldexp 46D6  
                          __end_of_frexp 4934                      ?_vscp_writeRegister 0027  
                             __end_ofPL2 267C                               __end_ofPL4 269A  
                             __end_ofPL6 26B2                               __end_ofPL8 26CE  
                         ??_sendCANFrame 0042                               ___lwtofl@c 001A  
             __end_of_vscp_getFamilyCode 54E4                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 0202             __size_of_getCalibrationValue 005C  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 54DA  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0027  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 1358  
                 getVSCPFrame@pvscpclass 0028                  __end_of_init_app_eeprom 2D60  
                   ??_Celsius2Fahrenheit 0043              __end_of_vscp_setControlByte 5474  
               __end_of_vscp_writeStdReg 3F6E                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 008F  
                                ??_frexp 0014                            ?_setEventData 0086  
                   ??_vscp_writeRegister 0028          __end_of_vscp_handleDropNickname 50DC  
                           _getVSCPFrame 4934                               __pbssBANK0 00BF  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 00A0               __end_of_vscp_getBufferSize 5510  
                       Celsius2Kelvin@tc 002D                    vscp_writeRegister@reg 0028  
                 ??_ECANSetOperationMode 000E                             __IT_INT_MASK 00BF  
                           __IT_SAVE_BSR 00C0       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 4778  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 5514  
               ECANSetOperationMode@mode 000E                                  ?___wmul 000E  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 0011  
                                _B5RXFUL 007387                        __end_of___asfladd 4E1A  
                      __end_of___asfldiv 4CA0                         WriteTimer0@timer 0010  
                              ?___altofl 0094                        __end_of___asflmul 4D38  
                                _ECANCON 000F77                        __end_of___asflsub 4E64  
                              ?___flpack 000E                            ??_WriteTimer0 0010  
                       doWork@resistance 019C                      __size_of_ConvertADC 0004  
                              ?___awtofl 0018                           ??__RegsToCANID 0012  
                  sendVSCPFrame@priority 0064                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
                              ?___lwtofl 001A                      vscp_writeStdReg@reg 0021  
           __end_of_vscp_doOneSecondWork 4D84                                  i1l11855 026E  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00C5  
        __end_of_interrupt_at_low_vector 02BA                 vscp_readStdReg@code_1147 0024  
                      sendCANFrame@pdata 0041                    _vscp_handleProbeState 4130  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 4B26  
             __end_of_vscp_getMatrixInfo 53B2                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                         ??_setEventData 0045                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                            setEventData@v 0086  
                     _vscp_goActiveState 5342                   __size_of_sendVSCPFrame 00B2  
           __end_of_vscp_getMajorVersion 5518                       __size_of_vscp_init 004C  
                             _readEEPROM 544E                   _vscp_getManufacturerId 5412  
                 _vscp_setManufacturerId 53B2                          _ECANSendMessage 3732  
                    ?_vscp_goActiveState 0001                                  _OpenADC 4BF8  
                                __Hparam 0000                          ??_vscp_getEvent 003C  
                       ??_Celsius2Kelvin 0031                                  __Lparam 0000  
                     _vscp_node_substate 004E               __end_of_vscp_getSegmentCRC 54F8  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0026  
      __end_of_vscp_getRegisterPagesUsed 550E                 __size_of_vscp_getMDF_URL 0018  
                                ___aldiv 41F4                          __size_of___flge 004C  
                                ___fladd 3898                                  ___fldiv 44D2  
                                ___flneg 5298                                  ___lbmod 5224  
                                ___flmul 406A                                  ___flsub 5032  
                                ___fltol 46D6                          __size_of___wmul 0022  
                        getCANFrame@pdlc 0022                                _FIFOEMPTY 007BA7  
                          ?i1_ConvertADC 0001                          __size_of_doWork 042C  
                           __psmallconst 0600                               ??___altofl 0045  
                   __end_of_init_app_ram 4FF6                               ??___flpack 0014  
                     _vscp_sendHeartBeat 524C                                  __pcinit 4F38  
                             ??___awtofl 001C                           _vscp_deviceURL 0600  
                      __end_of_eval_poly 440C                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 3C3A  
                                __ptext1 2D60                                  __ptext2 51A6  
                                __ptext3 4C54                                  __ptext4 4DD0  
                                __ptext5 41F4                                  __ptext6 4B9C  
                                __ptext7 39EE                                  __ptext8 33AE  
                                __ptext9 5298                               ??___lwtofl 001E  
                         _vscp_getUserID 5426                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 0044                             __size_of_exp 01E6  
                           __size_of_log 012E                    vscp_writeStdReg@value 001B  
                       ___aldiv@dividend 0086                      ?_vscp_sendHeartBeat 0044  
               ??_vscp_handleSetNickname 0012                                  _seconds 00C7  
                                doWork@B 019A                                  doWork@i 01A9  
                                doWork@j 01A0                                  doWork@v 0196  
                    __end_of_WriteTimer0 54AA                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 001C                       vscp_getMDF_URL@idx 000F  
                         OpenADC@config2 000E            vscp_handleProtocolEvent@bytes 008C  
                   end_of_initialization 4F70                                  exp@sign 00AC  
           __end_of_vscp_handleHeartbeat 4FB8                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                  __end_of_writeCoeffs2Ram 4818  
                   __end_of_sendCANFrame 4EF4                               doWork@Rinf 0176  
                     doOneSecondWork@tmp 0097                               doWork@temp 01A5  
              vscp_handleProtocolEvent@i 0099                vscp_handleProtocolEvent@j 009A  
              vscp_handleProtocolEvent@k 0093                     ??_vscp_sendHeartBeat 0045  
                         _vscp_sendEvent 51FA                        ECANSendMessage@id 0018  
                      ECANSendMessage@pb 0020                         ___aldiv@quotient 0090  
                                postdec1 000FE5                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                   __size_of_sendTempEvent 0068  
                         _vscp_setUserID 53CA                                  postinc0 000FEE  
                                postinc2 000FDE                           ??i1_ConvertADC 0001  
                 __end_of_vscp_deviceURL 0620      __end_of_vscp_writeNicknamePermanent 5498  
            _vscp_writeNicknamePermanent 5486                       __ECANPointBuffer@b 0011  
                          _sendVSCPFrame 4420                   __end_of_vscp_getUserID 543A  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 4DD0                           _vscp_probe_cnt 0050  
                    __end_of_getCANFrame 5144            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                            ??_handle_sync 0090  
               __size_of_vscp_readAppReg 07AC                         ___lbmod@dividend 000F  
                       writeCoeffs2Ram@c 001C                         writeCoeffs2Ram@i 001F  
                       writeCoeffs2Ram@j 0021                              ___fldiv@exp 0041  
                         _vscp_statuscnt 0052                 __size_of_vscp_readStdReg 017E  
                     _vscp_setSegmentCRC 5474                        readEEPROM@address 0016  
                           ??_ConvertADC 000E               vscp_handleProtocolEvent@cb 0091  
                __end_of_ECANSendMessage 3898                        vscp_readStdReg@rv 002A  
                            ___lbmod@rem 0011                              ___flmul@exp 0077  
                          ?__CANIDToRegs 000E                     __end_of__RegsToCANID 3BE0  
                    _getCalibrationValue 4B9C                              ?_readEEPROM 0016  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 5224  
                             _vscp_error 5500                     _vscp_doOneSecondWork 4D38  
                     i1WriteTimer0@timer 0003                               _vscp_timer 011E  
                 __end_of_vscp_setUserID 53E2                 __size_of_doOneSecondWork 04B6  
                 vscp_sendHeartBeat@zone 0045                     __end_of_setEventData 4632  
                         ?_sendVSCPFrame 0060                           __end_of___flge 4CEC  
                   __size_of_writeEEPROM 0026                           __end_of___wmul 5166  
                        ?_vscp_getUserID 0001                           __end_of_doWork 318C  
           __end_of_vscp_getMinorVersion 5516                              _WriteTimer0 5498  
                   _vscp_getMajorVersion 5516                       __end_of_ConvertADC 5508  
                   ?_getCalibrationValue 001A                     ??_vscp_setSegmentCRC 0011  
                      ??_vscp_getMDF_URL 000E            ??_vscp_getBootLoaderAlgorithm 000E  
                             floor@expon 00A0                                ___DCDelay 01AA  
                            __end_ofPL10 26DC                              __end_ofPL20 218C  
                            __end_ofPL12 26EC                        ?_vscp_writeAppReg 0023  
                            __end_ofPL30 3C02                              __end_ofPL22 3E34  
                            __end_ofPL14 3E24                              __end_ofPL40 3C28  
                            __end_ofPL32 21A0                              __end_ofPL24 3E46  
                            __end_ofPL16 3BEE                              __end_ofPL50 2758  
                            __end_ofPL42 2746                              __end_ofPL34 4420  
                            __end_ofPL26 271E                              __end_ofPL18 2706  
                            __end_ofPL60 33AE                              __end_ofPL52 319E  
                            __end_ofPL44 3E5A                              __end_ofPL36 2732  
                            __end_ofPL28 3726                              __end_ofPL70 21AE  
                            __end_ofPL62 2766                              __end_ofPL54 5176  
                            __end_ofPL46 39EE                              __end_ofPL38 3C14  
                            __end_ofPL80 436C                              __end_ofPL72 2774  
                            __end_ofPL64 4AB0                              __end_ofPL56 1368  
                            __end_ofPL48 3C3A                              __end_ofPL82 21B8  
                            __end_ofPL74 2782                              __end_ofPL66 4A3A  
                            __end_ofPL58 4122                              __end_ofPL84 278A  
                            __end_ofPL76 3E64                              __end_ofPL68 4130  
                            __end_ofPL86 2790                              __end_ofPL78 3732  
                            __end_ofPL88 2798                      start_initialization 4F38  
                             eval_poly@d 0082                               eval_poly@n 0083  
                             eval_poly@x 007E                               ldexp@value 0089  
        __size_of_vscp_handleSetNickname 002A                              __end_of_exp 3594  
                            __end_of_log 3B1C                       ??_vscp_writeAppReg 0024  
                          _sendTempEvent 4A3A                        ?_vscp_writeStdReg 001B  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 0030  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 001C  
                     _vscp_getFamilyCode 54DA                      __end_of_handle_sync 4A2C  
                doOneSecondWork@setpoint 0098                           ??__CANIDToRegs 0015  
                     _vscp_getFamilyType 54D0                               frexp@value 000E  
                    sendVSCPFrame@nodeid 0063                         ?_writeCoeffs2Ram 0001  
                      _vscp_readRegister 537E                     Celsius2Fahrenheit@tc 007E  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 0090  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 0020  
                    ?_vscp_getFamilyCode 000E                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 2172                          ?_vscp_setUserID 0011  
                    ?_vscp_getFamilyType 000E                    __size_of_init_app_ram 003E  
               ?_vscp_handleDropNickname 0001                   getCalibrationValue@cal 0021  
                      ??_vscp_getSubzone 001A                                 ??___flge 0016  
               __end_of__ECANPointBuffer 4B9C                        __CANIDToRegs@type 0014  
                            _getCANFrame 5110                                 ??___wmul 0012  
                               ??_doWork 00AD                       _vscp_getBufferSize 550E  
            vscp_handleProtocolEvent@len 008D              vscp_handleProtocolEvent@pos 008B  
             __end_of_ECANReceiveMessage 33A0                      ??_vscp_readRegister 002C  
         __size_of_vscp_goBootloaderMode 001E                    ?_vscp_getMajorVersion 0001  
                  ??_getCalibrationValue 001C                    __end_ofi1_WriteTimer0 54BC  
          __end_of_vscp_goBootloaderMode 5342                     _vscp_handleHeartbeat 4F7A  
                     __end_of_OpenTimer0 537E                        __size_of___altofl 0048  
                      __size_of___flpack 00B0                                ___asfladd 4DD0  
                    ?_vscp_getBufferSize 0001                        __size_of___awtofl 003A  
                    __size_of_readEEPROM 0014                                ___asfldiv 4C54  
                            __pbssBIGRAM 01AB                                ___asflmul 4CEC  
                              ___asflsub 4E1A             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 0012                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0046                     ??_vscp_getFamilyType 0012  
                      __size_of___lwtofl 002A                          __IT_SAVE_STATUS 00C1  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 0176                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004A              __size_of_Celsius2Fahrenheit 0076  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0048  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 550C                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 001A                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 5398                             _init_app_ram 4FB8  
                   getCalibrationValue@i 0023                              _doWork$2290 0186  
                            _doWork$2288 017E                              _doWork$2289 0182  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 01A1  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 001B  
                   ??_vscp_getBufferSize 000E                             _current_temp 0100  
                              __pnvBANK1 01AA                            __IT_SAVE_WREG 00C2  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5398  
                 _vscp_handleSetNickname 51D0            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 4818  
                               ?___aldiv 0086                                 ?___fladd 001E  
                               ?___fldiv 0060                                __ptext100 54AA  
                              __ptext101 5508                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 0068                                 ?___flsub 002D  
                               ?___fltol 007E                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 001A                              __pintcodelo 0018  
                      ??_doOneSecondWork 0090                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1164 008F                  vscp_readStdReg@idx_1148 0029  
             vscp_setManufacturerId@data 0011                             _sendCANFrame 4EAC  
                            __smallconst 0600                               ?___asfladd 002D  
                      WriteTimer0@timer0 000E                               ?___asfldiv 0068  
                             ?___asflmul 007E                               ?___asflsub 0035  
                     _vscp_getSegmentCRC 54EE                           ??_vscp_getGUID 001A  
                              _eval_poly 436C                              _handle_sync 49B8  
                         ??_vscp_getZone 001A           __end_of_vscp_getManufacturerId 5426  
         __end_of_vscp_setManufacturerId 53CA                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1163 008E                           __size_of_floor 00FC  
                         __size_of_ldexp 00A4                           ??_vscp_setGUID 0012  
                         __size_of_frexp 0086                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 000E                         _vscp_configtimer 011C  
                        ___aldiv@divisor 008A                          ___aldiv@counter 008E  
                         ___wmul@product 0014                   ??_vscp_doOneSecondWork 007F  
                 sendVSCPFrame@vscpclass 0060                            OpenADC@config 0012  
                   _vscp_getMinorVersion 5514                                _sendTimer 011A  
                               _PIE1bits 000F9D                                _low_alarm 00C6  
                  __size_of_setEventData 00B0                   __end_of_ECANInitialize 48AE  
                               i1u720_20 00C6                                 i1u720_21 00C4  
                               i1u721_20 00D2                                 i1u721_21 00D0  
                               i1u722_20 010C                                 i1u714_20 003C  
                               i1u722_21 010A                                 i1u714_21 003A  
                               i1u723_20 014A                                 i1u715_20 007E  
                               i1u723_21 0148                                 i1u715_21 007C  
                               i1u724_20 0188                                 i1u716_20 0096  
                               i1u724_21 0186                                 i1u716_21 0094  
                               i1u725_20 01C6                                 i1u717_20 00A0  
                               i1u725_21 01C4                                 i1u717_21 009E  
                               i1u726_20 0204                                 i1u718_20 00A8  
                               i1u726_21 0202                                 i1u718_21 00A6  
                               i1u727_20 0242                                 i1u719_20 00BC  
                               i1u727_21 0240                                 i1u719_21 00BA  
                               i1u728_20 0252                                 i1u728_21 0250  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 4F38                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 003C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 001A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 3E10  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 000E  
                           __RegsToCANID 3B1C                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0045              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 007E                      getVSCPFrame@pNodeId 002C  
                              _vscp_init 4D84                                _vscp_imsg 0168  
                              _vscp_hour 00C8                                _vscp_omsg 00CC  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 065E  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 4582               __size_of_vscp_readRegister 001A  
                               ___DCByte 00C3                        _measurement_clock 0112  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 0018  
               __size_of_init_app_eeprom 05C8             __end_of_vscp_restoreDefaults 5500  
                              frexp@eptr 0012                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                                 __Hrparam 0000  
                   ECANReceiveMessage@id 001C                             _seconds_temp 010C  
            __size_of_vscp_sendHeartBeat 0026                         __size_of_OpenADC 005C  
                       ??_vscp_getUserID 001A                          _vscp_getMDF_URL 53E2  
                               __Lrparam 0000                         __CANIDToRegs@val 0010  
                       __CANIDToRegs@ptr 000E                         __size_of___aldiv 00BC  
                       __size_of___fladd 0144                         __size_of___fldiv 00B0  
                       __size_of___flneg 0024                         _vscp_initledfunc 004C  
                       __size_of___lbmod 0028                         __size_of___flmul 00A8  
                 ??_vscp_handleHeartbeat 001A                         __size_of___flsub 003A  
                       __size_of___fltol 00A2                                 ___altofl 4E64  
                               ___flpack 42B0                         getCANFrame@flags 0027  
                           ?_WriteTimer0 000E                                 ___awtofl 506C  
                       getCANFrame@pdata 0024                                 ___lwtofl 51A6  
                         sendTempEvent@i 008F                  __size_of_Celsius2Kelvin 0034  
                            ??___asfladd 0033                              ??___asfldiv 0043  
                            ??___asflmul 0043                                 _exp$2294 00A6  
                            ??___asflsub 003B                       __end_of_readEEPROM 5462  
                  __size_ofi1_ConvertADC 0004                               ?_vscp_init 0001  
                               __ptext10 4632                                 __ptext11 436C  
                               __ptext20 44D2                                 __ptext12 3F6E  
                               __ptext21 4D38                                 __ptext13 46D6  
                               __ptext30 4AB0                                 __ptext22 524C  
                               __ptext14 48AE                                 __ptext31 3898  
                               __ptext23 54BC                                 __ptext15 4CA0  
                               __ptext40 53CA                                 __ptext32 50DC  
                               __ptext24 54C6                                 __ptext16 4E64  
                               __ptext41 5302                                 __ptext33 1B14  
                               __ptext25 21B8                                 __ptext17 4E1A  
                               __ptext50 550E                                 __ptext42 066E  
                               __ptext34 5224                                 __ptext26 5500  
                               __ptext18 5032                                 __ptext51 5510  
                               __ptext43 4778                                 __ptext35 52E0  
                               __ptext27 49B8                                 __ptext19 4CEC  
                               __ptext60 50A6                                 __ptext52 5412  
                               __ptext44 5144                                 __ptext36 3E64  
                               __ptext28 4A3A                                 __ptext61 4D84  
                               __ptext53 5426                                 __ptext45 537E  
                               __ptext37 54F8                                 __ptext29 4582  
                               __ptext70 51FA                                 __ptext62 54E4  
                               __ptext54 53E2                                 __ptext46 3594  
                               __ptext38 2798                                 __ptext71 4420  
                               __ptext63 544E                                 __ptext55 543A  
                               __ptext47 54D0                                 __ptext39 53B2  
                               __ptext80 4B26                                 __ptext72 4EAC  
                               __ptext64 51D0                                 __ptext56 5512  
                               __ptext48 54DA                                 __ptext81 52BC  
                               __ptext73 3732                                 __ptext65 4F7A  
                               __ptext57 5514                                 __ptext49 550C  
                               __ptext90 4BF8                                 __ptext82 5462  
                               __ptext74 3D50                                 __ptext66 5324  
                               __ptext58 5516                                 __ptext91 5360  
                               __ptext83 5474                                 __ptext75 4EF4  
                               __ptext67 5398                                 __ptext59 5176  
                               __ptext92 4FB8                                 __ptext84 54EE  
                               __ptext76 4934                                 __ptext68 4130  
                               __ptext93 5504                                 __ptext85 5486  
                               __ptext77 5110                                 __ptext69 5342  
                               __ptext94 5498                                 __ptext86 5272  
                               __ptext78 319E                                 __ptext95 406A  
                               __ptext87 4FF6                                 __ptext79 3B1C  
                               __ptext96 506C                                 __ptext88 4818  
                               __ptext97 42B0                                 __ptext89 53FA  
                               __ptext98 1368           vscp_goBootloaderMode@algorithm 0011  
              vscp_sendHeartBeat@subzone 0044                            ?_getVSCPFrame 0028  
                       ??_vscp_sendEvent 0043                          _vscp_getSubzone 54BC  
                       ??_vscp_setUserID 0012                            __size_of_main 0116  
                          __size_of_init 003C                __size_of_vscp_writeAppReg 0CEA  
                    _vscp_check_pstorage 52BC                            init_app_ram@i 000E  
         vscp_handleProtocolEvent@i_1162 0094           vscp_handleProtocolEvent@i_1165 0098  
         vscp_handleProtocolEvent@i_1173 0092                         doOneSecondWork@i 009A  
                   __end_of_vscp_getGUID 544E                            ??_writeEEPROM 0011  
              __size_of_vscp_writeStdReg 010A                      ECANSendMessage@data 001C  
               ECANSendMessage@tempBSEL0 0035                             ?_getCANFrame 0022  
                    ECANSendMessage@mode 0032                     __end_of_vscp_getZone 54D0  
                    ECANSendMessage@temp 0038                        ?__ECANPointBuffer 000E  
                      vscp_setUserID@idx 0012                     __end_of_vscp_setGUID 5324  
                     vscp_readAppReg@reg 001B                       vscp_readAppReg@pos 001A  
                           i1_ConvertADC 5508                         vscp_sendEvent@rv 0043  
                     ??__ECANPointBuffer 0011           vscp_handleProtocolEvent@offset 008A  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 0012  
                    _vscp_setControlByte 5462                                 exp@coeff 0620  
                  ___flmul@f3_as_product 0078                                 log@coeff 0648  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 1368  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0036                               _INTCONbits 000FF2  
                            ??_eval_poly 0043             ??_vscp_readNicknamePermanent 001A  
                    ECANReceiveMessage@i 001D                          _vscp_guid_reset 004B  
                        _vscp_readStdReg 3594             vscp_handleDropNickname@bytes 001A  
             __end_of_vscp_newNodeOnline 51A6                       _ECANReceiveMessage 319E  
                         ??_getVSCPFrame 0034                          _vscp_initbtncnt 00C9  
                        sendVSCPFrame@id 007B                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 53FA                     ?_vscp_setControlByte 0001  
                          _timeout_clock 0116                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 00CB                             handle_sync@i 0092  
                        _doOneSecondWork 21B8                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0011              __end_of_getCalibrationValue 4BF8  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0011  
                  __size_of__CANIDToRegs 00C0                           readEEPROM@data 0019  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 5512              _vscp_getBootLoaderAlgorithm 5510  
       __size_of_interrupt_at_low_vector 02A2                   ECANSendMessage@dataLen 001D  
                    __end_of_writeEEPROM 5298                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 001A                    ??_vscp_check_pstorage 001A  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 5324  
             __end_of_Celsius2Fahrenheit 4B26             __end_of_ECANSetOperationMode 5412  
                   _vscp_restoreDefaults 54F8              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 001A                  __end_of_vscp_getSubzone 54C6  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 008F                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 5302                       __end_of_vscp_error 5504  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 00C4  
         __end_of_vscp_handleSetNickname 51FA       vscp_handleProtocolEvent@bytes_1169 0096  
                  ??_vscp_setControlByte 0011                     vscp_readRegister@reg 002C  
                           ___fladd@exp1 002C                             ___fladd@exp2 002B  
                           ___fladd@sign 002A                             __CANIDToRegs 3D50  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 0086  
                          ___asfladd@f1p 002D              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 002F                 __size_of_ECANSendMessage 0166  
                           ___asfldiv@f2 006A  

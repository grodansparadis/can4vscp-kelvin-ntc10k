

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Mar 24 11:17:29 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   120                           	psect	pa_nodes,global,class=CODE,delta=1
   121  0000                     tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           prodh	equ	0xFF4
   125                           prodl	equ	0xFF3
   126                           intcon	equ	0xFF2
   127                           wreg	equ	0xFE8
   128                           indf1	equ	0xFE7
   129                           fsr1h	equ	0xFE2
   130                           fsr1l	equ	0xFE1
   131                           indf2	equ	0xFDF
   132                           postinc2	equ	0xFDE
   133                           postdec2	equ	0xFDD
   134                           plusw2	equ	0xFDB
   135                           fsr2h	equ	0xFDA
   136                           fsr2l	equ	0xFD9
   137                           status	equ	0xFD8
   138                           
   139                           	psect	smallconst
   140  000600                     __psmallconst:
   141                           	opt stack 0
   142  000600                     _vscp_deviceURL:
   143                           	opt stack 0
   144  000600  77                 	db	119
   145  000601  77                 	db	119
   146  000602  77                 	db	119
   147  000603  2E                 	db	46
   148  000604  65                 	db	101
   149  000605  75                 	db	117
   150  000606  72                 	db	114
   151  000607  6F                 	db	111
   152  000608  73                 	db	115
   153  000609  6F                 	db	111
   154  00060A  75                 	db	117
   155  00060B  72                 	db	114
   156  00060C  63                 	db	99
   157  00060D  65                 	db	101
   158  00060E  2E                 	db	46
   159  00060F  73                 	db	115
   160  000610  65                 	db	101
   161  000611  2F                 	db	47
   162  000612  6E                 	db	110
   163  000613  74                 	db	116
   164  000614  63                 	db	99
   165  000615  31                 	db	49
   166  000616  30                 	db	48
   167  000617  4B                 	db	75
   168  000618  41                 	db	65
   169  000619  5F                 	db	95
   170  00061A  33                 	db	51
   171  00061B  2E                 	db	46
   172  00061C  78                 	db	120
   173  00061D  6D                 	db	109
   174  00061E  6C                 	db	108
   175  00061F  00                 	db	0
   176  000620                     __end_of_vscp_deviceURL:
   177                           	opt stack 0
   178  000620                     exp@coeff:
   179                           	opt stack 0
   180  000620  0000               	dw	0
   181  000622  3F80               	dw	16256
   182  000624  7218               	dw	29208
   183  000626  3F31               	dw	16177
   184  000628  FDF0               	dw	65008
   185  00062A  3E75               	dw	15989
   186  00062C  5847               	dw	22599
   187  00062E  3D63               	dw	15715
   188  000630  9558               	dw	38232
   189  000632  3C1D               	dw	15389
   190  000634  C482               	dw	50306
   191  000636  3AAE               	dw	15022
   192  000638  78A8               	dw	30888
   193  00063A  3921               	dw	14625
   194  00063C  93EF               	dw	37871
   195  00063E  3780               	dw	14208
   196  000640  92A0               	dw	37536
   197  000642  35A7               	dw	13735
   198  000644  5646               	dw	22086
   199  000646  3415               	dw	13333
   200  000648                     __end_ofexp@coeff:
   201                           	opt stack 0
   202  000648                     log@coeff:
   203                           	opt stack 0
   204  000648  0000               	dw	0
   205  00064A  0000               	dw	0
   206  00064C  FFC4               	dw	65476
   207  00064E  3F7F               	dw	16255
   208  000650  EF80               	dw	61312
   209  000652  BEFF               	dw	48895
   210  000654  E190               	dw	57744
   211  000656  3EA9               	dw	16041
   212  000658  82EC               	dw	33516
   213  00065A  BE76               	dw	48758
   214  00065C  AD82               	dw	44418
   215  00065E  3E2B               	dw	15915
   216  000660  3C0E               	dw	15374
   217  000662  BDC3               	dw	48579
   218  000664  D187               	dw	53639
   219  000666  3D13               	dw	15635
   220  000668  7841               	dw	30785
   221  00066A  BBD3               	dw	48083
   222  00066C                     __end_oflog@coeff:
   223                           	opt stack 0
   224  0000                     _ADCON0	set	4034
   225  0000                     _ADCON0bits	set	4034
   226  0000                     _ADCON1	set	4033
   227  0000                     _ADCON2	set	4032
   228  0000                     _ADRESH	set	4036
   229  0000                     _ADRESL	set	4035
   230  0000                     _BRGCON1	set	3952
   231  0000                     _BRGCON2	set	3953
   232  0000                     _BRGCON3	set	3954
   233  0000                     _BSEL0	set	3576
   234  0000                     _CANCON	set	3951
   235  0000                     _CIOCON	set	3955
   236  0000                     _ECANCON	set	3959
   237  0000                     _EEADR	set	4009
   238  0000                     _EECON1bits	set	4006
   239  0000                     _EECON2	set	4007
   240  0000                     _EEDATA	set	4008
   241  0000                     _INTCONbits	set	4082
   242  0000                     _MSEL0	set	3568
   243  0000                     _MSEL1	set	3569
   244  0000                     _MSEL2	set	3570
   245  0000                     _PIE1bits	set	3997
   246  0000                     _PIR1bits	set	3998
   247  0000                     _PIR2bits	set	4001
   248  0000                     _PORTC	set	3970
   249  0000                     _RXB1CONbits	set	3920
   250  0000                     _RXF0EIDH	set	3842
   251  0000                     _RXF0EIDL	set	3843
   252  0000                     _RXF0SIDH	set	3840
   253  0000                     _RXF0SIDL	set	3841
   254  0000                     _RXF1EIDH	set	3846
   255  0000                     _RXF1EIDL	set	3847
   256  0000                     _RXF1SIDH	set	3844
   257  0000                     _RXF1SIDL	set	3845
   258  0000                     _RXFBCON0	set	3552
   259  0000                     _RXFBCON1	set	3553
   260  0000                     _RXFBCON2	set	3554
   261  0000                     _RXFBCON3	set	3555
   262  0000                     _RXFBCON4	set	3556
   263  0000                     _RXFBCON5	set	3557
   264  0000                     _RXFBCON6	set	3558
   265  0000                     _RXFBCON7	set	3559
   266  0000                     _RXFCON0	set	3540
   267  0000                     _RXFCON1	set	3541
   268  0000                     _RXM0EIDH	set	3866
   269  0000                     _RXM0EIDL	set	3867
   270  0000                     _RXM0SIDH	set	3864
   271  0000                     _RXM0SIDL	set	3865
   272  0000                     _RXM1EIDH	set	3870
   273  0000                     _RXM1EIDL	set	3871
   274  0000                     _RXM1SIDH	set	3868
   275  0000                     _RXM1SIDL	set	3869
   276  0000                     _T0CON	set	4053
   277  0000                     _T0CONbits	set	4053
   278  0000                     _TMR0H	set	4055
   279  0000                     _TMR0L	set	4054
   280  0000                     _TRISA	set	3986
   281  0000                     _TRISB	set	3987
   282  0000                     _TRISC	set	3988
   283  0000                     _B0RXFUL	set	28935
   284  0000                     _B0TXEN	set	28610
   285  0000                     _B1RXFUL	set	29063
   286  0000                     _B1TXEN	set	28611
   287  0000                     _B2RXFUL	set	29191
   288  0000                     _B2TXEN	set	28612
   289  0000                     _B3RXFUL	set	29319
   290  0000                     _B3TXEN	set	28613
   291  0000                     _B4RXFUL	set	29447
   292  0000                     _B4TXEN	set	28614
   293  0000                     _B5RXFUL	set	29575
   294  0000                     _B5TXEN	set	28615
   295  0000                     _FIFOEMPTY	set	31655
   296  0000                     _IRXIF	set	32039
   297  0000                     _MDSEL0	set	31678
   298  0000                     _MDSEL1	set	31679
   299  0000                     _RXB0FILHIT0	set	31488
   300  0000                     _RXB0FUL	set	31495
   301  0000                     _RXB0IF	set	32032
   302  0000                     _RXB0OVFL	set	31655
   303  0000                     _RXB1IF	set	32033
   304  0000                     _RXB1OVFL	set	31654
   305  0000                     _RXM0EXIDM	set	30923
   306  0000                     _RXM1EXIDEN	set	30955
   307  0000                     _B0CON	set	3616
   308  0000                     _B1CON	set	3632
   309  0000                     _B2CON	set	3648
   310  0000                     _B3CON	set	3664
   311  0000                     _B4CON	set	3680
   312  0000                     _B5CON	set	3696
   313  0000                     _RXB0CON	set	3936
   314  0000                     _RXB1CON	set	3920
   315  0000                     _TXB0CON	set	3904
   316  0000                     _TXB1CON	set	3888
   317  0000                     _TXB2CON	set	3872
   318  00066C  00                 	db	0	; dummy byte at the end
   319  0000                     tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           prodh	equ	0xFF4
   323                           prodl	equ	0xFF3
   324                           intcon	equ	0xFF2
   325                           wreg	equ	0xFE8
   326                           indf1	equ	0xFE7
   327                           fsr1h	equ	0xFE2
   328                           fsr1l	equ	0xFE1
   329                           indf2	equ	0xFDF
   330                           postinc2	equ	0xFDE
   331                           postdec2	equ	0xFDD
   332                           plusw2	equ	0xFDB
   333                           fsr2h	equ	0xFDA
   334                           fsr2l	equ	0xFD9
   335                           status	equ	0xFD8
   336                           
   337                           	psect	nvBANK1
   338  0001A1                     __pnvBANK1:
   339                           	opt stack 0
   340  0001A1                     ___DCDelay:
   341                           	opt stack 0
   342  0001A1                     	ds	1
   343                           
   344                           ; #config settings
   345  0000                     tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           prodh	equ	0xFF4
   349                           prodl	equ	0xFF3
   350                           intcon	equ	0xFF2
   351                           wreg	equ	0xFE8
   352                           indf1	equ	0xFE7
   353                           fsr1h	equ	0xFE2
   354                           fsr1l	equ	0xFE1
   355                           indf2	equ	0xFDF
   356                           postinc2	equ	0xFDE
   357                           postdec2	equ	0xFDD
   358                           plusw2	equ	0xFDB
   359                           fsr2h	equ	0xFDA
   360                           fsr2l	equ	0xFD9
   361                           status	equ	0xFD8
   362                           
   363                           	psect	cinit
   364  004EF6                     __pcinit:
   365                           	opt stack 0
   366  004EF6                     start_initialization:
   367                           	opt stack 0
   368  004EF6                     __initialization:
   369                           	opt stack 0
   370                           
   371                           ; Clear objects allocated to BIGRAM (960 bytes)
   372  004EF6  EE01  F0A2         	lfsr	0,__pbssBIGRAM
   373  004EFA  EE13 F0C0          	lfsr	1,960
   374  004EFE                     clear_0:
   375  004EFE  6AEE               	clrf	postinc0,c
   376  004F00  50E5               	movf	postdec1,w,c
   377  004F02  50E1               	movf	fsr1l,w,c
   378  004F04  E1FC               	bnz	clear_0
   379  004F06  50E2               	movf	fsr1h,w,c
   380  004F08  E1FA               	bnz	clear_0
   381                           
   382                           ; Clear objects allocated to BANK1 (107 bytes)
   383  004F0A  EE01  F000         	lfsr	0,__pbssBANK1
   384  004F0E  0E6B               	movlw	107
   385  004F10                     clear_1:
   386  004F10  6AEE               	clrf	postinc0,c
   387  004F12  06E8               	decf	wreg,f,c
   388  004F14  E1FD               	bnz	clear_1
   389                           
   390                           ; Clear objects allocated to BANK0 (36 bytes)
   391  004F16  EE00  F0B3         	lfsr	0,__pbssBANK0
   392  004F1A  0E24               	movlw	36
   393  004F1C                     clear_2:
   394  004F1C  6AEE               	clrf	postinc0,c
   395  004F1E  06E8               	decf	wreg,f,c
   396  004F20  E1FD               	bnz	clear_2
   397                           
   398                           ; Clear objects allocated to COMRAM (13 bytes)
   399  004F22  EE00  F046         	lfsr	0,__pbssCOMRAM
   400  004F26  0E0D               	movlw	13
   401  004F28                     clear_3:
   402  004F28  6AEE               	clrf	postinc0,c
   403  004F2A  06E8               	decf	wreg,f,c
   404  004F2C  E1FD               	bnz	clear_3
   405  004F2E                     end_of_initialization:
   406                           	opt stack 0
   407  004F2E                     __end_of__initialization:
   408                           	opt stack 0
   409  004F2E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   410  004F30  6EF8               	movwf	tblptru,c
   411  004F32  0100               	movlb	0
   412  004F34  EF5E  F01F         	goto	_main	;jump to C main() function
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           prodh	equ	0xFF4
   418                           prodl	equ	0xFF3
   419                           intcon	equ	0xFF2
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           indf1	equ	0xFE7
   423                           postdec1	equ	0xFE5
   424                           fsr1h	equ	0xFE2
   425                           fsr1l	equ	0xFE1
   426                           indf2	equ	0xFDF
   427                           postinc2	equ	0xFDE
   428                           postdec2	equ	0xFDD
   429                           plusw2	equ	0xFDB
   430                           fsr2h	equ	0xFDA
   431                           fsr2l	equ	0xFD9
   432                           status	equ	0xFD8
   433                           
   434                           	psect	bssCOMRAM
   435  000046                     __pbssCOMRAM:
   436                           	opt stack 0
   437  000046                     _vscp_page_select:
   438                           	opt stack 0
   439  000046                     	ds	2
   440  000048                     __ECANRxFilterHitInfo:
   441                           	opt stack 0
   442  000048                     	ds	1
   443  000049                     _adc_series_counter:
   444                           	opt stack 0
   445  000049                     	ds	1
   446  00004A                     _sendTimer:
   447                           	opt stack 0
   448  00004A                     	ds	1
   449  00004B                     _vscp_alarmstatus:
   450                           	opt stack 0
   451  00004B                     	ds	1
   452  00004C                     _vscp_guid_reset:
   453                           	opt stack 0
   454  00004C                     	ds	1
   455  00004D                     _vscp_initledfunc:
   456                           	opt stack 0
   457  00004D                     	ds	1
   458  00004E                     _vscp_node_substate:
   459                           	opt stack 0
   460  00004E                     	ds	1
   461  00004F                     _vscp_probe_address:
   462                           	opt stack 0
   463  00004F                     	ds	1
   464  000050                     _vscp_probe_cnt:
   465                           	opt stack 0
   466  000050                     	ds	1
   467  000051                     _vscp_second:
   468                           	opt stack 0
   469  000051                     	ds	1
   470  000052                     _vscp_statuscnt:
   471                           	opt stack 0
   472  000052                     	ds	1
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           prodh	equ	0xFF4
   478                           prodl	equ	0xFF3
   479                           intcon	equ	0xFF2
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           indf1	equ	0xFE7
   483                           postdec1	equ	0xFE5
   484                           fsr1h	equ	0xFE2
   485                           fsr1l	equ	0xFE1
   486                           indf2	equ	0xFDF
   487                           postinc2	equ	0xFDE
   488                           postdec2	equ	0xFDD
   489                           plusw2	equ	0xFDB
   490                           fsr2h	equ	0xFDA
   491                           fsr2l	equ	0xFD9
   492                           status	equ	0xFD8
   493                           
   494                           	psect	bssBANK0
   495  0000B3                     __pbssBANK0:
   496                           	opt stack 0
   497  0000B3                     _adc_conversion_flags:
   498                           	opt stack 0
   499  0000B3                     	ds	1
   500  0000B4                     _high_alarm:
   501                           	opt stack 0
   502  0000B4                     	ds	1
   503  0000B5                     _low_alarm:
   504                           	opt stack 0
   505  0000B5                     	ds	1
   506  0000B6                     _seconds:
   507                           	opt stack 0
   508  0000B6                     	ds	1
   509  0000B7                     _vscp_hour:
   510                           	opt stack 0
   511  0000B7                     	ds	1
   512  0000B8                     _vscp_initbtncnt:
   513                           	opt stack 0
   514  0000B8                     	ds	1
   515  0000B9                     _vscp_minute:
   516                           	opt stack 0
   517  0000B9                     	ds	1
   518  0000BA                     _vscp_nickname:
   519                           	opt stack 0
   520  0000BA                     	ds	1
   521  0000BB                     _vscp_node_state:
   522                           	opt stack 0
   523  0000BB                     	ds	1
   524  0000BC                     _vscp_imsg:
   525                           	opt stack 0
   526  0000BC                     	ds	14
   527  0000CA                     _vscp_omsg:
   528                           	opt stack 0
   529  0000CA                     	ds	13
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           prodh	equ	0xFF4
   535                           prodl	equ	0xFF3
   536                           intcon	equ	0xFF2
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           indf1	equ	0xFE7
   540                           postdec1	equ	0xFE5
   541                           fsr1h	equ	0xFE2
   542                           fsr1l	equ	0xFE1
   543                           indf2	equ	0xFDF
   544                           postinc2	equ	0xFDE
   545                           postdec2	equ	0xFDD
   546                           plusw2	equ	0xFDB
   547                           fsr2h	equ	0xFDA
   548                           fsr2l	equ	0xFD9
   549                           status	equ	0xFD8
   550                           
   551                           	psect	bssBANK1
   552  000100                     __pbssBANK1:
   553                           	opt stack 0
   554  000100                     _current_temp:
   555                           	opt stack 0
   556  000100                     	ds	12
   557  00010C                     _seconds_temp:
   558                           	opt stack 0
   559  00010C                     	ds	6
   560  000112                     _measurement_clock:
   561                           	opt stack 0
   562  000112                     	ds	4
   563  000116                     _timeout_clock:
   564                           	opt stack 0
   565  000116                     	ds	4
   566  00011A                     _vscp_configtimer:
   567                           	opt stack 0
   568  00011A                     	ds	2
   569  00011C                     _vscp_timer:
   570                           	opt stack 0
   571  00011C                     	ds	2
   572  00011E                     __IT_INT_MASK:
   573                           	opt stack 0
   574  00011E                     	ds	1
   575  00011F                     __IT_SAVE_BSR:
   576                           	opt stack 0
   577  00011F                     	ds	1
   578  000120                     __IT_SAVE_STATUS:
   579                           	opt stack 0
   580  000120                     	ds	1
   581  000121                     __IT_SAVE_WREG:
   582                           	opt stack 0
   583  000121                     	ds	1
   584  000122                     ___DCByte:
   585                           	opt stack 0
   586  000122                     	ds	1
   587  000123                     _sh_coefficients:
   588                           	opt stack 0
   589  000123                     	ds	72
   590                           tblptru	equ	0xFF8
   591                           tblptrh	equ	0xFF7
   592                           tblptrl	equ	0xFF6
   593                           tablat	equ	0xFF5
   594                           prodh	equ	0xFF4
   595                           prodl	equ	0xFF3
   596                           intcon	equ	0xFF2
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           indf1	equ	0xFE7
   600                           postdec1	equ	0xFE5
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           indf2	equ	0xFDF
   604                           postinc2	equ	0xFDE
   605                           postdec2	equ	0xFDD
   606                           plusw2	equ	0xFDB
   607                           fsr2h	equ	0xFDA
   608                           fsr2l	equ	0xFD9
   609                           status	equ	0xFD8
   610                           
   611                           	psect	bssBIGRAM
   612  0001A2                     __pbssBIGRAM:
   613                           	opt stack 0
   614  0001A2                     _adc:
   615                           	opt stack 0
   616  0001A2                     	ds	960
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           prodh	equ	0xFF4
   622                           prodl	equ	0xFF3
   623                           intcon	equ	0xFF2
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           indf1	equ	0xFE7
   627                           postdec1	equ	0xFE5
   628                           fsr1h	equ	0xFE2
   629                           fsr1l	equ	0xFE1
   630                           indf2	equ	0xFDF
   631                           postinc2	equ	0xFDE
   632                           postdec2	equ	0xFDD
   633                           plusw2	equ	0xFDB
   634                           fsr2h	equ	0xFDA
   635                           fsr2l	equ	0xFD9
   636                           status	equ	0xFD8
   637                           
   638                           	psect	cstackBANK1
   639  00016B                     __pcstackBANK1:
   640                           	opt stack 0
   641  00016B                     doWork@Rinf:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x0
   645  00016B                     	ds	4
   646  00016F                     doWork@calVoltage:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x4
   650  00016F                     	ds	4
   651  000173                     _doWork$2278:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x8
   655  000173                     	ds	4
   656  000177                     _doWork$2279:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0xC
   660  000177                     	ds	4
   661  00017B                     _doWork$2280:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x10
   665  00017B                     	ds	16
   666  00018B                     doWork@v:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x20
   670  00018B                     	ds	4
   671  00018F                     doWork@B:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x24
   675  00018F                     	ds	2
   676  000191                     doWork@resistance:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x26
   680  000191                     	ds	4
   681  000195                     doWork@j:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x2A
   685  000195                     	ds	1
   686  000196                     doWork@avarage:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x2B
   690  000196                     	ds	4
   691  00019A                     doWork@setpoint:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x2F
   695  00019A                     	ds	2
   696  00019C                     doWork@temp:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x31
   700  00019C                     	ds	4
   701  0001A0                     doWork@i:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x35
   705  0001A0                     	ds	1
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           prodh	equ	0xFF4
   711                           prodl	equ	0xFF3
   712                           intcon	equ	0xFF2
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           indf1	equ	0xFE7
   716                           postdec1	equ	0xFE5
   717                           fsr1h	equ	0xFE2
   718                           fsr1l	equ	0xFE1
   719                           indf2	equ	0xFDF
   720                           postinc2	equ	0xFDE
   721                           postdec2	equ	0xFDD
   722                           plusw2	equ	0xFDB
   723                           fsr2h	equ	0xFDA
   724                           fsr2l	equ	0xFD9
   725                           status	equ	0xFD8
   726                           
   727                           	psect	cstackBANK0
   728  000060                     __pcstackBANK0:
   729                           	opt stack 0
   730  000060                     ?_sendVSCPFrame:
   731                           	opt stack 0
   732  000060                     ?___flmul:
   733                           	opt stack 0
   734  000060                     ?___asfldiv:
   735                           	opt stack 0
   736  000060                     sendVSCPFrame@vscpclass:
   737                           	opt stack 0
   738  000060                     ___asfldiv@f1p:
   739                           	opt stack 0
   740  000060                     ___flmul@f1:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x0
   744  000060                     	ds	2
   745  000062                     sendVSCPFrame@vscptype:
   746                           	opt stack 0
   747  000062                     ___asfldiv@f2:
   748                           	opt stack 0
   749                           
   750                           ; 4 bytes @ 0x2
   751  000062                     	ds	1
   752  000063                     sendVSCPFrame@nodeid:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x3
   756  000063                     	ds	1
   757  000064                     sendVSCPFrame@priority:
   758                           	opt stack 0
   759  000064                     ___flmul@f2:
   760                           	opt stack 0
   761                           
   762                           ; 4 bytes @ 0x4
   763  000064                     	ds	1
   764  000065                     sendVSCPFrame@size:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x5
   768  000065                     	ds	1
   769  000066                     sendVSCPFrame@pData:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x6
   773  000066                     	ds	1
   774  000067                     ??_sendVSCPFrame:
   775                           
   776                           ; 0 bytes @ 0x7
   777  000067                     	ds	8
   778  00006F                     ___flmul@exp:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0xF
   782  00006F                     	ds	1
   783  000070                     ___flmul@f3_as_product:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x10
   787  000070                     	ds	4
   788  000074                     ___flmul@cntr:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x14
   792  000074                     	ds	1
   793  000075                     ___flmul@sign:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x15
   797  000075                     	ds	1
   798  000076                     ?_Celsius2Fahrenheit:
   799                           	opt stack 0
   800  000076                     ?___flsub:
   801                           	opt stack 0
   802  000076                     ?_eval_poly:
   803                           	opt stack 0
   804  000076                     ?___asflmul:
   805                           	opt stack 0
   806  000076                     ?___fltol:
   807                           	opt stack 0
   808  000076                     Celsius2Fahrenheit@tc:
   809                           	opt stack 0
   810  000076                     ___asflmul@multiplicand:
   811                           	opt stack 0
   812  000076                     ___flsub@f1:
   813                           	opt stack 0
   814  000076                     ___fltol@f1:
   815                           	opt stack 0
   816  000076                     eval_poly@x:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x16
   820  000076                     	ds	4
   821  00007A                     ___fltol@sign1:
   822                           	opt stack 0
   823  00007A                     eval_poly@d:
   824                           	opt stack 0
   825  00007A                     ___flsub@f2:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x1A
   829  00007A                     	ds	1
   830  00007B                     ___fltol@exp1:
   831                           	opt stack 0
   832  00007B                     eval_poly@n:
   833                           	opt stack 0
   834  00007B                     sendVSCPFrame@id:
   835                           	opt stack 0
   836                           
   837                           ; 4 bytes @ 0x1B
   838  00007B                     	ds	1
   839  00007C                     ?_setEventData:
   840                           	opt stack 0
   841  00007C                     ?___aldiv:
   842                           	opt stack 0
   843  00007C                     setEventData@v:
   844                           	opt stack 0
   845  00007C                     ___aldiv@dividend:
   846                           	opt stack 0
   847                           
   848                           ; 4 bytes @ 0x1C
   849  00007C                     	ds	1
   850  00007D                     eval_poly@res:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x1D
   854  00007D                     	ds	1
   855  00007E                     ?___asflsub:
   856                           	opt stack 0
   857  00007E                     setEventData@unit:
   858                           	opt stack 0
   859  00007E                     ___asflsub@f1p:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x1E
   863  00007E                     	ds	1
   864  00007F                     ??_vscp_handleProtocolEvent:
   865  00007F                     ??_vscp_doOneSecondWork:
   866  00007F                     setEventData@newval:
   867                           	opt stack 0
   868                           
   869                           ; 4 bytes @ 0x1F
   870  00007F                     	ds	1
   871  000080                     ___aldiv@divisor:
   872                           	opt stack 0
   873  000080                     ___asflsub@f2:
   874                           	opt stack 0
   875                           
   876                           ; 4 bytes @ 0x20
   877  000080                     	ds	1
   878  000081                     ?_log:
   879                           	opt stack 0
   880  000081                     ?_ldexp:
   881                           	opt stack 0
   882  000081                     ldexp@value:
   883                           	opt stack 0
   884  000081                     log@x:
   885                           	opt stack 0
   886                           
   887                           ; 4 bytes @ 0x21
   888  000081                     	ds	2
   889  000083                     setEventData@ival:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x23
   893  000083                     	ds	1
   894  000084                     ___aldiv@counter:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x24
   898  000084                     	ds	1
   899  000085                     ??_sendTempEvent:
   900  000085                     ___aldiv@sign:
   901                           	opt stack 0
   902  000085                     ldexp@newexp:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x25
   906  000085                     	ds	1
   907  000086                     sendTempEvent@i:
   908                           	opt stack 0
   909  000086                     vscp_handleProtocolEvent@page_save:
   910                           	opt stack 0
   911  000086                     ___aldiv@quotient:
   912                           	opt stack 0
   913                           
   914                           ; 4 bytes @ 0x26
   915  000086                     	ds	1
   916  000087                     ??_handle_sync:
   917  000087                     ??_doOneSecondWork:
   918                           
   919                           ; 0 bytes @ 0x27
   920  000087                     	ds	1
   921  000088                     vscp_handleProtocolEvent@page_save_1167:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x28
   925  000088                     	ds	1
   926  000089                     doOneSecondWork@tmp:
   927                           	opt stack 0
   928  000089                     handle_sync@i:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x29
   932  000089                     	ds	1
   933  00008A                     ?___altofl:
   934                           	opt stack 0
   935  00008A                     doOneSecondWork@i:
   936                           	opt stack 0
   937  00008A                     vscp_handleProtocolEvent@offset:
   938                           	opt stack 0
   939  00008A                     ___altofl@c:
   940                           	opt stack 0
   941                           
   942                           ; 4 bytes @ 0x2A
   943  00008A                     	ds	1
   944  00008B                     vscp_handleProtocolEvent@pos:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x2B
   948  00008B                     	ds	1
   949  00008C                     vscp_handleProtocolEvent@bytes:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x2C
   953  00008C                     	ds	1
   954  00008D                     vscp_handleProtocolEvent@len:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x2D
   958  00008D                     	ds	1
   959  00008E                     vscp_handleProtocolEvent@pos_1156:
   960                           	opt stack 0
   961  00008E                     ___altofl@sign:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x2E
   965  00008E                     	ds	1
   966  00008F                     ?_floor:
   967                           	opt stack 0
   968  00008F                     vscp_handleProtocolEvent@len_1157:
   969                           	opt stack 0
   970  00008F                     floor@x:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x2F
   974  00008F                     	ds	1
   975  000090                     vscp_handleProtocolEvent@bytes_this_time:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x30
   979  000090                     	ds	1
   980  000091                     vscp_handleProtocolEvent@cb:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x31
   984  000091                     	ds	1
   985  000092                     vscp_handleProtocolEvent@i_1166:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x32
   989  000092                     	ds	1
   990  000093                     vscp_handleProtocolEvent@k:
   991                           	opt stack 0
   992  000093                     floor@i:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0x33
   996  000093                     	ds	1
   997  000094                     vscp_handleProtocolEvent@bytes_1163:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x34
  1001  000094                     	ds	1
  1002  000095                     vscp_handleProtocolEvent@i_1155:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x35
  1006  000095                     	ds	1
  1007  000096                     vscp_handleProtocolEvent@byte:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x36
  1011  000096                     	ds	1
  1012  000097                     vscp_handleProtocolEvent@i_1158:
  1013                           	opt stack 0
  1014  000097                     floor@expon:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x37
  1018  000097                     	ds	1
  1019  000098                     vscp_handleProtocolEvent@i:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x38
  1023  000098                     	ds	1
  1024  000099                     ?_exp:
  1025                           	opt stack 0
  1026  000099                     vscp_handleProtocolEvent@j:
  1027                           	opt stack 0
  1028  000099                     exp@x:
  1029                           	opt stack 0
  1030                           
  1031                           ; 4 bytes @ 0x39
  1032  000099                     	ds	4
  1033  00009D                     _exp$2284:
  1034                           	opt stack 0
  1035                           
  1036                           ; 4 bytes @ 0x3D
  1037  00009D                     	ds	4
  1038  0000A1                     exp@exponent:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x41
  1042  0000A1                     	ds	2
  1043  0000A3                     exp@sign:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x43
  1047  0000A3                     	ds	1
  1048  0000A4                     ??_doWork:
  1049                           
  1050                           ; 0 bytes @ 0x44
  1051  0000A4                     	ds	14
  1052  0000B2                     main@i:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x52
  1056  0000B2                     	ds	1
  1057                           tblptru	equ	0xFF8
  1058                           tblptrh	equ	0xFF7
  1059                           tblptrl	equ	0xFF6
  1060                           tablat	equ	0xFF5
  1061                           prodh	equ	0xFF4
  1062                           prodl	equ	0xFF3
  1063                           intcon	equ	0xFF2
  1064                           postinc0	equ	0xFEE
  1065                           wreg	equ	0xFE8
  1066                           indf1	equ	0xFE7
  1067                           postdec1	equ	0xFE5
  1068                           fsr1h	equ	0xFE2
  1069                           fsr1l	equ	0xFE1
  1070                           indf2	equ	0xFDF
  1071                           postinc2	equ	0xFDE
  1072                           postdec2	equ	0xFDD
  1073                           plusw2	equ	0xFDB
  1074                           fsr2h	equ	0xFDA
  1075                           fsr2l	equ	0xFD9
  1076                           status	equ	0xFD8
  1077                           
  1078                           	psect	cstackCOMRAM
  1079  000001                     __pcstackCOMRAM:
  1080                           	opt stack 0
  1081  000001                     ?i1_WriteTimer0:
  1082                           	opt stack 0
  1083  000001                     i1WriteTimer0@timer0:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x0
  1087  000001                     	ds	2
  1088  000003                     i1WriteTimer0@timer:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x2
  1092  000003                     	ds	2
  1093  000005                     ??_interrupt_at_low_vector:
  1094                           
  1095                           ; 0 bytes @ 0x4
  1096  000005                     	ds	9
  1097  00000E                     ?_WriteTimer0:
  1098                           	opt stack 0
  1099  00000E                     ?_writeEEPROM:
  1100                           	opt stack 0
  1101  00000E                     ?_OpenADC:
  1102                           	opt stack 0
  1103  00000E                     ?__CANIDToRegs:
  1104                           	opt stack 0
  1105  00000E                     ?__RegsToCANID:
  1106                           	opt stack 0
  1107  00000E                     ??_vscp_getMDF_URL:
  1108  00000E                     ?___flge:
  1109                           	opt stack 0
  1110  00000E                     ?_readEEPROM:
  1111                           	opt stack 0
  1112  00000E                     ?___lbmod:
  1113                           	opt stack 0
  1114  00000E                     ?__ECANPointBuffer:
  1115                           	opt stack 0
  1116  00000E                     ?___flpack:
  1117                           	opt stack 0
  1118  00000E                     ?_frexp:
  1119                           	opt stack 0
  1120  00000E                     ?_vscp_getFamilyCode:
  1121                           	opt stack 0
  1122  00000E                     ?_vscp_getFamilyType:
  1123                           	opt stack 0
  1124  00000E                     ?___flneg:
  1125                           	opt stack 0
  1126  00000E                     vscp_getMatrixInfo@pData:
  1127                           	opt stack 0
  1128  00000E                     ECANSetOperationMode@mode:
  1129                           	opt stack 0
  1130  00000E                     OpenADC@config2:
  1131                           	opt stack 0
  1132  00000E                     OpenTimer0@config:
  1133                           	opt stack 0
  1134  00000E                     ___lbmod@divisor:
  1135                           	opt stack 0
  1136  00000E                     __CANIDToRegs@ptr:
  1137                           	opt stack 0
  1138  00000E                     __RegsToCANID@ptr:
  1139                           	opt stack 0
  1140  00000E                     writeEEPROM@address:
  1141                           	opt stack 0
  1142  00000E                     readEEPROM@address:
  1143                           	opt stack 0
  1144  00000E                     WriteTimer0@timer0:
  1145                           	opt stack 0
  1146  00000E                     ___flpack@arg:
  1147                           	opt stack 0
  1148  00000E                     ___flge@ff1:
  1149                           	opt stack 0
  1150  00000E                     ___flneg@f1:
  1151                           	opt stack 0
  1152  00000E                     frexp@value:
  1153                           	opt stack 0
  1154                           
  1155                           ; 4 bytes @ 0xD
  1156  00000E                     	ds	1
  1157  00000F                     vscp_getMDF_URL@idx:
  1158                           	opt stack 0
  1159  00000F                     vscp_getMatrixInfo@i:
  1160                           	opt stack 0
  1161  00000F                     OpenADC@portconfig:
  1162                           	opt stack 0
  1163  00000F                     ___lbmod@dividend:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0xE
  1167  00000F                     	ds	1
  1168  000010                     ??_OpenADC:
  1169  000010                     __RegsToCANID@val:
  1170                           	opt stack 0
  1171  000010                     writeEEPROM@data:
  1172                           	opt stack 0
  1173  000010                     ___lbmod@counter:
  1174                           	opt stack 0
  1175  000010                     WriteTimer0@timer:
  1176                           	opt stack 0
  1177  000010                     __CANIDToRegs@val:
  1178                           	opt stack 0
  1179                           
  1180                           ; 4 bytes @ 0xF
  1181  000010                     	ds	1
  1182  000011                     ?_vscp_setGUID:
  1183                           	opt stack 0
  1184  000011                     ?_vscp_setUserID:
  1185                           	opt stack 0
  1186  000011                     ?_vscp_setManufacturerId:
  1187                           	opt stack 0
  1188  000011                     init_app_eeprom@i:
  1189                           	opt stack 0
  1190  000011                     vscp_setGUID@data:
  1191                           	opt stack 0
  1192  000011                     vscp_setUserID@data:
  1193                           	opt stack 0
  1194  000011                     vscp_setManufacturerId@data:
  1195                           	opt stack 0
  1196  000011                     vscp_goBootloaderMode@algorithm:
  1197                           	opt stack 0
  1198  000011                     vscp_writeNicknamePermanent@nickname:
  1199                           	opt stack 0
  1200  000011                     vscp_setSegmentCRC@crc:
  1201                           	opt stack 0
  1202  000011                     vscp_setControlByte@ctrl:
  1203                           	opt stack 0
  1204  000011                     __RegsToCANID@type:
  1205                           	opt stack 0
  1206  000011                     __ECANPointBuffer@b:
  1207                           	opt stack 0
  1208  000011                     readEEPROM@data:
  1209                           	opt stack 0
  1210  000011                     ___lbmod@rem:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x10
  1214  000011                     	ds	1
  1215  000012                     ??__RegsToCANID:
  1216  000012                     ?_getCalibrationValue:
  1217                           	opt stack 0
  1218  000012                     ?___wmul:
  1219                           	opt stack 0
  1220  000012                     vscp_readAppReg@pos:
  1221                           	opt stack 0
  1222  000012                     vscp_getGUID@idx:
  1223                           	opt stack 0
  1224  000012                     vscp_setGUID@idx:
  1225                           	opt stack 0
  1226  000012                     vscp_getUserID@idx:
  1227                           	opt stack 0
  1228  000012                     vscp_setUserID@idx:
  1229                           	opt stack 0
  1230  000012                     vscp_getManufacturerId@idx:
  1231                           	opt stack 0
  1232  000012                     vscp_setManufacturerId@idx:
  1233                           	opt stack 0
  1234  000012                     vscp_handleDropNickname@bytes:
  1235                           	opt stack 0
  1236  000012                     OpenADC@config:
  1237                           	opt stack 0
  1238  000012                     ___flpack@exp:
  1239                           	opt stack 0
  1240  000012                     __ECANPointBuffer@pt:
  1241                           	opt stack 0
  1242  000012                     frexp@eptr:
  1243                           	opt stack 0
  1244  000012                     ___wmul@multiplier:
  1245                           	opt stack 0
  1246  000012                     ___flge@ff2:
  1247                           	opt stack 0
  1248                           
  1249                           ; 4 bytes @ 0x11
  1250  000012                     	ds	1
  1251  000013                     vscp_readAppReg@reg:
  1252                           	opt stack 0
  1253  000013                     vscp_readStdReg@rv:
  1254                           	opt stack 0
  1255  000013                     ___flpack@sign:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x12
  1259  000013                     	ds	1
  1260  000014                     ??_getCalibrationValue:
  1261  000014                     ??___flpack:
  1262  000014                     ??_frexp:
  1263  000014                     vscp_readAppReg@rv:
  1264                           	opt stack 0
  1265  000014                     __CANIDToRegs@type:
  1266                           	opt stack 0
  1267  000014                     __RegsToCANID@Value:
  1268                           	opt stack 0
  1269  000014                     vscp_readStdReg@reg:
  1270                           	opt stack 0
  1271  000014                     ___wmul@multiplicand:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x13
  1275  000014                     	ds	1
  1276  000015                     ??__CANIDToRegs:
  1277  000015                     ?_ECANReceiveMessage:
  1278                           	opt stack 0
  1279  000015                     ECANReceiveMessage@data:
  1280                           	opt stack 0
  1281  000015                     vscp_readRegister@reg:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x14
  1285  000015                     	ds	1
  1286  000016                     ECANReceiveMessage@dataLen:
  1287                           	opt stack 0
  1288  000016                     ___wmul@product:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x15
  1292  000016                     	ds	1
  1293  000017                     ECANReceiveMessage@msgFlags:
  1294                           	opt stack 0
  1295  000017                     __CANIDToRegs@Value:
  1296                           	opt stack 0
  1297  000017                     getCalibrationValue@cal:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x16
  1301  000017                     	ds	1
  1302  000018                     ??_writeCoeffs2Ram:
  1303  000018                     ?_ECANSendMessage:
  1304                           	opt stack 0
  1305  000018                     ?___awtofl:
  1306                           	opt stack 0
  1307  000018                     ?___lwtofl:
  1308                           	opt stack 0
  1309  000018                     ECANReceiveMessage@savedPtr:
  1310                           	opt stack 0
  1311  000018                     ___awtofl@c:
  1312                           	opt stack 0
  1313  000018                     ___lwtofl@c:
  1314                           	opt stack 0
  1315  000018                     ECANSendMessage@id:
  1316                           	opt stack 0
  1317                           
  1318                           ; 4 bytes @ 0x17
  1319  000018                     	ds	1
  1320  000019                     getCalibrationValue@i:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x18
  1324  000019                     	ds	1
  1325  00001A                     ECANReceiveMessage@id:
  1326                           	opt stack 0
  1327  00001A                     writeCoeffs2Ram@c:
  1328                           	opt stack 0
  1329                           
  1330                           ; 3 bytes @ 0x19
  1331  00001A                     	ds	1
  1332  00001B                     ECANReceiveMessage@i:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x1A
  1336  00001B                     	ds	1
  1337  00001C                     ECANSendMessage@data:
  1338                           	opt stack 0
  1339  00001C                     ECANReceiveMessage@mode:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x1B
  1343  00001C                     	ds	1
  1344  00001D                     ?___fladd:
  1345                           	opt stack 0
  1346  00001D                     ECANSendMessage@dataLen:
  1347                           	opt stack 0
  1348  00001D                     ECANReceiveMessage@temp:
  1349                           	opt stack 0
  1350  00001D                     writeCoeffs2Ram@i:
  1351                           	opt stack 0
  1352  00001D                     ___fladd@f1:
  1353                           	opt stack 0
  1354                           
  1355                           ; 4 bytes @ 0x1C
  1356  00001D                     	ds	1
  1357  00001E                     ECANSendMessage@msgFlags:
  1358                           	opt stack 0
  1359  00001E                     ___awtofl@sign:
  1360                           	opt stack 0
  1361  00001E                     ECANReceiveMessage@ptr:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x1D
  1365  00001E                     	ds	1
  1366  00001F                     ??_ECANSendMessage:
  1367  00001F                     writeCoeffs2Ram@j:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x1E
  1371  00001F                     	ds	1
  1372  000020                     ?_getCANFrame:
  1373                           	opt stack 0
  1374  000020                     getCANFrame@pdlc:
  1375                           	opt stack 0
  1376  000020                     ECANSendMessage@pb:
  1377                           	opt stack 0
  1378                           
  1379                           ; 18 bytes @ 0x1F
  1380  000020                     	ds	1
  1381  000021                     ?_vscp_writeAppReg:
  1382                           	opt stack 0
  1383  000021                     init_app_ram@i:
  1384                           	opt stack 0
  1385  000021                     vscp_writeAppReg@val:
  1386                           	opt stack 0
  1387  000021                     getCANFrame@pdata:
  1388                           	opt stack 0
  1389  000021                     ___fladd@f2:
  1390                           	opt stack 0
  1391                           
  1392                           ; 4 bytes @ 0x20
  1393  000021                     	ds	1
  1394  000022                     ?_vscp_writeStdReg:
  1395                           	opt stack 0
  1396  000022                     vscp_writeAppReg@pos:
  1397                           	opt stack 0
  1398  000022                     getCANFrame@pid:
  1399                           	opt stack 0
  1400  000022                     vscp_writeStdReg@value:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x21
  1404  000022                     	ds	1
  1405  000023                     ??_vscp_writeStdReg:
  1406  000023                     vscp_writeAppReg@reg:
  1407                           	opt stack 0
  1408  000023                     getCANFrame@flags:
  1409                           	opt stack 0
  1410                           
  1411                           ; 1 bytes @ 0x22
  1412  000023                     	ds	1
  1413  000024                     ?_getVSCPFrame:
  1414                           	opt stack 0
  1415  000024                     vscp_writeAppReg@rv:
  1416                           	opt stack 0
  1417  000024                     getVSCPFrame@pvscptype:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x23
  1421  000024                     	ds	1
  1422  000025                     ??___fladd:
  1423  000025                     getVSCPFrame@pNodeId:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x24
  1427  000025                     	ds	1
  1428  000026                     getVSCPFrame@pPriority:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x25
  1432  000026                     	ds	1
  1433  000027                     getVSCPFrame@pSize:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x26
  1437  000027                     	ds	1
  1438  000028                     getVSCPFrame@pData:
  1439                           	opt stack 0
  1440  000028                     vscp_writeStdReg@code:
  1441                           	opt stack 0
  1442                           
  1443                           ; 4 bytes @ 0x27
  1444  000028                     	ds	1
  1445  000029                     ??_getVSCPFrame:
  1446  000029                     ___fladd@sign:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x28
  1450  000029                     	ds	1
  1451  00002A                     ___fladd@exp2:
  1452                           	opt stack 0
  1453                           
  1454                           ; 1 bytes @ 0x29
  1455  00002A                     	ds	1
  1456  00002B                     ___fladd@exp1:
  1457                           	opt stack 0
  1458                           
  1459                           ; 1 bytes @ 0x2A
  1460  00002B                     	ds	1
  1461  00002C                     ?_Celsius2Kelvin:
  1462                           	opt stack 0
  1463  00002C                     ?___fldiv:
  1464                           	opt stack 0
  1465  00002C                     ?___asfladd:
  1466                           	opt stack 0
  1467  00002C                     ___asfladd@f1p:
  1468                           	opt stack 0
  1469  00002C                     Celsius2Kelvin@tc:
  1470                           	opt stack 0
  1471  00002C                     vscp_writeStdReg@code_1147:
  1472                           	opt stack 0
  1473  00002C                     ___fldiv@f1:
  1474                           	opt stack 0
  1475                           
  1476                           ; 4 bytes @ 0x2B
  1477  00002C                     	ds	1
  1478  00002D                     getVSCPFrame@pvscpclass:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x2C
  1482  00002D                     	ds	1
  1483  00002E                     getVSCPFrame@id:
  1484                           	opt stack 0
  1485  00002E                     ___asfladd@f2:
  1486                           	opt stack 0
  1487                           
  1488                           ; 4 bytes @ 0x2D
  1489  00002E                     	ds	2
  1490  000030                     vscp_writeStdReg@idx:
  1491                           	opt stack 0
  1492  000030                     ___fldiv@f2:
  1493                           	opt stack 0
  1494                           
  1495                           ; 4 bytes @ 0x2F
  1496  000030                     	ds	1
  1497  000031                     vscp_writeStdReg@idx_1148:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x30
  1501  000031                     	ds	1
  1502  000032                     ECANSendMessage@mode:
  1503                           	opt stack 0
  1504  000032                     vscp_writeStdReg@rv:
  1505                           	opt stack 0
  1506  000032                     vscp_getEvent@rv:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0x31
  1510  000032                     	ds	1
  1511  000033                     ECANSendMessage@buffers:
  1512                           	opt stack 0
  1513  000033                     vscp_writeStdReg@reg:
  1514                           	opt stack 0
  1515                           
  1516                           ; 1 bytes @ 0x32
  1517  000033                     	ds	1
  1518  000034                     ?_vscp_writeRegister:
  1519                           	opt stack 0
  1520  000034                     ECANSendMessage@j:
  1521                           	opt stack 0
  1522  000034                     vscp_writeRegister@value:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x33
  1526  000034                     	ds	1
  1527  000035                     ECANSendMessage@tempBSEL0:
  1528                           	opt stack 0
  1529  000035                     vscp_writeRegister@reg:
  1530                           	opt stack 0
  1531                           
  1532                           ; 1 bytes @ 0x34
  1533  000035                     	ds	1
  1534  000036                     ECANSendMessage@tempPtr:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x35
  1538  000036                     	ds	2
  1539  000038                     ECANSendMessage@temp:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x37
  1543  000038                     	ds	1
  1544  000039                     ECANSendMessage@i:
  1545                           	opt stack 0
  1546                           
  1547                           ; 1 bytes @ 0x38
  1548  000039                     	ds	1
  1549  00003A                     ECANSendMessage@ptr:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x39
  1553  00003A                     	ds	1
  1554  00003B                     ___fldiv@f3:
  1555                           	opt stack 0
  1556                           
  1557                           ; 4 bytes @ 0x3A
  1558  00003B                     	ds	1
  1559  00003C                     ?_sendCANFrame:
  1560                           	opt stack 0
  1561  00003C                     sendCANFrame@id:
  1562                           	opt stack 0
  1563                           
  1564                           ; 4 bytes @ 0x3B
  1565  00003C                     	ds	3
  1566  00003F                     ___fldiv@cntr:
  1567                           	opt stack 0
  1568                           
  1569                           ; 1 bytes @ 0x3E
  1570  00003F                     	ds	1
  1571  000040                     sendCANFrame@dlc:
  1572                           	opt stack 0
  1573  000040                     ___fldiv@exp:
  1574                           	opt stack 0
  1575                           
  1576                           ; 1 bytes @ 0x3F
  1577  000040                     	ds	1
  1578  000041                     sendCANFrame@pdata:
  1579                           	opt stack 0
  1580  000041                     ___fldiv@sign:
  1581                           	opt stack 0
  1582                           
  1583                           ; 1 bytes @ 0x40
  1584  000041                     	ds	1
  1585  000042                     ??_eval_poly:
  1586  000042                     ??___fltol:
  1587  000042                     sendCANFrame@rv:
  1588                           	opt stack 0
  1589  000042                     ___asflmul@mp:
  1590                           	opt stack 0
  1591                           
  1592                           ; 1 bytes @ 0x41
  1593  000042                     	ds	1
  1594  000043                     ??_ldexp:
  1595  000043                     vscp_sendEvent@rv:
  1596                           	opt stack 0
  1597  000043                     log@exponent:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x42
  1601  000043                     	ds	1
  1602  000044                     ?_vscp_sendHeartBeat:
  1603                           	opt stack 0
  1604  000044                     ??_vscp_newNodeOnline:
  1605  000044                     vscp_sendHeartBeat@subzone:
  1606                           	opt stack 0
  1607                           
  1608                           ; 1 bytes @ 0x43
  1609  000044                     	ds	1
  1610  000045                     vscp_sendHeartBeat@zone:
  1611                           	opt stack 0
  1612                           
  1613                           ; 1 bytes @ 0x44
  1614  000045                     	ds	1
  1615  000046                     tblptru	equ	0xFF8
  1616                           tblptrh	equ	0xFF7
  1617                           tblptrl	equ	0xFF6
  1618                           tablat	equ	0xFF5
  1619                           prodh	equ	0xFF4
  1620                           prodl	equ	0xFF3
  1621                           intcon	equ	0xFF2
  1622                           postinc0	equ	0xFEE
  1623                           wreg	equ	0xFE8
  1624                           indf1	equ	0xFE7
  1625                           postdec1	equ	0xFE5
  1626                           fsr1h	equ	0xFE2
  1627                           fsr1l	equ	0xFE1
  1628                           indf2	equ	0xFDF
  1629                           postinc2	equ	0xFDE
  1630                           postdec2	equ	0xFDD
  1631                           plusw2	equ	0xFDB
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636                           ; 0 bytes @ 0x45
  1637 ;;
  1638 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1639 ;;
  1640 ;; *************** function _main *****************
  1641 ;; Defined at:
  1642 ;;		line 300 in file "../main.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  i               1   82[BANK0 ] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;		None               void
  1649 ;; Registers used:
  1650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : E/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1656 ;;      Params:         0       0       0       0       0       0       0
  1657 ;;      Locals:         0       1       0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0
  1659 ;;      Totals:         0       1       0       0       0       0       0
  1660 ;;Total ram usage:        1 bytes
  1661 ;; Hardware stack levels required when called:    9
  1662 ;; This function calls:
  1663 ;;		_init
  1664 ;;		_vscp_check_pstorage
  1665 ;;		_init_app_eeprom
  1666 ;;		_vscp_init
  1667 ;;		_writeEEPROM
  1668 ;;		_vscp_getEvent
  1669 ;;		_vscp_goActiveState
  1670 ;;		_vscp_handleProbeState
  1671 ;;		_vscp_handleProtocolEvent
  1672 ;;		_handle_sync
  1673 ;;		_vscp_error
  1674 ;;		_doOneSecondWork
  1675 ;;		_vscp_doOneSecondWork
  1676 ;;		_doWork
  1677 ;; This function is called by:
  1678 ;;		Startup code after reset
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text0
  1683  003EBC                     __ptext0:
  1684                           	opt stack 0
  1685  003EBC                     _main:
  1686                           	opt stack 21
  1687                           
  1688                           ;main.c: 301: unsigned char i;
  1689                           ;main.c: 303: init();
  1690                           
  1691                           ;incstack = 0
  1692                           ;incstack = 0
  1693  003EBC  ECF7  F027         	call	_init	;wreg free
  1694                           
  1695                           ;main.c: 307: if (!vscp_check_pstorage()) {
  1696  003EC0  EC44  F029         	call	_vscp_check_pstorage	;wreg free
  1697  003EC4  0900               	iorlw	0
  1698  003EC6  B4D8               	btfsc	status,2,c
  1699                           
  1700                           ;main.c: 310: init_app_eeprom();
  1701  003EC8  EC9C  F011         	call	_init_app_eeprom	;wreg free
  1702                           
  1703                           ;main.c: 312: }
  1704                           ;main.c: 314: vscp_init();
  1705  003ECC  EC33  F027         	call	_vscp_init	;wreg free
  1706  003ED0                     l168:
  1707  003ED0  0004               	clrwdt		;# 
  1708                           
  1709                           ;main.c: 320: if ((vscp_initbtncnt > 250) &&
  1710                           ;main.c: 321: (0x01 != vscp_node_state)) {
  1711  003ED2  0EFA               	movlw	250
  1712  003ED4  0100               	movlb	0	; () banked
  1713  003ED6  65B8               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1714  003ED8  D00C               	goto	l11980
  1715                           
  1716                           ; BSR set to: 0
  1717  003EDA  05BB               	decf	_vscp_node_state& (0+255),w,b
  1718  003EDC  E00A               	bz	l11980
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 324: vscp_nickname = 0xff;
  1722  003EDE  69BA               	setf	_vscp_nickname& (0+255),b
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;main.c: 325: writeEEPROM(0x01, 0xff);
  1726  003EE0  6A0F               	clrf	?_writeEEPROM+1,c
  1727  003EE2  0E01               	movlw	1
  1728  003EE4  6E0E               	movwf	?_writeEEPROM,c
  1729  003EE6  0EFF               	movlw	255
  1730  003EE8  6810               	setf	?_writeEEPROM+2,c
  1731  003EEA  EC0D  F029         	call	_writeEEPROM	;wreg free
  1732                           
  1733                           ;main.c: 326: vscp_init();
  1734  003EEE  EC33  F027         	call	_vscp_init	;wreg free
  1735  003EF2                     l11980:
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;main.c: 328: }
  1739                           ;main.c: 332: vscp_imsg.flags = 0;
  1740  003EF2  6BBC               	clrf	_vscp_imsg& (0+255),b
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;main.c: 333: vscp_getEvent();
  1744  003EF4  ECBD  F028         	call	_vscp_getEvent	;wreg free
  1745                           
  1746                           ;main.c: 336: switch (vscp_node_state) {
  1747  003EF8  D024               	goto	l12010
  1748  003EFA                     l11984:
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 341: if (0xff == vscp_nickname) {
  1752  003EFA  29BA               	incf	_vscp_nickname& (0+255),w,b
  1753  003EFC  E103               	bnz	l11988
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 343: vscp_node_state = 0x01;
  1757  003EFE  0E01               	movlw	1
  1758  003F00  6FBB               	movwf	_vscp_node_state& (0+255),b
  1759                           
  1760                           ;main.c: 344: }
  1761  003F02  D02B               	goto	l12012
  1762  003F04                     l11988:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;main.c: 345: else {
  1766                           ;main.c: 347: vscp_node_state = 0x03;
  1767  003F04  0E03               	movlw	3
  1768  003F06  6FBB               	movwf	_vscp_node_state& (0+255),b
  1769  003F08                     l11990:
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;main.c: 348: vscp_goActiveState();
  1773  003F08  EC78  F029         	call	_vscp_goActiveState	;wreg free
  1774  003F0C  D026               	goto	l12012
  1775  003F0E                     l11992:
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;main.c: 353: vscp_handleProbeState();
  1779  003F0E  ECAD  F020         	call	_vscp_handleProbeState	;wreg free
  1780                           
  1781                           ;main.c: 354: break;
  1782  003F12  D023               	goto	l12012
  1783  003F14                     l177:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 363: if (vscp_imsg.flags & 0x80) {
  1787  003F14  AFBC               	btfss	_vscp_imsg& (0+255),7,b
  1788  003F16  D021               	goto	l12012
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;main.c: 365: if (0 == vscp_imsg.vscp_class) {
  1792  003F18  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  1793  003F1A  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1794  003F1C  E103               	bnz	l12000
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 368: vscp_handleProtocolEvent();
  1798  003F1E  EC1C  F015         	call	_vscp_handleProtocolEvent	;wreg free
  1799                           
  1800                           ;main.c: 370: }
  1801  003F22  D01B               	goto	l12012
  1802  003F24                     l12000:
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 371: else if ((30 == vscp_imsg.vscp_class) &&
  1806                           ;main.c: 372: (26 == vscp_imsg.vscp_type)) {
  1807  003F24  51BE               	movf	(_vscp_imsg+2)& (0+255),w,b
  1808  003F26  0A1E               	xorlw	30
  1809  003F28  11BF               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1810  003F2A  E117               	bnz	l12012
  1811                           
  1812                           ; BSR set to: 0
  1813  003F2C  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  1814  003F2E  0A1A               	xorlw	26
  1815  003F30  E114               	bnz	l12012
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;main.c: 373: handle_sync();
  1819  003F32  ECA9  F024         	call	_handle_sync	;wreg free
  1820  003F36  D011               	goto	l12012
  1821  003F38                     l12006:
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;main.c: 380: vscp_error();
  1825  003F38  EC62  F02A         	call	_vscp_error	;wreg free
  1826                           
  1827                           ;main.c: 381: break;
  1828  003F3C  D00E               	goto	l12012
  1829  003F3E                     l183:
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 384: vscp_node_state = 0x00;
  1833  003F3E  6BBB               	clrf	_vscp_node_state& (0+255),b
  1834                           
  1835                           ;main.c: 385: break;
  1836  003F40  D00C               	goto	l12012
  1837  003F42                     l12010:
  1838  003F42  0100               	movlb	0	; () banked
  1839  003F44  51BB               	movf	_vscp_node_state& (0+255),w,b
  1840                           
  1841                           ; Switch size 1, requested type "space"
  1842                           ; Number of cases is 5, Range of values is 0 to 4
  1843                           ; switch strategies available:
  1844                           ; Name         Instructions Cycles
  1845                           ; simple_byte           16     9 (average)
  1846                           ;	Chosen strategy is simple_byte
  1847  003F46  E0D9               	bz	l11984
  1848  003F48  0A01               	xorlw	1	; case 1
  1849  003F4A  E0E1               	bz	l11992
  1850  003F4C  0A03               	xorlw	3	; case 2
  1851  003F4E  E0DC               	bz	l11990
  1852  003F50  0A01               	xorlw	1	; case 3
  1853  003F52  E0E0               	bz	l177
  1854  003F54  0A07               	xorlw	7	; case 4
  1855  003F56  E0F0               	bz	l12006
  1856  003F58  D7F2               	goto	l183
  1857  003F5A                     l12012:
  1858                           
  1859                           ;main.c: 391: if ( measurement_clock > 1000 ) {
  1860  003F5A  0EE9               	movlw	233
  1861  003F5C  0101               	movlb	1	; () banked
  1862  003F5E  5D12               	subwf	_measurement_clock& (0+255),w,b
  1863  003F60  0E03               	movlw	3
  1864  003F62  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b
  1865  003F64  0E00               	movlw	0
  1866  003F66  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b
  1867  003F68  0E00               	movlw	0
  1868  003F6A  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b
  1869  003F6C  E3B1               	bnc	l168
  1870                           
  1871                           ; BSR set to: 1
  1872                           ;main.c: 393: measurement_clock = 0;
  1873  003F6E  6B12               	clrf	_measurement_clock& (0+255),b
  1874  003F70  6B13               	clrf	(_measurement_clock+1)& (0+255),b
  1875  003F72  6B14               	clrf	(_measurement_clock+2)& (0+255),b
  1876  003F74  6B15               	clrf	(_measurement_clock+3)& (0+255),b
  1877                           
  1878                           ; BSR set to: 1
  1879                           ;main.c: 394: doOneSecondWork();
  1880  003F76  EC13  F01A         	call	_doOneSecondWork	;wreg free
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;main.c: 395: seconds++;
  1884  003F7A  2BB6               	incf	_seconds& (0+255),f,b
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 396: sendTimer++;
  1888  003F7C  2A4A               	incf	_sendTimer,f,c
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;main.c: 400: if (0x03 == vscp_node_state) {
  1892  003F7E  51BB               	movf	_vscp_node_state& (0+255),w,b
  1893  003F80  0A03               	xorlw	3
  1894  003F82  E10D               	bnz	l12036
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;main.c: 401: for (i = 0; i < 6; i++) {
  1898  003F84  6BB2               	clrf	main@i& (0+255),b
  1899  003F86                     l12030:
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;main.c: 402: seconds_temp[i]++;
  1903  003F86  0E0C               	movlw	low _seconds_temp
  1904  003F88  0100               	movlb	0	; () banked
  1905  003F8A  25B2               	addwf	main@i& (0+255),w,b
  1906  003F8C  6ED9               	movwf	fsr2l,c
  1907  003F8E  6ADA               	clrf	fsr2h,c
  1908  003F90  0E01               	movlw	high _seconds_temp
  1909  003F92  22DA               	addwfc	fsr2h,f,c
  1910  003F94  2ADF               	incf	indf2,f,c
  1911                           
  1912                           ; BSR set to: 1
  1913  003F96  2BB2               	incf	main@i& (0+255),f,b
  1914                           
  1915                           ; BSR set to: 0
  1916  003F98  0E05               	movlw	5
  1917  003F9A  65B2               	cpfsgt	main@i& (0+255),b
  1918  003F9C  D7F4               	goto	l12030
  1919  003F9E                     l12036:
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;main.c: 403: }
  1923                           ;main.c: 404: }
  1924                           ;main.c: 406: if (seconds > 60) {
  1925  003F9E  0E3C               	movlw	60
  1926  003FA0  65B6               	cpfsgt	_seconds& (0+255),b
  1927  003FA2  D001               	goto	l12040
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;main.c: 407: seconds = 0;
  1931  003FA4  6BB6               	clrf	_seconds& (0+255),b
  1932  003FA6                     l12040:
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 408: }
  1936                           ;main.c: 411: vscp_doOneSecondWork();
  1937  003FA6  EC7B  F026         	call	_vscp_doOneSecondWork	;wreg free
  1938                           
  1939                           ;main.c: 414: doWork();
  1940  003FAA  ECB4  F009         	call	_doWork	;wreg free
  1941  003FAE  D790               	goto	l168
  1942  003FB0                     __end_of_main:
  1943                           	opt stack 0
  1944                           tblptru	equ	0xFF8
  1945                           tblptrh	equ	0xFF7
  1946                           tblptrl	equ	0xFF6
  1947                           tablat	equ	0xFF5
  1948                           prodh	equ	0xFF4
  1949                           prodl	equ	0xFF3
  1950                           intcon	equ	0xFF2
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           indf1	equ	0xFE7
  1954                           postdec1	equ	0xFE5
  1955                           fsr1h	equ	0xFE2
  1956                           fsr1l	equ	0xFE1
  1957                           indf2	equ	0xFDF
  1958                           postinc2	equ	0xFDE
  1959                           postdec2	equ	0xFDD
  1960                           plusw2	equ	0xFDB
  1961                           fsr2h	equ	0xFDA
  1962                           fsr2l	equ	0xFD9
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function _doWork *****************
  1966 ;; Defined at:
  1967 ;;		line 429 in file "../main.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;		None
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  temp            4   49[BANK1 ] unsigned char 
  1972 ;;  avarage         4   43[BANK1 ] unsigned char 
  1973 ;;  resistance      4   38[BANK1 ] unsigned char 
  1974 ;;  v               4   32[BANK1 ] unsigned char 
  1975 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1976 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1977 ;;  setpoint        2   47[BANK1 ] int 
  1978 ;;  B               2   36[BANK1 ] unsigned short 
  1979 ;;  i               1   53[BANK1 ] unsigned char 
  1980 ;;  j               1   42[BANK1 ] unsigned char 
  1981 ;; Return value:  Size  Location     Type
  1982 ;;		None               void
  1983 ;; Registers used:
  1984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : F/0
  1987 ;;		On exit  : E/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1990 ;;      Params:         0       0       0       0       0       0       0
  1991 ;;      Locals:         0       0      54       0       0       0       0
  1992 ;;      Temps:          0      14       0       0       0       0       0
  1993 ;;      Totals:         0      14      54       0       0       0       0
  1994 ;;Total ram usage:       68 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    7
  1997 ;; This function calls:
  1998 ;;		_writeEEPROM
  1999 ;;		_readEEPROM
  2000 ;;		_exp
  2001 ;;		_log
  2002 ;;		_getCalibrationValue
  2003 ;;		_vscp_sendEvent
  2004 ;;		___aldiv
  2005 ;;		___altofl
  2006 ;;		___asfladd
  2007 ;;		___fladd
  2008 ;;		___asfldiv
  2009 ;;		___fldiv
  2010 ;;		___flmul
  2011 ;;		___asflsub
  2012 ;;		___flsub
  2013 ;;		___fltol
  2014 ;;		___lwtofl
  2015 ;;		___wmul
  2016 ;; This function is called by:
  2017 ;;		_main
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text1
  2022  001368                     __ptext1:
  2023                           	opt stack 0
  2024  001368                     _doWork:
  2025                           	opt stack 22
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;main.c: 430: uint8_t i, j;
  2029                           ;main.c: 431: uint16_t B;
  2030                           ;main.c: 432: double avarage;
  2031                           ;main.c: 433: double resistance;
  2032                           ;main.c: 434: double Rinf;
  2033                           ;main.c: 435: double temp;
  2034                           ;main.c: 436: double v;
  2035                           ;main.c: 437: double calVoltage;
  2036                           ;main.c: 438: int setpoint;
  2037                           ;main.c: 440: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  2038                           ;main.c: 441: readEEPROM(0xF3));
  2039                           
  2040                           ;incstack = 0
  2041                           ;incstack = 0
  2042  001368  6A0F               	clrf	?_readEEPROM+1,c
  2043  00136A  0EF3               	movlw	243
  2044  00136C  6E0E               	movwf	?_readEEPROM,c
  2045  00136E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2046  001372  0100               	movlb	0	; () banked
  2047  001374  6FA4               	movwf	??_doWork& (0+255),b
  2048  001376  6A0F               	clrf	?_readEEPROM+1,c
  2049  001378  0EF2               	movlw	242
  2050  00137A  6E0E               	movwf	?_readEEPROM,c
  2051  00137C  EC1C  F02A         	call	_readEEPROM	;wreg free
  2052  001380  6E19               	movwf	?___lwtofl+1,c
  2053  001382  0100               	movlb	0	; () banked
  2054  001384  51A4               	movf	??_doWork& (0+255),w,b
  2055  001386  6E18               	movwf	?___lwtofl,c
  2056  001388  EC93  F028         	call	___lwtofl	;wreg free
  2057  00138C  C01B  F172         	movff	?___lwtofl+3,doWork@calVoltage+3
  2058  001390  C01A  F171         	movff	?___lwtofl+2,doWork@calVoltage+2
  2059  001394  C019  F170         	movff	?___lwtofl+1,doWork@calVoltage+1
  2060  001398  C018  F16F         	movff	?___lwtofl,doWork@calVoltage
  2061                           
  2062                           ;main.c: 446: for (i = 0; i < 6; i++) {
  2063  00139C  0101               	movlb	1	; () banked
  2064  00139E  6BA0               	clrf	doWork@i& (0+255),b
  2065  0013A0                     l12050:
  2066                           
  2067                           ; BSR set to: 1
  2068                           ;main.c: 448: if (adc_conversion_flags & 1 << i) {
  2069  0013A0  ECE1  F00D         	call	PL40	;call to abstracted procedure
  2070  0013A4  D002               	goto	u10444
  2071  0013A6                     u10445:
  2072  0013A6  90D8               	bcf	status,0,c
  2073  0013A8  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2074  0013AA                     u10444:
  2075  0013AA  2FA4               	decfsz	??_doWork& (0+255),f,b
  2076  0013AC  D7FC               	goto	u10445
  2077  0013AE  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2078  0013B0  15B3               	andwf	_adc_conversion_flags& (0+255),w,b
  2079  0013B2  E101 D23F          	bz	l12110
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;main.c: 451: avarage = 0;
  2083  0013B6  0101               	movlb	1	; () banked
  2084  0013B8  6B96               	clrf	doWork@avarage& (0+255),b
  2085  0013BA  6B97               	clrf	(doWork@avarage+1)& (0+255),b
  2086  0013BC  6B98               	clrf	(doWork@avarage+2)& (0+255),b
  2087  0013BE  6B99               	clrf	(doWork@avarage+3)& (0+255),b
  2088                           
  2089                           ;main.c: 452: for (j = 0; j < 80; j++) {
  2090  0013C0  6B95               	clrf	doWork@j& (0+255),b
  2091  0013C2                     l12058:
  2092                           
  2093                           ; BSR set to: 1
  2094                           ;main.c: 453: avarage += ((uint16_t) adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  2095  0013C2  0E01               	movlw	high doWork@avarage
  2096  0013C4  6E2D               	movwf	?___asfladd+1,c
  2097  0013C6  0E96               	movlw	low doWork@avarage
  2098  0013C8  6E2C               	movwf	?___asfladd,c
  2099  0013CA  90D8               	bcf	status,0,c
  2100  0013CC  35A0               	rlcf	doWork@i& (0+255),w,b
  2101  0013CE  0100               	movlb	0	; () banked
  2102  0013D0  6FA4               	movwf	??_doWork& (0+255),b
  2103  0013D2  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2104  0013D4  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2105  0013D6  0101               	movlb	1	; () banked
  2106  0013D8  5195               	movf	doWork@j& (0+255),w,b
  2107  0013DA  0D0C               	mullw	12
  2108  0013DC  0EA3               	movlw	low (_adc+1)
  2109  0013DE  24F3               	addwf	prodl,w,c
  2110  0013E0  0100               	movlb	0	; () banked
  2111  0013E2  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2112  0013E4  0E01               	movlw	high (_adc+1)
  2113  0013E6  20F4               	addwfc	prodh,w,c
  2114  0013E8  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2115  0013EA  51A4               	movf	??_doWork& (0+255),w,b
  2116  0013EC  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  2117  0013EE  6ED9               	movwf	fsr2l,c
  2118  0013F0  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2119  0013F2  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  2120  0013F4  6EDA               	movwf	fsr2h,c
  2121  0013F6  50DF               	movf	indf2,w,c
  2122  0013F8  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2123  0013FA  90D8               	bcf	status,0,c
  2124  0013FC  0101               	movlb	1	; () banked
  2125  0013FE  35A0               	rlcf	doWork@i& (0+255),w,b
  2126  001400  0100               	movlb	0	; () banked
  2127  001402  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2128  001404  6BAA               	clrf	(??_doWork+6)& (0+255),b
  2129  001406  37AA               	rlcf	(??_doWork+6)& (0+255),f,b
  2130  001408  0101               	movlb	1	; () banked
  2131  00140A  5195               	movf	doWork@j& (0+255),w,b
  2132  00140C  0D0C               	mullw	12
  2133  00140E  0EA2               	movlw	low _adc
  2134  001410  24F3               	addwf	prodl,w,c
  2135  001412  0100               	movlb	0	; () banked
  2136  001414  6FAB               	movwf	(??_doWork+7)& (0+255),b
  2137  001416  0E01               	movlw	high _adc
  2138  001418  20F4               	addwfc	prodh,w,c
  2139  00141A  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2140  00141C  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2141  00141E  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  2142  001420  6ED9               	movwf	fsr2l,c
  2143  001422  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2144  001424  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  2145  001426  6EDA               	movwf	fsr2h,c
  2146  001428  50DF               	movf	indf2,w,c
  2147  00142A  6E19               	movwf	?___lwtofl+1,c
  2148  00142C  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2149  00142E  6E18               	movwf	?___lwtofl,c
  2150  001430  EC93  F028         	call	___lwtofl	;wreg free
  2151  001434  C01B  F031         	movff	?___lwtofl+3,?___asfladd+5
  2152  001438  C01A  F030         	movff	?___lwtofl+2,?___asfladd+4
  2153  00143C  C019  F02F         	movff	?___lwtofl+1,?___asfladd+3
  2154  001440  C018  F02E         	movff	?___lwtofl,?___asfladd+2
  2155  001444  ECC6  F026         	call	___asfladd	;wreg free
  2156  001448  0101               	movlb	1	; () banked
  2157  00144A  2B95               	incf	doWork@j& (0+255),f,b
  2158                           
  2159                           ; BSR set to: 1
  2160  00144C  0E4F               	movlw	79
  2161  00144E  6595               	cpfsgt	doWork@j& (0+255),b
  2162  001450  D7B8               	goto	l12058
  2163                           
  2164                           ; BSR set to: 1
  2165                           ;main.c: 457: if (1) {
  2166  001452  0E01               	movlw	high doWork@avarage
  2167  001454  0100               	movlb	0	; () banked
  2168  001456  6F61               	movwf	(?___asfldiv+1)& (0+255),b
  2169  001458  0E96               	movlw	low doWork@avarage
  2170  00145A  6F60               	movwf	?___asfldiv& (0+255),b
  2171  00145C  6B62               	clrf	(?___asfldiv+2)& (0+255),b
  2172  00145E  6B63               	clrf	(?___asfldiv+3)& (0+255),b
  2173  001460  0EA0               	movlw	160
  2174  001462  6F64               	movwf	(?___asfldiv+4)& (0+255),b
  2175  001464  0E42               	movlw	66
  2176  001466  6F65               	movwf	(?___asfldiv+5)& (0+255),b
  2177  001468  ECA1  F026         	call	___asfldiv	;wreg free
  2178                           
  2179                           ;main.c: 465: B = (uint16_t) readEEPROM(2 * i + 0x4F)*256 +
  2180                           ;main.c: 466: readEEPROM(2 * i + 0x50);
  2181  00146C  0101               	movlb	1	; () banked
  2182  00146E  51A0               	movf	doWork@i& (0+255),w,b
  2183  001470  0D02               	mullw	2
  2184  001472  0E50               	movlw	80
  2185  001474  24F3               	addwf	prodl,w,c
  2186  001476  6E0E               	movwf	?_readEEPROM,c
  2187  001478  0E00               	movlw	0
  2188  00147A  20F4               	addwfc	prodh,w,c
  2189  00147C  6E0F               	movwf	?_readEEPROM+1,c
  2190  00147E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2191  001482  0100               	movlb	0	; () banked
  2192  001484  6FA4               	movwf	??_doWork& (0+255),b
  2193  001486  0101               	movlb	1	; () banked
  2194  001488  51A0               	movf	doWork@i& (0+255),w,b
  2195  00148A  0D02               	mullw	2
  2196  00148C  0E4F               	movlw	79
  2197  00148E  24F3               	addwf	prodl,w,c
  2198  001490  6E0E               	movwf	?_readEEPROM,c
  2199  001492  0E00               	movlw	0
  2200  001494  20F4               	addwfc	prodh,w,c
  2201  001496  6E0F               	movwf	?_readEEPROM+1,c
  2202  001498  EC1C  F02A         	call	_readEEPROM	;wreg free
  2203  00149C  0101               	movlb	1	; () banked
  2204  00149E  6F90               	movwf	(doWork@B+1)& (0+255),b
  2205  0014A0  0100               	movlb	0	; () banked
  2206  0014A2  51A4               	movf	??_doWork& (0+255),w,b
  2207  0014A4  0101               	movlb	1	; () banked
  2208  0014A6  6F8F               	movwf	doWork@B& (0+255),b
  2209                           
  2210                           ; BSR set to: 1
  2211                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2212  0014A8  0E33               	movlw	51
  2213  0014AA  6E30               	movwf	?___fldiv+4,c
  2214  0014AC  0E13               	movlw	19
  2215  0014AE  6E31               	movwf	?___fldiv+5,c
  2216  0014B0  0E95               	movlw	149
  2217  0014B2  6E32               	movwf	?___fldiv+6,c
  2218  0014B4  0EC3               	movlw	195
  2219  0014B6  6E33               	movwf	?___fldiv+7,c
  2220  0014B8  C18F  F018         	movff	doWork@B,?___lwtofl
  2221  0014BC  C190  F019         	movff	doWork@B+1,?___lwtofl+1
  2222  0014C0  EC93  F028         	call	___lwtofl	;wreg free
  2223  0014C4  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2224  0014C8  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2225  0014CC  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2226  0014D0  C018  F02C         	movff	?___lwtofl,?___fldiv
  2227  0014D4  ECD6  F022         	call	___fldiv	;wreg free
  2228  0014D8  C02F  F176         	movff	?___fldiv+3,_doWork$2278+3
  2229  0014DC  C02E  F175         	movff	?___fldiv+2,_doWork$2278+2
  2230  0014E0  C02D  F174         	movff	?___fldiv+1,_doWork$2278+1
  2231  0014E4  C02C  F173         	movff	?___fldiv,_doWork$2278
  2232                           
  2233                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2234  0014E8  C173  F099         	movff	_doWork$2278,?_exp
  2235  0014EC  C174  F09A         	movff	_doWork$2278+1,?_exp+1
  2236  0014F0  C175  F09B         	movff	_doWork$2278+2,?_exp+2
  2237  0014F4  C176  F09C         	movff	_doWork$2278+3,?_exp+3
  2238  0014F8  EC21  F019         	call	_exp	;wreg free
  2239  0014FC  C09C  F17A         	movff	?_exp+3,_doWork$2279+3
  2240  001500  C09B  F179         	movff	?_exp+2,_doWork$2279+2
  2241  001504  C09A  F178         	movff	?_exp+1,_doWork$2279+1
  2242  001508  C099  F177         	movff	?_exp,_doWork$2279
  2243                           
  2244                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2245  00150C  C177  F060         	movff	_doWork$2279,?___flmul
  2246  001510  C178  F061         	movff	_doWork$2279+1,?___flmul+1
  2247  001514  C179  F062         	movff	_doWork$2279+2,?___flmul+2
  2248  001518  C17A  F063         	movff	_doWork$2279+3,?___flmul+3
  2249  00151C  DB59               	call	PL58	;call to abstracted procedure
  2250  00151E  EC4A  F020         	call	___flmul	;wreg free
  2251  001522  C063  F16E         	movff	?___flmul+3,doWork@Rinf+3
  2252  001526  C062  F16D         	movff	?___flmul+2,doWork@Rinf+2
  2253  00152A  C061  F16C         	movff	?___flmul+1,doWork@Rinf+1
  2254  00152E  C060  F16B         	movff	?___flmul,doWork@Rinf
  2255                           
  2256                           ;main.c: 471: v = 5.0 * (double) avarage / 1025;
  2257  001532  0100               	movlb	0	; () banked
  2258  001534  6B64               	clrf	(?___flmul+4)& (0+255),b
  2259  001536  6B65               	clrf	(?___flmul+5)& (0+255),b
  2260  001538  0EA0               	movlw	160
  2261  00153A  6F66               	movwf	(?___flmul+6)& (0+255),b
  2262  00153C  0E40               	movlw	64
  2263  00153E  6F67               	movwf	(?___flmul+7)& (0+255),b
  2264  001540  C196  F060         	movff	doWork@avarage,?___flmul
  2265  001544  C197  F061         	movff	doWork@avarage+1,?___flmul+1
  2266  001548  C198  F062         	movff	doWork@avarage+2,?___flmul+2
  2267  00154C  C199  F063         	movff	doWork@avarage+3,?___flmul+3
  2268  001550  EC4A  F020         	call	___flmul	;wreg free
  2269  001554  C063  F02F         	movff	?___flmul+3,?___fldiv+3
  2270  001558  C062  F02E         	movff	?___flmul+2,?___fldiv+2
  2271  00155C  C061  F02D         	movff	?___flmul+1,?___fldiv+1
  2272  001560  C060  F02C         	movff	?___flmul,?___fldiv
  2273  001564  6A30               	clrf	?___fldiv+4,c
  2274  001566  0E20               	movlw	32
  2275  001568  6E31               	movwf	?___fldiv+5,c
  2276  00156A  0E80               	movlw	128
  2277  00156C  6E32               	movwf	?___fldiv+6,c
  2278  00156E  0E44               	movlw	68
  2279  001570  6E33               	movwf	?___fldiv+7,c
  2280  001572  ECD6  F022         	call	___fldiv	;wreg free
  2281  001576  C02F  F18E         	movff	?___fldiv+3,doWork@v+3
  2282  00157A  C02E  F18D         	movff	?___fldiv+2,doWork@v+2
  2283  00157E  C02D  F18C         	movff	?___fldiv+1,doWork@v+1
  2284  001582  C02C  F18B         	movff	?___fldiv,doWork@v
  2285                           
  2286                           ;main.c: 473: resistance = (calVoltage - 10000.0 * v) / v;
  2287  001586  DB24               	call	PL58	;call to abstracted procedure
  2288  001588  C18B  F060         	movff	doWork@v,?___flmul
  2289  00158C  C18C  F061         	movff	doWork@v+1,?___flmul+1
  2290  001590  C18D  F062         	movff	doWork@v+2,?___flmul+2
  2291  001594  C18E  F063         	movff	doWork@v+3,?___flmul+3
  2292  001598  EC4A  F020         	call	___flmul	;wreg free
  2293  00159C  C063  F07D         	movff	?___flmul+3,?___flsub+7
  2294  0015A0  C062  F07C         	movff	?___flmul+2,?___flsub+6
  2295  0015A4  C061  F07B         	movff	?___flmul+1,?___flsub+5
  2296  0015A8  C060  F07A         	movff	?___flmul,?___flsub+4
  2297  0015AC  C16F  F076         	movff	doWork@calVoltage,?___flsub
  2298  0015B0  C170  F077         	movff	doWork@calVoltage+1,?___flsub+1
  2299  0015B4  C171  F078         	movff	doWork@calVoltage+2,?___flsub+2
  2300  0015B8  C172  F079         	movff	doWork@calVoltage+3,?___flsub+3
  2301  0015BC  ECBB  F027         	call	___flsub	;wreg free
  2302  0015C0  C079  F02F         	movff	?___flsub+3,?___fldiv+3
  2303  0015C4  C078  F02E         	movff	?___flsub+2,?___fldiv+2
  2304  0015C8  C077  F02D         	movff	?___flsub+1,?___fldiv+1
  2305  0015CC  C076  F02C         	movff	?___flsub,?___fldiv
  2306  0015D0  C18B  F030         	movff	doWork@v,?___fldiv+4
  2307  0015D4  C18C  F031         	movff	doWork@v+1,?___fldiv+5
  2308  0015D8  C18D  F032         	movff	doWork@v+2,?___fldiv+6
  2309  0015DC  C18E  F033         	movff	doWork@v+3,?___fldiv+7
  2310  0015E0  ECD6  F022         	call	___fldiv	;wreg free
  2311  0015E4  C02F  F194         	movff	?___fldiv+3,doWork@resistance+3
  2312  0015E8  C02E  F193         	movff	?___fldiv+2,doWork@resistance+2
  2313  0015EC  C02D  F192         	movff	?___fldiv+1,doWork@resistance+1
  2314  0015F0  C02C  F191         	movff	?___fldiv,doWork@resistance
  2315                           
  2316                           ;main.c: 475: temp = ((double) B) / log(resistance / Rinf);
  2317  0015F4  C16B  F030         	movff	doWork@Rinf,?___fldiv+4
  2318  0015F8  C16C  F031         	movff	doWork@Rinf+1,?___fldiv+5
  2319  0015FC  C16D  F032         	movff	doWork@Rinf+2,?___fldiv+6
  2320  001600  C16E  F033         	movff	doWork@Rinf+3,?___fldiv+7
  2321  001604  C191  F02C         	movff	doWork@resistance,?___fldiv
  2322  001608  C192  F02D         	movff	doWork@resistance+1,?___fldiv+1
  2323  00160C  C193  F02E         	movff	doWork@resistance+2,?___fldiv+2
  2324  001610  C194  F02F         	movff	doWork@resistance+3,?___fldiv+3
  2325  001614  ECD6  F022         	call	___fldiv	;wreg free
  2326  001618  C02F  F084         	movff	?___fldiv+3,?_log+3
  2327  00161C  C02E  F083         	movff	?___fldiv+2,?_log+2
  2328  001620  C02D  F082         	movff	?___fldiv+1,?_log+1
  2329  001624  C02C  F081         	movff	?___fldiv,?_log
  2330  001628  EC30  F01D         	call	_log	;wreg free
  2331  00162C  C084  F17E         	movff	?_log+3,_doWork$2280+3
  2332  001630  C083  F17D         	movff	?_log+2,_doWork$2280+2
  2333  001634  C082  F17C         	movff	?_log+1,_doWork$2280+1
  2334  001638  C081  F17B         	movff	?_log,_doWork$2280
  2335                           
  2336                           ;main.c: 475: temp = ((double) B) / log(resistance / Rinf);
  2337  00163C  C18F  F018         	movff	doWork@B,?___lwtofl
  2338  001640  C190  F019         	movff	doWork@B+1,?___lwtofl+1
  2339  001644  EC93  F028         	call	___lwtofl	;wreg free
  2340  001648  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2341  00164C  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2342  001650  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2343  001654  C018  F02C         	movff	?___lwtofl,?___fldiv
  2344  001658  C17B  F030         	movff	_doWork$2280,?___fldiv+4
  2345  00165C  C17C  F031         	movff	_doWork$2280+1,?___fldiv+5
  2346  001660  C17D  F032         	movff	_doWork$2280+2,?___fldiv+6
  2347  001664  C17E  F033         	movff	_doWork$2280+3,?___fldiv+7
  2348  001668  ECD6  F022         	call	___fldiv	;wreg free
  2349  00166C  C02F  F19F         	movff	?___fldiv+3,doWork@temp+3
  2350  001670  C02E  F19E         	movff	?___fldiv+2,doWork@temp+2
  2351  001674  C02D  F19D         	movff	?___fldiv+1,doWork@temp+1
  2352  001678  C02C  F19C         	movff	?___fldiv,doWork@temp
  2353                           
  2354                           ;main.c: 477: temp -= 273.15;
  2355  00167C  0E01               	movlw	high doWork@temp
  2356  00167E  0100               	movlb	0	; () banked
  2357  001680  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  2358  001682  0E9C               	movlw	low doWork@temp
  2359  001684  6F7E               	movwf	?___asflsub& (0+255),b
  2360  001686  0E33               	movlw	51
  2361  001688  6F80               	movwf	(?___asflsub+2)& (0+255),b
  2362  00168A  0E93               	movlw	147
  2363  00168C  6F81               	movwf	(?___asflsub+3)& (0+255),b
  2364  00168E  0E88               	movlw	136
  2365  001690  6F82               	movwf	(?___asflsub+4)& (0+255),b
  2366  001692  0E43               	movlw	67
  2367  001694  6F83               	movwf	(?___asflsub+5)& (0+255),b
  2368  001696  EC08  F026         	call	___asflsub	;wreg free
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;main.c: 492: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2372  00169A  0101               	movlb	1	; () banked
  2373  00169C  DA25               	call	PL2	;call to abstracted procedure
  2374  00169E  CFDE F0A4          	movff	postinc2,??_doWork
  2375  0016A2  CFDD F0A5          	movff	postdec2,??_doWork+1
  2376  0016A6  C0A4  F0A6         	movff	??_doWork,??_doWork+2
  2377  0016AA  C0A5  F0A7         	movff	??_doWork+1,??_doWork+3
  2378  0016AE  0E00               	movlw	0
  2379  0016B0  0100               	movlb	0	; () banked
  2380  0016B2  BFA7               	btfsc	(??_doWork+3)& (0+255),7,b
  2381  0016B4  0EFF               	movlw	255
  2382  0016B6  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2383  0016B8  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2384  0016BA  0101               	movlb	1	; () banked
  2385  0016BC  51A0               	movf	doWork@i& (0+255),w,b
  2386  0016BE  ECEB  F026         	call	_getCalibrationValue
  2387  0016C2  C012  F0AA         	movff	?_getCalibrationValue,??_doWork+6
  2388  0016C6  C013  F0AB         	movff	?_getCalibrationValue+1,??_doWork+7
  2389  0016CA  0E00               	movlw	0
  2390  0016CC  0100               	movlb	0	; () banked
  2391  0016CE  BFAB               	btfsc	(??_doWork+7)& (0+255),7,b
  2392  0016D0  0EFF               	movlw	255
  2393  0016D2  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2394  0016D4  6FAD               	movwf	(??_doWork+9)& (0+255),b
  2395  0016D6  6B64               	clrf	(?___flmul+4)& (0+255),b
  2396  0016D8  6B65               	clrf	(?___flmul+5)& (0+255),b
  2397  0016DA  0EC8               	movlw	200
  2398  0016DC  6F66               	movwf	(?___flmul+6)& (0+255),b
  2399  0016DE  0E42               	movlw	66
  2400  0016E0  6F67               	movwf	(?___flmul+7)& (0+255),b
  2401  0016E2  C19C  F060         	movff	doWork@temp,?___flmul
  2402  0016E6  C19D  F061         	movff	doWork@temp+1,?___flmul+1
  2403  0016EA  C19E  F062         	movff	doWork@temp+2,?___flmul+2
  2404  0016EE  C19F  F063         	movff	doWork@temp+3,?___flmul+3
  2405  0016F2  EC4A  F020         	call	___flmul	;wreg free
  2406  0016F6  C063  F079         	movff	?___flmul+3,?___fltol+3
  2407  0016FA  C062  F078         	movff	?___flmul+2,?___fltol+2
  2408  0016FE  C061  F077         	movff	?___flmul+1,?___fltol+1
  2409  001702  C060  F076         	movff	?___flmul,?___fltol
  2410  001706  ECCC  F023         	call	___fltol	;wreg free
  2411  00170A  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2412  00170C  2576               	addwf	?___fltol& (0+255),w,b
  2413  00170E  6FAE               	movwf	(??_doWork+10)& (0+255),b
  2414  001710  51AB               	movf	(??_doWork+7)& (0+255),w,b
  2415  001712  2177               	addwfc	(?___fltol+1)& (0+255),w,b
  2416  001714  6FAF               	movwf	(??_doWork+11)& (0+255),b
  2417  001716  51AC               	movf	(??_doWork+8)& (0+255),w,b
  2418  001718  2178               	addwfc	(?___fltol+2)& (0+255),w,b
  2419  00171A  6FB0               	movwf	(??_doWork+12)& (0+255),b
  2420  00171C  51AD               	movf	(??_doWork+9)& (0+255),w,b
  2421  00171E  2179               	addwfc	(?___fltol+3)& (0+255),w,b
  2422  001720  6FB1               	movwf	(??_doWork+13)& (0+255),b
  2423  001722  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2424  001724  25AE               	addwf	(??_doWork+10)& (0+255),w,b
  2425  001726  6F7C               	movwf	?___aldiv& (0+255),b
  2426  001728  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2427  00172A  21AF               	addwfc	(??_doWork+11)& (0+255),w,b
  2428  00172C  6F7D               	movwf	(?___aldiv+1)& (0+255),b
  2429  00172E  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2430  001730  21B0               	addwfc	(??_doWork+12)& (0+255),w,b
  2431  001732  6F7E               	movwf	(?___aldiv+2)& (0+255),b
  2432  001734  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2433  001736  21B1               	addwfc	(??_doWork+13)& (0+255),w,b
  2434  001738  6F7F               	movwf	(?___aldiv+3)& (0+255),b
  2435  00173A  0E02               	movlw	2
  2436  00173C  6F80               	movwf	(?___aldiv+4)& (0+255),b
  2437  00173E  0E00               	movlw	0
  2438  001740  6B81               	clrf	(?___aldiv+5)& (0+255),b
  2439  001742  6B82               	clrf	(?___aldiv+6)& (0+255),b
  2440  001744  6B83               	clrf	(?___aldiv+7)& (0+255),b
  2441  001746  EC0F  F021         	call	___aldiv	;wreg free
  2442  00174A  0101               	movlb	1	; () banked
  2443  00174C  D9CD               	call	PL2	;call to abstracted procedure
  2444  00174E  C07C  FFDE         	movff	?___aldiv,postinc2
  2445  001752  C07D  FFDD         	movff	?___aldiv+1,postdec2
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;main.c: 513: }
  2449                           ;main.c: 515: if (current_temp[ i ] <
  2450                           ;main.c: 516: (int16_t) (readEEPROM(2 * i + 0x7F)*256 +
  2451                           ;main.c: 517: readEEPROM(2 * i + 0x80))) {
  2452                           
  2453                           ;main.c: 494: }
  2454  001756  51A0               	movf	doWork@i& (0+255),w,b
  2455  001758  0D02               	mullw	2
  2456  00175A  0E7F               	movlw	127
  2457  00175C  24F3               	addwf	prodl,w,c
  2458  00175E  6E0E               	movwf	?_readEEPROM,c
  2459  001760  0E00               	movlw	0
  2460  001762  20F4               	addwfc	prodh,w,c
  2461  001764  6E0F               	movwf	?_readEEPROM+1,c
  2462  001766  EC1C  F02A         	call	_readEEPROM	;wreg free
  2463  00176A  0100               	movlb	0	; () banked
  2464  00176C  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2465  00176E  6BA4               	clrf	??_doWork& (0+255),b
  2466  001770  0101               	movlb	1	; () banked
  2467  001772  51A0               	movf	doWork@i& (0+255),w,b
  2468  001774  0D02               	mullw	2
  2469  001776  0E80               	movlw	128
  2470  001778  24F3               	addwf	prodl,w,c
  2471  00177A  6E0E               	movwf	?_readEEPROM,c
  2472  00177C  0E00               	movlw	0
  2473  00177E  20F4               	addwfc	prodh,w,c
  2474  001780  6E0F               	movwf	?_readEEPROM+1,c
  2475  001782  EC1C  F02A         	call	_readEEPROM	;wreg free
  2476  001786  0100               	movlb	0	; () banked
  2477  001788  27A4               	addwf	??_doWork& (0+255),f,b
  2478  00178A  0E00               	movlw	0
  2479  00178C  23A5               	addwfc	(??_doWork+1)& (0+255),f,b
  2480  00178E  0101               	movlb	1	; () banked
  2481  001790  D9AB               	call	PL2	;call to abstracted procedure
  2482  001792  CFDE F0A6          	movff	postinc2,??_doWork+2
  2483  001796  CFDD F0A7          	movff	postdec2,??_doWork+3
  2484  00179A  0100               	movlb	0	; () banked
  2485  00179C  DA22               	call	PL60	;call to abstracted procedure
  2486  00179E  E20F               	bc	l201
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;main.c: 519: writeEEPROM(2 * i + 0x7F, current_temp[ i ] >> 8);
  2490  0017A0  D9AC               	call	PL6	;call to abstracted procedure
  2491  0017A2  0E7F               	movlw	127
  2492  0017A4  D9B2               	call	PL8	;call to abstracted procedure
  2493  0017A6  D9A0               	call	PL2	;call to abstracted procedure
  2494  0017A8  D9F3               	call	PL30	;call to abstracted procedure
  2495  0017AA  EC0D  F029         	call	_writeEEPROM	;wreg free
  2496                           
  2497                           ;main.c: 520: writeEEPROM(2 * i + 0x80, 0xff & current_temp[ i ]);
  2498  0017AE  D9A5               	call	PL6	;call to abstracted procedure
  2499  0017B0  0E80               	movlw	128
  2500  0017B2  D9AB               	call	PL8	;call to abstracted procedure
  2501  0017B4  D999               	call	PL2	;call to abstracted procedure
  2502  0017B6  50DF               	movf	indf2,w,c
  2503  0017B8  6E10               	movwf	?_writeEEPROM+2,c
  2504  0017BA  EC0D  F029         	call	_writeEEPROM	;wreg free
  2505  0017BE                     l201:
  2506                           
  2507                           ;main.c: 521: }
  2508                           ;main.c: 524: if (current_temp[ i ] >
  2509                           ;main.c: 525: (int16_t) (readEEPROM(2 * i + 0x8B)*256 +
  2510                           ;main.c: 526: readEEPROM(2 * i + 0x8C))) {
  2511  0017BE  0101               	movlb	1	; () banked
  2512  0017C0  D993               	call	PL2	;call to abstracted procedure
  2513  0017C2  CFDE F0A4          	movff	postinc2,??_doWork
  2514  0017C6  CFDD F0A5          	movff	postdec2,??_doWork+1
  2515  0017CA  51A0               	movf	doWork@i& (0+255),w,b
  2516  0017CC  0D02               	mullw	2
  2517  0017CE  0E8B               	movlw	139
  2518  0017D0  24F3               	addwf	prodl,w,c
  2519  0017D2  6E0E               	movwf	?_readEEPROM,c
  2520  0017D4  0E00               	movlw	0
  2521  0017D6  20F4               	addwfc	prodh,w,c
  2522  0017D8  6E0F               	movwf	?_readEEPROM+1,c
  2523  0017DA  EC1C  F02A         	call	_readEEPROM	;wreg free
  2524  0017DE  0100               	movlb	0	; () banked
  2525  0017E0  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2526  0017E2  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2527  0017E4  0101               	movlb	1	; () banked
  2528  0017E6  51A0               	movf	doWork@i& (0+255),w,b
  2529  0017E8  0D02               	mullw	2
  2530  0017EA  0E8C               	movlw	140
  2531  0017EC  24F3               	addwf	prodl,w,c
  2532  0017EE  6E0E               	movwf	?_readEEPROM,c
  2533  0017F0  0E00               	movlw	0
  2534  0017F2  20F4               	addwfc	prodh,w,c
  2535  0017F4  6E0F               	movwf	?_readEEPROM+1,c
  2536  0017F6  EC1C  F02A         	call	_readEEPROM	;wreg free
  2537  0017FA  0100               	movlb	0	; () banked
  2538  0017FC  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2539  0017FE  0E00               	movlw	0
  2540  001800  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2541  001802  D9EF               	call	PL60	;call to abstracted procedure
  2542  001804  E20F               	bc	l12108
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 528: writeEEPROM(2 * i + 0x8B, current_temp[ i ] >> 8);
  2546  001806  D979               	call	PL6	;call to abstracted procedure
  2547  001808  0E8B               	movlw	139
  2548  00180A  D97F               	call	PL8	;call to abstracted procedure
  2549  00180C  D96D               	call	PL2	;call to abstracted procedure
  2550  00180E  D9C0               	call	PL30	;call to abstracted procedure
  2551  001810  EC0D  F029         	call	_writeEEPROM	;wreg free
  2552                           
  2553                           ;main.c: 529: writeEEPROM(2 * i + 0x8C, 0xff & current_temp[ i ]);
  2554  001814  D972               	call	PL6	;call to abstracted procedure
  2555  001816  0E8C               	movlw	140
  2556  001818  D978               	call	PL8	;call to abstracted procedure
  2557  00181A  D966               	call	PL2	;call to abstracted procedure
  2558  00181C  50DF               	movf	indf2,w,c
  2559  00181E  6E10               	movwf	?_writeEEPROM+2,c
  2560  001820  EC0D  F029         	call	_writeEEPROM	;wreg free
  2561  001824                     l12108:
  2562                           
  2563                           ;main.c: 530: }
  2564                           ;main.c: 533: adc_conversion_flags &= ~(1 << i);
  2565  001824  D9CE               	call	PL40	;call to abstracted procedure
  2566  001826  D002               	goto	u10494
  2567  001828                     u10495:
  2568  001828  90D8               	bcf	status,0,c
  2569  00182A  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2570  00182C                     u10494:
  2571  00182C  2FA4               	decfsz	??_doWork& (0+255),f,b
  2572  00182E  D7FC               	goto	u10495
  2573  001830  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2574  001832  17B3               	andwf	_adc_conversion_flags& (0+255),f,b
  2575  001834                     l12110:
  2576                           
  2577                           ; BSR set to: 0
  2578  001834  0101               	movlb	1	; () banked
  2579  001836  2BA0               	incf	doWork@i& (0+255),f,b
  2580                           
  2581                           ; BSR set to: 1
  2582  001838  0E05               	movlw	5
  2583  00183A  65A0               	cpfsgt	doWork@i& (0+255),b
  2584  00183C  D5B1               	goto	l12050
  2585                           
  2586                           ; BSR set to: 1
  2587                           ;main.c: 535: }
  2588                           ;main.c: 536: }
  2589                           ;main.c: 539: if (0x03 == vscp_node_state) {
  2590  00183E  0100               	movlb	0	; () banked
  2591  001840  51BB               	movf	_vscp_node_state& (0+255),w,b
  2592  001842  0A03               	xorlw	3
  2593  001844  E001 D14F          	bnz	l224
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;main.c: 542: for (i = 0; i < 6; i++) {
  2597  001848  0101               	movlb	1	; () banked
  2598  00184A  6BA0               	clrf	doWork@i& (0+255),b
  2599  00184C                     l12122:
  2600                           
  2601                           ; BSR set to: 1
  2602                           ;main.c: 545: if (low_alarm & 1 << i) {
  2603  00184C  D9BA               	call	PL40	;call to abstracted procedure
  2604  00184E  D002               	goto	u10524
  2605  001850                     u10525:
  2606  001850  90D8               	bcf	status,0,c
  2607  001852  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2608  001854                     u10524:
  2609  001854  2FA4               	decfsz	??_doWork& (0+255),f,b
  2610  001856  D7FC               	goto	u10525
  2611  001858  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2612  00185A  15B5               	andwf	_low_alarm& (0+255),w,b
  2613  00185C  E03A               	bz	l12130
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 548: setpoint =
  2617                           ;main.c: 549: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2618                           ;main.c: 550: readEEPROM(2 * i + 0x5C) +
  2619                           ;main.c: 551: readEEPROM(i + 0x97)*100);
  2620  00185E  D94D               	call	PL6	;call to abstracted procedure
  2621  001860  0E5C               	movlw	92
  2622  001862  25A4               	addwf	??_doWork& (0+255),w,b
  2623  001864  6E0E               	movwf	?_readEEPROM,c
  2624  001866  0E00               	movlw	0
  2625  001868  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2626  00186A  6E0F               	movwf	?_readEEPROM+1,c
  2627  00186C  EC1C  F02A         	call	_readEEPROM	;wreg free
  2628  001870  0100               	movlb	0	; () banked
  2629  001872  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2630  001874  90D8               	bcf	status,0,c
  2631  001876  0101               	movlb	1	; () banked
  2632  001878  35A0               	rlcf	doWork@i& (0+255),w,b
  2633  00187A  0100               	movlb	0	; () banked
  2634  00187C  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2635  00187E  6BA8               	clrf	(??_doWork+4)& (0+255),b
  2636  001880  37A8               	rlcf	(??_doWork+4)& (0+255),f,b
  2637  001882  0E5B               	movlw	91
  2638  001884  25A7               	addwf	(??_doWork+3)& (0+255),w,b
  2639  001886  6E0E               	movwf	?_readEEPROM,c
  2640  001888  0E00               	movlw	0
  2641  00188A  21A8               	addwfc	(??_doWork+4)& (0+255),w,b
  2642  00188C  6E0F               	movwf	?_readEEPROM+1,c
  2643  00188E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2644  001892  0100               	movlb	0	; () banked
  2645  001894  6FAA               	movwf	(??_doWork+6)& (0+255),b
  2646  001896  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2647  001898  0E97               	movlw	151
  2648  00189A  D93E               	call	PL10	;call to abstracted procedure
  2649  00189C  EC1C  F02A         	call	_readEEPROM	;wreg free
  2650  0018A0  0D64               	mullw	100
  2651  0018A2  0100               	movlb	0	; () banked
  2652  0018A4  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2653  0018A6  24F3               	addwf	prodl,w,c
  2654  0018A8  6FAB               	movwf	(??_doWork+7)& (0+255),b
  2655  0018AA  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2656  0018AC  20F4               	addwfc	prodh,w,c
  2657  0018AE  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2658  0018B0  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2659  0018B2  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  2660  0018B4  0101               	movlb	1	; () banked
  2661  0018B6  6F9A               	movwf	doWork@setpoint& (0+255),b
  2662  0018B8  0100               	movlb	0	; () banked
  2663  0018BA  0E00               	movlw	0
  2664  0018BC  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  2665  0018BE  0101               	movlb	1	; () banked
  2666  0018C0  6F9B               	movwf	(doWork@setpoint+1)& (0+255),b
  2667                           
  2668                           ; BSR set to: 1
  2669                           ;main.c: 556: if (current_temp[ i ] > setpoint) {
  2670  0018C2  D912               	call	PL2	;call to abstracted procedure
  2671  0018C4  CFDE F0A4          	movff	postinc2,??_doWork
  2672  0018C8  D955               	call	PL22	;call to abstracted procedure
  2673  0018CA  E261               	bc	l208
  2674  0018CC                     l12128:
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;main.c: 559: low_alarm &= ~(1 << i);
  2678  0018CC  D96E               	call	PL38	;call to abstracted procedure
  2679  0018CE  17B5               	andwf	_low_alarm& (0+255),f,b
  2680  0018D0  D05E               	goto	l208
  2681  0018D2                     l12130:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main.c: 564: else {
  2685                           ;main.c: 568: setpoint =
  2686                           ;main.c: 569: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2687                           ;main.c: 570: readEEPROM(2 * i + 0x5C));
  2688  0018D2  0101               	movlb	1	; () banked
  2689  0018D4  51A0               	movf	doWork@i& (0+255),w,b
  2690  0018D6  0D02               	mullw	2
  2691  0018D8  0E5C               	movlw	92
  2692  0018DA  24F3               	addwf	prodl,w,c
  2693  0018DC  6E0E               	movwf	?_readEEPROM,c
  2694  0018DE  0E00               	movlw	0
  2695  0018E0  20F4               	addwfc	prodh,w,c
  2696  0018E2  6E0F               	movwf	?_readEEPROM+1,c
  2697  0018E4  EC1C  F02A         	call	_readEEPROM	;wreg free
  2698  0018E8  0100               	movlb	0	; () banked
  2699  0018EA  6FA4               	movwf	??_doWork& (0+255),b
  2700  0018EC  0101               	movlb	1	; () banked
  2701  0018EE  51A0               	movf	doWork@i& (0+255),w,b
  2702  0018F0  0D02               	mullw	2
  2703  0018F2  0E5B               	movlw	91
  2704  0018F4  24F3               	addwf	prodl,w,c
  2705  0018F6  6E0E               	movwf	?_readEEPROM,c
  2706  0018F8  0E00               	movlw	0
  2707  0018FA  20F4               	addwfc	prodh,w,c
  2708  0018FC  6E0F               	movwf	?_readEEPROM+1,c
  2709  0018FE  EC1C  F02A         	call	_readEEPROM	;wreg free
  2710  001902  D911               	call	PL12	;call to abstracted procedure
  2711                           
  2712                           ; BSR set to: 1
  2713                           ;main.c: 572: if (current_temp[ i ] < setpoint) {
  2714  001904  D8F1               	call	PL2	;call to abstracted procedure
  2715  001906  D91C               	call	PL14	;call to abstracted procedure
  2716  001908  E242               	bc	l208
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;main.c: 575: low_alarm |= (1 << i);
  2720  00190A  C1A0  F0A4         	movff	doWork@i,??_doWork
  2721  00190E  0E01               	movlw	1
  2722  001910  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2723  001912  2BA4               	incf	??_doWork& (0+255),f,b
  2724  001914  D002               	goto	u10574
  2725  001916                     u10575:
  2726  001916  90D8               	bcf	status,0,c
  2727  001918  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2728  00191A                     u10574:
  2729  00191A  2FA4               	decfsz	??_doWork& (0+255),f,b
  2730  00191C  D7FC               	goto	u10575
  2731  00191E  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2732  001920  13B5               	iorwf	_low_alarm& (0+255),f,b
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 580: vscp_alarmstatus |= 1;
  2736  001922  804B               	bsf	_vscp_alarmstatus,0,c
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 583: if (readEEPROM(i + 0x43) & (1<<3)) {
  2740  001924  0E43               	movlw	67
  2741  001926  D8F8               	call	PL10	;call to abstracted procedure
  2742  001928  EC1C  F02A         	call	_readEEPROM	;wreg free
  2743  00192C  0100               	movlb	0	; () banked
  2744  00192E  6FA4               	movwf	??_doWork& (0+255),b
  2745  001930  A7A4               	btfss	??_doWork& (0+255),3,b
  2746  001932  D02D               	goto	l208
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;main.c: 585: vscp_omsg.vscp_class = 1;
  2750  001934  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2751                           
  2752                           ;main.c: 586: vscp_omsg.vscp_type = 2;
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;main.c: 587: vscp_omsg.priority = 0x00;
  2756                           
  2757                           ;main.c: 588: vscp_omsg.flags = 0x80 + 3;
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;main.c: 591: if (readEEPROM(i + 0x43) & (1<<5)) {
  2761  001936  D916               	call	PL20	;call to abstracted procedure
  2762  001938  D8EF               	call	PL10	;call to abstracted procedure
  2763  00193A  EC1C  F02A         	call	_readEEPROM	;wreg free
  2764  00193E  0100               	movlb	0	; () banked
  2765  001940  6FA4               	movwf	??_doWork& (0+255),b
  2766  001942  ABA4               	btfss	??_doWork& (0+255),5,b
  2767  001944  D012               	goto	l12152
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;main.c: 593: if (readEEPROM(i + 0x43) & (1<<6)) {
  2771  001946  0E43               	movlw	67
  2772  001948  D8E7               	call	PL10	;call to abstracted procedure
  2773  00194A  EC1C  F02A         	call	_readEEPROM	;wreg free
  2774  00194E  0100               	movlb	0	; () banked
  2775  001950  6FA4               	movwf	??_doWork& (0+255),b
  2776  001952  ADA4               	btfss	??_doWork& (0+255),6,b
  2777  001954  D005               	goto	l12150
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;main.c: 594: vscp_omsg.vscp_class = 30;
  2781  001956  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2782  001958  0E1E               	movlw	30
  2783  00195A  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2784                           
  2785                           ;main.c: 595: vscp_omsg.vscp_type = 5;
  2786  00195C  0E05               	movlw	5
  2787  00195E  D004               	goto	L1
  2788  001960                     l12150:
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;main.c: 597: else {
  2792                           ;main.c: 598: vscp_omsg.vscp_class = 30;
  2793  001960  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2794  001962  0E1E               	movlw	30
  2795  001964  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2796                           
  2797                           ;main.c: 599: vscp_omsg.vscp_type = 6;
  2798  001966  0E06               	movlw	6
  2799  001968                     L1:
  2800  001968  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  2801  00196A                     l12152:
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;main.c: 600: }
  2805                           ;main.c: 602: }
  2806                           ;main.c: 604: vscp_omsg.data[ 0 ] = i;
  2807  00196A  C1A0  F0CF         	movff	doWork@i,_vscp_omsg+5
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 605: vscp_omsg.data[ 1 ] =
  2811                           ;main.c: 606: readEEPROM(2 * i + 0x73);
  2812  00196E  D8C5               	call	PL6	;call to abstracted procedure
  2813  001970  D948               	call	PL78	;call to abstracted procedure
  2814  001972  EC1C  F02A         	call	_readEEPROM	;wreg free
  2815  001976  0100               	movlb	0	; () banked
  2816  001978  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 607: vscp_omsg.data[ 2 ] =
  2820                           ;main.c: 608: readEEPROM(2 * i + 0x74);
  2821  00197A  D8BF               	call	PL6	;call to abstracted procedure
  2822  00197C  D93B               	call	PL76	;call to abstracted procedure
  2823  00197E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2824  001982  0100               	movlb	0	; () banked
  2825  001984  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;main.c: 611: if (!vscp_sendEvent()) {
  2829  001986  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  2830  00198A  0900               	iorlw	0
  2831  00198C  E09F               	bz	l12128
  2832  00198E                     l208:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 615: }
  2836                           ;main.c: 616: }
  2837                           ;main.c: 617: }
  2838                           ;main.c: 618: }
  2839                           ;main.c: 621: if ( high_alarm & (1 << i ) ) {
  2840  00198E  C1A0  F0A4         	movff	doWork@i,??_doWork
  2841  001992  0E01               	movlw	1
  2842  001994  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2843  001996  2BA4               	incf	??_doWork& (0+255),f,b
  2844  001998  D002               	goto	u10624
  2845  00199A                     u10625:
  2846  00199A  90D8               	bcf	status,0,c
  2847  00199C  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2848  00199E                     u10624:
  2849  00199E  2FA4               	decfsz	??_doWork& (0+255),f,b
  2850  0019A0  D7FC               	goto	u10625
  2851  0019A2  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2852  0019A4  15B4               	andwf	_high_alarm& (0+255),w,b
  2853  0019A6  E03A               	bz	l12168
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;main.c: 625: setpoint =
  2857                           ;main.c: 626: (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2858                           ;main.c: 627: readEEPROM(2 * i + 0x68) -
  2859                           ;main.c: 628: readEEPROM(i + 0x97)*100);
  2860  0019A8  D8A8               	call	PL6	;call to abstracted procedure
  2861  0019AA  0E67               	movlw	103
  2862  0019AC  25A4               	addwf	??_doWork& (0+255),w,b
  2863  0019AE  6E0E               	movwf	?_readEEPROM,c
  2864  0019B0  0E00               	movlw	0
  2865  0019B2  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2866  0019B4  6E0F               	movwf	?_readEEPROM+1,c
  2867  0019B6  EC1C  F02A         	call	_readEEPROM	;wreg free
  2868  0019BA  0100               	movlb	0	; () banked
  2869  0019BC  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2870  0019BE  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2871  0019C0  90D8               	bcf	status,0,c
  2872  0019C2  0101               	movlb	1	; () banked
  2873  0019C4  35A0               	rlcf	doWork@i& (0+255),w,b
  2874  0019C6  0100               	movlb	0	; () banked
  2875  0019C8  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2876  0019CA  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2877  0019CC  37A9               	rlcf	(??_doWork+5)& (0+255),f,b
  2878  0019CE  0E68               	movlw	104
  2879  0019D0  25A8               	addwf	(??_doWork+4)& (0+255),w,b
  2880  0019D2  6E0E               	movwf	?_readEEPROM,c
  2881  0019D4  0E00               	movlw	0
  2882  0019D6  21A9               	addwfc	(??_doWork+5)& (0+255),w,b
  2883  0019D8  6E0F               	movwf	?_readEEPROM+1,c
  2884  0019DA  EC1C  F02A         	call	_readEEPROM	;wreg free
  2885  0019DE  0100               	movlb	0	; () banked
  2886  0019E0  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2887  0019E2  0E00               	movlw	0
  2888  0019E4  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2889  0019E6  0E97               	movlw	151
  2890  0019E8  D897               	call	PL10	;call to abstracted procedure
  2891  0019EA  EC1C  F02A         	call	_readEEPROM	;wreg free
  2892  0019EE  6E12               	movwf	?___wmul,c
  2893  0019F0  6A13               	clrf	?___wmul+1,c
  2894  0019F2  6815               	setf	?___wmul+3,c
  2895  0019F4  0E9C               	movlw	156
  2896  0019F6  6E14               	movwf	?___wmul+2,c
  2897  0019F8  EC4C  F028         	call	___wmul	;wreg free
  2898  0019FC  5012               	movf	?___wmul,w,c
  2899  0019FE  0100               	movlb	0	; () banked
  2900  001A00  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  2901  001A02  0101               	movlb	1	; () banked
  2902  001A04  6F9A               	movwf	doWork@setpoint& (0+255),b
  2903  001A06  5013               	movf	?___wmul+1,w,c
  2904  001A08  0100               	movlb	0	; () banked
  2905  001A0A  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  2906  001A0C  0101               	movlb	1	; () banked
  2907  001A0E  6F9B               	movwf	(doWork@setpoint+1)& (0+255),b
  2908                           
  2909                           ; BSR set to: 1
  2910                           ;main.c: 631: if (current_temp[ i ] < setpoint) {
  2911  001A10  D86B               	call	PL2	;call to abstracted procedure
  2912  001A12  D896               	call	PL14	;call to abstracted procedure
  2913  001A14  E263               	bc	l12200
  2914  001A16                     l12166:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;main.c: 634: high_alarm &= ~(1 << i);
  2918  001A16  D8C9               	call	PL38	;call to abstracted procedure
  2919  001A18  17B4               	andwf	_high_alarm& (0+255),f,b
  2920  001A1A  D060               	goto	l12200
  2921  001A1C                     l12168:
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;main.c: 639: else {
  2925                           ;main.c: 644: setpoint = (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2926                           ;main.c: 645: readEEPROM(2 * i + 0x68));
  2927  001A1C  0101               	movlb	1	; () banked
  2928  001A1E  51A0               	movf	doWork@i& (0+255),w,b
  2929  001A20  0D02               	mullw	2
  2930  001A22  0E68               	movlw	104
  2931  001A24  24F3               	addwf	prodl,w,c
  2932  001A26  6E0E               	movwf	?_readEEPROM,c
  2933  001A28  0E00               	movlw	0
  2934  001A2A  20F4               	addwfc	prodh,w,c
  2935  001A2C  6E0F               	movwf	?_readEEPROM+1,c
  2936  001A2E  EC1C  F02A         	call	_readEEPROM	;wreg free
  2937  001A32  0100               	movlb	0	; () banked
  2938  001A34  6FA4               	movwf	??_doWork& (0+255),b
  2939  001A36  0101               	movlb	1	; () banked
  2940  001A38  51A0               	movf	doWork@i& (0+255),w,b
  2941  001A3A  0D02               	mullw	2
  2942  001A3C  0E67               	movlw	103
  2943  001A3E  24F3               	addwf	prodl,w,c
  2944  001A40  6E0E               	movwf	?_readEEPROM,c
  2945  001A42  0E00               	movlw	0
  2946  001A44  20F4               	addwfc	prodh,w,c
  2947  001A46  6E0F               	movwf	?_readEEPROM+1,c
  2948  001A48  EC1C  F02A         	call	_readEEPROM	;wreg free
  2949  001A4C  D86C               	call	PL12	;call to abstracted procedure
  2950                           
  2951                           ; BSR set to: 1
  2952                           ;main.c: 647: if (current_temp[ i ] > setpoint) {
  2953  001A4E  D84C               	call	PL2	;call to abstracted procedure
  2954  001A50  CFDE F0A4          	movff	postinc2,??_doWork
  2955  001A54  D88F               	call	PL22	;call to abstracted procedure
  2956  001A56  E242               	bc	l12200
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;main.c: 650: high_alarm |= (1 << i);
  2960  001A58  C1A0  F0A4         	movff	doWork@i,??_doWork
  2961  001A5C  0E01               	movlw	1
  2962  001A5E  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2963  001A60  2BA4               	incf	??_doWork& (0+255),f,b
  2964  001A62  D002               	goto	u10674
  2965  001A64                     u10675:
  2966  001A64  90D8               	bcf	status,0,c
  2967  001A66  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2968  001A68                     u10674:
  2969  001A68  2FA4               	decfsz	??_doWork& (0+255),f,b
  2970  001A6A  D7FC               	goto	u10675
  2971  001A6C  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2972  001A6E  13B4               	iorwf	_high_alarm& (0+255),f,b
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;main.c: 656: vscp_alarmstatus |= 2;
  2976  001A70  824B               	bsf	_vscp_alarmstatus,1,c
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;main.c: 659: if (readEEPROM(i + 0x43) & (1<<4)) {
  2980  001A72  0E43               	movlw	67
  2981  001A74  D851               	call	PL10	;call to abstracted procedure
  2982  001A76  EC1C  F02A         	call	_readEEPROM	;wreg free
  2983  001A7A  0100               	movlb	0	; () banked
  2984  001A7C  6FA4               	movwf	??_doWork& (0+255),b
  2985  001A7E  A9A4               	btfss	??_doWork& (0+255),4,b
  2986  001A80  D02D               	goto	l12200
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;main.c: 661: vscp_omsg.vscp_class = 1;
  2990  001A82  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2991                           
  2992                           ;main.c: 662: vscp_omsg.vscp_type = 2;
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 663: vscp_omsg.priority = 0x00;
  2996                           
  2997                           ;main.c: 664: vscp_omsg.flags = 0x80 + 3;
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;main.c: 666: if (readEEPROM(i + 0x43) & (1<<5)) {
  3001  001A84  D86F               	call	PL20	;call to abstracted procedure
  3002  001A86  D848               	call	PL10	;call to abstracted procedure
  3003  001A88  EC1C  F02A         	call	_readEEPROM	;wreg free
  3004  001A8C  0100               	movlb	0	; () banked
  3005  001A8E  6FA4               	movwf	??_doWork& (0+255),b
  3006  001A90  ABA4               	btfss	??_doWork& (0+255),5,b
  3007  001A92  D012               	goto	l12190
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;main.c: 667: if (readEEPROM(i + 0x43) & (1<<6)) {
  3011  001A94  0E43               	movlw	67
  3012  001A96  D840               	call	PL10	;call to abstracted procedure
  3013  001A98  EC1C  F02A         	call	_readEEPROM	;wreg free
  3014  001A9C  0100               	movlb	0	; () banked
  3015  001A9E  6FA4               	movwf	??_doWork& (0+255),b
  3016  001AA0  ADA4               	btfss	??_doWork& (0+255),6,b
  3017  001AA2  D005               	goto	l12188
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;main.c: 668: vscp_omsg.vscp_class = 30;
  3021  001AA4  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3022  001AA6  0E1E               	movlw	30
  3023  001AA8  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3024                           
  3025                           ;main.c: 669: vscp_omsg.vscp_type = 6;
  3026  001AAA  0E06               	movlw	6
  3027  001AAC  D004               	goto	L2
  3028  001AAE                     l12188:
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;main.c: 671: vscp_omsg.vscp_class = 30;
  3032  001AAE  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3033  001AB0  0E1E               	movlw	30
  3034  001AB2  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3035                           
  3036                           ;main.c: 672: vscp_omsg.vscp_type = 5;
  3037  001AB4  0E05               	movlw	5
  3038  001AB6                     L2:
  3039  001AB6  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3040  001AB8                     l12190:
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;main.c: 673: }
  3044                           ;main.c: 674: }
  3045                           ;main.c: 676: vscp_omsg.data[ 0 ] = i;
  3046  001AB8  C1A0  F0CF         	movff	doWork@i,_vscp_omsg+5
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;main.c: 677: vscp_omsg.data[ 1 ] =
  3050                           ;main.c: 678: readEEPROM(2 * i +
  3051                           ;main.c: 679: 0x73);
  3052  001ABC  D81E               	call	PL6	;call to abstracted procedure
  3053  001ABE  D8A1               	call	PL78	;call to abstracted procedure
  3054  001AC0  EC1C  F02A         	call	_readEEPROM	;wreg free
  3055  001AC4  0100               	movlb	0	; () banked
  3056  001AC6  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;main.c: 680: vscp_omsg.data[ 2 ] =
  3060                           ;main.c: 681: readEEPROM(2 * i +
  3061                           ;main.c: 682: 0x74);
  3062  001AC8  D818               	call	PL6	;call to abstracted procedure
  3063  001ACA  D894               	call	PL76	;call to abstracted procedure
  3064  001ACC  EC1C  F02A         	call	_readEEPROM	;wreg free
  3065  001AD0  0100               	movlb	0	; () banked
  3066  001AD2  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;main.c: 685: if (!vscp_sendEvent()) {
  3070  001AD4  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  3071  001AD8  0900               	iorlw	0
  3072  001ADA  E09D               	bz	l12166
  3073  001ADC                     l12200:
  3074                           
  3075                           ; BSR set to: 0
  3076  001ADC  0101               	movlb	1	; () banked
  3077  001ADE  2BA0               	incf	doWork@i& (0+255),f,b
  3078  001AE0  0E05               	movlw	5
  3079  001AE2  65A0               	cpfsgt	doWork@i& (0+255),b
  3080  001AE4  D6B3               	goto	l12122
  3081  001AE6                     l224:
  3082  001AE6  0012               	return	
  3083  001AE8                     __end_of_doWork:
  3084                           	opt stack 0
  3085  001AE8                     PL2:
  3086                           	opt stack 22
  3087  001AE8  51A0               	movf	doWork@i& (0+255),w,b
  3088  001AEA  0D02               	mullw	2
  3089  001AEC  0E00               	movlw	low _current_temp
  3090  001AEE  24F3               	addwf	prodl,w,c
  3091  001AF0  6ED9               	movwf	fsr2l,c
  3092  001AF2  0E01               	movlw	high _current_temp
  3093  001AF4  20F4               	addwfc	prodh,w,c
  3094  001AF6  6EDA               	movwf	fsr2h,c
  3095  001AF8  0012               	return	
  3096  001AFA                     __end_ofPL2:
  3097                           	opt stack 0
  3098  001AFA                     PL6:
  3099                           	opt stack 22
  3100  001AFA  90D8               	bcf	status,0,c
  3101  001AFC  0101               	movlb	1	; () banked
  3102  001AFE  35A0               	rlcf	doWork@i& (0+255),w,b
  3103  001B00  0100               	movlb	0	; () banked
  3104  001B02  6FA4               	movwf	??_doWork& (0+255),b
  3105  001B04  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3106  001B06  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3107  001B08  0012               	return	
  3108  001B0A                     __end_ofPL6:
  3109                           	opt stack 0
  3110  001B0A                     PL8:
  3111                           	opt stack 22
  3112  001B0A  25A4               	addwf	??_doWork& (0+255),w,b
  3113  001B0C  6E0E               	movwf	?_writeEEPROM,c
  3114  001B0E  0E00               	movlw	0
  3115  001B10  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3116  001B12  6E0F               	movwf	?_writeEEPROM+1,c
  3117  001B14  0101               	movlb	1	; () banked
  3118  001B16  0012               	return	
  3119  001B18                     __end_ofPL8:
  3120                           	opt stack 0
  3121  001B18                     PL10:
  3122                           	opt stack 22
  3123  001B18  0101               	movlb	1	; () banked
  3124  001B1A  25A0               	addwf	doWork@i& (0+255),w,b
  3125  001B1C  6E0E               	movwf	?_readEEPROM,c
  3126  001B1E  6A0F               	clrf	?_readEEPROM+1,c
  3127  001B20  0E00               	movlw	0
  3128  001B22  220F               	addwfc	?_readEEPROM+1,f,c
  3129  001B24  0C00               	retlw	0
  3130  001B26                     __end_ofPL10:
  3131                           	opt stack 0
  3132  001B26                     PL12:
  3133                           	opt stack 22
  3134  001B26  0100               	movlb	0	; () banked
  3135  001B28  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3136  001B2A  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3137  001B2C  51A4               	movf	??_doWork& (0+255),w,b
  3138  001B2E  25A5               	addwf	(??_doWork+1)& (0+255),w,b
  3139  001B30  0101               	movlb	1	; () banked
  3140  001B32  6F9A               	movwf	doWork@setpoint& (0+255),b
  3141  001B34  0100               	movlb	0	; () banked
  3142  001B36  0E00               	movlw	0
  3143  001B38  21A6               	addwfc	(??_doWork+2)& (0+255),w,b
  3144  001B3A  0101               	movlb	1	; () banked
  3145  001B3C  6F9B               	movwf	(doWork@setpoint+1)& (0+255),b
  3146  001B3E  0012               	return	
  3147  001B40                     __end_ofPL12:
  3148                           	opt stack 0
  3149  001B40                     PL14:
  3150                           	opt stack 22
  3151  001B40  CFDE F0A4          	movff	postinc2,??_doWork
  3152  001B44  CFDD F0A5          	movff	postdec2,??_doWork+1
  3153  001B48  0100               	movlb	0	; () banked
  3154  001B4A  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3155  001B4C  0A80               	xorlw	128
  3156  001B4E  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3157  001B50  0101               	movlb	1	; () banked
  3158  001B52  519A               	movf	doWork@setpoint& (0+255),w,b
  3159  001B54  0100               	movlb	0	; () banked
  3160  001B56  5DA4               	subwf	??_doWork& (0+255),w,b
  3161  001B58  0101               	movlb	1	; () banked
  3162  001B5A  519B               	movf	(doWork@setpoint+1)& (0+255),w,b
  3163  001B5C  0A80               	xorlw	128
  3164  001B5E  0100               	movlb	0	; () banked
  3165  001B60  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3166  001B62  0012               	return	
  3167  001B64                     __end_ofPL14:
  3168                           	opt stack 0
  3169  001B64                     PL20:
  3170                           	opt stack 22
  3171  001B64  0E01               	movlw	1
  3172  001B66  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3173  001B68  0E02               	movlw	2
  3174  001B6A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3175  001B6C  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  3176  001B6E  0E83               	movlw	131
  3177  001B70  6FCA               	movwf	_vscp_omsg& (0+255),b
  3178  001B72  0C43               	retlw	67
  3179  001B74                     __end_ofPL20:
  3180                           	opt stack 0
  3181  001B74                     PL22:
  3182                           	opt stack 22
  3183  001B74  CFDD F0A5          	movff	postdec2,??_doWork+1
  3184  001B78  519B               	movf	(doWork@setpoint+1)& (0+255),w,b
  3185  001B7A  0A80               	xorlw	128
  3186  001B7C  0100               	movlb	0	; () banked
  3187  001B7E  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3188  001B80  51A4               	movf	??_doWork& (0+255),w,b
  3189  001B82  0101               	movlb	1	; () banked
  3190  001B84  5D9A               	subwf	doWork@setpoint& (0+255),w,b
  3191  001B86  0100               	movlb	0	; () banked
  3192  001B88  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3193  001B8A  0A80               	xorlw	128
  3194  001B8C  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3195  001B8E  0012               	return	
  3196  001B90                     __end_ofPL22:
  3197                           	opt stack 0
  3198  001B90                     PL30:
  3199                           	opt stack 22
  3200  001B90  CFDE F0A6          	movff	postinc2,??_doWork+2
  3201  001B94  CFDD F0A7          	movff	postdec2,??_doWork+3
  3202  001B98  C0A7  F0A6         	movff	??_doWork+3,??_doWork+2
  3203  001B9C  0100               	movlb	0	; () banked
  3204  001B9E  6BA7               	clrf	(??_doWork+3)& (0+255),b
  3205  001BA0  BFA6               	btfsc	(??_doWork+2)& (0+255),7,b
  3206  001BA2  69A7               	setf	(??_doWork+3)& (0+255),b
  3207  001BA4  51A6               	movf	(??_doWork+2)& (0+255),w,b
  3208  001BA6  6E10               	movwf	?_writeEEPROM+2,c
  3209  001BA8  0012               	return	
  3210  001BAA                     __end_ofPL30:
  3211                           	opt stack 0
  3212  001BAA                     PL38:
  3213                           	opt stack 22
  3214  001BAA  C1A0  F0A4         	movff	doWork@i,??_doWork
  3215  001BAE  0E01               	movlw	1
  3216  001BB0  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3217  001BB2  2BA4               	incf	??_doWork& (0+255),f,b
  3218  001BB4  D002               	goto	u10554
  3219  001BB6                     u10555:
  3220  001BB6  90D8               	bcf	status,0,c
  3221  001BB8  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3222  001BBA                     u10554:
  3223  001BBA  2FA4               	decfsz	??_doWork& (0+255),f,b
  3224  001BBC  D7FC               	goto	u10555
  3225  001BBE  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  3226  001BC0  0012               	return	
  3227  001BC2                     __end_ofPL38:
  3228                           	opt stack 0
  3229  001BC2                     PL40:
  3230                           	opt stack 22
  3231  001BC2  C1A0  F0A4         	movff	doWork@i,??_doWork
  3232  001BC6  0E01               	movlw	1
  3233  001BC8  0100               	movlb	0	; () banked
  3234  001BCA  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3235  001BCC  2BA4               	incf	??_doWork& (0+255),f,b
  3236  001BCE  0C01               	retlw	1
  3237  001BD0                     __end_ofPL40:
  3238                           	opt stack 0
  3239  001BD0                     PL58:
  3240                           	opt stack 22
  3241  001BD0  0100               	movlb	0	; () banked
  3242  001BD2  6B64               	clrf	(?___flmul+4)& (0+255),b
  3243  001BD4  0E40               	movlw	64
  3244  001BD6  6F65               	movwf	(?___flmul+5)& (0+255),b
  3245  001BD8  0E1C               	movlw	28
  3246  001BDA  6F66               	movwf	(?___flmul+6)& (0+255),b
  3247  001BDC  0E46               	movlw	70
  3248  001BDE  6F67               	movwf	(?___flmul+7)& (0+255),b
  3249  001BE0  0C46               	retlw	70
  3250  001BE2                     __end_ofPL58:
  3251                           	opt stack 0
  3252  001BE2                     PL60:
  3253                           	opt stack 22
  3254  001BE2  51A7               	movf	(??_doWork+3)& (0+255),w,b
  3255  001BE4  0A80               	xorlw	128
  3256  001BE6  6FA8               	movwf	(??_doWork+4)& (0+255),b
  3257  001BE8  51A4               	movf	??_doWork& (0+255),w,b
  3258  001BEA  5DA6               	subwf	(??_doWork+2)& (0+255),w,b
  3259  001BEC  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3260  001BEE  0A80               	xorlw	128
  3261  001BF0  59A8               	subwfb	(??_doWork+4)& (0+255),w,b
  3262  001BF2  0012               	return	
  3263  001BF4                     __end_ofPL60:
  3264                           	opt stack 0
  3265  001BF4                     PL76:
  3266                           	opt stack 22
  3267  001BF4  0E74               	movlw	116
  3268  001BF6  25A4               	addwf	??_doWork& (0+255),w,b
  3269  001BF8  6E0E               	movwf	?_readEEPROM,c
  3270  001BFA  0E00               	movlw	0
  3271  001BFC  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3272  001BFE  6E0F               	movwf	?_readEEPROM+1,c
  3273  001C00  0012               	return	
  3274  001C02                     __end_ofPL76:
  3275                           	opt stack 0
  3276  001C02                     PL78:
  3277                           	opt stack 22
  3278  001C02  0E73               	movlw	115
  3279  001C04  25A4               	addwf	??_doWork& (0+255),w,b
  3280  001C06  6E0E               	movwf	?_readEEPROM,c
  3281  001C08  0E00               	movlw	0
  3282  001C0A  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3283  001C0C  6E0F               	movwf	?_readEEPROM+1,c
  3284  001C0E  0012               	return	
  3285  001C10                     __end_ofPL78:
  3286                           	opt stack 0
  3287                           tblptru	equ	0xFF8
  3288                           tblptrh	equ	0xFF7
  3289                           tblptrl	equ	0xFF6
  3290                           tablat	equ	0xFF5
  3291                           prodh	equ	0xFF4
  3292                           prodl	equ	0xFF3
  3293                           intcon	equ	0xFF2
  3294                           postinc0	equ	0xFEE
  3295                           wreg	equ	0xFE8
  3296                           indf1	equ	0xFE7
  3297                           postdec1	equ	0xFE5
  3298                           fsr1h	equ	0xFE2
  3299                           fsr1l	equ	0xFE1
  3300                           indf2	equ	0xFDF
  3301                           postinc2	equ	0xFDE
  3302                           postdec2	equ	0xFDD
  3303                           plusw2	equ	0xFDB
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function ___lwtofl *****************
  3309 ;; Defined at:
  3310 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;  c               2   23[COMRAM] unsigned int 
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  4   23[COMRAM] unsigned int 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3324 ;;      Params:         4       0       0       0       0       0       0
  3325 ;;      Locals:         0       0       0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0       0       0
  3327 ;;      Totals:         4       0       0       0       0       0       0
  3328 ;;Total ram usage:        4 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    3
  3331 ;; This function calls:
  3332 ;;		___flpack
  3333 ;; This function is called by:
  3334 ;;		_doWork
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text2
  3339  005126                     __ptext2:
  3340                           	opt stack 0
  3341  005126                     ___lwtofl:
  3342                           	opt stack 25
  3343                           
  3344                           ;incstack = 0
  3345                           ;incstack = 0
  3346  005126  C018  F00E         	movff	___lwtofl@c,?___flpack
  3347  00512A  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  3348  00512E  6A10               	clrf	?___flpack+2,c
  3349  005130  6A11               	clrf	?___flpack+3,c
  3350  005132  0E96               	movlw	150
  3351  005134  6E12               	movwf	?___flpack+4,c
  3352  005136  0E00               	movlw	0
  3353  005138  6A13               	clrf	?___flpack+5,c
  3354  00513A  EC6D  F021         	call	___flpack	;wreg free
  3355  00513E  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  3356  005142  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  3357  005146  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  3358  00514A  C00E  F018         	movff	?___flpack,?___lwtofl
  3359  00514E  0012               	return	
  3360  005150                     __end_of___lwtofl:
  3361                           	opt stack 0
  3362                           tblptru	equ	0xFF8
  3363                           tblptrh	equ	0xFF7
  3364                           tblptrl	equ	0xFF6
  3365                           tablat	equ	0xFF5
  3366                           prodh	equ	0xFF4
  3367                           prodl	equ	0xFF3
  3368                           intcon	equ	0xFF2
  3369                           postinc0	equ	0xFEE
  3370                           wreg	equ	0xFE8
  3371                           indf1	equ	0xFE7
  3372                           postdec1	equ	0xFE5
  3373                           fsr1h	equ	0xFE2
  3374                           fsr1l	equ	0xFE1
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           plusw2	equ	0xFDB
  3379                           fsr2h	equ	0xFDA
  3380                           fsr2l	equ	0xFD9
  3381                           status	equ	0xFD8
  3382                           
  3383 ;; *************** function ___asfldiv *****************
  3384 ;; Defined at:
  3385 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  f1p             2    0[BANK0 ] PTR 
  3388 ;;		 -> doWork@avarage(4), 
  3389 ;;  f2              4    2[BANK0 ] PTR 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  4    0[BANK0 ] PTR 
  3394 ;; Registers used:
  3395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : F/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3401 ;;      Params:         0       6       0       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0       0       0
  3404 ;;      Totals:         0       6       0       0       0       0       0
  3405 ;;Total ram usage:        6 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    4
  3408 ;; This function calls:
  3409 ;;		___fldiv
  3410 ;; This function is called by:
  3411 ;;		_doWork
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text3
  3416  004D42                     __ptext3:
  3417                           	opt stack 0
  3418  004D42                     ___asfldiv:
  3419                           	opt stack 24
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;	Return value of ___asfldiv is never used
  3423                           
  3424                           ;incstack = 0
  3425                           ;incstack = 0
  3426  004D42  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3427  004D46  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3428  004D4A  CFDE F02C          	movff	postinc2,?___fldiv
  3429  004D4E  CFDE F02D          	movff	postinc2,?___fldiv+1
  3430  004D52  CFDE F02E          	movff	postinc2,?___fldiv+2
  3431  004D56  CFDE F02F          	movff	postinc2,?___fldiv+3
  3432  004D5A  C062  F030         	movff	___asfldiv@f2,?___fldiv+4
  3433  004D5E  C063  F031         	movff	___asfldiv@f2+1,?___fldiv+5
  3434  004D62  C064  F032         	movff	___asfldiv@f2+2,?___fldiv+6
  3435  004D66  C065  F033         	movff	___asfldiv@f2+3,?___fldiv+7
  3436  004D6A  ECD6  F022         	call	___fldiv	;wreg free
  3437  004D6E  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3438  004D72  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3439  004D76  C02C  FFDE         	movff	?___fldiv,postinc2
  3440  004D7A  C02D  FFDE         	movff	?___fldiv+1,postinc2
  3441  004D7E  C02E  FFDE         	movff	?___fldiv+2,postinc2
  3442  004D82  C02F  FFDD         	movff	?___fldiv+3,postdec2
  3443  004D86  06D9               	decf	fsr2l,f,c
  3444  004D88  06D9               	decf	fsr2l,f,c
  3445  004D8A  0012               	return	
  3446  004D8C                     __end_of___asfldiv:
  3447                           	opt stack 0
  3448                           tblptru	equ	0xFF8
  3449                           tblptrh	equ	0xFF7
  3450                           tblptrl	equ	0xFF6
  3451                           tablat	equ	0xFF5
  3452                           prodh	equ	0xFF4
  3453                           prodl	equ	0xFF3
  3454                           intcon	equ	0xFF2
  3455                           postinc0	equ	0xFEE
  3456                           wreg	equ	0xFE8
  3457                           indf1	equ	0xFE7
  3458                           postdec1	equ	0xFE5
  3459                           fsr1h	equ	0xFE2
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           postinc2	equ	0xFDE
  3463                           postdec2	equ	0xFDD
  3464                           plusw2	equ	0xFDB
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function ___asfladd *****************
  3470 ;; Defined at:
  3471 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;  f1p             2   43[COMRAM] PTR 
  3474 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  3475 ;;  f2              4   45[COMRAM] PTR 
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;		None
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  4   43[COMRAM] PTR 
  3480 ;; Registers used:
  3481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3487 ;;      Params:         6       0       0       0       0       0       0
  3488 ;;      Locals:         0       0       0       0       0       0       0
  3489 ;;      Temps:          0       0       0       0       0       0       0
  3490 ;;      Totals:         6       0       0       0       0       0       0
  3491 ;;Total ram usage:        6 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    4
  3494 ;; This function calls:
  3495 ;;		___fladd
  3496 ;; This function is called by:
  3497 ;;		_doWork
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text4
  3502  004D8C                     __ptext4:
  3503                           	opt stack 0
  3504  004D8C                     ___asfladd:
  3505                           	opt stack 24
  3506                           
  3507                           ;	Return value of ___asfladd is never used
  3508                           
  3509                           ;incstack = 0
  3510                           ;incstack = 0
  3511  004D8C  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3512  004D90  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3513  004D94  CFDE F01D          	movff	postinc2,?___fladd
  3514  004D98  CFDE F01E          	movff	postinc2,?___fladd+1
  3515  004D9C  CFDE F01F          	movff	postinc2,?___fladd+2
  3516  004DA0  CFDE F020          	movff	postinc2,?___fladd+3
  3517  004DA4  C02E  F021         	movff	___asfladd@f2,?___fladd+4
  3518  004DA8  C02F  F022         	movff	___asfladd@f2+1,?___fladd+5
  3519  004DAC  C030  F023         	movff	___asfladd@f2+2,?___fladd+6
  3520  004DB0  C031  F024         	movff	___asfladd@f2+3,?___fladd+7
  3521  004DB4  EC85  F01C         	call	___fladd	;wreg free
  3522  004DB8  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3523  004DBC  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3524  004DC0  C01D  FFDE         	movff	?___fladd,postinc2
  3525  004DC4  C01E  FFDE         	movff	?___fladd+1,postinc2
  3526  004DC8  C01F  FFDE         	movff	?___fladd+2,postinc2
  3527  004DCC  C020  FFDD         	movff	?___fladd+3,postdec2
  3528  004DD0  06D9               	decf	fsr2l,f,c
  3529  004DD2  06D9               	decf	fsr2l,f,c
  3530  004DD4  0012               	return	
  3531  004DD6                     __end_of___asfladd:
  3532                           	opt stack 0
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           prodh	equ	0xFF4
  3538                           prodl	equ	0xFF3
  3539                           intcon	equ	0xFF2
  3540                           postinc0	equ	0xFEE
  3541                           wreg	equ	0xFE8
  3542                           indf1	equ	0xFE7
  3543                           postdec1	equ	0xFE5
  3544                           fsr1h	equ	0xFE2
  3545                           fsr1l	equ	0xFE1
  3546                           indf2	equ	0xFDF
  3547                           postinc2	equ	0xFDE
  3548                           postdec2	equ	0xFDD
  3549                           plusw2	equ	0xFDB
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function ___aldiv *****************
  3555 ;; Defined at:
  3556 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  dividend        4   28[BANK0 ] long 
  3559 ;;  divisor         4   32[BANK0 ] long 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  quotient        4   38[BANK0 ] long 
  3562 ;;  sign            1   37[BANK0 ] unsigned char 
  3563 ;;  counter         1   36[BANK0 ] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  4   28[BANK0 ] long 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0
  3568 ;; Tracked objects:
  3569 ;;		On entry : F/0
  3570 ;;		On exit  : F/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3573 ;;      Params:         0       8       0       0       0       0       0
  3574 ;;      Locals:         0       6       0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0
  3576 ;;      Totals:         0      14       0       0       0       0       0
  3577 ;;Total ram usage:       14 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    2
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		_doWork
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text5
  3588  00421E                     __ptext5:
  3589                           	opt stack 0
  3590  00421E                     ___aldiv:
  3591                           	opt stack 26
  3592                           
  3593                           ; BSR set to: 0
  3594                           
  3595                           ;incstack = 0
  3596                           ;incstack = 0
  3597  00421E  6B85               	clrf	___aldiv@sign& (0+255),b
  3598  004220  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3599  004222  D00A               	goto	l11474
  3600                           
  3601                           ; BSR set to: 0
  3602  004224  1F83               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3603  004226  1F82               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3604  004228  1F81               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3605  00422A  6D80               	negf	___aldiv@divisor& (0+255),b
  3606  00422C  0E00               	movlw	0
  3607  00422E  2381               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3608  004230  2382               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3609  004232  2383               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3610                           
  3611                           ; BSR set to: 0
  3612  004234  0E01               	movlw	1
  3613  004236  6F85               	movwf	___aldiv@sign& (0+255),b
  3614  004238                     l11474:
  3615                           
  3616                           ; BSR set to: 0
  3617  004238  AF7F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3618  00423A  D00A               	goto	l11480
  3619                           
  3620                           ; BSR set to: 0
  3621  00423C  1F7F               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3622  00423E  1F7E               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3623  004240  1F7D               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3624  004242  6D7C               	negf	___aldiv@dividend& (0+255),b
  3625  004244  0E00               	movlw	0
  3626  004246  237D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3627  004248  237E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3628  00424A  237F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3629                           
  3630                           ; BSR set to: 0
  3631  00424C  0E01               	movlw	1
  3632  00424E  1B85               	xorwf	___aldiv@sign& (0+255),f,b
  3633  004250                     l11480:
  3634                           
  3635                           ; BSR set to: 0
  3636  004250  6B86               	clrf	___aldiv@quotient& (0+255),b
  3637  004252  6B87               	clrf	(___aldiv@quotient+1)& (0+255),b
  3638  004254  6B88               	clrf	(___aldiv@quotient+2)& (0+255),b
  3639  004256  6B89               	clrf	(___aldiv@quotient+3)& (0+255),b
  3640                           
  3641                           ; BSR set to: 0
  3642  004258  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3643  00425A  1180               	iorwf	___aldiv@divisor& (0+255),w,b
  3644  00425C  1181               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3645  00425E  1182               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3646  004260  E029               	bz	l11502
  3647                           
  3648                           ; BSR set to: 0
  3649  004262  0E01               	movlw	1
  3650  004264  6F84               	movwf	___aldiv@counter& (0+255),b
  3651  004266  D006               	goto	l11488
  3652  004268                     l11486:
  3653                           
  3654                           ; BSR set to: 0
  3655  004268  90D8               	bcf	status,0,c
  3656  00426A  3780               	rlcf	___aldiv@divisor& (0+255),f,b
  3657  00426C  3781               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3658  00426E  3782               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3659  004270  3783               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3660  004272  2B84               	incf	___aldiv@counter& (0+255),f,b
  3661  004274                     l11488:
  3662                           
  3663                           ; BSR set to: 0
  3664  004274  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3665  004276  D7F8               	goto	l11486
  3666  004278                     l11490:
  3667                           
  3668                           ; BSR set to: 0
  3669  004278  90D8               	bcf	status,0,c
  3670  00427A  3786               	rlcf	___aldiv@quotient& (0+255),f,b
  3671  00427C  3787               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3672  00427E  3788               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3673  004280  3789               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3674                           
  3675                           ; BSR set to: 0
  3676  004282  5180               	movf	___aldiv@divisor& (0+255),w,b
  3677  004284  5D7C               	subwf	___aldiv@dividend& (0+255),w,b
  3678  004286  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3679  004288  597D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3680  00428A  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3681  00428C  597E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3682  00428E  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3683  004290  597F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3684  004292  E309               	bnc	l11498
  3685                           
  3686                           ; BSR set to: 0
  3687  004294  5180               	movf	___aldiv@divisor& (0+255),w,b
  3688  004296  5F7C               	subwf	___aldiv@dividend& (0+255),f,b
  3689  004298  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3690  00429A  5B7D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3691  00429C  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3692  00429E  5B7E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3693  0042A0  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3694  0042A2  5B7F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3695                           
  3696                           ; BSR set to: 0
  3697  0042A4  8186               	bsf	___aldiv@quotient& (0+255),0,b
  3698  0042A6                     l11498:
  3699                           
  3700                           ; BSR set to: 0
  3701  0042A6  90D8               	bcf	status,0,c
  3702  0042A8  3383               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3703  0042AA  3382               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3704  0042AC  3381               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3705  0042AE  3380               	rrcf	___aldiv@divisor& (0+255),f,b
  3706                           
  3707                           ; BSR set to: 0
  3708  0042B0  2F84               	decfsz	___aldiv@counter& (0+255),f,b
  3709  0042B2  D7E2               	goto	l11490
  3710  0042B4                     l11502:
  3711                           
  3712                           ; BSR set to: 0
  3713  0042B4  5185               	movf	___aldiv@sign& (0+255),w,b
  3714  0042B6  E008               	bz	l11506
  3715                           
  3716                           ; BSR set to: 0
  3717  0042B8  1F89               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3718  0042BA  1F88               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3719  0042BC  1F87               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3720  0042BE  6D86               	negf	___aldiv@quotient& (0+255),b
  3721  0042C0  0E00               	movlw	0
  3722  0042C2  2387               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3723  0042C4  2388               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3724  0042C6  2389               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3725  0042C8                     l11506:
  3726                           
  3727                           ; BSR set to: 0
  3728  0042C8  C086  F07C         	movff	___aldiv@quotient,?___aldiv
  3729  0042CC  C087  F07D         	movff	___aldiv@quotient+1,?___aldiv+1
  3730  0042D0  C088  F07E         	movff	___aldiv@quotient+2,?___aldiv+2
  3731  0042D4  C089  F07F         	movff	___aldiv@quotient+3,?___aldiv+3
  3732                           
  3733                           ; BSR set to: 0
  3734  0042D8  0012               	return	
  3735  0042DA                     __end_of___aldiv:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           prodh	equ	0xFF4
  3742                           prodl	equ	0xFF3
  3743                           intcon	equ	0xFF2
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           indf1	equ	0xFE7
  3747                           postdec1	equ	0xFE5
  3748                           fsr1h	equ	0xFE2
  3749                           fsr1l	equ	0xFE1
  3750                           indf2	equ	0xFDF
  3751                           postinc2	equ	0xFDE
  3752                           postdec2	equ	0xFDD
  3753                           plusw2	equ	0xFDB
  3754                           fsr2h	equ	0xFDA
  3755                           fsr2l	equ	0xFD9
  3756                           status	equ	0xFD8
  3757                           
  3758 ;; *************** function _getCalibrationValue *****************
  3759 ;; Defined at:
  3760 ;;		line 872 in file "../main.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;  i               1    wreg     unsigned char 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  i               1   24[COMRAM] unsigned char 
  3765 ;;  cal             2   22[COMRAM] short 
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  2   17[COMRAM] short 
  3768 ;; Registers used:
  3769 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : F/1
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3775 ;;      Params:         2       0       0       0       0       0       0
  3776 ;;      Locals:         3       0       0       0       0       0       0
  3777 ;;      Temps:          3       0       0       0       0       0       0
  3778 ;;      Totals:         8       0       0       0       0       0       0
  3779 ;;Total ram usage:        8 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    3
  3782 ;; This function calls:
  3783 ;;		_readEEPROM
  3784 ;; This function is called by:
  3785 ;;		_doWork
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text6
  3790  004DD6                     __ptext6:
  3791                           	opt stack 0
  3792  004DD6                     _getCalibrationValue:
  3793                           	opt stack 25
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;incstack = 0
  3797                           ;incstack = 0
  3798                           ;getCalibrationValue@i stored from wreg
  3799  004DD6  CFE8 F019          	movff	wreg,getCalibrationValue@i
  3800                           
  3801                           ; BSR set to: 1
  3802                           ;main.c: 873: int16_t cal;
  3803                           ;main.c: 875: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3804                           ;main.c: 876: readEEPROM(2 * i + 0x9F);
  3805  004DDA  5019               	movf	getCalibrationValue@i,w,c
  3806  004DDC  0D02               	mullw	2
  3807  004DDE  0E9F               	movlw	159
  3808  004DE0  24F3               	addwf	prodl,w,c
  3809  004DE2  6E0E               	movwf	?_readEEPROM,c
  3810  004DE4  0E00               	movlw	0
  3811  004DE6  20F4               	addwfc	prodh,w,c
  3812  004DE8  6E0F               	movwf	?_readEEPROM+1,c
  3813  004DEA  EC1C  F02A         	call	_readEEPROM	;wreg free
  3814  004DEE  6E14               	movwf	??_getCalibrationValue& (0+255),c
  3815  004DF0  5019               	movf	getCalibrationValue@i,w,c
  3816  004DF2  0D02               	mullw	2
  3817  004DF4  0E9E               	movlw	158
  3818  004DF6  24F3               	addwf	prodl,w,c
  3819  004DF8  6E0E               	movwf	?_readEEPROM,c
  3820  004DFA  0E00               	movlw	0
  3821  004DFC  20F4               	addwfc	prodh,w,c
  3822  004DFE  6E0F               	movwf	?_readEEPROM+1,c
  3823  004E00  EC1C  F02A         	call	_readEEPROM	;wreg free
  3824  004E04  6E16               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3825  004E06  6A15               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3826  004E08  5014               	movf	??_getCalibrationValue,w,c
  3827  004E0A  2415               	addwf	??_getCalibrationValue+1,w,c
  3828  004E0C  6E17               	movwf	getCalibrationValue@cal,c
  3829  004E0E  0E00               	movlw	0
  3830  004E10  2016               	addwfc	??_getCalibrationValue+2,w,c
  3831  004E12  6E18               	movwf	getCalibrationValue@cal+1,c
  3832                           
  3833                           ;main.c: 878: return cal;
  3834  004E14  C017  F012         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3835  004E18  C018  F013         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3836  004E1C  0012               	return	
  3837  004E1E                     __end_of_getCalibrationValue:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           prodh	equ	0xFF4
  3844                           prodl	equ	0xFF3
  3845                           intcon	equ	0xFF2
  3846                           postinc0	equ	0xFEE
  3847                           wreg	equ	0xFE8
  3848                           indf1	equ	0xFE7
  3849                           postdec1	equ	0xFE5
  3850                           fsr1h	equ	0xFE2
  3851                           fsr1l	equ	0xFE1
  3852                           indf2	equ	0xFDF
  3853                           postinc2	equ	0xFDE
  3854                           postdec2	equ	0xFDD
  3855                           plusw2	equ	0xFDB
  3856                           fsr2h	equ	0xFDA
  3857                           fsr2l	equ	0xFD9
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function _log *****************
  3861 ;; Defined at:
  3862 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  x               4   33[BANK0 ] short 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  exponent        2   66[COMRAM] int 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  4   33[BANK0 ] int 
  3869 ;; Registers used:
  3870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/1
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3876 ;;      Params:         0       4       0       0       0       0       0
  3877 ;;      Locals:         2       0       0       0       0       0       0
  3878 ;;      Temps:          0       0       0       0       0       0       0
  3879 ;;      Totals:         2       4       0       0       0       0       0
  3880 ;;Total ram usage:        6 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    5
  3883 ;; This function calls:
  3884 ;;		___fladd
  3885 ;;		___flmul
  3886 ;;		___awtofl
  3887 ;;		_eval_poly
  3888 ;;		_frexp
  3889 ;; This function is called by:
  3890 ;;		_doWork
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           	psect	text7
  3895  003A60                     __ptext7:
  3896                           	opt stack 0
  3897  003A60                     _log:
  3898                           	opt stack 23
  3899                           
  3900                           ;incstack = 0
  3901                           ;incstack = 0
  3902  003A60  0100               	movlb	0	; () banked
  3903  003A62  BF84               	btfsc	(log@x+3)& (0+255),7,b
  3904  003A64  D007               	goto	u8780
  3905                           
  3906                           ; BSR set to: 0
  3907                           
  3908                           ; BSR set to: 0
  3909  003A66  EE20  F081         	lfsr	2,log@x
  3910  003A6A  50DE               	movf	postinc2,w,c
  3911  003A6C  10DE               	iorwf	postinc2,w,c
  3912  003A6E  10DE               	iorwf	postinc2,w,c
  3913  003A70  10DE               	iorwf	postinc2,w,c
  3914  003A72  E105               	bnz	l10458
  3915  003A74                     u8780:
  3916                           
  3917                           ; BSR set to: 0
  3918  003A74  6B81               	clrf	?_log& (0+255),b
  3919  003A76  6B82               	clrf	(?_log+1)& (0+255),b
  3920  003A78  6B83               	clrf	(?_log+2)& (0+255),b
  3921  003A7A  6B84               	clrf	(?_log+3)& (0+255),b
  3922  003A7C  D087               	goto	l1869
  3923  003A7E                     l10458:
  3924                           
  3925                           ; BSR set to: 0
  3926  003A7E  6B64               	clrf	(?___flmul+4)& (0+255),b
  3927  003A80  6B65               	clrf	(?___flmul+5)& (0+255),b
  3928  003A82  6B66               	clrf	(?___flmul+6)& (0+255),b
  3929  003A84  0E40               	movlw	64
  3930  003A86  6F67               	movwf	(?___flmul+7)& (0+255),b
  3931  003A88  0E43               	movlw	low log@exponent
  3932  003A8A  6E12               	movwf	?_frexp+4,c
  3933  003A8C  0E00               	movlw	high log@exponent
  3934  003A8E  6E13               	movwf	?_frexp+5,c
  3935  003A90  0E0F               	movlw	15
  3936  003A92  6E13               	movwf	?_frexp+5,c
  3937  003A94  0E5F               	movlw	__accesstop+-1
  3938  003A96  6412               	cpfsgt	?_frexp+4,c
  3939  003A98  6A13               	clrf	?_frexp+5,c
  3940  003A9A  C081  F00E         	movff	log@x,?_frexp
  3941  003A9E  C082  F00F         	movff	log@x+1,?_frexp+1
  3942  003AA2  C083  F010         	movff	log@x+2,?_frexp+2
  3943  003AA6  C084  F011         	movff	log@x+3,?_frexp+3
  3944  003AAA  EC66  F024         	call	_frexp	;wreg free
  3945  003AAE  C011  F063         	movff	?_frexp+3,?___flmul+3
  3946  003AB2  C010  F062         	movff	?_frexp+2,?___flmul+2
  3947  003AB6  C00F  F061         	movff	?_frexp+1,?___flmul+1
  3948  003ABA  C00E  F060         	movff	?_frexp,?___flmul
  3949  003ABE  EC4A  F020         	call	___flmul	;wreg free
  3950  003AC2  C063  F020         	movff	?___flmul+3,?___fladd+3
  3951  003AC6  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3952  003ACA  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3953  003ACE  C060  F01D         	movff	?___flmul,?___fladd
  3954  003AD2  6A21               	clrf	?___fladd+4,c
  3955  003AD4  6A22               	clrf	?___fladd+5,c
  3956  003AD6  0E80               	movlw	128
  3957  003AD8  6E23               	movwf	?___fladd+6,c
  3958  003ADA  0EBF               	movlw	191
  3959  003ADC  6E24               	movwf	?___fladd+7,c
  3960  003ADE  EC85  F01C         	call	___fladd	;wreg free
  3961  003AE2  C020  F084         	movff	?___fladd+3,log@x+3
  3962  003AE6  C01F  F083         	movff	?___fladd+2,log@x+2
  3963  003AEA  C01E  F082         	movff	?___fladd+1,log@x+1
  3964  003AEE  C01D  F081         	movff	?___fladd,log@x
  3965  003AF2  0643               	decf	log@exponent,f,c
  3966  003AF4  A0D8               	btfss	status,0,c
  3967  003AF6  0644               	decf	log@exponent+1,f,c
  3968  003AF8  C081  F076         	movff	log@x,?_eval_poly
  3969  003AFC  C082  F077         	movff	log@x+1,?_eval_poly+1
  3970  003B00  C083  F078         	movff	log@x+2,?_eval_poly+2
  3971  003B04  C084  F079         	movff	log@x+3,?_eval_poly+3
  3972  003B08  0E48               	movlw	low log@coeff
  3973  003B0A  0100               	movlb	0	; () banked
  3974  003B0C  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3975  003B0E  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3976  003B10  0E08               	movlw	8
  3977  003B12  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3978  003B14  ECCB  F021         	call	_eval_poly	;wreg free
  3979  003B18  C079  F084         	movff	?_eval_poly+3,log@x+3
  3980  003B1C  C078  F083         	movff	?_eval_poly+2,log@x+2
  3981  003B20  C077  F082         	movff	?_eval_poly+1,log@x+1
  3982  003B24  C076  F081         	movff	?_eval_poly,log@x
  3983                           
  3984                           ; BSR set to: 0
  3985  003B28  0E18               	movlw	24
  3986  003B2A  6F64               	movwf	(?___flmul+4)& (0+255),b
  3987  003B2C  0E72               	movlw	114
  3988  003B2E  6F65               	movwf	(?___flmul+5)& (0+255),b
  3989  003B30  0E31               	movlw	49
  3990  003B32  6F66               	movwf	(?___flmul+6)& (0+255),b
  3991  003B34  0E3F               	movlw	63
  3992  003B36  6F67               	movwf	(?___flmul+7)& (0+255),b
  3993  003B38  C043  F018         	movff	log@exponent,?___awtofl
  3994  003B3C  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3995  003B40  EC15  F028         	call	___awtofl	;wreg free
  3996  003B44  C01B  F063         	movff	?___awtofl+3,?___flmul+3
  3997  003B48  C01A  F062         	movff	?___awtofl+2,?___flmul+2
  3998  003B4C  C019  F061         	movff	?___awtofl+1,?___flmul+1
  3999  003B50  C018  F060         	movff	?___awtofl,?___flmul
  4000  003B54  EC4A  F020         	call	___flmul	;wreg free
  4001  003B58  C063  F020         	movff	?___flmul+3,?___fladd+3
  4002  003B5C  C062  F01F         	movff	?___flmul+2,?___fladd+2
  4003  003B60  C061  F01E         	movff	?___flmul+1,?___fladd+1
  4004  003B64  C060  F01D         	movff	?___flmul,?___fladd
  4005  003B68  C081  F021         	movff	log@x,?___fladd+4
  4006  003B6C  C082  F022         	movff	log@x+1,?___fladd+5
  4007  003B70  C083  F023         	movff	log@x+2,?___fladd+6
  4008  003B74  C084  F024         	movff	log@x+3,?___fladd+7
  4009  003B78  EC85  F01C         	call	___fladd	;wreg free
  4010  003B7C  C020  F084         	movff	?___fladd+3,?_log+3
  4011  003B80  C01F  F083         	movff	?___fladd+2,?_log+2
  4012  003B84  C01E  F082         	movff	?___fladd+1,?_log+1
  4013  003B88  C01D  F081         	movff	?___fladd,?_log
  4014  003B8C                     l1869:
  4015  003B8C  0012               	return	
  4016  003B8E                     __end_of_log:
  4017                           	opt stack 0
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           prodh	equ	0xFF4
  4023                           prodl	equ	0xFF3
  4024                           intcon	equ	0xFF2
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           indf1	equ	0xFE7
  4028                           postdec1	equ	0xFE5
  4029                           fsr1h	equ	0xFE2
  4030                           fsr1l	equ	0xFE1
  4031                           indf2	equ	0xFDF
  4032                           postinc2	equ	0xFDE
  4033                           postdec2	equ	0xFDD
  4034                           plusw2	equ	0xFDB
  4035                           fsr2h	equ	0xFDA
  4036                           fsr2l	equ	0xFD9
  4037                           status	equ	0xFD8
  4038                           
  4039 ;; *************** function _exp *****************
  4040 ;; Defined at:
  4041 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  x               4   57[BANK0 ] int 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;  exponent        2   65[BANK0 ] int 
  4046 ;;  sign            1   67[BANK0 ] unsigned char 
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  4   57[BANK0 ] unsigned char 
  4049 ;; Registers used:
  4050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/1
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4056 ;;      Params:         0       4       0       0       0       0       0
  4057 ;;      Locals:         0       7       0       0       0       0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0
  4059 ;;      Totals:         0      11       0       0       0       0       0
  4060 ;;Total ram usage:       11 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    6
  4063 ;; This function calls:
  4064 ;;		___fldiv
  4065 ;;		___asflmul
  4066 ;;		___asflsub
  4067 ;;		___awtofl
  4068 ;;		_floor
  4069 ;;		_eval_poly
  4070 ;;		_ldexp
  4071 ;;		___flge
  4072 ;;		___flneg
  4073 ;;		___fltol
  4074 ;; This function is called by:
  4075 ;;		_doWork
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text8
  4080  003242                     __ptext8:
  4081                           	opt stack 0
  4082  003242                     _exp:
  4083                           	opt stack 22
  4084                           
  4085                           ;incstack = 0
  4086                           ;incstack = 0
  4087  003242  0100               	movlb	0	; () banked
  4088  003244  EE20  F099         	lfsr	2,exp@x
  4089  003248  50DE               	movf	postinc2,w,c
  4090  00324A  10DE               	iorwf	postinc2,w,c
  4091  00324C  10DE               	iorwf	postinc2,w,c
  4092  00324E  10DE               	iorwf	postinc2,w,c
  4093  003250  E107               	bnz	l10420
  4094                           
  4095                           ; BSR set to: 0
  4096  003252  0E00               	movlw	0
  4097  003254  6F99               	movwf	?_exp& (0+255),b
  4098  003256  6F9A               	movwf	(?_exp+1)& (0+255),b
  4099  003258  0E80               	movlw	128
  4100  00325A  6F9B               	movwf	(?_exp+2)& (0+255),b
  4101  00325C  0E3F               	movlw	63
  4102  00325E  D018               	goto	L3
  4103  003260                     l10420:
  4104                           
  4105                           ; BSR set to: 0
  4106  003260  0E18               	movlw	24
  4107  003262  6E0E               	movwf	?___flge,c
  4108  003264  0E72               	movlw	114
  4109  003266  6E0F               	movwf	?___flge+1,c
  4110  003268  0E31               	movlw	49
  4111  00326A  6E10               	movwf	?___flge+2,c
  4112  00326C  0E44               	movlw	68
  4113  00326E  6E11               	movwf	?___flge+3,c
  4114  003270  C099  F012         	movff	exp@x,?___flge+4
  4115  003274  C09A  F013         	movff	exp@x+1,?___flge+5
  4116  003278  C09B  F014         	movff	exp@x+2,?___flge+6
  4117  00327C  C09C  F015         	movff	exp@x+3,?___flge+7
  4118  003280  EC2F  F026         	call	___flge	;wreg free
  4119  003284  E207               	bc	l10426
  4120  003286  0100               	movlb	0	; () banked
  4121  003288  6999               	setf	?_exp& (0+255),b
  4122  00328A  699A               	setf	(?_exp+1)& (0+255),b
  4123  00328C  0E7F               	movlw	127
  4124  00328E  6F9B               	movwf	(?_exp+2)& (0+255),b
  4125  003290                     L3:
  4126  003290  6F9C               	movwf	(?_exp+3)& (0+255),b
  4127  003292  D0C8               	goto	l1577
  4128  003294                     l10426:
  4129  003294  C099  F00E         	movff	exp@x,?___flge
  4130  003298  C09A  F00F         	movff	exp@x+1,?___flge+1
  4131  00329C  C09B  F010         	movff	exp@x+2,?___flge+2
  4132  0032A0  C09C  F011         	movff	exp@x+3,?___flge+3
  4133  0032A4  0E87               	movlw	135
  4134  0032A6  6E12               	movwf	?___flge+4,c
  4135  0032A8  0E48               	movlw	72
  4136  0032AA  6E13               	movwf	?___flge+5,c
  4137  0032AC  0E3A               	movlw	58
  4138  0032AE  6E14               	movwf	?___flge+6,c
  4139  0032B0  0EC4               	movlw	196
  4140  0032B2  6E15               	movwf	?___flge+7,c
  4141  0032B4  EC2F  F026         	call	___flge	;wreg free
  4142  0032B8  E202               	bc	l10430
  4143  0032BA  0100               	movlb	0	; () banked
  4144  0032BC  D08D               	goto	u8760
  4145  0032BE                     l10430:
  4146  0032BE  0100               	movlb	0	; () banked
  4147  0032C0  0E01               	movlw	1
  4148  0032C2  AF9C               	btfss	(exp@x+3)& (0+255),7,b
  4149  0032C4  0E00               	movlw	0
  4150  0032C6  6FA3               	movwf	exp@sign& (0+255),b
  4151  0032C8  51A3               	movf	exp@sign& (0+255),w,b
  4152  0032CA  E012               	bz	l1580
  4153                           
  4154                           ; BSR set to: 0
  4155  0032CC  C099  F00E         	movff	exp@x,?___flneg
  4156  0032D0  C09A  F00F         	movff	exp@x+1,?___flneg+1
  4157  0032D4  C09B  F010         	movff	exp@x+2,?___flneg+2
  4158  0032D8  C09C  F011         	movff	exp@x+3,?___flneg+3
  4159  0032DC  EC20  F029         	call	___flneg	;wreg free
  4160  0032E0  C011  F09C         	movff	?___flneg+3,exp@x+3
  4161  0032E4  C010  F09B         	movff	?___flneg+2,exp@x+2
  4162  0032E8  C00F  F09A         	movff	?___flneg+1,exp@x+1
  4163  0032EC  C00E  F099         	movff	?___flneg,exp@x
  4164  0032F0                     l1580:
  4165                           
  4166                           ; BSR set to: 0
  4167  0032F0  0E3B               	movlw	59
  4168  0032F2  6F76               	movwf	?___asflmul& (0+255),b
  4169  0032F4  0EAA               	movlw	170
  4170  0032F6  6F77               	movwf	(?___asflmul+1)& (0+255),b
  4171  0032F8  0EB8               	movlw	184
  4172  0032FA  6F78               	movwf	(?___asflmul+2)& (0+255),b
  4173  0032FC  0E3F               	movlw	63
  4174  0032FE  6F79               	movwf	(?___asflmul+3)& (0+255),b
  4175  003300  0E99               	movlw	exp@x& (0+255)
  4176  003302  EC55  F026         	call	___asflmul
  4177  003306  C099  F08F         	movff	exp@x,?_floor
  4178  00330A  C09A  F090         	movff	exp@x+1,?_floor+1
  4179  00330E  C09B  F091         	movff	exp@x+2,?_floor+2
  4180  003312  C09C  F092         	movff	exp@x+3,?_floor+3
  4181  003316  ECE0  F01E         	call	_floor	;wreg free
  4182  00331A  C092  F0A0         	movff	?_floor+3,_exp$2284+3
  4183  00331E  C091  F09F         	movff	?_floor+2,_exp$2284+2
  4184  003322  C090  F09E         	movff	?_floor+1,_exp$2284+1
  4185  003326  C08F  F09D         	movff	?_floor,_exp$2284
  4186  00332A  C09D  F076         	movff	_exp$2284,?___fltol
  4187  00332E  C09E  F077         	movff	_exp$2284+1,?___fltol+1
  4188  003332  C09F  F078         	movff	_exp$2284+2,?___fltol+2
  4189  003336  C0A0  F079         	movff	_exp$2284+3,?___fltol+3
  4190  00333A  ECCC  F023         	call	___fltol	;wreg free
  4191  00333E  C076  F0A1         	movff	?___fltol,exp@exponent
  4192  003342  C077  F0A2         	movff	?___fltol+1,exp@exponent+1
  4193                           
  4194                           ; BSR set to: 0
  4195  003346  0E00               	movlw	high exp@x
  4196  003348  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  4197  00334A  0E99               	movlw	low exp@x
  4198  00334C  6F7E               	movwf	?___asflsub& (0+255),b
  4199  00334E  C0A1  F018         	movff	exp@exponent,?___awtofl
  4200  003352  C0A2  F019         	movff	exp@exponent+1,?___awtofl+1
  4201  003356  EC15  F028         	call	___awtofl	;wreg free
  4202  00335A  C01B  F083         	movff	?___awtofl+3,?___asflsub+5
  4203  00335E  C01A  F082         	movff	?___awtofl+2,?___asflsub+4
  4204  003362  C019  F081         	movff	?___awtofl+1,?___asflsub+3
  4205  003366  C018  F080         	movff	?___awtofl,?___asflsub+2
  4206  00336A  EC08  F026         	call	___asflsub	;wreg free
  4207                           
  4208                           ; BSR set to: 0
  4209  00336E  C099  F076         	movff	exp@x,?_eval_poly
  4210  003372  C09A  F077         	movff	exp@x+1,?_eval_poly+1
  4211  003376  C09B  F078         	movff	exp@x+2,?_eval_poly+2
  4212  00337A  C09C  F079         	movff	exp@x+3,?_eval_poly+3
  4213  00337E  0E20               	movlw	low exp@coeff
  4214  003380  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  4215  003382  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  4216  003384  0E09               	movlw	9
  4217  003386  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  4218  003388  ECCB  F021         	call	_eval_poly	;wreg free
  4219  00338C  C079  F084         	movff	?_eval_poly+3,?_ldexp+3
  4220  003390  C078  F083         	movff	?_eval_poly+2,?_ldexp+2
  4221  003394  C077  F082         	movff	?_eval_poly+1,?_ldexp+1
  4222  003398  C076  F081         	movff	?_eval_poly,?_ldexp
  4223  00339C  C0A1  F085         	movff	exp@exponent,?_ldexp+4
  4224  0033A0  C0A2  F086         	movff	exp@exponent+1,?_ldexp+5
  4225  0033A4  EC2A  F023         	call	_ldexp	;wreg free
  4226  0033A8  C084  F09C         	movff	?_ldexp+3,exp@x+3
  4227  0033AC  C083  F09B         	movff	?_ldexp+2,exp@x+2
  4228  0033B0  C082  F09A         	movff	?_ldexp+1,exp@x+1
  4229  0033B4  C081  F099         	movff	?_ldexp,exp@x
  4230                           
  4231                           ; BSR set to: 0
  4232  0033B8  51A3               	movf	exp@sign& (0+255),w,b
  4233  0033BA  E02C               	bz	l1581
  4234                           
  4235                           ; BSR set to: 0
  4236  0033BC  EE20  F099         	lfsr	2,exp@x
  4237  0033C0  0EFF               	movlw	255
  4238  0033C2  18DE               	xorwf	postinc2,w,c
  4239  0033C4  0EFF               	movlw	255
  4240  0033C6  B4D8               	btfsc	status,2,c
  4241  0033C8  18DE               	xorwf	postinc2,w,c
  4242  0033CA  0E7F               	movlw	127
  4243  0033CC  B4D8               	btfsc	status,2,c
  4244  0033CE  18DE               	xorwf	postinc2,w,c
  4245  0033D0  0E7F               	movlw	127
  4246  0033D2  B4D8               	btfsc	status,2,c
  4247  0033D4  18DE               	xorwf	postinc2,w,c
  4248  0033D6  E105               	bnz	l10446
  4249  0033D8                     u8760:
  4250                           
  4251                           ; BSR set to: 0
  4252  0033D8  6B99               	clrf	?_exp& (0+255),b
  4253  0033DA  6B9A               	clrf	(?_exp+1)& (0+255),b
  4254  0033DC  6B9B               	clrf	(?_exp+2)& (0+255),b
  4255  0033DE  6B9C               	clrf	(?_exp+3)& (0+255),b
  4256  0033E0  D021               	goto	l1577
  4257  0033E2                     l10446:
  4258                           
  4259                           ; BSR set to: 0
  4260  0033E2  6A2C               	clrf	?___fldiv,c
  4261  0033E4  6A2D               	clrf	?___fldiv+1,c
  4262  0033E6  0E80               	movlw	128
  4263  0033E8  6E2E               	movwf	?___fldiv+2,c
  4264  0033EA  0E3F               	movlw	63
  4265  0033EC  6E2F               	movwf	?___fldiv+3,c
  4266  0033EE  C099  F030         	movff	exp@x,?___fldiv+4
  4267  0033F2  C09A  F031         	movff	exp@x+1,?___fldiv+5
  4268  0033F6  C09B  F032         	movff	exp@x+2,?___fldiv+6
  4269  0033FA  C09C  F033         	movff	exp@x+3,?___fldiv+7
  4270  0033FE  ECD6  F022         	call	___fldiv	;wreg free
  4271  003402  C02F  F09C         	movff	?___fldiv+3,?_exp+3
  4272  003406  C02E  F09B         	movff	?___fldiv+2,?_exp+2
  4273  00340A  C02D  F09A         	movff	?___fldiv+1,?_exp+1
  4274  00340E  C02C  F099         	movff	?___fldiv,?_exp
  4275  003412  D008               	goto	l1577
  4276  003414                     l1581:
  4277                           
  4278                           ; BSR set to: 0
  4279  003414  C099  F099         	movff	exp@x,?_exp
  4280  003418  C09A  F09A         	movff	exp@x+1,?_exp+1
  4281  00341C  C09B  F09B         	movff	exp@x+2,?_exp+2
  4282  003420  C09C  F09C         	movff	exp@x+3,?_exp+3
  4283  003424                     l1577:
  4284  003424  0012               	return	
  4285  003426                     __end_of_exp:
  4286                           	opt stack 0
  4287                           tblptru	equ	0xFF8
  4288                           tblptrh	equ	0xFF7
  4289                           tblptrl	equ	0xFF6
  4290                           tablat	equ	0xFF5
  4291                           prodh	equ	0xFF4
  4292                           prodl	equ	0xFF3
  4293                           intcon	equ	0xFF2
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           indf1	equ	0xFE7
  4297                           postdec1	equ	0xFE5
  4298                           fsr1h	equ	0xFE2
  4299                           fsr1l	equ	0xFE1
  4300                           indf2	equ	0xFDF
  4301                           postinc2	equ	0xFDE
  4302                           postdec2	equ	0xFDD
  4303                           plusw2	equ	0xFDB
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function ___flneg *****************
  4309 ;; Defined at:
  4310 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  f1              4   13[COMRAM] unsigned char 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;		None
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  4   13[COMRAM] unsigned char 
  4317 ;; Registers used:
  4318 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4319 ;; Tracked objects:
  4320 ;;		On entry : F/0
  4321 ;;		On exit  : F/0
  4322 ;;		Unchanged: F/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4324 ;;      Params:         4       0       0       0       0       0       0
  4325 ;;      Locals:         0       0       0       0       0       0       0
  4326 ;;      Temps:          0       0       0       0       0       0       0
  4327 ;;      Totals:         4       0       0       0       0       0       0
  4328 ;;Total ram usage:        4 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    2
  4331 ;; This function calls:
  4332 ;;		Nothing
  4333 ;; This function is called by:
  4334 ;;		_exp
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text9
  4339  005240                     __ptext9:
  4340                           	opt stack 0
  4341  005240                     ___flneg:
  4342                           	opt stack 25
  4343                           
  4344                           ; BSR set to: 0
  4345                           
  4346                           ;incstack = 0
  4347                           ;incstack = 0
  4348  005240  EE20  F00E         	lfsr	2,___flneg@f1
  4349  005244  50DE               	movf	postinc2,w,c
  4350  005246  10DE               	iorwf	postinc2,w,c
  4351  005248  10DE               	iorwf	postinc2,w,c
  4352  00524A  10DE               	iorwf	postinc2,w,c
  4353  00524C  E002               	bz	l11776
  4354                           
  4355                           ; BSR set to: 0
  4356  00524E  0E80               	movlw	128
  4357  005250  1A11               	xorwf	___flneg@f1+3,f,c
  4358  005252                     l11776:
  4359                           
  4360                           ; BSR set to: 0
  4361  005252  C00E  F00E         	movff	___flneg@f1,?___flneg
  4362  005256  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  4363  00525A  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  4364  00525E  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  4365                           
  4366                           ; BSR set to: 0
  4367  005262  0012               	return	
  4368  005264                     __end_of___flneg:
  4369                           	opt stack 0
  4370                           tblptru	equ	0xFF8
  4371                           tblptrh	equ	0xFF7
  4372                           tblptrl	equ	0xFF6
  4373                           tablat	equ	0xFF5
  4374                           prodh	equ	0xFF4
  4375                           prodl	equ	0xFF3
  4376                           intcon	equ	0xFF2
  4377                           postinc0	equ	0xFEE
  4378                           wreg	equ	0xFE8
  4379                           indf1	equ	0xFE7
  4380                           postdec1	equ	0xFE5
  4381                           fsr1h	equ	0xFE2
  4382                           fsr1l	equ	0xFE1
  4383                           indf2	equ	0xFDF
  4384                           postinc2	equ	0xFDE
  4385                           postdec2	equ	0xFDD
  4386                           plusw2	equ	0xFDB
  4387                           fsr2h	equ	0xFDA
  4388                           fsr2l	equ	0xFD9
  4389                           status	equ	0xFD8
  4390                           
  4391 ;; *************** function _ldexp *****************
  4392 ;; Defined at:
  4393 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;  value           4   33[BANK0 ] unsigned char 
  4396 ;;  newexp          2   37[BANK0 ] int 
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;		None
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  4   33[BANK0 ] int 
  4401 ;; Registers used:
  4402 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4403 ;; Tracked objects:
  4404 ;;		On entry : F/0
  4405 ;;		On exit  : F/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4408 ;;      Params:         0       6       0       0       0       0       0
  4409 ;;      Locals:         0       0       0       0       0       0       0
  4410 ;;      Temps:          3       0       0       0       0       0       0
  4411 ;;      Totals:         3       6       0       0       0       0       0
  4412 ;;Total ram usage:        9 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; Hardware stack levels required when called:    2
  4415 ;; This function calls:
  4416 ;;		Nothing
  4417 ;; This function is called by:
  4418 ;;		_exp
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text10
  4423  004654                     __ptext10:
  4424                           	opt stack 0
  4425  004654                     _ldexp:
  4426                           	opt stack 25
  4427                           
  4428                           ; BSR set to: 0
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;incstack = 0
  4432                           ;incstack = 0
  4433  004654  EE20  F081         	lfsr	2,ldexp@value
  4434  004658  50DE               	movf	postinc2,w,c
  4435  00465A  10DE               	iorwf	postinc2,w,c
  4436  00465C  10DE               	iorwf	postinc2,w,c
  4437  00465E  10DE               	iorwf	postinc2,w,c
  4438  004660  E014               	bz	u10170
  4439                           
  4440                           ; BSR set to: 0
  4441                           
  4442                           ; BSR set to: 0
  4443  004662  5184               	movf	(ldexp@value+3)& (0+255),w,b
  4444  004664  0B7F               	andlw	127
  4445  004666  6E43               	movwf	??_ldexp& (0+255),c
  4446  004668  90D8               	bcf	status,0,c
  4447  00466A  3443               	rlcf	??_ldexp,w,c
  4448  00466C  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4449  00466E  6A45               	clrf	(??_ldexp+2)& (0+255),c
  4450  004670  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  4451  004672  5044               	movf	??_ldexp+1,w,c
  4452  004674  2785               	addwf	ldexp@newexp& (0+255),f,b
  4453  004676  5045               	movf	??_ldexp+2,w,c
  4454  004678  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4455  00467A  3583               	rlcf	(ldexp@value+2)& (0+255),w,b
  4456  00467C  36E8               	rlcf	wreg,f,c
  4457  00467E  0B01               	andlw	1
  4458  004680  2785               	addwf	ldexp@newexp& (0+255),f,b
  4459  004682  0E00               	movlw	0
  4460  004684  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4461                           
  4462                           ; BSR set to: 0
  4463  004686  AF86               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4464  004688  D005               	goto	l11738
  4465  00468A                     u10170:
  4466                           
  4467                           ; BSR set to: 0
  4468  00468A  6B81               	clrf	?_ldexp& (0+255),b
  4469  00468C  6B82               	clrf	(?_ldexp+1)& (0+255),b
  4470  00468E  6B83               	clrf	(?_ldexp+2)& (0+255),b
  4471  004690  6B84               	clrf	(?_ldexp+3)& (0+255),b
  4472  004692  D031               	goto	l1702
  4473  004694                     l11738:
  4474                           
  4475                           ; BSR set to: 0
  4476  004694  5186               	movf	(ldexp@newexp+1)& (0+255),w,b
  4477  004696  0A80               	xorlw	128
  4478  004698  0F7F               	addlw	-129
  4479  00469A  0E00               	movlw	0
  4480  00469C  B4D8               	btfsc	status,2,c
  4481  00469E  5D85               	subwf	ldexp@newexp& (0+255),w,b
  4482  0046A0  E30E               	bnc	l11752
  4483                           
  4484                           ; BSR set to: 0
  4485  0046A2  AF84               	btfss	(ldexp@value+3)& (0+255),7,b
  4486  0046A4  D006               	goto	l11748
  4487                           
  4488                           ; BSR set to: 0
  4489  0046A6  6981               	setf	?_ldexp& (0+255),b
  4490  0046A8  6982               	setf	(?_ldexp+1)& (0+255),b
  4491  0046AA  0E7F               	movlw	127
  4492  0046AC  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4493  0046AE  0EFF               	movlw	255
  4494  0046B0  D004               	goto	L4
  4495  0046B2                     l11748:
  4496                           
  4497                           ; BSR set to: 0
  4498  0046B2  6981               	setf	?_ldexp& (0+255),b
  4499  0046B4  6982               	setf	(?_ldexp+1)& (0+255),b
  4500  0046B6  0E7F               	movlw	127
  4501  0046B8  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4502  0046BA                     L4:
  4503  0046BA  6F84               	movwf	(?_ldexp+3)& (0+255),b
  4504  0046BC  D01C               	goto	l1702
  4505  0046BE                     l11752:
  4506                           
  4507                           ; BSR set to: 0
  4508  0046BE  3586               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4509  0046C0  3186               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4510  0046C2  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4511  0046C4  3185               	rrcf	ldexp@newexp& (0+255),w,b
  4512  0046C6  6E43               	movwf	??_ldexp& (0+255),c
  4513  0046C8  1984               	xorwf	(ldexp@value+3)& (0+255),w,b
  4514  0046CA  0B80               	andlw	-128
  4515  0046CC  1843               	xorwf	??_ldexp,w,c
  4516  0046CE  6F84               	movwf	(ldexp@value+3)& (0+255),b
  4517  0046D0  C085  F043         	movff	ldexp@newexp,??_ldexp
  4518  0046D4  0E01               	movlw	1
  4519  0046D6  1643               	andwf	??_ldexp,f,c
  4520  0046D8  3243               	rrcf	??_ldexp,f,c
  4521  0046DA  3243               	rrcf	??_ldexp,f,c
  4522  0046DC  5183               	movf	(ldexp@value+2)& (0+255),w,b
  4523  0046DE  1843               	xorwf	??_ldexp,w,c
  4524  0046E0  0B7F               	andlw	-129
  4525  0046E2  1843               	xorwf	??_ldexp,w,c
  4526  0046E4  6F83               	movwf	(ldexp@value+2)& (0+255),b
  4527                           
  4528                           ; BSR set to: 0
  4529  0046E6  C081  F081         	movff	ldexp@value,?_ldexp
  4530  0046EA  C082  F082         	movff	ldexp@value+1,?_ldexp+1
  4531  0046EE  C083  F083         	movff	ldexp@value+2,?_ldexp+2
  4532  0046F2  C084  F084         	movff	ldexp@value+3,?_ldexp+3
  4533  0046F6                     l1702:
  4534                           
  4535                           ; BSR set to: 0
  4536  0046F6  0012               	return	
  4537  0046F8                     __end_of_ldexp:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           intcon	equ	0xFF2
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           indf1	equ	0xFE7
  4549                           postdec1	equ	0xFE5
  4550                           fsr1h	equ	0xFE2
  4551                           fsr1l	equ	0xFE1
  4552                           indf2	equ	0xFDF
  4553                           postinc2	equ	0xFDE
  4554                           postdec2	equ	0xFDD
  4555                           plusw2	equ	0xFDB
  4556                           fsr2h	equ	0xFDA
  4557                           fsr2l	equ	0xFD9
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function _eval_poly *****************
  4561 ;; Defined at:
  4562 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  x               4   22[BANK0 ] int 
  4565 ;;  d               1   26[BANK0 ] PTR const 
  4566 ;;		 -> log@coeff(36), exp@coeff(40), 
  4567 ;;  n               2   27[BANK0 ] int 
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;  res             4   29[BANK0 ] int 
  4570 ;; Return value:  Size  Location     Type
  4571 ;;                  4   22[BANK0 ] int 
  4572 ;; Registers used:
  4573 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : F/0
  4576 ;;		On exit  : F/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4579 ;;      Params:         0       7       0       0       0       0       0
  4580 ;;      Locals:         0       4       0       0       0       0       0
  4581 ;;      Temps:          1       0       0       0       0       0       0
  4582 ;;      Totals:         1      11       0       0       0       0       0
  4583 ;;Total ram usage:       12 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:    4
  4586 ;; This function calls:
  4587 ;;		___fladd
  4588 ;;		___flmul
  4589 ;; This function is called by:
  4590 ;;		_exp
  4591 ;;		_log
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           	psect	text11
  4596  004396                     __ptext11:
  4597                           	opt stack 0
  4598  004396                     _eval_poly:
  4599                           	opt stack 23
  4600                           
  4601                           ; BSR set to: 0
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;incstack = 0
  4605                           ;incstack = 0
  4606  004396  517B               	movf	eval_poly@n& (0+255),w,b
  4607  004398  D84E               	call	PL44	;call to abstracted procedure
  4608  00439A  CFF5 F07D          	movff	tablat,eval_poly@res
  4609  00439E  0009               	tblrd		*+
  4610  0043A0  CFF5 F07E          	movff	tablat,eval_poly@res+1
  4611  0043A4  0009               	tblrd		*+
  4612  0043A6  CFF5 F07F          	movff	tablat,eval_poly@res+2
  4613  0043AA  000A               	tblrd		*-
  4614  0043AC  CFF5 F080          	movff	tablat,eval_poly@res+3
  4615  0043B0  D035               	goto	l11724
  4616  0043B2                     l11722:
  4617                           
  4618                           ; BSR set to: 0
  4619  0043B2  C07D  F064         	movff	eval_poly@res,?___flmul+4
  4620  0043B6  C07E  F065         	movff	eval_poly@res+1,?___flmul+5
  4621  0043BA  C07F  F066         	movff	eval_poly@res+2,?___flmul+6
  4622  0043BE  C080  F067         	movff	eval_poly@res+3,?___flmul+7
  4623  0043C2  C076  F060         	movff	eval_poly@x,?___flmul
  4624  0043C6  C077  F061         	movff	eval_poly@x+1,?___flmul+1
  4625  0043CA  C078  F062         	movff	eval_poly@x+2,?___flmul+2
  4626  0043CE  C079  F063         	movff	eval_poly@x+3,?___flmul+3
  4627  0043D2  EC4A  F020         	call	___flmul	;wreg free
  4628  0043D6  C063  F020         	movff	?___flmul+3,?___fladd+3
  4629  0043DA  C062  F01F         	movff	?___flmul+2,?___fladd+2
  4630  0043DE  C061  F01E         	movff	?___flmul+1,?___fladd+1
  4631  0043E2  C060  F01D         	movff	?___flmul,?___fladd
  4632  0043E6  0100               	movlb	0	; () banked
  4633  0043E8  077B               	decf	eval_poly@n& (0+255),f,b
  4634  0043EA  A0D8               	btfss	status,0,c
  4635  0043EC  077C               	decf	(eval_poly@n+1)& (0+255),f,b
  4636  0043EE  517B               	movf	eval_poly@n& (0+255),w,b
  4637  0043F0  D822               	call	PL44	;call to abstracted procedure
  4638  0043F2  CFF5 F021          	movff	tablat,?___fladd+4
  4639  0043F6  0009               	tblrd		*+
  4640  0043F8  CFF5 F022          	movff	tablat,?___fladd+5
  4641  0043FC  0009               	tblrd		*+
  4642  0043FE  CFF5 F023          	movff	tablat,?___fladd+6
  4643  004402  000A               	tblrd		*-
  4644  004404  CFF5 F024          	movff	tablat,?___fladd+7
  4645  004408  EC85  F01C         	call	___fladd	;wreg free
  4646  00440C  C020  F080         	movff	?___fladd+3,eval_poly@res+3
  4647  004410  C01F  F07F         	movff	?___fladd+2,eval_poly@res+2
  4648  004414  C01E  F07E         	movff	?___fladd+1,eval_poly@res+1
  4649  004418  C01D  F07D         	movff	?___fladd,eval_poly@res
  4650  00441C                     l11724:
  4651  00441C  0100               	movlb	0	; () banked
  4652  00441E  517C               	movf	(eval_poly@n+1)& (0+255),w,b
  4653  004420  117B               	iorwf	eval_poly@n& (0+255),w,b
  4654  004422  E1C7               	bnz	l11722
  4655                           
  4656                           ; BSR set to: 0
  4657  004424  C07D  F076         	movff	eval_poly@res,?_eval_poly
  4658  004428  C07E  F077         	movff	eval_poly@res+1,?_eval_poly+1
  4659  00442C  C07F  F078         	movff	eval_poly@res+2,?_eval_poly+2
  4660  004430  C080  F079         	movff	eval_poly@res+3,?_eval_poly+3
  4661                           
  4662                           ; BSR set to: 0
  4663  004434  0012               	return	
  4664  004436                     __end_of_eval_poly:
  4665                           	opt stack 0
  4666  004436                     PL44:
  4667                           	opt stack 23
  4668  004436  0D04               	mullw	4
  4669  004438  517A               	movf	eval_poly@d& (0+255),w,b
  4670  00443A  24F3               	addwf	prodl,w,c
  4671  00443C  6E42               	movwf	??_eval_poly& (0+255),c
  4672  00443E  C042  FFF6         	movff	??_eval_poly,tblptrl
  4673  004442  0E06               	movlw	high __smallconst
  4674  004444  6EF7               	movwf	tblptrh,c
  4675  004446  0009               	tblrd		*+
  4676  004448  0012               	return	
  4677  00444A                     __end_ofPL44:
  4678                           	opt stack 0
  4679                           tblptru	equ	0xFF8
  4680                           tblptrh	equ	0xFF7
  4681                           tblptrl	equ	0xFF6
  4682                           tablat	equ	0xFF5
  4683                           prodh	equ	0xFF4
  4684                           prodl	equ	0xFF3
  4685                           intcon	equ	0xFF2
  4686                           postinc0	equ	0xFEE
  4687                           wreg	equ	0xFE8
  4688                           indf1	equ	0xFE7
  4689                           postdec1	equ	0xFE5
  4690                           fsr1h	equ	0xFE2
  4691                           fsr1l	equ	0xFE1
  4692                           indf2	equ	0xFDF
  4693                           postinc2	equ	0xFDE
  4694                           postdec2	equ	0xFDD
  4695                           plusw2	equ	0xFDB
  4696                           fsr2h	equ	0xFDA
  4697                           fsr2l	equ	0xFD9
  4698                           status	equ	0xFD8
  4699                           
  4700 ;; *************** function _floor *****************
  4701 ;; Defined at:
  4702 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  x               4   47[BANK0 ] int 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  i               4   51[BANK0 ] int 
  4707 ;;  expon           2   55[BANK0 ] int 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  4   47[BANK0 ] int 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : F/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4717 ;;      Params:         0       4       0       0       0       0       0
  4718 ;;      Locals:         0       6       0       0       0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0
  4720 ;;      Totals:         0      10       0       0       0       0       0
  4721 ;;Total ram usage:       10 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    4
  4724 ;; This function calls:
  4725 ;;		___altofl
  4726 ;;		___fladd
  4727 ;;		___flge
  4728 ;;		_frexp
  4729 ;;		___fltol
  4730 ;; This function is called by:
  4731 ;;		_exp
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text12
  4736  003DC0                     __ptext12:
  4737                           	opt stack 0
  4738  003DC0                     _floor:
  4739                           	opt stack 23
  4740                           
  4741                           ; BSR set to: 0
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;incstack = 0
  4745                           ;incstack = 0
  4746  003DC0  C08F  F00E         	movff	floor@x,?_frexp
  4747  003DC4  C090  F00F         	movff	floor@x+1,?_frexp+1
  4748  003DC8  C091  F010         	movff	floor@x+2,?_frexp+2
  4749  003DCC  C092  F011         	movff	floor@x+3,?_frexp+3
  4750  003DD0  0E00               	movlw	high floor@expon
  4751  003DD2  6E13               	movwf	?_frexp+5,c
  4752  003DD4  0E97               	movlw	low floor@expon
  4753  003DD6  6E12               	movwf	?_frexp+4,c
  4754  003DD8  EC66  F024         	call	_frexp	;wreg free
  4755                           
  4756                           ; BSR set to: 0
  4757  003DDC  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  4758  003DDE  D00F               	goto	l11710
  4759                           
  4760                           ; BSR set to: 0
  4761  003DE0  AF92               	btfss	(floor@x+3)& (0+255),7,b
  4762  003DE2  D008               	goto	l1670
  4763                           
  4764                           ; BSR set to: 0
  4765  003DE4  0E00               	movlw	0
  4766  003DE6  6F8F               	movwf	?_floor& (0+255),b
  4767  003DE8  6F90               	movwf	(?_floor+1)& (0+255),b
  4768  003DEA  0E80               	movlw	128
  4769  003DEC  6F91               	movwf	(?_floor+2)& (0+255),b
  4770  003DEE  0EBF               	movlw	191
  4771  003DF0  6F92               	movwf	(?_floor+3)& (0+255),b
  4772  003DF2  D063               	goto	l1671
  4773  003DF4                     l1670:
  4774                           
  4775                           ; BSR set to: 0
  4776  003DF4  6B8F               	clrf	?_floor& (0+255),b
  4777  003DF6  6B90               	clrf	(?_floor+1)& (0+255),b
  4778  003DF8  6B91               	clrf	(?_floor+2)& (0+255),b
  4779  003DFA  6B92               	clrf	(?_floor+3)& (0+255),b
  4780  003DFC  D05E               	goto	l1671
  4781  003DFE                     l11710:
  4782                           
  4783                           ; BSR set to: 0
  4784  003DFE  0E1D               	movlw	29
  4785  003E00  5D97               	subwf	floor@expon& (0+255),w,b
  4786  003E02  0E00               	movlw	0
  4787  003E04  5998               	subwfb	(floor@expon+1)& (0+255),w,b
  4788  003E06  E309               	bnc	l11714
  4789                           
  4790                           ; BSR set to: 0
  4791  003E08  C08F  F08F         	movff	floor@x,?_floor
  4792  003E0C  C090  F090         	movff	floor@x+1,?_floor+1
  4793  003E10  C091  F091         	movff	floor@x+2,?_floor+2
  4794  003E14  C092  F092         	movff	floor@x+3,?_floor+3
  4795  003E18  D050               	goto	l1671
  4796  003E1A                     l11714:
  4797                           
  4798                           ; BSR set to: 0
  4799  003E1A  C08F  F076         	movff	floor@x,?___fltol
  4800  003E1E  C090  F077         	movff	floor@x+1,?___fltol+1
  4801  003E22  C091  F078         	movff	floor@x+2,?___fltol+2
  4802  003E26  C092  F079         	movff	floor@x+3,?___fltol+3
  4803  003E2A  ECCC  F023         	call	___fltol	;wreg free
  4804  003E2E  C079  F08D         	movff	?___fltol+3,?___altofl+3
  4805  003E32  C078  F08C         	movff	?___fltol+2,?___altofl+2
  4806  003E36  C077  F08B         	movff	?___fltol+1,?___altofl+1
  4807  003E3A  C076  F08A         	movff	?___fltol,?___altofl
  4808  003E3E  EC0F  F027         	call	___altofl	;wreg free
  4809  003E42  C08D  F096         	movff	?___altofl+3,floor@i+3
  4810  003E46  C08C  F095         	movff	?___altofl+2,floor@i+2
  4811  003E4A  C08B  F094         	movff	?___altofl+1,floor@i+1
  4812  003E4E  C08A  F093         	movff	?___altofl,floor@i
  4813  003E52  C08F  F00E         	movff	floor@x,?___flge
  4814  003E56  C090  F00F         	movff	floor@x+1,?___flge+1
  4815  003E5A  C091  F010         	movff	floor@x+2,?___flge+2
  4816  003E5E  C092  F011         	movff	floor@x+3,?___flge+3
  4817  003E62  C093  F012         	movff	floor@i,?___flge+4
  4818  003E66  C094  F013         	movff	floor@i+1,?___flge+5
  4819  003E6A  C095  F014         	movff	floor@i+2,?___flge+6
  4820  003E6E  C096  F015         	movff	floor@i+3,?___flge+7
  4821  003E72  EC2F  F026         	call	___flge	;wreg free
  4822  003E76  E219               	bc	l1673
  4823  003E78  C093  F01D         	movff	floor@i,?___fladd
  4824  003E7C  C094  F01E         	movff	floor@i+1,?___fladd+1
  4825  003E80  C095  F01F         	movff	floor@i+2,?___fladd+2
  4826  003E84  C096  F020         	movff	floor@i+3,?___fladd+3
  4827  003E88  6A21               	clrf	?___fladd+4,c
  4828  003E8A  6A22               	clrf	?___fladd+5,c
  4829  003E8C  0E80               	movlw	128
  4830  003E8E  6E23               	movwf	?___fladd+6,c
  4831  003E90  0EBF               	movlw	191
  4832  003E92  6E24               	movwf	?___fladd+7,c
  4833  003E94  EC85  F01C         	call	___fladd	;wreg free
  4834  003E98  C020  F092         	movff	?___fladd+3,?_floor+3
  4835  003E9C  C01F  F091         	movff	?___fladd+2,?_floor+2
  4836  003EA0  C01E  F090         	movff	?___fladd+1,?_floor+1
  4837  003EA4  C01D  F08F         	movff	?___fladd,?_floor
  4838  003EA8  D008               	goto	l1671
  4839  003EAA                     l1673:
  4840  003EAA  C093  F08F         	movff	floor@i,?_floor
  4841  003EAE  C094  F090         	movff	floor@i+1,?_floor+1
  4842  003EB2  C095  F091         	movff	floor@i+2,?_floor+2
  4843  003EB6  C096  F092         	movff	floor@i+3,?_floor+3
  4844  003EBA                     l1671:
  4845  003EBA  0012               	return	
  4846  003EBC                     __end_of_floor:
  4847                           	opt stack 0
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           postinc0	equ	0xFEE
  4856                           wreg	equ	0xFE8
  4857                           indf1	equ	0xFE7
  4858                           postdec1	equ	0xFE5
  4859                           fsr1h	equ	0xFE2
  4860                           fsr1l	equ	0xFE1
  4861                           indf2	equ	0xFDF
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           plusw2	equ	0xFDB
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function ___fltol *****************
  4870 ;; Defined at:
  4871 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  f1              4   22[BANK0 ] int 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  exp1            1   27[BANK0 ] unsigned char 
  4876 ;;  sign1           1   26[BANK0 ] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  4   22[BANK0 ] long 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : F/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4886 ;;      Params:         0       4       0       0       0       0       0
  4887 ;;      Locals:         0       2       0       0       0       0       0
  4888 ;;      Temps:          4       0       0       0       0       0       0
  4889 ;;      Totals:         4       6       0       0       0       0       0
  4890 ;;Total ram usage:       10 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    2
  4893 ;; This function calls:
  4894 ;;		Nothing
  4895 ;; This function is called by:
  4896 ;;		_doWork
  4897 ;;		_setEventData
  4898 ;;		_exp
  4899 ;;		_floor
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           	psect	text13
  4904  004798                     __ptext13:
  4905                           	opt stack 0
  4906  004798                     ___fltol:
  4907                           	opt stack 26
  4908                           
  4909                           ;incstack = 0
  4910                           ;incstack = 0
  4911  004798  0100               	movlb	0	; () banked
  4912  00479A  3578               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4913  00479C  3579               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4914  00479E  6F7B               	movwf	___fltol@exp1& (0+255),b
  4915  0047A0  677B               	tstfsz	___fltol@exp1& (0+255),b
  4916  0047A2  D005               	goto	l11804
  4917  0047A4                     l11802:
  4918                           
  4919                           ; BSR set to: 0
  4920  0047A4  6B76               	clrf	?___fltol& (0+255),b
  4921  0047A6  6B77               	clrf	(?___fltol+1)& (0+255),b
  4922  0047A8  6B78               	clrf	(?___fltol+2)& (0+255),b
  4923  0047AA  6B79               	clrf	(?___fltol+3)& (0+255),b
  4924  0047AC  D043               	goto	l1682
  4925  0047AE                     l11804:
  4926                           
  4927                           ; BSR set to: 0
  4928  0047AE  C076  F042         	movff	___fltol@f1,??___fltol
  4929  0047B2  C077  F043         	movff	___fltol@f1+1,??___fltol+1
  4930  0047B6  C078  F044         	movff	___fltol@f1+2,??___fltol+2
  4931  0047BA  C079  F045         	movff	___fltol@f1+3,??___fltol+3
  4932  0047BE  0E20               	movlw	32
  4933  0047C0  D005               	goto	u10260
  4934  0047C2                     u10265:
  4935  0047C2  90D8               	bcf	status,0,c
  4936  0047C4  3245               	rrcf	??___fltol+3,f,c
  4937  0047C6  3244               	rrcf	??___fltol+2,f,c
  4938  0047C8  3243               	rrcf	??___fltol+1,f,c
  4939  0047CA  3242               	rrcf	??___fltol,f,c
  4940  0047CC                     u10260:
  4941  0047CC  2EE8               	decfsz	wreg,f,c
  4942  0047CE  D7F9               	goto	u10265
  4943  0047D0  5042               	movf	??___fltol,w,c
  4944  0047D2  6F7A               	movwf	___fltol@sign1& (0+255),b
  4945                           
  4946                           ; BSR set to: 0
  4947  0047D4  8F78               	bsf	(___fltol@f1+2)& (0+255),7,b
  4948                           
  4949                           ; BSR set to: 0
  4950  0047D6  6B79               	clrf	(___fltol@f1+3)& (0+255),b
  4951                           
  4952                           ; BSR set to: 0
  4953  0047D8  0E96               	movlw	150
  4954  0047DA  5F7B               	subwf	___fltol@exp1& (0+255),f,b
  4955                           
  4956                           ; BSR set to: 0
  4957  0047DC  AF7B               	btfss	___fltol@exp1& (0+255),7,b
  4958  0047DE  D00C               	goto	l11822
  4959                           
  4960                           ; BSR set to: 0
  4961  0047E0  517B               	movf	___fltol@exp1& (0+255),w,b
  4962  0047E2  0A80               	xorlw	128
  4963  0047E4  0F97               	addlw	151
  4964  0047E6  E3DE               	bnc	l11802
  4965  0047E8                     l11818:
  4966                           
  4967                           ; BSR set to: 0
  4968  0047E8  90D8               	bcf	status,0,c
  4969  0047EA  3379               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4970  0047EC  3378               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4971  0047EE  3377               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4972  0047F0  3376               	rrcf	___fltol@f1& (0+255),f,b
  4973                           
  4974                           ; BSR set to: 0
  4975  0047F2  3F7B               	incfsz	___fltol@exp1& (0+255),f,b
  4976  0047F4  D7F9               	goto	l11818
  4977  0047F6  D00C               	goto	l11830
  4978  0047F8                     l11822:
  4979                           
  4980                           ; BSR set to: 0
  4981  0047F8  0E1F               	movlw	31
  4982  0047FA  657B               	cpfsgt	___fltol@exp1& (0+255),b
  4983  0047FC  D007               	goto	l11828
  4984  0047FE  D7D2               	goto	l11802
  4985  004800                     l11826:
  4986                           
  4987                           ; BSR set to: 0
  4988  004800  90D8               	bcf	status,0,c
  4989  004802  3776               	rlcf	___fltol@f1& (0+255),f,b
  4990  004804  3777               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4991  004806  3778               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4992  004808  3779               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4993  00480A  077B               	decf	___fltol@exp1& (0+255),f,b
  4994  00480C                     l11828:
  4995                           
  4996                           ; BSR set to: 0
  4997  00480C  677B               	tstfsz	___fltol@exp1& (0+255),b
  4998  00480E  D7F8               	goto	l11826
  4999  004810                     l11830:
  5000                           
  5001                           ; BSR set to: 0
  5002  004810  517A               	movf	___fltol@sign1& (0+255),w,b
  5003  004812  E008               	bz	l11834
  5004                           
  5005                           ; BSR set to: 0
  5006  004814  1F79               	comf	(___fltol@f1+3)& (0+255),f,b
  5007  004816  1F78               	comf	(___fltol@f1+2)& (0+255),f,b
  5008  004818  1F77               	comf	(___fltol@f1+1)& (0+255),f,b
  5009  00481A  6D76               	negf	___fltol@f1& (0+255),b
  5010  00481C  0E00               	movlw	0
  5011  00481E  2377               	addwfc	(___fltol@f1+1)& (0+255),f,b
  5012  004820  2378               	addwfc	(___fltol@f1+2)& (0+255),f,b
  5013  004822  2379               	addwfc	(___fltol@f1+3)& (0+255),f,b
  5014  004824                     l11834:
  5015                           
  5016                           ; BSR set to: 0
  5017  004824  C076  F076         	movff	___fltol@f1,?___fltol
  5018  004828  C077  F077         	movff	___fltol@f1+1,?___fltol+1
  5019  00482C  C078  F078         	movff	___fltol@f1+2,?___fltol+2
  5020  004830  C079  F079         	movff	___fltol@f1+3,?___fltol+3
  5021  004834                     l1682:
  5022                           
  5023                           ; BSR set to: 0
  5024  004834  0012               	return	
  5025  004836                     __end_of___fltol:
  5026                           	opt stack 0
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           intcon	equ	0xFF2
  5034                           postinc0	equ	0xFEE
  5035                           wreg	equ	0xFE8
  5036                           indf1	equ	0xFE7
  5037                           postdec1	equ	0xFE5
  5038                           fsr1h	equ	0xFE2
  5039                           fsr1l	equ	0xFE1
  5040                           indf2	equ	0xFDF
  5041                           postinc2	equ	0xFDE
  5042                           postdec2	equ	0xFDD
  5043                           plusw2	equ	0xFDB
  5044                           fsr2h	equ	0xFDA
  5045                           fsr2l	equ	0xFD9
  5046                           status	equ	0xFD8
  5047                           
  5048 ;; *************** function _frexp *****************
  5049 ;; Defined at:
  5050 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;  value           4   13[COMRAM] long 
  5053 ;;  eptr            2   17[COMRAM] PTR int 
  5054 ;;		 -> log@exponent(2), floor@expon(2), 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;		None
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  4   13[COMRAM] PTR int 
  5059 ;; Registers used:
  5060 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5061 ;; Tracked objects:
  5062 ;;		On entry : F/0
  5063 ;;		On exit  : F/0
  5064 ;;		Unchanged: F/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5066 ;;      Params:         6       0       0       0       0       0       0
  5067 ;;      Locals:         0       0       0       0       0       0       0
  5068 ;;      Temps:          3       0       0       0       0       0       0
  5069 ;;      Totals:         9       0       0       0       0       0       0
  5070 ;;Total ram usage:        9 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    2
  5073 ;; This function calls:
  5074 ;;		Nothing
  5075 ;; This function is called by:
  5076 ;;		_floor
  5077 ;;		_log
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text14
  5082  0048CC                     __ptext14:
  5083                           	opt stack 0
  5084  0048CC                     _frexp:
  5085                           	opt stack 25
  5086                           
  5087                           ; BSR set to: 0
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;incstack = 0
  5091                           ;incstack = 0
  5092  0048CC  EE20  F00E         	lfsr	2,frexp@value
  5093  0048D0  50DE               	movf	postinc2,w,c
  5094  0048D2  10DE               	iorwf	postinc2,w,c
  5095  0048D4  10DE               	iorwf	postinc2,w,c
  5096  0048D6  10DE               	iorwf	postinc2,w,c
  5097  0048D8  E10C               	bnz	l11788
  5098                           
  5099                           ; BSR set to: 0
  5100  0048DA  C012  FFD9         	movff	frexp@eptr,fsr2l
  5101  0048DE  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5102  0048E2  0E00               	movlw	0
  5103  0048E4  6ADE               	clrf	postinc2,c
  5104  0048E6  6ADD               	clrf	postdec2,c
  5105                           
  5106                           ; BSR set to: 0
  5107  0048E8  6A0E               	clrf	?_frexp,c
  5108  0048EA  6A0F               	clrf	?_frexp+1,c
  5109  0048EC  6A10               	clrf	?_frexp+2,c
  5110  0048EE  6A11               	clrf	?_frexp+3,c
  5111  0048F0  D02F               	goto	l1698
  5112  0048F2                     l11788:
  5113                           
  5114                           ; BSR set to: 0
  5115  0048F2  5011               	movf	frexp@value+3,w,c
  5116  0048F4  0B7F               	andlw	127
  5117  0048F6  6E14               	movwf	??_frexp& (0+255),c
  5118  0048F8  90D8               	bcf	status,0,c
  5119  0048FA  3414               	rlcf	??_frexp,w,c
  5120  0048FC  6E15               	movwf	(??_frexp+1)& (0+255),c
  5121  0048FE  6A16               	clrf	(??_frexp+2)& (0+255),c
  5122  004900  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  5123  004902  C012  FFD9         	movff	frexp@eptr,fsr2l
  5124  004906  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5125  00490A  C015  FFDE         	movff	??_frexp+1,postinc2
  5126  00490E  C016  FFDD         	movff	??_frexp+2,postdec2
  5127  004912  3410               	rlcf	frexp@value+2,w,c
  5128  004914  36E8               	rlcf	wreg,f,c
  5129  004916  0B01               	andlw	1
  5130  004918  C012  FFD9         	movff	frexp@eptr,fsr2l
  5131  00491C  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5132  004920  12DE               	iorwf	postinc2,f,c
  5133  004922  0E00               	movlw	0
  5134  004924  12DD               	iorwf	postdec2,f,c
  5135                           
  5136                           ; BSR set to: 0
  5137  004926  C012  FFD9         	movff	frexp@eptr,fsr2l
  5138  00492A  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5139  00492E  0E82               	movlw	130
  5140  004930  26DE               	addwf	postinc2,f,c
  5141  004932  0EFF               	movlw	255
  5142  004934  22DD               	addwfc	postdec2,f,c
  5143                           
  5144                           ; BSR set to: 0
  5145  004936  5011               	movf	frexp@value+3,w,c
  5146  004938  0B80               	andlw	-128
  5147  00493A  093F               	iorlw	63
  5148  00493C  6E11               	movwf	frexp@value+3,c
  5149                           
  5150                           ; BSR set to: 0
  5151  00493E  9E10               	bcf	frexp@value+2,7,c
  5152                           
  5153                           ; BSR set to: 0
  5154  004940  C00E  F00E         	movff	frexp@value,?_frexp
  5155  004944  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  5156  004948  C010  F010         	movff	frexp@value+2,?_frexp+2
  5157  00494C  C011  F011         	movff	frexp@value+3,?_frexp+3
  5158  004950                     l1698:
  5159                           
  5160                           ; BSR set to: 0
  5161  004950  0012               	return	
  5162  004952                     __end_of_frexp:
  5163                           	opt stack 0
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           intcon	equ	0xFF2
  5171                           postinc0	equ	0xFEE
  5172                           wreg	equ	0xFE8
  5173                           indf1	equ	0xFE7
  5174                           postdec1	equ	0xFE5
  5175                           fsr1h	equ	0xFE2
  5176                           fsr1l	equ	0xFE1
  5177                           indf2	equ	0xFDF
  5178                           postinc2	equ	0xFDE
  5179                           postdec2	equ	0xFDD
  5180                           plusw2	equ	0xFDB
  5181                           fsr2h	equ	0xFDA
  5182                           fsr2l	equ	0xFD9
  5183                           status	equ	0xFD8
  5184                           
  5185 ;; *************** function ___flge *****************
  5186 ;; Defined at:
  5187 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  ff1             4   13[COMRAM] PTR int 
  5190 ;;  ff2             4   17[COMRAM] PTR int 
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;		None
  5193 ;; Return value:  Size  Location     Type
  5194 ;;		None               void
  5195 ;; Registers used:
  5196 ;;		wreg, status,2, status,0
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5202 ;;      Params:         8       0       0       0       0       0       0
  5203 ;;      Locals:         0       0       0       0       0       0       0
  5204 ;;      Temps:          0       0       0       0       0       0       0
  5205 ;;      Totals:         8       0       0       0       0       0       0
  5206 ;;Total ram usage:        8 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:    2
  5209 ;; This function calls:
  5210 ;;		Nothing
  5211 ;; This function is called by:
  5212 ;;		_exp
  5213 ;;		_floor
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           	psect	text15
  5218  004C5E                     __ptext15:
  5219                           	opt stack 0
  5220  004C5E                     ___flge:
  5221                           	opt stack 25
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;incstack = 0
  5225                           ;incstack = 0
  5226  004C5E  AE11               	btfss	___flge@ff1+3,7,c
  5227  004C60  D009               	goto	l11762
  5228  004C62  6C0E               	negf	___flge@ff1,c
  5229  004C64  1E0F               	comf	___flge@ff1+1,f,c
  5230  004C66  B0D8               	btfsc	status,0,c
  5231  004C68  2A0F               	incf	___flge@ff1+1,f,c
  5232  004C6A  1E10               	comf	___flge@ff1+2,f,c
  5233  004C6C  B0D8               	btfsc	status,0,c
  5234  004C6E  2A10               	incf	___flge@ff1+2,f,c
  5235  004C70  0E80               	movlw	128
  5236  004C72  5611               	subfwb	___flge@ff1+3,f,c
  5237  004C74                     l11762:
  5238  004C74  AE15               	btfss	___flge@ff2+3,7,c
  5239  004C76  D009               	goto	l1629
  5240  004C78  6C12               	negf	___flge@ff2,c
  5241  004C7A  1E13               	comf	___flge@ff2+1,f,c
  5242  004C7C  B0D8               	btfsc	status,0,c
  5243  004C7E  2A13               	incf	___flge@ff2+1,f,c
  5244  004C80  1E14               	comf	___flge@ff2+2,f,c
  5245  004C82  B0D8               	btfsc	status,0,c
  5246  004C84  2A14               	incf	___flge@ff2+2,f,c
  5247  004C86  0E80               	movlw	128
  5248  004C88  5615               	subfwb	___flge@ff2+3,f,c
  5249  004C8A                     l1629:
  5250  004C8A  0E80               	movlw	128
  5251  004C8C  1A11               	xorwf	___flge@ff1+3,f,c
  5252  004C8E  1A15               	xorwf	___flge@ff2+3,f,c
  5253  004C90  5012               	movf	___flge@ff2,w,c
  5254  004C92  5C0E               	subwf	___flge@ff1,w,c
  5255  004C94  5013               	movf	___flge@ff2+1,w,c
  5256  004C96  580F               	subwfb	___flge@ff1+1,w,c
  5257  004C98  5014               	movf	___flge@ff2+2,w,c
  5258  004C9A  5810               	subwfb	___flge@ff1+2,w,c
  5259  004C9C  5015               	movf	___flge@ff2+3,w,c
  5260  004C9E  5811               	subwfb	___flge@ff1+3,w,c
  5261  004CA0  E202               	bc	l11768
  5262  004CA2  90D8               	bcf	status,0,c
  5263  004CA4  D001               	goto	l1630
  5264  004CA6                     l11768:
  5265  004CA6  80D8               	bsf	status,0,c
  5266  004CA8                     l1630:
  5267  004CA8  0012               	return	
  5268  004CAA                     __end_of___flge:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           indf1	equ	0xFE7
  5280                           postdec1	equ	0xFE5
  5281                           fsr1h	equ	0xFE2
  5282                           fsr1l	equ	0xFE1
  5283                           indf2	equ	0xFDF
  5284                           postinc2	equ	0xFDE
  5285                           postdec2	equ	0xFDD
  5286                           plusw2	equ	0xFDB
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function ___altofl *****************
  5292 ;; Defined at:
  5293 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  c               4   42[BANK0 ] long 
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;  sign            1   46[BANK0 ] unsigned char 
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  4   42[BANK0 ] unsigned char 
  5300 ;; Registers used:
  5301 ;;		wreg, status,2, status,0, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : F/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5307 ;;      Params:         0       4       0       0       0       0       0
  5308 ;;      Locals:         0       1       0       0       0       0       0
  5309 ;;      Temps:          0       0       0       0       0       0       0
  5310 ;;      Totals:         0       5       0       0       0       0       0
  5311 ;;Total ram usage:        5 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    3
  5314 ;; This function calls:
  5315 ;;		___flpack
  5316 ;; This function is called by:
  5317 ;;		_doWork
  5318 ;;		_floor
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text16
  5323  004E1E                     __ptext16:
  5324                           	opt stack 0
  5325  004E1E                     ___altofl:
  5326                           	opt stack 25
  5327                           
  5328                           ; BSR set to: 0
  5329                           
  5330                           ;incstack = 0
  5331                           ;incstack = 0
  5332  004E1E  6B8E               	clrf	___altofl@sign& (0+255),b
  5333  004E20  AF8D               	btfss	(___altofl@c+3)& (0+255),7,b
  5334  004E22  D00A               	goto	l11516
  5335                           
  5336                           ; BSR set to: 0
  5337  004E24  1F8D               	comf	(___altofl@c+3)& (0+255),f,b
  5338  004E26  1F8C               	comf	(___altofl@c+2)& (0+255),f,b
  5339  004E28  1F8B               	comf	(___altofl@c+1)& (0+255),f,b
  5340  004E2A  6D8A               	negf	___altofl@c& (0+255),b
  5341  004E2C  0E00               	movlw	0
  5342  004E2E  238B               	addwfc	(___altofl@c+1)& (0+255),f,b
  5343  004E30  238C               	addwfc	(___altofl@c+2)& (0+255),f,b
  5344  004E32  238D               	addwfc	(___altofl@c+3)& (0+255),f,b
  5345                           
  5346                           ; BSR set to: 0
  5347  004E34  0E01               	movlw	1
  5348  004E36  6F8E               	movwf	___altofl@sign& (0+255),b
  5349  004E38                     l11516:
  5350                           
  5351                           ; BSR set to: 0
  5352  004E38  C08A  F00E         	movff	___altofl@c,?___flpack
  5353  004E3C  C08B  F00F         	movff	___altofl@c+1,?___flpack+1
  5354  004E40  C08C  F010         	movff	___altofl@c+2,?___flpack+2
  5355  004E44  C08D  F011         	movff	___altofl@c+3,?___flpack+3
  5356  004E48  0E96               	movlw	150
  5357  004E4A  6E12               	movwf	?___flpack+4,c
  5358  004E4C  C08E  F013         	movff	___altofl@sign,?___flpack+5
  5359  004E50  EC6D  F021         	call	___flpack	;wreg free
  5360  004E54  C011  F08D         	movff	?___flpack+3,?___altofl+3
  5361  004E58  C010  F08C         	movff	?___flpack+2,?___altofl+2
  5362  004E5C  C00F  F08B         	movff	?___flpack+1,?___altofl+1
  5363  004E60  C00E  F08A         	movff	?___flpack,?___altofl
  5364  004E64  0012               	return	
  5365  004E66                     __end_of___altofl:
  5366                           	opt stack 0
  5367                           tblptru	equ	0xFF8
  5368                           tblptrh	equ	0xFF7
  5369                           tblptrl	equ	0xFF6
  5370                           tablat	equ	0xFF5
  5371                           prodh	equ	0xFF4
  5372                           prodl	equ	0xFF3
  5373                           intcon	equ	0xFF2
  5374                           postinc0	equ	0xFEE
  5375                           wreg	equ	0xFE8
  5376                           indf1	equ	0xFE7
  5377                           postdec1	equ	0xFE5
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           plusw2	equ	0xFDB
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function ___asflsub *****************
  5389 ;; Defined at:
  5390 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  f1p             2   30[BANK0 ] PTR 
  5393 ;;		 -> exp@x(4), doWork@temp(4), 
  5394 ;;  f2              4   32[BANK0 ] PTR 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;		None
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  4   30[BANK0 ] PTR 
  5399 ;; Registers used:
  5400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : F/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5406 ;;      Params:         0       6       0       0       0       0       0
  5407 ;;      Locals:         0       0       0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0
  5409 ;;      Totals:         0       6       0       0       0       0       0
  5410 ;;Total ram usage:        6 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    5
  5413 ;; This function calls:
  5414 ;;		___flsub
  5415 ;; This function is called by:
  5416 ;;		_doWork
  5417 ;;		_exp
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text17
  5422  004C10                     __ptext17:
  5423                           	opt stack 0
  5424  004C10                     ___asflsub:
  5425                           	opt stack 23
  5426                           
  5427                           ;	Return value of ___asflsub is never used
  5428                           
  5429                           ;incstack = 0
  5430                           ;incstack = 0
  5431  004C10  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5432  004C14  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5433  004C18  0100               	movlb	0	; () banked
  5434  004C1A  CFDE F076          	movff	postinc2,?___flsub
  5435  004C1E  CFDE F077          	movff	postinc2,?___flsub+1
  5436  004C22  CFDE F078          	movff	postinc2,?___flsub+2
  5437  004C26  CFDE F079          	movff	postinc2,?___flsub+3
  5438  004C2A  C080  F07A         	movff	___asflsub@f2,?___flsub+4
  5439  004C2E  C081  F07B         	movff	___asflsub@f2+1,?___flsub+5
  5440  004C32  C082  F07C         	movff	___asflsub@f2+2,?___flsub+6
  5441  004C36  C083  F07D         	movff	___asflsub@f2+3,?___flsub+7
  5442  004C3A  ECBB  F027         	call	___flsub	;wreg free
  5443  004C3E  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5444  004C42  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5445  004C46  0100               	movlb	0	; () banked
  5446  004C48  C076  FFDE         	movff	?___flsub,postinc2
  5447  004C4C  C077  FFDE         	movff	?___flsub+1,postinc2
  5448  004C50  C078  FFDE         	movff	?___flsub+2,postinc2
  5449  004C54  C079  FFDD         	movff	?___flsub+3,postdec2
  5450  004C58  06D9               	decf	fsr2l,f,c
  5451  004C5A  06D9               	decf	fsr2l,f,c
  5452                           
  5453                           ; BSR set to: 0
  5454  004C5C  0012               	return	
  5455  004C5E                     __end_of___asflsub:
  5456                           	opt stack 0
  5457                           tblptru	equ	0xFF8
  5458                           tblptrh	equ	0xFF7
  5459                           tblptrl	equ	0xFF6
  5460                           tablat	equ	0xFF5
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           intcon	equ	0xFF2
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           indf1	equ	0xFE7
  5467                           postdec1	equ	0xFE5
  5468                           fsr1h	equ	0xFE2
  5469                           fsr1l	equ	0xFE1
  5470                           indf2	equ	0xFDF
  5471                           postinc2	equ	0xFDE
  5472                           postdec2	equ	0xFDD
  5473                           plusw2	equ	0xFDB
  5474                           fsr2h	equ	0xFDA
  5475                           fsr2l	equ	0xFD9
  5476                           status	equ	0xFD8
  5477                           
  5478 ;; *************** function ___flsub *****************
  5479 ;; Defined at:
  5480 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  f1              4   22[BANK0 ] PTR 
  5483 ;;  f2              4   26[BANK0 ] PTR 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;		None
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  4   22[BANK0 ] PTR 
  5488 ;; Registers used:
  5489 ;;		wreg, status,2, status,0, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5495 ;;      Params:         0       8       0       0       0       0       0
  5496 ;;      Locals:         0       0       0       0       0       0       0
  5497 ;;      Temps:          0       0       0       0       0       0       0
  5498 ;;      Totals:         0       8       0       0       0       0       0
  5499 ;;Total ram usage:        8 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    4
  5502 ;; This function calls:
  5503 ;;		___fladd
  5504 ;; This function is called by:
  5505 ;;		_doWork
  5506 ;;		___asflsub
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           	psect	text18
  5511  004F76                     __ptext18:
  5512                           	opt stack 0
  5513  004F76                     ___flsub:
  5514                           	opt stack 24
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;incstack = 0
  5518                           ;incstack = 0
  5519  004F76  0100               	movlb	0	; () banked
  5520  004F78  0E80               	movlw	128
  5521  004F7A  1B7D               	xorwf	(___flsub@f2+3)& (0+255),f,b
  5522                           
  5523                           ; BSR set to: 0
  5524  004F7C  C076  F01D         	movff	___flsub@f1,?___fladd
  5525  004F80  C077  F01E         	movff	___flsub@f1+1,?___fladd+1
  5526  004F84  C078  F01F         	movff	___flsub@f1+2,?___fladd+2
  5527  004F88  C079  F020         	movff	___flsub@f1+3,?___fladd+3
  5528  004F8C  C07A  F021         	movff	___flsub@f2,?___fladd+4
  5529  004F90  C07B  F022         	movff	___flsub@f2+1,?___fladd+5
  5530  004F94  C07C  F023         	movff	___flsub@f2+2,?___fladd+6
  5531  004F98  C07D  F024         	movff	___flsub@f2+3,?___fladd+7
  5532  004F9C  EC85  F01C         	call	___fladd	;wreg free
  5533  004FA0  C020  F079         	movff	?___fladd+3,?___flsub+3
  5534  004FA4  C01F  F078         	movff	?___fladd+2,?___flsub+2
  5535  004FA8  C01E  F077         	movff	?___fladd+1,?___flsub+1
  5536  004FAC  C01D  F076         	movff	?___fladd,?___flsub
  5537  004FB0  0012               	return	
  5538  004FB2                     __end_of___flsub:
  5539                           	opt stack 0
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon	equ	0xFF2
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           indf1	equ	0xFE7
  5550                           postdec1	equ	0xFE5
  5551                           fsr1h	equ	0xFE2
  5552                           fsr1l	equ	0xFE1
  5553                           indf2	equ	0xFDF
  5554                           postinc2	equ	0xFDE
  5555                           postdec2	equ	0xFDD
  5556                           plusw2	equ	0xFDB
  5557                           fsr2h	equ	0xFDA
  5558                           fsr2l	equ	0xFD9
  5559                           status	equ	0xFD8
  5560                           
  5561 ;; *************** function ___asflmul *****************
  5562 ;; Defined at:
  5563 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;  mp              1    wreg     PTR 
  5566 ;;		 -> exp@x(4), 
  5567 ;;  multiplicand    4   22[BANK0 ] PTR 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  mp              1   65[COMRAM] PTR 
  5570 ;;		 -> exp@x(4), 
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  4   22[BANK0 ] PTR 
  5573 ;; Registers used:
  5574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5575 ;; Tracked objects:
  5576 ;;		On entry : F/0
  5577 ;;		On exit  : F/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5580 ;;      Params:         0       4       0       0       0       0       0
  5581 ;;      Locals:         1       0       0       0       0       0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0
  5583 ;;      Totals:         1       4       0       0       0       0       0
  5584 ;;Total ram usage:        5 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:    4
  5587 ;; This function calls:
  5588 ;;		___flmul
  5589 ;; This function is called by:
  5590 ;;		_exp
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text19
  5595  004CAA                     __ptext19:
  5596                           	opt stack 0
  5597  004CAA                     ___asflmul:
  5598                           	opt stack 23
  5599                           
  5600                           ;incstack = 0
  5601                           ;incstack = 0
  5602                           ;___asflmul@mp stored from wreg
  5603  004CAA  CFE8 F042          	movff	wreg,___asflmul@mp
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;	Return value of ___asflmul is never used
  5607  004CAE  5042               	movf	___asflmul@mp,w,c
  5608  004CB0  6ED9               	movwf	fsr2l,c
  5609  004CB2  6ADA               	clrf	fsr2h,c
  5610  004CB4  CFDE F060          	movff	postinc2,?___flmul
  5611  004CB8  CFDE F061          	movff	postinc2,?___flmul+1
  5612  004CBC  CFDE F062          	movff	postinc2,?___flmul+2
  5613  004CC0  CFDE F063          	movff	postinc2,?___flmul+3
  5614  004CC4  C076  F064         	movff	___asflmul@multiplicand,?___flmul+4
  5615  004CC8  C077  F065         	movff	___asflmul@multiplicand+1,?___flmul+5
  5616  004CCC  C078  F066         	movff	___asflmul@multiplicand+2,?___flmul+6
  5617  004CD0  C079  F067         	movff	___asflmul@multiplicand+3,?___flmul+7
  5618  004CD4  EC4A  F020         	call	___flmul	;wreg free
  5619  004CD8  5042               	movf	___asflmul@mp,w,c
  5620  004CDA  6ED9               	movwf	fsr2l,c
  5621  004CDC  6ADA               	clrf	fsr2h,c
  5622  004CDE  0100               	movlb	0	; () banked
  5623  004CE0  C060  FFDE         	movff	?___flmul,postinc2
  5624  004CE4  C061  FFDE         	movff	?___flmul+1,postinc2
  5625  004CE8  C062  FFDE         	movff	?___flmul+2,postinc2
  5626  004CEC  C063  FFDD         	movff	?___flmul+3,postdec2
  5627  004CF0  06D9               	decf	fsr2l,f,c
  5628  004CF2  06D9               	decf	fsr2l,f,c
  5629                           
  5630                           ; BSR set to: 0
  5631  004CF4  0012               	return	
  5632  004CF6                     __end_of___asflmul:
  5633                           	opt stack 0
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           postinc0	equ	0xFEE
  5642                           wreg	equ	0xFE8
  5643                           indf1	equ	0xFE7
  5644                           postdec1	equ	0xFE5
  5645                           fsr1h	equ	0xFE2
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           plusw2	equ	0xFDB
  5651                           fsr2h	equ	0xFDA
  5652                           fsr2l	equ	0xFD9
  5653                           status	equ	0xFD8
  5654                           
  5655 ;; *************** function ___fldiv *****************
  5656 ;; Defined at:
  5657 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  f1              4   43[COMRAM] PTR 
  5660 ;;  f2              4   47[COMRAM] PTR 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  f3              4   58[COMRAM] PTR 
  5663 ;;  sign            1   64[COMRAM] unsigned char 
  5664 ;;  exp             1   63[COMRAM] unsigned char 
  5665 ;;  cntr            1   62[COMRAM] unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  4   43[COMRAM] unsigned char 
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/1
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5675 ;;      Params:         8       0       0       0       0       0       0
  5676 ;;      Locals:        14       0       0       0       0       0       0
  5677 ;;      Temps:          0       0       0       0       0       0       0
  5678 ;;      Totals:        22       0       0       0       0       0       0
  5679 ;;Total ram usage:       22 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    3
  5682 ;; This function calls:
  5683 ;;		___flpack
  5684 ;; This function is called by:
  5685 ;;		_doWork
  5686 ;;		_Celsius2Fahrenheit
  5687 ;;		___asfldiv
  5688 ;;		_exp
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           	psect	text20
  5693  0045AC                     __ptext20:
  5694                           	opt stack 0
  5695  0045AC                     ___fldiv:
  5696                           	opt stack 25
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;incstack = 0
  5700                           ;incstack = 0
  5701  0045AC  342E               	rlcf	(___fldiv@f1+2)& (0+255),w,c
  5702  0045AE  342F               	rlcf	(___fldiv@f1+3)& (0+255),w,c
  5703  0045B0  6E40               	movwf	___fldiv@exp,c
  5704  0045B2  6640               	tstfsz	___fldiv@exp& (0+255),c
  5705  0045B4  D001               	goto	l11600
  5706  0045B6  D005               	goto	u10040
  5707  0045B8                     l11600:
  5708  0045B8  3432               	rlcf	(___fldiv@f2+2)& (0+255),w,c
  5709  0045BA  3433               	rlcf	(___fldiv@f2+3)& (0+255),w,c
  5710  0045BC  6E41               	movwf	___fldiv@sign,c
  5711  0045BE  6641               	tstfsz	___fldiv@sign& (0+255),c
  5712  0045C0  D005               	goto	l11604
  5713  0045C2                     u10040:
  5714  0045C2  6A2C               	clrf	?___fldiv,c
  5715  0045C4  6A2D               	clrf	?___fldiv+1,c
  5716  0045C6  6A2E               	clrf	?___fldiv+2,c
  5717  0045C8  6A2F               	clrf	?___fldiv+3,c
  5718  0045CA  D043               	goto	l1621
  5719  0045CC                     l11604:
  5720  0045CC  5041               	movf	___fldiv@sign,w,c
  5721  0045CE  0F89               	addlw	137
  5722  0045D0  5E40               	subwf	___fldiv@exp,f,c
  5723  0045D2  C02F  F041         	movff	___fldiv@f1+3,___fldiv@sign
  5724  0045D6  5033               	movf	(___fldiv@f2+3)& (0+255),w,c
  5725  0045D8  1A41               	xorwf	___fldiv@sign,f,c
  5726  0045DA  0E80               	movlw	128
  5727  0045DC  1641               	andwf	___fldiv@sign,f,c
  5728  0045DE  8E2E               	bsf	___fldiv@f1+2,7,c
  5729  0045E0  6A2F               	clrf	___fldiv@f1+3,c
  5730  0045E2  8E32               	bsf	___fldiv@f2+2,7,c
  5731  0045E4  6A33               	clrf	___fldiv@f2+3,c
  5732  0045E6  0E20               	movlw	32
  5733  0045E8  6E3F               	movwf	___fldiv@cntr,c
  5734  0045EA                     l11616:
  5735  0045EA  90D8               	bcf	status,0,c
  5736  0045EC  363B               	rlcf	___fldiv@f3,f,c
  5737  0045EE  363C               	rlcf	___fldiv@f3+1,f,c
  5738  0045F0  363D               	rlcf	___fldiv@f3+2,f,c
  5739  0045F2  363E               	rlcf	___fldiv@f3+3,f,c
  5740  0045F4  5030               	movf	___fldiv@f2,w,c
  5741  0045F6  5C2C               	subwf	___fldiv@f1,w,c
  5742  0045F8  5031               	movf	___fldiv@f2+1,w,c
  5743  0045FA  582D               	subwfb	___fldiv@f1+1,w,c
  5744  0045FC  5032               	movf	___fldiv@f2+2,w,c
  5745  0045FE  582E               	subwfb	___fldiv@f1+2,w,c
  5746  004600  5033               	movf	___fldiv@f2+3,w,c
  5747  004602  582F               	subwfb	___fldiv@f1+3,w,c
  5748  004604  E309               	bnc	l11624
  5749  004606  5030               	movf	___fldiv@f2,w,c
  5750  004608  5E2C               	subwf	___fldiv@f1,f,c
  5751  00460A  5031               	movf	___fldiv@f2+1,w,c
  5752  00460C  5A2D               	subwfb	___fldiv@f1+1,f,c
  5753  00460E  5032               	movf	___fldiv@f2+2,w,c
  5754  004610  5A2E               	subwfb	___fldiv@f1+2,f,c
  5755  004612  5033               	movf	___fldiv@f2+3,w,c
  5756  004614  5A2F               	subwfb	___fldiv@f1+3,f,c
  5757  004616  803B               	bsf	___fldiv@f3,0,c
  5758  004618                     l11624:
  5759  004618  90D8               	bcf	status,0,c
  5760  00461A  362C               	rlcf	___fldiv@f1,f,c
  5761  00461C  362D               	rlcf	___fldiv@f1+1,f,c
  5762  00461E  362E               	rlcf	___fldiv@f1+2,f,c
  5763  004620  362F               	rlcf	___fldiv@f1+3,f,c
  5764  004622  2E3F               	decfsz	___fldiv@cntr,f,c
  5765  004624  D7E2               	goto	l11616
  5766  004626  C03B  F00E         	movff	___fldiv@f3,?___flpack
  5767  00462A  C03C  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5768  00462E  C03D  F010         	movff	___fldiv@f3+2,?___flpack+2
  5769  004632  C03E  F011         	movff	___fldiv@f3+3,?___flpack+3
  5770  004636  C040  F012         	movff	___fldiv@exp,?___flpack+4
  5771  00463A  C041  F013         	movff	___fldiv@sign,?___flpack+5
  5772  00463E  EC6D  F021         	call	___flpack	;wreg free
  5773  004642  C011  F02F         	movff	?___flpack+3,?___fldiv+3
  5774  004646  C010  F02E         	movff	?___flpack+2,?___fldiv+2
  5775  00464A  C00F  F02D         	movff	?___flpack+1,?___fldiv+1
  5776  00464E  C00E  F02C         	movff	?___flpack,?___fldiv
  5777  004652                     l1621:
  5778  004652  0012               	return	
  5779  004654                     __end_of___fldiv:
  5780                           	opt stack 0
  5781                           tblptru	equ	0xFF8
  5782                           tblptrh	equ	0xFF7
  5783                           tblptrl	equ	0xFF6
  5784                           tablat	equ	0xFF5
  5785                           prodh	equ	0xFF4
  5786                           prodl	equ	0xFF3
  5787                           intcon	equ	0xFF2
  5788                           postinc0	equ	0xFEE
  5789                           wreg	equ	0xFE8
  5790                           indf1	equ	0xFE7
  5791                           postdec1	equ	0xFE5
  5792                           fsr1h	equ	0xFE2
  5793                           fsr1l	equ	0xFE1
  5794                           indf2	equ	0xFDF
  5795                           postinc2	equ	0xFDE
  5796                           postdec2	equ	0xFDD
  5797                           plusw2	equ	0xFDB
  5798                           fsr2h	equ	0xFDA
  5799                           fsr2l	equ	0xFD9
  5800                           status	equ	0xFD8
  5801                           
  5802 ;; *************** function _vscp_doOneSecondWork *****************
  5803 ;; Defined at:
  5804 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;		None
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;		None
  5809 ;; Return value:  Size  Location     Type
  5810 ;;		None               void
  5811 ;; Registers used:
  5812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5813 ;; Tracked objects:
  5814 ;;		On entry : F/0
  5815 ;;		On exit  : F/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5818 ;;      Params:         0       0       0       0       0       0       0
  5819 ;;      Locals:         0       0       0       0       0       0       0
  5820 ;;      Temps:          0       1       0       0       0       0       0
  5821 ;;      Totals:         0       1       0       0       0       0       0
  5822 ;;Total ram usage:        1 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:    8
  5825 ;; This function calls:
  5826 ;;		_vscp_getZone
  5827 ;;		_vscp_getSubzone
  5828 ;;		_vscp_sendHeartBeat
  5829 ;; This function is called by:
  5830 ;;		_main
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text21
  5835  004CF6                     __ptext21:
  5836                           	opt stack 0
  5837  004CF6                     _vscp_doOneSecondWork:
  5838                           	opt stack 21
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;vscp_firmware.c: 518: ++vscp_second;
  5842                           
  5843                           ;incstack = 0
  5844                           ;incstack = 0
  5845  004CF6  2A51               	incf	_vscp_second,f,c
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  5849  004CF8  0E3B               	movlw	59
  5850  004CFA  6451               	cpfsgt	_vscp_second,c
  5851  004CFC  D00C               	goto	l10230
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;vscp_firmware.c: 521: vscp_second = 0;
  5855  004CFE  6A51               	clrf	_vscp_second,c
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;vscp_firmware.c: 522: vscp_minute++;
  5859  004D00  2BB9               	incf	_vscp_minute& (0+255),f,b
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  5863  004D02  51BB               	movf	_vscp_node_state& (0+255),w,b
  5864  004D04  0A03               	xorlw	3
  5865  004D06  E107               	bnz	l10230
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  5869                           ;vscp_firmware.c: 527: vscp_getSubzone());
  5870  004D08  EC40  F02A         	call	_vscp_getSubzone	;wreg free
  5871  004D0C  6E44               	movwf	?_vscp_sendHeartBeat,c
  5872  004D0E  EC45  F02A         	call	_vscp_getZone	;wreg free
  5873  004D12  ECFA  F028         	call	_vscp_sendHeartBeat
  5874  004D16                     l10230:
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;vscp_firmware.c: 528: }
  5878                           ;vscp_firmware.c: 529: }
  5879                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  5880  004D16  0E3B               	movlw	59
  5881  004D18  65B9               	cpfsgt	_vscp_minute& (0+255),b
  5882  004D1A  D002               	goto	l10236
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;vscp_firmware.c: 532: vscp_minute = 0;
  5886  004D1C  6BB9               	clrf	_vscp_minute& (0+255),b
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;vscp_firmware.c: 533: vscp_hour++;
  5890  004D1E  2BB7               	incf	_vscp_hour& (0+255),f,b
  5891  004D20                     l10236:
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;vscp_firmware.c: 534: }
  5895                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  5896  004D20  0E17               	movlw	23
  5897  004D22  65B7               	cpfsgt	_vscp_hour& (0+255),b
  5898  004D24  D001               	goto	l10240
  5899                           
  5900                           ; BSR set to: 0
  5901  004D26  6BB7               	clrf	_vscp_hour& (0+255),b
  5902  004D28                     l10240:
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  5906  004D28  51BB               	movf	_vscp_node_state& (0+255),w,b
  5907  004D2A  0A03               	xorlw	3
  5908  004D2C  E109               	bnz	l1103
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  5912  004D2E  2A4C               	incf	_vscp_guid_reset,f,c
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  5916  004D30  C04C  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5917  004D34  0E0F               	movlw	15
  5918  004D36  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5919  004D38  0E02               	movlw	2
  5920  004D3A  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5921  004D3C  B0D8               	btfsc	status,0,c
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  5925  004D3E  6A4C               	clrf	_vscp_guid_reset,c
  5926  004D40                     l1103:
  5927                           
  5928                           ; BSR set to: 0
  5929  004D40  0012               	return	
  5930  004D42                     __end_of_vscp_doOneSecondWork:
  5931                           	opt stack 0
  5932                           tblptru	equ	0xFF8
  5933                           tblptrh	equ	0xFF7
  5934                           tblptrl	equ	0xFF6
  5935                           tablat	equ	0xFF5
  5936                           prodh	equ	0xFF4
  5937                           prodl	equ	0xFF3
  5938                           intcon	equ	0xFF2
  5939                           postinc0	equ	0xFEE
  5940                           wreg	equ	0xFE8
  5941                           indf1	equ	0xFE7
  5942                           postdec1	equ	0xFE5
  5943                           fsr1h	equ	0xFE2
  5944                           fsr1l	equ	0xFE1
  5945                           indf2	equ	0xFDF
  5946                           postinc2	equ	0xFDE
  5947                           postdec2	equ	0xFDD
  5948                           plusw2	equ	0xFDB
  5949                           fsr2h	equ	0xFDA
  5950                           fsr2l	equ	0xFD9
  5951                           status	equ	0xFD8
  5952                           
  5953 ;; *************** function _vscp_sendHeartBeat *****************
  5954 ;; Defined at:
  5955 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  zone            1    wreg     unsigned char 
  5958 ;;  subzone         1   67[COMRAM] unsigned char 
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;  zone            1   68[COMRAM] unsigned char 
  5961 ;; Return value:  Size  Location     Type
  5962 ;;		None               void
  5963 ;; Registers used:
  5964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : F/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5970 ;;      Params:         1       0       0       0       0       0       0
  5971 ;;      Locals:         1       0       0       0       0       0       0
  5972 ;;      Temps:          0       0       0       0       0       0       0
  5973 ;;      Totals:         2       0       0       0       0       0       0
  5974 ;;Total ram usage:        2 bytes
  5975 ;; Hardware stack levels used:    1
  5976 ;; Hardware stack levels required when called:    7
  5977 ;; This function calls:
  5978 ;;		_vscp_sendEvent
  5979 ;; This function is called by:
  5980 ;;		_vscp_doOneSecondWork
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           	psect	text22
  5985  0051F4                     __ptext22:
  5986                           	opt stack 0
  5987  0051F4                     _vscp_sendHeartBeat:
  5988                           	opt stack 21
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;incstack = 0
  5992                           ;incstack = 0
  5993                           ;vscp_sendHeartBeat@zone stored from wreg
  5994  0051F4  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5995                           
  5996                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  5997  0051F8  0E83               	movlw	131
  5998  0051FA  0100               	movlb	0	; () banked
  5999  0051FC  6FCA               	movwf	_vscp_omsg& (0+255),b
  6000                           
  6001                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  6002  0051FE  0E07               	movlw	7
  6003  005200  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  6004                           
  6005                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  6006  005202  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6007  005204  0E14               	movlw	20
  6008  005206  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6009                           
  6010                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  6011  005208  0E09               	movlw	9
  6012  00520A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  6016  00520C  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  6020  00520E  C045  F0D0         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  6024  005212  C044  F0D1         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;vscp_firmware.c: 380: vscp_sendEvent();
  6028  005216  EFE6  F028         	goto	_vscp_sendEvent	;wreg free
  6029  00521A                     __end_of_vscp_sendHeartBeat:
  6030                           	opt stack 0
  6031                           tblptru	equ	0xFF8
  6032                           tblptrh	equ	0xFF7
  6033                           tblptrl	equ	0xFF6
  6034                           tablat	equ	0xFF5
  6035                           prodh	equ	0xFF4
  6036                           prodl	equ	0xFF3
  6037                           intcon	equ	0xFF2
  6038                           postinc0	equ	0xFEE
  6039                           wreg	equ	0xFE8
  6040                           indf1	equ	0xFE7
  6041                           postdec1	equ	0xFE5
  6042                           fsr1h	equ	0xFE2
  6043                           fsr1l	equ	0xFE1
  6044                           indf2	equ	0xFDF
  6045                           postinc2	equ	0xFDE
  6046                           postdec2	equ	0xFDD
  6047                           plusw2	equ	0xFDB
  6048                           fsr2h	equ	0xFDA
  6049                           fsr2l	equ	0xFD9
  6050                           status	equ	0xFD8
  6051                           
  6052 ;; *************** function _vscp_getSubzone *****************
  6053 ;; Defined at:
  6054 ;;		line 2730 in file "../main.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;		None
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;		None
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      unsigned char 
  6061 ;; Registers used:
  6062 ;;		wreg, status,2, cstack
  6063 ;; Tracked objects:
  6064 ;;		On entry : F/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6068 ;;      Params:         0       0       0       0       0       0       0
  6069 ;;      Locals:         0       0       0       0       0       0       0
  6070 ;;      Temps:          0       0       0       0       0       0       0
  6071 ;;      Totals:         0       0       0       0       0       0       0
  6072 ;;Total ram usage:        0 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    3
  6075 ;; This function calls:
  6076 ;;		_readEEPROM
  6077 ;; This function is called by:
  6078 ;;		_vscp_doOneSecondWork
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text23
  6083  005480                     __ptext23:
  6084                           	opt stack 0
  6085  005480                     _vscp_getSubzone:
  6086                           	opt stack 25
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;main.c: 2731: return readEEPROM(0x42);
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;incstack = 0
  6093                           ;incstack = 0
  6094  005480  6A0F               	clrf	?_readEEPROM+1,c
  6095  005482  0E42               	movlw	66
  6096  005484  6E0E               	movwf	?_readEEPROM,c
  6097  005486  EF1C  F02A         	goto	_readEEPROM	;wreg free
  6098  00548A                     __end_of_vscp_getSubzone:
  6099                           	opt stack 0
  6100                           tblptru	equ	0xFF8
  6101                           tblptrh	equ	0xFF7
  6102                           tblptrl	equ	0xFF6
  6103                           tablat	equ	0xFF5
  6104                           prodh	equ	0xFF4
  6105                           prodl	equ	0xFF3
  6106                           intcon	equ	0xFF2
  6107                           postinc0	equ	0xFEE
  6108                           wreg	equ	0xFE8
  6109                           indf1	equ	0xFE7
  6110                           postdec1	equ	0xFE5
  6111                           fsr1h	equ	0xFE2
  6112                           fsr1l	equ	0xFE1
  6113                           indf2	equ	0xFDF
  6114                           postinc2	equ	0xFDE
  6115                           postdec2	equ	0xFDD
  6116                           plusw2	equ	0xFDB
  6117                           fsr2h	equ	0xFDA
  6118                           fsr2l	equ	0xFD9
  6119                           status	equ	0xFD8
  6120                           
  6121 ;; *************** function _vscp_getZone *****************
  6122 ;; Defined at:
  6123 ;;		line 2721 in file "../main.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;		None
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;		None
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  1    wreg      unsigned char 
  6130 ;; Registers used:
  6131 ;;		wreg, status,2, cstack
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6137 ;;      Params:         0       0       0       0       0       0       0
  6138 ;;      Locals:         0       0       0       0       0       0       0
  6139 ;;      Temps:          0       0       0       0       0       0       0
  6140 ;;      Totals:         0       0       0       0       0       0       0
  6141 ;;Total ram usage:        0 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    3
  6144 ;; This function calls:
  6145 ;;		_readEEPROM
  6146 ;; This function is called by:
  6147 ;;		_vscp_doOneSecondWork
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           	psect	text24
  6152  00548A                     __ptext24:
  6153                           	opt stack 0
  6154  00548A                     _vscp_getZone:
  6155                           	opt stack 25
  6156                           
  6157                           ;main.c: 2722: return readEEPROM(0x41);
  6158                           
  6159                           ;incstack = 0
  6160                           ;incstack = 0
  6161  00548A  6A0F               	clrf	?_readEEPROM+1,c
  6162  00548C  0E41               	movlw	65
  6163  00548E  6E0E               	movwf	?_readEEPROM,c
  6164  005490  EF1C  F02A         	goto	_readEEPROM	;wreg free
  6165  005494                     __end_of_vscp_getZone:
  6166                           	opt stack 0
  6167                           tblptru	equ	0xFF8
  6168                           tblptrh	equ	0xFF7
  6169                           tblptrl	equ	0xFF6
  6170                           tablat	equ	0xFF5
  6171                           prodh	equ	0xFF4
  6172                           prodl	equ	0xFF3
  6173                           intcon	equ	0xFF2
  6174                           postinc0	equ	0xFEE
  6175                           wreg	equ	0xFE8
  6176                           indf1	equ	0xFE7
  6177                           postdec1	equ	0xFE5
  6178                           fsr1h	equ	0xFE2
  6179                           fsr1l	equ	0xFE1
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           postdec2	equ	0xFDD
  6183                           plusw2	equ	0xFDB
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _doOneSecondWork *****************
  6189 ;; Defined at:
  6190 ;;		line 702 in file "../main.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;		None
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;  i               1   42[BANK0 ] unsigned char 
  6195 ;;  tmp             1   41[BANK0 ] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : F/1
  6202 ;;		On exit  : F/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6205 ;;      Params:         0       0       0       0       0       0       0
  6206 ;;      Locals:         0       2       0       0       0       0       0
  6207 ;;      Temps:          0       2       0       0       0       0       0
  6208 ;;      Totals:         0       4       0       0       0       0       0
  6209 ;;Total ram usage:        4 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    8
  6212 ;; This function calls:
  6213 ;;		_readEEPROM
  6214 ;;		_vscp_sendEvent
  6215 ;;		_sendTempEvent
  6216 ;; This function is called by:
  6217 ;;		_main
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           	psect	text25
  6222  003426                     __ptext25:
  6223                           	opt stack 0
  6224  003426                     _doOneSecondWork:
  6225                           	opt stack 21
  6226                           
  6227                           ; BSR set to: 1
  6228                           ;main.c: 704: uint8_t tmp;
  6229                           ;main.c: 705: uint8_t i;
  6230                           ;main.c: 708: if ( 0x03 == vscp_node_state ) {
  6231                           
  6232                           ;incstack = 0
  6233                           ;incstack = 0
  6234  003426  0100               	movlb	0	; () banked
  6235  003428  51BB               	movf	_vscp_node_state& (0+255),w,b
  6236  00342A  0A03               	xorlw	3
  6237  00342C  E001 D0B8          	bnz	l245
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;main.c: 710: for (i = 0; i < 6; i++) {
  6241  003430  6B8A               	clrf	doOneSecondWork@i& (0+255),b
  6242  003432                     l10150:
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;main.c: 713: tmp = readEEPROM(0x49 + i);
  6246  003432  0E49               	movlw	73
  6247  003434  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6248  003436  6E0E               	movwf	?_readEEPROM,c
  6249  003438  6A0F               	clrf	?_readEEPROM+1,c
  6250  00343A  0E00               	movlw	0
  6251  00343C  220F               	addwfc	?_readEEPROM+1,f,c
  6252  00343E  EC1C  F02A         	call	_readEEPROM	;wreg free
  6253  003442  0100               	movlb	0	; () banked
  6254  003444  6F89               	movwf	doOneSecondWork@tmp& (0+255),b
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;main.c: 714: if (tmp && (seconds_temp[i] > tmp)) {
  6258  003446  5189               	movf	doOneSecondWork@tmp& (0+255),w,b
  6259  003448  E016               	bz	l10160
  6260                           
  6261                           ; BSR set to: 0
  6262  00344A  0E0C               	movlw	low _seconds_temp
  6263  00344C  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6264  00344E  6ED9               	movwf	fsr2l,c
  6265  003450  6ADA               	clrf	fsr2h,c
  6266  003452  0E01               	movlw	high _seconds_temp
  6267  003454  22DA               	addwfc	fsr2h,f,c
  6268  003456  50DF               	movf	indf2,w,c
  6269  003458  6189               	cpfslt	doOneSecondWork@tmp& (0+255),b
  6270  00345A  D00D               	goto	l10160
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;main.c: 717: if ( sendTempEvent( i ) ) {
  6274  00345C  518A               	movf	doOneSecondWork@i& (0+255),w,b
  6275  00345E  ECEA  F024         	call	_sendTempEvent
  6276  003462  0900               	iorlw	0
  6277  003464  E008               	bz	l10160
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;main.c: 718: seconds_temp[i] = 0;
  6281  003466  0E0C               	movlw	low _seconds_temp
  6282  003468  0100               	movlb	0	; () banked
  6283  00346A  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6284  00346C  6ED9               	movwf	fsr2l,c
  6285  00346E  6ADA               	clrf	fsr2h,c
  6286  003470  0E01               	movlw	high _seconds_temp
  6287  003472  22DA               	addwfc	fsr2h,f,c
  6288  003474  6ADF               	clrf	indf2,c
  6289  003476                     l10160:
  6290                           
  6291                           ;main.c: 719: }
  6292                           ;main.c: 721: }
  6293                           ;main.c: 724: if (0x80 & readEEPROM(0x43 + i)) {
  6294  003476  0E43               	movlw	67
  6295  003478  0100               	movlb	0	; () banked
  6296  00347A  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6297  00347C  6E0E               	movwf	?_readEEPROM,c
  6298  00347E  6A0F               	clrf	?_readEEPROM+1,c
  6299  003480  0E00               	movlw	0
  6300  003482  220F               	addwfc	?_readEEPROM+1,f,c
  6301  003484  EC1C  F02A         	call	_readEEPROM	;wreg free
  6302  003488  0100               	movlb	0	; () banked
  6303  00348A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6304  00348C  AF87               	btfss	??_doOneSecondWork& (0+255),7,b
  6305  00348E  D084               	goto	l10214
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;main.c: 727: if (low_alarm & (1 << i)) {
  6309  003490  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6310  003494  0E01               	movlw	1
  6311  003496  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6312  003498  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6313  00349A  D002               	goto	u8244
  6314  00349C                     u8245:
  6315  00349C  90D8               	bcf	status,0,c
  6316  00349E  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6317  0034A0                     u8244:
  6318  0034A0  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6319  0034A2  D7FC               	goto	u8245
  6320  0034A4  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6321  0034A6  15B5               	andwf	_low_alarm& (0+255),w,b
  6322  0034A8  E035               	bz	l10188
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;main.c: 730: if (readEEPROM(i + 0x43) & (1<<3)) {
  6326  0034AA  D88A               	call	PL24	;call to abstracted procedure
  6327  0034AC  EC1C  F02A         	call	_readEEPROM	;wreg free
  6328  0034B0  0100               	movlb	0	; () banked
  6329  0034B2  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6330  0034B4  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  6331  0034B6  D02E               	goto	l10188
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;main.c: 733: vscp_omsg.priority = 0x00;
  6335  0034B8  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;main.c: 734: vscp_omsg.flags = 0x80 + 3;
  6339  0034BA  0E83               	movlw	131
  6340  0034BC  6FCA               	movwf	_vscp_omsg& (0+255),b
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;main.c: 736: if (readEEPROM(i + 0x43) & (1<<5)) {
  6344  0034BE  D880               	call	PL24	;call to abstracted procedure
  6345  0034C0  EC1C  F02A         	call	_readEEPROM	;wreg free
  6346  0034C4  0100               	movlb	0	; () banked
  6347  0034C6  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6348  0034C8  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6349  0034CA  D016               	goto	l10178
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;main.c: 738: if (readEEPROM(i + 0x43) & (1<<6)) {
  6353  0034CC  0E43               	movlw	67
  6354  0034CE  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6355  0034D0  6E0E               	movwf	?_readEEPROM,c
  6356  0034D2  6A0F               	clrf	?_readEEPROM+1,c
  6357  0034D4  0E00               	movlw	0
  6358  0034D6  220F               	addwfc	?_readEEPROM+1,f,c
  6359  0034D8  EC1C  F02A         	call	_readEEPROM	;wreg free
  6360  0034DC  0100               	movlb	0	; () banked
  6361  0034DE  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6362  0034E0  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6363  0034E2  D005               	goto	l10176
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;main.c: 739: vscp_omsg.vscp_class = 30;
  6367  0034E4  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6368  0034E6  0E1E               	movlw	30
  6369  0034E8  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6370                           
  6371                           ;main.c: 740: vscp_omsg.vscp_type = 5;
  6372  0034EA  0E05               	movlw	5
  6373  0034EC  D009               	goto	L6
  6374  0034EE                     l10176:
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;main.c: 742: else {
  6378                           ;main.c: 743: vscp_omsg.vscp_class = 30;
  6379  0034EE  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6380  0034F0  0E1E               	movlw	30
  6381  0034F2  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6382                           
  6383                           ;main.c: 744: vscp_omsg.vscp_type = 6;
  6384  0034F4  0E06               	movlw	6
  6385  0034F6  D004               	goto	L6
  6386  0034F8                     l10178:
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;main.c: 748: else {
  6390                           ;main.c: 750: vscp_omsg.vscp_class = 1;
  6391  0034F8  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6392  0034FA  0E01               	movlw	1
  6393  0034FC  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6394                           
  6395                           ;main.c: 751: vscp_omsg.vscp_type = 2;
  6396  0034FE  0E02               	movlw	2
  6397  003500                     L6:
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;main.c: 752: }
  6401                           ;main.c: 754: vscp_omsg.data[ 0 ] = i;
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;main.c: 755: vscp_omsg.data[ 1 ] =
  6405                           ;main.c: 756: readEEPROM(2 * i + 0x73);
  6406  003500  D850               	call	PL18	;call to abstracted procedure
  6407  003502  EC1C  F02A         	call	_readEEPROM	;wreg free
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;main.c: 757: vscp_omsg.data[ 2 ] =
  6411                           ;main.c: 758: readEEPROM(2 * i + 0x74);
  6412  003506  D863               	call	PL28	;call to abstracted procedure
  6413  003508  EC1C  F02A         	call	_readEEPROM	;wreg free
  6414  00350C  0100               	movlb	0	; () banked
  6415  00350E  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;main.c: 763: vscp_sendEvent();
  6419  003510  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  6420  003514                     l10188:
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;main.c: 765: }
  6424                           ;main.c: 766: }
  6425                           ;main.c: 769: if (high_alarm & (1 << i)) {
  6426  003514  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6427  003518  0E01               	movlw	1
  6428  00351A  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6429  00351C  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6430  00351E  D002               	goto	u8294
  6431  003520                     u8295:
  6432  003520  90D8               	bcf	status,0,c
  6433  003522  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6434  003524                     u8294:
  6435  003524  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6436  003526  D7FC               	goto	u8295
  6437  003528  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6438  00352A  15B4               	andwf	_high_alarm& (0+255),w,b
  6439  00352C  E035               	bz	l10214
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;main.c: 772: if ((readEEPROM(i + 0x43) & (1<<4))) {
  6443  00352E  D848               	call	PL24	;call to abstracted procedure
  6444  003530  EC1C  F02A         	call	_readEEPROM	;wreg free
  6445  003534  0100               	movlb	0	; () banked
  6446  003536  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6447  003538  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  6448  00353A  D02E               	goto	l10214
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;main.c: 774: vscp_omsg.priority = 0x00;
  6452  00353C  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;main.c: 775: vscp_omsg.flags = 0x80 + 3;
  6456  00353E  0E83               	movlw	131
  6457  003540  6FCA               	movwf	_vscp_omsg& (0+255),b
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;main.c: 777: if (readEEPROM(i + 0x43) & (1<<5)) {
  6461  003542  D83E               	call	PL24	;call to abstracted procedure
  6462  003544  EC1C  F02A         	call	_readEEPROM	;wreg free
  6463  003548  0100               	movlb	0	; () banked
  6464  00354A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6465  00354C  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6466  00354E  D016               	goto	l10204
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;main.c: 778: if (readEEPROM(i + 0x43) & (1<<6)) {
  6470  003550  0E43               	movlw	67
  6471  003552  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6472  003554  6E0E               	movwf	?_readEEPROM,c
  6473  003556  6A0F               	clrf	?_readEEPROM+1,c
  6474  003558  0E00               	movlw	0
  6475  00355A  220F               	addwfc	?_readEEPROM+1,f,c
  6476  00355C  EC1C  F02A         	call	_readEEPROM	;wreg free
  6477  003560  0100               	movlb	0	; () banked
  6478  003562  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6479  003564  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6480  003566  D005               	goto	l10202
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;main.c: 779: vscp_omsg.vscp_class = 30;
  6484  003568  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6485  00356A  0E1E               	movlw	30
  6486  00356C  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6487                           
  6488                           ;main.c: 780: vscp_omsg.vscp_type = 6;
  6489  00356E  0E06               	movlw	6
  6490  003570  D009               	goto	L7
  6491  003572                     l10202:
  6492                           
  6493                           ; BSR set to: 0
  6494                           ;main.c: 782: else {
  6495                           ;main.c: 783: vscp_omsg.vscp_class = 30;
  6496  003572  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6497  003574  0E1E               	movlw	30
  6498  003576  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6499                           
  6500                           ;main.c: 784: vscp_omsg.vscp_type = 5;
  6501  003578  0E05               	movlw	5
  6502  00357A  D004               	goto	L7
  6503  00357C                     l10204:
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;main.c: 787: else {
  6507                           ;main.c: 789: vscp_omsg.vscp_class = 1;
  6508  00357C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6509  00357E  0E01               	movlw	1
  6510  003580  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6511                           
  6512                           ;main.c: 790: vscp_omsg.vscp_type = 2;
  6513  003582  0E02               	movlw	2
  6514  003584                     L7:
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;main.c: 791: }
  6518                           ;main.c: 793: vscp_omsg.data[ 0 ] = i;
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;main.c: 794: vscp_omsg.data[ 1 ] = readEEPROM(2 * i +
  6522                           ;main.c: 795: 0x73);
  6523  003584  D80E               	call	PL18	;call to abstracted procedure
  6524  003586  EC1C  F02A         	call	_readEEPROM	;wreg free
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;main.c: 796: vscp_omsg.data[ 2 ] = readEEPROM(2 * i +
  6528                           ;main.c: 797: 0x74);
  6529  00358A  D821               	call	PL28	;call to abstracted procedure
  6530  00358C  EC1C  F02A         	call	_readEEPROM	;wreg free
  6531  003590  0100               	movlb	0	; () banked
  6532  003592  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;main.c: 802: vscp_sendEvent();
  6536  003594  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  6537  003598                     l10214:
  6538                           
  6539                           ; BSR set to: 0
  6540  003598  2B8A               	incf	doOneSecondWork@i& (0+255),f,b
  6541                           
  6542                           ; BSR set to: 0
  6543  00359A  0E05               	movlw	5
  6544  00359C  658A               	cpfsgt	doOneSecondWork@i& (0+255),b
  6545  00359E  D749               	goto	l10150
  6546  0035A0                     l245:
  6547                           
  6548                           ; BSR set to: 0
  6549  0035A0  0012               	return	
  6550  0035A2                     __end_of_doOneSecondWork:
  6551                           	opt stack 0
  6552  0035A2                     PL18:
  6553                           	opt stack 21
  6554  0035A2  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6555  0035A4  C08A  F0CF         	movff	doOneSecondWork@i,_vscp_omsg+5
  6556  0035A8  90D8               	bcf	status,0,c
  6557  0035AA  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6558  0035AC  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6559  0035AE  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6560  0035B0  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6561  0035B2  0E73               	movlw	115
  6562  0035B4  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6563  0035B6  6E0E               	movwf	?_readEEPROM,c
  6564  0035B8  0E00               	movlw	0
  6565  0035BA  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6566  0035BC  6E0F               	movwf	?_readEEPROM+1,c
  6567  0035BE  0012               	return	
  6568  0035C0                     __end_ofPL18:
  6569                           	opt stack 0
  6570  0035C0                     PL24:
  6571                           	opt stack 21
  6572  0035C0  0E43               	movlw	67
  6573  0035C2  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6574  0035C4  6E0E               	movwf	?_readEEPROM,c
  6575  0035C6  6A0F               	clrf	?_readEEPROM+1,c
  6576  0035C8  0E00               	movlw	0
  6577  0035CA  220F               	addwfc	?_readEEPROM+1,f,c
  6578  0035CC  0C00               	retlw	0
  6579  0035CE                     __end_ofPL24:
  6580                           	opt stack 0
  6581  0035CE                     PL28:
  6582                           	opt stack 21
  6583  0035CE  0100               	movlb	0	; () banked
  6584  0035D0  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6585  0035D2  90D8               	bcf	status,0,c
  6586  0035D4  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6587  0035D6  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6588  0035D8  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6589  0035DA  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6590  0035DC  0E74               	movlw	116
  6591  0035DE  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6592  0035E0  6E0E               	movwf	?_readEEPROM,c
  6593  0035E2  0E00               	movlw	0
  6594  0035E4  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6595  0035E6  6E0F               	movwf	?_readEEPROM+1,c
  6596  0035E8  0012               	return	
  6597  0035EA                     __end_ofPL28:
  6598                           	opt stack 0
  6599                           tblptru	equ	0xFF8
  6600                           tblptrh	equ	0xFF7
  6601                           tblptrl	equ	0xFF6
  6602                           tablat	equ	0xFF5
  6603                           prodh	equ	0xFF4
  6604                           prodl	equ	0xFF3
  6605                           intcon	equ	0xFF2
  6606                           postinc0	equ	0xFEE
  6607                           wreg	equ	0xFE8
  6608                           indf1	equ	0xFE7
  6609                           postdec1	equ	0xFE5
  6610                           fsr1h	equ	0xFE2
  6611                           fsr1l	equ	0xFE1
  6612                           indf2	equ	0xFDF
  6613                           postinc2	equ	0xFDE
  6614                           postdec2	equ	0xFDD
  6615                           plusw2	equ	0xFDB
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function _vscp_error *****************
  6621 ;; Defined at:
  6622 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;		None
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;		None
  6627 ;; Return value:  Size  Location     Type
  6628 ;;		None               void
  6629 ;; Registers used:
  6630 ;;		None
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6636 ;;      Params:         0       0       0       0       0       0       0
  6637 ;;      Locals:         0       0       0       0       0       0       0
  6638 ;;      Temps:          0       0       0       0       0       0       0
  6639 ;;      Totals:         0       0       0       0       0       0       0
  6640 ;;Total ram usage:        0 bytes
  6641 ;; Hardware stack levels used:    1
  6642 ;; Hardware stack levels required when called:    2
  6643 ;; This function calls:
  6644 ;;		Nothing
  6645 ;; This function is called by:
  6646 ;;		_main
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           	psect	text26
  6651  0054C4                     __ptext26:
  6652                           	opt stack 0
  6653  0054C4                     _vscp_error:
  6654                           	opt stack 27
  6655                           
  6656                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;incstack = 0
  6660                           ;incstack = 0
  6661  0054C4  6A4D               	clrf	_vscp_initledfunc,c
  6662  0054C6  0012               	return	
  6663  0054C8                     __end_of_vscp_error:
  6664                           	opt stack 0
  6665                           tblptru	equ	0xFF8
  6666                           tblptrh	equ	0xFF7
  6667                           tblptrl	equ	0xFF6
  6668                           tablat	equ	0xFF5
  6669                           prodh	equ	0xFF4
  6670                           prodl	equ	0xFF3
  6671                           intcon	equ	0xFF2
  6672                           postinc0	equ	0xFEE
  6673                           wreg	equ	0xFE8
  6674                           indf1	equ	0xFE7
  6675                           postdec1	equ	0xFE5
  6676                           fsr1h	equ	0xFE2
  6677                           fsr1l	equ	0xFE1
  6678                           indf2	equ	0xFDF
  6679                           postinc2	equ	0xFDE
  6680                           postdec2	equ	0xFDD
  6681                           plusw2	equ	0xFDB
  6682                           fsr2h	equ	0xFDA
  6683                           fsr2l	equ	0xFD9
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _handle_sync *****************
  6687 ;; Defined at:
  6688 ;;		line 1249 in file "../main.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;  i               1   41[BANK0 ] unsigned char 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;		None               void
  6695 ;; Registers used:
  6696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : F/0
  6699 ;;		On exit  : F/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6702 ;;      Params:         0       0       0       0       0       0       0
  6703 ;;      Locals:         0       1       0       0       0       0       0
  6704 ;;      Temps:          0       2       0       0       0       0       0
  6705 ;;      Totals:         0       3       0       0       0       0       0
  6706 ;;Total ram usage:        3 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    8
  6709 ;; This function calls:
  6710 ;;		_readEEPROM
  6711 ;;		_sendTempEvent
  6712 ;; This function is called by:
  6713 ;;		_main
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	text27
  6718  004952                     __ptext27:
  6719                           	opt stack 0
  6720  004952                     _handle_sync:
  6721                           	opt stack 21
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;main.c: 1250: uint8_t i;
  6725                           ;main.c: 1253: for (i = 0; i < 6; i++) {
  6726                           
  6727                           ;incstack = 0
  6728                           ;incstack = 0
  6729  004952  6B89               	clrf	handle_sync@i& (0+255),b
  6730  004954                     l10124:
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;main.c: 1255: if ((0xff != vscp_imsg.data[ 1 ] ||
  6734                           ;main.c: 1256: (readEEPROM(2 * i + 0x73) != vscp_imsg.data[ 1 ])) &&
  6735                           ;main.c: 1257: (0xff != vscp_imsg.data[ 2 ] ||
  6736                           ;main.c: 1258: (readEEPROM(2 * i + 0x74) != vscp_imsg.data[ 2 ]))) {
  6737  004954  29C3               	incf	(_vscp_imsg+7)& (0+255),w,b
  6738  004956  E110               	bnz	l10128
  6739                           
  6740                           ; BSR set to: 0
  6741  004958  90D8               	bcf	status,0,c
  6742  00495A  3589               	rlcf	handle_sync@i& (0+255),w,b
  6743  00495C  6F87               	movwf	??_handle_sync& (0+255),b
  6744  00495E  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6745  004960  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6746  004962  0E73               	movlw	115
  6747  004964  2587               	addwf	??_handle_sync& (0+255),w,b
  6748  004966  6E0E               	movwf	?_readEEPROM,c
  6749  004968  0E00               	movlw	0
  6750  00496A  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6751  00496C  6E0F               	movwf	?_readEEPROM+1,c
  6752  00496E  EC1C  F02A         	call	_readEEPROM	;wreg free
  6753  004972  0100               	movlb	0	; () banked
  6754  004974  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6755  004976  E028               	bz	l10138
  6756  004978                     l10128:
  6757                           
  6758                           ; BSR set to: 0
  6759  004978  29C4               	incf	(_vscp_imsg+8)& (0+255),w,b
  6760  00497A  E110               	bnz	l295
  6761                           
  6762                           ; BSR set to: 0
  6763  00497C  90D8               	bcf	status,0,c
  6764  00497E  3589               	rlcf	handle_sync@i& (0+255),w,b
  6765  004980  6F87               	movwf	??_handle_sync& (0+255),b
  6766  004982  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6767  004984  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6768  004986  0E74               	movlw	116
  6769  004988  2587               	addwf	??_handle_sync& (0+255),w,b
  6770  00498A  6E0E               	movwf	?_readEEPROM,c
  6771  00498C  0E00               	movlw	0
  6772  00498E  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6773  004990  6E0F               	movwf	?_readEEPROM+1,c
  6774  004992  EC1C  F02A         	call	_readEEPROM	;wreg free
  6775  004996  0100               	movlb	0	; () banked
  6776  004998  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6777  00499A  E016               	bz	l10138
  6778  00499C                     l295:
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;main.c: 1261: timeout_clock = 0;
  6782  00499C  0101               	movlb	1	; () banked
  6783  00499E  6B16               	clrf	_timeout_clock& (0+255),b
  6784  0049A0  6B17               	clrf	(_timeout_clock+1)& (0+255),b
  6785  0049A2  6B18               	clrf	(_timeout_clock+2)& (0+255),b
  6786  0049A4  6B19               	clrf	(_timeout_clock+3)& (0+255),b
  6787                           
  6788                           ;main.c: 1262: while (!sendTempEvent(i)) {
  6789  0049A6  D00A               	goto	l10136
  6790  0049A8                     l10132:
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;main.c: 1263: if (timeout_clock > 1000) break;
  6794  0049A8  0EE9               	movlw	233
  6795  0049AA  0101               	movlb	1	; () banked
  6796  0049AC  5D16               	subwf	_timeout_clock& (0+255),w,b
  6797  0049AE  0E03               	movlw	3
  6798  0049B0  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b
  6799  0049B2  0E00               	movlw	0
  6800  0049B4  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b
  6801  0049B6  0E00               	movlw	0
  6802  0049B8  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b
  6803  0049BA  E206               	bc	l10138
  6804  0049BC                     l10136:
  6805                           
  6806                           ; BSR set to: 1
  6807  0049BC  0100               	movlb	0	; () banked
  6808  0049BE  5189               	movf	handle_sync@i& (0+255),w,b
  6809  0049C0  ECEA  F024         	call	_sendTempEvent
  6810  0049C4  0900               	iorlw	0
  6811  0049C6  E0F0               	bz	l10132
  6812  0049C8                     l10138:
  6813  0049C8  0100               	movlb	0	; () banked
  6814  0049CA  2B89               	incf	handle_sync@i& (0+255),f,b
  6815                           
  6816                           ; BSR set to: 0
  6817  0049CC  0E05               	movlw	5
  6818  0049CE  6589               	cpfsgt	handle_sync@i& (0+255),b
  6819  0049D0  D7C1               	goto	l10124
  6820                           
  6821                           ; BSR set to: 0
  6822  0049D2  0C05               	retlw	5
  6823  0049D4                     __end_of_handle_sync:
  6824                           	opt stack 0
  6825                           tblptru	equ	0xFF8
  6826                           tblptrh	equ	0xFF7
  6827                           tblptrl	equ	0xFF6
  6828                           tablat	equ	0xFF5
  6829                           prodh	equ	0xFF4
  6830                           prodl	equ	0xFF3
  6831                           intcon	equ	0xFF2
  6832                           postinc0	equ	0xFEE
  6833                           wreg	equ	0xFE8
  6834                           indf1	equ	0xFE7
  6835                           postdec1	equ	0xFE5
  6836                           fsr1h	equ	0xFE2
  6837                           fsr1l	equ	0xFE1
  6838                           indf2	equ	0xFDF
  6839                           postinc2	equ	0xFDE
  6840                           postdec2	equ	0xFDD
  6841                           plusw2	equ	0xFDB
  6842                           fsr2h	equ	0xFDA
  6843                           fsr2l	equ	0xFD9
  6844                           status	equ	0xFD8
  6845                           
  6846 ;; *************** function _sendTempEvent *****************
  6847 ;; Defined at:
  6848 ;;		line 815 in file "../main.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;  i               1    wreg     unsigned char 
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;  i               1   38[BANK0 ] unsigned char 
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      unsigned char 
  6855 ;; Registers used:
  6856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6857 ;; Tracked objects:
  6858 ;;		On entry : F/0
  6859 ;;		On exit  : F/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6862 ;;      Params:         0       0       0       0       0       0       0
  6863 ;;      Locals:         0       1       0       0       0       0       0
  6864 ;;      Temps:          0       1       0       0       0       0       0
  6865 ;;      Totals:         0       2       0       0       0       0       0
  6866 ;;Total ram usage:        2 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    7
  6869 ;; This function calls:
  6870 ;;		_readEEPROM
  6871 ;;		_vscp_sendEvent
  6872 ;;		_setEventData
  6873 ;; This function is called by:
  6874 ;;		_doOneSecondWork
  6875 ;;		_handle_sync
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	text28
  6880  0049D4                     __ptext28:
  6881                           	opt stack 0
  6882  0049D4                     _sendTempEvent:
  6883                           	opt stack 21
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;incstack = 0
  6887                           ;incstack = 0
  6888                           ;sendTempEvent@i stored from wreg
  6889  0049D4  CFE8 F086          	movff	wreg,sendTempEvent@i
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;main.c: 816: vscp_omsg.priority = 0x03;
  6893  0049D8  0E03               	movlw	3
  6894  0049DA  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  6895                           
  6896                           ;main.c: 817: vscp_omsg.flags = 0x80 + 4;
  6897  0049DC  0E84               	movlw	132
  6898  0049DE  6FCA               	movwf	_vscp_omsg& (0+255),b
  6899                           
  6900                           ;main.c: 818: vscp_omsg.vscp_class = 10;
  6901  0049E0  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6902  0049E2  0E0A               	movlw	10
  6903  0049E4  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6904                           
  6905                           ;main.c: 819: vscp_omsg.vscp_type = 6;
  6906  0049E6  0E06               	movlw	6
  6907  0049E8  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;main.c: 822: vscp_omsg.data[ 0 ] = 0x80 |
  6911                           ;main.c: 823: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6912                           ;main.c: 824: i;
  6913  0049EA  D82C               	call	PL70	;call to abstracted procedure
  6914  0049EC  EC1C  F02A         	call	_readEEPROM	;wreg free
  6915  0049F0  0100               	movlb	0	; () banked
  6916  0049F2  6F85               	movwf	??_sendTempEvent& (0+255),b
  6917  0049F4  0E03               	movlw	3
  6918  0049F6  1785               	andwf	??_sendTempEvent& (0+255),f,b
  6919  0049F8  90D8               	bcf	status,0,c
  6920  0049FA  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6921  0049FC  90D8               	bcf	status,0,c
  6922  0049FE  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6923  004A00  90D8               	bcf	status,0,c
  6924  004A02  3585               	rlcf	??_sendTempEvent& (0+255),w,b
  6925  004A04  1186               	iorwf	sendTempEvent@i& (0+255),w,b
  6926  004A06  0980               	iorlw	128
  6927  004A08  6FCF               	movwf	(_vscp_omsg+5)& (0+255),b
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;main.c: 826: vscp_omsg.data[ 1 ] = 0x82;
  6931  004A0A  0E82               	movlw	130
  6932  004A0C  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;main.c: 828: setEventData( current_temp[i],
  6936                           ;main.c: 829: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6937  004A0E  5186               	movf	sendTempEvent@i& (0+255),w,b
  6938  004A10  0D02               	mullw	2
  6939  004A12  0E00               	movlw	low _current_temp
  6940  004A14  24F3               	addwf	prodl,w,c
  6941  004A16  6ED9               	movwf	fsr2l,c
  6942  004A18  0E01               	movlw	high _current_temp
  6943  004A1A  20F4               	addwfc	prodh,w,c
  6944  004A1C  6EDA               	movwf	fsr2h,c
  6945  004A1E  CFDE F07C          	movff	postinc2,?_setEventData
  6946  004A22  CFDD F07D          	movff	postdec2,?_setEventData+1
  6947  004A26  D80E               	call	PL70	;call to abstracted procedure
  6948  004A28  EC1C  F02A         	call	_readEEPROM	;wreg free
  6949  004A2C  0B03               	andlw	3
  6950  004A2E  0100               	movlb	0	; () banked
  6951  004A30  6F7E               	movwf	(?_setEventData+2)& (0+255),b
  6952  004A32  EC7E  F022         	call	_setEventData	;wreg free
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;main.c: 832: if (!vscp_sendEvent()) {
  6956  004A36  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  6957  004A3A  0900               	iorlw	0
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;main.c: 833: return 0;
  6961  004A3C  0E00               	movlw	0
  6962  004A3E  A4D8               	btfss	status,2,c
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;main.c: 834: }
  6966                           ;main.c: 836: return 1;
  6967  004A40  0E01               	movlw	1
  6968                           
  6969                           ; BSR set to: 0
  6970  004A42  0012               	return	
  6971  004A44                     __end_of_sendTempEvent:
  6972                           	opt stack 0
  6973  004A44                     PL70:
  6974                           	opt stack 21
  6975  004A44  0E43               	movlw	67
  6976  004A46  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6977  004A48  6E0E               	movwf	?_readEEPROM,c
  6978  004A4A  6A0F               	clrf	?_readEEPROM+1,c
  6979  004A4C  0E00               	movlw	0
  6980  004A4E  220F               	addwfc	?_readEEPROM+1,f,c
  6981  004A50  0C00               	retlw	0
  6982  004A52                     __end_ofPL70:
  6983                           	opt stack 0
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           intcon	equ	0xFF2
  6991                           postinc0	equ	0xFEE
  6992                           wreg	equ	0xFE8
  6993                           indf1	equ	0xFE7
  6994                           postdec1	equ	0xFE5
  6995                           fsr1h	equ	0xFE2
  6996                           fsr1l	equ	0xFE1
  6997                           indf2	equ	0xFDF
  6998                           postinc2	equ	0xFDE
  6999                           postdec2	equ	0xFDD
  7000                           plusw2	equ	0xFDB
  7001                           fsr2h	equ	0xFDA
  7002                           fsr2l	equ	0xFD9
  7003                           status	equ	0xFD8
  7004                           
  7005 ;; *************** function _setEventData *****************
  7006 ;; Defined at:
  7007 ;;		line 844 in file "../main.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;  v               2   28[BANK0 ] int 
  7010 ;;  unit            1   30[BANK0 ] unsigned char 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  newval          4   31[BANK0 ] unsigned char 
  7013 ;;  ival            2   35[BANK0 ] int 
  7014 ;; Return value:  Size  Location     Type
  7015 ;;		None               void
  7016 ;; Registers used:
  7017 ;;		wreg, status,2, status,0, cstack
  7018 ;; Tracked objects:
  7019 ;;		On entry : F/0
  7020 ;;		On exit  : F/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7023 ;;      Params:         0       3       0       0       0       0       0
  7024 ;;      Locals:         0       6       0       0       0       0       0
  7025 ;;      Temps:          0       0       0       0       0       0       0
  7026 ;;      Totals:         0       9       0       0       0       0       0
  7027 ;;Total ram usage:        9 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; Hardware stack levels required when called:    5
  7030 ;; This function calls:
  7031 ;;		_Celsius2Kelvin
  7032 ;;		_Celsius2Fahrenheit
  7033 ;;		___awtofl
  7034 ;;		___fltol
  7035 ;; This function is called by:
  7036 ;;		_sendTempEvent
  7037 ;; This function uses a non-reentrant model
  7038 ;;
  7039                           
  7040                           	psect	text29
  7041  0044FC                     __ptext29:
  7042                           	opt stack 0
  7043  0044FC                     _setEventData:
  7044                           	opt stack 22
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;main.c: 845: double newval;
  7048                           ;main.c: 846: int ival;
  7049                           ;main.c: 848: if (0 == unit) {
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;incstack = 0
  7053                           ;incstack = 0
  7054  0044FC  677E               	tstfsz	setEventData@unit& (0+255),b
  7055  0044FE  D019               	goto	l10502
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;main.c: 850: newval = Celsius2Kelvin(v);
  7059  004500  C07C  F018         	movff	setEventData@v,?___awtofl
  7060  004504  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  7061  004508  EC15  F028         	call	___awtofl	;wreg free
  7062  00450C  C01B  F02F         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  7063  004510  C01A  F02E         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  7064  004514  C019  F02D         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  7065  004518  C018  F02C         	movff	?___awtofl,?_Celsius2Kelvin
  7066  00451C  EC32  F028         	call	_Celsius2Kelvin	;wreg free
  7067  004520  C02F  F082         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  7068  004524  C02E  F081         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  7069  004528  C02D  F080         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  7070  00452C  C02C  F07F         	movff	?_Celsius2Kelvin,setEventData@newval
  7071                           
  7072                           ;main.c: 851: } else if (2 == unit) {
  7073  004530  D02A               	goto	l253
  7074  004532                     l10502:
  7075                           
  7076                           ; BSR set to: 0
  7077  004532  517E               	movf	setEventData@unit& (0+255),w,b
  7078  004534  0A02               	xorlw	2
  7079  004536  E119               	bnz	l10506
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;main.c: 853: newval = Celsius2Fahrenheit(v);
  7083  004538  C07C  F018         	movff	setEventData@v,?___awtofl
  7084  00453C  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  7085  004540  EC15  F028         	call	___awtofl	;wreg free
  7086  004544  C01B  F079         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  7087  004548  C01A  F078         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  7088  00454C  C019  F077         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  7089  004550  C018  F076         	movff	?___awtofl,?_Celsius2Fahrenheit
  7090  004554  ECA0  F025         	call	_Celsius2Fahrenheit	;wreg free
  7091  004558  C079  F082         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  7092  00455C  C078  F081         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  7093  004560  C077  F080         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  7094  004564  C076  F07F         	movff	?_Celsius2Fahrenheit,setEventData@newval
  7095                           
  7096                           ;main.c: 854: } else {
  7097  004568  D00E               	goto	l253
  7098  00456A                     l10506:
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;main.c: 856: newval = v;
  7102  00456A  C07C  F018         	movff	setEventData@v,?___awtofl
  7103  00456E  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  7104  004572  EC15  F028         	call	___awtofl	;wreg free
  7105  004576  C01B  F082         	movff	?___awtofl+3,setEventData@newval+3
  7106  00457A  C01A  F081         	movff	?___awtofl+2,setEventData@newval+2
  7107  00457E  C019  F080         	movff	?___awtofl+1,setEventData@newval+1
  7108  004582  C018  F07F         	movff	?___awtofl,setEventData@newval
  7109  004586                     l253:
  7110                           
  7111                           ;main.c: 857: }
  7112                           ;main.c: 859: ival = (int) newval;
  7113  004586  C07F  F076         	movff	setEventData@newval,?___fltol
  7114  00458A  C080  F077         	movff	setEventData@newval+1,?___fltol+1
  7115  00458E  C081  F078         	movff	setEventData@newval+2,?___fltol+2
  7116  004592  C082  F079         	movff	setEventData@newval+3,?___fltol+3
  7117  004596  ECCC  F023         	call	___fltol	;wreg free
  7118  00459A  C076  F083         	movff	?___fltol,setEventData@ival
  7119  00459E  C077  F084         	movff	?___fltol+1,setEventData@ival+1
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;main.c: 861: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7123  0045A2  5184               	movf	(setEventData@ival+1)& (0+255),w,b
  7124  0045A4  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;main.c: 862: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7128  0045A6  C083  F0D2         	movff	setEventData@ival,_vscp_omsg+8
  7129                           
  7130                           ; BSR set to: 0
  7131  0045AA  0012               	return	
  7132  0045AC                     __end_of_setEventData:
  7133                           	opt stack 0
  7134                           tblptru	equ	0xFF8
  7135                           tblptrh	equ	0xFF7
  7136                           tblptrl	equ	0xFF6
  7137                           tablat	equ	0xFF5
  7138                           prodh	equ	0xFF4
  7139                           prodl	equ	0xFF3
  7140                           intcon	equ	0xFF2
  7141                           postinc0	equ	0xFEE
  7142                           wreg	equ	0xFE8
  7143                           indf1	equ	0xFE7
  7144                           postdec1	equ	0xFE5
  7145                           fsr1h	equ	0xFE2
  7146                           fsr1l	equ	0xFE1
  7147                           indf2	equ	0xFDF
  7148                           postinc2	equ	0xFDE
  7149                           postdec2	equ	0xFDD
  7150                           plusw2	equ	0xFDB
  7151                           fsr2h	equ	0xFDA
  7152                           fsr2l	equ	0xFD9
  7153                           status	equ	0xFD8
  7154                           
  7155 ;; *************** function _Celsius2Fahrenheit *****************
  7156 ;; Defined at:
  7157 ;;		line 42 in file "../ntc.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  tc              4   22[BANK0 ] int 
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;		None
  7162 ;; Return value:  Size  Location     Type
  7163 ;;                  4   22[BANK0 ] int 
  7164 ;; Registers used:
  7165 ;;		wreg, status,2, status,0, cstack
  7166 ;; Tracked objects:
  7167 ;;		On entry : 0/0
  7168 ;;		On exit  : 0/0
  7169 ;;		Unchanged: 0/0
  7170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7171 ;;      Params:         0       4       0       0       0       0       0
  7172 ;;      Locals:         0       0       0       0       0       0       0
  7173 ;;      Temps:          0       0       0       0       0       0       0
  7174 ;;      Totals:         0       4       0       0       0       0       0
  7175 ;;Total ram usage:        4 bytes
  7176 ;; Hardware stack levels used:    1
  7177 ;; Hardware stack levels required when called:    4
  7178 ;; This function calls:
  7179 ;;		___fladd
  7180 ;;		___fldiv
  7181 ;;		___flmul
  7182 ;; This function is called by:
  7183 ;;		_setEventData
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text30
  7188  004B40                     __ptext30:
  7189                           	opt stack 0
  7190  004B40                     _Celsius2Fahrenheit:
  7191                           	opt stack 22
  7192                           
  7193                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;incstack = 0
  7197                           ;incstack = 0
  7198  004B40  6A21               	clrf	?___fladd+4,c
  7199  004B42  6A22               	clrf	?___fladd+5,c
  7200  004B44  0E7A               	movlw	122
  7201  004B46  6E23               	movwf	?___fladd+6,c
  7202  004B48  0E46               	movlw	70
  7203  004B4A  6E24               	movwf	?___fladd+7,c
  7204  004B4C  0100               	movlb	0	; () banked
  7205  004B4E  6B64               	clrf	(?___flmul+4)& (0+255),b
  7206  004B50  6B65               	clrf	(?___flmul+5)& (0+255),b
  7207  004B52  0E10               	movlw	16
  7208  004B54  6F66               	movwf	(?___flmul+6)& (0+255),b
  7209  004B56  0E41               	movlw	65
  7210  004B58  6F67               	movwf	(?___flmul+7)& (0+255),b
  7211  004B5A  C076  F060         	movff	Celsius2Fahrenheit@tc,?___flmul
  7212  004B5E  C077  F061         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7213  004B62  C078  F062         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7214  004B66  C079  F063         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7215  004B6A  EC4A  F020         	call	___flmul	;wreg free
  7216  004B6E  C063  F020         	movff	?___flmul+3,?___fladd+3
  7217  004B72  C062  F01F         	movff	?___flmul+2,?___fladd+2
  7218  004B76  C061  F01E         	movff	?___flmul+1,?___fladd+1
  7219  004B7A  C060  F01D         	movff	?___flmul,?___fladd
  7220  004B7E  EC85  F01C         	call	___fladd	;wreg free
  7221  004B82  C020  F02F         	movff	?___fladd+3,?___fldiv+3
  7222  004B86  C01F  F02E         	movff	?___fladd+2,?___fldiv+2
  7223  004B8A  C01E  F02D         	movff	?___fladd+1,?___fldiv+1
  7224  004B8E  C01D  F02C         	movff	?___fladd,?___fldiv
  7225  004B92  6A30               	clrf	?___fldiv+4,c
  7226  004B94  6A31               	clrf	?___fldiv+5,c
  7227  004B96  0EA0               	movlw	160
  7228  004B98  6E32               	movwf	?___fldiv+6,c
  7229  004B9A  0E40               	movlw	64
  7230  004B9C  6E33               	movwf	?___fldiv+7,c
  7231  004B9E  ECD6  F022         	call	___fldiv	;wreg free
  7232  004BA2  C02F  F079         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7233  004BA6  C02E  F078         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7234  004BAA  C02D  F077         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7235  004BAE  C02C  F076         	movff	?___fldiv,?_Celsius2Fahrenheit
  7236  004BB2  0012               	return	
  7237  004BB4                     __end_of_Celsius2Fahrenheit:
  7238                           	opt stack 0
  7239                           tblptru	equ	0xFF8
  7240                           tblptrh	equ	0xFF7
  7241                           tblptrl	equ	0xFF6
  7242                           tablat	equ	0xFF5
  7243                           prodh	equ	0xFF4
  7244                           prodl	equ	0xFF3
  7245                           intcon	equ	0xFF2
  7246                           postinc0	equ	0xFEE
  7247                           wreg	equ	0xFE8
  7248                           indf1	equ	0xFE7
  7249                           postdec1	equ	0xFE5
  7250                           fsr1h	equ	0xFE2
  7251                           fsr1l	equ	0xFE1
  7252                           indf2	equ	0xFDF
  7253                           postinc2	equ	0xFDE
  7254                           postdec2	equ	0xFDD
  7255                           plusw2	equ	0xFDB
  7256                           fsr2h	equ	0xFDA
  7257                           fsr2l	equ	0xFD9
  7258                           status	equ	0xFD8
  7259                           
  7260 ;; *************** function ___fladd *****************
  7261 ;; Defined at:
  7262 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;  f1              4   28[COMRAM] int 
  7265 ;;  f2              4   32[COMRAM] int 
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;  exp1            1   42[COMRAM] unsigned char 
  7268 ;;  exp2            1   41[COMRAM] unsigned char 
  7269 ;;  sign            1   40[COMRAM] unsigned char 
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  4   28[COMRAM] unsigned char 
  7272 ;; Registers used:
  7273 ;;		wreg, status,2, status,0, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7279 ;;      Params:         8       0       0       0       0       0       0
  7280 ;;      Locals:         6       0       0       0       0       0       0
  7281 ;;      Temps:          1       0       0       0       0       0       0
  7282 ;;      Totals:        15       0       0       0       0       0       0
  7283 ;;Total ram usage:       15 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    3
  7286 ;; This function calls:
  7287 ;;		___flpack
  7288 ;; This function is called by:
  7289 ;;		_doWork
  7290 ;;		_Celsius2Fahrenheit
  7291 ;;		_Celsius2Kelvin
  7292 ;;		___asfladd
  7293 ;;		_floor
  7294 ;;		___flsub
  7295 ;;		_log
  7296 ;;		_eval_poly
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           	psect	text31
  7301  00390A                     __ptext31:
  7302                           	opt stack 0
  7303  00390A                     ___fladd:
  7304                           	opt stack 24
  7305                           
  7306                           ;incstack = 0
  7307                           ;incstack = 0
  7308  00390A  341F               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7309  00390C  3420               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7310  00390E  6E2B               	movwf	___fladd@exp1,c
  7311  003910  3423               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7312  003912  3424               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7313  003914  6E2A               	movwf	___fladd@exp2,c
  7314  003916  502B               	movf	___fladd@exp1,w,c
  7315  003918  E009               	bz	l1589
  7316  00391A  502A               	movf	___fladd@exp2,w,c
  7317  00391C  602B               	cpfslt	___fladd@exp1,c
  7318  00391E  D00F               	goto	l11530
  7319  003920  502B               	movf	___fladd@exp1,w,c
  7320  003922  5C2A               	subwf	___fladd@exp2,w,c
  7321  003924  6E25               	movwf	??___fladd& (0+255),c
  7322  003926  0E21               	movlw	33
  7323  003928  5C25               	subwf	??___fladd,w,c
  7324  00392A  E309               	bnc	l11530
  7325  00392C                     l1589:
  7326  00392C  C021  F01D         	movff	___fladd@f2,?___fladd
  7327  003930  C022  F01E         	movff	___fladd@f2+1,?___fladd+1
  7328  003934  C023  F01F         	movff	___fladd@f2+2,?___fladd+2
  7329  003938  C024  F020         	movff	___fladd@f2+3,?___fladd+3
  7330  00393C  D087               	goto	l1590
  7331  00393E                     l11530:
  7332  00393E  502A               	movf	___fladd@exp2,w,c
  7333  003940  E009               	bz	l1593
  7334  003942  502B               	movf	___fladd@exp1,w,c
  7335  003944  602A               	cpfslt	___fladd@exp2,c
  7336  003946  D00F               	goto	l11536
  7337  003948  502A               	movf	___fladd@exp2,w,c
  7338  00394A  5C2B               	subwf	___fladd@exp1,w,c
  7339  00394C  6E25               	movwf	??___fladd& (0+255),c
  7340  00394E  0E21               	movlw	33
  7341  003950  5C25               	subwf	??___fladd,w,c
  7342  003952  E309               	bnc	l11536
  7343  003954                     l1593:
  7344  003954  C01D  F01D         	movff	___fladd@f1,?___fladd
  7345  003958  C01E  F01E         	movff	___fladd@f1+1,?___fladd+1
  7346  00395C  C01F  F01F         	movff	___fladd@f1+2,?___fladd+2
  7347  003960  C020  F020         	movff	___fladd@f1+3,?___fladd+3
  7348  003964  D073               	goto	l1590
  7349  003966                     l11536:
  7350  003966  0E06               	movlw	6
  7351  003968  6E29               	movwf	___fladd@sign,c
  7352  00396A  BE20               	btfsc	___fladd@f1+3,7,c
  7353  00396C  8E29               	bsf	___fladd@sign,7,c
  7354  00396E  BE24               	btfsc	___fladd@f2+3,7,c
  7355  003970  8C29               	bsf	___fladd@sign,6,c
  7356  003972  8E1F               	bsf	___fladd@f1+2,7,c
  7357  003974  6A20               	clrf	___fladd@f1+3,c
  7358  003976  8E23               	bsf	___fladd@f2+2,7,c
  7359  003978  6A24               	clrf	___fladd@f2+3,c
  7360  00397A  502A               	movf	___fladd@exp2,w,c
  7361  00397C  602B               	cpfslt	___fladd@exp1,c
  7362  00397E  D018               	goto	l11562
  7363  003980                     l11552:
  7364  003980  90D8               	bcf	status,0,c
  7365  003982  3621               	rlcf	___fladd@f2,f,c
  7366  003984  3622               	rlcf	___fladd@f2+1,f,c
  7367  003986  3623               	rlcf	___fladd@f2+2,f,c
  7368  003988  3624               	rlcf	___fladd@f2+3,f,c
  7369  00398A  062A               	decf	___fladd@exp2,f,c
  7370  00398C  502A               	movf	___fladd@exp2,w,c
  7371  00398E  182B               	xorwf	___fladd@exp1,w,c
  7372  003990  E00B               	bz	l11560
  7373  003992  0629               	decf	___fladd@sign,f,c
  7374  003994  5029               	movf	___fladd@sign& (0+255),w,c
  7375  003996  0B07               	andlw	7
  7376  003998  E007               	bz	l11560
  7377  00399A  D7F2               	goto	l11552
  7378  00399C                     l11558:
  7379  00399C  90D8               	bcf	status,0,c
  7380  00399E  3220               	rrcf	___fladd@f1+3,f,c
  7381  0039A0  321F               	rrcf	___fladd@f1+2,f,c
  7382  0039A2  321E               	rrcf	___fladd@f1+1,f,c
  7383  0039A4  321D               	rrcf	___fladd@f1,f,c
  7384  0039A6  2A2B               	incf	___fladd@exp1,f,c
  7385  0039A8                     l11560:
  7386  0039A8  502A               	movf	___fladd@exp2,w,c
  7387  0039AA  622B               	cpfseq	___fladd@exp1,c
  7388  0039AC  D7F7               	goto	l11558
  7389  0039AE  D01A               	goto	l1604
  7390  0039B0                     l11562:
  7391  0039B0  502B               	movf	___fladd@exp1,w,c
  7392  0039B2  602A               	cpfslt	___fladd@exp2,c
  7393  0039B4  D017               	goto	l1604
  7394  0039B6                     l11564:
  7395  0039B6  90D8               	bcf	status,0,c
  7396  0039B8  361D               	rlcf	___fladd@f1,f,c
  7397  0039BA  361E               	rlcf	___fladd@f1+1,f,c
  7398  0039BC  361F               	rlcf	___fladd@f1+2,f,c
  7399  0039BE  3620               	rlcf	___fladd@f1+3,f,c
  7400  0039C0  062B               	decf	___fladd@exp1,f,c
  7401  0039C2  502A               	movf	___fladd@exp2,w,c
  7402  0039C4  182B               	xorwf	___fladd@exp1,w,c
  7403  0039C6  E00B               	bz	l11572
  7404  0039C8  0629               	decf	___fladd@sign,f,c
  7405  0039CA  5029               	movf	___fladd@sign& (0+255),w,c
  7406  0039CC  0B07               	andlw	7
  7407  0039CE  E007               	bz	l11572
  7408  0039D0  D7F2               	goto	l11564
  7409  0039D2                     l11570:
  7410  0039D2  90D8               	bcf	status,0,c
  7411  0039D4  3224               	rrcf	___fladd@f2+3,f,c
  7412  0039D6  3223               	rrcf	___fladd@f2+2,f,c
  7413  0039D8  3222               	rrcf	___fladd@f2+1,f,c
  7414  0039DA  3221               	rrcf	___fladd@f2,f,c
  7415  0039DC  2A2A               	incf	___fladd@exp2,f,c
  7416  0039DE                     l11572:
  7417  0039DE  502A               	movf	___fladd@exp2,w,c
  7418  0039E0  622B               	cpfseq	___fladd@exp1,c
  7419  0039E2  D7F7               	goto	l11570
  7420  0039E4                     l1604:
  7421  0039E4  AE29               	btfss	___fladd@sign,7,c
  7422  0039E6  D009               	goto	l11576
  7423  0039E8  1E1D               	comf	___fladd@f1,f,c
  7424  0039EA  1E1E               	comf	___fladd@f1+1,f,c
  7425  0039EC  1E1F               	comf	___fladd@f1+2,f,c
  7426  0039EE  1E20               	comf	___fladd@f1+3,f,c
  7427  0039F0  2A1D               	incf	___fladd@f1,f,c
  7428  0039F2  0E00               	movlw	0
  7429  0039F4  221E               	addwfc	___fladd@f1+1,f,c
  7430  0039F6  221F               	addwfc	___fladd@f1+2,f,c
  7431  0039F8  2220               	addwfc	___fladd@f1+3,f,c
  7432  0039FA                     l11576:
  7433  0039FA  AC29               	btfss	___fladd@sign,6,c
  7434  0039FC  D002               	goto	l11580
  7435  0039FE  1E21               	comf	___fladd@f2,f,c
  7436  003A00  D826               	call	PL62	;call to abstracted procedure
  7437  003A02                     l11580:
  7438  003A02  6A29               	clrf	___fladd@sign,c
  7439  003A04  501D               	movf	___fladd@f1,w,c
  7440  003A06  2621               	addwf	___fladd@f2,f,c
  7441  003A08  501E               	movf	___fladd@f1+1,w,c
  7442  003A0A  2222               	addwfc	___fladd@f2+1,f,c
  7443  003A0C  501F               	movf	___fladd@f1+2,w,c
  7444  003A0E  2223               	addwfc	___fladd@f2+2,f,c
  7445  003A10  5020               	movf	___fladd@f1+3,w,c
  7446  003A12  2224               	addwfc	___fladd@f2+3,f,c
  7447  003A14  AE24               	btfss	___fladd@f2+3,7,c
  7448  003A16  D004               	goto	l11588
  7449  003A18  1E21               	comf	___fladd@f2,f,c
  7450  003A1A  D819               	call	PL62	;call to abstracted procedure
  7451  003A1C  0E01               	movlw	1
  7452  003A1E  6E29               	movwf	___fladd@sign,c
  7453  003A20                     l11588:
  7454  003A20  C021  F00E         	movff	___fladd@f2,?___flpack
  7455  003A24  C022  F00F         	movff	___fladd@f2+1,?___flpack+1
  7456  003A28  C023  F010         	movff	___fladd@f2+2,?___flpack+2
  7457  003A2C  C024  F011         	movff	___fladd@f2+3,?___flpack+3
  7458  003A30  C02B  F012         	movff	___fladd@exp1,?___flpack+4
  7459  003A34  C029  F013         	movff	___fladd@sign,?___flpack+5
  7460  003A38  EC6D  F021         	call	___flpack	;wreg free
  7461  003A3C  C011  F020         	movff	?___flpack+3,?___fladd+3
  7462  003A40  C010  F01F         	movff	?___flpack+2,?___fladd+2
  7463  003A44  C00F  F01E         	movff	?___flpack+1,?___fladd+1
  7464  003A48  C00E  F01D         	movff	?___flpack,?___fladd
  7465  003A4C                     l1590:
  7466  003A4C  0012               	return	
  7467  003A4E                     __end_of___fladd:
  7468                           	opt stack 0
  7469  003A4E                     PL62:
  7470                           	opt stack 24
  7471  003A4E  1E22               	comf	___fladd@f2+1,f,c
  7472  003A50  1E23               	comf	___fladd@f2+2,f,c
  7473  003A52  1E24               	comf	___fladd@f2+3,f,c
  7474  003A54  2A21               	incf	___fladd@f2,f,c
  7475  003A56  0E00               	movlw	0
  7476  003A58  2222               	addwfc	___fladd@f2+1,f,c
  7477  003A5A  2223               	addwfc	___fladd@f2+2,f,c
  7478  003A5C  2224               	addwfc	___fladd@f2+3,f,c
  7479  003A5E  0C00               	retlw	0
  7480  003A60                     __end_ofPL62:
  7481                           	opt stack 0
  7482                           tblptru	equ	0xFF8
  7483                           tblptrh	equ	0xFF7
  7484                           tblptrl	equ	0xFF6
  7485                           tablat	equ	0xFF5
  7486                           prodh	equ	0xFF4
  7487                           prodl	equ	0xFF3
  7488                           intcon	equ	0xFF2
  7489                           postinc0	equ	0xFEE
  7490                           wreg	equ	0xFE8
  7491                           indf1	equ	0xFE7
  7492                           postdec1	equ	0xFE5
  7493                           fsr1h	equ	0xFE2
  7494                           fsr1l	equ	0xFE1
  7495                           indf2	equ	0xFDF
  7496                           postinc2	equ	0xFDE
  7497                           postdec2	equ	0xFDD
  7498                           plusw2	equ	0xFDB
  7499                           fsr2h	equ	0xFDA
  7500                           fsr2l	equ	0xFD9
  7501                           status	equ	0xFD8
  7502                           
  7503 ;; *************** function _Celsius2Kelvin *****************
  7504 ;; Defined at:
  7505 ;;		line 61 in file "../ntc.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;  tc              4   43[COMRAM] unsigned char 
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;		None
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  4   43[COMRAM] unsigned char 
  7512 ;; Registers used:
  7513 ;;		wreg, status,2, status,0, cstack
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7519 ;;      Params:         4       0       0       0       0       0       0
  7520 ;;      Locals:         0       0       0       0       0       0       0
  7521 ;;      Temps:          0       0       0       0       0       0       0
  7522 ;;      Totals:         4       0       0       0       0       0       0
  7523 ;;Total ram usage:        4 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    4
  7526 ;; This function calls:
  7527 ;;		___fladd
  7528 ;; This function is called by:
  7529 ;;		_setEventData
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           	psect	text32
  7534  005064                     __ptext32:
  7535                           	opt stack 0
  7536  005064                     _Celsius2Kelvin:
  7537                           	opt stack 22
  7538                           
  7539                           ;ntc.c: 62: return (27316.0 + tc);
  7540                           
  7541                           ;incstack = 0
  7542                           ;incstack = 0
  7543  005064  C02C  F01D         	movff	Celsius2Kelvin@tc,?___fladd
  7544  005068  C02D  F01E         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7545  00506C  C02E  F01F         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7546  005070  C02F  F020         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7547  005074  6A21               	clrf	?___fladd+4,c
  7548  005076  0E68               	movlw	104
  7549  005078  6E22               	movwf	?___fladd+5,c
  7550  00507A  0ED5               	movlw	213
  7551  00507C  6E23               	movwf	?___fladd+6,c
  7552  00507E  0E46               	movlw	70
  7553  005080  6E24               	movwf	?___fladd+7,c
  7554  005082  EC85  F01C         	call	___fladd	;wreg free
  7555  005086  C020  F02F         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7556  00508A  C01F  F02E         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7557  00508E  C01E  F02D         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7558  005092  C01D  F02C         	movff	?___fladd,?_Celsius2Kelvin
  7559  005096  0012               	return	
  7560  005098                     __end_of_Celsius2Kelvin:
  7561                           	opt stack 0
  7562                           tblptru	equ	0xFF8
  7563                           tblptrh	equ	0xFF7
  7564                           tblptrl	equ	0xFF6
  7565                           tablat	equ	0xFF5
  7566                           prodh	equ	0xFF4
  7567                           prodl	equ	0xFF3
  7568                           intcon	equ	0xFF2
  7569                           postinc0	equ	0xFEE
  7570                           wreg	equ	0xFE8
  7571                           indf1	equ	0xFE7
  7572                           postdec1	equ	0xFE5
  7573                           fsr1h	equ	0xFE2
  7574                           fsr1l	equ	0xFE1
  7575                           indf2	equ	0xFDF
  7576                           postinc2	equ	0xFDE
  7577                           postdec2	equ	0xFDD
  7578                           plusw2	equ	0xFDB
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583 ;; *************** function _vscp_handleProtocolEvent *****************
  7584 ;; Defined at:
  7585 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;  bytes           1   44[BANK0 ] unsigned char 
  7590 ;;  page_save       2   40[BANK0 ] unsigned short 
  7591 ;;  i               1   50[BANK0 ] unsigned char 
  7592 ;;  page_save       2   38[BANK0 ] unsigned short 
  7593 ;;  byte            1   54[BANK0 ] unsigned char 
  7594 ;;  bytes           1   52[BANK0 ] unsigned char 
  7595 ;;  cb              1   49[BANK0 ] unsigned char 
  7596 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7597 ;;  j               1   57[BANK0 ] unsigned char 
  7598 ;;  i               1   55[BANK0 ] unsigned char 
  7599 ;;  k               1   51[BANK0 ] unsigned char 
  7600 ;;  i               1   53[BANK0 ] unsigned char 
  7601 ;;  len             1   47[BANK0 ] unsigned char 
  7602 ;;  pos             1   46[BANK0 ] unsigned char 
  7603 ;;  i               1   56[BANK0 ] unsigned char 
  7604 ;;  len             1   45[BANK0 ] unsigned char 
  7605 ;;  pos             1   43[BANK0 ] unsigned char 
  7606 ;;  offset          1   42[BANK0 ] unsigned char 
  7607 ;; Return value:  Size  Location     Type
  7608 ;;		None               void
  7609 ;; Registers used:
  7610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : F/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7616 ;;      Params:         0       0       0       0       0       0       0
  7617 ;;      Locals:         0      20       0       0       0       0       0
  7618 ;;      Temps:          0       7       0       0       0       0       0
  7619 ;;      Totals:         0      27       0       0       0       0       0
  7620 ;;Total ram usage:       27 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:    8
  7623 ;; This function calls:
  7624 ;;		_vscp_init
  7625 ;;		_vscp_sendEvent
  7626 ;;		_vscp_readAppReg
  7627 ;;		_vscp_writeAppReg
  7628 ;;		_vscp_getGUID
  7629 ;;		_vscp_getMDF_URL
  7630 ;;		_vscp_getMatrixInfo
  7631 ;;		_vscp_goBootloaderMode
  7632 ;;		_vscp_handleHeartbeat
  7633 ;;		_vscp_handleSetNickname
  7634 ;;		_vscp_handleDropNickname
  7635 ;;		_vscp_newNodeOnline
  7636 ;;		_vscp_readRegister
  7637 ;;		_vscp_readStdReg
  7638 ;;		_vscp_writeRegister
  7639 ;;		_vscp_writeStdReg
  7640 ;;		___lbmod
  7641 ;; This function is called by:
  7642 ;;		_main
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           	psect	text33
  7647  002A38                     __ptext33:
  7648                           	opt stack 0
  7649  002A38                     _vscp_handleProtocolEvent:
  7650                           	opt stack 21
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  7654                           
  7655                           ;incstack = 0
  7656                           ;incstack = 0
  7657  002A38  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  7658  002A3A  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7659  002A3C  E101 D2AA          	bz	l10110
  7660  002A40  D2D9               	goto	l1270
  7661  002A42                     l9698:
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  7665  002A42  EC9C  F027         	call	_vscp_handleHeartbeat	;wreg free
  7666                           
  7667                           ;vscp_firmware.c: 796: break;
  7668  002A46  D2D6               	goto	l1270
  7669  002A48                     l9700:
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  7673  002A48  ECA8  F028         	call	_vscp_newNodeOnline	;wreg free
  7674                           
  7675                           ;vscp_firmware.c: 801: break;
  7676  002A4C  D2D3               	goto	l1270
  7677  002A4E                     l9702:
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  7681  002A4E  EC32  F029         	call	_vscp_handleSetNickname	;wreg free
  7682                           
  7683                           ;vscp_firmware.c: 806: break;
  7684  002A52  D2D0               	goto	l1270
  7685  002A54                     l9704:
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  7689  002A54  EC65  F028         	call	_vscp_handleDropNickname	;wreg free
  7690                           
  7691                           ;vscp_firmware.c: 811: break;
  7692  002A58  D2CD               	goto	l1270
  7693  002A5A                     l9706:
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  7697                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7698  002A5A  51BC               	movf	_vscp_imsg& (0+255),w,b
  7699  002A5C  0B0F               	andlw	15
  7700  002A5E  0A02               	xorlw	2
  7701  002A60  E001 D2C8          	bnz	l1270
  7702                           
  7703                           ; BSR set to: 0
  7704  002A64  51BA               	movf	_vscp_nickname& (0+255),w,b
  7705  002A66  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7706  002A6A  62DF               	cpfseq	indf2,c
  7707  002A6C  D2C3               	goto	l1270
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  7711  002A6E  0E80               	movlw	128
  7712  002A70  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7713  002A72  D012               	goto	l9726
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7717  002A74  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7718  002A76  EC08  F00E         	call	_vscp_readAppReg
  7719  002A7A                     L8:
  7720  002A7A  0100               	movlb	0	; () banked
  7721  002A7C  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7725  002A7E  C0C3  F0CF         	movff	_vscp_imsg+7,_vscp_omsg+5
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  7729  002A82  0E03               	movlw	3
  7730  002A84  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  7734  002A86  0E82               	movlw	130
  7735  002A88  6FCA               	movwf	_vscp_omsg& (0+255),b
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  7739  002A8A  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  7740  002A8C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  7741                           
  7742                           ; BSR set to: 0
  7743                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  7744  002A8E  0E0A               	movlw	10
  7745  002A90  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  7746  002A92                     l9724:
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;vscp_firmware.c: 832: vscp_sendEvent();
  7750  002A92  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  7751                           
  7752                           ;vscp_firmware.c: 833: } else {
  7753  002A96  D2AE               	goto	l1270
  7754  002A98                     l9726:
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  7758                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7759  002A98  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7760  002A9A  ECD8  F01F         	call	_vscp_readStdReg
  7761  002A9E  D7ED               	goto	L8
  7762  002AA0                     l9740:
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7766                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7767  002AA0  51BC               	movf	_vscp_imsg& (0+255),w,b
  7768  002AA2  0B0F               	andlw	15
  7769  002AA4  0A03               	xorlw	3
  7770  002AA6  E001 D2A5          	bnz	l1270
  7771                           
  7772                           ; BSR set to: 0
  7773  002AAA  51BA               	movf	_vscp_nickname& (0+255),w,b
  7774  002AAC  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7775  002AB0  62DF               	cpfseq	indf2,c
  7776  002AB2  D2A0               	goto	l1270
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  7780  002AB4  0E80               	movlw	128
  7781  002AB6  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7782  002AB8  D006               	goto	l9760
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  7786                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7787  002ABA  C0C4  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7788  002ABE  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7789  002AC0  EC37  F003         	call	_vscp_writeAppReg
  7790  002AC4  D7DA               	goto	L8
  7791  002AC6                     l9760:
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  7795                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7796  002AC6  C0C4  F022         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7797  002ACA  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7798  002ACC  ECF5  F01A         	call	_vscp_writeStdReg
  7799  002AD0  D7D4               	goto	L8
  7800  002AD2                     l9774:
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7804                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7805                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7806                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7807                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7808                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7809                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7810  002AD2  51BA               	movf	_vscp_nickname& (0+255),w,b
  7811  002AD4  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7812  002AD8  62DF               	cpfseq	indf2,c
  7813  002ADA  D28C               	goto	l1270
  7814                           
  7815                           ; BSR set to: 0
  7816  002ADC  0E00               	movlw	0
  7817  002ADE  EC00  F02A         	call	_vscp_getGUID
  7818  002AE2  0100               	movlb	0	; () banked
  7819  002AE4  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7820  002AE6  E001 D285          	bnz	l1270
  7821                           
  7822                           ; BSR set to: 0
  7823  002AEA  0E03               	movlw	3
  7824  002AEC  EC00  F02A         	call	_vscp_getGUID
  7825  002AF0  0100               	movlb	0	; () banked
  7826  002AF2  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7827  002AF4  E001 D27E          	bnz	l1270
  7828                           
  7829                           ; BSR set to: 0
  7830  002AF8  0E05               	movlw	5
  7831  002AFA  EC00  F02A         	call	_vscp_getGUID
  7832  002AFE  0100               	movlb	0	; () banked
  7833  002B00  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7834  002B02  E001 D277          	bnz	l1270
  7835                           
  7836                           ; BSR set to: 0
  7837  002B06  0E07               	movlw	7
  7838  002B08  EC00  F02A         	call	_vscp_getGUID
  7839  002B0C  0100               	movlb	0	; () banked
  7840  002B0E  19C7               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7841  002B10  E001 D270          	bnz	l1270
  7842                           
  7843                           ; BSR set to: 0
  7844  002B14  5047               	movf	_vscp_page_select+1,w,c
  7845  002B16  19C8               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7846  002B18  E001 D26C          	bnz	l1270
  7847                           
  7848                           ; BSR set to: 0
  7849  002B1C  5046               	movf	_vscp_page_select,w,c
  7850  002B1E  EE20  F0C9         	lfsr	2,_vscp_imsg+13
  7851  002B22  62DF               	cpfseq	indf2,c
  7852  002B24  D267               	goto	l1270
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7856  002B26  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7857  002B28  ECD4  F029         	call	_vscp_goBootloaderMode
  7858  002B2C  D263               	goto	l1270
  7859  002B2E                     l9790:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7863                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7864                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7865                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7866  002B2E  0E00               	movlw	0
  7867  002B30  EC00  F02A         	call	_vscp_getGUID
  7868  002B34  0100               	movlb	0	; () banked
  7869  002B36  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7870  002B38  E173               	bnz	l9834
  7871                           
  7872                           ; BSR set to: 0
  7873  002B3A  0E01               	movlw	1
  7874  002B3C  EC00  F02A         	call	_vscp_getGUID
  7875  002B40  0100               	movlb	0	; () banked
  7876  002B42  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7877  002B44  E16D               	bnz	l9834
  7878                           
  7879                           ; BSR set to: 0
  7880  002B46  0E02               	movlw	2
  7881  002B48  EC00  F02A         	call	_vscp_getGUID
  7882  002B4C  0100               	movlb	0	; () banked
  7883  002B4E  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7884  002B50  E167               	bnz	l9834
  7885                           
  7886                           ; BSR set to: 0
  7887  002B52  0E03               	movlw	3
  7888  002B54  EC00  F02A         	call	_vscp_getGUID
  7889  002B58  0100               	movlb	0	; () banked
  7890  002B5A  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7891  002B5C  E161               	bnz	l9834
  7892                           
  7893                           ; BSR set to: 0
  7894                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  7895  002B5E  884C               	bsf	_vscp_guid_reset,4,c
  7896  002B60  D05F               	goto	l9834
  7897  002B62                     l9800:
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7901                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7902                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7903                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7904  002B62  0E04               	movlw	4
  7905  002B64  EC00  F02A         	call	_vscp_getGUID
  7906  002B68  0100               	movlb	0	; () banked
  7907  002B6A  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7908  002B6C  E159               	bnz	l9834
  7909                           
  7910                           ; BSR set to: 0
  7911  002B6E  0E05               	movlw	5
  7912  002B70  EC00  F02A         	call	_vscp_getGUID
  7913  002B74  0100               	movlb	0	; () banked
  7914  002B76  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7915  002B78  E153               	bnz	l9834
  7916                           
  7917                           ; BSR set to: 0
  7918  002B7A  0E06               	movlw	6
  7919  002B7C  EC00  F02A         	call	_vscp_getGUID
  7920  002B80  0100               	movlb	0	; () banked
  7921  002B82  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7922  002B84  E14D               	bnz	l9834
  7923                           
  7924                           ; BSR set to: 0
  7925  002B86  0E07               	movlw	7
  7926  002B88  EC00  F02A         	call	_vscp_getGUID
  7927  002B8C  0100               	movlb	0	; () banked
  7928  002B8E  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7929  002B90  E147               	bnz	l9834
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  7933  002B92  8A4C               	bsf	_vscp_guid_reset,5,c
  7934  002B94  D045               	goto	l9834
  7935  002B96                     l9810:
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7939                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7940                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7941                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7942  002B96  0E08               	movlw	8
  7943  002B98  EC00  F02A         	call	_vscp_getGUID
  7944  002B9C  0100               	movlb	0	; () banked
  7945  002B9E  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7946  002BA0  E13F               	bnz	l9834
  7947                           
  7948                           ; BSR set to: 0
  7949  002BA2  0E09               	movlw	9
  7950  002BA4  EC00  F02A         	call	_vscp_getGUID
  7951  002BA8  0100               	movlb	0	; () banked
  7952  002BAA  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7953  002BAC  E139               	bnz	l9834
  7954                           
  7955                           ; BSR set to: 0
  7956  002BAE  0E0A               	movlw	10
  7957  002BB0  EC00  F02A         	call	_vscp_getGUID
  7958  002BB4  0100               	movlb	0	; () banked
  7959  002BB6  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7960  002BB8  E133               	bnz	l9834
  7961                           
  7962                           ; BSR set to: 0
  7963  002BBA  0E0B               	movlw	11
  7964  002BBC  EC00  F02A         	call	_vscp_getGUID
  7965  002BC0  0100               	movlb	0	; () banked
  7966  002BC2  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7967  002BC4  E12D               	bnz	l9834
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  7971  002BC6  8C4C               	bsf	_vscp_guid_reset,6,c
  7972  002BC8  D02B               	goto	l9834
  7973  002BCA                     l9820:
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7977                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7978                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7979                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7980  002BCA  0E0C               	movlw	12
  7981  002BCC  EC00  F02A         	call	_vscp_getGUID
  7982  002BD0  0100               	movlb	0	; () banked
  7983  002BD2  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7984  002BD4  E125               	bnz	l9834
  7985                           
  7986                           ; BSR set to: 0
  7987  002BD6  0E0D               	movlw	13
  7988  002BD8  EC00  F02A         	call	_vscp_getGUID
  7989  002BDC  0100               	movlb	0	; () banked
  7990  002BDE  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7991  002BE0  E11F               	bnz	l9834
  7992                           
  7993                           ; BSR set to: 0
  7994  002BE2  0E0E               	movlw	14
  7995  002BE4  EC00  F02A         	call	_vscp_getGUID
  7996  002BE8  0100               	movlb	0	; () banked
  7997  002BEA  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7998  002BEC  E119               	bnz	l9834
  7999                           
  8000                           ; BSR set to: 0
  8001  002BEE  0E0F               	movlw	15
  8002  002BF0  EC00  F02A         	call	_vscp_getGUID
  8003  002BF4  0100               	movlb	0	; () banked
  8004  002BF6  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  8005  002BF8  E113               	bnz	l9834
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  8009  002BFA  8E4C               	bsf	_vscp_guid_reset,7,c
  8010  002BFC  D011               	goto	l9834
  8011  002BFE                     l1211:
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  8015  002BFE  6A4C               	clrf	_vscp_guid_reset,c
  8016                           
  8017                           ;vscp_firmware.c: 952: break;
  8018  002C00  D00F               	goto	l9834
  8019  002C02                     l9832:
  8020                           
  8021                           ; BSR set to: 0
  8022  002C02  39C2               	swapf	(_vscp_imsg+6)& (0+255),w,b
  8023  002C04  0B0F               	andlw	15
  8024  002C06  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8025  002C08  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8026                           
  8027                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8028                           ; Switch size 1, requested type "space"
  8029                           ; Number of cases is 1, Range of values is 0 to 0
  8030                           ; switch strategies available:
  8031                           ; Name         Instructions Cycles
  8032                           ; simple_byte            4     3 (average)
  8033                           ;	Chosen strategy is simple_byte
  8034  002C0A  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8035  002C0C  E1F8               	bnz	l1211
  8036                           
  8037                           ; BSR set to: 0
  8038                           ; Switch size 1, requested type "space"
  8039                           ; Number of cases is 4, Range of values is 0 to 3
  8040                           ; switch strategies available:
  8041                           ; Name         Instructions Cycles
  8042                           ; simple_byte           13     7 (average)
  8043                           ;	Chosen strategy is simple_byte
  8044  002C0E  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  8045  002C10  E08E               	bz	l9790
  8046  002C12  0A01               	xorlw	1	; case 1
  8047  002C14  E0A6               	bz	l9800
  8048  002C16  0A03               	xorlw	3	; case 2
  8049  002C18  E0BE               	bz	l9810
  8050  002C1A  0A01               	xorlw	1	; case 3
  8051  002C1C  E0D6               	bz	l9820
  8052  002C1E  D7EF               	goto	l1211
  8053  002C20                     l9834:
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  8057  002C20  504C               	movf	_vscp_guid_reset,w,c
  8058  002C22  0BF0               	andlw	240
  8059  002C24  0AF0               	xorlw	240
  8060  002C26  E001 D1E5          	bnz	l1270
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;vscp_firmware.c: 957: vscp_init();
  8064  002C2A  EC33  F027         	call	_vscp_init	;wreg free
  8065  002C2E  D1E2               	goto	l1270
  8066  002C30                     l9838:
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8070  002C30  51BA               	movf	_vscp_nickname& (0+255),w,b
  8071  002C32  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8072  002C36  62DF               	cpfseq	indf2,c
  8073  002C38  D1DD               	goto	l1270
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;vscp_firmware.c: 965: uint8_t i;
  8077                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  8078  002C3A  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  8079                           
  8080                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  8081  002C3C  C0C3  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  8082                           
  8083                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  8084  002C40  C0C4  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  8085                           
  8086                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  8087  002C44  6B98               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  8088  002C46  D044               	goto	l9870
  8089  002C48                     l9842:
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  8093  002C48  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  8094  002C4A  2598               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8095  002C4C  EC96  F029         	call	_vscp_readRegister
  8096  002C50  0100               	movlb	0	; () banked
  8097  002C52  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8098  002C54  0E07               	movlw	7
  8099  002C56  6E0E               	movwf	?___lbmod,c
  8100  002C58  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8101  002C5A  ECD2  F028         	call	___lbmod
  8102  002C5E  0100               	movlb	0	; () banked
  8103  002C60  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8104  002C62  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8105  002C64  0FD0               	addlw	low (_vscp_omsg+6)
  8106  002C66  6ED9               	movwf	fsr2l,c
  8107  002C68  6ADA               	clrf	fsr2h,c
  8108  002C6A  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;vscp_firmware.c: 973: if ((i % 7) == 6 || i == (len - 1)) {
  8112  002C6E  0E07               	movlw	7
  8113  002C70  6E0E               	movwf	?___lbmod,c
  8114  002C72  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8115  002C74  ECD2  F028         	call	___lbmod
  8116  002C78  0A06               	xorlw	6
  8117  002C7A  E00B               	bz	l9848
  8118  002C7C  0EFF               	movlw	255
  8119  002C7E  0100               	movlb	0	; () banked
  8120  002C80  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8121  002C82  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8122  002C84  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8123  002C86  0EFF               	movlw	255
  8124  002C88  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8125  002C8A  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8126  002C8C  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8127  002C8E  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8128  002C90  E11E               	bnz	l9868
  8129  002C92                     l9848:
  8130                           
  8131                           ;vscp_firmware.c: 974: uint8_t bytes;
  8132                           ;vscp_firmware.c: 976: if ((i % 7) == 6) bytes = 7;
  8133  002C92  0E07               	movlw	7
  8134  002C94  6E0E               	movwf	?___lbmod,c
  8135  002C96  0100               	movlb	0	; () banked
  8136  002C98  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8137  002C9A  ECD2  F028         	call	___lbmod
  8138  002C9E  0A06               	xorlw	6
  8139  002CA0  E103               	bnz	l9852
  8140  002CA2  0E07               	movlw	7
  8141  002CA4  0100               	movlb	0	; () banked
  8142  002CA6  D009               	goto	L9
  8143  002CA8                     l9852:
  8144                           
  8145                           ;vscp_firmware.c: 977: else bytes = (i % 7) + 1;
  8146  002CA8  0E07               	movlw	7
  8147  002CAA  6E0E               	movwf	?___lbmod,c
  8148  002CAC  0100               	movlb	0	; () banked
  8149  002CAE  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8150  002CB0  ECD2  F028         	call	___lbmod
  8151  002CB4  0100               	movlb	0	; () banked
  8152  002CB6  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8153  002CB8  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8154  002CBA                     L9:
  8155  002CBA  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;vscp_firmware.c: 979: vscp_omsg.flags = 0x80 + bytes + 1;
  8159  002CBC  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8160  002CBE  0F81               	addlw	129
  8161  002CC0  6FCA               	movwf	_vscp_omsg& (0+255),b
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;vscp_firmware.c: 980: vscp_omsg.priority = 0x03;
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;vscp_firmware.c: 981: vscp_omsg.vscp_class = 0;
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;vscp_firmware.c: 982: vscp_omsg.vscp_type = 26;
  8171  002CC2  D9AF               	call	PL80	;call to abstracted procedure
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;vscp_firmware.c: 983: vscp_omsg.data[ 0 ] = pos;
  8175  002CC4  C08B  F0CF         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;vscp_firmware.c: 986: vscp_sendEvent();
  8179  002CC8  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;vscp_firmware.c: 987: pos++;
  8183  002CCC  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8184  002CCE                     l9868:
  8185                           
  8186                           ; BSR set to: 0
  8187  002CCE  2B98               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8188  002CD0                     l9870:
  8189                           
  8190                           ; BSR set to: 0
  8191  002CD0  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8192  002CD2  5D98               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8193  002CD4  E301 D18E          	bc	l1270
  8194  002CD8  D7B7               	goto	l9842
  8195  002CDA                     l9872:
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;vscp_firmware.c: 995: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8199  002CDA  51BA               	movf	_vscp_nickname& (0+255),w,b
  8200  002CDC  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8201  002CE0  62DF               	cpfseq	indf2,c
  8202  002CE2  D188               	goto	l1270
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;vscp_firmware.c: 996: uint8_t i;
  8206                           ;vscp_firmware.c: 997: uint8_t pos = vscp_imsg.data[ 1 ];
  8207  002CE4  C0C3  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1156
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;vscp_firmware.c: 998: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8211  002CE8  51BC               	movf	_vscp_imsg& (0+255),w,b
  8212  002CEA  0FFE               	addlw	254
  8213  002CEC  0B07               	andlw	7
  8214  002CEE  6F8F               	movwf	vscp_handleProtocolEvent@len_1157& (0+255),b
  8215                           
  8216                           ; BSR set to: 0
  8217                           ;vscp_firmware.c: 1000: for (i = 0; i < len; i++) {
  8218  002CF0  6B95               	clrf	vscp_handleProtocolEvent@i_1155& (0+255),b
  8219  002CF2  D018               	goto	l9886
  8220  002CF4                     l9880:
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;vscp_firmware.c: 1002: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8224  002CF4  5195               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8225  002CF6  0FC4               	addlw	low (_vscp_imsg+8)
  8226  002CF8  6ED9               	movwf	fsr2l,c
  8227  002CFA  6ADA               	clrf	fsr2h,c
  8228  002CFC  50DF               	movf	indf2,w,c
  8229  002CFE  6E34               	movwf	?_vscp_writeRegister,c
  8230  002D00  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8231  002D02  2595               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8232  002D04  EC56  F029         	call	_vscp_writeRegister
  8233                           
  8234                           ;vscp_firmware.c: 1003: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8235  002D08  0100               	movlb	0	; () banked
  8236  002D0A  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8237  002D0C  2595               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8238  002D0E  EC96  F029         	call	_vscp_readRegister
  8239  002D12  0100               	movlb	0	; () banked
  8240  002D14  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8241  002D16  5195               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8242  002D18  0FD0               	addlw	low (_vscp_omsg+6)
  8243  002D1A  6ED9               	movwf	fsr2l,c
  8244  002D1C  6ADA               	clrf	fsr2h,c
  8245  002D1E  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8246                           
  8247                           ; BSR set to: 0
  8248  002D22  2B95               	incf	vscp_handleProtocolEvent@i_1155& (0+255),f,b
  8249  002D24                     l9886:
  8250                           
  8251                           ; BSR set to: 0
  8252  002D24  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8253  002D26  5D95               	subwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8254  002D28  E3E5               	bnc	l9880
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;vscp_firmware.c: 1004: }
  8258                           ;vscp_firmware.c: 1006: vscp_omsg.priority = 0x03;
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;vscp_firmware.c: 1007: vscp_omsg.vscp_class = 0;
  8262                           
  8263                           ;vscp_firmware.c: 1008: vscp_omsg.vscp_type = 26;
  8264  002D2A  D97B               	call	PL80	;call to abstracted procedure
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;vscp_firmware.c: 1009: vscp_omsg.data[ 0 ] = 0;
  8268  002D2C  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;vscp_firmware.c: 1010: vscp_omsg.flags = 0x80 + len + 1;
  8272  002D2E  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8273  002D30  0F81               	addlw	129
  8274  002D32  6FCA               	movwf	_vscp_omsg& (0+255),b
  8275  002D34  D6AE               	goto	l9724
  8276  002D36                     l9898:
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;vscp_firmware.c: 1020: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8280  002D36  51BA               	movf	_vscp_nickname& (0+255),w,b
  8281  002D38  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8282  002D3C  62DF               	cpfseq	indf2,c
  8283  002D3E  D15A               	goto	l1270
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;vscp_firmware.c: 1022: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8287                           ;vscp_firmware.c: 1023: vscp_imsg.data[ 1 ],
  8288                           ;vscp_firmware.c: 1024: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8289  002D40  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8290  002D42  EC08  F00E         	call	_vscp_readAppReg
  8291  002D46  0100               	movlb	0	; () banked
  8292  002D48  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8293  002D4A  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8294  002D4C  6E21               	movwf	?_vscp_writeAppReg,c
  8295  002D4E  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8296  002D50  EC37  F003         	call	_vscp_writeAppReg
  8297  002D54  D692               	goto	L8
  8298  002D56                     l9914:
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;vscp_firmware.c: 1040: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8302  002D56  51BA               	movf	_vscp_nickname& (0+255),w,b
  8303  002D58  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8304  002D5C  62DF               	cpfseq	indf2,c
  8305  002D5E  D14A               	goto	l1270
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;vscp_firmware.c: 1042: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8309                           ;vscp_firmware.c: 1043: vscp_imsg.data[ 1 ],
  8310                           ;vscp_firmware.c: 1044: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8311  002D60  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8312  002D62  EC08  F00E         	call	_vscp_readAppReg
  8313  002D66  0100               	movlb	0	; () banked
  8314  002D68  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8315  002D6A  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8316  002D6C  6E21               	movwf	?_vscp_writeAppReg,c
  8317  002D6E  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8318  002D70  EC37  F003         	call	_vscp_writeAppReg
  8319  002D74  D682               	goto	L8
  8320  002D76                     l9930:
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;vscp_firmware.c: 1060: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8324                           ;vscp_firmware.c: 1061: (0xff == vscp_imsg.data[ 0 ])) {
  8325  002D76  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
  8326  002D78  19BA               	xorwf	_vscp_nickname& (0+255),w,b
  8327  002D7A  E003               	bz	l1235
  8328                           
  8329                           ; BSR set to: 0
  8330  002D7C  29C2               	incf	(_vscp_imsg+6)& (0+255),w,b
  8331  002D7E  E001 D139          	bnz	l1270
  8332  002D82                     l1235:
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;vscp_firmware.c: 1063: uint8_t i, j, k = 0;
  8336  002D82  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;vscp_firmware.c: 1067: vscp_omsg.priority = 0x03;
  8340  002D84  0E03               	movlw	3
  8341  002D86  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8342                           
  8343                           ;vscp_firmware.c: 1068: vscp_omsg.flags = 0x80 + 8;
  8344  002D88  0E88               	movlw	136
  8345  002D8A  6FCA               	movwf	_vscp_omsg& (0+255),b
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;vscp_firmware.c: 1069: vscp_omsg.vscp_class = 0;
  8349  002D8C  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8350  002D8E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8351                           
  8352                           ;vscp_firmware.c: 1070: vscp_omsg.vscp_type = 32;
  8353  002D90  0E20               	movlw	32
  8354  002D92  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;vscp_firmware.c: 1072: for (i = 0; i < 3; i++)
  8358  002D94  6B97               	clrf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8359  002D96                     l1236:
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;vscp_firmware.c: 1073: {
  8363                           ;vscp_firmware.c: 1074: vscp_omsg.data[0] = i;
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;vscp_firmware.c: 1076: for (j = 1; j < 8; j++) {
  8367  002D96  D94C               	call	PL88	;call to abstracted procedure
  8368  002D98                     l9950:
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;vscp_firmware.c: 1077: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8372  002D98  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8373  002D9A  0FCF               	addlw	low (_vscp_omsg+5)
  8374  002D9C  6ED9               	movwf	fsr2l,c
  8375  002D9E  6ADA               	clrf	fsr2h,c
  8376  002DA0  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8377  002DA2  080F               	sublw	15
  8378  002DA4  EC00  F02A         	call	_vscp_getGUID
  8379  002DA8  6EDF               	movwf	indf2,c
  8380  002DAA  0100               	movlb	0	; () banked
  8381  002DAC  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;vscp_firmware.c: 1078: if (k > 16)
  8385  002DAE  0E10               	movlw	16
  8386  002DB0  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8387  002DB2  D001               	goto	l9958
  8388  002DB4  D004               	goto	l9962
  8389  002DB6                     l9958:
  8390                           
  8391                           ; BSR set to: 0
  8392  002DB6  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8393                           
  8394                           ; BSR set to: 0
  8395  002DB8  0E07               	movlw	7
  8396  002DBA  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8397  002DBC  D7ED               	goto	l9950
  8398  002DBE                     l9962:
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;vscp_firmware.c: 1080: }
  8402                           ;vscp_firmware.c: 1082: if (k > 16)
  8403  002DBE  0E10               	movlw	16
  8404  002DC0  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8405  002DC2  D001               	goto	l9966
  8406  002DC4  D006               	goto	l1237
  8407  002DC6                     l9966:
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;vscp_firmware.c: 1085: vscp_sendEvent();
  8411  002DC6  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8412                           
  8413                           ; BSR set to: 0
  8414  002DCA  2B97               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8415                           
  8416                           ; BSR set to: 0
  8417  002DCC  0E02               	movlw	2
  8418  002DCE  6597               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8419  002DD0  D7E2               	goto	l1236
  8420  002DD2                     l1237:
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;vscp_firmware.c: 1086: }
  8424                           ;vscp_firmware.c: 1088: for (j = 0; j < 5; j++)
  8425  002DD2  6B99               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8426  002DD4                     l9976:
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;vscp_firmware.c: 1089: {
  8430                           ;vscp_firmware.c: 1090: if (vscp_getMDF_URL(j) > 0)
  8431  002DD4  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8432  002DD6  ECC8  F029         	call	_vscp_getMDF_URL
  8433  002DDA  0900               	iorlw	0
  8434  002DDC  E008               	bz	l9980
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;vscp_firmware.c: 1091: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8438  002DDE  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8439  002DE0  0FD2               	addlw	low (_vscp_omsg+8)
  8440  002DE2  6ED9               	movwf	fsr2l,c
  8441  002DE4  6ADA               	clrf	fsr2h,c
  8442  002DE6  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8443  002DE8  ECC8  F029         	call	_vscp_getMDF_URL
  8444  002DEC  D005               	goto	L10
  8445  002DEE                     l9980:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;vscp_firmware.c: 1092: else
  8449                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = 0;
  8450  002DEE  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8451  002DF0  0FD2               	addlw	low (_vscp_omsg+8)
  8452  002DF2  6ED9               	movwf	fsr2l,c
  8453  002DF4  6ADA               	clrf	fsr2h,c
  8454  002DF6  0E00               	movlw	0
  8455  002DF8                     L10:
  8456  002DF8  6EDF               	movwf	indf2,c
  8457                           
  8458                           ; BSR set to: 0
  8459  002DFA  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8460                           
  8461                           ; BSR set to: 0
  8462  002DFC  0E04               	movlw	4
  8463  002DFE  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8464  002E00  D7E9               	goto	l9976
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;vscp_firmware.c: 1094: }
  8468                           ;vscp_firmware.c: 1096: vscp_sendEvent();
  8469  002E02  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;vscp_firmware.c: 1098: k = 5;
  8473  002E06  0E05               	movlw	5
  8474  002E08  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;vscp_firmware.c: 1099: for (i = 3; i < 7; i++)
  8478  002E0A  0E03               	movlw	3
  8479  002E0C  6F97               	movwf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8480  002E0E                     l1246:
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;vscp_firmware.c: 1100: {
  8484                           ;vscp_firmware.c: 1101: vscp_omsg.data[0] = i;
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;vscp_firmware.c: 1103: for (j = 1; j < 8; j++) {
  8488  002E0E  D910               	call	PL88	;call to abstracted procedure
  8489  002E10                     l10002:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;vscp_firmware.c: 1104: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8493  002E10  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8494  002E12  0FCF               	addlw	low (_vscp_omsg+5)
  8495  002E14  6ED9               	movwf	fsr2l,c
  8496  002E16  6ADA               	clrf	fsr2h,c
  8497  002E18  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8498  002E1A  ECC8  F029         	call	_vscp_getMDF_URL
  8499  002E1E  6EDF               	movwf	indf2,c
  8500                           
  8501                           ; BSR set to: 0
  8502  002E20  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8503                           
  8504                           ; BSR set to: 0
  8505  002E22  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8506                           
  8507                           ; BSR set to: 0
  8508  002E24  0E07               	movlw	7
  8509  002E26  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8510  002E28  D7F3               	goto	l10002
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;vscp_firmware.c: 1105: }
  8514                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  8515  002E2A  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8516                           
  8517                           ; BSR set to: 0
  8518  002E2E  2B97               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8519                           
  8520                           ; BSR set to: 0
  8521  002E30  0E06               	movlw	6
  8522  002E32  6597               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8523  002E34  D7EC               	goto	l1246
  8524  002E36  D0DE               	goto	l1270
  8525  002E38                     l10016:
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;vscp_firmware.c: 1115: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8529  002E38  51BA               	movf	_vscp_nickname& (0+255),w,b
  8530  002E3A  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8531  002E3E  62DF               	cpfseq	indf2,c
  8532  002E40  D0D9               	goto	l1270
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;vscp_firmware.c: 1117: vscp_omsg.priority = 0x03;
  8536  002E42  0E03               	movlw	3
  8537  002E44  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8538                           
  8539                           ;vscp_firmware.c: 1118: vscp_omsg.flags = 0x80 + 7;
  8540  002E46  0E87               	movlw	135
  8541  002E48  6FCA               	movwf	_vscp_omsg& (0+255),b
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;vscp_firmware.c: 1119: vscp_omsg.vscp_class = 0;
  8545  002E4A  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8546  002E4C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8547                           
  8548                           ;vscp_firmware.c: 1120: vscp_omsg.vscp_type = 34;
  8549  002E4E  0E22               	movlw	34
  8550  002E50  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;vscp_firmware.c: 1122: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8554  002E52  0ECF               	movlw	(_vscp_omsg+5)& (0+255)
  8555  002E54  ECA3  F029         	call	_vscp_getMatrixInfo
  8556  002E58  D61C               	goto	l9724
  8557  002E5A                     l10026:
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;vscp_firmware.c: 1138: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8561  002E5A  51BA               	movf	_vscp_nickname& (0+255),w,b
  8562  002E5C  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8563  002E60  62DF               	cpfseq	indf2,c
  8564  002E62  D0C8               	goto	l1270
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;vscp_firmware.c: 1140: uint16_t page_save;
  8568                           ;vscp_firmware.c: 1141: uint8_t byte = 0, bytes = 0;
  8569  002E64  6B96               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;vscp_firmware.c: 1142: uint8_t bytes_this_time, cb;
  8573                           ;vscp_firmware.c: 1146: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8574  002E66  C0BC  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8575  002E6A  0E0F               	movlw	15
  8576  002E6C  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8577  002E6E  0E04               	movlw	4
  8578  002E70  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8579  002E72  E304               	bnc	l10034
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;vscp_firmware.c: 1149: bytes = vscp_imsg.data[4];
  8583  002E74  C0C6  F094         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1163
  8584                           
  8585                           ;vscp_firmware.c: 1151: if ( 0 == bytes ) {
  8586  002E78  6794               	tstfsz	vscp_handleProtocolEvent@bytes_1163& (0+255),b
  8587  002E7A  D002               	goto	l10038
  8588  002E7C                     l10034:
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;vscp_firmware.c: 1152: bytes = 1;
  8592  002E7C  0E01               	movlw	1
  8593  002E7E  6F94               	movwf	vscp_handleProtocolEvent@bytes_1163& (0+255),b
  8594  002E80                     l10038:
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;vscp_firmware.c: 1157: }
  8598                           ;vscp_firmware.c: 1160: page_save = vscp_page_select;
  8599  002E80  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8600  002E84  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;vscp_firmware.c: 1165: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8604  002E88  D8B6               	call	PL34	;call to abstracted procedure
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;vscp_firmware.c: 1168: vscp_omsg.priority = 0x03;
  8608  002E8A  0E03               	movlw	3
  8609  002E8C  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;vscp_firmware.c: 1169: vscp_omsg.vscp_class = 0;
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;vscp_firmware.c: 1170: vscp_omsg.vscp_type = 39;
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;vscp_firmware.c: 1171: vscp_omsg.data[0] = 0;
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;vscp_firmware.c: 1172: vscp_omsg.data[1] = vscp_imsg.data[1];
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;vscp_firmware.c: 1173: vscp_omsg.data[2] = vscp_imsg.data[2];
  8625  002E8E  D8BF               	call	PL42	;call to abstracted procedure
  8626  002E90                     l10054:
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;vscp_firmware.c: 1177: if ( ( bytes - byte ) >= 4 ) {
  8630  002E90  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8631  002E92  C094  F07F         	movff	vscp_handleProtocolEvent@bytes_1163,??_vscp_handleProtocolEvent
  8632  002E96  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8633  002E98  5F7F               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8634  002E9A  0E00               	movlw	0
  8635  002E9C  5B80               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8636  002E9E  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8637  002EA0  0A80               	xorlw	128
  8638  002EA2  0F80               	addlw	-128
  8639  002EA4  0E04               	movlw	4
  8640  002EA6  B4D8               	btfsc	status,2,c
  8641  002EA8  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8642  002EAA  E302               	bnc	l10058
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;vscp_firmware.c: 1178: bytes_this_time = 4;
  8646  002EAC  0E04               	movlw	4
  8647  002EAE  D002               	goto	L12
  8648  002EB0                     l10058:
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;vscp_firmware.c: 1180: else {
  8652                           ;vscp_firmware.c: 1181: bytes_this_time = (bytes - byte);
  8653  002EB0  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8654  002EB2  5D94               	subwf	vscp_handleProtocolEvent@bytes_1163& (0+255),w,b
  8655  002EB4                     L12:
  8656  002EB4  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;vscp_firmware.c: 1182: }
  8660                           ;vscp_firmware.c: 1185: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8661  002EB6  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8662  002EB8  0F84               	addlw	132
  8663  002EBA  6FCA               	movwf	_vscp_omsg& (0+255),b
  8664                           
  8665                           ;vscp_firmware.c: 1186: vscp_omsg.data[3] =
  8666                           ;vscp_firmware.c: 1187: vscp_imsg.data[3] + byte;
  8667  002EBC  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8668  002EBE  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8669  002EC0  6FD2               	movwf	(_vscp_omsg+8)& (0+255),b
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;vscp_firmware.c: 1190: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8673  002EC2  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8674  002EC4  D00E               	goto	l10066
  8675  002EC6                     l10062:
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;vscp_firmware.c: 1191: vscp_omsg.data[ (4 + cb) ] =
  8679                           ;vscp_firmware.c: 1192: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8680  002EC6  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8681  002EC8  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8682  002ECA  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8683  002ECC  EC96  F029         	call	_vscp_readRegister
  8684  002ED0  0100               	movlb	0	; () banked
  8685  002ED2  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8686  002ED4  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8687  002ED6  0FD3               	addlw	low (_vscp_omsg+9)
  8688  002ED8  6ED9               	movwf	fsr2l,c
  8689  002EDA  6ADA               	clrf	fsr2h,c
  8690  002EDC  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8691                           
  8692                           ; BSR set to: 0
  8693  002EE0  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8694  002EE2                     l10066:
  8695                           
  8696                           ; BSR set to: 0
  8697  002EE2  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8698  002EE4  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8699  002EE6  E3EF               	bnc	l10062
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;vscp_firmware.c: 1193: }
  8703                           ;vscp_firmware.c: 1196: vscp_sendEvent();
  8704  002EE8  ECE6  F028         	call	_vscp_sendEvent	;wreg free
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;vscp_firmware.c: 1199: byte += bytes_this_time;
  8708  002EEC  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8709  002EEE  2796               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;vscp_firmware.c: 1202: vscp_omsg.data[0] += 1;
  8713  002EF0  2BCF               	incf	(_vscp_omsg+5)& (0+255),f,b
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;vscp_firmware.c: 1204: } while (byte < bytes);
  8717  002EF2  5194               	movf	vscp_handleProtocolEvent@bytes_1163& (0+255),w,b
  8718  002EF4  5D96               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8719  002EF6  E3CC               	bnc	l10054
  8720                           
  8721                           ; BSR set to: 0
  8722                           ;vscp_firmware.c: 1207: vscp_page_select = page_save;
  8723  002EF8  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8724  002EFC  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8725  002F00  D079               	goto	l1270
  8726  002F02                     l10076:
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;vscp_firmware.c: 1214: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8730  002F02  51BA               	movf	_vscp_nickname& (0+255),w,b
  8731  002F04  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8732  002F08  62DF               	cpfseq	indf2,c
  8733  002F0A  D074               	goto	l1270
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;vscp_firmware.c: 1216: uint8_t i;
  8737                           ;vscp_firmware.c: 1217: uint16_t page_save;
  8738                           ;vscp_firmware.c: 1220: page_save = vscp_page_select;
  8739  002F0C  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1167
  8740  002F10  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1167+1
  8741                           
  8742                           ; BSR set to: 0
  8743                           ;vscp_firmware.c: 1224: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8744  002F14  D870               	call	PL34	;call to abstracted procedure
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;vscp_firmware.c: 1226: for (i = vscp_imsg.data[ 3 ];
  8748  002F16  C0C5  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1166
  8749                           
  8750                           ;vscp_firmware.c: 1229: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8751                           ;vscp_firmware.c: 1230: i++) {
  8752  002F1A  D014               	goto	l10088
  8753  002F1C                     l10084:
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;vscp_firmware.c: 1231: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8757                           ;vscp_firmware.c: 1232: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8758  002F1C  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8759  002F1E  08C6               	sublw	low (_vscp_imsg+10)
  8760  002F20  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8761  002F22  6ED9               	movwf	fsr2l,c
  8762  002F24  6ADA               	clrf	fsr2h,c
  8763  002F26  50DF               	movf	indf2,w,c
  8764  002F28  6E34               	movwf	?_vscp_writeRegister,c
  8765  002F2A  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8766  002F2C  EC56  F029         	call	_vscp_writeRegister
  8767  002F30  0100               	movlb	0	; () banked
  8768  002F32  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8769  002F34  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8770  002F36  08D3               	sublw	low (_vscp_omsg+9)
  8771  002F38  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8772  002F3A  6ED9               	movwf	fsr2l,c
  8773  002F3C  6ADA               	clrf	fsr2h,c
  8774  002F3E  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8775                           
  8776                           ; BSR set to: 0
  8777  002F42  2B92               	incf	vscp_handleProtocolEvent@i_1166& (0+255),f,b
  8778  002F44                     l10088:
  8779                           
  8780                           ; BSR set to: 0
  8781  002F44  51BC               	movf	_vscp_imsg& (0+255),w,b
  8782  002F46  0B0F               	andlw	15
  8783  002F48  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8784  002F4A  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8785  002F4C  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8786  002F4E  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8787  002F50  0E00               	movlw	0
  8788  002F52  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8789  002F54  0EFC               	movlw	252
  8790  002F56  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8791  002F58  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8792  002F5A  0EFF               	movlw	255
  8793  002F5C  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8794  002F5E  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8795  002F60  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8796  002F62  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8797  002F64  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8798  002F66  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8799  002F68  0A80               	xorlw	128
  8800  002F6A  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8801  002F6C  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8802  002F6E  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8803  002F70  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8804  002F72  0A80               	xorlw	128
  8805  002F74  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8806  002F76  E3D2               	bnc	l10084
  8807                           
  8808                           ; BSR set to: 0
  8809                           ;vscp_firmware.c: 1233: }
  8810                           ;vscp_firmware.c: 1236: vscp_page_select = page_save;
  8811  002F78  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1167,_vscp_page_select
  8812  002F7C  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1167+1,_vscp_page_select+1
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;vscp_firmware.c: 1238: vscp_omsg.priority = 0x03;
  8816  002F80  0E03               	movlw	3
  8817  002F82  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;vscp_firmware.c: 1239: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8821  002F84  51BC               	movf	_vscp_imsg& (0+255),w,b
  8822  002F86  0B0F               	andlw	15
  8823  002F88  0F80               	addlw	128
  8824  002F8A  6FCA               	movwf	_vscp_omsg& (0+255),b
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;vscp_firmware.c: 1240: vscp_omsg.vscp_class = 0;
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;vscp_firmware.c: 1241: vscp_omsg.vscp_type = 39;
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;vscp_firmware.c: 1242: vscp_omsg.data[0] = 0;
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;vscp_firmware.c: 1243: vscp_omsg.data[1] = vscp_imsg.data[1];
  8837                           
  8838                           ; BSR set to: 0
  8839                           ;vscp_firmware.c: 1244: vscp_omsg.data[2] = vscp_imsg.data[2];
  8840  002F8C  D840               	call	PL42	;call to abstracted procedure
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;vscp_firmware.c: 1245: vscp_omsg.data[3] = vscp_imsg.data[3];
  8844  002F8E  C0C5  F0D2         	movff	_vscp_imsg+9,_vscp_omsg+8
  8845  002F92  D57F               	goto	l9724
  8846  002F94                     l10110:
  8847                           
  8848                           ; BSR set to: 0
  8849  002F94  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  8850                           
  8851                           ; Switch size 1, requested type "space"
  8852                           ; Number of cases is 16, Range of values is 1 to 38
  8853                           ; switch strategies available:
  8854                           ; Name         Instructions Cycles
  8855                           ; simple_byte           49    25 (average)
  8856                           ;	Chosen strategy is simple_byte
  8857  002F96  0A01               	xorlw	1	; case 1
  8858  002F98  E101 D553          	bz	l9698
  8859  002F9C  0A03               	xorlw	3	; case 2
  8860  002F9E  E101 D553          	bz	l9700
  8861  002FA2  0A04               	xorlw	4	; case 6
  8862  002FA4  E101 D553          	bz	l9702
  8863  002FA8  0A0E               	xorlw	14	; case 8
  8864  002FAA  E101 D553          	bz	l9704
  8865  002FAE  0A01               	xorlw	1	; case 9
  8866  002FB0  E101 D553          	bz	l9706
  8867  002FB4  0A02               	xorlw	2	; case 11
  8868  002FB6  E101 D573          	bz	l9740
  8869  002FBA  0A07               	xorlw	7	; case 12
  8870  002FBC  E101 D589          	bz	l9774
  8871  002FC0  0A1B               	xorlw	27	; case 23
  8872  002FC2  E101 D61E          	bz	l9832
  8873  002FC6  0A0F               	xorlw	15	; case 24
  8874  002FC8  E101 D632          	bz	l9838
  8875  002FCC  0A01               	xorlw	1	; case 25
  8876  002FCE  E101 D684          	bz	l9872
  8877  002FD2  0A04               	xorlw	4	; case 29
  8878  002FD4  E101 D6AF          	bz	l9898
  8879  002FD8  0A03               	xorlw	3	; case 30
  8880  002FDA  E101 D6BC          	bz	l9914
  8881  002FDE  0A01               	xorlw	1	; case 31
  8882  002FE0  E101 D6C9          	bz	l9930
  8883  002FE4  0A3E               	xorlw	62	; case 33
  8884  002FE6  E101 D727          	bz	l10016
  8885  002FEA  0A04               	xorlw	4	; case 37
  8886  002FEC  E101 D735          	bz	l10026
  8887  002FF0  0A03               	xorlw	3	; case 38
  8888  002FF2  E087               	bz	l10076
  8889  002FF4                     l1270:
  8890  002FF4  0012               	return	
  8891  002FF6                     __end_of_vscp_handleProtocolEvent:
  8892                           	opt stack 0
  8893  002FF6                     PL34:
  8894                           	opt stack 21
  8895  002FF6  51C4               	movf	(_vscp_imsg+8)& (0+255),w,b
  8896  002FF8  C0C3  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8897  002FFC  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8898  002FFE  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8899  003002  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8900  003004  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8901  003006  6E46               	movwf	_vscp_page_select,c
  8902  003008  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8903  00300A  6E47               	movwf	_vscp_page_select+1,c
  8904  00300C  0012               	return	
  8905  00300E                     __end_ofPL34:
  8906                           	opt stack 0
  8907  00300E                     PL42:
  8908                           	opt stack 21
  8909  00300E  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8910  003010  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8911  003012  0E27               	movlw	39
  8912  003014  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8913  003016  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8914  003018  C0C3  F0D0         	movff	_vscp_imsg+7,_vscp_omsg+6
  8915  00301C  C0C4  F0D1         	movff	_vscp_imsg+8,_vscp_omsg+7
  8916  003020  0012               	return	
  8917  003022                     __end_ofPL42:
  8918                           	opt stack 0
  8919  003022                     PL80:
  8920                           	opt stack 21
  8921  003022  0E03               	movlw	3
  8922  003024  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8923  003026  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8924  003028  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8925  00302A  0E1A               	movlw	26
  8926  00302C  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8927  00302E  0C1A               	retlw	26
  8928  003030                     __end_ofPL80:
  8929                           	opt stack 0
  8930  003030                     PL88:
  8931                           	opt stack 21
  8932  003030  C097  F0CF         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8933  003034  0E01               	movlw	1
  8934  003036  6F99               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8935  003038  0C01               	retlw	1
  8936  00303A                     __end_ofPL88:
  8937                           	opt stack 0
  8938                           tblptru	equ	0xFF8
  8939                           tblptrh	equ	0xFF7
  8940                           tblptrl	equ	0xFF6
  8941                           tablat	equ	0xFF5
  8942                           prodh	equ	0xFF4
  8943                           prodl	equ	0xFF3
  8944                           intcon	equ	0xFF2
  8945                           postinc0	equ	0xFEE
  8946                           wreg	equ	0xFE8
  8947                           indf1	equ	0xFE7
  8948                           postdec1	equ	0xFE5
  8949                           fsr1h	equ	0xFE2
  8950                           fsr1l	equ	0xFE1
  8951                           indf2	equ	0xFDF
  8952                           postinc2	equ	0xFDE
  8953                           postdec2	equ	0xFDD
  8954                           plusw2	equ	0xFDB
  8955                           fsr2h	equ	0xFDA
  8956                           fsr2l	equ	0xFD9
  8957                           status	equ	0xFD8
  8958                           
  8959 ;; *************** function ___lbmod *****************
  8960 ;; Defined at:
  8961 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  dividend        1    wreg     unsigned char 
  8964 ;;  divisor         1   13[COMRAM] unsigned char 
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;  dividend        1   14[COMRAM] unsigned char 
  8967 ;;  rem             1   16[COMRAM] unsigned char 
  8968 ;;  counter         1   15[COMRAM] unsigned char 
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  1    wreg      unsigned char 
  8971 ;; Registers used:
  8972 ;;		wreg, status,2, status,0
  8973 ;; Tracked objects:
  8974 ;;		On entry : F/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8978 ;;      Params:         1       0       0       0       0       0       0
  8979 ;;      Locals:         3       0       0       0       0       0       0
  8980 ;;      Temps:          0       0       0       0       0       0       0
  8981 ;;      Totals:         4       0       0       0       0       0       0
  8982 ;;Total ram usage:        4 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:    2
  8985 ;; This function calls:
  8986 ;;		Nothing
  8987 ;; This function is called by:
  8988 ;;		_vscp_handleProtocolEvent
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           	psect	text34
  8993  0051A4                     __ptext34:
  8994                           	opt stack 0
  8995  0051A4                     ___lbmod:
  8996                           	opt stack 26
  8997                           
  8998                           ;incstack = 0
  8999                           ;incstack = 0
  9000                           ;___lbmod@dividend stored from wreg
  9001  0051A4  CFE8 F00F          	movff	wreg,___lbmod@dividend
  9002                           
  9003                           ; BSR set to: 0
  9004  0051A8  0E08               	movlw	8
  9005  0051AA  6E10               	movwf	___lbmod@counter,c
  9006                           
  9007                           ; BSR set to: 0
  9008  0051AC  6A11               	clrf	___lbmod@rem,c
  9009  0051AE                     l9134:
  9010  0051AE  90D8               	bcf	status,0,c
  9011  0051B0  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  9012  0051B2  3411               	rlcf	___lbmod@rem& (0+255),w,c
  9013  0051B4  6E11               	movwf	___lbmod@rem,c
  9014  0051B6  90D8               	bcf	status,0,c
  9015  0051B8  360F               	rlcf	___lbmod@dividend,f,c
  9016  0051BA  500E               	movf	___lbmod@divisor,w,c
  9017  0051BC  5C11               	subwf	___lbmod@rem,w,c
  9018  0051BE  E302               	bnc	l9142
  9019  0051C0  500E               	movf	___lbmod@divisor,w,c
  9020  0051C2  5E11               	subwf	___lbmod@rem,f,c
  9021  0051C4                     l9142:
  9022  0051C4  2E10               	decfsz	___lbmod@counter,f,c
  9023  0051C6  D7F3               	goto	l9134
  9024  0051C8  5011               	movf	___lbmod@rem,w,c
  9025  0051CA  0012               	return	
  9026  0051CC                     __end_of___lbmod:
  9027                           	opt stack 0
  9028                           tblptru	equ	0xFF8
  9029                           tblptrh	equ	0xFF7
  9030                           tblptrl	equ	0xFF6
  9031                           tablat	equ	0xFF5
  9032                           prodh	equ	0xFF4
  9033                           prodl	equ	0xFF3
  9034                           intcon	equ	0xFF2
  9035                           postinc0	equ	0xFEE
  9036                           wreg	equ	0xFE8
  9037                           indf1	equ	0xFE7
  9038                           postdec1	equ	0xFE5
  9039                           fsr1h	equ	0xFE2
  9040                           fsr1l	equ	0xFE1
  9041                           indf2	equ	0xFDF
  9042                           postinc2	equ	0xFDE
  9043                           postdec2	equ	0xFDD
  9044                           plusw2	equ	0xFDB
  9045                           fsr2h	equ	0xFDA
  9046                           fsr2l	equ	0xFD9
  9047                           status	equ	0xFD8
  9048                           
  9049 ;; *************** function _vscp_writeRegister *****************
  9050 ;; Defined at:
  9051 ;;		line 678 in file "../../vscp_firmware/common/vscp_firmware.c"
  9052 ;; Parameters:    Size  Location     Type
  9053 ;;  reg             1    wreg     unsigned char 
  9054 ;;  value           1   51[COMRAM] unsigned char 
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;  reg             1   52[COMRAM] unsigned char 
  9057 ;; Return value:  Size  Location     Type
  9058 ;;                  1    wreg      unsigned char 
  9059 ;; Registers used:
  9060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9061 ;; Tracked objects:
  9062 ;;		On entry : F/0
  9063 ;;		On exit  : 0/0
  9064 ;;		Unchanged: 0/0
  9065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9066 ;;      Params:         1       0       0       0       0       0       0
  9067 ;;      Locals:         1       0       0       0       0       0       0
  9068 ;;      Temps:          0       0       0       0       0       0       0
  9069 ;;      Totals:         2       0       0       0       0       0       0
  9070 ;;Total ram usage:        2 bytes
  9071 ;; Hardware stack levels used:    1
  9072 ;; Hardware stack levels required when called:    7
  9073 ;; This function calls:
  9074 ;;		_vscp_writeAppReg
  9075 ;;		_vscp_writeStdReg
  9076 ;; This function is called by:
  9077 ;;		_vscp_handleProtocolEvent
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           	psect	text35
  9082  0052AC                     __ptext35:
  9083                           	opt stack 0
  9084  0052AC                     _vscp_writeRegister:
  9085                           	opt stack 21
  9086                           
  9087                           ;incstack = 0
  9088                           ;incstack = 0
  9089                           ;vscp_writeRegister@reg stored from wreg
  9090  0052AC  CFE8 F035          	movff	wreg,vscp_writeRegister@reg
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;vscp_firmware.c: 679: if (reg >= 0x80) {
  9094  0052B0  0E7F               	movlw	127
  9095  0052B2  6435               	cpfsgt	vscp_writeRegister@reg,c
  9096  0052B4  D006               	goto	l11350
  9097                           
  9098                           ; BSR set to: 0
  9099                           ;vscp_firmware.c: 680: return vscp_writeStdReg(reg, value);
  9100  0052B6  C034  F022         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9101  0052BA  5035               	movf	vscp_writeRegister@reg,w,c
  9102  0052BC  ECF5  F01A         	call	_vscp_writeStdReg
  9103  0052C0  D005               	goto	l1147
  9104  0052C2                     l11350:
  9105                           
  9106                           ; BSR set to: 0
  9107                           ;vscp_firmware.c: 682: return vscp_writeAppReg(reg, value);
  9108  0052C2  C034  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9109  0052C6  5035               	movf	vscp_writeRegister@reg,w,c
  9110  0052C8  EC37  F003         	call	_vscp_writeAppReg
  9111  0052CC                     l1147:
  9112  0052CC  0012               	return	
  9113  0052CE                     __end_of_vscp_writeRegister:
  9114                           	opt stack 0
  9115                           tblptru	equ	0xFF8
  9116                           tblptrh	equ	0xFF7
  9117                           tblptrl	equ	0xFF6
  9118                           tablat	equ	0xFF5
  9119                           prodh	equ	0xFF4
  9120                           prodl	equ	0xFF3
  9121                           intcon	equ	0xFF2
  9122                           postinc0	equ	0xFEE
  9123                           wreg	equ	0xFE8
  9124                           indf1	equ	0xFE7
  9125                           postdec1	equ	0xFE5
  9126                           fsr1h	equ	0xFE2
  9127                           fsr1l	equ	0xFE1
  9128                           indf2	equ	0xFDF
  9129                           postinc2	equ	0xFDE
  9130                           postdec2	equ	0xFDD
  9131                           plusw2	equ	0xFDB
  9132                           fsr2h	equ	0xFDA
  9133                           fsr2l	equ	0xFD9
  9134                           status	equ	0xFD8
  9135                           
  9136 ;; *************** function _vscp_writeStdReg *****************
  9137 ;; Defined at:
  9138 ;;		line 691 in file "../../vscp_firmware/common/vscp_firmware.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;  reg             1    wreg     unsigned char 
  9141 ;;  value           1   33[COMRAM] unsigned char 
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;  reg             1   50[COMRAM] unsigned char 
  9144 ;;  code            4   43[COMRAM] unsigned long 
  9145 ;;  idx             1   48[COMRAM] unsigned char 
  9146 ;;  code            4   39[COMRAM] unsigned long 
  9147 ;;  idx             1   47[COMRAM] unsigned char 
  9148 ;;  rv              1   49[COMRAM] unsigned char 
  9149 ;; Return value:  Size  Location     Type
  9150 ;;                  1    wreg      unsigned char 
  9151 ;; Registers used:
  9152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9153 ;; Tracked objects:
  9154 ;;		On entry : F/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9158 ;;      Params:         1       0       0       0       0       0       0
  9159 ;;      Locals:        12       0       0       0       0       0       0
  9160 ;;      Temps:          5       0       0       0       0       0       0
  9161 ;;      Totals:        18       0       0       0       0       0       0
  9162 ;;Total ram usage:       18 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; Hardware stack levels required when called:    6
  9165 ;; This function calls:
  9166 ;;		_vscp_getGUID
  9167 ;;		_vscp_setGUID
  9168 ;;		_vscp_getUserID
  9169 ;;		_vscp_setUserID
  9170 ;;		_vscp_getManufacturerId
  9171 ;;		_vscp_setManufacturerId
  9172 ;;		_vscp_getFamilyCode
  9173 ;;		_vscp_getFamilyType
  9174 ;;		_vscp_restoreDefaults
  9175 ;; This function is called by:
  9176 ;;		_vscp_writeRegister
  9177 ;;		_vscp_handleProtocolEvent
  9178 ;; This function uses a non-reentrant model
  9179 ;;
  9180                           
  9181                           	psect	text36
  9182  0035EA                     __ptext36:
  9183                           	opt stack 0
  9184  0035EA                     _vscp_writeStdReg:
  9185                           	opt stack 22
  9186                           
  9187                           ;incstack = 0
  9188                           ;incstack = 0
  9189                           ;vscp_writeStdReg@reg stored from wreg
  9190  0035EA  CFE8 F033          	movff	wreg,vscp_writeStdReg@reg
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;vscp_firmware.c: 692: uint8_t rv = ~value;
  9194  0035EE  1C22               	comf	vscp_writeStdReg@value,w,c
  9195  0035F0  6E32               	movwf	vscp_writeStdReg@rv,c
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;vscp_firmware.c: 694: if ((reg > (0x82 + 1)) &&
  9199                           ;vscp_firmware.c: 695: (reg < 0x89)) {
  9200  0035F2  0E83               	movlw	131
  9201  0035F4  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9202  0035F6  D00E               	goto	l11362
  9203                           
  9204                           ; BSR set to: 0
  9205  0035F8  0E89               	movlw	137
  9206  0035FA  6033               	cpfslt	vscp_writeStdReg@reg,c
  9207  0035FC  D00B               	goto	l11362
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;vscp_firmware.c: 698: vscp_setUserID((reg - 0x84), value);
  9211  0035FE  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9212  003602  5033               	movf	vscp_writeStdReg@reg,w,c
  9213  003604  0F7C               	addlw	124
  9214  003606  ECBC  F029         	call	_vscp_setUserID
  9215                           
  9216                           ;vscp_firmware.c: 699: rv = vscp_getUserID((reg - 0x84));
  9217  00360A  5033               	movf	vscp_writeStdReg@reg,w,c
  9218  00360C  0F7C               	addlw	124
  9219  00360E  ECF6  F029         	call	_vscp_getUserID
  9220  003612  D077               	goto	L17
  9221  003614                     l11362:
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;vscp_firmware.c: 702: else if (0x92 == reg) {
  9225  003614  5033               	movf	vscp_writeStdReg@reg,w,c
  9226  003616  0A92               	xorlw	146
  9227  003618  E10D               	bnz	l11368
  9228                           
  9229                           ; BSR set to: 0
  9230                           ;vscp_firmware.c: 705: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9231  00361A  5022               	movf	vscp_writeStdReg@value,w,c
  9232  00361C  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9233  00361E  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9234  003620  5046               	movf	_vscp_page_select,w,c
  9235  003622  6E25               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9236  003624  6A26               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9237  003626  1023               	iorwf	??_vscp_writeStdReg,w,c
  9238  003628  6E46               	movwf	_vscp_page_select,c
  9239  00362A  5024               	movf	??_vscp_writeStdReg+1,w,c
  9240  00362C  1026               	iorwf	??_vscp_writeStdReg+3,w,c
  9241  00362E  6E47               	movwf	_vscp_page_select+1,c
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;vscp_firmware.c: 706: rv = (vscp_page_select >> 8) & 0xff;
  9245  003630  5047               	movf	_vscp_page_select+1,w,c
  9246  003632  D067               	goto	L17
  9247  003634                     l11368:
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;vscp_firmware.c: 708: else if (0x93 == reg) {
  9251  003634  5033               	movf	vscp_writeStdReg@reg,w,c
  9252  003636  0A93               	xorlw	147
  9253  003638  E10B               	bnz	l11374
  9254                           
  9255                           ; BSR set to: 0
  9256                           ;vscp_firmware.c: 711: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9257  00363A  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9258  00363C  5047               	movf	_vscp_page_select+1,w,c
  9259  00363E  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9260  003640  5022               	movf	vscp_writeStdReg@value,w,c
  9261  003642  1023               	iorwf	??_vscp_writeStdReg,w,c
  9262  003644  6E46               	movwf	_vscp_page_select,c
  9263  003646  5024               	movf	??_vscp_writeStdReg+1,w,c
  9264  003648  6E47               	movwf	_vscp_page_select+1,c
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;vscp_firmware.c: 712: rv = (vscp_page_select & 0xff);
  9268  00364A  C046  F032         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9269                           
  9270                           ;vscp_firmware.c: 713: }
  9271  00364E  D098               	goto	l11436
  9272  003650                     l11374:
  9273                           
  9274                           ; BSR set to: 0
  9275                           ;vscp_firmware.c: 718: else if ((reg > 0x88) && (reg < 0x91)) {
  9276  003650  0E88               	movlw	136
  9277  003652  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9278  003654  D019               	goto	l11386
  9279                           
  9280                           ; BSR set to: 0
  9281  003656  0E91               	movlw	145
  9282  003658  6033               	cpfslt	vscp_writeStdReg@reg,c
  9283  00365A  D016               	goto	l11386
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;vscp_firmware.c: 720: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9287                           ;vscp_firmware.c: 721: (0xff != (vscp_page_select & 0xff))) {
  9288  00365C  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9289  003660  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9290  003664  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9291  003666  2824               	incf	??_vscp_writeStdReg+1,w,c
  9292  003668  E102               	bnz	l11382
  9293                           
  9294                           ; BSR set to: 0
  9295  00366A  2846               	incf	_vscp_page_select,w,c
  9296  00366C  E002               	bz	l11384
  9297  00366E                     l11382:
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;vscp_firmware.c: 723: rv = ~value;
  9301  00366E  1C22               	comf	vscp_writeStdReg@value,w,c
  9302  003670  D048               	goto	L17
  9303  003672                     l11384:
  9304                           
  9305                           ; BSR set to: 0
  9306                           ;vscp_firmware.c: 726: vscp_setManufacturerId(reg - 0x89, value);
  9307  003672  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9308  003676  5033               	movf	vscp_writeStdReg@reg,w,c
  9309  003678  0F77               	addlw	119
  9310  00367A  ECB0  F029         	call	_vscp_setManufacturerId
  9311                           
  9312                           ;vscp_firmware.c: 727: rv = vscp_getManufacturerId(reg - 0x89);
  9313  00367E  5033               	movf	vscp_writeStdReg@reg,w,c
  9314  003680  0F77               	addlw	119
  9315  003682  ECEC  F029         	call	_vscp_getManufacturerId
  9316  003686  D03D               	goto	L17
  9317  003688                     l11386:
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;vscp_firmware.c: 730: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9321  003688  0ECF               	movlw	207
  9322  00368A  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9323  00368C  D017               	goto	l11398
  9324                           
  9325                           ; BSR set to: 0
  9326  00368E  0EE0               	movlw	224
  9327  003690  6033               	cpfslt	vscp_writeStdReg@reg,c
  9328  003692  D014               	goto	l11398
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;vscp_firmware.c: 732: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9332                           ;vscp_firmware.c: 733: (0xff != (vscp_page_select & 0xff))) {
  9333  003694  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9334  003698  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9335  00369C  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9336  00369E  2824               	incf	??_vscp_writeStdReg+1,w,c
  9337  0036A0  E1E6               	bnz	l11382
  9338                           
  9339                           ; BSR set to: 0
  9340  0036A2  2846               	incf	_vscp_page_select,w,c
  9341  0036A4  E1E4               	bnz	l11382
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;vscp_firmware.c: 737: else {
  9345                           ;vscp_firmware.c: 738: vscp_setGUID(reg - 0xD0, value);
  9346  0036A6  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9347  0036AA  5033               	movf	vscp_writeStdReg@reg,w,c
  9348  0036AC  0F30               	addlw	48
  9349  0036AE  EC67  F029         	call	_vscp_setGUID
  9350                           
  9351                           ;vscp_firmware.c: 739: rv = vscp_getGUID(reg - 0xD0);
  9352  0036B2  5033               	movf	vscp_writeStdReg@reg,w,c
  9353  0036B4  0F30               	addlw	48
  9354  0036B6  EC00  F02A         	call	_vscp_getGUID
  9355  0036BA  D023               	goto	L17
  9356  0036BC                     l11398:
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;vscp_firmware.c: 743: else if ( ( reg >= 0x9A ) &&
  9360                           ;vscp_firmware.c: 744: ( reg < 0x9E ) ) {
  9361  0036BC  0E99               	movlw	153
  9362  0036BE  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9363  0036C0  D022               	goto	l11408
  9364                           
  9365                           ; BSR set to: 0
  9366  0036C2  0E9E               	movlw	158
  9367  0036C4  6033               	cpfslt	vscp_writeStdReg@reg,c
  9368  0036C6  D01F               	goto	l11408
  9369                           
  9370                           ; BSR set to: 0
  9371                           ;vscp_firmware.c: 746: uint32_t code = vscp_getFamilyCode();
  9372  0036C8  EC4F  F02A         	call	_vscp_getFamilyCode	;wreg free
  9373  0036CC  C011  F02B         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  9374  0036D0  C010  F02A         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  9375  0036D4  C00F  F029         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  9376  0036D8  C00E  F028         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  9377                           
  9378                           ; BSR set to: 0
  9379                           ;vscp_firmware.c: 747: uint8_t idx = reg - 0x9A;
  9380  0036DC  5033               	movf	vscp_writeStdReg@reg,w,c
  9381  0036DE  0F66               	addlw	102
  9382  0036E0  6E30               	movwf	vscp_writeStdReg@idx,c
  9383                           
  9384                           ; BSR set to: 0
  9385                           ;vscp_firmware.c: 748: rv = code >> (((3-idx)*8) & 0xff);
  9386  0036E2  5030               	movf	vscp_writeStdReg@idx,w,c
  9387  0036E4  D84F               	call	PL54	;call to abstracted procedure
  9388  0036E6  C028  F024         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  9389  0036EA  C029  F025         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  9390  0036EE  C02A  F026         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  9391  0036F2  C02B  F027         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  9392  0036F6  2AE8               	incf	wreg,f,c
  9393  0036F8  D001               	goto	u9620
  9394  0036FA                     u9625:
  9395  0036FA  D84E               	call	PL84	;call to abstracted procedure
  9396  0036FC                     u9620:
  9397  0036FC  2EE8               	decfsz	wreg,f,c
  9398  0036FE  D7FD               	goto	u9625
  9399  003700  D024               	goto	L18
  9400  003702                     L17:
  9401  003702  6E32               	movwf	vscp_writeStdReg@rv,c
  9402                           
  9403                           ;vscp_firmware.c: 749: }
  9404  003704  D03D               	goto	l11436
  9405  003706                     l11408:
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;vscp_firmware.c: 750: else if ( ( reg >= 0x9E ) &&
  9409                           ;vscp_firmware.c: 751: ( reg < 0xA2 ) ) {
  9410  003706  0E9D               	movlw	157
  9411  003708  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9412  00370A  D021               	goto	l11418
  9413                           
  9414                           ; BSR set to: 0
  9415  00370C  0EA2               	movlw	162
  9416  00370E  6033               	cpfslt	vscp_writeStdReg@reg,c
  9417  003710  D01E               	goto	l11418
  9418                           
  9419                           ; BSR set to: 0
  9420                           ;vscp_firmware.c: 753: uint32_t code = vscp_getFamilyType();
  9421  003712  EC4A  F02A         	call	_vscp_getFamilyType	;wreg free
  9422  003716  C011  F02F         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1147+3
  9423  00371A  C010  F02E         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1147+2
  9424  00371E  C00F  F02D         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1147+1
  9425  003722  C00E  F02C         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1147
  9426                           
  9427                           ; BSR set to: 0
  9428                           ;vscp_firmware.c: 754: uint8_t idx = reg - 0x9E;
  9429  003726  5033               	movf	vscp_writeStdReg@reg,w,c
  9430  003728  0F62               	addlw	98
  9431  00372A  6E31               	movwf	vscp_writeStdReg@idx_1148,c
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;vscp_firmware.c: 755: rv = code >> (((3-idx)*8) & 0xff);
  9435  00372C  5031               	movf	vscp_writeStdReg@idx_1148,w,c
  9436  00372E  D82A               	call	PL54	;call to abstracted procedure
  9437  003730  C02C  F024         	movff	vscp_writeStdReg@code_1147,??_vscp_writeStdReg+1
  9438  003734  C02D  F025         	movff	vscp_writeStdReg@code_1147+1,??_vscp_writeStdReg+2
  9439  003738  C02E  F026         	movff	vscp_writeStdReg@code_1147+2,??_vscp_writeStdReg+3
  9440  00373C  C02F  F027         	movff	vscp_writeStdReg@code_1147+3,??_vscp_writeStdReg+4
  9441  003740  2AE8               	incf	wreg,f,c
  9442  003742  D001               	goto	u9650
  9443  003744                     u9655:
  9444  003744  D829               	call	PL84	;call to abstracted procedure
  9445  003746                     u9650:
  9446  003746  2EE8               	decfsz	wreg,f,c
  9447  003748  D7FD               	goto	u9655
  9448  00374A                     L18:
  9449  00374A  5024               	movf	??_vscp_writeStdReg+1,w,c
  9450  00374C  D7DA               	goto	L17
  9451  00374E                     l11418:
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  9455  00374E  5033               	movf	vscp_writeStdReg@reg,w,c
  9456  003750  0AA2               	xorlw	162
  9457  003752  E18D               	bnz	l11382
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  9461  003754  5022               	movf	vscp_writeStdReg@value,w,c
  9462  003756  0A55               	xorlw	85
  9463  003758  E105               	bnz	l11426
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  9467  00375A  0101               	movlb	1	; () banked
  9468  00375C  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9469  00375E  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9470                           
  9471                           ; BSR set to: 1
  9472                           ;vscp_firmware.c: 760: rv = 0x55;
  9473  003760  0E55               	movlw	85
  9474  003762  D7CF               	goto	L17
  9475  003764                     l11426:
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  9479  003764  5022               	movf	vscp_writeStdReg@value,w,c
  9480  003766  0AAA               	xorlw	170
  9481  003768  E10B               	bnz	l11436
  9482                           
  9483                           ; BSR set to: 0
  9484                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  9485  00376A  0EE8               	movlw	232
  9486  00376C  0101               	movlb	1	; () banked
  9487  00376E  5D1A               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9488  003770  0E03               	movlw	3
  9489  003772  591B               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9490  003774  E204               	bc	l1177
  9491                           
  9492                           ; BSR set to: 1
  9493                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  9494  003776  EC5E  F02A         	call	_vscp_restoreDefaults	;wreg free
  9495                           
  9496                           ; BSR set to: 1
  9497                           ;vscp_firmware.c: 765: rv = 0xaa;
  9498  00377A  0EAA               	movlw	170
  9499  00377C  D7C2               	goto	L17
  9500  00377E                     l1177:
  9501                           
  9502                           ; BSR set to: 1
  9503                           ;vscp_firmware.c: 767: else {
  9504                           ;vscp_firmware.c: 768: rv = 0;
  9505  00377E  6A32               	clrf	vscp_writeStdReg@rv,c
  9506  003780                     l11436:
  9507                           
  9508                           ;vscp_firmware.c: 776: }
  9509                           ;vscp_firmware.c: 778: return rv;
  9510  003780  5032               	movf	vscp_writeStdReg@rv,w,c
  9511  003782  0012               	return	
  9512  003784                     __end_of_vscp_writeStdReg:
  9513                           	opt stack 0
  9514  003784                     PL54:
  9515                           	opt stack 22
  9516  003784  0803               	sublw	3
  9517  003786  6E23               	movwf	??_vscp_writeStdReg& (0+255),c
  9518  003788  90D8               	bcf	status,0,c
  9519  00378A  3623               	rlcf	??_vscp_writeStdReg,f,c
  9520  00378C  90D8               	bcf	status,0,c
  9521  00378E  3623               	rlcf	??_vscp_writeStdReg,f,c
  9522  003790  90D8               	bcf	status,0,c
  9523  003792  3623               	rlcf	??_vscp_writeStdReg,f,c
  9524  003794  5023               	movf	??_vscp_writeStdReg,w,c
  9525  003796  0012               	return	
  9526  003798                     __end_ofPL54:
  9527                           	opt stack 0
  9528  003798                     PL84:
  9529                           	opt stack 22
  9530  003798  90D8               	bcf	status,0,c
  9531  00379A  3227               	rrcf	??_vscp_writeStdReg+4,f,c
  9532  00379C  3226               	rrcf	??_vscp_writeStdReg+3,f,c
  9533  00379E  3225               	rrcf	??_vscp_writeStdReg+2,f,c
  9534  0037A0  3224               	rrcf	??_vscp_writeStdReg+1,f,c
  9535  0037A2  0012               	return	
  9536  0037A4                     __end_ofPL84:
  9537                           	opt stack 0
  9538                           tblptru	equ	0xFF8
  9539                           tblptrh	equ	0xFF7
  9540                           tblptrl	equ	0xFF6
  9541                           tablat	equ	0xFF5
  9542                           prodh	equ	0xFF4
  9543                           prodl	equ	0xFF3
  9544                           intcon	equ	0xFF2
  9545                           postinc0	equ	0xFEE
  9546                           wreg	equ	0xFE8
  9547                           indf1	equ	0xFE7
  9548                           postdec1	equ	0xFE5
  9549                           fsr1h	equ	0xFE2
  9550                           fsr1l	equ	0xFE1
  9551                           indf2	equ	0xFDF
  9552                           postinc2	equ	0xFDE
  9553                           postdec2	equ	0xFDD
  9554                           plusw2	equ	0xFDB
  9555                           fsr2h	equ	0xFDA
  9556                           fsr2l	equ	0xFD9
  9557                           status	equ	0xFD8
  9558                           
  9559 ;; *************** function _vscp_restoreDefaults *****************
  9560 ;; Defined at:
  9561 ;;		line 2830 in file "../main.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;		None
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;		None
  9566 ;; Return value:  Size  Location     Type
  9567 ;;		None               void
  9568 ;; Registers used:
  9569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9570 ;; Tracked objects:
  9571 ;;		On entry : F/1
  9572 ;;		On exit  : F/1
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9575 ;;      Params:         0       0       0       0       0       0       0
  9576 ;;      Locals:         0       0       0       0       0       0       0
  9577 ;;      Temps:          0       0       0       0       0       0       0
  9578 ;;      Totals:         0       0       0       0       0       0       0
  9579 ;;Total ram usage:        0 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    5
  9582 ;; This function calls:
  9583 ;;		_init_app_eeprom
  9584 ;;		_init_app_ram
  9585 ;; This function is called by:
  9586 ;;		_vscp_writeStdReg
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           	psect	text37
  9591  0054BC                     __ptext37:
  9592                           	opt stack 0
  9593  0054BC                     _vscp_restoreDefaults:
  9594                           	opt stack 22
  9595                           
  9596                           ; BSR set to: 1
  9597                           ;main.c: 2831: init_app_eeprom();
  9598                           
  9599                           ;incstack = 0
  9600                           ;incstack = 0
  9601  0054BC  EC9C  F011         	call	_init_app_eeprom	;wreg free
  9602                           
  9603                           ;main.c: 2832: init_app_ram();
  9604  0054C0  EF57  F027         	goto	_init_app_ram	;wreg free
  9605  0054C4                     __end_of_vscp_restoreDefaults:
  9606                           	opt stack 0
  9607                           tblptru	equ	0xFF8
  9608                           tblptrh	equ	0xFF7
  9609                           tblptrl	equ	0xFF6
  9610                           tablat	equ	0xFF5
  9611                           prodh	equ	0xFF4
  9612                           prodl	equ	0xFF3
  9613                           intcon	equ	0xFF2
  9614                           postinc0	equ	0xFEE
  9615                           wreg	equ	0xFE8
  9616                           indf1	equ	0xFE7
  9617                           postdec1	equ	0xFE5
  9618                           fsr1h	equ	0xFE2
  9619                           fsr1l	equ	0xFE1
  9620                           indf2	equ	0xFDF
  9621                           postinc2	equ	0xFDE
  9622                           postdec2	equ	0xFDD
  9623                           plusw2	equ	0xFDB
  9624                           fsr2h	equ	0xFDA
  9625                           fsr2l	equ	0xFD9
  9626                           status	equ	0xFD8
  9627                           
  9628 ;; *************** function _init_app_eeprom *****************
  9629 ;; Defined at:
  9630 ;;		line 1020 in file "../main.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;		None
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;  i               1   16[COMRAM] unsigned char 
  9635 ;; Return value:  Size  Location     Type
  9636 ;;		None               void
  9637 ;; Registers used:
  9638 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9639 ;; Tracked objects:
  9640 ;;		On entry : 0/1
  9641 ;;		On exit  : 0/0
  9642 ;;		Unchanged: 0/0
  9643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9644 ;;      Params:         0       0       0       0       0       0       0
  9645 ;;      Locals:         1       0       0       0       0       0       0
  9646 ;;      Temps:          0       0       0       0       0       0       0
  9647 ;;      Totals:         1       0       0       0       0       0       0
  9648 ;;Total ram usage:        1 bytes
  9649 ;; Hardware stack levels used:    1
  9650 ;; Hardware stack levels required when called:    3
  9651 ;; This function calls:
  9652 ;;		_writeEEPROM
  9653 ;; This function is called by:
  9654 ;;		_main
  9655 ;;		_vscp_restoreDefaults
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           	psect	text38
  9660  002338                     __ptext38:
  9661                           	opt stack 0
  9662  002338                     _init_app_eeprom:
  9663                           	opt stack 23
  9664                           
  9665                           ;main.c: 1021: writeEEPROM(0x43, 0b00000001);
  9666                           
  9667                           ; BSR set to: 1
  9668                           ;incstack = 0
  9669                           ;incstack = 0
  9670  002338  6A0F               	clrf	?_writeEEPROM+1,c
  9671  00233A  0E43               	movlw	67
  9672  00233C  6E0E               	movwf	?_writeEEPROM,c
  9673  00233E  0E01               	movlw	1
  9674  002340  6E10               	movwf	?_writeEEPROM+2,c
  9675  002342  EC0D  F029         	call	_writeEEPROM	;wreg free
  9676                           
  9677                           ;main.c: 1022: writeEEPROM(0x44, 0b00000001);
  9678  002346  6A0F               	clrf	?_writeEEPROM+1,c
  9679  002348  0E44               	movlw	68
  9680  00234A  6E0E               	movwf	?_writeEEPROM,c
  9681  00234C  0E01               	movlw	1
  9682  00234E  6E10               	movwf	?_writeEEPROM+2,c
  9683  002350  EC0D  F029         	call	_writeEEPROM	;wreg free
  9684                           
  9685                           ;main.c: 1023: writeEEPROM(0x45, 0b00000001);
  9686  002354  6A0F               	clrf	?_writeEEPROM+1,c
  9687  002356  0E45               	movlw	69
  9688  002358  6E0E               	movwf	?_writeEEPROM,c
  9689  00235A  0E01               	movlw	1
  9690  00235C  6E10               	movwf	?_writeEEPROM+2,c
  9691  00235E  EC0D  F029         	call	_writeEEPROM	;wreg free
  9692                           
  9693                           ;main.c: 1024: writeEEPROM(0x46, 0b00000001);
  9694  002362  6A0F               	clrf	?_writeEEPROM+1,c
  9695  002364  0E46               	movlw	70
  9696  002366  6E0E               	movwf	?_writeEEPROM,c
  9697  002368  0E01               	movlw	1
  9698  00236A  6E10               	movwf	?_writeEEPROM+2,c
  9699  00236C  EC0D  F029         	call	_writeEEPROM	;wreg free
  9700                           
  9701                           ;main.c: 1025: writeEEPROM(0x47, 0b00000001);
  9702  002370  6A0F               	clrf	?_writeEEPROM+1,c
  9703  002372  0E47               	movlw	71
  9704  002374  6E0E               	movwf	?_writeEEPROM,c
  9705  002376  0E01               	movlw	1
  9706  002378  6E10               	movwf	?_writeEEPROM+2,c
  9707  00237A  EC0D  F029         	call	_writeEEPROM	;wreg free
  9708                           
  9709                           ;main.c: 1026: writeEEPROM(0x48, 0b00000001);
  9710  00237E  6A0F               	clrf	?_writeEEPROM+1,c
  9711  002380  0E48               	movlw	72
  9712  002382  6E0E               	movwf	?_writeEEPROM,c
  9713  002384  0E01               	movlw	1
  9714  002386  6E10               	movwf	?_writeEEPROM+2,c
  9715  002388  EC0D  F029         	call	_writeEEPROM	;wreg free
  9716                           
  9717                           ;main.c: 1028: writeEEPROM(0x49, 30);
  9718  00238C  6A0F               	clrf	?_writeEEPROM+1,c
  9719  00238E  0E49               	movlw	73
  9720  002390  6E0E               	movwf	?_writeEEPROM,c
  9721  002392  0E1E               	movlw	30
  9722  002394  6E10               	movwf	?_writeEEPROM+2,c
  9723  002396  EC0D  F029         	call	_writeEEPROM	;wreg free
  9724                           
  9725                           ;main.c: 1029: writeEEPROM(0x4A, 0);
  9726  00239A  6A0F               	clrf	?_writeEEPROM+1,c
  9727  00239C  0E4A               	movlw	74
  9728  00239E  6E0E               	movwf	?_writeEEPROM,c
  9729  0023A0  0E00               	movlw	0
  9730  0023A2  6A10               	clrf	?_writeEEPROM+2,c
  9731  0023A4  EC0D  F029         	call	_writeEEPROM	;wreg free
  9732                           
  9733                           ;main.c: 1030: writeEEPROM(0x4B, 0);
  9734  0023A8  6A0F               	clrf	?_writeEEPROM+1,c
  9735  0023AA  0E4B               	movlw	75
  9736  0023AC  6E0E               	movwf	?_writeEEPROM,c
  9737  0023AE  0E00               	movlw	0
  9738  0023B0  6A10               	clrf	?_writeEEPROM+2,c
  9739  0023B2  EC0D  F029         	call	_writeEEPROM	;wreg free
  9740                           
  9741                           ;main.c: 1031: writeEEPROM(0x4C, 0);
  9742  0023B6  6A0F               	clrf	?_writeEEPROM+1,c
  9743  0023B8  0E4C               	movlw	76
  9744  0023BA  6E0E               	movwf	?_writeEEPROM,c
  9745  0023BC  0E00               	movlw	0
  9746  0023BE  6A10               	clrf	?_writeEEPROM+2,c
  9747  0023C0  EC0D  F029         	call	_writeEEPROM	;wreg free
  9748                           
  9749                           ;main.c: 1032: writeEEPROM(0x4D, 0);
  9750  0023C4  6A0F               	clrf	?_writeEEPROM+1,c
  9751  0023C6  0E4D               	movlw	77
  9752  0023C8  6E0E               	movwf	?_writeEEPROM,c
  9753  0023CA  0E00               	movlw	0
  9754  0023CC  6A10               	clrf	?_writeEEPROM+2,c
  9755  0023CE  EC0D  F029         	call	_writeEEPROM	;wreg free
  9756                           
  9757                           ;main.c: 1033: writeEEPROM(0x4E, 0);
  9758  0023D2  6A0F               	clrf	?_writeEEPROM+1,c
  9759  0023D4  0E4E               	movlw	78
  9760  0023D6  6E0E               	movwf	?_writeEEPROM,c
  9761  0023D8  0E00               	movlw	0
  9762  0023DA  6A10               	clrf	?_writeEEPROM+2,c
  9763  0023DC  EC0D  F029         	call	_writeEEPROM	;wreg free
  9764                           
  9765                           ;main.c: 1037: writeEEPROM(0x4F, 0x0F);
  9766  0023E0  6A0F               	clrf	?_writeEEPROM+1,c
  9767  0023E2  0E4F               	movlw	79
  9768  0023E4  6E0E               	movwf	?_writeEEPROM,c
  9769  0023E6  0E0F               	movlw	15
  9770  0023E8  6E10               	movwf	?_writeEEPROM+2,c
  9771  0023EA  EC0D  F029         	call	_writeEEPROM	;wreg free
  9772                           
  9773                           ;main.c: 1038: writeEEPROM(0x50, 0x68);
  9774  0023EE  6A0F               	clrf	?_writeEEPROM+1,c
  9775  0023F0  0E50               	movlw	80
  9776  0023F2  6E0E               	movwf	?_writeEEPROM,c
  9777  0023F4  0E68               	movlw	104
  9778  0023F6  6E10               	movwf	?_writeEEPROM+2,c
  9779  0023F8  EC0D  F029         	call	_writeEEPROM	;wreg free
  9780                           
  9781                           ;main.c: 1040: writeEEPROM(0x51, 0x0D);
  9782  0023FC  6A0F               	clrf	?_writeEEPROM+1,c
  9783  0023FE  0E51               	movlw	81
  9784  002400  6E0E               	movwf	?_writeEEPROM,c
  9785  002402  0E0D               	movlw	13
  9786  002404  6E10               	movwf	?_writeEEPROM+2,c
  9787  002406  EC0D  F029         	call	_writeEEPROM	;wreg free
  9788                           
  9789                           ;main.c: 1041: writeEEPROM(0x52, 0x7F);
  9790  00240A  6A0F               	clrf	?_writeEEPROM+1,c
  9791  00240C  0E52               	movlw	82
  9792  00240E  6E0E               	movwf	?_writeEEPROM,c
  9793  002410  0E7F               	movlw	127
  9794  002412  6E10               	movwf	?_writeEEPROM+2,c
  9795  002414  EC0D  F029         	call	_writeEEPROM	;wreg free
  9796                           
  9797                           ;main.c: 1043: writeEEPROM(0x53, 0x0D);
  9798  002418  6A0F               	clrf	?_writeEEPROM+1,c
  9799  00241A  0E53               	movlw	83
  9800  00241C  6E0E               	movwf	?_writeEEPROM,c
  9801  00241E  0E0D               	movlw	13
  9802  002420  6E10               	movwf	?_writeEEPROM+2,c
  9803  002422  EC0D  F029         	call	_writeEEPROM	;wreg free
  9804                           
  9805                           ;main.c: 1044: writeEEPROM(0x54, 0x7F);
  9806  002426  6A0F               	clrf	?_writeEEPROM+1,c
  9807  002428  0E54               	movlw	84
  9808  00242A  6E0E               	movwf	?_writeEEPROM,c
  9809  00242C  0E7F               	movlw	127
  9810  00242E  6E10               	movwf	?_writeEEPROM+2,c
  9811  002430  EC0D  F029         	call	_writeEEPROM	;wreg free
  9812                           
  9813                           ;main.c: 1046: writeEEPROM(0x55, 0x0D);
  9814  002434  6A0F               	clrf	?_writeEEPROM+1,c
  9815  002436  0E55               	movlw	85
  9816  002438  6E0E               	movwf	?_writeEEPROM,c
  9817  00243A  0E0D               	movlw	13
  9818  00243C  6E10               	movwf	?_writeEEPROM+2,c
  9819  00243E  EC0D  F029         	call	_writeEEPROM	;wreg free
  9820                           
  9821                           ;main.c: 1047: writeEEPROM(0x56, 0x7F);
  9822  002442  6A0F               	clrf	?_writeEEPROM+1,c
  9823  002444  0E56               	movlw	86
  9824  002446  6E0E               	movwf	?_writeEEPROM,c
  9825  002448  0E7F               	movlw	127
  9826  00244A  6E10               	movwf	?_writeEEPROM+2,c
  9827  00244C  EC0D  F029         	call	_writeEEPROM	;wreg free
  9828                           
  9829                           ;main.c: 1049: writeEEPROM(0x57, 0x0D);
  9830  002450  6A0F               	clrf	?_writeEEPROM+1,c
  9831  002452  0E57               	movlw	87
  9832  002454  6E0E               	movwf	?_writeEEPROM,c
  9833  002456  0E0D               	movlw	13
  9834  002458  6E10               	movwf	?_writeEEPROM+2,c
  9835  00245A  EC0D  F029         	call	_writeEEPROM	;wreg free
  9836                           
  9837                           ;main.c: 1050: writeEEPROM(0x58, 0x7F);
  9838  00245E  6A0F               	clrf	?_writeEEPROM+1,c
  9839  002460  0E58               	movlw	88
  9840  002462  6E0E               	movwf	?_writeEEPROM,c
  9841  002464  0E7F               	movlw	127
  9842  002466  6E10               	movwf	?_writeEEPROM+2,c
  9843  002468  EC0D  F029         	call	_writeEEPROM	;wreg free
  9844                           
  9845                           ;main.c: 1052: writeEEPROM(0x59, 0x0D);
  9846  00246C  6A0F               	clrf	?_writeEEPROM+1,c
  9847  00246E  0E59               	movlw	89
  9848  002470  6E0E               	movwf	?_writeEEPROM,c
  9849  002472  0E0D               	movlw	13
  9850  002474  6E10               	movwf	?_writeEEPROM+2,c
  9851  002476  EC0D  F029         	call	_writeEEPROM	;wreg free
  9852                           
  9853                           ;main.c: 1053: writeEEPROM(0x5A, 0x7F);
  9854  00247A  6A0F               	clrf	?_writeEEPROM+1,c
  9855  00247C  0E5A               	movlw	90
  9856  00247E  6E0E               	movwf	?_writeEEPROM,c
  9857  002480  0E7F               	movlw	127
  9858  002482  6E10               	movwf	?_writeEEPROM+2,c
  9859  002484  EC0D  F029         	call	_writeEEPROM	;wreg free
  9860                           
  9861                           ;main.c: 1057: writeEEPROM(0x5B, 0x80);
  9862  002488  6A0F               	clrf	?_writeEEPROM+1,c
  9863  00248A  0E5B               	movlw	91
  9864  00248C  6E0E               	movwf	?_writeEEPROM,c
  9865  00248E  0E80               	movlw	128
  9866  002490  6E10               	movwf	?_writeEEPROM+2,c
  9867  002492  EC0D  F029         	call	_writeEEPROM	;wreg free
  9868                           
  9869                           ;main.c: 1058: writeEEPROM(0x5C, 0xff);
  9870  002496  6A0F               	clrf	?_writeEEPROM+1,c
  9871  002498  0E5C               	movlw	92
  9872  00249A  6E0E               	movwf	?_writeEEPROM,c
  9873  00249C  0EFF               	movlw	255
  9874  00249E  6810               	setf	?_writeEEPROM+2,c
  9875  0024A0  EC0D  F029         	call	_writeEEPROM	;wreg free
  9876                           
  9877                           ;main.c: 1060: writeEEPROM(0x5D, 0x80);
  9878  0024A4  6A0F               	clrf	?_writeEEPROM+1,c
  9879  0024A6  0E5D               	movlw	93
  9880  0024A8  6E0E               	movwf	?_writeEEPROM,c
  9881  0024AA  0E80               	movlw	128
  9882  0024AC  6E10               	movwf	?_writeEEPROM+2,c
  9883  0024AE  EC0D  F029         	call	_writeEEPROM	;wreg free
  9884                           
  9885                           ;main.c: 1061: writeEEPROM(0x5E, 0xff);
  9886  0024B2  6A0F               	clrf	?_writeEEPROM+1,c
  9887  0024B4  0E5E               	movlw	94
  9888  0024B6  6E0E               	movwf	?_writeEEPROM,c
  9889  0024B8  0EFF               	movlw	255
  9890  0024BA  6810               	setf	?_writeEEPROM+2,c
  9891  0024BC  EC0D  F029         	call	_writeEEPROM	;wreg free
  9892                           
  9893                           ;main.c: 1063: writeEEPROM(0x5F, 0x80);
  9894  0024C0  6A0F               	clrf	?_writeEEPROM+1,c
  9895  0024C2  0E5F               	movlw	95
  9896  0024C4  6E0E               	movwf	?_writeEEPROM,c
  9897  0024C6  0E80               	movlw	128
  9898  0024C8  6E10               	movwf	?_writeEEPROM+2,c
  9899  0024CA  EC0D  F029         	call	_writeEEPROM	;wreg free
  9900                           
  9901                           ;main.c: 1064: writeEEPROM(0x60, 0xff);
  9902  0024CE  6A0F               	clrf	?_writeEEPROM+1,c
  9903  0024D0  0E60               	movlw	96
  9904  0024D2  6E0E               	movwf	?_writeEEPROM,c
  9905  0024D4  0EFF               	movlw	255
  9906  0024D6  6810               	setf	?_writeEEPROM+2,c
  9907  0024D8  EC0D  F029         	call	_writeEEPROM	;wreg free
  9908                           
  9909                           ;main.c: 1066: writeEEPROM(0x61, 0x80);
  9910  0024DC  6A0F               	clrf	?_writeEEPROM+1,c
  9911  0024DE  0E61               	movlw	97
  9912  0024E0  6E0E               	movwf	?_writeEEPROM,c
  9913  0024E2  0E80               	movlw	128
  9914  0024E4  6E10               	movwf	?_writeEEPROM+2,c
  9915  0024E6  EC0D  F029         	call	_writeEEPROM	;wreg free
  9916                           
  9917                           ;main.c: 1067: writeEEPROM(0x62, 0xff);
  9918  0024EA  6A0F               	clrf	?_writeEEPROM+1,c
  9919  0024EC  0E62               	movlw	98
  9920  0024EE  6E0E               	movwf	?_writeEEPROM,c
  9921  0024F0  0EFF               	movlw	255
  9922  0024F2  6810               	setf	?_writeEEPROM+2,c
  9923  0024F4  EC0D  F029         	call	_writeEEPROM	;wreg free
  9924                           
  9925                           ;main.c: 1069: writeEEPROM(0x63, 0x80);
  9926  0024F8  6A0F               	clrf	?_writeEEPROM+1,c
  9927  0024FA  0E63               	movlw	99
  9928  0024FC  6E0E               	movwf	?_writeEEPROM,c
  9929  0024FE  0E80               	movlw	128
  9930  002500  6E10               	movwf	?_writeEEPROM+2,c
  9931  002502  EC0D  F029         	call	_writeEEPROM	;wreg free
  9932                           
  9933                           ;main.c: 1070: writeEEPROM(0x64, 0xff);
  9934  002506  6A0F               	clrf	?_writeEEPROM+1,c
  9935  002508  0E64               	movlw	100
  9936  00250A  6E0E               	movwf	?_writeEEPROM,c
  9937  00250C  0EFF               	movlw	255
  9938  00250E  6810               	setf	?_writeEEPROM+2,c
  9939  002510  EC0D  F029         	call	_writeEEPROM	;wreg free
  9940                           
  9941                           ;main.c: 1072: writeEEPROM(0x65, 0x80);
  9942  002514  6A0F               	clrf	?_writeEEPROM+1,c
  9943  002516  0E65               	movlw	101
  9944  002518  6E0E               	movwf	?_writeEEPROM,c
  9945  00251A  0E80               	movlw	128
  9946  00251C  6E10               	movwf	?_writeEEPROM+2,c
  9947  00251E  EC0D  F029         	call	_writeEEPROM	;wreg free
  9948                           
  9949                           ;main.c: 1073: writeEEPROM(0x66, 0xff);
  9950  002522  6A0F               	clrf	?_writeEEPROM+1,c
  9951  002524  0E66               	movlw	102
  9952  002526  6E0E               	movwf	?_writeEEPROM,c
  9953  002528  0EFF               	movlw	255
  9954  00252A  6810               	setf	?_writeEEPROM+2,c
  9955  00252C  EC0D  F029         	call	_writeEEPROM	;wreg free
  9956                           
  9957                           ;main.c: 1077: writeEEPROM(0x67, 0x7f);
  9958  002530  6A0F               	clrf	?_writeEEPROM+1,c
  9959  002532  0E67               	movlw	103
  9960  002534  6E0E               	movwf	?_writeEEPROM,c
  9961  002536  0E7F               	movlw	127
  9962  002538  6E10               	movwf	?_writeEEPROM+2,c
  9963  00253A  EC0D  F029         	call	_writeEEPROM	;wreg free
  9964                           
  9965                           ;main.c: 1078: writeEEPROM(0x68, 0xff);
  9966  00253E  6A0F               	clrf	?_writeEEPROM+1,c
  9967  002540  0E68               	movlw	104
  9968  002542  6E0E               	movwf	?_writeEEPROM,c
  9969  002544  0EFF               	movlw	255
  9970  002546  6810               	setf	?_writeEEPROM+2,c
  9971  002548  EC0D  F029         	call	_writeEEPROM	;wreg free
  9972                           
  9973                           ;main.c: 1080: writeEEPROM(0x69, 0x7f);
  9974  00254C  6A0F               	clrf	?_writeEEPROM+1,c
  9975  00254E  0E69               	movlw	105
  9976  002550  6E0E               	movwf	?_writeEEPROM,c
  9977  002552  0E7F               	movlw	127
  9978  002554  6E10               	movwf	?_writeEEPROM+2,c
  9979  002556  EC0D  F029         	call	_writeEEPROM	;wreg free
  9980                           
  9981                           ;main.c: 1081: writeEEPROM(0x6A, 0xff);
  9982  00255A  6A0F               	clrf	?_writeEEPROM+1,c
  9983  00255C  0E6A               	movlw	106
  9984  00255E  6E0E               	movwf	?_writeEEPROM,c
  9985  002560  0EFF               	movlw	255
  9986  002562  6810               	setf	?_writeEEPROM+2,c
  9987  002564  EC0D  F029         	call	_writeEEPROM	;wreg free
  9988                           
  9989                           ;main.c: 1083: writeEEPROM(0x6B, 0x7f);
  9990  002568  6A0F               	clrf	?_writeEEPROM+1,c
  9991  00256A  0E6B               	movlw	107
  9992  00256C  6E0E               	movwf	?_writeEEPROM,c
  9993  00256E  0E7F               	movlw	127
  9994  002570  6E10               	movwf	?_writeEEPROM+2,c
  9995  002572  EC0D  F029         	call	_writeEEPROM	;wreg free
  9996                           
  9997                           ;main.c: 1084: writeEEPROM(0x6C, 0xff);
  9998  002576  6A0F               	clrf	?_writeEEPROM+1,c
  9999  002578  0E6C               	movlw	108
 10000  00257A  6E0E               	movwf	?_writeEEPROM,c
 10001  00257C  0EFF               	movlw	255
 10002  00257E  6810               	setf	?_writeEEPROM+2,c
 10003  002580  EC0D  F029         	call	_writeEEPROM	;wreg free
 10004                           
 10005                           ;main.c: 1086: writeEEPROM(0x6D, 0x7f);
 10006  002584  6A0F               	clrf	?_writeEEPROM+1,c
 10007  002586  0E6D               	movlw	109
 10008  002588  6E0E               	movwf	?_writeEEPROM,c
 10009  00258A  0E7F               	movlw	127
 10010  00258C  6E10               	movwf	?_writeEEPROM+2,c
 10011  00258E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10012                           
 10013                           ;main.c: 1087: writeEEPROM(0x6E, 0xff);
 10014  002592  6A0F               	clrf	?_writeEEPROM+1,c
 10015  002594  0E6E               	movlw	110
 10016  002596  6E0E               	movwf	?_writeEEPROM,c
 10017  002598  0EFF               	movlw	255
 10018  00259A  6810               	setf	?_writeEEPROM+2,c
 10019  00259C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10020                           
 10021                           ;main.c: 1089: writeEEPROM(0x6F, 0x7f);
 10022  0025A0  6A0F               	clrf	?_writeEEPROM+1,c
 10023  0025A2  0E6F               	movlw	111
 10024  0025A4  6E0E               	movwf	?_writeEEPROM,c
 10025  0025A6  0E7F               	movlw	127
 10026  0025A8  6E10               	movwf	?_writeEEPROM+2,c
 10027  0025AA  EC0D  F029         	call	_writeEEPROM	;wreg free
 10028                           
 10029                           ;main.c: 1090: writeEEPROM(0x70, 0xff);
 10030  0025AE  6A0F               	clrf	?_writeEEPROM+1,c
 10031  0025B0  0E70               	movlw	112
 10032  0025B2  6E0E               	movwf	?_writeEEPROM,c
 10033  0025B4  0EFF               	movlw	255
 10034  0025B6  6810               	setf	?_writeEEPROM+2,c
 10035  0025B8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10036                           
 10037                           ;main.c: 1092: writeEEPROM(0x71, 0x7f);
 10038  0025BC  6A0F               	clrf	?_writeEEPROM+1,c
 10039  0025BE  0E71               	movlw	113
 10040  0025C0  6E0E               	movwf	?_writeEEPROM,c
 10041  0025C2  0E7F               	movlw	127
 10042  0025C4  6E10               	movwf	?_writeEEPROM+2,c
 10043  0025C6  EC0D  F029         	call	_writeEEPROM	;wreg free
 10044                           
 10045                           ;main.c: 1093: writeEEPROM(0x72, 0xff);
 10046  0025CA  6A0F               	clrf	?_writeEEPROM+1,c
 10047  0025CC  0E72               	movlw	114
 10048  0025CE  6E0E               	movwf	?_writeEEPROM,c
 10049  0025D0  0EFF               	movlw	255
 10050  0025D2  6810               	setf	?_writeEEPROM+2,c
 10051  0025D4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10052                           
 10053                           ;main.c: 1097: writeEEPROM(0x73, 0);
 10054  0025D8  6A0F               	clrf	?_writeEEPROM+1,c
 10055  0025DA  0E73               	movlw	115
 10056  0025DC  6E0E               	movwf	?_writeEEPROM,c
 10057  0025DE  0E00               	movlw	0
 10058  0025E0  6A10               	clrf	?_writeEEPROM+2,c
 10059  0025E2  EC0D  F029         	call	_writeEEPROM	;wreg free
 10060                           
 10061                           ;main.c: 1098: writeEEPROM(0x74, 0);
 10062  0025E6  6A0F               	clrf	?_writeEEPROM+1,c
 10063  0025E8  0E74               	movlw	116
 10064  0025EA  6E0E               	movwf	?_writeEEPROM,c
 10065  0025EC  0E00               	movlw	0
 10066  0025EE  6A10               	clrf	?_writeEEPROM+2,c
 10067  0025F0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10068                           
 10069                           ;main.c: 1100: writeEEPROM(0x75, 0);
 10070  0025F4  6A0F               	clrf	?_writeEEPROM+1,c
 10071  0025F6  0E75               	movlw	117
 10072  0025F8  6E0E               	movwf	?_writeEEPROM,c
 10073  0025FA  0E00               	movlw	0
 10074  0025FC  6A10               	clrf	?_writeEEPROM+2,c
 10075  0025FE  EC0D  F029         	call	_writeEEPROM	;wreg free
 10076                           
 10077                           ;main.c: 1101: writeEEPROM(0x76, 0);
 10078  002602  6A0F               	clrf	?_writeEEPROM+1,c
 10079  002604  0E76               	movlw	118
 10080  002606  6E0E               	movwf	?_writeEEPROM,c
 10081  002608  0E00               	movlw	0
 10082  00260A  6A10               	clrf	?_writeEEPROM+2,c
 10083  00260C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10084                           
 10085                           ;main.c: 1103: writeEEPROM(0x77, 0);
 10086  002610  6A0F               	clrf	?_writeEEPROM+1,c
 10087  002612  0E77               	movlw	119
 10088  002614  6E0E               	movwf	?_writeEEPROM,c
 10089  002616  0E00               	movlw	0
 10090  002618  6A10               	clrf	?_writeEEPROM+2,c
 10091  00261A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10092                           
 10093                           ;main.c: 1104: writeEEPROM(0x78, 0);
 10094  00261E  6A0F               	clrf	?_writeEEPROM+1,c
 10095  002620  0E78               	movlw	120
 10096  002622  6E0E               	movwf	?_writeEEPROM,c
 10097  002624  0E00               	movlw	0
 10098  002626  6A10               	clrf	?_writeEEPROM+2,c
 10099  002628  EC0D  F029         	call	_writeEEPROM	;wreg free
 10100                           
 10101                           ;main.c: 1106: writeEEPROM(0x79, 0);
 10102  00262C  6A0F               	clrf	?_writeEEPROM+1,c
 10103  00262E  0E79               	movlw	121
 10104  002630  6E0E               	movwf	?_writeEEPROM,c
 10105  002632  0E00               	movlw	0
 10106  002634  6A10               	clrf	?_writeEEPROM+2,c
 10107  002636  EC0D  F029         	call	_writeEEPROM	;wreg free
 10108                           
 10109                           ;main.c: 1107: writeEEPROM(0x7A, 0);
 10110  00263A  6A0F               	clrf	?_writeEEPROM+1,c
 10111  00263C  0E7A               	movlw	122
 10112  00263E  6E0E               	movwf	?_writeEEPROM,c
 10113  002640  0E00               	movlw	0
 10114  002642  6A10               	clrf	?_writeEEPROM+2,c
 10115  002644  EC0D  F029         	call	_writeEEPROM	;wreg free
 10116                           
 10117                           ;main.c: 1109: writeEEPROM(0x7B, 0);
 10118  002648  6A0F               	clrf	?_writeEEPROM+1,c
 10119  00264A  0E7B               	movlw	123
 10120  00264C  6E0E               	movwf	?_writeEEPROM,c
 10121  00264E  0E00               	movlw	0
 10122  002650  6A10               	clrf	?_writeEEPROM+2,c
 10123  002652  EC0D  F029         	call	_writeEEPROM	;wreg free
 10124                           
 10125                           ;main.c: 1110: writeEEPROM(0x7C, 0);
 10126  002656  6A0F               	clrf	?_writeEEPROM+1,c
 10127  002658  0E7C               	movlw	124
 10128  00265A  6E0E               	movwf	?_writeEEPROM,c
 10129  00265C  0E00               	movlw	0
 10130  00265E  6A10               	clrf	?_writeEEPROM+2,c
 10131  002660  EC0D  F029         	call	_writeEEPROM	;wreg free
 10132                           
 10133                           ;main.c: 1112: writeEEPROM(0x7D, 0);
 10134  002664  6A0F               	clrf	?_writeEEPROM+1,c
 10135  002666  0E7D               	movlw	125
 10136  002668  6E0E               	movwf	?_writeEEPROM,c
 10137  00266A  0E00               	movlw	0
 10138  00266C  6A10               	clrf	?_writeEEPROM+2,c
 10139  00266E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10140                           
 10141                           ;main.c: 1113: writeEEPROM(0x7E, 0);
 10142  002672  6A0F               	clrf	?_writeEEPROM+1,c
 10143  002674  0E7E               	movlw	126
 10144  002676  6E0E               	movwf	?_writeEEPROM,c
 10145  002678  0E00               	movlw	0
 10146  00267A  6A10               	clrf	?_writeEEPROM+2,c
 10147  00267C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10148                           
 10149                           ;main.c: 1117: writeEEPROM(0x7F, 0x7f);
 10150  002680  6A0F               	clrf	?_writeEEPROM+1,c
 10151  002682  0E7F               	movlw	127
 10152  002684  6E0E               	movwf	?_writeEEPROM,c
 10153  002686  6E10               	movwf	?_writeEEPROM+2,c
 10154  002688  EC0D  F029         	call	_writeEEPROM	;wreg free
 10155                           
 10156                           ;main.c: 1118: writeEEPROM(0x80, 0xff);
 10157  00268C  6A0F               	clrf	?_writeEEPROM+1,c
 10158  00268E  0E80               	movlw	128
 10159  002690  6E0E               	movwf	?_writeEEPROM,c
 10160  002692  0EFF               	movlw	255
 10161  002694  6810               	setf	?_writeEEPROM+2,c
 10162  002696  EC0D  F029         	call	_writeEEPROM	;wreg free
 10163                           
 10164                           ;main.c: 1120: writeEEPROM(0x81, 0x7f);
 10165  00269A  6A0F               	clrf	?_writeEEPROM+1,c
 10166  00269C  0E81               	movlw	129
 10167  00269E  6E0E               	movwf	?_writeEEPROM,c
 10168  0026A0  0E7F               	movlw	127
 10169  0026A2  6E10               	movwf	?_writeEEPROM+2,c
 10170  0026A4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10171                           
 10172                           ;main.c: 1121: writeEEPROM(0x82, 0xff);
 10173  0026A8  6A0F               	clrf	?_writeEEPROM+1,c
 10174  0026AA  0E82               	movlw	130
 10175  0026AC  6E0E               	movwf	?_writeEEPROM,c
 10176  0026AE  0EFF               	movlw	255
 10177  0026B0  6810               	setf	?_writeEEPROM+2,c
 10178  0026B2  EC0D  F029         	call	_writeEEPROM	;wreg free
 10179                           
 10180                           ;main.c: 1123: writeEEPROM(0x83, 0x7f);
 10181  0026B6  6A0F               	clrf	?_writeEEPROM+1,c
 10182  0026B8  0E83               	movlw	131
 10183  0026BA  6E0E               	movwf	?_writeEEPROM,c
 10184  0026BC  0E7F               	movlw	127
 10185  0026BE  6E10               	movwf	?_writeEEPROM+2,c
 10186  0026C0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10187                           
 10188                           ;main.c: 1124: writeEEPROM(0x84, 0xff);
 10189  0026C4  6A0F               	clrf	?_writeEEPROM+1,c
 10190  0026C6  0E84               	movlw	132
 10191  0026C8  6E0E               	movwf	?_writeEEPROM,c
 10192  0026CA  0EFF               	movlw	255
 10193  0026CC  6810               	setf	?_writeEEPROM+2,c
 10194  0026CE  EC0D  F029         	call	_writeEEPROM	;wreg free
 10195                           
 10196                           ;main.c: 1126: writeEEPROM(0x85, 0x7f);
 10197  0026D2  6A0F               	clrf	?_writeEEPROM+1,c
 10198  0026D4  0E85               	movlw	133
 10199  0026D6  6E0E               	movwf	?_writeEEPROM,c
 10200  0026D8  0E7F               	movlw	127
 10201  0026DA  6E10               	movwf	?_writeEEPROM+2,c
 10202  0026DC  EC0D  F029         	call	_writeEEPROM	;wreg free
 10203                           
 10204                           ;main.c: 1127: writeEEPROM(0x86, 0xff);
 10205  0026E0  6A0F               	clrf	?_writeEEPROM+1,c
 10206  0026E2  0E86               	movlw	134
 10207  0026E4  6E0E               	movwf	?_writeEEPROM,c
 10208  0026E6  0EFF               	movlw	255
 10209  0026E8  6810               	setf	?_writeEEPROM+2,c
 10210  0026EA  EC0D  F029         	call	_writeEEPROM	;wreg free
 10211                           
 10212                           ;main.c: 1129: writeEEPROM(0x87, 0x7f);
 10213  0026EE  6A0F               	clrf	?_writeEEPROM+1,c
 10214  0026F0  0E87               	movlw	135
 10215  0026F2  6E0E               	movwf	?_writeEEPROM,c
 10216  0026F4  0E7F               	movlw	127
 10217  0026F6  6E10               	movwf	?_writeEEPROM+2,c
 10218  0026F8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10219                           
 10220                           ;main.c: 1130: writeEEPROM(0x88, 0xff);
 10221  0026FC  6A0F               	clrf	?_writeEEPROM+1,c
 10222  0026FE  0E88               	movlw	136
 10223  002700  6E0E               	movwf	?_writeEEPROM,c
 10224  002702  0EFF               	movlw	255
 10225  002704  6810               	setf	?_writeEEPROM+2,c
 10226  002706  EC0D  F029         	call	_writeEEPROM	;wreg free
 10227                           
 10228                           ;main.c: 1132: writeEEPROM(0x89, 0x7f);
 10229  00270A  6A0F               	clrf	?_writeEEPROM+1,c
 10230  00270C  0E89               	movlw	137
 10231  00270E  6E0E               	movwf	?_writeEEPROM,c
 10232  002710  0E7F               	movlw	127
 10233  002712  6E10               	movwf	?_writeEEPROM+2,c
 10234  002714  EC0D  F029         	call	_writeEEPROM	;wreg free
 10235                           
 10236                           ;main.c: 1133: writeEEPROM(0x8A, 0xff);
 10237  002718  6A0F               	clrf	?_writeEEPROM+1,c
 10238  00271A  0E8A               	movlw	138
 10239  00271C  6E0E               	movwf	?_writeEEPROM,c
 10240  00271E  0EFF               	movlw	255
 10241  002720  6810               	setf	?_writeEEPROM+2,c
 10242  002722  EC0D  F029         	call	_writeEEPROM	;wreg free
 10243                           
 10244                           ;main.c: 1137: writeEEPROM(0x8B, 0x80);
 10245  002726  6A0F               	clrf	?_writeEEPROM+1,c
 10246  002728  0E8B               	movlw	139
 10247  00272A  6E0E               	movwf	?_writeEEPROM,c
 10248  00272C  0E80               	movlw	128
 10249  00272E  6E10               	movwf	?_writeEEPROM+2,c
 10250  002730  EC0D  F029         	call	_writeEEPROM	;wreg free
 10251                           
 10252                           ;main.c: 1138: writeEEPROM(0x8C, 0x00);
 10253  002734  6A0F               	clrf	?_writeEEPROM+1,c
 10254  002736  0E8C               	movlw	140
 10255  002738  6E0E               	movwf	?_writeEEPROM,c
 10256  00273A  0E00               	movlw	0
 10257  00273C  6A10               	clrf	?_writeEEPROM+2,c
 10258  00273E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10259                           
 10260                           ;main.c: 1140: writeEEPROM(0x8D, 0x80);
 10261  002742  6A0F               	clrf	?_writeEEPROM+1,c
 10262  002744  0E8D               	movlw	141
 10263  002746  6E0E               	movwf	?_writeEEPROM,c
 10264  002748  0E80               	movlw	128
 10265  00274A  6E10               	movwf	?_writeEEPROM+2,c
 10266  00274C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10267                           
 10268                           ;main.c: 1141: writeEEPROM(0x8E, 0x00);
 10269  002750  6A0F               	clrf	?_writeEEPROM+1,c
 10270  002752  0E8E               	movlw	142
 10271  002754  6E0E               	movwf	?_writeEEPROM,c
 10272  002756  0E00               	movlw	0
 10273  002758  6A10               	clrf	?_writeEEPROM+2,c
 10274  00275A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10275                           
 10276                           ;main.c: 1143: writeEEPROM(0x8F, 0x80);
 10277  00275E  6A0F               	clrf	?_writeEEPROM+1,c
 10278  002760  0E8F               	movlw	143
 10279  002762  6E0E               	movwf	?_writeEEPROM,c
 10280  002764  0E80               	movlw	128
 10281  002766  6E10               	movwf	?_writeEEPROM+2,c
 10282  002768  EC0D  F029         	call	_writeEEPROM	;wreg free
 10283                           
 10284                           ;main.c: 1144: writeEEPROM(0x90, 0x00);
 10285  00276C  6A0F               	clrf	?_writeEEPROM+1,c
 10286  00276E  0E90               	movlw	144
 10287  002770  6E0E               	movwf	?_writeEEPROM,c
 10288  002772  0E00               	movlw	0
 10289  002774  6A10               	clrf	?_writeEEPROM+2,c
 10290  002776  EC0D  F029         	call	_writeEEPROM	;wreg free
 10291                           
 10292                           ;main.c: 1146: writeEEPROM(0x91, 0x80);
 10293  00277A  6A0F               	clrf	?_writeEEPROM+1,c
 10294  00277C  0E91               	movlw	145
 10295  00277E  6E0E               	movwf	?_writeEEPROM,c
 10296  002780  0E80               	movlw	128
 10297  002782  6E10               	movwf	?_writeEEPROM+2,c
 10298  002784  EC0D  F029         	call	_writeEEPROM	;wreg free
 10299                           
 10300                           ;main.c: 1147: writeEEPROM(0x92, 0x00);
 10301  002788  6A0F               	clrf	?_writeEEPROM+1,c
 10302  00278A  0E92               	movlw	146
 10303  00278C  6E0E               	movwf	?_writeEEPROM,c
 10304  00278E  0E00               	movlw	0
 10305  002790  6A10               	clrf	?_writeEEPROM+2,c
 10306  002792  EC0D  F029         	call	_writeEEPROM	;wreg free
 10307                           
 10308                           ;main.c: 1149: writeEEPROM(0x93, 0x80);
 10309  002796  6A0F               	clrf	?_writeEEPROM+1,c
 10310  002798  0E93               	movlw	147
 10311  00279A  6E0E               	movwf	?_writeEEPROM,c
 10312  00279C  0E80               	movlw	128
 10313  00279E  6E10               	movwf	?_writeEEPROM+2,c
 10314  0027A0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10315                           
 10316                           ;main.c: 1150: writeEEPROM(0x94, 0x00);
 10317  0027A4  6A0F               	clrf	?_writeEEPROM+1,c
 10318  0027A6  0E94               	movlw	148
 10319  0027A8  6E0E               	movwf	?_writeEEPROM,c
 10320  0027AA  0E00               	movlw	0
 10321  0027AC  6A10               	clrf	?_writeEEPROM+2,c
 10322  0027AE  EC0D  F029         	call	_writeEEPROM	;wreg free
 10323                           
 10324                           ;main.c: 1152: writeEEPROM(0x95, 0x80);
 10325  0027B2  6A0F               	clrf	?_writeEEPROM+1,c
 10326  0027B4  0E95               	movlw	149
 10327  0027B6  6E0E               	movwf	?_writeEEPROM,c
 10328  0027B8  0E80               	movlw	128
 10329  0027BA  6E10               	movwf	?_writeEEPROM+2,c
 10330  0027BC  EC0D  F029         	call	_writeEEPROM	;wreg free
 10331                           
 10332                           ;main.c: 1153: writeEEPROM(0x96, 0x00);
 10333  0027C0  6A0F               	clrf	?_writeEEPROM+1,c
 10334  0027C2  0E96               	movlw	150
 10335  0027C4  6E0E               	movwf	?_writeEEPROM,c
 10336  0027C6  0E00               	movlw	0
 10337  0027C8  6A10               	clrf	?_writeEEPROM+2,c
 10338  0027CA  EC0D  F029         	call	_writeEEPROM	;wreg free
 10339                           
 10340                           ;main.c: 1157: writeEEPROM(0x97, 2);
 10341  0027CE  6A0F               	clrf	?_writeEEPROM+1,c
 10342  0027D0  0E97               	movlw	151
 10343  0027D2  6E0E               	movwf	?_writeEEPROM,c
 10344  0027D4  0E02               	movlw	2
 10345  0027D6  6E10               	movwf	?_writeEEPROM+2,c
 10346  0027D8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10347                           
 10348                           ;main.c: 1158: writeEEPROM(0x98, 2);
 10349  0027DC  6A0F               	clrf	?_writeEEPROM+1,c
 10350  0027DE  0E98               	movlw	152
 10351  0027E0  6E0E               	movwf	?_writeEEPROM,c
 10352  0027E2  0E02               	movlw	2
 10353  0027E4  6E10               	movwf	?_writeEEPROM+2,c
 10354  0027E6  EC0D  F029         	call	_writeEEPROM	;wreg free
 10355                           
 10356                           ;main.c: 1159: writeEEPROM(0x99, 2);
 10357  0027EA  6A0F               	clrf	?_writeEEPROM+1,c
 10358  0027EC  0E99               	movlw	153
 10359  0027EE  6E0E               	movwf	?_writeEEPROM,c
 10360  0027F0  0E02               	movlw	2
 10361  0027F2  6E10               	movwf	?_writeEEPROM+2,c
 10362  0027F4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10363                           
 10364                           ;main.c: 1160: writeEEPROM(0x9A, 2);
 10365  0027F8  6A0F               	clrf	?_writeEEPROM+1,c
 10366  0027FA  0E9A               	movlw	154
 10367  0027FC  6E0E               	movwf	?_writeEEPROM,c
 10368  0027FE  0E02               	movlw	2
 10369  002800  6E10               	movwf	?_writeEEPROM+2,c
 10370  002802  EC0D  F029         	call	_writeEEPROM	;wreg free
 10371                           
 10372                           ;main.c: 1161: writeEEPROM(0x9B, 2);
 10373  002806  6A0F               	clrf	?_writeEEPROM+1,c
 10374  002808  0E9B               	movlw	155
 10375  00280A  6E0E               	movwf	?_writeEEPROM,c
 10376  00280C  0E02               	movlw	2
 10377  00280E  6E10               	movwf	?_writeEEPROM+2,c
 10378  002810  EC0D  F029         	call	_writeEEPROM	;wreg free
 10379                           
 10380                           ;main.c: 1162: writeEEPROM(0x9C, 2);
 10381  002814  6A0F               	clrf	?_writeEEPROM+1,c
 10382  002816  0E9C               	movlw	156
 10383  002818  6E0E               	movwf	?_writeEEPROM,c
 10384  00281A  0E02               	movlw	2
 10385  00281C  6E10               	movwf	?_writeEEPROM+2,c
 10386  00281E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10387                           
 10388                           ;main.c: 1166: writeEEPROM(0xF2, 0xc3);
 10389  002822  6A0F               	clrf	?_writeEEPROM+1,c
 10390  002824  0EF2               	movlw	242
 10391  002826  6E0E               	movwf	?_writeEEPROM,c
 10392  002828  0EC3               	movlw	195
 10393  00282A  6E10               	movwf	?_writeEEPROM+2,c
 10394  00282C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10395                           
 10396                           ;main.c: 1167: writeEEPROM(0xF3, 0x50);
 10397  002830  6A0F               	clrf	?_writeEEPROM+1,c
 10398  002832  0EF3               	movlw	243
 10399  002834  6E0E               	movwf	?_writeEEPROM,c
 10400  002836  0E50               	movlw	80
 10401  002838  6E10               	movwf	?_writeEEPROM+2,c
 10402  00283A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10403                           
 10404                           ;main.c: 1171: writeEEPROM(0x9E, 0);
 10405  00283E  6A0F               	clrf	?_writeEEPROM+1,c
 10406  002840  0E9E               	movlw	158
 10407  002842  6E0E               	movwf	?_writeEEPROM,c
 10408  002844  0E00               	movlw	0
 10409  002846  6A10               	clrf	?_writeEEPROM+2,c
 10410  002848  EC0D  F029         	call	_writeEEPROM	;wreg free
 10411                           
 10412                           ;main.c: 1172: writeEEPROM(0x9F, 0);
 10413  00284C  6A0F               	clrf	?_writeEEPROM+1,c
 10414  00284E  0E9F               	movlw	159
 10415  002850  6E0E               	movwf	?_writeEEPROM,c
 10416  002852  0E00               	movlw	0
 10417  002854  6A10               	clrf	?_writeEEPROM+2,c
 10418  002856  EC0D  F029         	call	_writeEEPROM	;wreg free
 10419                           
 10420                           ;main.c: 1173: writeEEPROM(0xA0, 0);
 10421  00285A  6A0F               	clrf	?_writeEEPROM+1,c
 10422  00285C  0EA0               	movlw	160
 10423  00285E  6E0E               	movwf	?_writeEEPROM,c
 10424  002860  0E00               	movlw	0
 10425  002862  6A10               	clrf	?_writeEEPROM+2,c
 10426  002864  EC0D  F029         	call	_writeEEPROM	;wreg free
 10427                           
 10428                           ;main.c: 1174: writeEEPROM(0xA1, 0);
 10429  002868  6A0F               	clrf	?_writeEEPROM+1,c
 10430  00286A  0EA1               	movlw	161
 10431  00286C  6E0E               	movwf	?_writeEEPROM,c
 10432  00286E  0E00               	movlw	0
 10433  002870  6A10               	clrf	?_writeEEPROM+2,c
 10434  002872  EC0D  F029         	call	_writeEEPROM	;wreg free
 10435                           
 10436                           ;main.c: 1175: writeEEPROM(0xA2, 0);
 10437  002876  6A0F               	clrf	?_writeEEPROM+1,c
 10438  002878  0EA2               	movlw	162
 10439  00287A  6E0E               	movwf	?_writeEEPROM,c
 10440  00287C  0E00               	movlw	0
 10441  00287E  6A10               	clrf	?_writeEEPROM+2,c
 10442  002880  EC0D  F029         	call	_writeEEPROM	;wreg free
 10443                           
 10444                           ;main.c: 1176: writeEEPROM(0xA3, 0);
 10445  002884  6A0F               	clrf	?_writeEEPROM+1,c
 10446  002886  0EA3               	movlw	163
 10447  002888  6E0E               	movwf	?_writeEEPROM,c
 10448  00288A  0E00               	movlw	0
 10449  00288C  6A10               	clrf	?_writeEEPROM+2,c
 10450  00288E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10451                           
 10452                           ;main.c: 1177: writeEEPROM(0xA4, 0);
 10453  002892  6A0F               	clrf	?_writeEEPROM+1,c
 10454  002894  0EA4               	movlw	164
 10455  002896  6E0E               	movwf	?_writeEEPROM,c
 10456  002898  0E00               	movlw	0
 10457  00289A  6A10               	clrf	?_writeEEPROM+2,c
 10458  00289C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10459                           
 10460                           ;main.c: 1178: writeEEPROM(0xA5, 0);
 10461  0028A0  6A0F               	clrf	?_writeEEPROM+1,c
 10462  0028A2  0EA5               	movlw	165
 10463  0028A4  6E0E               	movwf	?_writeEEPROM,c
 10464  0028A6  0E00               	movlw	0
 10465  0028A8  6A10               	clrf	?_writeEEPROM+2,c
 10466  0028AA  EC0D  F029         	call	_writeEEPROM	;wreg free
 10467                           
 10468                           ;main.c: 1179: writeEEPROM(0xA6, 0);
 10469  0028AE  6A0F               	clrf	?_writeEEPROM+1,c
 10470  0028B0  0EA6               	movlw	166
 10471  0028B2  6E0E               	movwf	?_writeEEPROM,c
 10472  0028B4  0E00               	movlw	0
 10473  0028B6  6A10               	clrf	?_writeEEPROM+2,c
 10474  0028B8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10475                           
 10476                           ;main.c: 1180: writeEEPROM(0xA7, 0);
 10477  0028BC  6A0F               	clrf	?_writeEEPROM+1,c
 10478  0028BE  0EA7               	movlw	167
 10479  0028C0  6E0E               	movwf	?_writeEEPROM,c
 10480  0028C2  0E00               	movlw	0
 10481  0028C4  6A10               	clrf	?_writeEEPROM+2,c
 10482  0028C6  EC0D  F029         	call	_writeEEPROM	;wreg free
 10483                           
 10484                           ;main.c: 1181: writeEEPROM(0xA8, 0);
 10485  0028CA  6A0F               	clrf	?_writeEEPROM+1,c
 10486  0028CC  0EA8               	movlw	168
 10487  0028CE  6E0E               	movwf	?_writeEEPROM,c
 10488  0028D0  0E00               	movlw	0
 10489  0028D2  6A10               	clrf	?_writeEEPROM+2,c
 10490  0028D4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10491                           
 10492                           ;main.c: 1182: writeEEPROM(0xA9, 0);
 10493  0028D8  6A0F               	clrf	?_writeEEPROM+1,c
 10494  0028DA  0EA9               	movlw	169
 10495  0028DC  6E0E               	movwf	?_writeEEPROM,c
 10496  0028DE  0E00               	movlw	0
 10497  0028E0  6A10               	clrf	?_writeEEPROM+2,c
 10498  0028E2  EC0D  F029         	call	_writeEEPROM	;wreg free
 10499                           
 10500                           ;main.c: 1186: writeEEPROM(0xAA, 0);
 10501  0028E6  6A0F               	clrf	?_writeEEPROM+1,c
 10502  0028E8  0EAA               	movlw	170
 10503  0028EA  6E0E               	movwf	?_writeEEPROM,c
 10504  0028EC  0E00               	movlw	0
 10505  0028EE  6A10               	clrf	?_writeEEPROM+2,c
 10506  0028F0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10507                           
 10508                           ;main.c: 1187: writeEEPROM(0xAB, 0);
 10509  0028F4  6A0F               	clrf	?_writeEEPROM+1,c
 10510  0028F6  0EAB               	movlw	171
 10511  0028F8  6E0E               	movwf	?_writeEEPROM,c
 10512  0028FA  0E00               	movlw	0
 10513  0028FC  6A10               	clrf	?_writeEEPROM+2,c
 10514  0028FE  EC0D  F029         	call	_writeEEPROM	;wreg free
 10515                           
 10516                           ;main.c: 1188: writeEEPROM(0xAC, 0);
 10517  002902  6A0F               	clrf	?_writeEEPROM+1,c
 10518  002904  0EAC               	movlw	172
 10519  002906  6E0E               	movwf	?_writeEEPROM,c
 10520  002908  0E00               	movlw	0
 10521  00290A  6A10               	clrf	?_writeEEPROM+2,c
 10522  00290C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10523                           
 10524                           ;main.c: 1189: writeEEPROM(0xAD, 0);
 10525  002910  6A0F               	clrf	?_writeEEPROM+1,c
 10526  002912  0EAD               	movlw	173
 10527  002914  6E0E               	movwf	?_writeEEPROM,c
 10528  002916  0E00               	movlw	0
 10529  002918  6A10               	clrf	?_writeEEPROM+2,c
 10530  00291A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10531                           
 10532                           ;main.c: 1190: writeEEPROM(0xAE, 0);
 10533  00291E  6A0F               	clrf	?_writeEEPROM+1,c
 10534  002920  0EAE               	movlw	174
 10535  002922  6E0E               	movwf	?_writeEEPROM,c
 10536  002924  0E00               	movlw	0
 10537  002926  6A10               	clrf	?_writeEEPROM+2,c
 10538  002928  EC0D  F029         	call	_writeEEPROM	;wreg free
 10539                           
 10540                           ;main.c: 1191: writeEEPROM(0xAF, 0);
 10541  00292C  6A0F               	clrf	?_writeEEPROM+1,c
 10542  00292E  0EAF               	movlw	175
 10543  002930  6E0E               	movwf	?_writeEEPROM,c
 10544  002932  0E00               	movlw	0
 10545  002934  6A10               	clrf	?_writeEEPROM+2,c
 10546  002936  EC0D  F029         	call	_writeEEPROM	;wreg free
 10547                           
 10548                           ;main.c: 1192: writeEEPROM(0xB0, 0);
 10549  00293A  6A0F               	clrf	?_writeEEPROM+1,c
 10550  00293C  0EB0               	movlw	176
 10551  00293E  6E0E               	movwf	?_writeEEPROM,c
 10552  002940  0E00               	movlw	0
 10553  002942  6A10               	clrf	?_writeEEPROM+2,c
 10554  002944  EC0D  F029         	call	_writeEEPROM	;wreg free
 10555                           
 10556                           ;main.c: 1193: writeEEPROM(0xB1, 0);
 10557  002948  6A0F               	clrf	?_writeEEPROM+1,c
 10558  00294A  0EB1               	movlw	177
 10559  00294C  6E0E               	movwf	?_writeEEPROM,c
 10560  00294E  0E00               	movlw	0
 10561  002950  6A10               	clrf	?_writeEEPROM+2,c
 10562  002952  EC0D  F029         	call	_writeEEPROM	;wreg free
 10563                           
 10564                           ;main.c: 1194: writeEEPROM(0xB2, 0);
 10565  002956  6A0F               	clrf	?_writeEEPROM+1,c
 10566  002958  0EB2               	movlw	178
 10567  00295A  6E0E               	movwf	?_writeEEPROM,c
 10568  00295C  0E00               	movlw	0
 10569  00295E  6A10               	clrf	?_writeEEPROM+2,c
 10570  002960  EC0D  F029         	call	_writeEEPROM	;wreg free
 10571                           
 10572                           ;main.c: 1195: writeEEPROM(0xB3, 0);
 10573  002964  6A0F               	clrf	?_writeEEPROM+1,c
 10574  002966  0EB3               	movlw	179
 10575  002968  6E0E               	movwf	?_writeEEPROM,c
 10576  00296A  0E00               	movlw	0
 10577  00296C  6A10               	clrf	?_writeEEPROM+2,c
 10578  00296E  EC0D  F029         	call	_writeEEPROM	;wreg free
 10579                           
 10580                           ;main.c: 1196: writeEEPROM(0xB4, 0);
 10581  002972  6A0F               	clrf	?_writeEEPROM+1,c
 10582  002974  0EB4               	movlw	180
 10583  002976  6E0E               	movwf	?_writeEEPROM,c
 10584  002978  0E00               	movlw	0
 10585  00297A  6A10               	clrf	?_writeEEPROM+2,c
 10586  00297C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10587                           
 10588                           ;main.c: 1197: writeEEPROM(0xB5, 0);
 10589  002980  6A0F               	clrf	?_writeEEPROM+1,c
 10590  002982  0EB5               	movlw	181
 10591  002984  6E0E               	movwf	?_writeEEPROM,c
 10592  002986  0E00               	movlw	0
 10593  002988  6A10               	clrf	?_writeEEPROM+2,c
 10594  00298A  EC0D  F029         	call	_writeEEPROM	;wreg free
 10595                           
 10596                           ;main.c: 1201: for (uint8_t i = 0; i < 6; i++) {
 10597  00298E  6A11               	clrf	init_app_eeprom@i,c
 10598  002990                     l9586:
 10599                           
 10600                           ;main.c: 1202: writeEEPROM(0xB6 + i * 12, 0);
 10601  002990  5011               	movf	init_app_eeprom@i,w,c
 10602  002992  0D0C               	mullw	12
 10603  002994  0EB6               	movlw	182
 10604  002996  D849               	call	PL4	;call to abstracted procedure
 10605  002998  EC0D  F029         	call	_writeEEPROM	;wreg free
 10606                           
 10607                           ;main.c: 1203: writeEEPROM(0xB7 + i * 12, 0);
 10608  00299C  5011               	movf	init_app_eeprom@i,w,c
 10609  00299E  0D0C               	mullw	12
 10610  0029A0  0EB7               	movlw	183
 10611  0029A2  D843               	call	PL4	;call to abstracted procedure
 10612  0029A4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10613                           
 10614                           ;main.c: 1204: writeEEPROM(0xB8 + i * 12, 0);
 10615  0029A8  5011               	movf	init_app_eeprom@i,w,c
 10616  0029AA  0D0C               	mullw	12
 10617  0029AC  0EB8               	movlw	184
 10618  0029AE  D83D               	call	PL4	;call to abstracted procedure
 10619  0029B0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10620                           
 10621                           ;main.c: 1205: writeEEPROM(0xB9 + i * 12, 0);
 10622  0029B4  5011               	movf	init_app_eeprom@i,w,c
 10623  0029B6  0D0C               	mullw	12
 10624  0029B8  0EB9               	movlw	185
 10625  0029BA  D837               	call	PL4	;call to abstracted procedure
 10626  0029BC  EC0D  F029         	call	_writeEEPROM	;wreg free
 10627                           
 10628                           ;main.c: 1206: writeEEPROM(0xBA + i * 12, 0);
 10629  0029C0  5011               	movf	init_app_eeprom@i,w,c
 10630  0029C2  0D0C               	mullw	12
 10631  0029C4  0EBA               	movlw	186
 10632  0029C6  D831               	call	PL4	;call to abstracted procedure
 10633  0029C8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10634                           
 10635                           ;main.c: 1207: writeEEPROM(0xBB + i * 12, 0);
 10636  0029CC  5011               	movf	init_app_eeprom@i,w,c
 10637  0029CE  0D0C               	mullw	12
 10638  0029D0  0EBB               	movlw	187
 10639  0029D2  D82B               	call	PL4	;call to abstracted procedure
 10640  0029D4  EC0D  F029         	call	_writeEEPROM	;wreg free
 10641                           
 10642                           ;main.c: 1208: writeEEPROM(0xBC + i * 12, 0);
 10643  0029D8  5011               	movf	init_app_eeprom@i,w,c
 10644  0029DA  0D0C               	mullw	12
 10645  0029DC  0EBC               	movlw	188
 10646  0029DE  D825               	call	PL4	;call to abstracted procedure
 10647  0029E0  EC0D  F029         	call	_writeEEPROM	;wreg free
 10648                           
 10649                           ;main.c: 1209: writeEEPROM(0xBD + i * 12, 0);
 10650  0029E4  5011               	movf	init_app_eeprom@i,w,c
 10651  0029E6  0D0C               	mullw	12
 10652  0029E8  0EBD               	movlw	189
 10653  0029EA  D81F               	call	PL4	;call to abstracted procedure
 10654  0029EC  EC0D  F029         	call	_writeEEPROM	;wreg free
 10655                           
 10656                           ;main.c: 1210: writeEEPROM(0xBE + i * 12, 0);
 10657  0029F0  5011               	movf	init_app_eeprom@i,w,c
 10658  0029F2  0D0C               	mullw	12
 10659  0029F4  0EBE               	movlw	190
 10660  0029F6  D819               	call	PL4	;call to abstracted procedure
 10661  0029F8  EC0D  F029         	call	_writeEEPROM	;wreg free
 10662                           
 10663                           ;main.c: 1211: writeEEPROM(0xBF + i * 12, 0);
 10664  0029FC  5011               	movf	init_app_eeprom@i,w,c
 10665  0029FE  0D0C               	mullw	12
 10666  002A00  0EBF               	movlw	191
 10667  002A02  D813               	call	PL4	;call to abstracted procedure
 10668  002A04  EC0D  F029         	call	_writeEEPROM	;wreg free
 10669                           
 10670                           ;main.c: 1212: writeEEPROM(0xC0 + i * 12, 0);
 10671  002A08  5011               	movf	init_app_eeprom@i,w,c
 10672  002A0A  0D0C               	mullw	12
 10673  002A0C  0EC0               	movlw	192
 10674  002A0E  D80D               	call	PL4	;call to abstracted procedure
 10675  002A10  EC0D  F029         	call	_writeEEPROM	;wreg free
 10676                           
 10677                           ;main.c: 1213: writeEEPROM(0xC1 + i * 12, 0);
 10678  002A14  5011               	movf	init_app_eeprom@i,w,c
 10679  002A16  0D0C               	mullw	12
 10680  002A18  0EC1               	movlw	193
 10681  002A1A  D807               	call	PL4	;call to abstracted procedure
 10682  002A1C  EC0D  F029         	call	_writeEEPROM	;wreg free
 10683  002A20  2A11               	incf	init_app_eeprom@i,f,c
 10684  002A22  0E05               	movlw	5
 10685  002A24  6411               	cpfsgt	init_app_eeprom@i,c
 10686  002A26  D7B4               	goto	l9586
 10687  002A28  0C05               	retlw	5
 10688  002A2A                     __end_of_init_app_eeprom:
 10689                           	opt stack 0
 10690  002A2A                     PL4:
 10691                           	opt stack 23
 10692  002A2A  24F3               	addwf	prodl,w,c
 10693  002A2C  6E0E               	movwf	?_writeEEPROM,c
 10694  002A2E  0E00               	movlw	0
 10695  002A30  20F4               	addwfc	prodh,w,c
 10696  002A32  6E0F               	movwf	?_writeEEPROM+1,c
 10697  002A34  6A10               	clrf	?_writeEEPROM+2,c
 10698  002A36  0C00               	retlw	0
 10699  002A38                     __end_ofPL4:
 10700                           	opt stack 0
 10701                           tblptru	equ	0xFF8
 10702                           tblptrh	equ	0xFF7
 10703                           tblptrl	equ	0xFF6
 10704                           tablat	equ	0xFF5
 10705                           prodh	equ	0xFF4
 10706                           prodl	equ	0xFF3
 10707                           intcon	equ	0xFF2
 10708                           postinc0	equ	0xFEE
 10709                           wreg	equ	0xFE8
 10710                           indf1	equ	0xFE7
 10711                           postdec1	equ	0xFE5
 10712                           fsr1h	equ	0xFE2
 10713                           fsr1l	equ	0xFE1
 10714                           indf2	equ	0xFDF
 10715                           postinc2	equ	0xFDE
 10716                           postdec2	equ	0xFDD
 10717                           plusw2	equ	0xFDB
 10718                           fsr2h	equ	0xFDA
 10719                           fsr2l	equ	0xFD9
 10720                           status	equ	0xFD8
 10721                           
 10722 ;; *************** function _vscp_getFamilyType *****************
 10723 ;; Defined at:
 10724 ;;		line 2821 in file "../main.c"
 10725 ;; Parameters:    Size  Location     Type
 10726 ;;		None
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;		None
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  4   13[COMRAM] unsigned long 
 10731 ;; Registers used:
 10732 ;;		None
 10733 ;; Tracked objects:
 10734 ;;		On entry : F/0
 10735 ;;		On exit  : F/0
 10736 ;;		Unchanged: F/0
 10737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10738 ;;      Params:         4       0       0       0       0       0       0
 10739 ;;      Locals:         0       0       0       0       0       0       0
 10740 ;;      Temps:          0       0       0       0       0       0       0
 10741 ;;      Totals:         4       0       0       0       0       0       0
 10742 ;;Total ram usage:        4 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    2
 10745 ;; This function calls:
 10746 ;;		Nothing
 10747 ;; This function is called by:
 10748 ;;		_vscp_writeStdReg
 10749 ;; This function uses a non-reentrant model
 10750 ;;
 10751                           
 10752                           	psect	text39
 10753  005494                     __ptext39:
 10754                           	opt stack 0
 10755  005494                     _vscp_getFamilyType:
 10756                           	opt stack 25
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;main.c: 2822: return 0;
 10760                           
 10761                           ;incstack = 0
 10762                           ;incstack = 0
 10763  005494  6A0E               	clrf	?_vscp_getFamilyType,c
 10764  005496  6A0F               	clrf	?_vscp_getFamilyType+1,c
 10765  005498  6A10               	clrf	?_vscp_getFamilyType+2,c
 10766  00549A  6A11               	clrf	?_vscp_getFamilyType+3,c
 10767                           
 10768                           ; BSR set to: 0
 10769  00549C  0012               	return	
 10770  00549E                     __end_of_vscp_getFamilyType:
 10771                           	opt stack 0
 10772                           tblptru	equ	0xFF8
 10773                           tblptrh	equ	0xFF7
 10774                           tblptrl	equ	0xFF6
 10775                           tablat	equ	0xFF5
 10776                           prodh	equ	0xFF4
 10777                           prodl	equ	0xFF3
 10778                           intcon	equ	0xFF2
 10779                           postinc0	equ	0xFEE
 10780                           wreg	equ	0xFE8
 10781                           indf1	equ	0xFE7
 10782                           postdec1	equ	0xFE5
 10783                           fsr1h	equ	0xFE2
 10784                           fsr1l	equ	0xFE1
 10785                           indf2	equ	0xFDF
 10786                           postinc2	equ	0xFDE
 10787                           postdec2	equ	0xFDD
 10788                           plusw2	equ	0xFDB
 10789                           fsr2h	equ	0xFDA
 10790                           fsr2l	equ	0xFD9
 10791                           status	equ	0xFD8
 10792                           
 10793 ;; *************** function _vscp_getFamilyCode *****************
 10794 ;; Defined at:
 10795 ;;		line 2811 in file "../main.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;		None
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;		None
 10800 ;; Return value:  Size  Location     Type
 10801 ;;                  4   13[COMRAM] unsigned long 
 10802 ;; Registers used:
 10803 ;;		None
 10804 ;; Tracked objects:
 10805 ;;		On entry : F/0
 10806 ;;		On exit  : F/0
 10807 ;;		Unchanged: F/0
 10808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10809 ;;      Params:         4       0       0       0       0       0       0
 10810 ;;      Locals:         0       0       0       0       0       0       0
 10811 ;;      Temps:          0       0       0       0       0       0       0
 10812 ;;      Totals:         4       0       0       0       0       0       0
 10813 ;;Total ram usage:        4 bytes
 10814 ;; Hardware stack levels used:    1
 10815 ;; Hardware stack levels required when called:    2
 10816 ;; This function calls:
 10817 ;;		Nothing
 10818 ;; This function is called by:
 10819 ;;		_vscp_writeStdReg
 10820 ;; This function uses a non-reentrant model
 10821 ;;
 10822                           
 10823                           	psect	text40
 10824  00549E                     __ptext40:
 10825                           	opt stack 0
 10826  00549E                     _vscp_getFamilyCode:
 10827                           	opt stack 25
 10828                           
 10829                           ; BSR set to: 0
 10830                           ;main.c: 2812: return 0L;
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;incstack = 0
 10834                           ;incstack = 0
 10835  00549E  6A0E               	clrf	?_vscp_getFamilyCode,c
 10836  0054A0  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 10837  0054A2  6A10               	clrf	?_vscp_getFamilyCode+2,c
 10838  0054A4  6A11               	clrf	?_vscp_getFamilyCode+3,c
 10839                           
 10840                           ; BSR set to: 0
 10841  0054A6  0012               	return	
 10842  0054A8                     __end_of_vscp_getFamilyCode:
 10843                           	opt stack 0
 10844                           tblptru	equ	0xFF8
 10845                           tblptrh	equ	0xFF7
 10846                           tblptrl	equ	0xFF6
 10847                           tablat	equ	0xFF5
 10848                           prodh	equ	0xFF4
 10849                           prodl	equ	0xFF3
 10850                           intcon	equ	0xFF2
 10851                           postinc0	equ	0xFEE
 10852                           wreg	equ	0xFE8
 10853                           indf1	equ	0xFE7
 10854                           postdec1	equ	0xFE5
 10855                           fsr1h	equ	0xFE2
 10856                           fsr1l	equ	0xFE1
 10857                           indf2	equ	0xFDF
 10858                           postinc2	equ	0xFDE
 10859                           postdec2	equ	0xFDD
 10860                           plusw2	equ	0xFDB
 10861                           fsr2h	equ	0xFDA
 10862                           fsr2l	equ	0xFD9
 10863                           status	equ	0xFD8
 10864                           
 10865 ;; *************** function _vscp_setManufacturerId *****************
 10866 ;; Defined at:
 10867 ;;		line 2647 in file "../main.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;  idx             1    wreg     unsigned char 
 10870 ;;  data            1   16[COMRAM] unsigned char 
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;  idx             1   17[COMRAM] unsigned char 
 10873 ;; Return value:  Size  Location     Type
 10874 ;;		None               void
 10875 ;; Registers used:
 10876 ;;		wreg, status,2, status,0, cstack
 10877 ;; Tracked objects:
 10878 ;;		On entry : F/0
 10879 ;;		On exit  : 0/0
 10880 ;;		Unchanged: 0/0
 10881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10882 ;;      Params:         1       0       0       0       0       0       0
 10883 ;;      Locals:         1       0       0       0       0       0       0
 10884 ;;      Temps:          0       0       0       0       0       0       0
 10885 ;;      Totals:         2       0       0       0       0       0       0
 10886 ;;Total ram usage:        2 bytes
 10887 ;; Hardware stack levels used:    1
 10888 ;; Hardware stack levels required when called:    3
 10889 ;; This function calls:
 10890 ;;		_writeEEPROM
 10891 ;; This function is called by:
 10892 ;;		_vscp_writeStdReg
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           	psect	text41
 10897  005360                     __ptext41:
 10898                           	opt stack 0
 10899  005360                     _vscp_setManufacturerId:
 10900                           	opt stack 24
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;incstack = 0
 10904                           ;incstack = 0
 10905                           ;vscp_setManufacturerId@idx stored from wreg
 10906  005360  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;main.c: 2648: writeEEPROM(0x09 + idx, data);
 10910  005364  0E09               	movlw	9
 10911  005366  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10912  005368  6E0E               	movwf	?_writeEEPROM,c
 10913  00536A  6A0F               	clrf	?_writeEEPROM+1,c
 10914  00536C  0E00               	movlw	0
 10915  00536E  220F               	addwfc	?_writeEEPROM+1,f,c
 10916  005370  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10917  005374  EF0D  F029         	goto	_writeEEPROM	;wreg free
 10918  005378                     __end_of_vscp_setManufacturerId:
 10919                           	opt stack 0
 10920                           tblptru	equ	0xFF8
 10921                           tblptrh	equ	0xFF7
 10922                           tblptrl	equ	0xFF6
 10923                           tablat	equ	0xFF5
 10924                           prodh	equ	0xFF4
 10925                           prodl	equ	0xFF3
 10926                           intcon	equ	0xFF2
 10927                           postinc0	equ	0xFEE
 10928                           wreg	equ	0xFE8
 10929                           indf1	equ	0xFE7
 10930                           postdec1	equ	0xFE5
 10931                           fsr1h	equ	0xFE2
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           postdec2	equ	0xFDD
 10936                           plusw2	equ	0xFDB
 10937                           fsr2h	equ	0xFDA
 10938                           fsr2l	equ	0xFD9
 10939                           status	equ	0xFD8
 10940                           
 10941 ;; *************** function _vscp_setUserID *****************
 10942 ;; Defined at:
 10943 ;;		line 2625 in file "../main.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  idx             1    wreg     unsigned char 
 10946 ;;  data            1   16[COMRAM] unsigned char 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  idx             1   17[COMRAM] unsigned char 
 10949 ;; Return value:  Size  Location     Type
 10950 ;;		None               void
 10951 ;; Registers used:
 10952 ;;		wreg, status,2, status,0, cstack
 10953 ;; Tracked objects:
 10954 ;;		On entry : F/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10958 ;;      Params:         1       0       0       0       0       0       0
 10959 ;;      Locals:         1       0       0       0       0       0       0
 10960 ;;      Temps:          0       0       0       0       0       0       0
 10961 ;;      Totals:         2       0       0       0       0       0       0
 10962 ;;Total ram usage:        2 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:    3
 10965 ;; This function calls:
 10966 ;;		_writeEEPROM
 10967 ;; This function is called by:
 10968 ;;		_vscp_writeStdReg
 10969 ;; This function uses a non-reentrant model
 10970 ;;
 10971                           
 10972                           	psect	text42
 10973  005378                     __ptext42:
 10974                           	opt stack 0
 10975  005378                     _vscp_setUserID:
 10976                           	opt stack 24
 10977                           
 10978                           ;incstack = 0
 10979                           ;incstack = 0
 10980                           ;vscp_setUserID@idx stored from wreg
 10981  005378  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;main.c: 2626: writeEEPROM(idx + 0x04, data);
 10985  00537C  0E04               	movlw	4
 10986  00537E  2412               	addwf	vscp_setUserID@idx,w,c
 10987  005380  6E0E               	movwf	?_writeEEPROM,c
 10988  005382  6A0F               	clrf	?_writeEEPROM+1,c
 10989  005384  0E00               	movlw	0
 10990  005386  220F               	addwfc	?_writeEEPROM+1,f,c
 10991  005388  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10992  00538C  EF0D  F029         	goto	_writeEEPROM	;wreg free
 10993  005390                     __end_of_vscp_setUserID:
 10994                           	opt stack 0
 10995                           tblptru	equ	0xFF8
 10996                           tblptrh	equ	0xFF7
 10997                           tblptrl	equ	0xFF6
 10998                           tablat	equ	0xFF5
 10999                           prodh	equ	0xFF4
 11000                           prodl	equ	0xFF3
 11001                           intcon	equ	0xFF2
 11002                           postinc0	equ	0xFEE
 11003                           wreg	equ	0xFE8
 11004                           indf1	equ	0xFE7
 11005                           postdec1	equ	0xFE5
 11006                           fsr1h	equ	0xFE2
 11007                           fsr1l	equ	0xFE1
 11008                           indf2	equ	0xFDF
 11009                           postinc2	equ	0xFDE
 11010                           postdec2	equ	0xFDD
 11011                           plusw2	equ	0xFDB
 11012                           fsr2h	equ	0xFDA
 11013                           fsr2l	equ	0xFD9
 11014                           status	equ	0xFD8
 11015                           
 11016 ;; *************** function _vscp_setGUID *****************
 11017 ;; Defined at:
 11018 ;;		line 2594 in file "../main.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;  idx             1    wreg     unsigned char 
 11021 ;;  data            1   16[COMRAM] unsigned char 
 11022 ;; Auto vars:     Size  Location     Type
 11023 ;;  idx             1   17[COMRAM] unsigned char 
 11024 ;; Return value:  Size  Location     Type
 11025 ;;		None               void
 11026 ;; Registers used:
 11027 ;;		wreg, status,2, status,0, cstack
 11028 ;; Tracked objects:
 11029 ;;		On entry : F/0
 11030 ;;		On exit  : 0/0
 11031 ;;		Unchanged: 0/0
 11032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11033 ;;      Params:         1       0       0       0       0       0       0
 11034 ;;      Locals:         1       0       0       0       0       0       0
 11035 ;;      Temps:          0       0       0       0       0       0       0
 11036 ;;      Totals:         2       0       0       0       0       0       0
 11037 ;;Total ram usage:        2 bytes
 11038 ;; Hardware stack levels used:    1
 11039 ;; Hardware stack levels required when called:    3
 11040 ;; This function calls:
 11041 ;;		_writeEEPROM
 11042 ;; This function is called by:
 11043 ;;		_vscp_writeStdReg
 11044 ;; This function uses a non-reentrant model
 11045 ;;
 11046                           
 11047                           	psect	text43
 11048  0052CE                     __ptext43:
 11049                           	opt stack 0
 11050  0052CE                     _vscp_setGUID:
 11051                           	opt stack 24
 11052                           
 11053                           ;incstack = 0
 11054                           ;incstack = 0
 11055                           ;vscp_setGUID@idx stored from wreg
 11056  0052CE  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;main.c: 2595: if ( idx>15 ) return;
 11060  0052D2  0E0F               	movlw	15
 11061  0052D4  6412               	cpfsgt	vscp_setGUID@idx,c
 11062  0052D6  D001               	goto	l11026
 11063  0052D8  D00A               	goto	l552
 11064  0052DA                     l11026:
 11065                           
 11066                           ; BSR set to: 0
 11067                           ;main.c: 2596: writeEEPROM( 0x11 + idx, data );
 11068  0052DA  0E11               	movlw	17
 11069  0052DC  2412               	addwf	vscp_setGUID@idx,w,c
 11070  0052DE  6E0E               	movwf	?_writeEEPROM,c
 11071  0052E0  6A0F               	clrf	?_writeEEPROM+1,c
 11072  0052E2  0E00               	movlw	0
 11073  0052E4  220F               	addwfc	?_writeEEPROM+1,f,c
 11074  0052E6  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 11075  0052EA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11076  0052EE                     l552:
 11077  0052EE  0012               	return	
 11078  0052F0                     __end_of_vscp_setGUID:
 11079                           	opt stack 0
 11080                           tblptru	equ	0xFF8
 11081                           tblptrh	equ	0xFF7
 11082                           tblptrl	equ	0xFF6
 11083                           tablat	equ	0xFF5
 11084                           prodh	equ	0xFF4
 11085                           prodl	equ	0xFF3
 11086                           intcon	equ	0xFF2
 11087                           postinc0	equ	0xFEE
 11088                           wreg	equ	0xFE8
 11089                           indf1	equ	0xFE7
 11090                           postdec1	equ	0xFE5
 11091                           fsr1h	equ	0xFE2
 11092                           fsr1l	equ	0xFE1
 11093                           indf2	equ	0xFDF
 11094                           postinc2	equ	0xFDE
 11095                           postdec2	equ	0xFDD
 11096                           plusw2	equ	0xFDB
 11097                           fsr2h	equ	0xFDA
 11098                           fsr2l	equ	0xFD9
 11099                           status	equ	0xFD8
 11100                           
 11101 ;; *************** function _vscp_writeAppReg *****************
 11102 ;; Defined at:
 11103 ;;		line 1887 in file "../main.c"
 11104 ;; Parameters:    Size  Location     Type
 11105 ;;  reg             1    wreg     unsigned char 
 11106 ;;  val             1   32[COMRAM] unsigned char 
 11107 ;; Auto vars:     Size  Location     Type
 11108 ;;  reg             1   34[COMRAM] unsigned char 
 11109 ;;  pos             1   33[COMRAM] unsigned char 
 11110 ;;  rv              1   35[COMRAM] unsigned char 
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  1    wreg      unsigned char 
 11113 ;; Registers used:
 11114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11115 ;; Tracked objects:
 11116 ;;		On entry : F/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11120 ;;      Params:         1       0       0       0       0       0       0
 11121 ;;      Locals:         3       0       0       0       0       0       0
 11122 ;;      Temps:          0       0       0       0       0       0       0
 11123 ;;      Totals:         4       0       0       0       0       0       0
 11124 ;;Total ram usage:        4 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; Hardware stack levels required when called:    4
 11127 ;; This function calls:
 11128 ;;		_writeEEPROM
 11129 ;;		_readEEPROM
 11130 ;;		_writeCoeffs2Ram
 11131 ;; This function is called by:
 11132 ;;		_vscp_writeRegister
 11133 ;;		_vscp_handleProtocolEvent
 11134 ;; This function uses a non-reentrant model
 11135 ;;
 11136                           
 11137                           	psect	text44
 11138  00066E                     __ptext44:
 11139                           	opt stack 0
 11140  00066E                     _vscp_writeAppReg:
 11141                           	opt stack 23
 11142                           
 11143                           ;incstack = 0
 11144                           ;incstack = 0
 11145                           ;vscp_writeAppReg@reg stored from wreg
 11146  00066E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;main.c: 1888: uint8_t rv;
 11150                           ;main.c: 1895: rv = ~val;
 11151  000672  1C21               	comf	vscp_writeAppReg@val,w,c
 11152  000674  6E24               	movwf	vscp_writeAppReg@rv,c
 11153                           
 11154                           ;main.c: 1897: if (0 == vscp_page_select) {
 11155  000676  5047               	movf	_vscp_page_select+1,w,c
 11156  000678  1046               	iorwf	_vscp_page_select,w,c
 11157  00067A  E102 EF37  F008    	bz	l10988
 11158  000680  EF71  F009         	goto	l10990
 11159  000684                     l10798:
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;main.c: 1903: writeEEPROM(0x41, val);
 11163  000684  6A0F               	clrf	?_writeEEPROM+1,c
 11164  000686  0E41               	movlw	65
 11165  000688  6E0E               	movwf	?_writeEEPROM,c
 11166  00068A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11167  00068E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11168                           
 11169                           ;main.c: 1904: rv = readEEPROM(0x41);
 11170  000692  6A0F               	clrf	?_readEEPROM+1,c
 11171  000694  0E41               	movlw	65
 11172  000696  6E0E               	movwf	?_readEEPROM,c
 11173  000698  EC1C  F02A         	call	_readEEPROM	;wreg free
 11174  00069C  EFA9  F009         	goto	L19
 11175  0006A0                     l10800:
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;main.c: 1909: writeEEPROM(0x42, val);
 11179  0006A0  6A0F               	clrf	?_writeEEPROM+1,c
 11180  0006A2  0E42               	movlw	66
 11181  0006A4  6E0E               	movwf	?_writeEEPROM,c
 11182  0006A6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11183  0006AA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11184                           
 11185                           ;main.c: 1910: rv = readEEPROM(0x42);
 11186  0006AE  6A0F               	clrf	?_readEEPROM+1,c
 11187  0006B0  0E42               	movlw	66
 11188  0006B2  6E0E               	movwf	?_readEEPROM,c
 11189  0006B4  EC1C  F02A         	call	_readEEPROM	;wreg free
 11190  0006B8  EFA9  F009         	goto	L19
 11191  0006BC                     l10802:
 11192                           
 11193                           ; BSR set to: 0
 11194                           ;main.c: 1919: writeEEPROM(0x43, val);
 11195  0006BC  6A0F               	clrf	?_writeEEPROM+1,c
 11196  0006BE  0E43               	movlw	67
 11197  0006C0  6E0E               	movwf	?_writeEEPROM,c
 11198  0006C2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11199  0006C6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11200                           
 11201                           ;main.c: 1920: rv = readEEPROM(0x43);
 11202  0006CA  6A0F               	clrf	?_readEEPROM+1,c
 11203  0006CC  0E43               	movlw	67
 11204  0006CE  6E0E               	movwf	?_readEEPROM,c
 11205  0006D0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11206  0006D4  EFA9  F009         	goto	L19
 11207  0006D8                     l10804:
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;main.c: 1925: writeEEPROM(0x44, val);
 11211  0006D8  6A0F               	clrf	?_writeEEPROM+1,c
 11212  0006DA  0E44               	movlw	68
 11213  0006DC  6E0E               	movwf	?_writeEEPROM,c
 11214  0006DE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11215  0006E2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11216                           
 11217                           ;main.c: 1926: rv = readEEPROM(0x44);
 11218  0006E6  6A0F               	clrf	?_readEEPROM+1,c
 11219  0006E8  0E44               	movlw	68
 11220  0006EA  6E0E               	movwf	?_readEEPROM,c
 11221  0006EC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11222  0006F0  EFA9  F009         	goto	L19
 11223  0006F4                     l10806:
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;main.c: 1931: writeEEPROM(0x45, val);
 11227  0006F4  6A0F               	clrf	?_writeEEPROM+1,c
 11228  0006F6  0E45               	movlw	69
 11229  0006F8  6E0E               	movwf	?_writeEEPROM,c
 11230  0006FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11231  0006FE  EC0D  F029         	call	_writeEEPROM	;wreg free
 11232                           
 11233                           ;main.c: 1932: rv = readEEPROM(0x45);
 11234  000702  6A0F               	clrf	?_readEEPROM+1,c
 11235  000704  0E45               	movlw	69
 11236  000706  6E0E               	movwf	?_readEEPROM,c
 11237  000708  EC1C  F02A         	call	_readEEPROM	;wreg free
 11238  00070C  EFA9  F009         	goto	L19
 11239  000710                     l10808:
 11240                           
 11241                           ; BSR set to: 0
 11242                           ;main.c: 1937: writeEEPROM(0x46, val);
 11243  000710  6A0F               	clrf	?_writeEEPROM+1,c
 11244  000712  0E46               	movlw	70
 11245  000714  6E0E               	movwf	?_writeEEPROM,c
 11246  000716  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11247  00071A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11248                           
 11249                           ;main.c: 1938: rv = readEEPROM(0x46);
 11250  00071E  6A0F               	clrf	?_readEEPROM+1,c
 11251  000720  0E46               	movlw	70
 11252  000722  6E0E               	movwf	?_readEEPROM,c
 11253  000724  EC1C  F02A         	call	_readEEPROM	;wreg free
 11254  000728  EFA9  F009         	goto	L19
 11255  00072C                     l10810:
 11256                           
 11257                           ; BSR set to: 0
 11258                           ;main.c: 1943: writeEEPROM(0x47, val);
 11259  00072C  6A0F               	clrf	?_writeEEPROM+1,c
 11260  00072E  0E47               	movlw	71
 11261  000730  6E0E               	movwf	?_writeEEPROM,c
 11262  000732  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11263  000736  EC0D  F029         	call	_writeEEPROM	;wreg free
 11264                           
 11265                           ;main.c: 1944: rv = readEEPROM(0x47);
 11266  00073A  6A0F               	clrf	?_readEEPROM+1,c
 11267  00073C  0E47               	movlw	71
 11268  00073E  6E0E               	movwf	?_readEEPROM,c
 11269  000740  EC1C  F02A         	call	_readEEPROM	;wreg free
 11270  000744  EFA9  F009         	goto	L19
 11271  000748                     l10812:
 11272                           
 11273                           ; BSR set to: 0
 11274                           ;main.c: 1949: writeEEPROM(0x48, val);
 11275  000748  6A0F               	clrf	?_writeEEPROM+1,c
 11276  00074A  0E48               	movlw	72
 11277  00074C  6E0E               	movwf	?_writeEEPROM,c
 11278  00074E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11279  000752  EC0D  F029         	call	_writeEEPROM	;wreg free
 11280                           
 11281                           ;main.c: 1950: rv = readEEPROM(0x48);
 11282  000756  6A0F               	clrf	?_readEEPROM+1,c
 11283  000758  0E48               	movlw	72
 11284  00075A  6E0E               	movwf	?_readEEPROM,c
 11285  00075C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11286  000760  EFA9  F009         	goto	L19
 11287  000764                     l10814:
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;main.c: 1959: writeEEPROM(0x49, val);
 11291  000764  6A0F               	clrf	?_writeEEPROM+1,c
 11292  000766  0E49               	movlw	73
 11293  000768  6E0E               	movwf	?_writeEEPROM,c
 11294  00076A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11295  00076E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11296                           
 11297                           ;main.c: 1960: rv = readEEPROM(0x49);
 11298  000772  6A0F               	clrf	?_readEEPROM+1,c
 11299  000774  0E49               	movlw	73
 11300  000776  6E0E               	movwf	?_readEEPROM,c
 11301  000778  EC1C  F02A         	call	_readEEPROM	;wreg free
 11302  00077C  EFA9  F009         	goto	L19
 11303  000780                     l10816:
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;main.c: 1965: writeEEPROM(0x4A, val);
 11307  000780  6A0F               	clrf	?_writeEEPROM+1,c
 11308  000782  0E4A               	movlw	74
 11309  000784  6E0E               	movwf	?_writeEEPROM,c
 11310  000786  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11311  00078A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11312                           
 11313                           ;main.c: 1966: rv = readEEPROM(0x4A);
 11314  00078E  6A0F               	clrf	?_readEEPROM+1,c
 11315  000790  0E4A               	movlw	74
 11316  000792  6E0E               	movwf	?_readEEPROM,c
 11317  000794  EC1C  F02A         	call	_readEEPROM	;wreg free
 11318  000798  EFA9  F009         	goto	L19
 11319  00079C                     l10818:
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;main.c: 1971: writeEEPROM(0x4B, val);
 11323  00079C  6A0F               	clrf	?_writeEEPROM+1,c
 11324  00079E  0E4B               	movlw	75
 11325  0007A0  6E0E               	movwf	?_writeEEPROM,c
 11326  0007A2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11327  0007A6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11328                           
 11329                           ;main.c: 1972: rv = readEEPROM(0x4B);
 11330  0007AA  6A0F               	clrf	?_readEEPROM+1,c
 11331  0007AC  0E4B               	movlw	75
 11332  0007AE  6E0E               	movwf	?_readEEPROM,c
 11333  0007B0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11334  0007B4  EFA9  F009         	goto	L19
 11335  0007B8                     l10820:
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;main.c: 1977: writeEEPROM(0x4C, val);
 11339  0007B8  6A0F               	clrf	?_writeEEPROM+1,c
 11340  0007BA  0E4C               	movlw	76
 11341  0007BC  6E0E               	movwf	?_writeEEPROM,c
 11342  0007BE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11343  0007C2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11344                           
 11345                           ;main.c: 1978: rv = readEEPROM(0x4C);
 11346  0007C6  6A0F               	clrf	?_readEEPROM+1,c
 11347  0007C8  0E4C               	movlw	76
 11348  0007CA  6E0E               	movwf	?_readEEPROM,c
 11349  0007CC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11350  0007D0  EFA9  F009         	goto	L19
 11351  0007D4                     l10822:
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;main.c: 1983: writeEEPROM(0x4D, val);
 11355  0007D4  6A0F               	clrf	?_writeEEPROM+1,c
 11356  0007D6  0E4D               	movlw	77
 11357  0007D8  6E0E               	movwf	?_writeEEPROM,c
 11358  0007DA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11359  0007DE  EC0D  F029         	call	_writeEEPROM	;wreg free
 11360                           
 11361                           ;main.c: 1984: rv = readEEPROM(0x4D);
 11362  0007E2  6A0F               	clrf	?_readEEPROM+1,c
 11363  0007E4  0E4D               	movlw	77
 11364  0007E6  6E0E               	movwf	?_readEEPROM,c
 11365  0007E8  EC1C  F02A         	call	_readEEPROM	;wreg free
 11366  0007EC  EFA9  F009         	goto	L19
 11367  0007F0                     l10824:
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;main.c: 1989: writeEEPROM(0x4E, val);
 11371  0007F0  6A0F               	clrf	?_writeEEPROM+1,c
 11372  0007F2  0E4E               	movlw	78
 11373  0007F4  6E0E               	movwf	?_writeEEPROM,c
 11374  0007F6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11375  0007FA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11376                           
 11377                           ;main.c: 1990: rv = readEEPROM(0x4E);
 11378  0007FE  6A0F               	clrf	?_readEEPROM+1,c
 11379  000800  0E4E               	movlw	78
 11380  000802  6E0E               	movwf	?_readEEPROM,c
 11381  000804  EC1C  F02A         	call	_readEEPROM	;wreg free
 11382  000808  EFA9  F009         	goto	L19
 11383  00080C                     l10826:
 11384                           
 11385                           ; BSR set to: 0
 11386                           ;main.c: 1999: writeEEPROM(0x4F, val);
 11387  00080C  6A0F               	clrf	?_writeEEPROM+1,c
 11388  00080E  0E4F               	movlw	79
 11389  000810  6E0E               	movwf	?_writeEEPROM,c
 11390  000812  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11391  000816  EC0D  F029         	call	_writeEEPROM	;wreg free
 11392                           
 11393                           ;main.c: 2000: rv = readEEPROM(0x4F);
 11394  00081A  6A0F               	clrf	?_readEEPROM+1,c
 11395  00081C  0E4F               	movlw	79
 11396  00081E  6E0E               	movwf	?_readEEPROM,c
 11397  000820  EC1C  F02A         	call	_readEEPROM	;wreg free
 11398  000824  EFA9  F009         	goto	L19
 11399  000828                     l10828:
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;main.c: 2005: writeEEPROM(0x50, val);
 11403  000828  6A0F               	clrf	?_writeEEPROM+1,c
 11404  00082A  0E50               	movlw	80
 11405  00082C  6E0E               	movwf	?_writeEEPROM,c
 11406  00082E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11407  000832  EC0D  F029         	call	_writeEEPROM	;wreg free
 11408                           
 11409                           ;main.c: 2006: rv = readEEPROM(0x50);
 11410  000836  6A0F               	clrf	?_readEEPROM+1,c
 11411  000838  0E50               	movlw	80
 11412  00083A  6E0E               	movwf	?_readEEPROM,c
 11413  00083C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11414  000840  EFA9  F009         	goto	L19
 11415  000844                     l10830:
 11416                           
 11417                           ; BSR set to: 0
 11418                           ;main.c: 2011: writeEEPROM(0x51, val);
 11419  000844  6A0F               	clrf	?_writeEEPROM+1,c
 11420  000846  0E51               	movlw	81
 11421  000848  6E0E               	movwf	?_writeEEPROM,c
 11422  00084A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11423  00084E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11424                           
 11425                           ;main.c: 2012: rv = readEEPROM(0x51);
 11426  000852  6A0F               	clrf	?_readEEPROM+1,c
 11427  000854  0E51               	movlw	81
 11428  000856  6E0E               	movwf	?_readEEPROM,c
 11429  000858  EC1C  F02A         	call	_readEEPROM	;wreg free
 11430  00085C  EFA9  F009         	goto	L19
 11431  000860                     l10832:
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;main.c: 2017: writeEEPROM(0x52, val);
 11435  000860  6A0F               	clrf	?_writeEEPROM+1,c
 11436  000862  0E52               	movlw	82
 11437  000864  6E0E               	movwf	?_writeEEPROM,c
 11438  000866  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11439  00086A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11440                           
 11441                           ;main.c: 2018: rv = readEEPROM(0x52);
 11442  00086E  6A0F               	clrf	?_readEEPROM+1,c
 11443  000870  0E52               	movlw	82
 11444  000872  6E0E               	movwf	?_readEEPROM,c
 11445  000874  EC1C  F02A         	call	_readEEPROM	;wreg free
 11446  000878  EFA9  F009         	goto	L19
 11447  00087C                     l10834:
 11448                           
 11449                           ; BSR set to: 0
 11450                           ;main.c: 2023: writeEEPROM(0x53, val);
 11451  00087C  6A0F               	clrf	?_writeEEPROM+1,c
 11452  00087E  0E53               	movlw	83
 11453  000880  6E0E               	movwf	?_writeEEPROM,c
 11454  000882  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11455  000886  EC0D  F029         	call	_writeEEPROM	;wreg free
 11456                           
 11457                           ;main.c: 2024: rv = readEEPROM(0x53);
 11458  00088A  6A0F               	clrf	?_readEEPROM+1,c
 11459  00088C  0E53               	movlw	83
 11460  00088E  6E0E               	movwf	?_readEEPROM,c
 11461  000890  EC1C  F02A         	call	_readEEPROM	;wreg free
 11462  000894  EFA9  F009         	goto	L19
 11463  000898                     l10836:
 11464                           
 11465                           ; BSR set to: 0
 11466                           ;main.c: 2029: writeEEPROM(0x54, val);
 11467  000898  6A0F               	clrf	?_writeEEPROM+1,c
 11468  00089A  0E54               	movlw	84
 11469  00089C  6E0E               	movwf	?_writeEEPROM,c
 11470  00089E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11471  0008A2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11472                           
 11473                           ;main.c: 2030: rv = readEEPROM(0x54);
 11474  0008A6  6A0F               	clrf	?_readEEPROM+1,c
 11475  0008A8  0E54               	movlw	84
 11476  0008AA  6E0E               	movwf	?_readEEPROM,c
 11477  0008AC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11478  0008B0  EFA9  F009         	goto	L19
 11479  0008B4                     l10838:
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;main.c: 2035: writeEEPROM(0x55, val);
 11483  0008B4  6A0F               	clrf	?_writeEEPROM+1,c
 11484  0008B6  0E55               	movlw	85
 11485  0008B8  6E0E               	movwf	?_writeEEPROM,c
 11486  0008BA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11487  0008BE  EC0D  F029         	call	_writeEEPROM	;wreg free
 11488                           
 11489                           ;main.c: 2036: rv = readEEPROM(0x55);
 11490  0008C2  6A0F               	clrf	?_readEEPROM+1,c
 11491  0008C4  0E55               	movlw	85
 11492  0008C6  6E0E               	movwf	?_readEEPROM,c
 11493  0008C8  EC1C  F02A         	call	_readEEPROM	;wreg free
 11494  0008CC  EFA9  F009         	goto	L19
 11495  0008D0                     l10840:
 11496                           
 11497                           ; BSR set to: 0
 11498                           ;main.c: 2041: writeEEPROM(0x56, val);
 11499  0008D0  6A0F               	clrf	?_writeEEPROM+1,c
 11500  0008D2  0E56               	movlw	86
 11501  0008D4  6E0E               	movwf	?_writeEEPROM,c
 11502  0008D6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11503  0008DA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11504                           
 11505                           ;main.c: 2042: rv = readEEPROM(0x56);
 11506  0008DE  6A0F               	clrf	?_readEEPROM+1,c
 11507  0008E0  0E56               	movlw	86
 11508  0008E2  6E0E               	movwf	?_readEEPROM,c
 11509  0008E4  EC1C  F02A         	call	_readEEPROM	;wreg free
 11510  0008E8  EFA9  F009         	goto	L19
 11511  0008EC                     l10842:
 11512                           
 11513                           ; BSR set to: 0
 11514                           ;main.c: 2047: writeEEPROM(0x57, val);
 11515  0008EC  6A0F               	clrf	?_writeEEPROM+1,c
 11516  0008EE  0E57               	movlw	87
 11517  0008F0  6E0E               	movwf	?_writeEEPROM,c
 11518  0008F2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11519  0008F6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11520                           
 11521                           ;main.c: 2048: rv = readEEPROM(0x57);
 11522  0008FA  6A0F               	clrf	?_readEEPROM+1,c
 11523  0008FC  0E57               	movlw	87
 11524  0008FE  6E0E               	movwf	?_readEEPROM,c
 11525  000900  EC1C  F02A         	call	_readEEPROM	;wreg free
 11526  000904  EFA9  F009         	goto	L19
 11527  000908                     l10844:
 11528                           
 11529                           ; BSR set to: 0
 11530                           ;main.c: 2053: writeEEPROM(0x58, val);
 11531  000908  6A0F               	clrf	?_writeEEPROM+1,c
 11532  00090A  0E58               	movlw	88
 11533  00090C  6E0E               	movwf	?_writeEEPROM,c
 11534  00090E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11535  000912  EC0D  F029         	call	_writeEEPROM	;wreg free
 11536                           
 11537                           ;main.c: 2054: rv = readEEPROM(0x58);
 11538  000916  6A0F               	clrf	?_readEEPROM+1,c
 11539  000918  0E58               	movlw	88
 11540  00091A  6E0E               	movwf	?_readEEPROM,c
 11541  00091C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11542  000920  EFA9  F009         	goto	L19
 11543  000924                     l10846:
 11544                           
 11545                           ; BSR set to: 0
 11546                           ;main.c: 2059: writeEEPROM(0x59, val);
 11547  000924  6A0F               	clrf	?_writeEEPROM+1,c
 11548  000926  0E59               	movlw	89
 11549  000928  6E0E               	movwf	?_writeEEPROM,c
 11550  00092A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11551  00092E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11552                           
 11553                           ;main.c: 2060: rv = readEEPROM(0x59);
 11554  000932  6A0F               	clrf	?_readEEPROM+1,c
 11555  000934  0E59               	movlw	89
 11556  000936  6E0E               	movwf	?_readEEPROM,c
 11557  000938  EC1C  F02A         	call	_readEEPROM	;wreg free
 11558  00093C  EFA9  F009         	goto	L19
 11559  000940                     l10848:
 11560                           
 11561                           ; BSR set to: 0
 11562                           ;main.c: 2065: writeEEPROM(0x5A, val);
 11563  000940  6A0F               	clrf	?_writeEEPROM+1,c
 11564  000942  0E5A               	movlw	90
 11565  000944  6E0E               	movwf	?_writeEEPROM,c
 11566  000946  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11567  00094A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11568                           
 11569                           ;main.c: 2066: rv = readEEPROM(0x5A);
 11570  00094E  6A0F               	clrf	?_readEEPROM+1,c
 11571  000950  0E5A               	movlw	90
 11572  000952  6E0E               	movwf	?_readEEPROM,c
 11573  000954  EC1C  F02A         	call	_readEEPROM	;wreg free
 11574  000958  EFA9  F009         	goto	L19
 11575  00095C                     l10850:
 11576                           
 11577                           ; BSR set to: 0
 11578                           ;main.c: 2075: writeEEPROM(0x5B, val);
 11579  00095C  6A0F               	clrf	?_writeEEPROM+1,c
 11580  00095E  0E5B               	movlw	91
 11581  000960  6E0E               	movwf	?_writeEEPROM,c
 11582  000962  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11583  000966  EC0D  F029         	call	_writeEEPROM	;wreg free
 11584                           
 11585                           ;main.c: 2076: rv = readEEPROM(0x5B);
 11586  00096A  6A0F               	clrf	?_readEEPROM+1,c
 11587  00096C  0E5B               	movlw	91
 11588  00096E  6E0E               	movwf	?_readEEPROM,c
 11589  000970  EC1C  F02A         	call	_readEEPROM	;wreg free
 11590  000974  EFA9  F009         	goto	L19
 11591  000978                     l10852:
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;main.c: 2081: writeEEPROM(0x5C, val);
 11595  000978  6A0F               	clrf	?_writeEEPROM+1,c
 11596  00097A  0E5C               	movlw	92
 11597  00097C  6E0E               	movwf	?_writeEEPROM,c
 11598  00097E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11599  000982  EC0D  F029         	call	_writeEEPROM	;wreg free
 11600                           
 11601                           ;main.c: 2082: rv = readEEPROM(0x5C);
 11602  000986  6A0F               	clrf	?_readEEPROM+1,c
 11603  000988  0E5C               	movlw	92
 11604  00098A  6E0E               	movwf	?_readEEPROM,c
 11605  00098C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11606  000990  EFA9  F009         	goto	L19
 11607  000994                     l10854:
 11608                           
 11609                           ; BSR set to: 0
 11610                           ;main.c: 2087: writeEEPROM(0x5D, val);
 11611  000994  6A0F               	clrf	?_writeEEPROM+1,c
 11612  000996  0E5D               	movlw	93
 11613  000998  6E0E               	movwf	?_writeEEPROM,c
 11614  00099A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11615  00099E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11616                           
 11617                           ;main.c: 2088: rv = readEEPROM(0x5D);
 11618  0009A2  6A0F               	clrf	?_readEEPROM+1,c
 11619  0009A4  0E5D               	movlw	93
 11620  0009A6  6E0E               	movwf	?_readEEPROM,c
 11621  0009A8  EC1C  F02A         	call	_readEEPROM	;wreg free
 11622  0009AC  EFA9  F009         	goto	L19
 11623  0009B0                     l10856:
 11624                           
 11625                           ; BSR set to: 0
 11626                           ;main.c: 2093: writeEEPROM(0x5E, val);
 11627  0009B0  6A0F               	clrf	?_writeEEPROM+1,c
 11628  0009B2  0E5E               	movlw	94
 11629  0009B4  6E0E               	movwf	?_writeEEPROM,c
 11630  0009B6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11631  0009BA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11632                           
 11633                           ;main.c: 2094: rv = readEEPROM(0x5E);
 11634  0009BE  6A0F               	clrf	?_readEEPROM+1,c
 11635  0009C0  0E5E               	movlw	94
 11636  0009C2  6E0E               	movwf	?_readEEPROM,c
 11637  0009C4  EC1C  F02A         	call	_readEEPROM	;wreg free
 11638  0009C8  EFA9  F009         	goto	L19
 11639  0009CC                     l10858:
 11640                           
 11641                           ; BSR set to: 0
 11642                           ;main.c: 2099: writeEEPROM(0x5F, val);
 11643  0009CC  6A0F               	clrf	?_writeEEPROM+1,c
 11644  0009CE  0E5F               	movlw	95
 11645  0009D0  6E0E               	movwf	?_writeEEPROM,c
 11646  0009D2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11647  0009D6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11648                           
 11649                           ;main.c: 2100: rv = readEEPROM(0x5F);
 11650  0009DA  6A0F               	clrf	?_readEEPROM+1,c
 11651  0009DC  0E5F               	movlw	95
 11652  0009DE  6E0E               	movwf	?_readEEPROM,c
 11653  0009E0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11654  0009E4  EFA9  F009         	goto	L19
 11655  0009E8                     l10860:
 11656                           
 11657                           ; BSR set to: 0
 11658                           ;main.c: 2105: writeEEPROM(0x60, val);
 11659  0009E8  6A0F               	clrf	?_writeEEPROM+1,c
 11660  0009EA  0E60               	movlw	96
 11661  0009EC  6E0E               	movwf	?_writeEEPROM,c
 11662  0009EE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11663  0009F2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11664                           
 11665                           ;main.c: 2106: rv = readEEPROM(0x60);
 11666  0009F6  6A0F               	clrf	?_readEEPROM+1,c
 11667  0009F8  0E60               	movlw	96
 11668  0009FA  6E0E               	movwf	?_readEEPROM,c
 11669  0009FC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11670  000A00  EFA9  F009         	goto	L19
 11671  000A04                     l10862:
 11672                           
 11673                           ; BSR set to: 0
 11674                           ;main.c: 2111: writeEEPROM(0x61, val);
 11675  000A04  6A0F               	clrf	?_writeEEPROM+1,c
 11676  000A06  0E61               	movlw	97
 11677  000A08  6E0E               	movwf	?_writeEEPROM,c
 11678  000A0A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11679  000A0E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11680                           
 11681                           ;main.c: 2112: rv = readEEPROM(0x61);
 11682  000A12  6A0F               	clrf	?_readEEPROM+1,c
 11683  000A14  0E61               	movlw	97
 11684  000A16  6E0E               	movwf	?_readEEPROM,c
 11685  000A18  EC1C  F02A         	call	_readEEPROM	;wreg free
 11686  000A1C  EFA9  F009         	goto	L19
 11687  000A20                     l10864:
 11688                           
 11689                           ; BSR set to: 0
 11690                           ;main.c: 2117: writeEEPROM(0x62, val);
 11691  000A20  6A0F               	clrf	?_writeEEPROM+1,c
 11692  000A22  0E62               	movlw	98
 11693  000A24  6E0E               	movwf	?_writeEEPROM,c
 11694  000A26  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11695  000A2A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11696                           
 11697                           ;main.c: 2118: rv = readEEPROM(0x62);
 11698  000A2E  6A0F               	clrf	?_readEEPROM+1,c
 11699  000A30  0E62               	movlw	98
 11700  000A32  6E0E               	movwf	?_readEEPROM,c
 11701  000A34  EC1C  F02A         	call	_readEEPROM	;wreg free
 11702  000A38  EFA9  F009         	goto	L19
 11703  000A3C                     l10866:
 11704                           
 11705                           ; BSR set to: 0
 11706                           ;main.c: 2123: writeEEPROM(0x63, val);
 11707  000A3C  6A0F               	clrf	?_writeEEPROM+1,c
 11708  000A3E  0E63               	movlw	99
 11709  000A40  6E0E               	movwf	?_writeEEPROM,c
 11710  000A42  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11711  000A46  EC0D  F029         	call	_writeEEPROM	;wreg free
 11712                           
 11713                           ;main.c: 2124: rv = readEEPROM(0x63);
 11714  000A4A  6A0F               	clrf	?_readEEPROM+1,c
 11715  000A4C  0E63               	movlw	99
 11716  000A4E  6E0E               	movwf	?_readEEPROM,c
 11717  000A50  EC1C  F02A         	call	_readEEPROM	;wreg free
 11718  000A54  EFA9  F009         	goto	L19
 11719  000A58                     l10868:
 11720                           
 11721                           ; BSR set to: 0
 11722                           ;main.c: 2129: writeEEPROM(0x64, val);
 11723  000A58  6A0F               	clrf	?_writeEEPROM+1,c
 11724  000A5A  0E64               	movlw	100
 11725  000A5C  6E0E               	movwf	?_writeEEPROM,c
 11726  000A5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11727  000A62  EC0D  F029         	call	_writeEEPROM	;wreg free
 11728                           
 11729                           ;main.c: 2130: rv = readEEPROM(0x64);
 11730  000A66  6A0F               	clrf	?_readEEPROM+1,c
 11731  000A68  0E64               	movlw	100
 11732  000A6A  6E0E               	movwf	?_readEEPROM,c
 11733  000A6C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11734  000A70  EFA9  F009         	goto	L19
 11735  000A74                     l10870:
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;main.c: 2135: writeEEPROM(0x65, val);
 11739  000A74  6A0F               	clrf	?_writeEEPROM+1,c
 11740  000A76  0E65               	movlw	101
 11741  000A78  6E0E               	movwf	?_writeEEPROM,c
 11742  000A7A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11743  000A7E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11744                           
 11745                           ;main.c: 2136: rv = readEEPROM(0x65);
 11746  000A82  6A0F               	clrf	?_readEEPROM+1,c
 11747  000A84  0E65               	movlw	101
 11748  000A86  6E0E               	movwf	?_readEEPROM,c
 11749  000A88  EC1C  F02A         	call	_readEEPROM	;wreg free
 11750  000A8C  EFA9  F009         	goto	L19
 11751  000A90                     l10872:
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;main.c: 2141: writeEEPROM(0x66, val);
 11755  000A90  6A0F               	clrf	?_writeEEPROM+1,c
 11756  000A92  0E66               	movlw	102
 11757  000A94  6E0E               	movwf	?_writeEEPROM,c
 11758  000A96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11759  000A9A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11760                           
 11761                           ;main.c: 2142: rv = readEEPROM(0x66);
 11762  000A9E  6A0F               	clrf	?_readEEPROM+1,c
 11763  000AA0  0E66               	movlw	102
 11764  000AA2  6E0E               	movwf	?_readEEPROM,c
 11765  000AA4  EC1C  F02A         	call	_readEEPROM	;wreg free
 11766  000AA8  EFA9  F009         	goto	L19
 11767  000AAC                     l10874:
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;main.c: 2151: writeEEPROM(0x67, val);
 11771  000AAC  6A0F               	clrf	?_writeEEPROM+1,c
 11772  000AAE  0E67               	movlw	103
 11773  000AB0  6E0E               	movwf	?_writeEEPROM,c
 11774  000AB2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11775  000AB6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11776                           
 11777                           ;main.c: 2152: rv = readEEPROM(0x67);
 11778  000ABA  6A0F               	clrf	?_readEEPROM+1,c
 11779  000ABC  0E67               	movlw	103
 11780  000ABE  6E0E               	movwf	?_readEEPROM,c
 11781  000AC0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11782  000AC4  EFA9  F009         	goto	L19
 11783  000AC8                     l10876:
 11784                           
 11785                           ; BSR set to: 0
 11786                           ;main.c: 2157: writeEEPROM(0x68, val);
 11787  000AC8  6A0F               	clrf	?_writeEEPROM+1,c
 11788  000ACA  0E68               	movlw	104
 11789  000ACC  6E0E               	movwf	?_writeEEPROM,c
 11790  000ACE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11791  000AD2  EC0D  F029         	call	_writeEEPROM	;wreg free
 11792                           
 11793                           ;main.c: 2158: rv = readEEPROM(0x68);
 11794  000AD6  6A0F               	clrf	?_readEEPROM+1,c
 11795  000AD8  0E68               	movlw	104
 11796  000ADA  6E0E               	movwf	?_readEEPROM,c
 11797  000ADC  EC1C  F02A         	call	_readEEPROM	;wreg free
 11798  000AE0  EFA9  F009         	goto	L19
 11799  000AE4                     l10878:
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;main.c: 2163: writeEEPROM(0x69, val);
 11803  000AE4  6A0F               	clrf	?_writeEEPROM+1,c
 11804  000AE6  0E69               	movlw	105
 11805  000AE8  6E0E               	movwf	?_writeEEPROM,c
 11806  000AEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11807  000AEE  EC0D  F029         	call	_writeEEPROM	;wreg free
 11808                           
 11809                           ;main.c: 2164: rv = readEEPROM(0x69);
 11810  000AF2  6A0F               	clrf	?_readEEPROM+1,c
 11811  000AF4  0E69               	movlw	105
 11812  000AF6  6E0E               	movwf	?_readEEPROM,c
 11813  000AF8  EC1C  F02A         	call	_readEEPROM	;wreg free
 11814  000AFC  EFA9  F009         	goto	L19
 11815  000B00                     l10880:
 11816                           
 11817                           ; BSR set to: 0
 11818                           ;main.c: 2169: writeEEPROM(0x6A, val);
 11819  000B00  6A0F               	clrf	?_writeEEPROM+1,c
 11820  000B02  0E6A               	movlw	106
 11821  000B04  6E0E               	movwf	?_writeEEPROM,c
 11822  000B06  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11823  000B0A  EC0D  F029         	call	_writeEEPROM	;wreg free
 11824                           
 11825                           ;main.c: 2170: rv = readEEPROM(0x6A);
 11826  000B0E  6A0F               	clrf	?_readEEPROM+1,c
 11827  000B10  0E6A               	movlw	106
 11828  000B12  6E0E               	movwf	?_readEEPROM,c
 11829  000B14  EC1C  F02A         	call	_readEEPROM	;wreg free
 11830  000B18  EFA9  F009         	goto	L19
 11831  000B1C                     l10882:
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;main.c: 2175: writeEEPROM(0x6B, val);
 11835  000B1C  6A0F               	clrf	?_writeEEPROM+1,c
 11836  000B1E  0E6B               	movlw	107
 11837  000B20  6E0E               	movwf	?_writeEEPROM,c
 11838  000B22  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11839  000B26  EC0D  F029         	call	_writeEEPROM	;wreg free
 11840                           
 11841                           ;main.c: 2176: rv = readEEPROM(0x6B);
 11842  000B2A  6A0F               	clrf	?_readEEPROM+1,c
 11843  000B2C  0E6B               	movlw	107
 11844  000B2E  6E0E               	movwf	?_readEEPROM,c
 11845  000B30  EC1C  F02A         	call	_readEEPROM	;wreg free
 11846  000B34  EFA9  F009         	goto	L19
 11847  000B38                     l10884:
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;main.c: 2181: writeEEPROM(0x6C, val);
 11851  000B38  6A0F               	clrf	?_writeEEPROM+1,c
 11852  000B3A  0E6C               	movlw	108
 11853  000B3C  6E0E               	movwf	?_writeEEPROM,c
 11854  000B3E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11855  000B42  EC0D  F029         	call	_writeEEPROM	;wreg free
 11856                           
 11857                           ;main.c: 2182: rv = readEEPROM(0x6C);
 11858  000B46  6A0F               	clrf	?_readEEPROM+1,c
 11859  000B48  0E6C               	movlw	108
 11860  000B4A  6E0E               	movwf	?_readEEPROM,c
 11861  000B4C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11862  000B50  EFA9  F009         	goto	L19
 11863  000B54                     l10886:
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;main.c: 2187: writeEEPROM(0x6D, val);
 11867  000B54  6A0F               	clrf	?_writeEEPROM+1,c
 11868  000B56  0E6D               	movlw	109
 11869  000B58  6E0E               	movwf	?_writeEEPROM,c
 11870  000B5A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11871  000B5E  EC0D  F029         	call	_writeEEPROM	;wreg free
 11872                           
 11873                           ;main.c: 2188: rv = readEEPROM(0x6D);
 11874  000B62  6A0F               	clrf	?_readEEPROM+1,c
 11875  000B64  0E6D               	movlw	109
 11876  000B66  6E0E               	movwf	?_readEEPROM,c
 11877  000B68  EC1C  F02A         	call	_readEEPROM	;wreg free
 11878  000B6C  D3F2               	goto	L19
 11879  000B6E                     l10888:
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;main.c: 2193: writeEEPROM(0x6E, val);
 11883  000B6E  6A0F               	clrf	?_writeEEPROM+1,c
 11884  000B70  0E6E               	movlw	110
 11885  000B72  6E0E               	movwf	?_writeEEPROM,c
 11886  000B74  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11887  000B78  EC0D  F029         	call	_writeEEPROM	;wreg free
 11888                           
 11889                           ;main.c: 2194: rv = readEEPROM(0x6E);
 11890  000B7C  6A0F               	clrf	?_readEEPROM+1,c
 11891  000B7E  0E6E               	movlw	110
 11892  000B80  6E0E               	movwf	?_readEEPROM,c
 11893  000B82  EC1C  F02A         	call	_readEEPROM	;wreg free
 11894  000B86  D3E5               	goto	L19
 11895  000B88                     l10890:
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;main.c: 2199: writeEEPROM(0x6F, val);
 11899  000B88  6A0F               	clrf	?_writeEEPROM+1,c
 11900  000B8A  0E6F               	movlw	111
 11901  000B8C  6E0E               	movwf	?_writeEEPROM,c
 11902  000B8E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11903  000B92  EC0D  F029         	call	_writeEEPROM	;wreg free
 11904                           
 11905                           ;main.c: 2200: rv = readEEPROM(0x6F);
 11906  000B96  6A0F               	clrf	?_readEEPROM+1,c
 11907  000B98  0E6F               	movlw	111
 11908  000B9A  6E0E               	movwf	?_readEEPROM,c
 11909  000B9C  EC1C  F02A         	call	_readEEPROM	;wreg free
 11910  000BA0  D3D8               	goto	L19
 11911  000BA2                     l10892:
 11912                           
 11913                           ; BSR set to: 0
 11914                           ;main.c: 2205: writeEEPROM(0x70, val);
 11915  000BA2  6A0F               	clrf	?_writeEEPROM+1,c
 11916  000BA4  0E70               	movlw	112
 11917  000BA6  6E0E               	movwf	?_writeEEPROM,c
 11918  000BA8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11919  000BAC  EC0D  F029         	call	_writeEEPROM	;wreg free
 11920                           
 11921                           ;main.c: 2206: rv = readEEPROM(0x70);
 11922  000BB0  6A0F               	clrf	?_readEEPROM+1,c
 11923  000BB2  0E70               	movlw	112
 11924  000BB4  6E0E               	movwf	?_readEEPROM,c
 11925  000BB6  EC1C  F02A         	call	_readEEPROM	;wreg free
 11926  000BBA  D3CB               	goto	L19
 11927  000BBC                     l10894:
 11928                           
 11929                           ; BSR set to: 0
 11930                           ;main.c: 2211: writeEEPROM(0x71, val);
 11931  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 11932  000BBE  0E71               	movlw	113
 11933  000BC0  6E0E               	movwf	?_writeEEPROM,c
 11934  000BC2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11935  000BC6  EC0D  F029         	call	_writeEEPROM	;wreg free
 11936                           
 11937                           ;main.c: 2212: rv = readEEPROM(0x71);
 11938  000BCA  6A0F               	clrf	?_readEEPROM+1,c
 11939  000BCC  0E71               	movlw	113
 11940  000BCE  6E0E               	movwf	?_readEEPROM,c
 11941  000BD0  EC1C  F02A         	call	_readEEPROM	;wreg free
 11942  000BD4  D3BE               	goto	L19
 11943  000BD6                     l10896:
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;main.c: 2217: writeEEPROM(0x72, val);
 11947  000BD6  6A0F               	clrf	?_writeEEPROM+1,c
 11948  000BD8  0E72               	movlw	114
 11949  000BDA  6E0E               	movwf	?_writeEEPROM,c
 11950  000BDC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11951  000BE0  EC0D  F029         	call	_writeEEPROM	;wreg free
 11952                           
 11953                           ;main.c: 2218: rv = readEEPROM(0x72);
 11954  000BE4  6A0F               	clrf	?_readEEPROM+1,c
 11955  000BE6  0E72               	movlw	114
 11956  000BE8  6E0E               	movwf	?_readEEPROM,c
 11957  000BEA  EC1C  F02A         	call	_readEEPROM	;wreg free
 11958  000BEE  D3B1               	goto	L19
 11959  000BF0                     l10898:
 11960                           
 11961                           ; BSR set to: 0
 11962                           ;main.c: 2227: writeEEPROM(0x73, val);
 11963  000BF0  6A0F               	clrf	?_writeEEPROM+1,c
 11964  000BF2  0E73               	movlw	115
 11965  000BF4  6E0E               	movwf	?_writeEEPROM,c
 11966  000BF6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11967  000BFA  EC0D  F029         	call	_writeEEPROM	;wreg free
 11968                           
 11969                           ;main.c: 2228: rv = readEEPROM(0x73);
 11970  000BFE  6A0F               	clrf	?_readEEPROM+1,c
 11971  000C00  0E73               	movlw	115
 11972  000C02  6E0E               	movwf	?_readEEPROM,c
 11973  000C04  EC1C  F02A         	call	_readEEPROM	;wreg free
 11974  000C08  D3A4               	goto	L19
 11975  000C0A                     l10900:
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;main.c: 2233: writeEEPROM(0x74, val);
 11979  000C0A  6A0F               	clrf	?_writeEEPROM+1,c
 11980  000C0C  0E74               	movlw	116
 11981  000C0E  6E0E               	movwf	?_writeEEPROM,c
 11982  000C10  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11983  000C14  EC0D  F029         	call	_writeEEPROM	;wreg free
 11984                           
 11985                           ;main.c: 2234: rv = readEEPROM(0x74);
 11986  000C18  6A0F               	clrf	?_readEEPROM+1,c
 11987  000C1A  0E74               	movlw	116
 11988  000C1C  6E0E               	movwf	?_readEEPROM,c
 11989  000C1E  EC1C  F02A         	call	_readEEPROM	;wreg free
 11990  000C22  D397               	goto	L19
 11991  000C24                     l10902:
 11992                           
 11993                           ; BSR set to: 0
 11994                           ;main.c: 2239: writeEEPROM(0x75, val);
 11995  000C24  6A0F               	clrf	?_writeEEPROM+1,c
 11996  000C26  0E75               	movlw	117
 11997  000C28  6E0E               	movwf	?_writeEEPROM,c
 11998  000C2A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11999  000C2E  EC0D  F029         	call	_writeEEPROM	;wreg free
 12000                           
 12001                           ;main.c: 2240: rv = readEEPROM(0x75);
 12002  000C32  6A0F               	clrf	?_readEEPROM+1,c
 12003  000C34  0E75               	movlw	117
 12004  000C36  6E0E               	movwf	?_readEEPROM,c
 12005  000C38  EC1C  F02A         	call	_readEEPROM	;wreg free
 12006  000C3C  D38A               	goto	L19
 12007  000C3E                     l10904:
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;main.c: 2245: writeEEPROM(0x76, val);
 12011  000C3E  6A0F               	clrf	?_writeEEPROM+1,c
 12012  000C40  0E76               	movlw	118
 12013  000C42  6E0E               	movwf	?_writeEEPROM,c
 12014  000C44  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12015  000C48  EC0D  F029         	call	_writeEEPROM	;wreg free
 12016                           
 12017                           ;main.c: 2246: rv = readEEPROM(0x76);
 12018  000C4C  6A0F               	clrf	?_readEEPROM+1,c
 12019  000C4E  0E76               	movlw	118
 12020  000C50  6E0E               	movwf	?_readEEPROM,c
 12021  000C52  EC1C  F02A         	call	_readEEPROM	;wreg free
 12022  000C56  D37D               	goto	L19
 12023  000C58                     l10906:
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;main.c: 2251: writeEEPROM(0x77, val);
 12027  000C58  6A0F               	clrf	?_writeEEPROM+1,c
 12028  000C5A  0E77               	movlw	119
 12029  000C5C  6E0E               	movwf	?_writeEEPROM,c
 12030  000C5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12031  000C62  EC0D  F029         	call	_writeEEPROM	;wreg free
 12032                           
 12033                           ;main.c: 2252: rv = readEEPROM(0x77);
 12034  000C66  6A0F               	clrf	?_readEEPROM+1,c
 12035  000C68  0E77               	movlw	119
 12036  000C6A  6E0E               	movwf	?_readEEPROM,c
 12037  000C6C  EC1C  F02A         	call	_readEEPROM	;wreg free
 12038  000C70  D370               	goto	L19
 12039  000C72                     l10908:
 12040                           
 12041                           ; BSR set to: 0
 12042                           ;main.c: 2257: writeEEPROM(0x78, val);
 12043  000C72  6A0F               	clrf	?_writeEEPROM+1,c
 12044  000C74  0E78               	movlw	120
 12045  000C76  6E0E               	movwf	?_writeEEPROM,c
 12046  000C78  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12047  000C7C  EC0D  F029         	call	_writeEEPROM	;wreg free
 12048                           
 12049                           ;main.c: 2258: rv = readEEPROM(0x78);
 12050  000C80  6A0F               	clrf	?_readEEPROM+1,c
 12051  000C82  0E78               	movlw	120
 12052  000C84  6E0E               	movwf	?_readEEPROM,c
 12053  000C86  EC1C  F02A         	call	_readEEPROM	;wreg free
 12054  000C8A  D363               	goto	L19
 12055  000C8C                     l10910:
 12056                           
 12057                           ; BSR set to: 0
 12058                           ;main.c: 2263: writeEEPROM(0x79, val);
 12059  000C8C  6A0F               	clrf	?_writeEEPROM+1,c
 12060  000C8E  0E79               	movlw	121
 12061  000C90  6E0E               	movwf	?_writeEEPROM,c
 12062  000C92  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12063  000C96  EC0D  F029         	call	_writeEEPROM	;wreg free
 12064                           
 12065                           ;main.c: 2264: rv = readEEPROM(0x79);
 12066  000C9A  6A0F               	clrf	?_readEEPROM+1,c
 12067  000C9C  0E79               	movlw	121
 12068  000C9E  6E0E               	movwf	?_readEEPROM,c
 12069  000CA0  EC1C  F02A         	call	_readEEPROM	;wreg free
 12070  000CA4  D356               	goto	L19
 12071  000CA6                     l10912:
 12072                           
 12073                           ; BSR set to: 0
 12074                           ;main.c: 2269: writeEEPROM(0x7A, val);
 12075  000CA6  6A0F               	clrf	?_writeEEPROM+1,c
 12076  000CA8  0E7A               	movlw	122
 12077  000CAA  6E0E               	movwf	?_writeEEPROM,c
 12078  000CAC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12079  000CB0  EC0D  F029         	call	_writeEEPROM	;wreg free
 12080                           
 12081                           ;main.c: 2270: rv = readEEPROM(0x7A);
 12082  000CB4  6A0F               	clrf	?_readEEPROM+1,c
 12083  000CB6  0E7A               	movlw	122
 12084  000CB8  6E0E               	movwf	?_readEEPROM,c
 12085  000CBA  EC1C  F02A         	call	_readEEPROM	;wreg free
 12086  000CBE  D349               	goto	L19
 12087  000CC0                     l10914:
 12088                           
 12089                           ; BSR set to: 0
 12090                           ;main.c: 2275: writeEEPROM(0x7B, val);
 12091  000CC0  6A0F               	clrf	?_writeEEPROM+1,c
 12092  000CC2  0E7B               	movlw	123
 12093  000CC4  6E0E               	movwf	?_writeEEPROM,c
 12094  000CC6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12095  000CCA  EC0D  F029         	call	_writeEEPROM	;wreg free
 12096                           
 12097                           ;main.c: 2276: rv = readEEPROM(0x7B);
 12098  000CCE  6A0F               	clrf	?_readEEPROM+1,c
 12099  000CD0  0E7B               	movlw	123
 12100  000CD2  6E0E               	movwf	?_readEEPROM,c
 12101  000CD4  EC1C  F02A         	call	_readEEPROM	;wreg free
 12102  000CD8  D33C               	goto	L19
 12103  000CDA                     l10916:
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;main.c: 2281: writeEEPROM(0x7C, val);
 12107  000CDA  6A0F               	clrf	?_writeEEPROM+1,c
 12108  000CDC  0E7C               	movlw	124
 12109  000CDE  6E0E               	movwf	?_writeEEPROM,c
 12110  000CE0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12111  000CE4  EC0D  F029         	call	_writeEEPROM	;wreg free
 12112                           
 12113                           ;main.c: 2282: rv = readEEPROM(0x7C);
 12114  000CE8  6A0F               	clrf	?_readEEPROM+1,c
 12115  000CEA  0E7C               	movlw	124
 12116  000CEC  6E0E               	movwf	?_readEEPROM,c
 12117  000CEE  EC1C  F02A         	call	_readEEPROM	;wreg free
 12118  000CF2  D32F               	goto	L19
 12119  000CF4                     l10918:
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;main.c: 2287: writeEEPROM(0x7D, val);
 12123  000CF4  6A0F               	clrf	?_writeEEPROM+1,c
 12124  000CF6  0E7D               	movlw	125
 12125  000CF8  6E0E               	movwf	?_writeEEPROM,c
 12126  000CFA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12127  000CFE  EC0D  F029         	call	_writeEEPROM	;wreg free
 12128                           
 12129                           ;main.c: 2288: rv = readEEPROM(0x7D);
 12130  000D02  6A0F               	clrf	?_readEEPROM+1,c
 12131  000D04  0E7D               	movlw	125
 12132  000D06  6E0E               	movwf	?_readEEPROM,c
 12133  000D08  EC1C  F02A         	call	_readEEPROM	;wreg free
 12134  000D0C  D322               	goto	L19
 12135  000D0E                     l10920:
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;main.c: 2293: writeEEPROM(0x7E, val);
 12139  000D0E  6A0F               	clrf	?_writeEEPROM+1,c
 12140  000D10  0E7E               	movlw	126
 12141  000D12  6E0E               	movwf	?_writeEEPROM,c
 12142  000D14  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12143  000D18  EC0D  F029         	call	_writeEEPROM	;wreg free
 12144                           
 12145                           ;main.c: 2294: rv = readEEPROM(0x7E);
 12146  000D1C  6A0F               	clrf	?_readEEPROM+1,c
 12147  000D1E  0E7E               	movlw	126
 12148  000D20  6E0E               	movwf	?_readEEPROM,c
 12149  000D22  EC1C  F02A         	call	_readEEPROM	;wreg free
 12150  000D26  D315               	goto	L19
 12151  000D28                     l10922:
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;main.c: 2303: writeEEPROM(0x7F, val );
 12155  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 12156  000D2A  0E7F               	movlw	127
 12157  000D2C  6E0E               	movwf	?_writeEEPROM,c
 12158  000D2E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12159  000D32  EC0D  F029         	call	_writeEEPROM	;wreg free
 12160                           
 12161                           ;main.c: 2304: rv = readEEPROM(0x7F);
 12162  000D36  6A0F               	clrf	?_readEEPROM+1,c
 12163  000D38  0E7F               	movlw	127
 12164  000D3A  6E0E               	movwf	?_readEEPROM,c
 12165  000D3C  EC1C  F02A         	call	_readEEPROM	;wreg free
 12166  000D40  D308               	goto	L19
 12167  000D42                     l10924:
 12168                           
 12169                           ; BSR set to: 0
 12170                           ;main.c: 2309: writeEEPROM(0x80, val );
 12171  000D42  6A0F               	clrf	?_writeEEPROM+1,c
 12172  000D44  0E80               	movlw	128
 12173  000D46  6E0E               	movwf	?_writeEEPROM,c
 12174  000D48  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12175  000D4C  EC0D  F029         	call	_writeEEPROM	;wreg free
 12176                           
 12177                           ;main.c: 2310: rv = readEEPROM(0x80);
 12178  000D50  6A0F               	clrf	?_readEEPROM+1,c
 12179  000D52  0E80               	movlw	128
 12180  000D54  6E0E               	movwf	?_readEEPROM,c
 12181  000D56  EC1C  F02A         	call	_readEEPROM	;wreg free
 12182  000D5A  D2FB               	goto	L19
 12183  000D5C                     l10926:
 12184                           
 12185                           ; BSR set to: 0
 12186                           ;main.c: 2315: writeEEPROM(0x81, val );
 12187  000D5C  6A0F               	clrf	?_writeEEPROM+1,c
 12188  000D5E  0E81               	movlw	129
 12189  000D60  6E0E               	movwf	?_writeEEPROM,c
 12190  000D62  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12191  000D66  EC0D  F029         	call	_writeEEPROM	;wreg free
 12192                           
 12193                           ;main.c: 2316: rv = readEEPROM(0x81);
 12194  000D6A  6A0F               	clrf	?_readEEPROM+1,c
 12195  000D6C  0E81               	movlw	129
 12196  000D6E  6E0E               	movwf	?_readEEPROM,c
 12197  000D70  EC1C  F02A         	call	_readEEPROM	;wreg free
 12198  000D74  D2EE               	goto	L19
 12199  000D76                     l10928:
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;main.c: 2321: writeEEPROM(0x82, val );
 12203  000D76  6A0F               	clrf	?_writeEEPROM+1,c
 12204  000D78  0E82               	movlw	130
 12205  000D7A  6E0E               	movwf	?_writeEEPROM,c
 12206  000D7C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12207  000D80  EC0D  F029         	call	_writeEEPROM	;wreg free
 12208                           
 12209                           ;main.c: 2322: rv = readEEPROM(0x82);
 12210  000D84  6A0F               	clrf	?_readEEPROM+1,c
 12211  000D86  0E82               	movlw	130
 12212  000D88  6E0E               	movwf	?_readEEPROM,c
 12213  000D8A  EC1C  F02A         	call	_readEEPROM	;wreg free
 12214  000D8E  D2E1               	goto	L19
 12215  000D90                     l10930:
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;main.c: 2327: writeEEPROM(0x83, val );
 12219  000D90  6A0F               	clrf	?_writeEEPROM+1,c
 12220  000D92  0E83               	movlw	131
 12221  000D94  6E0E               	movwf	?_writeEEPROM,c
 12222  000D96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12223  000D9A  EC0D  F029         	call	_writeEEPROM	;wreg free
 12224                           
 12225                           ;main.c: 2328: rv = readEEPROM(0x83);
 12226  000D9E  6A0F               	clrf	?_readEEPROM+1,c
 12227  000DA0  0E83               	movlw	131
 12228  000DA2  6E0E               	movwf	?_readEEPROM,c
 12229  000DA4  EC1C  F02A         	call	_readEEPROM	;wreg free
 12230  000DA8  D2D4               	goto	L19
 12231  000DAA                     l10932:
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;main.c: 2333: writeEEPROM(0x84, val );
 12235  000DAA  6A0F               	clrf	?_writeEEPROM+1,c
 12236  000DAC  0E84               	movlw	132
 12237  000DAE  6E0E               	movwf	?_writeEEPROM,c
 12238  000DB0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12239  000DB4  EC0D  F029         	call	_writeEEPROM	;wreg free
 12240                           
 12241                           ;main.c: 2334: rv = readEEPROM(0x84);
 12242  000DB8  6A0F               	clrf	?_readEEPROM+1,c
 12243  000DBA  0E84               	movlw	132
 12244  000DBC  6E0E               	movwf	?_readEEPROM,c
 12245  000DBE  EC1C  F02A         	call	_readEEPROM	;wreg free
 12246  000DC2  D2C7               	goto	L19
 12247  000DC4                     l10934:
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;main.c: 2339: writeEEPROM(0x85, val );
 12251  000DC4  6A0F               	clrf	?_writeEEPROM+1,c
 12252  000DC6  0E85               	movlw	133
 12253  000DC8  6E0E               	movwf	?_writeEEPROM,c
 12254  000DCA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12255  000DCE  EC0D  F029         	call	_writeEEPROM	;wreg free
 12256                           
 12257                           ;main.c: 2340: rv = readEEPROM(0x85);
 12258  000DD2  6A0F               	clrf	?_readEEPROM+1,c
 12259  000DD4  0E85               	movlw	133
 12260  000DD6  6E0E               	movwf	?_readEEPROM,c
 12261  000DD8  EC1C  F02A         	call	_readEEPROM	;wreg free
 12262  000DDC  D2BA               	goto	L19
 12263  000DDE                     l10936:
 12264                           
 12265                           ; BSR set to: 0
 12266                           ;main.c: 2345: writeEEPROM(0x86, val );
 12267  000DDE  6A0F               	clrf	?_writeEEPROM+1,c
 12268  000DE0  0E86               	movlw	134
 12269  000DE2  6E0E               	movwf	?_writeEEPROM,c
 12270  000DE4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12271  000DE8  EC0D  F029         	call	_writeEEPROM	;wreg free
 12272                           
 12273                           ;main.c: 2346: rv = readEEPROM(0x86);
 12274  000DEC  6A0F               	clrf	?_readEEPROM+1,c
 12275  000DEE  0E86               	movlw	134
 12276  000DF0  6E0E               	movwf	?_readEEPROM,c
 12277  000DF2  EC1C  F02A         	call	_readEEPROM	;wreg free
 12278  000DF6  D2AD               	goto	L19
 12279  000DF8                     l10938:
 12280                           
 12281                           ; BSR set to: 0
 12282                           ;main.c: 2351: writeEEPROM(0x87, val );
 12283  000DF8  6A0F               	clrf	?_writeEEPROM+1,c
 12284  000DFA  0E87               	movlw	135
 12285  000DFC  6E0E               	movwf	?_writeEEPROM,c
 12286  000DFE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12287  000E02  EC0D  F029         	call	_writeEEPROM	;wreg free
 12288                           
 12289                           ;main.c: 2352: rv = readEEPROM(0x87);
 12290  000E06  6A0F               	clrf	?_readEEPROM+1,c
 12291  000E08  0E87               	movlw	135
 12292  000E0A  6E0E               	movwf	?_readEEPROM,c
 12293  000E0C  EC1C  F02A         	call	_readEEPROM	;wreg free
 12294  000E10  D2A0               	goto	L19
 12295  000E12                     l10940:
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;main.c: 2357: writeEEPROM(0x88, val );
 12299  000E12  6A0F               	clrf	?_writeEEPROM+1,c
 12300  000E14  0E88               	movlw	136
 12301  000E16  6E0E               	movwf	?_writeEEPROM,c
 12302  000E18  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12303  000E1C  EC0D  F029         	call	_writeEEPROM	;wreg free
 12304                           
 12305                           ;main.c: 2358: rv = readEEPROM(0x88);
 12306  000E20  6A0F               	clrf	?_readEEPROM+1,c
 12307  000E22  0E88               	movlw	136
 12308  000E24  6E0E               	movwf	?_readEEPROM,c
 12309  000E26  EC1C  F02A         	call	_readEEPROM	;wreg free
 12310  000E2A  D293               	goto	L19
 12311  000E2C                     l10942:
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;main.c: 2363: writeEEPROM(0x89, val );
 12315  000E2C  6A0F               	clrf	?_writeEEPROM+1,c
 12316  000E2E  0E89               	movlw	137
 12317  000E30  6E0E               	movwf	?_writeEEPROM,c
 12318  000E32  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12319  000E36  EC0D  F029         	call	_writeEEPROM	;wreg free
 12320                           
 12321                           ;main.c: 2364: rv = readEEPROM(0x89);
 12322  000E3A  6A0F               	clrf	?_readEEPROM+1,c
 12323  000E3C  0E89               	movlw	137
 12324  000E3E  6E0E               	movwf	?_readEEPROM,c
 12325  000E40  EC1C  F02A         	call	_readEEPROM	;wreg free
 12326  000E44  D286               	goto	L19
 12327  000E46                     l10944:
 12328                           
 12329                           ; BSR set to: 0
 12330                           ;main.c: 2369: writeEEPROM(0x8A, val );
 12331  000E46  6A0F               	clrf	?_writeEEPROM+1,c
 12332  000E48  0E8A               	movlw	138
 12333  000E4A  6E0E               	movwf	?_writeEEPROM,c
 12334  000E4C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12335  000E50  EC0D  F029         	call	_writeEEPROM	;wreg free
 12336                           
 12337                           ;main.c: 2370: rv = readEEPROM(0x8A);
 12338  000E54  6A0F               	clrf	?_readEEPROM+1,c
 12339  000E56  0E8A               	movlw	138
 12340  000E58  6E0E               	movwf	?_readEEPROM,c
 12341  000E5A  EC1C  F02A         	call	_readEEPROM	;wreg free
 12342  000E5E  D279               	goto	L19
 12343  000E60                     l10946:
 12344                           
 12345                           ; BSR set to: 0
 12346                           ;main.c: 2379: writeEEPROM(0x8B, val );
 12347  000E60  6A0F               	clrf	?_writeEEPROM+1,c
 12348  000E62  0E8B               	movlw	139
 12349  000E64  6E0E               	movwf	?_writeEEPROM,c
 12350  000E66  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12351  000E6A  EC0D  F029         	call	_writeEEPROM	;wreg free
 12352                           
 12353                           ;main.c: 2380: rv = readEEPROM(0x8B);
 12354  000E6E  6A0F               	clrf	?_readEEPROM+1,c
 12355  000E70  0E8B               	movlw	139
 12356  000E72  6E0E               	movwf	?_readEEPROM,c
 12357  000E74  EC1C  F02A         	call	_readEEPROM	;wreg free
 12358  000E78  D26C               	goto	L19
 12359  000E7A                     l10948:
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;main.c: 2385: writeEEPROM(0x8C, val );
 12363  000E7A  6A0F               	clrf	?_writeEEPROM+1,c
 12364  000E7C  0E8C               	movlw	140
 12365  000E7E  6E0E               	movwf	?_writeEEPROM,c
 12366  000E80  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12367  000E84  EC0D  F029         	call	_writeEEPROM	;wreg free
 12368                           
 12369                           ;main.c: 2386: rv = readEEPROM(0x8C);
 12370  000E88  6A0F               	clrf	?_readEEPROM+1,c
 12371  000E8A  0E8C               	movlw	140
 12372  000E8C  6E0E               	movwf	?_readEEPROM,c
 12373  000E8E  EC1C  F02A         	call	_readEEPROM	;wreg free
 12374  000E92  D25F               	goto	L19
 12375  000E94                     l10950:
 12376                           
 12377                           ; BSR set to: 0
 12378                           ;main.c: 2391: writeEEPROM(0x8D, val );
 12379  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 12380  000E96  0E8D               	movlw	141
 12381  000E98  6E0E               	movwf	?_writeEEPROM,c
 12382  000E9A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12383  000E9E  EC0D  F029         	call	_writeEEPROM	;wreg free
 12384                           
 12385                           ;main.c: 2392: rv = readEEPROM(0x8D);
 12386  000EA2  6A0F               	clrf	?_readEEPROM+1,c
 12387  000EA4  0E8D               	movlw	141
 12388  000EA6  6E0E               	movwf	?_readEEPROM,c
 12389  000EA8  EC1C  F02A         	call	_readEEPROM	;wreg free
 12390  000EAC  D252               	goto	L19
 12391  000EAE                     l10952:
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;main.c: 2397: writeEEPROM(0x8E, val );
 12395  000EAE  6A0F               	clrf	?_writeEEPROM+1,c
 12396  000EB0  0E8E               	movlw	142
 12397  000EB2  6E0E               	movwf	?_writeEEPROM,c
 12398  000EB4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12399  000EB8  EC0D  F029         	call	_writeEEPROM	;wreg free
 12400                           
 12401                           ;main.c: 2398: rv = readEEPROM(0x8E);
 12402  000EBC  6A0F               	clrf	?_readEEPROM+1,c
 12403  000EBE  0E8E               	movlw	142
 12404  000EC0  6E0E               	movwf	?_readEEPROM,c
 12405  000EC2  EC1C  F02A         	call	_readEEPROM	;wreg free
 12406  000EC6  D245               	goto	L19
 12407  000EC8                     l10954:
 12408                           
 12409                           ; BSR set to: 0
 12410                           ;main.c: 2403: writeEEPROM(0x8F, val );
 12411  000EC8  6A0F               	clrf	?_writeEEPROM+1,c
 12412  000ECA  0E8F               	movlw	143
 12413  000ECC  6E0E               	movwf	?_writeEEPROM,c
 12414  000ECE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12415  000ED2  EC0D  F029         	call	_writeEEPROM	;wreg free
 12416                           
 12417                           ;main.c: 2404: rv = readEEPROM(0x8F);
 12418  000ED6  6A0F               	clrf	?_readEEPROM+1,c
 12419  000ED8  0E8F               	movlw	143
 12420  000EDA  6E0E               	movwf	?_readEEPROM,c
 12421  000EDC  EC1C  F02A         	call	_readEEPROM	;wreg free
 12422  000EE0  D238               	goto	L19
 12423  000EE2                     l10956:
 12424                           
 12425                           ; BSR set to: 0
 12426                           ;main.c: 2409: writeEEPROM(0x90, val );
 12427  000EE2  6A0F               	clrf	?_writeEEPROM+1,c
 12428  000EE4  0E90               	movlw	144
 12429  000EE6  6E0E               	movwf	?_writeEEPROM,c
 12430  000EE8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12431  000EEC  EC0D  F029         	call	_writeEEPROM	;wreg free
 12432                           
 12433                           ;main.c: 2410: rv = readEEPROM(0x90);
 12434  000EF0  6A0F               	clrf	?_readEEPROM+1,c
 12435  000EF2  0E90               	movlw	144
 12436  000EF4  6E0E               	movwf	?_readEEPROM,c
 12437  000EF6  EC1C  F02A         	call	_readEEPROM	;wreg free
 12438  000EFA  D22B               	goto	L19
 12439  000EFC                     l10958:
 12440                           
 12441                           ; BSR set to: 0
 12442                           ;main.c: 2415: writeEEPROM(0x91, val );
 12443  000EFC  6A0F               	clrf	?_writeEEPROM+1,c
 12444  000EFE  0E91               	movlw	145
 12445  000F00  6E0E               	movwf	?_writeEEPROM,c
 12446  000F02  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12447  000F06  EC0D  F029         	call	_writeEEPROM	;wreg free
 12448                           
 12449                           ;main.c: 2416: rv = readEEPROM(0x91);
 12450  000F0A  6A0F               	clrf	?_readEEPROM+1,c
 12451  000F0C  0E91               	movlw	145
 12452  000F0E  6E0E               	movwf	?_readEEPROM,c
 12453  000F10  EC1C  F02A         	call	_readEEPROM	;wreg free
 12454  000F14  D21E               	goto	L19
 12455  000F16                     l10960:
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;main.c: 2421: writeEEPROM(0x92, val );
 12459  000F16  6A0F               	clrf	?_writeEEPROM+1,c
 12460  000F18  0E92               	movlw	146
 12461  000F1A  6E0E               	movwf	?_writeEEPROM,c
 12462  000F1C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12463  000F20  EC0D  F029         	call	_writeEEPROM	;wreg free
 12464                           
 12465                           ;main.c: 2422: rv = readEEPROM(0x92);
 12466  000F24  6A0F               	clrf	?_readEEPROM+1,c
 12467  000F26  0E92               	movlw	146
 12468  000F28  6E0E               	movwf	?_readEEPROM,c
 12469  000F2A  EC1C  F02A         	call	_readEEPROM	;wreg free
 12470  000F2E  D211               	goto	L19
 12471  000F30                     l10962:
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;main.c: 2427: writeEEPROM(0x93, val );
 12475  000F30  6A0F               	clrf	?_writeEEPROM+1,c
 12476  000F32  0E93               	movlw	147
 12477  000F34  6E0E               	movwf	?_writeEEPROM,c
 12478  000F36  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12479  000F3A  EC0D  F029         	call	_writeEEPROM	;wreg free
 12480                           
 12481                           ;main.c: 2428: rv = readEEPROM(0x93);
 12482  000F3E  6A0F               	clrf	?_readEEPROM+1,c
 12483  000F40  0E93               	movlw	147
 12484  000F42  6E0E               	movwf	?_readEEPROM,c
 12485  000F44  EC1C  F02A         	call	_readEEPROM	;wreg free
 12486  000F48  D204               	goto	L19
 12487  000F4A                     l10964:
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;main.c: 2433: writeEEPROM(0x94, val );
 12491  000F4A  6A0F               	clrf	?_writeEEPROM+1,c
 12492  000F4C  0E94               	movlw	148
 12493  000F4E  6E0E               	movwf	?_writeEEPROM,c
 12494  000F50  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12495  000F54  EC0D  F029         	call	_writeEEPROM	;wreg free
 12496                           
 12497                           ;main.c: 2434: rv = readEEPROM(0x94);
 12498  000F58  6A0F               	clrf	?_readEEPROM+1,c
 12499  000F5A  0E94               	movlw	148
 12500  000F5C  6E0E               	movwf	?_readEEPROM,c
 12501  000F5E  EC1C  F02A         	call	_readEEPROM	;wreg free
 12502  000F62  D1F7               	goto	L19
 12503  000F64                     l10966:
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;main.c: 2439: writeEEPROM(0x95, val );
 12507  000F64  6A0F               	clrf	?_writeEEPROM+1,c
 12508  000F66  0E95               	movlw	149
 12509  000F68  6E0E               	movwf	?_writeEEPROM,c
 12510  000F6A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12511  000F6E  EC0D  F029         	call	_writeEEPROM	;wreg free
 12512                           
 12513                           ;main.c: 2440: rv = readEEPROM(0x95);
 12514  000F72  6A0F               	clrf	?_readEEPROM+1,c
 12515  000F74  0E95               	movlw	149
 12516  000F76  6E0E               	movwf	?_readEEPROM,c
 12517  000F78  EC1C  F02A         	call	_readEEPROM	;wreg free
 12518  000F7C  D1EA               	goto	L19
 12519  000F7E                     l10968:
 12520                           
 12521                           ; BSR set to: 0
 12522                           ;main.c: 2445: writeEEPROM(0x96, val );
 12523  000F7E  6A0F               	clrf	?_writeEEPROM+1,c
 12524  000F80  0E96               	movlw	150
 12525  000F82  6E0E               	movwf	?_writeEEPROM,c
 12526  000F84  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12527  000F88  EC0D  F029         	call	_writeEEPROM	;wreg free
 12528                           
 12529                           ;main.c: 2446: rv = readEEPROM(0x96);
 12530  000F8C  6A0F               	clrf	?_readEEPROM+1,c
 12531  000F8E  0E96               	movlw	150
 12532  000F90  6E0E               	movwf	?_readEEPROM,c
 12533  000F92  EC1C  F02A         	call	_readEEPROM	;wreg free
 12534  000F96  D1DD               	goto	L19
 12535  000F98                     l10970:
 12536                           
 12537                           ; BSR set to: 0
 12538                           ;main.c: 2455: writeEEPROM(0x97, val);
 12539  000F98  6A0F               	clrf	?_writeEEPROM+1,c
 12540  000F9A  0E97               	movlw	151
 12541  000F9C  6E0E               	movwf	?_writeEEPROM,c
 12542  000F9E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12543  000FA2  EC0D  F029         	call	_writeEEPROM	;wreg free
 12544                           
 12545                           ;main.c: 2456: rv = readEEPROM(0x97);
 12546  000FA6  6A0F               	clrf	?_readEEPROM+1,c
 12547  000FA8  0E97               	movlw	151
 12548  000FAA  6E0E               	movwf	?_readEEPROM,c
 12549  000FAC  EC1C  F02A         	call	_readEEPROM	;wreg free
 12550  000FB0  D1D0               	goto	L19
 12551  000FB2                     l10972:
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;main.c: 2461: writeEEPROM(0x98, val);
 12555  000FB2  6A0F               	clrf	?_writeEEPROM+1,c
 12556  000FB4  0E98               	movlw	152
 12557  000FB6  6E0E               	movwf	?_writeEEPROM,c
 12558  000FB8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12559  000FBC  EC0D  F029         	call	_writeEEPROM	;wreg free
 12560                           
 12561                           ;main.c: 2462: rv = readEEPROM(0x98);
 12562  000FC0  6A0F               	clrf	?_readEEPROM+1,c
 12563  000FC2  0E98               	movlw	152
 12564  000FC4  6E0E               	movwf	?_readEEPROM,c
 12565  000FC6  EC1C  F02A         	call	_readEEPROM	;wreg free
 12566  000FCA  D1C3               	goto	L19
 12567  000FCC                     l10974:
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;main.c: 2467: writeEEPROM(0x99, val);
 12571  000FCC  6A0F               	clrf	?_writeEEPROM+1,c
 12572  000FCE  0E99               	movlw	153
 12573  000FD0  6E0E               	movwf	?_writeEEPROM,c
 12574  000FD2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12575  000FD6  EC0D  F029         	call	_writeEEPROM	;wreg free
 12576  000FDA  6A0F               	clrf	?_readEEPROM+1,c
 12577  000FDC  0E99               	movlw	153
 12578  000FDE  6E0E               	movwf	?_readEEPROM,c
 12579  000FE0  EC1C  F02A         	call	_readEEPROM	;wreg free
 12580  000FE4                     l519:
 12581                           
 12582                           ;main.c: 2472: writeEEPROM(0x9A, val);
 12583  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 12584  000FE6  0E9A               	movlw	154
 12585  000FE8  6E0E               	movwf	?_writeEEPROM,c
 12586  000FEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12587  000FEE  EC0D  F029         	call	_writeEEPROM	;wreg free
 12588                           
 12589                           ;main.c: 2473: rv = readEEPROM(0x9A);
 12590  000FF2  6A0F               	clrf	?_readEEPROM+1,c
 12591  000FF4  0E9A               	movlw	154
 12592  000FF6  6E0E               	movwf	?_readEEPROM,c
 12593  000FF8  EC1C  F02A         	call	_readEEPROM	;wreg free
 12594  000FFC  D1AA               	goto	L19
 12595  000FFE                     l10976:
 12596                           
 12597                           ; BSR set to: 0
 12598                           ;main.c: 2478: writeEEPROM(0x9B, val);
 12599  000FFE  6A0F               	clrf	?_writeEEPROM+1,c
 12600  001000  0E9B               	movlw	155
 12601  001002  6E0E               	movwf	?_writeEEPROM,c
 12602  001004  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12603  001008  EC0D  F029         	call	_writeEEPROM	;wreg free
 12604                           
 12605                           ;main.c: 2479: rv = readEEPROM(0x9B);
 12606  00100C  6A0F               	clrf	?_readEEPROM+1,c
 12607  00100E  0E9B               	movlw	155
 12608  001010  6E0E               	movwf	?_readEEPROM,c
 12609  001012  EC1C  F02A         	call	_readEEPROM	;wreg free
 12610  001016  D19D               	goto	L19
 12611  001018                     l10978:
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;main.c: 2484: writeEEPROM(0x9C, val);
 12615  001018  6A0F               	clrf	?_writeEEPROM+1,c
 12616  00101A  0E9C               	movlw	156
 12617  00101C  6E0E               	movwf	?_writeEEPROM,c
 12618  00101E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12619  001022  EC0D  F029         	call	_writeEEPROM	;wreg free
 12620                           
 12621                           ;main.c: 2485: rv = readEEPROM(0x9C);
 12622  001026  6A0F               	clrf	?_readEEPROM+1,c
 12623  001028  0E9C               	movlw	156
 12624  00102A  6E0E               	movwf	?_readEEPROM,c
 12625  00102C  EC1C  F02A         	call	_readEEPROM	;wreg free
 12626  001030  D190               	goto	L19
 12627  001032                     l522:
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;main.c: 2490: rv = 0;
 12631  001032  6A24               	clrf	vscp_writeAppReg@rv,c
 12632                           
 12633                           ;main.c: 2491: break;
 12634  001034  D18F               	goto	l11014
 12635  001036                     l10980:
 12636                           
 12637                           ; BSR set to: 0
 12638                           ;main.c: 2499: writeEEPROM(0xF2, val);
 12639  001036  6A0F               	clrf	?_writeEEPROM+1,c
 12640  001038  0EF2               	movlw	242
 12641  00103A  6E0E               	movwf	?_writeEEPROM,c
 12642  00103C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12643  001040  EC0D  F029         	call	_writeEEPROM	;wreg free
 12644                           
 12645                           ;main.c: 2500: rv = readEEPROM(0xF2);
 12646  001044  6A0F               	clrf	?_readEEPROM+1,c
 12647  001046  0EF2               	movlw	242
 12648  001048  6E0E               	movwf	?_readEEPROM,c
 12649  00104A  EC1C  F02A         	call	_readEEPROM	;wreg free
 12650  00104E  D181               	goto	L19
 12651  001050                     l10982:
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;main.c: 2504: writeEEPROM(0xF3, val);
 12655  001050  6A0F               	clrf	?_writeEEPROM+1,c
 12656  001052  0EF3               	movlw	243
 12657  001054  6E0E               	movwf	?_writeEEPROM,c
 12658  001056  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12659  00105A  EC0D  F029         	call	_writeEEPROM	;wreg free
 12660                           
 12661                           ;main.c: 2505: rv = readEEPROM(0xF3);
 12662  00105E  6A0F               	clrf	?_readEEPROM+1,c
 12663  001060  0EF3               	movlw	243
 12664  001062  6E0E               	movwf	?_readEEPROM,c
 12665  001064  EC1C  F02A         	call	_readEEPROM	;wreg free
 12666  001068  D174               	goto	L19
 12667  00106A                     l10984:
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;main.c: 2509: rv = ~val;
 12671  00106A  1C21               	comf	vscp_writeAppReg@val,w,c
 12672  00106C  D172               	goto	L19
 12673  00106E                     l10988:
 12674                           
 12675                           ; BSR set to: 0
 12676  00106E  5023               	movf	vscp_writeAppReg@reg,w,c
 12677                           
 12678                           ; Switch size 1, requested type "space"
 12679                           ; Number of cases is 96, Range of values is 0 to 119
 12680                           ; switch strategies available:
 12681                           ; Name         Instructions Cycles
 12682                           ; simple_byte          289   145 (average)
 12683                           ;	Chosen strategy is simple_byte
 12684  001070  E102 EF42  F003    	bz	l10798
 12685  001076  0A01               	xorlw	1	; case 1
 12686  001078  E102 EF50  F003    	bz	l10800
 12687  00107E  0A03               	xorlw	3	; case 2
 12688  001080  E102 EF5E  F003    	bz	l10802
 12689  001086  0A01               	xorlw	1	; case 3
 12690  001088  E102 EF6C  F003    	bz	l10804
 12691  00108E  0A07               	xorlw	7	; case 4
 12692  001090  E102 EF7A  F003    	bz	l10806
 12693  001096  0A01               	xorlw	1	; case 5
 12694  001098  E102 EF88  F003    	bz	l10808
 12695  00109E  0A03               	xorlw	3	; case 6
 12696  0010A0  E102 EF96  F003    	bz	l10810
 12697  0010A6  0A01               	xorlw	1	; case 7
 12698  0010A8  E102 EFA4  F003    	bz	l10812
 12699  0010AE  0A13               	xorlw	19	; case 20
 12700  0010B0  E102 EFB2  F003    	bz	l10814
 12701  0010B6  0A01               	xorlw	1	; case 21
 12702  0010B8  E102 EFC0  F003    	bz	l10816
 12703  0010BE  0A03               	xorlw	3	; case 22
 12704  0010C0  E102 EFCE  F003    	bz	l10818
 12705  0010C6  0A01               	xorlw	1	; case 23
 12706  0010C8  E102 EFDC  F003    	bz	l10820
 12707  0010CE  0A0F               	xorlw	15	; case 24
 12708  0010D0  E102 EFEA  F003    	bz	l10822
 12709  0010D6  0A01               	xorlw	1	; case 25
 12710  0010D8  E102 EFF8  F003    	bz	l10824
 12711  0010DE  0A3F               	xorlw	63	; case 38
 12712  0010E0  E102 EF06  F004    	bz	l10826
 12713  0010E6  0A01               	xorlw	1	; case 39
 12714  0010E8  E102 EF14  F004    	bz	l10828
 12715  0010EE  0A0F               	xorlw	15	; case 40
 12716  0010F0  E102 EF22  F004    	bz	l10830
 12717  0010F6  0A01               	xorlw	1	; case 41
 12718  0010F8  E102 EF30  F004    	bz	l10832
 12719  0010FE  0A03               	xorlw	3	; case 42
 12720  001100  E102 EF3E  F004    	bz	l10834
 12721  001106  0A01               	xorlw	1	; case 43
 12722  001108  E102 EF4C  F004    	bz	l10836
 12723  00110E  0A07               	xorlw	7	; case 44
 12724  001110  E102 EF5A  F004    	bz	l10838
 12725  001116  0A01               	xorlw	1	; case 45
 12726  001118  E102 EF68  F004    	bz	l10840
 12727  00111E  0A03               	xorlw	3	; case 46
 12728  001120  E102 EF76  F004    	bz	l10842
 12729  001126  0A01               	xorlw	1	; case 47
 12730  001128  E102 EF84  F004    	bz	l10844
 12731  00112E  0A1F               	xorlw	31	; case 48
 12732  001130  E102 EF92  F004    	bz	l10846
 12733  001136  0A01               	xorlw	1	; case 49
 12734  001138  E101 D402          	bz	l10848
 12735  00113C  0A03               	xorlw	3	; case 50
 12736  00113E  E101 D40D          	bz	l10850
 12737  001142  0A01               	xorlw	1	; case 51
 12738  001144  E101 D418          	bz	l10852
 12739  001148  0A07               	xorlw	7	; case 52
 12740  00114A  E101 D423          	bz	l10854
 12741  00114E  0A01               	xorlw	1	; case 53
 12742  001150  E101 D42E          	bz	l10856
 12743  001154  0A03               	xorlw	3	; case 54
 12744  001156  E101 D439          	bz	l10858
 12745  00115A  0A01               	xorlw	1	; case 55
 12746  00115C  E101 D444          	bz	l10860
 12747  001160  0A0F               	xorlw	15	; case 56
 12748  001162  E101 D44F          	bz	l10862
 12749  001166  0A01               	xorlw	1	; case 57
 12750  001168  E101 D45A          	bz	l10864
 12751  00116C  0A03               	xorlw	3	; case 58
 12752  00116E  E101 D465          	bz	l10866
 12753  001172  0A01               	xorlw	1	; case 59
 12754  001174  E101 D470          	bz	l10868
 12755  001178  0A07               	xorlw	7	; case 60
 12756  00117A  E101 D47B          	bz	l10870
 12757  00117E  0A01               	xorlw	1	; case 61
 12758  001180  E101 D486          	bz	l10872
 12759  001184  0A03               	xorlw	3	; case 62
 12760  001186  E101 D491          	bz	l10874
 12761  00118A  0A01               	xorlw	1	; case 63
 12762  00118C  E101 D49C          	bz	l10876
 12763  001190  0A7F               	xorlw	127	; case 64
 12764  001192  E101 D4A7          	bz	l10878
 12765  001196  0A01               	xorlw	1	; case 65
 12766  001198  E101 D4B2          	bz	l10880
 12767  00119C  0A03               	xorlw	3	; case 66
 12768  00119E  E101 D4BD          	bz	l10882
 12769  0011A2  0A01               	xorlw	1	; case 67
 12770  0011A4  E101 D4C8          	bz	l10884
 12771  0011A8  0A07               	xorlw	7	; case 68
 12772  0011AA  E101 D4D3          	bz	l10886
 12773  0011AE  0A01               	xorlw	1	; case 69
 12774  0011B0  E101 D4DD          	bz	l10888
 12775  0011B4  0A03               	xorlw	3	; case 70
 12776  0011B6  E101 D4E7          	bz	l10890
 12777  0011BA  0A01               	xorlw	1	; case 71
 12778  0011BC  E101 D4F1          	bz	l10892
 12779  0011C0  0A0F               	xorlw	15	; case 72
 12780  0011C2  E101 D4FB          	bz	l10894
 12781  0011C6  0A01               	xorlw	1	; case 73
 12782  0011C8  E101 D505          	bz	l10896
 12783  0011CC  0A03               	xorlw	3	; case 74
 12784  0011CE  E101 D50F          	bz	l10898
 12785  0011D2  0A01               	xorlw	1	; case 75
 12786  0011D4  E101 D519          	bz	l10900
 12787  0011D8  0A07               	xorlw	7	; case 76
 12788  0011DA  E101 D523          	bz	l10902
 12789  0011DE  0A01               	xorlw	1	; case 77
 12790  0011E0  E101 D52D          	bz	l10904
 12791  0011E4  0A03               	xorlw	3	; case 78
 12792  0011E6  E101 D537          	bz	l10906
 12793  0011EA  0A01               	xorlw	1	; case 79
 12794  0011EC  E101 D541          	bz	l10908
 12795  0011F0  0A1F               	xorlw	31	; case 80
 12796  0011F2  E101 D54B          	bz	l10910
 12797  0011F6  0A01               	xorlw	1	; case 81
 12798  0011F8  E101 D555          	bz	l10912
 12799  0011FC  0A03               	xorlw	3	; case 82
 12800  0011FE  E101 D55F          	bz	l10914
 12801  001202  0A01               	xorlw	1	; case 83
 12802  001204  E101 D569          	bz	l10916
 12803  001208  0A07               	xorlw	7	; case 84
 12804  00120A  E101 D573          	bz	l10918
 12805  00120E  0A01               	xorlw	1	; case 85
 12806  001210  E101 D57D          	bz	l10920
 12807  001214  0A03               	xorlw	3	; case 86
 12808  001216  E101 D587          	bz	l10922
 12809  00121A  0A01               	xorlw	1	; case 87
 12810  00121C  E101 D591          	bz	l10924
 12811  001220  0A0F               	xorlw	15	; case 88
 12812  001222  E101 D59B          	bz	l10926
 12813  001226  0A01               	xorlw	1	; case 89
 12814  001228  E101 D5A5          	bz	l10928
 12815  00122C  0A03               	xorlw	3	; case 90
 12816  00122E  E101 D5AF          	bz	l10930
 12817  001232  0A01               	xorlw	1	; case 91
 12818  001234  E101 D5B9          	bz	l10932
 12819  001238  0A07               	xorlw	7	; case 92
 12820  00123A  E101 D5C3          	bz	l10934
 12821  00123E  0A01               	xorlw	1	; case 93
 12822  001240  E101 D5CD          	bz	l10936
 12823  001244  0A03               	xorlw	3	; case 94
 12824  001246  E101 D5D7          	bz	l10938
 12825  00124A  0A01               	xorlw	1	; case 95
 12826  00124C  E101 D5E1          	bz	l10940
 12827  001250  0A3F               	xorlw	63	; case 96
 12828  001252  E101 D5EB          	bz	l10942
 12829  001256  0A01               	xorlw	1	; case 97
 12830  001258  E101 D5F5          	bz	l10944
 12831  00125C  0A03               	xorlw	3	; case 98
 12832  00125E  E101 D5FF          	bz	l10946
 12833  001262  0A01               	xorlw	1	; case 99
 12834  001264  E101 D609          	bz	l10948
 12835  001268  0A07               	xorlw	7	; case 100
 12836  00126A  E101 D613          	bz	l10950
 12837  00126E  0A01               	xorlw	1	; case 101
 12838  001270  E101 D61D          	bz	l10952
 12839  001274  0A03               	xorlw	3	; case 102
 12840  001276  E101 D627          	bz	l10954
 12841  00127A  0A01               	xorlw	1	; case 103
 12842  00127C  E101 D631          	bz	l10956
 12843  001280  0A0F               	xorlw	15	; case 104
 12844  001282  E101 D63B          	bz	l10958
 12845  001286  0A01               	xorlw	1	; case 105
 12846  001288  E101 D645          	bz	l10960
 12847  00128C  0A03               	xorlw	3	; case 106
 12848  00128E  E101 D64F          	bz	l10962
 12849  001292  0A01               	xorlw	1	; case 107
 12850  001294  E101 D659          	bz	l10964
 12851  001298  0A07               	xorlw	7	; case 108
 12852  00129A  E101 D663          	bz	l10966
 12853  00129E  0A01               	xorlw	1	; case 109
 12854  0012A0  E101 D66D          	bz	l10968
 12855  0012A4  0A03               	xorlw	3	; case 110
 12856  0012A6  E101 D677          	bz	l10970
 12857  0012AA  0A01               	xorlw	1	; case 111
 12858  0012AC  E101 D681          	bz	l10972
 12859  0012B0  0A1F               	xorlw	31	; case 112
 12860  0012B2  E101 D68B          	bz	l10974
 12861  0012B6  0A01               	xorlw	1	; case 113
 12862  0012B8  E101 D694          	bz	l519
 12863  0012BC  0A03               	xorlw	3	; case 114
 12864  0012BE  E101 D69E          	bz	l10976
 12865  0012C2  0A01               	xorlw	1	; case 115
 12866  0012C4  E101 D6A8          	bz	l10978
 12867  0012C8  0A07               	xorlw	7	; case 116
 12868  0012CA  E101 D6B2          	bz	l522
 12869  0012CE  0A01               	xorlw	1	; case 117
 12870  0012D0  E101 D6AF          	bz	l522
 12871  0012D4  0A03               	xorlw	3	; case 118
 12872  0012D6  E101 D6AE          	bz	l10980
 12873  0012DA  0A01               	xorlw	1	; case 119
 12874  0012DC  E101 D6B8          	bz	l10982
 12875  0012E0  D6C4               	goto	l10984
 12876  0012E2                     l10990:
 12877                           
 12878                           ; BSR set to: 0
 12879                           ;main.c: 2513: else if (1 == vscp_page_select) {
 12880  0012E2  0446               	decf	_vscp_page_select,w,c
 12881  0012E4  1047               	iorwf	_vscp_page_select+1,w,c
 12882  0012E6  E136               	bnz	l11014
 12883                           
 12884                           ; BSR set to: 0
 12885                           ;main.c: 2516: if (reg < 72) {
 12886  0012E8  0E48               	movlw	72
 12887  0012EA  6023               	cpfslt	vscp_writeAppReg@reg,c
 12888  0012EC  D010               	goto	l10998
 12889                           
 12890                           ; BSR set to: 0
 12891                           ;main.c: 2517: writeEEPROM(0xAA + reg, val);
 12892  0012EE  0EAA               	movlw	170
 12893  0012F0  D833               	call	PL66	;call to abstracted procedure
 12894  0012F2  EC0D  F029         	call	_writeEEPROM	;wreg free
 12895                           
 12896                           ;main.c: 2518: rv = readEEPROM(0xAA + reg );
 12897  0012F6  0EAA               	movlw	170
 12898  0012F8  2423               	addwf	vscp_writeAppReg@reg,w,c
 12899  0012FA  6E0E               	movwf	?_readEEPROM,c
 12900  0012FC  6A0F               	clrf	?_readEEPROM+1,c
 12901  0012FE  0E00               	movlw	0
 12902  001300  220F               	addwfc	?_readEEPROM+1,f,c
 12903  001302  EC1C  F02A         	call	_readEEPROM	;wreg free
 12904  001306  6E24               	movwf	vscp_writeAppReg@rv,c
 12905                           
 12906                           ;main.c: 2519: writeCoeffs2Ram();
 12907  001308  EC7C  F023         	call	_writeCoeffs2Ram	;wreg free
 12908                           
 12909                           ;main.c: 2520: }
 12910  00130C  D023               	goto	l11014
 12911  00130E                     l10998:
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;main.c: 2522: else if (reg < 84) {
 12915  00130E  0E54               	movlw	84
 12916  001310  6023               	cpfslt	vscp_writeAppReg@reg,c
 12917  001312  D010               	goto	l11010
 12918                           
 12919                           ; BSR set to: 0
 12920                           ;main.c: 2524: uint8_t pos = reg - 72;
 12921  001314  5023               	movf	vscp_writeAppReg@reg,w,c
 12922  001316  0FB8               	addlw	184
 12923  001318  6E22               	movwf	vscp_writeAppReg@pos,c
 12924                           
 12925                           ; BSR set to: 0
 12926                           ;main.c: 2525: if ( pos % 2 ) {
 12927  00131A  A022               	btfss	vscp_writeAppReg@pos,0,c
 12928  00131C  D002               	goto	l11006
 12929                           
 12930                           ; BSR set to: 0
 12931                           ;main.c: 2526: pos--;
 12932  00131E  0622               	decf	vscp_writeAppReg@pos,f,c
 12933                           
 12934                           ;main.c: 2527: }
 12935  001320  D001               	goto	l11008
 12936  001322                     l11006:
 12937                           
 12938                           ; BSR set to: 0
 12939                           ;main.c: 2528: else {
 12940                           ;main.c: 2529: pos++;
 12941  001322  2A22               	incf	vscp_writeAppReg@pos,f,c
 12942  001324                     l11008:
 12943                           
 12944                           ; BSR set to: 0
 12945                           ;main.c: 2530: }
 12946                           ;main.c: 2531: rv = adc[ pos ];
 12947  001324  0EA2               	movlw	low _adc
 12948  001326  2422               	addwf	vscp_writeAppReg@pos,w,c
 12949  001328  6ED9               	movwf	fsr2l,c
 12950  00132A  6ADA               	clrf	fsr2h,c
 12951  00132C  0E01               	movlw	high _adc
 12952  00132E  22DA               	addwfc	fsr2h,f,c
 12953  001330  50DF               	movf	indf2,w,c
 12954  001332  D00F               	goto	L19
 12955  001334                     l11010:
 12956                           
 12957                           ; BSR set to: 0
 12958                           ;main.c: 2534: else if (reg < 98) {
 12959  001334  0E62               	movlw	98
 12960  001336  6023               	cpfslt	vscp_writeAppReg@reg,c
 12961  001338  D00D               	goto	l11014
 12962                           
 12963                           ; BSR set to: 0
 12964                           ;main.c: 2535: writeEEPROM( 0x9E + reg - 84, val );
 12965  00133A  0E4A               	movlw	74
 12966  00133C  D80D               	call	PL66	;call to abstracted procedure
 12967  00133E  EC0D  F029         	call	_writeEEPROM	;wreg free
 12968                           
 12969                           ;main.c: 2536: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12970  001342  0E4A               	movlw	74
 12971  001344  2423               	addwf	vscp_writeAppReg@reg,w,c
 12972  001346  6E0E               	movwf	?_readEEPROM,c
 12973  001348  6A0F               	clrf	?_readEEPROM+1,c
 12974  00134A  0E00               	movlw	0
 12975  00134C  220F               	addwfc	?_readEEPROM+1,f,c
 12976  00134E  EC1C  F02A         	call	_readEEPROM	;wreg free
 12977  001352                     L19:
 12978  001352  6E24               	movwf	vscp_writeAppReg@rv,c
 12979  001354                     l11014:
 12980                           
 12981                           ;main.c: 2537: }
 12982                           ;main.c: 2538: }
 12983                           ;main.c: 2540: return rv;
 12984  001354  5024               	movf	vscp_writeAppReg@rv,w,c
 12985  001356  0012               	return	
 12986  001358                     __end_of_vscp_writeAppReg:
 12987                           	opt stack 0
 12988  001358                     PL66:
 12989                           	opt stack 23
 12990  001358  2423               	addwf	vscp_writeAppReg@reg,w,c
 12991  00135A  6E0E               	movwf	?_writeEEPROM,c
 12992  00135C  6A0F               	clrf	?_writeEEPROM+1,c
 12993  00135E  0E00               	movlw	0
 12994  001360  220F               	addwfc	?_writeEEPROM+1,f,c
 12995  001362  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12996  001366  0C00               	retlw	0
 12997  001368                     __end_ofPL66:
 12998                           	opt stack 0
 12999                           tblptru	equ	0xFF8
 13000                           tblptrh	equ	0xFF7
 13001                           tblptrl	equ	0xFF6
 13002                           tablat	equ	0xFF5
 13003                           prodh	equ	0xFF4
 13004                           prodl	equ	0xFF3
 13005                           intcon	equ	0xFF2
 13006                           postinc0	equ	0xFEE
 13007                           wreg	equ	0xFE8
 13008                           indf1	equ	0xFE7
 13009                           postdec1	equ	0xFE5
 13010                           fsr1h	equ	0xFE2
 13011                           fsr1l	equ	0xFE1
 13012                           indf2	equ	0xFDF
 13013                           postinc2	equ	0xFDE
 13014                           postdec2	equ	0xFDD
 13015                           plusw2	equ	0xFDB
 13016                           fsr2h	equ	0xFDA
 13017                           fsr2l	equ	0xFD9
 13018                           status	equ	0xFD8
 13019                           
 13020 ;; *************** function _vscp_readRegister *****************
 13021 ;; Defined at:
 13022 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
 13023 ;; Parameters:    Size  Location     Type
 13024 ;;  reg             1    wreg     unsigned char 
 13025 ;; Auto vars:     Size  Location     Type
 13026 ;;  reg             1   20[COMRAM] unsigned char 
 13027 ;; Return value:  Size  Location     Type
 13028 ;;                  1    wreg      unsigned char 
 13029 ;; Registers used:
 13030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13031 ;; Tracked objects:
 13032 ;;		On entry : F/0
 13033 ;;		On exit  : 0/0
 13034 ;;		Unchanged: 0/0
 13035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13036 ;;      Params:         0       0       0       0       0       0       0
 13037 ;;      Locals:         1       0       0       0       0       0       0
 13038 ;;      Temps:          0       0       0       0       0       0       0
 13039 ;;      Totals:         1       0       0       0       0       0       0
 13040 ;;Total ram usage:        1 bytes
 13041 ;; Hardware stack levels used:    1
 13042 ;; Hardware stack levels required when called:    5
 13043 ;; This function calls:
 13044 ;;		_vscp_readAppReg
 13045 ;;		_vscp_readStdReg
 13046 ;; This function is called by:
 13047 ;;		_vscp_handleProtocolEvent
 13048 ;; This function uses a non-reentrant model
 13049 ;;
 13050                           
 13051                           	psect	text45
 13052  00532C                     __ptext45:
 13053                           	opt stack 0
 13054  00532C                     _vscp_readRegister:
 13055                           	opt stack 23
 13056                           
 13057                           ;incstack = 0
 13058                           ;incstack = 0
 13059                           ;vscp_readRegister@reg stored from wreg
 13060  00532C  CFE8 F015          	movff	wreg,vscp_readRegister@reg
 13061                           
 13062                           ; BSR set to: 0
 13063                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
 13064  005330  0E7F               	movlw	127
 13065  005332  6415               	cpfsgt	vscp_readRegister@reg,c
 13066  005334  D004               	goto	l11262
 13067                           
 13068                           ; BSR set to: 0
 13069                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
 13070  005336  5015               	movf	vscp_readRegister@reg,w,c
 13071  005338  ECD8  F01F         	call	_vscp_readStdReg
 13072  00533C  D003               	goto	l1107
 13073  00533E                     l11262:
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
 13077  00533E  5015               	movf	vscp_readRegister@reg,w,c
 13078  005340  EC08  F00E         	call	_vscp_readAppReg
 13079  005344                     l1107:
 13080  005344  0012               	return	
 13081  005346                     __end_of_vscp_readRegister:
 13082                           	opt stack 0
 13083                           tblptru	equ	0xFF8
 13084                           tblptrh	equ	0xFF7
 13085                           tblptrl	equ	0xFF6
 13086                           tablat	equ	0xFF5
 13087                           prodh	equ	0xFF4
 13088                           prodl	equ	0xFF3
 13089                           intcon	equ	0xFF2
 13090                           postinc0	equ	0xFEE
 13091                           wreg	equ	0xFE8
 13092                           indf1	equ	0xFE7
 13093                           postdec1	equ	0xFE5
 13094                           fsr1h	equ	0xFE2
 13095                           fsr1l	equ	0xFE1
 13096                           indf2	equ	0xFDF
 13097                           postinc2	equ	0xFDE
 13098                           postdec2	equ	0xFDD
 13099                           plusw2	equ	0xFDB
 13100                           fsr2h	equ	0xFDA
 13101                           fsr2l	equ	0xFD9
 13102                           status	equ	0xFD8
 13103                           
 13104 ;; *************** function _vscp_readStdReg *****************
 13105 ;; Defined at:
 13106 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
 13107 ;; Parameters:    Size  Location     Type
 13108 ;;  reg             1    wreg     unsigned char 
 13109 ;; Auto vars:     Size  Location     Type
 13110 ;;  reg             1   19[COMRAM] unsigned char 
 13111 ;;  rv              1   18[COMRAM] unsigned char 
 13112 ;; Return value:  Size  Location     Type
 13113 ;;                  1    wreg      unsigned char 
 13114 ;; Registers used:
 13115 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13116 ;; Tracked objects:
 13117 ;;		On entry : F/0
 13118 ;;		On exit  : 0/0
 13119 ;;		Unchanged: 0/0
 13120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13121 ;;      Params:         0       0       0       0       0       0       0
 13122 ;;      Locals:         2       0       0       0       0       0       0
 13123 ;;      Temps:          0       0       0       0       0       0       0
 13124 ;;      Totals:         2       0       0       0       0       0       0
 13125 ;;Total ram usage:        2 bytes
 13126 ;; Hardware stack levels used:    1
 13127 ;; Hardware stack levels required when called:    4
 13128 ;; This function calls:
 13129 ;;		_vscp_getMajorVersion
 13130 ;;		_vscp_getMinorVersion
 13131 ;;		_vscp_getSubMinorVersion
 13132 ;;		_vscp_getGUID
 13133 ;;		_vscp_getMDF_URL
 13134 ;;		_vscp_getUserID
 13135 ;;		_vscp_getManufacturerId
 13136 ;;		_vscp_getBootLoaderAlgorithm
 13137 ;;		_vscp_getBufferSize
 13138 ;;		_vscp_getRegisterPagesUsed
 13139 ;; This function is called by:
 13140 ;;		_vscp_readRegister
 13141 ;;		_vscp_handleProtocolEvent
 13142 ;; This function uses a non-reentrant model
 13143 ;;
 13144                           
 13145                           	psect	text46
 13146  003FB0                     __ptext46:
 13147                           	opt stack 0
 13148  003FB0                     _vscp_readStdReg:
 13149                           	opt stack 24
 13150                           
 13151                           ;incstack = 0
 13152                           ;incstack = 0
 13153                           ;vscp_readStdReg@reg stored from wreg
 13154  003FB0  CFE8 F014          	movff	wreg,vscp_readStdReg@reg
 13155                           
 13156                           ; BSR set to: 0
 13157                           ;vscp_firmware.c: 569: if (0x80 == reg) {
 13158                           
 13159                           ; BSR set to: 0
 13160  003FB4  5014               	movf	vscp_readStdReg@reg,w,c
 13161  003FB6  0A80               	xorlw	128
 13162  003FB8  E104               	bnz	l11272
 13163                           
 13164                           ; BSR set to: 0
 13165                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
 13166  003FBA  C04B  F013         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 13167                           
 13168                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
 13169  003FBE  6A4B               	clrf	_vscp_alarmstatus,c
 13170                           
 13171                           ;vscp_firmware.c: 575: }
 13172  003FC0  D067               	goto	l11338
 13173  003FC2                     l11272:
 13174                           
 13175                           ; BSR set to: 0
 13176                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
 13177  003FC2  5014               	movf	vscp_readStdReg@reg,w,c
 13178  003FC4  0A81               	xorlw	129
 13179  003FC6  E102               	bnz	l11276
 13180                           
 13181                           ; BSR set to: 0
 13182                           ;vscp_firmware.c: 579: rv = 1;
 13183  003FC8  0E01               	movlw	1
 13184  003FCA  D061               	goto	L20
 13185  003FCC                     l11276:
 13186                           
 13187                           ; BSR set to: 0
 13188                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
 13189  003FCC  5014               	movf	vscp_readStdReg@reg,w,c
 13190  003FCE  0A82               	xorlw	130
 13191  003FD0  E102               	bnz	l11280
 13192                           
 13193                           ; BSR set to: 0
 13194                           ;vscp_firmware.c: 585: rv = 5;
 13195  003FD2  0E05               	movlw	5
 13196  003FD4  D05C               	goto	L20
 13197  003FD6                     l11280:
 13198                           
 13199                           ; BSR set to: 0
 13200                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
 13201  003FD6  5014               	movf	vscp_readStdReg@reg,w,c
 13202  003FD8  0A83               	xorlw	131
 13203  003FDA  E102               	bnz	l11284
 13204                           
 13205                           ; BSR set to: 0
 13206                           ;vscp_firmware.c: 591: rv = 0;
 13207  003FDC  6A13               	clrf	vscp_readStdReg@rv,c
 13208                           
 13209                           ;vscp_firmware.c: 593: }
 13210  003FDE  D058               	goto	l11338
 13211  003FE0                     l11284:
 13212                           
 13213                           ; BSR set to: 0
 13214                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
 13215  003FE0  5014               	movf	vscp_readStdReg@reg,w,c
 13216  003FE2  0A94               	xorlw	148
 13217  003FE4  E103               	bnz	l11288
 13218                           
 13219                           ; BSR set to: 0
 13220                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
 13221  003FE6  EC6D  F02A         	call	_vscp_getMajorVersion	;wreg free
 13222  003FEA  D051               	goto	L20
 13223  003FEC                     l11288:
 13224                           
 13225                           ; BSR set to: 0
 13226                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
 13227  003FEC  5014               	movf	vscp_readStdReg@reg,w,c
 13228  003FEE  0A95               	xorlw	149
 13229  003FF0  E103               	bnz	l11292
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
 13233  003FF2  EC6C  F02A         	call	_vscp_getMinorVersion	;wreg free
 13234  003FF6  D04B               	goto	L20
 13235  003FF8                     l11292:
 13236                           
 13237                           ; BSR set to: 0
 13238                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
 13239  003FF8  5014               	movf	vscp_readStdReg@reg,w,c
 13240  003FFA  0A96               	xorlw	150
 13241  003FFC  E103               	bnz	l11296
 13242                           
 13243                           ; BSR set to: 0
 13244                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
 13245  003FFE  EC6B  F02A         	call	_vscp_getSubMinorVersion	;wreg free
 13246  004002  D045               	goto	L20
 13247  004004                     l11296:
 13248                           
 13249                           ; BSR set to: 0
 13250                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
 13251  004004  0E89               	movlw	137
 13252  004006  6014               	cpfslt	vscp_readStdReg@reg,c
 13253  004008  D005               	goto	l11300
 13254                           
 13255                           ; BSR set to: 0
 13256                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
 13257  00400A  5014               	movf	vscp_readStdReg@reg,w,c
 13258  00400C  0F7C               	addlw	124
 13259  00400E  ECF6  F029         	call	_vscp_getUserID
 13260  004012  D03D               	goto	L20
 13261  004014                     l11300:
 13262                           
 13263                           ; BSR set to: 0
 13264                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
 13265                           ;vscp_firmware.c: 619: (reg < 0x91)) {
 13266  004014  0E88               	movlw	136
 13267  004016  6414               	cpfsgt	vscp_readStdReg@reg,c
 13268  004018  D008               	goto	l11306
 13269                           
 13270                           ; BSR set to: 0
 13271  00401A  0E91               	movlw	145
 13272  00401C  6014               	cpfslt	vscp_readStdReg@reg,c
 13273  00401E  D005               	goto	l11306
 13274                           
 13275                           ; BSR set to: 0
 13276                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
 13277  004020  5014               	movf	vscp_readStdReg@reg,w,c
 13278  004022  0F77               	addlw	119
 13279  004024  ECEC  F029         	call	_vscp_getManufacturerId
 13280  004028  D032               	goto	L20
 13281  00402A                     l11306:
 13282                           
 13283                           ; BSR set to: 0
 13284                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
 13285  00402A  5014               	movf	vscp_readStdReg@reg,w,c
 13286  00402C  0A91               	xorlw	145
 13287  00402E  E103               	bnz	l11310
 13288                           
 13289                           ; BSR set to: 0
 13290                           ;vscp_firmware.c: 628: rv = vscp_nickname;
 13291  004030  C0BA  F013         	movff	_vscp_nickname,vscp_readStdReg@rv
 13292                           
 13293                           ;vscp_firmware.c: 630: }
 13294  004034  D02D               	goto	l11338
 13295  004036                     l11310:
 13296                           
 13297                           ; BSR set to: 0
 13298                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
 13299  004036  5014               	movf	vscp_readStdReg@reg,w,c
 13300  004038  0A93               	xorlw	147
 13301  00403A  E103               	bnz	l11314
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
 13305  00403C  C046  F013         	movff	_vscp_page_select,vscp_readStdReg@rv
 13306                           
 13307                           ;vscp_firmware.c: 636: }
 13308  004040  D027               	goto	l11338
 13309  004042                     l11314:
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
 13313  004042  5014               	movf	vscp_readStdReg@reg,w,c
 13314  004044  0A92               	xorlw	146
 13315  004046  E102               	bnz	l11318
 13316                           
 13317                           ; BSR set to: 0
 13318                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
 13319  004048  5047               	movf	_vscp_page_select+1,w,c
 13320  00404A  D021               	goto	L20
 13321  00404C                     l11318:
 13322                           
 13323                           ; BSR set to: 0
 13324                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
 13325  00404C  5014               	movf	vscp_readStdReg@reg,w,c
 13326  00404E  0A97               	xorlw	151
 13327  004050  E103               	bnz	l11322
 13328                           
 13329                           ; BSR set to: 0
 13330                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
 13331  004052  EC6A  F02A         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13332  004056  D01B               	goto	L20
 13333  004058                     l11322:
 13334                           
 13335                           ; BSR set to: 0
 13336                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
 13337  004058  5014               	movf	vscp_readStdReg@reg,w,c
 13338  00405A  0A98               	xorlw	152
 13339  00405C  E103               	bnz	l11326
 13340                           
 13341                           ; BSR set to: 0
 13342                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
 13343  00405E  EC69  F02A         	call	_vscp_getBufferSize	;wreg free
 13344  004062  D015               	goto	L20
 13345  004064                     l11326:
 13346                           
 13347                           ; BSR set to: 0
 13348                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
 13349  004064  5014               	movf	vscp_readStdReg@reg,w,c
 13350  004066  0A99               	xorlw	153
 13351  004068  E103               	bnz	l11330
 13352                           
 13353                           ; BSR set to: 0
 13354                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
 13355  00406A  EC68  F02A         	call	_vscp_getRegisterPagesUsed	;wreg free
 13356  00406E  D00F               	goto	L20
 13357  004070                     l11330:
 13358                           
 13359                           ; BSR set to: 0
 13360                           ;vscp_firmware.c: 656: else if ((reg > (0xD0 - 1)) &&
 13361                           ;vscp_firmware.c: 657: (reg < 0xE0)) {
 13362  004070  0ECF               	movlw	207
 13363  004072  6414               	cpfsgt	vscp_readStdReg@reg,c
 13364  004074  D008               	goto	l11336
 13365                           
 13366                           ; BSR set to: 0
 13367  004076  0EE0               	movlw	224
 13368  004078  6014               	cpfslt	vscp_readStdReg@reg,c
 13369  00407A  D005               	goto	l11336
 13370                           
 13371                           ; BSR set to: 0
 13372                           ;vscp_firmware.c: 660: rv = vscp_getGUID(reg - 0xD0);
 13373  00407C  5014               	movf	vscp_readStdReg@reg,w,c
 13374  00407E  0F30               	addlw	48
 13375  004080  EC00  F02A         	call	_vscp_getGUID
 13376  004084  D004               	goto	L20
 13377  004086                     l11336:
 13378                           
 13379                           ; BSR set to: 0
 13380                           ;vscp_firmware.c: 663: else {
 13381                           ;vscp_firmware.c: 666: rv = vscp_getMDF_URL(reg - 0xE0);
 13382  004086  5014               	movf	vscp_readStdReg@reg,w,c
 13383  004088  0F20               	addlw	32
 13384  00408A  ECC8  F029         	call	_vscp_getMDF_URL
 13385  00408E                     L20:
 13386  00408E  6E13               	movwf	vscp_readStdReg@rv,c
 13387  004090                     l11338:
 13388                           
 13389                           ;vscp_firmware.c: 668: }
 13390                           ;vscp_firmware.c: 670: return rv;
 13391  004090  5013               	movf	vscp_readStdReg@rv,w,c
 13392  004092  0012               	return	
 13393  004094                     __end_of_vscp_readStdReg:
 13394                           	opt stack 0
 13395                           tblptru	equ	0xFF8
 13396                           tblptrh	equ	0xFF7
 13397                           tblptrl	equ	0xFF6
 13398                           tablat	equ	0xFF5
 13399                           prodh	equ	0xFF4
 13400                           prodl	equ	0xFF3
 13401                           intcon	equ	0xFF2
 13402                           postinc0	equ	0xFEE
 13403                           wreg	equ	0xFE8
 13404                           indf1	equ	0xFE7
 13405                           postdec1	equ	0xFE5
 13406                           fsr1h	equ	0xFE2
 13407                           fsr1l	equ	0xFE1
 13408                           indf2	equ	0xFDF
 13409                           postinc2	equ	0xFDE
 13410                           postdec2	equ	0xFDD
 13411                           plusw2	equ	0xFDB
 13412                           fsr2h	equ	0xFDA
 13413                           fsr2l	equ	0xFD9
 13414                           status	equ	0xFD8
 13415                           
 13416 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13417 ;; Defined at:
 13418 ;;		line 2712 in file "../main.c"
 13419 ;; Parameters:    Size  Location     Type
 13420 ;;		None
 13421 ;; Auto vars:     Size  Location     Type
 13422 ;;		None
 13423 ;; Return value:  Size  Location     Type
 13424 ;;                  1    wreg      unsigned char 
 13425 ;; Registers used:
 13426 ;;		wreg
 13427 ;; Tracked objects:
 13428 ;;		On entry : F/0
 13429 ;;		On exit  : F/0
 13430 ;;		Unchanged: F/0
 13431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13432 ;;      Params:         0       0       0       0       0       0       0
 13433 ;;      Locals:         0       0       0       0       0       0       0
 13434 ;;      Temps:          0       0       0       0       0       0       0
 13435 ;;      Totals:         0       0       0       0       0       0       0
 13436 ;;Total ram usage:        0 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; Hardware stack levels required when called:    2
 13439 ;; This function calls:
 13440 ;;		Nothing
 13441 ;; This function is called by:
 13442 ;;		_vscp_readStdReg
 13443 ;; This function uses a non-reentrant model
 13444 ;;
 13445                           
 13446                           	psect	text47
 13447  0054D0                     __ptext47:
 13448                           	opt stack 0
 13449  0054D0                     _vscp_getRegisterPagesUsed:
 13450                           	opt stack 25
 13451                           
 13452                           ; BSR set to: 0
 13453                           
 13454                           ; BSR set to: 0
 13455                           ;main.c: 2713: return 1;
 13456                           
 13457                           ;incstack = 0
 13458                           ;incstack = 0
 13459  0054D0  0C01               	retlw	1
 13460  0054D2                     __end_of_vscp_getRegisterPagesUsed:
 13461                           	opt stack 0
 13462                           tblptru	equ	0xFF8
 13463                           tblptrh	equ	0xFF7
 13464                           tblptrl	equ	0xFF6
 13465                           tablat	equ	0xFF5
 13466                           prodh	equ	0xFF4
 13467                           prodl	equ	0xFF3
 13468                           intcon	equ	0xFF2
 13469                           postinc0	equ	0xFEE
 13470                           wreg	equ	0xFE8
 13471                           indf1	equ	0xFE7
 13472                           postdec1	equ	0xFE5
 13473                           fsr1h	equ	0xFE2
 13474                           fsr1l	equ	0xFE1
 13475                           indf2	equ	0xFDF
 13476                           postinc2	equ	0xFDE
 13477                           postdec2	equ	0xFDD
 13478                           plusw2	equ	0xFDB
 13479                           fsr2h	equ	0xFDA
 13480                           fsr2l	equ	0xFD9
 13481                           status	equ	0xFD8
 13482                           
 13483 ;; *************** function _vscp_getBufferSize *****************
 13484 ;; Defined at:
 13485 ;;		line 2665 in file "../main.c"
 13486 ;; Parameters:    Size  Location     Type
 13487 ;;		None
 13488 ;; Auto vars:     Size  Location     Type
 13489 ;;		None
 13490 ;; Return value:  Size  Location     Type
 13491 ;;                  1    wreg      unsigned char 
 13492 ;; Registers used:
 13493 ;;		wreg
 13494 ;; Tracked objects:
 13495 ;;		On entry : F/0
 13496 ;;		On exit  : F/0
 13497 ;;		Unchanged: F/0
 13498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13499 ;;      Params:         0       0       0       0       0       0       0
 13500 ;;      Locals:         0       0       0       0       0       0       0
 13501 ;;      Temps:          0       0       0       0       0       0       0
 13502 ;;      Totals:         0       0       0       0       0       0       0
 13503 ;;Total ram usage:        0 bytes
 13504 ;; Hardware stack levels used:    1
 13505 ;; Hardware stack levels required when called:    2
 13506 ;; This function calls:
 13507 ;;		Nothing
 13508 ;; This function is called by:
 13509 ;;		_vscp_readStdReg
 13510 ;; This function uses a non-reentrant model
 13511 ;;
 13512                           
 13513                           	psect	text48
 13514  0054D2                     __ptext48:
 13515                           	opt stack 0
 13516  0054D2                     _vscp_getBufferSize:
 13517                           	opt stack 25
 13518                           
 13519                           ; BSR set to: 0
 13520                           
 13521                           ; BSR set to: 0
 13522                           ;main.c: 2666: return 8;
 13523                           
 13524                           ; BSR set to: 0
 13525                           ;incstack = 0
 13526                           ;incstack = 0
 13527  0054D2  0C08               	retlw	8
 13528  0054D4                     __end_of_vscp_getBufferSize:
 13529                           	opt stack 0
 13530                           tblptru	equ	0xFF8
 13531                           tblptrh	equ	0xFF7
 13532                           tblptrl	equ	0xFF6
 13533                           tablat	equ	0xFF5
 13534                           prodh	equ	0xFF4
 13535                           prodl	equ	0xFF3
 13536                           intcon	equ	0xFF2
 13537                           postinc0	equ	0xFEE
 13538                           wreg	equ	0xFE8
 13539                           indf1	equ	0xFE7
 13540                           postdec1	equ	0xFE5
 13541                           fsr1h	equ	0xFE2
 13542                           fsr1l	equ	0xFE1
 13543                           indf2	equ	0xFDF
 13544                           postinc2	equ	0xFDE
 13545                           postdec2	equ	0xFDD
 13546                           plusw2	equ	0xFDB
 13547                           fsr2h	equ	0xFDA
 13548                           fsr2l	equ	0xFD9
 13549                           status	equ	0xFD8
 13550                           
 13551 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13552 ;; Defined at:
 13553 ;;		line 2656 in file "../main.c"
 13554 ;; Parameters:    Size  Location     Type
 13555 ;;		None
 13556 ;; Auto vars:     Size  Location     Type
 13557 ;;		None
 13558 ;; Return value:  Size  Location     Type
 13559 ;;                  1    wreg      unsigned char 
 13560 ;; Registers used:
 13561 ;;		wreg
 13562 ;; Tracked objects:
 13563 ;;		On entry : F/0
 13564 ;;		On exit  : F/0
 13565 ;;		Unchanged: F/0
 13566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13567 ;;      Params:         0       0       0       0       0       0       0
 13568 ;;      Locals:         0       0       0       0       0       0       0
 13569 ;;      Temps:          0       0       0       0       0       0       0
 13570 ;;      Totals:         0       0       0       0       0       0       0
 13571 ;;Total ram usage:        0 bytes
 13572 ;; Hardware stack levels used:    1
 13573 ;; Hardware stack levels required when called:    2
 13574 ;; This function calls:
 13575 ;;		Nothing
 13576 ;; This function is called by:
 13577 ;;		_vscp_readStdReg
 13578 ;; This function uses a non-reentrant model
 13579 ;;
 13580                           
 13581                           	psect	text49
 13582  0054D4                     __ptext49:
 13583                           	opt stack 0
 13584  0054D4                     _vscp_getBootLoaderAlgorithm:
 13585                           	opt stack 25
 13586                           
 13587                           ; BSR set to: 0
 13588                           
 13589                           ; BSR set to: 0
 13590                           ;main.c: 2657: return 0x01;
 13591                           
 13592                           ; BSR set to: 0
 13593                           ;incstack = 0
 13594                           ;incstack = 0
 13595  0054D4  0C01               	retlw	1
 13596  0054D6                     __end_of_vscp_getBootLoaderAlgorithm:
 13597                           	opt stack 0
 13598                           tblptru	equ	0xFF8
 13599                           tblptrh	equ	0xFF7
 13600                           tblptrl	equ	0xFF6
 13601                           tablat	equ	0xFF5
 13602                           prodh	equ	0xFF4
 13603                           prodl	equ	0xFF3
 13604                           intcon	equ	0xFF2
 13605                           postinc0	equ	0xFEE
 13606                           wreg	equ	0xFE8
 13607                           indf1	equ	0xFE7
 13608                           postdec1	equ	0xFE5
 13609                           fsr1h	equ	0xFE2
 13610                           fsr1l	equ	0xFE1
 13611                           indf2	equ	0xFDF
 13612                           postinc2	equ	0xFDE
 13613                           postdec2	equ	0xFDD
 13614                           plusw2	equ	0xFDB
 13615                           fsr2h	equ	0xFDA
 13616                           fsr2l	equ	0xFD9
 13617                           status	equ	0xFD8
 13618                           
 13619 ;; *************** function _vscp_getManufacturerId *****************
 13620 ;; Defined at:
 13621 ;;		line 2636 in file "../main.c"
 13622 ;; Parameters:    Size  Location     Type
 13623 ;;  idx             1    wreg     unsigned char 
 13624 ;; Auto vars:     Size  Location     Type
 13625 ;;  idx             1   17[COMRAM] unsigned char 
 13626 ;; Return value:  Size  Location     Type
 13627 ;;                  1    wreg      unsigned char 
 13628 ;; Registers used:
 13629 ;;		wreg, status,2, status,0, cstack
 13630 ;; Tracked objects:
 13631 ;;		On entry : 0/0
 13632 ;;		On exit  : 0/0
 13633 ;;		Unchanged: 0/0
 13634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13635 ;;      Params:         0       0       0       0       0       0       0
 13636 ;;      Locals:         1       0       0       0       0       0       0
 13637 ;;      Temps:          0       0       0       0       0       0       0
 13638 ;;      Totals:         1       0       0       0       0       0       0
 13639 ;;Total ram usage:        1 bytes
 13640 ;; Hardware stack levels used:    1
 13641 ;; Hardware stack levels required when called:    3
 13642 ;; This function calls:
 13643 ;;		_readEEPROM
 13644 ;; This function is called by:
 13645 ;;		_vscp_readStdReg
 13646 ;;		_vscp_writeStdReg
 13647 ;; This function uses a non-reentrant model
 13648 ;;
 13649                           
 13650                           	psect	text50
 13651  0053D8                     __ptext50:
 13652                           	opt stack 0
 13653  0053D8                     _vscp_getManufacturerId:
 13654                           	opt stack 24
 13655                           
 13656                           ; BSR set to: 0
 13657                           ;incstack = 0
 13658                           ;incstack = 0
 13659                           ;vscp_getManufacturerId@idx stored from wreg
 13660  0053D8  CFE8 F012          	movff	wreg,vscp_getManufacturerId@idx
 13661                           
 13662                           ;main.c: 2637: return readEEPROM(0x09 + idx);
 13663  0053DC  0E09               	movlw	9
 13664  0053DE  2412               	addwf	vscp_getManufacturerId@idx,w,c
 13665  0053E0  6E0E               	movwf	?_readEEPROM,c
 13666  0053E2  6A0F               	clrf	?_readEEPROM+1,c
 13667  0053E4  0E00               	movlw	0
 13668  0053E6  220F               	addwfc	?_readEEPROM+1,f,c
 13669  0053E8  EF1C  F02A         	goto	_readEEPROM	;wreg free
 13670  0053EC                     __end_of_vscp_getManufacturerId:
 13671                           	opt stack 0
 13672                           tblptru	equ	0xFF8
 13673                           tblptrh	equ	0xFF7
 13674                           tblptrl	equ	0xFF6
 13675                           tablat	equ	0xFF5
 13676                           prodh	equ	0xFF4
 13677                           prodl	equ	0xFF3
 13678                           intcon	equ	0xFF2
 13679                           postinc0	equ	0xFEE
 13680                           wreg	equ	0xFE8
 13681                           indf1	equ	0xFE7
 13682                           postdec1	equ	0xFE5
 13683                           fsr1h	equ	0xFE2
 13684                           fsr1l	equ	0xFE1
 13685                           indf2	equ	0xFDF
 13686                           postinc2	equ	0xFDE
 13687                           postdec2	equ	0xFDD
 13688                           plusw2	equ	0xFDB
 13689                           fsr2h	equ	0xFDA
 13690                           fsr2l	equ	0xFD9
 13691                           status	equ	0xFD8
 13692                           
 13693 ;; *************** function _vscp_getUserID *****************
 13694 ;; Defined at:
 13695 ;;		line 2616 in file "../main.c"
 13696 ;; Parameters:    Size  Location     Type
 13697 ;;  idx             1    wreg     unsigned char 
 13698 ;; Auto vars:     Size  Location     Type
 13699 ;;  idx             1   17[COMRAM] unsigned char 
 13700 ;; Return value:  Size  Location     Type
 13701 ;;                  1    wreg      unsigned char 
 13702 ;; Registers used:
 13703 ;;		wreg, status,2, status,0, cstack
 13704 ;; Tracked objects:
 13705 ;;		On entry : 0/0
 13706 ;;		On exit  : 0/0
 13707 ;;		Unchanged: 0/0
 13708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13709 ;;      Params:         0       0       0       0       0       0       0
 13710 ;;      Locals:         1       0       0       0       0       0       0
 13711 ;;      Temps:          0       0       0       0       0       0       0
 13712 ;;      Totals:         1       0       0       0       0       0       0
 13713 ;;Total ram usage:        1 bytes
 13714 ;; Hardware stack levels used:    1
 13715 ;; Hardware stack levels required when called:    3
 13716 ;; This function calls:
 13717 ;;		_readEEPROM
 13718 ;; This function is called by:
 13719 ;;		_vscp_readStdReg
 13720 ;;		_vscp_writeStdReg
 13721 ;; This function uses a non-reentrant model
 13722 ;;
 13723                           
 13724                           	psect	text51
 13725  0053EC                     __ptext51:
 13726                           	opt stack 0
 13727  0053EC                     _vscp_getUserID:
 13728                           	opt stack 24
 13729                           
 13730                           ;incstack = 0
 13731                           ;incstack = 0
 13732                           ;vscp_getUserID@idx stored from wreg
 13733  0053EC  CFE8 F012          	movff	wreg,vscp_getUserID@idx
 13734                           
 13735                           ;main.c: 2617: return readEEPROM(0x04 + idx);
 13736  0053F0  0E04               	movlw	4
 13737  0053F2  2412               	addwf	vscp_getUserID@idx,w,c
 13738  0053F4  6E0E               	movwf	?_readEEPROM,c
 13739  0053F6  6A0F               	clrf	?_readEEPROM+1,c
 13740  0053F8  0E00               	movlw	0
 13741  0053FA  220F               	addwfc	?_readEEPROM+1,f,c
 13742  0053FC  EF1C  F02A         	goto	_readEEPROM	;wreg free
 13743  005400                     __end_of_vscp_getUserID:
 13744                           	opt stack 0
 13745                           tblptru	equ	0xFF8
 13746                           tblptrh	equ	0xFF7
 13747                           tblptrl	equ	0xFF6
 13748                           tablat	equ	0xFF5
 13749                           prodh	equ	0xFF4
 13750                           prodl	equ	0xFF3
 13751                           intcon	equ	0xFF2
 13752                           postinc0	equ	0xFEE
 13753                           wreg	equ	0xFE8
 13754                           indf1	equ	0xFE7
 13755                           postdec1	equ	0xFE5
 13756                           fsr1h	equ	0xFE2
 13757                           fsr1l	equ	0xFE1
 13758                           indf2	equ	0xFDF
 13759                           postinc2	equ	0xFDE
 13760                           postdec2	equ	0xFDD
 13761                           plusw2	equ	0xFDB
 13762                           fsr2h	equ	0xFDA
 13763                           fsr2l	equ	0xFD9
 13764                           status	equ	0xFD8
 13765                           
 13766 ;; *************** function _vscp_getMDF_URL *****************
 13767 ;; Defined at:
 13768 ;;		line 2607 in file "../main.c"
 13769 ;; Parameters:    Size  Location     Type
 13770 ;;  idx             1    wreg     unsigned char 
 13771 ;; Auto vars:     Size  Location     Type
 13772 ;;  idx             1   14[COMRAM] unsigned char 
 13773 ;; Return value:  Size  Location     Type
 13774 ;;                  1    wreg      unsigned char 
 13775 ;; Registers used:
 13776 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13777 ;; Tracked objects:
 13778 ;;		On entry : F/0
 13779 ;;		On exit  : F/0
 13780 ;;		Unchanged: F/0
 13781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13782 ;;      Params:         0       0       0       0       0       0       0
 13783 ;;      Locals:         1       0       0       0       0       0       0
 13784 ;;      Temps:          1       0       0       0       0       0       0
 13785 ;;      Totals:         2       0       0       0       0       0       0
 13786 ;;Total ram usage:        2 bytes
 13787 ;; Hardware stack levels used:    1
 13788 ;; Hardware stack levels required when called:    2
 13789 ;; This function calls:
 13790 ;;		Nothing
 13791 ;; This function is called by:
 13792 ;;		_vscp_readStdReg
 13793 ;;		_vscp_handleProtocolEvent
 13794 ;; This function uses a non-reentrant model
 13795 ;;
 13796                           
 13797                           	psect	text52
 13798  005390                     __ptext52:
 13799                           	opt stack 0
 13800  005390                     _vscp_getMDF_URL:
 13801                           	opt stack 25
 13802                           
 13803                           ;incstack = 0
 13804                           ;incstack = 0
 13805                           ;vscp_getMDF_URL@idx stored from wreg
 13806  005390  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13807                           
 13808                           ; BSR set to: 0
 13809                           ;main.c: 2608: return vscp_deviceURL[ idx ];
 13810  005394  500F               	movf	vscp_getMDF_URL@idx,w,c
 13811  005396  0F00               	addlw	low _vscp_deviceURL
 13812  005398  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13813  00539A  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13814  00539E  0E06               	movlw	high __smallconst
 13815  0053A0  6EF7               	movwf	tblptrh,c
 13816  0053A2  0008               	tblrd		*
 13817  0053A4  50F5               	movf	tablat,w,c
 13818                           
 13819                           ; BSR set to: 0
 13820  0053A6  0012               	return	
 13821  0053A8                     __end_of_vscp_getMDF_URL:
 13822                           	opt stack 0
 13823                           tblptru	equ	0xFF8
 13824                           tblptrh	equ	0xFF7
 13825                           tblptrl	equ	0xFF6
 13826                           tablat	equ	0xFF5
 13827                           prodh	equ	0xFF4
 13828                           prodl	equ	0xFF3
 13829                           intcon	equ	0xFF2
 13830                           postinc0	equ	0xFEE
 13831                           wreg	equ	0xFE8
 13832                           indf1	equ	0xFE7
 13833                           postdec1	equ	0xFE5
 13834                           fsr1h	equ	0xFE2
 13835                           fsr1l	equ	0xFE1
 13836                           indf2	equ	0xFDF
 13837                           postinc2	equ	0xFDE
 13838                           postdec2	equ	0xFDD
 13839                           plusw2	equ	0xFDB
 13840                           fsr2h	equ	0xFDA
 13841                           fsr2l	equ	0xFD9
 13842                           status	equ	0xFD8
 13843                           
 13844 ;; *************** function _vscp_getGUID *****************
 13845 ;; Defined at:
 13846 ;;		line 2584 in file "../main.c"
 13847 ;; Parameters:    Size  Location     Type
 13848 ;;  idx             1    wreg     unsigned char 
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;  idx             1   17[COMRAM] unsigned char 
 13851 ;; Return value:  Size  Location     Type
 13852 ;;                  1    wreg      unsigned char 
 13853 ;; Registers used:
 13854 ;;		wreg, status,2, status,0, cstack
 13855 ;; Tracked objects:
 13856 ;;		On entry : 0/0
 13857 ;;		On exit  : 0/0
 13858 ;;		Unchanged: 0/0
 13859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13860 ;;      Params:         0       0       0       0       0       0       0
 13861 ;;      Locals:         1       0       0       0       0       0       0
 13862 ;;      Temps:          0       0       0       0       0       0       0
 13863 ;;      Totals:         1       0       0       0       0       0       0
 13864 ;;Total ram usage:        1 bytes
 13865 ;; Hardware stack levels used:    1
 13866 ;; Hardware stack levels required when called:    3
 13867 ;; This function calls:
 13868 ;;		_readEEPROM
 13869 ;; This function is called by:
 13870 ;;		_vscp_readStdReg
 13871 ;;		_vscp_writeStdReg
 13872 ;;		_vscp_handleProtocolEvent
 13873 ;; This function uses a non-reentrant model
 13874 ;;
 13875                           
 13876                           	psect	text53
 13877  005400                     __ptext53:
 13878                           	opt stack 0
 13879  005400                     _vscp_getGUID:
 13880                           	opt stack 24
 13881                           
 13882                           ; BSR set to: 0
 13883                           ;incstack = 0
 13884                           ;incstack = 0
 13885                           ;vscp_getGUID@idx stored from wreg
 13886  005400  CFE8 F012          	movff	wreg,vscp_getGUID@idx
 13887                           
 13888                           ;main.c: 2585: return readEEPROM(0x11 + idx);
 13889  005404  0E11               	movlw	17
 13890  005406  2412               	addwf	vscp_getGUID@idx,w,c
 13891  005408  6E0E               	movwf	?_readEEPROM,c
 13892  00540A  6A0F               	clrf	?_readEEPROM+1,c
 13893  00540C  0E00               	movlw	0
 13894  00540E  220F               	addwfc	?_readEEPROM+1,f,c
 13895  005410  EF1C  F02A         	goto	_readEEPROM	;wreg free
 13896  005414                     __end_of_vscp_getGUID:
 13897                           	opt stack 0
 13898                           tblptru	equ	0xFF8
 13899                           tblptrh	equ	0xFF7
 13900                           tblptrl	equ	0xFF6
 13901                           tablat	equ	0xFF5
 13902                           prodh	equ	0xFF4
 13903                           prodl	equ	0xFF3
 13904                           intcon	equ	0xFF2
 13905                           postinc0	equ	0xFEE
 13906                           wreg	equ	0xFE8
 13907                           indf1	equ	0xFE7
 13908                           postdec1	equ	0xFE5
 13909                           fsr1h	equ	0xFE2
 13910                           fsr1l	equ	0xFE1
 13911                           indf2	equ	0xFDF
 13912                           postinc2	equ	0xFDE
 13913                           postdec2	equ	0xFDD
 13914                           plusw2	equ	0xFDB
 13915                           fsr2h	equ	0xFDA
 13916                           fsr2l	equ	0xFD9
 13917                           status	equ	0xFD8
 13918                           
 13919 ;; *************** function _vscp_getSubMinorVersion *****************
 13920 ;; Defined at:
 13921 ;;		line 2573 in file "../main.c"
 13922 ;; Parameters:    Size  Location     Type
 13923 ;;		None
 13924 ;; Auto vars:     Size  Location     Type
 13925 ;;		None
 13926 ;; Return value:  Size  Location     Type
 13927 ;;                  1    wreg      unsigned char 
 13928 ;; Registers used:
 13929 ;;		wreg
 13930 ;; Tracked objects:
 13931 ;;		On entry : F/0
 13932 ;;		On exit  : F/0
 13933 ;;		Unchanged: F/0
 13934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13935 ;;      Params:         0       0       0       0       0       0       0
 13936 ;;      Locals:         0       0       0       0       0       0       0
 13937 ;;      Temps:          0       0       0       0       0       0       0
 13938 ;;      Totals:         0       0       0       0       0       0       0
 13939 ;;Total ram usage:        0 bytes
 13940 ;; Hardware stack levels used:    1
 13941 ;; Hardware stack levels required when called:    2
 13942 ;; This function calls:
 13943 ;;		Nothing
 13944 ;; This function is called by:
 13945 ;;		_vscp_readStdReg
 13946 ;; This function uses a non-reentrant model
 13947 ;;
 13948                           
 13949                           	psect	text54
 13950  0054D6                     __ptext54:
 13951                           	opt stack 0
 13952  0054D6                     _vscp_getSubMinorVersion:
 13953                           	opt stack 25
 13954                           
 13955                           ; BSR set to: 0
 13956                           
 13957                           ; BSR set to: 0
 13958                           ;main.c: 2574: return 1;
 13959                           
 13960                           ;incstack = 0
 13961                           ;incstack = 0
 13962  0054D6  0C01               	retlw	1
 13963  0054D8                     __end_of_vscp_getSubMinorVersion:
 13964                           	opt stack 0
 13965                           tblptru	equ	0xFF8
 13966                           tblptrh	equ	0xFF7
 13967                           tblptrl	equ	0xFF6
 13968                           tablat	equ	0xFF5
 13969                           prodh	equ	0xFF4
 13970                           prodl	equ	0xFF3
 13971                           intcon	equ	0xFF2
 13972                           postinc0	equ	0xFEE
 13973                           wreg	equ	0xFE8
 13974                           indf1	equ	0xFE7
 13975                           postdec1	equ	0xFE5
 13976                           fsr1h	equ	0xFE2
 13977                           fsr1l	equ	0xFE1
 13978                           indf2	equ	0xFDF
 13979                           postinc2	equ	0xFDE
 13980                           postdec2	equ	0xFDD
 13981                           plusw2	equ	0xFDB
 13982                           fsr2h	equ	0xFDA
 13983                           fsr2l	equ	0xFD9
 13984                           status	equ	0xFD8
 13985                           
 13986 ;; *************** function _vscp_getMinorVersion *****************
 13987 ;; Defined at:
 13988 ;;		line 2564 in file "../main.c"
 13989 ;; Parameters:    Size  Location     Type
 13990 ;;		None
 13991 ;; Auto vars:     Size  Location     Type
 13992 ;;		None
 13993 ;; Return value:  Size  Location     Type
 13994 ;;                  1    wreg      unsigned char 
 13995 ;; Registers used:
 13996 ;;		wreg
 13997 ;; Tracked objects:
 13998 ;;		On entry : F/0
 13999 ;;		On exit  : F/0
 14000 ;;		Unchanged: F/0
 14001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14002 ;;      Params:         0       0       0       0       0       0       0
 14003 ;;      Locals:         0       0       0       0       0       0       0
 14004 ;;      Temps:          0       0       0       0       0       0       0
 14005 ;;      Totals:         0       0       0       0       0       0       0
 14006 ;;Total ram usage:        0 bytes
 14007 ;; Hardware stack levels used:    1
 14008 ;; Hardware stack levels required when called:    2
 14009 ;; This function calls:
 14010 ;;		Nothing
 14011 ;; This function is called by:
 14012 ;;		_vscp_readStdReg
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           	psect	text55
 14017  0054D8                     __ptext55:
 14018                           	opt stack 0
 14019  0054D8                     _vscp_getMinorVersion:
 14020                           	opt stack 25
 14021                           
 14022                           ; BSR set to: 0
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;main.c: 2565: return 2;
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;incstack = 0
 14029                           ;incstack = 0
 14030  0054D8  0C02               	retlw	2
 14031  0054DA                     __end_of_vscp_getMinorVersion:
 14032                           	opt stack 0
 14033                           tblptru	equ	0xFF8
 14034                           tblptrh	equ	0xFF7
 14035                           tblptrl	equ	0xFF6
 14036                           tablat	equ	0xFF5
 14037                           prodh	equ	0xFF4
 14038                           prodl	equ	0xFF3
 14039                           intcon	equ	0xFF2
 14040                           postinc0	equ	0xFEE
 14041                           wreg	equ	0xFE8
 14042                           indf1	equ	0xFE7
 14043                           postdec1	equ	0xFE5
 14044                           fsr1h	equ	0xFE2
 14045                           fsr1l	equ	0xFE1
 14046                           indf2	equ	0xFDF
 14047                           postinc2	equ	0xFDE
 14048                           postdec2	equ	0xFDD
 14049                           plusw2	equ	0xFDB
 14050                           fsr2h	equ	0xFDA
 14051                           fsr2l	equ	0xFD9
 14052                           status	equ	0xFD8
 14053                           
 14054 ;; *************** function _vscp_getMajorVersion *****************
 14055 ;; Defined at:
 14056 ;;		line 2555 in file "../main.c"
 14057 ;; Parameters:    Size  Location     Type
 14058 ;;		None
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;		None
 14061 ;; Return value:  Size  Location     Type
 14062 ;;                  1    wreg      unsigned char 
 14063 ;; Registers used:
 14064 ;;		wreg
 14065 ;; Tracked objects:
 14066 ;;		On entry : F/0
 14067 ;;		On exit  : F/0
 14068 ;;		Unchanged: F/0
 14069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14070 ;;      Params:         0       0       0       0       0       0       0
 14071 ;;      Locals:         0       0       0       0       0       0       0
 14072 ;;      Temps:          0       0       0       0       0       0       0
 14073 ;;      Totals:         0       0       0       0       0       0       0
 14074 ;;Total ram usage:        0 bytes
 14075 ;; Hardware stack levels used:    1
 14076 ;; Hardware stack levels required when called:    2
 14077 ;; This function calls:
 14078 ;;		Nothing
 14079 ;; This function is called by:
 14080 ;;		_vscp_readStdReg
 14081 ;; This function uses a non-reentrant model
 14082 ;;
 14083                           
 14084                           	psect	text56
 14085  0054DA                     __ptext56:
 14086                           	opt stack 0
 14087  0054DA                     _vscp_getMajorVersion:
 14088                           	opt stack 25
 14089                           
 14090                           ; BSR set to: 0
 14091                           
 14092                           ; BSR set to: 0
 14093                           ;main.c: 2556: return 1;
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;incstack = 0
 14097                           ;incstack = 0
 14098  0054DA  0C01               	retlw	1
 14099  0054DC                     __end_of_vscp_getMajorVersion:
 14100                           	opt stack 0
 14101                           tblptru	equ	0xFF8
 14102                           tblptrh	equ	0xFF7
 14103                           tblptrl	equ	0xFF6
 14104                           tablat	equ	0xFF5
 14105                           prodh	equ	0xFF4
 14106                           prodl	equ	0xFF3
 14107                           intcon	equ	0xFF2
 14108                           postinc0	equ	0xFEE
 14109                           wreg	equ	0xFE8
 14110                           indf1	equ	0xFE7
 14111                           postdec1	equ	0xFE5
 14112                           fsr1h	equ	0xFE2
 14113                           fsr1l	equ	0xFE1
 14114                           indf2	equ	0xFDF
 14115                           postinc2	equ	0xFDE
 14116                           postdec2	equ	0xFDD
 14117                           plusw2	equ	0xFDB
 14118                           fsr2h	equ	0xFDA
 14119                           fsr2l	equ	0xFD9
 14120                           status	equ	0xFD8
 14121                           
 14122 ;; *************** function _vscp_newNodeOnline *****************
 14123 ;; Defined at:
 14124 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
 14125 ;; Parameters:    Size  Location     Type
 14126 ;;		None
 14127 ;; Auto vars:     Size  Location     Type
 14128 ;;		None
 14129 ;; Return value:  Size  Location     Type
 14130 ;;		None               void
 14131 ;; Registers used:
 14132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14133 ;; Tracked objects:
 14134 ;;		On entry : F/0
 14135 ;;		On exit  : F/0
 14136 ;;		Unchanged: 0/0
 14137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14138 ;;      Params:         0       0       0       0       0       0       0
 14139 ;;      Locals:         0       0       0       0       0       0       0
 14140 ;;      Temps:          1       0       0       0       0       0       0
 14141 ;;      Totals:         1       0       0       0       0       0       0
 14142 ;;Total ram usage:        1 bytes
 14143 ;; Hardware stack levels used:    1
 14144 ;; Hardware stack levels required when called:    7
 14145 ;; This function calls:
 14146 ;;		_vscp_sendEvent
 14147 ;; This function is called by:
 14148 ;;		_vscp_handleProtocolEvent
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           	psect	text57
 14153  005150                     __ptext57:
 14154                           	opt stack 0
 14155  005150                     _vscp_newNodeOnline:
 14156                           	opt stack 21
 14157                           
 14158                           ; BSR set to: 0
 14159                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 14160                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14161                           
 14162                           ; BSR set to: 0
 14163                           ;incstack = 0
 14164                           ;incstack = 0
 14165  005150  C0BC  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14166  005154  0E0F               	movlw	15
 14167  005156  1644               	andwf	??_vscp_newNodeOnline,f,c
 14168  005158  0444               	decf	??_vscp_newNodeOnline,w,c
 14169  00515A  E10E               	bnz	l1094
 14170                           
 14171                           ; BSR set to: 0
 14172  00515C  51BA               	movf	_vscp_nickname& (0+255),w,b
 14173  00515E  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14174  005162  62DF               	cpfseq	indf2,c
 14175  005164  D009               	goto	l1094
 14176                           
 14177                           ; BSR set to: 0
 14178                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
 14179  005166  0E80               	movlw	128
 14180  005168  6FCA               	movwf	_vscp_omsg& (0+255),b
 14181                           
 14182                           ; BSR set to: 0
 14183                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
 14184  00516A  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14185                           
 14186                           ; BSR set to: 0
 14187                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
 14188  00516C  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14189  00516E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14190                           
 14191                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
 14192  005170  0E03               	movlw	3
 14193  005172  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14194                           
 14195                           ; BSR set to: 0
 14196                           ;vscp_firmware.c: 506: vscp_sendEvent();
 14197  005174  ECE6  F028         	call	_vscp_sendEvent	;wreg free
 14198  005178                     l1094:
 14199                           
 14200                           ; BSR set to: 0
 14201  005178  0012               	return	
 14202  00517A                     __end_of_vscp_newNodeOnline:
 14203                           	opt stack 0
 14204                           tblptru	equ	0xFF8
 14205                           tblptrh	equ	0xFF7
 14206                           tblptrl	equ	0xFF6
 14207                           tablat	equ	0xFF5
 14208                           prodh	equ	0xFF4
 14209                           prodl	equ	0xFF3
 14210                           intcon	equ	0xFF2
 14211                           postinc0	equ	0xFEE
 14212                           wreg	equ	0xFE8
 14213                           indf1	equ	0xFE7
 14214                           postdec1	equ	0xFE5
 14215                           fsr1h	equ	0xFE2
 14216                           fsr1l	equ	0xFE1
 14217                           indf2	equ	0xFDF
 14218                           postinc2	equ	0xFDE
 14219                           postdec2	equ	0xFDD
 14220                           plusw2	equ	0xFDB
 14221                           fsr2h	equ	0xFDA
 14222                           fsr2l	equ	0xFD9
 14223                           status	equ	0xFD8
 14224                           
 14225 ;; *************** function _vscp_handleDropNickname *****************
 14226 ;; Defined at:
 14227 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;		None
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;  bytes           1   17[COMRAM] unsigned char 
 14232 ;; Return value:  Size  Location     Type
 14233 ;;		None               void
 14234 ;; Registers used:
 14235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14236 ;; Tracked objects:
 14237 ;;		On entry : F/0
 14238 ;;		On exit  : F/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14241 ;;      Params:         0       0       0       0       0       0       0
 14242 ;;      Locals:         1       0       0       0       0       0       0
 14243 ;;      Temps:          0       0       0       0       0       0       0
 14244 ;;      Totals:         1       0       0       0       0       0       0
 14245 ;;Total ram usage:        1 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:    5
 14248 ;; This function calls:
 14249 ;;		_vscp_init
 14250 ;;		_vscp_writeNicknamePermanent
 14251 ;; This function is called by:
 14252 ;;		_vscp_handleProtocolEvent
 14253 ;; This function uses a non-reentrant model
 14254 ;;
 14255                           
 14256                           	psect	text58
 14257  0050CA                     __ptext58:
 14258                           	opt stack 0
 14259  0050CA                     _vscp_handleDropNickname:
 14260                           	opt stack 23
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;incstack = 0
 14267                           ;incstack = 0
 14268  0050CA  51BC               	movf	_vscp_imsg& (0+255),w,b
 14269  0050CC  0B0F               	andlw	15
 14270  0050CE  6E12               	movwf	vscp_handleDropNickname@bytes,c
 14271                           
 14272                           ; BSR set to: 0
 14273                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14274  0050D0  5012               	movf	vscp_handleDropNickname@bytes,w,c
 14275  0050D2  E012               	bz	l1090
 14276                           
 14277                           ; BSR set to: 0
 14278  0050D4  51BA               	movf	_vscp_nickname& (0+255),w,b
 14279  0050D6  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14280  0050DA  62DF               	cpfseq	indf2,c
 14281  0050DC  D00D               	goto	l1090
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14285  0050DE  0412               	decf	vscp_handleDropNickname@bytes,w,c
 14286  0050E0  E005               	bz	l1089
 14287                           
 14288                           ; BSR set to: 0
 14289  0050E2  0E01               	movlw	1
 14290  0050E4  6412               	cpfsgt	vscp_handleDropNickname@bytes,c
 14291  0050E6  D008               	goto	l1090
 14292                           
 14293                           ; BSR set to: 0
 14294  0050E8  67C3               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14295  0050EA  D006               	goto	l1090
 14296  0050EC                     l1089:
 14297                           
 14298                           ; BSR set to: 0
 14299                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
 14300  0050EC  69BA               	setf	_vscp_nickname& (0+255),b
 14301                           
 14302                           ; BSR set to: 0
 14303                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
 14304  0050EE  0EFF               	movlw	255
 14305  0050F0  EC25  F02A         	call	_vscp_writeNicknamePermanent
 14306                           
 14307                           ;vscp_firmware.c: 473: vscp_init();
 14308  0050F4  EC33  F027         	call	_vscp_init	;wreg free
 14309  0050F8                     l1090:
 14310                           
 14311                           ; BSR set to: 0
 14312  0050F8  0012               	return	
 14313  0050FA                     __end_of_vscp_handleDropNickname:
 14314                           	opt stack 0
 14315                           tblptru	equ	0xFF8
 14316                           tblptrh	equ	0xFF7
 14317                           tblptrl	equ	0xFF6
 14318                           tablat	equ	0xFF5
 14319                           prodh	equ	0xFF4
 14320                           prodl	equ	0xFF3
 14321                           intcon	equ	0xFF2
 14322                           postinc0	equ	0xFEE
 14323                           wreg	equ	0xFE8
 14324                           indf1	equ	0xFE7
 14325                           postdec1	equ	0xFE5
 14326                           fsr1h	equ	0xFE2
 14327                           fsr1l	equ	0xFE1
 14328                           indf2	equ	0xFDF
 14329                           postinc2	equ	0xFDE
 14330                           postdec2	equ	0xFDD
 14331                           plusw2	equ	0xFDB
 14332                           fsr2h	equ	0xFDA
 14333                           fsr2l	equ	0xFD9
 14334                           status	equ	0xFD8
 14335                           
 14336 ;; *************** function _vscp_init *****************
 14337 ;; Defined at:
 14338 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
 14339 ;; Parameters:    Size  Location     Type
 14340 ;;		None
 14341 ;; Auto vars:     Size  Location     Type
 14342 ;;		None
 14343 ;; Return value:  Size  Location     Type
 14344 ;;		None               void
 14345 ;; Registers used:
 14346 ;;		wreg, status,2, cstack
 14347 ;; Tracked objects:
 14348 ;;		On entry : 0/1
 14349 ;;		On exit  : F/0
 14350 ;;		Unchanged: 0/0
 14351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14352 ;;      Params:         0       0       0       0       0       0       0
 14353 ;;      Locals:         0       0       0       0       0       0       0
 14354 ;;      Temps:          0       0       0       0       0       0       0
 14355 ;;      Totals:         0       0       0       0       0       0       0
 14356 ;;Total ram usage:        0 bytes
 14357 ;; Hardware stack levels used:    1
 14358 ;; Hardware stack levels required when called:    4
 14359 ;; This function calls:
 14360 ;;		_vscp_readNicknamePermanent
 14361 ;; This function is called by:
 14362 ;;		_main
 14363 ;;		_vscp_handleDropNickname
 14364 ;;		_vscp_handleProtocolEvent
 14365 ;; This function uses a non-reentrant model
 14366 ;;
 14367                           
 14368                           	psect	text59
 14369  004E66                     __ptext59:
 14370                           	opt stack 0
 14371  004E66                     _vscp_init:
 14372                           	opt stack 23
 14373                           
 14374                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
 14375                           
 14376                           ; BSR set to: 0
 14377                           ;incstack = 0
 14378                           ;incstack = 0
 14379  004E66  0E02               	movlw	2
 14380  004E68  6E4D               	movwf	_vscp_initledfunc,c
 14381                           
 14382                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
 14383  004E6A  EC54  F02A         	call	_vscp_readNicknamePermanent	;wreg free
 14384  004E6E  0100               	movlb	0	; () banked
 14385  004E70  6FBA               	movwf	_vscp_nickname& (0+255),b
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
 14389  004E72  67BA               	tstfsz	_vscp_nickname& (0+255),b
 14390  004E74  D001               	goto	l1031
 14391                           
 14392                           ; BSR set to: 0
 14393  004E76  69BA               	setf	_vscp_nickname& (0+255),b
 14394  004E78                     l1031:
 14395                           
 14396                           ; BSR set to: 0
 14397                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
 14398  004E78  6BBC               	clrf	_vscp_imsg& (0+255),b
 14399                           
 14400                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
 14401  004E7A  6BBD               	clrf	(_vscp_imsg+1)& (0+255),b
 14402                           
 14403                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
 14404  004E7C  6BBE               	clrf	(_vscp_imsg+2)& (0+255),b
 14405  004E7E  6BBF               	clrf	(_vscp_imsg+3)& (0+255),b
 14406                           
 14407                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
 14408  004E80  6BC0               	clrf	(_vscp_imsg+4)& (0+255),b
 14409                           
 14410                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
 14411  004E82  6BCA               	clrf	_vscp_omsg& (0+255),b
 14412                           
 14413                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
 14414  004E84  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14415                           
 14416                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
 14417  004E86  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14418  004E88  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14419                           
 14420                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
 14421  004E8A  6BCE               	clrf	(_vscp_omsg+4)& (0+255),b
 14422                           
 14423                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
 14424  004E8C  6A4B               	clrf	_vscp_alarmstatus,c
 14425                           
 14426                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
 14427  004E8E  6A4F               	clrf	_vscp_probe_address,c
 14428                           
 14429                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
 14430  004E90  6BBB               	clrf	_vscp_node_state& (0+255),b
 14431                           
 14432                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
 14433  004E92  6A4E               	clrf	_vscp_node_substate,c
 14434                           
 14435                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
 14436  004E94  6A50               	clrf	_vscp_probe_cnt,c
 14437                           
 14438                           ;vscp_firmware.c: 148: vscp_page_select = 0;
 14439  004E96  6A46               	clrf	_vscp_page_select,c
 14440  004E98  6A47               	clrf	_vscp_page_select+1,c
 14441                           
 14442                           ;vscp_firmware.c: 151: vscp_timer = 0;
 14443  004E9A  0101               	movlb	1	; () banked
 14444  004E9C  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14445  004E9E  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14446                           
 14447                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
 14448  004EA0  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14449  004EA2  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14450                           
 14451                           ;vscp_firmware.c: 153: vscp_second = 0;
 14452  004EA4  6A51               	clrf	_vscp_second,c
 14453                           
 14454                           ;vscp_firmware.c: 154: vscp_minute = 0;
 14455  004EA6  0100               	movlb	0	; () banked
 14456  004EA8  6BB9               	clrf	_vscp_minute& (0+255),b
 14457                           
 14458                           ;vscp_firmware.c: 155: vscp_hour = 0;
 14459  004EAA  6BB7               	clrf	_vscp_hour& (0+255),b
 14460                           
 14461                           ; BSR set to: 0
 14462  004EAC  0012               	return	
 14463  004EAE                     __end_of_vscp_init:
 14464                           	opt stack 0
 14465                           tblptru	equ	0xFF8
 14466                           tblptrh	equ	0xFF7
 14467                           tblptrl	equ	0xFF6
 14468                           tablat	equ	0xFF5
 14469                           prodh	equ	0xFF4
 14470                           prodl	equ	0xFF3
 14471                           intcon	equ	0xFF2
 14472                           postinc0	equ	0xFEE
 14473                           wreg	equ	0xFE8
 14474                           indf1	equ	0xFE7
 14475                           postdec1	equ	0xFE5
 14476                           fsr1h	equ	0xFE2
 14477                           fsr1l	equ	0xFE1
 14478                           indf2	equ	0xFDF
 14479                           postinc2	equ	0xFDE
 14480                           postdec2	equ	0xFDD
 14481                           plusw2	equ	0xFDB
 14482                           fsr2h	equ	0xFDA
 14483                           fsr2l	equ	0xFD9
 14484                           status	equ	0xFD8
 14485                           
 14486 ;; *************** function _vscp_readNicknamePermanent *****************
 14487 ;; Defined at:
 14488 ;;		line 2756 in file "../main.c"
 14489 ;; Parameters:    Size  Location     Type
 14490 ;;		None
 14491 ;; Auto vars:     Size  Location     Type
 14492 ;;		None
 14493 ;; Return value:  Size  Location     Type
 14494 ;;                  1    wreg      unsigned char 
 14495 ;; Registers used:
 14496 ;;		wreg, status,2, cstack
 14497 ;; Tracked objects:
 14498 ;;		On entry : 0/1
 14499 ;;		On exit  : 0/0
 14500 ;;		Unchanged: 0/0
 14501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14502 ;;      Params:         0       0       0       0       0       0       0
 14503 ;;      Locals:         0       0       0       0       0       0       0
 14504 ;;      Temps:          0       0       0       0       0       0       0
 14505 ;;      Totals:         0       0       0       0       0       0       0
 14506 ;;Total ram usage:        0 bytes
 14507 ;; Hardware stack levels used:    1
 14508 ;; Hardware stack levels required when called:    3
 14509 ;; This function calls:
 14510 ;;		_readEEPROM
 14511 ;; This function is called by:
 14512 ;;		_vscp_init
 14513 ;; This function uses a non-reentrant model
 14514 ;;
 14515                           
 14516                           	psect	text60
 14517  0054A8                     __ptext60:
 14518                           	opt stack 0
 14519  0054A8                     _vscp_readNicknamePermanent:
 14520                           	opt stack 23
 14521                           
 14522                           ;main.c: 2757: return readEEPROM( 0x01 );
 14523                           
 14524                           ; BSR set to: 0
 14525                           ;incstack = 0
 14526                           ;incstack = 0
 14527  0054A8  6A0F               	clrf	?_readEEPROM+1,c
 14528  0054AA  0E01               	movlw	1
 14529  0054AC  6E0E               	movwf	?_readEEPROM,c
 14530  0054AE  EF1C  F02A         	goto	_readEEPROM	;wreg free
 14531  0054B2                     __end_of_vscp_readNicknamePermanent:
 14532                           	opt stack 0
 14533                           tblptru	equ	0xFF8
 14534                           tblptrh	equ	0xFF7
 14535                           tblptrl	equ	0xFF6
 14536                           tablat	equ	0xFF5
 14537                           prodh	equ	0xFF4
 14538                           prodl	equ	0xFF3
 14539                           intcon	equ	0xFF2
 14540                           postinc0	equ	0xFEE
 14541                           wreg	equ	0xFE8
 14542                           indf1	equ	0xFE7
 14543                           postdec1	equ	0xFE5
 14544                           fsr1h	equ	0xFE2
 14545                           fsr1l	equ	0xFE1
 14546                           indf2	equ	0xFDF
 14547                           postinc2	equ	0xFDE
 14548                           postdec2	equ	0xFDD
 14549                           plusw2	equ	0xFDB
 14550                           fsr2h	equ	0xFDA
 14551                           fsr2l	equ	0xFD9
 14552                           status	equ	0xFD8
 14553                           
 14554 ;; *************** function _vscp_handleSetNickname *****************
 14555 ;; Defined at:
 14556 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
 14557 ;; Parameters:    Size  Location     Type
 14558 ;;		None
 14559 ;; Auto vars:     Size  Location     Type
 14560 ;;		None
 14561 ;; Return value:  Size  Location     Type
 14562 ;;		None               void
 14563 ;; Registers used:
 14564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14565 ;; Tracked objects:
 14566 ;;		On entry : F/0
 14567 ;;		On exit  : 0/0
 14568 ;;		Unchanged: 0/0
 14569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14570 ;;      Params:         0       0       0       0       0       0       0
 14571 ;;      Locals:         0       0       0       0       0       0       0
 14572 ;;      Temps:          0       0       0       0       0       0       0
 14573 ;;      Totals:         0       0       0       0       0       0       0
 14574 ;;Total ram usage:        0 bytes
 14575 ;; Hardware stack levels used:    1
 14576 ;; Hardware stack levels required when called:    4
 14577 ;; This function calls:
 14578 ;;		_vscp_writeNicknamePermanent
 14579 ;;		_vscp_setSegmentCRC
 14580 ;; This function is called by:
 14581 ;;		_vscp_handleProtocolEvent
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585                           	psect	text61
 14586  005264                     __ptext61:
 14587                           	opt stack 0
 14588  005264                     _vscp_handleSetNickname:
 14589                           	opt stack 24
 14590                           
 14591                           ; BSR set to: 0
 14592                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 14593                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14594                           
 14595                           ;incstack = 0
 14596                           ;incstack = 0
 14597  005264  51BC               	movf	_vscp_imsg& (0+255),w,b
 14598  005266  0B0F               	andlw	15
 14599  005268  0A02               	xorlw	2
 14600  00526A  E10D               	bnz	l1083
 14601                           
 14602                           ; BSR set to: 0
 14603  00526C  51BA               	movf	_vscp_nickname& (0+255),w,b
 14604  00526E  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14605  005272  62DF               	cpfseq	indf2,c
 14606  005274  D008               	goto	l1083
 14607                           
 14608                           ; BSR set to: 0
 14609                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
 14610  005276  C0C3  F0BA         	movff	_vscp_imsg+7,_vscp_nickname
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
 14614  00527A  51BA               	movf	_vscp_nickname& (0+255),w,b
 14615  00527C  EC25  F02A         	call	_vscp_writeNicknamePermanent
 14616                           
 14617                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
 14618  005280  0E40               	movlw	64
 14619  005282  EC13  F02A         	call	_vscp_setSegmentCRC
 14620  005286                     l1083:
 14621  005286  0012               	return	
 14622  005288                     __end_of_vscp_handleSetNickname:
 14623                           	opt stack 0
 14624                           tblptru	equ	0xFF8
 14625                           tblptrh	equ	0xFF7
 14626                           tblptrl	equ	0xFF6
 14627                           tablat	equ	0xFF5
 14628                           prodh	equ	0xFF4
 14629                           prodl	equ	0xFF3
 14630                           intcon	equ	0xFF2
 14631                           postinc0	equ	0xFEE
 14632                           wreg	equ	0xFE8
 14633                           indf1	equ	0xFE7
 14634                           postdec1	equ	0xFE5
 14635                           fsr1h	equ	0xFE2
 14636                           fsr1l	equ	0xFE1
 14637                           indf2	equ	0xFDF
 14638                           postinc2	equ	0xFDE
 14639                           postdec2	equ	0xFDD
 14640                           plusw2	equ	0xFDB
 14641                           fsr2h	equ	0xFDA
 14642                           fsr2l	equ	0xFD9
 14643                           status	equ	0xFD8
 14644                           
 14645 ;; *************** function _vscp_handleHeartbeat *****************
 14646 ;; Defined at:
 14647 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
 14648 ;; Parameters:    Size  Location     Type
 14649 ;;		None
 14650 ;; Auto vars:     Size  Location     Type
 14651 ;;		None
 14652 ;; Return value:  Size  Location     Type
 14653 ;;		None               void
 14654 ;; Registers used:
 14655 ;;		wreg, status,2, status,0, cstack
 14656 ;; Tracked objects:
 14657 ;;		On entry : F/0
 14658 ;;		On exit  : 0/0
 14659 ;;		Unchanged: 0/0
 14660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14661 ;;      Params:         0       0       0       0       0       0       0
 14662 ;;      Locals:         0       0       0       0       0       0       0
 14663 ;;      Temps:          0       0       0       0       0       0       0
 14664 ;;      Totals:         0       0       0       0       0       0       0
 14665 ;;Total ram usage:        0 bytes
 14666 ;; Hardware stack levels used:    1
 14667 ;; Hardware stack levels required when called:    4
 14668 ;; This function calls:
 14669 ;;		_vscp_writeNicknamePermanent
 14670 ;;		_vscp_getSegmentCRC
 14671 ;;		_vscp_setSegmentCRC
 14672 ;; This function is called by:
 14673 ;;		_vscp_handleProtocolEvent
 14674 ;; This function uses a non-reentrant model
 14675 ;;
 14676                           
 14677                           	psect	text62
 14678  004F38                     __ptext62:
 14679                           	opt stack 0
 14680  004F38                     _vscp_handleHeartbeat:
 14681                           	opt stack 24
 14682                           
 14683                           ; BSR set to: 0
 14684                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
 14685                           
 14686                           ;incstack = 0
 14687                           ;incstack = 0
 14688  004F38  EC59  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14689  004F3C  0900               	iorlw	0
 14690  004F3E  E116               	bnz	l11218
 14691                           
 14692                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14693                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14694  004F40  0100               	movlb	0	; () banked
 14695  004F42  51BC               	movf	_vscp_imsg& (0+255),w,b
 14696  004F44  0B0F               	andlw	15
 14697  004F46  0A05               	xorlw	5
 14698  004F48  E115               	bnz	l1079
 14699                           
 14700                           ; BSR set to: 0
 14701  004F4A  EC59  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14702  004F4E  0100               	movlb	0	; () banked
 14703  004F50  19C2               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14704  004F52  E010               	bz	l1079
 14705                           
 14706                           ; BSR set to: 0
 14707                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14708  004F54  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14709  004F56  EC13  F02A         	call	_vscp_setSegmentCRC
 14710                           
 14711                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
 14712  004F5A  0100               	movlb	0	; () banked
 14713  004F5C  69BA               	setf	_vscp_nickname& (0+255),b
 14714                           
 14715                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
 14716  004F5E  0EFF               	movlw	255
 14717  004F60  EC25  F02A         	call	_vscp_writeNicknamePermanent
 14718                           
 14719                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
 14720  004F64  0E01               	movlw	1
 14721  004F66  0100               	movlb	0	; () banked
 14722  004F68  6FBB               	movwf	_vscp_node_state& (0+255),b
 14723  004F6A  D004               	goto	l1079
 14724  004F6C                     l11218:
 14725                           
 14726                           ;vscp_firmware.c: 403: else {
 14727                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14728  004F6C  0100               	movlb	0	; () banked
 14729  004F6E  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14730  004F70  EC13  F02A         	call	_vscp_setSegmentCRC
 14731  004F74                     l1079:
 14732  004F74  0012               	return	
 14733  004F76                     __end_of_vscp_handleHeartbeat:
 14734                           	opt stack 0
 14735                           tblptru	equ	0xFF8
 14736                           tblptrh	equ	0xFF7
 14737                           tblptrl	equ	0xFF6
 14738                           tablat	equ	0xFF5
 14739                           prodh	equ	0xFF4
 14740                           prodl	equ	0xFF3
 14741                           intcon	equ	0xFF2
 14742                           postinc0	equ	0xFEE
 14743                           wreg	equ	0xFE8
 14744                           indf1	equ	0xFE7
 14745                           postdec1	equ	0xFE5
 14746                           fsr1h	equ	0xFE2
 14747                           fsr1l	equ	0xFE1
 14748                           indf2	equ	0xFDF
 14749                           postinc2	equ	0xFDE
 14750                           postdec2	equ	0xFDD
 14751                           plusw2	equ	0xFDB
 14752                           fsr2h	equ	0xFDA
 14753                           fsr2l	equ	0xFD9
 14754                           status	equ	0xFD8
 14755                           
 14756 ;; *************** function _vscp_goBootloaderMode *****************
 14757 ;; Defined at:
 14758 ;;		line 2739 in file "../main.c"
 14759 ;; Parameters:    Size  Location     Type
 14760 ;;  algorithm       1    wreg     unsigned char 
 14761 ;; Auto vars:     Size  Location     Type
 14762 ;;  algorithm       1   16[COMRAM] unsigned char 
 14763 ;; Return value:  Size  Location     Type
 14764 ;;		None               void
 14765 ;; Registers used:
 14766 ;;		wreg, status,2, status,0, cstack
 14767 ;; Tracked objects:
 14768 ;;		On entry : F/0
 14769 ;;		On exit  : 0/0
 14770 ;;		Unchanged: 0/0
 14771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14772 ;;      Params:         0       0       0       0       0       0       0
 14773 ;;      Locals:         1       0       0       0       0       0       0
 14774 ;;      Temps:          0       0       0       0       0       0       0
 14775 ;;      Totals:         1       0       0       0       0       0       0
 14776 ;;Total ram usage:        1 bytes
 14777 ;; Hardware stack levels used:    1
 14778 ;; Hardware stack levels required when called:    3
 14779 ;; This function calls:
 14780 ;;		_writeEEPROM
 14781 ;; This function is called by:
 14782 ;;		_vscp_handleProtocolEvent
 14783 ;; This function uses a non-reentrant model
 14784 ;;
 14785                           
 14786                           	psect	text63
 14787  0053A8                     __ptext63:
 14788                           	opt stack 0
 14789  0053A8                     _vscp_goBootloaderMode:
 14790                           	opt stack 25
 14791                           
 14792                           ;incstack = 0
 14793                           ;incstack = 0
 14794                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14795  0053A8  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14796                           
 14797                           ; BSR set to: 0
 14798                           ;main.c: 2740: if ( 0x01 != algorithm ) return;
 14799  0053AC  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14800  0053AE  E107               	bnz	l594
 14801                           
 14802                           ; BSR set to: 0
 14803                           ;main.c: 2744: writeEEPROM(0x00, 0xff);
 14804  0053B0  6A0F               	clrf	?_writeEEPROM+1,c
 14805  0053B2  6A0E               	clrf	?_writeEEPROM,c
 14806  0053B4  0EFF               	movlw	255
 14807  0053B6  6810               	setf	?_writeEEPROM+2,c
 14808  0053B8  EC0D  F029         	call	_writeEEPROM	;wreg free
 14809  0053BC  00FF               	reset		;# 
 14810  0053BE                     l594:
 14811  0053BE  0012               	return	
 14812  0053C0                     __end_of_vscp_goBootloaderMode:
 14813                           	opt stack 0
 14814                           tblptru	equ	0xFF8
 14815                           tblptrh	equ	0xFF7
 14816                           tblptrl	equ	0xFF6
 14817                           tablat	equ	0xFF5
 14818                           prodh	equ	0xFF4
 14819                           prodl	equ	0xFF3
 14820                           intcon	equ	0xFF2
 14821                           postinc0	equ	0xFEE
 14822                           wreg	equ	0xFE8
 14823                           indf1	equ	0xFE7
 14824                           postdec1	equ	0xFE5
 14825                           fsr1h	equ	0xFE2
 14826                           fsr1l	equ	0xFE1
 14827                           indf2	equ	0xFDF
 14828                           postinc2	equ	0xFDE
 14829                           postdec2	equ	0xFDD
 14830                           plusw2	equ	0xFDB
 14831                           fsr2h	equ	0xFDA
 14832                           fsr2l	equ	0xFD9
 14833                           status	equ	0xFD8
 14834                           
 14835 ;; *************** function _vscp_getMatrixInfo *****************
 14836 ;; Defined at:
 14837 ;;		line 2674 in file "../main.c"
 14838 ;; Parameters:    Size  Location     Type
 14839 ;;  pData           1    wreg     PTR unsigned char 
 14840 ;;		 -> vscp_omsg(13), 
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14843 ;;		 -> vscp_omsg(13), 
 14844 ;;  i               1   14[COMRAM] unsigned char 
 14845 ;; Return value:  Size  Location     Type
 14846 ;;		None               void
 14847 ;; Registers used:
 14848 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14849 ;; Tracked objects:
 14850 ;;		On entry : F/0
 14851 ;;		On exit  : F/0
 14852 ;;		Unchanged: F/0
 14853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14854 ;;      Params:         0       0       0       0       0       0       0
 14855 ;;      Locals:         2       0       0       0       0       0       0
 14856 ;;      Temps:          0       0       0       0       0       0       0
 14857 ;;      Totals:         2       0       0       0       0       0       0
 14858 ;;Total ram usage:        2 bytes
 14859 ;; Hardware stack levels used:    1
 14860 ;; Hardware stack levels required when called:    2
 14861 ;; This function calls:
 14862 ;;		Nothing
 14863 ;; This function is called by:
 14864 ;;		_vscp_handleProtocolEvent
 14865 ;; This function uses a non-reentrant model
 14866 ;;
 14867                           
 14868                           	psect	text64
 14869  005346                     __ptext64:
 14870                           	opt stack 0
 14871  005346                     _vscp_getMatrixInfo:
 14872                           	opt stack 26
 14873                           
 14874                           ;incstack = 0
 14875                           ;incstack = 0
 14876                           ;vscp_getMatrixInfo@pData stored from wreg
 14877  005346  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14878                           
 14879                           ; BSR set to: 0
 14880                           ;main.c: 2675: uint8_t i;
 14881                           ;main.c: 2679: for (i = 0; i < 8; i++) {
 14882  00534A  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14883  00534C                     l8082:
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;main.c: 2680: pData[ i ] = 0;
 14887  00534C  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14888  00534E  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14889  005350  6ED9               	movwf	fsr2l,c
 14890  005352  6ADA               	clrf	fsr2h,c
 14891  005354  6ADF               	clrf	indf2,c
 14892                           
 14893                           ; BSR set to: 0
 14894  005356  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14895                           
 14896                           ; BSR set to: 0
 14897  005358  0E07               	movlw	7
 14898  00535A  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14899  00535C  D7F7               	goto	l8082
 14900                           
 14901                           ; BSR set to: 0
 14902  00535E  0C07               	retlw	7
 14903  005360                     __end_of_vscp_getMatrixInfo:
 14904                           	opt stack 0
 14905                           tblptru	equ	0xFF8
 14906                           tblptrh	equ	0xFF7
 14907                           tblptrl	equ	0xFF6
 14908                           tablat	equ	0xFF5
 14909                           prodh	equ	0xFF4
 14910                           prodl	equ	0xFF3
 14911                           intcon	equ	0xFF2
 14912                           postinc0	equ	0xFEE
 14913                           wreg	equ	0xFE8
 14914                           indf1	equ	0xFE7
 14915                           postdec1	equ	0xFE5
 14916                           fsr1h	equ	0xFE2
 14917                           fsr1l	equ	0xFE1
 14918                           indf2	equ	0xFDF
 14919                           postinc2	equ	0xFDE
 14920                           postdec2	equ	0xFDD
 14921                           plusw2	equ	0xFDB
 14922                           fsr2h	equ	0xFDA
 14923                           fsr2l	equ	0xFD9
 14924                           status	equ	0xFD8
 14925                           
 14926 ;; *************** function _vscp_handleProbeState *****************
 14927 ;; Defined at:
 14928 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
 14929 ;; Parameters:    Size  Location     Type
 14930 ;;		None
 14931 ;; Auto vars:     Size  Location     Type
 14932 ;;		None
 14933 ;; Return value:  Size  Location     Type
 14934 ;;		None               void
 14935 ;; Registers used:
 14936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14937 ;; Tracked objects:
 14938 ;;		On entry : 0/0
 14939 ;;		On exit  : F/0
 14940 ;;		Unchanged: 0/0
 14941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14942 ;;      Params:         0       0       0       0       0       0       0
 14943 ;;      Locals:         0       0       0       0       0       0       0
 14944 ;;      Temps:          0       0       0       0       0       0       0
 14945 ;;      Totals:         0       0       0       0       0       0       0
 14946 ;;Total ram usage:        0 bytes
 14947 ;; Hardware stack levels used:    1
 14948 ;; Hardware stack levels required when called:    8
 14949 ;; This function calls:
 14950 ;;		_vscp_goActiveState
 14951 ;;		_vscp_sendEvent
 14952 ;;		_vscp_writeNicknamePermanent
 14953 ;;		_vscp_setSegmentCRC
 14954 ;; This function is called by:
 14955 ;;		_main
 14956 ;; This function uses a non-reentrant model
 14957 ;;
 14958                           
 14959                           	psect	text65
 14960  00415A                     __ptext65:
 14961                           	opt stack 0
 14962  00415A                     _vscp_handleProbeState:
 14963                           	opt stack 21
 14964                           
 14965                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;incstack = 0
 14969                           ;incstack = 0
 14970  00415A  D058               	goto	l9692
 14971  00415C                     l9622:
 14972                           
 14973                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
 14974  00415C  284F               	incf	_vscp_probe_address,w,c
 14975  00415E  E012               	bz	l9638
 14976                           
 14977                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
 14978  004160  0E81               	movlw	129
 14979  004162  0100               	movlb	0	; () banked
 14980  004164  6FCA               	movwf	_vscp_omsg& (0+255),b
 14981                           
 14982                           ; BSR set to: 0
 14983                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
 14984  004166  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14985                           
 14986                           ; BSR set to: 0
 14987                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
 14988  004168  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14989  00416A  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14990                           
 14991                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
 14992  00416C  0E02               	movlw	2
 14993  00416E  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14994                           
 14995                           ; BSR set to: 0
 14996                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14997  004170  C04F  F0CF         	movff	_vscp_probe_address,_vscp_omsg+5
 14998                           
 14999                           ; BSR set to: 0
 15000                           ;vscp_firmware.c: 214: vscp_sendEvent();
 15001  004174  ECE6  F028         	call	_vscp_sendEvent	;wreg free
 15002                           
 15003                           ; BSR set to: 0
 15004                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
 15005  004178  0E01               	movlw	1
 15006  00417A  6E4E               	movwf	_vscp_node_substate,c
 15007  00417C                     l9636:
 15008                           
 15009                           ; BSR set to: 0
 15010                           ;vscp_firmware.c: 217: vscp_timer = 0;
 15011  00417C  0101               	movlb	1	; () banked
 15012  00417E  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 15013  004180  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15014                           
 15015                           ;vscp_firmware.c: 219: } else {
 15016  004182  D04A               	goto	l1046
 15017  004184                     l9638:
 15018                           
 15019                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
 15020  004184  0E04               	movlw	4
 15021  004186  0100               	movlb	0	; () banked
 15022  004188  6FBB               	movwf	_vscp_node_state& (0+255),b
 15023                           
 15024                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
 15025  00418A  0E81               	movlw	129
 15026  00418C  6FCA               	movwf	_vscp_omsg& (0+255),b
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
 15030  00418E  69CF               	setf	(_vscp_omsg+5)& (0+255),b
 15031                           
 15032                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
 15033  004190  0E07               	movlw	7
 15034  004192  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
 15035                           
 15036                           ; BSR set to: 0
 15037                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
 15038  004194  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 15039  004196  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 15040                           
 15041                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
 15042  004198  0E03               	movlw	3
 15043  00419A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;vscp_firmware.c: 232: vscp_sendEvent();
 15047  00419C  ECE6  F028         	call	_vscp_sendEvent	;wreg free
 15048  0041A0  D03B               	goto	l1046
 15049  0041A2                     l1047:
 15050                           
 15051                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
 15052  0041A2  0100               	movlb	0	; () banked
 15053  0041A4  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 15054  0041A6  D00F               	goto	l9662
 15055                           
 15056                           ; BSR set to: 0
 15057                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
 15058                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
 15059  0041A8  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
 15060  0041AA  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15061  0041AC  E135               	bnz	l1046
 15062                           
 15063                           ; BSR set to: 0
 15064  0041AE  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
 15065  0041B0  0A03               	xorlw	3
 15066  0041B2  E132               	bnz	l1046
 15067                           
 15068                           ; BSR set to: 0
 15069                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
 15070  0041B4  664F               	tstfsz	_vscp_probe_address,c
 15071  0041B6  D003               	goto	l9656
 15072                           
 15073                           ; BSR set to: 0
 15074                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
 15075  0041B8  0E02               	movlw	2
 15076  0041BA  6FBB               	movwf	_vscp_node_state& (0+255),b
 15077  0041BC  D7DF               	goto	l9636
 15078  0041BE                     l9656:
 15079                           
 15080                           ; BSR set to: 0
 15081                           ;vscp_firmware.c: 256: vscp_probe_address++;
 15082  0041BE  2A4F               	incf	_vscp_probe_address,f,c
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
 15086  0041C0  6A4E               	clrf	_vscp_node_substate,c
 15087  0041C2                     l9660:
 15088                           
 15089                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
 15090  0041C2  6A50               	clrf	_vscp_probe_cnt,c
 15091  0041C4  D029               	goto	l1046
 15092  0041C6                     l9662:
 15093                           
 15094                           ; BSR set to: 0
 15095                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
 15096  0041C6  0EE9               	movlw	233
 15097  0041C8  0101               	movlb	1	; () banked
 15098  0041CA  5D1C               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15099  0041CC  0E03               	movlw	3
 15100  0041CE  591D               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15101  0041D0  E323               	bnc	l1046
 15102                           
 15103                           ; BSR set to: 1
 15104                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
 15105  0041D2  2A50               	incf	_vscp_probe_cnt,f,c
 15106                           
 15107                           ; BSR set to: 1
 15108                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
 15109  0041D4  0E02               	movlw	2
 15110  0041D6  6450               	cpfsgt	_vscp_probe_cnt,c
 15111  0041D8  D017               	goto	l1054
 15112                           
 15113                           ; BSR set to: 1
 15114                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
 15115  0041DA  664F               	tstfsz	_vscp_probe_address,c
 15116  0041DC  D005               	goto	l1055
 15117                           
 15118                           ; BSR set to: 1
 15119                           ;vscp_firmware.c: 274: vscp_probe_address++;
 15120  0041DE  2A4F               	incf	_vscp_probe_address,f,c
 15121                           
 15122                           ; BSR set to: 1
 15123                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
 15124  0041E0  6A4E               	clrf	_vscp_node_substate,c
 15125                           
 15126                           ; BSR set to: 1
 15127                           ;vscp_firmware.c: 276: vscp_timer = 0;
 15128  0041E2  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 15129  0041E4  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15130  0041E6  D7ED               	goto	l9660
 15131  0041E8                     l1055:
 15132                           
 15133                           ; BSR set to: 1
 15134                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
 15135  0041E8  C04F  F0BA         	movff	_vscp_probe_address,_vscp_nickname
 15136                           
 15137                           ; BSR set to: 1
 15138                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
 15139  0041EC  0E03               	movlw	3
 15140  0041EE  0100               	movlb	0	; () banked
 15141  0041F0  6FBB               	movwf	_vscp_node_state& (0+255),b
 15142                           
 15143                           ; BSR set to: 0
 15144                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 15145  0041F2  6A4E               	clrf	_vscp_node_substate,c
 15146                           
 15147                           ; BSR set to: 0
 15148                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
 15149  0041F4  51BA               	movf	_vscp_nickname& (0+255),w,b
 15150  0041F6  EC25  F02A         	call	_vscp_writeNicknamePermanent
 15151                           
 15152                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
 15153  0041FA  0E40               	movlw	64
 15154  0041FC  EC13  F02A         	call	_vscp_setSegmentCRC
 15155                           
 15156                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
 15157  004200  6A50               	clrf	_vscp_probe_cnt,c
 15158                           
 15159                           ;vscp_firmware.c: 290: vscp_goActiveState();
 15160  004202  EC78  F029         	call	_vscp_goActiveState	;wreg free
 15161  004206  D008               	goto	l1046
 15162  004208                     l1054:
 15163                           
 15164                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 15165  004208  6A4E               	clrf	_vscp_node_substate,c
 15166  00420A  D006               	goto	l1046
 15167  00420C                     l9692:
 15168  00420C  504E               	movf	_vscp_node_substate,w,c
 15169                           
 15170                           ; Switch size 1, requested type "space"
 15171                           ; Number of cases is 3, Range of values is 0 to 2
 15172                           ; switch strategies available:
 15173                           ; Name         Instructions Cycles
 15174                           ; simple_byte           10     6 (average)
 15175                           ;	Chosen strategy is simple_byte
 15176  00420E  E0A6               	bz	l9622
 15177  004210  0A01               	xorlw	1	; case 1
 15178  004212  E0C7               	bz	l1047
 15179  004214  0A03               	xorlw	3	; case 2
 15180  004216  E1F8               	bnz	l1054
 15181  004218                     l1046:
 15182                           
 15183                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
 15184  004218  0100               	movlb	0	; () banked
 15185  00421A  6BBC               	clrf	_vscp_imsg& (0+255),b
 15186                           
 15187                           ; BSR set to: 0
 15188  00421C  0012               	return	
 15189  00421E                     __end_of_vscp_handleProbeState:
 15190                           	opt stack 0
 15191                           tblptru	equ	0xFF8
 15192                           tblptrh	equ	0xFF7
 15193                           tblptrl	equ	0xFF6
 15194                           tablat	equ	0xFF5
 15195                           prodh	equ	0xFF4
 15196                           prodl	equ	0xFF3
 15197                           intcon	equ	0xFF2
 15198                           postinc0	equ	0xFEE
 15199                           wreg	equ	0xFE8
 15200                           indf1	equ	0xFE7
 15201                           postdec1	equ	0xFE5
 15202                           fsr1h	equ	0xFE2
 15203                           fsr1l	equ	0xFE1
 15204                           indf2	equ	0xFDF
 15205                           postinc2	equ	0xFDE
 15206                           postdec2	equ	0xFDD
 15207                           plusw2	equ	0xFDB
 15208                           fsr2h	equ	0xFDA
 15209                           fsr2l	equ	0xFD9
 15210                           status	equ	0xFD8
 15211                           
 15212 ;; *************** function _vscp_goActiveState *****************
 15213 ;; Defined at:
 15214 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
 15215 ;; Parameters:    Size  Location     Type
 15216 ;;		None
 15217 ;; Auto vars:     Size  Location     Type
 15218 ;;		None
 15219 ;; Return value:  Size  Location     Type
 15220 ;;		None               void
 15221 ;; Registers used:
 15222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15223 ;; Tracked objects:
 15224 ;;		On entry : 0/0
 15225 ;;		On exit  : F/0
 15226 ;;		Unchanged: 0/0
 15227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15228 ;;      Params:         0       0       0       0       0       0       0
 15229 ;;      Locals:         0       0       0       0       0       0       0
 15230 ;;      Temps:          0       0       0       0       0       0       0
 15231 ;;      Totals:         0       0       0       0       0       0       0
 15232 ;;Total ram usage:        0 bytes
 15233 ;; Hardware stack levels used:    1
 15234 ;; Hardware stack levels required when called:    7
 15235 ;; This function calls:
 15236 ;;		_vscp_sendEvent
 15237 ;; This function is called by:
 15238 ;;		_main
 15239 ;;		_vscp_handleProbeState
 15240 ;; This function uses a non-reentrant model
 15241 ;;
 15242                           
 15243                           	psect	text66
 15244  0052F0                     __ptext66:
 15245                           	opt stack 0
 15246  0052F0                     _vscp_goActiveState:
 15247                           	opt stack 21
 15248                           
 15249                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;incstack = 0
 15253                           ;incstack = 0
 15254  0052F0  0E81               	movlw	129
 15255  0052F2  0100               	movlb	0	; () banked
 15256  0052F4  6FCA               	movwf	_vscp_omsg& (0+255),b
 15257                           
 15258                           ; BSR set to: 0
 15259                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
 15260  0052F6  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 15261                           
 15262                           ; BSR set to: 0
 15263                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
 15264  0052F8  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 15265  0052FA  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 15266                           
 15267                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
 15268  0052FC  0E02               	movlw	2
 15269  0052FE  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 15270                           
 15271                           ; BSR set to: 0
 15272                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
 15273  005300  C0BA  F0CF         	movff	_vscp_nickname,_vscp_omsg+5
 15274                           
 15275                           ; BSR set to: 0
 15276                           ;vscp_firmware.c: 358: vscp_sendEvent();
 15277  005304  ECE6  F028         	call	_vscp_sendEvent	;wreg free
 15278                           
 15279                           ; BSR set to: 0
 15280                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
 15281  005308  0E01               	movlw	1
 15282  00530A  6E4D               	movwf	_vscp_initledfunc,c
 15283                           
 15284                           ; BSR set to: 0
 15285  00530C  0C01               	retlw	1
 15286  00530E                     __end_of_vscp_goActiveState:
 15287                           	opt stack 0
 15288                           tblptru	equ	0xFF8
 15289                           tblptrh	equ	0xFF7
 15290                           tblptrl	equ	0xFF6
 15291                           tablat	equ	0xFF5
 15292                           prodh	equ	0xFF4
 15293                           prodl	equ	0xFF3
 15294                           intcon	equ	0xFF2
 15295                           postinc0	equ	0xFEE
 15296                           wreg	equ	0xFE8
 15297                           indf1	equ	0xFE7
 15298                           postdec1	equ	0xFE5
 15299                           fsr1h	equ	0xFE2
 15300                           fsr1l	equ	0xFE1
 15301                           indf2	equ	0xFDF
 15302                           postinc2	equ	0xFDE
 15303                           postdec2	equ	0xFDD
 15304                           plusw2	equ	0xFDB
 15305                           fsr2h	equ	0xFDA
 15306                           fsr2l	equ	0xFD9
 15307                           status	equ	0xFD8
 15308                           
 15309 ;; *************** function _vscp_sendEvent *****************
 15310 ;; Defined at:
 15311 ;;		line 1270 in file "../../vscp_firmware/common/vscp_firmware.c"
 15312 ;; Parameters:    Size  Location     Type
 15313 ;;		None
 15314 ;; Auto vars:     Size  Location     Type
 15315 ;;  rv              1   66[COMRAM] unsigned char 
 15316 ;; Return value:  Size  Location     Type
 15317 ;;                  1    wreg      unsigned char 
 15318 ;; Registers used:
 15319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15320 ;; Tracked objects:
 15321 ;;		On entry : F/0
 15322 ;;		On exit  : F/0
 15323 ;;		Unchanged: 0/0
 15324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15325 ;;      Params:         0       0       0       0       0       0       0
 15326 ;;      Locals:         1       0       0       0       0       0       0
 15327 ;;      Temps:          0       0       0       0       0       0       0
 15328 ;;      Totals:         1       0       0       0       0       0       0
 15329 ;;Total ram usage:        1 bytes
 15330 ;; Hardware stack levels used:    1
 15331 ;; Hardware stack levels required when called:    6
 15332 ;; This function calls:
 15333 ;;		_sendVSCPFrame
 15334 ;; This function is called by:
 15335 ;;		_doWork
 15336 ;;		_doOneSecondWork
 15337 ;;		_sendTempEvent
 15338 ;;		_vscp_handleProbeState
 15339 ;;		_vscp_goActiveState
 15340 ;;		_vscp_sendHeartBeat
 15341 ;;		_vscp_newNodeOnline
 15342 ;;		_vscp_handleProtocolEvent
 15343 ;; This function uses a non-reentrant model
 15344 ;;
 15345                           
 15346                           	psect	text67
 15347  0051CC                     __ptext67:
 15348                           	opt stack 0
 15349  0051CC                     _vscp_sendEvent:
 15350                           	opt stack 22
 15351                           
 15352                           ; BSR set to: 0
 15353                           ;vscp_firmware.c: 1279: vscp_errorcnt++;
 15354                           
 15355                           ; BSR set to: 0
 15356                           ;incstack = 0
 15357                           ;incstack = 0
 15358  0051CC  C0CC  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15359  0051D0  C0CD  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15360  0051D4  C0CE  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15361  0051D8  C0BA  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15362  0051DC  C0CB  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15363  0051E0  51CA               	movf	_vscp_omsg& (0+255),w,b
 15364  0051E2  0B0F               	andlw	15
 15365  0051E4  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15366  0051E6  0ECF               	movlw	low (_vscp_omsg+5)
 15367  0051E8  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15368  0051EA  EC25  F022         	call	_sendVSCPFrame	;wreg free
 15369  0051EE  6E43               	movwf	vscp_sendEvent@rv,c
 15370                           
 15371                           ; BSR set to: 0
 15372                           ;vscp_firmware.c: 1280: }
 15373                           ;vscp_firmware.c: 1282: return rv;
 15374  0051F0  5043               	movf	vscp_sendEvent@rv,w,c
 15375                           
 15376                           ; BSR set to: 0
 15377  0051F2  0012               	return	
 15378  0051F4                     __end_of_vscp_sendEvent:
 15379                           	opt stack 0
 15380                           tblptru	equ	0xFF8
 15381                           tblptrh	equ	0xFF7
 15382                           tblptrl	equ	0xFF6
 15383                           tablat	equ	0xFF5
 15384                           prodh	equ	0xFF4
 15385                           prodl	equ	0xFF3
 15386                           intcon	equ	0xFF2
 15387                           postinc0	equ	0xFEE
 15388                           wreg	equ	0xFE8
 15389                           indf1	equ	0xFE7
 15390                           postdec1	equ	0xFE5
 15391                           fsr1h	equ	0xFE2
 15392                           fsr1l	equ	0xFE1
 15393                           indf2	equ	0xFDF
 15394                           postinc2	equ	0xFDE
 15395                           postdec2	equ	0xFDD
 15396                           plusw2	equ	0xFDB
 15397                           fsr2h	equ	0xFDA
 15398                           fsr2l	equ	0xFD9
 15399                           status	equ	0xFD8
 15400                           
 15401 ;; *************** function _sendVSCPFrame *****************
 15402 ;; Defined at:
 15403 ;;		line 2845 in file "../main.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15406 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15407 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15408 ;;  priority        1    4[BANK0 ] unsigned char 
 15409 ;;  size            1    5[BANK0 ] unsigned char 
 15410 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15411 ;;		 -> vscp_omsg(13), 
 15412 ;; Auto vars:     Size  Location     Type
 15413 ;;  id              4   27[BANK0 ] unsigned long 
 15414 ;; Return value:  Size  Location     Type
 15415 ;;                  1    wreg      unsigned char 
 15416 ;; Registers used:
 15417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15418 ;; Tracked objects:
 15419 ;;		On entry : F/0
 15420 ;;		On exit  : F/0
 15421 ;;		Unchanged: 0/0
 15422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15423 ;;      Params:         0       7       0       0       0       0       0
 15424 ;;      Locals:         0       4       0       0       0       0       0
 15425 ;;      Temps:          0      20       0       0       0       0       0
 15426 ;;      Totals:         0      31       0       0       0       0       0
 15427 ;;Total ram usage:       31 bytes
 15428 ;; Hardware stack levels used:    1
 15429 ;; Hardware stack levels required when called:    5
 15430 ;; This function calls:
 15431 ;;		_sendCANFrame
 15432 ;; This function is called by:
 15433 ;;		_vscp_sendEvent
 15434 ;; This function uses a non-reentrant model
 15435 ;;
 15436                           
 15437                           	psect	text68
 15438  00444A                     __ptext68:
 15439                           	opt stack 0
 15440  00444A                     _sendVSCPFrame:
 15441                           	opt stack 22
 15442                           
 15443                           ; BSR set to: 0
 15444                           ;main.c: 2846: uint32_t id = ((uint32_t) priority << 26) |
 15445                           ;main.c: 2847: ((uint32_t) vscpclass << 16) |
 15446                           ;main.c: 2848: ((uint32_t) vscptype << 8) |
 15447                           ;main.c: 2849: nodeid;
 15448                           
 15449                           ; BSR set to: 0
 15450                           ;incstack = 0
 15451                           ;incstack = 0
 15452  00444A  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15453  00444E  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15454  004450  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15455  004452  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15456  004454  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15457  004458  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15458  00445C  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15459  004460  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15460  004462  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15461  004464  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15462  004466  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15463  004468  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15464  00446A  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15465  00446C  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15466  00446E  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15467  004472  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15468  004476  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15469  004478  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15470  00447A  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15471  00447E  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15472  004480  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15473  004482  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15474  004484  0E1A               	movlw	26
 15475  004486                     u8995:
 15476  004486  90D8               	bcf	status,0,c
 15477  004488  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15478  00448A  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15479  00448C  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15480  00448E  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15481  004490  2EE8               	decfsz	wreg,f,c
 15482  004492  D7F9               	goto	u8995
 15483  004494  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15484  004496  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15485  004498  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15486  00449A  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15487  00449C  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15488  00449E  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15489  0044A0  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15490  0044A2  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15491  0044A4  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15492  0044A6  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15493  0044A8  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15494  0044AA  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15495  0044AC  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15496  0044AE  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15497  0044B0  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15498  0044B2  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15499  0044B4  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15500  0044B6  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15501  0044B8  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15502  0044BA  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15503  0044BC  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15504  0044BE  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15505  0044C0  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15506  0044C2  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15507  0044C4  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15508  0044C6  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15509  0044C8  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15510  0044CA  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15511  0044CC  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15512  0044CE  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15513  0044D0  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15514  0044D2  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15515  0044D4  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15516                           
 15517                           ; BSR set to: 0
 15518                           ;main.c: 2853: vscp_errorcnt++;
 15519  0044D6  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15520  0044DA  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15521  0044DE  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15522  0044E2  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15523  0044E6  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15524  0044EA  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15525  0044EE  ECD9  F027         	call	_sendCANFrame	;wreg free
 15526  0044F2  0900               	iorlw	0
 15527                           
 15528                           ; BSR set to: 0
 15529                           ;main.c: 2854: return 0;
 15530  0044F4  0E00               	movlw	0
 15531  0044F6  A4D8               	btfss	status,2,c
 15532                           
 15533                           ; BSR set to: 0
 15534                           ;main.c: 2855: }
 15535                           ;main.c: 2857: return 1;
 15536  0044F8  0E01               	movlw	1
 15537                           
 15538                           ; BSR set to: 0
 15539  0044FA  0012               	return	
 15540  0044FC                     __end_of_sendVSCPFrame:
 15541                           	opt stack 0
 15542                           tblptru	equ	0xFF8
 15543                           tblptrh	equ	0xFF7
 15544                           tblptrl	equ	0xFF6
 15545                           tablat	equ	0xFF5
 15546                           prodh	equ	0xFF4
 15547                           prodl	equ	0xFF3
 15548                           intcon	equ	0xFF2
 15549                           postinc0	equ	0xFEE
 15550                           wreg	equ	0xFE8
 15551                           indf1	equ	0xFE7
 15552                           postdec1	equ	0xFE5
 15553                           fsr1h	equ	0xFE2
 15554                           fsr1l	equ	0xFE1
 15555                           indf2	equ	0xFDF
 15556                           postinc2	equ	0xFDE
 15557                           postdec2	equ	0xFDD
 15558                           plusw2	equ	0xFDB
 15559                           fsr2h	equ	0xFDA
 15560                           fsr2l	equ	0xFD9
 15561                           status	equ	0xFD8
 15562                           
 15563 ;; *************** function _sendCANFrame *****************
 15564 ;; Defined at:
 15565 ;;		line 2892 in file "../main.c"
 15566 ;; Parameters:    Size  Location     Type
 15567 ;;  id              4   59[COMRAM] unsigned long 
 15568 ;;  dlc             1   63[COMRAM] unsigned char 
 15569 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15570 ;;		 -> vscp_omsg(13), 
 15571 ;; Auto vars:     Size  Location     Type
 15572 ;;  rv              1   65[COMRAM] unsigned char 
 15573 ;; Return value:  Size  Location     Type
 15574 ;;                  1    wreg      unsigned char 
 15575 ;; Registers used:
 15576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15577 ;; Tracked objects:
 15578 ;;		On entry : F/0
 15579 ;;		On exit  : F/0
 15580 ;;		Unchanged: 0/0
 15581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15582 ;;      Params:         6       0       0       0       0       0       0
 15583 ;;      Locals:         1       0       0       0       0       0       0
 15584 ;;      Temps:          0       0       0       0       0       0       0
 15585 ;;      Totals:         7       0       0       0       0       0       0
 15586 ;;Total ram usage:        7 bytes
 15587 ;; Hardware stack levels used:    1
 15588 ;; Hardware stack levels required when called:    4
 15589 ;; This function calls:
 15590 ;;		_ECANSendMessage
 15591 ;; This function is called by:
 15592 ;;		_sendVSCPFrame
 15593 ;; This function uses a non-reentrant model
 15594 ;;
 15595                           
 15596                           	psect	text69
 15597  004FB2                     __ptext69:
 15598                           	opt stack 0
 15599  004FB2                     _sendCANFrame:
 15600                           	opt stack 22
 15601                           
 15602                           ; BSR set to: 0
 15603                           ;main.c: 2893: uint8_t rv = 0;
 15604                           
 15605                           ; BSR set to: 0
 15606                           ;incstack = 0
 15607                           ;incstack = 0
 15608  004FB2  6A42               	clrf	sendCANFrame@rv,c
 15609                           
 15610                           ;main.c: 2894: sendTimer = 0;
 15611  004FB4  6A4A               	clrf	_sendTimer,c
 15612                           
 15613                           ;main.c: 2896: while ( sendTimer < 1 ) {
 15614  004FB6  D015               	goto	l11090
 15615  004FB8                     l11086:
 15616                           
 15617                           ;main.c: 2897: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15618  004FB8  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15619  004FBC  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15620  004FC0  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15621  004FC4  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15622  004FC8  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15623  004FCC  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15624  004FD0  0E20               	movlw	32
 15625  004FD2  6E1E               	movwf	?_ECANSendMessage+6,c
 15626  004FD4  ECD2  F01B         	call	_ECANSendMessage	;wreg free
 15627  004FD8  0900               	iorlw	0
 15628  004FDA  E003               	bz	l11090
 15629                           
 15630                           ;main.c: 2898: rv = 1;
 15631  004FDC  0E01               	movlw	1
 15632  004FDE  6E42               	movwf	sendCANFrame@rv,c
 15633                           
 15634                           ;main.c: 2899: break;
 15635  004FE0  D002               	goto	l635
 15636  004FE2                     l11090:
 15637  004FE2  504A               	movf	_sendTimer,w,c
 15638  004FE4  E0E9               	bz	l11086
 15639  004FE6                     l635:
 15640                           
 15641                           ;main.c: 2900: }
 15642                           ;main.c: 2901: }
 15643                           ;main.c: 2903: vscp_omsg.flags = 0;
 15644  004FE6  0100               	movlb	0	; () banked
 15645  004FE8  6BCA               	clrf	_vscp_omsg& (0+255),b
 15646                           
 15647                           ; BSR set to: 0
 15648                           ;main.c: 2905: return rv;
 15649  004FEA  5042               	movf	sendCANFrame@rv,w,c
 15650                           
 15651                           ; BSR set to: 0
 15652  004FEC  0012               	return	
 15653  004FEE                     __end_of_sendCANFrame:
 15654                           	opt stack 0
 15655                           tblptru	equ	0xFF8
 15656                           tblptrh	equ	0xFF7
 15657                           tblptrl	equ	0xFF6
 15658                           tablat	equ	0xFF5
 15659                           prodh	equ	0xFF4
 15660                           prodl	equ	0xFF3
 15661                           intcon	equ	0xFF2
 15662                           postinc0	equ	0xFEE
 15663                           wreg	equ	0xFE8
 15664                           indf1	equ	0xFE7
 15665                           postdec1	equ	0xFE5
 15666                           fsr1h	equ	0xFE2
 15667                           fsr1l	equ	0xFE1
 15668                           indf2	equ	0xFDF
 15669                           postinc2	equ	0xFDE
 15670                           postdec2	equ	0xFDD
 15671                           plusw2	equ	0xFDB
 15672                           fsr2h	equ	0xFDA
 15673                           fsr2l	equ	0xFD9
 15674                           status	equ	0xFD8
 15675                           
 15676 ;; *************** function _ECANSendMessage *****************
 15677 ;; Defined at:
 15678 ;;		line 617 in file "../ECAN.c"
 15679 ;; Parameters:    Size  Location     Type
 15680 ;;  id              4   23[COMRAM] unsigned long 
 15681 ;;  data            1   27[COMRAM] PTR unsigned char 
 15682 ;;		 -> vscp_omsg(13), 
 15683 ;;  dataLen         1   28[COMRAM] unsigned char 
 15684 ;;  msgFlags        1   29[COMRAM] enum E16315
 15685 ;; Auto vars:     Size  Location     Type
 15686 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15687 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15688 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15689 ;;		 -> B0CON(1), 
 15690 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15691 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15692 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15693 ;;		 -> B0CON(1), 
 15694 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15695 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15696 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15697 ;;		 -> B0CON(1), 
 15698 ;;  i               1   56[COMRAM] unsigned char 
 15699 ;;  temp            1   55[COMRAM] unsigned char 
 15700 ;;  tempBSEL0       1   52[COMRAM] struct .
 15701 ;;  j               1   51[COMRAM] unsigned char 
 15702 ;;  buffers         1   50[COMRAM] unsigned char 
 15703 ;;  mode            1   49[COMRAM] unsigned char 
 15704 ;; Return value:  Size  Location     Type
 15705 ;;                  1    wreg      enum E15660
 15706 ;; Registers used:
 15707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15708 ;; Tracked objects:
 15709 ;;		On entry : 0/0
 15710 ;;		On exit  : 0/0
 15711 ;;		Unchanged: 0/0
 15712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15713 ;;      Params:         7       0       0       0       0       0       0
 15714 ;;      Locals:        28       0       0       0       0       0       0
 15715 ;;      Temps:          1       0       0       0       0       0       0
 15716 ;;      Totals:        36       0       0       0       0       0       0
 15717 ;;Total ram usage:       36 bytes
 15718 ;; Hardware stack levels used:    1
 15719 ;; Hardware stack levels required when called:    3
 15720 ;; This function calls:
 15721 ;;		__CANIDToRegs
 15722 ;; This function is called by:
 15723 ;;		_sendCANFrame
 15724 ;; This function uses a non-reentrant model
 15725 ;;
 15726                           
 15727                           	psect	text70
 15728  0037A4                     __ptext70:
 15729                           	opt stack 0
 15730  0037A4                     _ECANSendMessage:
 15731                           	opt stack 22
 15732                           
 15733                           ;ECAN.c: 619: BYTE mode;
 15734                           ;ECAN.c: 620: BYTE buffers;
 15735                           ;ECAN.c: 628: BYTE i,j;
 15736                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15737                           ;ECAN.c: 630: BYTE* pb[9];
 15738                           ;ECAN.c: 631: BYTE temp;
 15739                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15740                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15741                           
 15742                           ; BSR set to: 0
 15743                           ;incstack = 0
 15744                           ;incstack = 0
 15745  0037A4  0E0F               	movlw	15	;volatile
 15746  0037A6  6E21               	movwf	ECANSendMessage@pb+1,c
 15747  0037A8  0E40               	movlw	64	;volatile
 15748  0037AA  6E20               	movwf	ECANSendMessage@pb,c
 15749                           
 15750                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15751  0037AC  0E0F               	movlw	15	;volatile
 15752  0037AE  6E23               	movwf	ECANSendMessage@pb+3,c
 15753  0037B0  0E30               	movlw	48	;volatile
 15754  0037B2  6E22               	movwf	ECANSendMessage@pb+2,c
 15755                           
 15756                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15757  0037B4  0E0F               	movlw	15	;volatile
 15758  0037B6  6E25               	movwf	ECANSendMessage@pb+5,c
 15759  0037B8  0E20               	movlw	32	;volatile
 15760  0037BA  6E24               	movwf	ECANSendMessage@pb+4,c
 15761                           
 15762                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15763  0037BC  0E0E               	movlw	14	;volatile
 15764  0037BE  6E27               	movwf	ECANSendMessage@pb+7,c
 15765  0037C0  0E20               	movlw	32	;volatile
 15766  0037C2  6E26               	movwf	ECANSendMessage@pb+6,c
 15767                           
 15768                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15769  0037C4  0E0E               	movlw	14	;volatile
 15770  0037C6  6E29               	movwf	ECANSendMessage@pb+9,c
 15771  0037C8  0E30               	movlw	48	;volatile
 15772  0037CA  6E28               	movwf	ECANSendMessage@pb+8,c
 15773                           
 15774                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15775  0037CC  0E0E               	movlw	14	;volatile
 15776  0037CE  6E2B               	movwf	ECANSendMessage@pb+11,c
 15777  0037D0  0E40               	movlw	64	;volatile
 15778  0037D2  6E2A               	movwf	ECANSendMessage@pb+10,c
 15779                           
 15780                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15781  0037D4  0E0E               	movlw	14	;volatile
 15782  0037D6  6E2D               	movwf	ECANSendMessage@pb+13,c
 15783  0037D8  0E50               	movlw	80	;volatile
 15784  0037DA  6E2C               	movwf	ECANSendMessage@pb+12,c
 15785                           
 15786                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15787  0037DC  0E0E               	movlw	14	;volatile
 15788  0037DE  6E2F               	movwf	ECANSendMessage@pb+15,c
 15789  0037E0  0E60               	movlw	96	;volatile
 15790  0037E2  6E2E               	movwf	ECANSendMessage@pb+14,c
 15791                           
 15792                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15793  0037E4  0E0E               	movlw	14	;volatile
 15794  0037E6  6E31               	movwf	ECANSendMessage@pb+17,c
 15795  0037E8  0E70               	movlw	112	;volatile
 15796  0037EA  6E30               	movwf	ECANSendMessage@pb+16,c
 15797                           
 15798                           ; BSR set to: 14
 15799                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15800  0037EC  5077               	movf	3959,w,c	;volatile
 15801  0037EE  0BC0               	andlw	192
 15802  0037F0  6E32               	movwf	ECANSendMessage@mode,c
 15803                           
 15804                           ; BSR set to: 14
 15805                           ;ECAN.c: 660: if ( mode == 0x00 )
 15806  0037F2  6632               	tstfsz	ECANSendMessage@mode,c
 15807  0037F4  D002               	goto	l11104
 15808                           
 15809                           ; BSR set to: 14
 15810                           ;ECAN.c: 661: buffers = 2;
 15811  0037F6  0E02               	movlw	2
 15812  0037F8  D001               	goto	L21
 15813  0037FA                     l11104:
 15814                           
 15815                           ; BSR set to: 14
 15816                           ;ECAN.c: 662: else
 15817                           ;ECAN.c: 663: buffers = 8;
 15818  0037FA  0E08               	movlw	8
 15819  0037FC                     L21:
 15820  0037FC  6E33               	movwf	ECANSendMessage@buffers,c
 15821                           
 15822                           ; BSR set to: 14
 15823                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15824  0037FE  010D               	movlb	13	; () banked
 15825  003800  90D8               	bcf	status,0,c
 15826  003802  31F8               	rrcf	248,w,b	;volatile
 15827  003804  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15828                           
 15829                           ; BSR set to: 13
 15830                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15831  003806  6A39               	clrf	ECANSendMessage@i,c
 15832  003808  D07B               	goto	l11164
 15833  00380A                     l11110:
 15834                           
 15835                           ;ECAN.c: 688: {
 15836                           ;ECAN.c: 693: ptr = pb[i];
 15837  00380A  5039               	movf	ECANSendMessage@i,w,c
 15838  00380C  0D02               	mullw	2
 15839  00380E  50F3               	movf	prodl,w,c
 15840  003810  0F20               	addlw	low ECANSendMessage@pb
 15841  003812  6ED9               	movwf	fsr2l,c
 15842  003814  6ADA               	clrf	fsr2h,c
 15843  003816  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15844  00381A  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15845                           
 15846                           ;ECAN.c: 694: tempPtr = ptr;
 15847  00381E  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15848  003822  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15849                           
 15850                           ;ECAN.c: 702: if ( i > 2 )
 15851  003826  0E02               	movlw	2
 15852  003828  6439               	cpfsgt	ECANSendMessage@i,c
 15853  00382A  D004               	goto	l11122
 15854                           
 15855                           ;ECAN.c: 703: {
 15856                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15857  00382C  90D8               	bcf	status,0,c
 15858  00382E  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15859                           
 15860                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15861  003830  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15862  003832  D065               	goto	l11162
 15863  003834                     l11122:
 15864                           
 15865                           ;ECAN.c: 714: }
 15866                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15867  003834  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15868  003838  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15869  00383C  50DF               	movf	indf2,w,c
 15870  00383E  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15871  003840  B61F               	btfsc	??_ECANSendMessage,3,c
 15872  003842  D05D               	goto	l11162
 15873                           
 15874                           ;ECAN.c: 721: {
 15875                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15876  003844  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15877  003848  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15878  00384C  0EFC               	movlw	252
 15879  00384E  16DF               	andwf	indf2,f,c
 15880                           
 15881                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15882  003850  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15883  003854  0E03               	movlw	3
 15884  003856  161F               	andwf	??_ECANSendMessage,f,c
 15885  003858  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15886  00385C  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15887  003860  501F               	movf	??_ECANSendMessage,w,c
 15888  003862  12DF               	iorwf	indf2,f,c
 15889                           
 15890                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15891  003864  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15892  003866  D004               	goto	l823
 15893                           
 15894                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15895  003868  501D               	movf	ECANSendMessage@dataLen,w,c
 15896  00386A  0940               	iorlw	64
 15897  00386C  6E38               	movwf	ECANSendMessage@temp,c
 15898  00386E  D002               	goto	l11132
 15899  003870                     l823:
 15900                           
 15901                           ;ECAN.c: 729: else
 15902                           ;ECAN.c: 730: temp = dataLen;
 15903  003870  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15904  003874                     l11132:
 15905                           
 15906                           ;ECAN.c: 732: *(ptr+5) = temp;
 15907  003874  EE20 F005          	lfsr	2,5
 15908  003878  503A               	movf	ECANSendMessage@ptr,w,c
 15909  00387A  26D9               	addwf	fsr2l,f,c
 15910  00387C  503B               	movf	ECANSendMessage@ptr+1,w,c
 15911  00387E  22DA               	addwfc	fsr2h,f,c
 15912  003880  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15913                           
 15914                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15915  003884  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15916  003886  D003               	goto	l825
 15917                           
 15918                           ;ECAN.c: 736: temp = 1;
 15919  003888  0E01               	movlw	1
 15920  00388A  6E38               	movwf	ECANSendMessage@temp,c
 15921  00388C  D001               	goto	l11138
 15922  00388E                     l825:
 15923                           
 15924                           ;ECAN.c: 738: else
 15925                           ;ECAN.c: 739: temp = 0;
 15926  00388E  6A38               	clrf	ECANSendMessage@temp,c
 15927  003890                     l11138:
 15928                           
 15929                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15930  003890  283A               	incf	ECANSendMessage@ptr,w,c
 15931  003892  6E0E               	movwf	?__CANIDToRegs,c
 15932  003894  0E00               	movlw	0
 15933  003896  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15934  003898  6E0F               	movwf	?__CANIDToRegs+1,c
 15935  00389A  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15936  00389E  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15937  0038A2  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15938  0038A6  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15939  0038AA  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15940  0038AE  EC56  F01E         	call	__CANIDToRegs	;wreg free
 15941                           
 15942                           ;ECAN.c: 745: ptr += 6;
 15943  0038B2  0E06               	movlw	6
 15944  0038B4  263A               	addwf	ECANSendMessage@ptr,f,c
 15945  0038B6  0E00               	movlw	0
 15946  0038B8  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15947                           
 15948                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15949  0038BA  6A34               	clrf	ECANSendMessage@j,c
 15950  0038BC  D00D               	goto	l11152
 15951  0038BE                     l11144:
 15952                           
 15953                           ;ECAN.c: 748: *ptr++ = *data++;
 15954  0038BE  501C               	movf	ECANSendMessage@data,w,c
 15955  0038C0  6ED9               	movwf	fsr2l,c
 15956  0038C2  6ADA               	clrf	fsr2h,c
 15957  0038C4  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15958  0038C8  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15959  0038CC  CFDF FFE7          	movff	indf2,indf1
 15960  0038D0  2A1C               	incf	ECANSendMessage@data,f,c
 15961  0038D2  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15962  0038D4  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15963  0038D6  2A34               	incf	ECANSendMessage@j,f,c
 15964  0038D8                     l11152:
 15965  0038D8  501D               	movf	ECANSendMessage@dataLen,w,c
 15966  0038DA  5C34               	subwf	ECANSendMessage@j,w,c
 15967  0038DC  E3F0               	bnc	l11144
 15968                           
 15969                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15970  0038DE  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15971  0038E2  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15972  0038E6  50DF               	movf	indf2,w,c
 15973  0038E8  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15974  0038EA  B41F               	btfsc	??_ECANSendMessage,2,c
 15975  0038EC  D006               	goto	l11158
 15976                           
 15977                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15978  0038EE  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15979  0038F2  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15980  0038F6  0E00               	movlw	0
 15981  0038F8  86DB               	bsf	plusw2,3,c
 15982  0038FA                     l11158:
 15983                           
 15984                           ;ECAN.c: 755: return TRUE;
 15985  0038FA  0E01               	movlw	1
 15986  0038FC  D005               	goto	l831
 15987  0038FE                     l11162:
 15988  0038FE  2A39               	incf	ECANSendMessage@i,f,c
 15989  003900                     l11164:
 15990  003900  5033               	movf	ECANSendMessage@buffers,w,c
 15991  003902  5C39               	subwf	ECANSendMessage@i,w,c
 15992  003904  E382               	bnc	l11110
 15993                           
 15994                           ;ECAN.c: 756: }
 15995                           ;ECAN.c: 757: }
 15996                           ;ECAN.c: 760: return FALSE;
 15997  003906  0E00               	movlw	0
 15998  003908                     l831:
 15999  003908  0012               	return	
 16000  00390A                     __end_of_ECANSendMessage:
 16001                           	opt stack 0
 16002                           tblptru	equ	0xFF8
 16003                           tblptrh	equ	0xFF7
 16004                           tblptrl	equ	0xFF6
 16005                           tablat	equ	0xFF5
 16006                           prodh	equ	0xFF4
 16007                           prodl	equ	0xFF3
 16008                           intcon	equ	0xFF2
 16009                           postinc0	equ	0xFEE
 16010                           wreg	equ	0xFE8
 16011                           indf1	equ	0xFE7
 16012                           postdec1	equ	0xFE5
 16013                           fsr1h	equ	0xFE2
 16014                           fsr1l	equ	0xFE1
 16015                           indf2	equ	0xFDF
 16016                           postinc2	equ	0xFDE
 16017                           postdec2	equ	0xFDD
 16018                           plusw2	equ	0xFDB
 16019                           fsr2h	equ	0xFDA
 16020                           fsr2l	equ	0xFD9
 16021                           status	equ	0xFD8
 16022                           
 16023 ;; *************** function __CANIDToRegs *****************
 16024 ;; Defined at:
 16025 ;;		line 1099 in file "../ECAN.c"
 16026 ;; Parameters:    Size  Location     Type
 16027 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16028 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16029 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16030 ;;		 -> B0CON(1), 
 16031 ;;  val             4   15[COMRAM] unsigned long 
 16032 ;;  type            1   19[COMRAM] unsigned char 
 16033 ;; Auto vars:     Size  Location     Type
 16034 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 16035 ;;		 -> _CANIDToRegs@val(4), 
 16036 ;; Return value:  Size  Location     Type
 16037 ;;		None               void
 16038 ;; Registers used:
 16039 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16040 ;; Tracked objects:
 16041 ;;		On entry : 0/D
 16042 ;;		On exit  : 0/0
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16045 ;;      Params:         7       0       0       0       0       0       0
 16046 ;;      Locals:         1       0       0       0       0       0       0
 16047 ;;      Temps:          2       0       0       0       0       0       0
 16048 ;;      Totals:        10       0       0       0       0       0       0
 16049 ;;Total ram usage:       10 bytes
 16050 ;; Hardware stack levels used:    1
 16051 ;; Hardware stack levels required when called:    2
 16052 ;; This function calls:
 16053 ;;		Nothing
 16054 ;; This function is called by:
 16055 ;;		_ECANSendMessage
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           	psect	text71
 16060  003CAC                     __ptext71:
 16061                           	opt stack 0
 16062  003CAC                     __CANIDToRegs:
 16063                           	opt stack 22
 16064                           
 16065                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16066                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16067                           
 16068                           ;incstack = 0
 16069                           ;incstack = 0
 16070  003CAC  0E10               	movlw	low __CANIDToRegs@val
 16071  003CAE  6E17               	movwf	__CANIDToRegs@Value,c
 16072                           
 16073                           ;ECAN.c: 1104: if ( type == 0 )
 16074  003CB0  6614               	tstfsz	__CANIDToRegs@type,c
 16075  003CB2  D022               	goto	l11180
 16076                           
 16077                           ;ECAN.c: 1105: {
 16078                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16079  003CB4  5017               	movf	__CANIDToRegs@Value,w,c
 16080  003CB6  6ED9               	movwf	fsr2l,c
 16081  003CB8  6ADA               	clrf	fsr2h,c
 16082  003CBA  50DF               	movf	indf2,w,c
 16083  003CBC  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16084  003CBE  90D8               	bcf	status,0,c
 16085  003CC0  3215               	rrcf	??__CANIDToRegs,f,c
 16086  003CC2  90D8               	bcf	status,0,c
 16087  003CC4  3215               	rrcf	??__CANIDToRegs,f,c
 16088  003CC6  90D8               	bcf	status,0,c
 16089  003CC8  3015               	rrcf	??__CANIDToRegs,w,c
 16090                           
 16091                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16092  003CCA  D862               	call	PL36	;call to abstracted procedure
 16093  003CCC  2AD9               	incf	fsr2l,f,c
 16094  003CCE  6ADA               	clrf	fsr2h,c
 16095  003CD0  D872               	call	PL82	;call to abstracted procedure
 16096  003CD2                     u9135:
 16097  003CD2  90D8               	bcf	status,0,c
 16098  003CD4  3615               	rlcf	??__CANIDToRegs,f,c
 16099  003CD6  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16100  003CD8  D7FC               	goto	u9135
 16101  003CDA  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16102                           
 16103                           ;ECAN.c: 1109: ptr++;
 16104                           
 16105                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16106  003CDE  D846               	call	PL16	;call to abstracted procedure
 16107  003CE0  D86A               	call	PL82	;call to abstracted procedure
 16108  003CE2                     u9145:
 16109  003CE2  90D8               	bcf	status,0,c
 16110  003CE4  3615               	rlcf	??__CANIDToRegs,f,c
 16111  003CE6  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16112  003CE8  D7FC               	goto	u9145
 16113  003CEA  5015               	movf	??__CANIDToRegs,w,c
 16114  003CEC  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16115  003CF0  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16116  003CF4  6EDF               	movwf	indf2,c
 16117                           
 16118                           ;ECAN.c: 1111: }
 16119  003CF6  D039               	goto	l885
 16120  003CF8                     l11180:
 16121                           
 16122                           ;ECAN.c: 1112: else
 16123                           ;ECAN.c: 1113: {
 16124                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16125  003CF8  5017               	movf	__CANIDToRegs@Value,w,c
 16126  003CFA  D842               	call	PL32	;call to abstracted procedure
 16127  003CFC  0E05               	movlw	5
 16128  003CFE  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16129  003D00                     u9155:
 16130  003D00  90D8               	bcf	status,0,c
 16131  003D02  3215               	rrcf	??__CANIDToRegs,f,c
 16132  003D04  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16133  003D06  D7FC               	goto	u9155
 16134  003D08  5015               	movf	??__CANIDToRegs,w,c
 16135                           
 16136                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16137  003D0A  D842               	call	PL36	;call to abstracted procedure
 16138  003D0C  0E03               	movlw	3
 16139  003D0E  D849               	call	PL50	;call to abstracted procedure
 16140  003D10  3615               	rlcf	??__CANIDToRegs,f,c
 16141  003D12  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16142                           
 16143                           ;ECAN.c: 1117: ptr++;
 16144                           
 16145                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16146  003D16  D82A               	call	PL16	;call to abstracted procedure
 16147  003D18  0E02               	movlw	2
 16148  003D1A  D843               	call	PL50	;call to abstracted procedure
 16149  003D1C  3415               	rlcf	??__CANIDToRegs,w,c
 16150  003D1E  0BE0               	andlw	224
 16151  003D20  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16152  003D24  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16153  003D28  6EDF               	movwf	indf2,c
 16154                           
 16155                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16156  003D2A  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16157  003D2E  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16158  003D32  0E00               	movlw	0
 16159  003D34  86DB               	bsf	plusw2,3,c
 16160                           
 16161                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16162  003D36  5017               	movf	__CANIDToRegs@Value,w,c
 16163  003D38  D823               	call	PL32	;call to abstracted procedure
 16164  003D3A  0E03               	movlw	3
 16165  003D3C  1615               	andwf	??__CANIDToRegs,f,c
 16166  003D3E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16167                           
 16168                           ;ECAN.c: 1122: ptr++;
 16169                           
 16170                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16171  003D42  D814               	call	PL16	;call to abstracted procedure
 16172  003D44  2AD9               	incf	fsr2l,f,c
 16173  003D46  6ADA               	clrf	fsr2h,c
 16174  003D48  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16175  003D4C  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16176  003D50  CFDF FFE7          	movff	indf2,indf1
 16177                           
 16178                           ;ECAN.c: 1124: ptr++;
 16179  003D54  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16180  003D56  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16181                           
 16182                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16183  003D58  5017               	movf	__CANIDToRegs@Value,w,c
 16184  003D5A  6ED9               	movwf	fsr2l,c
 16185  003D5C  6ADA               	clrf	fsr2h,c
 16186  003D5E  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16187  003D62  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16188  003D66  CFDF FFE7          	movff	indf2,indf1
 16189  003D6A                     l885:
 16190  003D6A  0012               	return	
 16191  003D6C                     __end_of__CANIDToRegs:
 16192                           	opt stack 0
 16193  003D6C                     PL16:
 16194                           	opt stack 22
 16195  003D6C  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16196  003D70  5015               	movf	??__CANIDToRegs,w,c
 16197  003D72  12DF               	iorwf	indf2,f,c
 16198  003D74  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16199  003D76  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16200  003D78  5017               	movf	__CANIDToRegs@Value,w,c
 16201  003D7A  6ED9               	movwf	fsr2l,c
 16202  003D7C  6ADA               	clrf	fsr2h,c
 16203  003D7E  0012               	return	
 16204  003D80                     __end_ofPL16:
 16205                           	opt stack 0
 16206  003D80                     PL32:
 16207                           	opt stack 22
 16208  003D80  6ED9               	movwf	fsr2l,c
 16209  003D82  6ADA               	clrf	fsr2h,c
 16210  003D84  0E02               	movlw	2
 16211  003D86  26D9               	addwf	fsr2l,f,c
 16212  003D88  6ADA               	clrf	fsr2h,c
 16213  003D8A  50DF               	movf	indf2,w,c
 16214  003D8C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16215  003D8E  0012               	return	
 16216  003D90                     __end_ofPL32:
 16217                           	opt stack 0
 16218  003D90                     PL36:
 16219                           	opt stack 22
 16220  003D90  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16221  003D94  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16222  003D98  6EDF               	movwf	indf2,c
 16223  003D9A  5017               	movf	__CANIDToRegs@Value,w,c
 16224  003D9C  6ED9               	movwf	fsr2l,c
 16225  003D9E  6ADA               	clrf	fsr2h,c
 16226  003DA0  0012               	return	
 16227  003DA2                     __end_ofPL36:
 16228                           	opt stack 0
 16229  003DA2                     PL50:
 16230                           	opt stack 22
 16231  003DA2  26D9               	addwf	fsr2l,f,c
 16232  003DA4  6ADA               	clrf	fsr2h,c
 16233  003DA6  50DF               	movf	indf2,w,c
 16234  003DA8  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16235  003DAA  90D8               	bcf	status,0,c
 16236  003DAC  3615               	rlcf	??__CANIDToRegs,f,c
 16237  003DAE  90D8               	bcf	status,0,c
 16238  003DB0  3615               	rlcf	??__CANIDToRegs,f,c
 16239  003DB2  90D8               	bcf	status,0,c
 16240  003DB4  0012               	return	
 16241  003DB6                     __end_ofPL50:
 16242                           	opt stack 0
 16243  003DB6                     PL82:
 16244                           	opt stack 22
 16245  003DB6  50DF               	movf	indf2,w,c
 16246  003DB8  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16247  003DBA  0E05               	movlw	5
 16248  003DBC  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16249  003DBE  0C05               	retlw	5
 16250  003DC0                     __end_ofPL82:
 16251                           	opt stack 0
 16252                           tblptru	equ	0xFF8
 16253                           tblptrh	equ	0xFF7
 16254                           tblptrl	equ	0xFF6
 16255                           tablat	equ	0xFF5
 16256                           prodh	equ	0xFF4
 16257                           prodl	equ	0xFF3
 16258                           intcon	equ	0xFF2
 16259                           postinc0	equ	0xFEE
 16260                           wreg	equ	0xFE8
 16261                           indf1	equ	0xFE7
 16262                           postdec1	equ	0xFE5
 16263                           fsr1h	equ	0xFE2
 16264                           fsr1l	equ	0xFE1
 16265                           indf2	equ	0xFDF
 16266                           postinc2	equ	0xFDE
 16267                           postdec2	equ	0xFDD
 16268                           plusw2	equ	0xFDB
 16269                           fsr2h	equ	0xFDA
 16270                           fsr2l	equ	0xFD9
 16271                           status	equ	0xFD8
 16272                           
 16273 ;; *************** function _vscp_getEvent *****************
 16274 ;; Defined at:
 16275 ;;		line 1290 in file "../../vscp_firmware/common/vscp_firmware.c"
 16276 ;; Parameters:    Size  Location     Type
 16277 ;;		None
 16278 ;; Auto vars:     Size  Location     Type
 16279 ;;  rv              1   49[COMRAM] unsigned char 
 16280 ;; Return value:  Size  Location     Type
 16281 ;;                  1    wreg      unsigned char 
 16282 ;; Registers used:
 16283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16284 ;; Tracked objects:
 16285 ;;		On entry : F/0
 16286 ;;		On exit  : 0/0
 16287 ;;		Unchanged: 0/0
 16288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16289 ;;      Params:         0       0       0       0       0       0       0
 16290 ;;      Locals:         1       0       0       0       0       0       0
 16291 ;;      Temps:          0       0       0       0       0       0       0
 16292 ;;      Totals:         1       0       0       0       0       0       0
 16293 ;;Total ram usage:        1 bytes
 16294 ;; Hardware stack levels used:    1
 16295 ;; Hardware stack levels required when called:    6
 16296 ;; This function calls:
 16297 ;;		_getVSCPFrame
 16298 ;; This function is called by:
 16299 ;;		_main
 16300 ;; This function uses a non-reentrant model
 16301 ;;
 16302                           
 16303                           	psect	text72
 16304  00517A                     __ptext72:
 16305                           	opt stack 0
 16306  00517A                     _vscp_getEvent:
 16307                           	opt stack 23
 16308                           
 16309                           ; BSR set to: 0
 16310                           ;vscp_firmware.c: 1291: int8_t rv;
 16311                           ;vscp_firmware.c: 1297: if (vscp_imsg.flags & 0x80) return !0;
 16312                           
 16313                           ;incstack = 0
 16314                           ;incstack = 0
 16315  00517A  BFBC               	btfsc	_vscp_imsg& (0+255),7,b
 16316  00517C  D012               	goto	l1278
 16317                           
 16318                           ; BSR set to: 0
 16319                           ;vscp_firmware.c: 1300: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 16320                           ;vscp_firmware.c: 1301: &vscp_imsg.vscp_type,
 16321                           ;vscp_firmware.c: 1302: &vscp_imsg.oaddr,
 16322                           ;vscp_firmware.c: 1303: &vscp_imsg.priority,
 16323                           ;vscp_firmware.c: 1304: &vscp_imsg.flags,
 16324                           ;vscp_firmware.c: 1305: vscp_imsg.data))) {
 16325  00517E  0EC0               	movlw	low (_vscp_imsg+4)
 16326  005180  6E24               	movwf	?_getVSCPFrame,c
 16327  005182  0EC1               	movlw	low (_vscp_imsg+5)
 16328  005184  6E25               	movwf	?_getVSCPFrame+1,c
 16329  005186  0EBD               	movlw	low (_vscp_imsg+1)
 16330  005188  6E26               	movwf	?_getVSCPFrame+2,c
 16331  00518A  0EBC               	movlw	low _vscp_imsg
 16332  00518C  6E27               	movwf	?_getVSCPFrame+3,c
 16333  00518E  0EC2               	movlw	low (_vscp_imsg+6)
 16334  005190  6E28               	movwf	?_getVSCPFrame+4,c
 16335  005192  0EBE               	movlw	(_vscp_imsg+2)& (0+255)
 16336  005194  EC29  F025         	call	_getVSCPFrame
 16337  005198  6E32               	movwf	vscp_getEvent@rv,c
 16338  00519A  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16339  00519C  E002               	bz	l1278
 16340                           
 16341                           ;vscp_firmware.c: 1307: vscp_imsg.flags |= 0x80;
 16342  00519E  0100               	movlb	0	; () banked
 16343  0051A0  8FBC               	bsf	_vscp_imsg& (0+255),7,b
 16344  0051A2                     l1278:
 16345  0051A2  0012               	return	
 16346  0051A4                     __end_of_vscp_getEvent:
 16347                           	opt stack 0
 16348                           tblptru	equ	0xFF8
 16349                           tblptrh	equ	0xFF7
 16350                           tblptrl	equ	0xFF6
 16351                           tablat	equ	0xFF5
 16352                           prodh	equ	0xFF4
 16353                           prodl	equ	0xFF3
 16354                           intcon	equ	0xFF2
 16355                           postinc0	equ	0xFEE
 16356                           wreg	equ	0xFE8
 16357                           indf1	equ	0xFE7
 16358                           postdec1	equ	0xFE5
 16359                           fsr1h	equ	0xFE2
 16360                           fsr1l	equ	0xFE1
 16361                           indf2	equ	0xFDF
 16362                           postinc2	equ	0xFDE
 16363                           postdec2	equ	0xFDD
 16364                           plusw2	equ	0xFDB
 16365                           fsr2h	equ	0xFDA
 16366                           fsr2l	equ	0xFD9
 16367                           status	equ	0xFD8
 16368                           
 16369 ;; *************** function _getVSCPFrame *****************
 16370 ;; Defined at:
 16371 ;;		line 2871 in file "../main.c"
 16372 ;; Parameters:    Size  Location     Type
 16373 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16374 ;;		 -> vscp_imsg(14), 
 16375 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16376 ;;		 -> vscp_imsg(14), 
 16377 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16378 ;;		 -> vscp_imsg(14), 
 16379 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16380 ;;		 -> vscp_imsg(14), 
 16381 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16382 ;;		 -> vscp_imsg(14), 
 16383 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16384 ;;		 -> vscp_imsg(14), 
 16385 ;; Auto vars:     Size  Location     Type
 16386 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16387 ;;		 -> vscp_imsg(14), 
 16388 ;;  id              4   45[COMRAM] unsigned long 
 16389 ;; Return value:  Size  Location     Type
 16390 ;;                  1    wreg      unsigned char 
 16391 ;; Registers used:
 16392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16393 ;; Tracked objects:
 16394 ;;		On entry : F/0
 16395 ;;		On exit  : 0/0
 16396 ;;		Unchanged: 0/0
 16397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16398 ;;      Params:         5       0       0       0       0       0       0
 16399 ;;      Locals:         5       0       0       0       0       0       0
 16400 ;;      Temps:          4       0       0       0       0       0       0
 16401 ;;      Totals:        14       0       0       0       0       0       0
 16402 ;;Total ram usage:       14 bytes
 16403 ;; Hardware stack levels used:    1
 16404 ;; Hardware stack levels required when called:    5
 16405 ;; This function calls:
 16406 ;;		_getCANFrame
 16407 ;; This function is called by:
 16408 ;;		_vscp_getEvent
 16409 ;; This function uses a non-reentrant model
 16410 ;;
 16411                           
 16412                           	psect	text73
 16413  004A52                     __ptext73:
 16414                           	opt stack 0
 16415  004A52                     _getVSCPFrame:
 16416                           	opt stack 23
 16417                           
 16418                           ;incstack = 0
 16419                           ;incstack = 0
 16420                           ;getVSCPFrame@pvscpclass stored from wreg
 16421  004A52  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16422                           
 16423                           ; BSR set to: 0
 16424                           ;main.c: 2872: uint32_t id;
 16425                           ;main.c: 2874: if (!getCANFrame(&id, pSize, pData)) {
 16426  004A56  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16427  004A5A  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16428  004A5E  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16429  004A60  EC7D  F028         	call	_getCANFrame
 16430  004A64  0900               	iorlw	0
 16431  004A66  E102               	bnz	l8158
 16432                           
 16433                           ;main.c: 2875: return 0;
 16434  004A68  0E00               	movlw	0
 16435  004A6A  D02E               	goto	l629
 16436  004A6C                     l8158:
 16437                           
 16438                           ;main.c: 2876: }
 16439                           ;main.c: 2878: *pNodeId = id & 0x0ff;
 16440  004A6C  5025               	movf	getVSCPFrame@pNodeId,w,c
 16441  004A6E  6ED9               	movwf	fsr2l,c
 16442  004A70  6ADA               	clrf	fsr2h,c
 16443  004A72  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16444                           
 16445                           ;main.c: 2879: *pvscptype = (id >> 8) & 0xff;
 16446  004A76  5024               	movf	getVSCPFrame@pvscptype,w,c
 16447  004A78  6ED9               	movwf	fsr2l,c
 16448  004A7A  6ADA               	clrf	fsr2h,c
 16449  004A7C  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16450                           
 16451                           ;main.c: 2880: *pvscpclass = (id >> 16) & 0x1ff;
 16452  004A80  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16453  004A82  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16454  004A84  0E01               	movlw	1
 16455  004A86  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16456  004A88  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16457  004A8A  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16458  004A8C  6ED9               	movwf	fsr2l,c
 16459  004A8E  6ADA               	clrf	fsr2h,c
 16460  004A90  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16461  004A94  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16462                           
 16463                           ;main.c: 2881: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16464  004A98  5026               	movf	getVSCPFrame@pPriority,w,c
 16465  004A9A  6ED9               	movwf	fsr2l,c
 16466  004A9C  6ADA               	clrf	fsr2h,c
 16467  004A9E  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16468  004AA2  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16469  004AA6  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16470  004AAA  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16471  004AAE  0E1B               	movlw	27
 16472  004AB0  D005               	goto	u5450
 16473  004AB2                     u5455:
 16474  004AB2  90D8               	bcf	status,0,c
 16475  004AB4  322C               	rrcf	??_getVSCPFrame+3,f,c
 16476  004AB6  322B               	rrcf	??_getVSCPFrame+2,f,c
 16477  004AB8  322A               	rrcf	??_getVSCPFrame+1,f,c
 16478  004ABA  3229               	rrcf	??_getVSCPFrame,f,c
 16479  004ABC                     u5450:
 16480  004ABC  2EE8               	decfsz	wreg,f,c
 16481  004ABE  D7F9               	goto	u5455
 16482  004AC0  5029               	movf	??_getVSCPFrame,w,c
 16483  004AC2  0B07               	andlw	7
 16484  004AC4  6EDF               	movwf	indf2,c
 16485                           
 16486                           ;main.c: 2883: return 1;
 16487  004AC6  0E01               	movlw	1
 16488  004AC8                     l629:
 16489  004AC8  0012               	return	
 16490  004ACA                     __end_of_getVSCPFrame:
 16491                           	opt stack 0
 16492                           tblptru	equ	0xFF8
 16493                           tblptrh	equ	0xFF7
 16494                           tblptrl	equ	0xFF6
 16495                           tablat	equ	0xFF5
 16496                           prodh	equ	0xFF4
 16497                           prodl	equ	0xFF3
 16498                           intcon	equ	0xFF2
 16499                           postinc0	equ	0xFEE
 16500                           wreg	equ	0xFE8
 16501                           indf1	equ	0xFE7
 16502                           postdec1	equ	0xFE5
 16503                           fsr1h	equ	0xFE2
 16504                           fsr1l	equ	0xFE1
 16505                           indf2	equ	0xFDF
 16506                           postinc2	equ	0xFDE
 16507                           postdec2	equ	0xFDD
 16508                           plusw2	equ	0xFDB
 16509                           fsr2h	equ	0xFDA
 16510                           fsr2l	equ	0xFD9
 16511                           status	equ	0xFD8
 16512                           
 16513 ;; *************** function _getCANFrame *****************
 16514 ;; Defined at:
 16515 ;;		line 2913 in file "../main.c"
 16516 ;; Parameters:    Size  Location     Type
 16517 ;;  pid             1    wreg     PTR unsigned long 
 16518 ;;		 -> getVSCPFrame@id(4), 
 16519 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16520 ;;		 -> vscp_imsg(14), 
 16521 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16522 ;;		 -> vscp_imsg(14), 
 16523 ;; Auto vars:     Size  Location     Type
 16524 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16525 ;;		 -> getVSCPFrame@id(4), 
 16526 ;;  flags           1   34[COMRAM] enum E16418
 16527 ;; Return value:  Size  Location     Type
 16528 ;;                  1    wreg      unsigned char 
 16529 ;; Registers used:
 16530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16531 ;; Tracked objects:
 16532 ;;		On entry : F/0
 16533 ;;		On exit  : 0/0
 16534 ;;		Unchanged: 0/0
 16535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16536 ;;      Params:         2       0       0       0       0       0       0
 16537 ;;      Locals:         2       0       0       0       0       0       0
 16538 ;;      Temps:          0       0       0       0       0       0       0
 16539 ;;      Totals:         4       0       0       0       0       0       0
 16540 ;;Total ram usage:        4 bytes
 16541 ;; Hardware stack levels used:    1
 16542 ;; Hardware stack levels required when called:    4
 16543 ;; This function calls:
 16544 ;;		_ECANReceiveMessage
 16545 ;; This function is called by:
 16546 ;;		_getVSCPFrame
 16547 ;; This function uses a non-reentrant model
 16548 ;;
 16549                           
 16550                           	psect	text74
 16551  0050FA                     __ptext74:
 16552                           	opt stack 0
 16553  0050FA                     _getCANFrame:
 16554                           	opt stack 23
 16555                           
 16556                           ;incstack = 0
 16557                           ;incstack = 0
 16558                           ;getCANFrame@pid stored from wreg
 16559  0050FA  CFE8 F022          	movff	wreg,getCANFrame@pid
 16560                           
 16561                           ; BSR set to: 0
 16562                           ;main.c: 2914: ECAN_RX_MSG_FLAGS flags;
 16563                           ;main.c: 2918: if (vscp_imsg.flags & 0x80) return 0;
 16564  0050FE  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 16565  005100  D002               	goto	l8174
 16566  005102                     l8170:
 16567  005102  0E00               	movlw	0
 16568  005104  D00F               	goto	l640
 16569  005106                     l8174:
 16570                           
 16571                           ; BSR set to: 0
 16572                           ;main.c: 2920: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16573  005106  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16574  00510A  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16575  00510E  0E23               	movlw	low getCANFrame@flags
 16576  005110  6E17               	movwf	?_ECANReceiveMessage+2,c
 16577  005112  5022               	movf	getCANFrame@pid,w,c
 16578  005114  EC1D  F018         	call	_ECANReceiveMessage
 16579  005118  0900               	iorlw	0
 16580  00511A  E0F3               	bz	l8170
 16581                           
 16582                           ;main.c: 2922: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16583  00511C  AC23               	btfss	getCANFrame@flags,6,c
 16584                           
 16585                           ;main.c: 2925: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16586  00511E  AA23               	btfss	getCANFrame@flags,5,c
 16587  005120  D7F0               	goto	l8170
 16588                           
 16589                           ;main.c: 2927: return 1;
 16590  005122  0E01               	movlw	1
 16591  005124                     l640:
 16592  005124  0012               	return	
 16593  005126                     __end_of_getCANFrame:
 16594                           	opt stack 0
 16595                           tblptru	equ	0xFF8
 16596                           tblptrh	equ	0xFF7
 16597                           tblptrl	equ	0xFF6
 16598                           tablat	equ	0xFF5
 16599                           prodh	equ	0xFF4
 16600                           prodl	equ	0xFF3
 16601                           intcon	equ	0xFF2
 16602                           postinc0	equ	0xFEE
 16603                           wreg	equ	0xFE8
 16604                           indf1	equ	0xFE7
 16605                           postdec1	equ	0xFE5
 16606                           fsr1h	equ	0xFE2
 16607                           fsr1l	equ	0xFE1
 16608                           indf2	equ	0xFDF
 16609                           postinc2	equ	0xFDE
 16610                           postdec2	equ	0xFDD
 16611                           plusw2	equ	0xFDB
 16612                           fsr2h	equ	0xFDA
 16613                           fsr2l	equ	0xFD9
 16614                           status	equ	0xFD8
 16615                           
 16616 ;; *************** function _ECANReceiveMessage *****************
 16617 ;; Defined at:
 16618 ;;		line 803 in file "../ECAN.c"
 16619 ;; Parameters:    Size  Location     Type
 16620 ;;  id              1    wreg     PTR unsigned long 
 16621 ;;		 -> getVSCPFrame@id(4), 
 16622 ;;  data            1   20[COMRAM] PTR unsigned char 
 16623 ;;		 -> vscp_imsg(14), 
 16624 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16625 ;;		 -> vscp_imsg(14), 
 16626 ;;  msgFlags        1   22[COMRAM] PTR enum E16333
 16627 ;;		 -> getCANFrame@flags(1), 
 16628 ;; Auto vars:     Size  Location     Type
 16629 ;;  id              1   25[COMRAM] PTR unsigned long 
 16630 ;;		 -> getVSCPFrame@id(4), 
 16631 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16632 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16633 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16634 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16635 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16636 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16637 ;;  temp            1   28[COMRAM] struct .
 16638 ;;  mode            1   27[COMRAM] unsigned char 
 16639 ;;  i               1   26[COMRAM] unsigned char 
 16640 ;; Return value:  Size  Location     Type
 16641 ;;                  1    wreg      enum E15660
 16642 ;; Registers used:
 16643 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16644 ;; Tracked objects:
 16645 ;;		On entry : F/0
 16646 ;;		On exit  : 0/0
 16647 ;;		Unchanged: 0/0
 16648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16649 ;;      Params:         3       0       0       0       0       0       0
 16650 ;;      Locals:         8       0       0       0       0       0       0
 16651 ;;      Temps:          0       0       0       0       0       0       0
 16652 ;;      Totals:        11       0       0       0       0       0       0
 16653 ;;Total ram usage:       11 bytes
 16654 ;; Hardware stack levels used:    1
 16655 ;; Hardware stack levels required when called:    3
 16656 ;; This function calls:
 16657 ;;		__ECANPointBuffer
 16658 ;;		__RegsToCANID
 16659 ;; This function is called by:
 16660 ;;		_getCANFrame
 16661 ;; This function uses a non-reentrant model
 16662 ;;
 16663                           
 16664                           	psect	text75
 16665  00303A                     __ptext75:
 16666                           	opt stack 0
 16667  00303A                     _ECANReceiveMessage:
 16668                           	opt stack 23
 16669                           
 16670                           ;incstack = 0
 16671                           ;incstack = 0
 16672                           ;ECANReceiveMessage@id stored from wreg
 16673  00303A  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16674                           
 16675                           ; BSR set to: 0
 16676                           ;ECAN.c: 805: BYTE mode;
 16677                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16678                           ;ECAN.c: 809: char i;
 16679                           ;ECAN.c: 810: BYTE_VAL temp;
 16680                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16681  00303E  6A48               	clrf	__ECANRxFilterHitInfo,c
 16682                           
 16683                           ; BSR set to: 0
 16684                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16685  003040  5077               	movf	3959,w,c	;volatile
 16686  003042  0BC0               	andlw	192
 16687  003044  6E1C               	movwf	ECANReceiveMessage@mode,c
 16688                           
 16689                           ; BSR set to: 0
 16690                           ;ECAN.c: 816: if ( mode == 0x00 )
 16691  003046  661C               	tstfsz	ECANReceiveMessage@mode,c
 16692  003048  D032               	goto	l8306
 16693                           
 16694                           ; BSR set to: 0
 16695                           ;ECAN.c: 822: {
 16696                           ;ECAN.c: 824: if ( RXB0FUL )
 16697  00304A  AE60               	btfss	3936,7,c	;volatile
 16698  00304C  D012               	goto	l836
 16699                           
 16700                           ; BSR set to: 0
 16701                           ;ECAN.c: 825: {
 16702                           ;ECAN.c: 827: RXB0IF = 0;
 16703  00304E  90A4               	bcf	4004,0,c	;volatile
 16704                           
 16705                           ;ECAN.c: 830: if ( RXB0OVFL )
 16706  003050  AE74               	btfss	3956,7,c	;volatile
 16707  003052  D006               	goto	l8282
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;ECAN.c: 831: {
 16711                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16712  003054  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16713  003056  6ED9               	movwf	fsr2l,c
 16714  003058  6ADA               	clrf	fsr2h,c
 16715  00305A  0E00               	movlw	0
 16716  00305C  86DB               	bsf	plusw2,3,c
 16717                           
 16718                           ; BSR set to: 0
 16719                           ;ECAN.c: 833: RXB0OVFL = 0;
 16720  00305E  9E74               	bcf	3956,7,c	;volatile
 16721  003060                     l8282:
 16722                           
 16723                           ; BSR set to: 0
 16724                           ;ECAN.c: 834: }
 16725                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16726  003060  A060               	btfss	3936,0,c	;volatile
 16727  003062  D002               	bra	u5625
 16728  003064  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16729  003066  D001               	bra	u5627
 16730  003068                     u5625:
 16731  003068  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16732  00306A                     u5627:
 16733                           
 16734                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16735  00306A  0E0F               	movlw	15	;volatile
 16736  00306C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16737  00306E  0E60               	movlw	96	;volatile
 16738  003070  D01A               	goto	L22
 16739  003072                     l836:
 16740                           
 16741                           ; BSR set to: 0
 16742                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16743  003072  010F               	movlb	15	; () banked
 16744  003074  AF50               	btfss	80,7,b	;volatile
 16745  003076  D019               	goto	l8300
 16746                           
 16747                           ; BSR set to: 15
 16748                           ;ECAN.c: 842: {
 16749                           ;ECAN.c: 844: RXB1IF = 0;
 16750  003078  92A4               	bcf	4004,1,c	;volatile
 16751                           
 16752                           ;ECAN.c: 847: if ( RXB1OVFL )
 16753  00307A  AC74               	btfss	3956,6,c	;volatile
 16754  00307C  D006               	goto	l8292
 16755                           
 16756                           ; BSR set to: 15
 16757                           ;ECAN.c: 848: {
 16758                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16759  00307E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16760  003080  6ED9               	movwf	fsr2l,c
 16761  003082  6ADA               	clrf	fsr2h,c
 16762  003084  0E00               	movlw	0
 16763  003086  86DB               	bsf	plusw2,3,c
 16764                           
 16765                           ; BSR set to: 15
 16766                           ;ECAN.c: 850: RXB1OVFL = 0;
 16767  003088  9C74               	bcf	3956,6,c	;volatile
 16768  00308A                     l8292:
 16769                           
 16770                           ; BSR set to: 15
 16771                           ;ECAN.c: 851: }
 16772                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16773  00308A  5150               	movf	80,w,b	;volatile
 16774  00308C  0B07               	andlw	7
 16775  00308E  6E48               	movwf	__ECANRxFilterHitInfo,c
 16776                           
 16777                           ; BSR set to: 15
 16778                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16779  003090  0E02               	movlw	2
 16780  003092  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16781  003094  D005               	goto	l8298
 16782                           
 16783                           ; BSR set to: 15
 16784                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16785  003096  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16786  003098  6ED9               	movwf	fsr2l,c
 16787  00309A  6ADA               	clrf	fsr2h,c
 16788  00309C  0E00               	movlw	0
 16789  00309E  8EDB               	bsf	plusw2,7,c
 16790  0030A0                     l8298:
 16791                           
 16792                           ; BSR set to: 15
 16793                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16794  0030A0  0E0F               	movlw	15	;volatile
 16795  0030A2  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16796  0030A4  0E50               	movlw	80	;volatile
 16797  0030A6                     L22:
 16798  0030A6  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16799                           
 16800                           ;ECAN.c: 860: }
 16801  0030A8  D065               	goto	l8360
 16802  0030AA                     l8300:
 16803                           
 16804                           ;ECAN.c: 861: else
 16805                           ;ECAN.c: 862: return FALSE;
 16806  0030AA  0E00               	movlw	0
 16807  0030AC  D0C2               	goto	l843
 16808  0030AE                     l8306:
 16809                           
 16810                           ; BSR set to: 0
 16811                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16812  0030AE  501C               	movf	ECANReceiveMessage@mode,w,c
 16813  0030B0  0A40               	xorlw	64
 16814  0030B2  E146               	bnz	l846
 16815                           
 16816                           ; BSR set to: 0
 16817                           ;ECAN.c: 875: {
 16818                           ;ECAN.c: 876: if ( RXB0FUL )
 16819  0030B4  AE60               	btfss	3936,7,c	;volatile
 16820  0030B6  D004               	goto	l847
 16821                           
 16822                           ; BSR set to: 0
 16823                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16824  0030B8  0E0F               	movlw	15	;volatile
 16825  0030BA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16826  0030BC  0E60               	movlw	96	;volatile
 16827  0030BE  D03E               	goto	L29
 16828  0030C0                     l847:
 16829                           
 16830                           ; BSR set to: 0
 16831                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16832  0030C0  010F               	movlb	15	; () banked
 16833  0030C2  AF50               	btfss	80,7,b	;volatile
 16834  0030C4  D004               	goto	l849
 16835                           
 16836                           ; BSR set to: 15
 16837                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16838  0030C6  0E0F               	movlw	15	;volatile
 16839  0030C8  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16840  0030CA  0E50               	movlw	80	;volatile
 16841  0030CC  D037               	goto	L29
 16842  0030CE                     l849:
 16843                           
 16844                           ; BSR set to: 15
 16845                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16846  0030CE  010D               	movlb	13
 16847  0030D0  B5F8               	btfsc	248,2,b	;volatile
 16848  0030D2  D007               	goto	l851
 16849  0030D4  010E               	movlb	14
 16850  0030D6  AF20               	btfss	32,7,b	;volatile
 16851  0030D8  D004               	goto	l851
 16852                           
 16853                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16854  0030DA  0E0E               	movlw	14	;volatile
 16855  0030DC  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16856  0030DE  0E20               	movlw	32	;volatile
 16857  0030E0  D02D               	goto	L29
 16858  0030E2                     l851:
 16859                           
 16860                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16861  0030E2  010D               	movlb	13
 16862  0030E4  B7F8               	btfsc	248,3,b	;volatile
 16863  0030E6  D007               	goto	l853
 16864  0030E8  010E               	movlb	14
 16865  0030EA  AF30               	btfss	48,7,b	;volatile
 16866  0030EC  D004               	goto	l853
 16867                           
 16868                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16869  0030EE  0E0E               	movlw	14	;volatile
 16870  0030F0  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16871  0030F2  0E30               	movlw	48	;volatile
 16872  0030F4  D023               	goto	L29
 16873  0030F6                     l853:
 16874                           
 16875                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16876  0030F6  010D               	movlb	13
 16877  0030F8  B9F8               	btfsc	248,4,b	;volatile
 16878  0030FA  D007               	goto	l855
 16879  0030FC  010E               	movlb	14
 16880  0030FE  AF40               	btfss	64,7,b	;volatile
 16881  003100  D004               	goto	l855
 16882                           
 16883                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16884  003102  0E0E               	movlw	14	;volatile
 16885  003104  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16886  003106  0E40               	movlw	64	;volatile
 16887  003108  D019               	goto	L29
 16888  00310A                     l855:
 16889                           
 16890                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16891  00310A  010D               	movlb	13
 16892  00310C  BBF8               	btfsc	248,5,b	;volatile
 16893  00310E  D005               	goto	l857
 16894  003110  010E               	movlb	14
 16895  003112  AF50               	btfss	80,7,b	;volatile
 16896  003114  D002               	goto	l857
 16897                           
 16898                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16899  003116  0E0E               	movlw	14	;volatile
 16900  003118  D7D7               	goto	L30
 16901  00311A                     l857:
 16902                           
 16903                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16904  00311A  010D               	movlb	13
 16905  00311C  BDF8               	btfsc	248,6,b	;volatile
 16906  00311E  D005               	goto	l859
 16907  003120  010E               	movlb	14
 16908  003122  AF60               	btfss	96,7,b	;volatile
 16909  003124  D002               	goto	l859
 16910                           
 16911                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16912  003126  0E0E               	movlw	14	;volatile
 16913  003128  D7C8               	goto	L31
 16914  00312A                     l859:
 16915                           
 16916                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16917  00312A  010D               	movlb	13
 16918  00312C  BFF8               	btfsc	248,7,b	;volatile
 16919  00312E  D7BD               	goto	l8300
 16920  003130  010E               	movlb	14
 16921  003132  AF70               	btfss	112,7,b	;volatile
 16922  003134  D7BA               	goto	l8300
 16923                           
 16924                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16925  003136  0E0E               	movlw	14	;volatile
 16926  003138  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16927  00313A  0E70               	movlw	112	;volatile
 16928  00313C                     L29:
 16929  00313C  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16930  00313E  D00A               	goto	l8350
 16931  003140                     l846:
 16932                           
 16933                           ; BSR set to: 0
 16934                           ;ECAN.c: 910: else
 16935                           ;ECAN.c: 915: {
 16936                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16937  003140  AE74               	btfss	3956,7,c	;volatile
 16938  003142  D7B3               	goto	l8300
 16939                           
 16940                           ; BSR set to: 0
 16941                           ;ECAN.c: 917: {
 16942                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16943  003144  506F               	movf	3951,w,c	;volatile
 16944  003146  0B07               	andlw	7
 16945  003148  EC65  F025         	call	__ECANPointBuffer
 16946  00314C  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16947  003150  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16948  003154                     l8350:
 16949                           
 16950                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16951  003154  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16952  003158  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16953  00315C  50DF               	movf	indf2,w,c
 16954  00315E  0B1F               	andlw	31
 16955  003160  6E48               	movwf	__ECANRxFilterHitInfo,c
 16956                           
 16957                           ;ECAN.c: 932: RXB1IF = 0;
 16958  003162  92A4               	bcf	4004,1,c	;volatile
 16959                           
 16960                           ;ECAN.c: 934: if ( RXB1OVFL )
 16961  003164  AC74               	btfss	3956,6,c	;volatile
 16962  003166  D006               	goto	l8360
 16963                           
 16964                           ;ECAN.c: 935: {
 16965                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16966  003168  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16967  00316A  6ED9               	movwf	fsr2l,c
 16968  00316C  6ADA               	clrf	fsr2h,c
 16969  00316E  0E00               	movlw	0
 16970  003170  86DB               	bsf	plusw2,3,c
 16971                           
 16972                           ;ECAN.c: 937: RXB1OVFL = 0;
 16973  003172  9C74               	bcf	3956,6,c	;volatile
 16974  003174                     l8360:
 16975                           
 16976                           ;ECAN.c: 942: savedPtr = ptr;
 16977  003174  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16978  003178  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16979                           
 16980                           ;ECAN.c: 943: *msgFlags = 0;
 16981  00317C  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16982  00317E  6ED9               	movwf	fsr2l,c
 16983  003180  6ADA               	clrf	fsr2h,c
 16984  003182  6ADF               	clrf	indf2,c
 16985                           
 16986                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16987  003184  EE20 F005          	lfsr	2,5
 16988  003188  D855               	call	PL74	;call to abstracted procedure
 16989                           
 16990                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16991  00318A  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16992  00318C  6ED9               	movwf	fsr2l,c
 16993  00318E  6ADA               	clrf	fsr2h,c
 16994  003190  501D               	movf	ECANReceiveMessage@temp,w,c
 16995  003192  0B0F               	andlw	15
 16996  003194  6EDF               	movwf	indf2,c
 16997                           
 16998                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16999  003196  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 17000  003198  D005               	goto	l867
 17001                           
 17002                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17003  00319A  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17004  00319C  6ED9               	movwf	fsr2l,c
 17005  00319E  6ADA               	clrf	fsr2h,c
 17006  0031A0  0E00               	movlw	0
 17007  0031A2  8CDB               	bsf	plusw2,6,c
 17008  0031A4                     l867:
 17009                           
 17010                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17011  0031A4  EE20 F002          	lfsr	2,2
 17012  0031A8  D845               	call	PL74	;call to abstracted procedure
 17013                           
 17014                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17015  0031AA  A61D               	btfss	ECANReceiveMessage@temp,3,c
 17016  0031AC  D008               	goto	l868
 17017                           
 17018                           ;ECAN.c: 956: {
 17019                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17020  0031AE  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17021  0031B0  6ED9               	movwf	fsr2l,c
 17022  0031B2  6ADA               	clrf	fsr2h,c
 17023  0031B4  0E00               	movlw	0
 17024  0031B6  8ADB               	bsf	plusw2,5,c
 17025                           
 17026                           ;ECAN.c: 958: temp.Val = 1;
 17027  0031B8  0E01               	movlw	1
 17028  0031BA  6E1D               	movwf	ECANReceiveMessage@temp,c
 17029                           
 17030                           ;ECAN.c: 959: }
 17031  0031BC  D001               	goto	l8378
 17032  0031BE                     l868:
 17033                           
 17034                           ;ECAN.c: 960: else
 17035                           ;ECAN.c: 961: temp.Val = 0;
 17036  0031BE  6A1D               	clrf	ECANReceiveMessage@temp,c
 17037  0031C0                     l8378:
 17038                           
 17039                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17040  0031C0  281E               	incf	ECANReceiveMessage@ptr,w,c
 17041  0031C2  6E0E               	movwf	?__RegsToCANID,c
 17042  0031C4  0E00               	movlw	0
 17043  0031C6  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17044  0031C8  6E0F               	movwf	?__RegsToCANID+1,c
 17045  0031CA  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17046  0031CE  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17047  0031D2  ECC7  F01D         	call	__RegsToCANID	;wreg free
 17048                           
 17049                           ;ECAN.c: 966: ptr += 6;
 17050  0031D6  0E06               	movlw	6
 17051  0031D8  261E               	addwf	ECANReceiveMessage@ptr,f,c
 17052  0031DA  0E00               	movlw	0
 17053  0031DC  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17054                           
 17055                           ;ECAN.c: 967: temp.Val = *dataLen;
 17056  0031DE  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17057  0031E0  6ED9               	movwf	fsr2l,c
 17058  0031E2  6ADA               	clrf	fsr2h,c
 17059  0031E4  50DF               	movf	indf2,w,c
 17060  0031E6  6E1D               	movwf	ECANReceiveMessage@temp,c
 17061                           
 17062                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17063  0031E8  6A1B               	clrf	ECANReceiveMessage@i,c
 17064  0031EA  D00D               	goto	l8394
 17065  0031EC                     l8386:
 17066                           
 17067                           ;ECAN.c: 969: *data++ = *ptr++;
 17068  0031EC  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17069  0031F0  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17070  0031F4  5015               	movf	ECANReceiveMessage@data,w,c
 17071  0031F6  6EE1               	movwf	fsr1l,c
 17072  0031F8  6AE2               	clrf	fsr1h,c
 17073  0031FA  CFDF FFE7          	movff	indf2,indf1
 17074  0031FE  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 17075  003200  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 17076  003202  2A15               	incf	ECANReceiveMessage@data,f,c
 17077  003204  2A1B               	incf	ECANReceiveMessage@i,f,c
 17078  003206                     l8394:
 17079  003206  501D               	movf	ECANReceiveMessage@temp,w,c
 17080  003208  5C1B               	subwf	ECANReceiveMessage@i,w,c
 17081  00320A  E3F0               	bnc	l8386
 17082                           
 17083                           ;ECAN.c: 972: if ( IRXIF )
 17084  00320C  AEA4               	btfss	4004,7,c	;volatile
 17085  00320E  D006               	goto	l8400
 17086                           
 17087                           ;ECAN.c: 973: {
 17088                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17089  003210  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17090  003212  6ED9               	movwf	fsr2l,c
 17091  003214  6ADA               	clrf	fsr2h,c
 17092  003216  0E00               	movlw	0
 17093  003218  88DB               	bsf	plusw2,4,c
 17094                           
 17095                           ;ECAN.c: 975: IRXIF = 0;
 17096  00321A  9EA4               	bcf	4004,7,c	;volatile
 17097  00321C                     l8400:
 17098                           
 17099                           ;ECAN.c: 976: }
 17100                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17101  00321C  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17102  003220  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17103  003224  0E7F               	movlw	127
 17104  003226  16DF               	andwf	indf2,f,c
 17105                           
 17106                           ;ECAN.c: 983: if ( mode == 0x80 )
 17107  003228  501C               	movf	ECANReceiveMessage@mode,w,c
 17108  00322A  0A80               	xorlw	128
 17109  00322C  B4D8               	btfsc	status,2,c
 17110                           
 17111                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17112  00322E  9E74               	bcf	3956,7,c	;volatile
 17113                           
 17114                           ;ECAN.c: 990: return TRUE;
 17115  003230  0E01               	movlw	1
 17116  003232                     l843:
 17117  003232  0012               	return	
 17118  003234                     __end_of_ECANReceiveMessage:
 17119                           	opt stack 0
 17120  003234                     PL74:
 17121                           	opt stack 23
 17122  003234  501E               	movf	ECANReceiveMessage@ptr,w,c
 17123  003236  26D9               	addwf	fsr2l,f,c
 17124  003238  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 17125  00323A  22DA               	addwfc	fsr2h,f,c
 17126  00323C  50DF               	movf	indf2,w,c
 17127  00323E  6E1D               	movwf	ECANReceiveMessage@temp,c
 17128  003240  0012               	return	
 17129  003242                     __end_ofPL74:
 17130                           	opt stack 0
 17131                           tblptru	equ	0xFF8
 17132                           tblptrh	equ	0xFF7
 17133                           tblptrl	equ	0xFF6
 17134                           tablat	equ	0xFF5
 17135                           prodh	equ	0xFF4
 17136                           prodl	equ	0xFF3
 17137                           intcon	equ	0xFF2
 17138                           postinc0	equ	0xFEE
 17139                           wreg	equ	0xFE8
 17140                           indf1	equ	0xFE7
 17141                           postdec1	equ	0xFE5
 17142                           fsr1h	equ	0xFE2
 17143                           fsr1l	equ	0xFE1
 17144                           indf2	equ	0xFDF
 17145                           postinc2	equ	0xFDE
 17146                           postdec2	equ	0xFDD
 17147                           plusw2	equ	0xFDB
 17148                           fsr2h	equ	0xFDA
 17149                           fsr2l	equ	0xFD9
 17150                           status	equ	0xFD8
 17151                           
 17152 ;; *************** function __RegsToCANID *****************
 17153 ;; Defined at:
 17154 ;;		line 1156 in file "../ECAN.c"
 17155 ;; Parameters:    Size  Location     Type
 17156 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17157 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17158 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17159 ;;  val             1   15[COMRAM] PTR unsigned long 
 17160 ;;		 -> getVSCPFrame@id(4), 
 17161 ;;  type            1   16[COMRAM] unsigned char 
 17162 ;; Auto vars:     Size  Location     Type
 17163 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17164 ;;		 -> getVSCPFrame@id(4), 
 17165 ;; Return value:  Size  Location     Type
 17166 ;;		None               void
 17167 ;; Registers used:
 17168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17169 ;; Tracked objects:
 17170 ;;		On entry : 0/0
 17171 ;;		On exit  : 0/0
 17172 ;;		Unchanged: 0/0
 17173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17174 ;;      Params:         4       0       0       0       0       0       0
 17175 ;;      Locals:         1       0       0       0       0       0       0
 17176 ;;      Temps:          2       0       0       0       0       0       0
 17177 ;;      Totals:         7       0       0       0       0       0       0
 17178 ;;Total ram usage:        7 bytes
 17179 ;; Hardware stack levels used:    1
 17180 ;; Hardware stack levels required when called:    2
 17181 ;; This function calls:
 17182 ;;		Nothing
 17183 ;; This function is called by:
 17184 ;;		_ECANReceiveMessage
 17185 ;; This function uses a non-reentrant model
 17186 ;;
 17187                           
 17188                           	psect	text76
 17189  003B8E                     __ptext76:
 17190                           	opt stack 0
 17191  003B8E                     __RegsToCANID:
 17192                           	opt stack 23
 17193                           
 17194                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17195                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17196                           
 17197                           ;incstack = 0
 17198                           ;incstack = 0
 17199  003B8E  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17200                           
 17201                           ;ECAN.c: 1161: if ( type == 0 )
 17202  003B92  6611               	tstfsz	__RegsToCANID@type,c
 17203  003B94  D02B               	goto	l8474
 17204                           
 17205                           ;ECAN.c: 1162: {
 17206                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17207  003B96  5014               	movf	__RegsToCANID@Value,w,c
 17208  003B98  6ED9               	movwf	fsr2l,c
 17209  003B9A  D862               	call	PL46	;call to abstracted procedure
 17210  003B9C  3612               	rlcf	??__RegsToCANID,f,c
 17211  003B9E  90D8               	bcf	status,0,c
 17212  003BA0  3612               	rlcf	??__RegsToCANID,f,c
 17213  003BA2  90D8               	bcf	status,0,c
 17214  003BA4  3412               	rlcf	??__RegsToCANID,w,c
 17215  003BA6  6EDF               	movwf	indf2,c
 17216                           
 17217                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17218  003BA8  5014               	movf	__RegsToCANID@Value,w,c
 17219  003BAA  6ED9               	movwf	fsr2l,c
 17220  003BAC  6ADA               	clrf	fsr2h,c
 17221  003BAE  2AD9               	incf	fsr2l,f,c
 17222  003BB0  6ADA               	clrf	fsr2h,c
 17223  003BB2  D873               	call	PL56	;call to abstracted procedure
 17224  003BB4                     u5945:
 17225  003BB4  90D8               	bcf	status,0,c
 17226  003BB6  3212               	rrcf	??__RegsToCANID,f,c
 17227  003BB8  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17228  003BBA  D7FC               	goto	u5945
 17229  003BBC  5012               	movf	??__RegsToCANID,w,c
 17230                           
 17231                           ;ECAN.c: 1166: ptr++;
 17232                           
 17233                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17234  003BBE  D859               	call	PL48	;call to abstracted procedure
 17235  003BC0  0E05               	movlw	5
 17236  003BC2  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17237  003BC4                     u5955:
 17238  003BC4  90D8               	bcf	status,0,c
 17239  003BC6  3212               	rrcf	??__RegsToCANID,f,c
 17240  003BC8  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17241  003BCA  D7FC               	goto	u5955
 17242  003BCC  5014               	movf	__RegsToCANID@Value,w,c
 17243  003BCE  6ED9               	movwf	fsr2l,c
 17244  003BD0  6ADA               	clrf	fsr2h,c
 17245  003BD2  5012               	movf	??__RegsToCANID,w,c
 17246  003BD4  12DF               	iorwf	indf2,f,c
 17247                           
 17248                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17249  003BD6  D83D               	call	PL26	;call to abstracted procedure
 17250  003BD8  6ADF               	clrf	indf2,c
 17251                           
 17252                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17253  003BDA  5014               	movf	__RegsToCANID@Value,w,c
 17254  003BDC  6ED9               	movwf	fsr2l,c
 17255  003BDE  6ADA               	clrf	fsr2h,c
 17256  003BE0  0E03               	movlw	3
 17257  003BE2  26D9               	addwf	fsr2l,f,c
 17258  003BE4  6ADA               	clrf	fsr2h,c
 17259  003BE6  0E00               	movlw	0
 17260  003BE8  6EDF               	movwf	indf2,c
 17261                           
 17262                           ;ECAN.c: 1170: }
 17263  003BEA  D032               	goto	l890
 17264  003BEC                     l8474:
 17265                           
 17266                           ;ECAN.c: 1171: else
 17267                           ;ECAN.c: 1172: {
 17268                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17269  003BEC  D832               	call	PL26	;call to abstracted procedure
 17270  003BEE  D855               	call	PL56	;call to abstracted procedure
 17271  003BF0                     u5965:
 17272  003BF0  90D8               	bcf	status,0,c
 17273  003BF2  3612               	rlcf	??__RegsToCANID,f,c
 17274  003BF4  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17275  003BF6  D7FC               	goto	u5965
 17276  003BF8  5012               	movf	??__RegsToCANID,w,c
 17277  003BFA  6EDF               	movwf	indf2,c
 17278                           
 17279                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17280  003BFC  5014               	movf	__RegsToCANID@Value,w,c
 17281  003BFE  6ED9               	movwf	fsr2l,c
 17282  003C00  6ADA               	clrf	fsr2h,c
 17283  003C02  0E03               	movlw	3
 17284  003C04  26D9               	addwf	fsr2l,f,c
 17285  003C06  D82C               	call	PL46	;call to abstracted procedure
 17286  003C08  3212               	rrcf	??__RegsToCANID,f,c
 17287  003C0A  90D8               	bcf	status,0,c
 17288  003C0C  3212               	rrcf	??__RegsToCANID,f,c
 17289  003C0E  90D8               	bcf	status,0,c
 17290  003C10  3012               	rrcf	??__RegsToCANID,w,c
 17291                           
 17292                           ;ECAN.c: 1176: ptr++;
 17293                           
 17294                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17295  003C12  D82F               	call	PL48	;call to abstracted procedure
 17296  003C14  0E03               	movlw	3
 17297  003C16  1612               	andwf	??__RegsToCANID,f,c
 17298  003C18  D81C               	call	PL26	;call to abstracted procedure
 17299  003C1A  5012               	movf	??__RegsToCANID,w,c
 17300  003C1C  12DF               	iorwf	indf2,f,c
 17301                           
 17302                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17303  003C1E  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17304  003C22  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17305  003C26  50DF               	movf	indf2,w,c
 17306  003C28  6E12               	movwf	??__RegsToCANID& (0+255),c
 17307  003C2A  90D8               	bcf	status,0,c
 17308  003C2C  3212               	rrcf	??__RegsToCANID,f,c
 17309  003C2E  90D8               	bcf	status,0,c
 17310  003C30  3212               	rrcf	??__RegsToCANID,f,c
 17311  003C32  90D8               	bcf	status,0,c
 17312  003C34  3212               	rrcf	??__RegsToCANID,f,c
 17313  003C36  0E1C               	movlw	28
 17314  003C38  1612               	andwf	??__RegsToCANID,f,c
 17315  003C3A  D80B               	call	PL26	;call to abstracted procedure
 17316  003C3C  5012               	movf	??__RegsToCANID,w,c
 17317  003C3E  12DF               	iorwf	indf2,f,c
 17318                           
 17319                           ;ECAN.c: 1180: ptr++;
 17320                           
 17321                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17322  003C40  D822               	call	PL52	;call to abstracted procedure
 17323  003C42  2AE1               	incf	fsr1l,f,c
 17324  003C44  6AE2               	clrf	fsr1h,c
 17325  003C46  CFDF FFE7          	movff	indf2,indf1
 17326                           
 17327                           ;ECAN.c: 1182: ptr++;
 17328                           
 17329                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17330  003C4A  D81D               	call	PL52	;call to abstracted procedure
 17331  003C4C  CFDF FFE7          	movff	indf2,indf1
 17332  003C50                     l890:
 17333  003C50  0012               	return	
 17334  003C52                     __end_of__RegsToCANID:
 17335                           	opt stack 0
 17336  003C52                     PL26:
 17337                           	opt stack 23
 17338  003C52  5014               	movf	__RegsToCANID@Value,w,c
 17339  003C54  6ED9               	movwf	fsr2l,c
 17340  003C56  6ADA               	clrf	fsr2h,c
 17341  003C58  0E02               	movlw	2
 17342  003C5A  26D9               	addwf	fsr2l,f,c
 17343  003C5C  6ADA               	clrf	fsr2h,c
 17344  003C5E  0012               	return	
 17345  003C60                     __end_ofPL26:
 17346                           	opt stack 0
 17347  003C60                     PL46:
 17348                           	opt stack 23
 17349  003C60  6ADA               	clrf	fsr2h,c
 17350  003C62  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17351  003C66  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17352  003C6A  50E7               	movf	indf1,w,c
 17353  003C6C  6E12               	movwf	??__RegsToCANID& (0+255),c
 17354  003C6E  90D8               	bcf	status,0,c
 17355  003C70  0012               	return	
 17356  003C72                     __end_ofPL46:
 17357                           	opt stack 0
 17358  003C72                     PL48:
 17359                           	opt stack 23
 17360  003C72  6EDF               	movwf	indf2,c
 17361  003C74  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17362  003C76  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17363  003C78  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17364  003C7C  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17365  003C80  50DF               	movf	indf2,w,c
 17366  003C82  6E12               	movwf	??__RegsToCANID& (0+255),c
 17367  003C84  0012               	return	
 17368  003C86                     __end_ofPL48:
 17369                           	opt stack 0
 17370  003C86                     PL52:
 17371                           	opt stack 23
 17372  003C86  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17373  003C88  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17374  003C8A  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17375  003C8E  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17376  003C92  5014               	movf	__RegsToCANID@Value,w,c
 17377  003C94  6EE1               	movwf	fsr1l,c
 17378  003C96  6AE2               	clrf	fsr1h,c
 17379  003C98  0012               	return	
 17380  003C9A                     __end_ofPL52:
 17381                           	opt stack 0
 17382  003C9A                     PL56:
 17383                           	opt stack 23
 17384  003C9A  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17385  003C9E  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17386  003CA2  50E7               	movf	indf1,w,c
 17387  003CA4  6E12               	movwf	??__RegsToCANID& (0+255),c
 17388  003CA6  0E05               	movlw	5
 17389  003CA8  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17390  003CAA  0C05               	retlw	5
 17391  003CAC                     __end_ofPL56:
 17392                           	opt stack 0
 17393                           tblptru	equ	0xFF8
 17394                           tblptrh	equ	0xFF7
 17395                           tblptrl	equ	0xFF6
 17396                           tablat	equ	0xFF5
 17397                           prodh	equ	0xFF4
 17398                           prodl	equ	0xFF3
 17399                           intcon	equ	0xFF2
 17400                           postinc0	equ	0xFEE
 17401                           wreg	equ	0xFE8
 17402                           indf1	equ	0xFE7
 17403                           postdec1	equ	0xFE5
 17404                           fsr1h	equ	0xFE2
 17405                           fsr1l	equ	0xFE1
 17406                           indf2	equ	0xFDF
 17407                           postinc2	equ	0xFDE
 17408                           postdec2	equ	0xFDD
 17409                           plusw2	equ	0xFDB
 17410                           fsr2h	equ	0xFDA
 17411                           fsr2l	equ	0xFD9
 17412                           status	equ	0xFD8
 17413                           
 17414 ;; *************** function __ECANPointBuffer *****************
 17415 ;; Defined at:
 17416 ;;		line 1207 in file "../ECAN.c"
 17417 ;; Parameters:    Size  Location     Type
 17418 ;;  b               1    wreg     unsigned char 
 17419 ;; Auto vars:     Size  Location     Type
 17420 ;;  b               1   16[COMRAM] unsigned char 
 17421 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17422 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17423 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17424 ;; Return value:  Size  Location     Type
 17425 ;;                  2   13[COMRAM] PTR unsigned char 
 17426 ;; Registers used:
 17427 ;;		wreg, status,2, status,0
 17428 ;; Tracked objects:
 17429 ;;		On entry : F/0
 17430 ;;		On exit  : 0/0
 17431 ;;		Unchanged: 0/0
 17432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17433 ;;      Params:         3       0       0       0       0       0       0
 17434 ;;      Locals:         3       0       0       0       0       0       0
 17435 ;;      Temps:          0       0       0       0       0       0       0
 17436 ;;      Totals:         6       0       0       0       0       0       0
 17437 ;;Total ram usage:        6 bytes
 17438 ;; Hardware stack levels used:    1
 17439 ;; Hardware stack levels required when called:    2
 17440 ;; This function calls:
 17441 ;;		Nothing
 17442 ;; This function is called by:
 17443 ;;		_ECANReceiveMessage
 17444 ;; This function uses a non-reentrant model
 17445 ;;
 17446                           
 17447                           	psect	text77
 17448  004ACA                     __ptext77:
 17449                           	opt stack 0
 17450  004ACA                     __ECANPointBuffer:
 17451                           	opt stack 23
 17452                           
 17453                           ;incstack = 0
 17454                           ;incstack = 0
 17455                           ;__ECANPointBuffer@b stored from wreg
 17456  004ACA  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17457                           
 17458                           ; BSR set to: 0
 17459                           ;ECAN.c: 1208: BYTE* pt;
 17460                           ;ECAN.c: 1210: switch(b)
 17461  004ACE  D024               	goto	l8460
 17462  004AD0                     l8442:
 17463                           
 17464                           ; BSR set to: 0
 17465                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17466  004AD0  0E0F               	movlw	15	;volatile
 17467  004AD2  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17468  004AD4  0E60               	movlw	96	;volatile
 17469  004AD6  D01E               	goto	L38
 17470  004AD8                     l8444:
 17471                           
 17472                           ; BSR set to: 0
 17473                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17474  004AD8  010F               	movlb	15	; () banked
 17475  004ADA  0E0F               	movlw	15	;volatile
 17476  004ADC  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17477  004ADE  0E50               	movlw	80	;volatile
 17478  004AE0  D019               	goto	L38
 17479  004AE2                     l8446:
 17480                           
 17481                           ; BSR set to: 0
 17482                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17483  004AE2  010E               	movlb	14	; () banked
 17484  004AE4  0E0E               	movlw	14	;volatile
 17485  004AE6  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17486  004AE8  0E20               	movlw	32	;volatile
 17487  004AEA  D014               	goto	L38
 17488  004AEC                     l8448:
 17489                           
 17490                           ; BSR set to: 0
 17491                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17492  004AEC  010E               	movlb	14	; () banked
 17493  004AEE  0E0E               	movlw	14	;volatile
 17494  004AF0  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17495  004AF2  0E30               	movlw	48	;volatile
 17496  004AF4  D00F               	goto	L38
 17497  004AF6                     l8450:
 17498                           
 17499                           ; BSR set to: 0
 17500                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17501  004AF6  010E               	movlb	14	; () banked
 17502  004AF8  0E0E               	movlw	14	;volatile
 17503  004AFA  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17504  004AFC  0E40               	movlw	64	;volatile
 17505  004AFE  D00A               	goto	L38
 17506  004B00                     l8452:
 17507                           
 17508                           ; BSR set to: 0
 17509                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17510  004B00  010E               	movlb	14	; () banked
 17511  004B02  0E0E               	movlw	14	;volatile
 17512  004B04  D7EB               	goto	L39
 17513  004B06                     l8454:
 17514                           
 17515                           ; BSR set to: 0
 17516                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17517  004B06  010E               	movlb	14	; () banked
 17518  004B08  0E0E               	movlw	14	;volatile
 17519  004B0A  D7E3               	goto	L40
 17520  004B0C                     l8456:
 17521                           
 17522                           ; BSR set to: 0
 17523                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17524  004B0C  010E               	movlb	14	; () banked
 17525  004B0E  0E0E               	movlw	14	;volatile
 17526  004B10  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17527  004B12  0E70               	movlw	112	;volatile
 17528  004B14                     L38:
 17529  004B14  6E12               	movwf	__ECANPointBuffer@pt,c
 17530                           
 17531                           ;ECAN.c: 1235: break;
 17532  004B16  D00F               	goto	l895
 17533  004B18                     l8460:
 17534                           
 17535                           ; BSR set to: 0
 17536  004B18  5011               	movf	__ECANPointBuffer@b,w,c
 17537                           
 17538                           ; Switch size 1, requested type "space"
 17539                           ; Number of cases is 7, Range of values is 0 to 6
 17540                           ; switch strategies available:
 17541                           ; Name         Instructions Cycles
 17542                           ; simple_byte           22    12 (average)
 17543                           ;	Chosen strategy is simple_byte
 17544  004B1A  E0DA               	bz	l8442
 17545  004B1C  0A01               	xorlw	1	; case 1
 17546  004B1E  E0DC               	bz	l8444
 17547  004B20  0A03               	xorlw	3	; case 2
 17548  004B22  E0DF               	bz	l8446
 17549  004B24  0A01               	xorlw	1	; case 3
 17550  004B26  E0E2               	bz	l8448
 17551  004B28  0A07               	xorlw	7	; case 4
 17552  004B2A  E0E5               	bz	l8450
 17553  004B2C  0A01               	xorlw	1	; case 5
 17554  004B2E  E0E8               	bz	l8452
 17555  004B30  0A03               	xorlw	3	; case 6
 17556  004B32  E0E9               	bz	l8454
 17557  004B34  D7EB               	goto	l8456
 17558  004B36                     l895:
 17559                           
 17560                           ;ECAN.c: 1237: return (pt);
 17561  004B36  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17562  004B3A  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17563  004B3E  0012               	return	
 17564  004B40                     __end_of__ECANPointBuffer:
 17565                           	opt stack 0
 17566                           tblptru	equ	0xFF8
 17567                           tblptrh	equ	0xFF7
 17568                           tblptrl	equ	0xFF6
 17569                           tablat	equ	0xFF5
 17570                           prodh	equ	0xFF4
 17571                           prodl	equ	0xFF3
 17572                           intcon	equ	0xFF2
 17573                           postinc0	equ	0xFEE
 17574                           wreg	equ	0xFE8
 17575                           indf1	equ	0xFE7
 17576                           postdec1	equ	0xFE5
 17577                           fsr1h	equ	0xFE2
 17578                           fsr1l	equ	0xFE1
 17579                           indf2	equ	0xFDF
 17580                           postinc2	equ	0xFDE
 17581                           postdec2	equ	0xFDD
 17582                           plusw2	equ	0xFDB
 17583                           fsr2h	equ	0xFDA
 17584                           fsr2l	equ	0xFD9
 17585                           status	equ	0xFD8
 17586                           
 17587 ;; *************** function _vscp_check_pstorage *****************
 17588 ;; Defined at:
 17589 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 17590 ;; Parameters:    Size  Location     Type
 17591 ;;		None
 17592 ;; Auto vars:     Size  Location     Type
 17593 ;;		None
 17594 ;; Return value:  Size  Location     Type
 17595 ;;                  1    wreg      unsigned char 
 17596 ;; Registers used:
 17597 ;;		wreg, status,2, status,0, cstack
 17598 ;; Tracked objects:
 17599 ;;		On entry : 1/1
 17600 ;;		On exit  : 0/0
 17601 ;;		Unchanged: 0/0
 17602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17603 ;;      Params:         0       0       0       0       0       0       0
 17604 ;;      Locals:         0       0       0       0       0       0       0
 17605 ;;      Temps:          0       0       0       0       0       0       0
 17606 ;;      Totals:         0       0       0       0       0       0       0
 17607 ;;Total ram usage:        0 bytes
 17608 ;; Hardware stack levels used:    1
 17609 ;; Hardware stack levels required when called:    4
 17610 ;; This function calls:
 17611 ;;		_vscp_writeNicknamePermanent
 17612 ;;		_vscp_getSegmentCRC
 17613 ;;		_vscp_setSegmentCRC
 17614 ;;		_vscp_setControlByte
 17615 ;; This function is called by:
 17616 ;;		_main
 17617 ;; This function uses a non-reentrant model
 17618 ;;
 17619                           
 17620                           	psect	text78
 17621  005288                     __ptext78:
 17622                           	opt stack 0
 17623  005288                     _vscp_check_pstorage:
 17624                           	opt stack 25
 17625                           
 17626                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17627                           
 17628                           ;incstack = 0
 17629                           ;incstack = 0
 17630  005288  EC59  F02A         	call	_vscp_getSegmentCRC	;wreg free
 17631  00528C  0BC0               	andlw	192
 17632  00528E  0A40               	xorlw	64
 17633  005290  E102               	bnz	l9572
 17634                           
 17635                           ;vscp_firmware.c: 170: return !0;
 17636  005292  0E01               	movlw	1
 17637  005294  D00A               	goto	l1036
 17638  005296                     l9572:
 17639                           
 17640                           ;vscp_firmware.c: 171: }
 17641                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 17642  005296  0EFF               	movlw	255
 17643  005298  EC25  F02A         	call	_vscp_writeNicknamePermanent
 17644                           
 17645                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 17646  00529C  0E00               	movlw	0
 17647  00529E  EC13  F02A         	call	_vscp_setSegmentCRC
 17648                           
 17649                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 17650  0052A2  0EA0               	movlw	160
 17651  0052A4  EC0A  F02A         	call	_vscp_setControlByte
 17652                           
 17653                           ;vscp_firmware.c: 183: return 0;
 17654  0052A8  0E00               	movlw	0
 17655  0052AA                     l1036:
 17656  0052AA  0012               	return	
 17657  0052AC                     __end_of_vscp_check_pstorage:
 17658                           	opt stack 0
 17659                           tblptru	equ	0xFF8
 17660                           tblptrh	equ	0xFF7
 17661                           tblptrl	equ	0xFF6
 17662                           tablat	equ	0xFF5
 17663                           prodh	equ	0xFF4
 17664                           prodl	equ	0xFF3
 17665                           intcon	equ	0xFF2
 17666                           postinc0	equ	0xFEE
 17667                           wreg	equ	0xFE8
 17668                           indf1	equ	0xFE7
 17669                           postdec1	equ	0xFE5
 17670                           fsr1h	equ	0xFE2
 17671                           fsr1l	equ	0xFE1
 17672                           indf2	equ	0xFDF
 17673                           postinc2	equ	0xFDE
 17674                           postdec2	equ	0xFDD
 17675                           plusw2	equ	0xFDB
 17676                           fsr2h	equ	0xFDA
 17677                           fsr2l	equ	0xFD9
 17678                           status	equ	0xFD8
 17679                           
 17680 ;; *************** function _vscp_setControlByte *****************
 17681 ;; Defined at:
 17682 ;;		line 2792 in file "../main.c"
 17683 ;; Parameters:    Size  Location     Type
 17684 ;;  ctrl            1    wreg     unsigned char 
 17685 ;; Auto vars:     Size  Location     Type
 17686 ;;  ctrl            1   16[COMRAM] unsigned char 
 17687 ;; Return value:  Size  Location     Type
 17688 ;;		None               void
 17689 ;; Registers used:
 17690 ;;		wreg, status,2, cstack
 17691 ;; Tracked objects:
 17692 ;;		On entry : 0/1
 17693 ;;		On exit  : 0/0
 17694 ;;		Unchanged: 0/0
 17695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17696 ;;      Params:         0       0       0       0       0       0       0
 17697 ;;      Locals:         1       0       0       0       0       0       0
 17698 ;;      Temps:          0       0       0       0       0       0       0
 17699 ;;      Totals:         1       0       0       0       0       0       0
 17700 ;;Total ram usage:        1 bytes
 17701 ;; Hardware stack levels used:    1
 17702 ;; Hardware stack levels required when called:    3
 17703 ;; This function calls:
 17704 ;;		_writeEEPROM
 17705 ;; This function is called by:
 17706 ;;		_vscp_check_pstorage
 17707 ;; This function uses a non-reentrant model
 17708 ;;
 17709                           
 17710                           	psect	text79
 17711  005414                     __ptext79:
 17712                           	opt stack 0
 17713  005414                     _vscp_setControlByte:
 17714                           	opt stack 25
 17715                           
 17716                           ;incstack = 0
 17717                           ;incstack = 0
 17718                           ;vscp_setControlByte@ctrl stored from wreg
 17719  005414  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17720                           
 17721                           ;main.c: 2793: writeEEPROM(0x03, ctrl);
 17722  005418  6A0F               	clrf	?_writeEEPROM+1,c
 17723  00541A  0E03               	movlw	3
 17724  00541C  6E0E               	movwf	?_writeEEPROM,c
 17725  00541E  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17726  005422  EF0D  F029         	goto	_writeEEPROM	;wreg free
 17727  005426                     __end_of_vscp_setControlByte:
 17728                           	opt stack 0
 17729                           tblptru	equ	0xFF8
 17730                           tblptrh	equ	0xFF7
 17731                           tblptrl	equ	0xFF6
 17732                           tablat	equ	0xFF5
 17733                           prodh	equ	0xFF4
 17734                           prodl	equ	0xFF3
 17735                           intcon	equ	0xFF2
 17736                           postinc0	equ	0xFEE
 17737                           wreg	equ	0xFE8
 17738                           indf1	equ	0xFE7
 17739                           postdec1	equ	0xFE5
 17740                           fsr1h	equ	0xFE2
 17741                           fsr1l	equ	0xFE1
 17742                           indf2	equ	0xFDF
 17743                           postinc2	equ	0xFDE
 17744                           postdec2	equ	0xFDD
 17745                           plusw2	equ	0xFDB
 17746                           fsr2h	equ	0xFDA
 17747                           fsr2l	equ	0xFD9
 17748                           status	equ	0xFD8
 17749                           
 17750 ;; *************** function _vscp_setSegmentCRC *****************
 17751 ;; Defined at:
 17752 ;;		line 2783 in file "../main.c"
 17753 ;; Parameters:    Size  Location     Type
 17754 ;;  crc             1    wreg     unsigned char 
 17755 ;; Auto vars:     Size  Location     Type
 17756 ;;  crc             1   16[COMRAM] unsigned char 
 17757 ;; Return value:  Size  Location     Type
 17758 ;;		None               void
 17759 ;; Registers used:
 17760 ;;		wreg, status,2, cstack
 17761 ;; Tracked objects:
 17762 ;;		On entry : 0/0
 17763 ;;		On exit  : 0/0
 17764 ;;		Unchanged: 0/0
 17765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17766 ;;      Params:         0       0       0       0       0       0       0
 17767 ;;      Locals:         1       0       0       0       0       0       0
 17768 ;;      Temps:          0       0       0       0       0       0       0
 17769 ;;      Totals:         1       0       0       0       0       0       0
 17770 ;;Total ram usage:        1 bytes
 17771 ;; Hardware stack levels used:    1
 17772 ;; Hardware stack levels required when called:    3
 17773 ;; This function calls:
 17774 ;;		_writeEEPROM
 17775 ;; This function is called by:
 17776 ;;		_vscp_check_pstorage
 17777 ;;		_vscp_handleProbeState
 17778 ;;		_vscp_handleHeartbeat
 17779 ;;		_vscp_handleSetNickname
 17780 ;; This function uses a non-reentrant model
 17781 ;;
 17782                           
 17783                           	psect	text80
 17784  005426                     __ptext80:
 17785                           	opt stack 0
 17786  005426                     _vscp_setSegmentCRC:
 17787                           	opt stack 24
 17788                           
 17789                           ;incstack = 0
 17790                           ;incstack = 0
 17791                           ;vscp_setSegmentCRC@crc stored from wreg
 17792  005426  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17793                           
 17794                           ;main.c: 2784: writeEEPROM(0x02, crc);
 17795  00542A  6A0F               	clrf	?_writeEEPROM+1,c
 17796  00542C  0E02               	movlw	2
 17797  00542E  6E0E               	movwf	?_writeEEPROM,c
 17798  005430  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17799  005434  EF0D  F029         	goto	_writeEEPROM	;wreg free
 17800  005438                     __end_of_vscp_setSegmentCRC:
 17801                           	opt stack 0
 17802                           tblptru	equ	0xFF8
 17803                           tblptrh	equ	0xFF7
 17804                           tblptrl	equ	0xFF6
 17805                           tablat	equ	0xFF5
 17806                           prodh	equ	0xFF4
 17807                           prodl	equ	0xFF3
 17808                           intcon	equ	0xFF2
 17809                           postinc0	equ	0xFEE
 17810                           wreg	equ	0xFE8
 17811                           indf1	equ	0xFE7
 17812                           postdec1	equ	0xFE5
 17813                           fsr1h	equ	0xFE2
 17814                           fsr1l	equ	0xFE1
 17815                           indf2	equ	0xFDF
 17816                           postinc2	equ	0xFDE
 17817                           postdec2	equ	0xFDD
 17818                           plusw2	equ	0xFDB
 17819                           fsr2h	equ	0xFDA
 17820                           fsr2l	equ	0xFD9
 17821                           status	equ	0xFD8
 17822                           
 17823 ;; *************** function _vscp_getSegmentCRC *****************
 17824 ;; Defined at:
 17825 ;;		line 2774 in file "../main.c"
 17826 ;; Parameters:    Size  Location     Type
 17827 ;;		None
 17828 ;; Auto vars:     Size  Location     Type
 17829 ;;		None
 17830 ;; Return value:  Size  Location     Type
 17831 ;;                  1    wreg      unsigned char 
 17832 ;; Registers used:
 17833 ;;		wreg, status,2, cstack
 17834 ;; Tracked objects:
 17835 ;;		On entry : 0/0
 17836 ;;		On exit  : 0/0
 17837 ;;		Unchanged: 0/0
 17838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17839 ;;      Params:         0       0       0       0       0       0       0
 17840 ;;      Locals:         0       0       0       0       0       0       0
 17841 ;;      Temps:          0       0       0       0       0       0       0
 17842 ;;      Totals:         0       0       0       0       0       0       0
 17843 ;;Total ram usage:        0 bytes
 17844 ;; Hardware stack levels used:    1
 17845 ;; Hardware stack levels required when called:    3
 17846 ;; This function calls:
 17847 ;;		_readEEPROM
 17848 ;; This function is called by:
 17849 ;;		_vscp_check_pstorage
 17850 ;;		_vscp_handleHeartbeat
 17851 ;; This function uses a non-reentrant model
 17852 ;;
 17853                           
 17854                           	psect	text81
 17855  0054B2                     __ptext81:
 17856                           	opt stack 0
 17857  0054B2                     _vscp_getSegmentCRC:
 17858                           	opt stack 24
 17859                           
 17860                           ;main.c: 2775: return readEEPROM(0x02);
 17861                           
 17862                           ;incstack = 0
 17863                           ;incstack = 0
 17864  0054B2  6A0F               	clrf	?_readEEPROM+1,c
 17865  0054B4  0E02               	movlw	2
 17866  0054B6  6E0E               	movwf	?_readEEPROM,c
 17867  0054B8  EF1C  F02A         	goto	_readEEPROM	;wreg free
 17868  0054BC                     __end_of_vscp_getSegmentCRC:
 17869                           	opt stack 0
 17870                           tblptru	equ	0xFF8
 17871                           tblptrh	equ	0xFF7
 17872                           tblptrl	equ	0xFF6
 17873                           tablat	equ	0xFF5
 17874                           prodh	equ	0xFF4
 17875                           prodl	equ	0xFF3
 17876                           intcon	equ	0xFF2
 17877                           postinc0	equ	0xFEE
 17878                           wreg	equ	0xFE8
 17879                           indf1	equ	0xFE7
 17880                           postdec1	equ	0xFE5
 17881                           fsr1h	equ	0xFE2
 17882                           fsr1l	equ	0xFE1
 17883                           indf2	equ	0xFDF
 17884                           postinc2	equ	0xFDE
 17885                           postdec2	equ	0xFDD
 17886                           plusw2	equ	0xFDB
 17887                           fsr2h	equ	0xFDA
 17888                           fsr2l	equ	0xFD9
 17889                           status	equ	0xFD8
 17890                           
 17891 ;; *************** function _readEEPROM *****************
 17892 ;; Defined at:
 17893 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 17894 ;; Parameters:    Size  Location     Type
 17895 ;;  address         2   13[COMRAM] unsigned short 
 17896 ;; Auto vars:     Size  Location     Type
 17897 ;;  data            1   16[COMRAM] unsigned char 
 17898 ;; Return value:  Size  Location     Type
 17899 ;;                  1    wreg      unsigned char 
 17900 ;; Registers used:
 17901 ;;		wreg, status,2
 17902 ;; Tracked objects:
 17903 ;;		On entry : 0/0
 17904 ;;		On exit  : 0/0
 17905 ;;		Unchanged: 0/0
 17906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17907 ;;      Params:         2       0       0       0       0       0       0
 17908 ;;      Locals:         2       0       0       0       0       0       0
 17909 ;;      Temps:          0       0       0       0       0       0       0
 17910 ;;      Totals:         4       0       0       0       0       0       0
 17911 ;;Total ram usage:        4 bytes
 17912 ;; Hardware stack levels used:    1
 17913 ;; Hardware stack levels required when called:    2
 17914 ;; This function calls:
 17915 ;;		Nothing
 17916 ;; This function is called by:
 17917 ;;		_doWork
 17918 ;;		_doOneSecondWork
 17919 ;;		_sendTempEvent
 17920 ;;		_getCalibrationValue
 17921 ;;		_writeCoeffs2Ram
 17922 ;;		_handle_sync
 17923 ;;		_vscp_readAppReg
 17924 ;;		_vscp_writeAppReg
 17925 ;;		_vscp_getGUID
 17926 ;;		_vscp_getUserID
 17927 ;;		_vscp_getManufacturerId
 17928 ;;		_vscp_getZone
 17929 ;;		_vscp_getSubzone
 17930 ;;		_vscp_readNicknamePermanent
 17931 ;;		_vscp_getSegmentCRC
 17932 ;; This function uses a non-reentrant model
 17933 ;;
 17934                           
 17935                           	psect	text82
 17936  005438                     __ptext82:
 17937                           	opt stack 0
 17938  005438                     _readEEPROM:
 17939                           	opt stack 25
 17940                           
 17941                           ;eeprom.c: 93: uint8_t data;
 17942                           ;eeprom.c: 98: EEADR = address & 0xff;
 17943                           
 17944                           ;incstack = 0
 17945                           ;incstack = 0
 17946  005438  C00E  FFA9         	movff	readEEPROM@address,4009	;volatile
 17947                           
 17948                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 17949  00543C  9EA6               	bcf	4006,7,c	;volatile
 17950                           
 17951                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 17952  00543E  9CA6               	bcf	4006,6,c	;volatile
 17953                           
 17954                           ;eeprom.c: 101: EECON1bits.RD = 1;
 17955  005440  80A6               	bsf	4006,0,c	;volatile
 17956                           
 17957                           ;eeprom.c: 102: data = EEDATA;
 17958  005442  CFA8 F011          	movff	4008,readEEPROM@data	;volatile
 17959                           
 17960                           ;eeprom.c: 104: return data;
 17961  005446  5011               	movf	readEEPROM@data,w,c
 17962  005448  0012               	return	
 17963  00544A                     __end_of_readEEPROM:
 17964                           	opt stack 0
 17965                           tblptru	equ	0xFF8
 17966                           tblptrh	equ	0xFF7
 17967                           tblptrl	equ	0xFF6
 17968                           tablat	equ	0xFF5
 17969                           prodh	equ	0xFF4
 17970                           prodl	equ	0xFF3
 17971                           intcon	equ	0xFF2
 17972                           postinc0	equ	0xFEE
 17973                           wreg	equ	0xFE8
 17974                           indf1	equ	0xFE7
 17975                           postdec1	equ	0xFE5
 17976                           fsr1h	equ	0xFE2
 17977                           fsr1l	equ	0xFE1
 17978                           indf2	equ	0xFDF
 17979                           postinc2	equ	0xFDE
 17980                           postdec2	equ	0xFDD
 17981                           plusw2	equ	0xFDB
 17982                           fsr2h	equ	0xFDA
 17983                           fsr2l	equ	0xFD9
 17984                           status	equ	0xFD8
 17985                           
 17986 ;; *************** function _vscp_writeNicknamePermanent *****************
 17987 ;; Defined at:
 17988 ;;		line 2765 in file "../main.c"
 17989 ;; Parameters:    Size  Location     Type
 17990 ;;  nickname        1    wreg     unsigned char 
 17991 ;; Auto vars:     Size  Location     Type
 17992 ;;  nickname        1   16[COMRAM] unsigned char 
 17993 ;; Return value:  Size  Location     Type
 17994 ;;		None               void
 17995 ;; Registers used:
 17996 ;;		wreg, status,2, cstack
 17997 ;; Tracked objects:
 17998 ;;		On entry : 0/0
 17999 ;;		On exit  : 0/0
 18000 ;;		Unchanged: 0/0
 18001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18002 ;;      Params:         0       0       0       0       0       0       0
 18003 ;;      Locals:         1       0       0       0       0       0       0
 18004 ;;      Temps:          0       0       0       0       0       0       0
 18005 ;;      Totals:         1       0       0       0       0       0       0
 18006 ;;Total ram usage:        1 bytes
 18007 ;; Hardware stack levels used:    1
 18008 ;; Hardware stack levels required when called:    3
 18009 ;; This function calls:
 18010 ;;		_writeEEPROM
 18011 ;; This function is called by:
 18012 ;;		_vscp_check_pstorage
 18013 ;;		_vscp_handleProbeState
 18014 ;;		_vscp_handleHeartbeat
 18015 ;;		_vscp_handleSetNickname
 18016 ;;		_vscp_handleDropNickname
 18017 ;; This function uses a non-reentrant model
 18018 ;;
 18019                           
 18020                           	psect	text83
 18021  00544A                     __ptext83:
 18022                           	opt stack 0
 18023  00544A                     _vscp_writeNicknamePermanent:
 18024                           	opt stack 24
 18025                           
 18026                           ;incstack = 0
 18027                           ;incstack = 0
 18028                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18029  00544A  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18030                           
 18031                           ;main.c: 2766: writeEEPROM( 0x01, nickname );
 18032  00544E  6A0F               	clrf	?_writeEEPROM+1,c
 18033  005450  0E01               	movlw	1
 18034  005452  6E0E               	movwf	?_writeEEPROM,c
 18035  005454  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 18036  005458  EF0D  F029         	goto	_writeEEPROM	;wreg free
 18037  00545C                     __end_of_vscp_writeNicknamePermanent:
 18038                           	opt stack 0
 18039                           tblptru	equ	0xFF8
 18040                           tblptrh	equ	0xFF7
 18041                           tblptrl	equ	0xFF6
 18042                           tablat	equ	0xFF5
 18043                           prodh	equ	0xFF4
 18044                           prodl	equ	0xFF3
 18045                           intcon	equ	0xFF2
 18046                           postinc0	equ	0xFEE
 18047                           wreg	equ	0xFE8
 18048                           indf1	equ	0xFE7
 18049                           postdec1	equ	0xFE5
 18050                           fsr1h	equ	0xFE2
 18051                           fsr1l	equ	0xFE1
 18052                           indf2	equ	0xFDF
 18053                           postinc2	equ	0xFDE
 18054                           postdec2	equ	0xFDD
 18055                           plusw2	equ	0xFDB
 18056                           fsr2h	equ	0xFDA
 18057                           fsr2l	equ	0xFD9
 18058                           status	equ	0xFD8
 18059                           
 18060 ;; *************** function _writeEEPROM *****************
 18061 ;; Defined at:
 18062 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 18063 ;; Parameters:    Size  Location     Type
 18064 ;;  address         2   13[COMRAM] unsigned short 
 18065 ;;  data            1   15[COMRAM] unsigned char 
 18066 ;; Auto vars:     Size  Location     Type
 18067 ;;		None
 18068 ;; Return value:  Size  Location     Type
 18069 ;;		None               void
 18070 ;; Registers used:
 18071 ;;		wreg, status,2
 18072 ;; Tracked objects:
 18073 ;;		On entry : 0/0
 18074 ;;		On exit  : 0/0
 18075 ;;		Unchanged: 0/0
 18076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18077 ;;      Params:         3       0       0       0       0       0       0
 18078 ;;      Locals:         0       0       0       0       0       0       0
 18079 ;;      Temps:          0       0       0       0       0       0       0
 18080 ;;      Totals:         3       0       0       0       0       0       0
 18081 ;;Total ram usage:        3 bytes
 18082 ;; Hardware stack levels used:    1
 18083 ;; Hardware stack levels required when called:    2
 18084 ;; This function calls:
 18085 ;;		Nothing
 18086 ;; This function is called by:
 18087 ;;		_main
 18088 ;;		_doWork
 18089 ;;		_init_app_eeprom
 18090 ;;		_vscp_writeAppReg
 18091 ;;		_vscp_setGUID
 18092 ;;		_vscp_setUserID
 18093 ;;		_vscp_setManufacturerId
 18094 ;;		_vscp_goBootloaderMode
 18095 ;;		_vscp_writeNicknamePermanent
 18096 ;;		_vscp_setSegmentCRC
 18097 ;;		_vscp_setControlByte
 18098 ;; This function uses a non-reentrant model
 18099 ;;
 18100                           
 18101                           	psect	text84
 18102  00521A                     __ptext84:
 18103                           	opt stack 0
 18104  00521A                     _writeEEPROM:
 18105                           	opt stack 26
 18106                           
 18107                           ;eeprom.c: 29: EEADR = address & 0xff;
 18108                           
 18109                           ;incstack = 0
 18110                           ;incstack = 0
 18111  00521A  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 18112                           
 18113                           ;eeprom.c: 30: EEDATA = data;
 18114  00521E  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18115                           
 18116                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 18117  005222  9EA6               	bcf	4006,7,c	;volatile
 18118                           
 18119                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 18120  005224  9CA6               	bcf	4006,6,c	;volatile
 18121                           
 18122                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 18123  005226  84A6               	bsf	4006,2,c	;volatile
 18124                           
 18125                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 18126  005228  9EF2               	bcf	intcon,7,c	;volatile
 18127                           
 18128                           ;eeprom.c: 37: EECON2 = 0x55;
 18129  00522A  0E55               	movlw	85
 18130  00522C  6EA7               	movwf	4007,c	;volatile
 18131                           
 18132                           ;eeprom.c: 38: EECON2 = 0xaa;
 18133  00522E  0EAA               	movlw	170
 18134  005230  6EA7               	movwf	4007,c	;volatile
 18135                           
 18136                           ;eeprom.c: 39: EECON1bits.WR = 1;
 18137  005232  82A6               	bsf	4006,1,c	;volatile
 18138                           
 18139                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 18140  005234  8EF2               	bsf	intcon,7,c	;volatile
 18141  005236                     l918:
 18142  005236  A8A1               	btfss	4001,4,c	;volatile
 18143  005238  D7FE               	goto	l918
 18144                           
 18145                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 18146  00523A  98A1               	bcf	4001,4,c	;volatile
 18147                           
 18148                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 18149  00523C  94A6               	bcf	4006,2,c	;volatile
 18150  00523E  0012               	return	
 18151  005240                     __end_of_writeEEPROM:
 18152                           	opt stack 0
 18153                           tblptru	equ	0xFF8
 18154                           tblptrh	equ	0xFF7
 18155                           tblptrl	equ	0xFF6
 18156                           tablat	equ	0xFF5
 18157                           prodh	equ	0xFF4
 18158                           prodl	equ	0xFF3
 18159                           intcon	equ	0xFF2
 18160                           postinc0	equ	0xFEE
 18161                           wreg	equ	0xFE8
 18162                           indf1	equ	0xFE7
 18163                           postdec1	equ	0xFE5
 18164                           fsr1h	equ	0xFE2
 18165                           fsr1l	equ	0xFE1
 18166                           indf2	equ	0xFDF
 18167                           postinc2	equ	0xFDE
 18168                           postdec2	equ	0xFDD
 18169                           plusw2	equ	0xFDB
 18170                           fsr2h	equ	0xFDA
 18171                           fsr2l	equ	0xFD9
 18172                           status	equ	0xFD8
 18173                           
 18174 ;; *************** function _init *****************
 18175 ;; Defined at:
 18176 ;;		line 886 in file "../main.c"
 18177 ;; Parameters:    Size  Location     Type
 18178 ;;		None
 18179 ;; Auto vars:     Size  Location     Type
 18180 ;;		None
 18181 ;; Return value:  Size  Location     Type
 18182 ;;		None               void
 18183 ;; Registers used:
 18184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18185 ;; Tracked objects:
 18186 ;;		On entry : 0/0
 18187 ;;		On exit  : 1/1
 18188 ;;		Unchanged: 0/0
 18189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18190 ;;      Params:         0       0       0       0       0       0       0
 18191 ;;      Locals:         0       0       0       0       0       0       0
 18192 ;;      Temps:          0       0       0       0       0       0       0
 18193 ;;      Totals:         0       0       0       0       0       0       0
 18194 ;;Total ram usage:        0 bytes
 18195 ;; Hardware stack levels used:    1
 18196 ;; Hardware stack levels required when called:    5
 18197 ;; This function calls:
 18198 ;;		_WriteTimer0
 18199 ;;		_ConvertADC
 18200 ;;		_init_app_ram
 18201 ;;		_OpenTimer0
 18202 ;;		_OpenADC
 18203 ;;		_ECANInitialize
 18204 ;; This function is called by:
 18205 ;;		_main
 18206 ;; This function uses a non-reentrant model
 18207 ;;
 18208                           
 18209                           	psect	text85
 18210  004FEE                     __ptext85:
 18211                           	opt stack 0
 18212  004FEE                     _init:
 18213                           	opt stack 24
 18214                           
 18215                           ;main.c: 890: init_app_ram();
 18216                           
 18217                           ;incstack = 0
 18218                           ;incstack = 0
 18219  004FEE  EC57  F027         	call	_init_app_ram	;wreg free
 18220                           
 18221                           ; BSR set to: 1
 18222                           ;main.c: 898: TRISA = 0x07;
 18223  004FF2  0E07               	movlw	7
 18224  004FF4  6E92               	movwf	3986,c	;volatile
 18225                           
 18226                           ; BSR set to: 1
 18227                           ;main.c: 909: TRISB = 0x1B;
 18228  004FF6  0E1B               	movlw	27
 18229  004FF8  6E93               	movwf	3987,c	;volatile
 18230                           
 18231                           ; BSR set to: 1
 18232                           ;main.c: 919: TRISC = 0x01;
 18233  004FFA  0E01               	movlw	1
 18234  004FFC  6E94               	movwf	3988,c	;volatile
 18235                           
 18236                           ; BSR set to: 1
 18237                           ;main.c: 920: PORTC = 0x00;
 18238  004FFE  6A82               	clrf	3970,c	;volatile
 18239                           
 18240                           ; BSR set to: 1
 18241                           ;main.c: 922: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18242  005000  0E92               	movlw	146
 18243  005002  EC87  F029         	call	_OpenTimer0
 18244                           
 18245                           ; BSR set to: 1
 18246                           ;main.c: 923: WriteTimer0(0xfb1d);
 18247  005006  0EFB               	movlw	251
 18248  005008  6E0F               	movwf	?_WriteTimer0+1,c
 18249  00500A  0E1D               	movlw	29
 18250  00500C  6E0E               	movwf	?_WriteTimer0,c
 18251  00500E  EC2E  F02A         	call	_WriteTimer0	;wreg free
 18252                           
 18253                           ; BSR set to: 1
 18254                           ;main.c: 925: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18255                           ;main.c: 926: 0b10000111 & 0b11111111 & 0b11110100 &
 18256                           ;main.c: 927: 0b11111110 & 0b11111101,
 18257                           ;main.c: 928: 15);
 18258  005012  0E84               	movlw	132
 18259  005014  6E0E               	movwf	?_OpenADC,c
 18260  005016  0E0F               	movlw	15
 18261  005018  6E0F               	movwf	?_OpenADC+1,c
 18262  00501A  0EEF               	movlw	239
 18263  00501C  ECDA  F025         	call	_OpenADC
 18264                           
 18265                           ; BSR set to: 1
 18266                           ;main.c: 931: ECANInitialize();
 18267  005020  EC1B  F024         	call	_ECANInitialize	;wreg free
 18268                           
 18269                           ;main.c: 955: INTCONbits.GIE = 1;
 18270  005024  8EF2               	bsf	intcon,7,c	;volatile
 18271                           
 18272                           ;main.c: 957: ConvertADC();
 18273  005026  EF64  F02A         	goto	_ConvertADC	;wreg free
 18274  00502A                     __end_of_init:
 18275                           	opt stack 0
 18276                           tblptru	equ	0xFF8
 18277                           tblptrh	equ	0xFF7
 18278                           tblptrl	equ	0xFF6
 18279                           tablat	equ	0xFF5
 18280                           prodh	equ	0xFF4
 18281                           prodl	equ	0xFF3
 18282                           intcon	equ	0xFF2
 18283                           postinc0	equ	0xFEE
 18284                           wreg	equ	0xFE8
 18285                           indf1	equ	0xFE7
 18286                           postdec1	equ	0xFE5
 18287                           fsr1h	equ	0xFE2
 18288                           fsr1l	equ	0xFE1
 18289                           indf2	equ	0xFDF
 18290                           postinc2	equ	0xFDE
 18291                           postdec2	equ	0xFDD
 18292                           plusw2	equ	0xFDB
 18293                           fsr2h	equ	0xFDA
 18294                           fsr2l	equ	0xFD9
 18295                           status	equ	0xFD8
 18296                           
 18297 ;; *************** function _ECANInitialize *****************
 18298 ;; Defined at:
 18299 ;;		line 168 in file "../ECAN.c"
 18300 ;; Parameters:    Size  Location     Type
 18301 ;;		None
 18302 ;; Auto vars:     Size  Location     Type
 18303 ;;		None
 18304 ;; Return value:  Size  Location     Type
 18305 ;;		None               void
 18306 ;; Registers used:
 18307 ;;		wreg, status,2, status,0, cstack
 18308 ;; Tracked objects:
 18309 ;;		On entry : F/1
 18310 ;;		On exit  : 1/1
 18311 ;;		Unchanged: 0/0
 18312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18313 ;;      Params:         0       0       0       0       0       0       0
 18314 ;;      Locals:         0       0       0       0       0       0       0
 18315 ;;      Temps:          0       0       0       0       0       0       0
 18316 ;;      Totals:         0       0       0       0       0       0       0
 18317 ;;Total ram usage:        0 bytes
 18318 ;; Hardware stack levels used:    1
 18319 ;; Hardware stack levels required when called:    3
 18320 ;; This function calls:
 18321 ;;		_ECANSetOperationMode
 18322 ;; This function is called by:
 18323 ;;		_init
 18324 ;; This function uses a non-reentrant model
 18325 ;;
 18326                           
 18327                           	psect	text86
 18328  004836                     __ptext86:
 18329                           	opt stack 0
 18330  004836                     _ECANInitialize:
 18331                           	opt stack 25
 18332                           
 18333                           ; BSR set to: 1
 18334                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18335                           
 18336                           ;incstack = 0
 18337                           ;incstack = 0
 18338  004836  0E80               	movlw	128
 18339  004838  ECE0  F029         	call	_ECANSetOperationMode
 18340                           
 18341                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18342  00483C  0E09               	movlw	9
 18343  00483E  6E70               	movwf	3952,c	;volatile
 18344                           
 18345                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18346  004840  0EFC               	movlw	252
 18347  004842  6E71               	movwf	3953,c	;volatile
 18348                           
 18349                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18350                           ;ECAN.c: 181: (0 << 6) |
 18351                           ;ECAN.c: 182: (2-1);
 18352  004844  0E01               	movlw	1
 18353  004846  6E72               	movwf	3954,c	;volatile
 18354                           
 18355                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18356  004848  0E20               	movlw	32
 18357  00484A  6E73               	movwf	3955,c	;volatile
 18358                           
 18359                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18360  00484C  8E77               	bsf	3959,7,c	;volatile
 18361                           
 18362                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18363  00484E  9C77               	bcf	3959,6,c	;volatile
 18364                           
 18365                           ;ECAN.c: 205: RXB0CON = 0;
 18366  004850  6A60               	clrf	3936,c	;volatile
 18367                           
 18368                           ;ECAN.c: 211: RXB1CON = 0;
 18369  004852  010F               	movlb	15	; () banked
 18370  004854  6B50               	clrf	80,b	;volatile
 18371                           
 18372                           ; BSR set to: 15
 18373                           ;ECAN.c: 221: B0CON = 0;
 18374  004856  010E               	movlb	14	; () banked
 18375  004858  6B20               	clrf	32,b	;volatile
 18376                           
 18377                           ; BSR set to: 14
 18378                           ;ECAN.c: 231: B1CON = 0;
 18379  00485A  6B30               	clrf	48,b	;volatile
 18380                           
 18381                           ; BSR set to: 14
 18382                           ;ECAN.c: 241: B2CON = 0;
 18383  00485C  6B40               	clrf	64,b	;volatile
 18384                           
 18385                           ; BSR set to: 14
 18386                           ;ECAN.c: 254: B3CON = 0 << 2;
 18387  00485E  6B50               	clrf	80,b	;volatile
 18388                           
 18389                           ; BSR set to: 14
 18390                           ;ECAN.c: 264: B4CON = 0 << 2;
 18391  004860  6B60               	clrf	96,b	;volatile
 18392                           
 18393                           ; BSR set to: 14
 18394                           ;ECAN.c: 274: B5CON = 0 << 2;
 18395  004862  6B70               	clrf	112,b	;volatile
 18396                           
 18397                           ; BSR set to: 14
 18398                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18399  004864  0EE0               	movlw	224
 18400  004866  010D               	movlb	13	; () banked
 18401  004868  6FF8               	movwf	248,b	;volatile
 18402                           
 18403                           ; BSR set to: 13
 18404                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18405  00486A  010F               	movlb	15	; () banked
 18406  00486C  6B00               	clrf	0,b	;volatile
 18407                           
 18408                           ; BSR set to: 15
 18409  00486E  0E08               	movlw	8
 18410  004870  6F01               	movwf	1,b	;volatile
 18411                           
 18412                           ; BSR set to: 15
 18413  004872  6B02               	clrf	2,b	;volatile
 18414                           
 18415                           ; BSR set to: 15
 18416  004874  6B03               	clrf	3,b	;volatile
 18417                           
 18418                           ; BSR set to: 15
 18419                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18420  004876  6B04               	clrf	4,b	;volatile
 18421                           
 18422                           ; BSR set to: 15
 18423  004878  0EE8               	movlw	232
 18424  00487A  6F05               	movwf	5,b	;volatile
 18425                           
 18426                           ; BSR set to: 15
 18427  00487C  0E1A               	movlw	26
 18428  00487E  6F06               	movwf	6,b	;volatile
 18429                           
 18430                           ; BSR set to: 15
 18431  004880  6B07               	clrf	7,b	;volatile
 18432                           
 18433                           ; BSR set to: 15
 18434                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18435  004882  0E03               	movlw	3
 18436  004884  010D               	movlb	13	; () banked
 18437  004886  6FD4               	movwf	212,b	;volatile
 18438                           
 18439                           ; BSR set to: 13
 18440                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18441  004888  6BD5               	clrf	213,b	;volatile
 18442                           
 18443                           ; BSR set to: 13
 18444                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18445  00488A  6BE0               	clrf	224,b	;volatile
 18446                           
 18447                           ; BSR set to: 13
 18448                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18449  00488C  0E11               	movlw	17
 18450  00488E  6FE1               	movwf	225,b	;volatile
 18451                           
 18452                           ; BSR set to: 13
 18453                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18454  004890  6FE2               	movwf	226,b	;volatile
 18455                           
 18456                           ; BSR set to: 13
 18457                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18458  004892  6BE3               	clrf	227,b	;volatile
 18459                           
 18460                           ; BSR set to: 13
 18461                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18462  004894  6BE4               	clrf	228,b	;volatile
 18463                           
 18464                           ; BSR set to: 13
 18465                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18466  004896  6BE5               	clrf	229,b	;volatile
 18467                           
 18468                           ; BSR set to: 13
 18469                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18470  004898  6BE6               	clrf	230,b	;volatile
 18471                           
 18472                           ; BSR set to: 13
 18473                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18474  00489A  6BE7               	clrf	231,b	;volatile
 18475                           
 18476                           ; BSR set to: 13
 18477                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18478  00489C  0E54               	movlw	84
 18479  00489E  6FF0               	movwf	240,b	;volatile
 18480                           
 18481                           ; BSR set to: 13
 18482                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18483  0048A0  0E05               	movlw	5
 18484  0048A2  6FF1               	movwf	241,b	;volatile
 18485                           
 18486                           ; BSR set to: 13
 18487                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18488  0048A4  6BF2               	clrf	242,b	;volatile
 18489                           
 18490                           ; BSR set to: 13
 18491                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18492  0048A6  6BF2               	clrf	242,b	;volatile
 18493                           
 18494                           ; BSR set to: 13
 18495                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18496  0048A8  0E0F               	movlw	15
 18497  0048AA  010F               	movlb	15	; () banked
 18498  0048AC  6F18               	movwf	24,b	;volatile
 18499                           
 18500                           ; BSR set to: 15
 18501  0048AE  0EE0               	movlw	224
 18502  0048B0  6F19               	movwf	25,b	;volatile
 18503                           
 18504                           ; BSR set to: 15
 18505  0048B2  6B1A               	clrf	26,b	;volatile
 18506                           
 18507                           ; BSR set to: 15
 18508  0048B4  6B1B               	clrf	27,b	;volatile
 18509                           
 18510                           ; BSR set to: 15
 18511                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18512  0048B6  8719               	bsf	25,3,b	;volatile
 18513                           
 18514                           ; BSR set to: 15
 18515                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18516  0048B8  0E0F               	movlw	15
 18517  0048BA  6F1C               	movwf	28,b	;volatile
 18518                           
 18519                           ; BSR set to: 15
 18520  0048BC  0EE0               	movlw	224
 18521  0048BE  6F1D               	movwf	29,b	;volatile
 18522                           
 18523                           ; BSR set to: 15
 18524  0048C0  691E               	setf	30,b	;volatile
 18525                           
 18526                           ; BSR set to: 15
 18527  0048C2  6B1F               	clrf	31,b	;volatile
 18528                           
 18529                           ; BSR set to: 15
 18530                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18531  0048C4  871D               	bsf	29,3,b	;volatile
 18532                           
 18533                           ; BSR set to: 15
 18534                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18535  0048C6  0E00               	movlw	0
 18536  0048C8  EFE0  F029         	goto	_ECANSetOperationMode
 18537  0048CC                     __end_of_ECANInitialize:
 18538                           	opt stack 0
 18539                           tblptru	equ	0xFF8
 18540                           tblptrh	equ	0xFF7
 18541                           tblptrl	equ	0xFF6
 18542                           tablat	equ	0xFF5
 18543                           prodh	equ	0xFF4
 18544                           prodl	equ	0xFF3
 18545                           intcon	equ	0xFF2
 18546                           postinc0	equ	0xFEE
 18547                           wreg	equ	0xFE8
 18548                           indf1	equ	0xFE7
 18549                           postdec1	equ	0xFE5
 18550                           fsr1h	equ	0xFE2
 18551                           fsr1l	equ	0xFE1
 18552                           indf2	equ	0xFDF
 18553                           postinc2	equ	0xFDE
 18554                           postdec2	equ	0xFDD
 18555                           plusw2	equ	0xFDB
 18556                           fsr2h	equ	0xFDA
 18557                           fsr2l	equ	0xFD9
 18558                           status	equ	0xFD8
 18559                           
 18560 ;; *************** function _ECANSetOperationMode *****************
 18561 ;; Defined at:
 18562 ;;		line 1012 in file "../ECAN.c"
 18563 ;; Parameters:    Size  Location     Type
 18564 ;;  mode            1    wreg     enum E16346
 18565 ;; Auto vars:     Size  Location     Type
 18566 ;;  mode            1   13[COMRAM] enum E16346
 18567 ;; Return value:  Size  Location     Type
 18568 ;;		None               void
 18569 ;; Registers used:
 18570 ;;		wreg, status,2, status,0
 18571 ;; Tracked objects:
 18572 ;;		On entry : 1/1
 18573 ;;		On exit  : 1/1
 18574 ;;		Unchanged: 1/0
 18575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18576 ;;      Params:         0       0       0       0       0       0       0
 18577 ;;      Locals:         1       0       0       0       0       0       0
 18578 ;;      Temps:          0       0       0       0       0       0       0
 18579 ;;      Totals:         1       0       0       0       0       0       0
 18580 ;;Total ram usage:        1 bytes
 18581 ;; Hardware stack levels used:    1
 18582 ;; Hardware stack levels required when called:    2
 18583 ;; This function calls:
 18584 ;;		Nothing
 18585 ;; This function is called by:
 18586 ;;		_ECANInitialize
 18587 ;; This function uses a non-reentrant model
 18588 ;;
 18589                           
 18590                           	psect	text87
 18591  0053C0                     __ptext87:
 18592                           	opt stack 0
 18593  0053C0                     _ECANSetOperationMode:
 18594                           	opt stack 25
 18595                           
 18596                           ;incstack = 0
 18597                           ;incstack = 0
 18598                           ;ECANSetOperationMode@mode stored from wreg
 18599  0053C0  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18600                           
 18601                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18602  0053C4  0E1F               	movlw	31
 18603  0053C6  166F               	andwf	3951,f,c	;volatile
 18604                           
 18605                           ;ECAN.c: 1014: CANCON |= mode;
 18606  0053C8  500E               	movf	ECANSetOperationMode@mode,w,c
 18607  0053CA  126F               	iorwf	3951,f,c	;volatile
 18608  0053CC                     l8412:
 18609  0053CC  506F               	movf	3951,w,c	;volatile
 18610  0053CE  0BE0               	andlw	224
 18611  0053D0  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18612  0053D2  B4D8               	btfsc	status,2,c
 18613  0053D4  0012               	return	
 18614  0053D6  D7FA               	goto	l8412
 18615  0053D8                     __end_of_ECANSetOperationMode:
 18616                           	opt stack 0
 18617                           tblptru	equ	0xFF8
 18618                           tblptrh	equ	0xFF7
 18619                           tblptrl	equ	0xFF6
 18620                           tablat	equ	0xFF5
 18621                           prodh	equ	0xFF4
 18622                           prodl	equ	0xFF3
 18623                           intcon	equ	0xFF2
 18624                           postinc0	equ	0xFEE
 18625                           wreg	equ	0xFE8
 18626                           indf1	equ	0xFE7
 18627                           postdec1	equ	0xFE5
 18628                           fsr1h	equ	0xFE2
 18629                           fsr1l	equ	0xFE1
 18630                           indf2	equ	0xFDF
 18631                           postinc2	equ	0xFDE
 18632                           postdec2	equ	0xFDD
 18633                           plusw2	equ	0xFDB
 18634                           fsr2h	equ	0xFDA
 18635                           fsr2l	equ	0xFD9
 18636                           status	equ	0xFD8
 18637                           
 18638 ;; *************** function _OpenADC *****************
 18639 ;; Defined at:
 18640 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18641 ;; Parameters:    Size  Location     Type
 18642 ;;  config          1    wreg     unsigned char 
 18643 ;;  config2         1   13[COMRAM] unsigned char 
 18644 ;;  portconfig      1   14[COMRAM] unsigned char 
 18645 ;; Auto vars:     Size  Location     Type
 18646 ;;  config          1   17[COMRAM] unsigned char 
 18647 ;; Return value:  Size  Location     Type
 18648 ;;		None               void
 18649 ;; Registers used:
 18650 ;;		wreg, status,2, status,0
 18651 ;; Tracked objects:
 18652 ;;		On entry : F/1
 18653 ;;		On exit  : F/1
 18654 ;;		Unchanged: F/0
 18655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18656 ;;      Params:         2       0       0       0       0       0       0
 18657 ;;      Locals:         1       0       0       0       0       0       0
 18658 ;;      Temps:          2       0       0       0       0       0       0
 18659 ;;      Totals:         5       0       0       0       0       0       0
 18660 ;;Total ram usage:        5 bytes
 18661 ;; Hardware stack levels used:    1
 18662 ;; Hardware stack levels required when called:    2
 18663 ;; This function calls:
 18664 ;;		Nothing
 18665 ;; This function is called by:
 18666 ;;		_init
 18667 ;; This function uses a non-reentrant model
 18668 ;;
 18669                           
 18670                           	psect	text88
 18671  004BB4                     __ptext88:
 18672                           	opt stack 0
 18673  004BB4                     _OpenADC:
 18674                           	opt stack 26
 18675                           
 18676                           ;incstack = 0
 18677                           ;incstack = 0
 18678                           ;OpenADC@config stored from wreg
 18679  004BB4  CFE8 F012          	movff	wreg,OpenADC@config
 18680                           
 18681                           ; BSR set to: 1
 18682  004BB8  6AC2               	clrf	4034,c	;volatile
 18683  004BBA  6AC0               	clrf	4032,c	;volatile
 18684                           
 18685                           ; BSR set to: 1
 18686  004BBC  90D8               	bcf	status,0,c
 18687  004BBE  300E               	rrcf	OpenADC@config2,w,c
 18688  004BC0  0B3C               	andlw	60
 18689  004BC2  6EC2               	movwf	4034,c	;volatile
 18690  004BC4  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18691  004BC8  3A10               	swapf	??_OpenADC,f,c
 18692  004BCA  0EF0               	movlw	240
 18693  004BCC  1610               	andwf	??_OpenADC,f,c
 18694  004BCE  0E30               	movlw	48
 18695  004BD0  1610               	andwf	??_OpenADC,f,c
 18696  004BD2  500F               	movf	OpenADC@portconfig,w,c
 18697  004BD4  0B0F               	andlw	15
 18698  004BD6  1010               	iorwf	??_OpenADC,w,c
 18699  004BD8  6EC1               	movwf	4033,c	;volatile
 18700  004BDA  C012  F010         	movff	OpenADC@config,??_OpenADC
 18701  004BDE  90D8               	bcf	status,0,c
 18702  004BE0  3610               	rlcf	??_OpenADC,f,c
 18703  004BE2  90D8               	bcf	status,0,c
 18704  004BE4  3610               	rlcf	??_OpenADC,f,c
 18705  004BE6  0E38               	movlw	56
 18706  004BE8  1610               	andwf	??_OpenADC,f,c
 18707  004BEA  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18708  004BEE  3A11               	swapf	??_OpenADC+1,f,c
 18709  004BF0  0E0F               	movlw	15
 18710  004BF2  1611               	andwf	??_OpenADC+1,f,c
 18711  004BF4  0E07               	movlw	7
 18712  004BF6  1611               	andwf	??_OpenADC+1,f,c
 18713  004BF8  5012               	movf	OpenADC@config,w,c
 18714  004BFA  0B80               	andlw	128
 18715  004BFC  1011               	iorwf	??_OpenADC+1,w,c
 18716  004BFE  1010               	iorwf	??_OpenADC,w,c
 18717  004C00  6EC0               	movwf	4032,c	;volatile
 18718                           
 18719                           ; BSR set to: 1
 18720  004C02  AE0E               	btfss	OpenADC@config2,7,c
 18721  004C04  D003               	goto	l1301
 18722                           
 18723                           ; BSR set to: 1
 18724  004C06  9C9E               	bcf	3998,6,c	;volatile
 18725  004C08  8C9D               	bsf	3997,6,c	;volatile
 18726  004C0A  8CF2               	bsf	intcon,6,c	;volatile
 18727  004C0C                     l1301:
 18728                           
 18729                           ; BSR set to: 1
 18730  004C0C  80C2               	bsf	4034,0,c	;volatile
 18731                           
 18732                           ; BSR set to: 1
 18733  004C0E  0012               	return	
 18734  004C10                     __end_of_OpenADC:
 18735                           	opt stack 0
 18736                           tblptru	equ	0xFF8
 18737                           tblptrh	equ	0xFF7
 18738                           tblptrl	equ	0xFF6
 18739                           tablat	equ	0xFF5
 18740                           prodh	equ	0xFF4
 18741                           prodl	equ	0xFF3
 18742                           intcon	equ	0xFF2
 18743                           postinc0	equ	0xFEE
 18744                           wreg	equ	0xFE8
 18745                           indf1	equ	0xFE7
 18746                           postdec1	equ	0xFE5
 18747                           fsr1h	equ	0xFE2
 18748                           fsr1l	equ	0xFE1
 18749                           indf2	equ	0xFDF
 18750                           postinc2	equ	0xFDE
 18751                           postdec2	equ	0xFDD
 18752                           plusw2	equ	0xFDB
 18753                           fsr2h	equ	0xFDA
 18754                           fsr2l	equ	0xFD9
 18755                           status	equ	0xFD8
 18756                           
 18757 ;; *************** function _OpenTimer0 *****************
 18758 ;; Defined at:
 18759 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18760 ;; Parameters:    Size  Location     Type
 18761 ;;  config          1    wreg     unsigned char 
 18762 ;; Auto vars:     Size  Location     Type
 18763 ;;  config          1   13[COMRAM] unsigned char 
 18764 ;; Return value:  Size  Location     Type
 18765 ;;		None               void
 18766 ;; Registers used:
 18767 ;;		wreg, status,2, status,0
 18768 ;; Tracked objects:
 18769 ;;		On entry : F/1
 18770 ;;		On exit  : F/1
 18771 ;;		Unchanged: F/0
 18772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18773 ;;      Params:         0       0       0       0       0       0       0
 18774 ;;      Locals:         1       0       0       0       0       0       0
 18775 ;;      Temps:          0       0       0       0       0       0       0
 18776 ;;      Totals:         1       0       0       0       0       0       0
 18777 ;;Total ram usage:        1 bytes
 18778 ;; Hardware stack levels used:    1
 18779 ;; Hardware stack levels required when called:    2
 18780 ;; This function calls:
 18781 ;;		Nothing
 18782 ;; This function is called by:
 18783 ;;		_init
 18784 ;; This function uses a non-reentrant model
 18785 ;;
 18786                           
 18787                           	psect	text89
 18788  00530E                     __ptext89:
 18789                           	opt stack 0
 18790  00530E                     _OpenTimer0:
 18791                           	opt stack 26
 18792                           
 18793                           ; BSR set to: 1
 18794                           ;incstack = 0
 18795                           ;incstack = 0
 18796                           ;OpenTimer0@config stored from wreg
 18797  00530E  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18798                           
 18799                           ; BSR set to: 1
 18800  005312  500E               	movf	OpenTimer0@config,w,c
 18801  005314  0B7F               	andlw	127
 18802  005316  6ED5               	movwf	4053,c	;volatile
 18803                           
 18804                           ; BSR set to: 1
 18805  005318  6AD7               	clrf	4055,c	;volatile
 18806                           
 18807                           ; BSR set to: 1
 18808  00531A  6AD6               	clrf	4054,c	;volatile
 18809                           
 18810                           ; BSR set to: 1
 18811  00531C  94F2               	bcf	intcon,2,c	;volatile
 18812                           
 18813                           ; BSR set to: 1
 18814  00531E  AE0E               	btfss	OpenTimer0@config,7,c
 18815  005320  D002               	goto	l1315
 18816                           
 18817                           ; BSR set to: 1
 18818  005322  8AF2               	bsf	intcon,5,c	;volatile
 18819  005324  D001               	goto	l1316
 18820  005326                     l1315:
 18821                           
 18822                           ; BSR set to: 1
 18823  005326  9AF2               	bcf	intcon,5,c	;volatile
 18824  005328                     l1316:
 18825                           
 18826                           ; BSR set to: 1
 18827  005328  8ED5               	bsf	4053,7,c	;volatile
 18828                           
 18829                           ; BSR set to: 1
 18830  00532A  0012               	return	
 18831  00532C                     __end_of_OpenTimer0:
 18832                           	opt stack 0
 18833                           tblptru	equ	0xFF8
 18834                           tblptrh	equ	0xFF7
 18835                           tblptrl	equ	0xFF6
 18836                           tablat	equ	0xFF5
 18837                           prodh	equ	0xFF4
 18838                           prodl	equ	0xFF3
 18839                           intcon	equ	0xFF2
 18840                           postinc0	equ	0xFEE
 18841                           wreg	equ	0xFE8
 18842                           indf1	equ	0xFE7
 18843                           postdec1	equ	0xFE5
 18844                           fsr1h	equ	0xFE2
 18845                           fsr1l	equ	0xFE1
 18846                           indf2	equ	0xFDF
 18847                           postinc2	equ	0xFDE
 18848                           postdec2	equ	0xFDD
 18849                           plusw2	equ	0xFDB
 18850                           fsr2h	equ	0xFDA
 18851                           fsr2l	equ	0xFD9
 18852                           status	equ	0xFD8
 18853                           
 18854 ;; *************** function _init_app_ram *****************
 18855 ;; Defined at:
 18856 ;;		line 985 in file "../main.c"
 18857 ;; Parameters:    Size  Location     Type
 18858 ;;		None
 18859 ;; Auto vars:     Size  Location     Type
 18860 ;;  i               1   32[COMRAM] unsigned char 
 18861 ;; Return value:  Size  Location     Type
 18862 ;;		None               void
 18863 ;; Registers used:
 18864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18865 ;; Tracked objects:
 18866 ;;		On entry : 0/1
 18867 ;;		On exit  : F/1
 18868 ;;		Unchanged: 0/0
 18869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18870 ;;      Params:         0       0       0       0       0       0       0
 18871 ;;      Locals:         1       0       0       0       0       0       0
 18872 ;;      Temps:          0       0       0       0       0       0       0
 18873 ;;      Totals:         1       0       0       0       0       0       0
 18874 ;;Total ram usage:        1 bytes
 18875 ;; Hardware stack levels used:    1
 18876 ;; Hardware stack levels required when called:    4
 18877 ;; This function calls:
 18878 ;;		_writeCoeffs2Ram
 18879 ;; This function is called by:
 18880 ;;		_init
 18881 ;;		_vscp_restoreDefaults
 18882 ;; This function uses a non-reentrant model
 18883 ;;
 18884                           
 18885                           	psect	text90
 18886  004EAE                     __ptext90:
 18887                           	opt stack 0
 18888  004EAE                     _init_app_ram:
 18889                           	opt stack 22
 18890                           
 18891                           ;main.c: 986: char i;
 18892                           ;main.c: 988: measurement_clock = 0;
 18893                           
 18894                           ; BSR set to: 1
 18895                           ;incstack = 0
 18896                           ;incstack = 0
 18897  004EAE  0101               	movlb	1	; () banked
 18898  004EB0  6B12               	clrf	_measurement_clock& (0+255),b
 18899  004EB2  6B13               	clrf	(_measurement_clock+1)& (0+255),b
 18900  004EB4  6B14               	clrf	(_measurement_clock+2)& (0+255),b
 18901  004EB6  6B15               	clrf	(_measurement_clock+3)& (0+255),b
 18902                           
 18903                           ;main.c: 989: seconds = 0;
 18904  004EB8  0100               	movlb	0	; () banked
 18905  004EBA  6BB6               	clrf	_seconds& (0+255),b
 18906                           
 18907                           ;main.c: 992: for (i = 0; i < 6; i++) {
 18908  004EBC  6A21               	clrf	init_app_ram@i,c
 18909  004EBE                     l10526:
 18910                           
 18911                           ;main.c: 993: seconds_temp[i] = 0;
 18912  004EBE  0E0C               	movlw	low _seconds_temp
 18913  004EC0  2421               	addwf	init_app_ram@i,w,c
 18914  004EC2  6ED9               	movwf	fsr2l,c
 18915  004EC4  6ADA               	clrf	fsr2h,c
 18916  004EC6  0E01               	movlw	high _seconds_temp
 18917  004EC8  22DA               	addwfc	fsr2h,f,c
 18918  004ECA  6ADF               	clrf	indf2,c
 18919                           
 18920                           ; BSR set to: 1
 18921                           ;main.c: 994: current_temp[i] = 0;
 18922  004ECC  5021               	movf	init_app_ram@i,w,c
 18923  004ECE  0D02               	mullw	2
 18924  004ED0  0E00               	movlw	low _current_temp
 18925  004ED2  24F3               	addwf	prodl,w,c
 18926  004ED4  6ED9               	movwf	fsr2l,c
 18927  004ED6  0E01               	movlw	high _current_temp
 18928  004ED8  20F4               	addwfc	prodh,w,c
 18929  004EDA  6EDA               	movwf	fsr2h,c
 18930  004EDC  6ADE               	clrf	postinc2,c
 18931  004EDE  6ADD               	clrf	postdec2,c
 18932                           
 18933                           ; BSR set to: 1
 18934  004EE0  2A21               	incf	init_app_ram@i,f,c
 18935                           
 18936                           ; BSR set to: 1
 18937  004EE2  0E05               	movlw	5
 18938  004EE4  6421               	cpfsgt	init_app_ram@i,c
 18939  004EE6  D7EB               	goto	l10526
 18940                           
 18941                           ; BSR set to: 1
 18942                           ;main.c: 995: }
 18943                           ;main.c: 998: adc_conversion_flags = 0;
 18944  004EE8  0100               	movlb	0	; () banked
 18945  004EEA  6BB3               	clrf	_adc_conversion_flags& (0+255),b
 18946                           
 18947                           ;main.c: 1001: adc_series_counter = 0;
 18948  004EEC  6A49               	clrf	_adc_series_counter,c
 18949                           
 18950                           ;main.c: 1004: low_alarm = 0;
 18951  004EEE  6BB5               	clrf	_low_alarm& (0+255),b
 18952                           
 18953                           ;main.c: 1007: high_alarm = 0;
 18954  004EF0  6BB4               	clrf	_high_alarm& (0+255),b
 18955                           
 18956                           ; BSR set to: 0
 18957                           ;main.c: 1010: writeCoeffs2Ram();
 18958  004EF2  EF7C  F023         	goto	_writeCoeffs2Ram	;wreg free
 18959  004EF6                     __end_of_init_app_ram:
 18960                           	opt stack 0
 18961                           tblptru	equ	0xFF8
 18962                           tblptrh	equ	0xFF7
 18963                           tblptrl	equ	0xFF6
 18964                           tablat	equ	0xFF5
 18965                           prodh	equ	0xFF4
 18966                           prodl	equ	0xFF3
 18967                           intcon	equ	0xFF2
 18968                           postinc0	equ	0xFEE
 18969                           wreg	equ	0xFE8
 18970                           indf1	equ	0xFE7
 18971                           postdec1	equ	0xFE5
 18972                           fsr1h	equ	0xFE2
 18973                           fsr1l	equ	0xFE1
 18974                           indf2	equ	0xFDF
 18975                           postinc2	equ	0xFDE
 18976                           postdec2	equ	0xFDD
 18977                           plusw2	equ	0xFDB
 18978                           fsr2h	equ	0xFDA
 18979                           fsr2l	equ	0xFD9
 18980                           status	equ	0xFD8
 18981                           
 18982 ;; *************** function _writeCoeffs2Ram *****************
 18983 ;; Defined at:
 18984 ;;		line 967 in file "../main.c"
 18985 ;; Parameters:    Size  Location     Type
 18986 ;;		None
 18987 ;; Auto vars:     Size  Location     Type
 18988 ;;  c               3   25[COMRAM] unsigned char [3]
 18989 ;;  j               2   30[COMRAM] int 
 18990 ;;  i               2   28[COMRAM] int 
 18991 ;; Return value:  Size  Location     Type
 18992 ;;		None               void
 18993 ;; Registers used:
 18994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18995 ;; Tracked objects:
 18996 ;;		On entry : 0/0
 18997 ;;		On exit  : F/1
 18998 ;;		Unchanged: 0/0
 18999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19000 ;;      Params:         0       0       0       0       0       0       0
 19001 ;;      Locals:         7       0       0       0       0       0       0
 19002 ;;      Temps:          2       0       0       0       0       0       0
 19003 ;;      Totals:         9       0       0       0       0       0       0
 19004 ;;Total ram usage:        9 bytes
 19005 ;; Hardware stack levels used:    1
 19006 ;; Hardware stack levels required when called:    3
 19007 ;; This function calls:
 19008 ;;		_readEEPROM
 19009 ;;		___wmul
 19010 ;; This function is called by:
 19011 ;;		_init_app_ram
 19012 ;;		_vscp_writeAppReg
 19013 ;; This function uses a non-reentrant model
 19014 ;;
 19015                           
 19016                           	psect	text91
 19017  0046F8                     __ptext91:
 19018                           	opt stack 0
 19019  0046F8                     _writeCoeffs2Ram:
 19020                           	opt stack 22
 19021                           
 19022                           ;main.c: 968: int i, j;
 19023                           ;main.c: 969: uint8_t c[3];
 19024                           ;main.c: 971: for (i = 0; i < 6; i++) {
 19025                           
 19026                           ; BSR set to: 1
 19027                           ;incstack = 0
 19028                           ;incstack = 0
 19029  0046F8  6A1D               	clrf	writeCoeffs2Ram@i,c
 19030  0046FA  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 19031  0046FC                     l10542:
 19032                           
 19033                           ;main.c: 972: for (j = 2; j > 0; j--) {
 19034  0046FC  6A20               	clrf	writeCoeffs2Ram@j+1,c
 19035  0046FE  0E02               	movlw	2
 19036  004700  6E1F               	movwf	writeCoeffs2Ram@j,c
 19037  004702                     l10548:
 19038                           
 19039                           ;main.c: 974: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 19040  004702  501F               	movf	writeCoeffs2Ram@j,w,c
 19041  004704  0802               	sublw	2
 19042  004706  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 19043  004708  5018               	movf	??_writeCoeffs2Ram,w,c
 19044  00470A  0F1A               	addlw	low writeCoeffs2Ram@c
 19045  00470C  6ED9               	movwf	fsr2l,c
 19046  00470E  6ADA               	clrf	fsr2h,c
 19047  004710  C01D  F012         	movff	writeCoeffs2Ram@i,?___wmul
 19048  004714  C01E  F013         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 19049  004718  6A15               	clrf	?___wmul+3,c
 19050  00471A  0E03               	movlw	3
 19051  00471C  6E14               	movwf	?___wmul+2,c
 19052  00471E  EC4C  F028         	call	___wmul	;wreg free
 19053  004722  501F               	movf	writeCoeffs2Ram@j,w,c
 19054  004724  2612               	addwf	?___wmul,f,c
 19055  004726  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19056  004728  2213               	addwfc	?___wmul+1,f,c
 19057  00472A  0EAA               	movlw	170
 19058  00472C  2412               	addwf	?___wmul,w,c
 19059  00472E  6E0E               	movwf	?_readEEPROM,c
 19060  004730  0E00               	movlw	0
 19061  004732  2013               	addwfc	?___wmul+1,w,c
 19062  004734  6E0F               	movwf	?_readEEPROM+1,c
 19063  004736  EC1C  F02A         	call	_readEEPROM	;wreg free
 19064  00473A  6EDF               	movwf	indf2,c
 19065  00473C  061F               	decf	writeCoeffs2Ram@j,f,c
 19066  00473E  A0D8               	btfss	status,0,c
 19067  004740  0620               	decf	writeCoeffs2Ram@j+1,f,c
 19068  004742  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19069  004744  0A80               	xorlw	128
 19070  004746  0F80               	addlw	-128
 19071  004748  0E01               	movlw	1
 19072  00474A  B4D8               	btfsc	status,2,c
 19073  00474C  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 19074  00474E  E2D9               	bc	l10548
 19075                           
 19076                           ;main.c: 975: }
 19077                           ;main.c: 976: sh_coefficients[i] = *((double*) c);
 19078  004750  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 19079  004754  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 19080  004758  90D8               	bcf	status,0,c
 19081  00475A  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19082  00475C  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19083  00475E  90D8               	bcf	status,0,c
 19084  004760  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19085  004762  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19086  004764  0101               	movlb	1	; () banked
 19087  004766  0E23               	movlw	low _sh_coefficients
 19088  004768  2418               	addwf	??_writeCoeffs2Ram,w,c
 19089  00476A  6ED9               	movwf	fsr2l,c
 19090  00476C  0E01               	movlw	high _sh_coefficients
 19091  00476E  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 19092  004770  6EDA               	movwf	fsr2h,c
 19093  004772  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 19094  004776  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 19095  00477A  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 19096  00477E  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 19097                           
 19098                           ; BSR set to: 1
 19099  004782  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 19100  004784  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 19101                           
 19102                           ; BSR set to: 1
 19103  004786  501E               	movf	writeCoeffs2Ram@i+1,w,c
 19104  004788  0A80               	xorlw	128
 19105  00478A  0F80               	addlw	-128
 19106  00478C  0E06               	movlw	6
 19107  00478E  B4D8               	btfsc	status,2,c
 19108  004790  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 19109  004792  B0D8               	btfsc	status,0,c
 19110                           
 19111                           ; BSR set to: 1
 19112  004794  0012               	return	
 19113  004796  D7B2               	goto	l10542
 19114  004798                     __end_of_writeCoeffs2Ram:
 19115                           	opt stack 0
 19116                           tblptru	equ	0xFF8
 19117                           tblptrh	equ	0xFF7
 19118                           tblptrl	equ	0xFF6
 19119                           tablat	equ	0xFF5
 19120                           prodh	equ	0xFF4
 19121                           prodl	equ	0xFF3
 19122                           intcon	equ	0xFF2
 19123                           postinc0	equ	0xFEE
 19124                           wreg	equ	0xFE8
 19125                           indf1	equ	0xFE7
 19126                           postdec1	equ	0xFE5
 19127                           fsr1h	equ	0xFE2
 19128                           fsr1l	equ	0xFE1
 19129                           indf2	equ	0xFDF
 19130                           postinc2	equ	0xFDE
 19131                           postdec2	equ	0xFDD
 19132                           plusw2	equ	0xFDB
 19133                           fsr2h	equ	0xFDA
 19134                           fsr2l	equ	0xFD9
 19135                           status	equ	0xFD8
 19136                           
 19137 ;; *************** function ___wmul *****************
 19138 ;; Defined at:
 19139 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 19140 ;; Parameters:    Size  Location     Type
 19141 ;;  multiplier      2   17[COMRAM] unsigned int 
 19142 ;;  multiplicand    2   19[COMRAM] unsigned int 
 19143 ;; Auto vars:     Size  Location     Type
 19144 ;;  product         2   21[COMRAM] unsigned int 
 19145 ;; Return value:  Size  Location     Type
 19146 ;;                  2   17[COMRAM] unsigned int 
 19147 ;; Registers used:
 19148 ;;		wreg, status,2, status,0, prodl, prodh
 19149 ;; Tracked objects:
 19150 ;;		On entry : 0/1
 19151 ;;		On exit  : 0/0
 19152 ;;		Unchanged: 0/0
 19153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19154 ;;      Params:         4       0       0       0       0       0       0
 19155 ;;      Locals:         2       0       0       0       0       0       0
 19156 ;;      Temps:          0       0       0       0       0       0       0
 19157 ;;      Totals:         6       0       0       0       0       0       0
 19158 ;;Total ram usage:        6 bytes
 19159 ;; Hardware stack levels used:    1
 19160 ;; Hardware stack levels required when called:    2
 19161 ;; This function calls:
 19162 ;;		Nothing
 19163 ;; This function is called by:
 19164 ;;		_doWork
 19165 ;;		_writeCoeffs2Ram
 19166 ;; This function uses a non-reentrant model
 19167 ;;
 19168                           
 19169                           	psect	text92
 19170  005098                     __ptext92:
 19171                           	opt stack 0
 19172  005098                     ___wmul:
 19173                           	opt stack 26
 19174                           
 19175                           ; BSR set to: 1
 19176                           ;incstack = 0
 19177                           ;incstack = 0
 19178  005098  5012               	movf	___wmul@multiplier,w,c
 19179  00509A  0214               	mulwf	___wmul@multiplicand,c
 19180  00509C  CFF3 F016          	movff	prodl,___wmul@product
 19181  0050A0  CFF4 F017          	movff	prodh,___wmul@product+1
 19182  0050A4  5012               	movf	___wmul@multiplier,w,c
 19183  0050A6  0215               	mulwf	___wmul@multiplicand+1,c
 19184  0050A8  D808               	call	PL64	;call to abstracted procedure
 19185  0050AA  5013               	movf	___wmul@multiplier+1,w,c
 19186  0050AC  0214               	mulwf	___wmul@multiplicand,c
 19187  0050AE  D805               	call	PL64	;call to abstracted procedure
 19188  0050B0  C016  F012         	movff	___wmul@product,?___wmul
 19189  0050B4  C017  F013         	movff	___wmul@product+1,?___wmul+1
 19190  0050B8  0012               	return	
 19191  0050BA                     __end_of___wmul:
 19192                           	opt stack 0
 19193  0050BA                     PL64:
 19194                           	opt stack 26
 19195  0050BA  CFF3 FFF4          	movff	prodl,prodh
 19196  0050BE  6AF3               	clrf	prodl,c
 19197  0050C0  50F3               	movf	prodl,w,c
 19198  0050C2  2616               	addwf	___wmul@product,f,c
 19199  0050C4  50F4               	movf	prodh,w,c
 19200  0050C6  2217               	addwfc	___wmul@product+1,f,c
 19201  0050C8  0012               	return	
 19202  0050CA                     __end_ofPL64:
 19203                           	opt stack 0
 19204                           tblptru	equ	0xFF8
 19205                           tblptrh	equ	0xFF7
 19206                           tblptrl	equ	0xFF6
 19207                           tablat	equ	0xFF5
 19208                           prodh	equ	0xFF4
 19209                           prodl	equ	0xFF3
 19210                           intcon	equ	0xFF2
 19211                           postinc0	equ	0xFEE
 19212                           wreg	equ	0xFE8
 19213                           indf1	equ	0xFE7
 19214                           postdec1	equ	0xFE5
 19215                           fsr1h	equ	0xFE2
 19216                           fsr1l	equ	0xFE1
 19217                           indf2	equ	0xFDF
 19218                           postinc2	equ	0xFDE
 19219                           postdec2	equ	0xFDD
 19220                           plusw2	equ	0xFDB
 19221                           fsr2h	equ	0xFDA
 19222                           fsr2l	equ	0xFD9
 19223                           status	equ	0xFD8
 19224                           
 19225 ;; *************** function _ConvertADC *****************
 19226 ;; Defined at:
 19227 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19228 ;; Parameters:    Size  Location     Type
 19229 ;;		None
 19230 ;; Auto vars:     Size  Location     Type
 19231 ;;		None
 19232 ;; Return value:  Size  Location     Type
 19233 ;;		None               void
 19234 ;; Registers used:
 19235 ;;		None
 19236 ;; Tracked objects:
 19237 ;;		On entry : 1/1
 19238 ;;		On exit  : 1/1
 19239 ;;		Unchanged: 1/0
 19240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19241 ;;      Params:         0       0       0       0       0       0       0
 19242 ;;      Locals:         0       0       0       0       0       0       0
 19243 ;;      Temps:          0       0       0       0       0       0       0
 19244 ;;      Totals:         0       0       0       0       0       0       0
 19245 ;;Total ram usage:        0 bytes
 19246 ;; Hardware stack levels used:    1
 19247 ;; Hardware stack levels required when called:    2
 19248 ;; This function calls:
 19249 ;;		Nothing
 19250 ;; This function is called by:
 19251 ;;		_init
 19252 ;; This function uses a non-reentrant model
 19253 ;;
 19254                           
 19255                           	psect	text93
 19256  0054C8                     __ptext93:
 19257                           	opt stack 0
 19258  0054C8                     _ConvertADC:
 19259                           	opt stack 26
 19260                           
 19261                           ;incstack = 0
 19262                           ;incstack = 0
 19263  0054C8  82C2               	bsf	4034,1,c	;volatile
 19264  0054CA  0012               	return	
 19265  0054CC                     __end_of_ConvertADC:
 19266                           	opt stack 0
 19267                           tblptru	equ	0xFF8
 19268                           tblptrh	equ	0xFF7
 19269                           tblptrl	equ	0xFF6
 19270                           tablat	equ	0xFF5
 19271                           prodh	equ	0xFF4
 19272                           prodl	equ	0xFF3
 19273                           intcon	equ	0xFF2
 19274                           postinc0	equ	0xFEE
 19275                           wreg	equ	0xFE8
 19276                           indf1	equ	0xFE7
 19277                           postdec1	equ	0xFE5
 19278                           fsr1h	equ	0xFE2
 19279                           fsr1l	equ	0xFE1
 19280                           indf2	equ	0xFDF
 19281                           postinc2	equ	0xFDE
 19282                           postdec2	equ	0xFDD
 19283                           plusw2	equ	0xFDB
 19284                           fsr2h	equ	0xFDA
 19285                           fsr2l	equ	0xFD9
 19286                           status	equ	0xFD8
 19287                           
 19288 ;; *************** function _WriteTimer0 *****************
 19289 ;; Defined at:
 19290 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19291 ;; Parameters:    Size  Location     Type
 19292 ;;  timer0          2   13[COMRAM] unsigned int 
 19293 ;; Auto vars:     Size  Location     Type
 19294 ;;  timer           2   15[COMRAM] struct Timers
 19295 ;; Return value:  Size  Location     Type
 19296 ;;		None               void
 19297 ;; Registers used:
 19298 ;;		None
 19299 ;; Tracked objects:
 19300 ;;		On entry : F/1
 19301 ;;		On exit  : F/1
 19302 ;;		Unchanged: F/0
 19303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19304 ;;      Params:         2       0       0       0       0       0       0
 19305 ;;      Locals:         2       0       0       0       0       0       0
 19306 ;;      Temps:          0       0       0       0       0       0       0
 19307 ;;      Totals:         4       0       0       0       0       0       0
 19308 ;;Total ram usage:        4 bytes
 19309 ;; Hardware stack levels used:    1
 19310 ;; Hardware stack levels required when called:    2
 19311 ;; This function calls:
 19312 ;;		Nothing
 19313 ;; This function is called by:
 19314 ;;		_init
 19315 ;; This function uses a non-reentrant model
 19316 ;;
 19317                           
 19318                           	psect	text94
 19319  00545C                     __ptext94:
 19320                           	opt stack 0
 19321  00545C                     _WriteTimer0:
 19322                           	opt stack 26
 19323                           
 19324                           ; BSR set to: 1
 19325                           
 19326                           ;incstack = 0
 19327                           ;incstack = 0
 19328  00545C  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19329  005460  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19330  005464  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19331  005468  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19332                           
 19333                           ; BSR set to: 1
 19334  00546C  0012               	return	
 19335  00546E                     __end_of_WriteTimer0:
 19336                           	opt stack 0
 19337                           tblptru	equ	0xFF8
 19338                           tblptrh	equ	0xFF7
 19339                           tblptrl	equ	0xFF6
 19340                           tablat	equ	0xFF5
 19341                           prodh	equ	0xFF4
 19342                           prodl	equ	0xFF3
 19343                           intcon	equ	0xFF2
 19344                           postinc0	equ	0xFEE
 19345                           wreg	equ	0xFE8
 19346                           indf1	equ	0xFE7
 19347                           postdec1	equ	0xFE5
 19348                           fsr1h	equ	0xFE2
 19349                           fsr1l	equ	0xFE1
 19350                           indf2	equ	0xFDF
 19351                           postinc2	equ	0xFDE
 19352                           postdec2	equ	0xFDD
 19353                           plusw2	equ	0xFDB
 19354                           fsr2h	equ	0xFDA
 19355                           fsr2l	equ	0xFD9
 19356                           status	equ	0xFD8
 19357                           
 19358 ;; *************** function ___awtofl *****************
 19359 ;; Defined at:
 19360 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19361 ;; Parameters:    Size  Location     Type
 19362 ;;  c               2   23[COMRAM] int 
 19363 ;; Auto vars:     Size  Location     Type
 19364 ;;  f1              4    0        int 
 19365 ;;  sign            1   29[COMRAM] unsigned char 
 19366 ;; Return value:  Size  Location     Type
 19367 ;;                  4   23[COMRAM] unsigned char 
 19368 ;; Registers used:
 19369 ;;		wreg, status,2, status,0, cstack
 19370 ;; Tracked objects:
 19371 ;;		On entry : F/0
 19372 ;;		On exit  : 0/0
 19373 ;;		Unchanged: 0/0
 19374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19375 ;;      Params:         4       0       0       0       0       0       0
 19376 ;;      Locals:         3       0       0       0       0       0       0
 19377 ;;      Temps:          0       0       0       0       0       0       0
 19378 ;;      Totals:         7       0       0       0       0       0       0
 19379 ;;Total ram usage:        7 bytes
 19380 ;; Hardware stack levels used:    1
 19381 ;; Hardware stack levels required when called:    3
 19382 ;; This function calls:
 19383 ;;		___flpack
 19384 ;; This function is called by:
 19385 ;;		_setEventData
 19386 ;;		_exp
 19387 ;;		_log
 19388 ;; This function uses a non-reentrant model
 19389 ;;
 19390                           
 19391                           	psect	text95
 19392  00502A                     __ptext95:
 19393                           	opt stack 0
 19394  00502A                     ___awtofl:
 19395                           	opt stack 24
 19396                           
 19397                           ; BSR set to: 0
 19398                           
 19399                           ; BSR set to: 1
 19400                           ;incstack = 0
 19401                           ;incstack = 0
 19402  00502A  6A1E               	clrf	___awtofl@sign,c
 19403  00502C  AE19               	btfss	___awtofl@c+1,7,c
 19404  00502E  D005               	goto	l11696
 19405                           
 19406                           ; BSR set to: 0
 19407  005030  6C18               	negf	___awtofl@c,c
 19408  005032  1E19               	comf	___awtofl@c+1,f,c
 19409  005034  B0D8               	btfsc	status,0,c
 19410  005036  2A19               	incf	___awtofl@c+1,f,c
 19411  005038  2A1E               	incf	___awtofl@sign,f,c
 19412  00503A                     l11696:
 19413                           
 19414                           ; BSR set to: 0
 19415  00503A  C018  F00E         	movff	___awtofl@c,?___flpack
 19416  00503E  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19417  005042  6A10               	clrf	?___flpack+2,c
 19418  005044  6A11               	clrf	?___flpack+3,c
 19419  005046  0E96               	movlw	150
 19420  005048  6E12               	movwf	?___flpack+4,c
 19421  00504A  C01E  F013         	movff	___awtofl@sign,?___flpack+5
 19422  00504E  EC6D  F021         	call	___flpack	;wreg free
 19423  005052  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19424  005056  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19425  00505A  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19426  00505E  C00E  F018         	movff	?___flpack,?___awtofl
 19427  005062  0012               	return	
 19428  005064                     __end_of___awtofl:
 19429                           	opt stack 0
 19430                           tblptru	equ	0xFF8
 19431                           tblptrh	equ	0xFF7
 19432                           tblptrl	equ	0xFF6
 19433                           tablat	equ	0xFF5
 19434                           prodh	equ	0xFF4
 19435                           prodl	equ	0xFF3
 19436                           intcon	equ	0xFF2
 19437                           postinc0	equ	0xFEE
 19438                           wreg	equ	0xFE8
 19439                           indf1	equ	0xFE7
 19440                           postdec1	equ	0xFE5
 19441                           fsr1h	equ	0xFE2
 19442                           fsr1l	equ	0xFE1
 19443                           indf2	equ	0xFDF
 19444                           postinc2	equ	0xFDE
 19445                           postdec2	equ	0xFDD
 19446                           plusw2	equ	0xFDB
 19447                           fsr2h	equ	0xFDA
 19448                           fsr2l	equ	0xFD9
 19449                           status	equ	0xFD8
 19450                           
 19451 ;; *************** function ___flmul *****************
 19452 ;; Defined at:
 19453 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19454 ;; Parameters:    Size  Location     Type
 19455 ;;  f1              4    0[BANK0 ] unsigned char 
 19456 ;;  f2              4    4[BANK0 ] unsigned char 
 19457 ;; Auto vars:     Size  Location     Type
 19458 ;;  f3_as_produc    4   16[BANK0 ] unsigned long 
 19459 ;;  sign            1   21[BANK0 ] unsigned char 
 19460 ;;  cntr            1   20[BANK0 ] unsigned char 
 19461 ;;  exp             1   15[BANK0 ] unsigned char 
 19462 ;; Return value:  Size  Location     Type
 19463 ;;                  4    0[BANK0 ] unsigned char 
 19464 ;; Registers used:
 19465 ;;		wreg, status,2, status,0, cstack
 19466 ;; Tracked objects:
 19467 ;;		On entry : 0/0
 19468 ;;		On exit  : 0/0
 19469 ;;		Unchanged: 0/0
 19470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19471 ;;      Params:         0       8       0       0       0       0       0
 19472 ;;      Locals:         0      14       0       0       0       0       0
 19473 ;;      Temps:          0       0       0       0       0       0       0
 19474 ;;      Totals:         0      22       0       0       0       0       0
 19475 ;;Total ram usage:       22 bytes
 19476 ;; Hardware stack levels used:    1
 19477 ;; Hardware stack levels required when called:    3
 19478 ;; This function calls:
 19479 ;;		___flpack
 19480 ;; This function is called by:
 19481 ;;		_doWork
 19482 ;;		_Celsius2Fahrenheit
 19483 ;;		___asflmul
 19484 ;;		_log
 19485 ;;		_eval_poly
 19486 ;; This function uses a non-reentrant model
 19487 ;;
 19488                           
 19489                           	psect	text96
 19490  004094                     __ptext96:
 19491                           	opt stack 0
 19492  004094                     ___flmul:
 19493                           	opt stack 25
 19494                           
 19495                           ;incstack = 0
 19496                           ;incstack = 0
 19497  004094  0100               	movlb	0	; () banked
 19498  004096  3562               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19499  004098  3563               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19500  00409A  6F6F               	movwf	___flmul@exp& (0+255),b
 19501  00409C  676F               	tstfsz	___flmul@exp& (0+255),b
 19502  00409E  D001               	goto	l11640
 19503  0040A0  D006               	goto	u10070
 19504  0040A2                     l11640:
 19505                           
 19506                           ; BSR set to: 0
 19507  0040A2  0100               	movlb	0	; () banked
 19508  0040A4  3566               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19509  0040A6  3567               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19510  0040A8  6F75               	movwf	___flmul@sign& (0+255),b
 19511  0040AA  6775               	tstfsz	___flmul@sign& (0+255),b
 19512  0040AC  D005               	goto	l11644
 19513  0040AE                     u10070:
 19514                           
 19515                           ; BSR set to: 0
 19516  0040AE  6B60               	clrf	?___flmul& (0+255),b
 19517  0040B0  6B61               	clrf	(?___flmul+1)& (0+255),b
 19518  0040B2  6B62               	clrf	(?___flmul+2)& (0+255),b
 19519  0040B4  6B63               	clrf	(?___flmul+3)& (0+255),b
 19520  0040B6  D041               	goto	l1636
 19521  0040B8                     l11644:
 19522                           
 19523                           ; BSR set to: 0
 19524  0040B8  5175               	movf	___flmul@sign& (0+255),w,b
 19525  0040BA  0F7B               	addlw	123
 19526  0040BC  276F               	addwf	___flmul@exp& (0+255),f,b
 19527                           
 19528                           ; BSR set to: 0
 19529  0040BE  C063  F075         	movff	___flmul@f1+3,___flmul@sign
 19530  0040C2  0100               	movlb	0	; () banked
 19531  0040C4  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19532  0040C6  1B75               	xorwf	___flmul@sign& (0+255),f,b
 19533  0040C8  0E80               	movlw	128
 19534  0040CA  1775               	andwf	___flmul@sign& (0+255),f,b
 19535                           
 19536                           ; BSR set to: 0
 19537  0040CC  8F62               	bsf	(___flmul@f1+2)& (0+255),7,b
 19538                           
 19539                           ; BSR set to: 0
 19540  0040CE  8F66               	bsf	(___flmul@f2+2)& (0+255),7,b
 19541  0040D0  6B67               	clrf	(___flmul@f2+3)& (0+255),b
 19542                           
 19543                           ; BSR set to: 0
 19544  0040D2  6B70               	clrf	___flmul@f3_as_product& (0+255),b
 19545  0040D4  6B71               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 19546  0040D6  6B72               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 19547  0040D8  6B73               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 19548                           
 19549                           ; BSR set to: 0
 19550  0040DA  0E07               	movlw	7
 19551  0040DC  6F74               	movwf	___flmul@cntr& (0+255),b
 19552  0040DE                     l11656:
 19553                           
 19554                           ; BSR set to: 0
 19555  0040DE  A160               	btfss	___flmul@f1& (0+255),0,b
 19556  0040E0  D002               	goto	l11660
 19557                           
 19558                           ; BSR set to: 0
 19559  0040E2  5164               	movf	___flmul@f2& (0+255),w,b
 19560  0040E4  D82B               	call	PL68	;call to abstracted procedure
 19561  0040E6                     l11660:
 19562                           
 19563                           ; BSR set to: 0
 19564                           
 19565                           ; BSR set to: 0
 19566  0040E6  D832               	call	PL72	;call to abstracted procedure
 19567  0040E8  3764               	rlcf	___flmul@f2& (0+255),f,b
 19568  0040EA  3765               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19569  0040EC  3766               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19570  0040EE  3767               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19571                           
 19572                           ; BSR set to: 0
 19573  0040F0  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19574  0040F2  D7F5               	goto	l11656
 19575                           
 19576                           ; BSR set to: 0
 19577  0040F4  0E11               	movlw	17
 19578  0040F6  6F74               	movwf	___flmul@cntr& (0+255),b
 19579  0040F8                     l11668:
 19580                           
 19581                           ; BSR set to: 0
 19582  0040F8  A160               	btfss	___flmul@f1& (0+255),0,b
 19583  0040FA  D002               	goto	l11672
 19584                           
 19585                           ; BSR set to: 0
 19586  0040FC  5164               	movf	___flmul@f2& (0+255),w,b
 19587  0040FE  D81E               	call	PL68	;call to abstracted procedure
 19588  004100                     l11672:
 19589                           
 19590                           ; BSR set to: 0
 19591                           
 19592                           ; BSR set to: 0
 19593  004100  D825               	call	PL72	;call to abstracted procedure
 19594  004102  3373               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19595  004104  3372               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19596  004106  3371               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19597  004108  3370               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19598                           
 19599                           ; BSR set to: 0
 19600  00410A  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19601  00410C  D7F5               	goto	l11668
 19602                           
 19603                           ; BSR set to: 0
 19604  00410E  C070  F00E         	movff	___flmul@f3_as_product,?___flpack
 19605  004112  C071  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19606  004116  C072  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19607  00411A  C073  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19608  00411E  C06F  F012         	movff	___flmul@exp,?___flpack+4
 19609  004122  C075  F013         	movff	___flmul@sign,?___flpack+5
 19610  004126  EC6D  F021         	call	___flpack	;wreg free
 19611  00412A  C011  F063         	movff	?___flpack+3,?___flmul+3
 19612  00412E  C010  F062         	movff	?___flpack+2,?___flmul+2
 19613  004132  C00F  F061         	movff	?___flpack+1,?___flmul+1
 19614  004136  C00E  F060         	movff	?___flpack,?___flmul
 19615  00413A                     l1636:
 19616  00413A  0012               	return	
 19617  00413C                     __end_of___flmul:
 19618                           	opt stack 0
 19619  00413C                     PL68:
 19620                           	opt stack 25
 19621  00413C  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19622  00413E  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19623  004140  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19624  004142  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19625  004144  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19626  004146  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19627  004148  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19628  00414A  0012               	return	
 19629  00414C                     __end_ofPL68:
 19630                           	opt stack 0
 19631  00414C                     PL72:
 19632                           	opt stack 25
 19633  00414C  90D8               	bcf	status,0,c
 19634  00414E  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19635  004150  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19636  004152  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19637  004154  3360               	rrcf	___flmul@f1& (0+255),f,b
 19638  004156  90D8               	bcf	status,0,c
 19639  004158  0012               	return	
 19640  00415A                     __end_ofPL72:
 19641                           	opt stack 0
 19642                           tblptru	equ	0xFF8
 19643                           tblptrh	equ	0xFF7
 19644                           tblptrl	equ	0xFF6
 19645                           tablat	equ	0xFF5
 19646                           prodh	equ	0xFF4
 19647                           prodl	equ	0xFF3
 19648                           intcon	equ	0xFF2
 19649                           postinc0	equ	0xFEE
 19650                           wreg	equ	0xFE8
 19651                           indf1	equ	0xFE7
 19652                           postdec1	equ	0xFE5
 19653                           fsr1h	equ	0xFE2
 19654                           fsr1l	equ	0xFE1
 19655                           indf2	equ	0xFDF
 19656                           postinc2	equ	0xFDE
 19657                           postdec2	equ	0xFDD
 19658                           plusw2	equ	0xFDB
 19659                           fsr2h	equ	0xFDA
 19660                           fsr2l	equ	0xFD9
 19661                           status	equ	0xFD8
 19662                           
 19663 ;; *************** function ___flpack *****************
 19664 ;; Defined at:
 19665 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19666 ;; Parameters:    Size  Location     Type
 19667 ;;  arg             4   13[COMRAM] unsigned long 
 19668 ;;  exp             1   17[COMRAM] unsigned char 
 19669 ;;  sign            1   18[COMRAM] unsigned char 
 19670 ;; Auto vars:     Size  Location     Type
 19671 ;;		None
 19672 ;; Return value:  Size  Location     Type
 19673 ;;                  4   13[COMRAM] unsigned char 
 19674 ;; Registers used:
 19675 ;;		wreg, status,2, status,0
 19676 ;; Tracked objects:
 19677 ;;		On entry : 0/0
 19678 ;;		On exit  : 0/0
 19679 ;;		Unchanged: 0/0
 19680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19681 ;;      Params:         6       0       0       0       0       0       0
 19682 ;;      Locals:         0       0       0       0       0       0       0
 19683 ;;      Temps:          4       0       0       0       0       0       0
 19684 ;;      Totals:        10       0       0       0       0       0       0
 19685 ;;Total ram usage:       10 bytes
 19686 ;; Hardware stack levels used:    1
 19687 ;; Hardware stack levels required when called:    2
 19688 ;; This function calls:
 19689 ;;		Nothing
 19690 ;; This function is called by:
 19691 ;;		___altofl
 19692 ;;		___awtofl
 19693 ;;		___fladd
 19694 ;;		___fldiv
 19695 ;;		___flmul
 19696 ;;		___lwtofl
 19697 ;; This function uses a non-reentrant model
 19698 ;;
 19699                           
 19700                           	psect	text97
 19701  0042DA                     __ptext97:
 19702                           	opt stack 0
 19703  0042DA                     ___flpack:
 19704                           	opt stack 25
 19705                           
 19706                           ;incstack = 0
 19707                           ;incstack = 0
 19708  0042DA  5012               	movf	___flpack@exp,w,c
 19709  0042DC  E005               	bz	l1551
 19710  0042DE  5011               	movf	___flpack@arg+3,w,c
 19711  0042E0  100E               	iorwf	___flpack@arg,w,c
 19712  0042E2  100F               	iorwf	___flpack@arg+1,w,c
 19713  0042E4  1010               	iorwf	___flpack@arg+2,w,c
 19714  0042E6  E107               	bnz	l11446
 19715  0042E8                     l1551:
 19716  0042E8  6A0E               	clrf	?___flpack,c
 19717  0042EA  6A0F               	clrf	?___flpack+1,c
 19718  0042EC  6A10               	clrf	?___flpack+2,c
 19719  0042EE  6A11               	clrf	?___flpack+3,c
 19720  0042F0  D04B               	goto	l1552
 19721  0042F2                     l11444:
 19722  0042F2  2A12               	incf	___flpack@exp,f,c
 19723  0042F4  D84A               	call	PL86	;call to abstracted procedure
 19724  0042F6                     l11446:
 19725  0042F6  6A14               	clrf	??___flpack& (0+255),c
 19726  0042F8  6A15               	clrf	(??___flpack+1)& (0+255),c
 19727  0042FA  6A16               	clrf	(??___flpack+2)& (0+255),c
 19728  0042FC  0EFE               	movlw	254
 19729  0042FE  1411               	andwf	___flpack@arg+3,w,c
 19730  004300  6E17               	movwf	(??___flpack+3)& (0+255),c
 19731  004302  5017               	movf	??___flpack+3,w,c
 19732  004304  1014               	iorwf	??___flpack,w,c
 19733  004306  1015               	iorwf	??___flpack+1,w,c
 19734  004308  1016               	iorwf	??___flpack+2,w,c
 19735  00430A  E008               	bz	l1556
 19736  00430C  D7F2               	goto	l11444
 19737  00430E                     l11448:
 19738  00430E  2A12               	incf	___flpack@exp,f,c
 19739  004310  2A0E               	incf	___flpack@arg,f,c
 19740  004312  0E00               	movlw	0
 19741  004314  220F               	addwfc	___flpack@arg+1,f,c
 19742  004316  2210               	addwfc	___flpack@arg+2,f,c
 19743  004318  2211               	addwfc	___flpack@arg+3,f,c
 19744  00431A  D837               	call	PL86	;call to abstracted procedure
 19745  00431C                     l1556:
 19746  00431C  6A14               	clrf	??___flpack& (0+255),c
 19747  00431E  6A15               	clrf	(??___flpack+1)& (0+255),c
 19748  004320  6A16               	clrf	(??___flpack+2)& (0+255),c
 19749  004322  5011               	movf	___flpack@arg+3,w,c
 19750  004324  6E17               	movwf	(??___flpack+3)& (0+255),c
 19751  004326  5017               	movf	??___flpack+3,w,c
 19752  004328  1014               	iorwf	??___flpack,w,c
 19753  00432A  1015               	iorwf	??___flpack+1,w,c
 19754  00432C  1016               	iorwf	??___flpack+2,w,c
 19755  00432E  E007               	bz	l11456
 19756  004330  D7EE               	goto	l11448
 19757  004332                     l11454:
 19758  004332  0612               	decf	___flpack@exp,f,c
 19759  004334  90D8               	bcf	status,0,c
 19760  004336  360E               	rlcf	___flpack@arg,f,c
 19761  004338  360F               	rlcf	___flpack@arg+1,f,c
 19762  00433A  3610               	rlcf	___flpack@arg+2,f,c
 19763  00433C  3611               	rlcf	___flpack@arg+3,f,c
 19764  00433E                     l11456:
 19765  00433E  AE10               	btfss	___flpack@arg+2,7,c
 19766  004340  D7F8               	goto	l11454
 19767  004342  B012               	btfsc	___flpack@exp,0,c
 19768  004344  D002               	goto	l1562
 19769  004346  0E7F               	movlw	127
 19770  004348  1610               	andwf	___flpack@arg+2,f,c
 19771  00434A                     l1562:
 19772  00434A  90D8               	bcf	status,0,c
 19773  00434C  3212               	rrcf	___flpack@exp,f,c
 19774  00434E  C012  F014         	movff	___flpack@exp,??___flpack
 19775  004352  6A15               	clrf	(??___flpack+1)& (0+255),c
 19776  004354  6A16               	clrf	(??___flpack+2)& (0+255),c
 19777  004356  6A17               	clrf	(??___flpack+3)& (0+255),c
 19778  004358  C014  F017         	movff	??___flpack,??___flpack+3
 19779  00435C  6A16               	clrf	??___flpack+2,c
 19780  00435E  6A15               	clrf	??___flpack+1,c
 19781  004360  6A14               	clrf	??___flpack,c
 19782  004362  5014               	movf	??___flpack,w,c
 19783  004364  120E               	iorwf	___flpack@arg,f,c
 19784  004366  5015               	movf	??___flpack+1,w,c
 19785  004368  120F               	iorwf	___flpack@arg+1,f,c
 19786  00436A  5016               	movf	??___flpack+2,w,c
 19787  00436C  1210               	iorwf	___flpack@arg+2,f,c
 19788  00436E  5017               	movf	??___flpack+3,w,c
 19789  004370  1211               	iorwf	___flpack@arg+3,f,c
 19790  004372  5013               	movf	___flpack@sign,w,c
 19791  004374  A4D8               	btfss	status,2,c
 19792  004376  8E11               	bsf	___flpack@arg+3,7,c
 19793  004378  C00E  F00E         	movff	___flpack@arg,?___flpack
 19794  00437C  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19795  004380  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19796  004384  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19797  004388                     l1552:
 19798  004388  0012               	return	
 19799  00438A                     __end_of___flpack:
 19800                           	opt stack 0
 19801  00438A                     PL86:
 19802                           	opt stack 25
 19803  00438A  90D8               	bcf	status,0,c
 19804  00438C  3211               	rrcf	___flpack@arg+3,f,c
 19805  00438E  3210               	rrcf	___flpack@arg+2,f,c
 19806  004390  320F               	rrcf	___flpack@arg+1,f,c
 19807  004392  320E               	rrcf	___flpack@arg,f,c
 19808  004394  0012               	return	
 19809  004396                     __end_ofPL86:
 19810                           	opt stack 0
 19811                           tblptru	equ	0xFF8
 19812                           tblptrh	equ	0xFF7
 19813                           tblptrl	equ	0xFF6
 19814                           tablat	equ	0xFF5
 19815                           prodh	equ	0xFF4
 19816                           prodl	equ	0xFF3
 19817                           intcon	equ	0xFF2
 19818                           postinc0	equ	0xFEE
 19819                           wreg	equ	0xFE8
 19820                           indf1	equ	0xFE7
 19821                           postdec1	equ	0xFE5
 19822                           fsr1h	equ	0xFE2
 19823                           fsr1l	equ	0xFE1
 19824                           indf2	equ	0xFDF
 19825                           postinc2	equ	0xFDE
 19826                           postdec2	equ	0xFDD
 19827                           plusw2	equ	0xFDB
 19828                           fsr2h	equ	0xFDA
 19829                           fsr2l	equ	0xFD9
 19830                           status	equ	0xFD8
 19831                           
 19832 ;; *************** function _vscp_readAppReg *****************
 19833 ;; Defined at:
 19834 ;;		line 1274 in file "../main.c"
 19835 ;; Parameters:    Size  Location     Type
 19836 ;;  reg             1    wreg     unsigned char 
 19837 ;; Auto vars:     Size  Location     Type
 19838 ;;  reg             1   18[COMRAM] unsigned char 
 19839 ;;  pos             1   17[COMRAM] unsigned char 
 19840 ;;  rv              1   19[COMRAM] unsigned char 
 19841 ;; Return value:  Size  Location     Type
 19842 ;;                  1    wreg      unsigned char 
 19843 ;; Registers used:
 19844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19845 ;; Tracked objects:
 19846 ;;		On entry : F/0
 19847 ;;		On exit  : 0/0
 19848 ;;		Unchanged: 0/0
 19849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19850 ;;      Params:         0       0       0       0       0       0       0
 19851 ;;      Locals:         3       0       0       0       0       0       0
 19852 ;;      Temps:          0       0       0       0       0       0       0
 19853 ;;      Totals:         3       0       0       0       0       0       0
 19854 ;;Total ram usage:        3 bytes
 19855 ;; Hardware stack levels used:    1
 19856 ;; Hardware stack levels required when called:    3
 19857 ;; This function calls:
 19858 ;;		_readEEPROM
 19859 ;; This function is called by:
 19860 ;;		_vscp_readRegister
 19861 ;;		_vscp_handleProtocolEvent
 19862 ;; This function uses a non-reentrant model
 19863 ;;
 19864                           
 19865                           	psect	text98
 19866  001C10                     __ptext98:
 19867                           	opt stack 0
 19868  001C10                     _vscp_readAppReg:
 19869                           	opt stack 24
 19870                           
 19871                           ;incstack = 0
 19872                           ;incstack = 0
 19873                           ;vscp_readAppReg@reg stored from wreg
 19874  001C10  CFE8 F013          	movff	wreg,vscp_readAppReg@reg
 19875                           
 19876                           ; BSR set to: 0
 19877                           ;main.c: 1275: uint8_t rv;
 19878                           ;main.c: 1280: if (0 == vscp_page_select) {
 19879  001C14  5047               	movf	_vscp_page_select+1,w,c
 19880  001C16  1046               	iorwf	_vscp_page_select,w,c
 19881  001C18  E101 D219          	bz	l10766
 19882  001C1C  D35D               	goto	l10768
 19883  001C1E                     l10564:
 19884                           
 19885                           ; BSR set to: 0
 19886                           ;main.c: 1286: rv = readEEPROM(0x41);
 19887  001C1E  6A0F               	clrf	?_readEEPROM+1,c
 19888  001C20  0E41               	movlw	65
 19889  001C22  6E0E               	movwf	?_readEEPROM,c
 19890  001C24  EC1C  F02A         	call	_readEEPROM	;wreg free
 19891  001C28  D384               	goto	L41
 19892  001C2A                     l10566:
 19893                           
 19894                           ; BSR set to: 0
 19895                           ;main.c: 1291: rv = readEEPROM(0x42);
 19896  001C2A  6A0F               	clrf	?_readEEPROM+1,c
 19897  001C2C  0E42               	movlw	66
 19898  001C2E  6E0E               	movwf	?_readEEPROM,c
 19899  001C30  EC1C  F02A         	call	_readEEPROM	;wreg free
 19900  001C34  D37E               	goto	L41
 19901  001C36                     l10568:
 19902                           
 19903                           ; BSR set to: 0
 19904                           ;main.c: 1296: rv = readEEPROM(0x43);
 19905  001C36  6A0F               	clrf	?_readEEPROM+1,c
 19906  001C38  0E43               	movlw	67
 19907  001C3A  6E0E               	movwf	?_readEEPROM,c
 19908  001C3C  EC1C  F02A         	call	_readEEPROM	;wreg free
 19909  001C40  D378               	goto	L41
 19910  001C42                     l10570:
 19911                           
 19912                           ; BSR set to: 0
 19913                           ;main.c: 1301: rv = readEEPROM(0x44);
 19914  001C42  6A0F               	clrf	?_readEEPROM+1,c
 19915  001C44  0E44               	movlw	68
 19916  001C46  6E0E               	movwf	?_readEEPROM,c
 19917  001C48  EC1C  F02A         	call	_readEEPROM	;wreg free
 19918  001C4C  D372               	goto	L41
 19919  001C4E                     l10572:
 19920                           
 19921                           ; BSR set to: 0
 19922                           ;main.c: 1306: rv = readEEPROM(0x45);
 19923  001C4E  6A0F               	clrf	?_readEEPROM+1,c
 19924  001C50  0E45               	movlw	69
 19925  001C52  6E0E               	movwf	?_readEEPROM,c
 19926  001C54  EC1C  F02A         	call	_readEEPROM	;wreg free
 19927  001C58  D36C               	goto	L41
 19928  001C5A                     l10574:
 19929                           
 19930                           ; BSR set to: 0
 19931                           ;main.c: 1311: rv = readEEPROM(0x46);
 19932  001C5A  6A0F               	clrf	?_readEEPROM+1,c
 19933  001C5C  0E46               	movlw	70
 19934  001C5E  6E0E               	movwf	?_readEEPROM,c
 19935  001C60  EC1C  F02A         	call	_readEEPROM	;wreg free
 19936  001C64  D366               	goto	L41
 19937  001C66                     l10576:
 19938                           
 19939                           ; BSR set to: 0
 19940                           ;main.c: 1316: rv = readEEPROM(0x47);
 19941  001C66  6A0F               	clrf	?_readEEPROM+1,c
 19942  001C68  0E47               	movlw	71
 19943  001C6A  6E0E               	movwf	?_readEEPROM,c
 19944  001C6C  EC1C  F02A         	call	_readEEPROM	;wreg free
 19945  001C70  D360               	goto	L41
 19946  001C72                     l10578:
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;main.c: 1321: rv = readEEPROM(0x48);
 19950  001C72  6A0F               	clrf	?_readEEPROM+1,c
 19951  001C74  0E48               	movlw	72
 19952  001C76  6E0E               	movwf	?_readEEPROM,c
 19953  001C78  EC1C  F02A         	call	_readEEPROM	;wreg free
 19954  001C7C  D35A               	goto	L41
 19955  001C7E                     l10580:
 19956                           
 19957                           ; BSR set to: 0
 19958                           ;main.c: 1326: rv = ((current_temp[0] & 0xff00) >> 8);
 19959  001C7E  0101               	movlb	1	; () banked
 19960  001C80  5101               	movf	(_current_temp+1)& (0+255),w,b
 19961  001C82  D357               	goto	L41
 19962  001C84                     l315:
 19963                           
 19964                           ; BSR set to: 0
 19965                           ;main.c: 1331: rv = (current_temp[0] & 0x00ff);
 19966  001C84  C100  F014         	movff	_current_temp,vscp_readAppReg@rv
 19967                           
 19968                           ;main.c: 1332: break;
 19969  001C88  D355               	goto	l10790
 19970  001C8A                     l10582:
 19971                           
 19972                           ; BSR set to: 0
 19973                           ;main.c: 1336: rv = ((current_temp[1] & 0xff00) >> 8);
 19974  001C8A  0101               	movlb	1	; () banked
 19975  001C8C  5103               	movf	(_current_temp+3)& (0+255),w,b
 19976  001C8E  D351               	goto	L41
 19977  001C90                     l317:
 19978                           
 19979                           ; BSR set to: 0
 19980                           ;main.c: 1341: rv = (current_temp[1] & 0x00ff);
 19981  001C90  C102  F014         	movff	_current_temp+2,vscp_readAppReg@rv
 19982                           
 19983                           ;main.c: 1342: break;
 19984  001C94  D34F               	goto	l10790
 19985  001C96                     l10584:
 19986                           
 19987                           ; BSR set to: 0
 19988                           ;main.c: 1346: rv = ((current_temp[2] & 0xff00) >> 8);
 19989  001C96  0101               	movlb	1	; () banked
 19990  001C98  5105               	movf	(_current_temp+5)& (0+255),w,b
 19991  001C9A  D34B               	goto	L41
 19992  001C9C                     l319:
 19993                           
 19994                           ; BSR set to: 0
 19995                           ;main.c: 1351: rv = (current_temp[2] & 0x00ff);
 19996  001C9C  C104  F014         	movff	_current_temp+4,vscp_readAppReg@rv
 19997                           
 19998                           ;main.c: 1352: break;
 19999  001CA0  D349               	goto	l10790
 20000  001CA2                     l10586:
 20001                           
 20002                           ; BSR set to: 0
 20003                           ;main.c: 1356: rv = ((current_temp[3] & 0xff00) >> 8);
 20004  001CA2  0101               	movlb	1	; () banked
 20005  001CA4  5107               	movf	(_current_temp+7)& (0+255),w,b
 20006  001CA6  D345               	goto	L41
 20007  001CA8                     l321:
 20008                           
 20009                           ; BSR set to: 0
 20010                           ;main.c: 1361: rv = (current_temp[3] & 0x00ff);
 20011  001CA8  C106  F014         	movff	_current_temp+6,vscp_readAppReg@rv
 20012                           
 20013                           ;main.c: 1362: break;
 20014  001CAC  D343               	goto	l10790
 20015  001CAE                     l10588:
 20016                           
 20017                           ; BSR set to: 0
 20018                           ;main.c: 1366: rv = ((current_temp[4] & 0xff00) >> 8);
 20019  001CAE  0101               	movlb	1	; () banked
 20020  001CB0  5109               	movf	(_current_temp+9)& (0+255),w,b
 20021  001CB2  D33F               	goto	L41
 20022  001CB4                     l323:
 20023                           
 20024                           ; BSR set to: 0
 20025                           ;main.c: 1371: rv = (current_temp[4] & 0x00ff);
 20026  001CB4  C108  F014         	movff	_current_temp+8,vscp_readAppReg@rv
 20027                           
 20028                           ;main.c: 1372: break;
 20029  001CB8  D33D               	goto	l10790
 20030  001CBA                     l10592:
 20031                           
 20032                           ; BSR set to: 0
 20033                           ;main.c: 1386: rv = readEEPROM(0x49);
 20034  001CBA  6A0F               	clrf	?_readEEPROM+1,c
 20035  001CBC  0E49               	movlw	73
 20036  001CBE  6E0E               	movwf	?_readEEPROM,c
 20037  001CC0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20038  001CC4  D336               	goto	L41
 20039  001CC6                     l10594:
 20040                           
 20041                           ; BSR set to: 0
 20042                           ;main.c: 1391: rv = readEEPROM(0x4A);
 20043  001CC6  6A0F               	clrf	?_readEEPROM+1,c
 20044  001CC8  0E4A               	movlw	74
 20045  001CCA  6E0E               	movwf	?_readEEPROM,c
 20046  001CCC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20047  001CD0  D330               	goto	L41
 20048  001CD2                     l10596:
 20049                           
 20050                           ; BSR set to: 0
 20051                           ;main.c: 1396: rv = readEEPROM(0x4B);
 20052  001CD2  6A0F               	clrf	?_readEEPROM+1,c
 20053  001CD4  0E4B               	movlw	75
 20054  001CD6  6E0E               	movwf	?_readEEPROM,c
 20055  001CD8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20056  001CDC  D32A               	goto	L41
 20057  001CDE                     l10598:
 20058                           
 20059                           ; BSR set to: 0
 20060                           ;main.c: 1401: rv = readEEPROM(0x4C);
 20061  001CDE  6A0F               	clrf	?_readEEPROM+1,c
 20062  001CE0  0E4C               	movlw	76
 20063  001CE2  6E0E               	movwf	?_readEEPROM,c
 20064  001CE4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20065  001CE8  D324               	goto	L41
 20066  001CEA                     l10600:
 20067                           
 20068                           ; BSR set to: 0
 20069                           ;main.c: 1406: rv = readEEPROM(0x4D);
 20070  001CEA  6A0F               	clrf	?_readEEPROM+1,c
 20071  001CEC  0E4D               	movlw	77
 20072  001CEE  6E0E               	movwf	?_readEEPROM,c
 20073  001CF0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20074  001CF4  D31E               	goto	L41
 20075  001CF6                     l10602:
 20076                           
 20077                           ; BSR set to: 0
 20078                           ;main.c: 1411: rv = readEEPROM(0x4E);
 20079  001CF6  6A0F               	clrf	?_readEEPROM+1,c
 20080  001CF8  0E4E               	movlw	78
 20081  001CFA  6E0E               	movwf	?_readEEPROM,c
 20082  001CFC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20083  001D00  D318               	goto	L41
 20084  001D02                     l10604:
 20085                           
 20086                           ; BSR set to: 0
 20087                           ;main.c: 1418: rv = readEEPROM(0x4F);
 20088  001D02  6A0F               	clrf	?_readEEPROM+1,c
 20089  001D04  0E4F               	movlw	79
 20090  001D06  6E0E               	movwf	?_readEEPROM,c
 20091  001D08  EC1C  F02A         	call	_readEEPROM	;wreg free
 20092  001D0C  D312               	goto	L41
 20093  001D0E                     l10606:
 20094                           
 20095                           ; BSR set to: 0
 20096                           ;main.c: 1423: rv = readEEPROM(0x50);
 20097  001D0E  6A0F               	clrf	?_readEEPROM+1,c
 20098  001D10  0E50               	movlw	80
 20099  001D12  6E0E               	movwf	?_readEEPROM,c
 20100  001D14  EC1C  F02A         	call	_readEEPROM	;wreg free
 20101  001D18  D30C               	goto	L41
 20102  001D1A                     l10608:
 20103                           
 20104                           ; BSR set to: 0
 20105                           ;main.c: 1428: rv = readEEPROM(0x51);
 20106  001D1A  6A0F               	clrf	?_readEEPROM+1,c
 20107  001D1C  0E51               	movlw	81
 20108  001D1E  6E0E               	movwf	?_readEEPROM,c
 20109  001D20  EC1C  F02A         	call	_readEEPROM	;wreg free
 20110  001D24  D306               	goto	L41
 20111  001D26                     l10610:
 20112                           
 20113                           ; BSR set to: 0
 20114                           ;main.c: 1433: rv = readEEPROM(0x52);
 20115  001D26  6A0F               	clrf	?_readEEPROM+1,c
 20116  001D28  0E52               	movlw	82
 20117  001D2A  6E0E               	movwf	?_readEEPROM,c
 20118  001D2C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20119  001D30  D300               	goto	L41
 20120  001D32                     l10612:
 20121                           
 20122                           ; BSR set to: 0
 20123                           ;main.c: 1438: rv = readEEPROM(0x53);
 20124  001D32  6A0F               	clrf	?_readEEPROM+1,c
 20125  001D34  0E53               	movlw	83
 20126  001D36  6E0E               	movwf	?_readEEPROM,c
 20127  001D38  EC1C  F02A         	call	_readEEPROM	;wreg free
 20128  001D3C  D2FA               	goto	L41
 20129  001D3E                     l10614:
 20130                           
 20131                           ; BSR set to: 0
 20132                           ;main.c: 1443: rv = readEEPROM(0x54);
 20133  001D3E  6A0F               	clrf	?_readEEPROM+1,c
 20134  001D40  0E54               	movlw	84
 20135  001D42  6E0E               	movwf	?_readEEPROM,c
 20136  001D44  EC1C  F02A         	call	_readEEPROM	;wreg free
 20137  001D48  D2F4               	goto	L41
 20138  001D4A                     l10616:
 20139                           
 20140                           ; BSR set to: 0
 20141                           ;main.c: 1448: rv = readEEPROM(0x55);
 20142  001D4A  6A0F               	clrf	?_readEEPROM+1,c
 20143  001D4C  0E55               	movlw	85
 20144  001D4E  6E0E               	movwf	?_readEEPROM,c
 20145  001D50  EC1C  F02A         	call	_readEEPROM	;wreg free
 20146  001D54  D2EE               	goto	L41
 20147  001D56                     l10618:
 20148                           
 20149                           ; BSR set to: 0
 20150                           ;main.c: 1453: rv = readEEPROM(0x56);
 20151  001D56  6A0F               	clrf	?_readEEPROM+1,c
 20152  001D58  0E56               	movlw	86
 20153  001D5A  6E0E               	movwf	?_readEEPROM,c
 20154  001D5C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20155  001D60  D2E8               	goto	L41
 20156  001D62                     l10620:
 20157                           
 20158                           ; BSR set to: 0
 20159                           ;main.c: 1458: rv = readEEPROM(0x57);
 20160  001D62  6A0F               	clrf	?_readEEPROM+1,c
 20161  001D64  0E57               	movlw	87
 20162  001D66  6E0E               	movwf	?_readEEPROM,c
 20163  001D68  EC1C  F02A         	call	_readEEPROM	;wreg free
 20164  001D6C  D2E2               	goto	L41
 20165  001D6E                     l10622:
 20166                           
 20167                           ; BSR set to: 0
 20168                           ;main.c: 1463: rv = readEEPROM(0x58);
 20169  001D6E  6A0F               	clrf	?_readEEPROM+1,c
 20170  001D70  0E58               	movlw	88
 20171  001D72  6E0E               	movwf	?_readEEPROM,c
 20172  001D74  EC1C  F02A         	call	_readEEPROM	;wreg free
 20173  001D78  D2DC               	goto	L41
 20174  001D7A                     l10624:
 20175                           
 20176                           ; BSR set to: 0
 20177                           ;main.c: 1468: rv = readEEPROM(0x59);
 20178  001D7A  6A0F               	clrf	?_readEEPROM+1,c
 20179  001D7C  0E59               	movlw	89
 20180  001D7E  6E0E               	movwf	?_readEEPROM,c
 20181  001D80  EC1C  F02A         	call	_readEEPROM	;wreg free
 20182  001D84  D2D6               	goto	L41
 20183  001D86                     l10626:
 20184                           
 20185                           ; BSR set to: 0
 20186                           ;main.c: 1473: rv = readEEPROM(0x5A);
 20187  001D86  6A0F               	clrf	?_readEEPROM+1,c
 20188  001D88  0E5A               	movlw	90
 20189  001D8A  6E0E               	movwf	?_readEEPROM,c
 20190  001D8C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20191  001D90  D2D0               	goto	L41
 20192  001D92                     l10628:
 20193                           
 20194                           ; BSR set to: 0
 20195                           ;main.c: 1482: rv = readEEPROM(0x5B);
 20196  001D92  6A0F               	clrf	?_readEEPROM+1,c
 20197  001D94  0E5B               	movlw	91
 20198  001D96  6E0E               	movwf	?_readEEPROM,c
 20199  001D98  EC1C  F02A         	call	_readEEPROM	;wreg free
 20200  001D9C  D2CA               	goto	L41
 20201  001D9E                     l10630:
 20202                           
 20203                           ; BSR set to: 0
 20204                           ;main.c: 1487: rv = readEEPROM(0x5C);
 20205  001D9E  6A0F               	clrf	?_readEEPROM+1,c
 20206  001DA0  0E5C               	movlw	92
 20207  001DA2  6E0E               	movwf	?_readEEPROM,c
 20208  001DA4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20209  001DA8  D2C4               	goto	L41
 20210  001DAA                     l10632:
 20211                           
 20212                           ; BSR set to: 0
 20213                           ;main.c: 1492: rv = readEEPROM(0x5D);
 20214  001DAA  6A0F               	clrf	?_readEEPROM+1,c
 20215  001DAC  0E5D               	movlw	93
 20216  001DAE  6E0E               	movwf	?_readEEPROM,c
 20217  001DB0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20218  001DB4  D2BE               	goto	L41
 20219  001DB6                     l10634:
 20220                           
 20221                           ; BSR set to: 0
 20222                           ;main.c: 1497: rv = readEEPROM(0x5E);
 20223  001DB6  6A0F               	clrf	?_readEEPROM+1,c
 20224  001DB8  0E5E               	movlw	94
 20225  001DBA  6E0E               	movwf	?_readEEPROM,c
 20226  001DBC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20227  001DC0  D2B8               	goto	L41
 20228  001DC2                     l10636:
 20229                           
 20230                           ; BSR set to: 0
 20231                           ;main.c: 1502: rv = readEEPROM(0x5F);
 20232  001DC2  6A0F               	clrf	?_readEEPROM+1,c
 20233  001DC4  0E5F               	movlw	95
 20234  001DC6  6E0E               	movwf	?_readEEPROM,c
 20235  001DC8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20236  001DCC  D2B2               	goto	L41
 20237  001DCE                     l10638:
 20238                           
 20239                           ; BSR set to: 0
 20240                           ;main.c: 1507: rv = readEEPROM(0x60);
 20241  001DCE  6A0F               	clrf	?_readEEPROM+1,c
 20242  001DD0  0E60               	movlw	96
 20243  001DD2  6E0E               	movwf	?_readEEPROM,c
 20244  001DD4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20245  001DD8  D2AC               	goto	L41
 20246  001DDA                     l10640:
 20247                           
 20248                           ; BSR set to: 0
 20249                           ;main.c: 1512: rv = readEEPROM(0x61);
 20250  001DDA  6A0F               	clrf	?_readEEPROM+1,c
 20251  001DDC  0E61               	movlw	97
 20252  001DDE  6E0E               	movwf	?_readEEPROM,c
 20253  001DE0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20254  001DE4  D2A6               	goto	L41
 20255  001DE6                     l10642:
 20256                           
 20257                           ; BSR set to: 0
 20258                           ;main.c: 1517: rv = readEEPROM(0x62);
 20259  001DE6  6A0F               	clrf	?_readEEPROM+1,c
 20260  001DE8  0E62               	movlw	98
 20261  001DEA  6E0E               	movwf	?_readEEPROM,c
 20262  001DEC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20263  001DF0  D2A0               	goto	L41
 20264  001DF2                     l10644:
 20265                           
 20266                           ; BSR set to: 0
 20267                           ;main.c: 1522: rv = readEEPROM(0x63);
 20268  001DF2  6A0F               	clrf	?_readEEPROM+1,c
 20269  001DF4  0E63               	movlw	99
 20270  001DF6  6E0E               	movwf	?_readEEPROM,c
 20271  001DF8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20272  001DFC  D29A               	goto	L41
 20273  001DFE                     l10646:
 20274                           
 20275                           ; BSR set to: 0
 20276                           ;main.c: 1527: rv = readEEPROM(0x64);
 20277  001DFE  6A0F               	clrf	?_readEEPROM+1,c
 20278  001E00  0E64               	movlw	100
 20279  001E02  6E0E               	movwf	?_readEEPROM,c
 20280  001E04  EC1C  F02A         	call	_readEEPROM	;wreg free
 20281  001E08  D294               	goto	L41
 20282  001E0A                     l10648:
 20283                           
 20284                           ; BSR set to: 0
 20285                           ;main.c: 1532: rv = readEEPROM(0x65);
 20286  001E0A  6A0F               	clrf	?_readEEPROM+1,c
 20287  001E0C  0E65               	movlw	101
 20288  001E0E  6E0E               	movwf	?_readEEPROM,c
 20289  001E10  EC1C  F02A         	call	_readEEPROM	;wreg free
 20290  001E14  D28E               	goto	L41
 20291  001E16                     l10650:
 20292                           
 20293                           ; BSR set to: 0
 20294                           ;main.c: 1537: rv = readEEPROM(0x66);
 20295  001E16  6A0F               	clrf	?_readEEPROM+1,c
 20296  001E18  0E66               	movlw	102
 20297  001E1A  6E0E               	movwf	?_readEEPROM,c
 20298  001E1C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20299  001E20  D288               	goto	L41
 20300  001E22                     l10652:
 20301                           
 20302                           ; BSR set to: 0
 20303                           ;main.c: 1547: rv = readEEPROM(0x67);
 20304  001E22  6A0F               	clrf	?_readEEPROM+1,c
 20305  001E24  0E67               	movlw	103
 20306  001E26  6E0E               	movwf	?_readEEPROM,c
 20307  001E28  EC1C  F02A         	call	_readEEPROM	;wreg free
 20308  001E2C  D282               	goto	L41
 20309  001E2E                     l10654:
 20310                           
 20311                           ; BSR set to: 0
 20312                           ;main.c: 1552: rv = readEEPROM(0x68);
 20313  001E2E  6A0F               	clrf	?_readEEPROM+1,c
 20314  001E30  0E68               	movlw	104
 20315  001E32  6E0E               	movwf	?_readEEPROM,c
 20316  001E34  EC1C  F02A         	call	_readEEPROM	;wreg free
 20317  001E38  D27C               	goto	L41
 20318  001E3A                     l10656:
 20319                           
 20320                           ; BSR set to: 0
 20321                           ;main.c: 1557: rv = readEEPROM(0x69);
 20322  001E3A  6A0F               	clrf	?_readEEPROM+1,c
 20323  001E3C  0E69               	movlw	105
 20324  001E3E  6E0E               	movwf	?_readEEPROM,c
 20325  001E40  EC1C  F02A         	call	_readEEPROM	;wreg free
 20326  001E44  D276               	goto	L41
 20327  001E46                     l10658:
 20328                           
 20329                           ; BSR set to: 0
 20330                           ;main.c: 1562: rv = readEEPROM(0x6A);
 20331  001E46  6A0F               	clrf	?_readEEPROM+1,c
 20332  001E48  0E6A               	movlw	106
 20333  001E4A  6E0E               	movwf	?_readEEPROM,c
 20334  001E4C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20335  001E50  D270               	goto	L41
 20336  001E52                     l10660:
 20337                           
 20338                           ; BSR set to: 0
 20339                           ;main.c: 1567: rv = readEEPROM(0x6B);
 20340  001E52  6A0F               	clrf	?_readEEPROM+1,c
 20341  001E54  0E6B               	movlw	107
 20342  001E56  6E0E               	movwf	?_readEEPROM,c
 20343  001E58  EC1C  F02A         	call	_readEEPROM	;wreg free
 20344  001E5C  D26A               	goto	L41
 20345  001E5E                     l10662:
 20346                           
 20347                           ; BSR set to: 0
 20348                           ;main.c: 1572: rv = readEEPROM(0x6C);
 20349  001E5E  6A0F               	clrf	?_readEEPROM+1,c
 20350  001E60  0E6C               	movlw	108
 20351  001E62  6E0E               	movwf	?_readEEPROM,c
 20352  001E64  EC1C  F02A         	call	_readEEPROM	;wreg free
 20353  001E68  D264               	goto	L41
 20354  001E6A                     l10664:
 20355                           
 20356                           ; BSR set to: 0
 20357                           ;main.c: 1577: rv = readEEPROM(0x6D);
 20358  001E6A  6A0F               	clrf	?_readEEPROM+1,c
 20359  001E6C  0E6D               	movlw	109
 20360  001E6E  6E0E               	movwf	?_readEEPROM,c
 20361  001E70  EC1C  F02A         	call	_readEEPROM	;wreg free
 20362  001E74  D25E               	goto	L41
 20363  001E76                     l10666:
 20364                           
 20365                           ; BSR set to: 0
 20366                           ;main.c: 1582: rv = readEEPROM(0x6E);
 20367  001E76  6A0F               	clrf	?_readEEPROM+1,c
 20368  001E78  0E6E               	movlw	110
 20369  001E7A  6E0E               	movwf	?_readEEPROM,c
 20370  001E7C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20371  001E80  D258               	goto	L41
 20372  001E82                     l10668:
 20373                           
 20374                           ; BSR set to: 0
 20375                           ;main.c: 1587: rv = readEEPROM(0x6F);
 20376  001E82  6A0F               	clrf	?_readEEPROM+1,c
 20377  001E84  0E6F               	movlw	111
 20378  001E86  6E0E               	movwf	?_readEEPROM,c
 20379  001E88  EC1C  F02A         	call	_readEEPROM	;wreg free
 20380  001E8C  D252               	goto	L41
 20381  001E8E                     l10670:
 20382                           
 20383                           ; BSR set to: 0
 20384                           ;main.c: 1592: rv = readEEPROM(0x70);
 20385  001E8E  6A0F               	clrf	?_readEEPROM+1,c
 20386  001E90  0E70               	movlw	112
 20387  001E92  6E0E               	movwf	?_readEEPROM,c
 20388  001E94  EC1C  F02A         	call	_readEEPROM	;wreg free
 20389  001E98  D24C               	goto	L41
 20390  001E9A                     l10672:
 20391                           
 20392                           ; BSR set to: 0
 20393                           ;main.c: 1597: rv = readEEPROM(0x71);
 20394  001E9A  6A0F               	clrf	?_readEEPROM+1,c
 20395  001E9C  0E71               	movlw	113
 20396  001E9E  6E0E               	movwf	?_readEEPROM,c
 20397  001EA0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20398  001EA4  D246               	goto	L41
 20399  001EA6                     l10674:
 20400                           
 20401                           ; BSR set to: 0
 20402                           ;main.c: 1602: rv = readEEPROM(0x72);
 20403  001EA6  6A0F               	clrf	?_readEEPROM+1,c
 20404  001EA8  0E72               	movlw	114
 20405  001EAA  6E0E               	movwf	?_readEEPROM,c
 20406  001EAC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20407  001EB0  D240               	goto	L41
 20408  001EB2                     l10676:
 20409                           
 20410                           ; BSR set to: 0
 20411                           ;main.c: 1611: rv = readEEPROM(0x73);
 20412  001EB2  6A0F               	clrf	?_readEEPROM+1,c
 20413  001EB4  0E73               	movlw	115
 20414  001EB6  6E0E               	movwf	?_readEEPROM,c
 20415  001EB8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20416  001EBC  D23A               	goto	L41
 20417  001EBE                     l10678:
 20418                           
 20419                           ; BSR set to: 0
 20420                           ;main.c: 1616: rv = readEEPROM(0x74);
 20421  001EBE  6A0F               	clrf	?_readEEPROM+1,c
 20422  001EC0  0E74               	movlw	116
 20423  001EC2  6E0E               	movwf	?_readEEPROM,c
 20424  001EC4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20425  001EC8  D234               	goto	L41
 20426  001ECA                     l10700:
 20427                           
 20428                           ; BSR set to: 0
 20429                           ;main.c: 1675: rv = readEEPROM(0x7F);
 20430  001ECA  6A0F               	clrf	?_readEEPROM+1,c
 20431  001ECC  0E7F               	movlw	127
 20432  001ECE  6E0E               	movwf	?_readEEPROM,c
 20433  001ED0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20434  001ED4  D22E               	goto	L41
 20435  001ED6                     l10702:
 20436                           
 20437                           ; BSR set to: 0
 20438                           ;main.c: 1680: rv = readEEPROM(0x80);
 20439  001ED6  6A0F               	clrf	?_readEEPROM+1,c
 20440  001ED8  0E80               	movlw	128
 20441  001EDA  6E0E               	movwf	?_readEEPROM,c
 20442  001EDC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20443  001EE0  D228               	goto	L41
 20444  001EE2                     l10704:
 20445                           
 20446                           ; BSR set to: 0
 20447                           ;main.c: 1685: rv = readEEPROM(0x81);
 20448  001EE2  6A0F               	clrf	?_readEEPROM+1,c
 20449  001EE4  0E81               	movlw	129
 20450  001EE6  6E0E               	movwf	?_readEEPROM,c
 20451  001EE8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20452  001EEC  D222               	goto	L41
 20453  001EEE                     l10706:
 20454                           
 20455                           ; BSR set to: 0
 20456                           ;main.c: 1690: rv = readEEPROM(0x82);
 20457  001EEE  6A0F               	clrf	?_readEEPROM+1,c
 20458  001EF0  0E82               	movlw	130
 20459  001EF2  6E0E               	movwf	?_readEEPROM,c
 20460  001EF4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20461  001EF8  D21C               	goto	L41
 20462  001EFA                     l10708:
 20463                           
 20464                           ; BSR set to: 0
 20465                           ;main.c: 1695: rv = readEEPROM(0x83);
 20466  001EFA  6A0F               	clrf	?_readEEPROM+1,c
 20467  001EFC  0E83               	movlw	131
 20468  001EFE  6E0E               	movwf	?_readEEPROM,c
 20469  001F00  EC1C  F02A         	call	_readEEPROM	;wreg free
 20470  001F04  D216               	goto	L41
 20471  001F06                     l10710:
 20472                           
 20473                           ; BSR set to: 0
 20474                           ;main.c: 1700: rv = readEEPROM(0x84);
 20475  001F06  6A0F               	clrf	?_readEEPROM+1,c
 20476  001F08  0E84               	movlw	132
 20477  001F0A  6E0E               	movwf	?_readEEPROM,c
 20478  001F0C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20479  001F10  D210               	goto	L41
 20480  001F12                     l10712:
 20481                           
 20482                           ; BSR set to: 0
 20483                           ;main.c: 1705: rv = readEEPROM(0x85);
 20484  001F12  6A0F               	clrf	?_readEEPROM+1,c
 20485  001F14  0E85               	movlw	133
 20486  001F16  6E0E               	movwf	?_readEEPROM,c
 20487  001F18  EC1C  F02A         	call	_readEEPROM	;wreg free
 20488  001F1C  D20A               	goto	L41
 20489  001F1E                     l10714:
 20490                           
 20491                           ; BSR set to: 0
 20492                           ;main.c: 1710: rv = readEEPROM(0x86);
 20493  001F1E  6A0F               	clrf	?_readEEPROM+1,c
 20494  001F20  0E86               	movlw	134
 20495  001F22  6E0E               	movwf	?_readEEPROM,c
 20496  001F24  EC1C  F02A         	call	_readEEPROM	;wreg free
 20497  001F28  D204               	goto	L41
 20498  001F2A                     l10716:
 20499                           
 20500                           ; BSR set to: 0
 20501                           ;main.c: 1715: rv = readEEPROM(0x87);
 20502  001F2A  6A0F               	clrf	?_readEEPROM+1,c
 20503  001F2C  0E87               	movlw	135
 20504  001F2E  6E0E               	movwf	?_readEEPROM,c
 20505  001F30  EC1C  F02A         	call	_readEEPROM	;wreg free
 20506  001F34  D1FE               	goto	L41
 20507  001F36                     l10718:
 20508                           
 20509                           ; BSR set to: 0
 20510                           ;main.c: 1720: rv = readEEPROM(0x88);
 20511  001F36  6A0F               	clrf	?_readEEPROM+1,c
 20512  001F38  0E88               	movlw	136
 20513  001F3A  6E0E               	movwf	?_readEEPROM,c
 20514  001F3C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20515  001F40  D1F8               	goto	L41
 20516  001F42                     l10720:
 20517                           
 20518                           ; BSR set to: 0
 20519                           ;main.c: 1725: rv = readEEPROM(0x89);
 20520  001F42  6A0F               	clrf	?_readEEPROM+1,c
 20521  001F44  0E89               	movlw	137
 20522  001F46  6E0E               	movwf	?_readEEPROM,c
 20523  001F48  EC1C  F02A         	call	_readEEPROM	;wreg free
 20524  001F4C  D1F2               	goto	L41
 20525  001F4E                     l10722:
 20526                           
 20527                           ; BSR set to: 0
 20528                           ;main.c: 1730: rv = readEEPROM(0x8A);
 20529  001F4E  6A0F               	clrf	?_readEEPROM+1,c
 20530  001F50  0E8A               	movlw	138
 20531  001F52  6E0E               	movwf	?_readEEPROM,c
 20532  001F54  EC1C  F02A         	call	_readEEPROM	;wreg free
 20533  001F58  D1EC               	goto	L41
 20534  001F5A                     l10724:
 20535                           
 20536                           ; BSR set to: 0
 20537                           ;main.c: 1739: rv = readEEPROM(0x8B);
 20538  001F5A  6A0F               	clrf	?_readEEPROM+1,c
 20539  001F5C  0E8B               	movlw	139
 20540  001F5E  6E0E               	movwf	?_readEEPROM,c
 20541  001F60  EC1C  F02A         	call	_readEEPROM	;wreg free
 20542  001F64  D1E6               	goto	L41
 20543  001F66                     l10726:
 20544                           
 20545                           ; BSR set to: 0
 20546                           ;main.c: 1744: rv = readEEPROM(0x8C);
 20547  001F66  6A0F               	clrf	?_readEEPROM+1,c
 20548  001F68  0E8C               	movlw	140
 20549  001F6A  6E0E               	movwf	?_readEEPROM,c
 20550  001F6C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20551  001F70  D1E0               	goto	L41
 20552  001F72                     l10728:
 20553                           
 20554                           ; BSR set to: 0
 20555                           ;main.c: 1749: rv = readEEPROM(0x8D);
 20556  001F72  6A0F               	clrf	?_readEEPROM+1,c
 20557  001F74  0E8D               	movlw	141
 20558  001F76  6E0E               	movwf	?_readEEPROM,c
 20559  001F78  EC1C  F02A         	call	_readEEPROM	;wreg free
 20560  001F7C  D1DA               	goto	L41
 20561  001F7E                     l10730:
 20562                           
 20563                           ; BSR set to: 0
 20564                           ;main.c: 1754: rv = readEEPROM(0x8E);
 20565  001F7E  6A0F               	clrf	?_readEEPROM+1,c
 20566  001F80  0E8E               	movlw	142
 20567  001F82  6E0E               	movwf	?_readEEPROM,c
 20568  001F84  EC1C  F02A         	call	_readEEPROM	;wreg free
 20569  001F88  D1D4               	goto	L41
 20570  001F8A                     l10732:
 20571                           
 20572                           ; BSR set to: 0
 20573                           ;main.c: 1759: rv = readEEPROM(0x8F);
 20574  001F8A  6A0F               	clrf	?_readEEPROM+1,c
 20575  001F8C  0E8F               	movlw	143
 20576  001F8E  6E0E               	movwf	?_readEEPROM,c
 20577  001F90  EC1C  F02A         	call	_readEEPROM	;wreg free
 20578  001F94  D1CE               	goto	L41
 20579  001F96                     l10734:
 20580                           
 20581                           ; BSR set to: 0
 20582                           ;main.c: 1764: rv = readEEPROM(0x90);
 20583  001F96  6A0F               	clrf	?_readEEPROM+1,c
 20584  001F98  0E90               	movlw	144
 20585  001F9A  6E0E               	movwf	?_readEEPROM,c
 20586  001F9C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20587  001FA0  D1C8               	goto	L41
 20588  001FA2                     l10736:
 20589                           
 20590                           ; BSR set to: 0
 20591                           ;main.c: 1769: rv = readEEPROM(0x91);
 20592  001FA2  6A0F               	clrf	?_readEEPROM+1,c
 20593  001FA4  0E91               	movlw	145
 20594  001FA6  6E0E               	movwf	?_readEEPROM,c
 20595  001FA8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20596  001FAC  D1C2               	goto	L41
 20597  001FAE                     l10738:
 20598                           
 20599                           ; BSR set to: 0
 20600                           ;main.c: 1774: rv = readEEPROM(0x92);
 20601  001FAE  6A0F               	clrf	?_readEEPROM+1,c
 20602  001FB0  0E92               	movlw	146
 20603  001FB2  6E0E               	movwf	?_readEEPROM,c
 20604  001FB4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20605  001FB8  D1BC               	goto	L41
 20606  001FBA                     l10740:
 20607                           
 20608                           ; BSR set to: 0
 20609                           ;main.c: 1779: rv = readEEPROM(0x93);
 20610  001FBA  6A0F               	clrf	?_readEEPROM+1,c
 20611  001FBC  0E93               	movlw	147
 20612  001FBE  6E0E               	movwf	?_readEEPROM,c
 20613  001FC0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20614  001FC4  D1B6               	goto	L41
 20615  001FC6                     l10742:
 20616                           
 20617                           ; BSR set to: 0
 20618                           ;main.c: 1784: rv = readEEPROM(0x94);
 20619  001FC6  6A0F               	clrf	?_readEEPROM+1,c
 20620  001FC8  0E94               	movlw	148
 20621  001FCA  6E0E               	movwf	?_readEEPROM,c
 20622  001FCC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20623  001FD0  D1B0               	goto	L41
 20624  001FD2                     l10744:
 20625                           
 20626                           ; BSR set to: 0
 20627                           ;main.c: 1789: rv = readEEPROM(0x95);
 20628  001FD2  6A0F               	clrf	?_readEEPROM+1,c
 20629  001FD4  0E95               	movlw	149
 20630  001FD6  6E0E               	movwf	?_readEEPROM,c
 20631  001FD8  EC1C  F02A         	call	_readEEPROM	;wreg free
 20632  001FDC  D1AA               	goto	L41
 20633  001FDE                     l10746:
 20634                           
 20635                           ; BSR set to: 0
 20636                           ;main.c: 1794: rv = readEEPROM(0x96);
 20637  001FDE  6A0F               	clrf	?_readEEPROM+1,c
 20638  001FE0  0E96               	movlw	150
 20639  001FE2  6E0E               	movwf	?_readEEPROM,c
 20640  001FE4  EC1C  F02A         	call	_readEEPROM	;wreg free
 20641  001FE8  D1A4               	goto	L41
 20642  001FEA                     l10748:
 20643                           
 20644                           ; BSR set to: 0
 20645                           ;main.c: 1804: rv = readEEPROM(0x97);
 20646  001FEA  6A0F               	clrf	?_readEEPROM+1,c
 20647  001FEC  0E97               	movlw	151
 20648  001FEE  6E0E               	movwf	?_readEEPROM,c
 20649  001FF0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20650  001FF4  D19E               	goto	L41
 20651  001FF6                     l10750:
 20652                           
 20653                           ; BSR set to: 0
 20654                           ;main.c: 1809: rv = readEEPROM(0x98);
 20655  001FF6  6A0F               	clrf	?_readEEPROM+1,c
 20656  001FF8  0E98               	movlw	152
 20657  001FFA  6E0E               	movwf	?_readEEPROM,c
 20658  001FFC  EC1C  F02A         	call	_readEEPROM	;wreg free
 20659  002000  D198               	goto	L41
 20660  002002                     l10752:
 20661                           
 20662                           ; BSR set to: 0
 20663                           ;main.c: 1814: rv = readEEPROM(0x99);
 20664  002002  6A0F               	clrf	?_readEEPROM+1,c
 20665  002004  0E99               	movlw	153
 20666  002006  6E0E               	movwf	?_readEEPROM,c
 20667  002008  EC1C  F02A         	call	_readEEPROM	;wreg free
 20668  00200C  D192               	goto	L41
 20669  00200E                     l10754:
 20670                           
 20671                           ; BSR set to: 0
 20672                           ;main.c: 1819: rv = readEEPROM(0x9A);
 20673  00200E  6A0F               	clrf	?_readEEPROM+1,c
 20674  002010  0E9A               	movlw	154
 20675  002012  6E0E               	movwf	?_readEEPROM,c
 20676  002014  EC1C  F02A         	call	_readEEPROM	;wreg free
 20677  002018  D18C               	goto	L41
 20678  00201A                     l10756:
 20679                           
 20680                           ; BSR set to: 0
 20681                           ;main.c: 1824: rv = readEEPROM(0x9B);
 20682  00201A  6A0F               	clrf	?_readEEPROM+1,c
 20683  00201C  0E9B               	movlw	155
 20684  00201E  6E0E               	movwf	?_readEEPROM,c
 20685  002020  EC1C  F02A         	call	_readEEPROM	;wreg free
 20686  002024  D186               	goto	L41
 20687  002026                     l10758:
 20688                           
 20689                           ; BSR set to: 0
 20690                           ;main.c: 1829: rv = readEEPROM(0x9C);
 20691  002026  6A0F               	clrf	?_readEEPROM+1,c
 20692  002028  0E9C               	movlw	156
 20693  00202A  6E0E               	movwf	?_readEEPROM,c
 20694  00202C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20695  002030  D180               	goto	L41
 20696  002032                     l410:
 20697                           
 20698                           ; BSR set to: 0
 20699                           ;main.c: 1834: rv = 0;
 20700  002032  6A14               	clrf	vscp_readAppReg@rv,c
 20701                           
 20702                           ;main.c: 1835: break;
 20703  002034  D17F               	goto	l10790
 20704  002036                     l10760:
 20705                           
 20706                           ; BSR set to: 0
 20707                           ;main.c: 1843: rv = readEEPROM(0xF2);
 20708  002036  6A0F               	clrf	?_readEEPROM+1,c
 20709  002038  0EF2               	movlw	242
 20710  00203A  6E0E               	movwf	?_readEEPROM,c
 20711  00203C  EC1C  F02A         	call	_readEEPROM	;wreg free
 20712  002040  D178               	goto	L41
 20713  002042                     l10762:
 20714                           
 20715                           ; BSR set to: 0
 20716                           ;main.c: 1847: rv = readEEPROM(0xF3);
 20717  002042  6A0F               	clrf	?_readEEPROM+1,c
 20718  002044  0EF3               	movlw	243
 20719  002046  6E0E               	movwf	?_readEEPROM,c
 20720  002048  EC1C  F02A         	call	_readEEPROM	;wreg free
 20721  00204C  D172               	goto	L41
 20722  00204E                     l10766:
 20723                           
 20724                           ; BSR set to: 0
 20725  00204E  5013               	movf	vscp_readAppReg@reg,w,c
 20726                           
 20727                           ; Switch size 1, requested type "space"
 20728                           ; Number of cases is 108, Range of values is 0 to 119
 20729                           ; switch strategies available:
 20730                           ; Name         Instructions Cycles
 20731                           ; simple_byte          325   163 (average)
 20732                           ;	Chosen strategy is simple_byte
 20733  002050  E101 D5E5          	bz	l10564
 20734  002054  0A01               	xorlw	1	; case 1
 20735  002056  E101 D5E8          	bz	l10566
 20736  00205A  0A03               	xorlw	3	; case 2
 20737  00205C  E101 D5EB          	bz	l10568
 20738  002060  0A01               	xorlw	1	; case 3
 20739  002062  E101 D5EE          	bz	l10570
 20740  002066  0A07               	xorlw	7	; case 4
 20741  002068  E101 D5F1          	bz	l10572
 20742  00206C  0A01               	xorlw	1	; case 5
 20743  00206E  E101 D5F4          	bz	l10574
 20744  002072  0A03               	xorlw	3	; case 6
 20745  002074  E101 D5F7          	bz	l10576
 20746  002078  0A01               	xorlw	1	; case 7
 20747  00207A  E101 D5FA          	bz	l10578
 20748  00207E  0A0F               	xorlw	15	; case 8
 20749  002080  E101 D5FD          	bz	l10580
 20750  002084  0A01               	xorlw	1	; case 9
 20751  002086  E101 D5FD          	bz	l315
 20752  00208A  0A03               	xorlw	3	; case 10
 20753  00208C  E101 D5FD          	bz	l10582
 20754  002090  0A01               	xorlw	1	; case 11
 20755  002092  E101 D5FD          	bz	l317
 20756  002096  0A07               	xorlw	7	; case 12
 20757  002098  E101 D5FD          	bz	l10584
 20758  00209C  0A01               	xorlw	1	; case 13
 20759  00209E  E101 D5FD          	bz	l319
 20760  0020A2  0A03               	xorlw	3	; case 14
 20761  0020A4  E101 D5FD          	bz	l10586
 20762  0020A8  0A01               	xorlw	1	; case 15
 20763  0020AA  E101 D5FD          	bz	l321
 20764  0020AE  0A1F               	xorlw	31	; case 16
 20765  0020B0  E101 D5FD          	bz	l10588
 20766  0020B4  0A01               	xorlw	1	; case 17
 20767  0020B6  E101 D5FD          	bz	l323
 20768  0020BA  0A03               	xorlw	3	; case 18
 20769  0020BC  E101 D5F7          	bz	l10588
 20770  0020C0  0A01               	xorlw	1	; case 19
 20771  0020C2  E101 D5F7          	bz	l323
 20772  0020C6  0A07               	xorlw	7	; case 20
 20773  0020C8  E101 D5F7          	bz	l10592
 20774  0020CC  0A01               	xorlw	1	; case 21
 20775  0020CE  E101 D5FA          	bz	l10594
 20776  0020D2  0A03               	xorlw	3	; case 22
 20777  0020D4  E101 D5FD          	bz	l10596
 20778  0020D8  0A01               	xorlw	1	; case 23
 20779  0020DA  E101 D600          	bz	l10598
 20780  0020DE  0A0F               	xorlw	15	; case 24
 20781  0020E0  E101 D603          	bz	l10600
 20782  0020E4  0A01               	xorlw	1	; case 25
 20783  0020E6  E101 D606          	bz	l10602
 20784  0020EA  0A3F               	xorlw	63	; case 38
 20785  0020EC  E101 D609          	bz	l10604
 20786  0020F0  0A01               	xorlw	1	; case 39
 20787  0020F2  E101 D60C          	bz	l10606
 20788  0020F6  0A0F               	xorlw	15	; case 40
 20789  0020F8  E101 D60F          	bz	l10608
 20790  0020FC  0A01               	xorlw	1	; case 41
 20791  0020FE  E101 D612          	bz	l10610
 20792  002102  0A03               	xorlw	3	; case 42
 20793  002104  E101 D615          	bz	l10612
 20794  002108  0A01               	xorlw	1	; case 43
 20795  00210A  E101 D618          	bz	l10614
 20796  00210E  0A07               	xorlw	7	; case 44
 20797  002110  E101 D61B          	bz	l10616
 20798  002114  0A01               	xorlw	1	; case 45
 20799  002116  E101 D61E          	bz	l10618
 20800  00211A  0A03               	xorlw	3	; case 46
 20801  00211C  E101 D621          	bz	l10620
 20802  002120  0A01               	xorlw	1	; case 47
 20803  002122  E101 D624          	bz	l10622
 20804  002126  0A1F               	xorlw	31	; case 48
 20805  002128  E101 D627          	bz	l10624
 20806  00212C  0A01               	xorlw	1	; case 49
 20807  00212E  E101 D62A          	bz	l10626
 20808  002132  0A03               	xorlw	3	; case 50
 20809  002134  E101 D62D          	bz	l10628
 20810  002138  0A01               	xorlw	1	; case 51
 20811  00213A  E101 D630          	bz	l10630
 20812  00213E  0A07               	xorlw	7	; case 52
 20813  002140  E101 D633          	bz	l10632
 20814  002144  0A01               	xorlw	1	; case 53
 20815  002146  E101 D636          	bz	l10634
 20816  00214A  0A03               	xorlw	3	; case 54
 20817  00214C  E101 D639          	bz	l10636
 20818  002150  0A01               	xorlw	1	; case 55
 20819  002152  E101 D63C          	bz	l10638
 20820  002156  0A0F               	xorlw	15	; case 56
 20821  002158  E101 D63F          	bz	l10640
 20822  00215C  0A01               	xorlw	1	; case 57
 20823  00215E  E101 D642          	bz	l10642
 20824  002162  0A03               	xorlw	3	; case 58
 20825  002164  E101 D645          	bz	l10644
 20826  002168  0A01               	xorlw	1	; case 59
 20827  00216A  E101 D648          	bz	l10646
 20828  00216E  0A07               	xorlw	7	; case 60
 20829  002170  E101 D64B          	bz	l10648
 20830  002174  0A01               	xorlw	1	; case 61
 20831  002176  E101 D64E          	bz	l10650
 20832  00217A  0A03               	xorlw	3	; case 62
 20833  00217C  E101 D651          	bz	l10652
 20834  002180  0A01               	xorlw	1	; case 63
 20835  002182  E101 D654          	bz	l10654
 20836  002186  0A7F               	xorlw	127	; case 64
 20837  002188  E101 D657          	bz	l10656
 20838  00218C  0A01               	xorlw	1	; case 65
 20839  00218E  E101 D65A          	bz	l10658
 20840  002192  0A03               	xorlw	3	; case 66
 20841  002194  E101 D65D          	bz	l10660
 20842  002198  0A01               	xorlw	1	; case 67
 20843  00219A  E101 D660          	bz	l10662
 20844  00219E  0A07               	xorlw	7	; case 68
 20845  0021A0  E101 D663          	bz	l10664
 20846  0021A4  0A01               	xorlw	1	; case 69
 20847  0021A6  E101 D666          	bz	l10666
 20848  0021AA  0A03               	xorlw	3	; case 70
 20849  0021AC  E101 D669          	bz	l10668
 20850  0021B0  0A01               	xorlw	1	; case 71
 20851  0021B2  E101 D66C          	bz	l10670
 20852  0021B6  0A0F               	xorlw	15	; case 72
 20853  0021B8  E101 D66F          	bz	l10672
 20854  0021BC  0A01               	xorlw	1	; case 73
 20855  0021BE  E101 D672          	bz	l10674
 20856  0021C2  0A03               	xorlw	3	; case 74
 20857  0021C4  E101 D675          	bz	l10676
 20858  0021C8  0A01               	xorlw	1	; case 75
 20859  0021CA  E101 D678          	bz	l10678
 20860  0021CE  0A07               	xorlw	7	; case 76
 20861  0021D0  E101 D66F          	bz	l10676
 20862  0021D4  0A01               	xorlw	1	; case 77
 20863  0021D6  E101 D672          	bz	l10678
 20864  0021DA  0A03               	xorlw	3	; case 78
 20865  0021DC  E101 D669          	bz	l10676
 20866  0021E0  0A01               	xorlw	1	; case 79
 20867  0021E2  E101 D66C          	bz	l10678
 20868  0021E6  0A1F               	xorlw	31	; case 80
 20869  0021E8  E101 D663          	bz	l10676
 20870  0021EC  0A01               	xorlw	1	; case 81
 20871  0021EE  E101 D666          	bz	l10678
 20872  0021F2  0A03               	xorlw	3	; case 82
 20873  0021F4  E101 D65D          	bz	l10676
 20874  0021F8  0A01               	xorlw	1	; case 83
 20875  0021FA  E101 D660          	bz	l10678
 20876  0021FE  0A07               	xorlw	7	; case 84
 20877  002200  E101 D657          	bz	l10676
 20878  002204  0A01               	xorlw	1	; case 85
 20879  002206  E101 D65A          	bz	l10678
 20880  00220A  0A03               	xorlw	3	; case 86
 20881  00220C  E101 D65D          	bz	l10700
 20882  002210  0A01               	xorlw	1	; case 87
 20883  002212  E101 D660          	bz	l10702
 20884  002216  0A0F               	xorlw	15	; case 88
 20885  002218  E101 D663          	bz	l10704
 20886  00221C  0A01               	xorlw	1	; case 89
 20887  00221E  E101 D666          	bz	l10706
 20888  002222  0A03               	xorlw	3	; case 90
 20889  002224  E101 D669          	bz	l10708
 20890  002228  0A01               	xorlw	1	; case 91
 20891  00222A  E101 D66C          	bz	l10710
 20892  00222E  0A07               	xorlw	7	; case 92
 20893  002230  E101 D66F          	bz	l10712
 20894  002234  0A01               	xorlw	1	; case 93
 20895  002236  E101 D672          	bz	l10714
 20896  00223A  0A03               	xorlw	3	; case 94
 20897  00223C  E101 D675          	bz	l10716
 20898  002240  0A01               	xorlw	1	; case 95
 20899  002242  E101 D678          	bz	l10718
 20900  002246  0A3F               	xorlw	63	; case 96
 20901  002248  E101 D67B          	bz	l10720
 20902  00224C  0A01               	xorlw	1	; case 97
 20903  00224E  E101 D67E          	bz	l10722
 20904  002252  0A03               	xorlw	3	; case 98
 20905  002254  E101 D681          	bz	l10724
 20906  002258  0A01               	xorlw	1	; case 99
 20907  00225A  E101 D684          	bz	l10726
 20908  00225E  0A07               	xorlw	7	; case 100
 20909  002260  E101 D687          	bz	l10728
 20910  002264  0A01               	xorlw	1	; case 101
 20911  002266  E101 D68A          	bz	l10730
 20912  00226A  0A03               	xorlw	3	; case 102
 20913  00226C  E101 D68D          	bz	l10732
 20914  002270  0A01               	xorlw	1	; case 103
 20915  002272  E101 D690          	bz	l10734
 20916  002276  0A0F               	xorlw	15	; case 104
 20917  002278  E101 D693          	bz	l10736
 20918  00227C  0A01               	xorlw	1	; case 105
 20919  00227E  E101 D696          	bz	l10738
 20920  002282  0A03               	xorlw	3	; case 106
 20921  002284  E101 D699          	bz	l10740
 20922  002288  0A01               	xorlw	1	; case 107
 20923  00228A  E101 D69C          	bz	l10742
 20924  00228E  0A07               	xorlw	7	; case 108
 20925  002290  E101 D69F          	bz	l10744
 20926  002294  0A01               	xorlw	1	; case 109
 20927  002296  E101 D6A2          	bz	l10746
 20928  00229A  0A03               	xorlw	3	; case 110
 20929  00229C  E101 D6A5          	bz	l10748
 20930  0022A0  0A01               	xorlw	1	; case 111
 20931  0022A2  E101 D6A8          	bz	l10750
 20932  0022A6  0A1F               	xorlw	31	; case 112
 20933  0022A8  E101 D6AB          	bz	l10752
 20934  0022AC  0A01               	xorlw	1	; case 113
 20935  0022AE  E101 D6AE          	bz	l10754
 20936  0022B2  0A03               	xorlw	3	; case 114
 20937  0022B4  E101 D6B1          	bz	l10756
 20938  0022B8  0A01               	xorlw	1	; case 115
 20939  0022BA  E101 D6B4          	bz	l10758
 20940  0022BE  0A07               	xorlw	7	; case 116
 20941  0022C0  E101 D6B7          	bz	l410
 20942  0022C4  0A01               	xorlw	1	; case 117
 20943  0022C6  E101 D6B4          	bz	l410
 20944  0022CA  0A03               	xorlw	3	; case 118
 20945  0022CC  E101 D6B3          	bz	l10760
 20946  0022D0  0A01               	xorlw	1	; case 119
 20947  0022D2  E101 D6B6          	bz	l10762
 20948  0022D6  D6AD               	goto	l410
 20949  0022D8                     l10768:
 20950                           
 20951                           ; BSR set to: 0
 20952                           ;main.c: 1855: else if (1 == vscp_page_select) {
 20953  0022D8  0446               	decf	_vscp_page_select,w,c
 20954  0022DA  1047               	iorwf	_vscp_page_select+1,w,c
 20955  0022DC  E12B               	bnz	l10790
 20956                           
 20957                           ; BSR set to: 0
 20958                           ;main.c: 1857: if (reg < 72) {
 20959  0022DE  0E48               	movlw	72
 20960  0022E0  6013               	cpfslt	vscp_readAppReg@reg,c
 20961  0022E2  D009               	goto	l10774
 20962                           
 20963                           ; BSR set to: 0
 20964                           ;main.c: 1858: rv = readEEPROM(0xAA + reg ) ;
 20965  0022E4  0EAA               	movlw	170
 20966  0022E6  2413               	addwf	vscp_readAppReg@reg,w,c
 20967  0022E8  6E0E               	movwf	?_readEEPROM,c
 20968  0022EA  6A0F               	clrf	?_readEEPROM+1,c
 20969  0022EC  0E00               	movlw	0
 20970  0022EE  220F               	addwfc	?_readEEPROM+1,f,c
 20971  0022F0  EC1C  F02A         	call	_readEEPROM	;wreg free
 20972  0022F4  D01E               	goto	L41
 20973  0022F6                     l10774:
 20974                           
 20975                           ; BSR set to: 0
 20976                           ;main.c: 1861: else if (reg < 84) {
 20977  0022F6  0E54               	movlw	84
 20978  0022F8  6013               	cpfslt	vscp_readAppReg@reg,c
 20979  0022FA  D010               	goto	l10786
 20980                           
 20981                           ; BSR set to: 0
 20982                           ;main.c: 1863: uint8_t pos = reg - 72;
 20983  0022FC  5013               	movf	vscp_readAppReg@reg,w,c
 20984  0022FE  0FB8               	addlw	184
 20985  002300  6E12               	movwf	vscp_readAppReg@pos,c
 20986                           
 20987                           ; BSR set to: 0
 20988                           ;main.c: 1864: if ( pos % 2 ) {
 20989  002302  A012               	btfss	vscp_readAppReg@pos,0,c
 20990  002304  D002               	goto	l10782
 20991                           
 20992                           ; BSR set to: 0
 20993                           ;main.c: 1865: pos--;
 20994  002306  0612               	decf	vscp_readAppReg@pos,f,c
 20995                           
 20996                           ;main.c: 1866: }
 20997  002308  D001               	goto	l10784
 20998  00230A                     l10782:
 20999                           
 21000                           ; BSR set to: 0
 21001                           ;main.c: 1867: else {
 21002                           ;main.c: 1868: pos++;
 21003  00230A  2A12               	incf	vscp_readAppReg@pos,f,c
 21004  00230C                     l10784:
 21005                           
 21006                           ; BSR set to: 0
 21007                           ;main.c: 1869: }
 21008                           ;main.c: 1870: rv = adc[ pos ];
 21009  00230C  0EA2               	movlw	low _adc
 21010  00230E  2412               	addwf	vscp_readAppReg@pos,w,c
 21011  002310  6ED9               	movwf	fsr2l,c
 21012  002312  6ADA               	clrf	fsr2h,c
 21013  002314  0E01               	movlw	high _adc
 21014  002316  22DA               	addwfc	fsr2h,f,c
 21015  002318  50DF               	movf	indf2,w,c
 21016  00231A  D00B               	goto	L41
 21017  00231C                     l10786:
 21018                           
 21019                           ; BSR set to: 0
 21020                           ;main.c: 1873: else if (reg < 98) {
 21021  00231C  0E62               	movlw	98
 21022  00231E  6013               	cpfslt	vscp_readAppReg@reg,c
 21023  002320  D009               	goto	l10790
 21024                           
 21025                           ; BSR set to: 0
 21026                           ;main.c: 1874: rv = readEEPROM( 0x9E + reg - 84 ) ;
 21027  002322  0E4A               	movlw	74
 21028  002324  2413               	addwf	vscp_readAppReg@reg,w,c
 21029  002326  6E0E               	movwf	?_readEEPROM,c
 21030  002328  6A0F               	clrf	?_readEEPROM+1,c
 21031  00232A  0E00               	movlw	0
 21032  00232C  220F               	addwfc	?_readEEPROM+1,f,c
 21033  00232E  EC1C  F02A         	call	_readEEPROM	;wreg free
 21034  002332                     L41:
 21035  002332  6E14               	movwf	vscp_readAppReg@rv,c
 21036  002334                     l10790:
 21037                           
 21038                           ;main.c: 1875: }
 21039                           ;main.c: 1876: }
 21040                           ;main.c: 1878: return rv;
 21041  002334  5014               	movf	vscp_readAppReg@rv,w,c
 21042  002336  0012               	return	
 21043  002338                     __end_of_vscp_readAppReg:
 21044                           	opt stack 0
 21045                           tblptru	equ	0xFF8
 21046                           tblptrh	equ	0xFF7
 21047                           tblptrl	equ	0xFF6
 21048                           tablat	equ	0xFF5
 21049                           prodh	equ	0xFF4
 21050                           prodl	equ	0xFF3
 21051                           intcon	equ	0xFF2
 21052                           postinc0	equ	0xFEE
 21053                           wreg	equ	0xFE8
 21054                           indf1	equ	0xFE7
 21055                           postdec1	equ	0xFE5
 21056                           fsr1h	equ	0xFE2
 21057                           fsr1l	equ	0xFE1
 21058                           indf2	equ	0xFDF
 21059                           postinc2	equ	0xFDE
 21060                           postdec2	equ	0xFDD
 21061                           plusw2	equ	0xFDB
 21062                           fsr2h	equ	0xFDA
 21063                           fsr2l	equ	0xFD9
 21064                           status	equ	0xFD8
 21065                           
 21066 ;; *************** function _interrupt_at_low_vector *****************
 21067 ;; Defined at:
 21068 ;;		line 134 in file "../main.c"
 21069 ;; Parameters:    Size  Location     Type
 21070 ;;		None
 21071 ;; Auto vars:     Size  Location     Type
 21072 ;;		None
 21073 ;; Return value:  Size  Location     Type
 21074 ;;		None               void
 21075 ;; Registers used:
 21076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21077 ;; Tracked objects:
 21078 ;;		On entry : 0/0
 21079 ;;		On exit  : 0/0
 21080 ;;		Unchanged: 0/0
 21081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21082 ;;      Params:         0       0       0       0       0       0       0
 21083 ;;      Locals:         0       0       0       0       0       0       0
 21084 ;;      Temps:          9       0       0       0       0       0       0
 21085 ;;      Totals:         9       0       0       0       0       0       0
 21086 ;;Total ram usage:        9 bytes
 21087 ;; Hardware stack levels used:    1
 21088 ;; Hardware stack levels required when called:    1
 21089 ;; This function calls:
 21090 ;;		i1_ConvertADC
 21091 ;;		i1_WriteTimer0
 21092 ;; This function is called by:
 21093 ;;		Interrupt level 1
 21094 ;; This function uses a non-reentrant model
 21095 ;;
 21096                           
 21097                           	psect	intcodelo
 21098  000018                     __pintcodelo:
 21099                           	opt stack 0
 21100  000018                     _interrupt_at_low_vector:
 21101                           	opt stack 21
 21102                           
 21103                           ;incstack = 0
 21104  000018  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 21105  00001C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 21106  000020  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 21107  000024  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 21108  000028  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 21109  00002C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 21110  000030  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 21111  000034                     
 21112                           ;main.c: 136: if (INTCONbits.TMR0IF) {
 21113  000034  A4F2               	btfss	intcon,2,c	;volatile
 21114  000036  D001               	goto	i1u714_21
 21115  000038  D001               	goto	i1u714_20
 21116  00003A                     i1u714_21:
 21117  00003A  D045               	goto	i1l9204
 21118  00003C                     i1u714_20:
 21119  00003C                     
 21120                           ;main.c: 139: WriteTimer0(0xfb1d);
 21121  00003C  0EFB               	movlw	251
 21122  00003E  6E02               	movwf	?i1_WriteTimer0+1,c
 21123  000040  0E1D               	movlw	29
 21124  000042  6E01               	movwf	?i1_WriteTimer0,c
 21125  000044  EC37  F02A         	call	i1_WriteTimer0	;wreg free
 21126  000048                     
 21127                           ;main.c: 141: vscp_timer++;
 21128  000048  0101               	movlb	1	; () banked
 21129  00004A  4B1C               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 21130  00004C  2B1D               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 21131  00004E                     
 21132                           ; BSR set to: 1
 21133                           ;main.c: 142: vscp_configtimer++;
 21134  00004E  4B1A               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 21135  000050  2B1B               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 21136  000052                     
 21137                           ; BSR set to: 1
 21138                           ;main.c: 143: measurement_clock++;
 21139  000052  0E01               	movlw	1
 21140  000054  2712               	addwf	_measurement_clock& (0+255),f,b
 21141  000056  0E00               	movlw	0
 21142  000058  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b
 21143  00005A  0E00               	movlw	0
 21144  00005C  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b
 21145  00005E  0E00               	movlw	0
 21146  000060  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b
 21147  000062                     
 21148                           ; BSR set to: 1
 21149                           ;main.c: 144: timeout_clock++;
 21150  000062  0E01               	movlw	1
 21151  000064  2716               	addwf	_timeout_clock& (0+255),f,b
 21152  000066  0E00               	movlw	0
 21153  000068  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b
 21154  00006A  0E00               	movlw	0
 21155  00006C  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b
 21156  00006E  0E00               	movlw	0
 21157  000070  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b
 21158  000072                     
 21159                           ; BSR set to: 1
 21160                           ;main.c: 147: if (!(PORTC & 0x01)) {
 21161  000072  B082               	btfsc	3970,0,c	;volatile
 21162  000074  D001               	goto	i1u715_21
 21163  000076  D001               	goto	i1u715_20
 21164  000078                     i1u715_21:
 21165  000078  D003               	goto	i1l138
 21166  00007A                     i1u715_20:
 21167  00007A                     
 21168                           ; BSR set to: 1
 21169                           ;main.c: 149: vscp_initbtncnt++;
 21170  00007A  0100               	movlb	0	; () banked
 21171  00007C  2BB8               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21172                           
 21173                           ;main.c: 150: }
 21174  00007E  D002               	goto	i1l9178
 21175  000080                     i1l138:
 21176                           
 21177                           ; BSR set to: 1
 21178                           ;main.c: 151: else {
 21179                           ;main.c: 152: vscp_initbtncnt = 0;
 21180  000080  0100               	movlb	0	; () banked
 21181  000082  6BB8               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21182  000084                     i1l9178:
 21183                           
 21184                           ; BSR set to: 0
 21185                           ;main.c: 153: }
 21186                           ;main.c: 156: vscp_statuscnt++;
 21187  000084  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21188  000086                     
 21189                           ; BSR set to: 0
 21190                           ;main.c: 157: if ( ( 0x02 ==
 21191                           ;main.c: 158: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21192  000086  504D               	movf	_vscp_initledfunc,w,c
 21193  000088  0A02               	xorlw	2
 21194  00008A  A4D8               	btfss	status,2,c
 21195  00008C  D001               	goto	i1u716_21
 21196  00008E  D001               	goto	i1u716_20
 21197  000090                     i1u716_21:
 21198  000090  D00E               	goto	i1l9192
 21199  000092                     i1u716_20:
 21200  000092                     
 21201                           ; BSR set to: 0
 21202  000092  0E64               	movlw	100
 21203  000094  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21204  000096  D001               	goto	i1u717_21
 21205  000098  D001               	goto	i1u717_20
 21206  00009A                     i1u717_21:
 21207  00009A  D009               	goto	i1l9192
 21208  00009C                     i1u717_20:
 21209  00009C                     
 21210                           ; BSR set to: 0
 21211                           ;main.c: 159: if ( PORTC & 0x02 ) {
 21212  00009C  A282               	btfss	3970,1,c	;volatile
 21213  00009E  D001               	goto	i1u718_21
 21214  0000A0  D001               	goto	i1u718_20
 21215  0000A2                     i1u718_21:
 21216  0000A2  D002               	goto	i1l9188
 21217  0000A4                     i1u718_20:
 21218  0000A4                     i1l9186:
 21219                           
 21220                           ; BSR set to: 0
 21221                           ;main.c: 160: PORTC &= ~0x02;
 21222  0000A4  9282               	bcf	3970,1,c	;volatile
 21223                           
 21224                           ;main.c: 161: }
 21225  0000A6  D001               	goto	i1l9190
 21226  0000A8                     i1l9188:
 21227                           
 21228                           ; BSR set to: 0
 21229                           ;main.c: 162: else {
 21230                           ;main.c: 163: PORTC |= 0x02;
 21231  0000A8  8282               	bsf	3970,1,c	;volatile
 21232  0000AA                     i1l9190:
 21233                           
 21234                           ; BSR set to: 0
 21235                           ;main.c: 164: }
 21236                           ;main.c: 165: vscp_statuscnt = 0;
 21237  0000AA  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21238                           
 21239                           ;main.c: 166: }
 21240  0000AC  D00B               	goto	i1l9202
 21241  0000AE                     i1l9192:
 21242                           
 21243                           ; BSR set to: 0
 21244                           ;main.c: 167: else if (0x01 == vscp_initledfunc) {
 21245  0000AE  044D               	decf	_vscp_initledfunc,w,c
 21246  0000B0  A4D8               	btfss	status,2,c
 21247  0000B2  D001               	goto	i1u719_21
 21248  0000B4  D001               	goto	i1u719_20
 21249  0000B6                     i1u719_21:
 21250  0000B6  D001               	goto	i1l144
 21251  0000B8                     i1u719_20:
 21252  0000B8  D7F7               	goto	i1l9188
 21253  0000BA                     i1l144:
 21254                           
 21255                           ; BSR set to: 0
 21256                           ;main.c: 171: else if (0x00 == vscp_initledfunc) {
 21257  0000BA  664D               	tstfsz	_vscp_initledfunc,c
 21258  0000BC  D001               	goto	i1u720_21
 21259  0000BE  D001               	goto	i1u720_20
 21260  0000C0                     i1u720_21:
 21261  0000C0  D001               	goto	i1l9202
 21262  0000C2                     i1u720_20:
 21263  0000C2  D7F0               	goto	i1l9186
 21264  0000C4                     i1l9202:
 21265                           
 21266                           ; BSR set to: 0
 21267                           ;main.c: 174: }
 21268                           ;main.c: 176: INTCONbits.TMR0IF = 0;
 21269  0000C4  94F2               	bcf	intcon,2,c	;volatile
 21270  0000C6                     i1l9204:
 21271                           
 21272                           ;main.c: 178: }
 21273                           ;main.c: 181: if ( PIR1bits.ADIF ) {
 21274  0000C6  AC9E               	btfss	3998,6,c	;volatile
 21275  0000C8  D001               	goto	i1u721_21
 21276  0000CA  D001               	goto	i1u721_20
 21277  0000CC                     i1u721_21:
 21278  0000CC  D0E5               	goto	i1l164
 21279  0000CE                     i1u721_20:
 21280  0000CE  D0C4               	goto	i1l9266
 21281  0000D0                     i1l9208:
 21282                           
 21283                           ;main.c: 187: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21284  0000D0  5049               	movf	_adc_series_counter,w,c
 21285  0000D2  0D0C               	mullw	12
 21286  0000D4  0EA2               	movlw	low _adc
 21287  0000D6  24F3               	addwf	prodl,w,c
 21288  0000D8  6ED9               	movwf	fsr2l,c
 21289  0000DA  0E01               	movlw	high _adc
 21290  0000DC  20F4               	addwfc	prodh,w,c
 21291  0000DE  6EDA               	movwf	fsr2h,c
 21292  0000E0  CFC4 FFDF          	movff	4036,indf2	;volatile
 21293                           
 21294                           ;main.c: 188: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21295  0000E4  5049               	movf	_adc_series_counter,w,c
 21296  0000E6  0D0C               	mullw	12
 21297  0000E8  0EA3               	movlw	low (_adc+1)
 21298  0000EA  24F3               	addwf	prodl,w,c
 21299  0000EC  6ED9               	movwf	fsr2l,c
 21300  0000EE  0E01               	movlw	high (_adc+1)
 21301  0000F0  20F4               	addwfc	prodh,w,c
 21302  0000F2  6EDA               	movwf	fsr2h,c
 21303  0000F4  CFC3 FFDF          	movff	4035,indf2	;volatile
 21304  0000F8                     
 21305                           ;main.c: 190: ADCON0 = (2<<2) + 1;
 21306  0000F8  0E09               	movlw	9
 21307  0000FA  6EC2               	movwf	4034,c	;volatile
 21308  0000FC                     
 21309                           ;main.c: 194: if ((80 - 1) == adc_series_counter) {
 21310  0000FC  5049               	movf	_adc_series_counter,w,c
 21311  0000FE  0A4F               	xorlw	79
 21312  000100  A4D8               	btfss	status,2,c
 21313  000102  D001               	goto	i1u722_21
 21314  000104  D001               	goto	i1u722_20
 21315  000106                     i1u722_21:
 21316  000106  D0C5               	goto	i1l9268
 21317  000108                     i1u722_20:
 21318  000108                     
 21319                           ;main.c: 195: adc_conversion_flags |= 1;
 21320  000108  0100               	movlb	0	; () banked
 21321  00010A  81B3               	bsf	_adc_conversion_flags& (0+255),0,b
 21322  00010C  D0C2               	goto	i1l9268
 21323  00010E                     i1l9216:
 21324                           
 21325                           ;main.c: 201: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21326  00010E  5049               	movf	_adc_series_counter,w,c
 21327  000110  0D0C               	mullw	12
 21328  000112  0EA4               	movlw	low (_adc+2)
 21329  000114  24F3               	addwf	prodl,w,c
 21330  000116  6ED9               	movwf	fsr2l,c
 21331  000118  0E01               	movlw	high (_adc+2)
 21332  00011A  20F4               	addwfc	prodh,w,c
 21333  00011C  6EDA               	movwf	fsr2h,c
 21334  00011E  CFC4 FFDF          	movff	4036,indf2	;volatile
 21335                           
 21336                           ;main.c: 202: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21337  000122  5049               	movf	_adc_series_counter,w,c
 21338  000124  0D0C               	mullw	12
 21339  000126  0EA5               	movlw	low (_adc+3)
 21340  000128  24F3               	addwf	prodl,w,c
 21341  00012A  6ED9               	movwf	fsr2l,c
 21342  00012C  0E01               	movlw	high (_adc+3)
 21343  00012E  20F4               	addwfc	prodh,w,c
 21344  000130  6EDA               	movwf	fsr2h,c
 21345  000132  CFC3 FFDF          	movff	4035,indf2	;volatile
 21346  000136                     
 21347                           ;main.c: 205: ADCON0 = (1<<2) + 1;
 21348  000136  0E05               	movlw	5
 21349  000138  6EC2               	movwf	4034,c	;volatile
 21350  00013A                     
 21351                           ;main.c: 209: if ((80 - 1) == adc_series_counter) {
 21352  00013A  5049               	movf	_adc_series_counter,w,c
 21353  00013C  0A4F               	xorlw	79
 21354  00013E  A4D8               	btfss	status,2,c
 21355  000140  D001               	goto	i1u723_21
 21356  000142  D001               	goto	i1u723_20
 21357  000144                     i1u723_21:
 21358  000144  D0A6               	goto	i1l9268
 21359  000146                     i1u723_20:
 21360  000146                     
 21361                           ;main.c: 210: adc_conversion_flags |= 1 << 1;
 21362  000146  0100               	movlb	0	; () banked
 21363  000148  83B3               	bsf	_adc_conversion_flags& (0+255),1,b
 21364  00014A  D0A3               	goto	i1l9268
 21365  00014C                     i1l9224:
 21366                           
 21367                           ;main.c: 216: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21368  00014C  5049               	movf	_adc_series_counter,w,c
 21369  00014E  0D0C               	mullw	12
 21370  000150  0EA6               	movlw	low (_adc+4)
 21371  000152  24F3               	addwf	prodl,w,c
 21372  000154  6ED9               	movwf	fsr2l,c
 21373  000156  0E01               	movlw	high (_adc+4)
 21374  000158  20F4               	addwfc	prodh,w,c
 21375  00015A  6EDA               	movwf	fsr2h,c
 21376  00015C  CFC4 FFDF          	movff	4036,indf2	;volatile
 21377                           
 21378                           ;main.c: 217: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21379  000160  5049               	movf	_adc_series_counter,w,c
 21380  000162  0D0C               	mullw	12
 21381  000164  0EA7               	movlw	low (_adc+5)
 21382  000166  24F3               	addwf	prodl,w,c
 21383  000168  6ED9               	movwf	fsr2l,c
 21384  00016A  0E01               	movlw	high (_adc+5)
 21385  00016C  20F4               	addwfc	prodh,w,c
 21386  00016E  6EDA               	movwf	fsr2h,c
 21387  000170  CFC3 FFDF          	movff	4035,indf2	;volatile
 21388  000174                     
 21389                           ;main.c: 220: ADCON0 = (0<<2) + 1;
 21390  000174  0E01               	movlw	1
 21391  000176  6EC2               	movwf	4034,c	;volatile
 21392  000178                     
 21393                           ;main.c: 224: if ((80 - 1) == adc_series_counter) {
 21394  000178  5049               	movf	_adc_series_counter,w,c
 21395  00017A  0A4F               	xorlw	79
 21396  00017C  A4D8               	btfss	status,2,c
 21397  00017E  D001               	goto	i1u724_21
 21398  000180  D001               	goto	i1u724_20
 21399  000182                     i1u724_21:
 21400  000182  D087               	goto	i1l9268
 21401  000184                     i1u724_20:
 21402  000184                     
 21403                           ;main.c: 225: adc_conversion_flags |= 1 << 2;
 21404  000184  0100               	movlb	0	; () banked
 21405  000186  85B3               	bsf	_adc_conversion_flags& (0+255),2,b
 21406  000188  D084               	goto	i1l9268
 21407  00018A                     i1l9232:
 21408                           
 21409                           ;main.c: 231: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21410  00018A  5049               	movf	_adc_series_counter,w,c
 21411  00018C  0D0C               	mullw	12
 21412  00018E  0EA8               	movlw	low (_adc+6)
 21413  000190  24F3               	addwf	prodl,w,c
 21414  000192  6ED9               	movwf	fsr2l,c
 21415  000194  0E01               	movlw	high (_adc+6)
 21416  000196  20F4               	addwfc	prodh,w,c
 21417  000198  6EDA               	movwf	fsr2h,c
 21418  00019A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21419                           
 21420                           ;main.c: 232: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21421  00019E  5049               	movf	_adc_series_counter,w,c
 21422  0001A0  0D0C               	mullw	12
 21423  0001A2  0EA9               	movlw	low (_adc+7)
 21424  0001A4  24F3               	addwf	prodl,w,c
 21425  0001A6  6ED9               	movwf	fsr2l,c
 21426  0001A8  0E01               	movlw	high (_adc+7)
 21427  0001AA  20F4               	addwfc	prodh,w,c
 21428  0001AC  6EDA               	movwf	fsr2h,c
 21429  0001AE  CFC3 FFDF          	movff	4035,indf2	;volatile
 21430  0001B2                     
 21431                           ;main.c: 234: ADCON0 = (9<<2) + 1;
 21432  0001B2  0E25               	movlw	37
 21433  0001B4  6EC2               	movwf	4034,c	;volatile
 21434  0001B6                     
 21435                           ;main.c: 238: if ((80 - 1) == adc_series_counter) {
 21436  0001B6  5049               	movf	_adc_series_counter,w,c
 21437  0001B8  0A4F               	xorlw	79
 21438  0001BA  A4D8               	btfss	status,2,c
 21439  0001BC  D001               	goto	i1u725_21
 21440  0001BE  D001               	goto	i1u725_20
 21441  0001C0                     i1u725_21:
 21442  0001C0  D068               	goto	i1l9268
 21443  0001C2                     i1u725_20:
 21444  0001C2                     
 21445                           ;main.c: 239: adc_conversion_flags |= 1 << 3;
 21446  0001C2  0100               	movlb	0	; () banked
 21447  0001C4  87B3               	bsf	_adc_conversion_flags& (0+255),3,b
 21448  0001C6  D065               	goto	i1l9268
 21449  0001C8                     i1l9240:
 21450                           
 21451                           ;main.c: 245: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21452  0001C8  5049               	movf	_adc_series_counter,w,c
 21453  0001CA  0D0C               	mullw	12
 21454  0001CC  0EAA               	movlw	low (_adc+8)
 21455  0001CE  24F3               	addwf	prodl,w,c
 21456  0001D0  6ED9               	movwf	fsr2l,c
 21457  0001D2  0E01               	movlw	high (_adc+8)
 21458  0001D4  20F4               	addwfc	prodh,w,c
 21459  0001D6  6EDA               	movwf	fsr2h,c
 21460  0001D8  CFC4 FFDF          	movff	4036,indf2	;volatile
 21461                           
 21462                           ;main.c: 246: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21463  0001DC  5049               	movf	_adc_series_counter,w,c
 21464  0001DE  0D0C               	mullw	12
 21465  0001E0  0EAB               	movlw	low (_adc+9)
 21466  0001E2  24F3               	addwf	prodl,w,c
 21467  0001E4  6ED9               	movwf	fsr2l,c
 21468  0001E6  0E01               	movlw	high (_adc+9)
 21469  0001E8  20F4               	addwfc	prodh,w,c
 21470  0001EA  6EDA               	movwf	fsr2h,c
 21471  0001EC  CFC3 FFDF          	movff	4035,indf2	;volatile
 21472  0001F0                     
 21473                           ;main.c: 248: ADCON0 = (8<<2) + 1;
 21474  0001F0  0E21               	movlw	33
 21475  0001F2  6EC2               	movwf	4034,c	;volatile
 21476  0001F4                     
 21477                           ;main.c: 252: if ((80 - 1) == adc_series_counter) {
 21478  0001F4  5049               	movf	_adc_series_counter,w,c
 21479  0001F6  0A4F               	xorlw	79
 21480  0001F8  A4D8               	btfss	status,2,c
 21481  0001FA  D001               	goto	i1u726_21
 21482  0001FC  D001               	goto	i1u726_20
 21483  0001FE                     i1u726_21:
 21484  0001FE  D049               	goto	i1l9268
 21485  000200                     i1u726_20:
 21486  000200                     
 21487                           ;main.c: 253: adc_conversion_flags |= 1 << 4;
 21488  000200  0100               	movlb	0	; () banked
 21489  000202  89B3               	bsf	_adc_conversion_flags& (0+255),4,b
 21490  000204  D046               	goto	i1l9268
 21491  000206                     i1l9248:
 21492                           
 21493                           ;main.c: 259: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21494  000206  5049               	movf	_adc_series_counter,w,c
 21495  000208  0D0C               	mullw	12
 21496  00020A  0EAC               	movlw	low (_adc+10)
 21497  00020C  24F3               	addwf	prodl,w,c
 21498  00020E  6ED9               	movwf	fsr2l,c
 21499  000210  0E01               	movlw	high (_adc+10)
 21500  000212  20F4               	addwfc	prodh,w,c
 21501  000214  6EDA               	movwf	fsr2h,c
 21502  000216  CFC4 FFDF          	movff	4036,indf2	;volatile
 21503                           
 21504                           ;main.c: 260: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21505  00021A  5049               	movf	_adc_series_counter,w,c
 21506  00021C  0D0C               	mullw	12
 21507  00021E  0EAD               	movlw	low (_adc+11)
 21508  000220  24F3               	addwf	prodl,w,c
 21509  000222  6ED9               	movwf	fsr2l,c
 21510  000224  0E01               	movlw	high (_adc+11)
 21511  000226  20F4               	addwfc	prodh,w,c
 21512  000228  6EDA               	movwf	fsr2h,c
 21513  00022A  CFC3 FFDF          	movff	4035,indf2	;volatile
 21514  00022E                     
 21515                           ;main.c: 262: ADCON0 = (10<<2) + 1;
 21516  00022E  0E29               	movlw	41
 21517  000230  6EC2               	movwf	4034,c	;volatile
 21518  000232                     
 21519                           ;main.c: 266: if ((80 - 1) == adc_series_counter) {
 21520  000232  5049               	movf	_adc_series_counter,w,c
 21521  000234  0A4F               	xorlw	79
 21522  000236  A4D8               	btfss	status,2,c
 21523  000238  D001               	goto	i1u727_21
 21524  00023A  D001               	goto	i1u727_20
 21525  00023C                     i1u727_21:
 21526  00023C  D002               	goto	i1l161
 21527  00023E                     i1u727_20:
 21528  00023E                     
 21529                           ;main.c: 267: adc_conversion_flags |= 1 << 5;
 21530  00023E  0100               	movlb	0	; () banked
 21531  000240  8BB3               	bsf	_adc_conversion_flags& (0+255),5,b
 21532  000242                     i1l161:
 21533                           
 21534                           ;main.c: 268: }
 21535                           ;main.c: 271: adc_series_counter++;
 21536  000242  2A49               	incf	_adc_series_counter,f,c
 21537  000244                     
 21538                           ;main.c: 272: if (adc_series_counter >= 80) {
 21539  000244  0E4F               	movlw	79
 21540  000246  6449               	cpfsgt	_adc_series_counter,c
 21541  000248  D001               	goto	i1u728_21
 21542  00024A  D001               	goto	i1u728_20
 21543  00024C                     i1u728_21:
 21544  00024C  D022               	goto	i1l9268
 21545  00024E                     i1u728_20:
 21546  00024E                     i1l9258:
 21547                           
 21548                           ;main.c: 273: adc_series_counter = 0;
 21549  00024E  6A49               	clrf	_adc_series_counter,c
 21550  000250  D020               	goto	i1l9268
 21551  000252                     i1l9260:
 21552                           
 21553                           ;main.c: 279: ADCON0 = (10<<2) + 1;
 21554  000252  0E29               	movlw	41
 21555  000254  6EC2               	movwf	4034,c	;volatile
 21556  000256  D7FB               	goto	i1l9258
 21557  000258                     i1l9266:
 21558  000258  50C2               	movf	4034,w,c	;volatile
 21559  00025A  0B3C               	andlw	60
 21560  00025C  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21561  00025E  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21562                           
 21563                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21564                           ; Switch size 1, requested type "space"
 21565                           ; Number of cases is 1, Range of values is 0 to 0
 21566                           ; switch strategies available:
 21567                           ; Name         Instructions Cycles
 21568                           ; simple_byte            4     3 (average)
 21569                           ;	Chosen strategy is simple_byte
 21570  000260  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21571  000262  0A00               	xorlw	0	; case 0
 21572  000264  B4D8               	btfsc	status,2,c
 21573  000266  D001               	goto	i1l12258
 21574  000268  D7F4               	goto	i1l9260
 21575  00026A                     i1l12258:
 21576                           
 21577                           ; Switch size 1, requested type "space"
 21578                           ; Number of cases is 6, Range of values is 0 to 40
 21579                           ; switch strategies available:
 21580                           ; Name         Instructions Cycles
 21581                           ; simple_byte           19    10 (average)
 21582                           ;	Chosen strategy is simple_byte
 21583  00026A  5005               	movf	??_interrupt_at_low_vector,w,c
 21584  00026C  0A00               	xorlw	0	; case 0
 21585  00026E  B4D8               	btfsc	status,2,c
 21586  000270  D78C               	goto	i1l9232
 21587  000272  0A04               	xorlw	4	; case 4
 21588  000274  B4D8               	btfsc	status,2,c
 21589  000276  D76A               	goto	i1l9224
 21590  000278  0A0C               	xorlw	12	; case 8
 21591  00027A  B4D8               	btfsc	status,2,c
 21592  00027C  D748               	goto	i1l9216
 21593  00027E  0A28               	xorlw	40	; case 32
 21594  000280  B4D8               	btfsc	status,2,c
 21595  000282  D7C1               	goto	i1l9248
 21596  000284  0A04               	xorlw	4	; case 36
 21597  000286  B4D8               	btfsc	status,2,c
 21598  000288  D79F               	goto	i1l9240
 21599  00028A  0A0C               	xorlw	12	; case 40
 21600  00028C  B4D8               	btfsc	status,2,c
 21601  00028E  D720               	goto	i1l9208
 21602  000290  D7E0               	goto	i1l9260
 21603  000292                     i1l9268:
 21604                           
 21605                           ;main.c: 285: ConvertADC();
 21606  000292  EC66  F02A         	call	i1_ConvertADC	;wreg free
 21607  000296                     
 21608                           ;main.c: 287: PIR1bits.ADIF = 0;
 21609  000296  9C9E               	bcf	3998,6,c	;volatile
 21610  000298                     i1l164:
 21611  000298  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21612  00029C  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21613  0002A0  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21614  0002A4  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21615  0002A8  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21616  0002AC  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21617  0002B0  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21618  0002B4  0010               	retfie	
 21619  0002B6                     __end_of_interrupt_at_low_vector:
 21620                           	opt stack 0
 21621                           tblptru	equ	0xFF8
 21622                           tblptrh	equ	0xFF7
 21623                           tblptrl	equ	0xFF6
 21624                           tablat	equ	0xFF5
 21625                           prodh	equ	0xFF4
 21626                           prodl	equ	0xFF3
 21627                           intcon	equ	0xFF2
 21628                           postinc0	equ	0xFEE
 21629                           wreg	equ	0xFE8
 21630                           indf1	equ	0xFE7
 21631                           postdec1	equ	0xFE5
 21632                           fsr1h	equ	0xFE2
 21633                           fsr1l	equ	0xFE1
 21634                           bsr	equ	0xFE0
 21635                           indf2	equ	0xFDF
 21636                           postinc2	equ	0xFDE
 21637                           postdec2	equ	0xFDD
 21638                           plusw2	equ	0xFDB
 21639                           fsr2h	equ	0xFDA
 21640                           fsr2l	equ	0xFD9
 21641                           status	equ	0xFD8
 21642                           
 21643 ;; *************** function i1_WriteTimer0 *****************
 21644 ;; Defined at:
 21645 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21646 ;; Parameters:    Size  Location     Type
 21647 ;;  timer0          2    0[COMRAM] unsigned int 
 21648 ;; Auto vars:     Size  Location     Type
 21649 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21650 ;; Return value:  Size  Location     Type
 21651 ;;		None               void
 21652 ;; Registers used:
 21653 ;;		None
 21654 ;; Tracked objects:
 21655 ;;		On entry : 0/0
 21656 ;;		On exit  : 0/0
 21657 ;;		Unchanged: 0/0
 21658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21659 ;;      Params:         2       0       0       0       0       0       0
 21660 ;;      Locals:         2       0       0       0       0       0       0
 21661 ;;      Temps:          0       0       0       0       0       0       0
 21662 ;;      Totals:         4       0       0       0       0       0       0
 21663 ;;Total ram usage:        4 bytes
 21664 ;; Hardware stack levels used:    1
 21665 ;; This function calls:
 21666 ;;		Nothing
 21667 ;; This function is called by:
 21668 ;;		_interrupt_at_low_vector
 21669 ;; This function uses a non-reentrant model
 21670 ;;
 21671                           
 21672                           	psect	text100
 21673  00546E                     __ptext100:
 21674                           	opt stack 0
 21675  00546E                     i1_WriteTimer0:
 21676                           	opt stack 21
 21677                           
 21678                           ;incstack = 0
 21679                           ;incstack = 0
 21680  00546E  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21681  005472  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21682  005476  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21683  00547A  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21684  00547E  0012               	return	
 21685  005480                     __end_ofi1_WriteTimer0:
 21686                           	opt stack 0
 21687                           tblptru	equ	0xFF8
 21688                           tblptrh	equ	0xFF7
 21689                           tblptrl	equ	0xFF6
 21690                           tablat	equ	0xFF5
 21691                           prodh	equ	0xFF4
 21692                           prodl	equ	0xFF3
 21693                           intcon	equ	0xFF2
 21694                           postinc0	equ	0xFEE
 21695                           wreg	equ	0xFE8
 21696                           indf1	equ	0xFE7
 21697                           postdec1	equ	0xFE5
 21698                           fsr1h	equ	0xFE2
 21699                           fsr1l	equ	0xFE1
 21700                           bsr	equ	0xFE0
 21701                           indf2	equ	0xFDF
 21702                           postinc2	equ	0xFDE
 21703                           postdec2	equ	0xFDD
 21704                           plusw2	equ	0xFDB
 21705                           fsr2h	equ	0xFDA
 21706                           fsr2l	equ	0xFD9
 21707                           status	equ	0xFD8
 21708                           
 21709 ;; *************** function i1_ConvertADC *****************
 21710 ;; Defined at:
 21711 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21712 ;; Parameters:    Size  Location     Type
 21713 ;;		None
 21714 ;; Auto vars:     Size  Location     Type
 21715 ;;		None
 21716 ;; Return value:  Size  Location     Type
 21717 ;;		None               void
 21718 ;; Registers used:
 21719 ;;		None
 21720 ;; Tracked objects:
 21721 ;;		On entry : 0/0
 21722 ;;		On exit  : 0/0
 21723 ;;		Unchanged: 0/0
 21724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21725 ;;      Params:         0       0       0       0       0       0       0
 21726 ;;      Locals:         0       0       0       0       0       0       0
 21727 ;;      Temps:          0       0       0       0       0       0       0
 21728 ;;      Totals:         0       0       0       0       0       0       0
 21729 ;;Total ram usage:        0 bytes
 21730 ;; Hardware stack levels used:    1
 21731 ;; This function calls:
 21732 ;;		Nothing
 21733 ;; This function is called by:
 21734 ;;		_interrupt_at_low_vector
 21735 ;; This function uses a non-reentrant model
 21736 ;;
 21737                           
 21738                           	psect	text101
 21739  0054CC                     __ptext101:
 21740                           	opt stack 0
 21741  0054CC                     i1_ConvertADC:
 21742                           	opt stack 21
 21743                           
 21744                           ;incstack = 0
 21745                           ;incstack = 0
 21746  0054CC  82C2               	bsf	4034,1,c	;volatile
 21747  0054CE  0012               	return	
 21748  0054D0                     __end_ofi1_ConvertADC:
 21749                           	opt stack 0
 21750                           tblptru	equ	0xFF8
 21751                           tblptrh	equ	0xFF7
 21752                           tblptrl	equ	0xFF6
 21753                           tablat	equ	0xFF5
 21754                           prodh	equ	0xFF4
 21755                           prodl	equ	0xFF3
 21756                           intcon	equ	0xFF2
 21757                           postinc0	equ	0xFEE
 21758                           wreg	equ	0xFE8
 21759                           indf1	equ	0xFE7
 21760                           postdec1	equ	0xFE5
 21761                           fsr1h	equ	0xFE2
 21762                           fsr1l	equ	0xFE1
 21763                           bsr	equ	0xFE0
 21764                           indf2	equ	0xFDF
 21765                           postinc2	equ	0xFDE
 21766                           postdec2	equ	0xFDD
 21767                           plusw2	equ	0xFDB
 21768                           fsr2h	equ	0xFDA
 21769                           fsr2l	equ	0xFD9
 21770                           status	equ	0xFD8
 21771                           tblptru	equ	0xFF8
 21772                           tblptrh	equ	0xFF7
 21773                           tblptrl	equ	0xFF6
 21774                           tablat	equ	0xFF5
 21775                           prodh	equ	0xFF4
 21776                           prodl	equ	0xFF3
 21777                           intcon	equ	0xFF2
 21778                           postinc0	equ	0xFEE
 21779                           wreg	equ	0xFE8
 21780                           indf1	equ	0xFE7
 21781                           postdec1	equ	0xFE5
 21782                           fsr1h	equ	0xFE2
 21783                           fsr1l	equ	0xFE1
 21784                           bsr	equ	0xFE0
 21785                           indf2	equ	0xFDF
 21786                           postinc2	equ	0xFDE
 21787                           postdec2	equ	0xFDD
 21788                           plusw2	equ	0xFDB
 21789                           fsr2h	equ	0xFDA
 21790                           fsr2l	equ	0xFD9
 21791                           status	equ	0xFD8
 21792                           
 21793                           	psect	text102
 21794  000000                     __ptext102:
 21795                           	opt stack 0
 21796                           tblptru	equ	0xFF8
 21797                           tblptrh	equ	0xFF7
 21798                           tblptrl	equ	0xFF6
 21799                           tablat	equ	0xFF5
 21800                           prodh	equ	0xFF4
 21801                           prodl	equ	0xFF3
 21802                           intcon	equ	0xFF2
 21803                           postinc0	equ	0xFEE
 21804                           wreg	equ	0xFE8
 21805                           indf1	equ	0xFE7
 21806                           postdec1	equ	0xFE5
 21807                           fsr1h	equ	0xFE2
 21808                           fsr1l	equ	0xFE1
 21809                           bsr	equ	0xFE0
 21810                           indf2	equ	0xFDF
 21811                           postinc2	equ	0xFDE
 21812                           postdec2	equ	0xFDD
 21813                           plusw2	equ	0xFDB
 21814                           fsr2h	equ	0xFDA
 21815                           fsr2l	equ	0xFD9
 21816                           status	equ	0xFD8
 21817                           
 21818                           	psect	rparam
 21819  0000                     tblptru	equ	0xFF8
 21820                           tblptrh	equ	0xFF7
 21821                           tblptrl	equ	0xFF6
 21822                           tablat	equ	0xFF5
 21823                           prodh	equ	0xFF4
 21824                           prodl	equ	0xFF3
 21825                           intcon	equ	0xFF2
 21826                           postinc0	equ	0xFEE
 21827                           wreg	equ	0xFE8
 21828                           indf1	equ	0xFE7
 21829                           postdec1	equ	0xFE5
 21830                           fsr1h	equ	0xFE2
 21831                           fsr1l	equ	0xFE1
 21832                           bsr	equ	0xFE0
 21833                           indf2	equ	0xFDF
 21834                           postinc2	equ	0xFDE
 21835                           postdec2	equ	0xFDD
 21836                           plusw2	equ	0xFDB
 21837                           fsr2h	equ	0xFDA
 21838                           fsr2l	equ	0xFD9
 21839                           status	equ	0xFD8
 21840                           tblptru	equ	0xFF8
 21841                           tblptrh	equ	0xFF7
 21842                           tblptrl	equ	0xFF6
 21843                           tablat	equ	0xFF5
 21844                           prodh	equ	0xFF4
 21845                           prodl	equ	0xFF3
 21846                           intcon	equ	0xFF2
 21847                           postinc0	equ	0xFEE
 21848                           wreg	equ	0xFE8
 21849                           indf1	equ	0xFE7
 21850                           postdec1	equ	0xFE5
 21851                           fsr1h	equ	0xFE2
 21852                           fsr1l	equ	0xFE1
 21853                           bsr	equ	0xFE0
 21854                           indf2	equ	0xFDF
 21855                           postinc2	equ	0xFDE
 21856                           postdec2	equ	0xFDD
 21857                           plusw2	equ	0xFDB
 21858                           fsr2h	equ	0xFDA
 21859                           fsr2l	equ	0xFD9
 21860                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1116
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     83     119
    BANK1           256     54     162
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___fltol
    ___lwtofl->___flpack
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___altofl->___fltol
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _vscp_readRegister->_vscp_readAppReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_writeCoeffs2Ram
    _writeCoeffs2Ram->___wmul
    ___wmul->_readEEPROM
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___flmul
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   93267
                                             82 BANK0      1     1      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              68    68      0   34702
                                             68 BANK0     14    14      0
                                              0 BANK1     54    54      0
                        _writeEEPROM
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                     _vscp_sendEvent
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             23 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     855
                                              0 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             43 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             28 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             17 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             66 COMRAM     2     2      0
                                             33 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             57 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             33 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             65 COMRAM     1     1      0
                                             22 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             47 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             65 COMRAM     4     4      0
                                             22 BANK0      6     2      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             42 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             30 BANK0      6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             22 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             65 COMRAM     1     1      0
                                             22 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             43 COMRAM    22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                      4     4      0   10599
                                             39 BANK0      4     4      0
                         _readEEPROM
                     _vscp_sendEvent
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7768
                                             39 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7542
                                             37 BANK0      2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             28 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             28 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             43 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   26960
                                             31 BANK0     27    27      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    7784
                                             51 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    3152
                                             33 COMRAM    18    17      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1260
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      1     1      0     502
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     155
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4477
                                             32 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1890
                                             20 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             18 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     254
                                             17 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     186
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     251
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4726
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     344
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1070
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0     758
                                             32 COMRAM     1     1      0
                    _writeCoeffs2Ram
 ---------------------------------------------------------------------------------
 (5) _writeCoeffs2Ram                                      9     9      0     628
                                             23 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     232
                                             17 COMRAM     6     2      4
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     7     3      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              0 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             17 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _writeCoeffs2Ram
           _readEEPROM
           ___wmul
             _readEEPROM (ARG)
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _writeCoeffs2Ram
               _readEEPROM
               ___wmul
                 _readEEPROM (ARG)
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _writeCoeffs2Ram
             _readEEPROM
             ___wmul
               _readEEPROM (ARG)
     ___lbmod
   _handle_sync
     _readEEPROM
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
   _doWork
     _writeEEPROM
     _readEEPROM
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
       ___flpack (ARG)
     ___wmul
       _readEEPROM (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     3C0      16       63.2%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     36      A2       6       63.3%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     53      77       4       74.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16B      15        0.0%
DATA                 0      0     536      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Mar 24 11:17:29 2015

                          ___asfldiv@f1p 0060                            ___altofl@sign 008E  
                           ___fldiv@cntr 003F                  __end_of_vscp_readAppReg 2338  
                           ___fldiv@sign 0041                    __end_of_sendVSCPFrame 44FC  
                           ___asflmul@mp 0042                             ___asflsub@f2 0080  
                                     PL2 1AE8                                       PL4 2A2A  
                                     PL6 1AFA                                       PL8 1B0A  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 000E  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 0011  
                    ___wmul@multiplicand 0014                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 4094                            ___asflsub@f1p 007E  
                           ___flpack@arg 000E                                      PL10 1B18  
                                    PL20 1B64                                      PL12 1B26  
                                    PL30 1B90                                      PL22 1B74  
                                    PL14 1B40                                      PL40 1BC2  
                                    PL32 3D80                                      PL24 35C0  
                                    PL16 3D6C                                      PL50 3DA2  
                                    PL42 300E                                      PL34 2FF6  
                                    PL26 3C52                                      PL18 35A2  
                                    PL60 1BE2                                      PL52 3C86  
                                    PL44 4436                                      PL36 3D90  
                                    PL28 35CE                                      PL70 4A44  
                                    PL62 3A4E                                      PL54 3784  
                                    PL46 3C60                                      PL38 1BAA  
                                    PL80 3022                                      PL72 414C  
                                    PL64 50BA                                      PL56 3C9A  
                                    PL48 3C72                                      PL82 3DB6  
                                    PL74 3234                                      PL66 1358  
                                    PL58 1BD0                                      PL84 3798  
                                    PL76 1BF4                                      PL68 413C  
                                    PL86 438A                                      PL78 1C02  
                                    PL88 3030                             ___flpack@exp 0012  
                         _Celsius2Kelvin 5064                                      l201 17BE  
                                    l208 198E                                      l224 1AE6  
                                    l321 1CA8                                      l410 2032  
                                    l323 1CB4                                      l315 1C84  
                                    l317 1C90                                      l253 4586  
                                    l245 35A0                                      l319 1C9C  
                                    l183 3F3E                                      l168 3ED0  
                                    l177 3F14                                      l522 1032  
                                    l519 0FE4                                      l295 499C  
                                    l640 5124                                      l552 52EE  
                                    l635 4FE6                                      l629 4AC8  
                                    l831 3908                                      l823 3870  
                                    l825 388E                                      l594 53BE  
                                    l851 30E2                                      l843 3232  
                                    l836 3072                                      l853 30F6  
                                    l918 5236                                      l846 3140  
                     vscp_readStdReg@reg 0014                                      l855 310A  
                                    l847 30C0                                      l857 311A  
                                    l849 30CE                                      l890 3C50  
                                    l867 31A4                                      l859 312A  
                                    l868 31BE                                      l885 3D6A  
                                    l895 4B36                             __CFG_CPB$OFF 000000  
         __size_of_vscp_handleProbeState 00C4                         setEventData@ival 0083  
                         getVSCPFrame@id 002E            __end_of_vscp_handleProbeState 421E  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                       setEventData@unit 007E                                      _adc 01A2  
                                    _exp 3242                                      _log 3A60  
                                    fsr2 000FD9                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 0074  
                           ___flmul@sign 0075                             __CFG_LVP$OFF 000000  
                          ___flpack@sign 0013                             ___fltol@exp1 007B  
                           __CFG_WDT$OFF 000000                                     l1031 4E78  
                                   l1103 4D40                                     l1107 5344  
                                   l1211 2BFE                                     l1036 52AA  
                                   l1301 4C0C                                     l1054 4208  
                                   l1046 4218                                     l1055 41E8  
                                   l1047 41A2                                     l1090 50F8  
                                   l1315 5326                                     l1083 5286  
                                   l1147 52CC                                     l1235 2D82  
                                   l1316 5328                                     l1236 2D96  
                                   l1237 2DD2                                     l1094 5178  
                                   l1246 2E0E                                     l1270 2FF4  
                                   l1079 4F74                                     l1089 50EC  
                                   l1177 377E                                     l1604 39E4  
                                   l1621 4652                                     l1278 51A2  
                                   l1630 4CA8                                     l1702 46F6  
                                   l1551 42E8                                     l1552 4388  
                                   l1562 434A                                     l1556 431C  
                                   l1636 413A                                     l1580 32F0  
                                   l1629 4C8A                                     l1581 3414  
                                   l1590 3A4C                                     l1670 3DF4  
                                   l1671 3EBA                                     l1593 3954  
                                   l1673 3EAA                                     l1577 3424  
                                   l1682 4834                                     l1589 392C  
                                   l1698 4950                  __end_of_doOneSecondWork 35A2  
                                   l1869 3B8C                vscp_getManufacturerId@idx 0012  
                                   l8300 30AA                                     ?_exp 0099  
                                   ?_log 0081                                     l8400 321C  
                                   l8306 30AE                                     l8170 5102  
                                   l8082 534C                                     l8412 53CC  
                                   l8350 3154                                     l8174 5106  
                                   l8158 4A6C                                     l9142 51C4  
                                   l9134 51AE                                     l8360 3174  
                                   l8450 4AF6                                     l8442 4AD0  
                                   l8282 3060                                     l8452 4B00  
                                   l8444 4AD8                                     l8460 4B18  
                                   l8292 308A                                     l8454 4B06  
                                   l8446 4AE2                                     l8456 4B0C  
                                   l8448 4AEC                                     l8474 3BEC  
                                   l8386 31EC                                     l8394 3206  
                                   l8378 31C0                                     l8298 30A0  
                                   l9700 2A48                                     l9622 415C  
                                   l9702 2A4E                                     l9800 2B62  
                                   l9704 2A54                                     l9810 2B96  
                                   l9706 2A5A                                     l9572 5296  
                                   l9660 41C2                                     l9636 417C  
                                   l9820 2BCA                                     l9740 2AA0  
                                   l9724 2A92                                     l9662 41C6  
                                   l9638 4184                                     l9726 2A98  
                                   l9656 41BE                                     l9832 2C02  
                                   l9760 2AC6                                     l9586 2990  
                                   l9930 2D76                                     l9914 2D56  
                                   l9842 2C48                                     l9834 2C20  
                                   l9692 420C                                     l9852 2CA8  
                                   l9950 2D98                                     l9870 2CD0  
                                   l9838 2C30                                     l9790 2B2E  
                                   l9774 2AD2                                     l9880 2CF4  
                                   l9872 2CDA                                     l9848 2C92  
                                   l9962 2DBE                                     l9698 2A42  
                                   l9980 2DEE                                     l9868 2CCE  
                                   l9966 2DC6                                     l9958 2DB6  
                                   l9886 2D24                                     l9976 2DD4  
                                   l9898 2D36              __size_of_vscp_getMatrixInfo 001A  
                         sendCANFrame@id 003C                                     u5450 4ABC  
                                   u5455 4AB2                                     u5625 3068  
                                   u5627 306A                                     u8244 34A0  
                                   u8245 349C                                     u9135 3CD2  
                                   u5945 3BB4                                     u9145 3CE2  
                                   u5955 3BC4                                     u9155 3D00  
                                   u5965 3BF0                                     u8294 3524  
                                   u8295 3520                           sendCANFrame@rv 0042  
                                   u9620 36FC                                     u8760 33D8  
                                   u9625 36FA                                     u9650 3746  
                                   u8780 3A74                                     u9655 3744  
                                   u8995 4486                         ??_ECANInitialize 000F  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 0012  
                                   ___IT 000101                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 3EBC  
                                   _init 4FEE                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     exp@x 0099  
                                   log@x 0081                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 066E  
                            _vscp_minute 00B9                              _vscp_second 0051  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 02B6            __size_of_vscp_doOneSecondWork 004C  
                      vscp_getUserID@idx 0012                    __size_of_vscp_setGUID 0022  
                       _vscp_writeStdReg 35EA                              _writeEEPROM 521A  
              ECANReceiveMessage@dataLen 0016                    getVSCPFrame@pPriority 0026  
                        __end_of_OpenADC 4C10                          _sh_coefficients 0123  
                   __end_of_getVSCPFrame 4ACA                                    ??_exp 0046  
                                  ??_log 0043              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 0010                         __RegsToCANID@ptr 000E  
                 __end_of_Celsius2Kelvin 5098                     __size_of_getCANFrame 002C  
                                  l10002 2E10                                    l10110 2F94  
                                  l10016 2E38                                    l11010 1334  
                                  l10034 2E7C                                    l10026 2E5A  
                                  l10202 3572                                    l10132 49A8  
                                  l10124 4954                                    l10204 357C  
                                  l11110 380A                                    l11006 1322  
                                  l11014 1354                                    l10062 2EC6  
                                  l10054 2E90                                    l10038 2E80  
                                  l10214 3598                                    l10150 3432  
                                  l10230 4D16                                    l11104 37FA  
                                  l11008 1324                                    l10136 49BC  
                                  l10128 4978                                    l10160 3476  
                                  l10240 4D28                                    l12000 3F24  
                                  l11122 3834                                    l11026 52DA  
                                  l10066 2EE2                                    l10058 2EB0  
                                  l10138 49C8                                    l12010 3F42  
                                  l11132 3874                                    l11300 4014  
                                  l10084 2F1C                                    l10076 2F02  
                                  l10236 4D20                                    l10420 3260  
                                  l12012 3F5A                                    l11310 4036  
                                  l10502 4532                                    l10430 32BE  
                                  l12110 1834                                    l12030 3F86  
                                  l12006 3F38                                    l10600 1CEA  
                                  l11144 38BE                                    l11152 38D8  
                                  l10088 2F44                                    l10176 34EE  
                                  l12200 1ADC                                    l12040 3FA6  
                                  _B0CON 000E20                                    l10610 1D26  
                                  l10602 1CF6                                    l11138 3890  
                                  l11162 38FE                                    l11090 4FE2  
                                  l11218 4F6C                                    l11330 4070  
                                  l11322 4058                                    l11314 4042  
                                  l11306 402A                                    l10506 456A  
                                  l10178 34F8                                    l10426 3294  
                                  l12130 18D2                                    l12122 184C  
                                  l12050 13A0                                    l10700 1ECA  
                                  l10620 1D62                                    l10612 1D32  
                                  l10604 1D02                                    l11180 3CF8  
                                  l11164 3900                                    l10188 3514  
                                  l12108 1824                                    l12036 3F9E  
                                  l10710 1F06                                    l10702 1ED6  
                                  l10630 1D9E                                    l10622 1D6E  
                                  l10614 1D3E                                    l10606 1D0E  
                                  l10542 46FC                                    l10526 4EBE  
                                  l11158 38FA                                    l11086 4FB8  
                                  l11326 4064                                    l11318 404C  
                                  l11262 533E                                    l11350 52C2  
                                  l10446 33E2                                    l11502 42B4  
                                  l12150 1960                                    l10720 1F42  
                                  l10712 1F12                                    l10704 1EE2  
                                  l10640 1DDA                                    l10632 1DAA  
                                  l10624 1D7A                                    l10616 1D4A  
                                  l10608 1D1A                                    l11336 4086  
                                  l11280 3FD6                                    l11272 3FC2  
                                  l10800 06A0                                    l11408 3706  
                                  l11600 45B8                                    l12152 196A  
                                  l12128 18CC                                    _B1CON 000E30  
                                  l10730 1F7E                                    l10722 1F4E  
                                  l10714 1F1E                                    l10706 1EEE  
                                  l10650 1E16                                    l10642 1DE6  
                                  l10634 1DB6                                    l10626 1D86  
                                  l10618 1D56                                    l10570 1C42  
                                  l11338 4090                                    l10810 072C  
                                  l10802 06BC                                    l11426 3764  
                                  l11418 374E                                    l11362 3614  
                                  l11530 393E                                    l10458 3A7E  
                                  l11506 42C8                                    l12058 13C2  
                                  l10740 1FBA                                    l10732 1F8A  
                                  l10724 1F5A                                    l10716 1F2A  
                                  l10708 1EFA                                    l10660 1E52  
                                  l10652 1E22                                    l10644 1DF2  
                                  l10636 1DC2                                    l10628 1D92  
                                  l10580 1C7E                                    l10572 1C4E  
                                  l10564 1C1E                                    l11444 42F2  
                                  l10548 4702                                    l11292 3FF8  
                                  l11284 3FE0                                    l11276 3FCC  
                                  l10900 0C0A                                    l10820 07B8  
                                  l10812 0748                                    l10804 06D8  
                                  l11436 3780                                    l11604 45CC  
                                  l11516 4E38                                    l10750 1FF6  
                                  l10742 1FC6                                    l10734 1F96  
                                  l10726 1F66                                    l10718 1F36  
                                  l10670 1E8E                                    l10662 1E5E  
                                  l10654 1E2E                                    l10646 1DFE  
                                  l10638 1DCE                                    l10582 1C8A  
                                  l10574 1C5A                                    l10566 1C2A  
                                  l11454 4332                                    l11446 42F6  
                                  l10910 0C8C                                    l10902 0C24  
                                  l10830 0844                                    l10822 07D4  
                                  l10814 0764                                    l10806 06F4  
                                  l11382 366E                                    l11374 3650  
                                  l11710 3DFE                                    l12190 1AB8  
                                  l12166 1A16                                    l10760 2036  
                                  l10752 2002                                    l10744 1FD2  
                                  l10736 1FA2                                    l10728 1F72  
                                  l10672 1E9A                                    l10664 1E6A  
                                  l10656 1E3A                                    l10648 1E0A  
                                  l10592 1CBA                                    l10584 1C96  
                                  l10576 1C66                                    l10568 1C36  
                                  l11456 433E                                    l11448 430E  
                                  l11640 40A2                                    l11296 4004  
                                  l11288 3FEC                                    l10920 0D0E  
                                  l10912 0CA6                                    l10904 0C3E  
                                  l10840 08D0                                    l10832 0860  
                                  l10824 07F0                                    l10816 0780  
                                  l10808 0710                                    l11384 3672  
                                  l11368 3634                                    l11560 39A8  
                                  l11552 3980                                    l11536 3966  
                                  l11624 4618                                    l11616 45EA  
                                  l11480 4250                                    l12168 1A1C  
                                  _B2CON 000E40                                    l10762 2042  
                                  l10754 200E                                    l10746 1FDE  
                                  l10738 1FAE                                    l10674 1EA6  
                                  l10666 1E76                                    l10658 1E46  
                                  l10594 1CC6                                    l10586 1CA2  
                                  l10578 1C72                                    l10930 0D90  
                                  l10922 0D28                                    l10914 0CC0  
                                  l10906 0C58                                    l10850 095C  
                                  l10842 08EC                                    l10834 087C  
                                  l10826 080C                                    l10818 079C  
                                  l11386 3688                                    l11570 39D2  
                                  l11562 39B0                                    l11802 47A4  
                                  l11714 3E1A                                    l11722 43B2  
                                  l11490 4278                                    l11474 4238  
                                  l10756 201A                                    l10748 1FEA  
                                  l10676 1EB2                                    l10668 1E82  
                                  l10596 1CD2                                    l10588 1CAE  
                                  l11660 40E6                                    l11644 40B8  
                                  l10940 0E12                                    l10932 0DAA  
                                  l10924 0D42                                    l10916 0CDA  
                                  l10908 0C72                                    l10860 09E8  
                                  l10852 0978                                    l10844 0908  
                                  l10836 0898                                    l10828 0828  
                                  l11580 3A02                                    l11572 39DE  
                                  l11564 39B6                                    l11804 47AE  
                                  l11724 441C                                    l12188 1AAE  
                                  l10782 230A                                    l10774 22F6  
                                  l10758 2026                                    l10678 1EBE  
                                  l10598 1CDE                                    l10790 2334  
                                  l10766 204E                                    l10950 0E94  
                                  l10942 0E2C                                    l10934 0DC4  
                                  l10926 0D5C                                    l10918 0CF4  
                                  l10870 0A74                                    l10862 0A04  
                                  l10854 0994                                    l10846 0924  
                                  l10838 08B4                                    l11398 36BC  
                                  l11558 399C                                    l11830 4810  
                                  l11822 47F8                                    l11486 4268  
                                  l10784 230C                                    l10768 22D8  
                                  l11672 4100                                    l11656 40DE  
                                  l10960 0F16                                    l10952 0EAE  
                                  l10944 0E46                                    l10936 0DDE  
                                  l10928 0D76                                    l10880 0B00  
                                  l10872 0A90                                    l10864 0A20  
                                  l10856 09B0                                    l10848 0940  
                                  l11576 39FA                                    l11752 46BE  
                                  l11488 4274                                    _B3CON 000E50  
                                  l10786 231C                                    l10970 0F98  
                                  l10962 0F30                                    l10954 0EC8  
                                  l10946 0E60                                    l10938 0DF8  
                                  l10890 0B88                                    l10882 0B1C  
                                  l10874 0AAC                                    l10866 0A3C  
                                  l10858 09CC                                    l11762 4C74  
                                  l11834 4824                                    l11826 4800  
                                  l11818 47E8                                    l11738 4694  
                                  l11498 42A6                                    l11668 40F8  
                                  l10980 1036                                    l10972 0FB2  
                                  l10964 0F4A                                    l10956 0EE2  
                                  l10948 0E7A                                    l10892 0BA2  
                                  l10884 0B38                                    l10876 0AC8  
                                  l10868 0A58                                    l11588 3A20  
                                  l11828 480C                                    l11748 46B2  
                                  l10982 1050                                    l10974 0FCC  
                                  l10966 0F64                                    l10958 0EFC  
                                  l10894 0BBC                                    l10886 0B54  
                                  l10878 0AE4                                    l10798 0684  
                                  l10990 12E2                                    l11696 503A  
                                  l10984 106A                                    l10976 0FFE  
                                  l10968 0F7E                                    l10896 0BD6  
                                  l10888 0B6E                                    l11768 4CA6  
                                  l11776 5252                                    _B4CON 000E60  
                                  l10978 1018                                    l10898 0BF0  
          __size_of_vscp_getMajorVersion 0002                                    l10988 106E  
                                  l11788 48F2                                    l11980 3EF2  
                                  l10998 130E                                    l11990 3F08  
                                  l11992 3F0E                                    l11984 3EFA  
                                  _B5CON 000E70                                    l11988 3F04  
             __end_of_vscp_goActiveState 530E                            ___fltol@sign1 007A  
                        __end_of___aldiv 42DA            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 3A4E  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                          __end_of___fldiv 4654  
                          i1_WriteTimer0 546E                          __end_of___flneg 5264  
                                  _EEADR 000FA9                          __end_of___lbmod 51CC  
                        __end_of___flmul 413C                          __end_of___flsub 4FB2  
                        __end_of___fltol 4836                  _vscp_handleDropNickname 50CA  
                                  _BSEL0 000DF8                                    u10040 45C2  
                                  u10070 40AE                                    u10170 468A  
                                  u10260 47CC                                    _T0CON 000FD5  
                                  u10265 47C2                                    u10524 1854  
                                  u10444 13AA                                    u10525 1850  
                                  u10445 13A6                                    u10624 199E  
                                  u10625 199A                                    u10554 1BBA  
                                  u10555 1BB6                                    u10574 191A  
                                  u10494 182C                                    u10575 1916  
                                  u10495 1828                                    u10674 1A68  
                                  u10675 1A64                                    i1l144 00BA  
                                  i1l161 0242                                    i1l138 0080  
                                  i1l164 0298                          sendCANFrame@dlc 0040  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                      ??_writeCoeffs2Ram 0018                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 54B2  
             _vscp_readNicknamePermanent 54A8                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                       setEventData@newval 007F  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                          ___awtofl@sign 001E                           __CFG_EBTR3$OFF 000000  
                  __end_of_sendTempEvent 4A44                             _vscp_getGUID 5400  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                                  _floor 3DC0                                    _ldexp 4654  
                           _vscp_getZone 548A                                    _frexp 48CC  
                     vscp_writeAppReg@rv 0024                _vscp_getRegisterPagesUsed 54D0  
                 __size_of_vscp_getEvent 002A                                    main@i 00B2  
                             _ConvertADC 54C8                             _vscp_setGUID 52CE  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 54D6  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 521A                              exp@exponent 00A1  
                            ldexp@newexp 0085                     _ECANSetOperationMode 53C0  
                        __initialization 4EF6                              log@exponent 0043  
                           __end_of_main 3FB0                             __end_of_init 502A  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                        ?_Celsius2Kelvin 002C                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001F                           ?i1_WriteTimer0 0001  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 0024  
                 ??_vscp_restoreDefaults 0022                                   ??_main 0046  
                                 ??_init 0022            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 0012                 ??_vscp_setManufacturerId 0012  
               _vscp_handleProtocolEvent 2A38                            __activetblptr 000002  
                      __RegsToCANID@type 0011               ECANReceiveMessage@msgFlags 0017  
                       doWork@calVoltage 016F                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_floor 008F  
                                 ?_ldexp 0081                     __size_of_handle_sync 0082  
                                 ?_frexp 000E                         __end_of___altofl 4E66  
             ECANReceiveMessage@savedPtr 0018                                   _CANCON 000F6F  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                         __end_of___flpack 438A  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                       __end_of___awtofl 5064                         ?_doOneSecondWork 0001  
                     vscp_writeStdReg@rv 0032                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 530E                                   i1l9210 00F8  
                                 i1l9202 00C4                                   i1l9220 013A  
                                 i1l9212 00FC                                   i1l9204 00C6  
                                 i1l9230 0184                                   i1l9222 0146  
                                 i1l9214 0108                                   i1l9240 01C8  
                                 i1l9232 018A                                   i1l9224 014C  
                                 i1l9216 010E                                   i1l9208 00D0  
                                 i1l9250 022E                                   i1l9242 01F0  
                                 i1l9234 01B2                                   i1l9226 0174  
                                 i1l9218 0136                                   i1l9170 0052  
                                 i1l9162 0034                                   i1l9260 0252  
                                 i1l9252 0232                                   i1l9244 01F4  
                                 i1l9236 01B6                                   i1l9228 0178  
                                 i1l9180 0086                                   i1l9172 0062  
                                 i1l9164 003C                                   i1l9270 0296  
                                 i1l9254 023E                                   i1l9246 0200  
                                 i1l9238 01C2                                   i1l9190 00AA  
                                 i1l9182 0092                                   i1l9174 0072  
                                 i1l9166 0048                                   i1l9256 0244  
                                 i1l9248 0206                                   i1l9184 009C  
                                 i1l9192 00AE                                   i1l9176 007A  
                                 i1l9168 004E                                   i1l9258 024E  
                                 i1l9266 0258                                   i1l9186 00A4  
                                 i1l9178 0084                                   i1l9268 0292  
                                 i1l9188 00A8                          _init_app_eeprom 2338  
                       __end_of___lwtofl 5150                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001C                   ECANReceiveMessage@temp 001D  
                      getVSCPFrame@pData 0028                        getVSCPFrame@pSize 0027  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 5150  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1167 0088                                   ___flge 4C5E  
                         getCANFrame@pid 0022                                ??___aldiv 0046  
                              ??___fladd 0025                                   ___wmul 5098  
                              ??___fldiv 0034                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0042                                ??___flsub 0042  
                              ??___fltol 0042                            _vscp_getEvent 517A  
                                 _doWork 1368                         OpenTimer0@config 000E  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 0012  
                    vscp_writeAppReg@reg 0023               __end_of_vscp_setSegmentCRC 5438  
                    vscp_writeAppReg@val 0021                      vscp_writeAppReg@pos 0022  
                                 clear_0 4EFE                                   clear_1 4F10  
                                 clear_2 4F1C                                   clear_3 4F28  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 0096  
                                 floor@i 0093                                   floor@x 008F  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 00BA  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 0011                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0021  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004A                       __size_of___asfldiv 004A  
                     __size_of___asflmul 004C                               ___fladd@f1 001D  
                             ___fladd@f2 0021                       __size_of___asflsub 004E  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0648                         __end_oflog@coeff 066C  
                        ___lbmod@divisor 000E                               ___altofl@c 008A  
                             ___fldiv@f1 002C                               ___fldiv@f2 0030  
                             ___fldiv@f3 003B                               __accesstop 0060  
                __end_of__initialization 4F2E                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 4B40                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                               ___flmul@f1 0060  
                             ___flmul@f2 0064                             eval_poly@res 007D  
                             ___flsub@f1 0076                               ___flsub@f2 007A  
                             ___fltol@f1 0076                          writeEEPROM@data 0010  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 52AC  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0028                      ?_Celsius2Fahrenheit 0076  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0076              __end_of_vscp_check_pstorage 52AC  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 3EBC                            __end_of_ldexp 46F8  
                          __end_of_frexp 4952                      ?_vscp_writeRegister 0034  
                             __end_ofPL2 1AFA                               __end_ofPL4 2A38  
                             __end_ofPL6 1B0A                               __end_ofPL8 1B18  
                         ??_sendCANFrame 0042                               ___lwtofl@c 0018  
             __end_of_vscp_getFamilyCode 54A8                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 01FA             __size_of_getCalibrationValue 0048  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 549E  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0034  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 1358  
                 getVSCPFrame@pvscpclass 002D                  __end_of_init_app_eeprom 2A2A  
                   ??_Celsius2Fahrenheit 0042              __end_of_vscp_setControlByte 5426  
               __end_of_vscp_writeStdReg 3784                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 0043  
                                ??_frexp 0014                            ?_setEventData 007C  
                   ??_vscp_writeRegister 0035          __end_of_vscp_handleDropNickname 50FA  
                           _getVSCPFrame 4A52                               __pbssBANK0 00B3  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 00A0               __end_of_vscp_getBufferSize 54D4  
                       Celsius2Kelvin@tc 002C                    vscp_writeRegister@reg 0035  
                 ??_ECANSetOperationMode 000E                             __IT_INT_MASK 011E  
                           __IT_SAVE_BSR 011F       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 46F8  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 54D8  
               ECANSetOperationMode@mode 000E                                  ?___wmul 0012  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                           doWork@setpoint 019A  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0011                                  _B5RXFUL 007387  
                      __end_of___asfladd 4DD6                        __end_of___asfldiv 4D8C  
                       WriteTimer0@timer 0010                                ?___altofl 008A  
                      __end_of___asflmul 4CF6                                  _ECANCON 000F77  
                      __end_of___asflsub 4C5E                                ?___flpack 000E  
                          ??_WriteTimer0 0010                         doWork@resistance 0191  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                    sendVSCPFrame@priority 0064  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72                                ?___lwtofl 0018  
                    vscp_writeStdReg@idx 0030                      vscp_writeStdReg@reg 0033  
           __end_of_vscp_doOneSecondWork 4D42                                  i1l12258 026A  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00B4  
        __end_of_interrupt_at_low_vector 02B6                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 415A                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 4ACA               __end_of_vscp_getMatrixInfo 5360  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                           ??_setEventData 0046  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                          setEventData@v 007C                       _vscp_goActiveState 52F0  
                 __size_of_sendVSCPFrame 00B2             __end_of_vscp_getMajorVersion 54DC  
                     __size_of_vscp_init 0048                vscp_writeStdReg@code_1147 002C  
                             _readEEPROM 5438                   _vscp_getManufacturerId 53D8  
                 _vscp_setManufacturerId 5360                          _ECANSendMessage 37A4  
                    ?_vscp_goActiveState 0001                                  _OpenADC 4BB4  
                                __Hparam 0000                          ??_vscp_getEvent 0032  
                       ??_Celsius2Kelvin 0030                                  __Lparam 0000  
                     _vscp_node_substate 004E               __end_of_vscp_getSegmentCRC 54BC  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
               vscp_writeStdReg@idx_1148 0031        __end_of_vscp_getRegisterPagesUsed 54D2  
               __size_of_vscp_getMDF_URL 0018                                  ___aldiv 421E  
                        __size_of___flge 004C                                  ___fladd 390A  
                                ___fldiv 45AC                                  ___flneg 5240  
                                ___lbmod 51A4                                  ___flmul 4094  
                                ___flsub 4F76                                  ___fltol 4798  
                        __size_of___wmul 0022                          getCANFrame@pdlc 0020  
                              _FIFOEMPTY 007BA7                            ?i1_ConvertADC 0001  
                        __size_of_doWork 0780                             __psmallconst 0600  
                             ??___altofl 0046                     __end_of_init_app_ram 4EF6  
                             ??___flpack 0014                       _vscp_sendHeartBeat 51F4  
                                __pcinit 4EF6                               ??___awtofl 001C  
                         _vscp_deviceURL 0600                        __end_of_eval_poly 4436  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 3EBC                                  __ptext1 1368  
                                __ptext2 5126                                  __ptext3 4D42  
                                __ptext4 4D8C                                  __ptext5 421E  
                                __ptext6 4DD6                                  __ptext7 3A60  
                                __ptext8 3242                                  __ptext9 5240  
                             ??___lwtofl 001C                           _vscp_getUserID 53EC  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 0044  
                           __size_of_exp 01E4                             __size_of_log 012E  
                  vscp_writeStdReg@value 0022                         ___aldiv@dividend 007C  
                    ?_vscp_sendHeartBeat 0044                 ??_vscp_handleSetNickname 0012  
                                _seconds 00B6                                  doWork@B 018F  
                                doWork@i 01A0                                  doWork@j 0195  
                                doWork@v 018B                      __end_of_WriteTimer0 546E  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 0014  
                     vscp_getMDF_URL@idx 000F                           OpenADC@config2 000E  
          vscp_handleProtocolEvent@bytes 008C                     end_of_initialization 4F2E  
                                exp@sign 00A3             __end_of_vscp_handleHeartbeat 4F76  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                __end_of_writeCoeffs2Ram 4798                     __end_of_sendCANFrame 4FEE  
                             doWork@Rinf 016B                       doOneSecondWork@tmp 0089  
                             doWork@temp 019C                vscp_handleProtocolEvent@i 0098  
              vscp_handleProtocolEvent@j 0099                vscp_handleProtocolEvent@k 0093  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 51CC  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 0086                                  postdec1 000FE5  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                 __size_of_sendTempEvent 0070                           _vscp_setUserID 5378  
                                postinc0 000FEE                                  postinc2 000FDE  
                         ??i1_ConvertADC 0001                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 545C              _vscp_writeNicknamePermanent 544A  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 444A  
                 __end_of_vscp_getUserID 5400             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 4EAE  
                         _vscp_probe_cnt 0050                      __end_of_getCANFrame 5126  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 0087                 __size_of_vscp_readAppReg 0728  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001A  
                       writeCoeffs2Ram@i 001D                         writeCoeffs2Ram@j 001F  
                            ___fldiv@exp 0040                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 00E4                       _vscp_setSegmentCRC 5426  
                      readEEPROM@address 000E                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 0091                  __end_of_ECANSendMessage 390A  
                      vscp_readStdReg@rv 0013                              ___lbmod@rem 0011  
                            ___flmul@exp 006F                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 3C52                      _getCalibrationValue 4DD6  
                            ?_readEEPROM 000E                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 51F4                               _vscp_error 54C4  
                   _vscp_doOneSecondWork 4CF6                       i1WriteTimer0@timer 0003  
                             _vscp_timer 011C                   __end_of_vscp_setUserID 5390  
               __size_of_doOneSecondWork 017C                   vscp_sendHeartBeat@zone 0045  
                   __end_of_setEventData 45AC                           ?_sendVSCPFrame 0060  
                         __end_of___flge 4CAA                     __size_of_writeEEPROM 0026  
                         __end_of___wmul 50BA                          ?_vscp_getUserID 0001  
                         __end_of_doWork 1AE8             __end_of_vscp_getMinorVersion 54DA  
                            _WriteTimer0 545C                     _vscp_getMajorVersion 54DA  
                     __end_of_ConvertADC 54CC                     ?_getCalibrationValue 0012  
                   ??_vscp_setSegmentCRC 0011                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 0097  
                              ___DCDelay 01A1                              __end_ofPL10 1B26  
                            __end_ofPL20 1B74                              __end_ofPL12 1B40  
                      ?_vscp_writeAppReg 0021                              __end_ofPL30 1BAA  
                            __end_ofPL22 1B90                              __end_ofPL14 1B64  
                            __end_ofPL40 1BD0                              __end_ofPL32 3D90  
                            __end_ofPL24 35CE                              __end_ofPL16 3D80  
                            __end_ofPL50 3DB6                              __end_ofPL42 3022  
                            __end_ofPL34 300E                              __end_ofPL26 3C60  
                            __end_ofPL18 35C0                              __end_ofPL60 1BF4  
                            __end_ofPL52 3C9A                              __end_ofPL44 444A  
                            __end_ofPL36 3DA2                              __end_ofPL28 35EA  
                            __end_ofPL70 4A52                              __end_ofPL62 3A60  
                            __end_ofPL54 3798                              __end_ofPL46 3C72  
                            __end_ofPL38 1BC2                              __end_ofPL80 3030  
                            __end_ofPL72 415A                              __end_ofPL64 50CA  
                            __end_ofPL56 3CAC                              __end_ofPL48 3C86  
                            __end_ofPL82 3DC0                              __end_ofPL74 3242  
                            __end_ofPL66 1368                              __end_ofPL58 1BE2  
                            __end_ofPL84 37A4                              __end_ofPL76 1C02  
                            __end_ofPL68 414C                              __end_ofPL86 4396  
                            __end_ofPL78 1C10                              __end_ofPL88 303A  
                    start_initialization 4EF6                               eval_poly@d 007A  
                             eval_poly@n 007B                               eval_poly@x 0076  
                             ldexp@value 0081          __size_of_vscp_handleSetNickname 0024  
                            __end_of_exp 3426                              __end_of_log 3B8E  
                     ??_vscp_writeAppReg 0022                            _sendTempEvent 49D4  
                      ?_vscp_writeStdReg 0022                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 000E  
                     ??_vscp_writeStdReg 0023                       _vscp_getFamilyCode 549E  
                    __end_of_handle_sync 49D4                           ??__CANIDToRegs 0015  
                     _vscp_getFamilyType 5494                               frexp@value 000E  
                    sendVSCPFrame@nodeid 0063                         ?_writeCoeffs2Ram 0001  
                      _vscp_readRegister 532C                     Celsius2Fahrenheit@tc 0076  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 0090  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 001E  
                    ?_vscp_getFamilyCode 000E                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 2FF6                          ?_vscp_setUserID 0011  
                    ?_vscp_getFamilyType 000E                    __size_of_init_app_ram 0048  
               ?_vscp_handleDropNickname 0001                   getCalibrationValue@cal 0017  
                      ??_vscp_getSubzone 0012                                 ??___flge 0016  
               __end_of__ECANPointBuffer 4B40                        __CANIDToRegs@type 0014  
                            _getCANFrame 50FA                                 ??___wmul 0016  
                               ??_doWork 00A4                       _vscp_getBufferSize 54D2  
            vscp_handleProtocolEvent@len 008D              vscp_handleProtocolEvent@pos 008B  
             __end_of_ECANReceiveMessage 3234                      ??_vscp_readRegister 0015  
         __size_of_vscp_goBootloaderMode 0018                    ?_vscp_getMajorVersion 0001  
                  ??_getCalibrationValue 0014                    __end_ofi1_WriteTimer0 5480  
          __end_of_vscp_goBootloaderMode 53C0                     _vscp_handleHeartbeat 4F38  
                     __end_of_OpenTimer0 532C                        __size_of___altofl 0048  
                      __size_of___flpack 00B0                                ___asfladd 4D8C  
                    ?_vscp_getBufferSize 0001                        __size_of___awtofl 003A  
                    __size_of_readEEPROM 0012                                ___asfldiv 4D42  
                            __pbssBIGRAM 01A2                                ___asflmul 4CAA  
                              ___asflsub 4C10             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 0012                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0046                     ??_vscp_getFamilyType 0012  
                      __size_of___lwtofl 002A                          __IT_SAVE_STATUS 0120  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 016B                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004B              __size_of_Celsius2Fahrenheit 0074  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 003C  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 54D0                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 0012                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 5346                             _init_app_ram 4EAE  
                   getCalibrationValue@i 0019                              _doWork$2280 017B  
                            _doWork$2278 0173                              _doWork$2279 0177  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 0196  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 0013  
                   ??_vscp_getBufferSize 000E                             _current_temp 0100  
                              __pnvBANK1 01A1                            __IT_SAVE_WREG 0121  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5346  
                 _vscp_handleSetNickname 5264            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 4836  
                               ?___aldiv 007C                                 ?___fladd 001D  
                               ?___fldiv 002C                                __ptext100 546E  
                              __ptext101 54CC                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 0060                                 ?___flsub 0076  
                               ?___fltol 0076                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 0012                              __pintcodelo 0018  
                      ??_doOneSecondWork 0087                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1157 008F               vscp_setManufacturerId@data 0011  
                           _sendCANFrame 4FB2                              __smallconst 0600  
                             ?___asfladd 002C                        WriteTimer0@timer0 000E  
                             ?___asfldiv 0060                               ?___asflmul 0076  
                             ?___asflsub 007E                       _vscp_getSegmentCRC 54B2  
                         ??_vscp_getGUID 0012                                _eval_poly 4396  
                            _handle_sync 4952                           ??_vscp_getZone 0012  
         __end_of_vscp_getManufacturerId 53EC           __end_of_vscp_setManufacturerId 5378  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1156 008E  
                         __size_of_floor 00FC                           __size_of_ldexp 00A4  
                         ??_vscp_setGUID 0012                           __size_of_frexp 0086  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 011A                     vscp_writeStdReg@code 0028  
                        ___aldiv@divisor 0080                          ___aldiv@counter 0084  
                         ___wmul@product 0016                   ??_vscp_doOneSecondWork 007F  
                 sendVSCPFrame@vscpclass 0060                            OpenADC@config 0012  
                   _vscp_getMinorVersion 54D8                                _sendTimer 004A  
                               _PIE1bits 000F9D                                _low_alarm 00B5  
                  __size_of_setEventData 00B0                   __end_of_ECANInitialize 48CC  
                               i1u720_20 00C2                                 i1u720_21 00C0  
                               i1u721_20 00CE                                 i1u721_21 00CC  
                               i1u722_20 0108                                 i1u714_20 003C  
                               i1u722_21 0106                                 i1u714_21 003A  
                               i1u723_20 0146                                 i1u715_20 007A  
                               i1u723_21 0144                                 i1u715_21 0078  
                               i1u724_20 0184                                 i1u716_20 0092  
                               i1u724_21 0182                                 i1u716_21 0090  
                               i1u725_20 01C2                                 i1u717_20 009C  
                               i1u725_21 01C0                                 i1u717_21 009A  
                               i1u726_20 0200                                 i1u718_20 00A4  
                               i1u726_21 01FE                                 i1u718_21 00A2  
                               i1u727_20 023E                                 i1u719_20 00B8  
                               i1u727_21 023C                                 i1u719_21 00B6  
                               i1u728_20 024E                                 i1u728_21 024C  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 51A4                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 0012                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 3D6C  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 0012  
                           __RegsToCANID 3B8E                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0085              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 0076                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 4E66                                _vscp_imsg 00BC  
                              _vscp_hour 00B7                                _vscp_omsg 00CA  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 05BE  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 44FC               __size_of_vscp_readRegister 001A  
                               ___DCByte 0122                        _measurement_clock 0112  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 0010  
               __size_of_init_app_eeprom 06F2             __end_of_vscp_restoreDefaults 54C4  
                              frexp@eptr 0012                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                                 __Hrparam 0000  
                   ECANReceiveMessage@id 001A                             _seconds_temp 010C  
            __size_of_vscp_sendHeartBeat 0026                         __size_of_OpenADC 005C  
                       ??_vscp_getUserID 0012                          _vscp_getMDF_URL 5390  
                               __Lrparam 0000                         __CANIDToRegs@val 0010  
                       __CANIDToRegs@ptr 000E                         __size_of___aldiv 00BC  
                       __size_of___fladd 0144                         __size_of___fldiv 00A8  
                       __size_of___flneg 0024                         _vscp_initledfunc 004D  
                       __size_of___lbmod 0028                         __size_of___flmul 00A8  
                 ??_vscp_handleHeartbeat 0012                         __size_of___flsub 003C  
                       __size_of___fltol 009E                                 ___altofl 4E1E  
                               ___flpack 42DA                         getCANFrame@flags 0023  
                           ?_WriteTimer0 000E                                 ___awtofl 502A  
                       getCANFrame@pdata 0021                                 ___lwtofl 5126  
                         sendTempEvent@i 0086                  __size_of_Celsius2Kelvin 0034  
                            ??___asfladd 0032                              ??___asfldiv 0042  
                            ??___asflmul 0042                                 _exp$2284 009D  
                            ??___asflsub 0042                       __end_of_readEEPROM 544A  
                  __size_ofi1_ConvertADC 0004                               ?_vscp_init 0001  
                               __ptext10 4654                                 __ptext11 4396  
                               __ptext20 45AC                                 __ptext12 3DC0  
                               __ptext21 4CF6                                 __ptext13 4798  
                               __ptext30 4B40                                 __ptext22 51F4  
                               __ptext14 48CC                                 __ptext31 390A  
                               __ptext23 5480                                 __ptext15 4C5E  
                               __ptext40 549E                                 __ptext32 5064  
                               __ptext24 548A                                 __ptext16 4E1E  
                               __ptext41 5360                                 __ptext33 2A38  
                               __ptext25 3426                                 __ptext17 4C10  
                               __ptext50 53D8                                 __ptext42 5378  
                               __ptext34 51A4                                 __ptext26 54C4  
                               __ptext18 4F76                                 __ptext51 53EC  
                               __ptext43 52CE                                 __ptext35 52AC  
                               __ptext27 4952                                 __ptext19 4CAA  
                               __ptext60 54A8                                 __ptext52 5390  
                               __ptext44 066E                                 __ptext36 35EA  
                               __ptext28 49D4                                 __ptext61 5264  
                               __ptext53 5400                                 __ptext45 532C  
                               __ptext37 54BC                                 __ptext29 44FC  
                               __ptext70 37A4                                 __ptext62 4F38  
                               __ptext54 54D6                                 __ptext46 3FB0  
                               __ptext38 2338                                 __ptext71 3CAC  
                               __ptext63 53A8                                 __ptext55 54D8  
                               __ptext47 54D0                                 __ptext39 5494  
                               __ptext80 5426                                 __ptext72 517A  
                               __ptext64 5346                                 __ptext56 54DA  
                               __ptext48 54D2                                 __ptext81 54B2  
                               __ptext73 4A52                                 __ptext65 415A  
                               __ptext57 5150                                 __ptext49 54D4  
                               __ptext90 4EAE                                 __ptext82 5438  
                               __ptext74 50FA                                 __ptext66 52F0  
                               __ptext58 50CA                                 __ptext91 46F8  
                               __ptext83 544A                                 __ptext75 303A  
                               __ptext67 51CC                                 __ptext59 4E66  
                               __ptext92 5098                                 __ptext84 521A  
                               __ptext76 3B8E                                 __ptext68 444A  
                               __ptext93 54C8                                 __ptext85 4FEE  
                               __ptext77 4ACA                                 __ptext69 4FB2  
                               __ptext94 545C                                 __ptext86 4836  
                               __ptext78 5288                                 __ptext95 502A  
                               __ptext87 53C0                                 __ptext79 5414  
                               __ptext96 4094                                 __ptext88 4BB4  
                               __ptext97 42DA                                 __ptext89 530E  
                               __ptext98 1C10           vscp_goBootloaderMode@algorithm 0011  
              vscp_sendHeartBeat@subzone 0044                            ?_getVSCPFrame 0024  
                       ??_vscp_sendEvent 0043                          _vscp_getSubzone 5480  
                       ??_vscp_setUserID 0012                            __size_of_main 00F4  
                          __size_of_init 003C                __size_of_vscp_writeAppReg 0CEA  
                    _vscp_check_pstorage 5288                            init_app_ram@i 0021  
         vscp_handleProtocolEvent@i_1155 0095           vscp_handleProtocolEvent@i_1158 0097  
         vscp_handleProtocolEvent@i_1166 0092                         doOneSecondWork@i 008A  
                   __end_of_vscp_getGUID 5414                            ??_writeEEPROM 0011  
              __size_of_vscp_writeStdReg 019A                      ECANSendMessage@data 001C  
               ECANSendMessage@tempBSEL0 0035                             ?_getCANFrame 0020  
                    ECANSendMessage@mode 0032                     __end_of_vscp_getZone 5494  
                    ECANSendMessage@temp 0038                        ?__ECANPointBuffer 000E  
                      vscp_setUserID@idx 0012                     __end_of_vscp_setGUID 52F0  
                     vscp_readAppReg@reg 0013                       vscp_readAppReg@pos 0012  
                           i1_ConvertADC 54CC                         vscp_sendEvent@rv 0043  
                     ??__ECANPointBuffer 0011           vscp_handleProtocolEvent@offset 008A  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 0012  
                       init_app_eeprom@i 0011                      _vscp_setControlByte 5414  
                               exp@coeff 0620                    ___flmul@f3_as_product 0070  
                               log@coeff 0648              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 1C10                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2                              ??_eval_poly 0042  
           ??_vscp_readNicknamePermanent 0012                      ECANReceiveMessage@i 001B  
                        _vscp_guid_reset 004C                          _vscp_readStdReg 3FB0  
           vscp_handleDropNickname@bytes 0012               __end_of_vscp_newNodeOnline 517A  
                     _ECANReceiveMessage 303A                           ??_getVSCPFrame 0029  
                        _vscp_initbtncnt 00B8                          sendVSCPFrame@id 007B  
                               intlevel1 0000                   ??_vscp_getMinorVersion 000E  
                vscp_getMatrixInfo@pData 000E                  __end_of_vscp_getMDF_URL 53A8  
                   ?_vscp_setControlByte 0001                            _timeout_clock 0116  
                    ?_ECANReceiveMessage 0015                  ?_vscp_handleSetNickname 0001  
       __size_of_vscp_getSubMinorVersion 0002                          _vscp_node_state 00BB  
                           handle_sync@i 0089                          _doOneSecondWork 3426  
                           ??_vscp_error 000E                  ECANSendMessage@msgFlags 001E  
                    vscp_getMatrixInfo@i 000F                  vscp_setControlByte@ctrl 0011  
            __end_of_getCalibrationValue 4E1E                       ECANSendMessage@ptr 003A  
                      ??_init_app_eeprom 0011                    __size_of__CANIDToRegs 00C0  
                         readEEPROM@data 0011                 __size_of_writeCoeffs2Ram 00A0  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 54D6  
            _vscp_getBootLoaderAlgorithm 54D4         __size_of_interrupt_at_low_vector 029E  
                 ECANSendMessage@dataLen 001D                      __end_of_writeEEPROM 5240  
                    __ECANPointBuffer@pt 0012                     ??_ECANReceiveMessage 0018  
                  ??_vscp_check_pstorage 0012                   ECANSendMessage@buffers 0033  
                  _vscp_goBootloaderMode 53A8               __end_of_Celsius2Fahrenheit 4BB4  
           __end_of_ECANSetOperationMode 53D8                     _vscp_restoreDefaults 54BC  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 0012  
                __end_of_vscp_getSubzone 548A                             ?_handle_sync 0001  
            __size_of_vscp_getFamilyType 000A                             ___aldiv@sign 0085  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 52CE  
                     __end_of_vscp_error 54C8                   ECANSendMessage@tempPtr 0036  
                   _adc_conversion_flags 00B3           __end_of_vscp_handleSetNickname 5288  
     vscp_handleProtocolEvent@bytes_1163 0094                    ??_vscp_setControlByte 0011  
                   vscp_readRegister@reg 0015                             ___fladd@exp1 002B  
                           ___fladd@exp2 002A                             ___fladd@sign 0029  
                           __CANIDToRegs 3CAC                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 0086                            ___asfladd@f1p 002C  
            __size_of_vscp_getBufferSize 0002                             ___asfladd@f2 002E  
               __size_of_ECANSendMessage 0166                             ___asfldiv@f2 0062  

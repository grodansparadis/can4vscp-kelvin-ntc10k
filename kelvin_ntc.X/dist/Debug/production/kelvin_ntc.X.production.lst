

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Sep 14 10:01:01 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119                           	psect	pa_nodes,global,class=CODE,delta=1
   120  0000                     tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           prodh	equ	0xFF4
   124                           prodl	equ	0xFF3
   125                           intcon	equ	0xFF2
   126                           wreg	equ	0xFE8
   127                           indf1	equ	0xFE7
   128                           fsr1h	equ	0xFE2
   129                           fsr1l	equ	0xFE1
   130                           indf2	equ	0xFDF
   131                           postinc2	equ	0xFDE
   132                           postdec2	equ	0xFDD
   133                           plusw2	equ	0xFDB
   134                           fsr2h	equ	0xFDA
   135                           fsr2l	equ	0xFD9
   136                           status	equ	0xFD8
   137                           
   138                           	psect	smallconst
   139  000600                     __psmallconst:
   140                           	opt stack 0
   141  000600                     _vscp_deviceURL:
   142                           	opt stack 0
   143  000600  77                 	db	119
   144  000601  77                 	db	119
   145  000602  77                 	db	119
   146  000603  2E                 	db	46
   147  000604  65                 	db	101
   148  000605  75                 	db	117
   149  000606  72                 	db	114
   150  000607  6F                 	db	111
   151  000608  73                 	db	115
   152  000609  6F                 	db	111
   153  00060A  75                 	db	117
   154  00060B  72                 	db	114
   155  00060C  63                 	db	99
   156  00060D  65                 	db	101
   157  00060E  2E                 	db	46
   158  00060F  73                 	db	115
   159  000610  65                 	db	101
   160  000611  2F                 	db	47
   161  000612  6E                 	db	110
   162  000613  74                 	db	116
   163  000614  63                 	db	99
   164  000615  31                 	db	49
   165  000616  30                 	db	48
   166  000617  4B                 	db	75
   167  000618  41                 	db	65
   168  000619  5F                 	db	95
   169  00061A  33                 	db	51
   170  00061B  2E                 	db	46
   171  00061C  78                 	db	120
   172  00061D  6D                 	db	109
   173  00061E  6C                 	db	108
   174  00061F  00                 	db	0
   175  000620                     __end_of_vscp_deviceURL:
   176                           	opt stack 0
   177  000620                     exp@coeff:
   178                           	opt stack 0
   179  000620  0000               	dw	0
   180  000622  3F80               	dw	16256
   181  000624  7218               	dw	29208
   182  000626  3F31               	dw	16177
   183  000628  FDF0               	dw	65008
   184  00062A  3E75               	dw	15989
   185  00062C  5847               	dw	22599
   186  00062E  3D63               	dw	15715
   187  000630  9558               	dw	38232
   188  000632  3C1D               	dw	15389
   189  000634  C482               	dw	50306
   190  000636  3AAE               	dw	15022
   191  000638  78A8               	dw	30888
   192  00063A  3921               	dw	14625
   193  00063C  93EF               	dw	37871
   194  00063E  3780               	dw	14208
   195  000640  92A0               	dw	37536
   196  000642  35A7               	dw	13735
   197  000644  5646               	dw	22086
   198  000646  3415               	dw	13333
   199  000648                     __end_ofexp@coeff:
   200                           	opt stack 0
   201  000648                     log@coeff:
   202                           	opt stack 0
   203  000648  0000               	dw	0
   204  00064A  0000               	dw	0
   205  00064C  FFC4               	dw	65476
   206  00064E  3F7F               	dw	16255
   207  000650  EF80               	dw	61312
   208  000652  BEFF               	dw	48895
   209  000654  E190               	dw	57744
   210  000656  3EA9               	dw	16041
   211  000658  82EC               	dw	33516
   212  00065A  BE76               	dw	48758
   213  00065C  AD82               	dw	44418
   214  00065E  3E2B               	dw	15915
   215  000660  3C0E               	dw	15374
   216  000662  BDC3               	dw	48579
   217  000664  D187               	dw	53639
   218  000666  3D13               	dw	15635
   219  000668  7841               	dw	30785
   220  00066A  BBD3               	dw	48083
   221  00066C                     __end_oflog@coeff:
   222                           	opt stack 0
   223  0000                     _ADCON0	set	4034
   224  0000                     _ADCON0bits	set	4034
   225  0000                     _ADCON1	set	4033
   226  0000                     _ADCON2	set	4032
   227  0000                     _ADRESH	set	4036
   228  0000                     _ADRESL	set	4035
   229  0000                     _BRGCON1	set	3952
   230  0000                     _BRGCON2	set	3953
   231  0000                     _BRGCON3	set	3954
   232  0000                     _BSEL0	set	3576
   233  0000                     _CANCON	set	3951
   234  0000                     _CIOCON	set	3955
   235  0000                     _ECANCON	set	3959
   236  0000                     _EEADR	set	4009
   237  0000                     _EECON1bits	set	4006
   238  0000                     _EECON2	set	4007
   239  0000                     _EEDATA	set	4008
   240  0000                     _INTCONbits	set	4082
   241  0000                     _MSEL0	set	3568
   242  0000                     _MSEL1	set	3569
   243  0000                     _MSEL2	set	3570
   244  0000                     _PIE1bits	set	3997
   245  0000                     _PIR1bits	set	3998
   246  0000                     _PIR2bits	set	4001
   247  0000                     _PORTC	set	3970
   248  0000                     _RXB1CONbits	set	3920
   249  0000                     _RXF0EIDH	set	3842
   250  0000                     _RXF0EIDL	set	3843
   251  0000                     _RXF0SIDH	set	3840
   252  0000                     _RXF0SIDL	set	3841
   253  0000                     _RXF1EIDH	set	3846
   254  0000                     _RXF1EIDL	set	3847
   255  0000                     _RXF1SIDH	set	3844
   256  0000                     _RXF1SIDL	set	3845
   257  0000                     _RXFBCON0	set	3552
   258  0000                     _RXFBCON1	set	3553
   259  0000                     _RXFBCON2	set	3554
   260  0000                     _RXFBCON3	set	3555
   261  0000                     _RXFBCON4	set	3556
   262  0000                     _RXFBCON5	set	3557
   263  0000                     _RXFBCON6	set	3558
   264  0000                     _RXFBCON7	set	3559
   265  0000                     _RXFCON0	set	3540
   266  0000                     _RXFCON1	set	3541
   267  0000                     _RXM0EIDH	set	3866
   268  0000                     _RXM0EIDL	set	3867
   269  0000                     _RXM0SIDH	set	3864
   270  0000                     _RXM0SIDL	set	3865
   271  0000                     _RXM1EIDH	set	3870
   272  0000                     _RXM1EIDL	set	3871
   273  0000                     _RXM1SIDH	set	3868
   274  0000                     _RXM1SIDL	set	3869
   275  0000                     _T0CON	set	4053
   276  0000                     _T0CONbits	set	4053
   277  0000                     _TMR0H	set	4055
   278  0000                     _TMR0L	set	4054
   279  0000                     _TRISA	set	3986
   280  0000                     _TRISB	set	3987
   281  0000                     _TRISC	set	3988
   282  0000                     _B0RXFUL	set	28935
   283  0000                     _B0TXEN	set	28610
   284  0000                     _B1RXFUL	set	29063
   285  0000                     _B1TXEN	set	28611
   286  0000                     _B2RXFUL	set	29191
   287  0000                     _B2TXEN	set	28612
   288  0000                     _B3RXFUL	set	29319
   289  0000                     _B3TXEN	set	28613
   290  0000                     _B4RXFUL	set	29447
   291  0000                     _B4TXEN	set	28614
   292  0000                     _B5RXFUL	set	29575
   293  0000                     _B5TXEN	set	28615
   294  0000                     _FIFOEMPTY	set	31655
   295  0000                     _IRXIF	set	32039
   296  0000                     _MDSEL0	set	31678
   297  0000                     _MDSEL1	set	31679
   298  0000                     _RXB0FILHIT0	set	31488
   299  0000                     _RXB0FUL	set	31495
   300  0000                     _RXB0IF	set	32032
   301  0000                     _RXB0OVFL	set	31655
   302  0000                     _RXB1IF	set	32033
   303  0000                     _RXB1OVFL	set	31654
   304  0000                     _RXM0EXIDM	set	30923
   305  0000                     _RXM1EXIDEN	set	30955
   306  0000                     _B0CON	set	3616
   307  0000                     _B1CON	set	3632
   308  0000                     _B2CON	set	3648
   309  0000                     _B3CON	set	3664
   310  0000                     _B4CON	set	3680
   311  0000                     _B5CON	set	3696
   312  0000                     _RXB0CON	set	3936
   313  0000                     _RXB1CON	set	3920
   314  0000                     _TXB0CON	set	3904
   315  0000                     _TXB1CON	set	3888
   316  0000                     _TXB2CON	set	3872
   317                           
   318                           ; #config settings
   319  00066C  00                 	db	0	; dummy byte at the end
   320  0000                     tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           prodh	equ	0xFF4
   324                           prodl	equ	0xFF3
   325                           intcon	equ	0xFF2
   326                           wreg	equ	0xFE8
   327                           indf1	equ	0xFE7
   328                           fsr1h	equ	0xFE2
   329                           fsr1l	equ	0xFE1
   330                           indf2	equ	0xFDF
   331                           postinc2	equ	0xFDE
   332                           postdec2	equ	0xFDD
   333                           plusw2	equ	0xFDB
   334                           fsr2h	equ	0xFDA
   335                           fsr2l	equ	0xFD9
   336                           status	equ	0xFD8
   337                           
   338                           	psect	cinit
   339  004F72                     __pcinit:
   340                           	opt stack 0
   341  004F72                     start_initialization:
   342                           	opt stack 0
   343  004F72                     __initialization:
   344                           	opt stack 0
   345                           
   346                           ; Clear objects allocated to BIGRAM (960 bytes)
   347  004F72  EE01  F084         	lfsr	0,__pbssBIGRAM
   348  004F76  EE13 F0C0          	lfsr	1,960
   349  004F7A                     clear_0:
   350  004F7A  6AEE               	clrf	postinc0,c
   351  004F7C  50E5               	movf	postdec1,w,c
   352  004F7E  50E1               	movf	fsr1l,w,c
   353  004F80  E1FC               	bnz	clear_0
   354  004F82  50E2               	movf	fsr1h,w,c
   355  004F84  E1FA               	bnz	clear_0
   356                           
   357                           ; Clear objects allocated to BANK1 (78 bytes)
   358  004F86  EE01  F000         	lfsr	0,__pbssBANK1
   359  004F8A  0E4E               	movlw	78
   360  004F8C                     clear_1:
   361  004F8C  6AEE               	clrf	postinc0,c
   362  004F8E  06E8               	decf	wreg,f,c
   363  004F90  E1FD               	bnz	clear_1
   364                           
   365                           ; Clear objects allocated to BANK0 (60 bytes)
   366  004F92  EE00  F0A0         	lfsr	0,__pbssBANK0
   367  004F96  0E3C               	movlw	60
   368  004F98                     clear_2:
   369  004F98  6AEE               	clrf	postinc0,c
   370  004F9A  06E8               	decf	wreg,f,c
   371  004F9C  E1FD               	bnz	clear_2
   372                           
   373                           ; Clear objects allocated to COMRAM (13 bytes)
   374  004F9E  EE00  F046         	lfsr	0,__pbssCOMRAM
   375  004FA2  0E0D               	movlw	13
   376  004FA4                     clear_3:
   377  004FA4  6AEE               	clrf	postinc0,c
   378  004FA6  06E8               	decf	wreg,f,c
   379  004FA8  E1FD               	bnz	clear_3
   380  004FAA                     end_of_initialization:
   381                           	opt stack 0
   382  004FAA                     __end_of__initialization:
   383                           	opt stack 0
   384  004FAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   385  004FAC  6EF8               	movwf	tblptru,c
   386  004FAE  0100               	movlb	0
   387  004FB0  EF3A  F020         	goto	_main	;jump to C main() function
   388                           tblptru	equ	0xFF8
   389                           tblptrh	equ	0xFF7
   390                           tblptrl	equ	0xFF6
   391                           tablat	equ	0xFF5
   392                           prodh	equ	0xFF4
   393                           prodl	equ	0xFF3
   394                           intcon	equ	0xFF2
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           indf1	equ	0xFE7
   398                           postdec1	equ	0xFE5
   399                           fsr1h	equ	0xFE2
   400                           fsr1l	equ	0xFE1
   401                           indf2	equ	0xFDF
   402                           postinc2	equ	0xFDE
   403                           postdec2	equ	0xFDD
   404                           plusw2	equ	0xFDB
   405                           fsr2h	equ	0xFDA
   406                           fsr2l	equ	0xFD9
   407                           status	equ	0xFD8
   408                           
   409                           	psect	bssCOMRAM
   410  000046                     __pbssCOMRAM:
   411                           	opt stack 0
   412  000046                     _vscp_page_select:
   413                           	opt stack 0
   414  000046                     	ds	2
   415  000048                     __ECANRxFilterHitInfo:
   416                           	opt stack 0
   417  000048                     	ds	1
   418  000049                     _adc_series_counter:
   419                           	opt stack 0
   420  000049                     	ds	1
   421  00004A                     _vscp_alarmstatus:
   422                           	opt stack 0
   423  00004A                     	ds	1
   424  00004B                     _vscp_guid_reset:
   425                           	opt stack 0
   426  00004B                     	ds	1
   427  00004C                     _vscp_initledfunc:
   428                           	opt stack 0
   429  00004C                     	ds	1
   430  00004D                     _vscp_minute:
   431                           	opt stack 0
   432  00004D                     	ds	1
   433  00004E                     _vscp_node_substate:
   434                           	opt stack 0
   435  00004E                     	ds	1
   436  00004F                     _vscp_probe_address:
   437                           	opt stack 0
   438  00004F                     	ds	1
   439  000050                     _vscp_probe_cnt:
   440                           	opt stack 0
   441  000050                     	ds	1
   442  000051                     _vscp_second:
   443                           	opt stack 0
   444  000051                     	ds	1
   445  000052                     _vscp_statuscnt:
   446                           	opt stack 0
   447  000052                     	ds	1
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           prodh	equ	0xFF4
   453                           prodl	equ	0xFF3
   454                           intcon	equ	0xFF2
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           indf1	equ	0xFE7
   458                           postdec1	equ	0xFE5
   459                           fsr1h	equ	0xFE2
   460                           fsr1l	equ	0xFE1
   461                           indf2	equ	0xFDF
   462                           postinc2	equ	0xFDE
   463                           postdec2	equ	0xFDD
   464                           plusw2	equ	0xFDB
   465                           fsr2h	equ	0xFDA
   466                           fsr2l	equ	0xFD9
   467                           status	equ	0xFD8
   468                           
   469                           	psect	bssBANK0
   470  0000A0                     __pbssBANK0:
   471                           	opt stack 0
   472  0000A0                     _current_temp:
   473                           	opt stack 0
   474  0000A0                     	ds	12
   475  0000AC                     _measurement_clock:
   476                           	opt stack 0
   477  0000AC                     	ds	4
   478  0000B0                     _timeout_clock:
   479                           	opt stack 0
   480  0000B0                     	ds	4
   481  0000B4                     _vscp_configtimer:
   482                           	opt stack 0
   483  0000B4                     	ds	2
   484  0000B6                     _vscp_timer:
   485                           	opt stack 0
   486  0000B6                     	ds	2
   487  0000B8                     _adc_conversion_flags:
   488                           	opt stack 0
   489  0000B8                     	ds	1
   490  0000B9                     _high_alarm:
   491                           	opt stack 0
   492  0000B9                     	ds	1
   493  0000BA                     _low_alarm:
   494                           	opt stack 0
   495  0000BA                     	ds	1
   496  0000BB                     _seconds:
   497                           	opt stack 0
   498  0000BB                     	ds	1
   499  0000BC                     _sendTimer:
   500                           	opt stack 0
   501  0000BC                     	ds	1
   502  0000BD                     _vscp_hour:
   503                           	opt stack 0
   504  0000BD                     	ds	1
   505  0000BE                     _vscp_initbtncnt:
   506                           	opt stack 0
   507  0000BE                     	ds	1
   508  0000BF                     _vscp_nickname:
   509                           	opt stack 0
   510  0000BF                     	ds	1
   511  0000C0                     _vscp_node_state:
   512                           	opt stack 0
   513  0000C0                     	ds	1
   514  0000C1                     _vscp_imsg:
   515                           	opt stack 0
   516  0000C1                     	ds	14
   517  0000CF                     _vscp_omsg:
   518                           	opt stack 0
   519  0000CF                     	ds	13
   520                           tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           tblptrl	equ	0xFF6
   523                           tablat	equ	0xFF5
   524                           prodh	equ	0xFF4
   525                           prodl	equ	0xFF3
   526                           intcon	equ	0xFF2
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           indf1	equ	0xFE7
   530                           postdec1	equ	0xFE5
   531                           fsr1h	equ	0xFE2
   532                           fsr1l	equ	0xFE1
   533                           indf2	equ	0xFDF
   534                           postinc2	equ	0xFDE
   535                           postdec2	equ	0xFDD
   536                           plusw2	equ	0xFDB
   537                           fsr2h	equ	0xFDA
   538                           fsr2l	equ	0xFD9
   539                           status	equ	0xFD8
   540                           
   541                           	psect	bssBANK1
   542  000100                     __pbssBANK1:
   543                           	opt stack 0
   544  000100                     _seconds_temp:
   545                           	opt stack 0
   546  000100                     	ds	6
   547  000106                     _sh_coefficients:
   548                           	opt stack 0
   549  000106                     	ds	72
   550                           tblptru	equ	0xFF8
   551                           tblptrh	equ	0xFF7
   552                           tblptrl	equ	0xFF6
   553                           tablat	equ	0xFF5
   554                           prodh	equ	0xFF4
   555                           prodl	equ	0xFF3
   556                           intcon	equ	0xFF2
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           indf1	equ	0xFE7
   560                           postdec1	equ	0xFE5
   561                           fsr1h	equ	0xFE2
   562                           fsr1l	equ	0xFE1
   563                           indf2	equ	0xFDF
   564                           postinc2	equ	0xFDE
   565                           postdec2	equ	0xFDD
   566                           plusw2	equ	0xFDB
   567                           fsr2h	equ	0xFDA
   568                           fsr2l	equ	0xFD9
   569                           status	equ	0xFD8
   570                           
   571                           	psect	bssBIGRAM
   572  000184                     __pbssBIGRAM:
   573                           	opt stack 0
   574  000184                     _adc:
   575                           	opt stack 0
   576  000184                     	ds	960
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           prodh	equ	0xFF4
   582                           prodl	equ	0xFF3
   583                           intcon	equ	0xFF2
   584                           postinc0	equ	0xFEE
   585                           wreg	equ	0xFE8
   586                           indf1	equ	0xFE7
   587                           postdec1	equ	0xFE5
   588                           fsr1h	equ	0xFE2
   589                           fsr1l	equ	0xFE1
   590                           indf2	equ	0xFDF
   591                           postinc2	equ	0xFDE
   592                           postdec2	equ	0xFDD
   593                           plusw2	equ	0xFDB
   594                           fsr2h	equ	0xFDA
   595                           fsr2l	equ	0xFD9
   596                           status	equ	0xFD8
   597                           
   598                           	psect	cstackBANK1
   599  00014E                     __pcstackBANK1:
   600                           	opt stack 0
   601  00014E                     doWork@Rinf:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x0
   605  00014E                     	ds	4
   606  000152                     doWork@calVoltage:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x4
   610  000152                     	ds	4
   611  000156                     _doWork$2270:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x8
   615  000156                     	ds	4
   616  00015A                     _doWork$2271:
   617                           	opt stack 0
   618                           
   619                           ; 4 bytes @ 0xC
   620  00015A                     	ds	4
   621  00015E                     _doWork$2272:
   622                           	opt stack 0
   623                           
   624                           ; 4 bytes @ 0x10
   625  00015E                     	ds	16
   626  00016E                     doWork@v:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x20
   630  00016E                     	ds	4
   631  000172                     doWork@B:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x24
   635  000172                     	ds	2
   636  000174                     doWork@resistance:
   637                           	opt stack 0
   638                           
   639                           ; 4 bytes @ 0x26
   640  000174                     	ds	4
   641  000178                     doWork@j:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x2A
   645  000178                     	ds	1
   646  000179                     doWork@setpoint:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x2B
   650  000179                     	ds	2
   651  00017B                     doWork@avarage:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x2D
   655  00017B                     	ds	4
   656  00017F                     doWork@temp:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0x31
   660  00017F                     	ds	4
   661  000183                     doWork@i:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x35
   665  000183                     	ds	1
   666                           tblptru	equ	0xFF8
   667                           tblptrh	equ	0xFF7
   668                           tblptrl	equ	0xFF6
   669                           tablat	equ	0xFF5
   670                           prodh	equ	0xFF4
   671                           prodl	equ	0xFF3
   672                           intcon	equ	0xFF2
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           indf1	equ	0xFE7
   676                           postdec1	equ	0xFE5
   677                           fsr1h	equ	0xFE2
   678                           fsr1l	equ	0xFE1
   679                           indf2	equ	0xFDF
   680                           postinc2	equ	0xFDE
   681                           postdec2	equ	0xFDD
   682                           plusw2	equ	0xFDB
   683                           fsr2h	equ	0xFDA
   684                           fsr2l	equ	0xFD9
   685                           status	equ	0xFD8
   686                           
   687                           	psect	cstackBANK0
   688  000060                     __pcstackBANK0:
   689                           	opt stack 0
   690  000060                     ?_sendVSCPFrame:
   691                           	opt stack 0
   692  000060                     ?___fladd:
   693                           	opt stack 0
   694  000060                     ___aldiv@counter:
   695                           	opt stack 0
   696  000060                     sendVSCPFrame@vscpclass:
   697                           	opt stack 0
   698  000060                     ___fladd@f1:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x0
   702  000060                     	ds	1
   703  000061                     ___aldiv@sign:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x1
   707  000061                     	ds	1
   708  000062                     sendVSCPFrame@vscptype:
   709                           	opt stack 0
   710  000062                     ___aldiv@quotient:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x2
   714  000062                     	ds	1
   715  000063                     sendVSCPFrame@nodeid:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x3
   719  000063                     	ds	1
   720  000064                     sendVSCPFrame@priority:
   721                           	opt stack 0
   722  000064                     ___fladd@f2:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x4
   726  000064                     	ds	1
   727  000065                     sendVSCPFrame@size:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x5
   731  000065                     	ds	1
   732  000066                     ?___altofl:
   733                           	opt stack 0
   734  000066                     sendVSCPFrame@pData:
   735                           	opt stack 0
   736  000066                     ___altofl@c:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x6
   740  000066                     	ds	1
   741  000067                     ??_sendVSCPFrame:
   742                           
   743                           ; 0 bytes @ 0x7
   744  000067                     	ds	1
   745  000068                     ?___flsub:
   746                           	opt stack 0
   747  000068                     ___flsub@f1:
   748                           	opt stack 0
   749  000068                     eval_poly@res:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0x8
   753  000068                     	ds	2
   754  00006A                     ___altofl@sign:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0xA
   758  00006A                     	ds	1
   759  00006B                     ?_floor:
   760                           	opt stack 0
   761  00006B                     floor@x:
   762                           	opt stack 0
   763                           
   764                           ; 4 bytes @ 0xB
   765  00006B                     	ds	1
   766  00006C                     ?_ldexp:
   767                           	opt stack 0
   768  00006C                     ___flsub@f2:
   769                           	opt stack 0
   770  00006C                     ldexp@value:
   771                           	opt stack 0
   772                           
   773                           ; 4 bytes @ 0xC
   774  00006C                     	ds	3
   775  00006F                     floor@i:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0xF
   779  00006F                     	ds	1
   780  000070                     ?___fldiv:
   781                           	opt stack 0
   782  000070                     ldexp@newexp:
   783                           	opt stack 0
   784  000070                     ___fldiv@f1:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x10
   788  000070                     	ds	3
   789  000073                     floor@expon:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x13
   793  000073                     	ds	1
   794  000074                     ___fldiv@f2:
   795                           	opt stack 0
   796                           
   797                           ; 4 bytes @ 0x14
   798  000074                     	ds	7
   799  00007B                     sendVSCPFrame@id:
   800                           	opt stack 0
   801                           
   802                           ; 4 bytes @ 0x1B
   803  00007B                     	ds	4
   804  00007F                     ??_vscp_handleProtocolEvent:
   805  00007F                     ??_vscp_doOneSecondWork:
   806  00007F                     ___fldiv@cntr:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x1F
   810  00007F                     	ds	1
   811  000080                     ___fldiv@f3:
   812                           	opt stack 0
   813                           
   814                           ; 4 bytes @ 0x20
   815  000080                     	ds	4
   816  000084                     ___fldiv@exp:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x24
   820  000084                     	ds	1
   821  000085                     ___fldiv@sign:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x25
   825  000085                     	ds	1
   826  000086                     ?_exp:
   827                           	opt stack 0
   828  000086                     ?_log:
   829                           	opt stack 0
   830  000086                     ?_Celsius2Fahrenheit:
   831                           	opt stack 0
   832  000086                     ?___asfldiv:
   833                           	opt stack 0
   834  000086                     vscp_handleProtocolEvent@page_save:
   835                           	opt stack 0
   836  000086                     ___asfldiv@f1p:
   837                           	opt stack 0
   838  000086                     Celsius2Fahrenheit@tc:
   839                           	opt stack 0
   840  000086                     exp@x:
   841                           	opt stack 0
   842  000086                     log@x:
   843                           	opt stack 0
   844                           
   845                           ; 4 bytes @ 0x26
   846  000086                     	ds	2
   847  000088                     vscp_handleProtocolEvent@page_save_1167:
   848                           	opt stack 0
   849  000088                     ___asfldiv@f2:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0x28
   853  000088                     	ds	2
   854  00008A                     ?_setEventData:
   855                           	opt stack 0
   856  00008A                     vscp_handleProtocolEvent@offset:
   857                           	opt stack 0
   858  00008A                     setEventData@v:
   859                           	opt stack 0
   860  00008A                     _exp$2276:
   861                           	opt stack 0
   862                           
   863                           ; 4 bytes @ 0x2A
   864  00008A                     	ds	1
   865  00008B                     vscp_handleProtocolEvent@pos:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x2B
   869  00008B                     	ds	1
   870  00008C                     setEventData@unit:
   871                           	opt stack 0
   872  00008C                     vscp_handleProtocolEvent@bytes:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x2C
   876  00008C                     	ds	1
   877  00008D                     vscp_handleProtocolEvent@len:
   878                           	opt stack 0
   879  00008D                     setEventData@newval:
   880                           	opt stack 0
   881                           
   882                           ; 4 bytes @ 0x2D
   883  00008D                     	ds	1
   884  00008E                     vscp_handleProtocolEvent@pos_1156:
   885                           	opt stack 0
   886  00008E                     exp@exponent:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x2E
   890  00008E                     	ds	1
   891  00008F                     vscp_handleProtocolEvent@len_1157:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x2F
   895  00008F                     	ds	1
   896  000090                     vscp_handleProtocolEvent@bytes_this_time:
   897                           	opt stack 0
   898  000090                     exp@sign:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x30
   902  000090                     	ds	1
   903  000091                     ??_doWork:
   904  000091                     vscp_handleProtocolEvent@cb:
   905                           	opt stack 0
   906  000091                     setEventData@ival:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x31
   910  000091                     	ds	1
   911  000092                     vscp_handleProtocolEvent@i_1166:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x32
   915  000092                     	ds	1
   916  000093                     ??_handle_sync:
   917  000093                     ??_doOneSecondWork:
   918  000093                     vscp_handleProtocolEvent@k:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x33
   922  000093                     	ds	1
   923  000094                     vscp_handleProtocolEvent@i_1155:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x34
   927  000094                     	ds	1
   928  000095                     doOneSecondWork@tmp:
   929                           	opt stack 0
   930  000095                     handle_sync@i:
   931                           	opt stack 0
   932  000095                     vscp_handleProtocolEvent@byte:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x35
   936  000095                     	ds	1
   937  000096                     doOneSecondWork@i:
   938                           	opt stack 0
   939  000096                     vscp_handleProtocolEvent@bytes_1162:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x36
   943  000096                     	ds	2
   944  000098                     vscp_handleProtocolEvent@i_1158:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x38
   948  000098                     	ds	1
   949  000099                     vscp_handleProtocolEvent@i:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x39
   953  000099                     	ds	1
   954  00009A                     vscp_handleProtocolEvent@j:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x3A
   958  00009A                     	ds	5
   959  00009F                     main@i:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x3F
   963  00009F                     	ds	1
   964                           tblptru	equ	0xFF8
   965                           tblptrh	equ	0xFF7
   966                           tblptrl	equ	0xFF6
   967                           tablat	equ	0xFF5
   968                           prodh	equ	0xFF4
   969                           prodl	equ	0xFF3
   970                           intcon	equ	0xFF2
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           indf1	equ	0xFE7
   974                           postdec1	equ	0xFE5
   975                           fsr1h	equ	0xFE2
   976                           fsr1l	equ	0xFE1
   977                           indf2	equ	0xFDF
   978                           postinc2	equ	0xFDE
   979                           postdec2	equ	0xFDD
   980                           plusw2	equ	0xFDB
   981                           fsr2h	equ	0xFDA
   982                           fsr2l	equ	0xFD9
   983                           status	equ	0xFD8
   984                           
   985                           	psect	cstackCOMRAM
   986  000001                     __pcstackCOMRAM:
   987                           	opt stack 0
   988  000001                     ?i1_WriteTimer0:
   989                           	opt stack 0
   990  000001                     i1WriteTimer0@timer0:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x0
   994  000001                     	ds	2
   995  000003                     i1WriteTimer0@timer:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x2
   999  000003                     	ds	2
  1000  000005                     ??_interrupt_at_low_vector:
  1001                           
  1002                           ; 0 bytes @ 0x4
  1003  000005                     	ds	9
  1004  00000E                     ?_WriteTimer0:
  1005                           	opt stack 0
  1006  00000E                     ?_writeEEPROM:
  1007                           	opt stack 0
  1008  00000E                     ?_OpenADC:
  1009                           	opt stack 0
  1010  00000E                     ?__CANIDToRegs:
  1011                           	opt stack 0
  1012  00000E                     ?__RegsToCANID:
  1013                           	opt stack 0
  1014  00000E                     ??_vscp_getMDF_URL:
  1015  00000E                     ?___flge:
  1016                           	opt stack 0
  1017  00000E                     ?_readEEPROM:
  1018                           	opt stack 0
  1019  00000E                     ?___lbmod:
  1020                           	opt stack 0
  1021  00000E                     ?__ECANPointBuffer:
  1022                           	opt stack 0
  1023  00000E                     ?___flpack:
  1024                           	opt stack 0
  1025  00000E                     ?_frexp:
  1026                           	opt stack 0
  1027  00000E                     ?_vscp_getFamilyCode:
  1028                           	opt stack 0
  1029  00000E                     ?_vscp_getFamilyType:
  1030                           	opt stack 0
  1031  00000E                     ?___flneg:
  1032                           	opt stack 0
  1033  00000E                     vscp_getMatrixInfo@pData:
  1034                           	opt stack 0
  1035  00000E                     ECANSetOperationMode@mode:
  1036                           	opt stack 0
  1037  00000E                     OpenADC@config2:
  1038                           	opt stack 0
  1039  00000E                     OpenTimer0@config:
  1040                           	opt stack 0
  1041  00000E                     ___lbmod@divisor:
  1042                           	opt stack 0
  1043  00000E                     __CANIDToRegs@ptr:
  1044                           	opt stack 0
  1045  00000E                     __RegsToCANID@ptr:
  1046                           	opt stack 0
  1047  00000E                     writeEEPROM@address:
  1048                           	opt stack 0
  1049  00000E                     readEEPROM@address:
  1050                           	opt stack 0
  1051  00000E                     WriteTimer0@timer0:
  1052                           	opt stack 0
  1053  00000E                     ___flpack@arg:
  1054                           	opt stack 0
  1055  00000E                     ___flge@ff1:
  1056                           	opt stack 0
  1057  00000E                     ___flneg@f1:
  1058                           	opt stack 0
  1059  00000E                     frexp@value:
  1060                           	opt stack 0
  1061                           
  1062                           ; 4 bytes @ 0xD
  1063  00000E                     	ds	1
  1064  00000F                     vscp_getMDF_URL@idx:
  1065                           	opt stack 0
  1066  00000F                     vscp_getMatrixInfo@i:
  1067                           	opt stack 0
  1068  00000F                     OpenADC@portconfig:
  1069                           	opt stack 0
  1070  00000F                     ___lbmod@dividend:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0xE
  1074  00000F                     	ds	1
  1075  000010                     ??_OpenADC:
  1076  000010                     __RegsToCANID@val:
  1077                           	opt stack 0
  1078  000010                     writeEEPROM@data:
  1079                           	opt stack 0
  1080  000010                     ___lbmod@counter:
  1081                           	opt stack 0
  1082  000010                     WriteTimer0@timer:
  1083                           	opt stack 0
  1084  000010                     __CANIDToRegs@val:
  1085                           	opt stack 0
  1086                           
  1087                           ; 4 bytes @ 0xF
  1088  000010                     	ds	1
  1089  000011                     ?_vscp_setGUID:
  1090                           	opt stack 0
  1091  000011                     ?_vscp_setUserID:
  1092                           	opt stack 0
  1093  000011                     ?_vscp_setManufacturerId:
  1094                           	opt stack 0
  1095  000011                     init_app_eeprom@i:
  1096                           	opt stack 0
  1097  000011                     vscp_setGUID@data:
  1098                           	opt stack 0
  1099  000011                     vscp_setUserID@data:
  1100                           	opt stack 0
  1101  000011                     vscp_setManufacturerId@data:
  1102                           	opt stack 0
  1103  000011                     vscp_goBootloaderMode@algorithm:
  1104                           	opt stack 0
  1105  000011                     vscp_writeNicknamePermanent@nickname:
  1106                           	opt stack 0
  1107  000011                     vscp_setSegmentCRC@crc:
  1108                           	opt stack 0
  1109  000011                     vscp_setControlByte@ctrl:
  1110                           	opt stack 0
  1111  000011                     __RegsToCANID@type:
  1112                           	opt stack 0
  1113  000011                     __ECANPointBuffer@b:
  1114                           	opt stack 0
  1115  000011                     readEEPROM@data:
  1116                           	opt stack 0
  1117  000011                     ___lbmod@rem:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x10
  1121  000011                     	ds	1
  1122  000012                     ??__RegsToCANID:
  1123  000012                     ?_getCalibrationValue:
  1124                           	opt stack 0
  1125  000012                     ?___wmul:
  1126                           	opt stack 0
  1127  000012                     vscp_readAppReg@pos:
  1128                           	opt stack 0
  1129  000012                     vscp_getGUID@idx:
  1130                           	opt stack 0
  1131  000012                     vscp_setGUID@idx:
  1132                           	opt stack 0
  1133  000012                     vscp_getUserID@idx:
  1134                           	opt stack 0
  1135  000012                     vscp_setUserID@idx:
  1136                           	opt stack 0
  1137  000012                     vscp_getManufacturerId@idx:
  1138                           	opt stack 0
  1139  000012                     vscp_setManufacturerId@idx:
  1140                           	opt stack 0
  1141  000012                     vscp_handleDropNickname@bytes:
  1142                           	opt stack 0
  1143  000012                     OpenADC@config:
  1144                           	opt stack 0
  1145  000012                     ___flpack@exp:
  1146                           	opt stack 0
  1147  000012                     __ECANPointBuffer@pt:
  1148                           	opt stack 0
  1149  000012                     frexp@eptr:
  1150                           	opt stack 0
  1151  000012                     ___wmul@multiplier:
  1152                           	opt stack 0
  1153  000012                     ___flge@ff2:
  1154                           	opt stack 0
  1155                           
  1156                           ; 4 bytes @ 0x11
  1157  000012                     	ds	1
  1158  000013                     ??_vscp_readStdReg:
  1159  000013                     vscp_readAppReg@reg:
  1160                           	opt stack 0
  1161  000013                     ___flpack@sign:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x12
  1165  000013                     	ds	1
  1166  000014                     ??_getCalibrationValue:
  1167  000014                     ??___flpack:
  1168  000014                     ??_frexp:
  1169  000014                     vscp_readAppReg@rv:
  1170                           	opt stack 0
  1171  000014                     __CANIDToRegs@type:
  1172                           	opt stack 0
  1173  000014                     __RegsToCANID@Value:
  1174                           	opt stack 0
  1175  000014                     ___wmul@multiplicand:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x13
  1179  000014                     	ds	1
  1180  000015                     ??__CANIDToRegs:
  1181  000015                     ?_ECANReceiveMessage:
  1182                           	opt stack 0
  1183  000015                     ECANReceiveMessage@data:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x14
  1187  000015                     	ds	1
  1188  000016                     ECANReceiveMessage@dataLen:
  1189                           	opt stack 0
  1190  000016                     ___wmul@product:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x15
  1194  000016                     	ds	1
  1195  000017                     ECANReceiveMessage@msgFlags:
  1196                           	opt stack 0
  1197  000017                     __CANIDToRegs@Value:
  1198                           	opt stack 0
  1199  000017                     getCalibrationValue@cal:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x16
  1203  000017                     	ds	1
  1204  000018                     ??_writeCoeffs2Ram:
  1205  000018                     ?_ECANSendMessage:
  1206                           	opt stack 0
  1207  000018                     ?___awtofl:
  1208                           	opt stack 0
  1209  000018                     ?___lwtofl:
  1210                           	opt stack 0
  1211  000018                     ECANReceiveMessage@savedPtr:
  1212                           	opt stack 0
  1213  000018                     ___awtofl@c:
  1214                           	opt stack 0
  1215  000018                     ___lwtofl@c:
  1216                           	opt stack 0
  1217  000018                     ECANSendMessage@id:
  1218                           	opt stack 0
  1219  000018                     vscp_readStdReg@code:
  1220                           	opt stack 0
  1221                           
  1222                           ; 4 bytes @ 0x17
  1223  000018                     	ds	1
  1224  000019                     getCalibrationValue@i:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x18
  1228  000019                     	ds	1
  1229  00001A                     ECANReceiveMessage@id:
  1230                           	opt stack 0
  1231  00001A                     writeCoeffs2Ram@c:
  1232                           	opt stack 0
  1233                           
  1234                           ; 3 bytes @ 0x19
  1235  00001A                     	ds	1
  1236  00001B                     ECANReceiveMessage@i:
  1237                           	opt stack 0
  1238                           
  1239                           ; 1 bytes @ 0x1A
  1240  00001B                     	ds	1
  1241  00001C                     ECANSendMessage@data:
  1242                           	opt stack 0
  1243  00001C                     ECANReceiveMessage@mode:
  1244                           	opt stack 0
  1245  00001C                     vscp_readStdReg@code_1140:
  1246                           	opt stack 0
  1247                           
  1248                           ; 4 bytes @ 0x1B
  1249  00001C                     	ds	1
  1250  00001D                     ECANSendMessage@dataLen:
  1251                           	opt stack 0
  1252  00001D                     ECANReceiveMessage@temp:
  1253                           	opt stack 0
  1254  00001D                     ___awtofl@sign:
  1255                           	opt stack 0
  1256  00001D                     writeCoeffs2Ram@i:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x1C
  1260  00001D                     	ds	1
  1261  00001E                     ?___flmul:
  1262                           	opt stack 0
  1263  00001E                     ECANSendMessage@msgFlags:
  1264                           	opt stack 0
  1265  00001E                     ECANReceiveMessage@ptr:
  1266                           	opt stack 0
  1267  00001E                     ___flmul@f1:
  1268                           	opt stack 0
  1269                           
  1270                           ; 4 bytes @ 0x1D
  1271  00001E                     	ds	1
  1272  00001F                     ??_ECANSendMessage:
  1273  00001F                     writeCoeffs2Ram@j:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x1E
  1277  00001F                     	ds	1
  1278  000020                     ?_getCANFrame:
  1279                           	opt stack 0
  1280  000020                     getCANFrame@pdlc:
  1281                           	opt stack 0
  1282  000020                     vscp_readStdReg@idx:
  1283                           	opt stack 0
  1284  000020                     ECANSendMessage@pb:
  1285                           	opt stack 0
  1286                           
  1287                           ; 18 bytes @ 0x1F
  1288  000020                     	ds	1
  1289  000021                     ?_vscp_writeAppReg:
  1290                           	opt stack 0
  1291  000021                     init_app_ram@i:
  1292                           	opt stack 0
  1293  000021                     vscp_writeAppReg@val:
  1294                           	opt stack 0
  1295  000021                     getCANFrame@pdata:
  1296                           	opt stack 0
  1297  000021                     vscp_readStdReg@idx_1141:
  1298                           	opt stack 0
  1299                           
  1300                           ; 1 bytes @ 0x20
  1301  000021                     	ds	1
  1302  000022                     ?_vscp_writeStdReg:
  1303                           	opt stack 0
  1304  000022                     vscp_writeAppReg@pos:
  1305                           	opt stack 0
  1306  000022                     getCANFrame@pid:
  1307                           	opt stack 0
  1308  000022                     vscp_readStdReg@rv:
  1309                           	opt stack 0
  1310  000022                     vscp_writeStdReg@value:
  1311                           	opt stack 0
  1312  000022                     ___flmul@f2:
  1313                           	opt stack 0
  1314                           
  1315                           ; 4 bytes @ 0x21
  1316  000022                     	ds	1
  1317  000023                     ??_vscp_writeStdReg:
  1318  000023                     vscp_writeAppReg@reg:
  1319                           	opt stack 0
  1320  000023                     getCANFrame@flags:
  1321                           	opt stack 0
  1322  000023                     vscp_readStdReg@reg:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x22
  1326  000023                     	ds	1
  1327  000024                     ?_getVSCPFrame:
  1328                           	opt stack 0
  1329  000024                     vscp_writeAppReg@rv:
  1330                           	opt stack 0
  1331  000024                     getVSCPFrame@pvscptype:
  1332                           	opt stack 0
  1333  000024                     vscp_readRegister@reg:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x23
  1337  000024                     	ds	1
  1338  000025                     getVSCPFrame@pNodeId:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x24
  1342  000025                     	ds	1
  1343  000026                     getVSCPFrame@pPriority:
  1344                           	opt stack 0
  1345                           
  1346                           ; 1 bytes @ 0x25
  1347  000026                     	ds	1
  1348  000027                     getVSCPFrame@pSize:
  1349                           	opt stack 0
  1350  000027                     vscp_writeStdReg@rv:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x26
  1354  000027                     	ds	1
  1355  000028                     getVSCPFrame@pData:
  1356                           	opt stack 0
  1357  000028                     vscp_writeStdReg@reg:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x27
  1361  000028                     	ds	1
  1362  000029                     ??_getVSCPFrame:
  1363  000029                     ?_vscp_writeRegister:
  1364                           	opt stack 0
  1365  000029                     vscp_writeRegister@value:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x28
  1369  000029                     	ds	1
  1370  00002A                     vscp_writeRegister@reg:
  1371                           	opt stack 0
  1372                           
  1373                           ; 1 bytes @ 0x29
  1374  00002A                     	ds	3
  1375  00002D                     getVSCPFrame@pvscpclass:
  1376                           	opt stack 0
  1377  00002D                     ___flmul@exp:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x2C
  1381  00002D                     	ds	1
  1382  00002E                     getVSCPFrame@id:
  1383                           	opt stack 0
  1384  00002E                     ___flmul@f3_as_product:
  1385                           	opt stack 0
  1386                           
  1387                           ; 4 bytes @ 0x2D
  1388  00002E                     	ds	4
  1389  000032                     ECANSendMessage@mode:
  1390                           	opt stack 0
  1391  000032                     vscp_getEvent@rv:
  1392                           	opt stack 0
  1393  000032                     ___flmul@cntr:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x31
  1397  000032                     	ds	1
  1398  000033                     ECANSendMessage@buffers:
  1399                           	opt stack 0
  1400  000033                     ___flmul@sign:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x32
  1404  000033                     	ds	1
  1405  000034                     ??___fladd:
  1406  000034                     ?___asflmul:
  1407                           	opt stack 0
  1408  000034                     ?___fltol:
  1409                           	opt stack 0
  1410  000034                     ECANSendMessage@j:
  1411                           	opt stack 0
  1412  000034                     ___asflmul@multiplicand:
  1413                           	opt stack 0
  1414  000034                     ___fltol@f1:
  1415                           	opt stack 0
  1416                           
  1417                           ; 4 bytes @ 0x33
  1418  000034                     	ds	1
  1419  000035                     ECANSendMessage@tempBSEL0:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x34
  1423  000035                     	ds	1
  1424  000036                     ECANSendMessage@tempPtr:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x35
  1428  000036                     	ds	2
  1429  000038                     ??___fltol:
  1430  000038                     ECANSendMessage@temp:
  1431                           	opt stack 0
  1432  000038                     ___asflmul@mp:
  1433                           	opt stack 0
  1434  000038                     ___fladd@sign:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0x37
  1438  000038                     	ds	1
  1439  000039                     ECANSendMessage@i:
  1440                           	opt stack 0
  1441  000039                     ___fladd@exp2:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x38
  1445  000039                     	ds	1
  1446  00003A                     ___fladd@exp1:
  1447                           	opt stack 0
  1448  00003A                     ECANSendMessage@ptr:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x39
  1452  00003A                     	ds	1
  1453  00003B                     ?_Celsius2Kelvin:
  1454                           	opt stack 0
  1455  00003B                     ?_eval_poly:
  1456                           	opt stack 0
  1457  00003B                     ?___asfladd:
  1458                           	opt stack 0
  1459  00003B                     ?___asflsub:
  1460                           	opt stack 0
  1461  00003B                     ___asfladd@f1p:
  1462                           	opt stack 0
  1463  00003B                     ___asflsub@f1p:
  1464                           	opt stack 0
  1465  00003B                     Celsius2Kelvin@tc:
  1466                           	opt stack 0
  1467  00003B                     eval_poly@x:
  1468                           	opt stack 0
  1469                           
  1470                           ; 4 bytes @ 0x3A
  1471  00003B                     	ds	1
  1472  00003C                     ?_sendCANFrame:
  1473                           	opt stack 0
  1474  00003C                     ___fltol@sign1:
  1475                           	opt stack 0
  1476  00003C                     sendCANFrame@id:
  1477                           	opt stack 0
  1478                           
  1479                           ; 4 bytes @ 0x3B
  1480  00003C                     	ds	1
  1481  00003D                     ___fltol@exp1:
  1482                           	opt stack 0
  1483  00003D                     ___asfladd@f2:
  1484                           	opt stack 0
  1485  00003D                     ___asflsub@f2:
  1486                           	opt stack 0
  1487                           
  1488                           ; 4 bytes @ 0x3C
  1489  00003D                     	ds	1
  1490  00003E                     ?___aldiv:
  1491                           	opt stack 0
  1492  00003E                     ___aldiv@dividend:
  1493                           	opt stack 0
  1494                           
  1495                           ; 4 bytes @ 0x3D
  1496  00003E                     	ds	1
  1497  00003F                     eval_poly@d:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x3E
  1501  00003F                     	ds	1
  1502  000040                     sendCANFrame@dlc:
  1503                           	opt stack 0
  1504  000040                     eval_poly@n:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x3F
  1508  000040                     	ds	1
  1509  000041                     sendCANFrame@pdata:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x40
  1513  000041                     	ds	1
  1514  000042                     ??_eval_poly:
  1515  000042                     ___aldiv@divisor:
  1516                           	opt stack 0
  1517                           
  1518                           ; 4 bytes @ 0x41
  1519  000042                     	ds	1
  1520  000043                     ??_ldexp:
  1521  000043                     vscp_sendEvent@rv:
  1522                           	opt stack 0
  1523  000043                     log@exponent:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x42
  1527  000043                     	ds	1
  1528  000044                     ??_sendTempEvent:
  1529  000044                     ?_vscp_sendHeartBeat:
  1530                           	opt stack 0
  1531  000044                     ??_vscp_newNodeOnline:
  1532  000044                     vscp_sendHeartBeat@subzone:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x43
  1536  000044                     	ds	1
  1537  000045                     sendTempEvent@i:
  1538                           	opt stack 0
  1539  000045                     vscp_sendHeartBeat@zone:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x44
  1543  000045                     	ds	1
  1544  000046                     tblptru	equ	0xFF8
  1545                           tblptrh	equ	0xFF7
  1546                           tblptrl	equ	0xFF6
  1547                           tablat	equ	0xFF5
  1548                           prodh	equ	0xFF4
  1549                           prodl	equ	0xFF3
  1550                           intcon	equ	0xFF2
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           indf1	equ	0xFE7
  1554                           postdec1	equ	0xFE5
  1555                           fsr1h	equ	0xFE2
  1556                           fsr1l	equ	0xFE1
  1557                           indf2	equ	0xFDF
  1558                           postinc2	equ	0xFDE
  1559                           postdec2	equ	0xFDD
  1560                           plusw2	equ	0xFDB
  1561                           fsr2h	equ	0xFDA
  1562                           fsr2l	equ	0xFD9
  1563                           status	equ	0xFD8
  1564                           
  1565                           ; 0 bytes @ 0x45
  1566 ;;
  1567 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1568 ;;
  1569 ;; *************** function _main *****************
  1570 ;; Defined at:
  1571 ;;		line 302 in file "../main.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;		None
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;  i               1   63[BANK0 ] unsigned char 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;		None               void
  1578 ;; Registers used:
  1579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : E/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1585 ;;      Params:         0       0       0       0       0       0       0
  1586 ;;      Locals:         0       1       0       0       0       0       0
  1587 ;;      Temps:          0       0       0       0       0       0       0
  1588 ;;      Totals:         0       1       0       0       0       0       0
  1589 ;;Total ram usage:        1 bytes
  1590 ;; Hardware stack levels required when called:    9
  1591 ;; This function calls:
  1592 ;;		_init
  1593 ;;		_vscp_check_pstorage
  1594 ;;		_init_app_eeprom
  1595 ;;		_vscp_init
  1596 ;;		_writeEEPROM
  1597 ;;		_vscp_getEvent
  1598 ;;		_vscp_goActiveState
  1599 ;;		_vscp_handleProbeState
  1600 ;;		_vscp_handleProtocolEvent
  1601 ;;		_handle_sync
  1602 ;;		_vscp_error
  1603 ;;		_doOneSecondWork
  1604 ;;		_vscp_doOneSecondWork
  1605 ;;		_doWork
  1606 ;; This function is called by:
  1607 ;;		Startup code after reset
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text0
  1612  004074                     __ptext0:
  1613                           	opt stack 0
  1614  004074                     _main:
  1615                           	opt stack 22
  1616                           
  1617                           ;main.c: 303: unsigned char i;
  1618                           ;main.c: 305: init();
  1619                           
  1620                           ;incstack = 0
  1621                           ;incstack = 0
  1622  004074  EC38  F028         	call	_init	;wreg free
  1623                           
  1624                           ;main.c: 309: if (!vscp_check_pstorage()) {
  1625  004078  EC9C  F029         	call	_vscp_check_pstorage	;wreg free
  1626  00407C  0900               	iorlw	0
  1627  00407E  B4D8               	btfsc	status,2,c
  1628                           
  1629                           ;main.c: 312: init_app_eeprom();
  1630  004080  ECDA  F011         	call	_init_app_eeprom	;wreg free
  1631                           
  1632                           ;main.c: 314: }
  1633                           ;main.c: 316: vscp_init();
  1634  004084  EC97  F027         	call	_vscp_init	;wreg free
  1635  004088                     l168:
  1636  004088  0004               	clrwdt		;# 
  1637                           
  1638                           ;main.c: 322: if ((vscp_initbtncnt > 250) &&
  1639                           ;main.c: 323: (0x01 != vscp_node_state)) {
  1640  00408A  0EFA               	movlw	250
  1641  00408C  0100               	movlb	0	; () banked
  1642  00408E  65BE               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1643  004090  D00C               	goto	l13732
  1644                           
  1645                           ; BSR set to: 0
  1646  004092  05C0               	decf	_vscp_node_state& (0+255),w,b
  1647  004094  E00A               	bz	l13732
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;main.c: 326: vscp_nickname = 0xff;
  1651  004096  69BF               	setf	_vscp_nickname& (0+255),b
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;main.c: 327: writeEEPROM(0x01, 0xff);
  1655  004098  6A0F               	clrf	?_writeEEPROM+1,c
  1656  00409A  0E01               	movlw	1
  1657  00409C  6E0E               	movwf	?_writeEEPROM,c
  1658  00409E  0EFF               	movlw	255
  1659  0040A0  6810               	setf	?_writeEEPROM+2,c
  1660  0040A2  EC65  F029         	call	_writeEEPROM	;wreg free
  1661                           
  1662                           ;main.c: 328: vscp_init();
  1663  0040A6  EC97  F027         	call	_vscp_init	;wreg free
  1664  0040AA                     l13732:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;main.c: 330: }
  1668                           ;main.c: 334: vscp_imsg.flags = 0;
  1669  0040AA  6BC1               	clrf	_vscp_imsg& (0+255),b
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 335: vscp_getEvent();
  1673  0040AC  EC15  F029         	call	_vscp_getEvent	;wreg free
  1674                           
  1675                           ;main.c: 338: switch (vscp_node_state) {
  1676  0040B0  D024               	goto	l13762
  1677  0040B2                     l13736:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 343: if (0xff == vscp_nickname) {
  1681  0040B2  29BF               	incf	_vscp_nickname& (0+255),w,b
  1682  0040B4  E103               	bnz	l13740
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 345: vscp_node_state = 0x01;
  1686  0040B6  0E01               	movlw	1
  1687  0040B8  6FC0               	movwf	_vscp_node_state& (0+255),b
  1688                           
  1689                           ;main.c: 346: }
  1690  0040BA  D02B               	goto	l13764
  1691  0040BC                     l13740:
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;main.c: 347: else {
  1695                           ;main.c: 349: vscp_node_state = 0x03;
  1696  0040BC  0E03               	movlw	3
  1697  0040BE  6FC0               	movwf	_vscp_node_state& (0+255),b
  1698  0040C0                     l13742:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;main.c: 350: vscp_goActiveState();
  1702  0040C0  ECD0  F029         	call	_vscp_goActiveState	;wreg free
  1703  0040C4  D026               	goto	l13764
  1704  0040C6                     l13744:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 355: vscp_handleProbeState();
  1708  0040C6  EC13  F021         	call	_vscp_handleProbeState	;wreg free
  1709                           
  1710                           ;main.c: 356: break;
  1711  0040CA  D023               	goto	l13764
  1712  0040CC                     l177:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 365: if (vscp_imsg.flags & 0x80) {
  1716  0040CC  AFC1               	btfss	_vscp_imsg& (0+255),7,b
  1717  0040CE  D021               	goto	l13764
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 367: if ( 0 == vscp_imsg.vscp_class ) {
  1721  0040D0  51C4               	movf	(_vscp_imsg+3)& (0+255),w,b
  1722  0040D2  11C3               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1723  0040D4  E103               	bnz	l13752
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 370: vscp_handleProtocolEvent();
  1727  0040D6  EC68  F015         	call	_vscp_handleProtocolEvent	;wreg free
  1728                           
  1729                           ;main.c: 372: }
  1730  0040DA  D01B               	goto	l13764
  1731  0040DC                     l13752:
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;main.c: 373: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1735                           ;main.c: 374: ( 26 == vscp_imsg.vscp_type ) ) {
  1736  0040DC  51C3               	movf	(_vscp_imsg+2)& (0+255),w,b
  1737  0040DE  0A1E               	xorlw	30
  1738  0040E0  11C4               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1739  0040E2  E117               	bnz	l13764
  1740                           
  1741                           ; BSR set to: 0
  1742  0040E4  51C5               	movf	(_vscp_imsg+4)& (0+255),w,b
  1743  0040E6  0A1A               	xorlw	26
  1744  0040E8  E114               	bnz	l13764
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;main.c: 375: handle_sync();
  1748  0040EA  EC0F  F025         	call	_handle_sync	;wreg free
  1749  0040EE  D011               	goto	l13764
  1750  0040F0                     l13758:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 382: vscp_error();
  1754  0040F0  ECBB  F02A         	call	_vscp_error	;wreg free
  1755                           
  1756                           ;main.c: 383: break;
  1757  0040F4  D00E               	goto	l13764
  1758  0040F6                     l183:
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;main.c: 386: vscp_node_state = 0x00;
  1762  0040F6  6BC0               	clrf	_vscp_node_state& (0+255),b
  1763                           
  1764                           ;main.c: 387: break;
  1765  0040F8  D00C               	goto	l13764
  1766  0040FA                     l13762:
  1767  0040FA  0100               	movlb	0	; () banked
  1768  0040FC  51C0               	movf	_vscp_node_state& (0+255),w,b
  1769                           
  1770                           ; Switch size 1, requested type "space"
  1771                           ; Number of cases is 5, Range of values is 0 to 4
  1772                           ; switch strategies available:
  1773                           ; Name         Instructions Cycles
  1774                           ; simple_byte           16     9 (average)
  1775                           ;	Chosen strategy is simple_byte
  1776  0040FE  E0D9               	bz	l13736
  1777  004100  0A01               	xorlw	1	; case 1
  1778  004102  E0E1               	bz	l13744
  1779  004104  0A03               	xorlw	3	; case 2
  1780  004106  E0DC               	bz	l13742
  1781  004108  0A01               	xorlw	1	; case 3
  1782  00410A  E0E0               	bz	l177
  1783  00410C  0A07               	xorlw	7	; case 4
  1784  00410E  E0F0               	bz	l13758
  1785  004110  D7F2               	goto	l183
  1786  004112                     l13764:
  1787                           
  1788                           ;main.c: 393: if ( measurement_clock > 1000 ) {
  1789  004112  0EE9               	movlw	233
  1790  004114  0100               	movlb	0	; () banked
  1791  004116  5DAC               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1792  004118  0E03               	movlw	3
  1793  00411A  59AD               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1794  00411C  0E00               	movlw	0
  1795  00411E  59AE               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1796  004120  0E00               	movlw	0
  1797  004122  59AF               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1798  004124  E3B1               	bnc	l168
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;main.c: 395: measurement_clock = 0;
  1802  004126  6BAC               	clrf	_measurement_clock& (0+255),b	;volatile
  1803  004128  6BAD               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1804  00412A  6BAE               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1805  00412C  6BAF               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;main.c: 396: doOneSecondWork();
  1809  00412E  EC71  F01A         	call	_doOneSecondWork	;wreg free
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;main.c: 397: seconds++;
  1813  004132  2BBB               	incf	_seconds& (0+255),f,b
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 401: if (0x03 == vscp_node_state) {
  1817  004134  51C0               	movf	_vscp_node_state& (0+255),w,b
  1818  004136  0A03               	xorlw	3
  1819  004138  E10D               	bnz	l13786
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 402: for (i = 0; i < 6; i++) {
  1823  00413A  6B9F               	clrf	main@i& (0+255),b
  1824  00413C                     l13780:
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 403: seconds_temp[i]++;
  1828  00413C  0E00               	movlw	low _seconds_temp
  1829  00413E  0100               	movlb	0	; () banked
  1830  004140  259F               	addwf	main@i& (0+255),w,b
  1831  004142  6ED9               	movwf	fsr2l,c
  1832  004144  6ADA               	clrf	fsr2h,c
  1833  004146  0E01               	movlw	high _seconds_temp
  1834  004148  22DA               	addwfc	fsr2h,f,c
  1835  00414A  2ADF               	incf	indf2,f,c
  1836                           
  1837                           ; BSR set to: 1
  1838  00414C  2B9F               	incf	main@i& (0+255),f,b
  1839                           
  1840                           ; BSR set to: 0
  1841  00414E  0E05               	movlw	5
  1842  004150  659F               	cpfsgt	main@i& (0+255),b
  1843  004152  D7F4               	goto	l13780
  1844  004154                     l13786:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 404: }
  1848                           ;main.c: 405: }
  1849                           ;main.c: 407: if (seconds > 60) {
  1850  004154  0E3C               	movlw	60
  1851  004156  65BB               	cpfsgt	_seconds& (0+255),b
  1852  004158  D001               	goto	l13790
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;main.c: 408: seconds = 0;
  1856  00415A  6BBB               	clrf	_seconds& (0+255),b
  1857  00415C                     l13790:
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;main.c: 409: }
  1861                           ;main.c: 412: vscp_doOneSecondWork();
  1862  00415C  EC03  F027         	call	_vscp_doOneSecondWork	;wreg free
  1863                           
  1864                           ;main.c: 415: doWork();
  1865  004160  ECB4  F009         	call	_doWork	;wreg free
  1866  004164  D791               	goto	l168
  1867  004166                     __end_of_main:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           prodh	equ	0xFF4
  1874                           prodl	equ	0xFF3
  1875                           intcon	equ	0xFF2
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           indf1	equ	0xFE7
  1879                           postdec1	equ	0xFE5
  1880                           fsr1h	equ	0xFE2
  1881                           fsr1l	equ	0xFE1
  1882                           indf2	equ	0xFDF
  1883                           postinc2	equ	0xFDE
  1884                           postdec2	equ	0xFDD
  1885                           plusw2	equ	0xFDB
  1886                           fsr2h	equ	0xFDA
  1887                           fsr2l	equ	0xFD9
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _doWork *****************
  1891 ;; Defined at:
  1892 ;;		line 430 in file "../main.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;		None
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  temp            4   49[BANK1 ] unsigned char 
  1897 ;;  avarage         4   45[BANK1 ] unsigned char 
  1898 ;;  resistance      4   38[BANK1 ] unsigned char 
  1899 ;;  v               4   32[BANK1 ] unsigned char 
  1900 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1901 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1902 ;;  setpoint        2   43[BANK1 ] int 
  1903 ;;  B               2   36[BANK1 ] unsigned short 
  1904 ;;  i               1   53[BANK1 ] unsigned char 
  1905 ;;  j               1   42[BANK1 ] unsigned char 
  1906 ;; Return value:  Size  Location     Type
  1907 ;;		None               void
  1908 ;; Registers used:
  1909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1910 ;; Tracked objects:
  1911 ;;		On entry : F/0
  1912 ;;		On exit  : E/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1915 ;;      Params:         0       0       0       0       0       0       0
  1916 ;;      Locals:         0       0      54       0       0       0       0
  1917 ;;      Temps:          0      14       0       0       0       0       0
  1918 ;;      Totals:         0      14      54       0       0       0       0
  1919 ;;Total ram usage:       68 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    7
  1922 ;; This function calls:
  1923 ;;		_writeEEPROM
  1924 ;;		_readEEPROM
  1925 ;;		_exp
  1926 ;;		_log
  1927 ;;		_getCalibrationValue
  1928 ;;		_vscp_sendEvent
  1929 ;;		___aldiv
  1930 ;;		___altofl
  1931 ;;		___asfladd
  1932 ;;		___fladd
  1933 ;;		___asfldiv
  1934 ;;		___fldiv
  1935 ;;		___flmul
  1936 ;;		___asflsub
  1937 ;;		___flsub
  1938 ;;		___fltol
  1939 ;;		___lwtofl
  1940 ;;		___wmul
  1941 ;; This function is called by:
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text1
  1947  001368                     __ptext1:
  1948                           	opt stack 0
  1949  001368                     _doWork:
  1950                           	opt stack 23
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;main.c: 431: uint8_t i, j;
  1954                           ;main.c: 432: uint16_t B;
  1955                           ;main.c: 433: double avarage;
  1956                           ;main.c: 434: double resistance;
  1957                           ;main.c: 435: double Rinf;
  1958                           ;main.c: 436: double temp;
  1959                           ;main.c: 437: double v;
  1960                           ;main.c: 438: double calVoltage;
  1961                           ;main.c: 439: int setpoint;
  1962                           ;main.c: 441: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1963                           ;main.c: 442: readEEPROM(0xF3));
  1964                           
  1965                           ;incstack = 0
  1966                           ;incstack = 0
  1967  001368  6A0F               	clrf	?_readEEPROM+1,c
  1968  00136A  0EF3               	movlw	243
  1969  00136C  6E0E               	movwf	?_readEEPROM,c
  1970  00136E  EC62  F02A         	call	_readEEPROM	;wreg free
  1971  001372  0100               	movlb	0	; () banked
  1972  001374  6F91               	movwf	??_doWork& (0+255),b
  1973  001376  6A0F               	clrf	?_readEEPROM+1,c
  1974  001378  0EF2               	movlw	242
  1975  00137A  6E0E               	movwf	?_readEEPROM,c
  1976  00137C  EC62  F02A         	call	_readEEPROM	;wreg free
  1977  001380  6E19               	movwf	?___lwtofl+1,c
  1978  001382  0100               	movlb	0	; () banked
  1979  001384  5191               	movf	??_doWork& (0+255),w,b
  1980  001386  6E18               	movwf	?___lwtofl,c
  1981  001388  ECEB  F028         	call	___lwtofl	;wreg free
  1982  00138C  C01B  F155         	movff	?___lwtofl+3,doWork@calVoltage+3
  1983  001390  C01A  F154         	movff	?___lwtofl+2,doWork@calVoltage+2
  1984  001394  C019  F153         	movff	?___lwtofl+1,doWork@calVoltage+1
  1985  001398  C018  F152         	movff	?___lwtofl,doWork@calVoltage
  1986                           
  1987                           ;main.c: 447: for (i = 0; i < 6; i++) {
  1988  00139C  0101               	movlb	1	; () banked
  1989  00139E  6B83               	clrf	doWork@i& (0+255),b
  1990  0013A0                     l13900:
  1991                           
  1992                           ; BSR set to: 1
  1993                           ;main.c: 449: if (adc_conversion_flags & 1 << i) {
  1994  0013A0  ECE9  F00D         	call	PL44	;call to abstracted procedure
  1995  0013A4  D002               	goto	u13024
  1996  0013A6                     u13025:
  1997  0013A6  90D8               	bcf	status,0,c
  1998  0013A8  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  1999  0013AA                     u13024:
  2000  0013AA  2F91               	decfsz	??_doWork& (0+255),f,b
  2001  0013AC  D7FC               	goto	u13025
  2002  0013AE  5192               	movf	(??_doWork+1)& (0+255),w,b
  2003  0013B0  15B8               	andwf	_adc_conversion_flags& (0+255),w,b
  2004  0013B2  E101 D239          	bz	l13960
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;main.c: 452: avarage = 0;
  2008  0013B6  0101               	movlb	1	; () banked
  2009  0013B8  6B7B               	clrf	doWork@avarage& (0+255),b
  2010  0013BA  6B7C               	clrf	(doWork@avarage+1)& (0+255),b
  2011  0013BC  6B7D               	clrf	(doWork@avarage+2)& (0+255),b
  2012  0013BE  6B7E               	clrf	(doWork@avarage+3)& (0+255),b
  2013                           
  2014                           ;main.c: 453: for (j = 0; j < 80; j++) {
  2015  0013C0  6B78               	clrf	doWork@j& (0+255),b
  2016  0013C2                     l13908:
  2017                           
  2018                           ; BSR set to: 1
  2019                           ;main.c: 454: avarage += ((uint16_t) adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  2020  0013C2  0E01               	movlw	high doWork@avarage
  2021  0013C4  6E3C               	movwf	?___asfladd+1,c
  2022  0013C6  0E7B               	movlw	low doWork@avarage
  2023  0013C8  6E3B               	movwf	?___asfladd,c
  2024  0013CA  90D8               	bcf	status,0,c
  2025  0013CC  3583               	rlcf	doWork@i& (0+255),w,b
  2026  0013CE  0100               	movlb	0	; () banked
  2027  0013D0  6F91               	movwf	??_doWork& (0+255),b
  2028  0013D2  6B92               	clrf	(??_doWork+1)& (0+255),b
  2029  0013D4  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2030  0013D6  0101               	movlb	1	; () banked
  2031  0013D8  5178               	movf	doWork@j& (0+255),w,b
  2032  0013DA  0D0C               	mullw	12
  2033  0013DC  0E85               	movlw	low (_adc+1)
  2034  0013DE  24F3               	addwf	prodl,w,c
  2035  0013E0  0100               	movlb	0	; () banked
  2036  0013E2  6F93               	movwf	(??_doWork+2)& (0+255),b
  2037  0013E4  0E01               	movlw	high (_adc+1)
  2038  0013E6  20F4               	addwfc	prodh,w,c
  2039  0013E8  6F94               	movwf	(??_doWork+3)& (0+255),b
  2040  0013EA  5191               	movf	??_doWork& (0+255),w,b
  2041  0013EC  2593               	addwf	(??_doWork+2)& (0+255),w,b
  2042  0013EE  6ED9               	movwf	fsr2l,c
  2043  0013F0  5192               	movf	(??_doWork+1)& (0+255),w,b
  2044  0013F2  2194               	addwfc	(??_doWork+3)& (0+255),w,b
  2045  0013F4  6EDA               	movwf	fsr2h,c
  2046  0013F6  50DF               	movf	indf2,w,c
  2047  0013F8  6F95               	movwf	(??_doWork+4)& (0+255),b
  2048  0013FA  90D8               	bcf	status,0,c
  2049  0013FC  0101               	movlb	1	; () banked
  2050  0013FE  3583               	rlcf	doWork@i& (0+255),w,b
  2051  001400  0100               	movlb	0	; () banked
  2052  001402  6F96               	movwf	(??_doWork+5)& (0+255),b
  2053  001404  6B97               	clrf	(??_doWork+6)& (0+255),b
  2054  001406  3797               	rlcf	(??_doWork+6)& (0+255),f,b
  2055  001408  0101               	movlb	1	; () banked
  2056  00140A  5178               	movf	doWork@j& (0+255),w,b
  2057  00140C  0D0C               	mullw	12
  2058  00140E  0E84               	movlw	low _adc
  2059  001410  24F3               	addwf	prodl,w,c
  2060  001412  0100               	movlb	0	; () banked
  2061  001414  6F98               	movwf	(??_doWork+7)& (0+255),b
  2062  001416  0E01               	movlw	high _adc
  2063  001418  20F4               	addwfc	prodh,w,c
  2064  00141A  6F99               	movwf	(??_doWork+8)& (0+255),b
  2065  00141C  5196               	movf	(??_doWork+5)& (0+255),w,b
  2066  00141E  2598               	addwf	(??_doWork+7)& (0+255),w,b
  2067  001420  6ED9               	movwf	fsr2l,c
  2068  001422  5197               	movf	(??_doWork+6)& (0+255),w,b
  2069  001424  2199               	addwfc	(??_doWork+8)& (0+255),w,b
  2070  001426  6EDA               	movwf	fsr2h,c
  2071  001428  50DF               	movf	indf2,w,c
  2072  00142A  6E19               	movwf	?___lwtofl+1,c
  2073  00142C  5195               	movf	(??_doWork+4)& (0+255),w,b
  2074  00142E  6E18               	movwf	?___lwtofl,c
  2075  001430  ECEB  F028         	call	___lwtofl	;wreg free
  2076  001434  C01B  F040         	movff	?___lwtofl+3,?___asfladd+5
  2077  001438  C01A  F03F         	movff	?___lwtofl+2,?___asfladd+4
  2078  00143C  C019  F03E         	movff	?___lwtofl+1,?___asfladd+3
  2079  001440  C018  F03D         	movff	?___lwtofl,?___asfladd+2
  2080  001444  EC69  F026         	call	___asfladd	;wreg free
  2081                           
  2082                           ; BSR set to: 0
  2083  001448  0101               	movlb	1	; () banked
  2084  00144A  2B78               	incf	doWork@j& (0+255),f,b
  2085                           
  2086                           ; BSR set to: 1
  2087  00144C  0E4F               	movlw	79
  2088  00144E  6578               	cpfsgt	doWork@j& (0+255),b
  2089  001450  D7B8               	goto	l13908
  2090                           
  2091                           ; BSR set to: 1
  2092                           ;main.c: 458: if (1) {
  2093  001452  0E01               	movlw	high doWork@avarage
  2094  001454  0100               	movlb	0	; () banked
  2095  001456  6F87               	movwf	(?___asfldiv+1)& (0+255),b
  2096  001458  0E7B               	movlw	low doWork@avarage
  2097  00145A  6F86               	movwf	?___asfldiv& (0+255),b
  2098  00145C  6B88               	clrf	(?___asfldiv+2)& (0+255),b
  2099  00145E  6B89               	clrf	(?___asfldiv+3)& (0+255),b
  2100  001460  0EA0               	movlw	160
  2101  001462  6F8A               	movwf	(?___asfldiv+4)& (0+255),b
  2102  001464  0E42               	movlw	66
  2103  001466  6F8B               	movwf	(?___asfldiv+5)& (0+255),b
  2104  001468  ECB7  F026         	call	___asfldiv	;wreg free
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;main.c: 466: B = (uint16_t) readEEPROM(2 * i + 0x4F)*256 +
  2108                           ;main.c: 467: readEEPROM(2 * i + 0x50);
  2109  00146C  0101               	movlb	1	; () banked
  2110  00146E  5183               	movf	doWork@i& (0+255),w,b
  2111  001470  0D02               	mullw	2
  2112  001472  0E50               	movlw	80
  2113  001474  24F3               	addwf	prodl,w,c
  2114  001476  6E0E               	movwf	?_readEEPROM,c
  2115  001478  0E00               	movlw	0
  2116  00147A  20F4               	addwfc	prodh,w,c
  2117  00147C  6E0F               	movwf	?_readEEPROM+1,c
  2118  00147E  EC62  F02A         	call	_readEEPROM	;wreg free
  2119  001482  0100               	movlb	0	; () banked
  2120  001484  6F91               	movwf	??_doWork& (0+255),b
  2121  001486  0101               	movlb	1	; () banked
  2122  001488  5183               	movf	doWork@i& (0+255),w,b
  2123  00148A  0D02               	mullw	2
  2124  00148C  0E4F               	movlw	79
  2125  00148E  24F3               	addwf	prodl,w,c
  2126  001490  6E0E               	movwf	?_readEEPROM,c
  2127  001492  0E00               	movlw	0
  2128  001494  20F4               	addwfc	prodh,w,c
  2129  001496  6E0F               	movwf	?_readEEPROM+1,c
  2130  001498  EC62  F02A         	call	_readEEPROM	;wreg free
  2131  00149C  0101               	movlb	1	; () banked
  2132  00149E  6F73               	movwf	(doWork@B+1)& (0+255),b
  2133  0014A0  0100               	movlb	0	; () banked
  2134  0014A2  5191               	movf	??_doWork& (0+255),w,b
  2135  0014A4  0101               	movlb	1	; () banked
  2136  0014A6  6F72               	movwf	doWork@B& (0+255),b
  2137                           
  2138                           ; BSR set to: 1
  2139                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2140  0014A8  0E33               	movlw	51
  2141  0014AA  0100               	movlb	0	; () banked
  2142  0014AC  6F74               	movwf	(?___fldiv+4)& (0+255),b
  2143  0014AE  0E13               	movlw	19
  2144  0014B0  6F75               	movwf	(?___fldiv+5)& (0+255),b
  2145  0014B2  0E95               	movlw	149
  2146  0014B4  6F76               	movwf	(?___fldiv+6)& (0+255),b
  2147  0014B6  0EC3               	movlw	195
  2148  0014B8  6F77               	movwf	(?___fldiv+7)& (0+255),b
  2149  0014BA  C172  F018         	movff	doWork@B,?___lwtofl
  2150  0014BE  C173  F019         	movff	doWork@B+1,?___lwtofl+1
  2151  0014C2  ECEB  F028         	call	___lwtofl	;wreg free
  2152  0014C6  C01B  F073         	movff	?___lwtofl+3,?___fldiv+3
  2153  0014CA  C01A  F072         	movff	?___lwtofl+2,?___fldiv+2
  2154  0014CE  C019  F071         	movff	?___lwtofl+1,?___fldiv+1
  2155  0014D2  C018  F070         	movff	?___lwtofl,?___fldiv
  2156  0014D6  EC39  F023         	call	___fldiv	;wreg free
  2157  0014DA  C073  F159         	movff	?___fldiv+3,_doWork$2270+3
  2158  0014DE  C072  F158         	movff	?___fldiv+2,_doWork$2270+2
  2159  0014E2  C071  F157         	movff	?___fldiv+1,_doWork$2270+1
  2160  0014E6  C070  F156         	movff	?___fldiv,_doWork$2270
  2161                           
  2162                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2163  0014EA  C156  F086         	movff	_doWork$2270,?_exp
  2164  0014EE  C157  F087         	movff	_doWork$2270+1,?_exp+1
  2165  0014F2  C158  F088         	movff	_doWork$2270+2,?_exp+2
  2166  0014F6  C159  F089         	movff	_doWork$2270+3,?_exp+3
  2167  0014FA  EC7E  F019         	call	_exp	;wreg free
  2168  0014FE  C089  F15D         	movff	?_exp+3,_doWork$2271+3
  2169  001502  C088  F15C         	movff	?_exp+2,_doWork$2271+2
  2170  001506  C087  F15B         	movff	?_exp+1,_doWork$2271+1
  2171  00150A  C086  F15A         	movff	?_exp,_doWork$2271
  2172                           
  2173                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2174  00150E  C15A  F01E         	movff	_doWork$2271,?___flmul
  2175  001512  C15B  F01F         	movff	_doWork$2271+1,?___flmul+1
  2176  001516  C15C  F020         	movff	_doWork$2271+2,?___flmul+2
  2177  00151A  C15D  F021         	movff	_doWork$2271+3,?___flmul+3
  2178  00151E  DB69               	call	PL70	;call to abstracted procedure
  2179  001520  ECB3  F020         	call	___flmul	;wreg free
  2180  001524  C021  F151         	movff	?___flmul+3,doWork@Rinf+3
  2181  001528  C020  F150         	movff	?___flmul+2,doWork@Rinf+2
  2182  00152C  C01F  F14F         	movff	?___flmul+1,doWork@Rinf+1
  2183  001530  C01E  F14E         	movff	?___flmul,doWork@Rinf
  2184                           
  2185                           ;main.c: 472: v = 5.0 * (double) avarage / 1025;
  2186  001534  6A22               	clrf	?___flmul+4,c
  2187  001536  6A23               	clrf	?___flmul+5,c
  2188  001538  0EA0               	movlw	160
  2189  00153A  6E24               	movwf	?___flmul+6,c
  2190  00153C  0E40               	movlw	64
  2191  00153E  6E25               	movwf	?___flmul+7,c
  2192  001540  C17B  F01E         	movff	doWork@avarage,?___flmul
  2193  001544  C17C  F01F         	movff	doWork@avarage+1,?___flmul+1
  2194  001548  C17D  F020         	movff	doWork@avarage+2,?___flmul+2
  2195  00154C  C17E  F021         	movff	doWork@avarage+3,?___flmul+3
  2196  001550  ECB3  F020         	call	___flmul	;wreg free
  2197  001554  C021  F073         	movff	?___flmul+3,?___fldiv+3
  2198  001558  C020  F072         	movff	?___flmul+2,?___fldiv+2
  2199  00155C  C01F  F071         	movff	?___flmul+1,?___fldiv+1
  2200  001560  C01E  F070         	movff	?___flmul,?___fldiv
  2201  001564  0100               	movlb	0	; () banked
  2202  001566  6B74               	clrf	(?___fldiv+4)& (0+255),b
  2203  001568  0E20               	movlw	32
  2204  00156A  6F75               	movwf	(?___fldiv+5)& (0+255),b
  2205  00156C  0E80               	movlw	128
  2206  00156E  6F76               	movwf	(?___fldiv+6)& (0+255),b
  2207  001570  0E44               	movlw	68
  2208  001572  6F77               	movwf	(?___fldiv+7)& (0+255),b
  2209  001574  EC39  F023         	call	___fldiv	;wreg free
  2210  001578  C073  F171         	movff	?___fldiv+3,doWork@v+3
  2211  00157C  C072  F170         	movff	?___fldiv+2,doWork@v+2
  2212  001580  C071  F16F         	movff	?___fldiv+1,doWork@v+1
  2213  001584  C070  F16E         	movff	?___fldiv,doWork@v
  2214                           
  2215                           ;main.c: 474: resistance = (calVoltage - 10000.0 * v) / v;
  2216  001588  DB34               	call	PL70	;call to abstracted procedure
  2217  00158A  C16E  F01E         	movff	doWork@v,?___flmul
  2218  00158E  C16F  F01F         	movff	doWork@v+1,?___flmul+1
  2219  001592  C170  F020         	movff	doWork@v+2,?___flmul+2
  2220  001596  C171  F021         	movff	doWork@v+3,?___flmul+3
  2221  00159A  ECB3  F020         	call	___flmul	;wreg free
  2222  00159E  C021  F06F         	movff	?___flmul+3,?___flsub+7
  2223  0015A2  C020  F06E         	movff	?___flmul+2,?___flsub+6
  2224  0015A6  C01F  F06D         	movff	?___flmul+1,?___flsub+5
  2225  0015AA  C01E  F06C         	movff	?___flmul,?___flsub+4
  2226  0015AE  C152  F068         	movff	doWork@calVoltage,?___flsub
  2227  0015B2  C153  F069         	movff	doWork@calVoltage+1,?___flsub+1
  2228  0015B6  C154  F06A         	movff	doWork@calVoltage+2,?___flsub+2
  2229  0015BA  C155  F06B         	movff	doWork@calVoltage+3,?___flsub+3
  2230  0015BE  EC1A  F028         	call	___flsub	;wreg free
  2231  0015C2  C06B  F073         	movff	?___flsub+3,?___fldiv+3
  2232  0015C6  C06A  F072         	movff	?___flsub+2,?___fldiv+2
  2233  0015CA  C069  F071         	movff	?___flsub+1,?___fldiv+1
  2234  0015CE  C068  F070         	movff	?___flsub,?___fldiv
  2235  0015D2  C16E  F074         	movff	doWork@v,?___fldiv+4
  2236  0015D6  C16F  F075         	movff	doWork@v+1,?___fldiv+5
  2237  0015DA  C170  F076         	movff	doWork@v+2,?___fldiv+6
  2238  0015DE  C171  F077         	movff	doWork@v+3,?___fldiv+7
  2239  0015E2  EC39  F023         	call	___fldiv	;wreg free
  2240  0015E6  C073  F177         	movff	?___fldiv+3,doWork@resistance+3
  2241  0015EA  C072  F176         	movff	?___fldiv+2,doWork@resistance+2
  2242  0015EE  C071  F175         	movff	?___fldiv+1,doWork@resistance+1
  2243  0015F2  C070  F174         	movff	?___fldiv,doWork@resistance
  2244                           
  2245                           ;main.c: 476: temp = ((double) B) / log(resistance / Rinf);
  2246  0015F6  C14E  F074         	movff	doWork@Rinf,?___fldiv+4
  2247  0015FA  C14F  F075         	movff	doWork@Rinf+1,?___fldiv+5
  2248  0015FE  C150  F076         	movff	doWork@Rinf+2,?___fldiv+6
  2249  001602  C151  F077         	movff	doWork@Rinf+3,?___fldiv+7
  2250  001606  C174  F070         	movff	doWork@resistance,?___fldiv
  2251  00160A  C175  F071         	movff	doWork@resistance+1,?___fldiv+1
  2252  00160E  C176  F072         	movff	doWork@resistance+2,?___fldiv+2
  2253  001612  C177  F073         	movff	doWork@resistance+3,?___fldiv+3
  2254  001616  EC39  F023         	call	___fldiv	;wreg free
  2255  00161A  C073  F089         	movff	?___fldiv+3,?_log+3
  2256  00161E  C072  F088         	movff	?___fldiv+2,?_log+2
  2257  001622  C071  F087         	movff	?___fldiv+1,?_log+1
  2258  001626  C070  F086         	movff	?___fldiv,?_log
  2259  00162A  EC87  F01D         	call	_log	;wreg free
  2260  00162E  C089  F161         	movff	?_log+3,_doWork$2272+3
  2261  001632  C088  F160         	movff	?_log+2,_doWork$2272+2
  2262  001636  C087  F15F         	movff	?_log+1,_doWork$2272+1
  2263  00163A  C086  F15E         	movff	?_log,_doWork$2272
  2264                           
  2265                           ;main.c: 476: temp = ((double) B) / log(resistance / Rinf);
  2266  00163E  C172  F018         	movff	doWork@B,?___lwtofl
  2267  001642  C173  F019         	movff	doWork@B+1,?___lwtofl+1
  2268  001646  ECEB  F028         	call	___lwtofl	;wreg free
  2269  00164A  C01B  F073         	movff	?___lwtofl+3,?___fldiv+3
  2270  00164E  C01A  F072         	movff	?___lwtofl+2,?___fldiv+2
  2271  001652  C019  F071         	movff	?___lwtofl+1,?___fldiv+1
  2272  001656  C018  F070         	movff	?___lwtofl,?___fldiv
  2273  00165A  C15E  F074         	movff	_doWork$2272,?___fldiv+4
  2274  00165E  C15F  F075         	movff	_doWork$2272+1,?___fldiv+5
  2275  001662  C160  F076         	movff	_doWork$2272+2,?___fldiv+6
  2276  001666  C161  F077         	movff	_doWork$2272+3,?___fldiv+7
  2277  00166A  EC39  F023         	call	___fldiv	;wreg free
  2278  00166E  C073  F182         	movff	?___fldiv+3,doWork@temp+3
  2279  001672  C072  F181         	movff	?___fldiv+2,doWork@temp+2
  2280  001676  C071  F180         	movff	?___fldiv+1,doWork@temp+1
  2281  00167A  C070  F17F         	movff	?___fldiv,doWork@temp
  2282                           
  2283                           ;main.c: 478: temp -= 273.15;
  2284  00167E  0101               	movlb	1	; () banked
  2285  001680  0E01               	movlw	high doWork@temp
  2286  001682  6E3C               	movwf	?___asflsub+1,c
  2287  001684  0E7F               	movlw	low doWork@temp
  2288  001686  6E3B               	movwf	?___asflsub,c
  2289  001688  0E33               	movlw	51
  2290  00168A  6E3D               	movwf	?___asflsub+2,c
  2291  00168C  0E93               	movlw	147
  2292  00168E  6E3E               	movwf	?___asflsub+3,c
  2293  001690  0E88               	movlw	136
  2294  001692  6E3F               	movwf	?___asflsub+4,c
  2295  001694  0E43               	movlw	67
  2296  001696  6E40               	movwf	?___asflsub+5,c
  2297  001698  EC90  F026         	call	___asflsub	;wreg free
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 493: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2301  00169C  0101               	movlb	1	; () banked
  2302  00169E  DA2E               	call	PL8	;call to abstracted procedure
  2303  0016A0  CFDE F091          	movff	postinc2,??_doWork
  2304  0016A4  CFDD F092          	movff	postdec2,??_doWork+1
  2305  0016A8  C091  F093         	movff	??_doWork,??_doWork+2
  2306  0016AC  C092  F094         	movff	??_doWork+1,??_doWork+3
  2307  0016B0  0E00               	movlw	0
  2308  0016B2  BF94               	btfsc	(??_doWork+3)& (0+255),7,b
  2309  0016B4  0EFF               	movlw	255
  2310  0016B6  6F95               	movwf	(??_doWork+4)& (0+255),b
  2311  0016B8  6F96               	movwf	(??_doWork+5)& (0+255),b
  2312  0016BA  0101               	movlb	1	; () banked
  2313  0016BC  5183               	movf	doWork@i& (0+255),w,b
  2314  0016BE  EC73  F027         	call	_getCalibrationValue
  2315  0016C2  C012  F097         	movff	?_getCalibrationValue,??_doWork+6
  2316  0016C6  C013  F098         	movff	?_getCalibrationValue+1,??_doWork+7
  2317  0016CA  0E00               	movlw	0
  2318  0016CC  0100               	movlb	0	; () banked
  2319  0016CE  BF98               	btfsc	(??_doWork+7)& (0+255),7,b
  2320  0016D0  0EFF               	movlw	255
  2321  0016D2  6F99               	movwf	(??_doWork+8)& (0+255),b
  2322  0016D4  6F9A               	movwf	(??_doWork+9)& (0+255),b
  2323  0016D6  6A22               	clrf	?___flmul+4,c
  2324  0016D8  6A23               	clrf	?___flmul+5,c
  2325  0016DA  0EC8               	movlw	200
  2326  0016DC  6E24               	movwf	?___flmul+6,c
  2327  0016DE  0E42               	movlw	66
  2328  0016E0  6E25               	movwf	?___flmul+7,c
  2329  0016E2  C17F  F01E         	movff	doWork@temp,?___flmul
  2330  0016E6  C180  F01F         	movff	doWork@temp+1,?___flmul+1
  2331  0016EA  C181  F020         	movff	doWork@temp+2,?___flmul+2
  2332  0016EE  C182  F021         	movff	doWork@temp+3,?___flmul+3
  2333  0016F2  ECB3  F020         	call	___flmul	;wreg free
  2334  0016F6  C021  F037         	movff	?___flmul+3,?___fltol+3
  2335  0016FA  C020  F036         	movff	?___flmul+2,?___fltol+2
  2336  0016FE  C01F  F035         	movff	?___flmul+1,?___fltol+1
  2337  001702  C01E  F034         	movff	?___flmul,?___fltol
  2338  001706  EC33  F024         	call	___fltol	;wreg free
  2339  00170A  0100               	movlb	0	; () banked
  2340  00170C  5197               	movf	(??_doWork+6)& (0+255),w,b
  2341  00170E  2434               	addwf	?___fltol,w,c
  2342  001710  6F9B               	movwf	(??_doWork+10)& (0+255),b
  2343  001712  5198               	movf	(??_doWork+7)& (0+255),w,b
  2344  001714  2035               	addwfc	?___fltol+1,w,c
  2345  001716  6F9C               	movwf	(??_doWork+11)& (0+255),b
  2346  001718  5199               	movf	(??_doWork+8)& (0+255),w,b
  2347  00171A  2036               	addwfc	?___fltol+2,w,c
  2348  00171C  6F9D               	movwf	(??_doWork+12)& (0+255),b
  2349  00171E  519A               	movf	(??_doWork+9)& (0+255),w,b
  2350  001720  2037               	addwfc	?___fltol+3,w,c
  2351  001722  6F9E               	movwf	(??_doWork+13)& (0+255),b
  2352  001724  5193               	movf	(??_doWork+2)& (0+255),w,b
  2353  001726  259B               	addwf	(??_doWork+10)& (0+255),w,b
  2354  001728  6E3E               	movwf	?___aldiv,c
  2355  00172A  5194               	movf	(??_doWork+3)& (0+255),w,b
  2356  00172C  219C               	addwfc	(??_doWork+11)& (0+255),w,b
  2357  00172E  6E3F               	movwf	?___aldiv+1,c
  2358  001730  5195               	movf	(??_doWork+4)& (0+255),w,b
  2359  001732  219D               	addwfc	(??_doWork+12)& (0+255),w,b
  2360  001734  6E40               	movwf	?___aldiv+2,c
  2361  001736  5196               	movf	(??_doWork+5)& (0+255),w,b
  2362  001738  219E               	addwfc	(??_doWork+13)& (0+255),w,b
  2363  00173A  6E41               	movwf	?___aldiv+3,c
  2364  00173C  0E02               	movlw	2
  2365  00173E  6E42               	movwf	?___aldiv+4,c
  2366  001740  0E00               	movlw	0
  2367  001742  6A43               	clrf	?___aldiv+5,c
  2368  001744  6A44               	clrf	?___aldiv+6,c
  2369  001746  6A45               	clrf	?___aldiv+7,c
  2370  001748  EC72  F021         	call	___aldiv	;wreg free
  2371  00174C  D9DF               	call	PL10	;call to abstracted procedure
  2372  00174E  C03E  FFDE         	movff	?___aldiv,postinc2
  2373  001752  C03F  FFDD         	movff	?___aldiv+1,postdec2
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;main.c: 514: }
  2377                           ;main.c: 517: if (current_temp[ i ] <
  2378                           ;main.c: 518: (int16_t) (readEEPROM(2 * i + 0x7F)*256 +
  2379                           ;main.c: 519: readEEPROM(2 * i + 0x80))) {
  2380                           
  2381                           ;main.c: 495: }
  2382  001756  5183               	movf	doWork@i& (0+255),w,b
  2383  001758  0D02               	mullw	2
  2384  00175A  0E7F               	movlw	127
  2385  00175C  24F3               	addwf	prodl,w,c
  2386  00175E  6E0E               	movwf	?_readEEPROM,c
  2387  001760  0E00               	movlw	0
  2388  001762  20F4               	addwfc	prodh,w,c
  2389  001764  6E0F               	movwf	?_readEEPROM+1,c
  2390  001766  EC62  F02A         	call	_readEEPROM	;wreg free
  2391  00176A  0100               	movlb	0	; () banked
  2392  00176C  6F92               	movwf	(??_doWork+1)& (0+255),b
  2393  00176E  6B91               	clrf	??_doWork& (0+255),b
  2394  001770  0101               	movlb	1	; () banked
  2395  001772  5183               	movf	doWork@i& (0+255),w,b
  2396  001774  0D02               	mullw	2
  2397  001776  0E80               	movlw	128
  2398  001778  24F3               	addwf	prodl,w,c
  2399  00177A  6E0E               	movwf	?_readEEPROM,c
  2400  00177C  0E00               	movlw	0
  2401  00177E  20F4               	addwfc	prodh,w,c
  2402  001780  6E0F               	movwf	?_readEEPROM+1,c
  2403  001782  EC62  F02A         	call	_readEEPROM	;wreg free
  2404  001786  0100               	movlb	0	; () banked
  2405  001788  2791               	addwf	??_doWork& (0+255),f,b
  2406  00178A  0E00               	movlw	0
  2407  00178C  2392               	addwfc	(??_doWork+1)& (0+255),f,b
  2408  00178E  0101               	movlb	1	; () banked
  2409  001790  D9B5               	call	PL8	;call to abstracted procedure
  2410  001792  CFDE F093          	movff	postinc2,??_doWork+2
  2411  001796  CFDD F094          	movff	postdec2,??_doWork+3
  2412  00179A  DA22               	call	PL60	;call to abstracted procedure
  2413  00179C  E20D               	bc	l201
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;main.c: 521: writeEEPROM(2 * i + 0x7F, current_temp[ i ] >> 8);
  2417  00179E  D998               	call	PL4	;call to abstracted procedure
  2418  0017A0  0E7F               	movlw	127
  2419  0017A2  D99E               	call	PL6	;call to abstracted procedure
  2420  0017A4  D9FE               	call	PL34	;call to abstracted procedure
  2421  0017A6  EC65  F029         	call	_writeEEPROM	;wreg free
  2422                           
  2423                           ;main.c: 522: writeEEPROM(2 * i + 0x80, 0xff & current_temp[ i ]);
  2424  0017AA  D992               	call	PL4	;call to abstracted procedure
  2425  0017AC  0E80               	movlw	128
  2426  0017AE  D998               	call	PL6	;call to abstracted procedure
  2427  0017B0  50DF               	movf	indf2,w,c
  2428  0017B2  6E10               	movwf	?_writeEEPROM+2,c
  2429  0017B4  EC65  F029         	call	_writeEEPROM	;wreg free
  2430  0017B8                     l201:
  2431                           
  2432                           ;main.c: 523: }
  2433                           ;main.c: 526: if (current_temp[ i ] >
  2434                           ;main.c: 527: (int16_t) (readEEPROM(2 * i + 0x8B)*256 +
  2435                           ;main.c: 528: readEEPROM(2 * i + 0x8C))) {
  2436  0017B8  D9A9               	call	PL10	;call to abstracted procedure
  2437  0017BA  CFDE F091          	movff	postinc2,??_doWork
  2438  0017BE  CFDD F092          	movff	postdec2,??_doWork+1
  2439  0017C2  5183               	movf	doWork@i& (0+255),w,b
  2440  0017C4  0D02               	mullw	2
  2441  0017C6  0E8B               	movlw	139
  2442  0017C8  24F3               	addwf	prodl,w,c
  2443  0017CA  6E0E               	movwf	?_readEEPROM,c
  2444  0017CC  0E00               	movlw	0
  2445  0017CE  20F4               	addwfc	prodh,w,c
  2446  0017D0  6E0F               	movwf	?_readEEPROM+1,c
  2447  0017D2  EC62  F02A         	call	_readEEPROM	;wreg free
  2448  0017D6  0100               	movlb	0	; () banked
  2449  0017D8  6F94               	movwf	(??_doWork+3)& (0+255),b
  2450  0017DA  6B93               	clrf	(??_doWork+2)& (0+255),b
  2451  0017DC  0101               	movlb	1	; () banked
  2452  0017DE  5183               	movf	doWork@i& (0+255),w,b
  2453  0017E0  0D02               	mullw	2
  2454  0017E2  0E8C               	movlw	140
  2455  0017E4  24F3               	addwf	prodl,w,c
  2456  0017E6  6E0E               	movwf	?_readEEPROM,c
  2457  0017E8  0E00               	movlw	0
  2458  0017EA  20F4               	addwfc	prodh,w,c
  2459  0017EC  6E0F               	movwf	?_readEEPROM+1,c
  2460  0017EE  EC62  F02A         	call	_readEEPROM	;wreg free
  2461  0017F2  0100               	movlb	0	; () banked
  2462  0017F4  2793               	addwf	(??_doWork+2)& (0+255),f,b
  2463  0017F6  0E00               	movlw	0
  2464  0017F8  2394               	addwfc	(??_doWork+3)& (0+255),f,b
  2465  0017FA  D9F2               	call	PL60	;call to abstracted procedure
  2466  0017FC  E20D               	bc	l13958
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;main.c: 530: writeEEPROM(2 * i + 0x8B, current_temp[ i ] >> 8);
  2470  0017FE  D968               	call	PL4	;call to abstracted procedure
  2471  001800  0E8B               	movlw	139
  2472  001802  D96E               	call	PL6	;call to abstracted procedure
  2473  001804  D9CE               	call	PL34	;call to abstracted procedure
  2474  001806  EC65  F029         	call	_writeEEPROM	;wreg free
  2475                           
  2476                           ;main.c: 531: writeEEPROM(2 * i + 0x8C, 0xff & current_temp[ i ]);
  2477  00180A  D962               	call	PL4	;call to abstracted procedure
  2478  00180C  0E8C               	movlw	140
  2479  00180E  D968               	call	PL6	;call to abstracted procedure
  2480  001810  50DF               	movf	indf2,w,c
  2481  001812  6E10               	movwf	?_writeEEPROM+2,c
  2482  001814  EC65  F029         	call	_writeEEPROM	;wreg free
  2483  001818                     l13958:
  2484                           
  2485                           ;main.c: 532: }
  2486                           ;main.c: 535: adc_conversion_flags &= ~(1 << i);
  2487  001818  D9DC               	call	PL44	;call to abstracted procedure
  2488  00181A  D002               	goto	u13074
  2489  00181C                     u13075:
  2490  00181C  90D8               	bcf	status,0,c
  2491  00181E  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2492  001820                     u13074:
  2493  001820  2F91               	decfsz	??_doWork& (0+255),f,b
  2494  001822  D7FC               	goto	u13075
  2495  001824  1D92               	comf	(??_doWork+1)& (0+255),w,b
  2496  001826  17B8               	andwf	_adc_conversion_flags& (0+255),f,b
  2497  001828                     l13960:
  2498                           
  2499                           ; BSR set to: 0
  2500  001828  0101               	movlb	1	; () banked
  2501  00182A  2B83               	incf	doWork@i& (0+255),f,b
  2502                           
  2503                           ; BSR set to: 1
  2504  00182C  0E05               	movlw	5
  2505  00182E  6583               	cpfsgt	doWork@i& (0+255),b
  2506  001830  D5B7               	goto	l13900
  2507                           
  2508                           ; BSR set to: 1
  2509                           ;main.c: 537: }
  2510                           ;main.c: 538: }
  2511                           ;main.c: 541: if (0x03 == vscp_node_state) {
  2512  001832  0100               	movlb	0	; () banked
  2513  001834  51C0               	movf	_vscp_node_state& (0+255),w,b
  2514  001836  0A03               	xorlw	3
  2515  001838  E001 D149          	bnz	l224
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;main.c: 544: for (i = 0; i < 6; i++) {
  2519  00183C  0101               	movlb	1	; () banked
  2520  00183E  6B83               	clrf	doWork@i& (0+255),b
  2521  001840                     l13972:
  2522                           
  2523                           ; BSR set to: 1
  2524                           ;main.c: 547: if (low_alarm & 1 << i) {
  2525  001840  D9C8               	call	PL44	;call to abstracted procedure
  2526  001842  D002               	goto	u13104
  2527  001844                     u13105:
  2528  001844  90D8               	bcf	status,0,c
  2529  001846  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2530  001848                     u13104:
  2531  001848  2F91               	decfsz	??_doWork& (0+255),f,b
  2532  00184A  D7FC               	goto	u13105
  2533  00184C  5192               	movf	(??_doWork+1)& (0+255),w,b
  2534  00184E  15BA               	andwf	_low_alarm& (0+255),w,b
  2535  001850  E035               	bz	l13980
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;main.c: 550: setpoint =
  2539                           ;main.c: 551: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2540                           ;main.c: 552: readEEPROM(2 * i + 0x5C) +
  2541                           ;main.c: 553: readEEPROM(i + 0x97)*100);
  2542  001852  D93E               	call	PL4	;call to abstracted procedure
  2543  001854  0E5C               	movlw	92
  2544  001856  2591               	addwf	??_doWork& (0+255),w,b
  2545  001858  6E0E               	movwf	?_readEEPROM,c
  2546  00185A  0E00               	movlw	0
  2547  00185C  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2548  00185E  6E0F               	movwf	?_readEEPROM+1,c
  2549  001860  EC62  F02A         	call	_readEEPROM	;wreg free
  2550  001864  0100               	movlb	0	; () banked
  2551  001866  6F93               	movwf	(??_doWork+2)& (0+255),b
  2552  001868  90D8               	bcf	status,0,c
  2553  00186A  0101               	movlb	1	; () banked
  2554  00186C  3583               	rlcf	doWork@i& (0+255),w,b
  2555  00186E  0100               	movlb	0	; () banked
  2556  001870  6F94               	movwf	(??_doWork+3)& (0+255),b
  2557  001872  6B95               	clrf	(??_doWork+4)& (0+255),b
  2558  001874  3795               	rlcf	(??_doWork+4)& (0+255),f,b
  2559  001876  0E5B               	movlw	91
  2560  001878  2594               	addwf	(??_doWork+3)& (0+255),w,b
  2561  00187A  6E0E               	movwf	?_readEEPROM,c
  2562  00187C  0E00               	movlw	0
  2563  00187E  2195               	addwfc	(??_doWork+4)& (0+255),w,b
  2564  001880  6E0F               	movwf	?_readEEPROM+1,c
  2565  001882  EC62  F02A         	call	_readEEPROM	;wreg free
  2566  001886  0100               	movlb	0	; () banked
  2567  001888  6F97               	movwf	(??_doWork+6)& (0+255),b
  2568  00188A  6B96               	clrf	(??_doWork+5)& (0+255),b
  2569  00188C  0E97               	movlw	151
  2570  00188E  D946               	call	PL12	;call to abstracted procedure
  2571  001890  EC62  F02A         	call	_readEEPROM	;wreg free
  2572  001894  0D64               	mullw	100
  2573  001896  0100               	movlb	0	; () banked
  2574  001898  5196               	movf	(??_doWork+5)& (0+255),w,b
  2575  00189A  24F3               	addwf	prodl,w,c
  2576  00189C  6F98               	movwf	(??_doWork+7)& (0+255),b
  2577  00189E  5197               	movf	(??_doWork+6)& (0+255),w,b
  2578  0018A0  20F4               	addwfc	prodh,w,c
  2579  0018A2  6F99               	movwf	(??_doWork+8)& (0+255),b
  2580  0018A4  5193               	movf	(??_doWork+2)& (0+255),w,b
  2581  0018A6  2598               	addwf	(??_doWork+7)& (0+255),w,b
  2582  0018A8  0101               	movlb	1	; () banked
  2583  0018AA  6F79               	movwf	doWork@setpoint& (0+255),b
  2584  0018AC  0100               	movlb	0	; () banked
  2585  0018AE  0E00               	movlw	0
  2586  0018B0  2199               	addwfc	(??_doWork+8)& (0+255),w,b
  2587                           
  2588                           ; BSR set to: 1
  2589                           ;main.c: 558: if (current_temp[ i ] > setpoint) {
  2590  0018B2  D93B               	call	PL14	;call to abstracted procedure
  2591  0018B4  E263               	bc	l208
  2592  0018B6                     l13978:
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;main.c: 561: low_alarm &= ~(1 << i);
  2596  0018B6  D981               	call	PL36	;call to abstracted procedure
  2597  0018B8  17BA               	andwf	_low_alarm& (0+255),f,b
  2598  0018BA  D060               	goto	l208
  2599  0018BC                     l13980:
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;main.c: 566: else {
  2603                           ;main.c: 570: setpoint =
  2604                           ;main.c: 571: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2605                           ;main.c: 572: readEEPROM(2 * i + 0x5C));
  2606  0018BC  0101               	movlb	1	; () banked
  2607  0018BE  5183               	movf	doWork@i& (0+255),w,b
  2608  0018C0  0D02               	mullw	2
  2609  0018C2  0E5C               	movlw	92
  2610  0018C4  24F3               	addwf	prodl,w,c
  2611  0018C6  6E0E               	movwf	?_readEEPROM,c
  2612  0018C8  0E00               	movlw	0
  2613  0018CA  20F4               	addwfc	prodh,w,c
  2614  0018CC  6E0F               	movwf	?_readEEPROM+1,c
  2615  0018CE  EC62  F02A         	call	_readEEPROM	;wreg free
  2616  0018D2  0100               	movlb	0	; () banked
  2617  0018D4  6F91               	movwf	??_doWork& (0+255),b
  2618  0018D6  0101               	movlb	1	; () banked
  2619  0018D8  5183               	movf	doWork@i& (0+255),w,b
  2620  0018DA  0D02               	mullw	2
  2621  0018DC  0E5B               	movlw	91
  2622  0018DE  24F3               	addwf	prodl,w,c
  2623  0018E0  6E0E               	movwf	?_readEEPROM,c
  2624  0018E2  0E00               	movlw	0
  2625  0018E4  20F4               	addwfc	prodh,w,c
  2626  0018E6  6E0F               	movwf	?_readEEPROM+1,c
  2627  0018E8  EC62  F02A         	call	_readEEPROM	;wreg free
  2628  0018EC  D947               	call	PL20	;call to abstracted procedure
  2629  0018EE  0101               	movlb	1	; () banked
  2630  0018F0  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  2631                           
  2632                           ; BSR set to: 1
  2633                           ;main.c: 574: if (current_temp[ i ] < setpoint) {
  2634  0018F2  D904               	call	PL8	;call to abstracted procedure
  2635  0018F4  D932               	call	PL16	;call to abstracted procedure
  2636  0018F6  E242               	bc	l208
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;main.c: 577: low_alarm |= (1 << i);
  2640  0018F8  C183  F091         	movff	doWork@i,??_doWork
  2641  0018FC  0E01               	movlw	1
  2642  0018FE  6F92               	movwf	(??_doWork+1)& (0+255),b
  2643  001900  2B91               	incf	??_doWork& (0+255),f,b
  2644  001902  D002               	goto	u13154
  2645  001904                     u13155:
  2646  001904  90D8               	bcf	status,0,c
  2647  001906  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2648  001908                     u13154:
  2649  001908  2F91               	decfsz	??_doWork& (0+255),f,b
  2650  00190A  D7FC               	goto	u13155
  2651  00190C  5192               	movf	(??_doWork+1)& (0+255),w,b
  2652  00190E  13BA               	iorwf	_low_alarm& (0+255),f,b
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 582: vscp_alarmstatus |= 1;
  2656  001910  804A               	bsf	_vscp_alarmstatus,0,c
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;main.c: 585: if (readEEPROM(i + 0x43) & (1<<3)) {
  2660  001912  0E43               	movlw	67
  2661  001914  D903               	call	PL12	;call to abstracted procedure
  2662  001916  EC62  F02A         	call	_readEEPROM	;wreg free
  2663  00191A  0100               	movlb	0	; () banked
  2664  00191C  6F91               	movwf	??_doWork& (0+255),b
  2665  00191E  A791               	btfss	??_doWork& (0+255),3,b
  2666  001920  D02D               	goto	l208
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 587: vscp_omsg.vscp_class = 1;
  2670  001922  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  2671                           
  2672                           ;main.c: 588: vscp_omsg.vscp_type = 2;
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;main.c: 589: vscp_omsg.priority = 0x00;
  2676                           
  2677                           ;main.c: 590: vscp_omsg.flags = 0x80 + 3;
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;main.c: 593: if (readEEPROM(i + 0x43) & (1<<5)) {
  2681  001924  D936               	call	PL24	;call to abstracted procedure
  2682  001926  D8FA               	call	PL12	;call to abstracted procedure
  2683  001928  EC62  F02A         	call	_readEEPROM	;wreg free
  2684  00192C  0100               	movlb	0	; () banked
  2685  00192E  6F91               	movwf	??_doWork& (0+255),b
  2686  001930  AB91               	btfss	??_doWork& (0+255),5,b
  2687  001932  D012               	goto	l14002
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 595: if (readEEPROM(i + 0x43) & (1<<6)) {
  2691  001934  0E43               	movlw	67
  2692  001936  D8F2               	call	PL12	;call to abstracted procedure
  2693  001938  EC62  F02A         	call	_readEEPROM	;wreg free
  2694  00193C  0100               	movlb	0	; () banked
  2695  00193E  6F91               	movwf	??_doWork& (0+255),b
  2696  001940  AD91               	btfss	??_doWork& (0+255),6,b
  2697  001942  D005               	goto	l14000
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 596: vscp_omsg.vscp_class = 30;
  2701  001944  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  2702  001946  0E1E               	movlw	30
  2703  001948  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  2704                           
  2705                           ;main.c: 597: vscp_omsg.vscp_type = 5;
  2706  00194A  0E05               	movlw	5
  2707  00194C  D004               	goto	L1
  2708  00194E                     l14000:
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;main.c: 599: else {
  2712                           ;main.c: 600: vscp_omsg.vscp_class = 30;
  2713  00194E  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  2714  001950  0E1E               	movlw	30
  2715  001952  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  2716                           
  2717                           ;main.c: 601: vscp_omsg.vscp_type = 6;
  2718  001954  0E06               	movlw	6
  2719  001956                     L1:
  2720  001956  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  2721  001958                     l14002:
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;main.c: 602: }
  2725                           ;main.c: 604: }
  2726                           ;main.c: 606: vscp_omsg.data[ 0 ] = i;
  2727  001958  C183  F0D4         	movff	doWork@i,_vscp_omsg+5
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;main.c: 607: vscp_omsg.data[ 1 ] =
  2731                           ;main.c: 608: readEEPROM(2 * i + 0x73);
  2732  00195C  D8B9               	call	PL4	;call to abstracted procedure
  2733  00195E  D958               	call	PL80	;call to abstracted procedure
  2734  001960  EC62  F02A         	call	_readEEPROM	;wreg free
  2735  001964  0100               	movlb	0	; () banked
  2736  001966  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 609: vscp_omsg.data[ 2 ] =
  2740                           ;main.c: 610: readEEPROM(2 * i + 0x74);
  2741  001968  D8B3               	call	PL4	;call to abstracted procedure
  2742  00196A  D94B               	call	PL78	;call to abstracted procedure
  2743  00196C  EC62  F02A         	call	_readEEPROM	;wreg free
  2744  001970  0100               	movlb	0	; () banked
  2745  001972  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 613: if (!vscp_sendEvent()) {
  2749  001974  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  2750  001978  0900               	iorlw	0
  2751  00197A  E09D               	bz	l13978
  2752  00197C                     l208:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;main.c: 617: }
  2756                           ;main.c: 618: }
  2757                           ;main.c: 619: }
  2758                           ;main.c: 620: }
  2759                           ;main.c: 623: if ( high_alarm & (1 << i ) ) {
  2760  00197C  C183  F091         	movff	doWork@i,??_doWork
  2761  001980  0E01               	movlw	1
  2762  001982  6F92               	movwf	(??_doWork+1)& (0+255),b
  2763  001984  2B91               	incf	??_doWork& (0+255),f,b
  2764  001986  D002               	goto	u13204
  2765  001988                     u13205:
  2766  001988  90D8               	bcf	status,0,c
  2767  00198A  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2768  00198C                     u13204:
  2769  00198C  2F91               	decfsz	??_doWork& (0+255),f,b
  2770  00198E  D7FC               	goto	u13205
  2771  001990  5192               	movf	(??_doWork+1)& (0+255),w,b
  2772  001992  15B9               	andwf	_high_alarm& (0+255),w,b
  2773  001994  E03A               	bz	l14018
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 627: setpoint =
  2777                           ;main.c: 628: (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2778                           ;main.c: 629: readEEPROM(2 * i + 0x68) -
  2779                           ;main.c: 630: readEEPROM(i + 0x97)*100);
  2780  001996  D89C               	call	PL4	;call to abstracted procedure
  2781  001998  0E67               	movlw	103
  2782  00199A  2591               	addwf	??_doWork& (0+255),w,b
  2783  00199C  6E0E               	movwf	?_readEEPROM,c
  2784  00199E  0E00               	movlw	0
  2785  0019A0  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2786  0019A2  6E0F               	movwf	?_readEEPROM+1,c
  2787  0019A4  EC62  F02A         	call	_readEEPROM	;wreg free
  2788  0019A8  0100               	movlb	0	; () banked
  2789  0019AA  6F94               	movwf	(??_doWork+3)& (0+255),b
  2790  0019AC  6B93               	clrf	(??_doWork+2)& (0+255),b
  2791  0019AE  90D8               	bcf	status,0,c
  2792  0019B0  0101               	movlb	1	; () banked
  2793  0019B2  3583               	rlcf	doWork@i& (0+255),w,b
  2794  0019B4  0100               	movlb	0	; () banked
  2795  0019B6  6F95               	movwf	(??_doWork+4)& (0+255),b
  2796  0019B8  6B96               	clrf	(??_doWork+5)& (0+255),b
  2797  0019BA  3796               	rlcf	(??_doWork+5)& (0+255),f,b
  2798  0019BC  0E68               	movlw	104
  2799  0019BE  2595               	addwf	(??_doWork+4)& (0+255),w,b
  2800  0019C0  6E0E               	movwf	?_readEEPROM,c
  2801  0019C2  0E00               	movlw	0
  2802  0019C4  2196               	addwfc	(??_doWork+5)& (0+255),w,b
  2803  0019C6  6E0F               	movwf	?_readEEPROM+1,c
  2804  0019C8  EC62  F02A         	call	_readEEPROM	;wreg free
  2805  0019CC  0100               	movlb	0	; () banked
  2806  0019CE  2793               	addwf	(??_doWork+2)& (0+255),f,b
  2807  0019D0  0E00               	movlw	0
  2808  0019D2  2394               	addwfc	(??_doWork+3)& (0+255),f,b
  2809  0019D4  0E97               	movlw	151
  2810  0019D6  D8A2               	call	PL12	;call to abstracted procedure
  2811  0019D8  EC62  F02A         	call	_readEEPROM	;wreg free
  2812  0019DC  6E12               	movwf	?___wmul,c
  2813  0019DE  6A13               	clrf	?___wmul+1,c
  2814  0019E0  6815               	setf	?___wmul+3,c
  2815  0019E2  0E9C               	movlw	156
  2816  0019E4  6E14               	movwf	?___wmul+2,c
  2817  0019E6  EC8E  F028         	call	___wmul	;wreg free
  2818  0019EA  5012               	movf	?___wmul,w,c
  2819  0019EC  0100               	movlb	0	; () banked
  2820  0019EE  2593               	addwf	(??_doWork+2)& (0+255),w,b
  2821  0019F0  0101               	movlb	1	; () banked
  2822  0019F2  6F79               	movwf	doWork@setpoint& (0+255),b
  2823  0019F4  5013               	movf	?___wmul+1,w,c
  2824  0019F6  0100               	movlb	0	; () banked
  2825  0019F8  2194               	addwfc	(??_doWork+3)& (0+255),w,b
  2826  0019FA  0101               	movlb	1	; () banked
  2827  0019FC  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  2828                           
  2829                           ; BSR set to: 1
  2830                           ;main.c: 633: if (current_temp[ i ] < setpoint) {
  2831  0019FE  D87E               	call	PL8	;call to abstracted procedure
  2832  001A00  D8AC               	call	PL16	;call to abstracted procedure
  2833  001A02  E260               	bc	l14050
  2834  001A04                     l14016:
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;main.c: 636: high_alarm &= ~(1 << i);
  2838  001A04  D8DA               	call	PL36	;call to abstracted procedure
  2839  001A06  17B9               	andwf	_high_alarm& (0+255),f,b
  2840  001A08  D05D               	goto	l14050
  2841  001A0A                     l14018:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 641: else {
  2845                           ;main.c: 646: setpoint = (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2846                           ;main.c: 647: readEEPROM(2 * i + 0x68));
  2847  001A0A  0101               	movlb	1	; () banked
  2848  001A0C  5183               	movf	doWork@i& (0+255),w,b
  2849  001A0E  0D02               	mullw	2
  2850  001A10  0E68               	movlw	104
  2851  001A12  24F3               	addwf	prodl,w,c
  2852  001A14  6E0E               	movwf	?_readEEPROM,c
  2853  001A16  0E00               	movlw	0
  2854  001A18  20F4               	addwfc	prodh,w,c
  2855  001A1A  6E0F               	movwf	?_readEEPROM+1,c
  2856  001A1C  EC62  F02A         	call	_readEEPROM	;wreg free
  2857  001A20  0100               	movlb	0	; () banked
  2858  001A22  6F91               	movwf	??_doWork& (0+255),b
  2859  001A24  0101               	movlb	1	; () banked
  2860  001A26  5183               	movf	doWork@i& (0+255),w,b
  2861  001A28  0D02               	mullw	2
  2862  001A2A  0E67               	movlw	103
  2863  001A2C  24F3               	addwf	prodl,w,c
  2864  001A2E  6E0E               	movwf	?_readEEPROM,c
  2865  001A30  0E00               	movlw	0
  2866  001A32  20F4               	addwfc	prodh,w,c
  2867  001A34  6E0F               	movwf	?_readEEPROM+1,c
  2868  001A36  EC62  F02A         	call	_readEEPROM	;wreg free
  2869  001A3A  D8A0               	call	PL20	;call to abstracted procedure
  2870                           
  2871                           ; BSR set to: 1
  2872                           ;main.c: 649: if (current_temp[ i ] > setpoint) {
  2873  001A3C  D876               	call	PL14	;call to abstracted procedure
  2874  001A3E  E242               	bc	l14050
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;main.c: 652: high_alarm |= (1 << i);
  2878  001A40  C183  F091         	movff	doWork@i,??_doWork
  2879  001A44  0E01               	movlw	1
  2880  001A46  6F92               	movwf	(??_doWork+1)& (0+255),b
  2881  001A48  2B91               	incf	??_doWork& (0+255),f,b
  2882  001A4A  D002               	goto	u13254
  2883  001A4C                     u13255:
  2884  001A4C  90D8               	bcf	status,0,c
  2885  001A4E  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2886  001A50                     u13254:
  2887  001A50  2F91               	decfsz	??_doWork& (0+255),f,b
  2888  001A52  D7FC               	goto	u13255
  2889  001A54  5192               	movf	(??_doWork+1)& (0+255),w,b
  2890  001A56  13B9               	iorwf	_high_alarm& (0+255),f,b
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;main.c: 658: vscp_alarmstatus |= 2;
  2894  001A58  824A               	bsf	_vscp_alarmstatus,1,c
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;main.c: 661: if (readEEPROM(i + 0x43) & (1<<4)) {
  2898  001A5A  0E43               	movlw	67
  2899  001A5C  D85F               	call	PL12	;call to abstracted procedure
  2900  001A5E  EC62  F02A         	call	_readEEPROM	;wreg free
  2901  001A62  0100               	movlb	0	; () banked
  2902  001A64  6F91               	movwf	??_doWork& (0+255),b
  2903  001A66  A991               	btfss	??_doWork& (0+255),4,b
  2904  001A68  D02D               	goto	l14050
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;main.c: 663: vscp_omsg.vscp_class = 1;
  2908  001A6A  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  2909                           
  2910                           ;main.c: 664: vscp_omsg.vscp_type = 2;
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;main.c: 665: vscp_omsg.priority = 0x00;
  2914                           
  2915                           ;main.c: 666: vscp_omsg.flags = 0x80 + 3;
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;main.c: 668: if (readEEPROM(i + 0x43) & (1<<5)) {
  2919  001A6C  D892               	call	PL24	;call to abstracted procedure
  2920  001A6E  D856               	call	PL12	;call to abstracted procedure
  2921  001A70  EC62  F02A         	call	_readEEPROM	;wreg free
  2922  001A74  0100               	movlb	0	; () banked
  2923  001A76  6F91               	movwf	??_doWork& (0+255),b
  2924  001A78  AB91               	btfss	??_doWork& (0+255),5,b
  2925  001A7A  D012               	goto	l14040
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;main.c: 669: if (readEEPROM(i + 0x43) & (1<<6)) {
  2929  001A7C  0E43               	movlw	67
  2930  001A7E  D84E               	call	PL12	;call to abstracted procedure
  2931  001A80  EC62  F02A         	call	_readEEPROM	;wreg free
  2932  001A84  0100               	movlb	0	; () banked
  2933  001A86  6F91               	movwf	??_doWork& (0+255),b
  2934  001A88  AD91               	btfss	??_doWork& (0+255),6,b
  2935  001A8A  D005               	goto	l14038
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;main.c: 670: vscp_omsg.vscp_class = 30;
  2939  001A8C  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  2940  001A8E  0E1E               	movlw	30
  2941  001A90  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  2942                           
  2943                           ;main.c: 671: vscp_omsg.vscp_type = 6;
  2944  001A92  0E06               	movlw	6
  2945  001A94  D004               	goto	L2
  2946  001A96                     l14038:
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;main.c: 673: vscp_omsg.vscp_class = 30;
  2950  001A96  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  2951  001A98  0E1E               	movlw	30
  2952  001A9A  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  2953                           
  2954                           ;main.c: 674: vscp_omsg.vscp_type = 5;
  2955  001A9C  0E05               	movlw	5
  2956  001A9E                     L2:
  2957  001A9E  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  2958  001AA0                     l14040:
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;main.c: 675: }
  2962                           ;main.c: 676: }
  2963                           ;main.c: 678: vscp_omsg.data[ 0 ] = i;
  2964  001AA0  C183  F0D4         	movff	doWork@i,_vscp_omsg+5
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 679: vscp_omsg.data[ 1 ] =
  2968                           ;main.c: 680: readEEPROM(2 * i +
  2969                           ;main.c: 681: 0x73);
  2970  001AA4  D815               	call	PL4	;call to abstracted procedure
  2971  001AA6  D8B4               	call	PL80	;call to abstracted procedure
  2972  001AA8  EC62  F02A         	call	_readEEPROM	;wreg free
  2973  001AAC  0100               	movlb	0	; () banked
  2974  001AAE  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;main.c: 682: vscp_omsg.data[ 2 ] =
  2978                           ;main.c: 683: readEEPROM(2 * i +
  2979                           ;main.c: 684: 0x74);
  2980  001AB0  D80F               	call	PL4	;call to abstracted procedure
  2981  001AB2  D8A7               	call	PL78	;call to abstracted procedure
  2982  001AB4  EC62  F02A         	call	_readEEPROM	;wreg free
  2983  001AB8  0100               	movlb	0	; () banked
  2984  001ABA  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;main.c: 687: if (!vscp_sendEvent()) {
  2988  001ABC  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  2989  001AC0  0900               	iorlw	0
  2990  001AC2  E0A0               	bz	l14016
  2991  001AC4                     l14050:
  2992                           
  2993                           ; BSR set to: 0
  2994  001AC4  0101               	movlb	1	; () banked
  2995  001AC6  2B83               	incf	doWork@i& (0+255),f,b
  2996  001AC8  0E05               	movlw	5
  2997  001ACA  6583               	cpfsgt	doWork@i& (0+255),b
  2998  001ACC  D6B9               	goto	l13972
  2999  001ACE                     l224:
  3000  001ACE  0012               	return	
  3001  001AD0                     __end_of_doWork:
  3002                           	opt stack 0
  3003  001AD0                     PL4:
  3004                           	opt stack 23
  3005  001AD0  90D8               	bcf	status,0,c
  3006  001AD2  0101               	movlb	1	; () banked
  3007  001AD4  3583               	rlcf	doWork@i& (0+255),w,b
  3008  001AD6  0100               	movlb	0	; () banked
  3009  001AD8  6F91               	movwf	??_doWork& (0+255),b
  3010  001ADA  6B92               	clrf	(??_doWork+1)& (0+255),b
  3011  001ADC  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  3012  001ADE  0012               	return	
  3013  001AE0                     __end_ofPL4:
  3014                           	opt stack 0
  3015  001AE0                     PL6:
  3016                           	opt stack 23
  3017  001AE0  2591               	addwf	??_doWork& (0+255),w,b
  3018  001AE2  6E0E               	movwf	?_writeEEPROM,c
  3019  001AE4  0E00               	movlw	0
  3020  001AE6  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  3021  001AE8  6E0F               	movwf	?_writeEEPROM+1,c
  3022  001AEA  0101               	movlb	1	; () banked
  3023  001AEC  5183               	movf	doWork@i& (0+255),w,b
  3024  001AEE  0D02               	mullw	2
  3025  001AF0  50F3               	movf	prodl,w,c
  3026  001AF2  0100               	movlb	0	; () banked
  3027  001AF4  0FA0               	addlw	low _current_temp
  3028  001AF6  6ED9               	movwf	fsr2l,c
  3029  001AF8  6ADA               	clrf	fsr2h,c
  3030  001AFA  0012               	return	
  3031  001AFC                     __end_ofPL6:
  3032                           	opt stack 0
  3033  001AFC                     PL8:
  3034                           	opt stack 23
  3035  001AFC  5183               	movf	doWork@i& (0+255),w,b
  3036  001AFE  0D02               	mullw	2
  3037  001B00  50F3               	movf	prodl,w,c
  3038  001B02  0100               	movlb	0	; () banked
  3039  001B04  0FA0               	addlw	low _current_temp
  3040  001B06  6ED9               	movwf	fsr2l,c
  3041  001B08  6ADA               	clrf	fsr2h,c
  3042  001B0A  0012               	return	
  3043  001B0C                     __end_ofPL8:
  3044                           	opt stack 0
  3045  001B0C                     PL10:
  3046                           	opt stack 23
  3047  001B0C  0101               	movlb	1	; () banked
  3048  001B0E  5183               	movf	doWork@i& (0+255),w,b
  3049  001B10  0D02               	mullw	2
  3050  001B12  50F3               	movf	prodl,w,c
  3051  001B14  0FA0               	addlw	low _current_temp
  3052  001B16  6ED9               	movwf	fsr2l,c
  3053  001B18  6ADA               	clrf	fsr2h,c
  3054  001B1A  0012               	return	
  3055  001B1C                     __end_ofPL10:
  3056                           	opt stack 0
  3057  001B1C                     PL12:
  3058                           	opt stack 23
  3059  001B1C  0101               	movlb	1	; () banked
  3060  001B1E  2583               	addwf	doWork@i& (0+255),w,b
  3061  001B20  6E0E               	movwf	?_readEEPROM,c
  3062  001B22  6A0F               	clrf	?_readEEPROM+1,c
  3063  001B24  0E00               	movlw	0
  3064  001B26  220F               	addwfc	?_readEEPROM+1,f,c
  3065  001B28  0C00               	retlw	0
  3066  001B2A                     __end_ofPL12:
  3067                           	opt stack 0
  3068  001B2A                     PL14:
  3069                           	opt stack 23
  3070  001B2A  0101               	movlb	1	; () banked
  3071  001B2C  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  3072  001B2E  5183               	movf	doWork@i& (0+255),w,b
  3073  001B30  0D02               	mullw	2
  3074  001B32  50F3               	movf	prodl,w,c
  3075  001B34  0FA0               	addlw	low _current_temp
  3076  001B36  6ED9               	movwf	fsr2l,c
  3077  001B38  6ADA               	clrf	fsr2h,c
  3078  001B3A  CFDE F091          	movff	postinc2,??_doWork
  3079  001B3E  CFDD F092          	movff	postdec2,??_doWork+1
  3080  001B42  517A               	movf	(doWork@setpoint+1)& (0+255),w,b
  3081  001B44  0A80               	xorlw	128
  3082  001B46  0100               	movlb	0	; () banked
  3083  001B48  6F93               	movwf	(??_doWork+2)& (0+255),b
  3084  001B4A  5191               	movf	??_doWork& (0+255),w,b
  3085  001B4C  0101               	movlb	1	; () banked
  3086  001B4E  5D79               	subwf	doWork@setpoint& (0+255),w,b
  3087  001B50  0100               	movlb	0	; () banked
  3088  001B52  5192               	movf	(??_doWork+1)& (0+255),w,b
  3089  001B54  0A80               	xorlw	128
  3090  001B56  5993               	subwfb	(??_doWork+2)& (0+255),w,b
  3091  001B58  0012               	return	
  3092  001B5A                     __end_ofPL14:
  3093                           	opt stack 0
  3094  001B5A                     PL16:
  3095                           	opt stack 23
  3096  001B5A  CFDE F091          	movff	postinc2,??_doWork
  3097  001B5E  CFDD F092          	movff	postdec2,??_doWork+1
  3098  001B62  5192               	movf	(??_doWork+1)& (0+255),w,b
  3099  001B64  0A80               	xorlw	128
  3100  001B66  6F93               	movwf	(??_doWork+2)& (0+255),b
  3101  001B68  0101               	movlb	1	; () banked
  3102  001B6A  5179               	movf	doWork@setpoint& (0+255),w,b
  3103  001B6C  0100               	movlb	0	; () banked
  3104  001B6E  5D91               	subwf	??_doWork& (0+255),w,b
  3105  001B70  0101               	movlb	1	; () banked
  3106  001B72  517A               	movf	(doWork@setpoint+1)& (0+255),w,b
  3107  001B74  0A80               	xorlw	128
  3108  001B76  0100               	movlb	0	; () banked
  3109  001B78  5993               	subwfb	(??_doWork+2)& (0+255),w,b
  3110  001B7A  0012               	return	
  3111  001B7C                     __end_ofPL16:
  3112                           	opt stack 0
  3113  001B7C                     PL20:
  3114                           	opt stack 23
  3115  001B7C  0100               	movlb	0	; () banked
  3116  001B7E  6F93               	movwf	(??_doWork+2)& (0+255),b
  3117  001B80  6B92               	clrf	(??_doWork+1)& (0+255),b
  3118  001B82  5191               	movf	??_doWork& (0+255),w,b
  3119  001B84  2592               	addwf	(??_doWork+1)& (0+255),w,b
  3120  001B86  0101               	movlb	1	; () banked
  3121  001B88  6F79               	movwf	doWork@setpoint& (0+255),b
  3122  001B8A  0100               	movlb	0	; () banked
  3123  001B8C  0E00               	movlw	0
  3124  001B8E  2193               	addwfc	(??_doWork+2)& (0+255),w,b
  3125  001B90  0012               	return	
  3126  001B92                     __end_ofPL20:
  3127                           	opt stack 0
  3128  001B92                     PL24:
  3129                           	opt stack 23
  3130  001B92  0E01               	movlw	1
  3131  001B94  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  3132  001B96  0E02               	movlw	2
  3133  001B98  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  3134  001B9A  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
  3135  001B9C  0E83               	movlw	131
  3136  001B9E  6FCF               	movwf	_vscp_omsg& (0+255),b
  3137  001BA0  0C43               	retlw	67
  3138  001BA2                     __end_ofPL24:
  3139                           	opt stack 0
  3140  001BA2                     PL34:
  3141                           	opt stack 23
  3142  001BA2  CFDE F093          	movff	postinc2,??_doWork+2
  3143  001BA6  CFDD F094          	movff	postdec2,??_doWork+3
  3144  001BAA  C094  F093         	movff	??_doWork+3,??_doWork+2
  3145  001BAE  6B94               	clrf	(??_doWork+3)& (0+255),b
  3146  001BB0  BF93               	btfsc	(??_doWork+2)& (0+255),7,b
  3147  001BB2  6994               	setf	(??_doWork+3)& (0+255),b
  3148  001BB4  5193               	movf	(??_doWork+2)& (0+255),w,b
  3149  001BB6  6E10               	movwf	?_writeEEPROM+2,c
  3150  001BB8  0012               	return	
  3151  001BBA                     __end_ofPL34:
  3152                           	opt stack 0
  3153  001BBA                     PL36:
  3154                           	opt stack 23
  3155  001BBA  C183  F091         	movff	doWork@i,??_doWork
  3156  001BBE  0E01               	movlw	1
  3157  001BC0  6F92               	movwf	(??_doWork+1)& (0+255),b
  3158  001BC2  2B91               	incf	??_doWork& (0+255),f,b
  3159  001BC4  D002               	goto	u13134
  3160  001BC6                     u13135:
  3161  001BC6  90D8               	bcf	status,0,c
  3162  001BC8  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  3163  001BCA                     u13134:
  3164  001BCA  2F91               	decfsz	??_doWork& (0+255),f,b
  3165  001BCC  D7FC               	goto	u13135
  3166  001BCE  1D92               	comf	(??_doWork+1)& (0+255),w,b
  3167  001BD0  0012               	return	
  3168  001BD2                     __end_ofPL36:
  3169                           	opt stack 0
  3170  001BD2                     PL44:
  3171                           	opt stack 23
  3172  001BD2  C183  F091         	movff	doWork@i,??_doWork
  3173  001BD6  0E01               	movlw	1
  3174  001BD8  0100               	movlb	0	; () banked
  3175  001BDA  6F92               	movwf	(??_doWork+1)& (0+255),b
  3176  001BDC  2B91               	incf	??_doWork& (0+255),f,b
  3177  001BDE  0C01               	retlw	1
  3178  001BE0                     __end_ofPL44:
  3179                           	opt stack 0
  3180  001BE0                     PL60:
  3181                           	opt stack 23
  3182  001BE0  5194               	movf	(??_doWork+3)& (0+255),w,b
  3183  001BE2  0A80               	xorlw	128
  3184  001BE4  6F95               	movwf	(??_doWork+4)& (0+255),b
  3185  001BE6  5191               	movf	??_doWork& (0+255),w,b
  3186  001BE8  5D93               	subwf	(??_doWork+2)& (0+255),w,b
  3187  001BEA  5192               	movf	(??_doWork+1)& (0+255),w,b
  3188  001BEC  0A80               	xorlw	128
  3189  001BEE  5995               	subwfb	(??_doWork+4)& (0+255),w,b
  3190  001BF0  0012               	return	
  3191  001BF2                     __end_ofPL60:
  3192                           	opt stack 0
  3193  001BF2                     PL70:
  3194                           	opt stack 23
  3195  001BF2  6A22               	clrf	?___flmul+4,c
  3196  001BF4  0E40               	movlw	64
  3197  001BF6  6E23               	movwf	?___flmul+5,c
  3198  001BF8  0E1C               	movlw	28
  3199  001BFA  6E24               	movwf	?___flmul+6,c
  3200  001BFC  0E46               	movlw	70
  3201  001BFE  6E25               	movwf	?___flmul+7,c
  3202  001C00  0C46               	retlw	70
  3203  001C02                     __end_ofPL70:
  3204                           	opt stack 0
  3205  001C02                     PL78:
  3206                           	opt stack 23
  3207  001C02  0E74               	movlw	116
  3208  001C04  2591               	addwf	??_doWork& (0+255),w,b
  3209  001C06  6E0E               	movwf	?_readEEPROM,c
  3210  001C08  0E00               	movlw	0
  3211  001C0A  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  3212  001C0C  6E0F               	movwf	?_readEEPROM+1,c
  3213  001C0E  0012               	return	
  3214  001C10                     __end_ofPL78:
  3215                           	opt stack 0
  3216  001C10                     PL80:
  3217                           	opt stack 23
  3218  001C10  0E73               	movlw	115
  3219  001C12  2591               	addwf	??_doWork& (0+255),w,b
  3220  001C14  6E0E               	movwf	?_readEEPROM,c
  3221  001C16  0E00               	movlw	0
  3222  001C18  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  3223  001C1A  6E0F               	movwf	?_readEEPROM+1,c
  3224  001C1C  0012               	return	
  3225  001C1E                     __end_ofPL80:
  3226                           	opt stack 0
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           prodh	equ	0xFF4
  3232                           prodl	equ	0xFF3
  3233                           intcon	equ	0xFF2
  3234                           postinc0	equ	0xFEE
  3235                           wreg	equ	0xFE8
  3236                           indf1	equ	0xFE7
  3237                           postdec1	equ	0xFE5
  3238                           fsr1h	equ	0xFE2
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           plusw2	equ	0xFDB
  3244                           fsr2h	equ	0xFDA
  3245                           fsr2l	equ	0xFD9
  3246                           status	equ	0xFD8
  3247                           
  3248 ;; *************** function ___lwtofl *****************
  3249 ;; Defined at:
  3250 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  c               2   23[COMRAM] unsigned int 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  4   23[COMRAM] unsigned int 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0, cstack
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3264 ;;      Params:         4       0       0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0
  3267 ;;      Totals:         4       0       0       0       0       0       0
  3268 ;;Total ram usage:        4 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    3
  3271 ;; This function calls:
  3272 ;;		___flpack
  3273 ;; This function is called by:
  3274 ;;		_doWork
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text2
  3279  0051D6                     __ptext2:
  3280                           	opt stack 0
  3281  0051D6                     ___lwtofl:
  3282                           	opt stack 26
  3283                           
  3284                           ;incstack = 0
  3285                           ;incstack = 0
  3286  0051D6  C018  F00E         	movff	___lwtofl@c,?___flpack
  3287  0051DA  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  3288  0051DE  6A10               	clrf	?___flpack+2,c
  3289  0051E0  6A11               	clrf	?___flpack+3,c
  3290  0051E2  0E96               	movlw	150
  3291  0051E4  6E12               	movwf	?___flpack+4,c
  3292  0051E6  0E00               	movlw	0
  3293  0051E8  6A13               	clrf	?___flpack+5,c
  3294  0051EA  ECD0  F021         	call	___flpack	;wreg free
  3295  0051EE  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  3296  0051F2  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  3297  0051F6  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  3298  0051FA  C00E  F018         	movff	?___flpack,?___lwtofl
  3299  0051FE  0012               	return	
  3300  005200                     __end_of___lwtofl:
  3301                           	opt stack 0
  3302                           tblptru	equ	0xFF8
  3303                           tblptrh	equ	0xFF7
  3304                           tblptrl	equ	0xFF6
  3305                           tablat	equ	0xFF5
  3306                           prodh	equ	0xFF4
  3307                           prodl	equ	0xFF3
  3308                           intcon	equ	0xFF2
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           indf1	equ	0xFE7
  3312                           postdec1	equ	0xFE5
  3313                           fsr1h	equ	0xFE2
  3314                           fsr1l	equ	0xFE1
  3315                           indf2	equ	0xFDF
  3316                           postinc2	equ	0xFDE
  3317                           postdec2	equ	0xFDD
  3318                           plusw2	equ	0xFDB
  3319                           fsr2h	equ	0xFDA
  3320                           fsr2l	equ	0xFD9
  3321                           status	equ	0xFD8
  3322                           
  3323 ;; *************** function ___asfldiv *****************
  3324 ;; Defined at:
  3325 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  f1p             2   38[BANK0 ] PTR 
  3328 ;;		 -> doWork@avarage(4), 
  3329 ;;  f2              4   40[BANK0 ] PTR 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;		None
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  4   38[BANK0 ] PTR 
  3334 ;; Registers used:
  3335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3336 ;; Tracked objects:
  3337 ;;		On entry : F/0
  3338 ;;		On exit  : F/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3341 ;;      Params:         0       6       0       0       0       0       0
  3342 ;;      Locals:         0       0       0       0       0       0       0
  3343 ;;      Temps:          0       0       0       0       0       0       0
  3344 ;;      Totals:         0       6       0       0       0       0       0
  3345 ;;Total ram usage:        6 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; Hardware stack levels required when called:    4
  3348 ;; This function calls:
  3349 ;;		___fldiv
  3350 ;; This function is called by:
  3351 ;;		_doWork
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text3
  3356  004D6E                     __ptext3:
  3357                           	opt stack 0
  3358  004D6E                     ___asfldiv:
  3359                           	opt stack 25
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;	Return value of ___asfldiv is never used
  3363                           
  3364                           ;incstack = 0
  3365                           ;incstack = 0
  3366  004D6E  C086  FFD9         	movff	___asfldiv@f1p,fsr2l
  3367  004D72  C087  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3368  004D76  CFDE F070          	movff	postinc2,?___fldiv
  3369  004D7A  CFDE F071          	movff	postinc2,?___fldiv+1
  3370  004D7E  CFDE F072          	movff	postinc2,?___fldiv+2
  3371  004D82  CFDE F073          	movff	postinc2,?___fldiv+3
  3372  004D86  C088  F074         	movff	___asfldiv@f2,?___fldiv+4
  3373  004D8A  C089  F075         	movff	___asfldiv@f2+1,?___fldiv+5
  3374  004D8E  C08A  F076         	movff	___asfldiv@f2+2,?___fldiv+6
  3375  004D92  C08B  F077         	movff	___asfldiv@f2+3,?___fldiv+7
  3376  004D96  EC39  F023         	call	___fldiv	;wreg free
  3377  004D9A  C086  FFD9         	movff	___asfldiv@f1p,fsr2l
  3378  004D9E  C087  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3379  004DA2  0100               	movlb	0	; () banked
  3380  004DA4  C070  FFDE         	movff	?___fldiv,postinc2
  3381  004DA8  C071  FFDE         	movff	?___fldiv+1,postinc2
  3382  004DAC  C072  FFDE         	movff	?___fldiv+2,postinc2
  3383  004DB0  C073  FFDD         	movff	?___fldiv+3,postdec2
  3384  004DB4  06D9               	decf	fsr2l,f,c
  3385  004DB6  06D9               	decf	fsr2l,f,c
  3386                           
  3387                           ; BSR set to: 0
  3388  004DB8  0012               	return	
  3389  004DBA                     __end_of___asfldiv:
  3390                           	opt stack 0
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           intcon	equ	0xFF2
  3398                           postinc0	equ	0xFEE
  3399                           wreg	equ	0xFE8
  3400                           indf1	equ	0xFE7
  3401                           postdec1	equ	0xFE5
  3402                           fsr1h	equ	0xFE2
  3403                           fsr1l	equ	0xFE1
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           plusw2	equ	0xFDB
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function ___asfladd *****************
  3413 ;; Defined at:
  3414 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  f1p             2   58[COMRAM] PTR 
  3417 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  3418 ;;  f2              4   60[COMRAM] PTR 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;		None
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  4   58[COMRAM] PTR 
  3423 ;; Registers used:
  3424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : F/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3430 ;;      Params:         6       0       0       0       0       0       0
  3431 ;;      Locals:         0       0       0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0
  3433 ;;      Totals:         6       0       0       0       0       0       0
  3434 ;;Total ram usage:        6 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    4
  3437 ;; This function calls:
  3438 ;;		___fladd
  3439 ;; This function is called by:
  3440 ;;		_doWork
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text4
  3445  004CD2                     __ptext4:
  3446                           	opt stack 0
  3447  004CD2                     ___asfladd:
  3448                           	opt stack 25
  3449                           
  3450                           ;	Return value of ___asfladd is never used
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;incstack = 0
  3454                           ;incstack = 0
  3455  004CD2  C03B  FFD9         	movff	___asfladd@f1p,fsr2l
  3456  004CD6  C03C  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3457  004CDA  0100               	movlb	0	; () banked
  3458  004CDC  CFDE F060          	movff	postinc2,?___fladd
  3459  004CE0  CFDE F061          	movff	postinc2,?___fladd+1
  3460  004CE4  CFDE F062          	movff	postinc2,?___fladd+2
  3461  004CE8  CFDE F063          	movff	postinc2,?___fladd+3
  3462  004CEC  C03D  F064         	movff	___asfladd@f2,?___fladd+4
  3463  004CF0  C03E  F065         	movff	___asfladd@f2+1,?___fladd+5
  3464  004CF4  C03F  F066         	movff	___asfladd@f2+2,?___fladd+6
  3465  004CF8  C040  F067         	movff	___asfladd@f2+3,?___fladd+7
  3466  004CFC  EC21  F01C         	call	___fladd	;wreg free
  3467  004D00  C03B  FFD9         	movff	___asfladd@f1p,fsr2l
  3468  004D04  C03C  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3469  004D08  0100               	movlb	0	; () banked
  3470  004D0A  C060  FFDE         	movff	?___fladd,postinc2
  3471  004D0E  C061  FFDE         	movff	?___fladd+1,postinc2
  3472  004D12  C062  FFDE         	movff	?___fladd+2,postinc2
  3473  004D16  C063  FFDD         	movff	?___fladd+3,postdec2
  3474  004D1A  06D9               	decf	fsr2l,f,c
  3475  004D1C  06D9               	decf	fsr2l,f,c
  3476                           
  3477                           ; BSR set to: 0
  3478  004D1E  0012               	return	
  3479  004D20                     __end_of___asfladd:
  3480                           	opt stack 0
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           intcon	equ	0xFF2
  3488                           postinc0	equ	0xFEE
  3489                           wreg	equ	0xFE8
  3490                           indf1	equ	0xFE7
  3491                           postdec1	equ	0xFE5
  3492                           fsr1h	equ	0xFE2
  3493                           fsr1l	equ	0xFE1
  3494                           indf2	equ	0xFDF
  3495                           postinc2	equ	0xFDE
  3496                           postdec2	equ	0xFDD
  3497                           plusw2	equ	0xFDB
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function ___aldiv *****************
  3503 ;; Defined at:
  3504 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  dividend        4   61[COMRAM] long 
  3507 ;;  divisor         4   65[COMRAM] long 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  quotient        4    2[BANK0 ] long 
  3510 ;;  sign            1    1[BANK0 ] unsigned char 
  3511 ;;  counter         1    0[BANK0 ] unsigned char 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  4   61[COMRAM] long 
  3514 ;; Registers used:
  3515 ;;		wreg, status,2, status,0
  3516 ;; Tracked objects:
  3517 ;;		On entry : F/0
  3518 ;;		On exit  : F/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3521 ;;      Params:         8       0       0       0       0       0       0
  3522 ;;      Locals:         0       6       0       0       0       0       0
  3523 ;;      Temps:          0       0       0       0       0       0       0
  3524 ;;      Totals:         8       6       0       0       0       0       0
  3525 ;;Total ram usage:       14 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    2
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_doWork
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text5
  3536  0042E4                     __ptext5:
  3537                           	opt stack 0
  3538  0042E4                     ___aldiv:
  3539                           	opt stack 27
  3540                           
  3541                           ; BSR set to: 0
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;incstack = 0
  3545                           ;incstack = 0
  3546  0042E4  6B61               	clrf	___aldiv@sign& (0+255),b
  3547  0042E6  AE45               	btfss	___aldiv@divisor+3,7,c
  3548  0042E8  D00A               	goto	l11476
  3549                           
  3550                           ; BSR set to: 0
  3551  0042EA  1E45               	comf	___aldiv@divisor+3,f,c
  3552  0042EC  1E44               	comf	___aldiv@divisor+2,f,c
  3553  0042EE  1E43               	comf	___aldiv@divisor+1,f,c
  3554  0042F0  6C42               	negf	___aldiv@divisor,c
  3555  0042F2  0E00               	movlw	0
  3556  0042F4  2243               	addwfc	___aldiv@divisor+1,f,c
  3557  0042F6  2244               	addwfc	___aldiv@divisor+2,f,c
  3558  0042F8  2245               	addwfc	___aldiv@divisor+3,f,c
  3559                           
  3560                           ; BSR set to: 0
  3561  0042FA  0E01               	movlw	1
  3562  0042FC  6F61               	movwf	___aldiv@sign& (0+255),b
  3563  0042FE                     l11476:
  3564                           
  3565                           ; BSR set to: 0
  3566  0042FE  AE41               	btfss	___aldiv@dividend+3,7,c
  3567  004300  D00A               	goto	l11482
  3568                           
  3569                           ; BSR set to: 0
  3570  004302  1E41               	comf	___aldiv@dividend+3,f,c
  3571  004304  1E40               	comf	___aldiv@dividend+2,f,c
  3572  004306  1E3F               	comf	___aldiv@dividend+1,f,c
  3573  004308  6C3E               	negf	___aldiv@dividend,c
  3574  00430A  0E00               	movlw	0
  3575  00430C  223F               	addwfc	___aldiv@dividend+1,f,c
  3576  00430E  2240               	addwfc	___aldiv@dividend+2,f,c
  3577  004310  2241               	addwfc	___aldiv@dividend+3,f,c
  3578                           
  3579                           ; BSR set to: 0
  3580  004312  0E01               	movlw	1
  3581  004314  1B61               	xorwf	___aldiv@sign& (0+255),f,b
  3582  004316                     l11482:
  3583                           
  3584                           ; BSR set to: 0
  3585  004316  6B62               	clrf	___aldiv@quotient& (0+255),b
  3586  004318  6B63               	clrf	(___aldiv@quotient+1)& (0+255),b
  3587  00431A  6B64               	clrf	(___aldiv@quotient+2)& (0+255),b
  3588  00431C  6B65               	clrf	(___aldiv@quotient+3)& (0+255),b
  3589                           
  3590                           ; BSR set to: 0
  3591  00431E  5045               	movf	___aldiv@divisor+3,w,c
  3592  004320  1042               	iorwf	___aldiv@divisor,w,c
  3593  004322  1043               	iorwf	___aldiv@divisor+1,w,c
  3594  004324  1044               	iorwf	___aldiv@divisor+2,w,c
  3595  004326  E029               	bz	l11504
  3596                           
  3597                           ; BSR set to: 0
  3598  004328  0E01               	movlw	1
  3599  00432A  6F60               	movwf	___aldiv@counter& (0+255),b
  3600  00432C  D006               	goto	l11490
  3601  00432E                     l11488:
  3602                           
  3603                           ; BSR set to: 0
  3604  00432E  90D8               	bcf	status,0,c
  3605  004330  3642               	rlcf	___aldiv@divisor,f,c
  3606  004332  3643               	rlcf	___aldiv@divisor+1,f,c
  3607  004334  3644               	rlcf	___aldiv@divisor+2,f,c
  3608  004336  3645               	rlcf	___aldiv@divisor+3,f,c
  3609  004338  2B60               	incf	___aldiv@counter& (0+255),f,b
  3610  00433A                     l11490:
  3611                           
  3612                           ; BSR set to: 0
  3613  00433A  AE45               	btfss	___aldiv@divisor+3,7,c
  3614  00433C  D7F8               	goto	l11488
  3615  00433E                     l11492:
  3616                           
  3617                           ; BSR set to: 0
  3618  00433E  90D8               	bcf	status,0,c
  3619  004340  3762               	rlcf	___aldiv@quotient& (0+255),f,b
  3620  004342  3763               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3621  004344  3764               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3622  004346  3765               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3623                           
  3624                           ; BSR set to: 0
  3625  004348  5042               	movf	___aldiv@divisor,w,c
  3626  00434A  5C3E               	subwf	___aldiv@dividend,w,c
  3627  00434C  5043               	movf	___aldiv@divisor+1,w,c
  3628  00434E  583F               	subwfb	___aldiv@dividend+1,w,c
  3629  004350  5044               	movf	___aldiv@divisor+2,w,c
  3630  004352  5840               	subwfb	___aldiv@dividend+2,w,c
  3631  004354  5045               	movf	___aldiv@divisor+3,w,c
  3632  004356  5841               	subwfb	___aldiv@dividend+3,w,c
  3633  004358  E309               	bnc	l11500
  3634                           
  3635                           ; BSR set to: 0
  3636  00435A  5042               	movf	___aldiv@divisor,w,c
  3637  00435C  5E3E               	subwf	___aldiv@dividend,f,c
  3638  00435E  5043               	movf	___aldiv@divisor+1,w,c
  3639  004360  5A3F               	subwfb	___aldiv@dividend+1,f,c
  3640  004362  5044               	movf	___aldiv@divisor+2,w,c
  3641  004364  5A40               	subwfb	___aldiv@dividend+2,f,c
  3642  004366  5045               	movf	___aldiv@divisor+3,w,c
  3643  004368  5A41               	subwfb	___aldiv@dividend+3,f,c
  3644                           
  3645                           ; BSR set to: 0
  3646  00436A  8162               	bsf	___aldiv@quotient& (0+255),0,b
  3647  00436C                     l11500:
  3648                           
  3649                           ; BSR set to: 0
  3650  00436C  90D8               	bcf	status,0,c
  3651  00436E  3245               	rrcf	___aldiv@divisor+3,f,c
  3652  004370  3244               	rrcf	___aldiv@divisor+2,f,c
  3653  004372  3243               	rrcf	___aldiv@divisor+1,f,c
  3654  004374  3242               	rrcf	___aldiv@divisor,f,c
  3655                           
  3656                           ; BSR set to: 0
  3657  004376  2F60               	decfsz	___aldiv@counter& (0+255),f,b
  3658  004378  D7E2               	goto	l11492
  3659  00437A                     l11504:
  3660                           
  3661                           ; BSR set to: 0
  3662  00437A  5161               	movf	___aldiv@sign& (0+255),w,b
  3663  00437C  E008               	bz	l11508
  3664                           
  3665                           ; BSR set to: 0
  3666  00437E  1F65               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3667  004380  1F64               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3668  004382  1F63               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3669  004384  6D62               	negf	___aldiv@quotient& (0+255),b
  3670  004386  0E00               	movlw	0
  3671  004388  2363               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3672  00438A  2364               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3673  00438C  2365               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3674  00438E                     l11508:
  3675                           
  3676                           ; BSR set to: 0
  3677  00438E  C062  F03E         	movff	___aldiv@quotient,?___aldiv
  3678  004392  C063  F03F         	movff	___aldiv@quotient+1,?___aldiv+1
  3679  004396  C064  F040         	movff	___aldiv@quotient+2,?___aldiv+2
  3680  00439A  C065  F041         	movff	___aldiv@quotient+3,?___aldiv+3
  3681                           
  3682                           ; BSR set to: 0
  3683  00439E  0012               	return	
  3684  0043A0                     __end_of___aldiv:
  3685                           	opt stack 0
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           postinc0	equ	0xFEE
  3694                           wreg	equ	0xFE8
  3695                           indf1	equ	0xFE7
  3696                           postdec1	equ	0xFE5
  3697                           fsr1h	equ	0xFE2
  3698                           fsr1l	equ	0xFE1
  3699                           indf2	equ	0xFDF
  3700                           postinc2	equ	0xFDE
  3701                           postdec2	equ	0xFDD
  3702                           plusw2	equ	0xFDB
  3703                           fsr2h	equ	0xFDA
  3704                           fsr2l	equ	0xFD9
  3705                           status	equ	0xFD8
  3706                           
  3707 ;; *************** function _getCalibrationValue *****************
  3708 ;; Defined at:
  3709 ;;		line 874 in file "../main.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;  i               1    wreg     unsigned char 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  i               1   24[COMRAM] unsigned char 
  3714 ;;  cal             2   22[COMRAM] short 
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  2   17[COMRAM] short 
  3717 ;; Registers used:
  3718 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3719 ;; Tracked objects:
  3720 ;;		On entry : F/1
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3724 ;;      Params:         2       0       0       0       0       0       0
  3725 ;;      Locals:         3       0       0       0       0       0       0
  3726 ;;      Temps:          3       0       0       0       0       0       0
  3727 ;;      Totals:         8       0       0       0       0       0       0
  3728 ;;Total ram usage:        8 bytes
  3729 ;; Hardware stack levels used:    1
  3730 ;; Hardware stack levels required when called:    3
  3731 ;; This function calls:
  3732 ;;		_readEEPROM
  3733 ;; This function is called by:
  3734 ;;		_doWork
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text6
  3739  004EE6                     __ptext6:
  3740                           	opt stack 0
  3741  004EE6                     _getCalibrationValue:
  3742                           	opt stack 26
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;incstack = 0
  3746                           ;incstack = 0
  3747                           ;getCalibrationValue@i stored from wreg
  3748  004EE6  CFE8 F019          	movff	wreg,getCalibrationValue@i
  3749                           
  3750                           ; BSR set to: 1
  3751                           ;main.c: 875: int16_t cal;
  3752                           ;main.c: 877: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3753                           ;main.c: 878: readEEPROM(2 * i + 0x9F);
  3754  004EEA  5019               	movf	getCalibrationValue@i,w,c
  3755  004EEC  0D02               	mullw	2
  3756  004EEE  0E9F               	movlw	159
  3757  004EF0  24F3               	addwf	prodl,w,c
  3758  004EF2  6E0E               	movwf	?_readEEPROM,c
  3759  004EF4  0E00               	movlw	0
  3760  004EF6  20F4               	addwfc	prodh,w,c
  3761  004EF8  6E0F               	movwf	?_readEEPROM+1,c
  3762  004EFA  EC62  F02A         	call	_readEEPROM	;wreg free
  3763  004EFE  6E14               	movwf	??_getCalibrationValue& (0+255),c
  3764  004F00  5019               	movf	getCalibrationValue@i,w,c
  3765  004F02  0D02               	mullw	2
  3766  004F04  0E9E               	movlw	158
  3767  004F06  24F3               	addwf	prodl,w,c
  3768  004F08  6E0E               	movwf	?_readEEPROM,c
  3769  004F0A  0E00               	movlw	0
  3770  004F0C  20F4               	addwfc	prodh,w,c
  3771  004F0E  6E0F               	movwf	?_readEEPROM+1,c
  3772  004F10  EC62  F02A         	call	_readEEPROM	;wreg free
  3773  004F14  6E16               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3774  004F16  6A15               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3775  004F18  5014               	movf	??_getCalibrationValue,w,c
  3776  004F1A  2415               	addwf	??_getCalibrationValue+1,w,c
  3777  004F1C  6E17               	movwf	getCalibrationValue@cal,c
  3778  004F1E  0E00               	movlw	0
  3779  004F20  2016               	addwfc	??_getCalibrationValue+2,w,c
  3780  004F22  6E18               	movwf	getCalibrationValue@cal+1,c
  3781                           
  3782                           ;main.c: 880: return cal;
  3783  004F24  C017  F012         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3784  004F28  C018  F013         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3785  004F2C  0012               	return	
  3786  004F2E                     __end_of_getCalibrationValue:
  3787                           	opt stack 0
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           prodh	equ	0xFF4
  3793                           prodl	equ	0xFF3
  3794                           intcon	equ	0xFF2
  3795                           postinc0	equ	0xFEE
  3796                           wreg	equ	0xFE8
  3797                           indf1	equ	0xFE7
  3798                           postdec1	equ	0xFE5
  3799                           fsr1h	equ	0xFE2
  3800                           fsr1l	equ	0xFE1
  3801                           indf2	equ	0xFDF
  3802                           postinc2	equ	0xFDE
  3803                           postdec2	equ	0xFDD
  3804                           plusw2	equ	0xFDB
  3805                           fsr2h	equ	0xFDA
  3806                           fsr2l	equ	0xFD9
  3807                           status	equ	0xFD8
  3808                           
  3809 ;; *************** function _log *****************
  3810 ;; Defined at:
  3811 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  x               4   38[BANK0 ] short 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  exponent        2   66[COMRAM] int 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  4   38[BANK0 ] int 
  3818 ;; Registers used:
  3819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/1
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3825 ;;      Params:         0       4       0       0       0       0       0
  3826 ;;      Locals:         2       0       0       0       0       0       0
  3827 ;;      Temps:          0       0       0       0       0       0       0
  3828 ;;      Totals:         2       4       0       0       0       0       0
  3829 ;;Total ram usage:        6 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    5
  3832 ;; This function calls:
  3833 ;;		___fladd
  3834 ;;		___flmul
  3835 ;;		___awtofl
  3836 ;;		_eval_poly
  3837 ;;		_frexp
  3838 ;; This function is called by:
  3839 ;;		_doWork
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text7
  3844  003B0E                     __ptext7:
  3845                           	opt stack 0
  3846  003B0E                     _log:
  3847                           	opt stack 24
  3848                           
  3849                           ;incstack = 0
  3850                           ;incstack = 0
  3851  003B0E  0100               	movlb	0	; () banked
  3852  003B10  BF89               	btfsc	(log@x+3)& (0+255),7,b
  3853  003B12  D007               	goto	u13390
  3854                           
  3855                           ; BSR set to: 0
  3856                           
  3857                           ; BSR set to: 0
  3858  003B14  EE20  F086         	lfsr	2,log@x
  3859  003B18  50DE               	movf	postinc2,w,c
  3860  003B1A  10DE               	iorwf	postinc2,w,c
  3861  003B1C  10DE               	iorwf	postinc2,w,c
  3862  003B1E  10DE               	iorwf	postinc2,w,c
  3863  003B20  E105               	bnz	l14096
  3864  003B22                     u13390:
  3865                           
  3866                           ; BSR set to: 0
  3867  003B22  6B86               	clrf	?_log& (0+255),b
  3868  003B24  6B87               	clrf	(?_log+1)& (0+255),b
  3869  003B26  6B88               	clrf	(?_log+2)& (0+255),b
  3870  003B28  6B89               	clrf	(?_log+3)& (0+255),b
  3871  003B2A  D087               	goto	l1855
  3872  003B2C                     l14096:
  3873                           
  3874                           ; BSR set to: 0
  3875  003B2C  6A22               	clrf	?___flmul+4,c
  3876  003B2E  6A23               	clrf	?___flmul+5,c
  3877  003B30  6A24               	clrf	?___flmul+6,c
  3878  003B32  0E40               	movlw	64
  3879  003B34  6E25               	movwf	?___flmul+7,c
  3880  003B36  0E43               	movlw	low log@exponent
  3881  003B38  6E12               	movwf	?_frexp+4,c
  3882  003B3A  0E00               	movlw	high log@exponent
  3883  003B3C  6E13               	movwf	?_frexp+5,c
  3884  003B3E  0E0F               	movlw	15
  3885  003B40  6E13               	movwf	?_frexp+5,c
  3886  003B42  0E5F               	movlw	__accesstop+-1
  3887  003B44  6412               	cpfsgt	?_frexp+4,c
  3888  003B46  6A13               	clrf	?_frexp+5,c
  3889  003B48  C086  F00E         	movff	log@x,?_frexp
  3890  003B4C  C087  F00F         	movff	log@x+1,?_frexp+1
  3891  003B50  C088  F010         	movff	log@x+2,?_frexp+2
  3892  003B54  C089  F011         	movff	log@x+3,?_frexp+3
  3893  003B58  ECCC  F024         	call	_frexp	;wreg free
  3894  003B5C  C011  F021         	movff	?_frexp+3,?___flmul+3
  3895  003B60  C010  F020         	movff	?_frexp+2,?___flmul+2
  3896  003B64  C00F  F01F         	movff	?_frexp+1,?___flmul+1
  3897  003B68  C00E  F01E         	movff	?_frexp,?___flmul
  3898  003B6C  ECB3  F020         	call	___flmul	;wreg free
  3899  003B70  C021  F063         	movff	?___flmul+3,?___fladd+3
  3900  003B74  C020  F062         	movff	?___flmul+2,?___fladd+2
  3901  003B78  C01F  F061         	movff	?___flmul+1,?___fladd+1
  3902  003B7C  C01E  F060         	movff	?___flmul,?___fladd
  3903  003B80  0100               	movlb	0	; () banked
  3904  003B82  6B64               	clrf	(?___fladd+4)& (0+255),b
  3905  003B84  6B65               	clrf	(?___fladd+5)& (0+255),b
  3906  003B86  0E80               	movlw	128
  3907  003B88  6F66               	movwf	(?___fladd+6)& (0+255),b
  3908  003B8A  0EBF               	movlw	191
  3909  003B8C  6F67               	movwf	(?___fladd+7)& (0+255),b
  3910  003B8E  EC21  F01C         	call	___fladd	;wreg free
  3911  003B92  C063  F089         	movff	?___fladd+3,log@x+3
  3912  003B96  C062  F088         	movff	?___fladd+2,log@x+2
  3913  003B9A  C061  F087         	movff	?___fladd+1,log@x+1
  3914  003B9E  C060  F086         	movff	?___fladd,log@x
  3915  003BA2  0643               	decf	log@exponent,f,c
  3916  003BA4  A0D8               	btfss	status,0,c
  3917  003BA6  0644               	decf	log@exponent+1,f,c
  3918  003BA8  C086  F03B         	movff	log@x,?_eval_poly
  3919  003BAC  C087  F03C         	movff	log@x+1,?_eval_poly+1
  3920  003BB0  C088  F03D         	movff	log@x+2,?_eval_poly+2
  3921  003BB4  C089  F03E         	movff	log@x+3,?_eval_poly+3
  3922  003BB8  0E48               	movlw	low log@coeff
  3923  003BBA  6E3F               	movwf	?_eval_poly+4,c
  3924  003BBC  6A41               	clrf	?_eval_poly+6,c
  3925  003BBE  0E08               	movlw	8
  3926  003BC0  6E40               	movwf	?_eval_poly+5,c
  3927  003BC2  EC2E  F022         	call	_eval_poly	;wreg free
  3928  003BC6  C03E  F089         	movff	?_eval_poly+3,log@x+3
  3929  003BCA  C03D  F088         	movff	?_eval_poly+2,log@x+2
  3930  003BCE  C03C  F087         	movff	?_eval_poly+1,log@x+1
  3931  003BD2  C03B  F086         	movff	?_eval_poly,log@x
  3932  003BD6  0E18               	movlw	24
  3933  003BD8  6E22               	movwf	?___flmul+4,c
  3934  003BDA  0E72               	movlw	114
  3935  003BDC  6E23               	movwf	?___flmul+5,c
  3936  003BDE  0E31               	movlw	49
  3937  003BE0  6E24               	movwf	?___flmul+6,c
  3938  003BE2  0E3F               	movlw	63
  3939  003BE4  6E25               	movwf	?___flmul+7,c
  3940  003BE6  C043  F018         	movff	log@exponent,?___awtofl
  3941  003BEA  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3942  003BEE  EC56  F028         	call	___awtofl	;wreg free
  3943  003BF2  C01B  F021         	movff	?___awtofl+3,?___flmul+3
  3944  003BF6  C01A  F020         	movff	?___awtofl+2,?___flmul+2
  3945  003BFA  C019  F01F         	movff	?___awtofl+1,?___flmul+1
  3946  003BFE  C018  F01E         	movff	?___awtofl,?___flmul
  3947  003C02  ECB3  F020         	call	___flmul	;wreg free
  3948  003C06  C021  F063         	movff	?___flmul+3,?___fladd+3
  3949  003C0A  C020  F062         	movff	?___flmul+2,?___fladd+2
  3950  003C0E  C01F  F061         	movff	?___flmul+1,?___fladd+1
  3951  003C12  C01E  F060         	movff	?___flmul,?___fladd
  3952  003C16  C086  F064         	movff	log@x,?___fladd+4
  3953  003C1A  C087  F065         	movff	log@x+1,?___fladd+5
  3954  003C1E  C088  F066         	movff	log@x+2,?___fladd+6
  3955  003C22  C089  F067         	movff	log@x+3,?___fladd+7
  3956  003C26  EC21  F01C         	call	___fladd	;wreg free
  3957  003C2A  C063  F089         	movff	?___fladd+3,?_log+3
  3958  003C2E  C062  F088         	movff	?___fladd+2,?_log+2
  3959  003C32  C061  F087         	movff	?___fladd+1,?_log+1
  3960  003C36  C060  F086         	movff	?___fladd,?_log
  3961  003C3A                     l1855:
  3962  003C3A  0012               	return	
  3963  003C3C                     __end_of_log:
  3964                           	opt stack 0
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           intcon	equ	0xFF2
  3972                           postinc0	equ	0xFEE
  3973                           wreg	equ	0xFE8
  3974                           indf1	equ	0xFE7
  3975                           postdec1	equ	0xFE5
  3976                           fsr1h	equ	0xFE2
  3977                           fsr1l	equ	0xFE1
  3978                           indf2	equ	0xFDF
  3979                           postinc2	equ	0xFDE
  3980                           postdec2	equ	0xFDD
  3981                           plusw2	equ	0xFDB
  3982                           fsr2h	equ	0xFDA
  3983                           fsr2l	equ	0xFD9
  3984                           status	equ	0xFD8
  3985                           
  3986 ;; *************** function _exp *****************
  3987 ;; Defined at:
  3988 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;  x               4   38[BANK0 ] int 
  3991 ;; Auto vars:     Size  Location     Type
  3992 ;;  exponent        2   46[BANK0 ] int 
  3993 ;;  sign            1   48[BANK0 ] unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  4   38[BANK0 ] unsigned char 
  3996 ;; Registers used:
  3997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/1
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4003 ;;      Params:         0       4       0       0       0       0       0
  4004 ;;      Locals:         0       7       0       0       0       0       0
  4005 ;;      Temps:          0       0       0       0       0       0       0
  4006 ;;      Totals:         0      11       0       0       0       0       0
  4007 ;;Total ram usage:       11 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    6
  4010 ;; This function calls:
  4011 ;;		___fldiv
  4012 ;;		___asflmul
  4013 ;;		___asflsub
  4014 ;;		___awtofl
  4015 ;;		_floor
  4016 ;;		_eval_poly
  4017 ;;		_ldexp
  4018 ;;		___flge
  4019 ;;		___flneg
  4020 ;;		___fltol
  4021 ;; This function is called by:
  4022 ;;		_doWork
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text8
  4027  0032FC                     __ptext8:
  4028                           	opt stack 0
  4029  0032FC                     _exp:
  4030                           	opt stack 23
  4031                           
  4032                           ;incstack = 0
  4033                           ;incstack = 0
  4034  0032FC  0100               	movlb	0	; () banked
  4035  0032FE  EE20  F086         	lfsr	2,exp@x
  4036  003302  50DE               	movf	postinc2,w,c
  4037  003304  10DE               	iorwf	postinc2,w,c
  4038  003306  10DE               	iorwf	postinc2,w,c
  4039  003308  10DE               	iorwf	postinc2,w,c
  4040  00330A  E107               	bnz	l14058
  4041                           
  4042                           ; BSR set to: 0
  4043  00330C  0E00               	movlw	0
  4044  00330E  6F86               	movwf	?_exp& (0+255),b
  4045  003310  6F87               	movwf	(?_exp+1)& (0+255),b
  4046  003312  0E80               	movlw	128
  4047  003314  6F88               	movwf	(?_exp+2)& (0+255),b
  4048  003316  0E3F               	movlw	63
  4049  003318  D018               	goto	L3
  4050  00331A                     l14058:
  4051                           
  4052                           ; BSR set to: 0
  4053  00331A  0E18               	movlw	24
  4054  00331C  6E0E               	movwf	?___flge,c
  4055  00331E  0E72               	movlw	114
  4056  003320  6E0F               	movwf	?___flge+1,c
  4057  003322  0E31               	movlw	49
  4058  003324  6E10               	movwf	?___flge+2,c
  4059  003326  0E44               	movlw	68
  4060  003328  6E11               	movwf	?___flge+3,c
  4061  00332A  C086  F012         	movff	exp@x,?___flge+4
  4062  00332E  C087  F013         	movff	exp@x+1,?___flge+5
  4063  003332  C088  F014         	movff	exp@x+2,?___flge+6
  4064  003336  C089  F015         	movff	exp@x+3,?___flge+7
  4065  00333A  ECDD  F026         	call	___flge	;wreg free
  4066  00333E  E207               	bc	l14064
  4067  003340  0100               	movlb	0	; () banked
  4068  003342  6986               	setf	?_exp& (0+255),b
  4069  003344  6987               	setf	(?_exp+1)& (0+255),b
  4070  003346  0E7F               	movlw	127
  4071  003348  6F88               	movwf	(?_exp+2)& (0+255),b
  4072  00334A                     L3:
  4073  00334A  6F89               	movwf	(?_exp+3)& (0+255),b
  4074  00334C  D0C9               	goto	l1563
  4075  00334E                     l14064:
  4076  00334E  C086  F00E         	movff	exp@x,?___flge
  4077  003352  C087  F00F         	movff	exp@x+1,?___flge+1
  4078  003356  C088  F010         	movff	exp@x+2,?___flge+2
  4079  00335A  C089  F011         	movff	exp@x+3,?___flge+3
  4080  00335E  0E87               	movlw	135
  4081  003360  6E12               	movwf	?___flge+4,c
  4082  003362  0E48               	movlw	72
  4083  003364  6E13               	movwf	?___flge+5,c
  4084  003366  0E3A               	movlw	58
  4085  003368  6E14               	movwf	?___flge+6,c
  4086  00336A  0EC4               	movlw	196
  4087  00336C  6E15               	movwf	?___flge+7,c
  4088  00336E  ECDD  F026         	call	___flge	;wreg free
  4089  003372  E202               	bc	l14068
  4090  003374  0100               	movlb	0	; () banked
  4091  003376  D08E               	goto	u13370
  4092  003378                     l14068:
  4093  003378  0100               	movlb	0	; () banked
  4094  00337A  0E01               	movlw	1
  4095  00337C  AF89               	btfss	(exp@x+3)& (0+255),7,b
  4096  00337E  0E00               	movlw	0
  4097  003380  6F90               	movwf	exp@sign& (0+255),b
  4098  003382  5190               	movf	exp@sign& (0+255),w,b
  4099  003384  E012               	bz	l1566
  4100                           
  4101                           ; BSR set to: 0
  4102  003386  C086  F00E         	movff	exp@x,?___flneg
  4103  00338A  C087  F00F         	movff	exp@x+1,?___flneg+1
  4104  00338E  C088  F010         	movff	exp@x+2,?___flneg+2
  4105  003392  C089  F011         	movff	exp@x+3,?___flneg+3
  4106  003396  EC78  F029         	call	___flneg	;wreg free
  4107  00339A  C011  F089         	movff	?___flneg+3,exp@x+3
  4108  00339E  C010  F088         	movff	?___flneg+2,exp@x+2
  4109  0033A2  C00F  F087         	movff	?___flneg+1,exp@x+1
  4110  0033A6  C00E  F086         	movff	?___flneg,exp@x
  4111  0033AA                     l1566:
  4112                           
  4113                           ; BSR set to: 0
  4114  0033AA  0E3B               	movlw	59
  4115  0033AC  6E34               	movwf	?___asflmul,c
  4116  0033AE  0EAA               	movlw	170
  4117  0033B0  6E35               	movwf	?___asflmul+1,c
  4118  0033B2  0EB8               	movlw	184
  4119  0033B4  6E36               	movwf	?___asflmul+2,c
  4120  0033B6  0E3F               	movlw	63
  4121  0033B8  6E37               	movwf	?___asflmul+3,c
  4122  0033BA  0E86               	movlw	exp@x& (0+255)
  4123  0033BC  EC4E  F027         	call	___asflmul
  4124  0033C0  C086  F06B         	movff	exp@x,?_floor
  4125  0033C4  C087  F06C         	movff	exp@x+1,?_floor+1
  4126  0033C8  C088  F06D         	movff	exp@x+2,?_floor+2
  4127  0033CC  C089  F06E         	movff	exp@x+3,?_floor+3
  4128  0033D0  ECBA  F01F         	call	_floor	;wreg free
  4129  0033D4  C06E  F08D         	movff	?_floor+3,_exp$2276+3
  4130  0033D8  C06D  F08C         	movff	?_floor+2,_exp$2276+2
  4131  0033DC  C06C  F08B         	movff	?_floor+1,_exp$2276+1
  4132  0033E0  C06B  F08A         	movff	?_floor,_exp$2276
  4133  0033E4  C08A  F034         	movff	_exp$2276,?___fltol
  4134  0033E8  C08B  F035         	movff	_exp$2276+1,?___fltol+1
  4135  0033EC  C08C  F036         	movff	_exp$2276+2,?___fltol+2
  4136  0033F0  C08D  F037         	movff	_exp$2276+3,?___fltol+3
  4137  0033F4  EC33  F024         	call	___fltol	;wreg free
  4138  0033F8  C034  F08E         	movff	?___fltol,exp@exponent
  4139  0033FC  C035  F08F         	movff	?___fltol+1,exp@exponent+1
  4140  003400  0100               	movlb	0	; () banked
  4141  003402  0E00               	movlw	high exp@x
  4142  003404  6E3C               	movwf	?___asflsub+1,c
  4143  003406  0E86               	movlw	low exp@x
  4144  003408  6E3B               	movwf	?___asflsub,c
  4145  00340A  C08E  F018         	movff	exp@exponent,?___awtofl
  4146  00340E  C08F  F019         	movff	exp@exponent+1,?___awtofl+1
  4147  003412  EC56  F028         	call	___awtofl	;wreg free
  4148  003416  C01B  F040         	movff	?___awtofl+3,?___asflsub+5
  4149  00341A  C01A  F03F         	movff	?___awtofl+2,?___asflsub+4
  4150  00341E  C019  F03E         	movff	?___awtofl+1,?___asflsub+3
  4151  003422  C018  F03D         	movff	?___awtofl,?___asflsub+2
  4152  003426  EC90  F026         	call	___asflsub	;wreg free
  4153                           
  4154                           ; BSR set to: 0
  4155  00342A  C086  F03B         	movff	exp@x,?_eval_poly
  4156  00342E  C087  F03C         	movff	exp@x+1,?_eval_poly+1
  4157  003432  C088  F03D         	movff	exp@x+2,?_eval_poly+2
  4158  003436  C089  F03E         	movff	exp@x+3,?_eval_poly+3
  4159  00343A  0E20               	movlw	low exp@coeff
  4160  00343C  6E3F               	movwf	?_eval_poly+4,c
  4161  00343E  6A41               	clrf	?_eval_poly+6,c
  4162  003440  0E09               	movlw	9
  4163  003442  6E40               	movwf	?_eval_poly+5,c
  4164  003444  EC2E  F022         	call	_eval_poly	;wreg free
  4165  003448  C03E  F06F         	movff	?_eval_poly+3,?_ldexp+3
  4166  00344C  C03D  F06E         	movff	?_eval_poly+2,?_ldexp+2
  4167  003450  C03C  F06D         	movff	?_eval_poly+1,?_ldexp+1
  4168  003454  C03B  F06C         	movff	?_eval_poly,?_ldexp
  4169  003458  C08E  F070         	movff	exp@exponent,?_ldexp+4
  4170  00345C  C08F  F071         	movff	exp@exponent+1,?_ldexp+5
  4171  003460  EC90  F023         	call	_ldexp	;wreg free
  4172  003464  C06F  F089         	movff	?_ldexp+3,exp@x+3
  4173  003468  C06E  F088         	movff	?_ldexp+2,exp@x+2
  4174  00346C  C06D  F087         	movff	?_ldexp+1,exp@x+1
  4175  003470  C06C  F086         	movff	?_ldexp,exp@x
  4176                           
  4177                           ; BSR set to: 0
  4178  003474  5190               	movf	exp@sign& (0+255),w,b
  4179  003476  E02C               	bz	l1567
  4180                           
  4181                           ; BSR set to: 0
  4182  003478  EE20  F086         	lfsr	2,exp@x
  4183  00347C  0EFF               	movlw	255
  4184  00347E  18DE               	xorwf	postinc2,w,c
  4185  003480  0EFF               	movlw	255
  4186  003482  B4D8               	btfsc	status,2,c
  4187  003484  18DE               	xorwf	postinc2,w,c
  4188  003486  0E7F               	movlw	127
  4189  003488  B4D8               	btfsc	status,2,c
  4190  00348A  18DE               	xorwf	postinc2,w,c
  4191  00348C  0E7F               	movlw	127
  4192  00348E  B4D8               	btfsc	status,2,c
  4193  003490  18DE               	xorwf	postinc2,w,c
  4194  003492  E105               	bnz	l14084
  4195  003494                     u13370:
  4196                           
  4197                           ; BSR set to: 0
  4198  003494  6B86               	clrf	?_exp& (0+255),b
  4199  003496  6B87               	clrf	(?_exp+1)& (0+255),b
  4200  003498  6B88               	clrf	(?_exp+2)& (0+255),b
  4201  00349A  6B89               	clrf	(?_exp+3)& (0+255),b
  4202  00349C  D021               	goto	l1563
  4203  00349E                     l14084:
  4204                           
  4205                           ; BSR set to: 0
  4206  00349E  6B70               	clrf	?___fldiv& (0+255),b
  4207  0034A0  6B71               	clrf	(?___fldiv+1)& (0+255),b
  4208  0034A2  0E80               	movlw	128
  4209  0034A4  6F72               	movwf	(?___fldiv+2)& (0+255),b
  4210  0034A6  0E3F               	movlw	63
  4211  0034A8  6F73               	movwf	(?___fldiv+3)& (0+255),b
  4212  0034AA  C086  F074         	movff	exp@x,?___fldiv+4
  4213  0034AE  C087  F075         	movff	exp@x+1,?___fldiv+5
  4214  0034B2  C088  F076         	movff	exp@x+2,?___fldiv+6
  4215  0034B6  C089  F077         	movff	exp@x+3,?___fldiv+7
  4216  0034BA  EC39  F023         	call	___fldiv	;wreg free
  4217  0034BE  C073  F089         	movff	?___fldiv+3,?_exp+3
  4218  0034C2  C072  F088         	movff	?___fldiv+2,?_exp+2
  4219  0034C6  C071  F087         	movff	?___fldiv+1,?_exp+1
  4220  0034CA  C070  F086         	movff	?___fldiv,?_exp
  4221  0034CE  D008               	goto	l1563
  4222  0034D0                     l1567:
  4223                           
  4224                           ; BSR set to: 0
  4225  0034D0  C086  F086         	movff	exp@x,?_exp
  4226  0034D4  C087  F087         	movff	exp@x+1,?_exp+1
  4227  0034D8  C088  F088         	movff	exp@x+2,?_exp+2
  4228  0034DC  C089  F089         	movff	exp@x+3,?_exp+3
  4229  0034E0                     l1563:
  4230  0034E0  0012               	return	
  4231  0034E2                     __end_of_exp:
  4232                           	opt stack 0
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           intcon	equ	0xFF2
  4240                           postinc0	equ	0xFEE
  4241                           wreg	equ	0xFE8
  4242                           indf1	equ	0xFE7
  4243                           postdec1	equ	0xFE5
  4244                           fsr1h	equ	0xFE2
  4245                           fsr1l	equ	0xFE1
  4246                           indf2	equ	0xFDF
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           plusw2	equ	0xFDB
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function ___flneg *****************
  4255 ;; Defined at:
  4256 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  f1              4   13[COMRAM] unsigned char 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  4   13[COMRAM] unsigned char 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4265 ;; Tracked objects:
  4266 ;;		On entry : F/0
  4267 ;;		On exit  : F/0
  4268 ;;		Unchanged: F/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4270 ;;      Params:         4       0       0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0       0
  4273 ;;      Totals:         4       0       0       0       0       0       0
  4274 ;;Total ram usage:        4 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    2
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_exp
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text9
  4285  0052F0                     __ptext9:
  4286                           	opt stack 0
  4287  0052F0                     ___flneg:
  4288                           	opt stack 26
  4289                           
  4290                           ; BSR set to: 0
  4291                           
  4292                           ;incstack = 0
  4293                           ;incstack = 0
  4294  0052F0  EE20  F00E         	lfsr	2,___flneg@f1
  4295  0052F4  50DE               	movf	postinc2,w,c
  4296  0052F6  10DE               	iorwf	postinc2,w,c
  4297  0052F8  10DE               	iorwf	postinc2,w,c
  4298  0052FA  10DE               	iorwf	postinc2,w,c
  4299  0052FC  E002               	bz	l11778
  4300                           
  4301                           ; BSR set to: 0
  4302  0052FE  0E80               	movlw	128
  4303  005300  1A11               	xorwf	___flneg@f1+3,f,c
  4304  005302                     l11778:
  4305                           
  4306                           ; BSR set to: 0
  4307  005302  C00E  F00E         	movff	___flneg@f1,?___flneg
  4308  005306  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  4309  00530A  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  4310  00530E  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  4311                           
  4312                           ; BSR set to: 0
  4313  005312  0012               	return	
  4314  005314                     __end_of___flneg:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           indf1	equ	0xFE7
  4326                           postdec1	equ	0xFE5
  4327                           fsr1h	equ	0xFE2
  4328                           fsr1l	equ	0xFE1
  4329                           indf2	equ	0xFDF
  4330                           postinc2	equ	0xFDE
  4331                           postdec2	equ	0xFDD
  4332                           plusw2	equ	0xFDB
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function _ldexp *****************
  4338 ;; Defined at:
  4339 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  value           4   12[BANK0 ] unsigned char 
  4342 ;;  newexp          2   16[BANK0 ] int 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  4   12[BANK0 ] int 
  4347 ;; Registers used:
  4348 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : F/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4354 ;;      Params:         0       6       0       0       0       0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0
  4356 ;;      Temps:          3       0       0       0       0       0       0
  4357 ;;      Totals:         3       6       0       0       0       0       0
  4358 ;;Total ram usage:        9 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    2
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_exp
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text10
  4369  004720                     __ptext10:
  4370                           	opt stack 0
  4371  004720                     _ldexp:
  4372                           	opt stack 26
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;incstack = 0
  4376                           ;incstack = 0
  4377  004720  0100               	movlb	0	; () banked
  4378  004722  EE20  F06C         	lfsr	2,ldexp@value
  4379  004726  50DE               	movf	postinc2,w,c
  4380  004728  10DE               	iorwf	postinc2,w,c
  4381  00472A  10DE               	iorwf	postinc2,w,c
  4382  00472C  10DE               	iorwf	postinc2,w,c
  4383  00472E  E014               	bz	u10200
  4384                           
  4385                           ; BSR set to: 0
  4386                           
  4387                           ; BSR set to: 0
  4388  004730  516F               	movf	(ldexp@value+3)& (0+255),w,b
  4389  004732  0B7F               	andlw	127
  4390  004734  6E43               	movwf	??_ldexp& (0+255),c
  4391  004736  90D8               	bcf	status,0,c
  4392  004738  3443               	rlcf	??_ldexp,w,c
  4393  00473A  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4394  00473C  6A45               	clrf	(??_ldexp+2)& (0+255),c
  4395  00473E  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  4396  004740  5044               	movf	??_ldexp+1,w,c
  4397  004742  2770               	addwf	ldexp@newexp& (0+255),f,b
  4398  004744  5045               	movf	??_ldexp+2,w,c
  4399  004746  2371               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4400  004748  356E               	rlcf	(ldexp@value+2)& (0+255),w,b
  4401  00474A  36E8               	rlcf	wreg,f,c
  4402  00474C  0B01               	andlw	1
  4403  00474E  2770               	addwf	ldexp@newexp& (0+255),f,b
  4404  004750  0E00               	movlw	0
  4405  004752  2371               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4406                           
  4407                           ; BSR set to: 0
  4408  004754  AF71               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4409  004756  D005               	goto	l11740
  4410  004758                     u10200:
  4411                           
  4412                           ; BSR set to: 0
  4413  004758  6B6C               	clrf	?_ldexp& (0+255),b
  4414  00475A  6B6D               	clrf	(?_ldexp+1)& (0+255),b
  4415  00475C  6B6E               	clrf	(?_ldexp+2)& (0+255),b
  4416  00475E  6B6F               	clrf	(?_ldexp+3)& (0+255),b
  4417  004760  D031               	goto	l1688
  4418  004762                     l11740:
  4419                           
  4420                           ; BSR set to: 0
  4421  004762  5171               	movf	(ldexp@newexp+1)& (0+255),w,b
  4422  004764  0A80               	xorlw	128
  4423  004766  0F7F               	addlw	-129
  4424  004768  0E00               	movlw	0
  4425  00476A  B4D8               	btfsc	status,2,c
  4426  00476C  5D70               	subwf	ldexp@newexp& (0+255),w,b
  4427  00476E  E30E               	bnc	l11754
  4428                           
  4429                           ; BSR set to: 0
  4430  004770  AF6F               	btfss	(ldexp@value+3)& (0+255),7,b
  4431  004772  D006               	goto	l11750
  4432                           
  4433                           ; BSR set to: 0
  4434  004774  696C               	setf	?_ldexp& (0+255),b
  4435  004776  696D               	setf	(?_ldexp+1)& (0+255),b
  4436  004778  0E7F               	movlw	127
  4437  00477A  6F6E               	movwf	(?_ldexp+2)& (0+255),b
  4438  00477C  0EFF               	movlw	255
  4439  00477E  D004               	goto	L4
  4440  004780                     l11750:
  4441                           
  4442                           ; BSR set to: 0
  4443  004780  696C               	setf	?_ldexp& (0+255),b
  4444  004782  696D               	setf	(?_ldexp+1)& (0+255),b
  4445  004784  0E7F               	movlw	127
  4446  004786  6F6E               	movwf	(?_ldexp+2)& (0+255),b
  4447  004788                     L4:
  4448  004788  6F6F               	movwf	(?_ldexp+3)& (0+255),b
  4449  00478A  D01C               	goto	l1688
  4450  00478C                     l11754:
  4451                           
  4452                           ; BSR set to: 0
  4453  00478C  3571               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4454  00478E  3171               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4455  004790  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4456  004792  3170               	rrcf	ldexp@newexp& (0+255),w,b
  4457  004794  6E43               	movwf	??_ldexp& (0+255),c
  4458  004796  196F               	xorwf	(ldexp@value+3)& (0+255),w,b
  4459  004798  0B80               	andlw	-128
  4460  00479A  1843               	xorwf	??_ldexp,w,c
  4461  00479C  6F6F               	movwf	(ldexp@value+3)& (0+255),b
  4462  00479E  C070  F043         	movff	ldexp@newexp,??_ldexp
  4463  0047A2  0E01               	movlw	1
  4464  0047A4  1643               	andwf	??_ldexp,f,c
  4465  0047A6  3243               	rrcf	??_ldexp,f,c
  4466  0047A8  3243               	rrcf	??_ldexp,f,c
  4467  0047AA  516E               	movf	(ldexp@value+2)& (0+255),w,b
  4468  0047AC  1843               	xorwf	??_ldexp,w,c
  4469  0047AE  0B7F               	andlw	-129
  4470  0047B0  1843               	xorwf	??_ldexp,w,c
  4471  0047B2  6F6E               	movwf	(ldexp@value+2)& (0+255),b
  4472                           
  4473                           ; BSR set to: 0
  4474  0047B4  C06C  F06C         	movff	ldexp@value,?_ldexp
  4475  0047B8  C06D  F06D         	movff	ldexp@value+1,?_ldexp+1
  4476  0047BC  C06E  F06E         	movff	ldexp@value+2,?_ldexp+2
  4477  0047C0  C06F  F06F         	movff	ldexp@value+3,?_ldexp+3
  4478  0047C4                     l1688:
  4479                           
  4480                           ; BSR set to: 0
  4481  0047C4  0012               	return	
  4482  0047C6                     __end_of_ldexp:
  4483                           	opt stack 0
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           prodh	equ	0xFF4
  4489                           prodl	equ	0xFF3
  4490                           intcon	equ	0xFF2
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           indf1	equ	0xFE7
  4494                           postdec1	equ	0xFE5
  4495                           fsr1h	equ	0xFE2
  4496                           fsr1l	equ	0xFE1
  4497                           indf2	equ	0xFDF
  4498                           postinc2	equ	0xFDE
  4499                           postdec2	equ	0xFDD
  4500                           plusw2	equ	0xFDB
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function _eval_poly *****************
  4506 ;; Defined at:
  4507 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  x               4   58[COMRAM] int 
  4510 ;;  d               1   62[COMRAM] PTR const 
  4511 ;;		 -> log@coeff(36), exp@coeff(40), 
  4512 ;;  n               2   63[COMRAM] int 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  res             4    8[BANK0 ] int 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  4   58[COMRAM] int 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4524 ;;      Params:         7       0       0       0       0       0       0
  4525 ;;      Locals:         0       4       0       0       0       0       0
  4526 ;;      Temps:          1       0       0       0       0       0       0
  4527 ;;      Totals:         8       4       0       0       0       0       0
  4528 ;;Total ram usage:       12 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    4
  4531 ;; This function calls:
  4532 ;;		___fladd
  4533 ;;		___flmul
  4534 ;; This function is called by:
  4535 ;;		_exp
  4536 ;;		_log
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           	psect	text11
  4541  00445C                     __ptext11:
  4542                           	opt stack 0
  4543  00445C                     _eval_poly:
  4544                           	opt stack 24
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;incstack = 0
  4548                           ;incstack = 0
  4549  00445C  5040               	movf	eval_poly@n,w,c
  4550  00445E  D84C               	call	PL42	;call to abstracted procedure
  4551  004460  CFF5 F068          	movff	tablat,eval_poly@res
  4552  004464  0009               	tblrd		*+
  4553  004466  CFF5 F069          	movff	tablat,eval_poly@res+1
  4554  00446A  0009               	tblrd		*+
  4555  00446C  CFF5 F06A          	movff	tablat,eval_poly@res+2
  4556  004470  000A               	tblrd		*-
  4557  004472  CFF5 F06B          	movff	tablat,eval_poly@res+3
  4558  004476  D034               	goto	l14388
  4559  004478                     l14386:
  4560  004478  C068  F022         	movff	eval_poly@res,?___flmul+4
  4561  00447C  C069  F023         	movff	eval_poly@res+1,?___flmul+5
  4562  004480  C06A  F024         	movff	eval_poly@res+2,?___flmul+6
  4563  004484  C06B  F025         	movff	eval_poly@res+3,?___flmul+7
  4564  004488  C03B  F01E         	movff	eval_poly@x,?___flmul
  4565  00448C  C03C  F01F         	movff	eval_poly@x+1,?___flmul+1
  4566  004490  C03D  F020         	movff	eval_poly@x+2,?___flmul+2
  4567  004494  C03E  F021         	movff	eval_poly@x+3,?___flmul+3
  4568  004498  ECB3  F020         	call	___flmul	;wreg free
  4569  00449C  C021  F063         	movff	?___flmul+3,?___fladd+3
  4570  0044A0  C020  F062         	movff	?___flmul+2,?___fladd+2
  4571  0044A4  C01F  F061         	movff	?___flmul+1,?___fladd+1
  4572  0044A8  C01E  F060         	movff	?___flmul,?___fladd
  4573  0044AC  0640               	decf	eval_poly@n,f,c
  4574  0044AE  A0D8               	btfss	status,0,c
  4575  0044B0  0641               	decf	eval_poly@n+1,f,c
  4576  0044B2  5040               	movf	eval_poly@n& (0+255),w,c
  4577  0044B4  D821               	call	PL42	;call to abstracted procedure
  4578  0044B6  CFF5 F064          	movff	tablat,?___fladd+4
  4579  0044BA  0009               	tblrd		*+
  4580  0044BC  CFF5 F065          	movff	tablat,?___fladd+5
  4581  0044C0  0009               	tblrd		*+
  4582  0044C2  CFF5 F066          	movff	tablat,?___fladd+6
  4583  0044C6  000A               	tblrd		*-
  4584  0044C8  CFF5 F067          	movff	tablat,?___fladd+7
  4585  0044CC  EC21  F01C         	call	___fladd	;wreg free
  4586  0044D0  C063  F06B         	movff	?___fladd+3,eval_poly@res+3
  4587  0044D4  C062  F06A         	movff	?___fladd+2,eval_poly@res+2
  4588  0044D8  C061  F069         	movff	?___fladd+1,eval_poly@res+1
  4589  0044DC  C060  F068         	movff	?___fladd,eval_poly@res
  4590  0044E0                     l14388:
  4591  0044E0  5041               	movf	eval_poly@n+1,w,c
  4592  0044E2  1040               	iorwf	eval_poly@n,w,c
  4593  0044E4  E1C9               	bnz	l14386
  4594  0044E6  C068  F03B         	movff	eval_poly@res,?_eval_poly
  4595  0044EA  C069  F03C         	movff	eval_poly@res+1,?_eval_poly+1
  4596  0044EE  C06A  F03D         	movff	eval_poly@res+2,?_eval_poly+2
  4597  0044F2  C06B  F03E         	movff	eval_poly@res+3,?_eval_poly+3
  4598  0044F6  0012               	return	
  4599  0044F8                     __end_of_eval_poly:
  4600                           	opt stack 0
  4601  0044F8                     PL42:
  4602                           	opt stack 24
  4603  0044F8  0D04               	mullw	4
  4604  0044FA  503F               	movf	eval_poly@d,w,c
  4605  0044FC  24F3               	addwf	prodl,w,c
  4606  0044FE  6E42               	movwf	??_eval_poly& (0+255),c
  4607  004500  C042  FFF6         	movff	??_eval_poly,tblptrl
  4608  004504  0E06               	movlw	high __smallconst
  4609  004506  6EF7               	movwf	tblptrh,c
  4610  004508  0009               	tblrd		*+
  4611  00450A  0100               	movlb	0	; () banked
  4612  00450C  0012               	return	
  4613  00450E                     __end_ofPL42:
  4614                           	opt stack 0
  4615                           tblptru	equ	0xFF8
  4616                           tblptrh	equ	0xFF7
  4617                           tblptrl	equ	0xFF6
  4618                           tablat	equ	0xFF5
  4619                           prodh	equ	0xFF4
  4620                           prodl	equ	0xFF3
  4621                           intcon	equ	0xFF2
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           indf1	equ	0xFE7
  4625                           postdec1	equ	0xFE5
  4626                           fsr1h	equ	0xFE2
  4627                           fsr1l	equ	0xFE1
  4628                           indf2	equ	0xFDF
  4629                           postinc2	equ	0xFDE
  4630                           postdec2	equ	0xFDD
  4631                           plusw2	equ	0xFDB
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function _floor *****************
  4637 ;; Defined at:
  4638 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  x               4   11[BANK0 ] int 
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;  i               4   15[BANK0 ] int 
  4643 ;;  expon           2   19[BANK0 ] int 
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  4   11[BANK0 ] int 
  4646 ;; Registers used:
  4647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4653 ;;      Params:         0       4       0       0       0       0       0
  4654 ;;      Locals:         0       6       0       0       0       0       0
  4655 ;;      Temps:          0       0       0       0       0       0       0
  4656 ;;      Totals:         0      10       0       0       0       0       0
  4657 ;;Total ram usage:       10 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:    4
  4660 ;; This function calls:
  4661 ;;		___altofl
  4662 ;;		___fladd
  4663 ;;		___flge
  4664 ;;		_frexp
  4665 ;;		___fltol
  4666 ;; This function is called by:
  4667 ;;		_exp
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text12
  4672  003F74                     __ptext12:
  4673                           	opt stack 0
  4674  003F74                     _floor:
  4675                           	opt stack 24
  4676                           
  4677                           ;incstack = 0
  4678                           ;incstack = 0
  4679  003F74  C06B  F00E         	movff	floor@x,?_frexp
  4680  003F78  C06C  F00F         	movff	floor@x+1,?_frexp+1
  4681  003F7C  C06D  F010         	movff	floor@x+2,?_frexp+2
  4682  003F80  C06E  F011         	movff	floor@x+3,?_frexp+3
  4683  003F84  0100               	movlb	0	; () banked
  4684  003F86  0E00               	movlw	high floor@expon
  4685  003F88  6E13               	movwf	?_frexp+5,c
  4686  003F8A  0E73               	movlw	low floor@expon
  4687  003F8C  6E12               	movwf	?_frexp+4,c
  4688  003F8E  ECCC  F024         	call	_frexp	;wreg free
  4689                           
  4690                           ; BSR set to: 0
  4691  003F92  AF74               	btfss	(floor@expon+1)& (0+255),7,b
  4692  003F94  D00F               	goto	l14374
  4693                           
  4694                           ; BSR set to: 0
  4695  003F96  AF6E               	btfss	(floor@x+3)& (0+255),7,b
  4696  003F98  D008               	goto	l1656
  4697                           
  4698                           ; BSR set to: 0
  4699  003F9A  0E00               	movlw	0
  4700  003F9C  6F6B               	movwf	?_floor& (0+255),b
  4701  003F9E  6F6C               	movwf	(?_floor+1)& (0+255),b
  4702  003FA0  0E80               	movlw	128
  4703  003FA2  6F6D               	movwf	(?_floor+2)& (0+255),b
  4704  003FA4  0EBF               	movlw	191
  4705  003FA6  6F6E               	movwf	(?_floor+3)& (0+255),b
  4706  003FA8  D064               	goto	l1657
  4707  003FAA                     l1656:
  4708                           
  4709                           ; BSR set to: 0
  4710  003FAA  6B6B               	clrf	?_floor& (0+255),b
  4711  003FAC  6B6C               	clrf	(?_floor+1)& (0+255),b
  4712  003FAE  6B6D               	clrf	(?_floor+2)& (0+255),b
  4713  003FB0  6B6E               	clrf	(?_floor+3)& (0+255),b
  4714  003FB2  D05F               	goto	l1657
  4715  003FB4                     l14374:
  4716                           
  4717                           ; BSR set to: 0
  4718  003FB4  0E1D               	movlw	29
  4719  003FB6  5D73               	subwf	floor@expon& (0+255),w,b
  4720  003FB8  0E00               	movlw	0
  4721  003FBA  5974               	subwfb	(floor@expon+1)& (0+255),w,b
  4722  003FBC  E309               	bnc	l14378
  4723                           
  4724                           ; BSR set to: 0
  4725  003FBE  C06B  F06B         	movff	floor@x,?_floor
  4726  003FC2  C06C  F06C         	movff	floor@x+1,?_floor+1
  4727  003FC6  C06D  F06D         	movff	floor@x+2,?_floor+2
  4728  003FCA  C06E  F06E         	movff	floor@x+3,?_floor+3
  4729  003FCE  D051               	goto	l1657
  4730  003FD0                     l14378:
  4731                           
  4732                           ; BSR set to: 0
  4733  003FD0  C06B  F034         	movff	floor@x,?___fltol
  4734  003FD4  C06C  F035         	movff	floor@x+1,?___fltol+1
  4735  003FD8  C06D  F036         	movff	floor@x+2,?___fltol+2
  4736  003FDC  C06E  F037         	movff	floor@x+3,?___fltol+3
  4737  003FE0  EC33  F024         	call	___fltol	;wreg free
  4738  003FE4  C037  F069         	movff	?___fltol+3,?___altofl+3
  4739  003FE8  C036  F068         	movff	?___fltol+2,?___altofl+2
  4740  003FEC  C035  F067         	movff	?___fltol+1,?___altofl+1
  4741  003FF0  C034  F066         	movff	?___fltol,?___altofl
  4742  003FF4  EC29  F027         	call	___altofl	;wreg free
  4743  003FF8  C069  F072         	movff	?___altofl+3,floor@i+3
  4744  003FFC  C068  F071         	movff	?___altofl+2,floor@i+2
  4745  004000  C067  F070         	movff	?___altofl+1,floor@i+1
  4746  004004  C066  F06F         	movff	?___altofl,floor@i
  4747  004008  C06B  F00E         	movff	floor@x,?___flge
  4748  00400C  C06C  F00F         	movff	floor@x+1,?___flge+1
  4749  004010  C06D  F010         	movff	floor@x+2,?___flge+2
  4750  004014  C06E  F011         	movff	floor@x+3,?___flge+3
  4751  004018  C06F  F012         	movff	floor@i,?___flge+4
  4752  00401C  C070  F013         	movff	floor@i+1,?___flge+5
  4753  004020  C071  F014         	movff	floor@i+2,?___flge+6
  4754  004024  C072  F015         	movff	floor@i+3,?___flge+7
  4755  004028  ECDD  F026         	call	___flge	;wreg free
  4756  00402C  E21A               	bc	l1659
  4757  00402E  C06F  F060         	movff	floor@i,?___fladd
  4758  004032  C070  F061         	movff	floor@i+1,?___fladd+1
  4759  004036  C071  F062         	movff	floor@i+2,?___fladd+2
  4760  00403A  C072  F063         	movff	floor@i+3,?___fladd+3
  4761  00403E  0100               	movlb	0	; () banked
  4762  004040  6B64               	clrf	(?___fladd+4)& (0+255),b
  4763  004042  6B65               	clrf	(?___fladd+5)& (0+255),b
  4764  004044  0E80               	movlw	128
  4765  004046  6F66               	movwf	(?___fladd+6)& (0+255),b
  4766  004048  0EBF               	movlw	191
  4767  00404A  6F67               	movwf	(?___fladd+7)& (0+255),b
  4768  00404C  EC21  F01C         	call	___fladd	;wreg free
  4769  004050  C063  F06E         	movff	?___fladd+3,?_floor+3
  4770  004054  C062  F06D         	movff	?___fladd+2,?_floor+2
  4771  004058  C061  F06C         	movff	?___fladd+1,?_floor+1
  4772  00405C  C060  F06B         	movff	?___fladd,?_floor
  4773  004060  D008               	goto	l1657
  4774  004062                     l1659:
  4775  004062  C06F  F06B         	movff	floor@i,?_floor
  4776  004066  C070  F06C         	movff	floor@i+1,?_floor+1
  4777  00406A  C071  F06D         	movff	floor@i+2,?_floor+2
  4778  00406E  C072  F06E         	movff	floor@i+3,?_floor+3
  4779  004072                     l1657:
  4780  004072  0012               	return	
  4781  004074                     __end_of_floor:
  4782                           	opt stack 0
  4783                           tblptru	equ	0xFF8
  4784                           tblptrh	equ	0xFF7
  4785                           tblptrl	equ	0xFF6
  4786                           tablat	equ	0xFF5
  4787                           prodh	equ	0xFF4
  4788                           prodl	equ	0xFF3
  4789                           intcon	equ	0xFF2
  4790                           postinc0	equ	0xFEE
  4791                           wreg	equ	0xFE8
  4792                           indf1	equ	0xFE7
  4793                           postdec1	equ	0xFE5
  4794                           fsr1h	equ	0xFE2
  4795                           fsr1l	equ	0xFE1
  4796                           indf2	equ	0xFDF
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           plusw2	equ	0xFDB
  4800                           fsr2h	equ	0xFDA
  4801                           fsr2l	equ	0xFD9
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function ___fltol *****************
  4805 ;; Defined at:
  4806 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  f1              4   51[COMRAM] int 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  exp1            1   60[COMRAM] unsigned char 
  4811 ;;  sign1           1   59[COMRAM] unsigned char 
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  4   51[COMRAM] long 
  4814 ;; Registers used:
  4815 ;;		wreg, status,2, status,0
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4821 ;;      Params:         4       0       0       0       0       0       0
  4822 ;;      Locals:         2       0       0       0       0       0       0
  4823 ;;      Temps:          4       0       0       0       0       0       0
  4824 ;;      Totals:        10       0       0       0       0       0       0
  4825 ;;Total ram usage:       10 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    2
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_doWork
  4832 ;;		_setEventData
  4833 ;;		_exp
  4834 ;;		_floor
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           	psect	text13
  4839  004866                     __ptext13:
  4840                           	opt stack 0
  4841  004866                     ___fltol:
  4842                           	opt stack 27
  4843                           
  4844                           ;incstack = 0
  4845                           ;incstack = 0
  4846  004866  3436               	rlcf	(___fltol@f1+2)& (0+255),w,c
  4847  004868  3437               	rlcf	(___fltol@f1+3)& (0+255),w,c
  4848  00486A  6E3D               	movwf	___fltol@exp1,c
  4849  00486C  663D               	tstfsz	___fltol@exp1& (0+255),c
  4850  00486E  D005               	goto	l11806
  4851  004870                     l11804:
  4852  004870  6A34               	clrf	?___fltol,c
  4853  004872  6A35               	clrf	?___fltol+1,c
  4854  004874  6A36               	clrf	?___fltol+2,c
  4855  004876  6A37               	clrf	?___fltol+3,c
  4856  004878  D043               	goto	l1668
  4857  00487A                     l11806:
  4858  00487A  C034  F038         	movff	___fltol@f1,??___fltol
  4859  00487E  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  4860  004882  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  4861  004886  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  4862  00488A  0E20               	movlw	32
  4863  00488C  D005               	goto	u10290
  4864  00488E                     u10295:
  4865  00488E  90D8               	bcf	status,0,c
  4866  004890  323B               	rrcf	??___fltol+3,f,c
  4867  004892  323A               	rrcf	??___fltol+2,f,c
  4868  004894  3239               	rrcf	??___fltol+1,f,c
  4869  004896  3238               	rrcf	??___fltol,f,c
  4870  004898                     u10290:
  4871  004898  2EE8               	decfsz	wreg,f,c
  4872  00489A  D7F9               	goto	u10295
  4873  00489C  5038               	movf	??___fltol,w,c
  4874  00489E  6E3C               	movwf	___fltol@sign1,c
  4875  0048A0  8E36               	bsf	___fltol@f1+2,7,c
  4876  0048A2  6A37               	clrf	___fltol@f1+3,c
  4877  0048A4  0E96               	movlw	150
  4878  0048A6  5E3D               	subwf	___fltol@exp1,f,c
  4879  0048A8  AE3D               	btfss	___fltol@exp1,7,c
  4880  0048AA  D00C               	goto	l11824
  4881  0048AC  503D               	movf	___fltol@exp1,w,c
  4882  0048AE  0A80               	xorlw	128
  4883  0048B0  0F97               	addlw	151
  4884  0048B2  E3DE               	bnc	l11804
  4885  0048B4                     l11820:
  4886  0048B4  90D8               	bcf	status,0,c
  4887  0048B6  3237               	rrcf	___fltol@f1+3,f,c
  4888  0048B8  3236               	rrcf	___fltol@f1+2,f,c
  4889  0048BA  3235               	rrcf	___fltol@f1+1,f,c
  4890  0048BC  3234               	rrcf	___fltol@f1,f,c
  4891  0048BE  3E3D               	incfsz	___fltol@exp1,f,c
  4892  0048C0  D7F9               	goto	l11820
  4893  0048C2  D00C               	goto	l11832
  4894  0048C4                     l11824:
  4895  0048C4  0E1F               	movlw	31
  4896  0048C6  643D               	cpfsgt	___fltol@exp1,c
  4897  0048C8  D007               	goto	l11830
  4898  0048CA  D7D2               	goto	l11804
  4899  0048CC                     l11828:
  4900  0048CC  90D8               	bcf	status,0,c
  4901  0048CE  3634               	rlcf	___fltol@f1,f,c
  4902  0048D0  3635               	rlcf	___fltol@f1+1,f,c
  4903  0048D2  3636               	rlcf	___fltol@f1+2,f,c
  4904  0048D4  3637               	rlcf	___fltol@f1+3,f,c
  4905  0048D6  063D               	decf	___fltol@exp1,f,c
  4906  0048D8                     l11830:
  4907  0048D8  663D               	tstfsz	___fltol@exp1,c
  4908  0048DA  D7F8               	goto	l11828
  4909  0048DC                     l11832:
  4910  0048DC  503C               	movf	___fltol@sign1,w,c
  4911  0048DE  E008               	bz	l11836
  4912  0048E0  1E37               	comf	___fltol@f1+3,f,c
  4913  0048E2  1E36               	comf	___fltol@f1+2,f,c
  4914  0048E4  1E35               	comf	___fltol@f1+1,f,c
  4915  0048E6  6C34               	negf	___fltol@f1,c
  4916  0048E8  0E00               	movlw	0
  4917  0048EA  2235               	addwfc	___fltol@f1+1,f,c
  4918  0048EC  2236               	addwfc	___fltol@f1+2,f,c
  4919  0048EE  2237               	addwfc	___fltol@f1+3,f,c
  4920  0048F0                     l11836:
  4921  0048F0  C034  F034         	movff	___fltol@f1,?___fltol
  4922  0048F4  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  4923  0048F8  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  4924  0048FC  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  4925  004900                     l1668:
  4926  004900  0012               	return	
  4927  004902                     __end_of___fltol:
  4928                           	opt stack 0
  4929                           tblptru	equ	0xFF8
  4930                           tblptrh	equ	0xFF7
  4931                           tblptrl	equ	0xFF6
  4932                           tablat	equ	0xFF5
  4933                           prodh	equ	0xFF4
  4934                           prodl	equ	0xFF3
  4935                           intcon	equ	0xFF2
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           indf1	equ	0xFE7
  4939                           postdec1	equ	0xFE5
  4940                           fsr1h	equ	0xFE2
  4941                           fsr1l	equ	0xFE1
  4942                           indf2	equ	0xFDF
  4943                           postinc2	equ	0xFDE
  4944                           postdec2	equ	0xFDD
  4945                           plusw2	equ	0xFDB
  4946                           fsr2h	equ	0xFDA
  4947                           fsr2l	equ	0xFD9
  4948                           status	equ	0xFD8
  4949                           
  4950 ;; *************** function _frexp *****************
  4951 ;; Defined at:
  4952 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  value           4   13[COMRAM] long 
  4955 ;;  eptr            2   17[COMRAM] PTR int 
  4956 ;;		 -> log@exponent(2), floor@expon(2), 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;		None
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  4   13[COMRAM] PTR int 
  4961 ;; Registers used:
  4962 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4963 ;; Tracked objects:
  4964 ;;		On entry : F/0
  4965 ;;		On exit  : F/0
  4966 ;;		Unchanged: F/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4968 ;;      Params:         6       0       0       0       0       0       0
  4969 ;;      Locals:         0       0       0       0       0       0       0
  4970 ;;      Temps:          3       0       0       0       0       0       0
  4971 ;;      Totals:         9       0       0       0       0       0       0
  4972 ;;Total ram usage:        9 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    2
  4975 ;; This function calls:
  4976 ;;		Nothing
  4977 ;; This function is called by:
  4978 ;;		_floor
  4979 ;;		_log
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text14
  4984  004998                     __ptext14:
  4985                           	opt stack 0
  4986  004998                     _frexp:
  4987                           	opt stack 26
  4988                           
  4989                           ; BSR set to: 0
  4990                           
  4991                           ;incstack = 0
  4992                           ;incstack = 0
  4993  004998  EE20  F00E         	lfsr	2,frexp@value
  4994  00499C  50DE               	movf	postinc2,w,c
  4995  00499E  10DE               	iorwf	postinc2,w,c
  4996  0049A0  10DE               	iorwf	postinc2,w,c
  4997  0049A2  10DE               	iorwf	postinc2,w,c
  4998  0049A4  E10C               	bnz	l11790
  4999                           
  5000                           ; BSR set to: 0
  5001  0049A6  C012  FFD9         	movff	frexp@eptr,fsr2l
  5002  0049AA  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5003  0049AE  0E00               	movlw	0
  5004  0049B0  6ADE               	clrf	postinc2,c
  5005  0049B2  6ADD               	clrf	postdec2,c
  5006                           
  5007                           ; BSR set to: 0
  5008  0049B4  6A0E               	clrf	?_frexp,c
  5009  0049B6  6A0F               	clrf	?_frexp+1,c
  5010  0049B8  6A10               	clrf	?_frexp+2,c
  5011  0049BA  6A11               	clrf	?_frexp+3,c
  5012  0049BC  D02F               	goto	l1684
  5013  0049BE                     l11790:
  5014                           
  5015                           ; BSR set to: 0
  5016  0049BE  5011               	movf	frexp@value+3,w,c
  5017  0049C0  0B7F               	andlw	127
  5018  0049C2  6E14               	movwf	??_frexp& (0+255),c
  5019  0049C4  90D8               	bcf	status,0,c
  5020  0049C6  3414               	rlcf	??_frexp,w,c
  5021  0049C8  6E15               	movwf	(??_frexp+1)& (0+255),c
  5022  0049CA  6A16               	clrf	(??_frexp+2)& (0+255),c
  5023  0049CC  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  5024  0049CE  C012  FFD9         	movff	frexp@eptr,fsr2l
  5025  0049D2  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5026  0049D6  C015  FFDE         	movff	??_frexp+1,postinc2
  5027  0049DA  C016  FFDD         	movff	??_frexp+2,postdec2
  5028  0049DE  3410               	rlcf	frexp@value+2,w,c
  5029  0049E0  36E8               	rlcf	wreg,f,c
  5030  0049E2  0B01               	andlw	1
  5031  0049E4  C012  FFD9         	movff	frexp@eptr,fsr2l
  5032  0049E8  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5033  0049EC  12DE               	iorwf	postinc2,f,c
  5034  0049EE  0E00               	movlw	0
  5035  0049F0  12DD               	iorwf	postdec2,f,c
  5036                           
  5037                           ; BSR set to: 0
  5038  0049F2  C012  FFD9         	movff	frexp@eptr,fsr2l
  5039  0049F6  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5040  0049FA  0E82               	movlw	130
  5041  0049FC  26DE               	addwf	postinc2,f,c
  5042  0049FE  0EFF               	movlw	255
  5043  004A00  22DD               	addwfc	postdec2,f,c
  5044                           
  5045                           ; BSR set to: 0
  5046  004A02  5011               	movf	frexp@value+3,w,c
  5047  004A04  0B80               	andlw	-128
  5048  004A06  093F               	iorlw	63
  5049  004A08  6E11               	movwf	frexp@value+3,c
  5050                           
  5051                           ; BSR set to: 0
  5052  004A0A  9E10               	bcf	frexp@value+2,7,c
  5053                           
  5054                           ; BSR set to: 0
  5055  004A0C  C00E  F00E         	movff	frexp@value,?_frexp
  5056  004A10  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  5057  004A14  C010  F010         	movff	frexp@value+2,?_frexp+2
  5058  004A18  C011  F011         	movff	frexp@value+3,?_frexp+3
  5059  004A1C                     l1684:
  5060                           
  5061                           ; BSR set to: 0
  5062  004A1C  0012               	return	
  5063  004A1E                     __end_of_frexp:
  5064                           	opt stack 0
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           postinc0	equ	0xFEE
  5073                           wreg	equ	0xFE8
  5074                           indf1	equ	0xFE7
  5075                           postdec1	equ	0xFE5
  5076                           fsr1h	equ	0xFE2
  5077                           fsr1l	equ	0xFE1
  5078                           indf2	equ	0xFDF
  5079                           postinc2	equ	0xFDE
  5080                           postdec2	equ	0xFDD
  5081                           plusw2	equ	0xFDB
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function ___flge *****************
  5087 ;; Defined at:
  5088 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  ff1             4   13[COMRAM] PTR int 
  5091 ;;  ff2             4   17[COMRAM] PTR int 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;		None
  5094 ;; Return value:  Size  Location     Type
  5095 ;;		None               void
  5096 ;; Registers used:
  5097 ;;		wreg, status,2, status,0
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5103 ;;      Params:         8       0       0       0       0       0       0
  5104 ;;      Locals:         0       0       0       0       0       0       0
  5105 ;;      Temps:          0       0       0       0       0       0       0
  5106 ;;      Totals:         8       0       0       0       0       0       0
  5107 ;;Total ram usage:        8 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    2
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_exp
  5114 ;;		_floor
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           	psect	text15
  5119  004DBA                     __ptext15:
  5120                           	opt stack 0
  5121  004DBA                     ___flge:
  5122                           	opt stack 26
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;incstack = 0
  5126                           ;incstack = 0
  5127  004DBA  AE11               	btfss	___flge@ff1+3,7,c
  5128  004DBC  D009               	goto	l11764
  5129  004DBE  6C0E               	negf	___flge@ff1,c
  5130  004DC0  1E0F               	comf	___flge@ff1+1,f,c
  5131  004DC2  B0D8               	btfsc	status,0,c
  5132  004DC4  2A0F               	incf	___flge@ff1+1,f,c
  5133  004DC6  1E10               	comf	___flge@ff1+2,f,c
  5134  004DC8  B0D8               	btfsc	status,0,c
  5135  004DCA  2A10               	incf	___flge@ff1+2,f,c
  5136  004DCC  0E80               	movlw	128
  5137  004DCE  5611               	subfwb	___flge@ff1+3,f,c
  5138  004DD0                     l11764:
  5139  004DD0  AE15               	btfss	___flge@ff2+3,7,c
  5140  004DD2  D009               	goto	l1615
  5141  004DD4  6C12               	negf	___flge@ff2,c
  5142  004DD6  1E13               	comf	___flge@ff2+1,f,c
  5143  004DD8  B0D8               	btfsc	status,0,c
  5144  004DDA  2A13               	incf	___flge@ff2+1,f,c
  5145  004DDC  1E14               	comf	___flge@ff2+2,f,c
  5146  004DDE  B0D8               	btfsc	status,0,c
  5147  004DE0  2A14               	incf	___flge@ff2+2,f,c
  5148  004DE2  0E80               	movlw	128
  5149  004DE4  5615               	subfwb	___flge@ff2+3,f,c
  5150  004DE6                     l1615:
  5151  004DE6  0E80               	movlw	128
  5152  004DE8  1A11               	xorwf	___flge@ff1+3,f,c
  5153  004DEA  1A15               	xorwf	___flge@ff2+3,f,c
  5154  004DEC  5012               	movf	___flge@ff2,w,c
  5155  004DEE  5C0E               	subwf	___flge@ff1,w,c
  5156  004DF0  5013               	movf	___flge@ff2+1,w,c
  5157  004DF2  580F               	subwfb	___flge@ff1+1,w,c
  5158  004DF4  5014               	movf	___flge@ff2+2,w,c
  5159  004DF6  5810               	subwfb	___flge@ff1+2,w,c
  5160  004DF8  5015               	movf	___flge@ff2+3,w,c
  5161  004DFA  5811               	subwfb	___flge@ff1+3,w,c
  5162  004DFC  E202               	bc	l11770
  5163  004DFE  90D8               	bcf	status,0,c
  5164  004E00  D001               	goto	l1616
  5165  004E02                     l11770:
  5166  004E02  80D8               	bsf	status,0,c
  5167  004E04                     l1616:
  5168  004E04  0012               	return	
  5169  004E06                     __end_of___flge:
  5170                           	opt stack 0
  5171                           tblptru	equ	0xFF8
  5172                           tblptrh	equ	0xFF7
  5173                           tblptrl	equ	0xFF6
  5174                           tablat	equ	0xFF5
  5175                           prodh	equ	0xFF4
  5176                           prodl	equ	0xFF3
  5177                           intcon	equ	0xFF2
  5178                           postinc0	equ	0xFEE
  5179                           wreg	equ	0xFE8
  5180                           indf1	equ	0xFE7
  5181                           postdec1	equ	0xFE5
  5182                           fsr1h	equ	0xFE2
  5183                           fsr1l	equ	0xFE1
  5184                           indf2	equ	0xFDF
  5185                           postinc2	equ	0xFDE
  5186                           postdec2	equ	0xFDD
  5187                           plusw2	equ	0xFDB
  5188                           fsr2h	equ	0xFDA
  5189                           fsr2l	equ	0xFD9
  5190                           status	equ	0xFD8
  5191                           
  5192 ;; *************** function ___altofl *****************
  5193 ;; Defined at:
  5194 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  c               4    6[BANK0 ] long 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  sign            1   10[BANK0 ] unsigned char 
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  4    6[BANK0 ] unsigned char 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5208 ;;      Params:         0       4       0       0       0       0       0
  5209 ;;      Locals:         0       1       0       0       0       0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0
  5211 ;;      Totals:         0       5       0       0       0       0       0
  5212 ;;Total ram usage:        5 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    3
  5215 ;; This function calls:
  5216 ;;		___flpack
  5217 ;; This function is called by:
  5218 ;;		_doWork
  5219 ;;		_floor
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           	psect	text16
  5224  004E52                     __ptext16:
  5225                           	opt stack 0
  5226  004E52                     ___altofl:
  5227                           	opt stack 26
  5228                           
  5229                           ;incstack = 0
  5230                           ;incstack = 0
  5231  004E52  0100               	movlb	0	; () banked
  5232  004E54  6B6A               	clrf	___altofl@sign& (0+255),b
  5233  004E56  AF69               	btfss	(___altofl@c+3)& (0+255),7,b
  5234  004E58  D00A               	goto	l14180
  5235                           
  5236                           ; BSR set to: 0
  5237  004E5A  1F69               	comf	(___altofl@c+3)& (0+255),f,b
  5238  004E5C  1F68               	comf	(___altofl@c+2)& (0+255),f,b
  5239  004E5E  1F67               	comf	(___altofl@c+1)& (0+255),f,b
  5240  004E60  6D66               	negf	___altofl@c& (0+255),b
  5241  004E62  0E00               	movlw	0
  5242  004E64  2367               	addwfc	(___altofl@c+1)& (0+255),f,b
  5243  004E66  2368               	addwfc	(___altofl@c+2)& (0+255),f,b
  5244  004E68  2369               	addwfc	(___altofl@c+3)& (0+255),f,b
  5245                           
  5246                           ; BSR set to: 0
  5247  004E6A  0E01               	movlw	1
  5248  004E6C  6F6A               	movwf	___altofl@sign& (0+255),b
  5249  004E6E                     l14180:
  5250                           
  5251                           ; BSR set to: 0
  5252  004E6E  C066  F00E         	movff	___altofl@c,?___flpack
  5253  004E72  C067  F00F         	movff	___altofl@c+1,?___flpack+1
  5254  004E76  C068  F010         	movff	___altofl@c+2,?___flpack+2
  5255  004E7A  C069  F011         	movff	___altofl@c+3,?___flpack+3
  5256  004E7E  0E96               	movlw	150
  5257  004E80  6E12               	movwf	?___flpack+4,c
  5258  004E82  C06A  F013         	movff	___altofl@sign,?___flpack+5
  5259  004E86  ECD0  F021         	call	___flpack	;wreg free
  5260  004E8A  C011  F069         	movff	?___flpack+3,?___altofl+3
  5261  004E8E  C010  F068         	movff	?___flpack+2,?___altofl+2
  5262  004E92  C00F  F067         	movff	?___flpack+1,?___altofl+1
  5263  004E96  C00E  F066         	movff	?___flpack,?___altofl
  5264  004E9A  0012               	return	
  5265  004E9C                     __end_of___altofl:
  5266                           	opt stack 0
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           postinc0	equ	0xFEE
  5275                           wreg	equ	0xFE8
  5276                           indf1	equ	0xFE7
  5277                           postdec1	equ	0xFE5
  5278                           fsr1h	equ	0xFE2
  5279                           fsr1l	equ	0xFE1
  5280                           indf2	equ	0xFDF
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           plusw2	equ	0xFDB
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288 ;; *************** function ___asflsub *****************
  5289 ;; Defined at:
  5290 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  f1p             2   58[COMRAM] PTR 
  5293 ;;		 -> exp@x(4), doWork@temp(4), 
  5294 ;;  f2              4   60[COMRAM] PTR 
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;		None
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  4   58[COMRAM] PTR 
  5299 ;; Registers used:
  5300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/1
  5303 ;;		On exit  : F/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5306 ;;      Params:         6       0       0       0       0       0       0
  5307 ;;      Locals:         0       0       0       0       0       0       0
  5308 ;;      Temps:          0       0       0       0       0       0       0
  5309 ;;      Totals:         6       0       0       0       0       0       0
  5310 ;;Total ram usage:        6 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    5
  5313 ;; This function calls:
  5314 ;;		___flsub
  5315 ;; This function is called by:
  5316 ;;		_doWork
  5317 ;;		_exp
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           	psect	text17
  5322  004D20                     __ptext17:
  5323                           	opt stack 0
  5324  004D20                     ___asflsub:
  5325                           	opt stack 24
  5326                           
  5327                           ;	Return value of ___asflsub is never used
  5328                           
  5329                           ;incstack = 0
  5330                           ;incstack = 0
  5331  004D20  C03B  FFD9         	movff	___asflsub@f1p,fsr2l
  5332  004D24  C03C  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5333  004D28  0100               	movlb	0	; () banked
  5334  004D2A  CFDE F068          	movff	postinc2,?___flsub
  5335  004D2E  CFDE F069          	movff	postinc2,?___flsub+1
  5336  004D32  CFDE F06A          	movff	postinc2,?___flsub+2
  5337  004D36  CFDE F06B          	movff	postinc2,?___flsub+3
  5338  004D3A  C03D  F06C         	movff	___asflsub@f2,?___flsub+4
  5339  004D3E  C03E  F06D         	movff	___asflsub@f2+1,?___flsub+5
  5340  004D42  C03F  F06E         	movff	___asflsub@f2+2,?___flsub+6
  5341  004D46  C040  F06F         	movff	___asflsub@f2+3,?___flsub+7
  5342  004D4A  EC1A  F028         	call	___flsub	;wreg free
  5343  004D4E  C03B  FFD9         	movff	___asflsub@f1p,fsr2l
  5344  004D52  C03C  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5345  004D56  0100               	movlb	0	; () banked
  5346  004D58  C068  FFDE         	movff	?___flsub,postinc2
  5347  004D5C  C069  FFDE         	movff	?___flsub+1,postinc2
  5348  004D60  C06A  FFDE         	movff	?___flsub+2,postinc2
  5349  004D64  C06B  FFDD         	movff	?___flsub+3,postdec2
  5350  004D68  06D9               	decf	fsr2l,f,c
  5351  004D6A  06D9               	decf	fsr2l,f,c
  5352                           
  5353                           ; BSR set to: 0
  5354  004D6C  0012               	return	
  5355  004D6E                     __end_of___asflsub:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           intcon	equ	0xFF2
  5364                           postinc0	equ	0xFEE
  5365                           wreg	equ	0xFE8
  5366                           indf1	equ	0xFE7
  5367                           postdec1	equ	0xFE5
  5368                           fsr1h	equ	0xFE2
  5369                           fsr1l	equ	0xFE1
  5370                           indf2	equ	0xFDF
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           plusw2	equ	0xFDB
  5374                           fsr2h	equ	0xFDA
  5375                           fsr2l	equ	0xFD9
  5376                           status	equ	0xFD8
  5377                           
  5378 ;; *************** function ___flsub *****************
  5379 ;; Defined at:
  5380 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  f1              4    8[BANK0 ] PTR 
  5383 ;;  f2              4   12[BANK0 ] PTR 
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;		None
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  4    8[BANK0 ] PTR 
  5388 ;; Registers used:
  5389 ;;		wreg, status,2, status,0, cstack
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/1
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5395 ;;      Params:         0       8       0       0       0       0       0
  5396 ;;      Locals:         0       0       0       0       0       0       0
  5397 ;;      Temps:          0       0       0       0       0       0       0
  5398 ;;      Totals:         0       8       0       0       0       0       0
  5399 ;;Total ram usage:        8 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:    4
  5402 ;; This function calls:
  5403 ;;		___fladd
  5404 ;; This function is called by:
  5405 ;;		_doWork
  5406 ;;		___asflsub
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           	psect	text18
  5411  005034                     __ptext18:
  5412                           	opt stack 0
  5413  005034                     ___flsub:
  5414                           	opt stack 25
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;incstack = 0
  5418                           ;incstack = 0
  5419  005034  0100               	movlb	0	; () banked
  5420  005036  0E80               	movlw	128
  5421  005038  1B6F               	xorwf	(___flsub@f2+3)& (0+255),f,b
  5422                           
  5423                           ; BSR set to: 0
  5424  00503A  C068  F060         	movff	___flsub@f1,?___fladd
  5425  00503E  C069  F061         	movff	___flsub@f1+1,?___fladd+1
  5426  005042  C06A  F062         	movff	___flsub@f1+2,?___fladd+2
  5427  005046  C06B  F063         	movff	___flsub@f1+3,?___fladd+3
  5428  00504A  C06C  F064         	movff	___flsub@f2,?___fladd+4
  5429  00504E  C06D  F065         	movff	___flsub@f2+1,?___fladd+5
  5430  005052  C06E  F066         	movff	___flsub@f2+2,?___fladd+6
  5431  005056  C06F  F067         	movff	___flsub@f2+3,?___fladd+7
  5432  00505A  EC21  F01C         	call	___fladd	;wreg free
  5433  00505E  C063  F06B         	movff	?___fladd+3,?___flsub+3
  5434  005062  C062  F06A         	movff	?___fladd+2,?___flsub+2
  5435  005066  C061  F069         	movff	?___fladd+1,?___flsub+1
  5436  00506A  C060  F068         	movff	?___fladd,?___flsub
  5437  00506E  0012               	return	
  5438  005070                     __end_of___flsub:
  5439                           	opt stack 0
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           prodh	equ	0xFF4
  5445                           prodl	equ	0xFF3
  5446                           intcon	equ	0xFF2
  5447                           postinc0	equ	0xFEE
  5448                           wreg	equ	0xFE8
  5449                           indf1	equ	0xFE7
  5450                           postdec1	equ	0xFE5
  5451                           fsr1h	equ	0xFE2
  5452                           fsr1l	equ	0xFE1
  5453                           indf2	equ	0xFDF
  5454                           postinc2	equ	0xFDE
  5455                           postdec2	equ	0xFDD
  5456                           plusw2	equ	0xFDB
  5457                           fsr2h	equ	0xFDA
  5458                           fsr2l	equ	0xFD9
  5459                           status	equ	0xFD8
  5460                           
  5461 ;; *************** function ___asflmul *****************
  5462 ;; Defined at:
  5463 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  mp              1    wreg     PTR 
  5466 ;;		 -> exp@x(4), 
  5467 ;;  multiplicand    4   51[COMRAM] PTR 
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;  mp              1   55[COMRAM] PTR 
  5470 ;;		 -> exp@x(4), 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  4   51[COMRAM] PTR 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : F/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5480 ;;      Params:         4       0       0       0       0       0       0
  5481 ;;      Locals:         1       0       0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0
  5483 ;;      Totals:         5       0       0       0       0       0       0
  5484 ;;Total ram usage:        5 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    4
  5487 ;; This function calls:
  5488 ;;		___flmul
  5489 ;; This function is called by:
  5490 ;;		_exp
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text19
  5495  004E9C                     __ptext19:
  5496                           	opt stack 0
  5497  004E9C                     ___asflmul:
  5498                           	opt stack 24
  5499                           
  5500                           ;incstack = 0
  5501                           ;incstack = 0
  5502                           ;___asflmul@mp stored from wreg
  5503  004E9C  CFE8 F038          	movff	wreg,___asflmul@mp
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;	Return value of ___asflmul is never used
  5507  004EA0  5038               	movf	___asflmul@mp,w,c
  5508  004EA2  6ED9               	movwf	fsr2l,c
  5509  004EA4  6ADA               	clrf	fsr2h,c
  5510  004EA6  CFDE F01E          	movff	postinc2,?___flmul
  5511  004EAA  CFDE F01F          	movff	postinc2,?___flmul+1
  5512  004EAE  CFDE F020          	movff	postinc2,?___flmul+2
  5513  004EB2  CFDE F021          	movff	postinc2,?___flmul+3
  5514  004EB6  C034  F022         	movff	___asflmul@multiplicand,?___flmul+4
  5515  004EBA  C035  F023         	movff	___asflmul@multiplicand+1,?___flmul+5
  5516  004EBE  C036  F024         	movff	___asflmul@multiplicand+2,?___flmul+6
  5517  004EC2  C037  F025         	movff	___asflmul@multiplicand+3,?___flmul+7
  5518  004EC6  ECB3  F020         	call	___flmul	;wreg free
  5519  004ECA  5038               	movf	___asflmul@mp,w,c
  5520  004ECC  6ED9               	movwf	fsr2l,c
  5521  004ECE  6ADA               	clrf	fsr2h,c
  5522  004ED0  C01E  FFDE         	movff	?___flmul,postinc2
  5523  004ED4  C01F  FFDE         	movff	?___flmul+1,postinc2
  5524  004ED8  C020  FFDE         	movff	?___flmul+2,postinc2
  5525  004EDC  C021  FFDD         	movff	?___flmul+3,postdec2
  5526  004EE0  06D9               	decf	fsr2l,f,c
  5527  004EE2  06D9               	decf	fsr2l,f,c
  5528  004EE4  0012               	return	
  5529  004EE6                     __end_of___asflmul:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           intcon	equ	0xFF2
  5538                           postinc0	equ	0xFEE
  5539                           wreg	equ	0xFE8
  5540                           indf1	equ	0xFE7
  5541                           postdec1	equ	0xFE5
  5542                           fsr1h	equ	0xFE2
  5543                           fsr1l	equ	0xFE1
  5544                           indf2	equ	0xFDF
  5545                           postinc2	equ	0xFDE
  5546                           postdec2	equ	0xFDD
  5547                           plusw2	equ	0xFDB
  5548                           fsr2h	equ	0xFDA
  5549                           fsr2l	equ	0xFD9
  5550                           status	equ	0xFD8
  5551                           
  5552 ;; *************** function ___fldiv *****************
  5553 ;; Defined at:
  5554 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  5555 ;; Parameters:    Size  Location     Type
  5556 ;;  f1              4   16[BANK0 ] PTR 
  5557 ;;  f2              4   20[BANK0 ] PTR 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;  f3              4   32[BANK0 ] PTR 
  5560 ;;  sign            1   37[BANK0 ] unsigned char 
  5561 ;;  exp             1   36[BANK0 ] unsigned char 
  5562 ;;  cntr            1   31[BANK0 ] unsigned char 
  5563 ;; Return value:  Size  Location     Type
  5564 ;;                  4   16[BANK0 ] unsigned char 
  5565 ;; Registers used:
  5566 ;;		wreg, status,2, status,0, cstack
  5567 ;; Tracked objects:
  5568 ;;		On entry : 0/0
  5569 ;;		On exit  : 0/0
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5572 ;;      Params:         0       8       0       0       0       0       0
  5573 ;;      Locals:         0      14       0       0       0       0       0
  5574 ;;      Temps:          0       0       0       0       0       0       0
  5575 ;;      Totals:         0      22       0       0       0       0       0
  5576 ;;Total ram usage:       22 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; Hardware stack levels required when called:    3
  5579 ;; This function calls:
  5580 ;;		___flpack
  5581 ;; This function is called by:
  5582 ;;		_doWork
  5583 ;;		_Celsius2Fahrenheit
  5584 ;;		___asfldiv
  5585 ;;		_exp
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text20
  5590  004672                     __ptext20:
  5591                           	opt stack 0
  5592  004672                     ___fldiv:
  5593                           	opt stack 26
  5594                           
  5595                           ;incstack = 0
  5596                           ;incstack = 0
  5597  004672  0100               	movlb	0	; () banked
  5598  004674  3572               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  5599  004676  3573               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  5600  004678  6F84               	movwf	___fldiv@exp& (0+255),b
  5601  00467A  6784               	tstfsz	___fldiv@exp& (0+255),b
  5602  00467C  D001               	goto	l14264
  5603  00467E  D006               	goto	u13710
  5604  004680                     l14264:
  5605                           
  5606                           ; BSR set to: 0
  5607  004680  0100               	movlb	0	; () banked
  5608  004682  3576               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  5609  004684  3577               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  5610  004686  6F85               	movwf	___fldiv@sign& (0+255),b
  5611  004688  6785               	tstfsz	___fldiv@sign& (0+255),b
  5612  00468A  D005               	goto	l14268
  5613  00468C                     u13710:
  5614                           
  5615                           ; BSR set to: 0
  5616  00468C  6B70               	clrf	?___fldiv& (0+255),b
  5617  00468E  6B71               	clrf	(?___fldiv+1)& (0+255),b
  5618  004690  6B72               	clrf	(?___fldiv+2)& (0+255),b
  5619  004692  6B73               	clrf	(?___fldiv+3)& (0+255),b
  5620  004694  D044               	goto	l1607
  5621  004696                     l14268:
  5622                           
  5623                           ; BSR set to: 0
  5624  004696  5185               	movf	___fldiv@sign& (0+255),w,b
  5625  004698  0F89               	addlw	137
  5626  00469A  5F84               	subwf	___fldiv@exp& (0+255),f,b
  5627                           
  5628                           ; BSR set to: 0
  5629  00469C  C073  F085         	movff	___fldiv@f1+3,___fldiv@sign
  5630  0046A0  0100               	movlb	0	; () banked
  5631  0046A2  5177               	movf	(___fldiv@f2+3)& (0+255),w,b
  5632  0046A4  1B85               	xorwf	___fldiv@sign& (0+255),f,b
  5633  0046A6  0E80               	movlw	128
  5634  0046A8  1785               	andwf	___fldiv@sign& (0+255),f,b
  5635                           
  5636                           ; BSR set to: 0
  5637  0046AA  8F72               	bsf	(___fldiv@f1+2)& (0+255),7,b
  5638                           
  5639                           ; BSR set to: 0
  5640  0046AC  6B73               	clrf	(___fldiv@f1+3)& (0+255),b
  5641  0046AE  8F76               	bsf	(___fldiv@f2+2)& (0+255),7,b
  5642                           
  5643                           ; BSR set to: 0
  5644  0046B0  6B77               	clrf	(___fldiv@f2+3)& (0+255),b
  5645                           
  5646                           ; BSR set to: 0
  5647  0046B2  0E20               	movlw	32
  5648  0046B4  6F7F               	movwf	___fldiv@cntr& (0+255),b
  5649  0046B6                     l14280:
  5650                           
  5651                           ; BSR set to: 0
  5652  0046B6  90D8               	bcf	status,0,c
  5653  0046B8  3780               	rlcf	___fldiv@f3& (0+255),f,b
  5654  0046BA  3781               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  5655  0046BC  3782               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  5656  0046BE  3783               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  5657                           
  5658                           ; BSR set to: 0
  5659  0046C0  5174               	movf	___fldiv@f2& (0+255),w,b
  5660  0046C2  5D70               	subwf	___fldiv@f1& (0+255),w,b
  5661  0046C4  5175               	movf	(___fldiv@f2+1)& (0+255),w,b
  5662  0046C6  5971               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  5663  0046C8  5176               	movf	(___fldiv@f2+2)& (0+255),w,b
  5664  0046CA  5972               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  5665  0046CC  5177               	movf	(___fldiv@f2+3)& (0+255),w,b
  5666  0046CE  5973               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  5667  0046D0  E309               	bnc	l14288
  5668                           
  5669                           ; BSR set to: 0
  5670  0046D2  5174               	movf	___fldiv@f2& (0+255),w,b
  5671  0046D4  5F70               	subwf	___fldiv@f1& (0+255),f,b
  5672  0046D6  5175               	movf	(___fldiv@f2+1)& (0+255),w,b
  5673  0046D8  5B71               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  5674  0046DA  5176               	movf	(___fldiv@f2+2)& (0+255),w,b
  5675  0046DC  5B72               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  5676  0046DE  5177               	movf	(___fldiv@f2+3)& (0+255),w,b
  5677  0046E0  5B73               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  5678                           
  5679                           ; BSR set to: 0
  5680  0046E2  8180               	bsf	___fldiv@f3& (0+255),0,b
  5681  0046E4                     l14288:
  5682                           
  5683                           ; BSR set to: 0
  5684  0046E4  90D8               	bcf	status,0,c
  5685  0046E6  3770               	rlcf	___fldiv@f1& (0+255),f,b
  5686  0046E8  3771               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  5687  0046EA  3772               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  5688  0046EC  3773               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  5689                           
  5690                           ; BSR set to: 0
  5691  0046EE  2F7F               	decfsz	___fldiv@cntr& (0+255),f,b
  5692  0046F0  D7E2               	goto	l14280
  5693                           
  5694                           ; BSR set to: 0
  5695  0046F2  C080  F00E         	movff	___fldiv@f3,?___flpack
  5696  0046F6  C081  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5697  0046FA  C082  F010         	movff	___fldiv@f3+2,?___flpack+2
  5698  0046FE  C083  F011         	movff	___fldiv@f3+3,?___flpack+3
  5699  004702  C084  F012         	movff	___fldiv@exp,?___flpack+4
  5700  004706  C085  F013         	movff	___fldiv@sign,?___flpack+5
  5701  00470A  ECD0  F021         	call	___flpack	;wreg free
  5702  00470E  C011  F073         	movff	?___flpack+3,?___fldiv+3
  5703  004712  C010  F072         	movff	?___flpack+2,?___fldiv+2
  5704  004716  C00F  F071         	movff	?___flpack+1,?___fldiv+1
  5705  00471A  C00E  F070         	movff	?___flpack,?___fldiv
  5706  00471E                     l1607:
  5707  00471E  0012               	return	
  5708  004720                     __end_of___fldiv:
  5709                           	opt stack 0
  5710                           tblptru	equ	0xFF8
  5711                           tblptrh	equ	0xFF7
  5712                           tblptrl	equ	0xFF6
  5713                           tablat	equ	0xFF5
  5714                           prodh	equ	0xFF4
  5715                           prodl	equ	0xFF3
  5716                           intcon	equ	0xFF2
  5717                           postinc0	equ	0xFEE
  5718                           wreg	equ	0xFE8
  5719                           indf1	equ	0xFE7
  5720                           postdec1	equ	0xFE5
  5721                           fsr1h	equ	0xFE2
  5722                           fsr1l	equ	0xFE1
  5723                           indf2	equ	0xFDF
  5724                           postinc2	equ	0xFDE
  5725                           postdec2	equ	0xFDD
  5726                           plusw2	equ	0xFDB
  5727                           fsr2h	equ	0xFDA
  5728                           fsr2l	equ	0xFD9
  5729                           status	equ	0xFD8
  5730                           
  5731 ;; *************** function _vscp_doOneSecondWork *****************
  5732 ;; Defined at:
  5733 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;		None
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;		None
  5738 ;; Return value:  Size  Location     Type
  5739 ;;		None               void
  5740 ;; Registers used:
  5741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5742 ;; Tracked objects:
  5743 ;;		On entry : F/0
  5744 ;;		On exit  : F/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5747 ;;      Params:         0       0       0       0       0       0       0
  5748 ;;      Locals:         0       0       0       0       0       0       0
  5749 ;;      Temps:          0       1       0       0       0       0       0
  5750 ;;      Totals:         0       1       0       0       0       0       0
  5751 ;;Total ram usage:        1 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; Hardware stack levels required when called:    8
  5754 ;; This function calls:
  5755 ;;		_vscp_getZone
  5756 ;;		_vscp_getSubzone
  5757 ;;		_vscp_sendHeartBeat
  5758 ;; This function is called by:
  5759 ;;		_main
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           	psect	text21
  5764  004E06                     __ptext21:
  5765                           	opt stack 0
  5766  004E06                     _vscp_doOneSecondWork:
  5767                           	opt stack 22
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;vscp_firmware.c: 526: ++vscp_second;
  5771                           
  5772                           ;incstack = 0
  5773                           ;incstack = 0
  5774  004E06  2A51               	incf	_vscp_second,f,c
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  5778  004E08  0E3B               	movlw	59
  5779  004E0A  6451               	cpfsgt	_vscp_second,c
  5780  004E0C  D00C               	goto	l10232
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;vscp_firmware.c: 529: vscp_second = 0;
  5784  004E0E  6A51               	clrf	_vscp_second,c
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;vscp_firmware.c: 530: vscp_minute++;
  5788  004E10  2A4D               	incf	_vscp_minute,f,c
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  5792  004E12  51C0               	movf	_vscp_node_state& (0+255),w,b
  5793  004E14  0A03               	xorlw	3
  5794  004E16  E107               	bnz	l10232
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  5798                           ;vscp_firmware.c: 535: vscp_getSubzone());
  5799  004E18  EC99  F02A         	call	_vscp_getSubzone	;wreg free
  5800  004E1C  6E44               	movwf	?_vscp_sendHeartBeat,c
  5801  004E1E  EC9E  F02A         	call	_vscp_getZone	;wreg free
  5802  004E22  EC52  F029         	call	_vscp_sendHeartBeat
  5803  004E26                     l10232:
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;vscp_firmware.c: 536: }
  5807                           ;vscp_firmware.c: 537: }
  5808                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  5809  004E26  0E3B               	movlw	59
  5810  004E28  644D               	cpfsgt	_vscp_minute,c
  5811  004E2A  D002               	goto	l10238
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;vscp_firmware.c: 540: vscp_minute = 0;
  5815  004E2C  6A4D               	clrf	_vscp_minute,c
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;vscp_firmware.c: 541: vscp_hour++;
  5819  004E2E  2BBD               	incf	_vscp_hour& (0+255),f,b
  5820  004E30                     l10238:
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;vscp_firmware.c: 542: }
  5824                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  5825  004E30  0E17               	movlw	23
  5826  004E32  65BD               	cpfsgt	_vscp_hour& (0+255),b
  5827  004E34  D001               	goto	l10242
  5828                           
  5829                           ; BSR set to: 0
  5830  004E36  6BBD               	clrf	_vscp_hour& (0+255),b
  5831  004E38                     l10242:
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  5835  004E38  51C0               	movf	_vscp_node_state& (0+255),w,b
  5836  004E3A  0A03               	xorlw	3
  5837  004E3C  E109               	bnz	l1103
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  5841  004E3E  2A4B               	incf	_vscp_guid_reset,f,c
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  5845  004E40  C04B  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5846  004E44  0E0F               	movlw	15
  5847  004E46  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5848  004E48  0E02               	movlw	2
  5849  004E4A  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5850  004E4C  B0D8               	btfsc	status,0,c
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  5854  004E4E  6A4B               	clrf	_vscp_guid_reset,c
  5855  004E50                     l1103:
  5856                           
  5857                           ; BSR set to: 0
  5858  004E50  0012               	return	
  5859  004E52                     __end_of_vscp_doOneSecondWork:
  5860                           	opt stack 0
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon	equ	0xFF2
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           indf1	equ	0xFE7
  5871                           postdec1	equ	0xFE5
  5872                           fsr1h	equ	0xFE2
  5873                           fsr1l	equ	0xFE1
  5874                           indf2	equ	0xFDF
  5875                           postinc2	equ	0xFDE
  5876                           postdec2	equ	0xFDD
  5877                           plusw2	equ	0xFDB
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _vscp_sendHeartBeat *****************
  5883 ;; Defined at:
  5884 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  zone            1    wreg     unsigned char 
  5887 ;;  subzone         1   67[COMRAM] unsigned char 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  zone            1   68[COMRAM] unsigned char 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;		None               void
  5892 ;; Registers used:
  5893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : F/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5899 ;;      Params:         1       0       0       0       0       0       0
  5900 ;;      Locals:         1       0       0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0
  5902 ;;      Totals:         2       0       0       0       0       0       0
  5903 ;;Total ram usage:        2 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    7
  5906 ;; This function calls:
  5907 ;;		_vscp_sendEvent
  5908 ;; This function is called by:
  5909 ;;		_vscp_doOneSecondWork
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text22
  5914  0052A4                     __ptext22:
  5915                           	opt stack 0
  5916  0052A4                     _vscp_sendHeartBeat:
  5917                           	opt stack 22
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;incstack = 0
  5921                           ;incstack = 0
  5922                           ;vscp_sendHeartBeat@zone stored from wreg
  5923  0052A4  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5924                           
  5925                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  5926  0052A8  0E83               	movlw	131
  5927  0052AA  0100               	movlb	0	; () banked
  5928  0052AC  6FCF               	movwf	_vscp_omsg& (0+255),b
  5929                           
  5930                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  5931  0052AE  0E07               	movlw	7
  5932  0052B0  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  5933                           
  5934                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  5935  0052B2  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  5936  0052B4  0E14               	movlw	20
  5937  0052B6  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  5938                           
  5939                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  5940  0052B8  0E09               	movlw	9
  5941  0052BA  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  5945  0052BC  6BD4               	clrf	(_vscp_omsg+5)& (0+255),b
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  5949  0052BE  C045  F0D5         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  5953  0052C2  C044  F0D6         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;vscp_firmware.c: 388: vscp_sendEvent();
  5957  0052C6  EF3E  F029         	goto	_vscp_sendEvent	;wreg free
  5958  0052CA                     __end_of_vscp_sendHeartBeat:
  5959                           	opt stack 0
  5960                           tblptru	equ	0xFF8
  5961                           tblptrh	equ	0xFF7
  5962                           tblptrl	equ	0xFF6
  5963                           tablat	equ	0xFF5
  5964                           prodh	equ	0xFF4
  5965                           prodl	equ	0xFF3
  5966                           intcon	equ	0xFF2
  5967                           postinc0	equ	0xFEE
  5968                           wreg	equ	0xFE8
  5969                           indf1	equ	0xFE7
  5970                           postdec1	equ	0xFE5
  5971                           fsr1h	equ	0xFE2
  5972                           fsr1l	equ	0xFE1
  5973                           indf2	equ	0xFDF
  5974                           postinc2	equ	0xFDE
  5975                           postdec2	equ	0xFDD
  5976                           plusw2	equ	0xFDB
  5977                           fsr2h	equ	0xFDA
  5978                           fsr2l	equ	0xFD9
  5979                           status	equ	0xFD8
  5980                           
  5981 ;; *************** function _vscp_getSubzone *****************
  5982 ;; Defined at:
  5983 ;;		line 2735 in file "../main.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;		None
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;		None
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      unsigned char 
  5990 ;; Registers used:
  5991 ;;		wreg, status,2, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : F/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5997 ;;      Params:         0       0       0       0       0       0       0
  5998 ;;      Locals:         0       0       0       0       0       0       0
  5999 ;;      Temps:          0       0       0       0       0       0       0
  6000 ;;      Totals:         0       0       0       0       0       0       0
  6001 ;;Total ram usage:        0 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    3
  6004 ;; This function calls:
  6005 ;;		_readEEPROM
  6006 ;; This function is called by:
  6007 ;;		_vscp_doOneSecondWork
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           	psect	text23
  6012  005532                     __ptext23:
  6013                           	opt stack 0
  6014  005532                     _vscp_getSubzone:
  6015                           	opt stack 26
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;main.c: 2736: return readEEPROM(0x42);
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;incstack = 0
  6022                           ;incstack = 0
  6023  005532  6A0F               	clrf	?_readEEPROM+1,c
  6024  005534  0E42               	movlw	66
  6025  005536  6E0E               	movwf	?_readEEPROM,c
  6026  005538  EF62  F02A         	goto	_readEEPROM	;wreg free
  6027  00553C                     __end_of_vscp_getSubzone:
  6028                           	opt stack 0
  6029                           tblptru	equ	0xFF8
  6030                           tblptrh	equ	0xFF7
  6031                           tblptrl	equ	0xFF6
  6032                           tablat	equ	0xFF5
  6033                           prodh	equ	0xFF4
  6034                           prodl	equ	0xFF3
  6035                           intcon	equ	0xFF2
  6036                           postinc0	equ	0xFEE
  6037                           wreg	equ	0xFE8
  6038                           indf1	equ	0xFE7
  6039                           postdec1	equ	0xFE5
  6040                           fsr1h	equ	0xFE2
  6041                           fsr1l	equ	0xFE1
  6042                           indf2	equ	0xFDF
  6043                           postinc2	equ	0xFDE
  6044                           postdec2	equ	0xFDD
  6045                           plusw2	equ	0xFDB
  6046                           fsr2h	equ	0xFDA
  6047                           fsr2l	equ	0xFD9
  6048                           status	equ	0xFD8
  6049                           
  6050 ;; *************** function _vscp_getZone *****************
  6051 ;; Defined at:
  6052 ;;		line 2726 in file "../main.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;		None
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;		None
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      unsigned char 
  6059 ;; Registers used:
  6060 ;;		wreg, status,2, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6066 ;;      Params:         0       0       0       0       0       0       0
  6067 ;;      Locals:         0       0       0       0       0       0       0
  6068 ;;      Temps:          0       0       0       0       0       0       0
  6069 ;;      Totals:         0       0       0       0       0       0       0
  6070 ;;Total ram usage:        0 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; Hardware stack levels required when called:    3
  6073 ;; This function calls:
  6074 ;;		_readEEPROM
  6075 ;; This function is called by:
  6076 ;;		_vscp_doOneSecondWork
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text24
  6081  00553C                     __ptext24:
  6082                           	opt stack 0
  6083  00553C                     _vscp_getZone:
  6084                           	opt stack 26
  6085                           
  6086                           ;main.c: 2727: return readEEPROM(0x41);
  6087                           
  6088                           ;incstack = 0
  6089                           ;incstack = 0
  6090  00553C  6A0F               	clrf	?_readEEPROM+1,c
  6091  00553E  0E41               	movlw	65
  6092  005540  6E0E               	movwf	?_readEEPROM,c
  6093  005542  EF62  F02A         	goto	_readEEPROM	;wreg free
  6094  005546                     __end_of_vscp_getZone:
  6095                           	opt stack 0
  6096                           tblptru	equ	0xFF8
  6097                           tblptrh	equ	0xFF7
  6098                           tblptrl	equ	0xFF6
  6099                           tablat	equ	0xFF5
  6100                           prodh	equ	0xFF4
  6101                           prodl	equ	0xFF3
  6102                           intcon	equ	0xFF2
  6103                           postinc0	equ	0xFEE
  6104                           wreg	equ	0xFE8
  6105                           indf1	equ	0xFE7
  6106                           postdec1	equ	0xFE5
  6107                           fsr1h	equ	0xFE2
  6108                           fsr1l	equ	0xFE1
  6109                           indf2	equ	0xFDF
  6110                           postinc2	equ	0xFDE
  6111                           postdec2	equ	0xFDD
  6112                           plusw2	equ	0xFDB
  6113                           fsr2h	equ	0xFDA
  6114                           fsr2l	equ	0xFD9
  6115                           status	equ	0xFD8
  6116                           
  6117 ;; *************** function _doOneSecondWork *****************
  6118 ;; Defined at:
  6119 ;;		line 704 in file "../main.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;		None
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;  i               1   54[BANK0 ] unsigned char 
  6124 ;;  tmp             1   53[BANK0 ] unsigned char 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;		None               void
  6127 ;; Registers used:
  6128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : F/0
  6131 ;;		On exit  : F/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6134 ;;      Params:         0       0       0       0       0       0       0
  6135 ;;      Locals:         0       2       0       0       0       0       0
  6136 ;;      Temps:          0       2       0       0       0       0       0
  6137 ;;      Totals:         0       4       0       0       0       0       0
  6138 ;;Total ram usage:        4 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    8
  6141 ;; This function calls:
  6142 ;;		_readEEPROM
  6143 ;;		_vscp_sendEvent
  6144 ;;		_sendTempEvent
  6145 ;; This function is called by:
  6146 ;;		_main
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text25
  6151  0034E2                     __ptext25:
  6152                           	opt stack 0
  6153  0034E2                     _doOneSecondWork:
  6154                           	opt stack 22
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;main.c: 706: uint8_t tmp;
  6158                           ;main.c: 707: uint8_t i;
  6159                           ;main.c: 710: if ( 0x03 == vscp_node_state ) {
  6160                           
  6161                           ;incstack = 0
  6162                           ;incstack = 0
  6163  0034E2  51C0               	movf	_vscp_node_state& (0+255),w,b
  6164  0034E4  0A03               	xorlw	3
  6165  0034E6  E001 D0B8          	bnz	l245
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;main.c: 712: for (i = 0; i < 6; i++) {
  6169  0034EA  6B96               	clrf	doOneSecondWork@i& (0+255),b
  6170  0034EC                     l13824:
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;main.c: 715: tmp = readEEPROM(0x49 + i);
  6174  0034EC  0E49               	movlw	73
  6175  0034EE  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6176  0034F0  6E0E               	movwf	?_readEEPROM,c
  6177  0034F2  6A0F               	clrf	?_readEEPROM+1,c
  6178  0034F4  0E00               	movlw	0
  6179  0034F6  220F               	addwfc	?_readEEPROM+1,f,c
  6180  0034F8  EC62  F02A         	call	_readEEPROM	;wreg free
  6181  0034FC  0100               	movlb	0	; () banked
  6182  0034FE  6F95               	movwf	doOneSecondWork@tmp& (0+255),b
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;main.c: 716: if (tmp && (seconds_temp[i] > tmp)) {
  6186  003500  5195               	movf	doOneSecondWork@tmp& (0+255),w,b
  6187  003502  E016               	bz	l13834
  6188                           
  6189                           ; BSR set to: 0
  6190  003504  0E00               	movlw	low _seconds_temp
  6191  003506  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6192  003508  6ED9               	movwf	fsr2l,c
  6193  00350A  6ADA               	clrf	fsr2h,c
  6194  00350C  0E01               	movlw	high _seconds_temp
  6195  00350E  22DA               	addwfc	fsr2h,f,c
  6196  003510  50DF               	movf	indf2,w,c
  6197  003512  6195               	cpfslt	doOneSecondWork@tmp& (0+255),b
  6198  003514  D00D               	goto	l13834
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;main.c: 719: if ( sendTempEvent( i ) ) {
  6202  003516  5196               	movf	doOneSecondWork@i& (0+255),w,b
  6203  003518  EC4C  F025         	call	_sendTempEvent
  6204  00351C  0900               	iorlw	0
  6205  00351E  E008               	bz	l13834
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;main.c: 720: seconds_temp[i] = 0;
  6209  003520  0E00               	movlw	low _seconds_temp
  6210  003522  0100               	movlb	0	; () banked
  6211  003524  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6212  003526  6ED9               	movwf	fsr2l,c
  6213  003528  6ADA               	clrf	fsr2h,c
  6214  00352A  0E01               	movlw	high _seconds_temp
  6215  00352C  22DA               	addwfc	fsr2h,f,c
  6216  00352E  6ADF               	clrf	indf2,c
  6217  003530                     l13834:
  6218                           
  6219                           ;main.c: 721: }
  6220                           ;main.c: 723: }
  6221                           ;main.c: 726: if (0x80 & readEEPROM(0x43 + i)) {
  6222  003530  0E43               	movlw	67
  6223  003532  0100               	movlb	0	; () banked
  6224  003534  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6225  003536  6E0E               	movwf	?_readEEPROM,c
  6226  003538  6A0F               	clrf	?_readEEPROM+1,c
  6227  00353A  0E00               	movlw	0
  6228  00353C  220F               	addwfc	?_readEEPROM+1,f,c
  6229  00353E  EC62  F02A         	call	_readEEPROM	;wreg free
  6230  003542  0100               	movlb	0	; () banked
  6231  003544  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6232  003546  AF93               	btfss	??_doOneSecondWork& (0+255),7,b
  6233  003548  D084               	goto	l13888
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;main.c: 729: if (low_alarm & (1 << i)) {
  6237  00354A  C096  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  6238  00354E  0E01               	movlw	1
  6239  003550  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6240  003552  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  6241  003554  D002               	goto	u12914
  6242  003556                     u12915:
  6243  003556  90D8               	bcf	status,0,c
  6244  003558  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6245  00355A                     u12914:
  6246  00355A  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  6247  00355C  D7FC               	goto	u12915
  6248  00355E  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6249  003560  15BA               	andwf	_low_alarm& (0+255),w,b
  6250  003562  E035               	bz	l13862
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;main.c: 732: if (readEEPROM(i + 0x43) & (1<<3)) {
  6254  003564  D898               	call	PL30	;call to abstracted procedure
  6255  003566  EC62  F02A         	call	_readEEPROM	;wreg free
  6256  00356A  0100               	movlb	0	; () banked
  6257  00356C  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6258  00356E  A793               	btfss	??_doOneSecondWork& (0+255),3,b
  6259  003570  D02E               	goto	l13862
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;main.c: 735: vscp_omsg.priority = 0x00;
  6263  003572  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;main.c: 736: vscp_omsg.flags = 0x80 + 3;
  6267  003574  0E83               	movlw	131
  6268  003576  6FCF               	movwf	_vscp_omsg& (0+255),b
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;main.c: 738: if (readEEPROM(i + 0x43) & (1<<5)) {
  6272  003578  D88E               	call	PL30	;call to abstracted procedure
  6273  00357A  EC62  F02A         	call	_readEEPROM	;wreg free
  6274  00357E  0100               	movlb	0	; () banked
  6275  003580  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6276  003582  AB93               	btfss	??_doOneSecondWork& (0+255),5,b
  6277  003584  D016               	goto	l13852
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;main.c: 740: if (readEEPROM(i + 0x43) & (1<<6)) {
  6281  003586  0E43               	movlw	67
  6282  003588  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6283  00358A  6E0E               	movwf	?_readEEPROM,c
  6284  00358C  6A0F               	clrf	?_readEEPROM+1,c
  6285  00358E  0E00               	movlw	0
  6286  003590  220F               	addwfc	?_readEEPROM+1,f,c
  6287  003592  EC62  F02A         	call	_readEEPROM	;wreg free
  6288  003596  0100               	movlb	0	; () banked
  6289  003598  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6290  00359A  AD93               	btfss	??_doOneSecondWork& (0+255),6,b
  6291  00359C  D005               	goto	l13850
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;main.c: 741: vscp_omsg.vscp_class = 30;
  6295  00359E  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6296  0035A0  0E1E               	movlw	30
  6297  0035A2  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6298                           
  6299                           ;main.c: 742: vscp_omsg.vscp_type = 5;
  6300  0035A4  0E05               	movlw	5
  6301  0035A6  D009               	goto	L6
  6302  0035A8                     l13850:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;main.c: 744: else {
  6306                           ;main.c: 745: vscp_omsg.vscp_class = 30;
  6307  0035A8  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6308  0035AA  0E1E               	movlw	30
  6309  0035AC  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6310                           
  6311                           ;main.c: 746: vscp_omsg.vscp_type = 6;
  6312  0035AE  0E06               	movlw	6
  6313  0035B0  D004               	goto	L6
  6314  0035B2                     l13852:
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;main.c: 750: else {
  6318                           ;main.c: 752: vscp_omsg.vscp_class = 1;
  6319  0035B2  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6320  0035B4  0E01               	movlw	1
  6321  0035B6  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6322                           
  6323                           ;main.c: 753: vscp_omsg.vscp_type = 2;
  6324  0035B8  0E02               	movlw	2
  6325  0035BA                     L6:
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;main.c: 754: }
  6329                           ;main.c: 756: vscp_omsg.data[ 0 ] = i;
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;main.c: 757: vscp_omsg.data[ 1 ] =
  6333                           ;main.c: 758: readEEPROM(2 * i + 0x73);
  6334  0035BA  D850               	call	PL22	;call to abstracted procedure
  6335  0035BC  EC62  F02A         	call	_readEEPROM	;wreg free
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;main.c: 759: vscp_omsg.data[ 2 ] =
  6339                           ;main.c: 760: readEEPROM(2 * i + 0x74);
  6340  0035C0  D85C               	call	PL28	;call to abstracted procedure
  6341  0035C2  EC62  F02A         	call	_readEEPROM	;wreg free
  6342  0035C6  0100               	movlb	0	; () banked
  6343  0035C8  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;main.c: 765: vscp_sendEvent();
  6347  0035CA  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  6348  0035CE                     l13862:
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;main.c: 767: }
  6352                           ;main.c: 768: }
  6353                           ;main.c: 771: if (high_alarm & (1 << i)) {
  6354  0035CE  C096  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  6355  0035D2  0E01               	movlw	1
  6356  0035D4  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6357  0035D6  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  6358  0035D8  D002               	goto	u12964
  6359  0035DA                     u12965:
  6360  0035DA  90D8               	bcf	status,0,c
  6361  0035DC  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6362  0035DE                     u12964:
  6363  0035DE  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  6364  0035E0  D7FC               	goto	u12965
  6365  0035E2  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6366  0035E4  15B9               	andwf	_high_alarm& (0+255),w,b
  6367  0035E6  E035               	bz	l13888
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;main.c: 774: if ((readEEPROM(i + 0x43) & (1<<4))) {
  6371  0035E8  D856               	call	PL30	;call to abstracted procedure
  6372  0035EA  EC62  F02A         	call	_readEEPROM	;wreg free
  6373  0035EE  0100               	movlb	0	; () banked
  6374  0035F0  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6375  0035F2  A993               	btfss	??_doOneSecondWork& (0+255),4,b
  6376  0035F4  D02E               	goto	l13888
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;main.c: 776: vscp_omsg.priority = 0x00;
  6380  0035F6  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;main.c: 777: vscp_omsg.flags = 0x80 + 3;
  6384  0035F8  0E83               	movlw	131
  6385  0035FA  6FCF               	movwf	_vscp_omsg& (0+255),b
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;main.c: 779: if (readEEPROM(i + 0x43) & (1<<5)) {
  6389  0035FC  D84C               	call	PL30	;call to abstracted procedure
  6390  0035FE  EC62  F02A         	call	_readEEPROM	;wreg free
  6391  003602  0100               	movlb	0	; () banked
  6392  003604  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6393  003606  AB93               	btfss	??_doOneSecondWork& (0+255),5,b
  6394  003608  D016               	goto	l13878
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;main.c: 780: if (readEEPROM(i + 0x43) & (1<<6)) {
  6398  00360A  0E43               	movlw	67
  6399  00360C  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6400  00360E  6E0E               	movwf	?_readEEPROM,c
  6401  003610  6A0F               	clrf	?_readEEPROM+1,c
  6402  003612  0E00               	movlw	0
  6403  003614  220F               	addwfc	?_readEEPROM+1,f,c
  6404  003616  EC62  F02A         	call	_readEEPROM	;wreg free
  6405  00361A  0100               	movlb	0	; () banked
  6406  00361C  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6407  00361E  AD93               	btfss	??_doOneSecondWork& (0+255),6,b
  6408  003620  D005               	goto	l13876
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;main.c: 781: vscp_omsg.vscp_class = 30;
  6412  003622  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6413  003624  0E1E               	movlw	30
  6414  003626  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6415                           
  6416                           ;main.c: 782: vscp_omsg.vscp_type = 6;
  6417  003628  0E06               	movlw	6
  6418  00362A  D009               	goto	L7
  6419  00362C                     l13876:
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;main.c: 784: else {
  6423                           ;main.c: 785: vscp_omsg.vscp_class = 30;
  6424  00362C  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6425  00362E  0E1E               	movlw	30
  6426  003630  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6427                           
  6428                           ;main.c: 786: vscp_omsg.vscp_type = 5;
  6429  003632  0E05               	movlw	5
  6430  003634  D004               	goto	L7
  6431  003636                     l13878:
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;main.c: 789: else {
  6435                           ;main.c: 791: vscp_omsg.vscp_class = 1;
  6436  003636  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6437  003638  0E01               	movlw	1
  6438  00363A  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6439                           
  6440                           ;main.c: 792: vscp_omsg.vscp_type = 2;
  6441  00363C  0E02               	movlw	2
  6442  00363E                     L7:
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;main.c: 793: }
  6446                           ;main.c: 795: vscp_omsg.data[ 0 ] = i;
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;main.c: 796: vscp_omsg.data[ 1 ] = readEEPROM(2 * i +
  6450                           ;main.c: 797: 0x73);
  6451  00363E  D80E               	call	PL22	;call to abstracted procedure
  6452  003640  EC62  F02A         	call	_readEEPROM	;wreg free
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;main.c: 798: vscp_omsg.data[ 2 ] = readEEPROM(2 * i +
  6456                           ;main.c: 799: 0x74);
  6457  003644  D81A               	call	PL28	;call to abstracted procedure
  6458  003646  EC62  F02A         	call	_readEEPROM	;wreg free
  6459  00364A  0100               	movlb	0	; () banked
  6460  00364C  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;main.c: 804: vscp_sendEvent();
  6464  00364E  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  6465  003652                     l13888:
  6466                           
  6467                           ; BSR set to: 0
  6468  003652  2B96               	incf	doOneSecondWork@i& (0+255),f,b
  6469                           
  6470                           ; BSR set to: 0
  6471  003654  0E05               	movlw	5
  6472  003656  6596               	cpfsgt	doOneSecondWork@i& (0+255),b
  6473  003658  D749               	goto	l13824
  6474  00365A                     l245:
  6475                           
  6476                           ; BSR set to: 0
  6477  00365A  0012               	return	
  6478  00365C                     __end_of_doOneSecondWork:
  6479                           	opt stack 0
  6480  00365C                     PL22:
  6481                           	opt stack 22
  6482  00365C  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  6483  00365E  C096  F0D4         	movff	doOneSecondWork@i,_vscp_omsg+5
  6484  003662  90D8               	bcf	status,0,c
  6485  003664  3596               	rlcf	doOneSecondWork@i& (0+255),w,b
  6486  003666  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6487  003668  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6488  00366A  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6489  00366C  0E73               	movlw	115
  6490  00366E  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6491  003670  6E0E               	movwf	?_readEEPROM,c
  6492  003672  0E00               	movlw	0
  6493  003674  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6494  003676  6E0F               	movwf	?_readEEPROM+1,c
  6495  003678  0012               	return	
  6496  00367A                     __end_ofPL22:
  6497                           	opt stack 0
  6498  00367A                     PL28:
  6499                           	opt stack 22
  6500  00367A  0100               	movlb	0	; () banked
  6501  00367C  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  6502  00367E  90D8               	bcf	status,0,c
  6503  003680  3596               	rlcf	doOneSecondWork@i& (0+255),w,b
  6504  003682  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6505  003684  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6506  003686  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6507  003688  0E74               	movlw	116
  6508  00368A  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6509  00368C  6E0E               	movwf	?_readEEPROM,c
  6510  00368E  0E00               	movlw	0
  6511  003690  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6512  003692  6E0F               	movwf	?_readEEPROM+1,c
  6513  003694  0012               	return	
  6514  003696                     __end_ofPL28:
  6515                           	opt stack 0
  6516  003696                     PL30:
  6517                           	opt stack 22
  6518  003696  0E43               	movlw	67
  6519  003698  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6520  00369A  6E0E               	movwf	?_readEEPROM,c
  6521  00369C  6A0F               	clrf	?_readEEPROM+1,c
  6522  00369E  0E00               	movlw	0
  6523  0036A0  220F               	addwfc	?_readEEPROM+1,f,c
  6524  0036A2  0C00               	retlw	0
  6525  0036A4                     __end_ofPL30:
  6526                           	opt stack 0
  6527                           tblptru	equ	0xFF8
  6528                           tblptrh	equ	0xFF7
  6529                           tblptrl	equ	0xFF6
  6530                           tablat	equ	0xFF5
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           intcon	equ	0xFF2
  6534                           postinc0	equ	0xFEE
  6535                           wreg	equ	0xFE8
  6536                           indf1	equ	0xFE7
  6537                           postdec1	equ	0xFE5
  6538                           fsr1h	equ	0xFE2
  6539                           fsr1l	equ	0xFE1
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           plusw2	equ	0xFDB
  6544                           fsr2h	equ	0xFDA
  6545                           fsr2l	equ	0xFD9
  6546                           status	equ	0xFD8
  6547                           
  6548 ;; *************** function _vscp_error *****************
  6549 ;; Defined at:
  6550 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;		None
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;		None
  6555 ;; Return value:  Size  Location     Type
  6556 ;;		None               void
  6557 ;; Registers used:
  6558 ;;		None
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6564 ;;      Params:         0       0       0       0       0       0       0
  6565 ;;      Locals:         0       0       0       0       0       0       0
  6566 ;;      Temps:          0       0       0       0       0       0       0
  6567 ;;      Totals:         0       0       0       0       0       0       0
  6568 ;;Total ram usage:        0 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    2
  6571 ;; This function calls:
  6572 ;;		Nothing
  6573 ;; This function is called by:
  6574 ;;		_main
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           	psect	text26
  6579  005576                     __ptext26:
  6580                           	opt stack 0
  6581  005576                     _vscp_error:
  6582                           	opt stack 28
  6583                           
  6584                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;incstack = 0
  6588                           ;incstack = 0
  6589  005576  6A4C               	clrf	_vscp_initledfunc,c
  6590  005578  0012               	return	
  6591  00557A                     __end_of_vscp_error:
  6592                           	opt stack 0
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           prodh	equ	0xFF4
  6598                           prodl	equ	0xFF3
  6599                           intcon	equ	0xFF2
  6600                           postinc0	equ	0xFEE
  6601                           wreg	equ	0xFE8
  6602                           indf1	equ	0xFE7
  6603                           postdec1	equ	0xFE5
  6604                           fsr1h	equ	0xFE2
  6605                           fsr1l	equ	0xFE1
  6606                           indf2	equ	0xFDF
  6607                           postinc2	equ	0xFDE
  6608                           postdec2	equ	0xFDD
  6609                           plusw2	equ	0xFDB
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _handle_sync *****************
  6615 ;; Defined at:
  6616 ;;		line 1255 in file "../main.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;  i               1   53[BANK0 ] unsigned char 
  6621 ;; Return value:  Size  Location     Type
  6622 ;;		None               void
  6623 ;; Registers used:
  6624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : F/0
  6627 ;;		On exit  : F/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6630 ;;      Params:         0       0       0       0       0       0       0
  6631 ;;      Locals:         0       1       0       0       0       0       0
  6632 ;;      Temps:          0       2       0       0       0       0       0
  6633 ;;      Totals:         0       3       0       0       0       0       0
  6634 ;;Total ram usage:        3 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    8
  6637 ;; This function calls:
  6638 ;;		_readEEPROM
  6639 ;;		_sendTempEvent
  6640 ;; This function is called by:
  6641 ;;		_main
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           	psect	text27
  6646  004A1E                     __ptext27:
  6647                           	opt stack 0
  6648  004A1E                     _handle_sync:
  6649                           	opt stack 22
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;main.c: 1256: uint8_t i;
  6653                           ;main.c: 1258: for (i = 0; i < 6; i++) {
  6654                           
  6655                           ;incstack = 0
  6656                           ;incstack = 0
  6657  004A1E  6B95               	clrf	handle_sync@i& (0+255),b
  6658  004A20                     l13798:
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;main.c: 1260: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6662                           ;main.c: 1261: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6663                           ;main.c: 1262: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6664                           ;main.c: 1263: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6665  004A20  29C8               	incf	(_vscp_imsg+7)& (0+255),w,b
  6666  004A22  E010               	bz	l13802
  6667                           
  6668                           ; BSR set to: 0
  6669  004A24  90D8               	bcf	status,0,c
  6670  004A26  3595               	rlcf	handle_sync@i& (0+255),w,b
  6671  004A28  6F93               	movwf	??_handle_sync& (0+255),b
  6672  004A2A  6B94               	clrf	(??_handle_sync+1)& (0+255),b
  6673  004A2C  3794               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6674  004A2E  0E73               	movlw	115
  6675  004A30  2593               	addwf	??_handle_sync& (0+255),w,b
  6676  004A32  6E0E               	movwf	?_readEEPROM,c
  6677  004A34  0E00               	movlw	0
  6678  004A36  2194               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6679  004A38  6E0F               	movwf	?_readEEPROM+1,c
  6680  004A3A  EC62  F02A         	call	_readEEPROM	;wreg free
  6681  004A3E  0100               	movlb	0	; () banked
  6682  004A40  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6683  004A42  E125               	bnz	l13812
  6684  004A44                     l13802:
  6685                           
  6686                           ; BSR set to: 0
  6687  004A44  29C9               	incf	(_vscp_imsg+8)& (0+255),w,b
  6688  004A46  E010               	bz	l295
  6689                           
  6690                           ; BSR set to: 0
  6691  004A48  90D8               	bcf	status,0,c
  6692  004A4A  3595               	rlcf	handle_sync@i& (0+255),w,b
  6693  004A4C  6F93               	movwf	??_handle_sync& (0+255),b
  6694  004A4E  6B94               	clrf	(??_handle_sync+1)& (0+255),b
  6695  004A50  3794               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6696  004A52  0E74               	movlw	116
  6697  004A54  2593               	addwf	??_handle_sync& (0+255),w,b
  6698  004A56  6E0E               	movwf	?_readEEPROM,c
  6699  004A58  0E00               	movlw	0
  6700  004A5A  2194               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6701  004A5C  6E0F               	movwf	?_readEEPROM+1,c
  6702  004A5E  EC62  F02A         	call	_readEEPROM	;wreg free
  6703  004A62  0100               	movlb	0	; () banked
  6704  004A64  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6705  004A66  E113               	bnz	l13812
  6706  004A68                     l295:
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;main.c: 1266: timeout_clock = 0;
  6710  004A68  6BB0               	clrf	_timeout_clock& (0+255),b	;volatile
  6711  004A6A  6BB1               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6712  004A6C  6BB2               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6713  004A6E  6BB3               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6714                           
  6715                           ;main.c: 1267: while (!sendTempEvent(i)) {
  6716  004A70  D009               	goto	l13810
  6717  004A72                     l13806:
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;main.c: 1268: if (timeout_clock > 1000) break;
  6721  004A72  0EE9               	movlw	233
  6722  004A74  5DB0               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6723  004A76  0E03               	movlw	3
  6724  004A78  59B1               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6725  004A7A  0E00               	movlw	0
  6726  004A7C  59B2               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6727  004A7E  0E00               	movlw	0
  6728  004A80  59B3               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6729  004A82  E205               	bc	l13812
  6730  004A84                     l13810:
  6731                           
  6732                           ; BSR set to: 0
  6733  004A84  5195               	movf	handle_sync@i& (0+255),w,b
  6734  004A86  EC4C  F025         	call	_sendTempEvent
  6735  004A8A  0900               	iorlw	0
  6736  004A8C  E0F2               	bz	l13806
  6737  004A8E                     l13812:
  6738                           
  6739                           ; BSR set to: 0
  6740  004A8E  2B95               	incf	handle_sync@i& (0+255),f,b
  6741                           
  6742                           ; BSR set to: 0
  6743  004A90  0E05               	movlw	5
  6744  004A92  6595               	cpfsgt	handle_sync@i& (0+255),b
  6745  004A94  D7C5               	goto	l13798
  6746                           
  6747                           ; BSR set to: 0
  6748  004A96  0C05               	retlw	5
  6749  004A98                     __end_of_handle_sync:
  6750                           	opt stack 0
  6751                           tblptru	equ	0xFF8
  6752                           tblptrh	equ	0xFF7
  6753                           tblptrl	equ	0xFF6
  6754                           tablat	equ	0xFF5
  6755                           prodh	equ	0xFF4
  6756                           prodl	equ	0xFF3
  6757                           intcon	equ	0xFF2
  6758                           postinc0	equ	0xFEE
  6759                           wreg	equ	0xFE8
  6760                           indf1	equ	0xFE7
  6761                           postdec1	equ	0xFE5
  6762                           fsr1h	equ	0xFE2
  6763                           fsr1l	equ	0xFE1
  6764                           indf2	equ	0xFDF
  6765                           postinc2	equ	0xFDE
  6766                           postdec2	equ	0xFDD
  6767                           plusw2	equ	0xFDB
  6768                           fsr2h	equ	0xFDA
  6769                           fsr2l	equ	0xFD9
  6770                           status	equ	0xFD8
  6771                           
  6772 ;; *************** function _sendTempEvent *****************
  6773 ;; Defined at:
  6774 ;;		line 817 in file "../main.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;  i               1    wreg     unsigned char 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  i               1   68[COMRAM] unsigned char 
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      unsigned char 
  6781 ;; Registers used:
  6782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : F/0
  6785 ;;		On exit  : F/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6788 ;;      Params:         0       0       0       0       0       0       0
  6789 ;;      Locals:         1       0       0       0       0       0       0
  6790 ;;      Temps:          1       0       0       0       0       0       0
  6791 ;;      Totals:         2       0       0       0       0       0       0
  6792 ;;Total ram usage:        2 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    7
  6795 ;; This function calls:
  6796 ;;		_readEEPROM
  6797 ;;		_vscp_sendEvent
  6798 ;;		_setEventData
  6799 ;; This function is called by:
  6800 ;;		_doOneSecondWork
  6801 ;;		_handle_sync
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           	psect	text28
  6806  004A98                     __ptext28:
  6807                           	opt stack 0
  6808  004A98                     _sendTempEvent:
  6809                           	opt stack 22
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;incstack = 0
  6813                           ;incstack = 0
  6814                           ;sendTempEvent@i stored from wreg
  6815  004A98  CFE8 F045          	movff	wreg,sendTempEvent@i
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;main.c: 818: vscp_omsg.priority = 0x03;
  6819  004A9C  0E03               	movlw	3
  6820  004A9E  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  6821                           
  6822                           ;main.c: 819: vscp_omsg.flags = 0x80 + 4;
  6823  004AA0  0E84               	movlw	132
  6824  004AA2  6FCF               	movwf	_vscp_omsg& (0+255),b
  6825                           
  6826                           ;main.c: 820: vscp_omsg.vscp_class = 10;
  6827  004AA4  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6828  004AA6  0E0A               	movlw	10
  6829  004AA8  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6830                           
  6831                           ;main.c: 821: vscp_omsg.vscp_type = 6;
  6832  004AAA  0E06               	movlw	6
  6833  004AAC  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;main.c: 824: vscp_omsg.data[ 0 ] = 0x80 |
  6837                           ;main.c: 825: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6838                           ;main.c: 826: i;
  6839  004AAE  D82A               	call	PL82	;call to abstracted procedure
  6840  004AB0  EC62  F02A         	call	_readEEPROM	;wreg free
  6841  004AB4  6E44               	movwf	??_sendTempEvent& (0+255),c
  6842  004AB6  0E03               	movlw	3
  6843  004AB8  1644               	andwf	??_sendTempEvent,f,c
  6844  004ABA  90D8               	bcf	status,0,c
  6845  004ABC  3644               	rlcf	??_sendTempEvent,f,c
  6846  004ABE  90D8               	bcf	status,0,c
  6847  004AC0  3644               	rlcf	??_sendTempEvent,f,c
  6848  004AC2  90D8               	bcf	status,0,c
  6849  004AC4  3444               	rlcf	??_sendTempEvent,w,c
  6850  004AC6  1045               	iorwf	sendTempEvent@i,w,c
  6851  004AC8  0980               	iorlw	128
  6852  004ACA  0100               	movlb	0	; () banked
  6853  004ACC  6FD4               	movwf	(_vscp_omsg+5)& (0+255),b
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;main.c: 828: vscp_omsg.data[ 1 ] = 0x82;
  6857  004ACE  0E82               	movlw	130
  6858  004AD0  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;main.c: 830: setEventData( current_temp[i],
  6862                           ;main.c: 831: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6863  004AD2  5045               	movf	sendTempEvent@i,w,c
  6864  004AD4  0D02               	mullw	2
  6865  004AD6  50F3               	movf	prodl,w,c
  6866  004AD8  0FA0               	addlw	low _current_temp
  6867  004ADA  6ED9               	movwf	fsr2l,c
  6868  004ADC  6ADA               	clrf	fsr2h,c
  6869  004ADE  CFDE F08A          	movff	postinc2,?_setEventData
  6870  004AE2  CFDD F08B          	movff	postdec2,?_setEventData+1
  6871  004AE6  D80E               	call	PL82	;call to abstracted procedure
  6872  004AE8  EC62  F02A         	call	_readEEPROM	;wreg free
  6873  004AEC  0B03               	andlw	3
  6874  004AEE  0100               	movlb	0	; () banked
  6875  004AF0  6F8C               	movwf	(?_setEventData+2)& (0+255),b
  6876  004AF2  EC87  F022         	call	_setEventData	;wreg free
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;main.c: 834: if (!vscp_sendEvent()) {
  6880  004AF6  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  6881  004AFA  0900               	iorlw	0
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;main.c: 835: return 0;
  6885  004AFC  0E00               	movlw	0
  6886  004AFE  A4D8               	btfss	status,2,c
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;main.c: 836: }
  6890                           ;main.c: 838: return 1;
  6891  004B00  0E01               	movlw	1
  6892                           
  6893                           ; BSR set to: 0
  6894  004B02  0012               	return	
  6895  004B04                     __end_of_sendTempEvent:
  6896                           	opt stack 0
  6897  004B04                     PL82:
  6898                           	opt stack 22
  6899  004B04  0E43               	movlw	67
  6900  004B06  2445               	addwf	sendTempEvent@i,w,c
  6901  004B08  6E0E               	movwf	?_readEEPROM,c
  6902  004B0A  6A0F               	clrf	?_readEEPROM+1,c
  6903  004B0C  0E00               	movlw	0
  6904  004B0E  220F               	addwfc	?_readEEPROM+1,f,c
  6905  004B10  0C00               	retlw	0
  6906  004B12                     __end_ofPL82:
  6907                           	opt stack 0
  6908                           tblptru	equ	0xFF8
  6909                           tblptrh	equ	0xFF7
  6910                           tblptrl	equ	0xFF6
  6911                           tablat	equ	0xFF5
  6912                           prodh	equ	0xFF4
  6913                           prodl	equ	0xFF3
  6914                           intcon	equ	0xFF2
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           indf1	equ	0xFE7
  6918                           postdec1	equ	0xFE5
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           plusw2	equ	0xFDB
  6925                           fsr2h	equ	0xFDA
  6926                           fsr2l	equ	0xFD9
  6927                           status	equ	0xFD8
  6928                           
  6929 ;; *************** function _setEventData *****************
  6930 ;; Defined at:
  6931 ;;		line 846 in file "../main.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;  v               2   42[BANK0 ] int 
  6934 ;;  unit            1   44[BANK0 ] unsigned char 
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;  newval          4   45[BANK0 ] unsigned char 
  6937 ;;  ival            2   49[BANK0 ] int 
  6938 ;; Return value:  Size  Location     Type
  6939 ;;		None               void
  6940 ;; Registers used:
  6941 ;;		wreg, status,2, status,0, cstack
  6942 ;; Tracked objects:
  6943 ;;		On entry : F/0
  6944 ;;		On exit  : F/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6947 ;;      Params:         0       3       0       0       0       0       0
  6948 ;;      Locals:         0       6       0       0       0       0       0
  6949 ;;      Temps:          0       0       0       0       0       0       0
  6950 ;;      Totals:         0       9       0       0       0       0       0
  6951 ;;Total ram usage:        9 bytes
  6952 ;; Hardware stack levels used:    1
  6953 ;; Hardware stack levels required when called:    5
  6954 ;; This function calls:
  6955 ;;		_Celsius2Kelvin
  6956 ;;		_Celsius2Fahrenheit
  6957 ;;		___awtofl
  6958 ;;		___fltol
  6959 ;; This function is called by:
  6960 ;;		_sendTempEvent
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text29
  6965  00450E                     __ptext29:
  6966                           	opt stack 0
  6967  00450E                     _setEventData:
  6968                           	opt stack 23
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;main.c: 847: double newval;
  6972                           ;main.c: 848: int ival;
  6973                           ;main.c: 850: if (0 == unit) {
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;incstack = 0
  6977                           ;incstack = 0
  6978  00450E  678C               	tstfsz	setEventData@unit& (0+255),b
  6979  004510  D019               	goto	l14128
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;main.c: 852: newval = Celsius2Kelvin(v);
  6983  004512  C08A  F018         	movff	setEventData@v,?___awtofl
  6984  004516  C08B  F019         	movff	setEventData@v+1,?___awtofl+1
  6985  00451A  EC56  F028         	call	___awtofl	;wreg free
  6986  00451E  C01B  F03E         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6987  004522  C01A  F03D         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6988  004526  C019  F03C         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6989  00452A  C018  F03B         	movff	?___awtofl,?_Celsius2Kelvin
  6990  00452E  EC73  F028         	call	_Celsius2Kelvin	;wreg free
  6991  004532  C03E  F090         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6992  004536  C03D  F08F         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6993  00453A  C03C  F08E         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6994  00453E  C03B  F08D         	movff	?_Celsius2Kelvin,setEventData@newval
  6995                           
  6996                           ;main.c: 853: } else if (2 == unit) {
  6997  004542  D02A               	goto	l253
  6998  004544                     l14128:
  6999                           
  7000                           ; BSR set to: 0
  7001  004544  518C               	movf	setEventData@unit& (0+255),w,b
  7002  004546  0A02               	xorlw	2
  7003  004548  E119               	bnz	l14132
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;main.c: 855: newval = Celsius2Fahrenheit(v);
  7007  00454A  C08A  F018         	movff	setEventData@v,?___awtofl
  7008  00454E  C08B  F019         	movff	setEventData@v+1,?___awtofl+1
  7009  004552  EC56  F028         	call	___awtofl	;wreg free
  7010  004556  C01B  F089         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  7011  00455A  C01A  F088         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  7012  00455E  C019  F087         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  7013  004562  C018  F086         	movff	?___awtofl,?_Celsius2Fahrenheit
  7014  004566  ECC5  F025         	call	_Celsius2Fahrenheit	;wreg free
  7015  00456A  C089  F090         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  7016  00456E  C088  F08F         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  7017  004572  C087  F08E         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  7018  004576  C086  F08D         	movff	?_Celsius2Fahrenheit,setEventData@newval
  7019                           
  7020                           ;main.c: 856: } else {
  7021  00457A  D00E               	goto	l253
  7022  00457C                     l14132:
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;main.c: 858: newval = v;
  7026  00457C  C08A  F018         	movff	setEventData@v,?___awtofl
  7027  004580  C08B  F019         	movff	setEventData@v+1,?___awtofl+1
  7028  004584  EC56  F028         	call	___awtofl	;wreg free
  7029  004588  C01B  F090         	movff	?___awtofl+3,setEventData@newval+3
  7030  00458C  C01A  F08F         	movff	?___awtofl+2,setEventData@newval+2
  7031  004590  C019  F08E         	movff	?___awtofl+1,setEventData@newval+1
  7032  004594  C018  F08D         	movff	?___awtofl,setEventData@newval
  7033  004598                     l253:
  7034                           
  7035                           ;main.c: 859: }
  7036                           ;main.c: 861: ival = (int) newval;
  7037  004598  C08D  F034         	movff	setEventData@newval,?___fltol
  7038  00459C  C08E  F035         	movff	setEventData@newval+1,?___fltol+1
  7039  0045A0  C08F  F036         	movff	setEventData@newval+2,?___fltol+2
  7040  0045A4  C090  F037         	movff	setEventData@newval+3,?___fltol+3
  7041  0045A8  EC33  F024         	call	___fltol	;wreg free
  7042  0045AC  C034  F091         	movff	?___fltol,setEventData@ival
  7043  0045B0  C035  F092         	movff	?___fltol+1,setEventData@ival+1
  7044                           
  7045                           ;main.c: 863: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7046  0045B4  0100               	movlb	0	; () banked
  7047  0045B6  5192               	movf	(setEventData@ival+1)& (0+255),w,b
  7048  0045B8  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;main.c: 864: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7052  0045BA  C091  F0D7         	movff	setEventData@ival,_vscp_omsg+8
  7053                           
  7054                           ; BSR set to: 0
  7055  0045BE  0012               	return	
  7056  0045C0                     __end_of_setEventData:
  7057                           	opt stack 0
  7058                           tblptru	equ	0xFF8
  7059                           tblptrh	equ	0xFF7
  7060                           tblptrl	equ	0xFF6
  7061                           tablat	equ	0xFF5
  7062                           prodh	equ	0xFF4
  7063                           prodl	equ	0xFF3
  7064                           intcon	equ	0xFF2
  7065                           postinc0	equ	0xFEE
  7066                           wreg	equ	0xFE8
  7067                           indf1	equ	0xFE7
  7068                           postdec1	equ	0xFE5
  7069                           fsr1h	equ	0xFE2
  7070                           fsr1l	equ	0xFE1
  7071                           indf2	equ	0xFDF
  7072                           postinc2	equ	0xFDE
  7073                           postdec2	equ	0xFDD
  7074                           plusw2	equ	0xFDB
  7075                           fsr2h	equ	0xFDA
  7076                           fsr2l	equ	0xFD9
  7077                           status	equ	0xFD8
  7078                           
  7079 ;; *************** function _Celsius2Fahrenheit *****************
  7080 ;; Defined at:
  7081 ;;		line 42 in file "../ntc.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  tc              4   38[BANK0 ] int 
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;		None
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  4   38[BANK0 ] int 
  7088 ;; Registers used:
  7089 ;;		wreg, status,2, status,0, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7095 ;;      Params:         0       4       0       0       0       0       0
  7096 ;;      Locals:         0       0       0       0       0       0       0
  7097 ;;      Temps:          0       0       0       0       0       0       0
  7098 ;;      Totals:         0       4       0       0       0       0       0
  7099 ;;Total ram usage:        4 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    4
  7102 ;; This function calls:
  7103 ;;		___fladd
  7104 ;;		___fldiv
  7105 ;;		___flmul
  7106 ;; This function is called by:
  7107 ;;		_setEventData
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           	psect	text30
  7112  004B8A                     __ptext30:
  7113                           	opt stack 0
  7114  004B8A                     _Celsius2Fahrenheit:
  7115                           	opt stack 23
  7116                           
  7117                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;incstack = 0
  7121                           ;incstack = 0
  7122  004B8A  0100               	movlb	0	; () banked
  7123  004B8C  6B64               	clrf	(?___fladd+4)& (0+255),b
  7124  004B8E  6B65               	clrf	(?___fladd+5)& (0+255),b
  7125  004B90  0E7A               	movlw	122
  7126  004B92  6F66               	movwf	(?___fladd+6)& (0+255),b
  7127  004B94  0E46               	movlw	70
  7128  004B96  6F67               	movwf	(?___fladd+7)& (0+255),b
  7129  004B98  6A22               	clrf	?___flmul+4,c
  7130  004B9A  6A23               	clrf	?___flmul+5,c
  7131  004B9C  0E10               	movlw	16
  7132  004B9E  6E24               	movwf	?___flmul+6,c
  7133  004BA0  0E41               	movlw	65
  7134  004BA2  6E25               	movwf	?___flmul+7,c
  7135  004BA4  C086  F01E         	movff	Celsius2Fahrenheit@tc,?___flmul
  7136  004BA8  C087  F01F         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7137  004BAC  C088  F020         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7138  004BB0  C089  F021         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7139  004BB4  ECB3  F020         	call	___flmul	;wreg free
  7140  004BB8  C021  F063         	movff	?___flmul+3,?___fladd+3
  7141  004BBC  C020  F062         	movff	?___flmul+2,?___fladd+2
  7142  004BC0  C01F  F061         	movff	?___flmul+1,?___fladd+1
  7143  004BC4  C01E  F060         	movff	?___flmul,?___fladd
  7144  004BC8  EC21  F01C         	call	___fladd	;wreg free
  7145  004BCC  C063  F073         	movff	?___fladd+3,?___fldiv+3
  7146  004BD0  C062  F072         	movff	?___fladd+2,?___fldiv+2
  7147  004BD4  C061  F071         	movff	?___fladd+1,?___fldiv+1
  7148  004BD8  C060  F070         	movff	?___fladd,?___fldiv
  7149  004BDC  0100               	movlb	0	; () banked
  7150  004BDE  6B74               	clrf	(?___fldiv+4)& (0+255),b
  7151  004BE0  6B75               	clrf	(?___fldiv+5)& (0+255),b
  7152  004BE2  0EA0               	movlw	160
  7153  004BE4  6F76               	movwf	(?___fldiv+6)& (0+255),b
  7154  004BE6  0E40               	movlw	64
  7155  004BE8  6F77               	movwf	(?___fldiv+7)& (0+255),b
  7156  004BEA  EC39  F023         	call	___fldiv	;wreg free
  7157  004BEE  C073  F089         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7158  004BF2  C072  F088         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7159  004BF6  C071  F087         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7160  004BFA  C070  F086         	movff	?___fldiv,?_Celsius2Fahrenheit
  7161  004BFE  0012               	return	
  7162  004C00                     __end_of_Celsius2Fahrenheit:
  7163                           	opt stack 0
  7164                           tblptru	equ	0xFF8
  7165                           tblptrh	equ	0xFF7
  7166                           tblptrl	equ	0xFF6
  7167                           tablat	equ	0xFF5
  7168                           prodh	equ	0xFF4
  7169                           prodl	equ	0xFF3
  7170                           intcon	equ	0xFF2
  7171                           postinc0	equ	0xFEE
  7172                           wreg	equ	0xFE8
  7173                           indf1	equ	0xFE7
  7174                           postdec1	equ	0xFE5
  7175                           fsr1h	equ	0xFE2
  7176                           fsr1l	equ	0xFE1
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           plusw2	equ	0xFDB
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185 ;; *************** function ___fladd *****************
  7186 ;; Defined at:
  7187 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  f1              4    0[BANK0 ] int 
  7190 ;;  f2              4    4[BANK0 ] int 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  exp1            1   57[COMRAM] unsigned char 
  7193 ;;  exp2            1   56[COMRAM] unsigned char 
  7194 ;;  sign            1   55[COMRAM] unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  4    0[BANK0 ] unsigned char 
  7197 ;; Registers used:
  7198 ;;		wreg, status,2, status,0, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7204 ;;      Params:         0       8       0       0       0       0       0
  7205 ;;      Locals:         6       0       0       0       0       0       0
  7206 ;;      Temps:          1       0       0       0       0       0       0
  7207 ;;      Totals:         7       8       0       0       0       0       0
  7208 ;;Total ram usage:       15 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    3
  7211 ;; This function calls:
  7212 ;;		___flpack
  7213 ;; This function is called by:
  7214 ;;		_doWork
  7215 ;;		_Celsius2Fahrenheit
  7216 ;;		_Celsius2Kelvin
  7217 ;;		___asfladd
  7218 ;;		_floor
  7219 ;;		___flsub
  7220 ;;		_log
  7221 ;;		_eval_poly
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text31
  7226  003842                     __ptext31:
  7227                           	opt stack 0
  7228  003842                     ___fladd:
  7229                           	opt stack 25
  7230                           
  7231                           ;incstack = 0
  7232                           ;incstack = 0
  7233  003842  0100               	movlb	0	; () banked
  7234  003844  3562               	rlcf	(___fladd@f1+2)& (0+255),w,b
  7235  003846  3563               	rlcf	(___fladd@f1+3)& (0+255),w,b
  7236  003848  6E3A               	movwf	___fladd@exp1,c
  7237  00384A  3566               	rlcf	(___fladd@f2+2)& (0+255),w,b
  7238  00384C  3567               	rlcf	(___fladd@f2+3)& (0+255),w,b
  7239  00384E  6E39               	movwf	___fladd@exp2,c
  7240  003850  503A               	movf	___fladd@exp1,w,c
  7241  003852  E009               	bz	l1575
  7242                           
  7243                           ; BSR set to: 0
  7244  003854  5039               	movf	___fladd@exp2,w,c
  7245  003856  603A               	cpfslt	___fladd@exp1,c
  7246  003858  D00F               	goto	l14194
  7247                           
  7248                           ; BSR set to: 0
  7249  00385A  503A               	movf	___fladd@exp1,w,c
  7250  00385C  5C39               	subwf	___fladd@exp2,w,c
  7251  00385E  6E34               	movwf	??___fladd& (0+255),c
  7252  003860  0E21               	movlw	33
  7253  003862  5C34               	subwf	??___fladd,w,c
  7254  003864  E309               	bnc	l14194
  7255  003866                     l1575:
  7256                           
  7257                           ; BSR set to: 0
  7258  003866  C064  F060         	movff	___fladd@f2,?___fladd
  7259  00386A  C065  F061         	movff	___fladd@f2+1,?___fladd+1
  7260  00386E  C066  F062         	movff	___fladd@f2+2,?___fladd+2
  7261  003872  C067  F063         	movff	___fladd@f2+3,?___fladd+3
  7262  003876  D08E               	goto	l1576
  7263  003878                     l14194:
  7264                           
  7265                           ; BSR set to: 0
  7266  003878  5039               	movf	___fladd@exp2,w,c
  7267  00387A  E009               	bz	l1579
  7268                           
  7269                           ; BSR set to: 0
  7270  00387C  503A               	movf	___fladd@exp1,w,c
  7271  00387E  6039               	cpfslt	___fladd@exp2,c
  7272  003880  D00F               	goto	l14200
  7273                           
  7274                           ; BSR set to: 0
  7275  003882  5039               	movf	___fladd@exp2,w,c
  7276  003884  5C3A               	subwf	___fladd@exp1,w,c
  7277  003886  6E34               	movwf	??___fladd& (0+255),c
  7278  003888  0E21               	movlw	33
  7279  00388A  5C34               	subwf	??___fladd,w,c
  7280  00388C  E309               	bnc	l14200
  7281  00388E                     l1579:
  7282                           
  7283                           ; BSR set to: 0
  7284  00388E  C060  F060         	movff	___fladd@f1,?___fladd
  7285  003892  C061  F061         	movff	___fladd@f1+1,?___fladd+1
  7286  003896  C062  F062         	movff	___fladd@f1+2,?___fladd+2
  7287  00389A  C063  F063         	movff	___fladd@f1+3,?___fladd+3
  7288  00389E  D07A               	goto	l1576
  7289  0038A0                     l14200:
  7290                           
  7291                           ; BSR set to: 0
  7292  0038A0  0E06               	movlw	6
  7293  0038A2  6E38               	movwf	___fladd@sign,c
  7294                           
  7295                           ; BSR set to: 0
  7296  0038A4  BF63               	btfsc	(___fladd@f1+3)& (0+255),7,b
  7297                           
  7298                           ; BSR set to: 0
  7299  0038A6  8E38               	bsf	___fladd@sign,7,c
  7300                           
  7301                           ; BSR set to: 0
  7302  0038A8  BF67               	btfsc	(___fladd@f2+3)& (0+255),7,b
  7303                           
  7304                           ; BSR set to: 0
  7305  0038AA  8C38               	bsf	___fladd@sign,6,c
  7306                           
  7307                           ; BSR set to: 0
  7308  0038AC  8F62               	bsf	(___fladd@f1+2)& (0+255),7,b
  7309                           
  7310                           ; BSR set to: 0
  7311  0038AE  6B63               	clrf	(___fladd@f1+3)& (0+255),b
  7312                           
  7313                           ; BSR set to: 0
  7314  0038B0  8F66               	bsf	(___fladd@f2+2)& (0+255),7,b
  7315  0038B2  6B67               	clrf	(___fladd@f2+3)& (0+255),b
  7316                           
  7317                           ; BSR set to: 0
  7318  0038B4  5039               	movf	___fladd@exp2,w,c
  7319  0038B6  603A               	cpfslt	___fladd@exp1,c
  7320  0038B8  D01A               	goto	l14226
  7321  0038BA                     l14216:
  7322  0038BA  0100               	movlb	0	; () banked
  7323  0038BC  90D8               	bcf	status,0,c
  7324  0038BE  3764               	rlcf	___fladd@f2& (0+255),f,b
  7325  0038C0  3765               	rlcf	(___fladd@f2+1)& (0+255),f,b
  7326  0038C2  3766               	rlcf	(___fladd@f2+2)& (0+255),f,b
  7327  0038C4  3767               	rlcf	(___fladd@f2+3)& (0+255),f,b
  7328  0038C6  0639               	decf	___fladd@exp2,f,c
  7329                           
  7330                           ; BSR set to: 0
  7331  0038C8  5039               	movf	___fladd@exp2,w,c
  7332  0038CA  183A               	xorwf	___fladd@exp1,w,c
  7333  0038CC  E00C               	bz	l14224
  7334                           
  7335                           ; BSR set to: 0
  7336  0038CE  0638               	decf	___fladd@sign,f,c
  7337  0038D0  5038               	movf	___fladd@sign& (0+255),w,c
  7338  0038D2  0B07               	andlw	7
  7339  0038D4  E008               	bz	l14224
  7340  0038D6  D7F1               	goto	l14216
  7341  0038D8                     l14222:
  7342  0038D8  0100               	movlb	0	; () banked
  7343  0038DA  90D8               	bcf	status,0,c
  7344  0038DC  3363               	rrcf	(___fladd@f1+3)& (0+255),f,b
  7345  0038DE  3362               	rrcf	(___fladd@f1+2)& (0+255),f,b
  7346  0038E0  3361               	rrcf	(___fladd@f1+1)& (0+255),f,b
  7347  0038E2  3360               	rrcf	___fladd@f1& (0+255),f,b
  7348  0038E4  2A3A               	incf	___fladd@exp1,f,c
  7349  0038E6                     l14224:
  7350  0038E6  5039               	movf	___fladd@exp2,w,c
  7351  0038E8  623A               	cpfseq	___fladd@exp1,c
  7352  0038EA  D7F6               	goto	l14222
  7353  0038EC  D01C               	goto	l1590
  7354  0038EE                     l14226:
  7355                           
  7356                           ; BSR set to: 0
  7357  0038EE  503A               	movf	___fladd@exp1,w,c
  7358  0038F0  6039               	cpfslt	___fladd@exp2,c
  7359  0038F2  D019               	goto	l1590
  7360  0038F4                     l14228:
  7361  0038F4  0100               	movlb	0	; () banked
  7362  0038F6  90D8               	bcf	status,0,c
  7363  0038F8  3760               	rlcf	___fladd@f1& (0+255),f,b
  7364  0038FA  3761               	rlcf	(___fladd@f1+1)& (0+255),f,b
  7365  0038FC  3762               	rlcf	(___fladd@f1+2)& (0+255),f,b
  7366  0038FE  3763               	rlcf	(___fladd@f1+3)& (0+255),f,b
  7367  003900  063A               	decf	___fladd@exp1,f,c
  7368                           
  7369                           ; BSR set to: 0
  7370  003902  5039               	movf	___fladd@exp2,w,c
  7371  003904  183A               	xorwf	___fladd@exp1,w,c
  7372  003906  E00C               	bz	l14236
  7373                           
  7374                           ; BSR set to: 0
  7375  003908  0638               	decf	___fladd@sign,f,c
  7376  00390A  5038               	movf	___fladd@sign& (0+255),w,c
  7377  00390C  0B07               	andlw	7
  7378  00390E  E008               	bz	l14236
  7379  003910  D7F1               	goto	l14228
  7380  003912                     l14234:
  7381  003912  0100               	movlb	0	; () banked
  7382  003914  90D8               	bcf	status,0,c
  7383  003916  3367               	rrcf	(___fladd@f2+3)& (0+255),f,b
  7384  003918  3366               	rrcf	(___fladd@f2+2)& (0+255),f,b
  7385  00391A  3365               	rrcf	(___fladd@f2+1)& (0+255),f,b
  7386  00391C  3364               	rrcf	___fladd@f2& (0+255),f,b
  7387  00391E  2A39               	incf	___fladd@exp2,f,c
  7388  003920                     l14236:
  7389  003920  5039               	movf	___fladd@exp2,w,c
  7390  003922  623A               	cpfseq	___fladd@exp1,c
  7391  003924  D7F6               	goto	l14234
  7392  003926                     l1590:
  7393  003926  AE38               	btfss	___fladd@sign,7,c
  7394  003928  D00A               	goto	l14240
  7395  00392A  0100               	movlb	0	; () banked
  7396  00392C  1F60               	comf	___fladd@f1& (0+255),f,b
  7397  00392E  1F61               	comf	(___fladd@f1+1)& (0+255),f,b
  7398  003930  1F62               	comf	(___fladd@f1+2)& (0+255),f,b
  7399  003932  1F63               	comf	(___fladd@f1+3)& (0+255),f,b
  7400  003934  2B60               	incf	___fladd@f1& (0+255),f,b
  7401  003936  0E00               	movlw	0
  7402  003938  2361               	addwfc	(___fladd@f1+1)& (0+255),f,b
  7403  00393A  2362               	addwfc	(___fladd@f1+2)& (0+255),f,b
  7404  00393C  2363               	addwfc	(___fladd@f1+3)& (0+255),f,b
  7405  00393E                     l14240:
  7406  00393E  AC38               	btfss	___fladd@sign,6,c
  7407  003940  D003               	goto	l14244
  7408  003942  0100               	movlb	0	; () banked
  7409  003944  1F64               	comf	___fladd@f2& (0+255),f,b
  7410  003946  D827               	call	PL58	;call to abstracted procedure
  7411  003948                     l14244:
  7412  003948  6A38               	clrf	___fladd@sign,c
  7413  00394A  0100               	movlb	0	; () banked
  7414  00394C  5160               	movf	___fladd@f1& (0+255),w,b
  7415  00394E  2764               	addwf	___fladd@f2& (0+255),f,b
  7416  003950  5161               	movf	(___fladd@f1+1)& (0+255),w,b
  7417  003952  2365               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7418  003954  5162               	movf	(___fladd@f1+2)& (0+255),w,b
  7419  003956  2366               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7420  003958  5163               	movf	(___fladd@f1+3)& (0+255),w,b
  7421  00395A  2367               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7422                           
  7423                           ; BSR set to: 0
  7424  00395C  AF67               	btfss	(___fladd@f2+3)& (0+255),7,b
  7425  00395E  D004               	goto	l14252
  7426                           
  7427                           ; BSR set to: 0
  7428  003960  1F64               	comf	___fladd@f2& (0+255),f,b
  7429  003962  D819               	call	PL58	;call to abstracted procedure
  7430                           
  7431                           ; BSR set to: 0
  7432  003964  0E01               	movlw	1
  7433  003966  6E38               	movwf	___fladd@sign,c
  7434  003968                     l14252:
  7435                           
  7436                           ; BSR set to: 0
  7437  003968  C064  F00E         	movff	___fladd@f2,?___flpack
  7438  00396C  C065  F00F         	movff	___fladd@f2+1,?___flpack+1
  7439  003970  C066  F010         	movff	___fladd@f2+2,?___flpack+2
  7440  003974  C067  F011         	movff	___fladd@f2+3,?___flpack+3
  7441  003978  C03A  F012         	movff	___fladd@exp1,?___flpack+4
  7442  00397C  C038  F013         	movff	___fladd@sign,?___flpack+5
  7443  003980  ECD0  F021         	call	___flpack	;wreg free
  7444  003984  C011  F063         	movff	?___flpack+3,?___fladd+3
  7445  003988  C010  F062         	movff	?___flpack+2,?___fladd+2
  7446  00398C  C00F  F061         	movff	?___flpack+1,?___fladd+1
  7447  003990  C00E  F060         	movff	?___flpack,?___fladd
  7448  003994                     l1576:
  7449  003994  0012               	return	
  7450  003996                     __end_of___fladd:
  7451                           	opt stack 0
  7452  003996                     PL58:
  7453                           	opt stack 25
  7454  003996  1F65               	comf	(___fladd@f2+1)& (0+255),f,b
  7455  003998  1F66               	comf	(___fladd@f2+2)& (0+255),f,b
  7456  00399A  1F67               	comf	(___fladd@f2+3)& (0+255),f,b
  7457  00399C  2B64               	incf	___fladd@f2& (0+255),f,b
  7458  00399E  0E00               	movlw	0
  7459  0039A0  2365               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7460  0039A2  2366               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7461  0039A4  2367               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7462  0039A6  0C00               	retlw	0
  7463  0039A8                     __end_ofPL58:
  7464                           	opt stack 0
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           intcon	equ	0xFF2
  7472                           postinc0	equ	0xFEE
  7473                           wreg	equ	0xFE8
  7474                           indf1	equ	0xFE7
  7475                           postdec1	equ	0xFE5
  7476                           fsr1h	equ	0xFE2
  7477                           fsr1l	equ	0xFE1
  7478                           indf2	equ	0xFDF
  7479                           postinc2	equ	0xFDE
  7480                           postdec2	equ	0xFDD
  7481                           plusw2	equ	0xFDB
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8
  7485                           
  7486 ;; *************** function _Celsius2Kelvin *****************
  7487 ;; Defined at:
  7488 ;;		line 61 in file "../ntc.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  tc              4   58[COMRAM] unsigned char 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  4   58[COMRAM] unsigned char 
  7495 ;; Registers used:
  7496 ;;		wreg, status,2, status,0, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7502 ;;      Params:         4       0       0       0       0       0       0
  7503 ;;      Locals:         0       0       0       0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0
  7505 ;;      Totals:         4       0       0       0       0       0       0
  7506 ;;Total ram usage:        4 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    4
  7509 ;; This function calls:
  7510 ;;		___fladd
  7511 ;; This function is called by:
  7512 ;;		_setEventData
  7513 ;; This function uses a non-reentrant model
  7514 ;;
  7515                           
  7516                           	psect	text32
  7517  0050E6                     __ptext32:
  7518                           	opt stack 0
  7519  0050E6                     _Celsius2Kelvin:
  7520                           	opt stack 23
  7521                           
  7522                           ;ntc.c: 62: return (27316.0 + tc);
  7523                           
  7524                           ;incstack = 0
  7525                           ;incstack = 0
  7526  0050E6  C03B  F060         	movff	Celsius2Kelvin@tc,?___fladd
  7527  0050EA  C03C  F061         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7528  0050EE  C03D  F062         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7529  0050F2  C03E  F063         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7530  0050F6  0100               	movlb	0	; () banked
  7531  0050F8  6B64               	clrf	(?___fladd+4)& (0+255),b
  7532  0050FA  0E68               	movlw	104
  7533  0050FC  6F65               	movwf	(?___fladd+5)& (0+255),b
  7534  0050FE  0ED5               	movlw	213
  7535  005100  6F66               	movwf	(?___fladd+6)& (0+255),b
  7536  005102  0E46               	movlw	70
  7537  005104  6F67               	movwf	(?___fladd+7)& (0+255),b
  7538  005106  EC21  F01C         	call	___fladd	;wreg free
  7539  00510A  C063  F03E         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7540  00510E  C062  F03D         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7541  005112  C061  F03C         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7542  005116  C060  F03B         	movff	?___fladd,?_Celsius2Kelvin
  7543  00511A  0012               	return	
  7544  00511C                     __end_of_Celsius2Kelvin:
  7545                           	opt stack 0
  7546                           tblptru	equ	0xFF8
  7547                           tblptrh	equ	0xFF7
  7548                           tblptrl	equ	0xFF6
  7549                           tablat	equ	0xFF5
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           postinc0	equ	0xFEE
  7554                           wreg	equ	0xFE8
  7555                           indf1	equ	0xFE7
  7556                           postdec1	equ	0xFE5
  7557                           fsr1h	equ	0xFE2
  7558                           fsr1l	equ	0xFE1
  7559                           indf2	equ	0xFDF
  7560                           postinc2	equ	0xFDE
  7561                           postdec2	equ	0xFDD
  7562                           plusw2	equ	0xFDB
  7563                           fsr2h	equ	0xFDA
  7564                           fsr2l	equ	0xFD9
  7565                           status	equ	0xFD8
  7566                           
  7567 ;; *************** function _vscp_handleProtocolEvent *****************
  7568 ;; Defined at:
  7569 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;		None
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  bytes           1   44[BANK0 ] unsigned char 
  7574 ;;  page_save       2   40[BANK0 ] unsigned short 
  7575 ;;  i               1   50[BANK0 ] unsigned char 
  7576 ;;  bytes           2   54[BANK0 ] unsigned short 
  7577 ;;  page_save       2   38[BANK0 ] unsigned short 
  7578 ;;  byte            1   53[BANK0 ] unsigned char 
  7579 ;;  cb              1   49[BANK0 ] unsigned char 
  7580 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7581 ;;  j               1   58[BANK0 ] unsigned char 
  7582 ;;  i               1   56[BANK0 ] unsigned char 
  7583 ;;  k               1   51[BANK0 ] unsigned char 
  7584 ;;  i               1   52[BANK0 ] unsigned char 
  7585 ;;  len             1   47[BANK0 ] unsigned char 
  7586 ;;  pos             1   46[BANK0 ] unsigned char 
  7587 ;;  i               1   57[BANK0 ] unsigned char 
  7588 ;;  len             1   45[BANK0 ] unsigned char 
  7589 ;;  pos             1   43[BANK0 ] unsigned char 
  7590 ;;  offset          1   42[BANK0 ] unsigned char 
  7591 ;; Return value:  Size  Location     Type
  7592 ;;		None               void
  7593 ;; Registers used:
  7594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : F/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7600 ;;      Params:         0       0       0       0       0       0       0
  7601 ;;      Locals:         0      21       0       0       0       0       0
  7602 ;;      Temps:          0       7       0       0       0       0       0
  7603 ;;      Totals:         0      28       0       0       0       0       0
  7604 ;;Total ram usage:       28 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:    8
  7607 ;; This function calls:
  7608 ;;		_vscp_init
  7609 ;;		_vscp_sendEvent
  7610 ;;		_vscp_readAppReg
  7611 ;;		_vscp_writeAppReg
  7612 ;;		_vscp_getGUID
  7613 ;;		_vscp_getMDF_URL
  7614 ;;		_vscp_getMatrixInfo
  7615 ;;		_vscp_goBootloaderMode
  7616 ;;		_vscp_handleHeartbeat
  7617 ;;		_vscp_handleSetNickname
  7618 ;;		_vscp_handleDropNickname
  7619 ;;		_vscp_newNodeOnline
  7620 ;;		_vscp_readRegister
  7621 ;;		_vscp_readStdReg
  7622 ;;		_vscp_writeRegister
  7623 ;;		_vscp_writeStdReg
  7624 ;;		___lbmod
  7625 ;; This function is called by:
  7626 ;;		_main
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           	psect	text33
  7631  002AD0                     __ptext33:
  7632                           	opt stack 0
  7633  002AD0                     _vscp_handleProtocolEvent:
  7634                           	opt stack 22
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  7638                           
  7639                           ;incstack = 0
  7640                           ;incstack = 0
  7641  002AD0  51C4               	movf	(_vscp_imsg+3)& (0+255),w,b
  7642  002AD2  11C3               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7643  002AD4  E101 D2BB          	bz	l10112
  7644  002AD8  D2EA               	goto	l1272
  7645  002ADA                     l9694:
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  7649  002ADA  ECFB  F027         	call	_vscp_handleHeartbeat	;wreg free
  7650                           
  7651                           ;vscp_firmware.c: 807: break;
  7652  002ADE  D2E7               	goto	l1272
  7653  002AE0                     l9696:
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  7657  002AE0  EC00  F029         	call	_vscp_newNodeOnline	;wreg free
  7658                           
  7659                           ;vscp_firmware.c: 812: break;
  7660  002AE4  D2E4               	goto	l1272
  7661  002AE6                     l9698:
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7665  002AE6  EC8A  F029         	call	_vscp_handleSetNickname	;wreg free
  7666                           
  7667                           ;vscp_firmware.c: 817: break;
  7668  002AEA  D2E1               	goto	l1272
  7669  002AEC                     l9700:
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7673  002AEC  ECA7  F028         	call	_vscp_handleDropNickname	;wreg free
  7674                           
  7675                           ;vscp_firmware.c: 822: break;
  7676  002AF0  D2DE               	goto	l1272
  7677  002AF2                     l9702:
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7681                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7682  002AF2  51C1               	movf	_vscp_imsg& (0+255),w,b
  7683  002AF4  0B0F               	andlw	15
  7684  002AF6  0A02               	xorlw	2
  7685  002AF8  E001 D2D9          	bnz	l1272
  7686                           
  7687                           ; BSR set to: 0
  7688  002AFC  51BF               	movf	_vscp_nickname& (0+255),w,b
  7689  002AFE  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  7690  002B02  62DF               	cpfseq	indf2,c
  7691  002B04  D2D4               	goto	l1272
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7695  002B06  0E80               	movlw	128
  7696  002B08  61C8               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7697  002B0A  D012               	goto	l9722
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7701  002B0C  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7702  002B0E  EC0F  F00E         	call	_vscp_readAppReg
  7703  002B12                     L8:
  7704  002B12  0100               	movlb	0	; () banked
  7705  002B14  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7709  002B16  C0C8  F0D4         	movff	_vscp_imsg+7,_vscp_omsg+5
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7713  002B1A  0E03               	movlw	3
  7714  002B1C  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7718  002B1E  0E82               	movlw	130
  7719  002B20  6FCF               	movwf	_vscp_omsg& (0+255),b
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7723  002B22  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  7724  002B24  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7728  002B26  0E0A               	movlw	10
  7729  002B28  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  7730  002B2A                     l9720:
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7734  002B2A  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  7735                           
  7736                           ;vscp_firmware.c: 844: }
  7737  002B2E  D2BF               	goto	l1272
  7738  002B30                     l9722:
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;vscp_firmware.c: 845: else {
  7742                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7743                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7744  002B30  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7745  002B32  EC52  F01B         	call	_vscp_readStdReg
  7746  002B36  D7ED               	goto	L8
  7747  002B38                     l9736:
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7751                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7752  002B38  51C1               	movf	_vscp_imsg& (0+255),w,b
  7753  002B3A  0B0F               	andlw	15
  7754  002B3C  0A03               	xorlw	3
  7755  002B3E  E001 D2B6          	bnz	l1272
  7756                           
  7757                           ; BSR set to: 0
  7758  002B42  51BF               	movf	_vscp_nickname& (0+255),w,b
  7759  002B44  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  7760  002B48  62DF               	cpfseq	indf2,c
  7761  002B4A  D2B1               	goto	l1272
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7765  002B4C  0E80               	movlw	128
  7766  002B4E  61C8               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7767  002B50  D006               	goto	l9756
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7771                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7772  002B52  C0C9  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7773  002B56  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7774  002B58  EC37  F003         	call	_vscp_writeAppReg
  7775  002B5C  D7DA               	goto	L8
  7776  002B5E                     l9756:
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;vscp_firmware.c: 888: else {
  7780                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7781                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7782  002B5E  C0C9  F022         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7783  002B62  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7784  002B64  EC37  F01F         	call	_vscp_writeStdReg
  7785  002B68  D7D4               	goto	L8
  7786  002B6A                     l9770:
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7790                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7791                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7792                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7793                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7794                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7795                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7796  002B6A  51BF               	movf	_vscp_nickname& (0+255),w,b
  7797  002B6C  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  7798  002B70  62DF               	cpfseq	indf2,c
  7799  002B72  D29D               	goto	l1272
  7800                           
  7801                           ; BSR set to: 0
  7802  002B74  0E00               	movlw	0
  7803  002B76  EC58  F02A         	call	_vscp_getGUID
  7804  002B7A  0100               	movlb	0	; () banked
  7805  002B7C  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7806  002B7E  E001 D296          	bnz	l1272
  7807                           
  7808                           ; BSR set to: 0
  7809  002B82  0E03               	movlw	3
  7810  002B84  EC58  F02A         	call	_vscp_getGUID
  7811  002B88  0100               	movlb	0	; () banked
  7812  002B8A  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7813  002B8C  E001 D28F          	bnz	l1272
  7814                           
  7815                           ; BSR set to: 0
  7816  002B90  0E05               	movlw	5
  7817  002B92  EC58  F02A         	call	_vscp_getGUID
  7818  002B96  0100               	movlb	0	; () banked
  7819  002B98  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7820  002B9A  E001 D288          	bnz	l1272
  7821                           
  7822                           ; BSR set to: 0
  7823  002B9E  0E07               	movlw	7
  7824  002BA0  EC58  F02A         	call	_vscp_getGUID
  7825  002BA4  0100               	movlb	0	; () banked
  7826  002BA6  19CC               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7827  002BA8  E001 D281          	bnz	l1272
  7828                           
  7829                           ; BSR set to: 0
  7830  002BAC  5047               	movf	_vscp_page_select+1,w,c
  7831  002BAE  19CD               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7832  002BB0  E001 D27D          	bnz	l1272
  7833                           
  7834                           ; BSR set to: 0
  7835  002BB4  5046               	movf	_vscp_page_select,w,c
  7836  002BB6  EE20  F0CE         	lfsr	2,_vscp_imsg+13
  7837  002BBA  62DF               	cpfseq	indf2,c
  7838  002BBC  D278               	goto	l1272
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7842  002BBE  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7843  002BC0  EC2C  F02A         	call	_vscp_goBootloaderMode
  7844  002BC4  D274               	goto	l1272
  7845  002BC6                     l9786:
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7849                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7850                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7851                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7852  002BC6  0E00               	movlw	0
  7853  002BC8  EC58  F02A         	call	_vscp_getGUID
  7854  002BCC  0100               	movlb	0	; () banked
  7855  002BCE  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7856  002BD0  E173               	bnz	l9830
  7857                           
  7858                           ; BSR set to: 0
  7859  002BD2  0E01               	movlw	1
  7860  002BD4  EC58  F02A         	call	_vscp_getGUID
  7861  002BD8  0100               	movlb	0	; () banked
  7862  002BDA  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7863  002BDC  E16D               	bnz	l9830
  7864                           
  7865                           ; BSR set to: 0
  7866  002BDE  0E02               	movlw	2
  7867  002BE0  EC58  F02A         	call	_vscp_getGUID
  7868  002BE4  0100               	movlb	0	; () banked
  7869  002BE6  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7870  002BE8  E167               	bnz	l9830
  7871                           
  7872                           ; BSR set to: 0
  7873  002BEA  0E03               	movlw	3
  7874  002BEC  EC58  F02A         	call	_vscp_getGUID
  7875  002BF0  0100               	movlb	0	; () banked
  7876  002BF2  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7877  002BF4  E161               	bnz	l9830
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7881  002BF6  884B               	bsf	_vscp_guid_reset,4,c
  7882  002BF8  D05F               	goto	l9830
  7883  002BFA                     l9796:
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7887                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7888                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7889                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7890  002BFA  0E04               	movlw	4
  7891  002BFC  EC58  F02A         	call	_vscp_getGUID
  7892  002C00  0100               	movlb	0	; () banked
  7893  002C02  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7894  002C04  E159               	bnz	l9830
  7895                           
  7896                           ; BSR set to: 0
  7897  002C06  0E05               	movlw	5
  7898  002C08  EC58  F02A         	call	_vscp_getGUID
  7899  002C0C  0100               	movlb	0	; () banked
  7900  002C0E  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7901  002C10  E153               	bnz	l9830
  7902                           
  7903                           ; BSR set to: 0
  7904  002C12  0E06               	movlw	6
  7905  002C14  EC58  F02A         	call	_vscp_getGUID
  7906  002C18  0100               	movlb	0	; () banked
  7907  002C1A  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7908  002C1C  E14D               	bnz	l9830
  7909                           
  7910                           ; BSR set to: 0
  7911  002C1E  0E07               	movlw	7
  7912  002C20  EC58  F02A         	call	_vscp_getGUID
  7913  002C24  0100               	movlb	0	; () banked
  7914  002C26  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7915  002C28  E147               	bnz	l9830
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7919  002C2A  8A4B               	bsf	_vscp_guid_reset,5,c
  7920  002C2C  D045               	goto	l9830
  7921  002C2E                     l9806:
  7922                           
  7923                           ; BSR set to: 0
  7924                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7925                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7926                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7927                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7928  002C2E  0E08               	movlw	8
  7929  002C30  EC58  F02A         	call	_vscp_getGUID
  7930  002C34  0100               	movlb	0	; () banked
  7931  002C36  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7932  002C38  E13F               	bnz	l9830
  7933                           
  7934                           ; BSR set to: 0
  7935  002C3A  0E09               	movlw	9
  7936  002C3C  EC58  F02A         	call	_vscp_getGUID
  7937  002C40  0100               	movlb	0	; () banked
  7938  002C42  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7939  002C44  E139               	bnz	l9830
  7940                           
  7941                           ; BSR set to: 0
  7942  002C46  0E0A               	movlw	10
  7943  002C48  EC58  F02A         	call	_vscp_getGUID
  7944  002C4C  0100               	movlb	0	; () banked
  7945  002C4E  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7946  002C50  E133               	bnz	l9830
  7947                           
  7948                           ; BSR set to: 0
  7949  002C52  0E0B               	movlw	11
  7950  002C54  EC58  F02A         	call	_vscp_getGUID
  7951  002C58  0100               	movlb	0	; () banked
  7952  002C5A  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7953  002C5C  E12D               	bnz	l9830
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7957  002C5E  8C4B               	bsf	_vscp_guid_reset,6,c
  7958  002C60  D02B               	goto	l9830
  7959  002C62                     l9816:
  7960                           
  7961                           ; BSR set to: 0
  7962                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7963                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7964                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7965                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7966  002C62  0E0C               	movlw	12
  7967  002C64  EC58  F02A         	call	_vscp_getGUID
  7968  002C68  0100               	movlb	0	; () banked
  7969  002C6A  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7970  002C6C  E125               	bnz	l9830
  7971                           
  7972                           ; BSR set to: 0
  7973  002C6E  0E0D               	movlw	13
  7974  002C70  EC58  F02A         	call	_vscp_getGUID
  7975  002C74  0100               	movlb	0	; () banked
  7976  002C76  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7977  002C78  E11F               	bnz	l9830
  7978                           
  7979                           ; BSR set to: 0
  7980  002C7A  0E0E               	movlw	14
  7981  002C7C  EC58  F02A         	call	_vscp_getGUID
  7982  002C80  0100               	movlb	0	; () banked
  7983  002C82  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7984  002C84  E119               	bnz	l9830
  7985                           
  7986                           ; BSR set to: 0
  7987  002C86  0E0F               	movlw	15
  7988  002C88  EC58  F02A         	call	_vscp_getGUID
  7989  002C8C  0100               	movlb	0	; () banked
  7990  002C8E  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7991  002C90  E113               	bnz	l9830
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7995  002C92  8E4B               	bsf	_vscp_guid_reset,7,c
  7996  002C94  D011               	goto	l9830
  7997  002C96                     l1212:
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  8001  002C96  6A4B               	clrf	_vscp_guid_reset,c
  8002                           
  8003                           ;vscp_firmware.c: 965: break;
  8004  002C98  D00F               	goto	l9830
  8005  002C9A                     l9828:
  8006                           
  8007                           ; BSR set to: 0
  8008  002C9A  39C7               	swapf	(_vscp_imsg+6)& (0+255),w,b
  8009  002C9C  0B0F               	andlw	15
  8010  002C9E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8011  002CA0  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8012                           
  8013                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8014                           ; Switch size 1, requested type "space"
  8015                           ; Number of cases is 1, Range of values is 0 to 0
  8016                           ; switch strategies available:
  8017                           ; Name         Instructions Cycles
  8018                           ; simple_byte            4     3 (average)
  8019                           ;	Chosen strategy is simple_byte
  8020  002CA2  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8021  002CA4  E1F8               	bnz	l1212
  8022                           
  8023                           ; BSR set to: 0
  8024                           ; Switch size 1, requested type "space"
  8025                           ; Number of cases is 4, Range of values is 0 to 3
  8026                           ; switch strategies available:
  8027                           ; Name         Instructions Cycles
  8028                           ; simple_byte           13     7 (average)
  8029                           ;	Chosen strategy is simple_byte
  8030  002CA6  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  8031  002CA8  E08E               	bz	l9786
  8032  002CAA  0A01               	xorlw	1	; case 1
  8033  002CAC  E0A6               	bz	l9796
  8034  002CAE  0A03               	xorlw	3	; case 2
  8035  002CB0  E0BE               	bz	l9806
  8036  002CB2  0A01               	xorlw	1	; case 3
  8037  002CB4  E0D6               	bz	l9816
  8038  002CB6  D7EF               	goto	l1212
  8039  002CB8                     l9830:
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  8043  002CB8  504B               	movf	_vscp_guid_reset,w,c
  8044  002CBA  0BF0               	andlw	240
  8045  002CBC  0AF0               	xorlw	240
  8046  002CBE  E001 D1F6          	bnz	l1272
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;vscp_firmware.c: 970: vscp_init();
  8050  002CC2  EC97  F027         	call	_vscp_init	;wreg free
  8051  002CC6  D1F3               	goto	l1272
  8052  002CC8                     l9834:
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8056  002CC8  51BF               	movf	_vscp_nickname& (0+255),w,b
  8057  002CCA  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8058  002CCE  62DF               	cpfseq	indf2,c
  8059  002CD0  D1EE               	goto	l1272
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;vscp_firmware.c: 978: uint8_t i;
  8063                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  8064  002CD2  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  8065                           
  8066                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  8067  002CD4  C0C8  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  8068                           
  8069                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  8070  002CD8  C0C9  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  8071                           
  8072                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  8073  002CDC  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  8074  002CDE  D044               	goto	l9866
  8075  002CE0                     l9838:
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  8079  002CE0  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  8080  002CE2  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8081  002CE4  ECEE  F029         	call	_vscp_readRegister
  8082  002CE8  0100               	movlb	0	; () banked
  8083  002CEA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8084  002CEC  0E07               	movlw	7
  8085  002CEE  6E0E               	movwf	?___lbmod,c
  8086  002CF0  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8087  002CF2  EC2A  F029         	call	___lbmod
  8088  002CF6  0100               	movlb	0	; () banked
  8089  002CF8  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8090  002CFA  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8091  002CFC  0FD5               	addlw	low (_vscp_omsg+6)
  8092  002CFE  6ED9               	movwf	fsr2l,c
  8093  002D00  6ADA               	clrf	fsr2h,c
  8094  002D02  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  8098  002D06  0E07               	movlw	7
  8099  002D08  6E0E               	movwf	?___lbmod,c
  8100  002D0A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8101  002D0C  EC2A  F029         	call	___lbmod
  8102  002D10  0A06               	xorlw	6
  8103  002D12  E00B               	bz	l9844
  8104  002D14  0EFF               	movlw	255
  8105  002D16  0100               	movlb	0	; () banked
  8106  002D18  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8107  002D1A  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8108  002D1C  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8109  002D1E  0EFF               	movlw	255
  8110  002D20  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8111  002D22  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8112  002D24  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8113  002D26  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8114  002D28  E11E               	bnz	l9864
  8115  002D2A                     l9844:
  8116                           
  8117                           ;vscp_firmware.c: 988: uint8_t bytes;
  8118                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  8119  002D2A  0E07               	movlw	7
  8120  002D2C  6E0E               	movwf	?___lbmod,c
  8121  002D2E  0100               	movlb	0	; () banked
  8122  002D30  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8123  002D32  EC2A  F029         	call	___lbmod
  8124  002D36  0A06               	xorlw	6
  8125  002D38  E103               	bnz	l9848
  8126                           
  8127                           ;vscp_firmware.c: 991: bytes = 7;
  8128  002D3A  0E07               	movlw	7
  8129  002D3C  0100               	movlb	0	; () banked
  8130  002D3E  D009               	goto	L9
  8131  002D40                     l9848:
  8132                           
  8133                           ;vscp_firmware.c: 993: else {
  8134                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  8135  002D40  0E07               	movlw	7
  8136  002D42  6E0E               	movwf	?___lbmod,c
  8137  002D44  0100               	movlb	0	; () banked
  8138  002D46  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8139  002D48  EC2A  F029         	call	___lbmod
  8140  002D4C  0100               	movlb	0	; () banked
  8141  002D4E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8142  002D50  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8143  002D52                     L9:
  8144  002D52  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;vscp_firmware.c: 995: }
  8148                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  8149  002D54  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8150  002D56  0F81               	addlw	129
  8151  002D58  6FCF               	movwf	_vscp_omsg& (0+255),b
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  8161  002D5A  D9C0               	call	PL72	;call to abstracted procedure
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  8165  002D5C  C08B  F0D4         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  8169  002D60  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;vscp_firmware.c: 1005: pos++;
  8173  002D64  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8174  002D66                     l9864:
  8175                           
  8176                           ; BSR set to: 0
  8177  002D66  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8178  002D68                     l9866:
  8179                           
  8180                           ; BSR set to: 0
  8181  002D68  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8182  002D6A  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8183  002D6C  E301 D19F          	bc	l1272
  8184  002D70  D7B7               	goto	l9838
  8185  002D72                     l9868:
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8189  002D72  51BF               	movf	_vscp_nickname& (0+255),w,b
  8190  002D74  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8191  002D78  62DF               	cpfseq	indf2,c
  8192  002D7A  D199               	goto	l1272
  8193                           
  8194                           ; BSR set to: 0
  8195                           ;vscp_firmware.c: 1014: uint8_t i;
  8196                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  8197  002D7C  C0C8  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1156
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8201  002D80  51C1               	movf	_vscp_imsg& (0+255),w,b
  8202  002D82  0FFE               	addlw	254
  8203  002D84  0B07               	andlw	7
  8204  002D86  6F8F               	movwf	vscp_handleProtocolEvent@len_1157& (0+255),b
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  8208  002D88  6B94               	clrf	vscp_handleProtocolEvent@i_1155& (0+255),b
  8209  002D8A  D018               	goto	l9882
  8210  002D8C                     l9876:
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8214  002D8C  5194               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8215  002D8E  0FC9               	addlw	low (_vscp_imsg+8)
  8216  002D90  6ED9               	movwf	fsr2l,c
  8217  002D92  6ADA               	clrf	fsr2h,c
  8218  002D94  50DF               	movf	indf2,w,c
  8219  002D96  6E29               	movwf	?_vscp_writeRegister,c
  8220  002D98  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8221  002D9A  2594               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8222  002D9C  ECAE  F029         	call	_vscp_writeRegister
  8223                           
  8224                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8225  002DA0  0100               	movlb	0	; () banked
  8226  002DA2  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8227  002DA4  2594               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8228  002DA6  ECEE  F029         	call	_vscp_readRegister
  8229  002DAA  0100               	movlb	0	; () banked
  8230  002DAC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8231  002DAE  5194               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8232  002DB0  0FD5               	addlw	low (_vscp_omsg+6)
  8233  002DB2  6ED9               	movwf	fsr2l,c
  8234  002DB4  6ADA               	clrf	fsr2h,c
  8235  002DB6  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8236                           
  8237                           ; BSR set to: 0
  8238  002DBA  2B94               	incf	vscp_handleProtocolEvent@i_1155& (0+255),f,b
  8239  002DBC                     l9882:
  8240                           
  8241                           ; BSR set to: 0
  8242  002DBC  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8243  002DBE  5D94               	subwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8244  002DC0  E3E5               	bnc	l9876
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;vscp_firmware.c: 1022: }
  8248                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  8252                           
  8253                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  8254  002DC2  D98C               	call	PL72	;call to abstracted procedure
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  8258  002DC4  6BD4               	clrf	(_vscp_omsg+5)& (0+255),b
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  8262  002DC6  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8263  002DC8  0F81               	addlw	129
  8264  002DCA  6FCF               	movwf	_vscp_omsg& (0+255),b
  8265  002DCC  D6AE               	goto	l9720
  8266  002DCE                     l9894:
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8270  002DCE  51BF               	movf	_vscp_nickname& (0+255),w,b
  8271  002DD0  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8272  002DD4  62DF               	cpfseq	indf2,c
  8273  002DD6  D16B               	goto	l1272
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8277                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  8278                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8279  002DD8  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  8280  002DDA  EC0F  F00E         	call	_vscp_readAppReg
  8281  002DDE  0100               	movlb	0	; () banked
  8282  002DE0  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8283  002DE2  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8284  002DE4  6E21               	movwf	?_vscp_writeAppReg,c
  8285  002DE6  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  8286  002DE8  EC37  F003         	call	_vscp_writeAppReg
  8287  002DEC  D692               	goto	L8
  8288  002DEE                     l9910:
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8292  002DEE  51BF               	movf	_vscp_nickname& (0+255),w,b
  8293  002DF0  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8294  002DF4  62DF               	cpfseq	indf2,c
  8295  002DF6  D15B               	goto	l1272
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8299                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  8300                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8301  002DF8  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  8302  002DFA  EC0F  F00E         	call	_vscp_readAppReg
  8303  002DFE  0100               	movlb	0	; () banked
  8304  002E00  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8305  002E02  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8306  002E04  6E21               	movwf	?_vscp_writeAppReg,c
  8307  002E06  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  8308  002E08  EC37  F003         	call	_vscp_writeAppReg
  8309  002E0C  D682               	goto	L8
  8310  002E0E                     l9926:
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8314                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  8315  002E0E  51C7               	movf	(_vscp_imsg+6)& (0+255),w,b
  8316  002E10  19BF               	xorwf	_vscp_nickname& (0+255),w,b
  8317  002E12  E003               	bz	l1236
  8318                           
  8319                           ; BSR set to: 0
  8320  002E14  29C7               	incf	(_vscp_imsg+6)& (0+255),w,b
  8321  002E16  E001 D14A          	bnz	l1272
  8322  002E1A                     l1236:
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  8326  002E1A  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  8330  002E1C  0E03               	movlw	3
  8331  002E1E  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8332                           
  8333                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  8334  002E20  0E88               	movlw	136
  8335  002E22  6FCF               	movwf	_vscp_omsg& (0+255),b
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  8339  002E24  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8340  002E26  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8341                           
  8342                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  8343  002E28  0E20               	movlw	32
  8344  002E2A  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  8348  002E2C  6B98               	clrf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8349  002E2E                     l1237:
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;vscp_firmware.c: 1091: {
  8353                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  8357  002E2E  D95D               	call	PL90	;call to abstracted procedure
  8358  002E30                     l9946:
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8362  002E30  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8363  002E32  0FD4               	addlw	low (_vscp_omsg+5)
  8364  002E34  6ED9               	movwf	fsr2l,c
  8365  002E36  6ADA               	clrf	fsr2h,c
  8366  002E38  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8367  002E3A  080F               	sublw	15
  8368  002E3C  EC58  F02A         	call	_vscp_getGUID
  8369  002E40  6EDF               	movwf	indf2,c
  8370  002E42  0100               	movlb	0	; () banked
  8371  002E44  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;vscp_firmware.c: 1096: if (k > 16)
  8375  002E46  0E10               	movlw	16
  8376  002E48  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8377  002E4A  D001               	goto	l9954
  8378  002E4C  D004               	goto	l9958
  8379  002E4E                     l9954:
  8380                           
  8381                           ; BSR set to: 0
  8382  002E4E  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8383                           
  8384                           ; BSR set to: 0
  8385  002E50  0E07               	movlw	7
  8386  002E52  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8387  002E54  D7ED               	goto	l9946
  8388  002E56                     l9958:
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;vscp_firmware.c: 1098: }
  8392                           ;vscp_firmware.c: 1100: if (k > 16)
  8393  002E56  0E10               	movlw	16
  8394  002E58  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8395  002E5A  D001               	goto	l9962
  8396  002E5C  D006               	goto	l1238
  8397  002E5E                     l9962:
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  8401  002E5E  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8402                           
  8403                           ; BSR set to: 0
  8404  002E62  2B98               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8405                           
  8406                           ; BSR set to: 0
  8407  002E64  0E02               	movlw	2
  8408  002E66  6598               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8409  002E68  D7E2               	goto	l1237
  8410  002E6A                     l1238:
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;vscp_firmware.c: 1104: }
  8414                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  8415  002E6A  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8416  002E6C                     l9972:
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;vscp_firmware.c: 1107: {
  8420                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  8421  002E6C  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8422  002E6E  EC20  F02A         	call	_vscp_getMDF_URL
  8423  002E72  0900               	iorlw	0
  8424  002E74  E008               	bz	l9976
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8428  002E76  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8429  002E78  0FD7               	addlw	low (_vscp_omsg+8)
  8430  002E7A  6ED9               	movwf	fsr2l,c
  8431  002E7C  6ADA               	clrf	fsr2h,c
  8432  002E7E  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8433  002E80  EC20  F02A         	call	_vscp_getMDF_URL
  8434  002E84  D005               	goto	L10
  8435  002E86                     l9976:
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;vscp_firmware.c: 1110: else
  8439                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  8440  002E86  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8441  002E88  0FD7               	addlw	low (_vscp_omsg+8)
  8442  002E8A  6ED9               	movwf	fsr2l,c
  8443  002E8C  6ADA               	clrf	fsr2h,c
  8444  002E8E  0E00               	movlw	0
  8445  002E90                     L10:
  8446  002E90  6EDF               	movwf	indf2,c
  8447                           
  8448                           ; BSR set to: 0
  8449  002E92  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8450                           
  8451                           ; BSR set to: 0
  8452  002E94  0E04               	movlw	4
  8453  002E96  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8454  002E98  D7E9               	goto	l9972
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;vscp_firmware.c: 1112: }
  8458                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  8459  002E9A  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;vscp_firmware.c: 1116: k = 5;
  8463  002E9E  0E05               	movlw	5
  8464  002EA0  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  8468  002EA2  0E03               	movlw	3
  8469  002EA4  6F98               	movwf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8470  002EA6                     l1247:
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;vscp_firmware.c: 1118: {
  8474                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  8478  002EA6  D921               	call	PL90	;call to abstracted procedure
  8479  002EA8                     l9998:
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8483  002EA8  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8484  002EAA  0FD4               	addlw	low (_vscp_omsg+5)
  8485  002EAC  6ED9               	movwf	fsr2l,c
  8486  002EAE  6ADA               	clrf	fsr2h,c
  8487  002EB0  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8488  002EB2  EC20  F02A         	call	_vscp_getMDF_URL
  8489  002EB6  6EDF               	movwf	indf2,c
  8490                           
  8491                           ; BSR set to: 0
  8492  002EB8  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8493                           
  8494                           ; BSR set to: 0
  8495  002EBA  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8496                           
  8497                           ; BSR set to: 0
  8498  002EBC  0E07               	movlw	7
  8499  002EBE  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8500  002EC0  D7F3               	goto	l9998
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;vscp_firmware.c: 1123: }
  8504                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  8505  002EC2  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8506                           
  8507                           ; BSR set to: 0
  8508  002EC6  2B98               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8509                           
  8510                           ; BSR set to: 0
  8511  002EC8  0E06               	movlw	6
  8512  002ECA  6598               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8513  002ECC  D7EC               	goto	l1247
  8514  002ECE  D0EF               	goto	l1272
  8515  002ED0                     l10012:
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8519  002ED0  51BF               	movf	_vscp_nickname& (0+255),w,b
  8520  002ED2  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8521  002ED6  62DF               	cpfseq	indf2,c
  8522  002ED8  D0EA               	goto	l1272
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  8526  002EDA  0E03               	movlw	3
  8527  002EDC  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8528                           
  8529                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  8530  002EDE  0E87               	movlw	135
  8531  002EE0  6FCF               	movwf	_vscp_omsg& (0+255),b
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  8535  002EE2  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8536  002EE4  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8537                           
  8538                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  8539  002EE6  0E22               	movlw	34
  8540  002EE8  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8544  002EEA  0ED4               	movlw	(_vscp_omsg+5)& (0+255)
  8545  002EEC  ECFB  F029         	call	_vscp_getMatrixInfo
  8546  002EF0  D61C               	goto	l9720
  8547  002EF2                     l10022:
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8551  002EF2  51BF               	movf	_vscp_nickname& (0+255),w,b
  8552  002EF4  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8553  002EF8  62DF               	cpfseq	indf2,c
  8554  002EFA  D0D9               	goto	l1272
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  8558  002EFC  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8559                           
  8560                           ; BSR set to: 0
  8561                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  8562                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8563  002EFE  C0C1  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8564  002F02  0E0F               	movlw	15
  8565  002F04  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8566  002F06  0E04               	movlw	4
  8567  002F08  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8568  002F0A  E312               	bnc	l10038
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  8572  002F0C  C0CB  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1162
  8573  002F10  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  8577  002F12  5197               	movf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8578  002F14  1196               	iorwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8579  002F16  E103               	bnz	l10034
  8580                           
  8581                           ; BSR set to: 0
  8582  002F18  0E01               	movlw	1
  8583  002F1A  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8584  002F1C  6B96               	clrf	vscp_handleProtocolEvent@bytes_1162& (0+255),b
  8585  002F1E                     l10034:
  8586                           
  8587                           ; BSR set to: 0
  8588                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  8589  002F1E  0E01               	movlw	1
  8590  002F20  5D96               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8591  002F22  0E01               	movlw	1
  8592  002F24  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8593  002F26  E307               	bnc	l10040
  8594                           
  8595                           ; BSR set to: 0
  8596  002F28  0E01               	movlw	1
  8597  002F2A  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8598  002F2C  0E00               	movlw	0
  8599  002F2E  D002               	goto	L12
  8600  002F30                     l10038:
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;vscp_firmware.c: 1173: else {
  8604                           ;vscp_firmware.c: 1174: bytes = 1;
  8605  002F30  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8606  002F32  0E01               	movlw	1
  8607  002F34                     L12:
  8608  002F34  6F96               	movwf	vscp_handleProtocolEvent@bytes_1162& (0+255),b
  8609  002F36                     l10040:
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;vscp_firmware.c: 1175: }
  8613                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  8614  002F36  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8615  002F3A  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8619  002F3E  D8B8               	call	PL38	;call to abstracted procedure
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  8623  002F40  0E07               	movlw	7
  8624  002F42  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  8640  002F44  D8C1               	call	PL52	;call to abstracted procedure
  8641  002F46                     l10056:
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  8645  002F46  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8646  002F48  5D96               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8647  002F4A  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8648  002F4C  0E00               	movlw	0
  8649  002F4E  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8650  002F50  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8651  002F52  0E04               	movlw	4
  8652  002F54  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8653  002F56  0E00               	movlw	0
  8654  002F58  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8655  002F5A  E302               	bnc	l10060
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  8659  002F5C  0E04               	movlw	4
  8660  002F5E  D002               	goto	L13
  8661  002F60                     l10060:
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;vscp_firmware.c: 1198: else {
  8665                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  8666  002F60  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8667  002F62  5D96               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8668  002F64                     L13:
  8669  002F64  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;vscp_firmware.c: 1200: }
  8673                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8674  002F66  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8675  002F68  0F84               	addlw	132
  8676  002F6A  6FCF               	movwf	_vscp_omsg& (0+255),b
  8677                           
  8678                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  8679                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  8680  002F6C  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8681  002F6E  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8682  002F70  6FD7               	movwf	(_vscp_omsg+8)& (0+255),b
  8683                           
  8684                           ; BSR set to: 0
  8685                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8686  002F72  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8687  002F74  D00E               	goto	l10068
  8688  002F76                     l10064:
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  8692                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8693  002F76  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8694  002F78  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8695  002F7A  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8696  002F7C  ECEE  F029         	call	_vscp_readRegister
  8697  002F80  0100               	movlb	0	; () banked
  8698  002F82  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8699  002F84  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8700  002F86  0FD8               	addlw	low (_vscp_omsg+9)
  8701  002F88  6ED9               	movwf	fsr2l,c
  8702  002F8A  6ADA               	clrf	fsr2h,c
  8703  002F8C  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8704                           
  8705                           ; BSR set to: 0
  8706  002F90  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8707  002F92                     l10068:
  8708                           
  8709                           ; BSR set to: 0
  8710  002F92  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8711  002F94  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8712  002F96  E3EF               	bnc	l10064
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;vscp_firmware.c: 1211: }
  8716                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  8717  002F98  EC3E  F029         	call	_vscp_sendEvent	;wreg free
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  8721  002F9C  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8722  002F9E  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  8726  002FA0  2BD4               	incf	(_vscp_omsg+5)& (0+255),f,b
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  8730  002FA2  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8731  002FA4  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8732  002FA6  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8733  002FA8  5196               	movf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8734  002FAA  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8735  002FAC  5197               	movf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8736  002FAE  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8737  002FB0  E3CA               	bnc	l10056
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  8741  002FB2  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8742  002FB6  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8743  002FBA  D079               	goto	l1272
  8744  002FBC                     l10078:
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8748  002FBC  51BF               	movf	_vscp_nickname& (0+255),w,b
  8749  002FBE  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8750  002FC2  62DF               	cpfseq	indf2,c
  8751  002FC4  D074               	goto	l1272
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;vscp_firmware.c: 1234: uint8_t i;
  8755                           ;vscp_firmware.c: 1235: uint16_t page_save;
  8756                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  8757  002FC6  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1167
  8758  002FCA  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1167+1
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8762  002FCE  D870               	call	PL38	;call to abstracted procedure
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  8766  002FD0  C0CA  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1166
  8767                           
  8768                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8769                           ;vscp_firmware.c: 1248: i++) {
  8770  002FD4  D014               	goto	l10090
  8771  002FD6                     l10086:
  8772                           
  8773                           ; BSR set to: 0
  8774                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8775                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8776  002FD6  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8777  002FD8  08CB               	sublw	low (_vscp_imsg+10)
  8778  002FDA  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8779  002FDC  6ED9               	movwf	fsr2l,c
  8780  002FDE  6ADA               	clrf	fsr2h,c
  8781  002FE0  50DF               	movf	indf2,w,c
  8782  002FE2  6E29               	movwf	?_vscp_writeRegister,c
  8783  002FE4  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8784  002FE6  ECAE  F029         	call	_vscp_writeRegister
  8785  002FEA  0100               	movlb	0	; () banked
  8786  002FEC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8787  002FEE  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8788  002FF0  08D8               	sublw	low (_vscp_omsg+9)
  8789  002FF2  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8790  002FF4  6ED9               	movwf	fsr2l,c
  8791  002FF6  6ADA               	clrf	fsr2h,c
  8792  002FF8  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8793                           
  8794                           ; BSR set to: 0
  8795  002FFC  2B92               	incf	vscp_handleProtocolEvent@i_1166& (0+255),f,b
  8796  002FFE                     l10090:
  8797                           
  8798                           ; BSR set to: 0
  8799  002FFE  51C1               	movf	_vscp_imsg& (0+255),w,b
  8800  003000  0B0F               	andlw	15
  8801  003002  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8802  003004  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8803  003006  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8804  003008  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8805  00300A  0E00               	movlw	0
  8806  00300C  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8807  00300E  0EFC               	movlw	252
  8808  003010  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8809  003012  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8810  003014  0EFF               	movlw	255
  8811  003016  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8812  003018  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8813  00301A  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8814  00301C  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8815  00301E  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8816  003020  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8817  003022  0A80               	xorlw	128
  8818  003024  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8819  003026  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8820  003028  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8821  00302A  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8822  00302C  0A80               	xorlw	128
  8823  00302E  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8824  003030  E3D2               	bnc	l10086
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;vscp_firmware.c: 1251: }
  8828                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8829  003032  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1167,_vscp_page_select
  8830  003036  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1167+1,_vscp_page_select+1
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8834  00303A  0E07               	movlw	7
  8835  00303C  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8839  00303E  51C1               	movf	_vscp_imsg& (0+255),w,b
  8840  003040  0B0F               	andlw	15
  8841  003042  0F80               	addlw	128
  8842  003044  6FCF               	movwf	_vscp_omsg& (0+255),b
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8858  003046  D840               	call	PL52	;call to abstracted procedure
  8859                           
  8860                           ; BSR set to: 0
  8861                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8862  003048  C0CA  F0D7         	movff	_vscp_imsg+9,_vscp_omsg+8
  8863  00304C  D56E               	goto	l9720
  8864  00304E                     l10112:
  8865                           
  8866                           ; BSR set to: 0
  8867  00304E  51C5               	movf	(_vscp_imsg+4)& (0+255),w,b
  8868                           
  8869                           ; Switch size 1, requested type "space"
  8870                           ; Number of cases is 16, Range of values is 1 to 38
  8871                           ; switch strategies available:
  8872                           ; Name         Instructions Cycles
  8873                           ; simple_byte           49    25 (average)
  8874                           ;	Chosen strategy is simple_byte
  8875  003050  0A01               	xorlw	1	; case 1
  8876  003052  E101 D542          	bz	l9694
  8877  003056  0A03               	xorlw	3	; case 2
  8878  003058  E101 D542          	bz	l9696
  8879  00305C  0A04               	xorlw	4	; case 6
  8880  00305E  E101 D542          	bz	l9698
  8881  003062  0A0E               	xorlw	14	; case 8
  8882  003064  E101 D542          	bz	l9700
  8883  003068  0A01               	xorlw	1	; case 9
  8884  00306A  E101 D542          	bz	l9702
  8885  00306E  0A02               	xorlw	2	; case 11
  8886  003070  E101 D562          	bz	l9736
  8887  003074  0A07               	xorlw	7	; case 12
  8888  003076  E101 D578          	bz	l9770
  8889  00307A  0A1B               	xorlw	27	; case 23
  8890  00307C  E101 D60D          	bz	l9828
  8891  003080  0A0F               	xorlw	15	; case 24
  8892  003082  E101 D621          	bz	l9834
  8893  003086  0A01               	xorlw	1	; case 25
  8894  003088  E101 D673          	bz	l9868
  8895  00308C  0A04               	xorlw	4	; case 29
  8896  00308E  E101 D69E          	bz	l9894
  8897  003092  0A03               	xorlw	3	; case 30
  8898  003094  E101 D6AB          	bz	l9910
  8899  003098  0A01               	xorlw	1	; case 31
  8900  00309A  E101 D6B8          	bz	l9926
  8901  00309E  0A3E               	xorlw	62	; case 33
  8902  0030A0  E101 D716          	bz	l10012
  8903  0030A4  0A04               	xorlw	4	; case 37
  8904  0030A6  E101 D724          	bz	l10022
  8905  0030AA  0A03               	xorlw	3	; case 38
  8906  0030AC  E087               	bz	l10078
  8907  0030AE                     l1272:
  8908  0030AE  0012               	return	
  8909  0030B0                     __end_of_vscp_handleProtocolEvent:
  8910                           	opt stack 0
  8911  0030B0                     PL38:
  8912                           	opt stack 22
  8913  0030B0  51C9               	movf	(_vscp_imsg+8)& (0+255),w,b
  8914  0030B2  C0C8  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8915  0030B6  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8916  0030B8  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8917  0030BC  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8918  0030BE  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8919  0030C0  6E46               	movwf	_vscp_page_select,c
  8920  0030C2  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8921  0030C4  6E47               	movwf	_vscp_page_select+1,c
  8922  0030C6  0012               	return	
  8923  0030C8                     __end_ofPL38:
  8924                           	opt stack 0
  8925  0030C8                     PL52:
  8926                           	opt stack 22
  8927  0030C8  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8928  0030CA  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8929  0030CC  0E27               	movlw	39
  8930  0030CE  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8931  0030D0  6BD4               	clrf	(_vscp_omsg+5)& (0+255),b
  8932  0030D2  C0C8  F0D5         	movff	_vscp_imsg+7,_vscp_omsg+6
  8933  0030D6  C0C9  F0D6         	movff	_vscp_imsg+8,_vscp_omsg+7
  8934  0030DA  0012               	return	
  8935  0030DC                     __end_ofPL52:
  8936                           	opt stack 0
  8937  0030DC                     PL72:
  8938                           	opt stack 22
  8939  0030DC  0E07               	movlw	7
  8940  0030DE  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8941  0030E0  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8942  0030E2  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8943  0030E4  0E1A               	movlw	26
  8944  0030E6  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8945  0030E8  0C1A               	retlw	26
  8946  0030EA                     __end_ofPL72:
  8947                           	opt stack 0
  8948  0030EA                     PL90:
  8949                           	opt stack 22
  8950  0030EA  C098  F0D4         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8951  0030EE  0E01               	movlw	1
  8952  0030F0  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8953  0030F2  0C01               	retlw	1
  8954  0030F4                     __end_ofPL90:
  8955                           	opt stack 0
  8956                           tblptru	equ	0xFF8
  8957                           tblptrh	equ	0xFF7
  8958                           tblptrl	equ	0xFF6
  8959                           tablat	equ	0xFF5
  8960                           prodh	equ	0xFF4
  8961                           prodl	equ	0xFF3
  8962                           intcon	equ	0xFF2
  8963                           postinc0	equ	0xFEE
  8964                           wreg	equ	0xFE8
  8965                           indf1	equ	0xFE7
  8966                           postdec1	equ	0xFE5
  8967                           fsr1h	equ	0xFE2
  8968                           fsr1l	equ	0xFE1
  8969                           indf2	equ	0xFDF
  8970                           postinc2	equ	0xFDE
  8971                           postdec2	equ	0xFDD
  8972                           plusw2	equ	0xFDB
  8973                           fsr2h	equ	0xFDA
  8974                           fsr2l	equ	0xFD9
  8975                           status	equ	0xFD8
  8976                           
  8977 ;; *************** function ___lbmod *****************
  8978 ;; Defined at:
  8979 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8980 ;; Parameters:    Size  Location     Type
  8981 ;;  dividend        1    wreg     unsigned char 
  8982 ;;  divisor         1   13[COMRAM] unsigned char 
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;  dividend        1   14[COMRAM] unsigned char 
  8985 ;;  rem             1   16[COMRAM] unsigned char 
  8986 ;;  counter         1   15[COMRAM] unsigned char 
  8987 ;; Return value:  Size  Location     Type
  8988 ;;                  1    wreg      unsigned char 
  8989 ;; Registers used:
  8990 ;;		wreg, status,2, status,0
  8991 ;; Tracked objects:
  8992 ;;		On entry : F/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8996 ;;      Params:         1       0       0       0       0       0       0
  8997 ;;      Locals:         3       0       0       0       0       0       0
  8998 ;;      Temps:          0       0       0       0       0       0       0
  8999 ;;      Totals:         4       0       0       0       0       0       0
  9000 ;;Total ram usage:        4 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    2
  9003 ;; This function calls:
  9004 ;;		Nothing
  9005 ;; This function is called by:
  9006 ;;		_vscp_handleProtocolEvent
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           	psect	text34
  9011  005254                     __ptext34:
  9012                           	opt stack 0
  9013  005254                     ___lbmod:
  9014                           	opt stack 27
  9015                           
  9016                           ;incstack = 0
  9017                           ;incstack = 0
  9018                           ;___lbmod@dividend stored from wreg
  9019  005254  CFE8 F00F          	movff	wreg,___lbmod@dividend
  9020                           
  9021                           ; BSR set to: 0
  9022  005258  0E08               	movlw	8
  9023  00525A  6E10               	movwf	___lbmod@counter,c
  9024                           
  9025                           ; BSR set to: 0
  9026  00525C  6A11               	clrf	___lbmod@rem,c
  9027  00525E                     l9130:
  9028  00525E  90D8               	bcf	status,0,c
  9029  005260  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  9030  005262  3411               	rlcf	___lbmod@rem& (0+255),w,c
  9031  005264  6E11               	movwf	___lbmod@rem,c
  9032  005266  90D8               	bcf	status,0,c
  9033  005268  360F               	rlcf	___lbmod@dividend,f,c
  9034  00526A  500E               	movf	___lbmod@divisor,w,c
  9035  00526C  5C11               	subwf	___lbmod@rem,w,c
  9036  00526E  E302               	bnc	l9138
  9037  005270  500E               	movf	___lbmod@divisor,w,c
  9038  005272  5E11               	subwf	___lbmod@rem,f,c
  9039  005274                     l9138:
  9040  005274  2E10               	decfsz	___lbmod@counter,f,c
  9041  005276  D7F3               	goto	l9130
  9042  005278  5011               	movf	___lbmod@rem,w,c
  9043  00527A  0012               	return	
  9044  00527C                     __end_of___lbmod:
  9045                           	opt stack 0
  9046                           tblptru	equ	0xFF8
  9047                           tblptrh	equ	0xFF7
  9048                           tblptrl	equ	0xFF6
  9049                           tablat	equ	0xFF5
  9050                           prodh	equ	0xFF4
  9051                           prodl	equ	0xFF3
  9052                           intcon	equ	0xFF2
  9053                           postinc0	equ	0xFEE
  9054                           wreg	equ	0xFE8
  9055                           indf1	equ	0xFE7
  9056                           postdec1	equ	0xFE5
  9057                           fsr1h	equ	0xFE2
  9058                           fsr1l	equ	0xFE1
  9059                           indf2	equ	0xFDF
  9060                           postinc2	equ	0xFDE
  9061                           postdec2	equ	0xFDD
  9062                           plusw2	equ	0xFDB
  9063                           fsr2h	equ	0xFDA
  9064                           fsr2l	equ	0xFD9
  9065                           status	equ	0xFD8
  9066                           
  9067 ;; *************** function _vscp_writeRegister *****************
  9068 ;; Defined at:
  9069 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;  reg             1    wreg     unsigned char 
  9072 ;;  value           1   40[COMRAM] unsigned char 
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;  reg             1   41[COMRAM] unsigned char 
  9075 ;; Return value:  Size  Location     Type
  9076 ;;                  1    wreg      unsigned char 
  9077 ;; Registers used:
  9078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9079 ;; Tracked objects:
  9080 ;;		On entry : F/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9084 ;;      Params:         1       0       0       0       0       0       0
  9085 ;;      Locals:         1       0       0       0       0       0       0
  9086 ;;      Temps:          0       0       0       0       0       0       0
  9087 ;;      Totals:         2       0       0       0       0       0       0
  9088 ;;Total ram usage:        2 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    7
  9091 ;; This function calls:
  9092 ;;		_vscp_writeAppReg
  9093 ;;		_vscp_writeStdReg
  9094 ;; This function is called by:
  9095 ;;		_vscp_handleProtocolEvent
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           	psect	text35
  9100  00535C                     __ptext35:
  9101                           	opt stack 0
  9102  00535C                     _vscp_writeRegister:
  9103                           	opt stack 22
  9104                           
  9105                           ;incstack = 0
  9106                           ;incstack = 0
  9107                           ;vscp_writeRegister@reg stored from wreg
  9108  00535C  CFE8 F02A          	movff	wreg,vscp_writeRegister@reg
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  9112  005360  0E7F               	movlw	127
  9113  005362  642A               	cpfsgt	vscp_writeRegister@reg,c
  9114  005364  D006               	goto	l11372
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  9118  005366  C029  F022         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9119  00536A  502A               	movf	vscp_writeRegister@reg,w,c
  9120  00536C  EC37  F01F         	call	_vscp_writeStdReg
  9121  005370  D005               	goto	l1152
  9122  005372                     l11372:
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;vscp_firmware.c: 705: else {
  9126                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  9127  005372  C029  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9128  005376  502A               	movf	vscp_writeRegister@reg,w,c
  9129  005378  EC37  F003         	call	_vscp_writeAppReg
  9130  00537C                     l1152:
  9131  00537C  0012               	return	
  9132  00537E                     __end_of_vscp_writeRegister:
  9133                           	opt stack 0
  9134                           tblptru	equ	0xFF8
  9135                           tblptrh	equ	0xFF7
  9136                           tblptrl	equ	0xFF6
  9137                           tablat	equ	0xFF5
  9138                           prodh	equ	0xFF4
  9139                           prodl	equ	0xFF3
  9140                           intcon	equ	0xFF2
  9141                           postinc0	equ	0xFEE
  9142                           wreg	equ	0xFE8
  9143                           indf1	equ	0xFE7
  9144                           postdec1	equ	0xFE5
  9145                           fsr1h	equ	0xFE2
  9146                           fsr1l	equ	0xFE1
  9147                           indf2	equ	0xFDF
  9148                           postinc2	equ	0xFDE
  9149                           postdec2	equ	0xFDD
  9150                           plusw2	equ	0xFDB
  9151                           fsr2h	equ	0xFDA
  9152                           fsr2l	equ	0xFD9
  9153                           status	equ	0xFD8
  9154                           
  9155 ;; *************** function _vscp_writeStdReg *****************
  9156 ;; Defined at:
  9157 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;  reg             1    wreg     unsigned char 
  9160 ;;  value           1   33[COMRAM] unsigned char 
  9161 ;; Auto vars:     Size  Location     Type
  9162 ;;  reg             1   39[COMRAM] unsigned char 
  9163 ;;  rv              1   38[COMRAM] unsigned char 
  9164 ;; Return value:  Size  Location     Type
  9165 ;;                  1    wreg      unsigned char 
  9166 ;; Registers used:
  9167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9168 ;; Tracked objects:
  9169 ;;		On entry : F/0
  9170 ;;		On exit  : 0/0
  9171 ;;		Unchanged: 0/0
  9172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9173 ;;      Params:         1       0       0       0       0       0       0
  9174 ;;      Locals:         2       0       0       0       0       0       0
  9175 ;;      Temps:          4       0       0       0       0       0       0
  9176 ;;      Totals:         7       0       0       0       0       0       0
  9177 ;;Total ram usage:        7 bytes
  9178 ;; Hardware stack levels used:    1
  9179 ;; Hardware stack levels required when called:    6
  9180 ;; This function calls:
  9181 ;;		_vscp_getGUID
  9182 ;;		_vscp_setGUID
  9183 ;;		_vscp_getUserID
  9184 ;;		_vscp_setUserID
  9185 ;;		_vscp_getManufacturerId
  9186 ;;		_vscp_setManufacturerId
  9187 ;;		_vscp_restoreDefaults
  9188 ;; This function is called by:
  9189 ;;		_vscp_writeRegister
  9190 ;;		_vscp_handleProtocolEvent
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           	psect	text36
  9195  003E6E                     __ptext36:
  9196                           	opt stack 0
  9197  003E6E                     _vscp_writeStdReg:
  9198                           	opt stack 23
  9199                           
  9200                           ;incstack = 0
  9201                           ;incstack = 0
  9202                           ;vscp_writeStdReg@reg stored from wreg
  9203  003E6E  CFE8 F028          	movff	wreg,vscp_writeStdReg@reg
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  9207  003E72  1C22               	comf	vscp_writeStdReg@value,w,c
  9208  003E74  6E27               	movwf	vscp_writeStdReg@rv,c
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  9212                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  9213  003E76  0E83               	movlw	131
  9214  003E78  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9215  003E7A  D00E               	goto	l11384
  9216                           
  9217                           ; BSR set to: 0
  9218  003E7C  0E89               	movlw	137
  9219  003E7E  6028               	cpfslt	vscp_writeStdReg@reg,c
  9220  003E80  D00B               	goto	l11384
  9221                           
  9222                           ; BSR set to: 0
  9223                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  9224  003E82  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9225  003E86  5028               	movf	vscp_writeStdReg@reg,w,c
  9226  003E88  0F7C               	addlw	124
  9227  003E8A  EC14  F02A         	call	_vscp_setUserID
  9228                           
  9229                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  9230  003E8E  5028               	movf	vscp_writeStdReg@reg,w,c
  9231  003E90  0F7C               	addlw	124
  9232  003E92  EC4E  F02A         	call	_vscp_getUserID
  9233  003E96  D069               	goto	L19
  9234  003E98                     l11384:
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  9238  003E98  5028               	movf	vscp_writeStdReg@reg,w,c
  9239  003E9A  0A92               	xorlw	146
  9240  003E9C  E10D               	bnz	l11390
  9241                           
  9242                           ; BSR set to: 0
  9243                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9244  003E9E  5022               	movf	vscp_writeStdReg@value,w,c
  9245  003EA0  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9246  003EA2  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9247  003EA4  5046               	movf	_vscp_page_select,w,c
  9248  003EA6  6E25               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9249  003EA8  6A26               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9250  003EAA  1023               	iorwf	??_vscp_writeStdReg,w,c
  9251  003EAC  6E46               	movwf	_vscp_page_select,c
  9252  003EAE  5024               	movf	??_vscp_writeStdReg+1,w,c
  9253  003EB0  1026               	iorwf	??_vscp_writeStdReg+3,w,c
  9254  003EB2  6E47               	movwf	_vscp_page_select+1,c
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  9258  003EB4  5047               	movf	_vscp_page_select+1,w,c
  9259  003EB6  D059               	goto	L19
  9260  003EB8                     l11390:
  9261                           
  9262                           ; BSR set to: 0
  9263                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  9264  003EB8  5028               	movf	vscp_writeStdReg@reg,w,c
  9265  003EBA  0A93               	xorlw	147
  9266  003EBC  E10B               	bnz	l11396
  9267                           
  9268                           ; BSR set to: 0
  9269                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9270  003EBE  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9271  003EC0  5047               	movf	_vscp_page_select+1,w,c
  9272  003EC2  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9273  003EC4  5022               	movf	vscp_writeStdReg@value,w,c
  9274  003EC6  1023               	iorwf	??_vscp_writeStdReg,w,c
  9275  003EC8  6E46               	movwf	_vscp_page_select,c
  9276  003ECA  5024               	movf	??_vscp_writeStdReg+1,w,c
  9277  003ECC  6E47               	movwf	_vscp_page_select+1,c
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  9281  003ECE  C046  F027         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9282                           
  9283                           ;vscp_firmware.c: 737: }
  9284  003ED2  D04E               	goto	l11438
  9285  003ED4                     l11396:
  9286                           
  9287                           ; BSR set to: 0
  9288                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  9289  003ED4  0E88               	movlw	136
  9290  003ED6  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9291  003ED8  D019               	goto	l11408
  9292                           
  9293                           ; BSR set to: 0
  9294  003EDA  0E91               	movlw	145
  9295  003EDC  6028               	cpfslt	vscp_writeStdReg@reg,c
  9296  003EDE  D016               	goto	l11408
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9300                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  9301  003EE0  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9302  003EE4  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9303  003EE8  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9304  003EEA  2824               	incf	??_vscp_writeStdReg+1,w,c
  9305  003EEC  E102               	bnz	l11404
  9306                           
  9307                           ; BSR set to: 0
  9308  003EEE  2846               	incf	_vscp_page_select,w,c
  9309  003EF0  E002               	bz	l11406
  9310  003EF2                     l11404:
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;vscp_firmware.c: 747: rv = ~value;
  9314  003EF2  1C22               	comf	vscp_writeStdReg@value,w,c
  9315  003EF4  D03A               	goto	L19
  9316  003EF6                     l11406:
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;vscp_firmware.c: 749: else {
  9320                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  9321  003EF6  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9322  003EFA  5028               	movf	vscp_writeStdReg@reg,w,c
  9323  003EFC  0F77               	addlw	119
  9324  003EFE  EC08  F02A         	call	_vscp_setManufacturerId
  9325                           
  9326                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  9327  003F02  5028               	movf	vscp_writeStdReg@reg,w,c
  9328  003F04  0F77               	addlw	119
  9329  003F06  EC44  F02A         	call	_vscp_getManufacturerId
  9330  003F0A  D02F               	goto	L19
  9331  003F0C                     l11408:
  9332                           
  9333                           ; BSR set to: 0
  9334                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9335  003F0C  0ECF               	movlw	207
  9336  003F0E  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9337  003F10  D017               	goto	l11420
  9338                           
  9339                           ; BSR set to: 0
  9340  003F12  0EE0               	movlw	224
  9341  003F14  6028               	cpfslt	vscp_writeStdReg@reg,c
  9342  003F16  D014               	goto	l11420
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9346                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  9347  003F18  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9348  003F1C  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9349  003F20  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9350  003F22  2824               	incf	??_vscp_writeStdReg+1,w,c
  9351  003F24  E1E6               	bnz	l11404
  9352                           
  9353                           ; BSR set to: 0
  9354  003F26  2846               	incf	_vscp_page_select,w,c
  9355  003F28  E1E4               	bnz	l11404
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;vscp_firmware.c: 762: else {
  9359                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  9360  003F2A  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9361  003F2E  5028               	movf	vscp_writeStdReg@reg,w,c
  9362  003F30  0F30               	addlw	48
  9363  003F32  ECBF  F029         	call	_vscp_setGUID
  9364                           
  9365                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  9366  003F36  5028               	movf	vscp_writeStdReg@reg,w,c
  9367  003F38  0F30               	addlw	48
  9368  003F3A  EC58  F02A         	call	_vscp_getGUID
  9369  003F3E  D015               	goto	L19
  9370  003F40                     l11420:
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  9374  003F40  5028               	movf	vscp_writeStdReg@reg,w,c
  9375  003F42  0AA2               	xorlw	162
  9376  003F44  E1D6               	bnz	l11404
  9377                           
  9378                           ; BSR set to: 0
  9379                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  9380  003F46  5022               	movf	vscp_writeStdReg@value,w,c
  9381  003F48  0A55               	xorlw	85
  9382  003F4A  E104               	bnz	l11428
  9383                           
  9384                           ; BSR set to: 0
  9385                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  9386  003F4C  6BB4               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9387  003F4E  6BB5               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;vscp_firmware.c: 771: rv = 0x55;
  9391  003F50  0E55               	movlw	85
  9392  003F52  D00B               	goto	L19
  9393  003F54                     l11428:
  9394                           
  9395                           ; BSR set to: 0
  9396                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  9397  003F54  5022               	movf	vscp_writeStdReg@value,w,c
  9398  003F56  0AAA               	xorlw	170
  9399  003F58  E10B               	bnz	l11438
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  9403  003F5A  0EE8               	movlw	232
  9404  003F5C  5DB4               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9405  003F5E  0E03               	movlw	3
  9406  003F60  59B5               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9407  003F62  E205               	bc	l1178
  9408                           
  9409                           ; BSR set to: 0
  9410                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  9411  003F64  ECB7  F02A         	call	_vscp_restoreDefaults	;wreg free
  9412                           
  9413                           ; BSR set to: 1
  9414                           ;vscp_firmware.c: 776: rv = 0xaa;
  9415  003F68  0EAA               	movlw	170
  9416  003F6A                     L19:
  9417  003F6A  6E27               	movwf	vscp_writeStdReg@rv,c
  9418                           
  9419                           ;vscp_firmware.c: 777: }
  9420  003F6C  D001               	goto	l11438
  9421  003F6E                     l1178:
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;vscp_firmware.c: 778: else {
  9425                           ;vscp_firmware.c: 779: rv = 0;
  9426  003F6E  6A27               	clrf	vscp_writeStdReg@rv,c
  9427  003F70                     l11438:
  9428                           
  9429                           ;vscp_firmware.c: 787: }
  9430                           ;vscp_firmware.c: 789: return rv;
  9431  003F70  5027               	movf	vscp_writeStdReg@rv,w,c
  9432  003F72  0012               	return	
  9433  003F74                     __end_of_vscp_writeStdReg:
  9434                           	opt stack 0
  9435                           tblptru	equ	0xFF8
  9436                           tblptrh	equ	0xFF7
  9437                           tblptrl	equ	0xFF6
  9438                           tablat	equ	0xFF5
  9439                           prodh	equ	0xFF4
  9440                           prodl	equ	0xFF3
  9441                           intcon	equ	0xFF2
  9442                           postinc0	equ	0xFEE
  9443                           wreg	equ	0xFE8
  9444                           indf1	equ	0xFE7
  9445                           postdec1	equ	0xFE5
  9446                           fsr1h	equ	0xFE2
  9447                           fsr1l	equ	0xFE1
  9448                           indf2	equ	0xFDF
  9449                           postinc2	equ	0xFDE
  9450                           postdec2	equ	0xFDD
  9451                           plusw2	equ	0xFDB
  9452                           fsr2h	equ	0xFDA
  9453                           fsr2l	equ	0xFD9
  9454                           status	equ	0xFD8
  9455                           
  9456 ;; *************** function _vscp_restoreDefaults *****************
  9457 ;; Defined at:
  9458 ;;		line 2835 in file "../main.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;		None
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;		None
  9463 ;; Return value:  Size  Location     Type
  9464 ;;		None               void
  9465 ;; Registers used:
  9466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : F/0
  9469 ;;		On exit  : F/1
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9472 ;;      Params:         0       0       0       0       0       0       0
  9473 ;;      Locals:         0       0       0       0       0       0       0
  9474 ;;      Temps:          0       0       0       0       0       0       0
  9475 ;;      Totals:         0       0       0       0       0       0       0
  9476 ;;Total ram usage:        0 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    5
  9479 ;; This function calls:
  9480 ;;		_init_app_eeprom
  9481 ;;		_init_app_ram
  9482 ;; This function is called by:
  9483 ;;		_vscp_writeStdReg
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           	psect	text37
  9488  00556E                     __ptext37:
  9489                           	opt stack 0
  9490  00556E                     _vscp_restoreDefaults:
  9491                           	opt stack 23
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;main.c: 2836: init_app_eeprom();
  9495                           
  9496                           ;incstack = 0
  9497                           ;incstack = 0
  9498  00556E  ECDA  F011         	call	_init_app_eeprom	;wreg free
  9499                           
  9500                           ;main.c: 2837: init_app_ram();
  9501  005572  EFDA  F027         	goto	_init_app_ram	;wreg free
  9502  005576                     __end_of_vscp_restoreDefaults:
  9503                           	opt stack 0
  9504                           tblptru	equ	0xFF8
  9505                           tblptrh	equ	0xFF7
  9506                           tblptrl	equ	0xFF6
  9507                           tablat	equ	0xFF5
  9508                           prodh	equ	0xFF4
  9509                           prodl	equ	0xFF3
  9510                           intcon	equ	0xFF2
  9511                           postinc0	equ	0xFEE
  9512                           wreg	equ	0xFE8
  9513                           indf1	equ	0xFE7
  9514                           postdec1	equ	0xFE5
  9515                           fsr1h	equ	0xFE2
  9516                           fsr1l	equ	0xFE1
  9517                           indf2	equ	0xFDF
  9518                           postinc2	equ	0xFDE
  9519                           postdec2	equ	0xFDD
  9520                           plusw2	equ	0xFDB
  9521                           fsr2h	equ	0xFDA
  9522                           fsr2l	equ	0xFD9
  9523                           status	equ	0xFD8
  9524                           
  9525 ;; *************** function _init_app_eeprom *****************
  9526 ;; Defined at:
  9527 ;;		line 1022 in file "../main.c"
  9528 ;; Parameters:    Size  Location     Type
  9529 ;;		None
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  i               1   16[COMRAM] unsigned char 
  9532 ;; Return value:  Size  Location     Type
  9533 ;;		None               void
  9534 ;; Registers used:
  9535 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9536 ;; Tracked objects:
  9537 ;;		On entry : 0/1
  9538 ;;		On exit  : 0/0
  9539 ;;		Unchanged: 0/0
  9540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9541 ;;      Params:         0       0       0       0       0       0       0
  9542 ;;      Locals:         1       0       0       0       0       0       0
  9543 ;;      Temps:          0       0       0       0       0       0       0
  9544 ;;      Totals:         1       0       0       0       0       0       0
  9545 ;;Total ram usage:        1 bytes
  9546 ;; Hardware stack levels used:    1
  9547 ;; Hardware stack levels required when called:    3
  9548 ;; This function calls:
  9549 ;;		_writeEEPROM
  9550 ;; This function is called by:
  9551 ;;		_main
  9552 ;;		_vscp_restoreDefaults
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           	psect	text38
  9557  0023B4                     __ptext38:
  9558                           	opt stack 0
  9559  0023B4                     _init_app_eeprom:
  9560                           	opt stack 24
  9561                           
  9562                           ;main.c: 1024: writeEEPROM( 0x41, 0 );
  9563                           
  9564                           ; BSR set to: 1
  9565                           ;incstack = 0
  9566                           ;incstack = 0
  9567  0023B4  6A0F               	clrf	?_writeEEPROM+1,c
  9568  0023B6  0E41               	movlw	65
  9569  0023B8  6E0E               	movwf	?_writeEEPROM,c
  9570  0023BA  0E00               	movlw	0
  9571  0023BC  6A10               	clrf	?_writeEEPROM+2,c
  9572  0023BE  EC65  F029         	call	_writeEEPROM	;wreg free
  9573                           
  9574                           ;main.c: 1025: writeEEPROM( 0x41, 0 );
  9575  0023C2  6A0F               	clrf	?_writeEEPROM+1,c
  9576  0023C4  0E41               	movlw	65
  9577  0023C6  6E0E               	movwf	?_writeEEPROM,c
  9578  0023C8  0E00               	movlw	0
  9579  0023CA  6A10               	clrf	?_writeEEPROM+2,c
  9580  0023CC  EC65  F029         	call	_writeEEPROM	;wreg free
  9581                           
  9582                           ;main.c: 1027: writeEEPROM(0x43, 0b00000001);
  9583  0023D0  6A0F               	clrf	?_writeEEPROM+1,c
  9584  0023D2  0E43               	movlw	67
  9585  0023D4  6E0E               	movwf	?_writeEEPROM,c
  9586  0023D6  0E01               	movlw	1
  9587  0023D8  6E10               	movwf	?_writeEEPROM+2,c
  9588  0023DA  EC65  F029         	call	_writeEEPROM	;wreg free
  9589                           
  9590                           ;main.c: 1028: writeEEPROM(0x44, 0b00000001);
  9591  0023DE  6A0F               	clrf	?_writeEEPROM+1,c
  9592  0023E0  0E44               	movlw	68
  9593  0023E2  6E0E               	movwf	?_writeEEPROM,c
  9594  0023E4  0E01               	movlw	1
  9595  0023E6  6E10               	movwf	?_writeEEPROM+2,c
  9596  0023E8  EC65  F029         	call	_writeEEPROM	;wreg free
  9597                           
  9598                           ;main.c: 1029: writeEEPROM(0x45, 0b00000001);
  9599  0023EC  6A0F               	clrf	?_writeEEPROM+1,c
  9600  0023EE  0E45               	movlw	69
  9601  0023F0  6E0E               	movwf	?_writeEEPROM,c
  9602  0023F2  0E01               	movlw	1
  9603  0023F4  6E10               	movwf	?_writeEEPROM+2,c
  9604  0023F6  EC65  F029         	call	_writeEEPROM	;wreg free
  9605                           
  9606                           ;main.c: 1030: writeEEPROM(0x46, 0b00000001);
  9607  0023FA  6A0F               	clrf	?_writeEEPROM+1,c
  9608  0023FC  0E46               	movlw	70
  9609  0023FE  6E0E               	movwf	?_writeEEPROM,c
  9610  002400  0E01               	movlw	1
  9611  002402  6E10               	movwf	?_writeEEPROM+2,c
  9612  002404  EC65  F029         	call	_writeEEPROM	;wreg free
  9613                           
  9614                           ;main.c: 1031: writeEEPROM(0x47, 0b00000001);
  9615  002408  6A0F               	clrf	?_writeEEPROM+1,c
  9616  00240A  0E47               	movlw	71
  9617  00240C  6E0E               	movwf	?_writeEEPROM,c
  9618  00240E  0E01               	movlw	1
  9619  002410  6E10               	movwf	?_writeEEPROM+2,c
  9620  002412  EC65  F029         	call	_writeEEPROM	;wreg free
  9621                           
  9622                           ;main.c: 1032: writeEEPROM(0x48, 0b00000001);
  9623  002416  6A0F               	clrf	?_writeEEPROM+1,c
  9624  002418  0E48               	movlw	72
  9625  00241A  6E0E               	movwf	?_writeEEPROM,c
  9626  00241C  0E01               	movlw	1
  9627  00241E  6E10               	movwf	?_writeEEPROM+2,c
  9628  002420  EC65  F029         	call	_writeEEPROM	;wreg free
  9629                           
  9630                           ;main.c: 1034: writeEEPROM(0x49, 30);
  9631  002424  6A0F               	clrf	?_writeEEPROM+1,c
  9632  002426  0E49               	movlw	73
  9633  002428  6E0E               	movwf	?_writeEEPROM,c
  9634  00242A  0E1E               	movlw	30
  9635  00242C  6E10               	movwf	?_writeEEPROM+2,c
  9636  00242E  EC65  F029         	call	_writeEEPROM	;wreg free
  9637                           
  9638                           ;main.c: 1035: writeEEPROM(0x4A, 0);
  9639  002432  6A0F               	clrf	?_writeEEPROM+1,c
  9640  002434  0E4A               	movlw	74
  9641  002436  6E0E               	movwf	?_writeEEPROM,c
  9642  002438  0E00               	movlw	0
  9643  00243A  6A10               	clrf	?_writeEEPROM+2,c
  9644  00243C  EC65  F029         	call	_writeEEPROM	;wreg free
  9645                           
  9646                           ;main.c: 1036: writeEEPROM(0x4B, 0);
  9647  002440  6A0F               	clrf	?_writeEEPROM+1,c
  9648  002442  0E4B               	movlw	75
  9649  002444  6E0E               	movwf	?_writeEEPROM,c
  9650  002446  0E00               	movlw	0
  9651  002448  6A10               	clrf	?_writeEEPROM+2,c
  9652  00244A  EC65  F029         	call	_writeEEPROM	;wreg free
  9653                           
  9654                           ;main.c: 1037: writeEEPROM(0x4C, 0);
  9655  00244E  6A0F               	clrf	?_writeEEPROM+1,c
  9656  002450  0E4C               	movlw	76
  9657  002452  6E0E               	movwf	?_writeEEPROM,c
  9658  002454  0E00               	movlw	0
  9659  002456  6A10               	clrf	?_writeEEPROM+2,c
  9660  002458  EC65  F029         	call	_writeEEPROM	;wreg free
  9661                           
  9662                           ;main.c: 1038: writeEEPROM(0x4D, 0);
  9663  00245C  6A0F               	clrf	?_writeEEPROM+1,c
  9664  00245E  0E4D               	movlw	77
  9665  002460  6E0E               	movwf	?_writeEEPROM,c
  9666  002462  0E00               	movlw	0
  9667  002464  6A10               	clrf	?_writeEEPROM+2,c
  9668  002466  EC65  F029         	call	_writeEEPROM	;wreg free
  9669                           
  9670                           ;main.c: 1039: writeEEPROM(0x4E, 0);
  9671  00246A  6A0F               	clrf	?_writeEEPROM+1,c
  9672  00246C  0E4E               	movlw	78
  9673  00246E  6E0E               	movwf	?_writeEEPROM,c
  9674  002470  0E00               	movlw	0
  9675  002472  6A10               	clrf	?_writeEEPROM+2,c
  9676  002474  EC65  F029         	call	_writeEEPROM	;wreg free
  9677                           
  9678                           ;main.c: 1043: writeEEPROM(0x4F, 0x0F);
  9679  002478  6A0F               	clrf	?_writeEEPROM+1,c
  9680  00247A  0E4F               	movlw	79
  9681  00247C  6E0E               	movwf	?_writeEEPROM,c
  9682  00247E  0E0F               	movlw	15
  9683  002480  6E10               	movwf	?_writeEEPROM+2,c
  9684  002482  EC65  F029         	call	_writeEEPROM	;wreg free
  9685                           
  9686                           ;main.c: 1044: writeEEPROM(0x50, 0x68);
  9687  002486  6A0F               	clrf	?_writeEEPROM+1,c
  9688  002488  0E50               	movlw	80
  9689  00248A  6E0E               	movwf	?_writeEEPROM,c
  9690  00248C  0E68               	movlw	104
  9691  00248E  6E10               	movwf	?_writeEEPROM+2,c
  9692  002490  EC65  F029         	call	_writeEEPROM	;wreg free
  9693                           
  9694                           ;main.c: 1046: writeEEPROM(0x51, 0x0D);
  9695  002494  6A0F               	clrf	?_writeEEPROM+1,c
  9696  002496  0E51               	movlw	81
  9697  002498  6E0E               	movwf	?_writeEEPROM,c
  9698  00249A  0E0D               	movlw	13
  9699  00249C  6E10               	movwf	?_writeEEPROM+2,c
  9700  00249E  EC65  F029         	call	_writeEEPROM	;wreg free
  9701                           
  9702                           ;main.c: 1047: writeEEPROM(0x52, 0x7F);
  9703  0024A2  6A0F               	clrf	?_writeEEPROM+1,c
  9704  0024A4  0E52               	movlw	82
  9705  0024A6  6E0E               	movwf	?_writeEEPROM,c
  9706  0024A8  0E7F               	movlw	127
  9707  0024AA  6E10               	movwf	?_writeEEPROM+2,c
  9708  0024AC  EC65  F029         	call	_writeEEPROM	;wreg free
  9709                           
  9710                           ;main.c: 1049: writeEEPROM(0x53, 0x0D);
  9711  0024B0  6A0F               	clrf	?_writeEEPROM+1,c
  9712  0024B2  0E53               	movlw	83
  9713  0024B4  6E0E               	movwf	?_writeEEPROM,c
  9714  0024B6  0E0D               	movlw	13
  9715  0024B8  6E10               	movwf	?_writeEEPROM+2,c
  9716  0024BA  EC65  F029         	call	_writeEEPROM	;wreg free
  9717                           
  9718                           ;main.c: 1050: writeEEPROM(0x54, 0x7F);
  9719  0024BE  6A0F               	clrf	?_writeEEPROM+1,c
  9720  0024C0  0E54               	movlw	84
  9721  0024C2  6E0E               	movwf	?_writeEEPROM,c
  9722  0024C4  0E7F               	movlw	127
  9723  0024C6  6E10               	movwf	?_writeEEPROM+2,c
  9724  0024C8  EC65  F029         	call	_writeEEPROM	;wreg free
  9725                           
  9726                           ;main.c: 1052: writeEEPROM(0x55, 0x0D);
  9727  0024CC  6A0F               	clrf	?_writeEEPROM+1,c
  9728  0024CE  0E55               	movlw	85
  9729  0024D0  6E0E               	movwf	?_writeEEPROM,c
  9730  0024D2  0E0D               	movlw	13
  9731  0024D4  6E10               	movwf	?_writeEEPROM+2,c
  9732  0024D6  EC65  F029         	call	_writeEEPROM	;wreg free
  9733                           
  9734                           ;main.c: 1053: writeEEPROM(0x56, 0x7F);
  9735  0024DA  6A0F               	clrf	?_writeEEPROM+1,c
  9736  0024DC  0E56               	movlw	86
  9737  0024DE  6E0E               	movwf	?_writeEEPROM,c
  9738  0024E0  0E7F               	movlw	127
  9739  0024E2  6E10               	movwf	?_writeEEPROM+2,c
  9740  0024E4  EC65  F029         	call	_writeEEPROM	;wreg free
  9741                           
  9742                           ;main.c: 1055: writeEEPROM(0x57, 0x0D);
  9743  0024E8  6A0F               	clrf	?_writeEEPROM+1,c
  9744  0024EA  0E57               	movlw	87
  9745  0024EC  6E0E               	movwf	?_writeEEPROM,c
  9746  0024EE  0E0D               	movlw	13
  9747  0024F0  6E10               	movwf	?_writeEEPROM+2,c
  9748  0024F2  EC65  F029         	call	_writeEEPROM	;wreg free
  9749                           
  9750                           ;main.c: 1056: writeEEPROM(0x58, 0x7F);
  9751  0024F6  6A0F               	clrf	?_writeEEPROM+1,c
  9752  0024F8  0E58               	movlw	88
  9753  0024FA  6E0E               	movwf	?_writeEEPROM,c
  9754  0024FC  0E7F               	movlw	127
  9755  0024FE  6E10               	movwf	?_writeEEPROM+2,c
  9756  002500  EC65  F029         	call	_writeEEPROM	;wreg free
  9757                           
  9758                           ;main.c: 1058: writeEEPROM(0x59, 0x0D);
  9759  002504  6A0F               	clrf	?_writeEEPROM+1,c
  9760  002506  0E59               	movlw	89
  9761  002508  6E0E               	movwf	?_writeEEPROM,c
  9762  00250A  0E0D               	movlw	13
  9763  00250C  6E10               	movwf	?_writeEEPROM+2,c
  9764  00250E  EC65  F029         	call	_writeEEPROM	;wreg free
  9765                           
  9766                           ;main.c: 1059: writeEEPROM(0x5A, 0x7F);
  9767  002512  6A0F               	clrf	?_writeEEPROM+1,c
  9768  002514  0E5A               	movlw	90
  9769  002516  6E0E               	movwf	?_writeEEPROM,c
  9770  002518  0E7F               	movlw	127
  9771  00251A  6E10               	movwf	?_writeEEPROM+2,c
  9772  00251C  EC65  F029         	call	_writeEEPROM	;wreg free
  9773                           
  9774                           ;main.c: 1063: writeEEPROM(0x5B, 0x80);
  9775  002520  6A0F               	clrf	?_writeEEPROM+1,c
  9776  002522  0E5B               	movlw	91
  9777  002524  6E0E               	movwf	?_writeEEPROM,c
  9778  002526  0E80               	movlw	128
  9779  002528  6E10               	movwf	?_writeEEPROM+2,c
  9780  00252A  EC65  F029         	call	_writeEEPROM	;wreg free
  9781                           
  9782                           ;main.c: 1064: writeEEPROM(0x5C, 0xff);
  9783  00252E  6A0F               	clrf	?_writeEEPROM+1,c
  9784  002530  0E5C               	movlw	92
  9785  002532  6E0E               	movwf	?_writeEEPROM,c
  9786  002534  0EFF               	movlw	255
  9787  002536  6810               	setf	?_writeEEPROM+2,c
  9788  002538  EC65  F029         	call	_writeEEPROM	;wreg free
  9789                           
  9790                           ;main.c: 1066: writeEEPROM(0x5D, 0x80);
  9791  00253C  6A0F               	clrf	?_writeEEPROM+1,c
  9792  00253E  0E5D               	movlw	93
  9793  002540  6E0E               	movwf	?_writeEEPROM,c
  9794  002542  0E80               	movlw	128
  9795  002544  6E10               	movwf	?_writeEEPROM+2,c
  9796  002546  EC65  F029         	call	_writeEEPROM	;wreg free
  9797                           
  9798                           ;main.c: 1067: writeEEPROM(0x5E, 0xff);
  9799  00254A  6A0F               	clrf	?_writeEEPROM+1,c
  9800  00254C  0E5E               	movlw	94
  9801  00254E  6E0E               	movwf	?_writeEEPROM,c
  9802  002550  0EFF               	movlw	255
  9803  002552  6810               	setf	?_writeEEPROM+2,c
  9804  002554  EC65  F029         	call	_writeEEPROM	;wreg free
  9805                           
  9806                           ;main.c: 1069: writeEEPROM(0x5F, 0x80);
  9807  002558  6A0F               	clrf	?_writeEEPROM+1,c
  9808  00255A  0E5F               	movlw	95
  9809  00255C  6E0E               	movwf	?_writeEEPROM,c
  9810  00255E  0E80               	movlw	128
  9811  002560  6E10               	movwf	?_writeEEPROM+2,c
  9812  002562  EC65  F029         	call	_writeEEPROM	;wreg free
  9813                           
  9814                           ;main.c: 1070: writeEEPROM(0x60, 0xff);
  9815  002566  6A0F               	clrf	?_writeEEPROM+1,c
  9816  002568  0E60               	movlw	96
  9817  00256A  6E0E               	movwf	?_writeEEPROM,c
  9818  00256C  0EFF               	movlw	255
  9819  00256E  6810               	setf	?_writeEEPROM+2,c
  9820  002570  EC65  F029         	call	_writeEEPROM	;wreg free
  9821                           
  9822                           ;main.c: 1072: writeEEPROM(0x61, 0x80);
  9823  002574  6A0F               	clrf	?_writeEEPROM+1,c
  9824  002576  0E61               	movlw	97
  9825  002578  6E0E               	movwf	?_writeEEPROM,c
  9826  00257A  0E80               	movlw	128
  9827  00257C  6E10               	movwf	?_writeEEPROM+2,c
  9828  00257E  EC65  F029         	call	_writeEEPROM	;wreg free
  9829                           
  9830                           ;main.c: 1073: writeEEPROM(0x62, 0xff);
  9831  002582  6A0F               	clrf	?_writeEEPROM+1,c
  9832  002584  0E62               	movlw	98
  9833  002586  6E0E               	movwf	?_writeEEPROM,c
  9834  002588  0EFF               	movlw	255
  9835  00258A  6810               	setf	?_writeEEPROM+2,c
  9836  00258C  EC65  F029         	call	_writeEEPROM	;wreg free
  9837                           
  9838                           ;main.c: 1075: writeEEPROM(0x63, 0x80);
  9839  002590  6A0F               	clrf	?_writeEEPROM+1,c
  9840  002592  0E63               	movlw	99
  9841  002594  6E0E               	movwf	?_writeEEPROM,c
  9842  002596  0E80               	movlw	128
  9843  002598  6E10               	movwf	?_writeEEPROM+2,c
  9844  00259A  EC65  F029         	call	_writeEEPROM	;wreg free
  9845                           
  9846                           ;main.c: 1076: writeEEPROM(0x64, 0xff);
  9847  00259E  6A0F               	clrf	?_writeEEPROM+1,c
  9848  0025A0  0E64               	movlw	100
  9849  0025A2  6E0E               	movwf	?_writeEEPROM,c
  9850  0025A4  0EFF               	movlw	255
  9851  0025A6  6810               	setf	?_writeEEPROM+2,c
  9852  0025A8  EC65  F029         	call	_writeEEPROM	;wreg free
  9853                           
  9854                           ;main.c: 1078: writeEEPROM(0x65, 0x80);
  9855  0025AC  6A0F               	clrf	?_writeEEPROM+1,c
  9856  0025AE  0E65               	movlw	101
  9857  0025B0  6E0E               	movwf	?_writeEEPROM,c
  9858  0025B2  0E80               	movlw	128
  9859  0025B4  6E10               	movwf	?_writeEEPROM+2,c
  9860  0025B6  EC65  F029         	call	_writeEEPROM	;wreg free
  9861                           
  9862                           ;main.c: 1079: writeEEPROM(0x66, 0xff);
  9863  0025BA  6A0F               	clrf	?_writeEEPROM+1,c
  9864  0025BC  0E66               	movlw	102
  9865  0025BE  6E0E               	movwf	?_writeEEPROM,c
  9866  0025C0  0EFF               	movlw	255
  9867  0025C2  6810               	setf	?_writeEEPROM+2,c
  9868  0025C4  EC65  F029         	call	_writeEEPROM	;wreg free
  9869                           
  9870                           ;main.c: 1083: writeEEPROM(0x67, 0x7f);
  9871  0025C8  6A0F               	clrf	?_writeEEPROM+1,c
  9872  0025CA  0E67               	movlw	103
  9873  0025CC  6E0E               	movwf	?_writeEEPROM,c
  9874  0025CE  0E7F               	movlw	127
  9875  0025D0  6E10               	movwf	?_writeEEPROM+2,c
  9876  0025D2  EC65  F029         	call	_writeEEPROM	;wreg free
  9877                           
  9878                           ;main.c: 1084: writeEEPROM(0x68, 0xff);
  9879  0025D6  6A0F               	clrf	?_writeEEPROM+1,c
  9880  0025D8  0E68               	movlw	104
  9881  0025DA  6E0E               	movwf	?_writeEEPROM,c
  9882  0025DC  0EFF               	movlw	255
  9883  0025DE  6810               	setf	?_writeEEPROM+2,c
  9884  0025E0  EC65  F029         	call	_writeEEPROM	;wreg free
  9885                           
  9886                           ;main.c: 1086: writeEEPROM(0x69, 0x7f);
  9887  0025E4  6A0F               	clrf	?_writeEEPROM+1,c
  9888  0025E6  0E69               	movlw	105
  9889  0025E8  6E0E               	movwf	?_writeEEPROM,c
  9890  0025EA  0E7F               	movlw	127
  9891  0025EC  6E10               	movwf	?_writeEEPROM+2,c
  9892  0025EE  EC65  F029         	call	_writeEEPROM	;wreg free
  9893                           
  9894                           ;main.c: 1087: writeEEPROM(0x6A, 0xff);
  9895  0025F2  6A0F               	clrf	?_writeEEPROM+1,c
  9896  0025F4  0E6A               	movlw	106
  9897  0025F6  6E0E               	movwf	?_writeEEPROM,c
  9898  0025F8  0EFF               	movlw	255
  9899  0025FA  6810               	setf	?_writeEEPROM+2,c
  9900  0025FC  EC65  F029         	call	_writeEEPROM	;wreg free
  9901                           
  9902                           ;main.c: 1089: writeEEPROM(0x6B, 0x7f);
  9903  002600  6A0F               	clrf	?_writeEEPROM+1,c
  9904  002602  0E6B               	movlw	107
  9905  002604  6E0E               	movwf	?_writeEEPROM,c
  9906  002606  0E7F               	movlw	127
  9907  002608  6E10               	movwf	?_writeEEPROM+2,c
  9908  00260A  EC65  F029         	call	_writeEEPROM	;wreg free
  9909                           
  9910                           ;main.c: 1090: writeEEPROM(0x6C, 0xff);
  9911  00260E  6A0F               	clrf	?_writeEEPROM+1,c
  9912  002610  0E6C               	movlw	108
  9913  002612  6E0E               	movwf	?_writeEEPROM,c
  9914  002614  0EFF               	movlw	255
  9915  002616  6810               	setf	?_writeEEPROM+2,c
  9916  002618  EC65  F029         	call	_writeEEPROM	;wreg free
  9917                           
  9918                           ;main.c: 1092: writeEEPROM(0x6D, 0x7f);
  9919  00261C  6A0F               	clrf	?_writeEEPROM+1,c
  9920  00261E  0E6D               	movlw	109
  9921  002620  6E0E               	movwf	?_writeEEPROM,c
  9922  002622  0E7F               	movlw	127
  9923  002624  6E10               	movwf	?_writeEEPROM+2,c
  9924  002626  EC65  F029         	call	_writeEEPROM	;wreg free
  9925                           
  9926                           ;main.c: 1093: writeEEPROM(0x6E, 0xff);
  9927  00262A  6A0F               	clrf	?_writeEEPROM+1,c
  9928  00262C  0E6E               	movlw	110
  9929  00262E  6E0E               	movwf	?_writeEEPROM,c
  9930  002630  0EFF               	movlw	255
  9931  002632  6810               	setf	?_writeEEPROM+2,c
  9932  002634  EC65  F029         	call	_writeEEPROM	;wreg free
  9933                           
  9934                           ;main.c: 1095: writeEEPROM(0x6F, 0x7f);
  9935  002638  6A0F               	clrf	?_writeEEPROM+1,c
  9936  00263A  0E6F               	movlw	111
  9937  00263C  6E0E               	movwf	?_writeEEPROM,c
  9938  00263E  0E7F               	movlw	127
  9939  002640  6E10               	movwf	?_writeEEPROM+2,c
  9940  002642  EC65  F029         	call	_writeEEPROM	;wreg free
  9941                           
  9942                           ;main.c: 1096: writeEEPROM(0x70, 0xff);
  9943  002646  6A0F               	clrf	?_writeEEPROM+1,c
  9944  002648  0E70               	movlw	112
  9945  00264A  6E0E               	movwf	?_writeEEPROM,c
  9946  00264C  0EFF               	movlw	255
  9947  00264E  6810               	setf	?_writeEEPROM+2,c
  9948  002650  EC65  F029         	call	_writeEEPROM	;wreg free
  9949                           
  9950                           ;main.c: 1098: writeEEPROM(0x71, 0x7f);
  9951  002654  6A0F               	clrf	?_writeEEPROM+1,c
  9952  002656  0E71               	movlw	113
  9953  002658  6E0E               	movwf	?_writeEEPROM,c
  9954  00265A  0E7F               	movlw	127
  9955  00265C  6E10               	movwf	?_writeEEPROM+2,c
  9956  00265E  EC65  F029         	call	_writeEEPROM	;wreg free
  9957                           
  9958                           ;main.c: 1099: writeEEPROM(0x72, 0xff);
  9959  002662  6A0F               	clrf	?_writeEEPROM+1,c
  9960  002664  0E72               	movlw	114
  9961  002666  6E0E               	movwf	?_writeEEPROM,c
  9962  002668  0EFF               	movlw	255
  9963  00266A  6810               	setf	?_writeEEPROM+2,c
  9964  00266C  EC65  F029         	call	_writeEEPROM	;wreg free
  9965                           
  9966                           ;main.c: 1103: writeEEPROM(0x73, 0);
  9967  002670  6A0F               	clrf	?_writeEEPROM+1,c
  9968  002672  0E73               	movlw	115
  9969  002674  6E0E               	movwf	?_writeEEPROM,c
  9970  002676  0E00               	movlw	0
  9971  002678  6A10               	clrf	?_writeEEPROM+2,c
  9972  00267A  EC65  F029         	call	_writeEEPROM	;wreg free
  9973                           
  9974                           ;main.c: 1104: writeEEPROM(0x74, 0);
  9975  00267E  6A0F               	clrf	?_writeEEPROM+1,c
  9976  002680  0E74               	movlw	116
  9977  002682  6E0E               	movwf	?_writeEEPROM,c
  9978  002684  0E00               	movlw	0
  9979  002686  6A10               	clrf	?_writeEEPROM+2,c
  9980  002688  EC65  F029         	call	_writeEEPROM	;wreg free
  9981                           
  9982                           ;main.c: 1106: writeEEPROM(0x75, 0);
  9983  00268C  6A0F               	clrf	?_writeEEPROM+1,c
  9984  00268E  0E75               	movlw	117
  9985  002690  6E0E               	movwf	?_writeEEPROM,c
  9986  002692  0E00               	movlw	0
  9987  002694  6A10               	clrf	?_writeEEPROM+2,c
  9988  002696  EC65  F029         	call	_writeEEPROM	;wreg free
  9989                           
  9990                           ;main.c: 1107: writeEEPROM(0x76, 0);
  9991  00269A  6A0F               	clrf	?_writeEEPROM+1,c
  9992  00269C  0E76               	movlw	118
  9993  00269E  6E0E               	movwf	?_writeEEPROM,c
  9994  0026A0  0E00               	movlw	0
  9995  0026A2  6A10               	clrf	?_writeEEPROM+2,c
  9996  0026A4  EC65  F029         	call	_writeEEPROM	;wreg free
  9997                           
  9998                           ;main.c: 1109: writeEEPROM(0x77, 0);
  9999  0026A8  6A0F               	clrf	?_writeEEPROM+1,c
 10000  0026AA  0E77               	movlw	119
 10001  0026AC  6E0E               	movwf	?_writeEEPROM,c
 10002  0026AE  0E00               	movlw	0
 10003  0026B0  6A10               	clrf	?_writeEEPROM+2,c
 10004  0026B2  EC65  F029         	call	_writeEEPROM	;wreg free
 10005                           
 10006                           ;main.c: 1110: writeEEPROM(0x78, 0);
 10007  0026B6  6A0F               	clrf	?_writeEEPROM+1,c
 10008  0026B8  0E78               	movlw	120
 10009  0026BA  6E0E               	movwf	?_writeEEPROM,c
 10010  0026BC  0E00               	movlw	0
 10011  0026BE  6A10               	clrf	?_writeEEPROM+2,c
 10012  0026C0  EC65  F029         	call	_writeEEPROM	;wreg free
 10013                           
 10014                           ;main.c: 1112: writeEEPROM(0x79, 0);
 10015  0026C4  6A0F               	clrf	?_writeEEPROM+1,c
 10016  0026C6  0E79               	movlw	121
 10017  0026C8  6E0E               	movwf	?_writeEEPROM,c
 10018  0026CA  0E00               	movlw	0
 10019  0026CC  6A10               	clrf	?_writeEEPROM+2,c
 10020  0026CE  EC65  F029         	call	_writeEEPROM	;wreg free
 10021                           
 10022                           ;main.c: 1113: writeEEPROM(0x7A, 0);
 10023  0026D2  6A0F               	clrf	?_writeEEPROM+1,c
 10024  0026D4  0E7A               	movlw	122
 10025  0026D6  6E0E               	movwf	?_writeEEPROM,c
 10026  0026D8  0E00               	movlw	0
 10027  0026DA  6A10               	clrf	?_writeEEPROM+2,c
 10028  0026DC  EC65  F029         	call	_writeEEPROM	;wreg free
 10029                           
 10030                           ;main.c: 1115: writeEEPROM(0x7B, 0);
 10031  0026E0  6A0F               	clrf	?_writeEEPROM+1,c
 10032  0026E2  0E7B               	movlw	123
 10033  0026E4  6E0E               	movwf	?_writeEEPROM,c
 10034  0026E6  0E00               	movlw	0
 10035  0026E8  6A10               	clrf	?_writeEEPROM+2,c
 10036  0026EA  EC65  F029         	call	_writeEEPROM	;wreg free
 10037                           
 10038                           ;main.c: 1116: writeEEPROM(0x7C, 0);
 10039  0026EE  6A0F               	clrf	?_writeEEPROM+1,c
 10040  0026F0  0E7C               	movlw	124
 10041  0026F2  6E0E               	movwf	?_writeEEPROM,c
 10042  0026F4  0E00               	movlw	0
 10043  0026F6  6A10               	clrf	?_writeEEPROM+2,c
 10044  0026F8  EC65  F029         	call	_writeEEPROM	;wreg free
 10045                           
 10046                           ;main.c: 1118: writeEEPROM(0x7D, 0);
 10047  0026FC  6A0F               	clrf	?_writeEEPROM+1,c
 10048  0026FE  0E7D               	movlw	125
 10049  002700  6E0E               	movwf	?_writeEEPROM,c
 10050  002702  0E00               	movlw	0
 10051  002704  6A10               	clrf	?_writeEEPROM+2,c
 10052  002706  EC65  F029         	call	_writeEEPROM	;wreg free
 10053                           
 10054                           ;main.c: 1119: writeEEPROM(0x7E, 0);
 10055  00270A  6A0F               	clrf	?_writeEEPROM+1,c
 10056  00270C  0E7E               	movlw	126
 10057  00270E  6E0E               	movwf	?_writeEEPROM,c
 10058  002710  0E00               	movlw	0
 10059  002712  6A10               	clrf	?_writeEEPROM+2,c
 10060  002714  EC65  F029         	call	_writeEEPROM	;wreg free
 10061                           
 10062                           ;main.c: 1123: writeEEPROM(0x7F, 0x7f);
 10063  002718  6A0F               	clrf	?_writeEEPROM+1,c
 10064  00271A  0E7F               	movlw	127
 10065  00271C  6E0E               	movwf	?_writeEEPROM,c
 10066  00271E  6E10               	movwf	?_writeEEPROM+2,c
 10067  002720  EC65  F029         	call	_writeEEPROM	;wreg free
 10068                           
 10069                           ;main.c: 1124: writeEEPROM(0x80, 0xff);
 10070  002724  6A0F               	clrf	?_writeEEPROM+1,c
 10071  002726  0E80               	movlw	128
 10072  002728  6E0E               	movwf	?_writeEEPROM,c
 10073  00272A  0EFF               	movlw	255
 10074  00272C  6810               	setf	?_writeEEPROM+2,c
 10075  00272E  EC65  F029         	call	_writeEEPROM	;wreg free
 10076                           
 10077                           ;main.c: 1126: writeEEPROM(0x81, 0x7f);
 10078  002732  6A0F               	clrf	?_writeEEPROM+1,c
 10079  002734  0E81               	movlw	129
 10080  002736  6E0E               	movwf	?_writeEEPROM,c
 10081  002738  0E7F               	movlw	127
 10082  00273A  6E10               	movwf	?_writeEEPROM+2,c
 10083  00273C  EC65  F029         	call	_writeEEPROM	;wreg free
 10084                           
 10085                           ;main.c: 1127: writeEEPROM(0x82, 0xff);
 10086  002740  6A0F               	clrf	?_writeEEPROM+1,c
 10087  002742  0E82               	movlw	130
 10088  002744  6E0E               	movwf	?_writeEEPROM,c
 10089  002746  0EFF               	movlw	255
 10090  002748  6810               	setf	?_writeEEPROM+2,c
 10091  00274A  EC65  F029         	call	_writeEEPROM	;wreg free
 10092                           
 10093                           ;main.c: 1129: writeEEPROM(0x83, 0x7f);
 10094  00274E  6A0F               	clrf	?_writeEEPROM+1,c
 10095  002750  0E83               	movlw	131
 10096  002752  6E0E               	movwf	?_writeEEPROM,c
 10097  002754  0E7F               	movlw	127
 10098  002756  6E10               	movwf	?_writeEEPROM+2,c
 10099  002758  EC65  F029         	call	_writeEEPROM	;wreg free
 10100                           
 10101                           ;main.c: 1130: writeEEPROM(0x84, 0xff);
 10102  00275C  6A0F               	clrf	?_writeEEPROM+1,c
 10103  00275E  0E84               	movlw	132
 10104  002760  6E0E               	movwf	?_writeEEPROM,c
 10105  002762  0EFF               	movlw	255
 10106  002764  6810               	setf	?_writeEEPROM+2,c
 10107  002766  EC65  F029         	call	_writeEEPROM	;wreg free
 10108                           
 10109                           ;main.c: 1132: writeEEPROM(0x85, 0x7f);
 10110  00276A  6A0F               	clrf	?_writeEEPROM+1,c
 10111  00276C  0E85               	movlw	133
 10112  00276E  6E0E               	movwf	?_writeEEPROM,c
 10113  002770  0E7F               	movlw	127
 10114  002772  6E10               	movwf	?_writeEEPROM+2,c
 10115  002774  EC65  F029         	call	_writeEEPROM	;wreg free
 10116                           
 10117                           ;main.c: 1133: writeEEPROM(0x86, 0xff);
 10118  002778  6A0F               	clrf	?_writeEEPROM+1,c
 10119  00277A  0E86               	movlw	134
 10120  00277C  6E0E               	movwf	?_writeEEPROM,c
 10121  00277E  0EFF               	movlw	255
 10122  002780  6810               	setf	?_writeEEPROM+2,c
 10123  002782  EC65  F029         	call	_writeEEPROM	;wreg free
 10124                           
 10125                           ;main.c: 1135: writeEEPROM(0x87, 0x7f);
 10126  002786  6A0F               	clrf	?_writeEEPROM+1,c
 10127  002788  0E87               	movlw	135
 10128  00278A  6E0E               	movwf	?_writeEEPROM,c
 10129  00278C  0E7F               	movlw	127
 10130  00278E  6E10               	movwf	?_writeEEPROM+2,c
 10131  002790  EC65  F029         	call	_writeEEPROM	;wreg free
 10132                           
 10133                           ;main.c: 1136: writeEEPROM(0x88, 0xff);
 10134  002794  6A0F               	clrf	?_writeEEPROM+1,c
 10135  002796  0E88               	movlw	136
 10136  002798  6E0E               	movwf	?_writeEEPROM,c
 10137  00279A  0EFF               	movlw	255
 10138  00279C  6810               	setf	?_writeEEPROM+2,c
 10139  00279E  EC65  F029         	call	_writeEEPROM	;wreg free
 10140                           
 10141                           ;main.c: 1138: writeEEPROM(0x89, 0x7f);
 10142  0027A2  6A0F               	clrf	?_writeEEPROM+1,c
 10143  0027A4  0E89               	movlw	137
 10144  0027A6  6E0E               	movwf	?_writeEEPROM,c
 10145  0027A8  0E7F               	movlw	127
 10146  0027AA  6E10               	movwf	?_writeEEPROM+2,c
 10147  0027AC  EC65  F029         	call	_writeEEPROM	;wreg free
 10148                           
 10149                           ;main.c: 1139: writeEEPROM(0x8A, 0xff);
 10150  0027B0  6A0F               	clrf	?_writeEEPROM+1,c
 10151  0027B2  0E8A               	movlw	138
 10152  0027B4  6E0E               	movwf	?_writeEEPROM,c
 10153  0027B6  0EFF               	movlw	255
 10154  0027B8  6810               	setf	?_writeEEPROM+2,c
 10155  0027BA  EC65  F029         	call	_writeEEPROM	;wreg free
 10156                           
 10157                           ;main.c: 1143: writeEEPROM(0x8B, 0x80);
 10158  0027BE  6A0F               	clrf	?_writeEEPROM+1,c
 10159  0027C0  0E8B               	movlw	139
 10160  0027C2  6E0E               	movwf	?_writeEEPROM,c
 10161  0027C4  0E80               	movlw	128
 10162  0027C6  6E10               	movwf	?_writeEEPROM+2,c
 10163  0027C8  EC65  F029         	call	_writeEEPROM	;wreg free
 10164                           
 10165                           ;main.c: 1144: writeEEPROM(0x8C, 0x00);
 10166  0027CC  6A0F               	clrf	?_writeEEPROM+1,c
 10167  0027CE  0E8C               	movlw	140
 10168  0027D0  6E0E               	movwf	?_writeEEPROM,c
 10169  0027D2  0E00               	movlw	0
 10170  0027D4  6A10               	clrf	?_writeEEPROM+2,c
 10171  0027D6  EC65  F029         	call	_writeEEPROM	;wreg free
 10172                           
 10173                           ;main.c: 1146: writeEEPROM(0x8D, 0x80);
 10174  0027DA  6A0F               	clrf	?_writeEEPROM+1,c
 10175  0027DC  0E8D               	movlw	141
 10176  0027DE  6E0E               	movwf	?_writeEEPROM,c
 10177  0027E0  0E80               	movlw	128
 10178  0027E2  6E10               	movwf	?_writeEEPROM+2,c
 10179  0027E4  EC65  F029         	call	_writeEEPROM	;wreg free
 10180                           
 10181                           ;main.c: 1147: writeEEPROM(0x8E, 0x00);
 10182  0027E8  6A0F               	clrf	?_writeEEPROM+1,c
 10183  0027EA  0E8E               	movlw	142
 10184  0027EC  6E0E               	movwf	?_writeEEPROM,c
 10185  0027EE  0E00               	movlw	0
 10186  0027F0  6A10               	clrf	?_writeEEPROM+2,c
 10187  0027F2  EC65  F029         	call	_writeEEPROM	;wreg free
 10188                           
 10189                           ;main.c: 1149: writeEEPROM(0x8F, 0x80);
 10190  0027F6  6A0F               	clrf	?_writeEEPROM+1,c
 10191  0027F8  0E8F               	movlw	143
 10192  0027FA  6E0E               	movwf	?_writeEEPROM,c
 10193  0027FC  0E80               	movlw	128
 10194  0027FE  6E10               	movwf	?_writeEEPROM+2,c
 10195  002800  EC65  F029         	call	_writeEEPROM	;wreg free
 10196                           
 10197                           ;main.c: 1150: writeEEPROM(0x90, 0x00);
 10198  002804  6A0F               	clrf	?_writeEEPROM+1,c
 10199  002806  0E90               	movlw	144
 10200  002808  6E0E               	movwf	?_writeEEPROM,c
 10201  00280A  0E00               	movlw	0
 10202  00280C  6A10               	clrf	?_writeEEPROM+2,c
 10203  00280E  EC65  F029         	call	_writeEEPROM	;wreg free
 10204                           
 10205                           ;main.c: 1152: writeEEPROM(0x91, 0x80);
 10206  002812  6A0F               	clrf	?_writeEEPROM+1,c
 10207  002814  0E91               	movlw	145
 10208  002816  6E0E               	movwf	?_writeEEPROM,c
 10209  002818  0E80               	movlw	128
 10210  00281A  6E10               	movwf	?_writeEEPROM+2,c
 10211  00281C  EC65  F029         	call	_writeEEPROM	;wreg free
 10212                           
 10213                           ;main.c: 1153: writeEEPROM(0x92, 0x00);
 10214  002820  6A0F               	clrf	?_writeEEPROM+1,c
 10215  002822  0E92               	movlw	146
 10216  002824  6E0E               	movwf	?_writeEEPROM,c
 10217  002826  0E00               	movlw	0
 10218  002828  6A10               	clrf	?_writeEEPROM+2,c
 10219  00282A  EC65  F029         	call	_writeEEPROM	;wreg free
 10220                           
 10221                           ;main.c: 1155: writeEEPROM(0x93, 0x80);
 10222  00282E  6A0F               	clrf	?_writeEEPROM+1,c
 10223  002830  0E93               	movlw	147
 10224  002832  6E0E               	movwf	?_writeEEPROM,c
 10225  002834  0E80               	movlw	128
 10226  002836  6E10               	movwf	?_writeEEPROM+2,c
 10227  002838  EC65  F029         	call	_writeEEPROM	;wreg free
 10228                           
 10229                           ;main.c: 1156: writeEEPROM(0x94, 0x00);
 10230  00283C  6A0F               	clrf	?_writeEEPROM+1,c
 10231  00283E  0E94               	movlw	148
 10232  002840  6E0E               	movwf	?_writeEEPROM,c
 10233  002842  0E00               	movlw	0
 10234  002844  6A10               	clrf	?_writeEEPROM+2,c
 10235  002846  EC65  F029         	call	_writeEEPROM	;wreg free
 10236                           
 10237                           ;main.c: 1158: writeEEPROM(0x95, 0x80);
 10238  00284A  6A0F               	clrf	?_writeEEPROM+1,c
 10239  00284C  0E95               	movlw	149
 10240  00284E  6E0E               	movwf	?_writeEEPROM,c
 10241  002850  0E80               	movlw	128
 10242  002852  6E10               	movwf	?_writeEEPROM+2,c
 10243  002854  EC65  F029         	call	_writeEEPROM	;wreg free
 10244                           
 10245                           ;main.c: 1159: writeEEPROM(0x96, 0x00);
 10246  002858  6A0F               	clrf	?_writeEEPROM+1,c
 10247  00285A  0E96               	movlw	150
 10248  00285C  6E0E               	movwf	?_writeEEPROM,c
 10249  00285E  0E00               	movlw	0
 10250  002860  6A10               	clrf	?_writeEEPROM+2,c
 10251  002862  EC65  F029         	call	_writeEEPROM	;wreg free
 10252                           
 10253                           ;main.c: 1163: writeEEPROM(0x97, 2);
 10254  002866  6A0F               	clrf	?_writeEEPROM+1,c
 10255  002868  0E97               	movlw	151
 10256  00286A  6E0E               	movwf	?_writeEEPROM,c
 10257  00286C  0E02               	movlw	2
 10258  00286E  6E10               	movwf	?_writeEEPROM+2,c
 10259  002870  EC65  F029         	call	_writeEEPROM	;wreg free
 10260                           
 10261                           ;main.c: 1164: writeEEPROM(0x98, 2);
 10262  002874  6A0F               	clrf	?_writeEEPROM+1,c
 10263  002876  0E98               	movlw	152
 10264  002878  6E0E               	movwf	?_writeEEPROM,c
 10265  00287A  0E02               	movlw	2
 10266  00287C  6E10               	movwf	?_writeEEPROM+2,c
 10267  00287E  EC65  F029         	call	_writeEEPROM	;wreg free
 10268                           
 10269                           ;main.c: 1165: writeEEPROM(0x99, 2);
 10270  002882  6A0F               	clrf	?_writeEEPROM+1,c
 10271  002884  0E99               	movlw	153
 10272  002886  6E0E               	movwf	?_writeEEPROM,c
 10273  002888  0E02               	movlw	2
 10274  00288A  6E10               	movwf	?_writeEEPROM+2,c
 10275  00288C  EC65  F029         	call	_writeEEPROM	;wreg free
 10276                           
 10277                           ;main.c: 1166: writeEEPROM(0x9A, 2);
 10278  002890  6A0F               	clrf	?_writeEEPROM+1,c
 10279  002892  0E9A               	movlw	154
 10280  002894  6E0E               	movwf	?_writeEEPROM,c
 10281  002896  0E02               	movlw	2
 10282  002898  6E10               	movwf	?_writeEEPROM+2,c
 10283  00289A  EC65  F029         	call	_writeEEPROM	;wreg free
 10284                           
 10285                           ;main.c: 1167: writeEEPROM(0x9B, 2);
 10286  00289E  6A0F               	clrf	?_writeEEPROM+1,c
 10287  0028A0  0E9B               	movlw	155
 10288  0028A2  6E0E               	movwf	?_writeEEPROM,c
 10289  0028A4  0E02               	movlw	2
 10290  0028A6  6E10               	movwf	?_writeEEPROM+2,c
 10291  0028A8  EC65  F029         	call	_writeEEPROM	;wreg free
 10292                           
 10293                           ;main.c: 1168: writeEEPROM(0x9C, 2);
 10294  0028AC  6A0F               	clrf	?_writeEEPROM+1,c
 10295  0028AE  0E9C               	movlw	156
 10296  0028B0  6E0E               	movwf	?_writeEEPROM,c
 10297  0028B2  0E02               	movlw	2
 10298  0028B4  6E10               	movwf	?_writeEEPROM+2,c
 10299  0028B6  EC65  F029         	call	_writeEEPROM	;wreg free
 10300                           
 10301                           ;main.c: 1172: writeEEPROM(0xF2, 0xc3);
 10302  0028BA  6A0F               	clrf	?_writeEEPROM+1,c
 10303  0028BC  0EF2               	movlw	242
 10304  0028BE  6E0E               	movwf	?_writeEEPROM,c
 10305  0028C0  0EC3               	movlw	195
 10306  0028C2  6E10               	movwf	?_writeEEPROM+2,c
 10307  0028C4  EC65  F029         	call	_writeEEPROM	;wreg free
 10308                           
 10309                           ;main.c: 1173: writeEEPROM(0xF3, 0x50);
 10310  0028C8  6A0F               	clrf	?_writeEEPROM+1,c
 10311  0028CA  0EF3               	movlw	243
 10312  0028CC  6E0E               	movwf	?_writeEEPROM,c
 10313  0028CE  0E50               	movlw	80
 10314  0028D0  6E10               	movwf	?_writeEEPROM+2,c
 10315  0028D2  EC65  F029         	call	_writeEEPROM	;wreg free
 10316                           
 10317                           ;main.c: 1177: writeEEPROM(0x9E, 0);
 10318  0028D6  6A0F               	clrf	?_writeEEPROM+1,c
 10319  0028D8  0E9E               	movlw	158
 10320  0028DA  6E0E               	movwf	?_writeEEPROM,c
 10321  0028DC  0E00               	movlw	0
 10322  0028DE  6A10               	clrf	?_writeEEPROM+2,c
 10323  0028E0  EC65  F029         	call	_writeEEPROM	;wreg free
 10324                           
 10325                           ;main.c: 1178: writeEEPROM(0x9F, 0);
 10326  0028E4  6A0F               	clrf	?_writeEEPROM+1,c
 10327  0028E6  0E9F               	movlw	159
 10328  0028E8  6E0E               	movwf	?_writeEEPROM,c
 10329  0028EA  0E00               	movlw	0
 10330  0028EC  6A10               	clrf	?_writeEEPROM+2,c
 10331  0028EE  EC65  F029         	call	_writeEEPROM	;wreg free
 10332                           
 10333                           ;main.c: 1179: writeEEPROM(0xA0, 0);
 10334  0028F2  6A0F               	clrf	?_writeEEPROM+1,c
 10335  0028F4  0EA0               	movlw	160
 10336  0028F6  6E0E               	movwf	?_writeEEPROM,c
 10337  0028F8  0E00               	movlw	0
 10338  0028FA  6A10               	clrf	?_writeEEPROM+2,c
 10339  0028FC  EC65  F029         	call	_writeEEPROM	;wreg free
 10340                           
 10341                           ;main.c: 1180: writeEEPROM(0xA1, 0);
 10342  002900  6A0F               	clrf	?_writeEEPROM+1,c
 10343  002902  0EA1               	movlw	161
 10344  002904  6E0E               	movwf	?_writeEEPROM,c
 10345  002906  0E00               	movlw	0
 10346  002908  6A10               	clrf	?_writeEEPROM+2,c
 10347  00290A  EC65  F029         	call	_writeEEPROM	;wreg free
 10348                           
 10349                           ;main.c: 1181: writeEEPROM(0xA2, 0);
 10350  00290E  6A0F               	clrf	?_writeEEPROM+1,c
 10351  002910  0EA2               	movlw	162
 10352  002912  6E0E               	movwf	?_writeEEPROM,c
 10353  002914  0E00               	movlw	0
 10354  002916  6A10               	clrf	?_writeEEPROM+2,c
 10355  002918  EC65  F029         	call	_writeEEPROM	;wreg free
 10356                           
 10357                           ;main.c: 1182: writeEEPROM(0xA3, 0);
 10358  00291C  6A0F               	clrf	?_writeEEPROM+1,c
 10359  00291E  0EA3               	movlw	163
 10360  002920  6E0E               	movwf	?_writeEEPROM,c
 10361  002922  0E00               	movlw	0
 10362  002924  6A10               	clrf	?_writeEEPROM+2,c
 10363  002926  EC65  F029         	call	_writeEEPROM	;wreg free
 10364                           
 10365                           ;main.c: 1183: writeEEPROM(0xA4, 0);
 10366  00292A  6A0F               	clrf	?_writeEEPROM+1,c
 10367  00292C  0EA4               	movlw	164
 10368  00292E  6E0E               	movwf	?_writeEEPROM,c
 10369  002930  0E00               	movlw	0
 10370  002932  6A10               	clrf	?_writeEEPROM+2,c
 10371  002934  EC65  F029         	call	_writeEEPROM	;wreg free
 10372                           
 10373                           ;main.c: 1184: writeEEPROM(0xA5, 0);
 10374  002938  6A0F               	clrf	?_writeEEPROM+1,c
 10375  00293A  0EA5               	movlw	165
 10376  00293C  6E0E               	movwf	?_writeEEPROM,c
 10377  00293E  0E00               	movlw	0
 10378  002940  6A10               	clrf	?_writeEEPROM+2,c
 10379  002942  EC65  F029         	call	_writeEEPROM	;wreg free
 10380                           
 10381                           ;main.c: 1185: writeEEPROM(0xA6, 0);
 10382  002946  6A0F               	clrf	?_writeEEPROM+1,c
 10383  002948  0EA6               	movlw	166
 10384  00294A  6E0E               	movwf	?_writeEEPROM,c
 10385  00294C  0E00               	movlw	0
 10386  00294E  6A10               	clrf	?_writeEEPROM+2,c
 10387  002950  EC65  F029         	call	_writeEEPROM	;wreg free
 10388                           
 10389                           ;main.c: 1186: writeEEPROM(0xA7, 0);
 10390  002954  6A0F               	clrf	?_writeEEPROM+1,c
 10391  002956  0EA7               	movlw	167
 10392  002958  6E0E               	movwf	?_writeEEPROM,c
 10393  00295A  0E00               	movlw	0
 10394  00295C  6A10               	clrf	?_writeEEPROM+2,c
 10395  00295E  EC65  F029         	call	_writeEEPROM	;wreg free
 10396                           
 10397                           ;main.c: 1187: writeEEPROM(0xA8, 0);
 10398  002962  6A0F               	clrf	?_writeEEPROM+1,c
 10399  002964  0EA8               	movlw	168
 10400  002966  6E0E               	movwf	?_writeEEPROM,c
 10401  002968  0E00               	movlw	0
 10402  00296A  6A10               	clrf	?_writeEEPROM+2,c
 10403  00296C  EC65  F029         	call	_writeEEPROM	;wreg free
 10404                           
 10405                           ;main.c: 1188: writeEEPROM(0xA9, 0);
 10406  002970  6A0F               	clrf	?_writeEEPROM+1,c
 10407  002972  0EA9               	movlw	169
 10408  002974  6E0E               	movwf	?_writeEEPROM,c
 10409  002976  0E00               	movlw	0
 10410  002978  6A10               	clrf	?_writeEEPROM+2,c
 10411  00297A  EC65  F029         	call	_writeEEPROM	;wreg free
 10412                           
 10413                           ;main.c: 1192: writeEEPROM(0xAA, 0);
 10414  00297E  6A0F               	clrf	?_writeEEPROM+1,c
 10415  002980  0EAA               	movlw	170
 10416  002982  6E0E               	movwf	?_writeEEPROM,c
 10417  002984  0E00               	movlw	0
 10418  002986  6A10               	clrf	?_writeEEPROM+2,c
 10419  002988  EC65  F029         	call	_writeEEPROM	;wreg free
 10420                           
 10421                           ;main.c: 1193: writeEEPROM(0xAB, 0);
 10422  00298C  6A0F               	clrf	?_writeEEPROM+1,c
 10423  00298E  0EAB               	movlw	171
 10424  002990  6E0E               	movwf	?_writeEEPROM,c
 10425  002992  0E00               	movlw	0
 10426  002994  6A10               	clrf	?_writeEEPROM+2,c
 10427  002996  EC65  F029         	call	_writeEEPROM	;wreg free
 10428                           
 10429                           ;main.c: 1194: writeEEPROM(0xAC, 0);
 10430  00299A  6A0F               	clrf	?_writeEEPROM+1,c
 10431  00299C  0EAC               	movlw	172
 10432  00299E  6E0E               	movwf	?_writeEEPROM,c
 10433  0029A0  0E00               	movlw	0
 10434  0029A2  6A10               	clrf	?_writeEEPROM+2,c
 10435  0029A4  EC65  F029         	call	_writeEEPROM	;wreg free
 10436                           
 10437                           ;main.c: 1195: writeEEPROM(0xAD, 0);
 10438  0029A8  6A0F               	clrf	?_writeEEPROM+1,c
 10439  0029AA  0EAD               	movlw	173
 10440  0029AC  6E0E               	movwf	?_writeEEPROM,c
 10441  0029AE  0E00               	movlw	0
 10442  0029B0  6A10               	clrf	?_writeEEPROM+2,c
 10443  0029B2  EC65  F029         	call	_writeEEPROM	;wreg free
 10444                           
 10445                           ;main.c: 1196: writeEEPROM(0xAE, 0);
 10446  0029B6  6A0F               	clrf	?_writeEEPROM+1,c
 10447  0029B8  0EAE               	movlw	174
 10448  0029BA  6E0E               	movwf	?_writeEEPROM,c
 10449  0029BC  0E00               	movlw	0
 10450  0029BE  6A10               	clrf	?_writeEEPROM+2,c
 10451  0029C0  EC65  F029         	call	_writeEEPROM	;wreg free
 10452                           
 10453                           ;main.c: 1197: writeEEPROM(0xAF, 0);
 10454  0029C4  6A0F               	clrf	?_writeEEPROM+1,c
 10455  0029C6  0EAF               	movlw	175
 10456  0029C8  6E0E               	movwf	?_writeEEPROM,c
 10457  0029CA  0E00               	movlw	0
 10458  0029CC  6A10               	clrf	?_writeEEPROM+2,c
 10459  0029CE  EC65  F029         	call	_writeEEPROM	;wreg free
 10460                           
 10461                           ;main.c: 1198: writeEEPROM(0xB0, 0);
 10462  0029D2  6A0F               	clrf	?_writeEEPROM+1,c
 10463  0029D4  0EB0               	movlw	176
 10464  0029D6  6E0E               	movwf	?_writeEEPROM,c
 10465  0029D8  0E00               	movlw	0
 10466  0029DA  6A10               	clrf	?_writeEEPROM+2,c
 10467  0029DC  EC65  F029         	call	_writeEEPROM	;wreg free
 10468                           
 10469                           ;main.c: 1199: writeEEPROM(0xB1, 0);
 10470  0029E0  6A0F               	clrf	?_writeEEPROM+1,c
 10471  0029E2  0EB1               	movlw	177
 10472  0029E4  6E0E               	movwf	?_writeEEPROM,c
 10473  0029E6  0E00               	movlw	0
 10474  0029E8  6A10               	clrf	?_writeEEPROM+2,c
 10475  0029EA  EC65  F029         	call	_writeEEPROM	;wreg free
 10476                           
 10477                           ;main.c: 1200: writeEEPROM(0xB2, 0);
 10478  0029EE  6A0F               	clrf	?_writeEEPROM+1,c
 10479  0029F0  0EB2               	movlw	178
 10480  0029F2  6E0E               	movwf	?_writeEEPROM,c
 10481  0029F4  0E00               	movlw	0
 10482  0029F6  6A10               	clrf	?_writeEEPROM+2,c
 10483  0029F8  EC65  F029         	call	_writeEEPROM	;wreg free
 10484                           
 10485                           ;main.c: 1201: writeEEPROM(0xB3, 0);
 10486  0029FC  6A0F               	clrf	?_writeEEPROM+1,c
 10487  0029FE  0EB3               	movlw	179
 10488  002A00  6E0E               	movwf	?_writeEEPROM,c
 10489  002A02  0E00               	movlw	0
 10490  002A04  6A10               	clrf	?_writeEEPROM+2,c
 10491  002A06  EC65  F029         	call	_writeEEPROM	;wreg free
 10492                           
 10493                           ;main.c: 1202: writeEEPROM(0xB4, 0);
 10494  002A0A  6A0F               	clrf	?_writeEEPROM+1,c
 10495  002A0C  0EB4               	movlw	180
 10496  002A0E  6E0E               	movwf	?_writeEEPROM,c
 10497  002A10  0E00               	movlw	0
 10498  002A12  6A10               	clrf	?_writeEEPROM+2,c
 10499  002A14  EC65  F029         	call	_writeEEPROM	;wreg free
 10500                           
 10501                           ;main.c: 1203: writeEEPROM(0xB5, 0);
 10502  002A18  6A0F               	clrf	?_writeEEPROM+1,c
 10503  002A1A  0EB5               	movlw	181
 10504  002A1C  6E0E               	movwf	?_writeEEPROM,c
 10505  002A1E  0E00               	movlw	0
 10506  002A20  6A10               	clrf	?_writeEEPROM+2,c
 10507  002A22  EC65  F029         	call	_writeEEPROM	;wreg free
 10508                           
 10509                           ;main.c: 1207: for (uint8_t i = 0; i < 6; i++) {
 10510  002A26  6A11               	clrf	init_app_eeprom@i,c
 10511  002A28                     l9582:
 10512                           
 10513                           ;main.c: 1208: writeEEPROM(0xB6 + i * 12, 0);
 10514  002A28  5011               	movf	init_app_eeprom@i,w,c
 10515  002A2A  0D0C               	mullw	12
 10516  002A2C  0EB6               	movlw	182
 10517  002A2E  D849               	call	PL2	;call to abstracted procedure
 10518  002A30  EC65  F029         	call	_writeEEPROM	;wreg free
 10519                           
 10520                           ;main.c: 1209: writeEEPROM(0xB7 + i * 12, 0);
 10521  002A34  5011               	movf	init_app_eeprom@i,w,c
 10522  002A36  0D0C               	mullw	12
 10523  002A38  0EB7               	movlw	183
 10524  002A3A  D843               	call	PL2	;call to abstracted procedure
 10525  002A3C  EC65  F029         	call	_writeEEPROM	;wreg free
 10526                           
 10527                           ;main.c: 1210: writeEEPROM(0xB8 + i * 12, 0);
 10528  002A40  5011               	movf	init_app_eeprom@i,w,c
 10529  002A42  0D0C               	mullw	12
 10530  002A44  0EB8               	movlw	184
 10531  002A46  D83D               	call	PL2	;call to abstracted procedure
 10532  002A48  EC65  F029         	call	_writeEEPROM	;wreg free
 10533                           
 10534                           ;main.c: 1211: writeEEPROM(0xB9 + i * 12, 0);
 10535  002A4C  5011               	movf	init_app_eeprom@i,w,c
 10536  002A4E  0D0C               	mullw	12
 10537  002A50  0EB9               	movlw	185
 10538  002A52  D837               	call	PL2	;call to abstracted procedure
 10539  002A54  EC65  F029         	call	_writeEEPROM	;wreg free
 10540                           
 10541                           ;main.c: 1212: writeEEPROM(0xBA + i * 12, 0);
 10542  002A58  5011               	movf	init_app_eeprom@i,w,c
 10543  002A5A  0D0C               	mullw	12
 10544  002A5C  0EBA               	movlw	186
 10545  002A5E  D831               	call	PL2	;call to abstracted procedure
 10546  002A60  EC65  F029         	call	_writeEEPROM	;wreg free
 10547                           
 10548                           ;main.c: 1213: writeEEPROM(0xBB + i * 12, 0);
 10549  002A64  5011               	movf	init_app_eeprom@i,w,c
 10550  002A66  0D0C               	mullw	12
 10551  002A68  0EBB               	movlw	187
 10552  002A6A  D82B               	call	PL2	;call to abstracted procedure
 10553  002A6C  EC65  F029         	call	_writeEEPROM	;wreg free
 10554                           
 10555                           ;main.c: 1214: writeEEPROM(0xBC + i * 12, 0);
 10556  002A70  5011               	movf	init_app_eeprom@i,w,c
 10557  002A72  0D0C               	mullw	12
 10558  002A74  0EBC               	movlw	188
 10559  002A76  D825               	call	PL2	;call to abstracted procedure
 10560  002A78  EC65  F029         	call	_writeEEPROM	;wreg free
 10561                           
 10562                           ;main.c: 1215: writeEEPROM(0xBD + i * 12, 0);
 10563  002A7C  5011               	movf	init_app_eeprom@i,w,c
 10564  002A7E  0D0C               	mullw	12
 10565  002A80  0EBD               	movlw	189
 10566  002A82  D81F               	call	PL2	;call to abstracted procedure
 10567  002A84  EC65  F029         	call	_writeEEPROM	;wreg free
 10568                           
 10569                           ;main.c: 1216: writeEEPROM(0xBE + i * 12, 0);
 10570  002A88  5011               	movf	init_app_eeprom@i,w,c
 10571  002A8A  0D0C               	mullw	12
 10572  002A8C  0EBE               	movlw	190
 10573  002A8E  D819               	call	PL2	;call to abstracted procedure
 10574  002A90  EC65  F029         	call	_writeEEPROM	;wreg free
 10575                           
 10576                           ;main.c: 1217: writeEEPROM(0xBF + i * 12, 0);
 10577  002A94  5011               	movf	init_app_eeprom@i,w,c
 10578  002A96  0D0C               	mullw	12
 10579  002A98  0EBF               	movlw	191
 10580  002A9A  D813               	call	PL2	;call to abstracted procedure
 10581  002A9C  EC65  F029         	call	_writeEEPROM	;wreg free
 10582                           
 10583                           ;main.c: 1218: writeEEPROM(0xC0 + i * 12, 0);
 10584  002AA0  5011               	movf	init_app_eeprom@i,w,c
 10585  002AA2  0D0C               	mullw	12
 10586  002AA4  0EC0               	movlw	192
 10587  002AA6  D80D               	call	PL2	;call to abstracted procedure
 10588  002AA8  EC65  F029         	call	_writeEEPROM	;wreg free
 10589                           
 10590                           ;main.c: 1219: writeEEPROM(0xC1 + i * 12, 0);
 10591  002AAC  5011               	movf	init_app_eeprom@i,w,c
 10592  002AAE  0D0C               	mullw	12
 10593  002AB0  0EC1               	movlw	193
 10594  002AB2  D807               	call	PL2	;call to abstracted procedure
 10595  002AB4  EC65  F029         	call	_writeEEPROM	;wreg free
 10596  002AB8  2A11               	incf	init_app_eeprom@i,f,c
 10597  002ABA  0E05               	movlw	5
 10598  002ABC  6411               	cpfsgt	init_app_eeprom@i,c
 10599  002ABE  D7B4               	goto	l9582
 10600  002AC0  0C05               	retlw	5
 10601  002AC2                     __end_of_init_app_eeprom:
 10602                           	opt stack 0
 10603  002AC2                     PL2:
 10604                           	opt stack 24
 10605  002AC2  24F3               	addwf	prodl,w,c
 10606  002AC4  6E0E               	movwf	?_writeEEPROM,c
 10607  002AC6  0E00               	movlw	0
 10608  002AC8  20F4               	addwfc	prodh,w,c
 10609  002ACA  6E0F               	movwf	?_writeEEPROM+1,c
 10610  002ACC  6A10               	clrf	?_writeEEPROM+2,c
 10611  002ACE  0C00               	retlw	0
 10612  002AD0                     __end_ofPL2:
 10613                           	opt stack 0
 10614                           tblptru	equ	0xFF8
 10615                           tblptrh	equ	0xFF7
 10616                           tblptrl	equ	0xFF6
 10617                           tablat	equ	0xFF5
 10618                           prodh	equ	0xFF4
 10619                           prodl	equ	0xFF3
 10620                           intcon	equ	0xFF2
 10621                           postinc0	equ	0xFEE
 10622                           wreg	equ	0xFE8
 10623                           indf1	equ	0xFE7
 10624                           postdec1	equ	0xFE5
 10625                           fsr1h	equ	0xFE2
 10626                           fsr1l	equ	0xFE1
 10627                           indf2	equ	0xFDF
 10628                           postinc2	equ	0xFDE
 10629                           postdec2	equ	0xFDD
 10630                           plusw2	equ	0xFDB
 10631                           fsr2h	equ	0xFDA
 10632                           fsr2l	equ	0xFD9
 10633                           status	equ	0xFD8
 10634                           
 10635 ;; *************** function _vscp_setManufacturerId *****************
 10636 ;; Defined at:
 10637 ;;		line 2652 in file "../main.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;  idx             1    wreg     unsigned char 
 10640 ;;  data            1   16[COMRAM] unsigned char 
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;  idx             1   17[COMRAM] unsigned char 
 10643 ;; Return value:  Size  Location     Type
 10644 ;;		None               void
 10645 ;; Registers used:
 10646 ;;		wreg, status,2, status,0, cstack
 10647 ;; Tracked objects:
 10648 ;;		On entry : F/0
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10652 ;;      Params:         1       0       0       0       0       0       0
 10653 ;;      Locals:         1       0       0       0       0       0       0
 10654 ;;      Temps:          0       0       0       0       0       0       0
 10655 ;;      Totals:         2       0       0       0       0       0       0
 10656 ;;Total ram usage:        2 bytes
 10657 ;; Hardware stack levels used:    1
 10658 ;; Hardware stack levels required when called:    3
 10659 ;; This function calls:
 10660 ;;		_writeEEPROM
 10661 ;; This function is called by:
 10662 ;;		_vscp_writeStdReg
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           	psect	text39
 10667  005410                     __ptext39:
 10668                           	opt stack 0
 10669  005410                     _vscp_setManufacturerId:
 10670                           	opt stack 25
 10671                           
 10672                           ;incstack = 0
 10673                           ;incstack = 0
 10674                           ;vscp_setManufacturerId@idx stored from wreg
 10675  005410  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;main.c: 2653: writeEEPROM(0x09 + idx, data);
 10679  005414  0E09               	movlw	9
 10680  005416  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10681  005418  6E0E               	movwf	?_writeEEPROM,c
 10682  00541A  6A0F               	clrf	?_writeEEPROM+1,c
 10683  00541C  0E00               	movlw	0
 10684  00541E  220F               	addwfc	?_writeEEPROM+1,f,c
 10685  005420  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10686  005424  EF65  F029         	goto	_writeEEPROM	;wreg free
 10687  005428                     __end_of_vscp_setManufacturerId:
 10688                           	opt stack 0
 10689                           tblptru	equ	0xFF8
 10690                           tblptrh	equ	0xFF7
 10691                           tblptrl	equ	0xFF6
 10692                           tablat	equ	0xFF5
 10693                           prodh	equ	0xFF4
 10694                           prodl	equ	0xFF3
 10695                           intcon	equ	0xFF2
 10696                           postinc0	equ	0xFEE
 10697                           wreg	equ	0xFE8
 10698                           indf1	equ	0xFE7
 10699                           postdec1	equ	0xFE5
 10700                           fsr1h	equ	0xFE2
 10701                           fsr1l	equ	0xFE1
 10702                           indf2	equ	0xFDF
 10703                           postinc2	equ	0xFDE
 10704                           postdec2	equ	0xFDD
 10705                           plusw2	equ	0xFDB
 10706                           fsr2h	equ	0xFDA
 10707                           fsr2l	equ	0xFD9
 10708                           status	equ	0xFD8
 10709                           
 10710 ;; *************** function _vscp_setUserID *****************
 10711 ;; Defined at:
 10712 ;;		line 2630 in file "../main.c"
 10713 ;; Parameters:    Size  Location     Type
 10714 ;;  idx             1    wreg     unsigned char 
 10715 ;;  data            1   16[COMRAM] unsigned char 
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;  idx             1   17[COMRAM] unsigned char 
 10718 ;; Return value:  Size  Location     Type
 10719 ;;		None               void
 10720 ;; Registers used:
 10721 ;;		wreg, status,2, status,0, cstack
 10722 ;; Tracked objects:
 10723 ;;		On entry : F/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10727 ;;      Params:         1       0       0       0       0       0       0
 10728 ;;      Locals:         1       0       0       0       0       0       0
 10729 ;;      Temps:          0       0       0       0       0       0       0
 10730 ;;      Totals:         2       0       0       0       0       0       0
 10731 ;;Total ram usage:        2 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    3
 10734 ;; This function calls:
 10735 ;;		_writeEEPROM
 10736 ;; This function is called by:
 10737 ;;		_vscp_writeStdReg
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           	psect	text40
 10742  005428                     __ptext40:
 10743                           	opt stack 0
 10744  005428                     _vscp_setUserID:
 10745                           	opt stack 25
 10746                           
 10747                           ;incstack = 0
 10748                           ;incstack = 0
 10749                           ;vscp_setUserID@idx stored from wreg
 10750  005428  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;main.c: 2631: writeEEPROM(idx + 0x04, data);
 10754  00542C  0E04               	movlw	4
 10755  00542E  2412               	addwf	vscp_setUserID@idx,w,c
 10756  005430  6E0E               	movwf	?_writeEEPROM,c
 10757  005432  6A0F               	clrf	?_writeEEPROM+1,c
 10758  005434  0E00               	movlw	0
 10759  005436  220F               	addwfc	?_writeEEPROM+1,f,c
 10760  005438  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10761  00543C  EF65  F029         	goto	_writeEEPROM	;wreg free
 10762  005440                     __end_of_vscp_setUserID:
 10763                           	opt stack 0
 10764                           tblptru	equ	0xFF8
 10765                           tblptrh	equ	0xFF7
 10766                           tblptrl	equ	0xFF6
 10767                           tablat	equ	0xFF5
 10768                           prodh	equ	0xFF4
 10769                           prodl	equ	0xFF3
 10770                           intcon	equ	0xFF2
 10771                           postinc0	equ	0xFEE
 10772                           wreg	equ	0xFE8
 10773                           indf1	equ	0xFE7
 10774                           postdec1	equ	0xFE5
 10775                           fsr1h	equ	0xFE2
 10776                           fsr1l	equ	0xFE1
 10777                           indf2	equ	0xFDF
 10778                           postinc2	equ	0xFDE
 10779                           postdec2	equ	0xFDD
 10780                           plusw2	equ	0xFDB
 10781                           fsr2h	equ	0xFDA
 10782                           fsr2l	equ	0xFD9
 10783                           status	equ	0xFD8
 10784                           
 10785 ;; *************** function _vscp_setGUID *****************
 10786 ;; Defined at:
 10787 ;;		line 2599 in file "../main.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;  idx             1    wreg     unsigned char 
 10790 ;;  data            1   16[COMRAM] unsigned char 
 10791 ;; Auto vars:     Size  Location     Type
 10792 ;;  idx             1   17[COMRAM] unsigned char 
 10793 ;; Return value:  Size  Location     Type
 10794 ;;		None               void
 10795 ;; Registers used:
 10796 ;;		wreg, status,2, status,0, cstack
 10797 ;; Tracked objects:
 10798 ;;		On entry : F/0
 10799 ;;		On exit  : 0/0
 10800 ;;		Unchanged: 0/0
 10801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10802 ;;      Params:         1       0       0       0       0       0       0
 10803 ;;      Locals:         1       0       0       0       0       0       0
 10804 ;;      Temps:          0       0       0       0       0       0       0
 10805 ;;      Totals:         2       0       0       0       0       0       0
 10806 ;;Total ram usage:        2 bytes
 10807 ;; Hardware stack levels used:    1
 10808 ;; Hardware stack levels required when called:    3
 10809 ;; This function calls:
 10810 ;;		_writeEEPROM
 10811 ;; This function is called by:
 10812 ;;		_vscp_writeStdReg
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           	psect	text41
 10817  00537E                     __ptext41:
 10818                           	opt stack 0
 10819  00537E                     _vscp_setGUID:
 10820                           	opt stack 25
 10821                           
 10822                           ;incstack = 0
 10823                           ;incstack = 0
 10824                           ;vscp_setGUID@idx stored from wreg
 10825  00537E  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;main.c: 2600: if ( idx>15 ) return;
 10829  005382  0E0F               	movlw	15
 10830  005384  6412               	cpfsgt	vscp_setGUID@idx,c
 10831  005386  D001               	goto	l11028
 10832  005388  D00A               	goto	l552
 10833  00538A                     l11028:
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;main.c: 2601: writeEEPROM( 0x11 + idx, data );
 10837  00538A  0E11               	movlw	17
 10838  00538C  2412               	addwf	vscp_setGUID@idx,w,c
 10839  00538E  6E0E               	movwf	?_writeEEPROM,c
 10840  005390  6A0F               	clrf	?_writeEEPROM+1,c
 10841  005392  0E00               	movlw	0
 10842  005394  220F               	addwfc	?_writeEEPROM+1,f,c
 10843  005396  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 10844  00539A  EC65  F029         	call	_writeEEPROM	;wreg free
 10845  00539E                     l552:
 10846  00539E  0012               	return	
 10847  0053A0                     __end_of_vscp_setGUID:
 10848                           	opt stack 0
 10849                           tblptru	equ	0xFF8
 10850                           tblptrh	equ	0xFF7
 10851                           tblptrl	equ	0xFF6
 10852                           tablat	equ	0xFF5
 10853                           prodh	equ	0xFF4
 10854                           prodl	equ	0xFF3
 10855                           intcon	equ	0xFF2
 10856                           postinc0	equ	0xFEE
 10857                           wreg	equ	0xFE8
 10858                           indf1	equ	0xFE7
 10859                           postdec1	equ	0xFE5
 10860                           fsr1h	equ	0xFE2
 10861                           fsr1l	equ	0xFE1
 10862                           indf2	equ	0xFDF
 10863                           postinc2	equ	0xFDE
 10864                           postdec2	equ	0xFDD
 10865                           plusw2	equ	0xFDB
 10866                           fsr2h	equ	0xFDA
 10867                           fsr2l	equ	0xFD9
 10868                           status	equ	0xFD8
 10869                           
 10870 ;; *************** function _vscp_writeAppReg *****************
 10871 ;; Defined at:
 10872 ;;		line 1892 in file "../main.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;  reg             1    wreg     unsigned char 
 10875 ;;  val             1   32[COMRAM] unsigned char 
 10876 ;; Auto vars:     Size  Location     Type
 10877 ;;  reg             1   34[COMRAM] unsigned char 
 10878 ;;  pos             1   33[COMRAM] unsigned char 
 10879 ;;  rv              1   35[COMRAM] unsigned char 
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  1    wreg      unsigned char 
 10882 ;; Registers used:
 10883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10884 ;; Tracked objects:
 10885 ;;		On entry : F/0
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10889 ;;      Params:         1       0       0       0       0       0       0
 10890 ;;      Locals:         3       0       0       0       0       0       0
 10891 ;;      Temps:          0       0       0       0       0       0       0
 10892 ;;      Totals:         4       0       0       0       0       0       0
 10893 ;;Total ram usage:        4 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:    4
 10896 ;; This function calls:
 10897 ;;		_writeEEPROM
 10898 ;;		_readEEPROM
 10899 ;;		_writeCoeffs2Ram
 10900 ;; This function is called by:
 10901 ;;		_vscp_writeRegister
 10902 ;;		_vscp_handleProtocolEvent
 10903 ;; This function uses a non-reentrant model
 10904 ;;
 10905                           
 10906                           	psect	text42
 10907  00066E                     __ptext42:
 10908                           	opt stack 0
 10909  00066E                     _vscp_writeAppReg:
 10910                           	opt stack 24
 10911                           
 10912                           ;incstack = 0
 10913                           ;incstack = 0
 10914                           ;vscp_writeAppReg@reg stored from wreg
 10915  00066E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;main.c: 1893: uint8_t rv;
 10919                           ;main.c: 1900: rv = ~val;
 10920  000672  1C21               	comf	vscp_writeAppReg@val,w,c
 10921  000674  6E24               	movwf	vscp_writeAppReg@rv,c
 10922                           
 10923                           ;main.c: 1902: if (0 == vscp_page_select) {
 10924  000676  5047               	movf	_vscp_page_select+1,w,c
 10925  000678  1046               	iorwf	_vscp_page_select,w,c
 10926  00067A  E102 EF37  F008    	bz	l10990
 10927  000680  EF71  F009         	goto	l10992
 10928  000684                     l10800:
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;main.c: 1908: writeEEPROM(0x41, val);
 10932  000684  6A0F               	clrf	?_writeEEPROM+1,c
 10933  000686  0E41               	movlw	65
 10934  000688  6E0E               	movwf	?_writeEEPROM,c
 10935  00068A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10936  00068E  EC65  F029         	call	_writeEEPROM	;wreg free
 10937                           
 10938                           ;main.c: 1909: rv = readEEPROM(0x41);
 10939  000692  6A0F               	clrf	?_readEEPROM+1,c
 10940  000694  0E41               	movlw	65
 10941  000696  6E0E               	movwf	?_readEEPROM,c
 10942  000698  EC62  F02A         	call	_readEEPROM	;wreg free
 10943  00069C  EFA9  F009         	goto	L20
 10944  0006A0                     l10802:
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;main.c: 1914: writeEEPROM(0x42, val);
 10948  0006A0  6A0F               	clrf	?_writeEEPROM+1,c
 10949  0006A2  0E42               	movlw	66
 10950  0006A4  6E0E               	movwf	?_writeEEPROM,c
 10951  0006A6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10952  0006AA  EC65  F029         	call	_writeEEPROM	;wreg free
 10953                           
 10954                           ;main.c: 1915: rv = readEEPROM(0x42);
 10955  0006AE  6A0F               	clrf	?_readEEPROM+1,c
 10956  0006B0  0E42               	movlw	66
 10957  0006B2  6E0E               	movwf	?_readEEPROM,c
 10958  0006B4  EC62  F02A         	call	_readEEPROM	;wreg free
 10959  0006B8  EFA9  F009         	goto	L20
 10960  0006BC                     l10804:
 10961                           
 10962                           ; BSR set to: 0
 10963                           ;main.c: 1924: writeEEPROM(0x43, val);
 10964  0006BC  6A0F               	clrf	?_writeEEPROM+1,c
 10965  0006BE  0E43               	movlw	67
 10966  0006C0  6E0E               	movwf	?_writeEEPROM,c
 10967  0006C2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10968  0006C6  EC65  F029         	call	_writeEEPROM	;wreg free
 10969                           
 10970                           ;main.c: 1925: rv = readEEPROM(0x43);
 10971  0006CA  6A0F               	clrf	?_readEEPROM+1,c
 10972  0006CC  0E43               	movlw	67
 10973  0006CE  6E0E               	movwf	?_readEEPROM,c
 10974  0006D0  EC62  F02A         	call	_readEEPROM	;wreg free
 10975  0006D4  EFA9  F009         	goto	L20
 10976  0006D8                     l10806:
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;main.c: 1930: writeEEPROM(0x44, val);
 10980  0006D8  6A0F               	clrf	?_writeEEPROM+1,c
 10981  0006DA  0E44               	movlw	68
 10982  0006DC  6E0E               	movwf	?_writeEEPROM,c
 10983  0006DE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10984  0006E2  EC65  F029         	call	_writeEEPROM	;wreg free
 10985                           
 10986                           ;main.c: 1931: rv = readEEPROM(0x44);
 10987  0006E6  6A0F               	clrf	?_readEEPROM+1,c
 10988  0006E8  0E44               	movlw	68
 10989  0006EA  6E0E               	movwf	?_readEEPROM,c
 10990  0006EC  EC62  F02A         	call	_readEEPROM	;wreg free
 10991  0006F0  EFA9  F009         	goto	L20
 10992  0006F4                     l10808:
 10993                           
 10994                           ; BSR set to: 0
 10995                           ;main.c: 1936: writeEEPROM(0x45, val);
 10996  0006F4  6A0F               	clrf	?_writeEEPROM+1,c
 10997  0006F6  0E45               	movlw	69
 10998  0006F8  6E0E               	movwf	?_writeEEPROM,c
 10999  0006FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11000  0006FE  EC65  F029         	call	_writeEEPROM	;wreg free
 11001                           
 11002                           ;main.c: 1937: rv = readEEPROM(0x45);
 11003  000702  6A0F               	clrf	?_readEEPROM+1,c
 11004  000704  0E45               	movlw	69
 11005  000706  6E0E               	movwf	?_readEEPROM,c
 11006  000708  EC62  F02A         	call	_readEEPROM	;wreg free
 11007  00070C  EFA9  F009         	goto	L20
 11008  000710                     l10810:
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;main.c: 1942: writeEEPROM(0x46, val);
 11012  000710  6A0F               	clrf	?_writeEEPROM+1,c
 11013  000712  0E46               	movlw	70
 11014  000714  6E0E               	movwf	?_writeEEPROM,c
 11015  000716  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11016  00071A  EC65  F029         	call	_writeEEPROM	;wreg free
 11017                           
 11018                           ;main.c: 1943: rv = readEEPROM(0x46);
 11019  00071E  6A0F               	clrf	?_readEEPROM+1,c
 11020  000720  0E46               	movlw	70
 11021  000722  6E0E               	movwf	?_readEEPROM,c
 11022  000724  EC62  F02A         	call	_readEEPROM	;wreg free
 11023  000728  EFA9  F009         	goto	L20
 11024  00072C                     l10812:
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;main.c: 1948: writeEEPROM(0x47, val);
 11028  00072C  6A0F               	clrf	?_writeEEPROM+1,c
 11029  00072E  0E47               	movlw	71
 11030  000730  6E0E               	movwf	?_writeEEPROM,c
 11031  000732  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11032  000736  EC65  F029         	call	_writeEEPROM	;wreg free
 11033                           
 11034                           ;main.c: 1949: rv = readEEPROM(0x47);
 11035  00073A  6A0F               	clrf	?_readEEPROM+1,c
 11036  00073C  0E47               	movlw	71
 11037  00073E  6E0E               	movwf	?_readEEPROM,c
 11038  000740  EC62  F02A         	call	_readEEPROM	;wreg free
 11039  000744  EFA9  F009         	goto	L20
 11040  000748                     l10814:
 11041                           
 11042                           ; BSR set to: 0
 11043                           ;main.c: 1954: writeEEPROM(0x48, val);
 11044  000748  6A0F               	clrf	?_writeEEPROM+1,c
 11045  00074A  0E48               	movlw	72
 11046  00074C  6E0E               	movwf	?_writeEEPROM,c
 11047  00074E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11048  000752  EC65  F029         	call	_writeEEPROM	;wreg free
 11049                           
 11050                           ;main.c: 1955: rv = readEEPROM(0x48);
 11051  000756  6A0F               	clrf	?_readEEPROM+1,c
 11052  000758  0E48               	movlw	72
 11053  00075A  6E0E               	movwf	?_readEEPROM,c
 11054  00075C  EC62  F02A         	call	_readEEPROM	;wreg free
 11055  000760  EFA9  F009         	goto	L20
 11056  000764                     l10816:
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;main.c: 1964: writeEEPROM(0x49, val);
 11060  000764  6A0F               	clrf	?_writeEEPROM+1,c
 11061  000766  0E49               	movlw	73
 11062  000768  6E0E               	movwf	?_writeEEPROM,c
 11063  00076A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11064  00076E  EC65  F029         	call	_writeEEPROM	;wreg free
 11065                           
 11066                           ;main.c: 1965: rv = readEEPROM(0x49);
 11067  000772  6A0F               	clrf	?_readEEPROM+1,c
 11068  000774  0E49               	movlw	73
 11069  000776  6E0E               	movwf	?_readEEPROM,c
 11070  000778  EC62  F02A         	call	_readEEPROM	;wreg free
 11071  00077C  EFA9  F009         	goto	L20
 11072  000780                     l10818:
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;main.c: 1970: writeEEPROM(0x4A, val);
 11076  000780  6A0F               	clrf	?_writeEEPROM+1,c
 11077  000782  0E4A               	movlw	74
 11078  000784  6E0E               	movwf	?_writeEEPROM,c
 11079  000786  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11080  00078A  EC65  F029         	call	_writeEEPROM	;wreg free
 11081                           
 11082                           ;main.c: 1971: rv = readEEPROM(0x4A);
 11083  00078E  6A0F               	clrf	?_readEEPROM+1,c
 11084  000790  0E4A               	movlw	74
 11085  000792  6E0E               	movwf	?_readEEPROM,c
 11086  000794  EC62  F02A         	call	_readEEPROM	;wreg free
 11087  000798  EFA9  F009         	goto	L20
 11088  00079C                     l10820:
 11089                           
 11090                           ; BSR set to: 0
 11091                           ;main.c: 1976: writeEEPROM(0x4B, val);
 11092  00079C  6A0F               	clrf	?_writeEEPROM+1,c
 11093  00079E  0E4B               	movlw	75
 11094  0007A0  6E0E               	movwf	?_writeEEPROM,c
 11095  0007A2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11096  0007A6  EC65  F029         	call	_writeEEPROM	;wreg free
 11097                           
 11098                           ;main.c: 1977: rv = readEEPROM(0x4B);
 11099  0007AA  6A0F               	clrf	?_readEEPROM+1,c
 11100  0007AC  0E4B               	movlw	75
 11101  0007AE  6E0E               	movwf	?_readEEPROM,c
 11102  0007B0  EC62  F02A         	call	_readEEPROM	;wreg free
 11103  0007B4  EFA9  F009         	goto	L20
 11104  0007B8                     l10822:
 11105                           
 11106                           ; BSR set to: 0
 11107                           ;main.c: 1982: writeEEPROM(0x4C, val);
 11108  0007B8  6A0F               	clrf	?_writeEEPROM+1,c
 11109  0007BA  0E4C               	movlw	76
 11110  0007BC  6E0E               	movwf	?_writeEEPROM,c
 11111  0007BE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11112  0007C2  EC65  F029         	call	_writeEEPROM	;wreg free
 11113                           
 11114                           ;main.c: 1983: rv = readEEPROM(0x4C);
 11115  0007C6  6A0F               	clrf	?_readEEPROM+1,c
 11116  0007C8  0E4C               	movlw	76
 11117  0007CA  6E0E               	movwf	?_readEEPROM,c
 11118  0007CC  EC62  F02A         	call	_readEEPROM	;wreg free
 11119  0007D0  EFA9  F009         	goto	L20
 11120  0007D4                     l10824:
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;main.c: 1988: writeEEPROM(0x4D, val);
 11124  0007D4  6A0F               	clrf	?_writeEEPROM+1,c
 11125  0007D6  0E4D               	movlw	77
 11126  0007D8  6E0E               	movwf	?_writeEEPROM,c
 11127  0007DA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11128  0007DE  EC65  F029         	call	_writeEEPROM	;wreg free
 11129                           
 11130                           ;main.c: 1989: rv = readEEPROM(0x4D);
 11131  0007E2  6A0F               	clrf	?_readEEPROM+1,c
 11132  0007E4  0E4D               	movlw	77
 11133  0007E6  6E0E               	movwf	?_readEEPROM,c
 11134  0007E8  EC62  F02A         	call	_readEEPROM	;wreg free
 11135  0007EC  EFA9  F009         	goto	L20
 11136  0007F0                     l10826:
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;main.c: 1994: writeEEPROM(0x4E, val);
 11140  0007F0  6A0F               	clrf	?_writeEEPROM+1,c
 11141  0007F2  0E4E               	movlw	78
 11142  0007F4  6E0E               	movwf	?_writeEEPROM,c
 11143  0007F6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11144  0007FA  EC65  F029         	call	_writeEEPROM	;wreg free
 11145                           
 11146                           ;main.c: 1995: rv = readEEPROM(0x4E);
 11147  0007FE  6A0F               	clrf	?_readEEPROM+1,c
 11148  000800  0E4E               	movlw	78
 11149  000802  6E0E               	movwf	?_readEEPROM,c
 11150  000804  EC62  F02A         	call	_readEEPROM	;wreg free
 11151  000808  EFA9  F009         	goto	L20
 11152  00080C                     l10828:
 11153                           
 11154                           ; BSR set to: 0
 11155                           ;main.c: 2004: writeEEPROM(0x4F, val);
 11156  00080C  6A0F               	clrf	?_writeEEPROM+1,c
 11157  00080E  0E4F               	movlw	79
 11158  000810  6E0E               	movwf	?_writeEEPROM,c
 11159  000812  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11160  000816  EC65  F029         	call	_writeEEPROM	;wreg free
 11161                           
 11162                           ;main.c: 2005: rv = readEEPROM(0x4F);
 11163  00081A  6A0F               	clrf	?_readEEPROM+1,c
 11164  00081C  0E4F               	movlw	79
 11165  00081E  6E0E               	movwf	?_readEEPROM,c
 11166  000820  EC62  F02A         	call	_readEEPROM	;wreg free
 11167  000824  EFA9  F009         	goto	L20
 11168  000828                     l10830:
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;main.c: 2010: writeEEPROM(0x50, val);
 11172  000828  6A0F               	clrf	?_writeEEPROM+1,c
 11173  00082A  0E50               	movlw	80
 11174  00082C  6E0E               	movwf	?_writeEEPROM,c
 11175  00082E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11176  000832  EC65  F029         	call	_writeEEPROM	;wreg free
 11177                           
 11178                           ;main.c: 2011: rv = readEEPROM(0x50);
 11179  000836  6A0F               	clrf	?_readEEPROM+1,c
 11180  000838  0E50               	movlw	80
 11181  00083A  6E0E               	movwf	?_readEEPROM,c
 11182  00083C  EC62  F02A         	call	_readEEPROM	;wreg free
 11183  000840  EFA9  F009         	goto	L20
 11184  000844                     l10832:
 11185                           
 11186                           ; BSR set to: 0
 11187                           ;main.c: 2016: writeEEPROM(0x51, val);
 11188  000844  6A0F               	clrf	?_writeEEPROM+1,c
 11189  000846  0E51               	movlw	81
 11190  000848  6E0E               	movwf	?_writeEEPROM,c
 11191  00084A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11192  00084E  EC65  F029         	call	_writeEEPROM	;wreg free
 11193                           
 11194                           ;main.c: 2017: rv = readEEPROM(0x51);
 11195  000852  6A0F               	clrf	?_readEEPROM+1,c
 11196  000854  0E51               	movlw	81
 11197  000856  6E0E               	movwf	?_readEEPROM,c
 11198  000858  EC62  F02A         	call	_readEEPROM	;wreg free
 11199  00085C  EFA9  F009         	goto	L20
 11200  000860                     l10834:
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;main.c: 2022: writeEEPROM(0x52, val);
 11204  000860  6A0F               	clrf	?_writeEEPROM+1,c
 11205  000862  0E52               	movlw	82
 11206  000864  6E0E               	movwf	?_writeEEPROM,c
 11207  000866  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11208  00086A  EC65  F029         	call	_writeEEPROM	;wreg free
 11209                           
 11210                           ;main.c: 2023: rv = readEEPROM(0x52);
 11211  00086E  6A0F               	clrf	?_readEEPROM+1,c
 11212  000870  0E52               	movlw	82
 11213  000872  6E0E               	movwf	?_readEEPROM,c
 11214  000874  EC62  F02A         	call	_readEEPROM	;wreg free
 11215  000878  EFA9  F009         	goto	L20
 11216  00087C                     l10836:
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;main.c: 2028: writeEEPROM(0x53, val);
 11220  00087C  6A0F               	clrf	?_writeEEPROM+1,c
 11221  00087E  0E53               	movlw	83
 11222  000880  6E0E               	movwf	?_writeEEPROM,c
 11223  000882  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11224  000886  EC65  F029         	call	_writeEEPROM	;wreg free
 11225                           
 11226                           ;main.c: 2029: rv = readEEPROM(0x53);
 11227  00088A  6A0F               	clrf	?_readEEPROM+1,c
 11228  00088C  0E53               	movlw	83
 11229  00088E  6E0E               	movwf	?_readEEPROM,c
 11230  000890  EC62  F02A         	call	_readEEPROM	;wreg free
 11231  000894  EFA9  F009         	goto	L20
 11232  000898                     l10838:
 11233                           
 11234                           ; BSR set to: 0
 11235                           ;main.c: 2034: writeEEPROM(0x54, val);
 11236  000898  6A0F               	clrf	?_writeEEPROM+1,c
 11237  00089A  0E54               	movlw	84
 11238  00089C  6E0E               	movwf	?_writeEEPROM,c
 11239  00089E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11240  0008A2  EC65  F029         	call	_writeEEPROM	;wreg free
 11241                           
 11242                           ;main.c: 2035: rv = readEEPROM(0x54);
 11243  0008A6  6A0F               	clrf	?_readEEPROM+1,c
 11244  0008A8  0E54               	movlw	84
 11245  0008AA  6E0E               	movwf	?_readEEPROM,c
 11246  0008AC  EC62  F02A         	call	_readEEPROM	;wreg free
 11247  0008B0  EFA9  F009         	goto	L20
 11248  0008B4                     l10840:
 11249                           
 11250                           ; BSR set to: 0
 11251                           ;main.c: 2040: writeEEPROM(0x55, val);
 11252  0008B4  6A0F               	clrf	?_writeEEPROM+1,c
 11253  0008B6  0E55               	movlw	85
 11254  0008B8  6E0E               	movwf	?_writeEEPROM,c
 11255  0008BA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11256  0008BE  EC65  F029         	call	_writeEEPROM	;wreg free
 11257                           
 11258                           ;main.c: 2041: rv = readEEPROM(0x55);
 11259  0008C2  6A0F               	clrf	?_readEEPROM+1,c
 11260  0008C4  0E55               	movlw	85
 11261  0008C6  6E0E               	movwf	?_readEEPROM,c
 11262  0008C8  EC62  F02A         	call	_readEEPROM	;wreg free
 11263  0008CC  EFA9  F009         	goto	L20
 11264  0008D0                     l10842:
 11265                           
 11266                           ; BSR set to: 0
 11267                           ;main.c: 2046: writeEEPROM(0x56, val);
 11268  0008D0  6A0F               	clrf	?_writeEEPROM+1,c
 11269  0008D2  0E56               	movlw	86
 11270  0008D4  6E0E               	movwf	?_writeEEPROM,c
 11271  0008D6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11272  0008DA  EC65  F029         	call	_writeEEPROM	;wreg free
 11273                           
 11274                           ;main.c: 2047: rv = readEEPROM(0x56);
 11275  0008DE  6A0F               	clrf	?_readEEPROM+1,c
 11276  0008E0  0E56               	movlw	86
 11277  0008E2  6E0E               	movwf	?_readEEPROM,c
 11278  0008E4  EC62  F02A         	call	_readEEPROM	;wreg free
 11279  0008E8  EFA9  F009         	goto	L20
 11280  0008EC                     l10844:
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;main.c: 2052: writeEEPROM(0x57, val);
 11284  0008EC  6A0F               	clrf	?_writeEEPROM+1,c
 11285  0008EE  0E57               	movlw	87
 11286  0008F0  6E0E               	movwf	?_writeEEPROM,c
 11287  0008F2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11288  0008F6  EC65  F029         	call	_writeEEPROM	;wreg free
 11289                           
 11290                           ;main.c: 2053: rv = readEEPROM(0x57);
 11291  0008FA  6A0F               	clrf	?_readEEPROM+1,c
 11292  0008FC  0E57               	movlw	87
 11293  0008FE  6E0E               	movwf	?_readEEPROM,c
 11294  000900  EC62  F02A         	call	_readEEPROM	;wreg free
 11295  000904  EFA9  F009         	goto	L20
 11296  000908                     l10846:
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;main.c: 2058: writeEEPROM(0x58, val);
 11300  000908  6A0F               	clrf	?_writeEEPROM+1,c
 11301  00090A  0E58               	movlw	88
 11302  00090C  6E0E               	movwf	?_writeEEPROM,c
 11303  00090E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11304  000912  EC65  F029         	call	_writeEEPROM	;wreg free
 11305                           
 11306                           ;main.c: 2059: rv = readEEPROM(0x58);
 11307  000916  6A0F               	clrf	?_readEEPROM+1,c
 11308  000918  0E58               	movlw	88
 11309  00091A  6E0E               	movwf	?_readEEPROM,c
 11310  00091C  EC62  F02A         	call	_readEEPROM	;wreg free
 11311  000920  EFA9  F009         	goto	L20
 11312  000924                     l10848:
 11313                           
 11314                           ; BSR set to: 0
 11315                           ;main.c: 2064: writeEEPROM(0x59, val);
 11316  000924  6A0F               	clrf	?_writeEEPROM+1,c
 11317  000926  0E59               	movlw	89
 11318  000928  6E0E               	movwf	?_writeEEPROM,c
 11319  00092A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11320  00092E  EC65  F029         	call	_writeEEPROM	;wreg free
 11321                           
 11322                           ;main.c: 2065: rv = readEEPROM(0x59);
 11323  000932  6A0F               	clrf	?_readEEPROM+1,c
 11324  000934  0E59               	movlw	89
 11325  000936  6E0E               	movwf	?_readEEPROM,c
 11326  000938  EC62  F02A         	call	_readEEPROM	;wreg free
 11327  00093C  EFA9  F009         	goto	L20
 11328  000940                     l10850:
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;main.c: 2070: writeEEPROM(0x5A, val);
 11332  000940  6A0F               	clrf	?_writeEEPROM+1,c
 11333  000942  0E5A               	movlw	90
 11334  000944  6E0E               	movwf	?_writeEEPROM,c
 11335  000946  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11336  00094A  EC65  F029         	call	_writeEEPROM	;wreg free
 11337                           
 11338                           ;main.c: 2071: rv = readEEPROM(0x5A);
 11339  00094E  6A0F               	clrf	?_readEEPROM+1,c
 11340  000950  0E5A               	movlw	90
 11341  000952  6E0E               	movwf	?_readEEPROM,c
 11342  000954  EC62  F02A         	call	_readEEPROM	;wreg free
 11343  000958  EFA9  F009         	goto	L20
 11344  00095C                     l10852:
 11345                           
 11346                           ; BSR set to: 0
 11347                           ;main.c: 2080: writeEEPROM(0x5B, val);
 11348  00095C  6A0F               	clrf	?_writeEEPROM+1,c
 11349  00095E  0E5B               	movlw	91
 11350  000960  6E0E               	movwf	?_writeEEPROM,c
 11351  000962  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11352  000966  EC65  F029         	call	_writeEEPROM	;wreg free
 11353                           
 11354                           ;main.c: 2081: rv = readEEPROM(0x5B);
 11355  00096A  6A0F               	clrf	?_readEEPROM+1,c
 11356  00096C  0E5B               	movlw	91
 11357  00096E  6E0E               	movwf	?_readEEPROM,c
 11358  000970  EC62  F02A         	call	_readEEPROM	;wreg free
 11359  000974  EFA9  F009         	goto	L20
 11360  000978                     l10854:
 11361                           
 11362                           ; BSR set to: 0
 11363                           ;main.c: 2086: writeEEPROM(0x5C, val);
 11364  000978  6A0F               	clrf	?_writeEEPROM+1,c
 11365  00097A  0E5C               	movlw	92
 11366  00097C  6E0E               	movwf	?_writeEEPROM,c
 11367  00097E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11368  000982  EC65  F029         	call	_writeEEPROM	;wreg free
 11369                           
 11370                           ;main.c: 2087: rv = readEEPROM(0x5C);
 11371  000986  6A0F               	clrf	?_readEEPROM+1,c
 11372  000988  0E5C               	movlw	92
 11373  00098A  6E0E               	movwf	?_readEEPROM,c
 11374  00098C  EC62  F02A         	call	_readEEPROM	;wreg free
 11375  000990  EFA9  F009         	goto	L20
 11376  000994                     l10856:
 11377                           
 11378                           ; BSR set to: 0
 11379                           ;main.c: 2092: writeEEPROM(0x5D, val);
 11380  000994  6A0F               	clrf	?_writeEEPROM+1,c
 11381  000996  0E5D               	movlw	93
 11382  000998  6E0E               	movwf	?_writeEEPROM,c
 11383  00099A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11384  00099E  EC65  F029         	call	_writeEEPROM	;wreg free
 11385                           
 11386                           ;main.c: 2093: rv = readEEPROM(0x5D);
 11387  0009A2  6A0F               	clrf	?_readEEPROM+1,c
 11388  0009A4  0E5D               	movlw	93
 11389  0009A6  6E0E               	movwf	?_readEEPROM,c
 11390  0009A8  EC62  F02A         	call	_readEEPROM	;wreg free
 11391  0009AC  EFA9  F009         	goto	L20
 11392  0009B0                     l10858:
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;main.c: 2098: writeEEPROM(0x5E, val);
 11396  0009B0  6A0F               	clrf	?_writeEEPROM+1,c
 11397  0009B2  0E5E               	movlw	94
 11398  0009B4  6E0E               	movwf	?_writeEEPROM,c
 11399  0009B6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11400  0009BA  EC65  F029         	call	_writeEEPROM	;wreg free
 11401                           
 11402                           ;main.c: 2099: rv = readEEPROM(0x5E);
 11403  0009BE  6A0F               	clrf	?_readEEPROM+1,c
 11404  0009C0  0E5E               	movlw	94
 11405  0009C2  6E0E               	movwf	?_readEEPROM,c
 11406  0009C4  EC62  F02A         	call	_readEEPROM	;wreg free
 11407  0009C8  EFA9  F009         	goto	L20
 11408  0009CC                     l10860:
 11409                           
 11410                           ; BSR set to: 0
 11411                           ;main.c: 2104: writeEEPROM(0x5F, val);
 11412  0009CC  6A0F               	clrf	?_writeEEPROM+1,c
 11413  0009CE  0E5F               	movlw	95
 11414  0009D0  6E0E               	movwf	?_writeEEPROM,c
 11415  0009D2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11416  0009D6  EC65  F029         	call	_writeEEPROM	;wreg free
 11417                           
 11418                           ;main.c: 2105: rv = readEEPROM(0x5F);
 11419  0009DA  6A0F               	clrf	?_readEEPROM+1,c
 11420  0009DC  0E5F               	movlw	95
 11421  0009DE  6E0E               	movwf	?_readEEPROM,c
 11422  0009E0  EC62  F02A         	call	_readEEPROM	;wreg free
 11423  0009E4  EFA9  F009         	goto	L20
 11424  0009E8                     l10862:
 11425                           
 11426                           ; BSR set to: 0
 11427                           ;main.c: 2110: writeEEPROM(0x60, val);
 11428  0009E8  6A0F               	clrf	?_writeEEPROM+1,c
 11429  0009EA  0E60               	movlw	96
 11430  0009EC  6E0E               	movwf	?_writeEEPROM,c
 11431  0009EE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11432  0009F2  EC65  F029         	call	_writeEEPROM	;wreg free
 11433                           
 11434                           ;main.c: 2111: rv = readEEPROM(0x60);
 11435  0009F6  6A0F               	clrf	?_readEEPROM+1,c
 11436  0009F8  0E60               	movlw	96
 11437  0009FA  6E0E               	movwf	?_readEEPROM,c
 11438  0009FC  EC62  F02A         	call	_readEEPROM	;wreg free
 11439  000A00  EFA9  F009         	goto	L20
 11440  000A04                     l10864:
 11441                           
 11442                           ; BSR set to: 0
 11443                           ;main.c: 2116: writeEEPROM(0x61, val);
 11444  000A04  6A0F               	clrf	?_writeEEPROM+1,c
 11445  000A06  0E61               	movlw	97
 11446  000A08  6E0E               	movwf	?_writeEEPROM,c
 11447  000A0A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11448  000A0E  EC65  F029         	call	_writeEEPROM	;wreg free
 11449                           
 11450                           ;main.c: 2117: rv = readEEPROM(0x61);
 11451  000A12  6A0F               	clrf	?_readEEPROM+1,c
 11452  000A14  0E61               	movlw	97
 11453  000A16  6E0E               	movwf	?_readEEPROM,c
 11454  000A18  EC62  F02A         	call	_readEEPROM	;wreg free
 11455  000A1C  EFA9  F009         	goto	L20
 11456  000A20                     l10866:
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;main.c: 2122: writeEEPROM(0x62, val);
 11460  000A20  6A0F               	clrf	?_writeEEPROM+1,c
 11461  000A22  0E62               	movlw	98
 11462  000A24  6E0E               	movwf	?_writeEEPROM,c
 11463  000A26  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11464  000A2A  EC65  F029         	call	_writeEEPROM	;wreg free
 11465                           
 11466                           ;main.c: 2123: rv = readEEPROM(0x62);
 11467  000A2E  6A0F               	clrf	?_readEEPROM+1,c
 11468  000A30  0E62               	movlw	98
 11469  000A32  6E0E               	movwf	?_readEEPROM,c
 11470  000A34  EC62  F02A         	call	_readEEPROM	;wreg free
 11471  000A38  EFA9  F009         	goto	L20
 11472  000A3C                     l10868:
 11473                           
 11474                           ; BSR set to: 0
 11475                           ;main.c: 2128: writeEEPROM(0x63, val);
 11476  000A3C  6A0F               	clrf	?_writeEEPROM+1,c
 11477  000A3E  0E63               	movlw	99
 11478  000A40  6E0E               	movwf	?_writeEEPROM,c
 11479  000A42  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11480  000A46  EC65  F029         	call	_writeEEPROM	;wreg free
 11481                           
 11482                           ;main.c: 2129: rv = readEEPROM(0x63);
 11483  000A4A  6A0F               	clrf	?_readEEPROM+1,c
 11484  000A4C  0E63               	movlw	99
 11485  000A4E  6E0E               	movwf	?_readEEPROM,c
 11486  000A50  EC62  F02A         	call	_readEEPROM	;wreg free
 11487  000A54  EFA9  F009         	goto	L20
 11488  000A58                     l10870:
 11489                           
 11490                           ; BSR set to: 0
 11491                           ;main.c: 2134: writeEEPROM(0x64, val);
 11492  000A58  6A0F               	clrf	?_writeEEPROM+1,c
 11493  000A5A  0E64               	movlw	100
 11494  000A5C  6E0E               	movwf	?_writeEEPROM,c
 11495  000A5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11496  000A62  EC65  F029         	call	_writeEEPROM	;wreg free
 11497                           
 11498                           ;main.c: 2135: rv = readEEPROM(0x64);
 11499  000A66  6A0F               	clrf	?_readEEPROM+1,c
 11500  000A68  0E64               	movlw	100
 11501  000A6A  6E0E               	movwf	?_readEEPROM,c
 11502  000A6C  EC62  F02A         	call	_readEEPROM	;wreg free
 11503  000A70  EFA9  F009         	goto	L20
 11504  000A74                     l10872:
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;main.c: 2140: writeEEPROM(0x65, val);
 11508  000A74  6A0F               	clrf	?_writeEEPROM+1,c
 11509  000A76  0E65               	movlw	101
 11510  000A78  6E0E               	movwf	?_writeEEPROM,c
 11511  000A7A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11512  000A7E  EC65  F029         	call	_writeEEPROM	;wreg free
 11513                           
 11514                           ;main.c: 2141: rv = readEEPROM(0x65);
 11515  000A82  6A0F               	clrf	?_readEEPROM+1,c
 11516  000A84  0E65               	movlw	101
 11517  000A86  6E0E               	movwf	?_readEEPROM,c
 11518  000A88  EC62  F02A         	call	_readEEPROM	;wreg free
 11519  000A8C  EFA9  F009         	goto	L20
 11520  000A90                     l10874:
 11521                           
 11522                           ; BSR set to: 0
 11523                           ;main.c: 2146: writeEEPROM(0x66, val);
 11524  000A90  6A0F               	clrf	?_writeEEPROM+1,c
 11525  000A92  0E66               	movlw	102
 11526  000A94  6E0E               	movwf	?_writeEEPROM,c
 11527  000A96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11528  000A9A  EC65  F029         	call	_writeEEPROM	;wreg free
 11529                           
 11530                           ;main.c: 2147: rv = readEEPROM(0x66);
 11531  000A9E  6A0F               	clrf	?_readEEPROM+1,c
 11532  000AA0  0E66               	movlw	102
 11533  000AA2  6E0E               	movwf	?_readEEPROM,c
 11534  000AA4  EC62  F02A         	call	_readEEPROM	;wreg free
 11535  000AA8  EFA9  F009         	goto	L20
 11536  000AAC                     l10876:
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;main.c: 2156: writeEEPROM(0x67, val);
 11540  000AAC  6A0F               	clrf	?_writeEEPROM+1,c
 11541  000AAE  0E67               	movlw	103
 11542  000AB0  6E0E               	movwf	?_writeEEPROM,c
 11543  000AB2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11544  000AB6  EC65  F029         	call	_writeEEPROM	;wreg free
 11545                           
 11546                           ;main.c: 2157: rv = readEEPROM(0x67);
 11547  000ABA  6A0F               	clrf	?_readEEPROM+1,c
 11548  000ABC  0E67               	movlw	103
 11549  000ABE  6E0E               	movwf	?_readEEPROM,c
 11550  000AC0  EC62  F02A         	call	_readEEPROM	;wreg free
 11551  000AC4  EFA9  F009         	goto	L20
 11552  000AC8                     l10878:
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;main.c: 2162: writeEEPROM(0x68, val);
 11556  000AC8  6A0F               	clrf	?_writeEEPROM+1,c
 11557  000ACA  0E68               	movlw	104
 11558  000ACC  6E0E               	movwf	?_writeEEPROM,c
 11559  000ACE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11560  000AD2  EC65  F029         	call	_writeEEPROM	;wreg free
 11561                           
 11562                           ;main.c: 2163: rv = readEEPROM(0x68);
 11563  000AD6  6A0F               	clrf	?_readEEPROM+1,c
 11564  000AD8  0E68               	movlw	104
 11565  000ADA  6E0E               	movwf	?_readEEPROM,c
 11566  000ADC  EC62  F02A         	call	_readEEPROM	;wreg free
 11567  000AE0  EFA9  F009         	goto	L20
 11568  000AE4                     l10880:
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;main.c: 2168: writeEEPROM(0x69, val);
 11572  000AE4  6A0F               	clrf	?_writeEEPROM+1,c
 11573  000AE6  0E69               	movlw	105
 11574  000AE8  6E0E               	movwf	?_writeEEPROM,c
 11575  000AEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11576  000AEE  EC65  F029         	call	_writeEEPROM	;wreg free
 11577                           
 11578                           ;main.c: 2169: rv = readEEPROM(0x69);
 11579  000AF2  6A0F               	clrf	?_readEEPROM+1,c
 11580  000AF4  0E69               	movlw	105
 11581  000AF6  6E0E               	movwf	?_readEEPROM,c
 11582  000AF8  EC62  F02A         	call	_readEEPROM	;wreg free
 11583  000AFC  EFA9  F009         	goto	L20
 11584  000B00                     l10882:
 11585                           
 11586                           ; BSR set to: 0
 11587                           ;main.c: 2174: writeEEPROM(0x6A, val);
 11588  000B00  6A0F               	clrf	?_writeEEPROM+1,c
 11589  000B02  0E6A               	movlw	106
 11590  000B04  6E0E               	movwf	?_writeEEPROM,c
 11591  000B06  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11592  000B0A  EC65  F029         	call	_writeEEPROM	;wreg free
 11593                           
 11594                           ;main.c: 2175: rv = readEEPROM(0x6A);
 11595  000B0E  6A0F               	clrf	?_readEEPROM+1,c
 11596  000B10  0E6A               	movlw	106
 11597  000B12  6E0E               	movwf	?_readEEPROM,c
 11598  000B14  EC62  F02A         	call	_readEEPROM	;wreg free
 11599  000B18  EFA9  F009         	goto	L20
 11600  000B1C                     l10884:
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;main.c: 2180: writeEEPROM(0x6B, val);
 11604  000B1C  6A0F               	clrf	?_writeEEPROM+1,c
 11605  000B1E  0E6B               	movlw	107
 11606  000B20  6E0E               	movwf	?_writeEEPROM,c
 11607  000B22  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11608  000B26  EC65  F029         	call	_writeEEPROM	;wreg free
 11609                           
 11610                           ;main.c: 2181: rv = readEEPROM(0x6B);
 11611  000B2A  6A0F               	clrf	?_readEEPROM+1,c
 11612  000B2C  0E6B               	movlw	107
 11613  000B2E  6E0E               	movwf	?_readEEPROM,c
 11614  000B30  EC62  F02A         	call	_readEEPROM	;wreg free
 11615  000B34  EFA9  F009         	goto	L20
 11616  000B38                     l10886:
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;main.c: 2186: writeEEPROM(0x6C, val);
 11620  000B38  6A0F               	clrf	?_writeEEPROM+1,c
 11621  000B3A  0E6C               	movlw	108
 11622  000B3C  6E0E               	movwf	?_writeEEPROM,c
 11623  000B3E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11624  000B42  EC65  F029         	call	_writeEEPROM	;wreg free
 11625                           
 11626                           ;main.c: 2187: rv = readEEPROM(0x6C);
 11627  000B46  6A0F               	clrf	?_readEEPROM+1,c
 11628  000B48  0E6C               	movlw	108
 11629  000B4A  6E0E               	movwf	?_readEEPROM,c
 11630  000B4C  EC62  F02A         	call	_readEEPROM	;wreg free
 11631  000B50  EFA9  F009         	goto	L20
 11632  000B54                     l10888:
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;main.c: 2192: writeEEPROM(0x6D, val);
 11636  000B54  6A0F               	clrf	?_writeEEPROM+1,c
 11637  000B56  0E6D               	movlw	109
 11638  000B58  6E0E               	movwf	?_writeEEPROM,c
 11639  000B5A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11640  000B5E  EC65  F029         	call	_writeEEPROM	;wreg free
 11641                           
 11642                           ;main.c: 2193: rv = readEEPROM(0x6D);
 11643  000B62  6A0F               	clrf	?_readEEPROM+1,c
 11644  000B64  0E6D               	movlw	109
 11645  000B66  6E0E               	movwf	?_readEEPROM,c
 11646  000B68  EC62  F02A         	call	_readEEPROM	;wreg free
 11647  000B6C  D3F2               	goto	L20
 11648  000B6E                     l10890:
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;main.c: 2198: writeEEPROM(0x6E, val);
 11652  000B6E  6A0F               	clrf	?_writeEEPROM+1,c
 11653  000B70  0E6E               	movlw	110
 11654  000B72  6E0E               	movwf	?_writeEEPROM,c
 11655  000B74  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11656  000B78  EC65  F029         	call	_writeEEPROM	;wreg free
 11657                           
 11658                           ;main.c: 2199: rv = readEEPROM(0x6E);
 11659  000B7C  6A0F               	clrf	?_readEEPROM+1,c
 11660  000B7E  0E6E               	movlw	110
 11661  000B80  6E0E               	movwf	?_readEEPROM,c
 11662  000B82  EC62  F02A         	call	_readEEPROM	;wreg free
 11663  000B86  D3E5               	goto	L20
 11664  000B88                     l10892:
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;main.c: 2204: writeEEPROM(0x6F, val);
 11668  000B88  6A0F               	clrf	?_writeEEPROM+1,c
 11669  000B8A  0E6F               	movlw	111
 11670  000B8C  6E0E               	movwf	?_writeEEPROM,c
 11671  000B8E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11672  000B92  EC65  F029         	call	_writeEEPROM	;wreg free
 11673                           
 11674                           ;main.c: 2205: rv = readEEPROM(0x6F);
 11675  000B96  6A0F               	clrf	?_readEEPROM+1,c
 11676  000B98  0E6F               	movlw	111
 11677  000B9A  6E0E               	movwf	?_readEEPROM,c
 11678  000B9C  EC62  F02A         	call	_readEEPROM	;wreg free
 11679  000BA0  D3D8               	goto	L20
 11680  000BA2                     l10894:
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;main.c: 2210: writeEEPROM(0x70, val);
 11684  000BA2  6A0F               	clrf	?_writeEEPROM+1,c
 11685  000BA4  0E70               	movlw	112
 11686  000BA6  6E0E               	movwf	?_writeEEPROM,c
 11687  000BA8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11688  000BAC  EC65  F029         	call	_writeEEPROM	;wreg free
 11689                           
 11690                           ;main.c: 2211: rv = readEEPROM(0x70);
 11691  000BB0  6A0F               	clrf	?_readEEPROM+1,c
 11692  000BB2  0E70               	movlw	112
 11693  000BB4  6E0E               	movwf	?_readEEPROM,c
 11694  000BB6  EC62  F02A         	call	_readEEPROM	;wreg free
 11695  000BBA  D3CB               	goto	L20
 11696  000BBC                     l10896:
 11697                           
 11698                           ; BSR set to: 0
 11699                           ;main.c: 2216: writeEEPROM(0x71, val);
 11700  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 11701  000BBE  0E71               	movlw	113
 11702  000BC0  6E0E               	movwf	?_writeEEPROM,c
 11703  000BC2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11704  000BC6  EC65  F029         	call	_writeEEPROM	;wreg free
 11705                           
 11706                           ;main.c: 2217: rv = readEEPROM(0x71);
 11707  000BCA  6A0F               	clrf	?_readEEPROM+1,c
 11708  000BCC  0E71               	movlw	113
 11709  000BCE  6E0E               	movwf	?_readEEPROM,c
 11710  000BD0  EC62  F02A         	call	_readEEPROM	;wreg free
 11711  000BD4  D3BE               	goto	L20
 11712  000BD6                     l10898:
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;main.c: 2222: writeEEPROM(0x72, val);
 11716  000BD6  6A0F               	clrf	?_writeEEPROM+1,c
 11717  000BD8  0E72               	movlw	114
 11718  000BDA  6E0E               	movwf	?_writeEEPROM,c
 11719  000BDC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11720  000BE0  EC65  F029         	call	_writeEEPROM	;wreg free
 11721                           
 11722                           ;main.c: 2223: rv = readEEPROM(0x72);
 11723  000BE4  6A0F               	clrf	?_readEEPROM+1,c
 11724  000BE6  0E72               	movlw	114
 11725  000BE8  6E0E               	movwf	?_readEEPROM,c
 11726  000BEA  EC62  F02A         	call	_readEEPROM	;wreg free
 11727  000BEE  D3B1               	goto	L20
 11728  000BF0                     l10900:
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;main.c: 2232: writeEEPROM(0x73, val);
 11732  000BF0  6A0F               	clrf	?_writeEEPROM+1,c
 11733  000BF2  0E73               	movlw	115
 11734  000BF4  6E0E               	movwf	?_writeEEPROM,c
 11735  000BF6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11736  000BFA  EC65  F029         	call	_writeEEPROM	;wreg free
 11737                           
 11738                           ;main.c: 2233: rv = readEEPROM(0x73);
 11739  000BFE  6A0F               	clrf	?_readEEPROM+1,c
 11740  000C00  0E73               	movlw	115
 11741  000C02  6E0E               	movwf	?_readEEPROM,c
 11742  000C04  EC62  F02A         	call	_readEEPROM	;wreg free
 11743  000C08  D3A4               	goto	L20
 11744  000C0A                     l10902:
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;main.c: 2238: writeEEPROM(0x74, val);
 11748  000C0A  6A0F               	clrf	?_writeEEPROM+1,c
 11749  000C0C  0E74               	movlw	116
 11750  000C0E  6E0E               	movwf	?_writeEEPROM,c
 11751  000C10  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11752  000C14  EC65  F029         	call	_writeEEPROM	;wreg free
 11753                           
 11754                           ;main.c: 2239: rv = readEEPROM(0x74);
 11755  000C18  6A0F               	clrf	?_readEEPROM+1,c
 11756  000C1A  0E74               	movlw	116
 11757  000C1C  6E0E               	movwf	?_readEEPROM,c
 11758  000C1E  EC62  F02A         	call	_readEEPROM	;wreg free
 11759  000C22  D397               	goto	L20
 11760  000C24                     l10904:
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;main.c: 2244: writeEEPROM(0x75, val);
 11764  000C24  6A0F               	clrf	?_writeEEPROM+1,c
 11765  000C26  0E75               	movlw	117
 11766  000C28  6E0E               	movwf	?_writeEEPROM,c
 11767  000C2A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11768  000C2E  EC65  F029         	call	_writeEEPROM	;wreg free
 11769                           
 11770                           ;main.c: 2245: rv = readEEPROM(0x75);
 11771  000C32  6A0F               	clrf	?_readEEPROM+1,c
 11772  000C34  0E75               	movlw	117
 11773  000C36  6E0E               	movwf	?_readEEPROM,c
 11774  000C38  EC62  F02A         	call	_readEEPROM	;wreg free
 11775  000C3C  D38A               	goto	L20
 11776  000C3E                     l10906:
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;main.c: 2250: writeEEPROM(0x76, val);
 11780  000C3E  6A0F               	clrf	?_writeEEPROM+1,c
 11781  000C40  0E76               	movlw	118
 11782  000C42  6E0E               	movwf	?_writeEEPROM,c
 11783  000C44  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11784  000C48  EC65  F029         	call	_writeEEPROM	;wreg free
 11785                           
 11786                           ;main.c: 2251: rv = readEEPROM(0x76);
 11787  000C4C  6A0F               	clrf	?_readEEPROM+1,c
 11788  000C4E  0E76               	movlw	118
 11789  000C50  6E0E               	movwf	?_readEEPROM,c
 11790  000C52  EC62  F02A         	call	_readEEPROM	;wreg free
 11791  000C56  D37D               	goto	L20
 11792  000C58                     l10908:
 11793                           
 11794                           ; BSR set to: 0
 11795                           ;main.c: 2256: writeEEPROM(0x77, val);
 11796  000C58  6A0F               	clrf	?_writeEEPROM+1,c
 11797  000C5A  0E77               	movlw	119
 11798  000C5C  6E0E               	movwf	?_writeEEPROM,c
 11799  000C5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11800  000C62  EC65  F029         	call	_writeEEPROM	;wreg free
 11801                           
 11802                           ;main.c: 2257: rv = readEEPROM(0x77);
 11803  000C66  6A0F               	clrf	?_readEEPROM+1,c
 11804  000C68  0E77               	movlw	119
 11805  000C6A  6E0E               	movwf	?_readEEPROM,c
 11806  000C6C  EC62  F02A         	call	_readEEPROM	;wreg free
 11807  000C70  D370               	goto	L20
 11808  000C72                     l10910:
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;main.c: 2262: writeEEPROM(0x78, val);
 11812  000C72  6A0F               	clrf	?_writeEEPROM+1,c
 11813  000C74  0E78               	movlw	120
 11814  000C76  6E0E               	movwf	?_writeEEPROM,c
 11815  000C78  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11816  000C7C  EC65  F029         	call	_writeEEPROM	;wreg free
 11817                           
 11818                           ;main.c: 2263: rv = readEEPROM(0x78);
 11819  000C80  6A0F               	clrf	?_readEEPROM+1,c
 11820  000C82  0E78               	movlw	120
 11821  000C84  6E0E               	movwf	?_readEEPROM,c
 11822  000C86  EC62  F02A         	call	_readEEPROM	;wreg free
 11823  000C8A  D363               	goto	L20
 11824  000C8C                     l10912:
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;main.c: 2268: writeEEPROM(0x79, val);
 11828  000C8C  6A0F               	clrf	?_writeEEPROM+1,c
 11829  000C8E  0E79               	movlw	121
 11830  000C90  6E0E               	movwf	?_writeEEPROM,c
 11831  000C92  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11832  000C96  EC65  F029         	call	_writeEEPROM	;wreg free
 11833                           
 11834                           ;main.c: 2269: rv = readEEPROM(0x79);
 11835  000C9A  6A0F               	clrf	?_readEEPROM+1,c
 11836  000C9C  0E79               	movlw	121
 11837  000C9E  6E0E               	movwf	?_readEEPROM,c
 11838  000CA0  EC62  F02A         	call	_readEEPROM	;wreg free
 11839  000CA4  D356               	goto	L20
 11840  000CA6                     l10914:
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;main.c: 2274: writeEEPROM(0x7A, val);
 11844  000CA6  6A0F               	clrf	?_writeEEPROM+1,c
 11845  000CA8  0E7A               	movlw	122
 11846  000CAA  6E0E               	movwf	?_writeEEPROM,c
 11847  000CAC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11848  000CB0  EC65  F029         	call	_writeEEPROM	;wreg free
 11849                           
 11850                           ;main.c: 2275: rv = readEEPROM(0x7A);
 11851  000CB4  6A0F               	clrf	?_readEEPROM+1,c
 11852  000CB6  0E7A               	movlw	122
 11853  000CB8  6E0E               	movwf	?_readEEPROM,c
 11854  000CBA  EC62  F02A         	call	_readEEPROM	;wreg free
 11855  000CBE  D349               	goto	L20
 11856  000CC0                     l10916:
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;main.c: 2280: writeEEPROM(0x7B, val);
 11860  000CC0  6A0F               	clrf	?_writeEEPROM+1,c
 11861  000CC2  0E7B               	movlw	123
 11862  000CC4  6E0E               	movwf	?_writeEEPROM,c
 11863  000CC6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11864  000CCA  EC65  F029         	call	_writeEEPROM	;wreg free
 11865                           
 11866                           ;main.c: 2281: rv = readEEPROM(0x7B);
 11867  000CCE  6A0F               	clrf	?_readEEPROM+1,c
 11868  000CD0  0E7B               	movlw	123
 11869  000CD2  6E0E               	movwf	?_readEEPROM,c
 11870  000CD4  EC62  F02A         	call	_readEEPROM	;wreg free
 11871  000CD8  D33C               	goto	L20
 11872  000CDA                     l10918:
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;main.c: 2286: writeEEPROM(0x7C, val);
 11876  000CDA  6A0F               	clrf	?_writeEEPROM+1,c
 11877  000CDC  0E7C               	movlw	124
 11878  000CDE  6E0E               	movwf	?_writeEEPROM,c
 11879  000CE0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11880  000CE4  EC65  F029         	call	_writeEEPROM	;wreg free
 11881                           
 11882                           ;main.c: 2287: rv = readEEPROM(0x7C);
 11883  000CE8  6A0F               	clrf	?_readEEPROM+1,c
 11884  000CEA  0E7C               	movlw	124
 11885  000CEC  6E0E               	movwf	?_readEEPROM,c
 11886  000CEE  EC62  F02A         	call	_readEEPROM	;wreg free
 11887  000CF2  D32F               	goto	L20
 11888  000CF4                     l10920:
 11889                           
 11890                           ; BSR set to: 0
 11891                           ;main.c: 2292: writeEEPROM(0x7D, val);
 11892  000CF4  6A0F               	clrf	?_writeEEPROM+1,c
 11893  000CF6  0E7D               	movlw	125
 11894  000CF8  6E0E               	movwf	?_writeEEPROM,c
 11895  000CFA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11896  000CFE  EC65  F029         	call	_writeEEPROM	;wreg free
 11897                           
 11898                           ;main.c: 2293: rv = readEEPROM(0x7D);
 11899  000D02  6A0F               	clrf	?_readEEPROM+1,c
 11900  000D04  0E7D               	movlw	125
 11901  000D06  6E0E               	movwf	?_readEEPROM,c
 11902  000D08  EC62  F02A         	call	_readEEPROM	;wreg free
 11903  000D0C  D322               	goto	L20
 11904  000D0E                     l10922:
 11905                           
 11906                           ; BSR set to: 0
 11907                           ;main.c: 2298: writeEEPROM(0x7E, val);
 11908  000D0E  6A0F               	clrf	?_writeEEPROM+1,c
 11909  000D10  0E7E               	movlw	126
 11910  000D12  6E0E               	movwf	?_writeEEPROM,c
 11911  000D14  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11912  000D18  EC65  F029         	call	_writeEEPROM	;wreg free
 11913                           
 11914                           ;main.c: 2299: rv = readEEPROM(0x7E);
 11915  000D1C  6A0F               	clrf	?_readEEPROM+1,c
 11916  000D1E  0E7E               	movlw	126
 11917  000D20  6E0E               	movwf	?_readEEPROM,c
 11918  000D22  EC62  F02A         	call	_readEEPROM	;wreg free
 11919  000D26  D315               	goto	L20
 11920  000D28                     l10924:
 11921                           
 11922                           ; BSR set to: 0
 11923                           ;main.c: 2308: writeEEPROM(0x7F, val );
 11924  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 11925  000D2A  0E7F               	movlw	127
 11926  000D2C  6E0E               	movwf	?_writeEEPROM,c
 11927  000D2E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11928  000D32  EC65  F029         	call	_writeEEPROM	;wreg free
 11929                           
 11930                           ;main.c: 2309: rv = readEEPROM(0x7F);
 11931  000D36  6A0F               	clrf	?_readEEPROM+1,c
 11932  000D38  0E7F               	movlw	127
 11933  000D3A  6E0E               	movwf	?_readEEPROM,c
 11934  000D3C  EC62  F02A         	call	_readEEPROM	;wreg free
 11935  000D40  D308               	goto	L20
 11936  000D42                     l10926:
 11937                           
 11938                           ; BSR set to: 0
 11939                           ;main.c: 2314: writeEEPROM(0x80, val );
 11940  000D42  6A0F               	clrf	?_writeEEPROM+1,c
 11941  000D44  0E80               	movlw	128
 11942  000D46  6E0E               	movwf	?_writeEEPROM,c
 11943  000D48  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11944  000D4C  EC65  F029         	call	_writeEEPROM	;wreg free
 11945                           
 11946                           ;main.c: 2315: rv = readEEPROM(0x80);
 11947  000D50  6A0F               	clrf	?_readEEPROM+1,c
 11948  000D52  0E80               	movlw	128
 11949  000D54  6E0E               	movwf	?_readEEPROM,c
 11950  000D56  EC62  F02A         	call	_readEEPROM	;wreg free
 11951  000D5A  D2FB               	goto	L20
 11952  000D5C                     l10928:
 11953                           
 11954                           ; BSR set to: 0
 11955                           ;main.c: 2320: writeEEPROM(0x81, val );
 11956  000D5C  6A0F               	clrf	?_writeEEPROM+1,c
 11957  000D5E  0E81               	movlw	129
 11958  000D60  6E0E               	movwf	?_writeEEPROM,c
 11959  000D62  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11960  000D66  EC65  F029         	call	_writeEEPROM	;wreg free
 11961                           
 11962                           ;main.c: 2321: rv = readEEPROM(0x81);
 11963  000D6A  6A0F               	clrf	?_readEEPROM+1,c
 11964  000D6C  0E81               	movlw	129
 11965  000D6E  6E0E               	movwf	?_readEEPROM,c
 11966  000D70  EC62  F02A         	call	_readEEPROM	;wreg free
 11967  000D74  D2EE               	goto	L20
 11968  000D76                     l10930:
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;main.c: 2326: writeEEPROM(0x82, val );
 11972  000D76  6A0F               	clrf	?_writeEEPROM+1,c
 11973  000D78  0E82               	movlw	130
 11974  000D7A  6E0E               	movwf	?_writeEEPROM,c
 11975  000D7C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11976  000D80  EC65  F029         	call	_writeEEPROM	;wreg free
 11977                           
 11978                           ;main.c: 2327: rv = readEEPROM(0x82);
 11979  000D84  6A0F               	clrf	?_readEEPROM+1,c
 11980  000D86  0E82               	movlw	130
 11981  000D88  6E0E               	movwf	?_readEEPROM,c
 11982  000D8A  EC62  F02A         	call	_readEEPROM	;wreg free
 11983  000D8E  D2E1               	goto	L20
 11984  000D90                     l10932:
 11985                           
 11986                           ; BSR set to: 0
 11987                           ;main.c: 2332: writeEEPROM(0x83, val );
 11988  000D90  6A0F               	clrf	?_writeEEPROM+1,c
 11989  000D92  0E83               	movlw	131
 11990  000D94  6E0E               	movwf	?_writeEEPROM,c
 11991  000D96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11992  000D9A  EC65  F029         	call	_writeEEPROM	;wreg free
 11993                           
 11994                           ;main.c: 2333: rv = readEEPROM(0x83);
 11995  000D9E  6A0F               	clrf	?_readEEPROM+1,c
 11996  000DA0  0E83               	movlw	131
 11997  000DA2  6E0E               	movwf	?_readEEPROM,c
 11998  000DA4  EC62  F02A         	call	_readEEPROM	;wreg free
 11999  000DA8  D2D4               	goto	L20
 12000  000DAA                     l10934:
 12001                           
 12002                           ; BSR set to: 0
 12003                           ;main.c: 2338: writeEEPROM(0x84, val );
 12004  000DAA  6A0F               	clrf	?_writeEEPROM+1,c
 12005  000DAC  0E84               	movlw	132
 12006  000DAE  6E0E               	movwf	?_writeEEPROM,c
 12007  000DB0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12008  000DB4  EC65  F029         	call	_writeEEPROM	;wreg free
 12009                           
 12010                           ;main.c: 2339: rv = readEEPROM(0x84);
 12011  000DB8  6A0F               	clrf	?_readEEPROM+1,c
 12012  000DBA  0E84               	movlw	132
 12013  000DBC  6E0E               	movwf	?_readEEPROM,c
 12014  000DBE  EC62  F02A         	call	_readEEPROM	;wreg free
 12015  000DC2  D2C7               	goto	L20
 12016  000DC4                     l10936:
 12017                           
 12018                           ; BSR set to: 0
 12019                           ;main.c: 2344: writeEEPROM(0x85, val );
 12020  000DC4  6A0F               	clrf	?_writeEEPROM+1,c
 12021  000DC6  0E85               	movlw	133
 12022  000DC8  6E0E               	movwf	?_writeEEPROM,c
 12023  000DCA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12024  000DCE  EC65  F029         	call	_writeEEPROM	;wreg free
 12025                           
 12026                           ;main.c: 2345: rv = readEEPROM(0x85);
 12027  000DD2  6A0F               	clrf	?_readEEPROM+1,c
 12028  000DD4  0E85               	movlw	133
 12029  000DD6  6E0E               	movwf	?_readEEPROM,c
 12030  000DD8  EC62  F02A         	call	_readEEPROM	;wreg free
 12031  000DDC  D2BA               	goto	L20
 12032  000DDE                     l10938:
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;main.c: 2350: writeEEPROM(0x86, val );
 12036  000DDE  6A0F               	clrf	?_writeEEPROM+1,c
 12037  000DE0  0E86               	movlw	134
 12038  000DE2  6E0E               	movwf	?_writeEEPROM,c
 12039  000DE4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12040  000DE8  EC65  F029         	call	_writeEEPROM	;wreg free
 12041                           
 12042                           ;main.c: 2351: rv = readEEPROM(0x86);
 12043  000DEC  6A0F               	clrf	?_readEEPROM+1,c
 12044  000DEE  0E86               	movlw	134
 12045  000DF0  6E0E               	movwf	?_readEEPROM,c
 12046  000DF2  EC62  F02A         	call	_readEEPROM	;wreg free
 12047  000DF6  D2AD               	goto	L20
 12048  000DF8                     l10940:
 12049                           
 12050                           ; BSR set to: 0
 12051                           ;main.c: 2356: writeEEPROM(0x87, val );
 12052  000DF8  6A0F               	clrf	?_writeEEPROM+1,c
 12053  000DFA  0E87               	movlw	135
 12054  000DFC  6E0E               	movwf	?_writeEEPROM,c
 12055  000DFE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12056  000E02  EC65  F029         	call	_writeEEPROM	;wreg free
 12057                           
 12058                           ;main.c: 2357: rv = readEEPROM(0x87);
 12059  000E06  6A0F               	clrf	?_readEEPROM+1,c
 12060  000E08  0E87               	movlw	135
 12061  000E0A  6E0E               	movwf	?_readEEPROM,c
 12062  000E0C  EC62  F02A         	call	_readEEPROM	;wreg free
 12063  000E10  D2A0               	goto	L20
 12064  000E12                     l10942:
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;main.c: 2362: writeEEPROM(0x88, val );
 12068  000E12  6A0F               	clrf	?_writeEEPROM+1,c
 12069  000E14  0E88               	movlw	136
 12070  000E16  6E0E               	movwf	?_writeEEPROM,c
 12071  000E18  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12072  000E1C  EC65  F029         	call	_writeEEPROM	;wreg free
 12073                           
 12074                           ;main.c: 2363: rv = readEEPROM(0x88);
 12075  000E20  6A0F               	clrf	?_readEEPROM+1,c
 12076  000E22  0E88               	movlw	136
 12077  000E24  6E0E               	movwf	?_readEEPROM,c
 12078  000E26  EC62  F02A         	call	_readEEPROM	;wreg free
 12079  000E2A  D293               	goto	L20
 12080  000E2C                     l10944:
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;main.c: 2368: writeEEPROM(0x89, val );
 12084  000E2C  6A0F               	clrf	?_writeEEPROM+1,c
 12085  000E2E  0E89               	movlw	137
 12086  000E30  6E0E               	movwf	?_writeEEPROM,c
 12087  000E32  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12088  000E36  EC65  F029         	call	_writeEEPROM	;wreg free
 12089                           
 12090                           ;main.c: 2369: rv = readEEPROM(0x89);
 12091  000E3A  6A0F               	clrf	?_readEEPROM+1,c
 12092  000E3C  0E89               	movlw	137
 12093  000E3E  6E0E               	movwf	?_readEEPROM,c
 12094  000E40  EC62  F02A         	call	_readEEPROM	;wreg free
 12095  000E44  D286               	goto	L20
 12096  000E46                     l10946:
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;main.c: 2374: writeEEPROM(0x8A, val );
 12100  000E46  6A0F               	clrf	?_writeEEPROM+1,c
 12101  000E48  0E8A               	movlw	138
 12102  000E4A  6E0E               	movwf	?_writeEEPROM,c
 12103  000E4C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12104  000E50  EC65  F029         	call	_writeEEPROM	;wreg free
 12105                           
 12106                           ;main.c: 2375: rv = readEEPROM(0x8A);
 12107  000E54  6A0F               	clrf	?_readEEPROM+1,c
 12108  000E56  0E8A               	movlw	138
 12109  000E58  6E0E               	movwf	?_readEEPROM,c
 12110  000E5A  EC62  F02A         	call	_readEEPROM	;wreg free
 12111  000E5E  D279               	goto	L20
 12112  000E60                     l10948:
 12113                           
 12114                           ; BSR set to: 0
 12115                           ;main.c: 2384: writeEEPROM(0x8B, val );
 12116  000E60  6A0F               	clrf	?_writeEEPROM+1,c
 12117  000E62  0E8B               	movlw	139
 12118  000E64  6E0E               	movwf	?_writeEEPROM,c
 12119  000E66  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12120  000E6A  EC65  F029         	call	_writeEEPROM	;wreg free
 12121                           
 12122                           ;main.c: 2385: rv = readEEPROM(0x8B);
 12123  000E6E  6A0F               	clrf	?_readEEPROM+1,c
 12124  000E70  0E8B               	movlw	139
 12125  000E72  6E0E               	movwf	?_readEEPROM,c
 12126  000E74  EC62  F02A         	call	_readEEPROM	;wreg free
 12127  000E78  D26C               	goto	L20
 12128  000E7A                     l10950:
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;main.c: 2390: writeEEPROM(0x8C, val );
 12132  000E7A  6A0F               	clrf	?_writeEEPROM+1,c
 12133  000E7C  0E8C               	movlw	140
 12134  000E7E  6E0E               	movwf	?_writeEEPROM,c
 12135  000E80  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12136  000E84  EC65  F029         	call	_writeEEPROM	;wreg free
 12137                           
 12138                           ;main.c: 2391: rv = readEEPROM(0x8C);
 12139  000E88  6A0F               	clrf	?_readEEPROM+1,c
 12140  000E8A  0E8C               	movlw	140
 12141  000E8C  6E0E               	movwf	?_readEEPROM,c
 12142  000E8E  EC62  F02A         	call	_readEEPROM	;wreg free
 12143  000E92  D25F               	goto	L20
 12144  000E94                     l10952:
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;main.c: 2396: writeEEPROM(0x8D, val );
 12148  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 12149  000E96  0E8D               	movlw	141
 12150  000E98  6E0E               	movwf	?_writeEEPROM,c
 12151  000E9A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12152  000E9E  EC65  F029         	call	_writeEEPROM	;wreg free
 12153                           
 12154                           ;main.c: 2397: rv = readEEPROM(0x8D);
 12155  000EA2  6A0F               	clrf	?_readEEPROM+1,c
 12156  000EA4  0E8D               	movlw	141
 12157  000EA6  6E0E               	movwf	?_readEEPROM,c
 12158  000EA8  EC62  F02A         	call	_readEEPROM	;wreg free
 12159  000EAC  D252               	goto	L20
 12160  000EAE                     l10954:
 12161                           
 12162                           ; BSR set to: 0
 12163                           ;main.c: 2402: writeEEPROM(0x8E, val );
 12164  000EAE  6A0F               	clrf	?_writeEEPROM+1,c
 12165  000EB0  0E8E               	movlw	142
 12166  000EB2  6E0E               	movwf	?_writeEEPROM,c
 12167  000EB4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12168  000EB8  EC65  F029         	call	_writeEEPROM	;wreg free
 12169                           
 12170                           ;main.c: 2403: rv = readEEPROM(0x8E);
 12171  000EBC  6A0F               	clrf	?_readEEPROM+1,c
 12172  000EBE  0E8E               	movlw	142
 12173  000EC0  6E0E               	movwf	?_readEEPROM,c
 12174  000EC2  EC62  F02A         	call	_readEEPROM	;wreg free
 12175  000EC6  D245               	goto	L20
 12176  000EC8                     l10956:
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;main.c: 2408: writeEEPROM(0x8F, val );
 12180  000EC8  6A0F               	clrf	?_writeEEPROM+1,c
 12181  000ECA  0E8F               	movlw	143
 12182  000ECC  6E0E               	movwf	?_writeEEPROM,c
 12183  000ECE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12184  000ED2  EC65  F029         	call	_writeEEPROM	;wreg free
 12185                           
 12186                           ;main.c: 2409: rv = readEEPROM(0x8F);
 12187  000ED6  6A0F               	clrf	?_readEEPROM+1,c
 12188  000ED8  0E8F               	movlw	143
 12189  000EDA  6E0E               	movwf	?_readEEPROM,c
 12190  000EDC  EC62  F02A         	call	_readEEPROM	;wreg free
 12191  000EE0  D238               	goto	L20
 12192  000EE2                     l10958:
 12193                           
 12194                           ; BSR set to: 0
 12195                           ;main.c: 2414: writeEEPROM(0x90, val );
 12196  000EE2  6A0F               	clrf	?_writeEEPROM+1,c
 12197  000EE4  0E90               	movlw	144
 12198  000EE6  6E0E               	movwf	?_writeEEPROM,c
 12199  000EE8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12200  000EEC  EC65  F029         	call	_writeEEPROM	;wreg free
 12201                           
 12202                           ;main.c: 2415: rv = readEEPROM(0x90);
 12203  000EF0  6A0F               	clrf	?_readEEPROM+1,c
 12204  000EF2  0E90               	movlw	144
 12205  000EF4  6E0E               	movwf	?_readEEPROM,c
 12206  000EF6  EC62  F02A         	call	_readEEPROM	;wreg free
 12207  000EFA  D22B               	goto	L20
 12208  000EFC                     l10960:
 12209                           
 12210                           ; BSR set to: 0
 12211                           ;main.c: 2420: writeEEPROM(0x91, val );
 12212  000EFC  6A0F               	clrf	?_writeEEPROM+1,c
 12213  000EFE  0E91               	movlw	145
 12214  000F00  6E0E               	movwf	?_writeEEPROM,c
 12215  000F02  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12216  000F06  EC65  F029         	call	_writeEEPROM	;wreg free
 12217                           
 12218                           ;main.c: 2421: rv = readEEPROM(0x91);
 12219  000F0A  6A0F               	clrf	?_readEEPROM+1,c
 12220  000F0C  0E91               	movlw	145
 12221  000F0E  6E0E               	movwf	?_readEEPROM,c
 12222  000F10  EC62  F02A         	call	_readEEPROM	;wreg free
 12223  000F14  D21E               	goto	L20
 12224  000F16                     l10962:
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;main.c: 2426: writeEEPROM(0x92, val );
 12228  000F16  6A0F               	clrf	?_writeEEPROM+1,c
 12229  000F18  0E92               	movlw	146
 12230  000F1A  6E0E               	movwf	?_writeEEPROM,c
 12231  000F1C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12232  000F20  EC65  F029         	call	_writeEEPROM	;wreg free
 12233                           
 12234                           ;main.c: 2427: rv = readEEPROM(0x92);
 12235  000F24  6A0F               	clrf	?_readEEPROM+1,c
 12236  000F26  0E92               	movlw	146
 12237  000F28  6E0E               	movwf	?_readEEPROM,c
 12238  000F2A  EC62  F02A         	call	_readEEPROM	;wreg free
 12239  000F2E  D211               	goto	L20
 12240  000F30                     l10964:
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;main.c: 2432: writeEEPROM(0x93, val );
 12244  000F30  6A0F               	clrf	?_writeEEPROM+1,c
 12245  000F32  0E93               	movlw	147
 12246  000F34  6E0E               	movwf	?_writeEEPROM,c
 12247  000F36  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12248  000F3A  EC65  F029         	call	_writeEEPROM	;wreg free
 12249                           
 12250                           ;main.c: 2433: rv = readEEPROM(0x93);
 12251  000F3E  6A0F               	clrf	?_readEEPROM+1,c
 12252  000F40  0E93               	movlw	147
 12253  000F42  6E0E               	movwf	?_readEEPROM,c
 12254  000F44  EC62  F02A         	call	_readEEPROM	;wreg free
 12255  000F48  D204               	goto	L20
 12256  000F4A                     l10966:
 12257                           
 12258                           ; BSR set to: 0
 12259                           ;main.c: 2438: writeEEPROM(0x94, val );
 12260  000F4A  6A0F               	clrf	?_writeEEPROM+1,c
 12261  000F4C  0E94               	movlw	148
 12262  000F4E  6E0E               	movwf	?_writeEEPROM,c
 12263  000F50  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12264  000F54  EC65  F029         	call	_writeEEPROM	;wreg free
 12265                           
 12266                           ;main.c: 2439: rv = readEEPROM(0x94);
 12267  000F58  6A0F               	clrf	?_readEEPROM+1,c
 12268  000F5A  0E94               	movlw	148
 12269  000F5C  6E0E               	movwf	?_readEEPROM,c
 12270  000F5E  EC62  F02A         	call	_readEEPROM	;wreg free
 12271  000F62  D1F7               	goto	L20
 12272  000F64                     l10968:
 12273                           
 12274                           ; BSR set to: 0
 12275                           ;main.c: 2444: writeEEPROM(0x95, val );
 12276  000F64  6A0F               	clrf	?_writeEEPROM+1,c
 12277  000F66  0E95               	movlw	149
 12278  000F68  6E0E               	movwf	?_writeEEPROM,c
 12279  000F6A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12280  000F6E  EC65  F029         	call	_writeEEPROM	;wreg free
 12281                           
 12282                           ;main.c: 2445: rv = readEEPROM(0x95);
 12283  000F72  6A0F               	clrf	?_readEEPROM+1,c
 12284  000F74  0E95               	movlw	149
 12285  000F76  6E0E               	movwf	?_readEEPROM,c
 12286  000F78  EC62  F02A         	call	_readEEPROM	;wreg free
 12287  000F7C  D1EA               	goto	L20
 12288  000F7E                     l10970:
 12289                           
 12290                           ; BSR set to: 0
 12291                           ;main.c: 2450: writeEEPROM(0x96, val );
 12292  000F7E  6A0F               	clrf	?_writeEEPROM+1,c
 12293  000F80  0E96               	movlw	150
 12294  000F82  6E0E               	movwf	?_writeEEPROM,c
 12295  000F84  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12296  000F88  EC65  F029         	call	_writeEEPROM	;wreg free
 12297                           
 12298                           ;main.c: 2451: rv = readEEPROM(0x96);
 12299  000F8C  6A0F               	clrf	?_readEEPROM+1,c
 12300  000F8E  0E96               	movlw	150
 12301  000F90  6E0E               	movwf	?_readEEPROM,c
 12302  000F92  EC62  F02A         	call	_readEEPROM	;wreg free
 12303  000F96  D1DD               	goto	L20
 12304  000F98                     l10972:
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;main.c: 2460: writeEEPROM(0x97, val);
 12308  000F98  6A0F               	clrf	?_writeEEPROM+1,c
 12309  000F9A  0E97               	movlw	151
 12310  000F9C  6E0E               	movwf	?_writeEEPROM,c
 12311  000F9E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12312  000FA2  EC65  F029         	call	_writeEEPROM	;wreg free
 12313                           
 12314                           ;main.c: 2461: rv = readEEPROM(0x97);
 12315  000FA6  6A0F               	clrf	?_readEEPROM+1,c
 12316  000FA8  0E97               	movlw	151
 12317  000FAA  6E0E               	movwf	?_readEEPROM,c
 12318  000FAC  EC62  F02A         	call	_readEEPROM	;wreg free
 12319  000FB0  D1D0               	goto	L20
 12320  000FB2                     l10974:
 12321                           
 12322                           ; BSR set to: 0
 12323                           ;main.c: 2466: writeEEPROM(0x98, val);
 12324  000FB2  6A0F               	clrf	?_writeEEPROM+1,c
 12325  000FB4  0E98               	movlw	152
 12326  000FB6  6E0E               	movwf	?_writeEEPROM,c
 12327  000FB8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12328  000FBC  EC65  F029         	call	_writeEEPROM	;wreg free
 12329                           
 12330                           ;main.c: 2467: rv = readEEPROM(0x98);
 12331  000FC0  6A0F               	clrf	?_readEEPROM+1,c
 12332  000FC2  0E98               	movlw	152
 12333  000FC4  6E0E               	movwf	?_readEEPROM,c
 12334  000FC6  EC62  F02A         	call	_readEEPROM	;wreg free
 12335  000FCA  D1C3               	goto	L20
 12336  000FCC                     l10976:
 12337                           
 12338                           ; BSR set to: 0
 12339                           ;main.c: 2472: writeEEPROM(0x99, val);
 12340  000FCC  6A0F               	clrf	?_writeEEPROM+1,c
 12341  000FCE  0E99               	movlw	153
 12342  000FD0  6E0E               	movwf	?_writeEEPROM,c
 12343  000FD2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12344  000FD6  EC65  F029         	call	_writeEEPROM	;wreg free
 12345  000FDA  6A0F               	clrf	?_readEEPROM+1,c
 12346  000FDC  0E99               	movlw	153
 12347  000FDE  6E0E               	movwf	?_readEEPROM,c
 12348  000FE0  EC62  F02A         	call	_readEEPROM	;wreg free
 12349  000FE4                     l519:
 12350                           
 12351                           ;main.c: 2477: writeEEPROM(0x9A, val);
 12352  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 12353  000FE6  0E9A               	movlw	154
 12354  000FE8  6E0E               	movwf	?_writeEEPROM,c
 12355  000FEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12356  000FEE  EC65  F029         	call	_writeEEPROM	;wreg free
 12357                           
 12358                           ;main.c: 2478: rv = readEEPROM(0x9A);
 12359  000FF2  6A0F               	clrf	?_readEEPROM+1,c
 12360  000FF4  0E9A               	movlw	154
 12361  000FF6  6E0E               	movwf	?_readEEPROM,c
 12362  000FF8  EC62  F02A         	call	_readEEPROM	;wreg free
 12363  000FFC  D1AA               	goto	L20
 12364  000FFE                     l10978:
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;main.c: 2483: writeEEPROM(0x9B, val);
 12368  000FFE  6A0F               	clrf	?_writeEEPROM+1,c
 12369  001000  0E9B               	movlw	155
 12370  001002  6E0E               	movwf	?_writeEEPROM,c
 12371  001004  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12372  001008  EC65  F029         	call	_writeEEPROM	;wreg free
 12373                           
 12374                           ;main.c: 2484: rv = readEEPROM(0x9B);
 12375  00100C  6A0F               	clrf	?_readEEPROM+1,c
 12376  00100E  0E9B               	movlw	155
 12377  001010  6E0E               	movwf	?_readEEPROM,c
 12378  001012  EC62  F02A         	call	_readEEPROM	;wreg free
 12379  001016  D19D               	goto	L20
 12380  001018                     l10980:
 12381                           
 12382                           ; BSR set to: 0
 12383                           ;main.c: 2489: writeEEPROM(0x9C, val);
 12384  001018  6A0F               	clrf	?_writeEEPROM+1,c
 12385  00101A  0E9C               	movlw	156
 12386  00101C  6E0E               	movwf	?_writeEEPROM,c
 12387  00101E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12388  001022  EC65  F029         	call	_writeEEPROM	;wreg free
 12389                           
 12390                           ;main.c: 2490: rv = readEEPROM(0x9C);
 12391  001026  6A0F               	clrf	?_readEEPROM+1,c
 12392  001028  0E9C               	movlw	156
 12393  00102A  6E0E               	movwf	?_readEEPROM,c
 12394  00102C  EC62  F02A         	call	_readEEPROM	;wreg free
 12395  001030  D190               	goto	L20
 12396  001032                     l522:
 12397                           
 12398                           ; BSR set to: 0
 12399                           ;main.c: 2495: rv = 0;
 12400  001032  6A24               	clrf	vscp_writeAppReg@rv,c
 12401                           
 12402                           ;main.c: 2496: break;
 12403  001034  D18F               	goto	l11016
 12404  001036                     l10982:
 12405                           
 12406                           ; BSR set to: 0
 12407                           ;main.c: 2504: writeEEPROM(0xF2, val);
 12408  001036  6A0F               	clrf	?_writeEEPROM+1,c
 12409  001038  0EF2               	movlw	242
 12410  00103A  6E0E               	movwf	?_writeEEPROM,c
 12411  00103C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12412  001040  EC65  F029         	call	_writeEEPROM	;wreg free
 12413                           
 12414                           ;main.c: 2505: rv = readEEPROM(0xF2);
 12415  001044  6A0F               	clrf	?_readEEPROM+1,c
 12416  001046  0EF2               	movlw	242
 12417  001048  6E0E               	movwf	?_readEEPROM,c
 12418  00104A  EC62  F02A         	call	_readEEPROM	;wreg free
 12419  00104E  D181               	goto	L20
 12420  001050                     l10984:
 12421                           
 12422                           ; BSR set to: 0
 12423                           ;main.c: 2509: writeEEPROM(0xF3, val);
 12424  001050  6A0F               	clrf	?_writeEEPROM+1,c
 12425  001052  0EF3               	movlw	243
 12426  001054  6E0E               	movwf	?_writeEEPROM,c
 12427  001056  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12428  00105A  EC65  F029         	call	_writeEEPROM	;wreg free
 12429                           
 12430                           ;main.c: 2510: rv = readEEPROM(0xF3);
 12431  00105E  6A0F               	clrf	?_readEEPROM+1,c
 12432  001060  0EF3               	movlw	243
 12433  001062  6E0E               	movwf	?_readEEPROM,c
 12434  001064  EC62  F02A         	call	_readEEPROM	;wreg free
 12435  001068  D174               	goto	L20
 12436  00106A                     l10986:
 12437                           
 12438                           ; BSR set to: 0
 12439                           ;main.c: 2514: rv = ~val;
 12440  00106A  1C21               	comf	vscp_writeAppReg@val,w,c
 12441  00106C  D172               	goto	L20
 12442  00106E                     l10990:
 12443                           
 12444                           ; BSR set to: 0
 12445  00106E  5023               	movf	vscp_writeAppReg@reg,w,c
 12446                           
 12447                           ; Switch size 1, requested type "space"
 12448                           ; Number of cases is 96, Range of values is 0 to 119
 12449                           ; switch strategies available:
 12450                           ; Name         Instructions Cycles
 12451                           ; simple_byte          289   145 (average)
 12452                           ;	Chosen strategy is simple_byte
 12453  001070  E102 EF42  F003    	bz	l10800
 12454  001076  0A01               	xorlw	1	; case 1
 12455  001078  E102 EF50  F003    	bz	l10802
 12456  00107E  0A03               	xorlw	3	; case 2
 12457  001080  E102 EF5E  F003    	bz	l10804
 12458  001086  0A01               	xorlw	1	; case 3
 12459  001088  E102 EF6C  F003    	bz	l10806
 12460  00108E  0A07               	xorlw	7	; case 4
 12461  001090  E102 EF7A  F003    	bz	l10808
 12462  001096  0A01               	xorlw	1	; case 5
 12463  001098  E102 EF88  F003    	bz	l10810
 12464  00109E  0A03               	xorlw	3	; case 6
 12465  0010A0  E102 EF96  F003    	bz	l10812
 12466  0010A6  0A01               	xorlw	1	; case 7
 12467  0010A8  E102 EFA4  F003    	bz	l10814
 12468  0010AE  0A13               	xorlw	19	; case 20
 12469  0010B0  E102 EFB2  F003    	bz	l10816
 12470  0010B6  0A01               	xorlw	1	; case 21
 12471  0010B8  E102 EFC0  F003    	bz	l10818
 12472  0010BE  0A03               	xorlw	3	; case 22
 12473  0010C0  E102 EFCE  F003    	bz	l10820
 12474  0010C6  0A01               	xorlw	1	; case 23
 12475  0010C8  E102 EFDC  F003    	bz	l10822
 12476  0010CE  0A0F               	xorlw	15	; case 24
 12477  0010D0  E102 EFEA  F003    	bz	l10824
 12478  0010D6  0A01               	xorlw	1	; case 25
 12479  0010D8  E102 EFF8  F003    	bz	l10826
 12480  0010DE  0A3F               	xorlw	63	; case 38
 12481  0010E0  E102 EF06  F004    	bz	l10828
 12482  0010E6  0A01               	xorlw	1	; case 39
 12483  0010E8  E102 EF14  F004    	bz	l10830
 12484  0010EE  0A0F               	xorlw	15	; case 40
 12485  0010F0  E102 EF22  F004    	bz	l10832
 12486  0010F6  0A01               	xorlw	1	; case 41
 12487  0010F8  E102 EF30  F004    	bz	l10834
 12488  0010FE  0A03               	xorlw	3	; case 42
 12489  001100  E102 EF3E  F004    	bz	l10836
 12490  001106  0A01               	xorlw	1	; case 43
 12491  001108  E102 EF4C  F004    	bz	l10838
 12492  00110E  0A07               	xorlw	7	; case 44
 12493  001110  E102 EF5A  F004    	bz	l10840
 12494  001116  0A01               	xorlw	1	; case 45
 12495  001118  E102 EF68  F004    	bz	l10842
 12496  00111E  0A03               	xorlw	3	; case 46
 12497  001120  E102 EF76  F004    	bz	l10844
 12498  001126  0A01               	xorlw	1	; case 47
 12499  001128  E102 EF84  F004    	bz	l10846
 12500  00112E  0A1F               	xorlw	31	; case 48
 12501  001130  E102 EF92  F004    	bz	l10848
 12502  001136  0A01               	xorlw	1	; case 49
 12503  001138  E101 D402          	bz	l10850
 12504  00113C  0A03               	xorlw	3	; case 50
 12505  00113E  E101 D40D          	bz	l10852
 12506  001142  0A01               	xorlw	1	; case 51
 12507  001144  E101 D418          	bz	l10854
 12508  001148  0A07               	xorlw	7	; case 52
 12509  00114A  E101 D423          	bz	l10856
 12510  00114E  0A01               	xorlw	1	; case 53
 12511  001150  E101 D42E          	bz	l10858
 12512  001154  0A03               	xorlw	3	; case 54
 12513  001156  E101 D439          	bz	l10860
 12514  00115A  0A01               	xorlw	1	; case 55
 12515  00115C  E101 D444          	bz	l10862
 12516  001160  0A0F               	xorlw	15	; case 56
 12517  001162  E101 D44F          	bz	l10864
 12518  001166  0A01               	xorlw	1	; case 57
 12519  001168  E101 D45A          	bz	l10866
 12520  00116C  0A03               	xorlw	3	; case 58
 12521  00116E  E101 D465          	bz	l10868
 12522  001172  0A01               	xorlw	1	; case 59
 12523  001174  E101 D470          	bz	l10870
 12524  001178  0A07               	xorlw	7	; case 60
 12525  00117A  E101 D47B          	bz	l10872
 12526  00117E  0A01               	xorlw	1	; case 61
 12527  001180  E101 D486          	bz	l10874
 12528  001184  0A03               	xorlw	3	; case 62
 12529  001186  E101 D491          	bz	l10876
 12530  00118A  0A01               	xorlw	1	; case 63
 12531  00118C  E101 D49C          	bz	l10878
 12532  001190  0A7F               	xorlw	127	; case 64
 12533  001192  E101 D4A7          	bz	l10880
 12534  001196  0A01               	xorlw	1	; case 65
 12535  001198  E101 D4B2          	bz	l10882
 12536  00119C  0A03               	xorlw	3	; case 66
 12537  00119E  E101 D4BD          	bz	l10884
 12538  0011A2  0A01               	xorlw	1	; case 67
 12539  0011A4  E101 D4C8          	bz	l10886
 12540  0011A8  0A07               	xorlw	7	; case 68
 12541  0011AA  E101 D4D3          	bz	l10888
 12542  0011AE  0A01               	xorlw	1	; case 69
 12543  0011B0  E101 D4DD          	bz	l10890
 12544  0011B4  0A03               	xorlw	3	; case 70
 12545  0011B6  E101 D4E7          	bz	l10892
 12546  0011BA  0A01               	xorlw	1	; case 71
 12547  0011BC  E101 D4F1          	bz	l10894
 12548  0011C0  0A0F               	xorlw	15	; case 72
 12549  0011C2  E101 D4FB          	bz	l10896
 12550  0011C6  0A01               	xorlw	1	; case 73
 12551  0011C8  E101 D505          	bz	l10898
 12552  0011CC  0A03               	xorlw	3	; case 74
 12553  0011CE  E101 D50F          	bz	l10900
 12554  0011D2  0A01               	xorlw	1	; case 75
 12555  0011D4  E101 D519          	bz	l10902
 12556  0011D8  0A07               	xorlw	7	; case 76
 12557  0011DA  E101 D523          	bz	l10904
 12558  0011DE  0A01               	xorlw	1	; case 77
 12559  0011E0  E101 D52D          	bz	l10906
 12560  0011E4  0A03               	xorlw	3	; case 78
 12561  0011E6  E101 D537          	bz	l10908
 12562  0011EA  0A01               	xorlw	1	; case 79
 12563  0011EC  E101 D541          	bz	l10910
 12564  0011F0  0A1F               	xorlw	31	; case 80
 12565  0011F2  E101 D54B          	bz	l10912
 12566  0011F6  0A01               	xorlw	1	; case 81
 12567  0011F8  E101 D555          	bz	l10914
 12568  0011FC  0A03               	xorlw	3	; case 82
 12569  0011FE  E101 D55F          	bz	l10916
 12570  001202  0A01               	xorlw	1	; case 83
 12571  001204  E101 D569          	bz	l10918
 12572  001208  0A07               	xorlw	7	; case 84
 12573  00120A  E101 D573          	bz	l10920
 12574  00120E  0A01               	xorlw	1	; case 85
 12575  001210  E101 D57D          	bz	l10922
 12576  001214  0A03               	xorlw	3	; case 86
 12577  001216  E101 D587          	bz	l10924
 12578  00121A  0A01               	xorlw	1	; case 87
 12579  00121C  E101 D591          	bz	l10926
 12580  001220  0A0F               	xorlw	15	; case 88
 12581  001222  E101 D59B          	bz	l10928
 12582  001226  0A01               	xorlw	1	; case 89
 12583  001228  E101 D5A5          	bz	l10930
 12584  00122C  0A03               	xorlw	3	; case 90
 12585  00122E  E101 D5AF          	bz	l10932
 12586  001232  0A01               	xorlw	1	; case 91
 12587  001234  E101 D5B9          	bz	l10934
 12588  001238  0A07               	xorlw	7	; case 92
 12589  00123A  E101 D5C3          	bz	l10936
 12590  00123E  0A01               	xorlw	1	; case 93
 12591  001240  E101 D5CD          	bz	l10938
 12592  001244  0A03               	xorlw	3	; case 94
 12593  001246  E101 D5D7          	bz	l10940
 12594  00124A  0A01               	xorlw	1	; case 95
 12595  00124C  E101 D5E1          	bz	l10942
 12596  001250  0A3F               	xorlw	63	; case 96
 12597  001252  E101 D5EB          	bz	l10944
 12598  001256  0A01               	xorlw	1	; case 97
 12599  001258  E101 D5F5          	bz	l10946
 12600  00125C  0A03               	xorlw	3	; case 98
 12601  00125E  E101 D5FF          	bz	l10948
 12602  001262  0A01               	xorlw	1	; case 99
 12603  001264  E101 D609          	bz	l10950
 12604  001268  0A07               	xorlw	7	; case 100
 12605  00126A  E101 D613          	bz	l10952
 12606  00126E  0A01               	xorlw	1	; case 101
 12607  001270  E101 D61D          	bz	l10954
 12608  001274  0A03               	xorlw	3	; case 102
 12609  001276  E101 D627          	bz	l10956
 12610  00127A  0A01               	xorlw	1	; case 103
 12611  00127C  E101 D631          	bz	l10958
 12612  001280  0A0F               	xorlw	15	; case 104
 12613  001282  E101 D63B          	bz	l10960
 12614  001286  0A01               	xorlw	1	; case 105
 12615  001288  E101 D645          	bz	l10962
 12616  00128C  0A03               	xorlw	3	; case 106
 12617  00128E  E101 D64F          	bz	l10964
 12618  001292  0A01               	xorlw	1	; case 107
 12619  001294  E101 D659          	bz	l10966
 12620  001298  0A07               	xorlw	7	; case 108
 12621  00129A  E101 D663          	bz	l10968
 12622  00129E  0A01               	xorlw	1	; case 109
 12623  0012A0  E101 D66D          	bz	l10970
 12624  0012A4  0A03               	xorlw	3	; case 110
 12625  0012A6  E101 D677          	bz	l10972
 12626  0012AA  0A01               	xorlw	1	; case 111
 12627  0012AC  E101 D681          	bz	l10974
 12628  0012B0  0A1F               	xorlw	31	; case 112
 12629  0012B2  E101 D68B          	bz	l10976
 12630  0012B6  0A01               	xorlw	1	; case 113
 12631  0012B8  E101 D694          	bz	l519
 12632  0012BC  0A03               	xorlw	3	; case 114
 12633  0012BE  E101 D69E          	bz	l10978
 12634  0012C2  0A01               	xorlw	1	; case 115
 12635  0012C4  E101 D6A8          	bz	l10980
 12636  0012C8  0A07               	xorlw	7	; case 116
 12637  0012CA  E101 D6B2          	bz	l522
 12638  0012CE  0A01               	xorlw	1	; case 117
 12639  0012D0  E101 D6AF          	bz	l522
 12640  0012D4  0A03               	xorlw	3	; case 118
 12641  0012D6  E101 D6AE          	bz	l10982
 12642  0012DA  0A01               	xorlw	1	; case 119
 12643  0012DC  E101 D6B8          	bz	l10984
 12644  0012E0  D6C4               	goto	l10986
 12645  0012E2                     l10992:
 12646                           
 12647                           ; BSR set to: 0
 12648                           ;main.c: 2518: else if (1 == vscp_page_select) {
 12649  0012E2  0446               	decf	_vscp_page_select,w,c
 12650  0012E4  1047               	iorwf	_vscp_page_select+1,w,c
 12651  0012E6  E136               	bnz	l11016
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;main.c: 2521: if (reg < 72) {
 12655  0012E8  0E48               	movlw	72
 12656  0012EA  6023               	cpfslt	vscp_writeAppReg@reg,c
 12657  0012EC  D010               	goto	l11000
 12658                           
 12659                           ; BSR set to: 0
 12660                           ;main.c: 2522: writeEEPROM(0xAA + reg, val);
 12661  0012EE  0EAA               	movlw	170
 12662  0012F0  D833               	call	PL66	;call to abstracted procedure
 12663  0012F2  EC65  F029         	call	_writeEEPROM	;wreg free
 12664                           
 12665                           ;main.c: 2523: rv = readEEPROM(0xAA + reg );
 12666  0012F6  0EAA               	movlw	170
 12667  0012F8  2423               	addwf	vscp_writeAppReg@reg,w,c
 12668  0012FA  6E0E               	movwf	?_readEEPROM,c
 12669  0012FC  6A0F               	clrf	?_readEEPROM+1,c
 12670  0012FE  0E00               	movlw	0
 12671  001300  220F               	addwfc	?_readEEPROM+1,f,c
 12672  001302  EC62  F02A         	call	_readEEPROM	;wreg free
 12673  001306  6E24               	movwf	vscp_writeAppReg@rv,c
 12674                           
 12675                           ;main.c: 2524: writeCoeffs2Ram();
 12676  001308  ECE3  F023         	call	_writeCoeffs2Ram	;wreg free
 12677                           
 12678                           ;main.c: 2525: }
 12679  00130C  D023               	goto	l11016
 12680  00130E                     l11000:
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;main.c: 2527: else if (reg < 84) {
 12684  00130E  0E54               	movlw	84
 12685  001310  6023               	cpfslt	vscp_writeAppReg@reg,c
 12686  001312  D010               	goto	l11012
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;main.c: 2529: uint8_t pos = reg - 72;
 12690  001314  5023               	movf	vscp_writeAppReg@reg,w,c
 12691  001316  0FB8               	addlw	184
 12692  001318  6E22               	movwf	vscp_writeAppReg@pos,c
 12693                           
 12694                           ; BSR set to: 0
 12695                           ;main.c: 2530: if ( pos % 2 ) {
 12696  00131A  A022               	btfss	vscp_writeAppReg@pos,0,c
 12697  00131C  D002               	goto	l11008
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;main.c: 2531: pos--;
 12701  00131E  0622               	decf	vscp_writeAppReg@pos,f,c
 12702                           
 12703                           ;main.c: 2532: }
 12704  001320  D001               	goto	l11010
 12705  001322                     l11008:
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;main.c: 2533: else {
 12709                           ;main.c: 2534: pos++;
 12710  001322  2A22               	incf	vscp_writeAppReg@pos,f,c
 12711  001324                     l11010:
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;main.c: 2535: }
 12715                           ;main.c: 2536: rv = adc[ pos ];
 12716  001324  0E84               	movlw	low _adc
 12717  001326  2422               	addwf	vscp_writeAppReg@pos,w,c
 12718  001328  6ED9               	movwf	fsr2l,c
 12719  00132A  6ADA               	clrf	fsr2h,c
 12720  00132C  0E01               	movlw	high _adc
 12721  00132E  22DA               	addwfc	fsr2h,f,c
 12722  001330  50DF               	movf	indf2,w,c
 12723  001332  D00F               	goto	L20
 12724  001334                     l11012:
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;main.c: 2539: else if (reg < 98) {
 12728  001334  0E62               	movlw	98
 12729  001336  6023               	cpfslt	vscp_writeAppReg@reg,c
 12730  001338  D00D               	goto	l11016
 12731                           
 12732                           ; BSR set to: 0
 12733                           ;main.c: 2540: writeEEPROM( 0x9E + reg - 84, val );
 12734  00133A  0E4A               	movlw	74
 12735  00133C  D80D               	call	PL66	;call to abstracted procedure
 12736  00133E  EC65  F029         	call	_writeEEPROM	;wreg free
 12737                           
 12738                           ;main.c: 2541: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12739  001342  0E4A               	movlw	74
 12740  001344  2423               	addwf	vscp_writeAppReg@reg,w,c
 12741  001346  6E0E               	movwf	?_readEEPROM,c
 12742  001348  6A0F               	clrf	?_readEEPROM+1,c
 12743  00134A  0E00               	movlw	0
 12744  00134C  220F               	addwfc	?_readEEPROM+1,f,c
 12745  00134E  EC62  F02A         	call	_readEEPROM	;wreg free
 12746  001352                     L20:
 12747  001352  6E24               	movwf	vscp_writeAppReg@rv,c
 12748  001354                     l11016:
 12749                           
 12750                           ;main.c: 2542: }
 12751                           ;main.c: 2543: }
 12752                           ;main.c: 2545: return rv;
 12753  001354  5024               	movf	vscp_writeAppReg@rv,w,c
 12754  001356  0012               	return	
 12755  001358                     __end_of_vscp_writeAppReg:
 12756                           	opt stack 0
 12757  001358                     PL66:
 12758                           	opt stack 24
 12759  001358  2423               	addwf	vscp_writeAppReg@reg,w,c
 12760  00135A  6E0E               	movwf	?_writeEEPROM,c
 12761  00135C  6A0F               	clrf	?_writeEEPROM+1,c
 12762  00135E  0E00               	movlw	0
 12763  001360  220F               	addwfc	?_writeEEPROM+1,f,c
 12764  001362  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12765  001366  0C00               	retlw	0
 12766  001368                     __end_ofPL66:
 12767                           	opt stack 0
 12768                           tblptru	equ	0xFF8
 12769                           tblptrh	equ	0xFF7
 12770                           tblptrl	equ	0xFF6
 12771                           tablat	equ	0xFF5
 12772                           prodh	equ	0xFF4
 12773                           prodl	equ	0xFF3
 12774                           intcon	equ	0xFF2
 12775                           postinc0	equ	0xFEE
 12776                           wreg	equ	0xFE8
 12777                           indf1	equ	0xFE7
 12778                           postdec1	equ	0xFE5
 12779                           fsr1h	equ	0xFE2
 12780                           fsr1l	equ	0xFE1
 12781                           indf2	equ	0xFDF
 12782                           postinc2	equ	0xFDE
 12783                           postdec2	equ	0xFDD
 12784                           plusw2	equ	0xFDB
 12785                           fsr2h	equ	0xFDA
 12786                           fsr2l	equ	0xFD9
 12787                           status	equ	0xFD8
 12788                           
 12789 ;; *************** function _vscp_readRegister *****************
 12790 ;; Defined at:
 12791 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;  reg             1    wreg     unsigned char 
 12794 ;; Auto vars:     Size  Location     Type
 12795 ;;  reg             1   35[COMRAM] unsigned char 
 12796 ;; Return value:  Size  Location     Type
 12797 ;;                  1    wreg      unsigned char 
 12798 ;; Registers used:
 12799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12800 ;; Tracked objects:
 12801 ;;		On entry : F/0
 12802 ;;		On exit  : 0/0
 12803 ;;		Unchanged: 0/0
 12804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12805 ;;      Params:         0       0       0       0       0       0       0
 12806 ;;      Locals:         1       0       0       0       0       0       0
 12807 ;;      Temps:          0       0       0       0       0       0       0
 12808 ;;      Totals:         1       0       0       0       0       0       0
 12809 ;;Total ram usage:        1 bytes
 12810 ;; Hardware stack levels used:    1
 12811 ;; Hardware stack levels required when called:    5
 12812 ;; This function calls:
 12813 ;;		_vscp_readAppReg
 12814 ;;		_vscp_readStdReg
 12815 ;; This function is called by:
 12816 ;;		_vscp_handleProtocolEvent
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           	psect	text43
 12821  0053DC                     __ptext43:
 12822                           	opt stack 0
 12823  0053DC                     _vscp_readRegister:
 12824                           	opt stack 24
 12825                           
 12826                           ;incstack = 0
 12827                           ;incstack = 0
 12828                           ;vscp_readRegister@reg stored from wreg
 12829  0053DC  CFE8 F024          	movff	wreg,vscp_readRegister@reg
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 12833  0053E0  0E7F               	movlw	127
 12834  0053E2  6424               	cpfsgt	vscp_readRegister@reg,c
 12835  0053E4  D004               	goto	l11262
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 12839  0053E6  5024               	movf	vscp_readRegister@reg,w,c
 12840  0053E8  EC52  F01B         	call	_vscp_readStdReg
 12841  0053EC  D003               	goto	l1107
 12842  0053EE                     l11262:
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;vscp_firmware.c: 565: else {
 12846                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 12847  0053EE  5024               	movf	vscp_readRegister@reg,w,c
 12848  0053F0  EC0F  F00E         	call	_vscp_readAppReg
 12849  0053F4                     l1107:
 12850  0053F4  0012               	return	
 12851  0053F6                     __end_of_vscp_readRegister:
 12852                           	opt stack 0
 12853                           tblptru	equ	0xFF8
 12854                           tblptrh	equ	0xFF7
 12855                           tblptrl	equ	0xFF6
 12856                           tablat	equ	0xFF5
 12857                           prodh	equ	0xFF4
 12858                           prodl	equ	0xFF3
 12859                           intcon	equ	0xFF2
 12860                           postinc0	equ	0xFEE
 12861                           wreg	equ	0xFE8
 12862                           indf1	equ	0xFE7
 12863                           postdec1	equ	0xFE5
 12864                           fsr1h	equ	0xFE2
 12865                           fsr1l	equ	0xFE1
 12866                           indf2	equ	0xFDF
 12867                           postinc2	equ	0xFDE
 12868                           postdec2	equ	0xFDD
 12869                           plusw2	equ	0xFDB
 12870                           fsr2h	equ	0xFDA
 12871                           fsr2l	equ	0xFD9
 12872                           status	equ	0xFD8
 12873                           
 12874 ;; *************** function _vscp_readStdReg *****************
 12875 ;; Defined at:
 12876 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 12877 ;; Parameters:    Size  Location     Type
 12878 ;;  reg             1    wreg     unsigned char 
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;  reg             1   34[COMRAM] unsigned char 
 12881 ;;  code            4   27[COMRAM] unsigned long 
 12882 ;;  idx             1   32[COMRAM] unsigned char 
 12883 ;;  code            4   23[COMRAM] unsigned long 
 12884 ;;  idx             1   31[COMRAM] unsigned char 
 12885 ;;  rv              1   33[COMRAM] unsigned char 
 12886 ;; Return value:  Size  Location     Type
 12887 ;;                  1    wreg      unsigned char 
 12888 ;; Registers used:
 12889 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12890 ;; Tracked objects:
 12891 ;;		On entry : F/0
 12892 ;;		On exit  : 0/0
 12893 ;;		Unchanged: 0/0
 12894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12895 ;;      Params:         0       0       0       0       0       0       0
 12896 ;;      Locals:        12       0       0       0       0       0       0
 12897 ;;      Temps:          5       0       0       0       0       0       0
 12898 ;;      Totals:        17       0       0       0       0       0       0
 12899 ;;Total ram usage:       17 bytes
 12900 ;; Hardware stack levels used:    1
 12901 ;; Hardware stack levels required when called:    4
 12902 ;; This function calls:
 12903 ;;		_vscp_getMajorVersion
 12904 ;;		_vscp_getMinorVersion
 12905 ;;		_vscp_getSubMinorVersion
 12906 ;;		_vscp_getGUID
 12907 ;;		_vscp_getMDF_URL
 12908 ;;		_vscp_getUserID
 12909 ;;		_vscp_getManufacturerId
 12910 ;;		_vscp_getBootLoaderAlgorithm
 12911 ;;		_vscp_getBufferSize
 12912 ;;		_vscp_getRegisterPagesUsed
 12913 ;;		_vscp_getFamilyCode
 12914 ;;		_vscp_getFamilyType
 12915 ;; This function is called by:
 12916 ;;		_vscp_readRegister
 12917 ;;		_vscp_handleProtocolEvent
 12918 ;; This function uses a non-reentrant model
 12919 ;;
 12920                           
 12921                           	psect	text44
 12922  0036A4                     __ptext44:
 12923                           	opt stack 0
 12924  0036A4                     _vscp_readStdReg:
 12925                           	opt stack 25
 12926                           
 12927                           ;incstack = 0
 12928                           ;incstack = 0
 12929                           ;vscp_readStdReg@reg stored from wreg
 12930  0036A4  CFE8 F023          	movff	wreg,vscp_readStdReg@reg
 12931                           
 12932                           ; BSR set to: 0
 12933                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 12934  0036A8  6A22               	clrf	vscp_readStdReg@rv,c
 12935                           
 12936                           ; BSR set to: 0
 12937                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 12938  0036AA  5023               	movf	vscp_readStdReg@reg,w,c
 12939  0036AC  0A80               	xorlw	128
 12940  0036AE  E104               	bnz	l11272
 12941                           
 12942                           ; BSR set to: 0
 12943                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 12944  0036B0  C04A  F022         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12945                           
 12946                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 12947  0036B4  6A4A               	clrf	_vscp_alarmstatus,c
 12948                           
 12949                           ;vscp_firmware.c: 584: }
 12950  0036B6  D0B3               	goto	l11360
 12951  0036B8                     l11272:
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 12955  0036B8  5023               	movf	vscp_readStdReg@reg,w,c
 12956  0036BA  0A81               	xorlw	129
 12957  0036BC  E102               	bnz	l11276
 12958                           
 12959                           ; BSR set to: 0
 12960                           ;vscp_firmware.c: 588: rv = 1;
 12961  0036BE  0E01               	movlw	1
 12962  0036C0  D075               	goto	L31
 12963  0036C2                     l11276:
 12964                           
 12965                           ; BSR set to: 0
 12966                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 12967  0036C2  5023               	movf	vscp_readStdReg@reg,w,c
 12968  0036C4  0A82               	xorlw	130
 12969  0036C6  E102               	bnz	l11280
 12970                           
 12971                           ; BSR set to: 0
 12972                           ;vscp_firmware.c: 594: rv = 5;
 12973  0036C8  0E05               	movlw	5
 12974  0036CA  D070               	goto	L31
 12975  0036CC                     l11280:
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 12979  0036CC  5023               	movf	vscp_readStdReg@reg,w,c
 12980  0036CE  0A83               	xorlw	131
 12981  0036D0  E102               	bnz	l11284
 12982                           
 12983                           ; BSR set to: 0
 12984                           ;vscp_firmware.c: 600: rv = 0;
 12985  0036D2  6A22               	clrf	vscp_readStdReg@rv,c
 12986                           
 12987                           ;vscp_firmware.c: 602: }
 12988  0036D4  D0A4               	goto	l11360
 12989  0036D6                     l11284:
 12990                           
 12991                           ; BSR set to: 0
 12992                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 12993  0036D6  5023               	movf	vscp_readStdReg@reg,w,c
 12994  0036D8  0A94               	xorlw	148
 12995  0036DA  E103               	bnz	l11288
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 12999  0036DC  ECC6  F02A         	call	_vscp_getMajorVersion	;wreg free
 13000  0036E0  D065               	goto	L31
 13001  0036E2                     l11288:
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 13005  0036E2  5023               	movf	vscp_readStdReg@reg,w,c
 13006  0036E4  0A95               	xorlw	149
 13007  0036E6  E103               	bnz	l11292
 13008                           
 13009                           ; BSR set to: 0
 13010                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 13011  0036E8  ECC5  F02A         	call	_vscp_getMinorVersion	;wreg free
 13012  0036EC  D05F               	goto	L31
 13013  0036EE                     l11292:
 13014                           
 13015                           ; BSR set to: 0
 13016                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 13017  0036EE  5023               	movf	vscp_readStdReg@reg,w,c
 13018  0036F0  0A96               	xorlw	150
 13019  0036F2  E103               	bnz	l11296
 13020                           
 13021                           ; BSR set to: 0
 13022                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 13023  0036F4  ECC4  F02A         	call	_vscp_getSubMinorVersion	;wreg free
 13024  0036F8  D059               	goto	L31
 13025  0036FA                     l11296:
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 13029  0036FA  0E89               	movlw	137
 13030  0036FC  6023               	cpfslt	vscp_readStdReg@reg,c
 13031  0036FE  D005               	goto	l11300
 13032                           
 13033                           ; BSR set to: 0
 13034                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 13035  003700  5023               	movf	vscp_readStdReg@reg,w,c
 13036  003702  0F7C               	addlw	124
 13037  003704  EC4E  F02A         	call	_vscp_getUserID
 13038  003708  D051               	goto	L31
 13039  00370A                     l11300:
 13040                           
 13041                           ; BSR set to: 0
 13042                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 13043                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 13044  00370A  0E88               	movlw	136
 13045  00370C  6423               	cpfsgt	vscp_readStdReg@reg,c
 13046  00370E  D008               	goto	l11306
 13047                           
 13048                           ; BSR set to: 0
 13049  003710  0E91               	movlw	145
 13050  003712  6023               	cpfslt	vscp_readStdReg@reg,c
 13051  003714  D005               	goto	l11306
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 13055  003716  5023               	movf	vscp_readStdReg@reg,w,c
 13056  003718  0F77               	addlw	119
 13057  00371A  EC44  F02A         	call	_vscp_getManufacturerId
 13058  00371E  D046               	goto	L31
 13059  003720                     l11306:
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 13063  003720  5023               	movf	vscp_readStdReg@reg,w,c
 13064  003722  0A91               	xorlw	145
 13065  003724  E103               	bnz	l11310
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 13069  003726  C0BF  F022         	movff	_vscp_nickname,vscp_readStdReg@rv
 13070                           
 13071                           ;vscp_firmware.c: 639: }
 13072  00372A  D079               	goto	l11360
 13073  00372C                     l11310:
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 13077  00372C  5023               	movf	vscp_readStdReg@reg,w,c
 13078  00372E  0A93               	xorlw	147
 13079  003730  E103               	bnz	l11314
 13080                           
 13081                           ; BSR set to: 0
 13082                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 13083  003732  C046  F022         	movff	_vscp_page_select,vscp_readStdReg@rv
 13084                           
 13085                           ;vscp_firmware.c: 645: }
 13086  003736  D073               	goto	l11360
 13087  003738                     l11314:
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13091  003738  5023               	movf	vscp_readStdReg@reg,w,c
 13092  00373A  0A92               	xorlw	146
 13093  00373C  E102               	bnz	l11318
 13094                           
 13095                           ; BSR set to: 0
 13096                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13097  00373E  5047               	movf	_vscp_page_select+1,w,c
 13098  003740  D035               	goto	L31
 13099  003742                     l11318:
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13103  003742  5023               	movf	vscp_readStdReg@reg,w,c
 13104  003744  0A97               	xorlw	151
 13105  003746  E103               	bnz	l11322
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13109  003748  ECC3  F02A         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13110  00374C  D02F               	goto	L31
 13111  00374E                     l11322:
 13112                           
 13113                           ; BSR set to: 0
 13114                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13115  00374E  5023               	movf	vscp_readStdReg@reg,w,c
 13116  003750  0A98               	xorlw	152
 13117  003752  E103               	bnz	l11326
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13121  003754  ECC2  F02A         	call	_vscp_getBufferSize	;wreg free
 13122  003758  D029               	goto	L31
 13123  00375A                     l11326:
 13124                           
 13125                           ; BSR set to: 0
 13126                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13127  00375A  5023               	movf	vscp_readStdReg@reg,w,c
 13128  00375C  0A99               	xorlw	153
 13129  00375E  E103               	bnz	l11330
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13133  003760  ECC1  F02A         	call	_vscp_getRegisterPagesUsed	;wreg free
 13134  003764  D023               	goto	L31
 13135  003766                     l11330:
 13136                           
 13137                           ; BSR set to: 0
 13138                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13139                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13140  003766  0E99               	movlw	153
 13141  003768  6423               	cpfsgt	vscp_readStdReg@reg,c
 13142  00376A  D022               	goto	l11340
 13143                           
 13144                           ; BSR set to: 0
 13145  00376C  0E9E               	movlw	158
 13146  00376E  6023               	cpfslt	vscp_readStdReg@reg,c
 13147  003770  D01F               	goto	l11340
 13148                           
 13149                           ; BSR set to: 0
 13150                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13151  003772  ECA8  F02A         	call	_vscp_getFamilyCode	;wreg free
 13152  003776  C011  F01B         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13153  00377A  C010  F01A         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13154  00377E  C00F  F019         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13155  003782  C00E  F018         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13156                           
 13157                           ; BSR set to: 0
 13158                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13159  003786  5023               	movf	vscp_readStdReg@reg,w,c
 13160  003788  0F66               	addlw	102
 13161  00378A  6E20               	movwf	vscp_readStdReg@idx,c
 13162                           
 13163                           ; BSR set to: 0
 13164                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13165  00378C  5020               	movf	vscp_readStdReg@idx,w,c
 13166  00378E  D849               	call	PL48	;call to abstracted procedure
 13167  003790  C018  F014         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13168  003794  C019  F015         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13169  003798  C01A  F016         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13170  00379C  C01B  F017         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13171  0037A0  2AE8               	incf	wreg,f,c
 13172  0037A2  D001               	goto	u9490
 13173  0037A4                     u9495:
 13174  0037A4  D848               	call	PL86	;call to abstracted procedure
 13175  0037A6                     u9490:
 13176  0037A6  2EE8               	decfsz	wreg,f,c
 13177  0037A8  D7FD               	goto	u9495
 13178  0037AA  D024               	goto	L32
 13179  0037AC                     L31:
 13180  0037AC  6E22               	movwf	vscp_readStdReg@rv,c
 13181                           
 13182                           ;vscp_firmware.c: 671: }
 13183  0037AE  D037               	goto	l11360
 13184  0037B0                     l11340:
 13185                           
 13186                           ; BSR set to: 0
 13187                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13188                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13189  0037B0  0E9D               	movlw	157
 13190  0037B2  6423               	cpfsgt	vscp_readStdReg@reg,c
 13191  0037B4  D021               	goto	l11350
 13192                           
 13193                           ; BSR set to: 0
 13194  0037B6  0EA2               	movlw	162
 13195  0037B8  6023               	cpfslt	vscp_readStdReg@reg,c
 13196  0037BA  D01E               	goto	l11350
 13197                           
 13198                           ; BSR set to: 0
 13199                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13200  0037BC  ECA3  F02A         	call	_vscp_getFamilyType	;wreg free
 13201  0037C0  C011  F01F         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1140+3
 13202  0037C4  C010  F01E         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1140+2
 13203  0037C8  C00F  F01D         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1140+1
 13204  0037CC  C00E  F01C         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1140
 13205                           
 13206                           ; BSR set to: 0
 13207                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13208  0037D0  5023               	movf	vscp_readStdReg@reg,w,c
 13209  0037D2  0F62               	addlw	98
 13210  0037D4  6E21               	movwf	vscp_readStdReg@idx_1141,c
 13211                           
 13212                           ; BSR set to: 0
 13213                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13214  0037D6  5021               	movf	vscp_readStdReg@idx_1141,w,c
 13215  0037D8  D824               	call	PL48	;call to abstracted procedure
 13216  0037DA  C01C  F014         	movff	vscp_readStdReg@code_1140,??_vscp_readStdReg+1
 13217  0037DE  C01D  F015         	movff	vscp_readStdReg@code_1140+1,??_vscp_readStdReg+2
 13218  0037E2  C01E  F016         	movff	vscp_readStdReg@code_1140+2,??_vscp_readStdReg+3
 13219  0037E6  C01F  F017         	movff	vscp_readStdReg@code_1140+3,??_vscp_readStdReg+4
 13220  0037EA  2AE8               	incf	wreg,f,c
 13221  0037EC  D001               	goto	u9520
 13222  0037EE                     u9525:
 13223  0037EE  D823               	call	PL86	;call to abstracted procedure
 13224  0037F0                     u9520:
 13225  0037F0  2EE8               	decfsz	wreg,f,c
 13226  0037F2  D7FD               	goto	u9525
 13227  0037F4                     L32:
 13228  0037F4  5014               	movf	??_vscp_readStdReg+1,w,c
 13229  0037F6  D7DA               	goto	L31
 13230  0037F8                     l11350:
 13231                           
 13232                           ; BSR set to: 0
 13233                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13234                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13235  0037F8  0ECF               	movlw	207
 13236  0037FA  6423               	cpfsgt	vscp_readStdReg@reg,c
 13237  0037FC  D008               	goto	l11356
 13238                           
 13239                           ; BSR set to: 0
 13240  0037FE  0EE0               	movlw	224
 13241  003800  6023               	cpfslt	vscp_readStdReg@reg,c
 13242  003802  D005               	goto	l11356
 13243                           
 13244                           ; BSR set to: 0
 13245                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13246  003804  5023               	movf	vscp_readStdReg@reg,w,c
 13247  003806  0F30               	addlw	48
 13248  003808  EC58  F02A         	call	_vscp_getGUID
 13249  00380C  D7CF               	goto	L31
 13250  00380E                     l11356:
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13254  00380E  0EDF               	movlw	223
 13255  003810  6423               	cpfsgt	vscp_readStdReg@reg,c
 13256  003812  D005               	goto	l11360
 13257                           
 13258                           ; BSR set to: 0
 13259                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13260  003814  5023               	movf	vscp_readStdReg@reg,w,c
 13261  003816  0F20               	addlw	32
 13262  003818  EC20  F02A         	call	_vscp_getMDF_URL
 13263  00381C  D7C7               	goto	L31
 13264  00381E                     l11360:
 13265                           
 13266                           ;vscp_firmware.c: 691: }
 13267                           ;vscp_firmware.c: 693: return rv;
 13268  00381E  5022               	movf	vscp_readStdReg@rv,w,c
 13269  003820  0012               	return	
 13270  003822                     __end_of_vscp_readStdReg:
 13271                           	opt stack 0
 13272  003822                     PL48:
 13273                           	opt stack 25
 13274  003822  0803               	sublw	3
 13275  003824  6E13               	movwf	??_vscp_readStdReg& (0+255),c
 13276  003826  90D8               	bcf	status,0,c
 13277  003828  3613               	rlcf	??_vscp_readStdReg,f,c
 13278  00382A  90D8               	bcf	status,0,c
 13279  00382C  3613               	rlcf	??_vscp_readStdReg,f,c
 13280  00382E  90D8               	bcf	status,0,c
 13281  003830  3613               	rlcf	??_vscp_readStdReg,f,c
 13282  003832  5013               	movf	??_vscp_readStdReg,w,c
 13283  003834  0012               	return	
 13284  003836                     __end_ofPL48:
 13285                           	opt stack 0
 13286  003836                     PL86:
 13287                           	opt stack 25
 13288  003836  90D8               	bcf	status,0,c
 13289  003838  3217               	rrcf	??_vscp_readStdReg+4,f,c
 13290  00383A  3216               	rrcf	??_vscp_readStdReg+3,f,c
 13291  00383C  3215               	rrcf	??_vscp_readStdReg+2,f,c
 13292  00383E  3214               	rrcf	??_vscp_readStdReg+1,f,c
 13293  003840  0012               	return	
 13294  003842                     __end_ofPL86:
 13295                           	opt stack 0
 13296                           tblptru	equ	0xFF8
 13297                           tblptrh	equ	0xFF7
 13298                           tblptrl	equ	0xFF6
 13299                           tablat	equ	0xFF5
 13300                           prodh	equ	0xFF4
 13301                           prodl	equ	0xFF3
 13302                           intcon	equ	0xFF2
 13303                           postinc0	equ	0xFEE
 13304                           wreg	equ	0xFE8
 13305                           indf1	equ	0xFE7
 13306                           postdec1	equ	0xFE5
 13307                           fsr1h	equ	0xFE2
 13308                           fsr1l	equ	0xFE1
 13309                           indf2	equ	0xFDF
 13310                           postinc2	equ	0xFDE
 13311                           postdec2	equ	0xFDD
 13312                           plusw2	equ	0xFDB
 13313                           fsr2h	equ	0xFDA
 13314                           fsr2l	equ	0xFD9
 13315                           status	equ	0xFD8
 13316                           
 13317 ;; *************** function _vscp_getFamilyType *****************
 13318 ;; Defined at:
 13319 ;;		line 2826 in file "../main.c"
 13320 ;; Parameters:    Size  Location     Type
 13321 ;;		None
 13322 ;; Auto vars:     Size  Location     Type
 13323 ;;		None
 13324 ;; Return value:  Size  Location     Type
 13325 ;;                  4   13[COMRAM] unsigned long 
 13326 ;; Registers used:
 13327 ;;		None
 13328 ;; Tracked objects:
 13329 ;;		On entry : F/0
 13330 ;;		On exit  : F/0
 13331 ;;		Unchanged: F/0
 13332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13333 ;;      Params:         4       0       0       0       0       0       0
 13334 ;;      Locals:         0       0       0       0       0       0       0
 13335 ;;      Temps:          0       0       0       0       0       0       0
 13336 ;;      Totals:         4       0       0       0       0       0       0
 13337 ;;Total ram usage:        4 bytes
 13338 ;; Hardware stack levels used:    1
 13339 ;; Hardware stack levels required when called:    2
 13340 ;; This function calls:
 13341 ;;		Nothing
 13342 ;; This function is called by:
 13343 ;;		_vscp_readStdReg
 13344 ;; This function uses a non-reentrant model
 13345 ;;
 13346                           
 13347                           	psect	text45
 13348  005546                     __ptext45:
 13349                           	opt stack 0
 13350  005546                     _vscp_getFamilyType:
 13351                           	opt stack 26
 13352                           
 13353                           ; BSR set to: 0
 13354                           ;main.c: 2827: return 0;
 13355                           
 13356                           ;incstack = 0
 13357                           ;incstack = 0
 13358  005546  6A0E               	clrf	?_vscp_getFamilyType,c
 13359  005548  6A0F               	clrf	?_vscp_getFamilyType+1,c
 13360  00554A  6A10               	clrf	?_vscp_getFamilyType+2,c
 13361  00554C  6A11               	clrf	?_vscp_getFamilyType+3,c
 13362                           
 13363                           ; BSR set to: 0
 13364  00554E  0012               	return	
 13365  005550                     __end_of_vscp_getFamilyType:
 13366                           	opt stack 0
 13367                           tblptru	equ	0xFF8
 13368                           tblptrh	equ	0xFF7
 13369                           tblptrl	equ	0xFF6
 13370                           tablat	equ	0xFF5
 13371                           prodh	equ	0xFF4
 13372                           prodl	equ	0xFF3
 13373                           intcon	equ	0xFF2
 13374                           postinc0	equ	0xFEE
 13375                           wreg	equ	0xFE8
 13376                           indf1	equ	0xFE7
 13377                           postdec1	equ	0xFE5
 13378                           fsr1h	equ	0xFE2
 13379                           fsr1l	equ	0xFE1
 13380                           indf2	equ	0xFDF
 13381                           postinc2	equ	0xFDE
 13382                           postdec2	equ	0xFDD
 13383                           plusw2	equ	0xFDB
 13384                           fsr2h	equ	0xFDA
 13385                           fsr2l	equ	0xFD9
 13386                           status	equ	0xFD8
 13387                           
 13388 ;; *************** function _vscp_getFamilyCode *****************
 13389 ;; Defined at:
 13390 ;;		line 2816 in file "../main.c"
 13391 ;; Parameters:    Size  Location     Type
 13392 ;;		None
 13393 ;; Auto vars:     Size  Location     Type
 13394 ;;		None
 13395 ;; Return value:  Size  Location     Type
 13396 ;;                  4   13[COMRAM] unsigned long 
 13397 ;; Registers used:
 13398 ;;		None
 13399 ;; Tracked objects:
 13400 ;;		On entry : F/0
 13401 ;;		On exit  : F/0
 13402 ;;		Unchanged: F/0
 13403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13404 ;;      Params:         4       0       0       0       0       0       0
 13405 ;;      Locals:         0       0       0       0       0       0       0
 13406 ;;      Temps:          0       0       0       0       0       0       0
 13407 ;;      Totals:         4       0       0       0       0       0       0
 13408 ;;Total ram usage:        4 bytes
 13409 ;; Hardware stack levels used:    1
 13410 ;; Hardware stack levels required when called:    2
 13411 ;; This function calls:
 13412 ;;		Nothing
 13413 ;; This function is called by:
 13414 ;;		_vscp_readStdReg
 13415 ;; This function uses a non-reentrant model
 13416 ;;
 13417                           
 13418                           	psect	text46
 13419  005550                     __ptext46:
 13420                           	opt stack 0
 13421  005550                     _vscp_getFamilyCode:
 13422                           	opt stack 26
 13423                           
 13424                           ; BSR set to: 0
 13425                           ;main.c: 2817: return 0L;
 13426                           
 13427                           ; BSR set to: 0
 13428                           ;incstack = 0
 13429                           ;incstack = 0
 13430  005550  6A0E               	clrf	?_vscp_getFamilyCode,c
 13431  005552  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 13432  005554  6A10               	clrf	?_vscp_getFamilyCode+2,c
 13433  005556  6A11               	clrf	?_vscp_getFamilyCode+3,c
 13434                           
 13435                           ; BSR set to: 0
 13436  005558  0012               	return	
 13437  00555A                     __end_of_vscp_getFamilyCode:
 13438                           	opt stack 0
 13439                           tblptru	equ	0xFF8
 13440                           tblptrh	equ	0xFF7
 13441                           tblptrl	equ	0xFF6
 13442                           tablat	equ	0xFF5
 13443                           prodh	equ	0xFF4
 13444                           prodl	equ	0xFF3
 13445                           intcon	equ	0xFF2
 13446                           postinc0	equ	0xFEE
 13447                           wreg	equ	0xFE8
 13448                           indf1	equ	0xFE7
 13449                           postdec1	equ	0xFE5
 13450                           fsr1h	equ	0xFE2
 13451                           fsr1l	equ	0xFE1
 13452                           indf2	equ	0xFDF
 13453                           postinc2	equ	0xFDE
 13454                           postdec2	equ	0xFDD
 13455                           plusw2	equ	0xFDB
 13456                           fsr2h	equ	0xFDA
 13457                           fsr2l	equ	0xFD9
 13458                           status	equ	0xFD8
 13459                           
 13460 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13461 ;; Defined at:
 13462 ;;		line 2717 in file "../main.c"
 13463 ;; Parameters:    Size  Location     Type
 13464 ;;		None
 13465 ;; Auto vars:     Size  Location     Type
 13466 ;;		None
 13467 ;; Return value:  Size  Location     Type
 13468 ;;                  1    wreg      unsigned char 
 13469 ;; Registers used:
 13470 ;;		wreg
 13471 ;; Tracked objects:
 13472 ;;		On entry : F/0
 13473 ;;		On exit  : F/0
 13474 ;;		Unchanged: F/0
 13475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13476 ;;      Params:         0       0       0       0       0       0       0
 13477 ;;      Locals:         0       0       0       0       0       0       0
 13478 ;;      Temps:          0       0       0       0       0       0       0
 13479 ;;      Totals:         0       0       0       0       0       0       0
 13480 ;;Total ram usage:        0 bytes
 13481 ;; Hardware stack levels used:    1
 13482 ;; Hardware stack levels required when called:    2
 13483 ;; This function calls:
 13484 ;;		Nothing
 13485 ;; This function is called by:
 13486 ;;		_vscp_readStdReg
 13487 ;; This function uses a non-reentrant model
 13488 ;;
 13489                           
 13490                           	psect	text47
 13491  005582                     __ptext47:
 13492                           	opt stack 0
 13493  005582                     _vscp_getRegisterPagesUsed:
 13494                           	opt stack 26
 13495                           
 13496                           ; BSR set to: 0
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;main.c: 2718: return 1;
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;incstack = 0
 13503                           ;incstack = 0
 13504  005582  0C01               	retlw	1
 13505  005584                     __end_of_vscp_getRegisterPagesUsed:
 13506                           	opt stack 0
 13507                           tblptru	equ	0xFF8
 13508                           tblptrh	equ	0xFF7
 13509                           tblptrl	equ	0xFF6
 13510                           tablat	equ	0xFF5
 13511                           prodh	equ	0xFF4
 13512                           prodl	equ	0xFF3
 13513                           intcon	equ	0xFF2
 13514                           postinc0	equ	0xFEE
 13515                           wreg	equ	0xFE8
 13516                           indf1	equ	0xFE7
 13517                           postdec1	equ	0xFE5
 13518                           fsr1h	equ	0xFE2
 13519                           fsr1l	equ	0xFE1
 13520                           indf2	equ	0xFDF
 13521                           postinc2	equ	0xFDE
 13522                           postdec2	equ	0xFDD
 13523                           plusw2	equ	0xFDB
 13524                           fsr2h	equ	0xFDA
 13525                           fsr2l	equ	0xFD9
 13526                           status	equ	0xFD8
 13527                           
 13528 ;; *************** function _vscp_getBufferSize *****************
 13529 ;; Defined at:
 13530 ;;		line 2670 in file "../main.c"
 13531 ;; Parameters:    Size  Location     Type
 13532 ;;		None
 13533 ;; Auto vars:     Size  Location     Type
 13534 ;;		None
 13535 ;; Return value:  Size  Location     Type
 13536 ;;                  1    wreg      unsigned char 
 13537 ;; Registers used:
 13538 ;;		wreg
 13539 ;; Tracked objects:
 13540 ;;		On entry : F/0
 13541 ;;		On exit  : F/0
 13542 ;;		Unchanged: F/0
 13543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13544 ;;      Params:         0       0       0       0       0       0       0
 13545 ;;      Locals:         0       0       0       0       0       0       0
 13546 ;;      Temps:          0       0       0       0       0       0       0
 13547 ;;      Totals:         0       0       0       0       0       0       0
 13548 ;;Total ram usage:        0 bytes
 13549 ;; Hardware stack levels used:    1
 13550 ;; Hardware stack levels required when called:    2
 13551 ;; This function calls:
 13552 ;;		Nothing
 13553 ;; This function is called by:
 13554 ;;		_vscp_readStdReg
 13555 ;; This function uses a non-reentrant model
 13556 ;;
 13557                           
 13558                           	psect	text48
 13559  005584                     __ptext48:
 13560                           	opt stack 0
 13561  005584                     _vscp_getBufferSize:
 13562                           	opt stack 26
 13563                           
 13564                           ; BSR set to: 0
 13565                           
 13566                           ; BSR set to: 0
 13567                           ;main.c: 2671: return 8;
 13568                           
 13569                           ; BSR set to: 0
 13570                           ;incstack = 0
 13571                           ;incstack = 0
 13572  005584  0C08               	retlw	8
 13573  005586                     __end_of_vscp_getBufferSize:
 13574                           	opt stack 0
 13575                           tblptru	equ	0xFF8
 13576                           tblptrh	equ	0xFF7
 13577                           tblptrl	equ	0xFF6
 13578                           tablat	equ	0xFF5
 13579                           prodh	equ	0xFF4
 13580                           prodl	equ	0xFF3
 13581                           intcon	equ	0xFF2
 13582                           postinc0	equ	0xFEE
 13583                           wreg	equ	0xFE8
 13584                           indf1	equ	0xFE7
 13585                           postdec1	equ	0xFE5
 13586                           fsr1h	equ	0xFE2
 13587                           fsr1l	equ	0xFE1
 13588                           indf2	equ	0xFDF
 13589                           postinc2	equ	0xFDE
 13590                           postdec2	equ	0xFDD
 13591                           plusw2	equ	0xFDB
 13592                           fsr2h	equ	0xFDA
 13593                           fsr2l	equ	0xFD9
 13594                           status	equ	0xFD8
 13595                           
 13596 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13597 ;; Defined at:
 13598 ;;		line 2661 in file "../main.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;		None
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;		None
 13603 ;; Return value:  Size  Location     Type
 13604 ;;                  1    wreg      unsigned char 
 13605 ;; Registers used:
 13606 ;;		wreg
 13607 ;; Tracked objects:
 13608 ;;		On entry : F/0
 13609 ;;		On exit  : F/0
 13610 ;;		Unchanged: F/0
 13611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13612 ;;      Params:         0       0       0       0       0       0       0
 13613 ;;      Locals:         0       0       0       0       0       0       0
 13614 ;;      Temps:          0       0       0       0       0       0       0
 13615 ;;      Totals:         0       0       0       0       0       0       0
 13616 ;;Total ram usage:        0 bytes
 13617 ;; Hardware stack levels used:    1
 13618 ;; Hardware stack levels required when called:    2
 13619 ;; This function calls:
 13620 ;;		Nothing
 13621 ;; This function is called by:
 13622 ;;		_vscp_readStdReg
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           	psect	text49
 13627  005586                     __ptext49:
 13628                           	opt stack 0
 13629  005586                     _vscp_getBootLoaderAlgorithm:
 13630                           	opt stack 26
 13631                           
 13632                           ; BSR set to: 0
 13633                           
 13634                           ; BSR set to: 0
 13635                           ;main.c: 2662: return 0x01;
 13636                           
 13637                           ; BSR set to: 0
 13638                           ;incstack = 0
 13639                           ;incstack = 0
 13640  005586  0C01               	retlw	1
 13641  005588                     __end_of_vscp_getBootLoaderAlgorithm:
 13642                           	opt stack 0
 13643                           tblptru	equ	0xFF8
 13644                           tblptrh	equ	0xFF7
 13645                           tblptrl	equ	0xFF6
 13646                           tablat	equ	0xFF5
 13647                           prodh	equ	0xFF4
 13648                           prodl	equ	0xFF3
 13649                           intcon	equ	0xFF2
 13650                           postinc0	equ	0xFEE
 13651                           wreg	equ	0xFE8
 13652                           indf1	equ	0xFE7
 13653                           postdec1	equ	0xFE5
 13654                           fsr1h	equ	0xFE2
 13655                           fsr1l	equ	0xFE1
 13656                           indf2	equ	0xFDF
 13657                           postinc2	equ	0xFDE
 13658                           postdec2	equ	0xFDD
 13659                           plusw2	equ	0xFDB
 13660                           fsr2h	equ	0xFDA
 13661                           fsr2l	equ	0xFD9
 13662                           status	equ	0xFD8
 13663                           
 13664 ;; *************** function _vscp_getManufacturerId *****************
 13665 ;; Defined at:
 13666 ;;		line 2641 in file "../main.c"
 13667 ;; Parameters:    Size  Location     Type
 13668 ;;  idx             1    wreg     unsigned char 
 13669 ;; Auto vars:     Size  Location     Type
 13670 ;;  idx             1   17[COMRAM] unsigned char 
 13671 ;; Return value:  Size  Location     Type
 13672 ;;                  1    wreg      unsigned char 
 13673 ;; Registers used:
 13674 ;;		wreg, status,2, status,0, cstack
 13675 ;; Tracked objects:
 13676 ;;		On entry : 0/0
 13677 ;;		On exit  : 0/0
 13678 ;;		Unchanged: 0/0
 13679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13680 ;;      Params:         0       0       0       0       0       0       0
 13681 ;;      Locals:         1       0       0       0       0       0       0
 13682 ;;      Temps:          0       0       0       0       0       0       0
 13683 ;;      Totals:         1       0       0       0       0       0       0
 13684 ;;Total ram usage:        1 bytes
 13685 ;; Hardware stack levels used:    1
 13686 ;; Hardware stack levels required when called:    3
 13687 ;; This function calls:
 13688 ;;		_readEEPROM
 13689 ;; This function is called by:
 13690 ;;		_vscp_readStdReg
 13691 ;;		_vscp_writeStdReg
 13692 ;; This function uses a non-reentrant model
 13693 ;;
 13694                           
 13695                           	psect	text50
 13696  005488                     __ptext50:
 13697                           	opt stack 0
 13698  005488                     _vscp_getManufacturerId:
 13699                           	opt stack 25
 13700                           
 13701                           ; BSR set to: 0
 13702                           ;incstack = 0
 13703                           ;incstack = 0
 13704                           ;vscp_getManufacturerId@idx stored from wreg
 13705  005488  CFE8 F012          	movff	wreg,vscp_getManufacturerId@idx
 13706                           
 13707                           ;main.c: 2642: return readEEPROM(0x09 + idx);
 13708  00548C  0E09               	movlw	9
 13709  00548E  2412               	addwf	vscp_getManufacturerId@idx,w,c
 13710  005490  6E0E               	movwf	?_readEEPROM,c
 13711  005492  6A0F               	clrf	?_readEEPROM+1,c
 13712  005494  0E00               	movlw	0
 13713  005496  220F               	addwfc	?_readEEPROM+1,f,c
 13714  005498  EF62  F02A         	goto	_readEEPROM	;wreg free
 13715  00549C                     __end_of_vscp_getManufacturerId:
 13716                           	opt stack 0
 13717                           tblptru	equ	0xFF8
 13718                           tblptrh	equ	0xFF7
 13719                           tblptrl	equ	0xFF6
 13720                           tablat	equ	0xFF5
 13721                           prodh	equ	0xFF4
 13722                           prodl	equ	0xFF3
 13723                           intcon	equ	0xFF2
 13724                           postinc0	equ	0xFEE
 13725                           wreg	equ	0xFE8
 13726                           indf1	equ	0xFE7
 13727                           postdec1	equ	0xFE5
 13728                           fsr1h	equ	0xFE2
 13729                           fsr1l	equ	0xFE1
 13730                           indf2	equ	0xFDF
 13731                           postinc2	equ	0xFDE
 13732                           postdec2	equ	0xFDD
 13733                           plusw2	equ	0xFDB
 13734                           fsr2h	equ	0xFDA
 13735                           fsr2l	equ	0xFD9
 13736                           status	equ	0xFD8
 13737                           
 13738 ;; *************** function _vscp_getUserID *****************
 13739 ;; Defined at:
 13740 ;;		line 2621 in file "../main.c"
 13741 ;; Parameters:    Size  Location     Type
 13742 ;;  idx             1    wreg     unsigned char 
 13743 ;; Auto vars:     Size  Location     Type
 13744 ;;  idx             1   17[COMRAM] unsigned char 
 13745 ;; Return value:  Size  Location     Type
 13746 ;;                  1    wreg      unsigned char 
 13747 ;; Registers used:
 13748 ;;		wreg, status,2, status,0, cstack
 13749 ;; Tracked objects:
 13750 ;;		On entry : 0/0
 13751 ;;		On exit  : 0/0
 13752 ;;		Unchanged: 0/0
 13753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13754 ;;      Params:         0       0       0       0       0       0       0
 13755 ;;      Locals:         1       0       0       0       0       0       0
 13756 ;;      Temps:          0       0       0       0       0       0       0
 13757 ;;      Totals:         1       0       0       0       0       0       0
 13758 ;;Total ram usage:        1 bytes
 13759 ;; Hardware stack levels used:    1
 13760 ;; Hardware stack levels required when called:    3
 13761 ;; This function calls:
 13762 ;;		_readEEPROM
 13763 ;; This function is called by:
 13764 ;;		_vscp_readStdReg
 13765 ;;		_vscp_writeStdReg
 13766 ;; This function uses a non-reentrant model
 13767 ;;
 13768                           
 13769                           	psect	text51
 13770  00549C                     __ptext51:
 13771                           	opt stack 0
 13772  00549C                     _vscp_getUserID:
 13773                           	opt stack 25
 13774                           
 13775                           ;incstack = 0
 13776                           ;incstack = 0
 13777                           ;vscp_getUserID@idx stored from wreg
 13778  00549C  CFE8 F012          	movff	wreg,vscp_getUserID@idx
 13779                           
 13780                           ;main.c: 2622: return readEEPROM(0x04 + idx);
 13781  0054A0  0E04               	movlw	4
 13782  0054A2  2412               	addwf	vscp_getUserID@idx,w,c
 13783  0054A4  6E0E               	movwf	?_readEEPROM,c
 13784  0054A6  6A0F               	clrf	?_readEEPROM+1,c
 13785  0054A8  0E00               	movlw	0
 13786  0054AA  220F               	addwfc	?_readEEPROM+1,f,c
 13787  0054AC  EF62  F02A         	goto	_readEEPROM	;wreg free
 13788  0054B0                     __end_of_vscp_getUserID:
 13789                           	opt stack 0
 13790                           tblptru	equ	0xFF8
 13791                           tblptrh	equ	0xFF7
 13792                           tblptrl	equ	0xFF6
 13793                           tablat	equ	0xFF5
 13794                           prodh	equ	0xFF4
 13795                           prodl	equ	0xFF3
 13796                           intcon	equ	0xFF2
 13797                           postinc0	equ	0xFEE
 13798                           wreg	equ	0xFE8
 13799                           indf1	equ	0xFE7
 13800                           postdec1	equ	0xFE5
 13801                           fsr1h	equ	0xFE2
 13802                           fsr1l	equ	0xFE1
 13803                           indf2	equ	0xFDF
 13804                           postinc2	equ	0xFDE
 13805                           postdec2	equ	0xFDD
 13806                           plusw2	equ	0xFDB
 13807                           fsr2h	equ	0xFDA
 13808                           fsr2l	equ	0xFD9
 13809                           status	equ	0xFD8
 13810                           
 13811 ;; *************** function _vscp_getMDF_URL *****************
 13812 ;; Defined at:
 13813 ;;		line 2612 in file "../main.c"
 13814 ;; Parameters:    Size  Location     Type
 13815 ;;  idx             1    wreg     unsigned char 
 13816 ;; Auto vars:     Size  Location     Type
 13817 ;;  idx             1   14[COMRAM] unsigned char 
 13818 ;; Return value:  Size  Location     Type
 13819 ;;                  1    wreg      unsigned char 
 13820 ;; Registers used:
 13821 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13822 ;; Tracked objects:
 13823 ;;		On entry : F/0
 13824 ;;		On exit  : F/0
 13825 ;;		Unchanged: F/0
 13826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13827 ;;      Params:         0       0       0       0       0       0       0
 13828 ;;      Locals:         1       0       0       0       0       0       0
 13829 ;;      Temps:          1       0       0       0       0       0       0
 13830 ;;      Totals:         2       0       0       0       0       0       0
 13831 ;;Total ram usage:        2 bytes
 13832 ;; Hardware stack levels used:    1
 13833 ;; Hardware stack levels required when called:    2
 13834 ;; This function calls:
 13835 ;;		Nothing
 13836 ;; This function is called by:
 13837 ;;		_vscp_readStdReg
 13838 ;;		_vscp_handleProtocolEvent
 13839 ;; This function uses a non-reentrant model
 13840 ;;
 13841                           
 13842                           	psect	text52
 13843  005440                     __ptext52:
 13844                           	opt stack 0
 13845  005440                     _vscp_getMDF_URL:
 13846                           	opt stack 26
 13847                           
 13848                           ;incstack = 0
 13849                           ;incstack = 0
 13850                           ;vscp_getMDF_URL@idx stored from wreg
 13851  005440  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13852                           
 13853                           ; BSR set to: 0
 13854                           ;main.c: 2613: return vscp_deviceURL[ idx ];
 13855  005444  500F               	movf	vscp_getMDF_URL@idx,w,c
 13856  005446  0F00               	addlw	low _vscp_deviceURL
 13857  005448  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13858  00544A  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13859  00544E  0E06               	movlw	high __smallconst
 13860  005450  6EF7               	movwf	tblptrh,c
 13861  005452  0008               	tblrd		*
 13862  005454  50F5               	movf	tablat,w,c
 13863                           
 13864                           ; BSR set to: 0
 13865  005456  0012               	return	
 13866  005458                     __end_of_vscp_getMDF_URL:
 13867                           	opt stack 0
 13868                           tblptru	equ	0xFF8
 13869                           tblptrh	equ	0xFF7
 13870                           tblptrl	equ	0xFF6
 13871                           tablat	equ	0xFF5
 13872                           prodh	equ	0xFF4
 13873                           prodl	equ	0xFF3
 13874                           intcon	equ	0xFF2
 13875                           postinc0	equ	0xFEE
 13876                           wreg	equ	0xFE8
 13877                           indf1	equ	0xFE7
 13878                           postdec1	equ	0xFE5
 13879                           fsr1h	equ	0xFE2
 13880                           fsr1l	equ	0xFE1
 13881                           indf2	equ	0xFDF
 13882                           postinc2	equ	0xFDE
 13883                           postdec2	equ	0xFDD
 13884                           plusw2	equ	0xFDB
 13885                           fsr2h	equ	0xFDA
 13886                           fsr2l	equ	0xFD9
 13887                           status	equ	0xFD8
 13888                           
 13889 ;; *************** function _vscp_getGUID *****************
 13890 ;; Defined at:
 13891 ;;		line 2589 in file "../main.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  idx             1    wreg     unsigned char 
 13894 ;; Auto vars:     Size  Location     Type
 13895 ;;  idx             1   17[COMRAM] unsigned char 
 13896 ;; Return value:  Size  Location     Type
 13897 ;;                  1    wreg      unsigned char 
 13898 ;; Registers used:
 13899 ;;		wreg, status,2, status,0, cstack
 13900 ;; Tracked objects:
 13901 ;;		On entry : 0/0
 13902 ;;		On exit  : 0/0
 13903 ;;		Unchanged: 0/0
 13904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13905 ;;      Params:         0       0       0       0       0       0       0
 13906 ;;      Locals:         1       0       0       0       0       0       0
 13907 ;;      Temps:          0       0       0       0       0       0       0
 13908 ;;      Totals:         1       0       0       0       0       0       0
 13909 ;;Total ram usage:        1 bytes
 13910 ;; Hardware stack levels used:    1
 13911 ;; Hardware stack levels required when called:    3
 13912 ;; This function calls:
 13913 ;;		_readEEPROM
 13914 ;; This function is called by:
 13915 ;;		_vscp_readStdReg
 13916 ;;		_vscp_writeStdReg
 13917 ;;		_vscp_handleProtocolEvent
 13918 ;; This function uses a non-reentrant model
 13919 ;;
 13920                           
 13921                           	psect	text53
 13922  0054B0                     __ptext53:
 13923                           	opt stack 0
 13924  0054B0                     _vscp_getGUID:
 13925                           	opt stack 25
 13926                           
 13927                           ; BSR set to: 0
 13928                           ;incstack = 0
 13929                           ;incstack = 0
 13930                           ;vscp_getGUID@idx stored from wreg
 13931  0054B0  CFE8 F012          	movff	wreg,vscp_getGUID@idx
 13932                           
 13933                           ;main.c: 2590: return readEEPROM(0x11 + idx);
 13934  0054B4  0E11               	movlw	17
 13935  0054B6  2412               	addwf	vscp_getGUID@idx,w,c
 13936  0054B8  6E0E               	movwf	?_readEEPROM,c
 13937  0054BA  6A0F               	clrf	?_readEEPROM+1,c
 13938  0054BC  0E00               	movlw	0
 13939  0054BE  220F               	addwfc	?_readEEPROM+1,f,c
 13940  0054C0  EF62  F02A         	goto	_readEEPROM	;wreg free
 13941  0054C4                     __end_of_vscp_getGUID:
 13942                           	opt stack 0
 13943                           tblptru	equ	0xFF8
 13944                           tblptrh	equ	0xFF7
 13945                           tblptrl	equ	0xFF6
 13946                           tablat	equ	0xFF5
 13947                           prodh	equ	0xFF4
 13948                           prodl	equ	0xFF3
 13949                           intcon	equ	0xFF2
 13950                           postinc0	equ	0xFEE
 13951                           wreg	equ	0xFE8
 13952                           indf1	equ	0xFE7
 13953                           postdec1	equ	0xFE5
 13954                           fsr1h	equ	0xFE2
 13955                           fsr1l	equ	0xFE1
 13956                           indf2	equ	0xFDF
 13957                           postinc2	equ	0xFDE
 13958                           postdec2	equ	0xFDD
 13959                           plusw2	equ	0xFDB
 13960                           fsr2h	equ	0xFDA
 13961                           fsr2l	equ	0xFD9
 13962                           status	equ	0xFD8
 13963                           
 13964 ;; *************** function _vscp_getSubMinorVersion *****************
 13965 ;; Defined at:
 13966 ;;		line 2578 in file "../main.c"
 13967 ;; Parameters:    Size  Location     Type
 13968 ;;		None
 13969 ;; Auto vars:     Size  Location     Type
 13970 ;;		None
 13971 ;; Return value:  Size  Location     Type
 13972 ;;                  1    wreg      unsigned char 
 13973 ;; Registers used:
 13974 ;;		wreg
 13975 ;; Tracked objects:
 13976 ;;		On entry : F/0
 13977 ;;		On exit  : F/0
 13978 ;;		Unchanged: F/0
 13979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13980 ;;      Params:         0       0       0       0       0       0       0
 13981 ;;      Locals:         0       0       0       0       0       0       0
 13982 ;;      Temps:          0       0       0       0       0       0       0
 13983 ;;      Totals:         0       0       0       0       0       0       0
 13984 ;;Total ram usage:        0 bytes
 13985 ;; Hardware stack levels used:    1
 13986 ;; Hardware stack levels required when called:    2
 13987 ;; This function calls:
 13988 ;;		Nothing
 13989 ;; This function is called by:
 13990 ;;		_vscp_readStdReg
 13991 ;; This function uses a non-reentrant model
 13992 ;;
 13993                           
 13994                           	psect	text54
 13995  005588                     __ptext54:
 13996                           	opt stack 0
 13997  005588                     _vscp_getSubMinorVersion:
 13998                           	opt stack 26
 13999                           
 14000                           ; BSR set to: 0
 14001                           
 14002                           ; BSR set to: 0
 14003                           ;main.c: 2579: return 2;
 14004                           
 14005                           ;incstack = 0
 14006                           ;incstack = 0
 14007  005588  0C02               	retlw	2
 14008  00558A                     __end_of_vscp_getSubMinorVersion:
 14009                           	opt stack 0
 14010                           tblptru	equ	0xFF8
 14011                           tblptrh	equ	0xFF7
 14012                           tblptrl	equ	0xFF6
 14013                           tablat	equ	0xFF5
 14014                           prodh	equ	0xFF4
 14015                           prodl	equ	0xFF3
 14016                           intcon	equ	0xFF2
 14017                           postinc0	equ	0xFEE
 14018                           wreg	equ	0xFE8
 14019                           indf1	equ	0xFE7
 14020                           postdec1	equ	0xFE5
 14021                           fsr1h	equ	0xFE2
 14022                           fsr1l	equ	0xFE1
 14023                           indf2	equ	0xFDF
 14024                           postinc2	equ	0xFDE
 14025                           postdec2	equ	0xFDD
 14026                           plusw2	equ	0xFDB
 14027                           fsr2h	equ	0xFDA
 14028                           fsr2l	equ	0xFD9
 14029                           status	equ	0xFD8
 14030                           
 14031 ;; *************** function _vscp_getMinorVersion *****************
 14032 ;; Defined at:
 14033 ;;		line 2569 in file "../main.c"
 14034 ;; Parameters:    Size  Location     Type
 14035 ;;		None
 14036 ;; Auto vars:     Size  Location     Type
 14037 ;;		None
 14038 ;; Return value:  Size  Location     Type
 14039 ;;                  1    wreg      unsigned char 
 14040 ;; Registers used:
 14041 ;;		wreg
 14042 ;; Tracked objects:
 14043 ;;		On entry : F/0
 14044 ;;		On exit  : F/0
 14045 ;;		Unchanged: F/0
 14046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14047 ;;      Params:         0       0       0       0       0       0       0
 14048 ;;      Locals:         0       0       0       0       0       0       0
 14049 ;;      Temps:          0       0       0       0       0       0       0
 14050 ;;      Totals:         0       0       0       0       0       0       0
 14051 ;;Total ram usage:        0 bytes
 14052 ;; Hardware stack levels used:    1
 14053 ;; Hardware stack levels required when called:    2
 14054 ;; This function calls:
 14055 ;;		Nothing
 14056 ;; This function is called by:
 14057 ;;		_vscp_readStdReg
 14058 ;; This function uses a non-reentrant model
 14059 ;;
 14060                           
 14061                           	psect	text55
 14062  00558A                     __ptext55:
 14063                           	opt stack 0
 14064  00558A                     _vscp_getMinorVersion:
 14065                           	opt stack 26
 14066                           
 14067                           ; BSR set to: 0
 14068                           
 14069                           ; BSR set to: 0
 14070                           ;main.c: 2570: return 2;
 14071                           
 14072                           ; BSR set to: 0
 14073                           ;incstack = 0
 14074                           ;incstack = 0
 14075  00558A  0C02               	retlw	2
 14076  00558C                     __end_of_vscp_getMinorVersion:
 14077                           	opt stack 0
 14078                           tblptru	equ	0xFF8
 14079                           tblptrh	equ	0xFF7
 14080                           tblptrl	equ	0xFF6
 14081                           tablat	equ	0xFF5
 14082                           prodh	equ	0xFF4
 14083                           prodl	equ	0xFF3
 14084                           intcon	equ	0xFF2
 14085                           postinc0	equ	0xFEE
 14086                           wreg	equ	0xFE8
 14087                           indf1	equ	0xFE7
 14088                           postdec1	equ	0xFE5
 14089                           fsr1h	equ	0xFE2
 14090                           fsr1l	equ	0xFE1
 14091                           indf2	equ	0xFDF
 14092                           postinc2	equ	0xFDE
 14093                           postdec2	equ	0xFDD
 14094                           plusw2	equ	0xFDB
 14095                           fsr2h	equ	0xFDA
 14096                           fsr2l	equ	0xFD9
 14097                           status	equ	0xFD8
 14098                           
 14099 ;; *************** function _vscp_getMajorVersion *****************
 14100 ;; Defined at:
 14101 ;;		line 2560 in file "../main.c"
 14102 ;; Parameters:    Size  Location     Type
 14103 ;;		None
 14104 ;; Auto vars:     Size  Location     Type
 14105 ;;		None
 14106 ;; Return value:  Size  Location     Type
 14107 ;;                  1    wreg      unsigned char 
 14108 ;; Registers used:
 14109 ;;		wreg
 14110 ;; Tracked objects:
 14111 ;;		On entry : F/0
 14112 ;;		On exit  : F/0
 14113 ;;		Unchanged: F/0
 14114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14115 ;;      Params:         0       0       0       0       0       0       0
 14116 ;;      Locals:         0       0       0       0       0       0       0
 14117 ;;      Temps:          0       0       0       0       0       0       0
 14118 ;;      Totals:         0       0       0       0       0       0       0
 14119 ;;Total ram usage:        0 bytes
 14120 ;; Hardware stack levels used:    1
 14121 ;; Hardware stack levels required when called:    2
 14122 ;; This function calls:
 14123 ;;		Nothing
 14124 ;; This function is called by:
 14125 ;;		_vscp_readStdReg
 14126 ;; This function uses a non-reentrant model
 14127 ;;
 14128                           
 14129                           	psect	text56
 14130  00558C                     __ptext56:
 14131                           	opt stack 0
 14132  00558C                     _vscp_getMajorVersion:
 14133                           	opt stack 26
 14134                           
 14135                           ; BSR set to: 0
 14136                           
 14137                           ; BSR set to: 0
 14138                           ;main.c: 2561: return 1;
 14139                           
 14140                           ; BSR set to: 0
 14141                           ;incstack = 0
 14142                           ;incstack = 0
 14143  00558C  0C01               	retlw	1
 14144  00558E                     __end_of_vscp_getMajorVersion:
 14145                           	opt stack 0
 14146                           tblptru	equ	0xFF8
 14147                           tblptrh	equ	0xFF7
 14148                           tblptrl	equ	0xFF6
 14149                           tablat	equ	0xFF5
 14150                           prodh	equ	0xFF4
 14151                           prodl	equ	0xFF3
 14152                           intcon	equ	0xFF2
 14153                           postinc0	equ	0xFEE
 14154                           wreg	equ	0xFE8
 14155                           indf1	equ	0xFE7
 14156                           postdec1	equ	0xFE5
 14157                           fsr1h	equ	0xFE2
 14158                           fsr1l	equ	0xFE1
 14159                           indf2	equ	0xFDF
 14160                           postinc2	equ	0xFDE
 14161                           postdec2	equ	0xFDD
 14162                           plusw2	equ	0xFDB
 14163                           fsr2h	equ	0xFDA
 14164                           fsr2l	equ	0xFD9
 14165                           status	equ	0xFD8
 14166                           
 14167 ;; *************** function _vscp_newNodeOnline *****************
 14168 ;; Defined at:
 14169 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;		None
 14172 ;; Auto vars:     Size  Location     Type
 14173 ;;		None
 14174 ;; Return value:  Size  Location     Type
 14175 ;;		None               void
 14176 ;; Registers used:
 14177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14178 ;; Tracked objects:
 14179 ;;		On entry : F/0
 14180 ;;		On exit  : F/0
 14181 ;;		Unchanged: 0/0
 14182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14183 ;;      Params:         0       0       0       0       0       0       0
 14184 ;;      Locals:         0       0       0       0       0       0       0
 14185 ;;      Temps:          1       0       0       0       0       0       0
 14186 ;;      Totals:         1       0       0       0       0       0       0
 14187 ;;Total ram usage:        1 bytes
 14188 ;; Hardware stack levels used:    1
 14189 ;; Hardware stack levels required when called:    7
 14190 ;; This function calls:
 14191 ;;		_vscp_sendEvent
 14192 ;; This function is called by:
 14193 ;;		_vscp_handleProtocolEvent
 14194 ;; This function uses a non-reentrant model
 14195 ;;
 14196                           
 14197                           	psect	text57
 14198  005200                     __ptext57:
 14199                           	opt stack 0
 14200  005200                     _vscp_newNodeOnline:
 14201                           	opt stack 22
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14205                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14206                           
 14207                           ; BSR set to: 0
 14208                           ;incstack = 0
 14209                           ;incstack = 0
 14210  005200  C0C1  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14211  005204  0E0F               	movlw	15
 14212  005206  1644               	andwf	??_vscp_newNodeOnline,f,c
 14213  005208  0444               	decf	??_vscp_newNodeOnline,w,c
 14214  00520A  E10E               	bnz	l1094
 14215                           
 14216                           ; BSR set to: 0
 14217  00520C  51BF               	movf	_vscp_nickname& (0+255),w,b
 14218  00520E  EE20  F0C7         	lfsr	2,_vscp_imsg+6
 14219  005212  62DF               	cpfseq	indf2,c
 14220  005214  D009               	goto	l1094
 14221                           
 14222                           ; BSR set to: 0
 14223                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14224  005216  0E80               	movlw	128
 14225  005218  6FCF               	movwf	_vscp_omsg& (0+255),b
 14226                           
 14227                           ; BSR set to: 0
 14228                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14229  00521A  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
 14230                           
 14231                           ; BSR set to: 0
 14232                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14233  00521C  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 14234  00521E  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 14235                           
 14236                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14237  005220  0E03               	movlw	3
 14238  005222  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
 14239                           
 14240                           ; BSR set to: 0
 14241                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14242  005224  EC3E  F029         	call	_vscp_sendEvent	;wreg free
 14243  005228                     l1094:
 14244                           
 14245                           ; BSR set to: 0
 14246  005228  0012               	return	
 14247  00522A                     __end_of_vscp_newNodeOnline:
 14248                           	opt stack 0
 14249                           tblptru	equ	0xFF8
 14250                           tblptrh	equ	0xFF7
 14251                           tblptrl	equ	0xFF6
 14252                           tablat	equ	0xFF5
 14253                           prodh	equ	0xFF4
 14254                           prodl	equ	0xFF3
 14255                           intcon	equ	0xFF2
 14256                           postinc0	equ	0xFEE
 14257                           wreg	equ	0xFE8
 14258                           indf1	equ	0xFE7
 14259                           postdec1	equ	0xFE5
 14260                           fsr1h	equ	0xFE2
 14261                           fsr1l	equ	0xFE1
 14262                           indf2	equ	0xFDF
 14263                           postinc2	equ	0xFDE
 14264                           postdec2	equ	0xFDD
 14265                           plusw2	equ	0xFDB
 14266                           fsr2h	equ	0xFDA
 14267                           fsr2l	equ	0xFD9
 14268                           status	equ	0xFD8
 14269                           
 14270 ;; *************** function _vscp_handleDropNickname *****************
 14271 ;; Defined at:
 14272 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14273 ;; Parameters:    Size  Location     Type
 14274 ;;		None
 14275 ;; Auto vars:     Size  Location     Type
 14276 ;;  bytes           1   17[COMRAM] unsigned char 
 14277 ;; Return value:  Size  Location     Type
 14278 ;;		None               void
 14279 ;; Registers used:
 14280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14281 ;; Tracked objects:
 14282 ;;		On entry : F/0
 14283 ;;		On exit  : F/0
 14284 ;;		Unchanged: 0/0
 14285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14286 ;;      Params:         0       0       0       0       0       0       0
 14287 ;;      Locals:         1       0       0       0       0       0       0
 14288 ;;      Temps:          0       0       0       0       0       0       0
 14289 ;;      Totals:         1       0       0       0       0       0       0
 14290 ;;Total ram usage:        1 bytes
 14291 ;; Hardware stack levels used:    1
 14292 ;; Hardware stack levels required when called:    5
 14293 ;; This function calls:
 14294 ;;		_vscp_init
 14295 ;;		_vscp_writeNicknamePermanent
 14296 ;; This function is called by:
 14297 ;;		_vscp_handleProtocolEvent
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           	psect	text58
 14302  00514E                     __ptext58:
 14303                           	opt stack 0
 14304  00514E                     _vscp_handleDropNickname:
 14305                           	opt stack 24
 14306                           
 14307                           ; BSR set to: 0
 14308                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14309                           
 14310                           ; BSR set to: 0
 14311                           ;incstack = 0
 14312                           ;incstack = 0
 14313  00514E  51C1               	movf	_vscp_imsg& (0+255),w,b
 14314  005150  0B0F               	andlw	15
 14315  005152  6E12               	movwf	vscp_handleDropNickname@bytes,c
 14316                           
 14317                           ; BSR set to: 0
 14318                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14319  005154  5012               	movf	vscp_handleDropNickname@bytes,w,c
 14320  005156  E012               	bz	l1090
 14321                           
 14322                           ; BSR set to: 0
 14323  005158  51BF               	movf	_vscp_nickname& (0+255),w,b
 14324  00515A  EE20  F0C7         	lfsr	2,_vscp_imsg+6
 14325  00515E  62DF               	cpfseq	indf2,c
 14326  005160  D00D               	goto	l1090
 14327                           
 14328                           ; BSR set to: 0
 14329                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14330  005162  0412               	decf	vscp_handleDropNickname@bytes,w,c
 14331  005164  E005               	bz	l1089
 14332                           
 14333                           ; BSR set to: 0
 14334  005166  0E01               	movlw	1
 14335  005168  6412               	cpfsgt	vscp_handleDropNickname@bytes,c
 14336  00516A  D008               	goto	l1090
 14337                           
 14338                           ; BSR set to: 0
 14339  00516C  67C8               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14340  00516E  D006               	goto	l1090
 14341  005170                     l1089:
 14342                           
 14343                           ; BSR set to: 0
 14344                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14345  005170  69BF               	setf	_vscp_nickname& (0+255),b
 14346                           
 14347                           ; BSR set to: 0
 14348                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14349  005172  0EFF               	movlw	255
 14350  005174  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 14351                           
 14352                           ;vscp_firmware.c: 481: vscp_init();
 14353  005178  EC97  F027         	call	_vscp_init	;wreg free
 14354  00517C                     l1090:
 14355                           
 14356                           ; BSR set to: 0
 14357  00517C  0012               	return	
 14358  00517E                     __end_of_vscp_handleDropNickname:
 14359                           	opt stack 0
 14360                           tblptru	equ	0xFF8
 14361                           tblptrh	equ	0xFF7
 14362                           tblptrl	equ	0xFF6
 14363                           tablat	equ	0xFF5
 14364                           prodh	equ	0xFF4
 14365                           prodl	equ	0xFF3
 14366                           intcon	equ	0xFF2
 14367                           postinc0	equ	0xFEE
 14368                           wreg	equ	0xFE8
 14369                           indf1	equ	0xFE7
 14370                           postdec1	equ	0xFE5
 14371                           fsr1h	equ	0xFE2
 14372                           fsr1l	equ	0xFE1
 14373                           indf2	equ	0xFDF
 14374                           postinc2	equ	0xFDE
 14375                           postdec2	equ	0xFDD
 14376                           plusw2	equ	0xFDB
 14377                           fsr2h	equ	0xFDA
 14378                           fsr2l	equ	0xFD9
 14379                           status	equ	0xFD8
 14380                           
 14381 ;; *************** function _vscp_init *****************
 14382 ;; Defined at:
 14383 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14384 ;; Parameters:    Size  Location     Type
 14385 ;;		None
 14386 ;; Auto vars:     Size  Location     Type
 14387 ;;		None
 14388 ;; Return value:  Size  Location     Type
 14389 ;;		None               void
 14390 ;; Registers used:
 14391 ;;		wreg, status,2, cstack
 14392 ;; Tracked objects:
 14393 ;;		On entry : 0/1
 14394 ;;		On exit  : F/0
 14395 ;;		Unchanged: 0/0
 14396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14397 ;;      Params:         0       0       0       0       0       0       0
 14398 ;;      Locals:         0       0       0       0       0       0       0
 14399 ;;      Temps:          0       0       0       0       0       0       0
 14400 ;;      Totals:         0       0       0       0       0       0       0
 14401 ;;Total ram usage:        0 bytes
 14402 ;; Hardware stack levels used:    1
 14403 ;; Hardware stack levels required when called:    4
 14404 ;; This function calls:
 14405 ;;		_vscp_readNicknamePermanent
 14406 ;; This function is called by:
 14407 ;;		_main
 14408 ;;		_vscp_handleDropNickname
 14409 ;;		_vscp_handleProtocolEvent
 14410 ;; This function uses a non-reentrant model
 14411 ;;
 14412                           
 14413                           	psect	text59
 14414  004F2E                     __ptext59:
 14415                           	opt stack 0
 14416  004F2E                     _vscp_init:
 14417                           	opt stack 24
 14418                           
 14419                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14420                           
 14421                           ; BSR set to: 0
 14422                           ;incstack = 0
 14423                           ;incstack = 0
 14424  004F2E  0E02               	movlw	2
 14425  004F30  6E4C               	movwf	_vscp_initledfunc,c
 14426                           
 14427                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14428  004F32  ECAD  F02A         	call	_vscp_readNicknamePermanent	;wreg free
 14429  004F36  0100               	movlb	0	; () banked
 14430  004F38  6FBF               	movwf	_vscp_nickname& (0+255),b
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14434  004F3A  67BF               	tstfsz	_vscp_nickname& (0+255),b
 14435  004F3C  D001               	goto	l1031
 14436                           
 14437                           ; BSR set to: 0
 14438  004F3E  69BF               	setf	_vscp_nickname& (0+255),b
 14439  004F40                     l1031:
 14440                           
 14441                           ; BSR set to: 0
 14442                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14443  004F40  6BC1               	clrf	_vscp_imsg& (0+255),b
 14444                           
 14445                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14446  004F42  6BC2               	clrf	(_vscp_imsg+1)& (0+255),b
 14447                           
 14448                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14449  004F44  6BC3               	clrf	(_vscp_imsg+2)& (0+255),b
 14450  004F46  6BC4               	clrf	(_vscp_imsg+3)& (0+255),b
 14451                           
 14452                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14453  004F48  6BC5               	clrf	(_vscp_imsg+4)& (0+255),b
 14454                           
 14455                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14456  004F4A  6BCF               	clrf	_vscp_omsg& (0+255),b
 14457                           
 14458                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14459  004F4C  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
 14460                           
 14461                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14462  004F4E  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 14463  004F50  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 14464                           
 14465                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14466  004F52  6BD3               	clrf	(_vscp_omsg+4)& (0+255),b
 14467                           
 14468                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14469  004F54  6A4A               	clrf	_vscp_alarmstatus,c
 14470                           
 14471                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14472  004F56  6A4F               	clrf	_vscp_probe_address,c
 14473                           
 14474                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14475  004F58  6BC0               	clrf	_vscp_node_state& (0+255),b
 14476                           
 14477                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14478  004F5A  6A4E               	clrf	_vscp_node_substate,c
 14479                           
 14480                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14481  004F5C  6A50               	clrf	_vscp_probe_cnt,c
 14482                           
 14483                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14484  004F5E  6A46               	clrf	_vscp_page_select,c
 14485  004F60  6A47               	clrf	_vscp_page_select+1,c
 14486                           
 14487                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14488  004F62  6BB6               	clrf	_vscp_timer& (0+255),b	;volatile
 14489  004F64  6BB7               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14490                           
 14491                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14492  004F66  6BB4               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14493  004F68  6BB5               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14494                           
 14495                           ;vscp_firmware.c: 155: vscp_second = 0;
 14496  004F6A  6A51               	clrf	_vscp_second,c
 14497                           
 14498                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14499  004F6C  6A4D               	clrf	_vscp_minute,c
 14500                           
 14501                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14502  004F6E  6BBD               	clrf	_vscp_hour& (0+255),b
 14503                           
 14504                           ; BSR set to: 0
 14505  004F70  0012               	return	
 14506  004F72                     __end_of_vscp_init:
 14507                           	opt stack 0
 14508                           tblptru	equ	0xFF8
 14509                           tblptrh	equ	0xFF7
 14510                           tblptrl	equ	0xFF6
 14511                           tablat	equ	0xFF5
 14512                           prodh	equ	0xFF4
 14513                           prodl	equ	0xFF3
 14514                           intcon	equ	0xFF2
 14515                           postinc0	equ	0xFEE
 14516                           wreg	equ	0xFE8
 14517                           indf1	equ	0xFE7
 14518                           postdec1	equ	0xFE5
 14519                           fsr1h	equ	0xFE2
 14520                           fsr1l	equ	0xFE1
 14521                           indf2	equ	0xFDF
 14522                           postinc2	equ	0xFDE
 14523                           postdec2	equ	0xFDD
 14524                           plusw2	equ	0xFDB
 14525                           fsr2h	equ	0xFDA
 14526                           fsr2l	equ	0xFD9
 14527                           status	equ	0xFD8
 14528                           
 14529 ;; *************** function _vscp_readNicknamePermanent *****************
 14530 ;; Defined at:
 14531 ;;		line 2761 in file "../main.c"
 14532 ;; Parameters:    Size  Location     Type
 14533 ;;		None
 14534 ;; Auto vars:     Size  Location     Type
 14535 ;;		None
 14536 ;; Return value:  Size  Location     Type
 14537 ;;                  1    wreg      unsigned char 
 14538 ;; Registers used:
 14539 ;;		wreg, status,2, cstack
 14540 ;; Tracked objects:
 14541 ;;		On entry : 0/1
 14542 ;;		On exit  : 0/0
 14543 ;;		Unchanged: 0/0
 14544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14545 ;;      Params:         0       0       0       0       0       0       0
 14546 ;;      Locals:         0       0       0       0       0       0       0
 14547 ;;      Temps:          0       0       0       0       0       0       0
 14548 ;;      Totals:         0       0       0       0       0       0       0
 14549 ;;Total ram usage:        0 bytes
 14550 ;; Hardware stack levels used:    1
 14551 ;; Hardware stack levels required when called:    3
 14552 ;; This function calls:
 14553 ;;		_readEEPROM
 14554 ;; This function is called by:
 14555 ;;		_vscp_init
 14556 ;; This function uses a non-reentrant model
 14557 ;;
 14558                           
 14559                           	psect	text60
 14560  00555A                     __ptext60:
 14561                           	opt stack 0
 14562  00555A                     _vscp_readNicknamePermanent:
 14563                           	opt stack 24
 14564                           
 14565                           ;main.c: 2762: return readEEPROM( 0x01 );
 14566                           
 14567                           ; BSR set to: 0
 14568                           ;incstack = 0
 14569                           ;incstack = 0
 14570  00555A  6A0F               	clrf	?_readEEPROM+1,c
 14571  00555C  0E01               	movlw	1
 14572  00555E  6E0E               	movwf	?_readEEPROM,c
 14573  005560  EF62  F02A         	goto	_readEEPROM	;wreg free
 14574  005564                     __end_of_vscp_readNicknamePermanent:
 14575                           	opt stack 0
 14576                           tblptru	equ	0xFF8
 14577                           tblptrh	equ	0xFF7
 14578                           tblptrl	equ	0xFF6
 14579                           tablat	equ	0xFF5
 14580                           prodh	equ	0xFF4
 14581                           prodl	equ	0xFF3
 14582                           intcon	equ	0xFF2
 14583                           postinc0	equ	0xFEE
 14584                           wreg	equ	0xFE8
 14585                           indf1	equ	0xFE7
 14586                           postdec1	equ	0xFE5
 14587                           fsr1h	equ	0xFE2
 14588                           fsr1l	equ	0xFE1
 14589                           indf2	equ	0xFDF
 14590                           postinc2	equ	0xFDE
 14591                           postdec2	equ	0xFDD
 14592                           plusw2	equ	0xFDB
 14593                           fsr2h	equ	0xFDA
 14594                           fsr2l	equ	0xFD9
 14595                           status	equ	0xFD8
 14596                           
 14597 ;; *************** function _vscp_handleSetNickname *****************
 14598 ;; Defined at:
 14599 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14600 ;; Parameters:    Size  Location     Type
 14601 ;;		None
 14602 ;; Auto vars:     Size  Location     Type
 14603 ;;		None
 14604 ;; Return value:  Size  Location     Type
 14605 ;;		None               void
 14606 ;; Registers used:
 14607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14608 ;; Tracked objects:
 14609 ;;		On entry : F/0
 14610 ;;		On exit  : 0/0
 14611 ;;		Unchanged: 0/0
 14612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14613 ;;      Params:         0       0       0       0       0       0       0
 14614 ;;      Locals:         0       0       0       0       0       0       0
 14615 ;;      Temps:          0       0       0       0       0       0       0
 14616 ;;      Totals:         0       0       0       0       0       0       0
 14617 ;;Total ram usage:        0 bytes
 14618 ;; Hardware stack levels used:    1
 14619 ;; Hardware stack levels required when called:    4
 14620 ;; This function calls:
 14621 ;;		_vscp_writeNicknamePermanent
 14622 ;;		_vscp_setSegmentCRC
 14623 ;; This function is called by:
 14624 ;;		_vscp_handleProtocolEvent
 14625 ;; This function uses a non-reentrant model
 14626 ;;
 14627                           
 14628                           	psect	text61
 14629  005314                     __ptext61:
 14630                           	opt stack 0
 14631  005314                     _vscp_handleSetNickname:
 14632                           	opt stack 25
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 14636                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14637                           
 14638                           ;incstack = 0
 14639                           ;incstack = 0
 14640  005314  51C1               	movf	_vscp_imsg& (0+255),w,b
 14641  005316  0B0F               	andlw	15
 14642  005318  0A02               	xorlw	2
 14643  00531A  E10D               	bnz	l1083
 14644                           
 14645                           ; BSR set to: 0
 14646  00531C  51BF               	movf	_vscp_nickname& (0+255),w,b
 14647  00531E  EE20  F0C7         	lfsr	2,_vscp_imsg+6
 14648  005322  62DF               	cpfseq	indf2,c
 14649  005324  D008               	goto	l1083
 14650                           
 14651                           ; BSR set to: 0
 14652                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 14653  005326  C0C8  F0BF         	movff	_vscp_imsg+7,_vscp_nickname
 14654                           
 14655                           ; BSR set to: 0
 14656                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 14657  00532A  51BF               	movf	_vscp_nickname& (0+255),w,b
 14658  00532C  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 14659                           
 14660                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 14661  005330  0E40               	movlw	64
 14662  005332  EC75  F02A         	call	_vscp_setSegmentCRC
 14663  005336                     l1083:
 14664  005336  0012               	return	
 14665  005338                     __end_of_vscp_handleSetNickname:
 14666                           	opt stack 0
 14667                           tblptru	equ	0xFF8
 14668                           tblptrh	equ	0xFF7
 14669                           tblptrl	equ	0xFF6
 14670                           tablat	equ	0xFF5
 14671                           prodh	equ	0xFF4
 14672                           prodl	equ	0xFF3
 14673                           intcon	equ	0xFF2
 14674                           postinc0	equ	0xFEE
 14675                           wreg	equ	0xFE8
 14676                           indf1	equ	0xFE7
 14677                           postdec1	equ	0xFE5
 14678                           fsr1h	equ	0xFE2
 14679                           fsr1l	equ	0xFE1
 14680                           indf2	equ	0xFDF
 14681                           postinc2	equ	0xFDE
 14682                           postdec2	equ	0xFDD
 14683                           plusw2	equ	0xFDB
 14684                           fsr2h	equ	0xFDA
 14685                           fsr2l	equ	0xFD9
 14686                           status	equ	0xFD8
 14687                           
 14688 ;; *************** function _vscp_handleHeartbeat *****************
 14689 ;; Defined at:
 14690 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 14691 ;; Parameters:    Size  Location     Type
 14692 ;;		None
 14693 ;; Auto vars:     Size  Location     Type
 14694 ;;		None
 14695 ;; Return value:  Size  Location     Type
 14696 ;;		None               void
 14697 ;; Registers used:
 14698 ;;		wreg, status,2, status,0, cstack
 14699 ;; Tracked objects:
 14700 ;;		On entry : F/0
 14701 ;;		On exit  : 0/0
 14702 ;;		Unchanged: 0/0
 14703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14704 ;;      Params:         0       0       0       0       0       0       0
 14705 ;;      Locals:         0       0       0       0       0       0       0
 14706 ;;      Temps:          0       0       0       0       0       0       0
 14707 ;;      Totals:         0       0       0       0       0       0       0
 14708 ;;Total ram usage:        0 bytes
 14709 ;; Hardware stack levels used:    1
 14710 ;; Hardware stack levels required when called:    4
 14711 ;; This function calls:
 14712 ;;		_vscp_writeNicknamePermanent
 14713 ;;		_vscp_getSegmentCRC
 14714 ;;		_vscp_setSegmentCRC
 14715 ;; This function is called by:
 14716 ;;		_vscp_handleProtocolEvent
 14717 ;; This function uses a non-reentrant model
 14718 ;;
 14719                           
 14720                           	psect	text62
 14721  004FF6                     __ptext62:
 14722                           	opt stack 0
 14723  004FF6                     _vscp_handleHeartbeat:
 14724                           	opt stack 25
 14725                           
 14726                           ; BSR set to: 0
 14727                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 14728                           
 14729                           ;incstack = 0
 14730                           ;incstack = 0
 14731  004FF6  ECB2  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14732  004FFA  0900               	iorlw	0
 14733  004FFC  E116               	bnz	l11218
 14734                           
 14735                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14736                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14737  004FFE  0100               	movlb	0	; () banked
 14738  005000  51C1               	movf	_vscp_imsg& (0+255),w,b
 14739  005002  0B0F               	andlw	15
 14740  005004  0A05               	xorlw	5
 14741  005006  E115               	bnz	l1079
 14742                           
 14743                           ; BSR set to: 0
 14744  005008  ECB2  F02A         	call	_vscp_getSegmentCRC	;wreg free
 14745  00500C  0100               	movlb	0	; () banked
 14746  00500E  19C7               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14747  005010  E010               	bz	l1079
 14748                           
 14749                           ; BSR set to: 0
 14750                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14751  005012  51C7               	movf	(_vscp_imsg+6)& (0+255),w,b
 14752  005014  EC75  F02A         	call	_vscp_setSegmentCRC
 14753                           
 14754                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 14755  005018  0100               	movlb	0	; () banked
 14756  00501A  69BF               	setf	_vscp_nickname& (0+255),b
 14757                           
 14758                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 14759  00501C  0EFF               	movlw	255
 14760  00501E  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 14761                           
 14762                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 14763  005022  0E01               	movlw	1
 14764  005024  0100               	movlb	0	; () banked
 14765  005026  6FC0               	movwf	_vscp_node_state& (0+255),b
 14766  005028  D004               	goto	l1079
 14767  00502A                     l11218:
 14768                           
 14769                           ;vscp_firmware.c: 411: else {
 14770                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14771  00502A  0100               	movlb	0	; () banked
 14772  00502C  51C7               	movf	(_vscp_imsg+6)& (0+255),w,b
 14773  00502E  EC75  F02A         	call	_vscp_setSegmentCRC
 14774  005032                     l1079:
 14775  005032  0012               	return	
 14776  005034                     __end_of_vscp_handleHeartbeat:
 14777                           	opt stack 0
 14778                           tblptru	equ	0xFF8
 14779                           tblptrh	equ	0xFF7
 14780                           tblptrl	equ	0xFF6
 14781                           tablat	equ	0xFF5
 14782                           prodh	equ	0xFF4
 14783                           prodl	equ	0xFF3
 14784                           intcon	equ	0xFF2
 14785                           postinc0	equ	0xFEE
 14786                           wreg	equ	0xFE8
 14787                           indf1	equ	0xFE7
 14788                           postdec1	equ	0xFE5
 14789                           fsr1h	equ	0xFE2
 14790                           fsr1l	equ	0xFE1
 14791                           indf2	equ	0xFDF
 14792                           postinc2	equ	0xFDE
 14793                           postdec2	equ	0xFDD
 14794                           plusw2	equ	0xFDB
 14795                           fsr2h	equ	0xFDA
 14796                           fsr2l	equ	0xFD9
 14797                           status	equ	0xFD8
 14798                           
 14799 ;; *************** function _vscp_goBootloaderMode *****************
 14800 ;; Defined at:
 14801 ;;		line 2744 in file "../main.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;  algorithm       1    wreg     unsigned char 
 14804 ;; Auto vars:     Size  Location     Type
 14805 ;;  algorithm       1   16[COMRAM] unsigned char 
 14806 ;; Return value:  Size  Location     Type
 14807 ;;		None               void
 14808 ;; Registers used:
 14809 ;;		wreg, status,2, status,0, cstack
 14810 ;; Tracked objects:
 14811 ;;		On entry : F/0
 14812 ;;		On exit  : 0/0
 14813 ;;		Unchanged: 0/0
 14814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14815 ;;      Params:         0       0       0       0       0       0       0
 14816 ;;      Locals:         1       0       0       0       0       0       0
 14817 ;;      Temps:          0       0       0       0       0       0       0
 14818 ;;      Totals:         1       0       0       0       0       0       0
 14819 ;;Total ram usage:        1 bytes
 14820 ;; Hardware stack levels used:    1
 14821 ;; Hardware stack levels required when called:    3
 14822 ;; This function calls:
 14823 ;;		_writeEEPROM
 14824 ;; This function is called by:
 14825 ;;		_vscp_handleProtocolEvent
 14826 ;; This function uses a non-reentrant model
 14827 ;;
 14828                           
 14829                           	psect	text63
 14830  005458                     __ptext63:
 14831                           	opt stack 0
 14832  005458                     _vscp_goBootloaderMode:
 14833                           	opt stack 26
 14834                           
 14835                           ;incstack = 0
 14836                           ;incstack = 0
 14837                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14838  005458  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14839                           
 14840                           ; BSR set to: 0
 14841                           ;main.c: 2745: if ( 0x01 != algorithm ) return;
 14842  00545C  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14843  00545E  E107               	bnz	l594
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;main.c: 2749: writeEEPROM(0x00, 0xff);
 14847  005460  6A0F               	clrf	?_writeEEPROM+1,c
 14848  005462  6A0E               	clrf	?_writeEEPROM,c
 14849  005464  0EFF               	movlw	255
 14850  005466  6810               	setf	?_writeEEPROM+2,c
 14851  005468  EC65  F029         	call	_writeEEPROM	;wreg free
 14852  00546C  00FF               	reset		;# 
 14853  00546E                     l594:
 14854  00546E  0012               	return	
 14855  005470                     __end_of_vscp_goBootloaderMode:
 14856                           	opt stack 0
 14857                           tblptru	equ	0xFF8
 14858                           tblptrh	equ	0xFF7
 14859                           tblptrl	equ	0xFF6
 14860                           tablat	equ	0xFF5
 14861                           prodh	equ	0xFF4
 14862                           prodl	equ	0xFF3
 14863                           intcon	equ	0xFF2
 14864                           postinc0	equ	0xFEE
 14865                           wreg	equ	0xFE8
 14866                           indf1	equ	0xFE7
 14867                           postdec1	equ	0xFE5
 14868                           fsr1h	equ	0xFE2
 14869                           fsr1l	equ	0xFE1
 14870                           indf2	equ	0xFDF
 14871                           postinc2	equ	0xFDE
 14872                           postdec2	equ	0xFDD
 14873                           plusw2	equ	0xFDB
 14874                           fsr2h	equ	0xFDA
 14875                           fsr2l	equ	0xFD9
 14876                           status	equ	0xFD8
 14877                           
 14878 ;; *************** function _vscp_getMatrixInfo *****************
 14879 ;; Defined at:
 14880 ;;		line 2679 in file "../main.c"
 14881 ;; Parameters:    Size  Location     Type
 14882 ;;  pData           1    wreg     PTR unsigned char 
 14883 ;;		 -> vscp_omsg(13), 
 14884 ;; Auto vars:     Size  Location     Type
 14885 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14886 ;;		 -> vscp_omsg(13), 
 14887 ;;  i               1   14[COMRAM] unsigned char 
 14888 ;; Return value:  Size  Location     Type
 14889 ;;		None               void
 14890 ;; Registers used:
 14891 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14892 ;; Tracked objects:
 14893 ;;		On entry : F/0
 14894 ;;		On exit  : F/0
 14895 ;;		Unchanged: F/0
 14896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14897 ;;      Params:         0       0       0       0       0       0       0
 14898 ;;      Locals:         2       0       0       0       0       0       0
 14899 ;;      Temps:          0       0       0       0       0       0       0
 14900 ;;      Totals:         2       0       0       0       0       0       0
 14901 ;;Total ram usage:        2 bytes
 14902 ;; Hardware stack levels used:    1
 14903 ;; Hardware stack levels required when called:    2
 14904 ;; This function calls:
 14905 ;;		Nothing
 14906 ;; This function is called by:
 14907 ;;		_vscp_handleProtocolEvent
 14908 ;; This function uses a non-reentrant model
 14909 ;;
 14910                           
 14911                           	psect	text64
 14912  0053F6                     __ptext64:
 14913                           	opt stack 0
 14914  0053F6                     _vscp_getMatrixInfo:
 14915                           	opt stack 27
 14916                           
 14917                           ;incstack = 0
 14918                           ;incstack = 0
 14919                           ;vscp_getMatrixInfo@pData stored from wreg
 14920  0053F6  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14921                           
 14922                           ; BSR set to: 0
 14923                           ;main.c: 2680: uint8_t i;
 14924                           ;main.c: 2684: for (i = 0; i < 8; i++) {
 14925  0053FA  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14926  0053FC                     l8078:
 14927                           
 14928                           ; BSR set to: 0
 14929                           ;main.c: 2685: pData[ i ] = 0;
 14930  0053FC  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14931  0053FE  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14932  005400  6ED9               	movwf	fsr2l,c
 14933  005402  6ADA               	clrf	fsr2h,c
 14934  005404  6ADF               	clrf	indf2,c
 14935                           
 14936                           ; BSR set to: 0
 14937  005406  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14938                           
 14939                           ; BSR set to: 0
 14940  005408  0E07               	movlw	7
 14941  00540A  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14942  00540C  D7F7               	goto	l8078
 14943                           
 14944                           ; BSR set to: 0
 14945  00540E  0C07               	retlw	7
 14946  005410                     __end_of_vscp_getMatrixInfo:
 14947                           	opt stack 0
 14948                           tblptru	equ	0xFF8
 14949                           tblptrh	equ	0xFF7
 14950                           tblptrl	equ	0xFF6
 14951                           tablat	equ	0xFF5
 14952                           prodh	equ	0xFF4
 14953                           prodl	equ	0xFF3
 14954                           intcon	equ	0xFF2
 14955                           postinc0	equ	0xFEE
 14956                           wreg	equ	0xFE8
 14957                           indf1	equ	0xFE7
 14958                           postdec1	equ	0xFE5
 14959                           fsr1h	equ	0xFE2
 14960                           fsr1l	equ	0xFE1
 14961                           indf2	equ	0xFDF
 14962                           postinc2	equ	0xFDE
 14963                           postdec2	equ	0xFDD
 14964                           plusw2	equ	0xFDB
 14965                           fsr2h	equ	0xFDA
 14966                           fsr2l	equ	0xFD9
 14967                           status	equ	0xFD8
 14968                           
 14969 ;; *************** function _vscp_handleProbeState *****************
 14970 ;; Defined at:
 14971 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;		None
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;		None
 14976 ;; Return value:  Size  Location     Type
 14977 ;;		None               void
 14978 ;; Registers used:
 14979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14980 ;; Tracked objects:
 14981 ;;		On entry : 0/0
 14982 ;;		On exit  : F/0
 14983 ;;		Unchanged: 0/0
 14984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14985 ;;      Params:         0       0       0       0       0       0       0
 14986 ;;      Locals:         0       0       0       0       0       0       0
 14987 ;;      Temps:          0       0       0       0       0       0       0
 14988 ;;      Totals:         0       0       0       0       0       0       0
 14989 ;;Total ram usage:        0 bytes
 14990 ;; Hardware stack levels used:    1
 14991 ;; Hardware stack levels required when called:    8
 14992 ;; This function calls:
 14993 ;;		_vscp_goActiveState
 14994 ;;		_vscp_sendEvent
 14995 ;;		_vscp_writeNicknamePermanent
 14996 ;;		_vscp_setSegmentCRC
 14997 ;; This function is called by:
 14998 ;;		_main
 14999 ;; This function uses a non-reentrant model
 15000 ;;
 15001                           
 15002                           	psect	text65
 15003  004226                     __ptext65:
 15004                           	opt stack 0
 15005  004226                     _vscp_handleProbeState:
 15006                           	opt stack 22
 15007                           
 15008                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;incstack = 0
 15012                           ;incstack = 0
 15013  004226  D055               	goto	l9688
 15014  004228                     l9618:
 15015                           
 15016                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 15017  004228  284F               	incf	_vscp_probe_address,w,c
 15018  00422A  E011               	bz	l9634
 15019                           
 15020                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 15021  00422C  0E81               	movlw	129
 15022  00422E  0100               	movlb	0	; () banked
 15023  004230  6FCF               	movwf	_vscp_omsg& (0+255),b
 15024                           
 15025                           ; BSR set to: 0
 15026                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 15027  004232  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
 15028                           
 15029                           ; BSR set to: 0
 15030                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 15031  004234  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 15032  004236  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 15033                           
 15034                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 15035  004238  0E02               	movlw	2
 15036  00423A  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
 15037                           
 15038                           ; BSR set to: 0
 15039                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15040  00423C  C04F  F0D4         	movff	_vscp_probe_address,_vscp_omsg+5
 15041                           
 15042                           ; BSR set to: 0
 15043                           ;vscp_firmware.c: 216: vscp_sendEvent();
 15044  004240  EC3E  F029         	call	_vscp_sendEvent	;wreg free
 15045                           
 15046                           ; BSR set to: 0
 15047                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 15048  004244  0E01               	movlw	1
 15049  004246  6E4E               	movwf	_vscp_node_substate,c
 15050  004248                     l9632:
 15051                           
 15052                           ; BSR set to: 0
 15053                           ;vscp_firmware.c: 219: vscp_timer = 0;
 15054  004248  6BB6               	clrf	_vscp_timer& (0+255),b	;volatile
 15055  00424A  6BB7               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15056                           
 15057                           ;vscp_firmware.c: 221: }
 15058  00424C  D048               	goto	l1046
 15059  00424E                     l9634:
 15060                           
 15061                           ;vscp_firmware.c: 222: else {
 15062                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 15063  00424E  0E04               	movlw	4
 15064  004250  0100               	movlb	0	; () banked
 15065  004252  6FC0               	movwf	_vscp_node_state& (0+255),b
 15066                           
 15067                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 15068  004254  0E81               	movlw	129
 15069  004256  6FCF               	movwf	_vscp_omsg& (0+255),b
 15070                           
 15071                           ; BSR set to: 0
 15072                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 15073  004258  69D4               	setf	(_vscp_omsg+5)& (0+255),b
 15074                           
 15075                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 15076  00425A  0E07               	movlw	7
 15077  00425C  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
 15078                           
 15079                           ; BSR set to: 0
 15080                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 15081  00425E  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 15082  004260  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 15083                           
 15084                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 15085  004262  0E03               	movlw	3
 15086  004264  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
 15087                           
 15088                           ; BSR set to: 0
 15089                           ;vscp_firmware.c: 235: vscp_sendEvent();
 15090  004266  EC3E  F029         	call	_vscp_sendEvent	;wreg free
 15091  00426A  D039               	goto	l1046
 15092  00426C                     l1047:
 15093                           
 15094                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 15095  00426C  0100               	movlb	0	; () banked
 15096  00426E  AFC1               	btfss	_vscp_imsg& (0+255),7,b
 15097  004270  D00F               	goto	l9658
 15098                           
 15099                           ; BSR set to: 0
 15100                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 15101                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 15102  004272  51C4               	movf	(_vscp_imsg+3)& (0+255),w,b
 15103  004274  11C3               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15104  004276  E133               	bnz	l1046
 15105                           
 15106                           ; BSR set to: 0
 15107  004278  51C5               	movf	(_vscp_imsg+4)& (0+255),w,b
 15108  00427A  0A03               	xorlw	3
 15109  00427C  E130               	bnz	l1046
 15110                           
 15111                           ; BSR set to: 0
 15112                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 15113  00427E  664F               	tstfsz	_vscp_probe_address,c
 15114  004280  D003               	goto	l9652
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 15118  004282  0E02               	movlw	2
 15119  004284  6FC0               	movwf	_vscp_node_state& (0+255),b
 15120  004286  D7E0               	goto	l9632
 15121  004288                     l9652:
 15122                           
 15123                           ; BSR set to: 0
 15124                           ;vscp_firmware.c: 257: else {
 15125                           ;vscp_firmware.c: 260: vscp_probe_address++;
 15126  004288  2A4F               	incf	_vscp_probe_address,f,c
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 15130  00428A  6A4E               	clrf	_vscp_node_substate,c
 15131  00428C                     l9656:
 15132                           
 15133                           ; BSR set to: 0
 15134                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 15135  00428C  6A50               	clrf	_vscp_probe_cnt,c
 15136  00428E  D027               	goto	l1046
 15137  004290                     l9658:
 15138                           
 15139                           ; BSR set to: 0
 15140                           ;vscp_firmware.c: 267: else {
 15141                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 15142  004290  0EE9               	movlw	233
 15143  004292  5DB6               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15144  004294  0E03               	movlw	3
 15145  004296  59B7               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15146  004298  E322               	bnc	l1046
 15147                           
 15148                           ; BSR set to: 0
 15149                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15150  00429A  2A50               	incf	_vscp_probe_cnt,f,c
 15151                           
 15152                           ; BSR set to: 0
 15153                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15154  00429C  0E02               	movlw	2
 15155  00429E  6450               	cpfsgt	_vscp_probe_cnt,c
 15156  0042A0  D016               	goto	l1054
 15157                           
 15158                           ; BSR set to: 0
 15159                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15160  0042A2  664F               	tstfsz	_vscp_probe_address,c
 15161  0042A4  D005               	goto	l1055
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15165  0042A6  2A4F               	incf	_vscp_probe_address,f,c
 15166                           
 15167                           ; BSR set to: 0
 15168                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15169  0042A8  6A4E               	clrf	_vscp_node_substate,c
 15170                           
 15171                           ; BSR set to: 0
 15172                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15173  0042AA  6BB6               	clrf	_vscp_timer& (0+255),b	;volatile
 15174  0042AC  6BB7               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15175  0042AE  D7EE               	goto	l9656
 15176  0042B0                     l1055:
 15177                           
 15178                           ; BSR set to: 0
 15179                           ;vscp_firmware.c: 285: else {
 15180                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15181  0042B0  C04F  F0BF         	movff	_vscp_probe_address,_vscp_nickname
 15182                           
 15183                           ; BSR set to: 0
 15184                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15185  0042B4  0E03               	movlw	3
 15186  0042B6  6FC0               	movwf	_vscp_node_state& (0+255),b
 15187                           
 15188                           ; BSR set to: 0
 15189                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15190  0042B8  6A4E               	clrf	_vscp_node_substate,c
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15194  0042BA  51BF               	movf	_vscp_nickname& (0+255),w,b
 15195  0042BC  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 15196                           
 15197                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15198  0042C0  0E40               	movlw	64
 15199  0042C2  EC75  F02A         	call	_vscp_setSegmentCRC
 15200                           
 15201                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15202  0042C6  6A50               	clrf	_vscp_probe_cnt,c
 15203                           
 15204                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15205  0042C8  ECD0  F029         	call	_vscp_goActiveState	;wreg free
 15206  0042CC  D008               	goto	l1046
 15207  0042CE                     l1054:
 15208                           
 15209                           ;vscp_firmware.c: 300: else {
 15210                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15211  0042CE  6A4E               	clrf	_vscp_node_substate,c
 15212  0042D0  D006               	goto	l1046
 15213  0042D2                     l9688:
 15214  0042D2  504E               	movf	_vscp_node_substate,w,c
 15215                           
 15216                           ; Switch size 1, requested type "space"
 15217                           ; Number of cases is 3, Range of values is 0 to 2
 15218                           ; switch strategies available:
 15219                           ; Name         Instructions Cycles
 15220                           ; simple_byte           10     6 (average)
 15221                           ;	Chosen strategy is simple_byte
 15222  0042D4  E0A9               	bz	l9618
 15223  0042D6  0A01               	xorlw	1	; case 1
 15224  0042D8  E0C9               	bz	l1047
 15225  0042DA  0A03               	xorlw	3	; case 2
 15226  0042DC  E1F8               	bnz	l1054
 15227  0042DE                     l1046:
 15228                           
 15229                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15230  0042DE  0100               	movlb	0	; () banked
 15231  0042E0  6BC1               	clrf	_vscp_imsg& (0+255),b
 15232                           
 15233                           ; BSR set to: 0
 15234  0042E2  0012               	return	
 15235  0042E4                     __end_of_vscp_handleProbeState:
 15236                           	opt stack 0
 15237                           tblptru	equ	0xFF8
 15238                           tblptrh	equ	0xFF7
 15239                           tblptrl	equ	0xFF6
 15240                           tablat	equ	0xFF5
 15241                           prodh	equ	0xFF4
 15242                           prodl	equ	0xFF3
 15243                           intcon	equ	0xFF2
 15244                           postinc0	equ	0xFEE
 15245                           wreg	equ	0xFE8
 15246                           indf1	equ	0xFE7
 15247                           postdec1	equ	0xFE5
 15248                           fsr1h	equ	0xFE2
 15249                           fsr1l	equ	0xFE1
 15250                           indf2	equ	0xFDF
 15251                           postinc2	equ	0xFDE
 15252                           postdec2	equ	0xFDD
 15253                           plusw2	equ	0xFDB
 15254                           fsr2h	equ	0xFDA
 15255                           fsr2l	equ	0xFD9
 15256                           status	equ	0xFD8
 15257                           
 15258 ;; *************** function _vscp_goActiveState *****************
 15259 ;; Defined at:
 15260 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15261 ;; Parameters:    Size  Location     Type
 15262 ;;		None
 15263 ;; Auto vars:     Size  Location     Type
 15264 ;;		None
 15265 ;; Return value:  Size  Location     Type
 15266 ;;		None               void
 15267 ;; Registers used:
 15268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15269 ;; Tracked objects:
 15270 ;;		On entry : 0/0
 15271 ;;		On exit  : F/0
 15272 ;;		Unchanged: 0/0
 15273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15274 ;;      Params:         0       0       0       0       0       0       0
 15275 ;;      Locals:         0       0       0       0       0       0       0
 15276 ;;      Temps:          0       0       0       0       0       0       0
 15277 ;;      Totals:         0       0       0       0       0       0       0
 15278 ;;Total ram usage:        0 bytes
 15279 ;; Hardware stack levels used:    1
 15280 ;; Hardware stack levels required when called:    7
 15281 ;; This function calls:
 15282 ;;		_vscp_sendEvent
 15283 ;; This function is called by:
 15284 ;;		_main
 15285 ;;		_vscp_handleProbeState
 15286 ;; This function uses a non-reentrant model
 15287 ;;
 15288                           
 15289                           	psect	text66
 15290  0053A0                     __ptext66:
 15291                           	opt stack 0
 15292  0053A0                     _vscp_goActiveState:
 15293                           	opt stack 22
 15294                           
 15295                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15296                           
 15297                           ; BSR set to: 0
 15298                           ;incstack = 0
 15299                           ;incstack = 0
 15300  0053A0  0E81               	movlw	129
 15301  0053A2  0100               	movlb	0	; () banked
 15302  0053A4  6FCF               	movwf	_vscp_omsg& (0+255),b
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15306  0053A6  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
 15307                           
 15308                           ; BSR set to: 0
 15309                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15310  0053A8  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 15311  0053AA  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 15312                           
 15313                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15314  0053AC  0E02               	movlw	2
 15315  0053AE  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
 15316                           
 15317                           ; BSR set to: 0
 15318                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15319  0053B0  C0BF  F0D4         	movff	_vscp_nickname,_vscp_omsg+5
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15323  0053B4  EC3E  F029         	call	_vscp_sendEvent	;wreg free
 15324                           
 15325                           ; BSR set to: 0
 15326                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15327  0053B8  0E01               	movlw	1
 15328  0053BA  6E4C               	movwf	_vscp_initledfunc,c
 15329                           
 15330                           ; BSR set to: 0
 15331  0053BC  0C01               	retlw	1
 15332  0053BE                     __end_of_vscp_goActiveState:
 15333                           	opt stack 0
 15334                           tblptru	equ	0xFF8
 15335                           tblptrh	equ	0xFF7
 15336                           tblptrl	equ	0xFF6
 15337                           tablat	equ	0xFF5
 15338                           prodh	equ	0xFF4
 15339                           prodl	equ	0xFF3
 15340                           intcon	equ	0xFF2
 15341                           postinc0	equ	0xFEE
 15342                           wreg	equ	0xFE8
 15343                           indf1	equ	0xFE7
 15344                           postdec1	equ	0xFE5
 15345                           fsr1h	equ	0xFE2
 15346                           fsr1l	equ	0xFE1
 15347                           indf2	equ	0xFDF
 15348                           postinc2	equ	0xFDE
 15349                           postdec2	equ	0xFDD
 15350                           plusw2	equ	0xFDB
 15351                           fsr2h	equ	0xFDA
 15352                           fsr2l	equ	0xFD9
 15353                           status	equ	0xFD8
 15354                           
 15355 ;; *************** function _vscp_sendEvent *****************
 15356 ;; Defined at:
 15357 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15358 ;; Parameters:    Size  Location     Type
 15359 ;;		None
 15360 ;; Auto vars:     Size  Location     Type
 15361 ;;  rv              1   66[COMRAM] unsigned char 
 15362 ;; Return value:  Size  Location     Type
 15363 ;;                  1    wreg      unsigned char 
 15364 ;; Registers used:
 15365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15366 ;; Tracked objects:
 15367 ;;		On entry : F/0
 15368 ;;		On exit  : F/0
 15369 ;;		Unchanged: 0/0
 15370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15371 ;;      Params:         0       0       0       0       0       0       0
 15372 ;;      Locals:         1       0       0       0       0       0       0
 15373 ;;      Temps:          0       0       0       0       0       0       0
 15374 ;;      Totals:         1       0       0       0       0       0       0
 15375 ;;Total ram usage:        1 bytes
 15376 ;; Hardware stack levels used:    1
 15377 ;; Hardware stack levels required when called:    6
 15378 ;; This function calls:
 15379 ;;		_sendVSCPFrame
 15380 ;; This function is called by:
 15381 ;;		_doWork
 15382 ;;		_doOneSecondWork
 15383 ;;		_sendTempEvent
 15384 ;;		_vscp_handleProbeState
 15385 ;;		_vscp_goActiveState
 15386 ;;		_vscp_sendHeartBeat
 15387 ;;		_vscp_newNodeOnline
 15388 ;;		_vscp_handleProtocolEvent
 15389 ;; This function uses a non-reentrant model
 15390 ;;
 15391                           
 15392                           	psect	text67
 15393  00527C                     __ptext67:
 15394                           	opt stack 0
 15395  00527C                     _vscp_sendEvent:
 15396                           	opt stack 23
 15397                           
 15398                           ; BSR set to: 0
 15399                           ;vscp_firmware.c: 1297: vscp_errorcnt++;
 15400                           
 15401                           ; BSR set to: 0
 15402                           ;incstack = 0
 15403                           ;incstack = 0
 15404  00527C  C0D1  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15405  005280  C0D2  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15406  005284  C0D3  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15407  005288  C0BF  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15408  00528C  C0D0  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15409  005290  51CF               	movf	_vscp_omsg& (0+255),w,b
 15410  005292  0B0F               	andlw	15
 15411  005294  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15412  005296  0ED4               	movlw	low (_vscp_omsg+5)
 15413  005298  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15414  00529A  ECE0  F022         	call	_sendVSCPFrame	;wreg free
 15415  00529E  6E43               	movwf	vscp_sendEvent@rv,c
 15416                           
 15417                           ; BSR set to: 0
 15418                           ;vscp_firmware.c: 1298: }
 15419                           ;vscp_firmware.c: 1300: return rv;
 15420  0052A0  5043               	movf	vscp_sendEvent@rv,w,c
 15421                           
 15422                           ; BSR set to: 0
 15423  0052A2  0012               	return	
 15424  0052A4                     __end_of_vscp_sendEvent:
 15425                           	opt stack 0
 15426                           tblptru	equ	0xFF8
 15427                           tblptrh	equ	0xFF7
 15428                           tblptrl	equ	0xFF6
 15429                           tablat	equ	0xFF5
 15430                           prodh	equ	0xFF4
 15431                           prodl	equ	0xFF3
 15432                           intcon	equ	0xFF2
 15433                           postinc0	equ	0xFEE
 15434                           wreg	equ	0xFE8
 15435                           indf1	equ	0xFE7
 15436                           postdec1	equ	0xFE5
 15437                           fsr1h	equ	0xFE2
 15438                           fsr1l	equ	0xFE1
 15439                           indf2	equ	0xFDF
 15440                           postinc2	equ	0xFDE
 15441                           postdec2	equ	0xFDD
 15442                           plusw2	equ	0xFDB
 15443                           fsr2h	equ	0xFDA
 15444                           fsr2l	equ	0xFD9
 15445                           status	equ	0xFD8
 15446                           
 15447 ;; *************** function _sendVSCPFrame *****************
 15448 ;; Defined at:
 15449 ;;		line 2850 in file "../main.c"
 15450 ;; Parameters:    Size  Location     Type
 15451 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15452 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15453 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15454 ;;  priority        1    4[BANK0 ] unsigned char 
 15455 ;;  size            1    5[BANK0 ] unsigned char 
 15456 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15457 ;;		 -> vscp_omsg(13), 
 15458 ;; Auto vars:     Size  Location     Type
 15459 ;;  id              4   27[BANK0 ] unsigned long 
 15460 ;; Return value:  Size  Location     Type
 15461 ;;                  1    wreg      unsigned char 
 15462 ;; Registers used:
 15463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15464 ;; Tracked objects:
 15465 ;;		On entry : F/0
 15466 ;;		On exit  : F/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15469 ;;      Params:         0       7       0       0       0       0       0
 15470 ;;      Locals:         0       4       0       0       0       0       0
 15471 ;;      Temps:          0      20       0       0       0       0       0
 15472 ;;      Totals:         0      31       0       0       0       0       0
 15473 ;;Total ram usage:       31 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:    5
 15476 ;; This function calls:
 15477 ;;		_sendCANFrame
 15478 ;; This function is called by:
 15479 ;;		_vscp_sendEvent
 15480 ;; This function uses a non-reentrant model
 15481 ;;
 15482                           
 15483                           	psect	text68
 15484  0045C0                     __ptext68:
 15485                           	opt stack 0
 15486  0045C0                     _sendVSCPFrame:
 15487                           	opt stack 23
 15488                           
 15489                           ; BSR set to: 0
 15490                           ;main.c: 2851: uint32_t id = ((uint32_t) priority << 26) |
 15491                           ;main.c: 2852: ((uint32_t) vscpclass << 16) |
 15492                           ;main.c: 2853: ((uint32_t) vscptype << 8) |
 15493                           ;main.c: 2854: nodeid;
 15494                           
 15495                           ; BSR set to: 0
 15496                           ;incstack = 0
 15497                           ;incstack = 0
 15498  0045C0  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15499  0045C4  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15500  0045C6  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15501  0045C8  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15502  0045CA  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15503  0045CE  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15504  0045D2  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15505  0045D6  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15506  0045D8  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15507  0045DA  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15508  0045DC  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15509  0045DE  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15510  0045E0  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15511  0045E2  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15512  0045E4  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15513  0045E8  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15514  0045EC  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15515  0045EE  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15516  0045F0  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15517  0045F4  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15518  0045F6  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15519  0045F8  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15520  0045FA  0E1A               	movlw	26
 15521  0045FC                     u9025:
 15522  0045FC  90D8               	bcf	status,0,c
 15523  0045FE  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15524  004600  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15525  004602  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15526  004604  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15527  004606  2EE8               	decfsz	wreg,f,c
 15528  004608  D7F9               	goto	u9025
 15529  00460A  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15530  00460C  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15531  00460E  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15532  004610  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15533  004612  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15534  004614  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15535  004616  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15536  004618  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15537  00461A  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15538  00461C  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15539  00461E  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15540  004620  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15541  004622  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15542  004624  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15543  004626  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15544  004628  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15545  00462A  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15546  00462C  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15547  00462E  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15548  004630  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15549  004632  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15550  004634  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15551  004636  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15552  004638  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15553  00463A  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15554  00463C  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15555  00463E  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15556  004640  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15557  004642  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15558  004644  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15559  004646  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15560  004648  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15561  00464A  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15562                           
 15563                           ; BSR set to: 0
 15564                           ;main.c: 2858: vscp_errorcnt++;
 15565  00464C  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15566  004650  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15567  004654  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15568  004658  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15569  00465C  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15570  004660  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15571  004664  ECBF  F028         	call	_sendCANFrame	;wreg free
 15572  004668  0900               	iorlw	0
 15573                           
 15574                           ; BSR set to: 0
 15575                           ;main.c: 2859: return 0;
 15576  00466A  0E00               	movlw	0
 15577  00466C  A4D8               	btfss	status,2,c
 15578                           
 15579                           ; BSR set to: 0
 15580                           ;main.c: 2860: }
 15581                           ;main.c: 2862: return 1;
 15582  00466E  0E01               	movlw	1
 15583                           
 15584                           ; BSR set to: 0
 15585  004670  0012               	return	
 15586  004672                     __end_of_sendVSCPFrame:
 15587                           	opt stack 0
 15588                           tblptru	equ	0xFF8
 15589                           tblptrh	equ	0xFF7
 15590                           tblptrl	equ	0xFF6
 15591                           tablat	equ	0xFF5
 15592                           prodh	equ	0xFF4
 15593                           prodl	equ	0xFF3
 15594                           intcon	equ	0xFF2
 15595                           postinc0	equ	0xFEE
 15596                           wreg	equ	0xFE8
 15597                           indf1	equ	0xFE7
 15598                           postdec1	equ	0xFE5
 15599                           fsr1h	equ	0xFE2
 15600                           fsr1l	equ	0xFE1
 15601                           indf2	equ	0xFDF
 15602                           postinc2	equ	0xFDE
 15603                           postdec2	equ	0xFDD
 15604                           plusw2	equ	0xFDB
 15605                           fsr2h	equ	0xFDA
 15606                           fsr2l	equ	0xFD9
 15607                           status	equ	0xFD8
 15608                           
 15609 ;; *************** function _sendCANFrame *****************
 15610 ;; Defined at:
 15611 ;;		line 2897 in file "../main.c"
 15612 ;; Parameters:    Size  Location     Type
 15613 ;;  id              4   59[COMRAM] unsigned long 
 15614 ;;  dlc             1   63[COMRAM] unsigned char 
 15615 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15616 ;;		 -> vscp_omsg(13), 
 15617 ;; Auto vars:     Size  Location     Type
 15618 ;;  rv              1    0        unsigned char 
 15619 ;; Return value:  Size  Location     Type
 15620 ;;                  1    wreg      unsigned char 
 15621 ;; Registers used:
 15622 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15623 ;; Tracked objects:
 15624 ;;		On entry : F/0
 15625 ;;		On exit  : F/0
 15626 ;;		Unchanged: 0/0
 15627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15628 ;;      Params:         6       0       0       0       0       0       0
 15629 ;;      Locals:         1       0       0       0       0       0       0
 15630 ;;      Temps:          0       0       0       0       0       0       0
 15631 ;;      Totals:         7       0       0       0       0       0       0
 15632 ;;Total ram usage:        7 bytes
 15633 ;; Hardware stack levels used:    1
 15634 ;; Hardware stack levels required when called:    4
 15635 ;; This function calls:
 15636 ;;		_ECANSendMessage
 15637 ;; This function is called by:
 15638 ;;		_sendVSCPFrame
 15639 ;; This function uses a non-reentrant model
 15640 ;;
 15641                           
 15642                           	psect	text69
 15643  00517E                     __ptext69:
 15644                           	opt stack 0
 15645  00517E                     _sendCANFrame:
 15646                           	opt stack 23
 15647                           
 15648                           ; BSR set to: 0
 15649                           ;main.c: 2900: sendTimer = 0;
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;incstack = 0
 15653                           ;incstack = 0
 15654  00517E  6BBC               	clrf	_sendTimer& (0+255),b	;volatile
 15655  005180                     l11088:
 15656                           
 15657                           ;main.c: 2902: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15658  005180  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15659  005184  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15660  005188  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15661  00518C  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15662  005190  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15663  005194  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15664  005198  0E20               	movlw	32
 15665  00519A  6E1E               	movwf	?_ECANSendMessage+6,c
 15666  00519C  ECD4  F01C         	call	_ECANSendMessage	;wreg free
 15667  0051A0  0900               	iorlw	0
 15668  0051A2  E0EE               	bz	l11088
 15669                           
 15670                           ;main.c: 2905: }
 15671                           ;main.c: 2906: }
 15672                           ;main.c: 2908: vscp_omsg.flags = 0;
 15673                           
 15674                           ;main.c: 2904: break;
 15675  0051A4  0100               	movlb	0	; () banked
 15676  0051A6  6BCF               	clrf	_vscp_omsg& (0+255),b
 15677                           
 15678                           ; BSR set to: 0
 15679                           
 15680                           ; BSR set to: 0
 15681                           ;main.c: 2910: return rv;
 15682  0051A8  0C01               	retlw	1
 15683  0051AA                     __end_of_sendCANFrame:
 15684                           	opt stack 0
 15685                           tblptru	equ	0xFF8
 15686                           tblptrh	equ	0xFF7
 15687                           tblptrl	equ	0xFF6
 15688                           tablat	equ	0xFF5
 15689                           prodh	equ	0xFF4
 15690                           prodl	equ	0xFF3
 15691                           intcon	equ	0xFF2
 15692                           postinc0	equ	0xFEE
 15693                           wreg	equ	0xFE8
 15694                           indf1	equ	0xFE7
 15695                           postdec1	equ	0xFE5
 15696                           fsr1h	equ	0xFE2
 15697                           fsr1l	equ	0xFE1
 15698                           indf2	equ	0xFDF
 15699                           postinc2	equ	0xFDE
 15700                           postdec2	equ	0xFDD
 15701                           plusw2	equ	0xFDB
 15702                           fsr2h	equ	0xFDA
 15703                           fsr2l	equ	0xFD9
 15704                           status	equ	0xFD8
 15705                           
 15706 ;; *************** function _ECANSendMessage *****************
 15707 ;; Defined at:
 15708 ;;		line 617 in file "../ECAN.c"
 15709 ;; Parameters:    Size  Location     Type
 15710 ;;  id              4   23[COMRAM] unsigned long 
 15711 ;;  data            1   27[COMRAM] PTR unsigned char 
 15712 ;;		 -> vscp_omsg(13), 
 15713 ;;  dataLen         1   28[COMRAM] unsigned char 
 15714 ;;  msgFlags        1   29[COMRAM] enum E16306
 15715 ;; Auto vars:     Size  Location     Type
 15716 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15717 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15718 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15719 ;;		 -> B0CON(1), 
 15720 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15721 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15722 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15723 ;;		 -> B0CON(1), 
 15724 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15725 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15726 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15727 ;;		 -> B0CON(1), 
 15728 ;;  i               1   56[COMRAM] unsigned char 
 15729 ;;  temp            1   55[COMRAM] unsigned char 
 15730 ;;  tempBSEL0       1   52[COMRAM] struct .
 15731 ;;  j               1   51[COMRAM] unsigned char 
 15732 ;;  buffers         1   50[COMRAM] unsigned char 
 15733 ;;  mode            1   49[COMRAM] unsigned char 
 15734 ;; Return value:  Size  Location     Type
 15735 ;;                  1    wreg      enum E15660
 15736 ;; Registers used:
 15737 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15738 ;; Tracked objects:
 15739 ;;		On entry : 0/0
 15740 ;;		On exit  : 0/0
 15741 ;;		Unchanged: 0/0
 15742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15743 ;;      Params:         7       0       0       0       0       0       0
 15744 ;;      Locals:        28       0       0       0       0       0       0
 15745 ;;      Temps:          1       0       0       0       0       0       0
 15746 ;;      Totals:        36       0       0       0       0       0       0
 15747 ;;Total ram usage:       36 bytes
 15748 ;; Hardware stack levels used:    1
 15749 ;; Hardware stack levels required when called:    3
 15750 ;; This function calls:
 15751 ;;		__CANIDToRegs
 15752 ;; This function is called by:
 15753 ;;		_sendCANFrame
 15754 ;; This function uses a non-reentrant model
 15755 ;;
 15756                           
 15757                           	psect	text70
 15758  0039A8                     __ptext70:
 15759                           	opt stack 0
 15760  0039A8                     _ECANSendMessage:
 15761                           	opt stack 23
 15762                           
 15763                           ;ECAN.c: 619: BYTE mode;
 15764                           ;ECAN.c: 620: BYTE buffers;
 15765                           ;ECAN.c: 628: BYTE i,j;
 15766                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15767                           ;ECAN.c: 630: BYTE* pb[9];
 15768                           ;ECAN.c: 631: BYTE temp;
 15769                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15770                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15771                           
 15772                           ; BSR set to: 0
 15773                           ;incstack = 0
 15774                           ;incstack = 0
 15775  0039A8  0E0F               	movlw	15	;volatile
 15776  0039AA  6E21               	movwf	ECANSendMessage@pb+1,c
 15777  0039AC  0E40               	movlw	64	;volatile
 15778  0039AE  6E20               	movwf	ECANSendMessage@pb,c
 15779                           
 15780                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15781  0039B0  0E0F               	movlw	15	;volatile
 15782  0039B2  6E23               	movwf	ECANSendMessage@pb+3,c
 15783  0039B4  0E30               	movlw	48	;volatile
 15784  0039B6  6E22               	movwf	ECANSendMessage@pb+2,c
 15785                           
 15786                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15787  0039B8  0E0F               	movlw	15	;volatile
 15788  0039BA  6E25               	movwf	ECANSendMessage@pb+5,c
 15789  0039BC  0E20               	movlw	32	;volatile
 15790  0039BE  6E24               	movwf	ECANSendMessage@pb+4,c
 15791                           
 15792                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15793  0039C0  0E0E               	movlw	14	;volatile
 15794  0039C2  6E27               	movwf	ECANSendMessage@pb+7,c
 15795  0039C4  0E20               	movlw	32	;volatile
 15796  0039C6  6E26               	movwf	ECANSendMessage@pb+6,c
 15797                           
 15798                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15799  0039C8  0E0E               	movlw	14	;volatile
 15800  0039CA  6E29               	movwf	ECANSendMessage@pb+9,c
 15801  0039CC  0E30               	movlw	48	;volatile
 15802  0039CE  6E28               	movwf	ECANSendMessage@pb+8,c
 15803                           
 15804                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15805  0039D0  0E0E               	movlw	14	;volatile
 15806  0039D2  6E2B               	movwf	ECANSendMessage@pb+11,c
 15807  0039D4  0E40               	movlw	64	;volatile
 15808  0039D6  6E2A               	movwf	ECANSendMessage@pb+10,c
 15809                           
 15810                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15811  0039D8  0E0E               	movlw	14	;volatile
 15812  0039DA  6E2D               	movwf	ECANSendMessage@pb+13,c
 15813  0039DC  0E50               	movlw	80	;volatile
 15814  0039DE  6E2C               	movwf	ECANSendMessage@pb+12,c
 15815                           
 15816                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15817  0039E0  0E0E               	movlw	14	;volatile
 15818  0039E2  6E2F               	movwf	ECANSendMessage@pb+15,c
 15819  0039E4  0E60               	movlw	96	;volatile
 15820  0039E6  6E2E               	movwf	ECANSendMessage@pb+14,c
 15821                           
 15822                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15823  0039E8  0E0E               	movlw	14	;volatile
 15824  0039EA  6E31               	movwf	ECANSendMessage@pb+17,c
 15825  0039EC  0E70               	movlw	112	;volatile
 15826  0039EE  6E30               	movwf	ECANSendMessage@pb+16,c
 15827                           
 15828                           ; BSR set to: 14
 15829                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15830  0039F0  5077               	movf	3959,w,c	;volatile
 15831  0039F2  0BC0               	andlw	192
 15832  0039F4  6E32               	movwf	ECANSendMessage@mode,c
 15833                           
 15834                           ; BSR set to: 14
 15835                           ;ECAN.c: 660: if ( mode == 0x00 )
 15836  0039F6  6632               	tstfsz	ECANSendMessage@mode,c
 15837  0039F8  D002               	goto	l11104
 15838                           
 15839                           ; BSR set to: 14
 15840                           ;ECAN.c: 661: buffers = 2;
 15841  0039FA  0E02               	movlw	2
 15842  0039FC  D001               	goto	L33
 15843  0039FE                     l11104:
 15844                           
 15845                           ; BSR set to: 14
 15846                           ;ECAN.c: 662: else
 15847                           ;ECAN.c: 663: buffers = 8;
 15848  0039FE  0E08               	movlw	8
 15849  003A00                     L33:
 15850  003A00  6E33               	movwf	ECANSendMessage@buffers,c
 15851                           
 15852                           ; BSR set to: 14
 15853                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15854  003A02  010D               	movlb	13	; () banked
 15855  003A04  90D8               	bcf	status,0,c
 15856  003A06  31F8               	rrcf	248,w,b	;volatile
 15857  003A08  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15858                           
 15859                           ; BSR set to: 13
 15860                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15861  003A0A  6A39               	clrf	ECANSendMessage@i,c
 15862  003A0C  D07B               	goto	l11164
 15863  003A0E                     l11110:
 15864                           
 15865                           ;ECAN.c: 688: {
 15866                           ;ECAN.c: 693: ptr = pb[i];
 15867  003A0E  5039               	movf	ECANSendMessage@i,w,c
 15868  003A10  0D02               	mullw	2
 15869  003A12  50F3               	movf	prodl,w,c
 15870  003A14  0F20               	addlw	low ECANSendMessage@pb
 15871  003A16  6ED9               	movwf	fsr2l,c
 15872  003A18  6ADA               	clrf	fsr2h,c
 15873  003A1A  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15874  003A1E  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15875                           
 15876                           ;ECAN.c: 694: tempPtr = ptr;
 15877  003A22  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15878  003A26  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15879                           
 15880                           ;ECAN.c: 702: if ( i > 2 )
 15881  003A2A  0E02               	movlw	2
 15882  003A2C  6439               	cpfsgt	ECANSendMessage@i,c
 15883  003A2E  D004               	goto	l11122
 15884                           
 15885                           ;ECAN.c: 703: {
 15886                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15887  003A30  90D8               	bcf	status,0,c
 15888  003A32  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15889                           
 15890                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15891  003A34  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15892  003A36  D065               	goto	l11162
 15893  003A38                     l11122:
 15894                           
 15895                           ;ECAN.c: 714: }
 15896                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15897  003A38  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15898  003A3C  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15899  003A40  50DF               	movf	indf2,w,c
 15900  003A42  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15901  003A44  B61F               	btfsc	??_ECANSendMessage,3,c
 15902  003A46  D05D               	goto	l11162
 15903                           
 15904                           ;ECAN.c: 721: {
 15905                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15906  003A48  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15907  003A4C  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15908  003A50  0EFC               	movlw	252
 15909  003A52  16DF               	andwf	indf2,f,c
 15910                           
 15911                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15912  003A54  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15913  003A58  0E03               	movlw	3
 15914  003A5A  161F               	andwf	??_ECANSendMessage,f,c
 15915  003A5C  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15916  003A60  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15917  003A64  501F               	movf	??_ECANSendMessage,w,c
 15918  003A66  12DF               	iorwf	indf2,f,c
 15919                           
 15920                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15921  003A68  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15922  003A6A  D004               	goto	l823
 15923                           
 15924                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15925  003A6C  501D               	movf	ECANSendMessage@dataLen,w,c
 15926  003A6E  0940               	iorlw	64
 15927  003A70  6E38               	movwf	ECANSendMessage@temp,c
 15928  003A72  D002               	goto	l11132
 15929  003A74                     l823:
 15930                           
 15931                           ;ECAN.c: 729: else
 15932                           ;ECAN.c: 730: temp = dataLen;
 15933  003A74  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15934  003A78                     l11132:
 15935                           
 15936                           ;ECAN.c: 732: *(ptr+5) = temp;
 15937  003A78  EE20 F005          	lfsr	2,5
 15938  003A7C  503A               	movf	ECANSendMessage@ptr,w,c
 15939  003A7E  26D9               	addwf	fsr2l,f,c
 15940  003A80  503B               	movf	ECANSendMessage@ptr+1,w,c
 15941  003A82  22DA               	addwfc	fsr2h,f,c
 15942  003A84  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15943                           
 15944                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15945  003A88  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15946  003A8A  D003               	goto	l825
 15947                           
 15948                           ;ECAN.c: 736: temp = 1;
 15949  003A8C  0E01               	movlw	1
 15950  003A8E  6E38               	movwf	ECANSendMessage@temp,c
 15951  003A90  D001               	goto	l11138
 15952  003A92                     l825:
 15953                           
 15954                           ;ECAN.c: 738: else
 15955                           ;ECAN.c: 739: temp = 0;
 15956  003A92  6A38               	clrf	ECANSendMessage@temp,c
 15957  003A94                     l11138:
 15958                           
 15959                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15960  003A94  283A               	incf	ECANSendMessage@ptr,w,c
 15961  003A96  6E0E               	movwf	?__CANIDToRegs,c
 15962  003A98  0E00               	movlw	0
 15963  003A9A  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15964  003A9C  6E0F               	movwf	?__CANIDToRegs+1,c
 15965  003A9E  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15966  003AA2  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15967  003AA6  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15968  003AAA  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15969  003AAE  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15970  003AB2  ECAD  F01E         	call	__CANIDToRegs	;wreg free
 15971                           
 15972                           ;ECAN.c: 745: ptr += 6;
 15973  003AB6  0E06               	movlw	6
 15974  003AB8  263A               	addwf	ECANSendMessage@ptr,f,c
 15975  003ABA  0E00               	movlw	0
 15976  003ABC  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15977                           
 15978                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15979  003ABE  6A34               	clrf	ECANSendMessage@j,c
 15980  003AC0  D00D               	goto	l11152
 15981  003AC2                     l11144:
 15982                           
 15983                           ;ECAN.c: 748: *ptr++ = *data++;
 15984  003AC2  501C               	movf	ECANSendMessage@data,w,c
 15985  003AC4  6ED9               	movwf	fsr2l,c
 15986  003AC6  6ADA               	clrf	fsr2h,c
 15987  003AC8  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15988  003ACC  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15989  003AD0  CFDF FFE7          	movff	indf2,indf1
 15990  003AD4  2A1C               	incf	ECANSendMessage@data,f,c
 15991  003AD6  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15992  003AD8  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15993  003ADA  2A34               	incf	ECANSendMessage@j,f,c
 15994  003ADC                     l11152:
 15995  003ADC  501D               	movf	ECANSendMessage@dataLen,w,c
 15996  003ADE  5C34               	subwf	ECANSendMessage@j,w,c
 15997  003AE0  E3F0               	bnc	l11144
 15998                           
 15999                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16000  003AE2  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16001  003AE6  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16002  003AEA  50DF               	movf	indf2,w,c
 16003  003AEC  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 16004  003AEE  B41F               	btfsc	??_ECANSendMessage,2,c
 16005  003AF0  D006               	goto	l11158
 16006                           
 16007                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16008  003AF2  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16009  003AF6  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16010  003AFA  0E00               	movlw	0
 16011  003AFC  86DB               	bsf	plusw2,3,c
 16012  003AFE                     l11158:
 16013                           
 16014                           ;ECAN.c: 755: return TRUE;
 16015  003AFE  0E01               	movlw	1
 16016  003B00  D005               	goto	l831
 16017  003B02                     l11162:
 16018  003B02  2A39               	incf	ECANSendMessage@i,f,c
 16019  003B04                     l11164:
 16020  003B04  5033               	movf	ECANSendMessage@buffers,w,c
 16021  003B06  5C39               	subwf	ECANSendMessage@i,w,c
 16022  003B08  E382               	bnc	l11110
 16023                           
 16024                           ;ECAN.c: 756: }
 16025                           ;ECAN.c: 757: }
 16026                           ;ECAN.c: 760: return FALSE;
 16027  003B0A  0E00               	movlw	0
 16028  003B0C                     l831:
 16029  003B0C  0012               	return	
 16030  003B0E                     __end_of_ECANSendMessage:
 16031                           	opt stack 0
 16032                           tblptru	equ	0xFF8
 16033                           tblptrh	equ	0xFF7
 16034                           tblptrl	equ	0xFF6
 16035                           tablat	equ	0xFF5
 16036                           prodh	equ	0xFF4
 16037                           prodl	equ	0xFF3
 16038                           intcon	equ	0xFF2
 16039                           postinc0	equ	0xFEE
 16040                           wreg	equ	0xFE8
 16041                           indf1	equ	0xFE7
 16042                           postdec1	equ	0xFE5
 16043                           fsr1h	equ	0xFE2
 16044                           fsr1l	equ	0xFE1
 16045                           indf2	equ	0xFDF
 16046                           postinc2	equ	0xFDE
 16047                           postdec2	equ	0xFDD
 16048                           plusw2	equ	0xFDB
 16049                           fsr2h	equ	0xFDA
 16050                           fsr2l	equ	0xFD9
 16051                           status	equ	0xFD8
 16052                           
 16053 ;; *************** function __CANIDToRegs *****************
 16054 ;; Defined at:
 16055 ;;		line 1099 in file "../ECAN.c"
 16056 ;; Parameters:    Size  Location     Type
 16057 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16058 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16059 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16060 ;;		 -> B0CON(1), 
 16061 ;;  val             4   15[COMRAM] unsigned long 
 16062 ;;  type            1   19[COMRAM] unsigned char 
 16063 ;; Auto vars:     Size  Location     Type
 16064 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 16065 ;;		 -> _CANIDToRegs@val(4), 
 16066 ;; Return value:  Size  Location     Type
 16067 ;;		None               void
 16068 ;; Registers used:
 16069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16070 ;; Tracked objects:
 16071 ;;		On entry : 0/D
 16072 ;;		On exit  : 0/0
 16073 ;;		Unchanged: 0/0
 16074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16075 ;;      Params:         7       0       0       0       0       0       0
 16076 ;;      Locals:         1       0       0       0       0       0       0
 16077 ;;      Temps:          2       0       0       0       0       0       0
 16078 ;;      Totals:        10       0       0       0       0       0       0
 16079 ;;Total ram usage:       10 bytes
 16080 ;; Hardware stack levels used:    1
 16081 ;; Hardware stack levels required when called:    2
 16082 ;; This function calls:
 16083 ;;		Nothing
 16084 ;; This function is called by:
 16085 ;;		_ECANSendMessage
 16086 ;; This function uses a non-reentrant model
 16087 ;;
 16088                           
 16089                           	psect	text71
 16090  003D5A                     __ptext71:
 16091                           	opt stack 0
 16092  003D5A                     __CANIDToRegs:
 16093                           	opt stack 23
 16094                           
 16095                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16096                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16097                           
 16098                           ;incstack = 0
 16099                           ;incstack = 0
 16100  003D5A  0E10               	movlw	low __CANIDToRegs@val
 16101  003D5C  6E17               	movwf	__CANIDToRegs@Value,c
 16102                           
 16103                           ;ECAN.c: 1104: if ( type == 0 )
 16104  003D5E  6614               	tstfsz	__CANIDToRegs@type,c
 16105  003D60  D022               	goto	l11180
 16106                           
 16107                           ;ECAN.c: 1105: {
 16108                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16109  003D62  5017               	movf	__CANIDToRegs@Value,w,c
 16110  003D64  6ED9               	movwf	fsr2l,c
 16111  003D66  6ADA               	clrf	fsr2h,c
 16112  003D68  50DF               	movf	indf2,w,c
 16113  003D6A  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16114  003D6C  90D8               	bcf	status,0,c
 16115  003D6E  3215               	rrcf	??__CANIDToRegs,f,c
 16116  003D70  90D8               	bcf	status,0,c
 16117  003D72  3215               	rrcf	??__CANIDToRegs,f,c
 16118  003D74  90D8               	bcf	status,0,c
 16119  003D76  3015               	rrcf	??__CANIDToRegs,w,c
 16120                           
 16121                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16122  003D78  D862               	call	PL40	;call to abstracted procedure
 16123  003D7A  2AD9               	incf	fsr2l,f,c
 16124  003D7C  6ADA               	clrf	fsr2h,c
 16125  003D7E  D872               	call	PL84	;call to abstracted procedure
 16126  003D80                     u9155:
 16127  003D80  90D8               	bcf	status,0,c
 16128  003D82  3615               	rlcf	??__CANIDToRegs,f,c
 16129  003D84  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16130  003D86  D7FC               	goto	u9155
 16131  003D88  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16132                           
 16133                           ;ECAN.c: 1109: ptr++;
 16134                           
 16135                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16136  003D8C  D846               	call	PL18	;call to abstracted procedure
 16137  003D8E  D86A               	call	PL84	;call to abstracted procedure
 16138  003D90                     u9165:
 16139  003D90  90D8               	bcf	status,0,c
 16140  003D92  3615               	rlcf	??__CANIDToRegs,f,c
 16141  003D94  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16142  003D96  D7FC               	goto	u9165
 16143  003D98  5015               	movf	??__CANIDToRegs,w,c
 16144  003D9A  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16145  003D9E  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16146  003DA2  6EDF               	movwf	indf2,c
 16147                           
 16148                           ;ECAN.c: 1111: }
 16149  003DA4  D039               	goto	l885
 16150  003DA6                     l11180:
 16151                           
 16152                           ;ECAN.c: 1112: else
 16153                           ;ECAN.c: 1113: {
 16154                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16155  003DA6  5017               	movf	__CANIDToRegs@Value,w,c
 16156  003DA8  D842               	call	PL32	;call to abstracted procedure
 16157  003DAA  0E05               	movlw	5
 16158  003DAC  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16159  003DAE                     u9175:
 16160  003DAE  90D8               	bcf	status,0,c
 16161  003DB0  3215               	rrcf	??__CANIDToRegs,f,c
 16162  003DB2  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16163  003DB4  D7FC               	goto	u9175
 16164  003DB6  5015               	movf	??__CANIDToRegs,w,c
 16165                           
 16166                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16167  003DB8  D842               	call	PL40	;call to abstracted procedure
 16168  003DBA  0E03               	movlw	3
 16169  003DBC  D849               	call	PL46	;call to abstracted procedure
 16170  003DBE  3615               	rlcf	??__CANIDToRegs,f,c
 16171  003DC0  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16172                           
 16173                           ;ECAN.c: 1117: ptr++;
 16174                           
 16175                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16176  003DC4  D82A               	call	PL18	;call to abstracted procedure
 16177  003DC6  0E02               	movlw	2
 16178  003DC8  D843               	call	PL46	;call to abstracted procedure
 16179  003DCA  3415               	rlcf	??__CANIDToRegs,w,c
 16180  003DCC  0BE0               	andlw	224
 16181  003DCE  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16182  003DD2  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16183  003DD6  6EDF               	movwf	indf2,c
 16184                           
 16185                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16186  003DD8  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16187  003DDC  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16188  003DE0  0E00               	movlw	0
 16189  003DE2  86DB               	bsf	plusw2,3,c
 16190                           
 16191                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16192  003DE4  5017               	movf	__CANIDToRegs@Value,w,c
 16193  003DE6  D823               	call	PL32	;call to abstracted procedure
 16194  003DE8  0E03               	movlw	3
 16195  003DEA  1615               	andwf	??__CANIDToRegs,f,c
 16196  003DEC  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16197                           
 16198                           ;ECAN.c: 1122: ptr++;
 16199                           
 16200                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16201  003DF0  D814               	call	PL18	;call to abstracted procedure
 16202  003DF2  2AD9               	incf	fsr2l,f,c
 16203  003DF4  6ADA               	clrf	fsr2h,c
 16204  003DF6  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16205  003DFA  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16206  003DFE  CFDF FFE7          	movff	indf2,indf1
 16207                           
 16208                           ;ECAN.c: 1124: ptr++;
 16209  003E02  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16210  003E04  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16211                           
 16212                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16213  003E06  5017               	movf	__CANIDToRegs@Value,w,c
 16214  003E08  6ED9               	movwf	fsr2l,c
 16215  003E0A  6ADA               	clrf	fsr2h,c
 16216  003E0C  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16217  003E10  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16218  003E14  CFDF FFE7          	movff	indf2,indf1
 16219  003E18                     l885:
 16220  003E18  0012               	return	
 16221  003E1A                     __end_of__CANIDToRegs:
 16222                           	opt stack 0
 16223  003E1A                     PL18:
 16224                           	opt stack 23
 16225  003E1A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16226  003E1E  5015               	movf	??__CANIDToRegs,w,c
 16227  003E20  12DF               	iorwf	indf2,f,c
 16228  003E22  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16229  003E24  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16230  003E26  5017               	movf	__CANIDToRegs@Value,w,c
 16231  003E28  6ED9               	movwf	fsr2l,c
 16232  003E2A  6ADA               	clrf	fsr2h,c
 16233  003E2C  0012               	return	
 16234  003E2E                     __end_ofPL18:
 16235                           	opt stack 0
 16236  003E2E                     PL32:
 16237                           	opt stack 23
 16238  003E2E  6ED9               	movwf	fsr2l,c
 16239  003E30  6ADA               	clrf	fsr2h,c
 16240  003E32  0E02               	movlw	2
 16241  003E34  26D9               	addwf	fsr2l,f,c
 16242  003E36  6ADA               	clrf	fsr2h,c
 16243  003E38  50DF               	movf	indf2,w,c
 16244  003E3A  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16245  003E3C  0012               	return	
 16246  003E3E                     __end_ofPL32:
 16247                           	opt stack 0
 16248  003E3E                     PL40:
 16249                           	opt stack 23
 16250  003E3E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16251  003E42  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16252  003E46  6EDF               	movwf	indf2,c
 16253  003E48  5017               	movf	__CANIDToRegs@Value,w,c
 16254  003E4A  6ED9               	movwf	fsr2l,c
 16255  003E4C  6ADA               	clrf	fsr2h,c
 16256  003E4E  0012               	return	
 16257  003E50                     __end_ofPL40:
 16258                           	opt stack 0
 16259  003E50                     PL46:
 16260                           	opt stack 23
 16261  003E50  26D9               	addwf	fsr2l,f,c
 16262  003E52  6ADA               	clrf	fsr2h,c
 16263  003E54  50DF               	movf	indf2,w,c
 16264  003E56  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16265  003E58  90D8               	bcf	status,0,c
 16266  003E5A  3615               	rlcf	??__CANIDToRegs,f,c
 16267  003E5C  90D8               	bcf	status,0,c
 16268  003E5E  3615               	rlcf	??__CANIDToRegs,f,c
 16269  003E60  90D8               	bcf	status,0,c
 16270  003E62  0012               	return	
 16271  003E64                     __end_ofPL46:
 16272                           	opt stack 0
 16273  003E64                     PL84:
 16274                           	opt stack 23
 16275  003E64  50DF               	movf	indf2,w,c
 16276  003E66  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16277  003E68  0E05               	movlw	5
 16278  003E6A  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16279  003E6C  0C05               	retlw	5
 16280  003E6E                     __end_ofPL84:
 16281                           	opt stack 0
 16282                           tblptru	equ	0xFF8
 16283                           tblptrh	equ	0xFF7
 16284                           tblptrl	equ	0xFF6
 16285                           tablat	equ	0xFF5
 16286                           prodh	equ	0xFF4
 16287                           prodl	equ	0xFF3
 16288                           intcon	equ	0xFF2
 16289                           postinc0	equ	0xFEE
 16290                           wreg	equ	0xFE8
 16291                           indf1	equ	0xFE7
 16292                           postdec1	equ	0xFE5
 16293                           fsr1h	equ	0xFE2
 16294                           fsr1l	equ	0xFE1
 16295                           indf2	equ	0xFDF
 16296                           postinc2	equ	0xFDE
 16297                           postdec2	equ	0xFDD
 16298                           plusw2	equ	0xFDB
 16299                           fsr2h	equ	0xFDA
 16300                           fsr2l	equ	0xFD9
 16301                           status	equ	0xFD8
 16302                           
 16303 ;; *************** function _vscp_getEvent *****************
 16304 ;; Defined at:
 16305 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;		None
 16308 ;; Auto vars:     Size  Location     Type
 16309 ;;  rv              1   49[COMRAM] unsigned char 
 16310 ;; Return value:  Size  Location     Type
 16311 ;;                  1    wreg      unsigned char 
 16312 ;; Registers used:
 16313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16314 ;; Tracked objects:
 16315 ;;		On entry : F/0
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16319 ;;      Params:         0       0       0       0       0       0       0
 16320 ;;      Locals:         1       0       0       0       0       0       0
 16321 ;;      Temps:          0       0       0       0       0       0       0
 16322 ;;      Totals:         1       0       0       0       0       0       0
 16323 ;;Total ram usage:        1 bytes
 16324 ;; Hardware stack levels used:    1
 16325 ;; Hardware stack levels required when called:    6
 16326 ;; This function calls:
 16327 ;;		_getVSCPFrame
 16328 ;; This function is called by:
 16329 ;;		_main
 16330 ;; This function uses a non-reentrant model
 16331 ;;
 16332                           
 16333                           	psect	text72
 16334  00522A                     __ptext72:
 16335                           	opt stack 0
 16336  00522A                     _vscp_getEvent:
 16337                           	opt stack 24
 16338                           
 16339                           ; BSR set to: 0
 16340                           ;vscp_firmware.c: 1309: int8_t rv;
 16341                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16342                           
 16343                           ;incstack = 0
 16344                           ;incstack = 0
 16345  00522A  BFC1               	btfsc	_vscp_imsg& (0+255),7,b
 16346  00522C  D012               	goto	l1280
 16347                           
 16348                           ; BSR set to: 0
 16349                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16350                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16351                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16352                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16353                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16354                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16355  00522E  0EC5               	movlw	low (_vscp_imsg+4)
 16356  005230  6E24               	movwf	?_getVSCPFrame,c
 16357  005232  0EC6               	movlw	low (_vscp_imsg+5)
 16358  005234  6E25               	movwf	?_getVSCPFrame+1,c
 16359  005236  0EC2               	movlw	low (_vscp_imsg+1)
 16360  005238  6E26               	movwf	?_getVSCPFrame+2,c
 16361  00523A  0EC1               	movlw	low _vscp_imsg
 16362  00523C  6E27               	movwf	?_getVSCPFrame+3,c
 16363  00523E  0EC7               	movlw	low (_vscp_imsg+6)
 16364  005240  6E28               	movwf	?_getVSCPFrame+4,c
 16365  005242  0EC3               	movlw	(_vscp_imsg+2)& (0+255)
 16366  005244  EC89  F025         	call	_getVSCPFrame
 16367  005248  6E32               	movwf	vscp_getEvent@rv,c
 16368  00524A  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16369  00524C  E002               	bz	l1280
 16370                           
 16371                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16372  00524E  0100               	movlb	0	; () banked
 16373  005250  8FC1               	bsf	_vscp_imsg& (0+255),7,b
 16374  005252                     l1280:
 16375  005252  0012               	return	
 16376  005254                     __end_of_vscp_getEvent:
 16377                           	opt stack 0
 16378                           tblptru	equ	0xFF8
 16379                           tblptrh	equ	0xFF7
 16380                           tblptrl	equ	0xFF6
 16381                           tablat	equ	0xFF5
 16382                           prodh	equ	0xFF4
 16383                           prodl	equ	0xFF3
 16384                           intcon	equ	0xFF2
 16385                           postinc0	equ	0xFEE
 16386                           wreg	equ	0xFE8
 16387                           indf1	equ	0xFE7
 16388                           postdec1	equ	0xFE5
 16389                           fsr1h	equ	0xFE2
 16390                           fsr1l	equ	0xFE1
 16391                           indf2	equ	0xFDF
 16392                           postinc2	equ	0xFDE
 16393                           postdec2	equ	0xFDD
 16394                           plusw2	equ	0xFDB
 16395                           fsr2h	equ	0xFDA
 16396                           fsr2l	equ	0xFD9
 16397                           status	equ	0xFD8
 16398                           
 16399 ;; *************** function _getVSCPFrame *****************
 16400 ;; Defined at:
 16401 ;;		line 2876 in file "../main.c"
 16402 ;; Parameters:    Size  Location     Type
 16403 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16404 ;;		 -> vscp_imsg(14), 
 16405 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16406 ;;		 -> vscp_imsg(14), 
 16407 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16408 ;;		 -> vscp_imsg(14), 
 16409 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16410 ;;		 -> vscp_imsg(14), 
 16411 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16412 ;;		 -> vscp_imsg(14), 
 16413 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16414 ;;		 -> vscp_imsg(14), 
 16415 ;; Auto vars:     Size  Location     Type
 16416 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16417 ;;		 -> vscp_imsg(14), 
 16418 ;;  id              4   45[COMRAM] unsigned long 
 16419 ;; Return value:  Size  Location     Type
 16420 ;;                  1    wreg      unsigned char 
 16421 ;; Registers used:
 16422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16423 ;; Tracked objects:
 16424 ;;		On entry : F/0
 16425 ;;		On exit  : 0/0
 16426 ;;		Unchanged: 0/0
 16427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16428 ;;      Params:         5       0       0       0       0       0       0
 16429 ;;      Locals:         5       0       0       0       0       0       0
 16430 ;;      Temps:          4       0       0       0       0       0       0
 16431 ;;      Totals:        14       0       0       0       0       0       0
 16432 ;;Total ram usage:       14 bytes
 16433 ;; Hardware stack levels used:    1
 16434 ;; Hardware stack levels required when called:    5
 16435 ;; This function calls:
 16436 ;;		_getCANFrame
 16437 ;; This function is called by:
 16438 ;;		_vscp_getEvent
 16439 ;; This function uses a non-reentrant model
 16440 ;;
 16441                           
 16442                           	psect	text73
 16443  004B12                     __ptext73:
 16444                           	opt stack 0
 16445  004B12                     _getVSCPFrame:
 16446                           	opt stack 24
 16447                           
 16448                           ;incstack = 0
 16449                           ;incstack = 0
 16450                           ;getVSCPFrame@pvscpclass stored from wreg
 16451  004B12  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16452                           
 16453                           ; BSR set to: 0
 16454                           ;main.c: 2877: uint32_t id;
 16455                           ;main.c: 2879: if (!getCANFrame(&id, pSize, pData)) {
 16456  004B16  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16457  004B1A  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16458  004B1E  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16459  004B20  ECD5  F028         	call	_getCANFrame
 16460  004B24  0900               	iorlw	0
 16461  004B26  E102               	bnz	l8152
 16462                           
 16463                           ;main.c: 2880: return 0;
 16464  004B28  0E00               	movlw	0
 16465  004B2A  D02E               	goto	l629
 16466  004B2C                     l8152:
 16467                           
 16468                           ;main.c: 2881: }
 16469                           ;main.c: 2883: *pNodeId = id & 0x0ff;
 16470  004B2C  5025               	movf	getVSCPFrame@pNodeId,w,c
 16471  004B2E  6ED9               	movwf	fsr2l,c
 16472  004B30  6ADA               	clrf	fsr2h,c
 16473  004B32  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16474                           
 16475                           ;main.c: 2884: *pvscptype = (id >> 8) & 0xff;
 16476  004B36  5024               	movf	getVSCPFrame@pvscptype,w,c
 16477  004B38  6ED9               	movwf	fsr2l,c
 16478  004B3A  6ADA               	clrf	fsr2h,c
 16479  004B3C  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16480                           
 16481                           ;main.c: 2885: *pvscpclass = (id >> 16) & 0x1ff;
 16482  004B40  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16483  004B42  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16484  004B44  0E01               	movlw	1
 16485  004B46  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16486  004B48  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16487  004B4A  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16488  004B4C  6ED9               	movwf	fsr2l,c
 16489  004B4E  6ADA               	clrf	fsr2h,c
 16490  004B50  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16491  004B54  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16492                           
 16493                           ;main.c: 2886: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16494  004B58  5026               	movf	getVSCPFrame@pPriority,w,c
 16495  004B5A  6ED9               	movwf	fsr2l,c
 16496  004B5C  6ADA               	clrf	fsr2h,c
 16497  004B5E  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16498  004B62  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16499  004B66  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16500  004B6A  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16501  004B6E  0E1B               	movlw	27
 16502  004B70  D005               	goto	u5460
 16503  004B72                     u5465:
 16504  004B72  90D8               	bcf	status,0,c
 16505  004B74  322C               	rrcf	??_getVSCPFrame+3,f,c
 16506  004B76  322B               	rrcf	??_getVSCPFrame+2,f,c
 16507  004B78  322A               	rrcf	??_getVSCPFrame+1,f,c
 16508  004B7A  3229               	rrcf	??_getVSCPFrame,f,c
 16509  004B7C                     u5460:
 16510  004B7C  2EE8               	decfsz	wreg,f,c
 16511  004B7E  D7F9               	goto	u5465
 16512  004B80  5029               	movf	??_getVSCPFrame,w,c
 16513  004B82  0B07               	andlw	7
 16514  004B84  6EDF               	movwf	indf2,c
 16515                           
 16516                           ;main.c: 2888: return 1;
 16517  004B86  0E01               	movlw	1
 16518  004B88                     l629:
 16519  004B88  0012               	return	
 16520  004B8A                     __end_of_getVSCPFrame:
 16521                           	opt stack 0
 16522                           tblptru	equ	0xFF8
 16523                           tblptrh	equ	0xFF7
 16524                           tblptrl	equ	0xFF6
 16525                           tablat	equ	0xFF5
 16526                           prodh	equ	0xFF4
 16527                           prodl	equ	0xFF3
 16528                           intcon	equ	0xFF2
 16529                           postinc0	equ	0xFEE
 16530                           wreg	equ	0xFE8
 16531                           indf1	equ	0xFE7
 16532                           postdec1	equ	0xFE5
 16533                           fsr1h	equ	0xFE2
 16534                           fsr1l	equ	0xFE1
 16535                           indf2	equ	0xFDF
 16536                           postinc2	equ	0xFDE
 16537                           postdec2	equ	0xFDD
 16538                           plusw2	equ	0xFDB
 16539                           fsr2h	equ	0xFDA
 16540                           fsr2l	equ	0xFD9
 16541                           status	equ	0xFD8
 16542                           
 16543 ;; *************** function _getCANFrame *****************
 16544 ;; Defined at:
 16545 ;;		line 2918 in file "../main.c"
 16546 ;; Parameters:    Size  Location     Type
 16547 ;;  pid             1    wreg     PTR unsigned long 
 16548 ;;		 -> getVSCPFrame@id(4), 
 16549 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16550 ;;		 -> vscp_imsg(14), 
 16551 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16552 ;;		 -> vscp_imsg(14), 
 16553 ;; Auto vars:     Size  Location     Type
 16554 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16555 ;;		 -> getVSCPFrame@id(4), 
 16556 ;;  flags           1   34[COMRAM] enum E16409
 16557 ;; Return value:  Size  Location     Type
 16558 ;;                  1    wreg      unsigned char 
 16559 ;; Registers used:
 16560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16561 ;; Tracked objects:
 16562 ;;		On entry : F/0
 16563 ;;		On exit  : 0/0
 16564 ;;		Unchanged: 0/0
 16565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16566 ;;      Params:         2       0       0       0       0       0       0
 16567 ;;      Locals:         2       0       0       0       0       0       0
 16568 ;;      Temps:          0       0       0       0       0       0       0
 16569 ;;      Totals:         4       0       0       0       0       0       0
 16570 ;;Total ram usage:        4 bytes
 16571 ;; Hardware stack levels used:    1
 16572 ;; Hardware stack levels required when called:    4
 16573 ;; This function calls:
 16574 ;;		_ECANReceiveMessage
 16575 ;; This function is called by:
 16576 ;;		_getVSCPFrame
 16577 ;; This function uses a non-reentrant model
 16578 ;;
 16579                           
 16580                           	psect	text74
 16581  0051AA                     __ptext74:
 16582                           	opt stack 0
 16583  0051AA                     _getCANFrame:
 16584                           	opt stack 24
 16585                           
 16586                           ;incstack = 0
 16587                           ;incstack = 0
 16588                           ;getCANFrame@pid stored from wreg
 16589  0051AA  CFE8 F022          	movff	wreg,getCANFrame@pid
 16590                           
 16591                           ; BSR set to: 0
 16592                           ;main.c: 2919: ECAN_RX_MSG_FLAGS flags;
 16593                           ;main.c: 2923: if (vscp_imsg.flags & 0x80) return 0;
 16594  0051AE  AFC1               	btfss	_vscp_imsg& (0+255),7,b
 16595  0051B0  D002               	goto	l8168
 16596  0051B2                     l8164:
 16597  0051B2  0E00               	movlw	0
 16598  0051B4  D00F               	goto	l640
 16599  0051B6                     l8168:
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;main.c: 2925: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16603  0051B6  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16604  0051BA  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16605  0051BE  0E23               	movlw	low getCANFrame@flags
 16606  0051C0  6E17               	movwf	?_ECANReceiveMessage+2,c
 16607  0051C2  5022               	movf	getCANFrame@pid,w,c
 16608  0051C4  EC7A  F018         	call	_ECANReceiveMessage
 16609  0051C8  0900               	iorlw	0
 16610  0051CA  E0F3               	bz	l8164
 16611                           
 16612                           ;main.c: 2927: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16613  0051CC  AC23               	btfss	getCANFrame@flags,6,c
 16614                           
 16615                           ;main.c: 2930: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16616  0051CE  AA23               	btfss	getCANFrame@flags,5,c
 16617  0051D0  D7F0               	goto	l8164
 16618                           
 16619                           ;main.c: 2932: return 1;
 16620  0051D2  0E01               	movlw	1
 16621  0051D4                     l640:
 16622  0051D4  0012               	return	
 16623  0051D6                     __end_of_getCANFrame:
 16624                           	opt stack 0
 16625                           tblptru	equ	0xFF8
 16626                           tblptrh	equ	0xFF7
 16627                           tblptrl	equ	0xFF6
 16628                           tablat	equ	0xFF5
 16629                           prodh	equ	0xFF4
 16630                           prodl	equ	0xFF3
 16631                           intcon	equ	0xFF2
 16632                           postinc0	equ	0xFEE
 16633                           wreg	equ	0xFE8
 16634                           indf1	equ	0xFE7
 16635                           postdec1	equ	0xFE5
 16636                           fsr1h	equ	0xFE2
 16637                           fsr1l	equ	0xFE1
 16638                           indf2	equ	0xFDF
 16639                           postinc2	equ	0xFDE
 16640                           postdec2	equ	0xFDD
 16641                           plusw2	equ	0xFDB
 16642                           fsr2h	equ	0xFDA
 16643                           fsr2l	equ	0xFD9
 16644                           status	equ	0xFD8
 16645                           
 16646 ;; *************** function _ECANReceiveMessage *****************
 16647 ;; Defined at:
 16648 ;;		line 803 in file "../ECAN.c"
 16649 ;; Parameters:    Size  Location     Type
 16650 ;;  id              1    wreg     PTR unsigned long 
 16651 ;;		 -> getVSCPFrame@id(4), 
 16652 ;;  data            1   20[COMRAM] PTR unsigned char 
 16653 ;;		 -> vscp_imsg(14), 
 16654 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16655 ;;		 -> vscp_imsg(14), 
 16656 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 16657 ;;		 -> getCANFrame@flags(1), 
 16658 ;; Auto vars:     Size  Location     Type
 16659 ;;  id              1   25[COMRAM] PTR unsigned long 
 16660 ;;		 -> getVSCPFrame@id(4), 
 16661 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16662 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16663 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16664 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16665 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16666 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16667 ;;  temp            1   28[COMRAM] struct .
 16668 ;;  mode            1   27[COMRAM] unsigned char 
 16669 ;;  i               1   26[COMRAM] unsigned char 
 16670 ;; Return value:  Size  Location     Type
 16671 ;;                  1    wreg      enum E15660
 16672 ;; Registers used:
 16673 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16674 ;; Tracked objects:
 16675 ;;		On entry : F/0
 16676 ;;		On exit  : 0/0
 16677 ;;		Unchanged: 0/0
 16678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16679 ;;      Params:         3       0       0       0       0       0       0
 16680 ;;      Locals:         8       0       0       0       0       0       0
 16681 ;;      Temps:          0       0       0       0       0       0       0
 16682 ;;      Totals:        11       0       0       0       0       0       0
 16683 ;;Total ram usage:       11 bytes
 16684 ;; Hardware stack levels used:    1
 16685 ;; Hardware stack levels required when called:    3
 16686 ;; This function calls:
 16687 ;;		__ECANPointBuffer
 16688 ;;		__RegsToCANID
 16689 ;; This function is called by:
 16690 ;;		_getCANFrame
 16691 ;; This function uses a non-reentrant model
 16692 ;;
 16693                           
 16694                           	psect	text75
 16695  0030F4                     __ptext75:
 16696                           	opt stack 0
 16697  0030F4                     _ECANReceiveMessage:
 16698                           	opt stack 24
 16699                           
 16700                           ;incstack = 0
 16701                           ;incstack = 0
 16702                           ;ECANReceiveMessage@id stored from wreg
 16703  0030F4  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16704                           
 16705                           ; BSR set to: 0
 16706                           ;ECAN.c: 805: BYTE mode;
 16707                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16708                           ;ECAN.c: 809: char i;
 16709                           ;ECAN.c: 810: BYTE_VAL temp;
 16710                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16711  0030F8  6A48               	clrf	__ECANRxFilterHitInfo,c
 16712                           
 16713                           ; BSR set to: 0
 16714                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16715  0030FA  5077               	movf	3959,w,c	;volatile
 16716  0030FC  0BC0               	andlw	192
 16717  0030FE  6E1C               	movwf	ECANReceiveMessage@mode,c
 16718                           
 16719                           ; BSR set to: 0
 16720                           ;ECAN.c: 816: if ( mode == 0x00 )
 16721  003100  661C               	tstfsz	ECANReceiveMessage@mode,c
 16722  003102  D032               	goto	l8300
 16723                           
 16724                           ; BSR set to: 0
 16725                           ;ECAN.c: 822: {
 16726                           ;ECAN.c: 824: if ( RXB0FUL )
 16727  003104  AE60               	btfss	3936,7,c	;volatile
 16728  003106  D012               	goto	l836
 16729                           
 16730                           ; BSR set to: 0
 16731                           ;ECAN.c: 825: {
 16732                           ;ECAN.c: 827: RXB0IF = 0;
 16733  003108  90A4               	bcf	4004,0,c	;volatile
 16734                           
 16735                           ;ECAN.c: 830: if ( RXB0OVFL )
 16736  00310A  AE74               	btfss	3956,7,c	;volatile
 16737  00310C  D006               	goto	l8276
 16738                           
 16739                           ; BSR set to: 0
 16740                           ;ECAN.c: 831: {
 16741                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16742  00310E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16743  003110  6ED9               	movwf	fsr2l,c
 16744  003112  6ADA               	clrf	fsr2h,c
 16745  003114  0E00               	movlw	0
 16746  003116  86DB               	bsf	plusw2,3,c
 16747                           
 16748                           ; BSR set to: 0
 16749                           ;ECAN.c: 833: RXB0OVFL = 0;
 16750  003118  9E74               	bcf	3956,7,c	;volatile
 16751  00311A                     l8276:
 16752                           
 16753                           ; BSR set to: 0
 16754                           ;ECAN.c: 834: }
 16755                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16756  00311A  A060               	btfss	3936,0,c	;volatile
 16757  00311C  D002               	bra	u5635
 16758  00311E  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16759  003120  D001               	bra	u5637
 16760  003122                     u5635:
 16761  003122  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16762  003124                     u5637:
 16763                           
 16764                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16765  003124  0E0F               	movlw	15	;volatile
 16766  003126  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16767  003128  0E60               	movlw	96	;volatile
 16768  00312A  D01A               	goto	L34
 16769  00312C                     l836:
 16770                           
 16771                           ; BSR set to: 0
 16772                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16773  00312C  010F               	movlb	15	; () banked
 16774  00312E  AF50               	btfss	80,7,b	;volatile
 16775  003130  D019               	goto	l8294
 16776                           
 16777                           ; BSR set to: 15
 16778                           ;ECAN.c: 842: {
 16779                           ;ECAN.c: 844: RXB1IF = 0;
 16780  003132  92A4               	bcf	4004,1,c	;volatile
 16781                           
 16782                           ;ECAN.c: 847: if ( RXB1OVFL )
 16783  003134  AC74               	btfss	3956,6,c	;volatile
 16784  003136  D006               	goto	l8286
 16785                           
 16786                           ; BSR set to: 15
 16787                           ;ECAN.c: 848: {
 16788                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16789  003138  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16790  00313A  6ED9               	movwf	fsr2l,c
 16791  00313C  6ADA               	clrf	fsr2h,c
 16792  00313E  0E00               	movlw	0
 16793  003140  86DB               	bsf	plusw2,3,c
 16794                           
 16795                           ; BSR set to: 15
 16796                           ;ECAN.c: 850: RXB1OVFL = 0;
 16797  003142  9C74               	bcf	3956,6,c	;volatile
 16798  003144                     l8286:
 16799                           
 16800                           ; BSR set to: 15
 16801                           ;ECAN.c: 851: }
 16802                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16803  003144  5150               	movf	80,w,b	;volatile
 16804  003146  0B07               	andlw	7
 16805  003148  6E48               	movwf	__ECANRxFilterHitInfo,c
 16806                           
 16807                           ; BSR set to: 15
 16808                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16809  00314A  0E02               	movlw	2
 16810  00314C  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16811  00314E  D005               	goto	l8292
 16812                           
 16813                           ; BSR set to: 15
 16814                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16815  003150  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16816  003152  6ED9               	movwf	fsr2l,c
 16817  003154  6ADA               	clrf	fsr2h,c
 16818  003156  0E00               	movlw	0
 16819  003158  8EDB               	bsf	plusw2,7,c
 16820  00315A                     l8292:
 16821                           
 16822                           ; BSR set to: 15
 16823                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16824  00315A  0E0F               	movlw	15	;volatile
 16825  00315C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16826  00315E  0E50               	movlw	80	;volatile
 16827  003160                     L34:
 16828  003160  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16829                           
 16830                           ;ECAN.c: 860: }
 16831  003162  D065               	goto	l8354
 16832  003164                     l8294:
 16833                           
 16834                           ;ECAN.c: 861: else
 16835                           ;ECAN.c: 862: return FALSE;
 16836  003164  0E00               	movlw	0
 16837  003166  D0C2               	goto	l843
 16838  003168                     l8300:
 16839                           
 16840                           ; BSR set to: 0
 16841                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16842  003168  501C               	movf	ECANReceiveMessage@mode,w,c
 16843  00316A  0A40               	xorlw	64
 16844  00316C  E146               	bnz	l846
 16845                           
 16846                           ; BSR set to: 0
 16847                           ;ECAN.c: 875: {
 16848                           ;ECAN.c: 876: if ( RXB0FUL )
 16849  00316E  AE60               	btfss	3936,7,c	;volatile
 16850  003170  D004               	goto	l847
 16851                           
 16852                           ; BSR set to: 0
 16853                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16854  003172  0E0F               	movlw	15	;volatile
 16855  003174  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16856  003176  0E60               	movlw	96	;volatile
 16857  003178  D03E               	goto	L41
 16858  00317A                     l847:
 16859                           
 16860                           ; BSR set to: 0
 16861                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16862  00317A  010F               	movlb	15	; () banked
 16863  00317C  AF50               	btfss	80,7,b	;volatile
 16864  00317E  D004               	goto	l849
 16865                           
 16866                           ; BSR set to: 15
 16867                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16868  003180  0E0F               	movlw	15	;volatile
 16869  003182  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16870  003184  0E50               	movlw	80	;volatile
 16871  003186  D037               	goto	L41
 16872  003188                     l849:
 16873                           
 16874                           ; BSR set to: 15
 16875                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16876  003188  010D               	movlb	13
 16877  00318A  B5F8               	btfsc	248,2,b	;volatile
 16878  00318C  D007               	goto	l851
 16879  00318E  010E               	movlb	14
 16880  003190  AF20               	btfss	32,7,b	;volatile
 16881  003192  D004               	goto	l851
 16882                           
 16883                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16884  003194  0E0E               	movlw	14	;volatile
 16885  003196  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16886  003198  0E20               	movlw	32	;volatile
 16887  00319A  D02D               	goto	L41
 16888  00319C                     l851:
 16889                           
 16890                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16891  00319C  010D               	movlb	13
 16892  00319E  B7F8               	btfsc	248,3,b	;volatile
 16893  0031A0  D007               	goto	l853
 16894  0031A2  010E               	movlb	14
 16895  0031A4  AF30               	btfss	48,7,b	;volatile
 16896  0031A6  D004               	goto	l853
 16897                           
 16898                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16899  0031A8  0E0E               	movlw	14	;volatile
 16900  0031AA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16901  0031AC  0E30               	movlw	48	;volatile
 16902  0031AE  D023               	goto	L41
 16903  0031B0                     l853:
 16904                           
 16905                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16906  0031B0  010D               	movlb	13
 16907  0031B2  B9F8               	btfsc	248,4,b	;volatile
 16908  0031B4  D007               	goto	l855
 16909  0031B6  010E               	movlb	14
 16910  0031B8  AF40               	btfss	64,7,b	;volatile
 16911  0031BA  D004               	goto	l855
 16912                           
 16913                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16914  0031BC  0E0E               	movlw	14	;volatile
 16915  0031BE  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16916  0031C0  0E40               	movlw	64	;volatile
 16917  0031C2  D019               	goto	L41
 16918  0031C4                     l855:
 16919                           
 16920                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16921  0031C4  010D               	movlb	13
 16922  0031C6  BBF8               	btfsc	248,5,b	;volatile
 16923  0031C8  D005               	goto	l857
 16924  0031CA  010E               	movlb	14
 16925  0031CC  AF50               	btfss	80,7,b	;volatile
 16926  0031CE  D002               	goto	l857
 16927                           
 16928                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16929  0031D0  0E0E               	movlw	14	;volatile
 16930  0031D2  D7D7               	goto	L42
 16931  0031D4                     l857:
 16932                           
 16933                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16934  0031D4  010D               	movlb	13
 16935  0031D6  BDF8               	btfsc	248,6,b	;volatile
 16936  0031D8  D005               	goto	l859
 16937  0031DA  010E               	movlb	14
 16938  0031DC  AF60               	btfss	96,7,b	;volatile
 16939  0031DE  D002               	goto	l859
 16940                           
 16941                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16942  0031E0  0E0E               	movlw	14	;volatile
 16943  0031E2  D7C8               	goto	L43
 16944  0031E4                     l859:
 16945                           
 16946                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16947  0031E4  010D               	movlb	13
 16948  0031E6  BFF8               	btfsc	248,7,b	;volatile
 16949  0031E8  D7BD               	goto	l8294
 16950  0031EA  010E               	movlb	14
 16951  0031EC  AF70               	btfss	112,7,b	;volatile
 16952  0031EE  D7BA               	goto	l8294
 16953                           
 16954                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16955  0031F0  0E0E               	movlw	14	;volatile
 16956  0031F2  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16957  0031F4  0E70               	movlw	112	;volatile
 16958  0031F6                     L41:
 16959  0031F6  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16960  0031F8  D00A               	goto	l8344
 16961  0031FA                     l846:
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;ECAN.c: 910: else
 16965                           ;ECAN.c: 915: {
 16966                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16967  0031FA  AE74               	btfss	3956,7,c	;volatile
 16968  0031FC  D7B3               	goto	l8294
 16969                           
 16970                           ; BSR set to: 0
 16971                           ;ECAN.c: 917: {
 16972                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16973  0031FE  506F               	movf	3951,w,c	;volatile
 16974  003200  0B07               	andlw	7
 16975  003202  EC00  F026         	call	__ECANPointBuffer
 16976  003206  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16977  00320A  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16978  00320E                     l8344:
 16979                           
 16980                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16981  00320E  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16982  003212  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16983  003216  50DF               	movf	indf2,w,c
 16984  003218  0B1F               	andlw	31
 16985  00321A  6E48               	movwf	__ECANRxFilterHitInfo,c
 16986                           
 16987                           ;ECAN.c: 932: RXB1IF = 0;
 16988  00321C  92A4               	bcf	4004,1,c	;volatile
 16989                           
 16990                           ;ECAN.c: 934: if ( RXB1OVFL )
 16991  00321E  AC74               	btfss	3956,6,c	;volatile
 16992  003220  D006               	goto	l8354
 16993                           
 16994                           ;ECAN.c: 935: {
 16995                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16996  003222  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16997  003224  6ED9               	movwf	fsr2l,c
 16998  003226  6ADA               	clrf	fsr2h,c
 16999  003228  0E00               	movlw	0
 17000  00322A  86DB               	bsf	plusw2,3,c
 17001                           
 17002                           ;ECAN.c: 937: RXB1OVFL = 0;
 17003  00322C  9C74               	bcf	3956,6,c	;volatile
 17004  00322E                     l8354:
 17005                           
 17006                           ;ECAN.c: 942: savedPtr = ptr;
 17007  00322E  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 17008  003232  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 17009                           
 17010                           ;ECAN.c: 943: *msgFlags = 0;
 17011  003236  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17012  003238  6ED9               	movwf	fsr2l,c
 17013  00323A  6ADA               	clrf	fsr2h,c
 17014  00323C  6ADF               	clrf	indf2,c
 17015                           
 17016                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17017  00323E  EE20 F005          	lfsr	2,5
 17018  003242  D855               	call	PL76	;call to abstracted procedure
 17019                           
 17020                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17021  003244  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17022  003246  6ED9               	movwf	fsr2l,c
 17023  003248  6ADA               	clrf	fsr2h,c
 17024  00324A  501D               	movf	ECANReceiveMessage@temp,w,c
 17025  00324C  0B0F               	andlw	15
 17026  00324E  6EDF               	movwf	indf2,c
 17027                           
 17028                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17029  003250  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 17030  003252  D005               	goto	l867
 17031                           
 17032                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17033  003254  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17034  003256  6ED9               	movwf	fsr2l,c
 17035  003258  6ADA               	clrf	fsr2h,c
 17036  00325A  0E00               	movlw	0
 17037  00325C  8CDB               	bsf	plusw2,6,c
 17038  00325E                     l867:
 17039                           
 17040                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17041  00325E  EE20 F002          	lfsr	2,2
 17042  003262  D845               	call	PL76	;call to abstracted procedure
 17043                           
 17044                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17045  003264  A61D               	btfss	ECANReceiveMessage@temp,3,c
 17046  003266  D008               	goto	l868
 17047                           
 17048                           ;ECAN.c: 956: {
 17049                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17050  003268  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17051  00326A  6ED9               	movwf	fsr2l,c
 17052  00326C  6ADA               	clrf	fsr2h,c
 17053  00326E  0E00               	movlw	0
 17054  003270  8ADB               	bsf	plusw2,5,c
 17055                           
 17056                           ;ECAN.c: 958: temp.Val = 1;
 17057  003272  0E01               	movlw	1
 17058  003274  6E1D               	movwf	ECANReceiveMessage@temp,c
 17059                           
 17060                           ;ECAN.c: 959: }
 17061  003276  D001               	goto	l8372
 17062  003278                     l868:
 17063                           
 17064                           ;ECAN.c: 960: else
 17065                           ;ECAN.c: 961: temp.Val = 0;
 17066  003278  6A1D               	clrf	ECANReceiveMessage@temp,c
 17067  00327A                     l8372:
 17068                           
 17069                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17070  00327A  281E               	incf	ECANReceiveMessage@ptr,w,c
 17071  00327C  6E0E               	movwf	?__RegsToCANID,c
 17072  00327E  0E00               	movlw	0
 17073  003280  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17074  003282  6E0F               	movwf	?__RegsToCANID+1,c
 17075  003284  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17076  003288  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17077  00328C  EC1E  F01E         	call	__RegsToCANID	;wreg free
 17078                           
 17079                           ;ECAN.c: 966: ptr += 6;
 17080  003290  0E06               	movlw	6
 17081  003292  261E               	addwf	ECANReceiveMessage@ptr,f,c
 17082  003294  0E00               	movlw	0
 17083  003296  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17084                           
 17085                           ;ECAN.c: 967: temp.Val = *dataLen;
 17086  003298  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17087  00329A  6ED9               	movwf	fsr2l,c
 17088  00329C  6ADA               	clrf	fsr2h,c
 17089  00329E  50DF               	movf	indf2,w,c
 17090  0032A0  6E1D               	movwf	ECANReceiveMessage@temp,c
 17091                           
 17092                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17093  0032A2  6A1B               	clrf	ECANReceiveMessage@i,c
 17094  0032A4  D00D               	goto	l8388
 17095  0032A6                     l8380:
 17096                           
 17097                           ;ECAN.c: 969: *data++ = *ptr++;
 17098  0032A6  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17099  0032AA  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17100  0032AE  5015               	movf	ECANReceiveMessage@data,w,c
 17101  0032B0  6EE1               	movwf	fsr1l,c
 17102  0032B2  6AE2               	clrf	fsr1h,c
 17103  0032B4  CFDF FFE7          	movff	indf2,indf1
 17104  0032B8  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 17105  0032BA  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 17106  0032BC  2A15               	incf	ECANReceiveMessage@data,f,c
 17107  0032BE  2A1B               	incf	ECANReceiveMessage@i,f,c
 17108  0032C0                     l8388:
 17109  0032C0  501D               	movf	ECANReceiveMessage@temp,w,c
 17110  0032C2  5C1B               	subwf	ECANReceiveMessage@i,w,c
 17111  0032C4  E3F0               	bnc	l8380
 17112                           
 17113                           ;ECAN.c: 972: if ( IRXIF )
 17114  0032C6  AEA4               	btfss	4004,7,c	;volatile
 17115  0032C8  D006               	goto	l8394
 17116                           
 17117                           ;ECAN.c: 973: {
 17118                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17119  0032CA  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17120  0032CC  6ED9               	movwf	fsr2l,c
 17121  0032CE  6ADA               	clrf	fsr2h,c
 17122  0032D0  0E00               	movlw	0
 17123  0032D2  88DB               	bsf	plusw2,4,c
 17124                           
 17125                           ;ECAN.c: 975: IRXIF = 0;
 17126  0032D4  9EA4               	bcf	4004,7,c	;volatile
 17127  0032D6                     l8394:
 17128                           
 17129                           ;ECAN.c: 976: }
 17130                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17131  0032D6  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17132  0032DA  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17133  0032DE  0E7F               	movlw	127
 17134  0032E0  16DF               	andwf	indf2,f,c
 17135                           
 17136                           ;ECAN.c: 983: if ( mode == 0x80 )
 17137  0032E2  501C               	movf	ECANReceiveMessage@mode,w,c
 17138  0032E4  0A80               	xorlw	128
 17139  0032E6  B4D8               	btfsc	status,2,c
 17140                           
 17141                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17142  0032E8  9E74               	bcf	3956,7,c	;volatile
 17143                           
 17144                           ;ECAN.c: 990: return TRUE;
 17145  0032EA  0E01               	movlw	1
 17146  0032EC                     l843:
 17147  0032EC  0012               	return	
 17148  0032EE                     __end_of_ECANReceiveMessage:
 17149                           	opt stack 0
 17150  0032EE                     PL76:
 17151                           	opt stack 24
 17152  0032EE  501E               	movf	ECANReceiveMessage@ptr,w,c
 17153  0032F0  26D9               	addwf	fsr2l,f,c
 17154  0032F2  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 17155  0032F4  22DA               	addwfc	fsr2h,f,c
 17156  0032F6  50DF               	movf	indf2,w,c
 17157  0032F8  6E1D               	movwf	ECANReceiveMessage@temp,c
 17158  0032FA  0012               	return	
 17159  0032FC                     __end_ofPL76:
 17160                           	opt stack 0
 17161                           tblptru	equ	0xFF8
 17162                           tblptrh	equ	0xFF7
 17163                           tblptrl	equ	0xFF6
 17164                           tablat	equ	0xFF5
 17165                           prodh	equ	0xFF4
 17166                           prodl	equ	0xFF3
 17167                           intcon	equ	0xFF2
 17168                           postinc0	equ	0xFEE
 17169                           wreg	equ	0xFE8
 17170                           indf1	equ	0xFE7
 17171                           postdec1	equ	0xFE5
 17172                           fsr1h	equ	0xFE2
 17173                           fsr1l	equ	0xFE1
 17174                           indf2	equ	0xFDF
 17175                           postinc2	equ	0xFDE
 17176                           postdec2	equ	0xFDD
 17177                           plusw2	equ	0xFDB
 17178                           fsr2h	equ	0xFDA
 17179                           fsr2l	equ	0xFD9
 17180                           status	equ	0xFD8
 17181                           
 17182 ;; *************** function __RegsToCANID *****************
 17183 ;; Defined at:
 17184 ;;		line 1156 in file "../ECAN.c"
 17185 ;; Parameters:    Size  Location     Type
 17186 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17187 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17188 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17189 ;;  val             1   15[COMRAM] PTR unsigned long 
 17190 ;;		 -> getVSCPFrame@id(4), 
 17191 ;;  type            1   16[COMRAM] unsigned char 
 17192 ;; Auto vars:     Size  Location     Type
 17193 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17194 ;;		 -> getVSCPFrame@id(4), 
 17195 ;; Return value:  Size  Location     Type
 17196 ;;		None               void
 17197 ;; Registers used:
 17198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : 0/0
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17204 ;;      Params:         4       0       0       0       0       0       0
 17205 ;;      Locals:         1       0       0       0       0       0       0
 17206 ;;      Temps:          2       0       0       0       0       0       0
 17207 ;;      Totals:         7       0       0       0       0       0       0
 17208 ;;Total ram usage:        7 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; Hardware stack levels required when called:    2
 17211 ;; This function calls:
 17212 ;;		Nothing
 17213 ;; This function is called by:
 17214 ;;		_ECANReceiveMessage
 17215 ;; This function uses a non-reentrant model
 17216 ;;
 17217                           
 17218                           	psect	text76
 17219  003C3C                     __ptext76:
 17220                           	opt stack 0
 17221  003C3C                     __RegsToCANID:
 17222                           	opt stack 24
 17223                           
 17224                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17225                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17226                           
 17227                           ;incstack = 0
 17228                           ;incstack = 0
 17229  003C3C  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17230                           
 17231                           ;ECAN.c: 1161: if ( type == 0 )
 17232  003C40  6611               	tstfsz	__RegsToCANID@type,c
 17233  003C42  D02B               	goto	l8468
 17234                           
 17235                           ;ECAN.c: 1162: {
 17236                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17237  003C44  5014               	movf	__RegsToCANID@Value,w,c
 17238  003C46  6ED9               	movwf	fsr2l,c
 17239  003C48  D86C               	call	PL54	;call to abstracted procedure
 17240  003C4A  3612               	rlcf	??__RegsToCANID,f,c
 17241  003C4C  90D8               	bcf	status,0,c
 17242  003C4E  3612               	rlcf	??__RegsToCANID,f,c
 17243  003C50  90D8               	bcf	status,0,c
 17244  003C52  3412               	rlcf	??__RegsToCANID,w,c
 17245  003C54  6EDF               	movwf	indf2,c
 17246                           
 17247                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17248  003C56  5014               	movf	__RegsToCANID@Value,w,c
 17249  003C58  6ED9               	movwf	fsr2l,c
 17250  003C5A  6ADA               	clrf	fsr2h,c
 17251  003C5C  2AD9               	incf	fsr2l,f,c
 17252  003C5E  6ADA               	clrf	fsr2h,c
 17253  003C60  D873               	call	PL62	;call to abstracted procedure
 17254  003C62                     u5955:
 17255  003C62  90D8               	bcf	status,0,c
 17256  003C64  3212               	rrcf	??__RegsToCANID,f,c
 17257  003C66  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17258  003C68  D7FC               	goto	u5955
 17259  003C6A  5012               	movf	??__RegsToCANID,w,c
 17260                           
 17261                           ;ECAN.c: 1166: ptr++;
 17262                           
 17263                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17264  003C6C  D863               	call	PL56	;call to abstracted procedure
 17265  003C6E  0E05               	movlw	5
 17266  003C70  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17267  003C72                     u5965:
 17268  003C72  90D8               	bcf	status,0,c
 17269  003C74  3212               	rrcf	??__RegsToCANID,f,c
 17270  003C76  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17271  003C78  D7FC               	goto	u5965
 17272  003C7A  5014               	movf	__RegsToCANID@Value,w,c
 17273  003C7C  6ED9               	movwf	fsr2l,c
 17274  003C7E  6ADA               	clrf	fsr2h,c
 17275  003C80  5012               	movf	??__RegsToCANID,w,c
 17276  003C82  12DF               	iorwf	indf2,f,c
 17277                           
 17278                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17279  003C84  D83D               	call	PL26	;call to abstracted procedure
 17280  003C86  6ADF               	clrf	indf2,c
 17281                           
 17282                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17283  003C88  5014               	movf	__RegsToCANID@Value,w,c
 17284  003C8A  6ED9               	movwf	fsr2l,c
 17285  003C8C  6ADA               	clrf	fsr2h,c
 17286  003C8E  0E03               	movlw	3
 17287  003C90  26D9               	addwf	fsr2l,f,c
 17288  003C92  6ADA               	clrf	fsr2h,c
 17289  003C94  0E00               	movlw	0
 17290  003C96  6EDF               	movwf	indf2,c
 17291                           
 17292                           ;ECAN.c: 1170: }
 17293  003C98  D032               	goto	l890
 17294  003C9A                     l8468:
 17295                           
 17296                           ;ECAN.c: 1171: else
 17297                           ;ECAN.c: 1172: {
 17298                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17299  003C9A  D832               	call	PL26	;call to abstracted procedure
 17300  003C9C  D855               	call	PL62	;call to abstracted procedure
 17301  003C9E                     u5975:
 17302  003C9E  90D8               	bcf	status,0,c
 17303  003CA0  3612               	rlcf	??__RegsToCANID,f,c
 17304  003CA2  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17305  003CA4  D7FC               	goto	u5975
 17306  003CA6  5012               	movf	??__RegsToCANID,w,c
 17307  003CA8  6EDF               	movwf	indf2,c
 17308                           
 17309                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17310  003CAA  5014               	movf	__RegsToCANID@Value,w,c
 17311  003CAC  6ED9               	movwf	fsr2l,c
 17312  003CAE  6ADA               	clrf	fsr2h,c
 17313  003CB0  0E03               	movlw	3
 17314  003CB2  26D9               	addwf	fsr2l,f,c
 17315  003CB4  D836               	call	PL54	;call to abstracted procedure
 17316  003CB6  3212               	rrcf	??__RegsToCANID,f,c
 17317  003CB8  90D8               	bcf	status,0,c
 17318  003CBA  3212               	rrcf	??__RegsToCANID,f,c
 17319  003CBC  90D8               	bcf	status,0,c
 17320  003CBE  3012               	rrcf	??__RegsToCANID,w,c
 17321                           
 17322                           ;ECAN.c: 1176: ptr++;
 17323                           
 17324                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17325  003CC0  D839               	call	PL56	;call to abstracted procedure
 17326  003CC2  0E03               	movlw	3
 17327  003CC4  1612               	andwf	??__RegsToCANID,f,c
 17328  003CC6  D81C               	call	PL26	;call to abstracted procedure
 17329  003CC8  5012               	movf	??__RegsToCANID,w,c
 17330  003CCA  12DF               	iorwf	indf2,f,c
 17331                           
 17332                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17333  003CCC  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17334  003CD0  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17335  003CD4  50DF               	movf	indf2,w,c
 17336  003CD6  6E12               	movwf	??__RegsToCANID& (0+255),c
 17337  003CD8  90D8               	bcf	status,0,c
 17338  003CDA  3212               	rrcf	??__RegsToCANID,f,c
 17339  003CDC  90D8               	bcf	status,0,c
 17340  003CDE  3212               	rrcf	??__RegsToCANID,f,c
 17341  003CE0  90D8               	bcf	status,0,c
 17342  003CE2  3212               	rrcf	??__RegsToCANID,f,c
 17343  003CE4  0E1C               	movlw	28
 17344  003CE6  1612               	andwf	??__RegsToCANID,f,c
 17345  003CE8  D80B               	call	PL26	;call to abstracted procedure
 17346  003CEA  5012               	movf	??__RegsToCANID,w,c
 17347  003CEC  12DF               	iorwf	indf2,f,c
 17348                           
 17349                           ;ECAN.c: 1180: ptr++;
 17350                           
 17351                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17352  003CEE  D80F               	call	PL50	;call to abstracted procedure
 17353  003CF0  2AE1               	incf	fsr1l,f,c
 17354  003CF2  6AE2               	clrf	fsr1h,c
 17355  003CF4  CFDF FFE7          	movff	indf2,indf1
 17356                           
 17357                           ;ECAN.c: 1182: ptr++;
 17358                           
 17359                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17360  003CF8  D80A               	call	PL50	;call to abstracted procedure
 17361  003CFA  CFDF FFE7          	movff	indf2,indf1
 17362  003CFE                     l890:
 17363  003CFE  0012               	return	
 17364  003D00                     __end_of__RegsToCANID:
 17365                           	opt stack 0
 17366  003D00                     PL26:
 17367                           	opt stack 24
 17368  003D00  5014               	movf	__RegsToCANID@Value,w,c
 17369  003D02  6ED9               	movwf	fsr2l,c
 17370  003D04  6ADA               	clrf	fsr2h,c
 17371  003D06  0E02               	movlw	2
 17372  003D08  26D9               	addwf	fsr2l,f,c
 17373  003D0A  6ADA               	clrf	fsr2h,c
 17374  003D0C  0012               	return	
 17375  003D0E                     __end_ofPL26:
 17376                           	opt stack 0
 17377  003D0E                     PL50:
 17378                           	opt stack 24
 17379  003D0E  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17380  003D10  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17381  003D12  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17382  003D16  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17383  003D1A  5014               	movf	__RegsToCANID@Value,w,c
 17384  003D1C  6EE1               	movwf	fsr1l,c
 17385  003D1E  6AE2               	clrf	fsr1h,c
 17386  003D20  0012               	return	
 17387  003D22                     __end_ofPL50:
 17388                           	opt stack 0
 17389  003D22                     PL54:
 17390                           	opt stack 24
 17391  003D22  6ADA               	clrf	fsr2h,c
 17392  003D24  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17393  003D28  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17394  003D2C  50E7               	movf	indf1,w,c
 17395  003D2E  6E12               	movwf	??__RegsToCANID& (0+255),c
 17396  003D30  90D8               	bcf	status,0,c
 17397  003D32  0012               	return	
 17398  003D34                     __end_ofPL54:
 17399                           	opt stack 0
 17400  003D34                     PL56:
 17401                           	opt stack 24
 17402  003D34  6EDF               	movwf	indf2,c
 17403  003D36  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17404  003D38  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17405  003D3A  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17406  003D3E  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17407  003D42  50DF               	movf	indf2,w,c
 17408  003D44  6E12               	movwf	??__RegsToCANID& (0+255),c
 17409  003D46  0012               	return	
 17410  003D48                     __end_ofPL56:
 17411                           	opt stack 0
 17412  003D48                     PL62:
 17413                           	opt stack 24
 17414  003D48  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17415  003D4C  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17416  003D50  50E7               	movf	indf1,w,c
 17417  003D52  6E12               	movwf	??__RegsToCANID& (0+255),c
 17418  003D54  0E05               	movlw	5
 17419  003D56  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17420  003D58  0C05               	retlw	5
 17421  003D5A                     __end_ofPL62:
 17422                           	opt stack 0
 17423                           tblptru	equ	0xFF8
 17424                           tblptrh	equ	0xFF7
 17425                           tblptrl	equ	0xFF6
 17426                           tablat	equ	0xFF5
 17427                           prodh	equ	0xFF4
 17428                           prodl	equ	0xFF3
 17429                           intcon	equ	0xFF2
 17430                           postinc0	equ	0xFEE
 17431                           wreg	equ	0xFE8
 17432                           indf1	equ	0xFE7
 17433                           postdec1	equ	0xFE5
 17434                           fsr1h	equ	0xFE2
 17435                           fsr1l	equ	0xFE1
 17436                           indf2	equ	0xFDF
 17437                           postinc2	equ	0xFDE
 17438                           postdec2	equ	0xFDD
 17439                           plusw2	equ	0xFDB
 17440                           fsr2h	equ	0xFDA
 17441                           fsr2l	equ	0xFD9
 17442                           status	equ	0xFD8
 17443                           
 17444 ;; *************** function __ECANPointBuffer *****************
 17445 ;; Defined at:
 17446 ;;		line 1207 in file "../ECAN.c"
 17447 ;; Parameters:    Size  Location     Type
 17448 ;;  b               1    wreg     unsigned char 
 17449 ;; Auto vars:     Size  Location     Type
 17450 ;;  b               1   16[COMRAM] unsigned char 
 17451 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17452 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17453 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17454 ;; Return value:  Size  Location     Type
 17455 ;;                  2   13[COMRAM] PTR unsigned char 
 17456 ;; Registers used:
 17457 ;;		wreg, status,2, status,0
 17458 ;; Tracked objects:
 17459 ;;		On entry : F/0
 17460 ;;		On exit  : 0/0
 17461 ;;		Unchanged: 0/0
 17462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17463 ;;      Params:         3       0       0       0       0       0       0
 17464 ;;      Locals:         3       0       0       0       0       0       0
 17465 ;;      Temps:          0       0       0       0       0       0       0
 17466 ;;      Totals:         6       0       0       0       0       0       0
 17467 ;;Total ram usage:        6 bytes
 17468 ;; Hardware stack levels used:    1
 17469 ;; Hardware stack levels required when called:    2
 17470 ;; This function calls:
 17471 ;;		Nothing
 17472 ;; This function is called by:
 17473 ;;		_ECANReceiveMessage
 17474 ;; This function uses a non-reentrant model
 17475 ;;
 17476                           
 17477                           	psect	text77
 17478  004C00                     __ptext77:
 17479                           	opt stack 0
 17480  004C00                     __ECANPointBuffer:
 17481                           	opt stack 24
 17482                           
 17483                           ;incstack = 0
 17484                           ;incstack = 0
 17485                           ;__ECANPointBuffer@b stored from wreg
 17486  004C00  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17487                           
 17488                           ; BSR set to: 0
 17489                           ;ECAN.c: 1208: BYTE* pt;
 17490                           ;ECAN.c: 1210: switch(b)
 17491  004C04  D024               	goto	l8454
 17492  004C06                     l8436:
 17493                           
 17494                           ; BSR set to: 0
 17495                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17496  004C06  0E0F               	movlw	15	;volatile
 17497  004C08  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17498  004C0A  0E60               	movlw	96	;volatile
 17499  004C0C  D01E               	goto	L50
 17500  004C0E                     l8438:
 17501                           
 17502                           ; BSR set to: 0
 17503                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17504  004C0E  010F               	movlb	15	; () banked
 17505  004C10  0E0F               	movlw	15	;volatile
 17506  004C12  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17507  004C14  0E50               	movlw	80	;volatile
 17508  004C16  D019               	goto	L50
 17509  004C18                     l8440:
 17510                           
 17511                           ; BSR set to: 0
 17512                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17513  004C18  010E               	movlb	14	; () banked
 17514  004C1A  0E0E               	movlw	14	;volatile
 17515  004C1C  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17516  004C1E  0E20               	movlw	32	;volatile
 17517  004C20  D014               	goto	L50
 17518  004C22                     l8442:
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17522  004C22  010E               	movlb	14	; () banked
 17523  004C24  0E0E               	movlw	14	;volatile
 17524  004C26  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17525  004C28  0E30               	movlw	48	;volatile
 17526  004C2A  D00F               	goto	L50
 17527  004C2C                     l8444:
 17528                           
 17529                           ; BSR set to: 0
 17530                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17531  004C2C  010E               	movlb	14	; () banked
 17532  004C2E  0E0E               	movlw	14	;volatile
 17533  004C30  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17534  004C32  0E40               	movlw	64	;volatile
 17535  004C34  D00A               	goto	L50
 17536  004C36                     l8446:
 17537                           
 17538                           ; BSR set to: 0
 17539                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17540  004C36  010E               	movlb	14	; () banked
 17541  004C38  0E0E               	movlw	14	;volatile
 17542  004C3A  D7EB               	goto	L51
 17543  004C3C                     l8448:
 17544                           
 17545                           ; BSR set to: 0
 17546                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17547  004C3C  010E               	movlb	14	; () banked
 17548  004C3E  0E0E               	movlw	14	;volatile
 17549  004C40  D7E3               	goto	L52
 17550  004C42                     l8450:
 17551                           
 17552                           ; BSR set to: 0
 17553                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17554  004C42  010E               	movlb	14	; () banked
 17555  004C44  0E0E               	movlw	14	;volatile
 17556  004C46  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17557  004C48  0E70               	movlw	112	;volatile
 17558  004C4A                     L50:
 17559  004C4A  6E12               	movwf	__ECANPointBuffer@pt,c
 17560                           
 17561                           ;ECAN.c: 1235: break;
 17562  004C4C  D00F               	goto	l895
 17563  004C4E                     l8454:
 17564                           
 17565                           ; BSR set to: 0
 17566  004C4E  5011               	movf	__ECANPointBuffer@b,w,c
 17567                           
 17568                           ; Switch size 1, requested type "space"
 17569                           ; Number of cases is 7, Range of values is 0 to 6
 17570                           ; switch strategies available:
 17571                           ; Name         Instructions Cycles
 17572                           ; simple_byte           22    12 (average)
 17573                           ;	Chosen strategy is simple_byte
 17574  004C50  E0DA               	bz	l8436
 17575  004C52  0A01               	xorlw	1	; case 1
 17576  004C54  E0DC               	bz	l8438
 17577  004C56  0A03               	xorlw	3	; case 2
 17578  004C58  E0DF               	bz	l8440
 17579  004C5A  0A01               	xorlw	1	; case 3
 17580  004C5C  E0E2               	bz	l8442
 17581  004C5E  0A07               	xorlw	7	; case 4
 17582  004C60  E0E5               	bz	l8444
 17583  004C62  0A01               	xorlw	1	; case 5
 17584  004C64  E0E8               	bz	l8446
 17585  004C66  0A03               	xorlw	3	; case 6
 17586  004C68  E0E9               	bz	l8448
 17587  004C6A  D7EB               	goto	l8450
 17588  004C6C                     l895:
 17589                           
 17590                           ;ECAN.c: 1237: return (pt);
 17591  004C6C  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17592  004C70  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17593  004C74  0012               	return	
 17594  004C76                     __end_of__ECANPointBuffer:
 17595                           	opt stack 0
 17596                           tblptru	equ	0xFF8
 17597                           tblptrh	equ	0xFF7
 17598                           tblptrl	equ	0xFF6
 17599                           tablat	equ	0xFF5
 17600                           prodh	equ	0xFF4
 17601                           prodl	equ	0xFF3
 17602                           intcon	equ	0xFF2
 17603                           postinc0	equ	0xFEE
 17604                           wreg	equ	0xFE8
 17605                           indf1	equ	0xFE7
 17606                           postdec1	equ	0xFE5
 17607                           fsr1h	equ	0xFE2
 17608                           fsr1l	equ	0xFE1
 17609                           indf2	equ	0xFDF
 17610                           postinc2	equ	0xFDE
 17611                           postdec2	equ	0xFDD
 17612                           plusw2	equ	0xFDB
 17613                           fsr2h	equ	0xFDA
 17614                           fsr2l	equ	0xFD9
 17615                           status	equ	0xFD8
 17616                           
 17617 ;; *************** function _vscp_check_pstorage *****************
 17618 ;; Defined at:
 17619 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 17620 ;; Parameters:    Size  Location     Type
 17621 ;;		None
 17622 ;; Auto vars:     Size  Location     Type
 17623 ;;		None
 17624 ;; Return value:  Size  Location     Type
 17625 ;;                  1    wreg      unsigned char 
 17626 ;; Registers used:
 17627 ;;		wreg, status,2, status,0, cstack
 17628 ;; Tracked objects:
 17629 ;;		On entry : 1/1
 17630 ;;		On exit  : 0/0
 17631 ;;		Unchanged: 0/0
 17632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17633 ;;      Params:         0       0       0       0       0       0       0
 17634 ;;      Locals:         0       0       0       0       0       0       0
 17635 ;;      Temps:          0       0       0       0       0       0       0
 17636 ;;      Totals:         0       0       0       0       0       0       0
 17637 ;;Total ram usage:        0 bytes
 17638 ;; Hardware stack levels used:    1
 17639 ;; Hardware stack levels required when called:    4
 17640 ;; This function calls:
 17641 ;;		_vscp_writeNicknamePermanent
 17642 ;;		_vscp_getSegmentCRC
 17643 ;;		_vscp_setSegmentCRC
 17644 ;;		_vscp_setControlByte
 17645 ;; This function is called by:
 17646 ;;		_main
 17647 ;; This function uses a non-reentrant model
 17648 ;;
 17649                           
 17650                           	psect	text78
 17651  005338                     __ptext78:
 17652                           	opt stack 0
 17653  005338                     _vscp_check_pstorage:
 17654                           	opt stack 26
 17655                           
 17656                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17657                           
 17658                           ;incstack = 0
 17659                           ;incstack = 0
 17660  005338  ECB2  F02A         	call	_vscp_getSegmentCRC	;wreg free
 17661  00533C  0BC0               	andlw	192
 17662  00533E  0A40               	xorlw	64
 17663  005340  E102               	bnz	l9568
 17664                           
 17665                           ;vscp_firmware.c: 172: return !0;
 17666  005342  0E01               	movlw	1
 17667  005344  D00A               	goto	l1036
 17668  005346                     l9568:
 17669                           
 17670                           ;vscp_firmware.c: 173: }
 17671                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 17672  005346  0EFF               	movlw	255
 17673  005348  EC7E  F02A         	call	_vscp_writeNicknamePermanent
 17674                           
 17675                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 17676  00534C  0E00               	movlw	0
 17677  00534E  EC75  F02A         	call	_vscp_setSegmentCRC
 17678                           
 17679                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 17680  005352  0EA0               	movlw	160
 17681  005354  EC6C  F02A         	call	_vscp_setControlByte
 17682                           
 17683                           ;vscp_firmware.c: 185: return 0;
 17684  005358  0E00               	movlw	0
 17685  00535A                     l1036:
 17686  00535A  0012               	return	
 17687  00535C                     __end_of_vscp_check_pstorage:
 17688                           	opt stack 0
 17689                           tblptru	equ	0xFF8
 17690                           tblptrh	equ	0xFF7
 17691                           tblptrl	equ	0xFF6
 17692                           tablat	equ	0xFF5
 17693                           prodh	equ	0xFF4
 17694                           prodl	equ	0xFF3
 17695                           intcon	equ	0xFF2
 17696                           postinc0	equ	0xFEE
 17697                           wreg	equ	0xFE8
 17698                           indf1	equ	0xFE7
 17699                           postdec1	equ	0xFE5
 17700                           fsr1h	equ	0xFE2
 17701                           fsr1l	equ	0xFE1
 17702                           indf2	equ	0xFDF
 17703                           postinc2	equ	0xFDE
 17704                           postdec2	equ	0xFDD
 17705                           plusw2	equ	0xFDB
 17706                           fsr2h	equ	0xFDA
 17707                           fsr2l	equ	0xFD9
 17708                           status	equ	0xFD8
 17709                           
 17710 ;; *************** function _vscp_setControlByte *****************
 17711 ;; Defined at:
 17712 ;;		line 2797 in file "../main.c"
 17713 ;; Parameters:    Size  Location     Type
 17714 ;;  ctrl            1    wreg     unsigned char 
 17715 ;; Auto vars:     Size  Location     Type
 17716 ;;  ctrl            1   16[COMRAM] unsigned char 
 17717 ;; Return value:  Size  Location     Type
 17718 ;;		None               void
 17719 ;; Registers used:
 17720 ;;		wreg, status,2, cstack
 17721 ;; Tracked objects:
 17722 ;;		On entry : 0/1
 17723 ;;		On exit  : 0/0
 17724 ;;		Unchanged: 0/0
 17725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17726 ;;      Params:         0       0       0       0       0       0       0
 17727 ;;      Locals:         1       0       0       0       0       0       0
 17728 ;;      Temps:          0       0       0       0       0       0       0
 17729 ;;      Totals:         1       0       0       0       0       0       0
 17730 ;;Total ram usage:        1 bytes
 17731 ;; Hardware stack levels used:    1
 17732 ;; Hardware stack levels required when called:    3
 17733 ;; This function calls:
 17734 ;;		_writeEEPROM
 17735 ;; This function is called by:
 17736 ;;		_vscp_check_pstorage
 17737 ;; This function uses a non-reentrant model
 17738 ;;
 17739                           
 17740                           	psect	text79
 17741  0054D8                     __ptext79:
 17742                           	opt stack 0
 17743  0054D8                     _vscp_setControlByte:
 17744                           	opt stack 26
 17745                           
 17746                           ;incstack = 0
 17747                           ;incstack = 0
 17748                           ;vscp_setControlByte@ctrl stored from wreg
 17749  0054D8  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17750                           
 17751                           ;main.c: 2798: writeEEPROM(0x03, ctrl);
 17752  0054DC  6A0F               	clrf	?_writeEEPROM+1,c
 17753  0054DE  0E03               	movlw	3
 17754  0054E0  6E0E               	movwf	?_writeEEPROM,c
 17755  0054E2  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17756  0054E6  EF65  F029         	goto	_writeEEPROM	;wreg free
 17757  0054EA                     __end_of_vscp_setControlByte:
 17758                           	opt stack 0
 17759                           tblptru	equ	0xFF8
 17760                           tblptrh	equ	0xFF7
 17761                           tblptrl	equ	0xFF6
 17762                           tablat	equ	0xFF5
 17763                           prodh	equ	0xFF4
 17764                           prodl	equ	0xFF3
 17765                           intcon	equ	0xFF2
 17766                           postinc0	equ	0xFEE
 17767                           wreg	equ	0xFE8
 17768                           indf1	equ	0xFE7
 17769                           postdec1	equ	0xFE5
 17770                           fsr1h	equ	0xFE2
 17771                           fsr1l	equ	0xFE1
 17772                           indf2	equ	0xFDF
 17773                           postinc2	equ	0xFDE
 17774                           postdec2	equ	0xFDD
 17775                           plusw2	equ	0xFDB
 17776                           fsr2h	equ	0xFDA
 17777                           fsr2l	equ	0xFD9
 17778                           status	equ	0xFD8
 17779                           
 17780 ;; *************** function _vscp_setSegmentCRC *****************
 17781 ;; Defined at:
 17782 ;;		line 2788 in file "../main.c"
 17783 ;; Parameters:    Size  Location     Type
 17784 ;;  crc             1    wreg     unsigned char 
 17785 ;; Auto vars:     Size  Location     Type
 17786 ;;  crc             1   16[COMRAM] unsigned char 
 17787 ;; Return value:  Size  Location     Type
 17788 ;;		None               void
 17789 ;; Registers used:
 17790 ;;		wreg, status,2, cstack
 17791 ;; Tracked objects:
 17792 ;;		On entry : 0/0
 17793 ;;		On exit  : 0/0
 17794 ;;		Unchanged: 0/0
 17795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17796 ;;      Params:         0       0       0       0       0       0       0
 17797 ;;      Locals:         1       0       0       0       0       0       0
 17798 ;;      Temps:          0       0       0       0       0       0       0
 17799 ;;      Totals:         1       0       0       0       0       0       0
 17800 ;;Total ram usage:        1 bytes
 17801 ;; Hardware stack levels used:    1
 17802 ;; Hardware stack levels required when called:    3
 17803 ;; This function calls:
 17804 ;;		_writeEEPROM
 17805 ;; This function is called by:
 17806 ;;		_vscp_check_pstorage
 17807 ;;		_vscp_handleProbeState
 17808 ;;		_vscp_handleHeartbeat
 17809 ;;		_vscp_handleSetNickname
 17810 ;; This function uses a non-reentrant model
 17811 ;;
 17812                           
 17813                           	psect	text80
 17814  0054EA                     __ptext80:
 17815                           	opt stack 0
 17816  0054EA                     _vscp_setSegmentCRC:
 17817                           	opt stack 25
 17818                           
 17819                           ;incstack = 0
 17820                           ;incstack = 0
 17821                           ;vscp_setSegmentCRC@crc stored from wreg
 17822  0054EA  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17823                           
 17824                           ;main.c: 2789: writeEEPROM(0x02, crc);
 17825  0054EE  6A0F               	clrf	?_writeEEPROM+1,c
 17826  0054F0  0E02               	movlw	2
 17827  0054F2  6E0E               	movwf	?_writeEEPROM,c
 17828  0054F4  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17829  0054F8  EF65  F029         	goto	_writeEEPROM	;wreg free
 17830  0054FC                     __end_of_vscp_setSegmentCRC:
 17831                           	opt stack 0
 17832                           tblptru	equ	0xFF8
 17833                           tblptrh	equ	0xFF7
 17834                           tblptrl	equ	0xFF6
 17835                           tablat	equ	0xFF5
 17836                           prodh	equ	0xFF4
 17837                           prodl	equ	0xFF3
 17838                           intcon	equ	0xFF2
 17839                           postinc0	equ	0xFEE
 17840                           wreg	equ	0xFE8
 17841                           indf1	equ	0xFE7
 17842                           postdec1	equ	0xFE5
 17843                           fsr1h	equ	0xFE2
 17844                           fsr1l	equ	0xFE1
 17845                           indf2	equ	0xFDF
 17846                           postinc2	equ	0xFDE
 17847                           postdec2	equ	0xFDD
 17848                           plusw2	equ	0xFDB
 17849                           fsr2h	equ	0xFDA
 17850                           fsr2l	equ	0xFD9
 17851                           status	equ	0xFD8
 17852                           
 17853 ;; *************** function _vscp_getSegmentCRC *****************
 17854 ;; Defined at:
 17855 ;;		line 2779 in file "../main.c"
 17856 ;; Parameters:    Size  Location     Type
 17857 ;;		None
 17858 ;; Auto vars:     Size  Location     Type
 17859 ;;		None
 17860 ;; Return value:  Size  Location     Type
 17861 ;;                  1    wreg      unsigned char 
 17862 ;; Registers used:
 17863 ;;		wreg, status,2, cstack
 17864 ;; Tracked objects:
 17865 ;;		On entry : 0/0
 17866 ;;		On exit  : 0/0
 17867 ;;		Unchanged: 0/0
 17868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17869 ;;      Params:         0       0       0       0       0       0       0
 17870 ;;      Locals:         0       0       0       0       0       0       0
 17871 ;;      Temps:          0       0       0       0       0       0       0
 17872 ;;      Totals:         0       0       0       0       0       0       0
 17873 ;;Total ram usage:        0 bytes
 17874 ;; Hardware stack levels used:    1
 17875 ;; Hardware stack levels required when called:    3
 17876 ;; This function calls:
 17877 ;;		_readEEPROM
 17878 ;; This function is called by:
 17879 ;;		_vscp_check_pstorage
 17880 ;;		_vscp_handleHeartbeat
 17881 ;; This function uses a non-reentrant model
 17882 ;;
 17883                           
 17884                           	psect	text81
 17885  005564                     __ptext81:
 17886                           	opt stack 0
 17887  005564                     _vscp_getSegmentCRC:
 17888                           	opt stack 25
 17889                           
 17890                           ;main.c: 2780: return readEEPROM(0x02);
 17891                           
 17892                           ;incstack = 0
 17893                           ;incstack = 0
 17894  005564  6A0F               	clrf	?_readEEPROM+1,c
 17895  005566  0E02               	movlw	2
 17896  005568  6E0E               	movwf	?_readEEPROM,c
 17897  00556A  EF62  F02A         	goto	_readEEPROM	;wreg free
 17898  00556E                     __end_of_vscp_getSegmentCRC:
 17899                           	opt stack 0
 17900                           tblptru	equ	0xFF8
 17901                           tblptrh	equ	0xFF7
 17902                           tblptrl	equ	0xFF6
 17903                           tablat	equ	0xFF5
 17904                           prodh	equ	0xFF4
 17905                           prodl	equ	0xFF3
 17906                           intcon	equ	0xFF2
 17907                           postinc0	equ	0xFEE
 17908                           wreg	equ	0xFE8
 17909                           indf1	equ	0xFE7
 17910                           postdec1	equ	0xFE5
 17911                           fsr1h	equ	0xFE2
 17912                           fsr1l	equ	0xFE1
 17913                           indf2	equ	0xFDF
 17914                           postinc2	equ	0xFDE
 17915                           postdec2	equ	0xFDD
 17916                           plusw2	equ	0xFDB
 17917                           fsr2h	equ	0xFDA
 17918                           fsr2l	equ	0xFD9
 17919                           status	equ	0xFD8
 17920                           
 17921 ;; *************** function _readEEPROM *****************
 17922 ;; Defined at:
 17923 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 17924 ;; Parameters:    Size  Location     Type
 17925 ;;  address         2   13[COMRAM] unsigned short 
 17926 ;; Auto vars:     Size  Location     Type
 17927 ;;  data            1   16[COMRAM] unsigned char 
 17928 ;; Return value:  Size  Location     Type
 17929 ;;                  1    wreg      unsigned char 
 17930 ;; Registers used:
 17931 ;;		wreg, status,2
 17932 ;; Tracked objects:
 17933 ;;		On entry : 0/0
 17934 ;;		On exit  : 0/0
 17935 ;;		Unchanged: 0/0
 17936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17937 ;;      Params:         2       0       0       0       0       0       0
 17938 ;;      Locals:         2       0       0       0       0       0       0
 17939 ;;      Temps:          0       0       0       0       0       0       0
 17940 ;;      Totals:         4       0       0       0       0       0       0
 17941 ;;Total ram usage:        4 bytes
 17942 ;; Hardware stack levels used:    1
 17943 ;; Hardware stack levels required when called:    2
 17944 ;; This function calls:
 17945 ;;		Nothing
 17946 ;; This function is called by:
 17947 ;;		_doWork
 17948 ;;		_doOneSecondWork
 17949 ;;		_sendTempEvent
 17950 ;;		_getCalibrationValue
 17951 ;;		_writeCoeffs2Ram
 17952 ;;		_handle_sync
 17953 ;;		_vscp_readAppReg
 17954 ;;		_vscp_writeAppReg
 17955 ;;		_vscp_getGUID
 17956 ;;		_vscp_getUserID
 17957 ;;		_vscp_getManufacturerId
 17958 ;;		_vscp_getZone
 17959 ;;		_vscp_getSubzone
 17960 ;;		_vscp_readNicknamePermanent
 17961 ;;		_vscp_getSegmentCRC
 17962 ;; This function uses a non-reentrant model
 17963 ;;
 17964                           
 17965                           	psect	text82
 17966  0054C4                     __ptext82:
 17967                           	opt stack 0
 17968  0054C4                     _readEEPROM:
 17969                           	opt stack 26
 17970                           
 17971                           ;eeprom.c: 95: uint8_t data;
 17972                           ;eeprom.c: 100: EEADR = address & 0xff;
 17973                           
 17974                           ;incstack = 0
 17975                           ;incstack = 0
 17976  0054C4  C00E  FFA9         	movff	readEEPROM@address,4009	;volatile
 17977                           
 17978                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 17979  0054C8  9EA6               	bcf	4006,7,c	;volatile
 17980                           
 17981                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 17982  0054CA  9CA6               	bcf	4006,6,c	;volatile
 17983                           
 17984                           ;eeprom.c: 103: EECON1bits.RD = 1;
 17985  0054CC  80A6               	bsf	4006,0,c	;volatile
 17986  0054CE  F000               	nop		;# 
 17987                           
 17988                           ;eeprom.c: 105: data = EEDATA;
 17989  0054D0  CFA8 F011          	movff	4008,readEEPROM@data	;volatile
 17990                           
 17991                           ;eeprom.c: 107: return data;
 17992  0054D4  5011               	movf	readEEPROM@data,w,c
 17993  0054D6  0012               	return	
 17994  0054D8                     __end_of_readEEPROM:
 17995                           	opt stack 0
 17996                           tblptru	equ	0xFF8
 17997                           tblptrh	equ	0xFF7
 17998                           tblptrl	equ	0xFF6
 17999                           tablat	equ	0xFF5
 18000                           prodh	equ	0xFF4
 18001                           prodl	equ	0xFF3
 18002                           intcon	equ	0xFF2
 18003                           postinc0	equ	0xFEE
 18004                           wreg	equ	0xFE8
 18005                           indf1	equ	0xFE7
 18006                           postdec1	equ	0xFE5
 18007                           fsr1h	equ	0xFE2
 18008                           fsr1l	equ	0xFE1
 18009                           indf2	equ	0xFDF
 18010                           postinc2	equ	0xFDE
 18011                           postdec2	equ	0xFDD
 18012                           plusw2	equ	0xFDB
 18013                           fsr2h	equ	0xFDA
 18014                           fsr2l	equ	0xFD9
 18015                           status	equ	0xFD8
 18016                           
 18017 ;; *************** function _vscp_writeNicknamePermanent *****************
 18018 ;; Defined at:
 18019 ;;		line 2770 in file "../main.c"
 18020 ;; Parameters:    Size  Location     Type
 18021 ;;  nickname        1    wreg     unsigned char 
 18022 ;; Auto vars:     Size  Location     Type
 18023 ;;  nickname        1   16[COMRAM] unsigned char 
 18024 ;; Return value:  Size  Location     Type
 18025 ;;		None               void
 18026 ;; Registers used:
 18027 ;;		wreg, status,2, cstack
 18028 ;; Tracked objects:
 18029 ;;		On entry : 0/0
 18030 ;;		On exit  : 0/0
 18031 ;;		Unchanged: 0/0
 18032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18033 ;;      Params:         0       0       0       0       0       0       0
 18034 ;;      Locals:         1       0       0       0       0       0       0
 18035 ;;      Temps:          0       0       0       0       0       0       0
 18036 ;;      Totals:         1       0       0       0       0       0       0
 18037 ;;Total ram usage:        1 bytes
 18038 ;; Hardware stack levels used:    1
 18039 ;; Hardware stack levels required when called:    3
 18040 ;; This function calls:
 18041 ;;		_writeEEPROM
 18042 ;; This function is called by:
 18043 ;;		_vscp_check_pstorage
 18044 ;;		_vscp_handleProbeState
 18045 ;;		_vscp_handleHeartbeat
 18046 ;;		_vscp_handleSetNickname
 18047 ;;		_vscp_handleDropNickname
 18048 ;; This function uses a non-reentrant model
 18049 ;;
 18050                           
 18051                           	psect	text83
 18052  0054FC                     __ptext83:
 18053                           	opt stack 0
 18054  0054FC                     _vscp_writeNicknamePermanent:
 18055                           	opt stack 25
 18056                           
 18057                           ;incstack = 0
 18058                           ;incstack = 0
 18059                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18060  0054FC  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18061                           
 18062                           ;main.c: 2771: writeEEPROM( 0x01, nickname );
 18063  005500  6A0F               	clrf	?_writeEEPROM+1,c
 18064  005502  0E01               	movlw	1
 18065  005504  6E0E               	movwf	?_writeEEPROM,c
 18066  005506  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 18067  00550A  EF65  F029         	goto	_writeEEPROM	;wreg free
 18068  00550E                     __end_of_vscp_writeNicknamePermanent:
 18069                           	opt stack 0
 18070                           tblptru	equ	0xFF8
 18071                           tblptrh	equ	0xFF7
 18072                           tblptrl	equ	0xFF6
 18073                           tablat	equ	0xFF5
 18074                           prodh	equ	0xFF4
 18075                           prodl	equ	0xFF3
 18076                           intcon	equ	0xFF2
 18077                           postinc0	equ	0xFEE
 18078                           wreg	equ	0xFE8
 18079                           indf1	equ	0xFE7
 18080                           postdec1	equ	0xFE5
 18081                           fsr1h	equ	0xFE2
 18082                           fsr1l	equ	0xFE1
 18083                           indf2	equ	0xFDF
 18084                           postinc2	equ	0xFDE
 18085                           postdec2	equ	0xFDD
 18086                           plusw2	equ	0xFDB
 18087                           fsr2h	equ	0xFDA
 18088                           fsr2l	equ	0xFD9
 18089                           status	equ	0xFD8
 18090                           
 18091 ;; *************** function _writeEEPROM *****************
 18092 ;; Defined at:
 18093 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 18094 ;; Parameters:    Size  Location     Type
 18095 ;;  address         2   13[COMRAM] unsigned short 
 18096 ;;  data            1   15[COMRAM] unsigned char 
 18097 ;; Auto vars:     Size  Location     Type
 18098 ;;		None
 18099 ;; Return value:  Size  Location     Type
 18100 ;;		None               void
 18101 ;; Registers used:
 18102 ;;		wreg, status,2
 18103 ;; Tracked objects:
 18104 ;;		On entry : 0/0
 18105 ;;		On exit  : 0/0
 18106 ;;		Unchanged: 0/0
 18107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18108 ;;      Params:         3       0       0       0       0       0       0
 18109 ;;      Locals:         0       0       0       0       0       0       0
 18110 ;;      Temps:          0       0       0       0       0       0       0
 18111 ;;      Totals:         3       0       0       0       0       0       0
 18112 ;;Total ram usage:        3 bytes
 18113 ;; Hardware stack levels used:    1
 18114 ;; Hardware stack levels required when called:    2
 18115 ;; This function calls:
 18116 ;;		Nothing
 18117 ;; This function is called by:
 18118 ;;		_main
 18119 ;;		_doWork
 18120 ;;		_init_app_eeprom
 18121 ;;		_vscp_writeAppReg
 18122 ;;		_vscp_setGUID
 18123 ;;		_vscp_setUserID
 18124 ;;		_vscp_setManufacturerId
 18125 ;;		_vscp_goBootloaderMode
 18126 ;;		_vscp_writeNicknamePermanent
 18127 ;;		_vscp_setSegmentCRC
 18128 ;;		_vscp_setControlByte
 18129 ;; This function uses a non-reentrant model
 18130 ;;
 18131                           
 18132                           	psect	text84
 18133  0052CA                     __ptext84:
 18134                           	opt stack 0
 18135  0052CA                     _writeEEPROM:
 18136                           	opt stack 27
 18137                           
 18138                           ;eeprom.c: 30: EEADR = address & 0xff;
 18139                           
 18140                           ;incstack = 0
 18141                           ;incstack = 0
 18142  0052CA  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 18143                           
 18144                           ;eeprom.c: 31: EEDATA = data;
 18145  0052CE  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18146                           
 18147                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 18148  0052D2  9EA6               	bcf	4006,7,c	;volatile
 18149                           
 18150                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 18151  0052D4  9CA6               	bcf	4006,6,c	;volatile
 18152                           
 18153                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 18154  0052D6  84A6               	bsf	4006,2,c	;volatile
 18155                           
 18156                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 18157  0052D8  9EF2               	bcf	intcon,7,c	;volatile
 18158                           
 18159                           ;eeprom.c: 38: EECON2 = 0x55;
 18160  0052DA  0E55               	movlw	85
 18161  0052DC  6EA7               	movwf	4007,c	;volatile
 18162                           
 18163                           ;eeprom.c: 39: EECON2 = 0xaa;
 18164  0052DE  0EAA               	movlw	170
 18165  0052E0  6EA7               	movwf	4007,c	;volatile
 18166                           
 18167                           ;eeprom.c: 40: EECON1bits.WR = 1;
 18168  0052E2  82A6               	bsf	4006,1,c	;volatile
 18169                           
 18170                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 18171  0052E4  8EF2               	bsf	intcon,7,c	;volatile
 18172  0052E6                     l918:
 18173  0052E6  A8A1               	btfss	4001,4,c	;volatile
 18174  0052E8  D7FE               	goto	l918
 18175                           
 18176                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 18177  0052EA  98A1               	bcf	4001,4,c	;volatile
 18178                           
 18179                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 18180  0052EC  94A6               	bcf	4006,2,c	;volatile
 18181  0052EE  0012               	return	
 18182  0052F0                     __end_of_writeEEPROM:
 18183                           	opt stack 0
 18184                           tblptru	equ	0xFF8
 18185                           tblptrh	equ	0xFF7
 18186                           tblptrl	equ	0xFF6
 18187                           tablat	equ	0xFF5
 18188                           prodh	equ	0xFF4
 18189                           prodl	equ	0xFF3
 18190                           intcon	equ	0xFF2
 18191                           postinc0	equ	0xFEE
 18192                           wreg	equ	0xFE8
 18193                           indf1	equ	0xFE7
 18194                           postdec1	equ	0xFE5
 18195                           fsr1h	equ	0xFE2
 18196                           fsr1l	equ	0xFE1
 18197                           indf2	equ	0xFDF
 18198                           postinc2	equ	0xFDE
 18199                           postdec2	equ	0xFDD
 18200                           plusw2	equ	0xFDB
 18201                           fsr2h	equ	0xFDA
 18202                           fsr2l	equ	0xFD9
 18203                           status	equ	0xFD8
 18204                           
 18205 ;; *************** function _init *****************
 18206 ;; Defined at:
 18207 ;;		line 888 in file "../main.c"
 18208 ;; Parameters:    Size  Location     Type
 18209 ;;		None
 18210 ;; Auto vars:     Size  Location     Type
 18211 ;;		None
 18212 ;; Return value:  Size  Location     Type
 18213 ;;		None               void
 18214 ;; Registers used:
 18215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18216 ;; Tracked objects:
 18217 ;;		On entry : 0/0
 18218 ;;		On exit  : 1/1
 18219 ;;		Unchanged: 0/0
 18220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18221 ;;      Params:         0       0       0       0       0       0       0
 18222 ;;      Locals:         0       0       0       0       0       0       0
 18223 ;;      Temps:          0       0       0       0       0       0       0
 18224 ;;      Totals:         0       0       0       0       0       0       0
 18225 ;;Total ram usage:        0 bytes
 18226 ;; Hardware stack levels used:    1
 18227 ;; Hardware stack levels required when called:    5
 18228 ;; This function calls:
 18229 ;;		_WriteTimer0
 18230 ;;		_ConvertADC
 18231 ;;		_init_app_ram
 18232 ;;		_OpenTimer0
 18233 ;;		_OpenADC
 18234 ;;		_ECANInitialize
 18235 ;; This function is called by:
 18236 ;;		_main
 18237 ;; This function uses a non-reentrant model
 18238 ;;
 18239                           
 18240                           	psect	text85
 18241  005070                     __ptext85:
 18242                           	opt stack 0
 18243  005070                     _init:
 18244                           	opt stack 25
 18245                           
 18246                           ;main.c: 892: init_app_ram();
 18247                           
 18248                           ;incstack = 0
 18249                           ;incstack = 0
 18250  005070  ECDA  F027         	call	_init_app_ram	;wreg free
 18251                           
 18252                           ; BSR set to: 1
 18253                           ;main.c: 900: TRISA = 0x07;
 18254  005074  0E07               	movlw	7
 18255  005076  6E92               	movwf	3986,c	;volatile
 18256                           
 18257                           ; BSR set to: 1
 18258                           ;main.c: 911: TRISB = 0x1B;
 18259  005078  0E1B               	movlw	27
 18260  00507A  6E93               	movwf	3987,c	;volatile
 18261                           
 18262                           ; BSR set to: 1
 18263                           ;main.c: 921: TRISC = 0x01;
 18264  00507C  0E01               	movlw	1
 18265  00507E  6E94               	movwf	3988,c	;volatile
 18266                           
 18267                           ; BSR set to: 1
 18268                           ;main.c: 922: PORTC = 0x00;
 18269  005080  6A82               	clrf	3970,c	;volatile
 18270                           
 18271                           ; BSR set to: 1
 18272                           ;main.c: 924: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18273  005082  0E92               	movlw	146
 18274  005084  ECDF  F029         	call	_OpenTimer0
 18275                           
 18276                           ; BSR set to: 1
 18277                           ;main.c: 925: WriteTimer0(0xfb1d);
 18278  005088  0EFB               	movlw	251
 18279  00508A  6E0F               	movwf	?_WriteTimer0+1,c
 18280  00508C  0E1D               	movlw	29
 18281  00508E  6E0E               	movwf	?_WriteTimer0,c
 18282  005090  EC87  F02A         	call	_WriteTimer0	;wreg free
 18283                           
 18284                           ; BSR set to: 1
 18285                           ;main.c: 927: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18286                           ;main.c: 928: 0b10000111 & 0b11111111 & 0b11110100 &
 18287                           ;main.c: 929: 0b11111110 & 0b11111101,
 18288                           ;main.c: 930: 15);
 18289  005094  0E84               	movlw	132
 18290  005096  6E0E               	movwf	?_OpenADC,c
 18291  005098  0E0F               	movlw	15
 18292  00509A  6E0F               	movwf	?_OpenADC+1,c
 18293  00509C  0EEF               	movlw	239
 18294  00509E  EC3B  F026         	call	_OpenADC
 18295                           
 18296                           ; BSR set to: 1
 18297                           ;main.c: 933: ECANInitialize();
 18298  0050A2  EC81  F024         	call	_ECANInitialize	;wreg free
 18299                           
 18300                           ;main.c: 957: INTCONbits.GIE = 1;
 18301  0050A6  8EF2               	bsf	intcon,7,c	;volatile
 18302                           
 18303                           ;main.c: 959: ConvertADC();
 18304  0050A8  EFBD  F02A         	goto	_ConvertADC	;wreg free
 18305  0050AC                     __end_of_init:
 18306                           	opt stack 0
 18307                           tblptru	equ	0xFF8
 18308                           tblptrh	equ	0xFF7
 18309                           tblptrl	equ	0xFF6
 18310                           tablat	equ	0xFF5
 18311                           prodh	equ	0xFF4
 18312                           prodl	equ	0xFF3
 18313                           intcon	equ	0xFF2
 18314                           postinc0	equ	0xFEE
 18315                           wreg	equ	0xFE8
 18316                           indf1	equ	0xFE7
 18317                           postdec1	equ	0xFE5
 18318                           fsr1h	equ	0xFE2
 18319                           fsr1l	equ	0xFE1
 18320                           indf2	equ	0xFDF
 18321                           postinc2	equ	0xFDE
 18322                           postdec2	equ	0xFDD
 18323                           plusw2	equ	0xFDB
 18324                           fsr2h	equ	0xFDA
 18325                           fsr2l	equ	0xFD9
 18326                           status	equ	0xFD8
 18327                           
 18328 ;; *************** function _ECANInitialize *****************
 18329 ;; Defined at:
 18330 ;;		line 168 in file "../ECAN.c"
 18331 ;; Parameters:    Size  Location     Type
 18332 ;;		None
 18333 ;; Auto vars:     Size  Location     Type
 18334 ;;		None
 18335 ;; Return value:  Size  Location     Type
 18336 ;;		None               void
 18337 ;; Registers used:
 18338 ;;		wreg, status,2, status,0, cstack
 18339 ;; Tracked objects:
 18340 ;;		On entry : F/1
 18341 ;;		On exit  : 1/1
 18342 ;;		Unchanged: 0/0
 18343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18344 ;;      Params:         0       0       0       0       0       0       0
 18345 ;;      Locals:         0       0       0       0       0       0       0
 18346 ;;      Temps:          0       0       0       0       0       0       0
 18347 ;;      Totals:         0       0       0       0       0       0       0
 18348 ;;Total ram usage:        0 bytes
 18349 ;; Hardware stack levels used:    1
 18350 ;; Hardware stack levels required when called:    3
 18351 ;; This function calls:
 18352 ;;		_ECANSetOperationMode
 18353 ;; This function is called by:
 18354 ;;		_init
 18355 ;; This function uses a non-reentrant model
 18356 ;;
 18357                           
 18358                           	psect	text86
 18359  004902                     __ptext86:
 18360                           	opt stack 0
 18361  004902                     _ECANInitialize:
 18362                           	opt stack 26
 18363                           
 18364                           ; BSR set to: 1
 18365                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18366                           
 18367                           ;incstack = 0
 18368                           ;incstack = 0
 18369  004902  0E80               	movlw	128
 18370  004904  EC38  F02A         	call	_ECANSetOperationMode
 18371                           
 18372                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18373  004908  0E09               	movlw	9
 18374  00490A  6E70               	movwf	3952,c	;volatile
 18375                           
 18376                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18377  00490C  0EFC               	movlw	252
 18378  00490E  6E71               	movwf	3953,c	;volatile
 18379                           
 18380                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18381                           ;ECAN.c: 181: (0 << 6) |
 18382                           ;ECAN.c: 182: (2-1);
 18383  004910  0E01               	movlw	1
 18384  004912  6E72               	movwf	3954,c	;volatile
 18385                           
 18386                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18387  004914  0E20               	movlw	32
 18388  004916  6E73               	movwf	3955,c	;volatile
 18389                           
 18390                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18391  004918  8E77               	bsf	3959,7,c	;volatile
 18392                           
 18393                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18394  00491A  9C77               	bcf	3959,6,c	;volatile
 18395                           
 18396                           ;ECAN.c: 205: RXB0CON = 0;
 18397  00491C  6A60               	clrf	3936,c	;volatile
 18398                           
 18399                           ;ECAN.c: 211: RXB1CON = 0;
 18400  00491E  010F               	movlb	15	; () banked
 18401  004920  6B50               	clrf	80,b	;volatile
 18402                           
 18403                           ; BSR set to: 15
 18404                           ;ECAN.c: 221: B0CON = 0;
 18405  004922  010E               	movlb	14	; () banked
 18406  004924  6B20               	clrf	32,b	;volatile
 18407                           
 18408                           ; BSR set to: 14
 18409                           ;ECAN.c: 231: B1CON = 0;
 18410  004926  6B30               	clrf	48,b	;volatile
 18411                           
 18412                           ; BSR set to: 14
 18413                           ;ECAN.c: 241: B2CON = 0;
 18414  004928  6B40               	clrf	64,b	;volatile
 18415                           
 18416                           ; BSR set to: 14
 18417                           ;ECAN.c: 254: B3CON = 0 << 2;
 18418  00492A  6B50               	clrf	80,b	;volatile
 18419                           
 18420                           ; BSR set to: 14
 18421                           ;ECAN.c: 264: B4CON = 0 << 2;
 18422  00492C  6B60               	clrf	96,b	;volatile
 18423                           
 18424                           ; BSR set to: 14
 18425                           ;ECAN.c: 274: B5CON = 0 << 2;
 18426  00492E  6B70               	clrf	112,b	;volatile
 18427                           
 18428                           ; BSR set to: 14
 18429                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18430  004930  0EE0               	movlw	224
 18431  004932  010D               	movlb	13	; () banked
 18432  004934  6FF8               	movwf	248,b	;volatile
 18433                           
 18434                           ; BSR set to: 13
 18435                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18436  004936  010F               	movlb	15	; () banked
 18437  004938  6B00               	clrf	0,b	;volatile
 18438                           
 18439                           ; BSR set to: 15
 18440  00493A  0E08               	movlw	8
 18441  00493C  6F01               	movwf	1,b	;volatile
 18442                           
 18443                           ; BSR set to: 15
 18444  00493E  6B02               	clrf	2,b	;volatile
 18445                           
 18446                           ; BSR set to: 15
 18447  004940  6B03               	clrf	3,b	;volatile
 18448                           
 18449                           ; BSR set to: 15
 18450                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18451  004942  6B04               	clrf	4,b	;volatile
 18452                           
 18453                           ; BSR set to: 15
 18454  004944  0EE8               	movlw	232
 18455  004946  6F05               	movwf	5,b	;volatile
 18456                           
 18457                           ; BSR set to: 15
 18458  004948  0E1A               	movlw	26
 18459  00494A  6F06               	movwf	6,b	;volatile
 18460                           
 18461                           ; BSR set to: 15
 18462  00494C  6B07               	clrf	7,b	;volatile
 18463                           
 18464                           ; BSR set to: 15
 18465                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18466  00494E  0E03               	movlw	3
 18467  004950  010D               	movlb	13	; () banked
 18468  004952  6FD4               	movwf	212,b	;volatile
 18469                           
 18470                           ; BSR set to: 13
 18471                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18472  004954  6BD5               	clrf	213,b	;volatile
 18473                           
 18474                           ; BSR set to: 13
 18475                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18476  004956  6BE0               	clrf	224,b	;volatile
 18477                           
 18478                           ; BSR set to: 13
 18479                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18480  004958  0E11               	movlw	17
 18481  00495A  6FE1               	movwf	225,b	;volatile
 18482                           
 18483                           ; BSR set to: 13
 18484                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18485  00495C  6FE2               	movwf	226,b	;volatile
 18486                           
 18487                           ; BSR set to: 13
 18488                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18489  00495E  6BE3               	clrf	227,b	;volatile
 18490                           
 18491                           ; BSR set to: 13
 18492                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18493  004960  6BE4               	clrf	228,b	;volatile
 18494                           
 18495                           ; BSR set to: 13
 18496                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18497  004962  6BE5               	clrf	229,b	;volatile
 18498                           
 18499                           ; BSR set to: 13
 18500                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18501  004964  6BE6               	clrf	230,b	;volatile
 18502                           
 18503                           ; BSR set to: 13
 18504                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18505  004966  6BE7               	clrf	231,b	;volatile
 18506                           
 18507                           ; BSR set to: 13
 18508                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18509  004968  0E54               	movlw	84
 18510  00496A  6FF0               	movwf	240,b	;volatile
 18511                           
 18512                           ; BSR set to: 13
 18513                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18514  00496C  0E05               	movlw	5
 18515  00496E  6FF1               	movwf	241,b	;volatile
 18516                           
 18517                           ; BSR set to: 13
 18518                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18519  004970  6BF2               	clrf	242,b	;volatile
 18520                           
 18521                           ; BSR set to: 13
 18522                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18523  004972  6BF2               	clrf	242,b	;volatile
 18524                           
 18525                           ; BSR set to: 13
 18526                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18527  004974  0E0F               	movlw	15
 18528  004976  010F               	movlb	15	; () banked
 18529  004978  6F18               	movwf	24,b	;volatile
 18530                           
 18531                           ; BSR set to: 15
 18532  00497A  0EE0               	movlw	224
 18533  00497C  6F19               	movwf	25,b	;volatile
 18534                           
 18535                           ; BSR set to: 15
 18536  00497E  6B1A               	clrf	26,b	;volatile
 18537                           
 18538                           ; BSR set to: 15
 18539  004980  6B1B               	clrf	27,b	;volatile
 18540                           
 18541                           ; BSR set to: 15
 18542                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18543  004982  8719               	bsf	25,3,b	;volatile
 18544                           
 18545                           ; BSR set to: 15
 18546                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18547  004984  0E0F               	movlw	15
 18548  004986  6F1C               	movwf	28,b	;volatile
 18549                           
 18550                           ; BSR set to: 15
 18551  004988  0EE0               	movlw	224
 18552  00498A  6F1D               	movwf	29,b	;volatile
 18553                           
 18554                           ; BSR set to: 15
 18555  00498C  691E               	setf	30,b	;volatile
 18556                           
 18557                           ; BSR set to: 15
 18558  00498E  6B1F               	clrf	31,b	;volatile
 18559                           
 18560                           ; BSR set to: 15
 18561                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18562  004990  871D               	bsf	29,3,b	;volatile
 18563                           
 18564                           ; BSR set to: 15
 18565                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18566  004992  0E00               	movlw	0
 18567  004994  EF38  F02A         	goto	_ECANSetOperationMode
 18568  004998                     __end_of_ECANInitialize:
 18569                           	opt stack 0
 18570                           tblptru	equ	0xFF8
 18571                           tblptrh	equ	0xFF7
 18572                           tblptrl	equ	0xFF6
 18573                           tablat	equ	0xFF5
 18574                           prodh	equ	0xFF4
 18575                           prodl	equ	0xFF3
 18576                           intcon	equ	0xFF2
 18577                           postinc0	equ	0xFEE
 18578                           wreg	equ	0xFE8
 18579                           indf1	equ	0xFE7
 18580                           postdec1	equ	0xFE5
 18581                           fsr1h	equ	0xFE2
 18582                           fsr1l	equ	0xFE1
 18583                           indf2	equ	0xFDF
 18584                           postinc2	equ	0xFDE
 18585                           postdec2	equ	0xFDD
 18586                           plusw2	equ	0xFDB
 18587                           fsr2h	equ	0xFDA
 18588                           fsr2l	equ	0xFD9
 18589                           status	equ	0xFD8
 18590                           
 18591 ;; *************** function _ECANSetOperationMode *****************
 18592 ;; Defined at:
 18593 ;;		line 1012 in file "../ECAN.c"
 18594 ;; Parameters:    Size  Location     Type
 18595 ;;  mode            1    wreg     enum E16337
 18596 ;; Auto vars:     Size  Location     Type
 18597 ;;  mode            1   13[COMRAM] enum E16337
 18598 ;; Return value:  Size  Location     Type
 18599 ;;		None               void
 18600 ;; Registers used:
 18601 ;;		wreg, status,2, status,0
 18602 ;; Tracked objects:
 18603 ;;		On entry : 1/1
 18604 ;;		On exit  : 1/1
 18605 ;;		Unchanged: 1/0
 18606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18607 ;;      Params:         0       0       0       0       0       0       0
 18608 ;;      Locals:         1       0       0       0       0       0       0
 18609 ;;      Temps:          0       0       0       0       0       0       0
 18610 ;;      Totals:         1       0       0       0       0       0       0
 18611 ;;Total ram usage:        1 bytes
 18612 ;; Hardware stack levels used:    1
 18613 ;; Hardware stack levels required when called:    2
 18614 ;; This function calls:
 18615 ;;		Nothing
 18616 ;; This function is called by:
 18617 ;;		_ECANInitialize
 18618 ;; This function uses a non-reentrant model
 18619 ;;
 18620                           
 18621                           	psect	text87
 18622  005470                     __ptext87:
 18623                           	opt stack 0
 18624  005470                     _ECANSetOperationMode:
 18625                           	opt stack 26
 18626                           
 18627                           ;incstack = 0
 18628                           ;incstack = 0
 18629                           ;ECANSetOperationMode@mode stored from wreg
 18630  005470  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18631                           
 18632                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18633  005474  0E1F               	movlw	31
 18634  005476  166F               	andwf	3951,f,c	;volatile
 18635                           
 18636                           ;ECAN.c: 1014: CANCON |= mode;
 18637  005478  500E               	movf	ECANSetOperationMode@mode,w,c
 18638  00547A  126F               	iorwf	3951,f,c	;volatile
 18639  00547C                     l8406:
 18640  00547C  506F               	movf	3951,w,c	;volatile
 18641  00547E  0BE0               	andlw	224
 18642  005480  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18643  005482  B4D8               	btfsc	status,2,c
 18644  005484  0012               	return	
 18645  005486  D7FA               	goto	l8406
 18646  005488                     __end_of_ECANSetOperationMode:
 18647                           	opt stack 0
 18648                           tblptru	equ	0xFF8
 18649                           tblptrh	equ	0xFF7
 18650                           tblptrl	equ	0xFF6
 18651                           tablat	equ	0xFF5
 18652                           prodh	equ	0xFF4
 18653                           prodl	equ	0xFF3
 18654                           intcon	equ	0xFF2
 18655                           postinc0	equ	0xFEE
 18656                           wreg	equ	0xFE8
 18657                           indf1	equ	0xFE7
 18658                           postdec1	equ	0xFE5
 18659                           fsr1h	equ	0xFE2
 18660                           fsr1l	equ	0xFE1
 18661                           indf2	equ	0xFDF
 18662                           postinc2	equ	0xFDE
 18663                           postdec2	equ	0xFDD
 18664                           plusw2	equ	0xFDB
 18665                           fsr2h	equ	0xFDA
 18666                           fsr2l	equ	0xFD9
 18667                           status	equ	0xFD8
 18668                           
 18669 ;; *************** function _OpenADC *****************
 18670 ;; Defined at:
 18671 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18672 ;; Parameters:    Size  Location     Type
 18673 ;;  config          1    wreg     unsigned char 
 18674 ;;  config2         1   13[COMRAM] unsigned char 
 18675 ;;  portconfig      1   14[COMRAM] unsigned char 
 18676 ;; Auto vars:     Size  Location     Type
 18677 ;;  config          1   17[COMRAM] unsigned char 
 18678 ;; Return value:  Size  Location     Type
 18679 ;;		None               void
 18680 ;; Registers used:
 18681 ;;		wreg, status,2, status,0
 18682 ;; Tracked objects:
 18683 ;;		On entry : F/1
 18684 ;;		On exit  : F/1
 18685 ;;		Unchanged: F/0
 18686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18687 ;;      Params:         2       0       0       0       0       0       0
 18688 ;;      Locals:         1       0       0       0       0       0       0
 18689 ;;      Temps:          2       0       0       0       0       0       0
 18690 ;;      Totals:         5       0       0       0       0       0       0
 18691 ;;Total ram usage:        5 bytes
 18692 ;; Hardware stack levels used:    1
 18693 ;; Hardware stack levels required when called:    2
 18694 ;; This function calls:
 18695 ;;		Nothing
 18696 ;; This function is called by:
 18697 ;;		_init
 18698 ;; This function uses a non-reentrant model
 18699 ;;
 18700                           
 18701                           	psect	text88
 18702  004C76                     __ptext88:
 18703                           	opt stack 0
 18704  004C76                     _OpenADC:
 18705                           	opt stack 27
 18706                           
 18707                           ;incstack = 0
 18708                           ;incstack = 0
 18709                           ;OpenADC@config stored from wreg
 18710  004C76  CFE8 F012          	movff	wreg,OpenADC@config
 18711                           
 18712                           ; BSR set to: 1
 18713  004C7A  6AC2               	clrf	4034,c	;volatile
 18714  004C7C  6AC0               	clrf	4032,c	;volatile
 18715                           
 18716                           ; BSR set to: 1
 18717  004C7E  90D8               	bcf	status,0,c
 18718  004C80  300E               	rrcf	OpenADC@config2,w,c
 18719  004C82  0B3C               	andlw	60
 18720  004C84  6EC2               	movwf	4034,c	;volatile
 18721  004C86  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18722  004C8A  3A10               	swapf	??_OpenADC,f,c
 18723  004C8C  0EF0               	movlw	240
 18724  004C8E  1610               	andwf	??_OpenADC,f,c
 18725  004C90  0E30               	movlw	48
 18726  004C92  1610               	andwf	??_OpenADC,f,c
 18727  004C94  500F               	movf	OpenADC@portconfig,w,c
 18728  004C96  0B0F               	andlw	15
 18729  004C98  1010               	iorwf	??_OpenADC,w,c
 18730  004C9A  6EC1               	movwf	4033,c	;volatile
 18731  004C9C  C012  F010         	movff	OpenADC@config,??_OpenADC
 18732  004CA0  90D8               	bcf	status,0,c
 18733  004CA2  3610               	rlcf	??_OpenADC,f,c
 18734  004CA4  90D8               	bcf	status,0,c
 18735  004CA6  3610               	rlcf	??_OpenADC,f,c
 18736  004CA8  0E38               	movlw	56
 18737  004CAA  1610               	andwf	??_OpenADC,f,c
 18738  004CAC  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18739  004CB0  3A11               	swapf	??_OpenADC+1,f,c
 18740  004CB2  0E0F               	movlw	15
 18741  004CB4  1611               	andwf	??_OpenADC+1,f,c
 18742  004CB6  0E07               	movlw	7
 18743  004CB8  1611               	andwf	??_OpenADC+1,f,c
 18744  004CBA  5012               	movf	OpenADC@config,w,c
 18745  004CBC  0B80               	andlw	128
 18746  004CBE  1011               	iorwf	??_OpenADC+1,w,c
 18747  004CC0  1010               	iorwf	??_OpenADC,w,c
 18748  004CC2  6EC0               	movwf	4032,c	;volatile
 18749                           
 18750                           ; BSR set to: 1
 18751  004CC4  AE0E               	btfss	OpenADC@config2,7,c
 18752  004CC6  D003               	goto	l1303
 18753                           
 18754                           ; BSR set to: 1
 18755  004CC8  9C9E               	bcf	3998,6,c	;volatile
 18756  004CCA  8C9D               	bsf	3997,6,c	;volatile
 18757  004CCC  8CF2               	bsf	intcon,6,c	;volatile
 18758  004CCE                     l1303:
 18759                           
 18760                           ; BSR set to: 1
 18761  004CCE  80C2               	bsf	4034,0,c	;volatile
 18762                           
 18763                           ; BSR set to: 1
 18764  004CD0  0012               	return	
 18765  004CD2                     __end_of_OpenADC:
 18766                           	opt stack 0
 18767                           tblptru	equ	0xFF8
 18768                           tblptrh	equ	0xFF7
 18769                           tblptrl	equ	0xFF6
 18770                           tablat	equ	0xFF5
 18771                           prodh	equ	0xFF4
 18772                           prodl	equ	0xFF3
 18773                           intcon	equ	0xFF2
 18774                           postinc0	equ	0xFEE
 18775                           wreg	equ	0xFE8
 18776                           indf1	equ	0xFE7
 18777                           postdec1	equ	0xFE5
 18778                           fsr1h	equ	0xFE2
 18779                           fsr1l	equ	0xFE1
 18780                           indf2	equ	0xFDF
 18781                           postinc2	equ	0xFDE
 18782                           postdec2	equ	0xFDD
 18783                           plusw2	equ	0xFDB
 18784                           fsr2h	equ	0xFDA
 18785                           fsr2l	equ	0xFD9
 18786                           status	equ	0xFD8
 18787                           
 18788 ;; *************** function _OpenTimer0 *****************
 18789 ;; Defined at:
 18790 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18791 ;; Parameters:    Size  Location     Type
 18792 ;;  config          1    wreg     unsigned char 
 18793 ;; Auto vars:     Size  Location     Type
 18794 ;;  config          1   13[COMRAM] unsigned char 
 18795 ;; Return value:  Size  Location     Type
 18796 ;;		None               void
 18797 ;; Registers used:
 18798 ;;		wreg, status,2, status,0
 18799 ;; Tracked objects:
 18800 ;;		On entry : F/1
 18801 ;;		On exit  : F/1
 18802 ;;		Unchanged: F/0
 18803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18804 ;;      Params:         0       0       0       0       0       0       0
 18805 ;;      Locals:         1       0       0       0       0       0       0
 18806 ;;      Temps:          0       0       0       0       0       0       0
 18807 ;;      Totals:         1       0       0       0       0       0       0
 18808 ;;Total ram usage:        1 bytes
 18809 ;; Hardware stack levels used:    1
 18810 ;; Hardware stack levels required when called:    2
 18811 ;; This function calls:
 18812 ;;		Nothing
 18813 ;; This function is called by:
 18814 ;;		_init
 18815 ;; This function uses a non-reentrant model
 18816 ;;
 18817                           
 18818                           	psect	text89
 18819  0053BE                     __ptext89:
 18820                           	opt stack 0
 18821  0053BE                     _OpenTimer0:
 18822                           	opt stack 27
 18823                           
 18824                           ; BSR set to: 1
 18825                           ;incstack = 0
 18826                           ;incstack = 0
 18827                           ;OpenTimer0@config stored from wreg
 18828  0053BE  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18829                           
 18830                           ; BSR set to: 1
 18831  0053C2  500E               	movf	OpenTimer0@config,w,c
 18832  0053C4  0B7F               	andlw	127
 18833  0053C6  6ED5               	movwf	4053,c	;volatile
 18834                           
 18835                           ; BSR set to: 1
 18836  0053C8  6AD7               	clrf	4055,c	;volatile
 18837                           
 18838                           ; BSR set to: 1
 18839  0053CA  6AD6               	clrf	4054,c	;volatile
 18840                           
 18841                           ; BSR set to: 1
 18842  0053CC  94F2               	bcf	intcon,2,c	;volatile
 18843                           
 18844                           ; BSR set to: 1
 18845  0053CE  AE0E               	btfss	OpenTimer0@config,7,c
 18846  0053D0  D002               	goto	l1317
 18847                           
 18848                           ; BSR set to: 1
 18849  0053D2  8AF2               	bsf	intcon,5,c	;volatile
 18850  0053D4  D001               	goto	l1318
 18851  0053D6                     l1317:
 18852                           
 18853                           ; BSR set to: 1
 18854  0053D6  9AF2               	bcf	intcon,5,c	;volatile
 18855  0053D8                     l1318:
 18856                           
 18857                           ; BSR set to: 1
 18858  0053D8  8ED5               	bsf	4053,7,c	;volatile
 18859                           
 18860                           ; BSR set to: 1
 18861  0053DA  0012               	return	
 18862  0053DC                     __end_of_OpenTimer0:
 18863                           	opt stack 0
 18864                           tblptru	equ	0xFF8
 18865                           tblptrh	equ	0xFF7
 18866                           tblptrl	equ	0xFF6
 18867                           tablat	equ	0xFF5
 18868                           prodh	equ	0xFF4
 18869                           prodl	equ	0xFF3
 18870                           intcon	equ	0xFF2
 18871                           postinc0	equ	0xFEE
 18872                           wreg	equ	0xFE8
 18873                           indf1	equ	0xFE7
 18874                           postdec1	equ	0xFE5
 18875                           fsr1h	equ	0xFE2
 18876                           fsr1l	equ	0xFE1
 18877                           indf2	equ	0xFDF
 18878                           postinc2	equ	0xFDE
 18879                           postdec2	equ	0xFDD
 18880                           plusw2	equ	0xFDB
 18881                           fsr2h	equ	0xFDA
 18882                           fsr2l	equ	0xFD9
 18883                           status	equ	0xFD8
 18884                           
 18885 ;; *************** function _init_app_ram *****************
 18886 ;; Defined at:
 18887 ;;		line 987 in file "../main.c"
 18888 ;; Parameters:    Size  Location     Type
 18889 ;;		None
 18890 ;; Auto vars:     Size  Location     Type
 18891 ;;  i               1   32[COMRAM] unsigned char 
 18892 ;; Return value:  Size  Location     Type
 18893 ;;		None               void
 18894 ;; Registers used:
 18895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18896 ;; Tracked objects:
 18897 ;;		On entry : 0/0
 18898 ;;		On exit  : F/1
 18899 ;;		Unchanged: 0/0
 18900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18901 ;;      Params:         0       0       0       0       0       0       0
 18902 ;;      Locals:         1       0       0       0       0       0       0
 18903 ;;      Temps:          0       0       0       0       0       0       0
 18904 ;;      Totals:         1       0       0       0       0       0       0
 18905 ;;Total ram usage:        1 bytes
 18906 ;; Hardware stack levels used:    1
 18907 ;; Hardware stack levels required when called:    4
 18908 ;; This function calls:
 18909 ;;		_writeCoeffs2Ram
 18910 ;; This function is called by:
 18911 ;;		_init
 18912 ;;		_vscp_restoreDefaults
 18913 ;; This function uses a non-reentrant model
 18914 ;;
 18915                           
 18916                           	psect	text90
 18917  004FB4                     __ptext90:
 18918                           	opt stack 0
 18919  004FB4                     _init_app_ram:
 18920                           	opt stack 23
 18921                           
 18922                           ;main.c: 988: char i;
 18923                           ;main.c: 990: measurement_clock = 0;
 18924                           
 18925                           ; BSR set to: 1
 18926                           ;incstack = 0
 18927                           ;incstack = 0
 18928  004FB4  0100               	movlb	0	; () banked
 18929  004FB6  6BAC               	clrf	_measurement_clock& (0+255),b	;volatile
 18930  004FB8  6BAD               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 18931  004FBA  6BAE               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 18932  004FBC  6BAF               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 18933                           
 18934                           ;main.c: 991: seconds = 0;
 18935  004FBE  6BBB               	clrf	_seconds& (0+255),b
 18936                           
 18937                           ;main.c: 994: for (i = 0; i < 6; i++) {
 18938  004FC0  6A21               	clrf	init_app_ram@i,c
 18939  004FC2                     l10528:
 18940                           
 18941                           ; BSR set to: 0
 18942                           ;main.c: 995: seconds_temp[i] = 0;
 18943  004FC2  0E00               	movlw	low _seconds_temp
 18944  004FC4  2421               	addwf	init_app_ram@i,w,c
 18945  004FC6  6ED9               	movwf	fsr2l,c
 18946  004FC8  6ADA               	clrf	fsr2h,c
 18947  004FCA  0E01               	movlw	high _seconds_temp
 18948  004FCC  22DA               	addwfc	fsr2h,f,c
 18949  004FCE  6ADF               	clrf	indf2,c
 18950                           
 18951                           ; BSR set to: 1
 18952                           ;main.c: 996: current_temp[i] = 0;
 18953  004FD0  5021               	movf	init_app_ram@i,w,c
 18954  004FD2  0D02               	mullw	2
 18955  004FD4  50F3               	movf	prodl,w,c
 18956  004FD6  0100               	movlb	0	; () banked
 18957  004FD8  0FA0               	addlw	low _current_temp
 18958  004FDA  6ED9               	movwf	fsr2l,c
 18959  004FDC  6ADA               	clrf	fsr2h,c
 18960  004FDE  6ADE               	clrf	postinc2,c
 18961  004FE0  6ADD               	clrf	postdec2,c
 18962                           
 18963                           ; BSR set to: 0
 18964  004FE2  2A21               	incf	init_app_ram@i,f,c
 18965                           
 18966                           ; BSR set to: 0
 18967  004FE4  0E05               	movlw	5
 18968  004FE6  6421               	cpfsgt	init_app_ram@i,c
 18969  004FE8  D7EC               	goto	l10528
 18970                           
 18971                           ; BSR set to: 0
 18972                           ;main.c: 997: }
 18973                           ;main.c: 1000: adc_conversion_flags = 0;
 18974  004FEA  6BB8               	clrf	_adc_conversion_flags& (0+255),b
 18975                           
 18976                           ;main.c: 1003: adc_series_counter = 0;
 18977  004FEC  6A49               	clrf	_adc_series_counter,c
 18978                           
 18979                           ;main.c: 1006: low_alarm = 0;
 18980  004FEE  6BBA               	clrf	_low_alarm& (0+255),b
 18981                           
 18982                           ;main.c: 1009: high_alarm = 0;
 18983  004FF0  6BB9               	clrf	_high_alarm& (0+255),b
 18984                           
 18985                           ; BSR set to: 0
 18986                           ;main.c: 1012: writeCoeffs2Ram();
 18987  004FF2  EFE3  F023         	goto	_writeCoeffs2Ram	;wreg free
 18988  004FF6                     __end_of_init_app_ram:
 18989                           	opt stack 0
 18990                           tblptru	equ	0xFF8
 18991                           tblptrh	equ	0xFF7
 18992                           tblptrl	equ	0xFF6
 18993                           tablat	equ	0xFF5
 18994                           prodh	equ	0xFF4
 18995                           prodl	equ	0xFF3
 18996                           intcon	equ	0xFF2
 18997                           postinc0	equ	0xFEE
 18998                           wreg	equ	0xFE8
 18999                           indf1	equ	0xFE7
 19000                           postdec1	equ	0xFE5
 19001                           fsr1h	equ	0xFE2
 19002                           fsr1l	equ	0xFE1
 19003                           indf2	equ	0xFDF
 19004                           postinc2	equ	0xFDE
 19005                           postdec2	equ	0xFDD
 19006                           plusw2	equ	0xFDB
 19007                           fsr2h	equ	0xFDA
 19008                           fsr2l	equ	0xFD9
 19009                           status	equ	0xFD8
 19010                           
 19011 ;; *************** function _writeCoeffs2Ram *****************
 19012 ;; Defined at:
 19013 ;;		line 969 in file "../main.c"
 19014 ;; Parameters:    Size  Location     Type
 19015 ;;		None
 19016 ;; Auto vars:     Size  Location     Type
 19017 ;;  c               3   25[COMRAM] unsigned char [3]
 19018 ;;  j               2   30[COMRAM] int 
 19019 ;;  i               2   28[COMRAM] int 
 19020 ;; Return value:  Size  Location     Type
 19021 ;;		None               void
 19022 ;; Registers used:
 19023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19024 ;; Tracked objects:
 19025 ;;		On entry : 0/0
 19026 ;;		On exit  : F/1
 19027 ;;		Unchanged: 0/0
 19028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19029 ;;      Params:         0       0       0       0       0       0       0
 19030 ;;      Locals:         7       0       0       0       0       0       0
 19031 ;;      Temps:          2       0       0       0       0       0       0
 19032 ;;      Totals:         9       0       0       0       0       0       0
 19033 ;;Total ram usage:        9 bytes
 19034 ;; Hardware stack levels used:    1
 19035 ;; Hardware stack levels required when called:    3
 19036 ;; This function calls:
 19037 ;;		_readEEPROM
 19038 ;;		___wmul
 19039 ;; This function is called by:
 19040 ;;		_init_app_ram
 19041 ;;		_vscp_writeAppReg
 19042 ;; This function uses a non-reentrant model
 19043 ;;
 19044                           
 19045                           	psect	text91
 19046  0047C6                     __ptext91:
 19047                           	opt stack 0
 19048  0047C6                     _writeCoeffs2Ram:
 19049                           	opt stack 23
 19050                           
 19051                           ;main.c: 970: int i, j;
 19052                           ;main.c: 971: uint8_t c[3];
 19053                           ;main.c: 973: for (i = 0; i < 6; i++) {
 19054                           
 19055                           ; BSR set to: 1
 19056                           ;incstack = 0
 19057                           ;incstack = 0
 19058  0047C6  6A1D               	clrf	writeCoeffs2Ram@i,c
 19059  0047C8  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 19060  0047CA                     l10544:
 19061                           
 19062                           ;main.c: 974: for (j = 2; j > 0; j--) {
 19063  0047CA  6A20               	clrf	writeCoeffs2Ram@j+1,c
 19064  0047CC  0E02               	movlw	2
 19065  0047CE  6E1F               	movwf	writeCoeffs2Ram@j,c
 19066  0047D0                     l10550:
 19067                           
 19068                           ;main.c: 976: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 19069  0047D0  501F               	movf	writeCoeffs2Ram@j,w,c
 19070  0047D2  0802               	sublw	2
 19071  0047D4  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 19072  0047D6  5018               	movf	??_writeCoeffs2Ram,w,c
 19073  0047D8  0F1A               	addlw	low writeCoeffs2Ram@c
 19074  0047DA  6ED9               	movwf	fsr2l,c
 19075  0047DC  6ADA               	clrf	fsr2h,c
 19076  0047DE  C01D  F012         	movff	writeCoeffs2Ram@i,?___wmul
 19077  0047E2  C01E  F013         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 19078  0047E6  6A15               	clrf	?___wmul+3,c
 19079  0047E8  0E03               	movlw	3
 19080  0047EA  6E14               	movwf	?___wmul+2,c
 19081  0047EC  EC8E  F028         	call	___wmul	;wreg free
 19082  0047F0  501F               	movf	writeCoeffs2Ram@j,w,c
 19083  0047F2  2612               	addwf	?___wmul,f,c
 19084  0047F4  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19085  0047F6  2213               	addwfc	?___wmul+1,f,c
 19086  0047F8  0EAA               	movlw	170
 19087  0047FA  2412               	addwf	?___wmul,w,c
 19088  0047FC  6E0E               	movwf	?_readEEPROM,c
 19089  0047FE  0E00               	movlw	0
 19090  004800  2013               	addwfc	?___wmul+1,w,c
 19091  004802  6E0F               	movwf	?_readEEPROM+1,c
 19092  004804  EC62  F02A         	call	_readEEPROM	;wreg free
 19093  004808  6EDF               	movwf	indf2,c
 19094  00480A  061F               	decf	writeCoeffs2Ram@j,f,c
 19095  00480C  A0D8               	btfss	status,0,c
 19096  00480E  0620               	decf	writeCoeffs2Ram@j+1,f,c
 19097  004810  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19098  004812  0A80               	xorlw	128
 19099  004814  0F80               	addlw	-128
 19100  004816  0E01               	movlw	1
 19101  004818  B4D8               	btfsc	status,2,c
 19102  00481A  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 19103  00481C  E2D9               	bc	l10550
 19104                           
 19105                           ;main.c: 977: }
 19106                           ;main.c: 978: sh_coefficients[i] = *((double*) c);
 19107  00481E  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 19108  004822  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 19109  004826  90D8               	bcf	status,0,c
 19110  004828  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19111  00482A  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19112  00482C  90D8               	bcf	status,0,c
 19113  00482E  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19114  004830  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19115  004832  0101               	movlb	1	; () banked
 19116  004834  0E06               	movlw	low _sh_coefficients
 19117  004836  2418               	addwf	??_writeCoeffs2Ram,w,c
 19118  004838  6ED9               	movwf	fsr2l,c
 19119  00483A  0E01               	movlw	high _sh_coefficients
 19120  00483C  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 19121  00483E  6EDA               	movwf	fsr2h,c
 19122  004840  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 19123  004844  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 19124  004848  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 19125  00484C  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 19126                           
 19127                           ; BSR set to: 1
 19128  004850  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 19129  004852  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 19130                           
 19131                           ; BSR set to: 1
 19132  004854  501E               	movf	writeCoeffs2Ram@i+1,w,c
 19133  004856  0A80               	xorlw	128
 19134  004858  0F80               	addlw	-128
 19135  00485A  0E06               	movlw	6
 19136  00485C  B4D8               	btfsc	status,2,c
 19137  00485E  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 19138  004860  B0D8               	btfsc	status,0,c
 19139                           
 19140                           ; BSR set to: 1
 19141  004862  0012               	return	
 19142  004864  D7B2               	goto	l10544
 19143  004866                     __end_of_writeCoeffs2Ram:
 19144                           	opt stack 0
 19145                           tblptru	equ	0xFF8
 19146                           tblptrh	equ	0xFF7
 19147                           tblptrl	equ	0xFF6
 19148                           tablat	equ	0xFF5
 19149                           prodh	equ	0xFF4
 19150                           prodl	equ	0xFF3
 19151                           intcon	equ	0xFF2
 19152                           postinc0	equ	0xFEE
 19153                           wreg	equ	0xFE8
 19154                           indf1	equ	0xFE7
 19155                           postdec1	equ	0xFE5
 19156                           fsr1h	equ	0xFE2
 19157                           fsr1l	equ	0xFE1
 19158                           indf2	equ	0xFDF
 19159                           postinc2	equ	0xFDE
 19160                           postdec2	equ	0xFDD
 19161                           plusw2	equ	0xFDB
 19162                           fsr2h	equ	0xFDA
 19163                           fsr2l	equ	0xFD9
 19164                           status	equ	0xFD8
 19165                           
 19166 ;; *************** function ___wmul *****************
 19167 ;; Defined at:
 19168 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 19169 ;; Parameters:    Size  Location     Type
 19170 ;;  multiplier      2   17[COMRAM] unsigned int 
 19171 ;;  multiplicand    2   19[COMRAM] unsigned int 
 19172 ;; Auto vars:     Size  Location     Type
 19173 ;;  product         2   21[COMRAM] unsigned int 
 19174 ;; Return value:  Size  Location     Type
 19175 ;;                  2   17[COMRAM] unsigned int 
 19176 ;; Registers used:
 19177 ;;		wreg, status,2, status,0, prodl, prodh
 19178 ;; Tracked objects:
 19179 ;;		On entry : 0/1
 19180 ;;		On exit  : 0/0
 19181 ;;		Unchanged: 0/0
 19182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19183 ;;      Params:         4       0       0       0       0       0       0
 19184 ;;      Locals:         2       0       0       0       0       0       0
 19185 ;;      Temps:          0       0       0       0       0       0       0
 19186 ;;      Totals:         6       0       0       0       0       0       0
 19187 ;;Total ram usage:        6 bytes
 19188 ;; Hardware stack levels used:    1
 19189 ;; Hardware stack levels required when called:    2
 19190 ;; This function calls:
 19191 ;;		Nothing
 19192 ;; This function is called by:
 19193 ;;		_doWork
 19194 ;;		_writeCoeffs2Ram
 19195 ;; This function uses a non-reentrant model
 19196 ;;
 19197                           
 19198                           	psect	text92
 19199  00511C                     __ptext92:
 19200                           	opt stack 0
 19201  00511C                     ___wmul:
 19202                           	opt stack 27
 19203                           
 19204                           ; BSR set to: 1
 19205                           ;incstack = 0
 19206                           ;incstack = 0
 19207  00511C  5012               	movf	___wmul@multiplier,w,c
 19208  00511E  0214               	mulwf	___wmul@multiplicand,c
 19209  005120  CFF3 F016          	movff	prodl,___wmul@product
 19210  005124  CFF4 F017          	movff	prodh,___wmul@product+1
 19211  005128  5012               	movf	___wmul@multiplier,w,c
 19212  00512A  0215               	mulwf	___wmul@multiplicand+1,c
 19213  00512C  D808               	call	PL68	;call to abstracted procedure
 19214  00512E  5013               	movf	___wmul@multiplier+1,w,c
 19215  005130  0214               	mulwf	___wmul@multiplicand,c
 19216  005132  D805               	call	PL68	;call to abstracted procedure
 19217  005134  C016  F012         	movff	___wmul@product,?___wmul
 19218  005138  C017  F013         	movff	___wmul@product+1,?___wmul+1
 19219  00513C  0012               	return	
 19220  00513E                     __end_of___wmul:
 19221                           	opt stack 0
 19222  00513E                     PL68:
 19223                           	opt stack 27
 19224  00513E  CFF3 FFF4          	movff	prodl,prodh
 19225  005142  6AF3               	clrf	prodl,c
 19226  005144  50F3               	movf	prodl,w,c
 19227  005146  2616               	addwf	___wmul@product,f,c
 19228  005148  50F4               	movf	prodh,w,c
 19229  00514A  2217               	addwfc	___wmul@product+1,f,c
 19230  00514C  0012               	return	
 19231  00514E                     __end_ofPL68:
 19232                           	opt stack 0
 19233                           tblptru	equ	0xFF8
 19234                           tblptrh	equ	0xFF7
 19235                           tblptrl	equ	0xFF6
 19236                           tablat	equ	0xFF5
 19237                           prodh	equ	0xFF4
 19238                           prodl	equ	0xFF3
 19239                           intcon	equ	0xFF2
 19240                           postinc0	equ	0xFEE
 19241                           wreg	equ	0xFE8
 19242                           indf1	equ	0xFE7
 19243                           postdec1	equ	0xFE5
 19244                           fsr1h	equ	0xFE2
 19245                           fsr1l	equ	0xFE1
 19246                           indf2	equ	0xFDF
 19247                           postinc2	equ	0xFDE
 19248                           postdec2	equ	0xFDD
 19249                           plusw2	equ	0xFDB
 19250                           fsr2h	equ	0xFDA
 19251                           fsr2l	equ	0xFD9
 19252                           status	equ	0xFD8
 19253                           
 19254 ;; *************** function _ConvertADC *****************
 19255 ;; Defined at:
 19256 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19257 ;; Parameters:    Size  Location     Type
 19258 ;;		None
 19259 ;; Auto vars:     Size  Location     Type
 19260 ;;		None
 19261 ;; Return value:  Size  Location     Type
 19262 ;;		None               void
 19263 ;; Registers used:
 19264 ;;		None
 19265 ;; Tracked objects:
 19266 ;;		On entry : 1/1
 19267 ;;		On exit  : 1/1
 19268 ;;		Unchanged: 1/0
 19269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19270 ;;      Params:         0       0       0       0       0       0       0
 19271 ;;      Locals:         0       0       0       0       0       0       0
 19272 ;;      Temps:          0       0       0       0       0       0       0
 19273 ;;      Totals:         0       0       0       0       0       0       0
 19274 ;;Total ram usage:        0 bytes
 19275 ;; Hardware stack levels used:    1
 19276 ;; Hardware stack levels required when called:    2
 19277 ;; This function calls:
 19278 ;;		Nothing
 19279 ;; This function is called by:
 19280 ;;		_init
 19281 ;; This function uses a non-reentrant model
 19282 ;;
 19283                           
 19284                           	psect	text93
 19285  00557A                     __ptext93:
 19286                           	opt stack 0
 19287  00557A                     _ConvertADC:
 19288                           	opt stack 27
 19289                           
 19290                           ;incstack = 0
 19291                           ;incstack = 0
 19292  00557A  82C2               	bsf	4034,1,c	;volatile
 19293  00557C  0012               	return	
 19294  00557E                     __end_of_ConvertADC:
 19295                           	opt stack 0
 19296                           tblptru	equ	0xFF8
 19297                           tblptrh	equ	0xFF7
 19298                           tblptrl	equ	0xFF6
 19299                           tablat	equ	0xFF5
 19300                           prodh	equ	0xFF4
 19301                           prodl	equ	0xFF3
 19302                           intcon	equ	0xFF2
 19303                           postinc0	equ	0xFEE
 19304                           wreg	equ	0xFE8
 19305                           indf1	equ	0xFE7
 19306                           postdec1	equ	0xFE5
 19307                           fsr1h	equ	0xFE2
 19308                           fsr1l	equ	0xFE1
 19309                           indf2	equ	0xFDF
 19310                           postinc2	equ	0xFDE
 19311                           postdec2	equ	0xFDD
 19312                           plusw2	equ	0xFDB
 19313                           fsr2h	equ	0xFDA
 19314                           fsr2l	equ	0xFD9
 19315                           status	equ	0xFD8
 19316                           
 19317 ;; *************** function _WriteTimer0 *****************
 19318 ;; Defined at:
 19319 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19320 ;; Parameters:    Size  Location     Type
 19321 ;;  timer0          2   13[COMRAM] unsigned int 
 19322 ;; Auto vars:     Size  Location     Type
 19323 ;;  timer           2   15[COMRAM] struct Timers
 19324 ;; Return value:  Size  Location     Type
 19325 ;;		None               void
 19326 ;; Registers used:
 19327 ;;		None
 19328 ;; Tracked objects:
 19329 ;;		On entry : F/1
 19330 ;;		On exit  : F/1
 19331 ;;		Unchanged: F/0
 19332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19333 ;;      Params:         2       0       0       0       0       0       0
 19334 ;;      Locals:         2       0       0       0       0       0       0
 19335 ;;      Temps:          0       0       0       0       0       0       0
 19336 ;;      Totals:         4       0       0       0       0       0       0
 19337 ;;Total ram usage:        4 bytes
 19338 ;; Hardware stack levels used:    1
 19339 ;; Hardware stack levels required when called:    2
 19340 ;; This function calls:
 19341 ;;		Nothing
 19342 ;; This function is called by:
 19343 ;;		_init
 19344 ;; This function uses a non-reentrant model
 19345 ;;
 19346                           
 19347                           	psect	text94
 19348  00550E                     __ptext94:
 19349                           	opt stack 0
 19350  00550E                     _WriteTimer0:
 19351                           	opt stack 27
 19352                           
 19353                           ; BSR set to: 1
 19354                           
 19355                           ;incstack = 0
 19356                           ;incstack = 0
 19357  00550E  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19358  005512  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19359  005516  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19360  00551A  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19361                           
 19362                           ; BSR set to: 1
 19363  00551E  0012               	return	
 19364  005520                     __end_of_WriteTimer0:
 19365                           	opt stack 0
 19366                           tblptru	equ	0xFF8
 19367                           tblptrh	equ	0xFF7
 19368                           tblptrl	equ	0xFF6
 19369                           tablat	equ	0xFF5
 19370                           prodh	equ	0xFF4
 19371                           prodl	equ	0xFF3
 19372                           intcon	equ	0xFF2
 19373                           postinc0	equ	0xFEE
 19374                           wreg	equ	0xFE8
 19375                           indf1	equ	0xFE7
 19376                           postdec1	equ	0xFE5
 19377                           fsr1h	equ	0xFE2
 19378                           fsr1l	equ	0xFE1
 19379                           indf2	equ	0xFDF
 19380                           postinc2	equ	0xFDE
 19381                           postdec2	equ	0xFDD
 19382                           plusw2	equ	0xFDB
 19383                           fsr2h	equ	0xFDA
 19384                           fsr2l	equ	0xFD9
 19385                           status	equ	0xFD8
 19386                           
 19387 ;; *************** function ___awtofl *****************
 19388 ;; Defined at:
 19389 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19390 ;; Parameters:    Size  Location     Type
 19391 ;;  c               2   23[COMRAM] int 
 19392 ;; Auto vars:     Size  Location     Type
 19393 ;;  f1              4    0        int 
 19394 ;;  sign            1   28[COMRAM] unsigned char 
 19395 ;; Return value:  Size  Location     Type
 19396 ;;                  4   23[COMRAM] unsigned char 
 19397 ;; Registers used:
 19398 ;;		wreg, status,2, status,0, cstack
 19399 ;; Tracked objects:
 19400 ;;		On entry : 0/0
 19401 ;;		On exit  : 0/0
 19402 ;;		Unchanged: 0/0
 19403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19404 ;;      Params:         4       0       0       0       0       0       0
 19405 ;;      Locals:         2       0       0       0       0       0       0
 19406 ;;      Temps:          0       0       0       0       0       0       0
 19407 ;;      Totals:         6       0       0       0       0       0       0
 19408 ;;Total ram usage:        6 bytes
 19409 ;; Hardware stack levels used:    1
 19410 ;; Hardware stack levels required when called:    3
 19411 ;; This function calls:
 19412 ;;		___flpack
 19413 ;; This function is called by:
 19414 ;;		_setEventData
 19415 ;;		_exp
 19416 ;;		_log
 19417 ;; This function uses a non-reentrant model
 19418 ;;
 19419                           
 19420                           	psect	text95
 19421  0050AC                     __ptext95:
 19422                           	opt stack 0
 19423  0050AC                     ___awtofl:
 19424                           	opt stack 25
 19425                           
 19426                           ; BSR set to: 1
 19427                           ;incstack = 0
 19428                           ;incstack = 0
 19429  0050AC  6A1D               	clrf	___awtofl@sign,c
 19430  0050AE  AE19               	btfss	___awtofl@c+1,7,c
 19431  0050B0  D005               	goto	l14360
 19432  0050B2  6C18               	negf	___awtofl@c,c
 19433  0050B4  1E19               	comf	___awtofl@c+1,f,c
 19434  0050B6  B0D8               	btfsc	status,0,c
 19435  0050B8  2A19               	incf	___awtofl@c+1,f,c
 19436  0050BA  2A1D               	incf	___awtofl@sign,f,c
 19437  0050BC                     l14360:
 19438  0050BC  C018  F00E         	movff	___awtofl@c,?___flpack
 19439  0050C0  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19440  0050C4  6A10               	clrf	?___flpack+2,c
 19441  0050C6  6A11               	clrf	?___flpack+3,c
 19442  0050C8  0E96               	movlw	150
 19443  0050CA  6E12               	movwf	?___flpack+4,c
 19444  0050CC  C01D  F013         	movff	___awtofl@sign,?___flpack+5
 19445  0050D0  ECD0  F021         	call	___flpack	;wreg free
 19446  0050D4  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19447  0050D8  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19448  0050DC  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19449  0050E0  C00E  F018         	movff	?___flpack,?___awtofl
 19450  0050E4  0012               	return	
 19451  0050E6                     __end_of___awtofl:
 19452                           	opt stack 0
 19453                           tblptru	equ	0xFF8
 19454                           tblptrh	equ	0xFF7
 19455                           tblptrl	equ	0xFF6
 19456                           tablat	equ	0xFF5
 19457                           prodh	equ	0xFF4
 19458                           prodl	equ	0xFF3
 19459                           intcon	equ	0xFF2
 19460                           postinc0	equ	0xFEE
 19461                           wreg	equ	0xFE8
 19462                           indf1	equ	0xFE7
 19463                           postdec1	equ	0xFE5
 19464                           fsr1h	equ	0xFE2
 19465                           fsr1l	equ	0xFE1
 19466                           indf2	equ	0xFDF
 19467                           postinc2	equ	0xFDE
 19468                           postdec2	equ	0xFDD
 19469                           plusw2	equ	0xFDB
 19470                           fsr2h	equ	0xFDA
 19471                           fsr2l	equ	0xFD9
 19472                           status	equ	0xFD8
 19473                           
 19474 ;; *************** function ___flpack *****************
 19475 ;; Defined at:
 19476 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19477 ;; Parameters:    Size  Location     Type
 19478 ;;  arg             4   13[COMRAM] unsigned long 
 19479 ;;  exp             1   17[COMRAM] unsigned char 
 19480 ;;  sign            1   18[COMRAM] unsigned char 
 19481 ;; Auto vars:     Size  Location     Type
 19482 ;;		None
 19483 ;; Return value:  Size  Location     Type
 19484 ;;                  4   13[COMRAM] unsigned char 
 19485 ;; Registers used:
 19486 ;;		wreg, status,2, status,0
 19487 ;; Tracked objects:
 19488 ;;		On entry : 0/0
 19489 ;;		On exit  : 0/0
 19490 ;;		Unchanged: 0/0
 19491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19492 ;;      Params:         6       0       0       0       0       0       0
 19493 ;;      Locals:         0       0       0       0       0       0       0
 19494 ;;      Temps:          4       0       0       0       0       0       0
 19495 ;;      Totals:        10       0       0       0       0       0       0
 19496 ;;Total ram usage:       10 bytes
 19497 ;; Hardware stack levels used:    1
 19498 ;; Hardware stack levels required when called:    2
 19499 ;; This function calls:
 19500 ;;		Nothing
 19501 ;; This function is called by:
 19502 ;;		___altofl
 19503 ;;		___awtofl
 19504 ;;		___fladd
 19505 ;;		___fldiv
 19506 ;;		___flmul
 19507 ;;		___lwtofl
 19508 ;; This function uses a non-reentrant model
 19509 ;;
 19510                           
 19511                           	psect	text96
 19512  0043A0                     __ptext96:
 19513                           	opt stack 0
 19514  0043A0                     ___flpack:
 19515                           	opt stack 26
 19516                           
 19517                           ;incstack = 0
 19518                           ;incstack = 0
 19519  0043A0  5012               	movf	___flpack@exp,w,c
 19520  0043A2  E005               	bz	l1537
 19521  0043A4  5011               	movf	___flpack@arg+3,w,c
 19522  0043A6  100E               	iorwf	___flpack@arg,w,c
 19523  0043A8  100F               	iorwf	___flpack@arg+1,w,c
 19524  0043AA  1010               	iorwf	___flpack@arg+2,w,c
 19525  0043AC  E107               	bnz	l14152
 19526  0043AE                     l1537:
 19527  0043AE  6A0E               	clrf	?___flpack,c
 19528  0043B0  6A0F               	clrf	?___flpack+1,c
 19529  0043B2  6A10               	clrf	?___flpack+2,c
 19530  0043B4  6A11               	clrf	?___flpack+3,c
 19531  0043B6  D04B               	goto	l1538
 19532  0043B8                     l14150:
 19533  0043B8  2A12               	incf	___flpack@exp,f,c
 19534  0043BA  D84A               	call	PL88	;call to abstracted procedure
 19535  0043BC                     l14152:
 19536  0043BC  6A14               	clrf	??___flpack& (0+255),c
 19537  0043BE  6A15               	clrf	(??___flpack+1)& (0+255),c
 19538  0043C0  6A16               	clrf	(??___flpack+2)& (0+255),c
 19539  0043C2  0EFE               	movlw	254
 19540  0043C4  1411               	andwf	___flpack@arg+3,w,c
 19541  0043C6  6E17               	movwf	(??___flpack+3)& (0+255),c
 19542  0043C8  5017               	movf	??___flpack+3,w,c
 19543  0043CA  1014               	iorwf	??___flpack,w,c
 19544  0043CC  1015               	iorwf	??___flpack+1,w,c
 19545  0043CE  1016               	iorwf	??___flpack+2,w,c
 19546  0043D0  E008               	bz	l1542
 19547  0043D2  D7F2               	goto	l14150
 19548  0043D4                     l14154:
 19549  0043D4  2A12               	incf	___flpack@exp,f,c
 19550  0043D6  2A0E               	incf	___flpack@arg,f,c
 19551  0043D8  0E00               	movlw	0
 19552  0043DA  220F               	addwfc	___flpack@arg+1,f,c
 19553  0043DC  2210               	addwfc	___flpack@arg+2,f,c
 19554  0043DE  2211               	addwfc	___flpack@arg+3,f,c
 19555  0043E0  D837               	call	PL88	;call to abstracted procedure
 19556  0043E2                     l1542:
 19557  0043E2  6A14               	clrf	??___flpack& (0+255),c
 19558  0043E4  6A15               	clrf	(??___flpack+1)& (0+255),c
 19559  0043E6  6A16               	clrf	(??___flpack+2)& (0+255),c
 19560  0043E8  5011               	movf	___flpack@arg+3,w,c
 19561  0043EA  6E17               	movwf	(??___flpack+3)& (0+255),c
 19562  0043EC  5017               	movf	??___flpack+3,w,c
 19563  0043EE  1014               	iorwf	??___flpack,w,c
 19564  0043F0  1015               	iorwf	??___flpack+1,w,c
 19565  0043F2  1016               	iorwf	??___flpack+2,w,c
 19566  0043F4  E007               	bz	l14162
 19567  0043F6  D7EE               	goto	l14154
 19568  0043F8                     l14160:
 19569  0043F8  0612               	decf	___flpack@exp,f,c
 19570  0043FA  90D8               	bcf	status,0,c
 19571  0043FC  360E               	rlcf	___flpack@arg,f,c
 19572  0043FE  360F               	rlcf	___flpack@arg+1,f,c
 19573  004400  3610               	rlcf	___flpack@arg+2,f,c
 19574  004402  3611               	rlcf	___flpack@arg+3,f,c
 19575  004404                     l14162:
 19576  004404  AE10               	btfss	___flpack@arg+2,7,c
 19577  004406  D7F8               	goto	l14160
 19578  004408  B012               	btfsc	___flpack@exp,0,c
 19579  00440A  D002               	goto	l1548
 19580  00440C  0E7F               	movlw	127
 19581  00440E  1610               	andwf	___flpack@arg+2,f,c
 19582  004410                     l1548:
 19583  004410  90D8               	bcf	status,0,c
 19584  004412  3212               	rrcf	___flpack@exp,f,c
 19585  004414  C012  F014         	movff	___flpack@exp,??___flpack
 19586  004418  6A15               	clrf	(??___flpack+1)& (0+255),c
 19587  00441A  6A16               	clrf	(??___flpack+2)& (0+255),c
 19588  00441C  6A17               	clrf	(??___flpack+3)& (0+255),c
 19589  00441E  C014  F017         	movff	??___flpack,??___flpack+3
 19590  004422  6A16               	clrf	??___flpack+2,c
 19591  004424  6A15               	clrf	??___flpack+1,c
 19592  004426  6A14               	clrf	??___flpack,c
 19593  004428  5014               	movf	??___flpack,w,c
 19594  00442A  120E               	iorwf	___flpack@arg,f,c
 19595  00442C  5015               	movf	??___flpack+1,w,c
 19596  00442E  120F               	iorwf	___flpack@arg+1,f,c
 19597  004430  5016               	movf	??___flpack+2,w,c
 19598  004432  1210               	iorwf	___flpack@arg+2,f,c
 19599  004434  5017               	movf	??___flpack+3,w,c
 19600  004436  1211               	iorwf	___flpack@arg+3,f,c
 19601  004438  5013               	movf	___flpack@sign,w,c
 19602  00443A  A4D8               	btfss	status,2,c
 19603  00443C  8E11               	bsf	___flpack@arg+3,7,c
 19604  00443E  C00E  F00E         	movff	___flpack@arg,?___flpack
 19605  004442  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19606  004446  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19607  00444A  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19608  00444E                     l1538:
 19609  00444E  0012               	return	
 19610  004450                     __end_of___flpack:
 19611                           	opt stack 0
 19612  004450                     PL88:
 19613                           	opt stack 26
 19614  004450  90D8               	bcf	status,0,c
 19615  004452  3211               	rrcf	___flpack@arg+3,f,c
 19616  004454  3210               	rrcf	___flpack@arg+2,f,c
 19617  004456  320F               	rrcf	___flpack@arg+1,f,c
 19618  004458  320E               	rrcf	___flpack@arg,f,c
 19619  00445A  0012               	return	
 19620  00445C                     __end_ofPL88:
 19621                           	opt stack 0
 19622                           tblptru	equ	0xFF8
 19623                           tblptrh	equ	0xFF7
 19624                           tblptrl	equ	0xFF6
 19625                           tablat	equ	0xFF5
 19626                           prodh	equ	0xFF4
 19627                           prodl	equ	0xFF3
 19628                           intcon	equ	0xFF2
 19629                           postinc0	equ	0xFEE
 19630                           wreg	equ	0xFE8
 19631                           indf1	equ	0xFE7
 19632                           postdec1	equ	0xFE5
 19633                           fsr1h	equ	0xFE2
 19634                           fsr1l	equ	0xFE1
 19635                           indf2	equ	0xFDF
 19636                           postinc2	equ	0xFDE
 19637                           postdec2	equ	0xFDD
 19638                           plusw2	equ	0xFDB
 19639                           fsr2h	equ	0xFDA
 19640                           fsr2l	equ	0xFD9
 19641                           status	equ	0xFD8
 19642                           
 19643 ;; *************** function ___flmul *****************
 19644 ;; Defined at:
 19645 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19646 ;; Parameters:    Size  Location     Type
 19647 ;;  f1              4   29[COMRAM] unsigned char 
 19648 ;;  f2              4   33[COMRAM] unsigned char 
 19649 ;; Auto vars:     Size  Location     Type
 19650 ;;  f3_as_produc    4   45[COMRAM] unsigned long 
 19651 ;;  sign            1   50[COMRAM] unsigned char 
 19652 ;;  cntr            1   49[COMRAM] unsigned char 
 19653 ;;  exp             1   44[COMRAM] unsigned char 
 19654 ;; Return value:  Size  Location     Type
 19655 ;;                  4   29[COMRAM] unsigned char 
 19656 ;; Registers used:
 19657 ;;		wreg, status,2, status,0, cstack
 19658 ;; Tracked objects:
 19659 ;;		On entry : 0/1
 19660 ;;		On exit  : 0/0
 19661 ;;		Unchanged: 0/0
 19662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19663 ;;      Params:         8       0       0       0       0       0       0
 19664 ;;      Locals:        14       0       0       0       0       0       0
 19665 ;;      Temps:          0       0       0       0       0       0       0
 19666 ;;      Totals:        22       0       0       0       0       0       0
 19667 ;;Total ram usage:       22 bytes
 19668 ;; Hardware stack levels used:    1
 19669 ;; Hardware stack levels required when called:    3
 19670 ;; This function calls:
 19671 ;;		___flpack
 19672 ;; This function is called by:
 19673 ;;		_doWork
 19674 ;;		_Celsius2Fahrenheit
 19675 ;;		___asflmul
 19676 ;;		_log
 19677 ;;		_eval_poly
 19678 ;; This function uses a non-reentrant model
 19679 ;;
 19680                           
 19681                           	psect	text97
 19682  004166                     __ptext97:
 19683                           	opt stack 0
 19684  004166                     ___flmul:
 19685                           	opt stack 26
 19686                           
 19687                           ;incstack = 0
 19688                           ;incstack = 0
 19689  004166  3420               	rlcf	(___flmul@f1+2)& (0+255),w,c
 19690  004168  3421               	rlcf	(___flmul@f1+3)& (0+255),w,c
 19691  00416A  6E2D               	movwf	___flmul@exp,c
 19692  00416C  662D               	tstfsz	___flmul@exp& (0+255),c
 19693  00416E  D001               	goto	l14304
 19694  004170  D005               	goto	u13740
 19695  004172                     l14304:
 19696  004172  3424               	rlcf	(___flmul@f2+2)& (0+255),w,c
 19697  004174  3425               	rlcf	(___flmul@f2+3)& (0+255),w,c
 19698  004176  6E33               	movwf	___flmul@sign,c
 19699  004178  6633               	tstfsz	___flmul@sign& (0+255),c
 19700  00417A  D005               	goto	l14308
 19701  00417C                     u13740:
 19702  00417C  6A1E               	clrf	?___flmul,c
 19703  00417E  6A1F               	clrf	?___flmul+1,c
 19704  004180  6A20               	clrf	?___flmul+2,c
 19705  004182  6A21               	clrf	?___flmul+3,c
 19706  004184  D040               	goto	l1622
 19707  004186                     l14308:
 19708  004186  5033               	movf	___flmul@sign,w,c
 19709  004188  0F7B               	addlw	123
 19710  00418A  262D               	addwf	___flmul@exp,f,c
 19711  00418C  C021  F033         	movff	___flmul@f1+3,___flmul@sign
 19712  004190  5025               	movf	(___flmul@f2+3)& (0+255),w,c
 19713  004192  1A33               	xorwf	___flmul@sign,f,c
 19714  004194  0E80               	movlw	128
 19715  004196  1633               	andwf	___flmul@sign,f,c
 19716  004198  8E20               	bsf	___flmul@f1+2,7,c
 19717  00419A  8E24               	bsf	___flmul@f2+2,7,c
 19718  00419C  6A25               	clrf	___flmul@f2+3,c
 19719  00419E  6A2E               	clrf	___flmul@f3_as_product,c
 19720  0041A0  6A2F               	clrf	___flmul@f3_as_product+1,c
 19721  0041A2  6A30               	clrf	___flmul@f3_as_product+2,c
 19722  0041A4  6A31               	clrf	___flmul@f3_as_product+3,c
 19723  0041A6  0E07               	movlw	7
 19724  0041A8  6E32               	movwf	___flmul@cntr,c
 19725  0041AA                     l14320:
 19726  0041AA  A01E               	btfss	___flmul@f1,0,c
 19727  0041AC  D002               	goto	l14324
 19728  0041AE  5022               	movf	___flmul@f2,w,c
 19729  0041B0  D82B               	call	PL64	;call to abstracted procedure
 19730  0041B2                     l14324:
 19731  0041B2  D832               	call	PL74	;call to abstracted procedure
 19732  0041B4  3622               	rlcf	___flmul@f2,f,c
 19733  0041B6  3623               	rlcf	___flmul@f2+1,f,c
 19734  0041B8  3624               	rlcf	___flmul@f2+2,f,c
 19735  0041BA  3625               	rlcf	___flmul@f2+3,f,c
 19736  0041BC  2E32               	decfsz	___flmul@cntr,f,c
 19737  0041BE  D7F5               	goto	l14320
 19738  0041C0  0E11               	movlw	17
 19739  0041C2  6E32               	movwf	___flmul@cntr,c
 19740  0041C4                     l14332:
 19741  0041C4  A01E               	btfss	___flmul@f1,0,c
 19742  0041C6  D002               	goto	l14336
 19743  0041C8  5022               	movf	___flmul@f2,w,c
 19744  0041CA  D81E               	call	PL64	;call to abstracted procedure
 19745  0041CC                     l14336:
 19746  0041CC  D825               	call	PL74	;call to abstracted procedure
 19747  0041CE  3231               	rrcf	___flmul@f3_as_product+3,f,c
 19748  0041D0  3230               	rrcf	___flmul@f3_as_product+2,f,c
 19749  0041D2  322F               	rrcf	___flmul@f3_as_product+1,f,c
 19750  0041D4  322E               	rrcf	___flmul@f3_as_product,f,c
 19751  0041D6  2E32               	decfsz	___flmul@cntr,f,c
 19752  0041D8  D7F5               	goto	l14332
 19753  0041DA  C02E  F00E         	movff	___flmul@f3_as_product,?___flpack
 19754  0041DE  C02F  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19755  0041E2  C030  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19756  0041E6  C031  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19757  0041EA  C02D  F012         	movff	___flmul@exp,?___flpack+4
 19758  0041EE  C033  F013         	movff	___flmul@sign,?___flpack+5
 19759  0041F2  ECD0  F021         	call	___flpack	;wreg free
 19760  0041F6  C011  F021         	movff	?___flpack+3,?___flmul+3
 19761  0041FA  C010  F020         	movff	?___flpack+2,?___flmul+2
 19762  0041FE  C00F  F01F         	movff	?___flpack+1,?___flmul+1
 19763  004202  C00E  F01E         	movff	?___flpack,?___flmul
 19764  004206                     l1622:
 19765  004206  0012               	return	
 19766  004208                     __end_of___flmul:
 19767                           	opt stack 0
 19768  004208                     PL64:
 19769                           	opt stack 26
 19770  004208  262E               	addwf	___flmul@f3_as_product,f,c
 19771  00420A  5023               	movf	___flmul@f2+1,w,c
 19772  00420C  222F               	addwfc	___flmul@f3_as_product+1,f,c
 19773  00420E  5024               	movf	___flmul@f2+2,w,c
 19774  004210  2230               	addwfc	___flmul@f3_as_product+2,f,c
 19775  004212  5025               	movf	___flmul@f2+3,w,c
 19776  004214  2231               	addwfc	___flmul@f3_as_product+3,f,c
 19777  004216  0012               	return	
 19778  004218                     __end_ofPL64:
 19779                           	opt stack 0
 19780  004218                     PL74:
 19781                           	opt stack 26
 19782  004218  90D8               	bcf	status,0,c
 19783  00421A  3221               	rrcf	___flmul@f1+3,f,c
 19784  00421C  3220               	rrcf	___flmul@f1+2,f,c
 19785  00421E  321F               	rrcf	___flmul@f1+1,f,c
 19786  004220  321E               	rrcf	___flmul@f1,f,c
 19787  004222  90D8               	bcf	status,0,c
 19788  004224  0012               	return	
 19789  004226                     __end_ofPL74:
 19790                           	opt stack 0
 19791                           tblptru	equ	0xFF8
 19792                           tblptrh	equ	0xFF7
 19793                           tblptrl	equ	0xFF6
 19794                           tablat	equ	0xFF5
 19795                           prodh	equ	0xFF4
 19796                           prodl	equ	0xFF3
 19797                           intcon	equ	0xFF2
 19798                           postinc0	equ	0xFEE
 19799                           wreg	equ	0xFE8
 19800                           indf1	equ	0xFE7
 19801                           postdec1	equ	0xFE5
 19802                           fsr1h	equ	0xFE2
 19803                           fsr1l	equ	0xFE1
 19804                           indf2	equ	0xFDF
 19805                           postinc2	equ	0xFDE
 19806                           postdec2	equ	0xFDD
 19807                           plusw2	equ	0xFDB
 19808                           fsr2h	equ	0xFDA
 19809                           fsr2l	equ	0xFD9
 19810                           status	equ	0xFD8
 19811                           
 19812 ;; *************** function _vscp_readAppReg *****************
 19813 ;; Defined at:
 19814 ;;		line 1279 in file "../main.c"
 19815 ;; Parameters:    Size  Location     Type
 19816 ;;  reg             1    wreg     unsigned char 
 19817 ;; Auto vars:     Size  Location     Type
 19818 ;;  reg             1   18[COMRAM] unsigned char 
 19819 ;;  pos             1   17[COMRAM] unsigned char 
 19820 ;;  rv              1   19[COMRAM] unsigned char 
 19821 ;; Return value:  Size  Location     Type
 19822 ;;                  1    wreg      unsigned char 
 19823 ;; Registers used:
 19824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19825 ;; Tracked objects:
 19826 ;;		On entry : F/0
 19827 ;;		On exit  : 0/0
 19828 ;;		Unchanged: 0/0
 19829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19830 ;;      Params:         0       0       0       0       0       0       0
 19831 ;;      Locals:         3       0       0       0       0       0       0
 19832 ;;      Temps:          0       0       0       0       0       0       0
 19833 ;;      Totals:         3       0       0       0       0       0       0
 19834 ;;Total ram usage:        3 bytes
 19835 ;; Hardware stack levels used:    1
 19836 ;; Hardware stack levels required when called:    3
 19837 ;; This function calls:
 19838 ;;		_readEEPROM
 19839 ;; This function is called by:
 19840 ;;		_vscp_readRegister
 19841 ;;		_vscp_handleProtocolEvent
 19842 ;; This function uses a non-reentrant model
 19843 ;;
 19844                           
 19845                           	psect	text98
 19846  001C1E                     __ptext98:
 19847                           	opt stack 0
 19848  001C1E                     _vscp_readAppReg:
 19849                           	opt stack 25
 19850                           
 19851                           ;incstack = 0
 19852                           ;incstack = 0
 19853                           ;vscp_readAppReg@reg stored from wreg
 19854  001C1E  CFE8 F013          	movff	wreg,vscp_readAppReg@reg
 19855                           
 19856                           ; BSR set to: 0
 19857                           ;main.c: 1280: uint8_t rv;
 19858                           ;main.c: 1285: if (0 == vscp_page_select) {
 19859  001C22  5047               	movf	_vscp_page_select+1,w,c
 19860  001C24  1046               	iorwf	_vscp_page_select,w,c
 19861  001C26  E101 D250          	bz	l10768
 19862  001C2A  D394               	goto	l10770
 19863  001C2C                     l10566:
 19864                           
 19865                           ; BSR set to: 0
 19866                           ;main.c: 1291: rv = readEEPROM( 0x41 );
 19867  001C2C  6A0F               	clrf	?_readEEPROM+1,c
 19868  001C2E  0E41               	movlw	65
 19869  001C30  6E0E               	movwf	?_readEEPROM,c
 19870  001C32  EC62  F02A         	call	_readEEPROM	;wreg free
 19871  001C36  D3BB               	goto	L53
 19872  001C38                     l10568:
 19873                           
 19874                           ; BSR set to: 0
 19875                           ;main.c: 1296: rv = readEEPROM( 0x42 );
 19876  001C38  6A0F               	clrf	?_readEEPROM+1,c
 19877  001C3A  0E42               	movlw	66
 19878  001C3C  6E0E               	movwf	?_readEEPROM,c
 19879  001C3E  EC62  F02A         	call	_readEEPROM	;wreg free
 19880  001C42  D3B5               	goto	L53
 19881  001C44                     l10570:
 19882                           
 19883                           ; BSR set to: 0
 19884                           ;main.c: 1301: rv = readEEPROM( 0x43 );
 19885  001C44  6A0F               	clrf	?_readEEPROM+1,c
 19886  001C46  0E43               	movlw	67
 19887  001C48  6E0E               	movwf	?_readEEPROM,c
 19888  001C4A  EC62  F02A         	call	_readEEPROM	;wreg free
 19889  001C4E  D3AF               	goto	L53
 19890  001C50                     l10572:
 19891                           
 19892                           ; BSR set to: 0
 19893                           ;main.c: 1306: rv = readEEPROM (0x44 );
 19894  001C50  6A0F               	clrf	?_readEEPROM+1,c
 19895  001C52  0E44               	movlw	68
 19896  001C54  6E0E               	movwf	?_readEEPROM,c
 19897  001C56  EC62  F02A         	call	_readEEPROM	;wreg free
 19898  001C5A  D3A9               	goto	L53
 19899  001C5C                     l10574:
 19900                           
 19901                           ; BSR set to: 0
 19902                           ;main.c: 1311: rv = readEEPROM( 0x45 );
 19903  001C5C  6A0F               	clrf	?_readEEPROM+1,c
 19904  001C5E  0E45               	movlw	69
 19905  001C60  6E0E               	movwf	?_readEEPROM,c
 19906  001C62  EC62  F02A         	call	_readEEPROM	;wreg free
 19907  001C66  D3A3               	goto	L53
 19908  001C68                     l10576:
 19909                           
 19910                           ; BSR set to: 0
 19911                           ;main.c: 1316: rv = readEEPROM( 0x46 );
 19912  001C68  6A0F               	clrf	?_readEEPROM+1,c
 19913  001C6A  0E46               	movlw	70
 19914  001C6C  6E0E               	movwf	?_readEEPROM,c
 19915  001C6E  EC62  F02A         	call	_readEEPROM	;wreg free
 19916  001C72  D39D               	goto	L53
 19917  001C74                     l10578:
 19918                           
 19919                           ; BSR set to: 0
 19920                           ;main.c: 1321: rv = readEEPROM( 0x47 );
 19921  001C74  6A0F               	clrf	?_readEEPROM+1,c
 19922  001C76  0E47               	movlw	71
 19923  001C78  6E0E               	movwf	?_readEEPROM,c
 19924  001C7A  EC62  F02A         	call	_readEEPROM	;wreg free
 19925  001C7E  D397               	goto	L53
 19926  001C80                     l10580:
 19927                           
 19928                           ; BSR set to: 0
 19929                           ;main.c: 1326: rv = readEEPROM( 0x48 );
 19930  001C80  6A0F               	clrf	?_readEEPROM+1,c
 19931  001C82  0E48               	movlw	72
 19932  001C84  6E0E               	movwf	?_readEEPROM,c
 19933  001C86  EC62  F02A         	call	_readEEPROM	;wreg free
 19934  001C8A  D391               	goto	L53
 19935  001C8C                     l10582:
 19936                           
 19937                           ; BSR set to: 0
 19938                           ;main.c: 1331: rv = ((current_temp[0] & 0xff00) >> 8);
 19939  001C8C  51A1               	movf	(_current_temp+1)& (0+255),w,b
 19940  001C8E  D38F               	goto	L53
 19941  001C90                     l315:
 19942                           
 19943                           ; BSR set to: 0
 19944                           ;main.c: 1336: rv = (current_temp[0] & 0x00ff);
 19945  001C90  C0A0  F014         	movff	_current_temp,vscp_readAppReg@rv
 19946                           
 19947                           ;main.c: 1337: break;
 19948  001C94  D38D               	goto	l10792
 19949  001C96                     l10584:
 19950                           
 19951                           ; BSR set to: 0
 19952                           ;main.c: 1341: rv = ((current_temp[1] & 0xff00) >> 8);
 19953  001C96  51A3               	movf	(_current_temp+3)& (0+255),w,b
 19954  001C98  D38A               	goto	L53
 19955  001C9A                     l317:
 19956                           
 19957                           ; BSR set to: 0
 19958                           ;main.c: 1346: rv = (current_temp[1] & 0x00ff);
 19959  001C9A  C0A2  F014         	movff	_current_temp+2,vscp_readAppReg@rv
 19960                           
 19961                           ;main.c: 1347: break;
 19962  001C9E  D388               	goto	l10792
 19963  001CA0                     l10586:
 19964                           
 19965                           ; BSR set to: 0
 19966                           ;main.c: 1351: rv = ((current_temp[2] & 0xff00) >> 8);
 19967  001CA0  51A5               	movf	(_current_temp+5)& (0+255),w,b
 19968  001CA2  D385               	goto	L53
 19969  001CA4                     l319:
 19970                           
 19971                           ; BSR set to: 0
 19972                           ;main.c: 1356: rv = (current_temp[2] & 0x00ff);
 19973  001CA4  C0A4  F014         	movff	_current_temp+4,vscp_readAppReg@rv
 19974                           
 19975                           ;main.c: 1357: break;
 19976  001CA8  D383               	goto	l10792
 19977  001CAA                     l10588:
 19978                           
 19979                           ; BSR set to: 0
 19980                           ;main.c: 1361: rv = ((current_temp[3] & 0xff00) >> 8);
 19981  001CAA  51A7               	movf	(_current_temp+7)& (0+255),w,b
 19982  001CAC  D380               	goto	L53
 19983  001CAE                     l321:
 19984                           
 19985                           ; BSR set to: 0
 19986                           ;main.c: 1366: rv = (current_temp[3] & 0x00ff);
 19987  001CAE  C0A6  F014         	movff	_current_temp+6,vscp_readAppReg@rv
 19988                           
 19989                           ;main.c: 1367: break;
 19990  001CB2  D37E               	goto	l10792
 19991  001CB4                     l10590:
 19992                           
 19993                           ; BSR set to: 0
 19994                           ;main.c: 1371: rv = ((current_temp[4] & 0xff00) >> 8);
 19995  001CB4  51A9               	movf	(_current_temp+9)& (0+255),w,b
 19996  001CB6  D37B               	goto	L53
 19997  001CB8                     l323:
 19998                           
 19999                           ; BSR set to: 0
 20000                           ;main.c: 1376: rv = (current_temp[4] & 0x00ff);
 20001  001CB8  C0A8  F014         	movff	_current_temp+8,vscp_readAppReg@rv
 20002                           
 20003                           ;main.c: 1377: break;
 20004  001CBC  D379               	goto	l10792
 20005  001CBE                     l10594:
 20006                           
 20007                           ; BSR set to: 0
 20008                           ;main.c: 1391: rv = readEEPROM(0x49);
 20009  001CBE  6A0F               	clrf	?_readEEPROM+1,c
 20010  001CC0  0E49               	movlw	73
 20011  001CC2  6E0E               	movwf	?_readEEPROM,c
 20012  001CC4  EC62  F02A         	call	_readEEPROM	;wreg free
 20013  001CC8  D372               	goto	L53
 20014  001CCA                     l10596:
 20015                           
 20016                           ; BSR set to: 0
 20017                           ;main.c: 1396: rv = readEEPROM(0x4A);
 20018  001CCA  6A0F               	clrf	?_readEEPROM+1,c
 20019  001CCC  0E4A               	movlw	74
 20020  001CCE  6E0E               	movwf	?_readEEPROM,c
 20021  001CD0  EC62  F02A         	call	_readEEPROM	;wreg free
 20022  001CD4  D36C               	goto	L53
 20023  001CD6                     l10598:
 20024                           
 20025                           ; BSR set to: 0
 20026                           ;main.c: 1401: rv = readEEPROM(0x4B);
 20027  001CD6  6A0F               	clrf	?_readEEPROM+1,c
 20028  001CD8  0E4B               	movlw	75
 20029  001CDA  6E0E               	movwf	?_readEEPROM,c
 20030  001CDC  EC62  F02A         	call	_readEEPROM	;wreg free
 20031  001CE0  D366               	goto	L53
 20032  001CE2                     l10600:
 20033                           
 20034                           ; BSR set to: 0
 20035                           ;main.c: 1406: rv = readEEPROM(0x4C);
 20036  001CE2  6A0F               	clrf	?_readEEPROM+1,c
 20037  001CE4  0E4C               	movlw	76
 20038  001CE6  6E0E               	movwf	?_readEEPROM,c
 20039  001CE8  EC62  F02A         	call	_readEEPROM	;wreg free
 20040  001CEC  D360               	goto	L53
 20041  001CEE                     l10602:
 20042                           
 20043                           ; BSR set to: 0
 20044                           ;main.c: 1411: rv = readEEPROM(0x4D);
 20045  001CEE  6A0F               	clrf	?_readEEPROM+1,c
 20046  001CF0  0E4D               	movlw	77
 20047  001CF2  6E0E               	movwf	?_readEEPROM,c
 20048  001CF4  EC62  F02A         	call	_readEEPROM	;wreg free
 20049  001CF8  D35A               	goto	L53
 20050  001CFA                     l10604:
 20051                           
 20052                           ; BSR set to: 0
 20053                           ;main.c: 1416: rv = readEEPROM(0x4E);
 20054  001CFA  6A0F               	clrf	?_readEEPROM+1,c
 20055  001CFC  0E4E               	movlw	78
 20056  001CFE  6E0E               	movwf	?_readEEPROM,c
 20057  001D00  EC62  F02A         	call	_readEEPROM	;wreg free
 20058  001D04  D354               	goto	L53
 20059  001D06                     l10606:
 20060                           
 20061                           ; BSR set to: 0
 20062                           ;main.c: 1423: rv = readEEPROM(0x4F);
 20063  001D06  6A0F               	clrf	?_readEEPROM+1,c
 20064  001D08  0E4F               	movlw	79
 20065  001D0A  6E0E               	movwf	?_readEEPROM,c
 20066  001D0C  EC62  F02A         	call	_readEEPROM	;wreg free
 20067  001D10  D34E               	goto	L53
 20068  001D12                     l10608:
 20069                           
 20070                           ; BSR set to: 0
 20071                           ;main.c: 1428: rv = readEEPROM(0x50);
 20072  001D12  6A0F               	clrf	?_readEEPROM+1,c
 20073  001D14  0E50               	movlw	80
 20074  001D16  6E0E               	movwf	?_readEEPROM,c
 20075  001D18  EC62  F02A         	call	_readEEPROM	;wreg free
 20076  001D1C  D348               	goto	L53
 20077  001D1E                     l10610:
 20078                           
 20079                           ; BSR set to: 0
 20080                           ;main.c: 1433: rv = readEEPROM(0x51);
 20081  001D1E  6A0F               	clrf	?_readEEPROM+1,c
 20082  001D20  0E51               	movlw	81
 20083  001D22  6E0E               	movwf	?_readEEPROM,c
 20084  001D24  EC62  F02A         	call	_readEEPROM	;wreg free
 20085  001D28  D342               	goto	L53
 20086  001D2A                     l10612:
 20087                           
 20088                           ; BSR set to: 0
 20089                           ;main.c: 1438: rv = readEEPROM(0x52);
 20090  001D2A  6A0F               	clrf	?_readEEPROM+1,c
 20091  001D2C  0E52               	movlw	82
 20092  001D2E  6E0E               	movwf	?_readEEPROM,c
 20093  001D30  EC62  F02A         	call	_readEEPROM	;wreg free
 20094  001D34  D33C               	goto	L53
 20095  001D36                     l10614:
 20096                           
 20097                           ; BSR set to: 0
 20098                           ;main.c: 1443: rv = readEEPROM(0x53);
 20099  001D36  6A0F               	clrf	?_readEEPROM+1,c
 20100  001D38  0E53               	movlw	83
 20101  001D3A  6E0E               	movwf	?_readEEPROM,c
 20102  001D3C  EC62  F02A         	call	_readEEPROM	;wreg free
 20103  001D40  D336               	goto	L53
 20104  001D42                     l10616:
 20105                           
 20106                           ; BSR set to: 0
 20107                           ;main.c: 1448: rv = readEEPROM(0x54);
 20108  001D42  6A0F               	clrf	?_readEEPROM+1,c
 20109  001D44  0E54               	movlw	84
 20110  001D46  6E0E               	movwf	?_readEEPROM,c
 20111  001D48  EC62  F02A         	call	_readEEPROM	;wreg free
 20112  001D4C  D330               	goto	L53
 20113  001D4E                     l10618:
 20114                           
 20115                           ; BSR set to: 0
 20116                           ;main.c: 1453: rv = readEEPROM(0x55);
 20117  001D4E  6A0F               	clrf	?_readEEPROM+1,c
 20118  001D50  0E55               	movlw	85
 20119  001D52  6E0E               	movwf	?_readEEPROM,c
 20120  001D54  EC62  F02A         	call	_readEEPROM	;wreg free
 20121  001D58  D32A               	goto	L53
 20122  001D5A                     l10620:
 20123                           
 20124                           ; BSR set to: 0
 20125                           ;main.c: 1458: rv = readEEPROM(0x56);
 20126  001D5A  6A0F               	clrf	?_readEEPROM+1,c
 20127  001D5C  0E56               	movlw	86
 20128  001D5E  6E0E               	movwf	?_readEEPROM,c
 20129  001D60  EC62  F02A         	call	_readEEPROM	;wreg free
 20130  001D64  D324               	goto	L53
 20131  001D66                     l10622:
 20132                           
 20133                           ; BSR set to: 0
 20134                           ;main.c: 1463: rv = readEEPROM(0x57);
 20135  001D66  6A0F               	clrf	?_readEEPROM+1,c
 20136  001D68  0E57               	movlw	87
 20137  001D6A  6E0E               	movwf	?_readEEPROM,c
 20138  001D6C  EC62  F02A         	call	_readEEPROM	;wreg free
 20139  001D70  D31E               	goto	L53
 20140  001D72                     l10624:
 20141                           
 20142                           ; BSR set to: 0
 20143                           ;main.c: 1468: rv = readEEPROM(0x58);
 20144  001D72  6A0F               	clrf	?_readEEPROM+1,c
 20145  001D74  0E58               	movlw	88
 20146  001D76  6E0E               	movwf	?_readEEPROM,c
 20147  001D78  EC62  F02A         	call	_readEEPROM	;wreg free
 20148  001D7C  D318               	goto	L53
 20149  001D7E                     l10626:
 20150                           
 20151                           ; BSR set to: 0
 20152                           ;main.c: 1473: rv = readEEPROM(0x59);
 20153  001D7E  6A0F               	clrf	?_readEEPROM+1,c
 20154  001D80  0E59               	movlw	89
 20155  001D82  6E0E               	movwf	?_readEEPROM,c
 20156  001D84  EC62  F02A         	call	_readEEPROM	;wreg free
 20157  001D88  D312               	goto	L53
 20158  001D8A                     l10628:
 20159                           
 20160                           ; BSR set to: 0
 20161                           ;main.c: 1478: rv = readEEPROM(0x5A);
 20162  001D8A  6A0F               	clrf	?_readEEPROM+1,c
 20163  001D8C  0E5A               	movlw	90
 20164  001D8E  6E0E               	movwf	?_readEEPROM,c
 20165  001D90  EC62  F02A         	call	_readEEPROM	;wreg free
 20166  001D94  D30C               	goto	L53
 20167  001D96                     l10630:
 20168                           
 20169                           ; BSR set to: 0
 20170                           ;main.c: 1487: rv = readEEPROM(0x5B);
 20171  001D96  6A0F               	clrf	?_readEEPROM+1,c
 20172  001D98  0E5B               	movlw	91
 20173  001D9A  6E0E               	movwf	?_readEEPROM,c
 20174  001D9C  EC62  F02A         	call	_readEEPROM	;wreg free
 20175  001DA0  D306               	goto	L53
 20176  001DA2                     l10632:
 20177                           
 20178                           ; BSR set to: 0
 20179                           ;main.c: 1492: rv = readEEPROM(0x5C);
 20180  001DA2  6A0F               	clrf	?_readEEPROM+1,c
 20181  001DA4  0E5C               	movlw	92
 20182  001DA6  6E0E               	movwf	?_readEEPROM,c
 20183  001DA8  EC62  F02A         	call	_readEEPROM	;wreg free
 20184  001DAC  D300               	goto	L53
 20185  001DAE                     l10634:
 20186                           
 20187                           ; BSR set to: 0
 20188                           ;main.c: 1497: rv = readEEPROM(0x5D);
 20189  001DAE  6A0F               	clrf	?_readEEPROM+1,c
 20190  001DB0  0E5D               	movlw	93
 20191  001DB2  6E0E               	movwf	?_readEEPROM,c
 20192  001DB4  EC62  F02A         	call	_readEEPROM	;wreg free
 20193  001DB8  D2FA               	goto	L53
 20194  001DBA                     l10636:
 20195                           
 20196                           ; BSR set to: 0
 20197                           ;main.c: 1502: rv = readEEPROM(0x5E);
 20198  001DBA  6A0F               	clrf	?_readEEPROM+1,c
 20199  001DBC  0E5E               	movlw	94
 20200  001DBE  6E0E               	movwf	?_readEEPROM,c
 20201  001DC0  EC62  F02A         	call	_readEEPROM	;wreg free
 20202  001DC4  D2F4               	goto	L53
 20203  001DC6                     l10638:
 20204                           
 20205                           ; BSR set to: 0
 20206                           ;main.c: 1507: rv = readEEPROM(0x5F);
 20207  001DC6  6A0F               	clrf	?_readEEPROM+1,c
 20208  001DC8  0E5F               	movlw	95
 20209  001DCA  6E0E               	movwf	?_readEEPROM,c
 20210  001DCC  EC62  F02A         	call	_readEEPROM	;wreg free
 20211  001DD0  D2EE               	goto	L53
 20212  001DD2                     l10640:
 20213                           
 20214                           ; BSR set to: 0
 20215                           ;main.c: 1512: rv = readEEPROM(0x60);
 20216  001DD2  6A0F               	clrf	?_readEEPROM+1,c
 20217  001DD4  0E60               	movlw	96
 20218  001DD6  6E0E               	movwf	?_readEEPROM,c
 20219  001DD8  EC62  F02A         	call	_readEEPROM	;wreg free
 20220  001DDC  D2E8               	goto	L53
 20221  001DDE                     l10642:
 20222                           
 20223                           ; BSR set to: 0
 20224                           ;main.c: 1517: rv = readEEPROM(0x61);
 20225  001DDE  6A0F               	clrf	?_readEEPROM+1,c
 20226  001DE0  0E61               	movlw	97
 20227  001DE2  6E0E               	movwf	?_readEEPROM,c
 20228  001DE4  EC62  F02A         	call	_readEEPROM	;wreg free
 20229  001DE8  D2E2               	goto	L53
 20230  001DEA                     l10644:
 20231                           
 20232                           ; BSR set to: 0
 20233                           ;main.c: 1522: rv = readEEPROM(0x62);
 20234  001DEA  6A0F               	clrf	?_readEEPROM+1,c
 20235  001DEC  0E62               	movlw	98
 20236  001DEE  6E0E               	movwf	?_readEEPROM,c
 20237  001DF0  EC62  F02A         	call	_readEEPROM	;wreg free
 20238  001DF4  D2DC               	goto	L53
 20239  001DF6                     l10646:
 20240                           
 20241                           ; BSR set to: 0
 20242                           ;main.c: 1527: rv = readEEPROM(0x63);
 20243  001DF6  6A0F               	clrf	?_readEEPROM+1,c
 20244  001DF8  0E63               	movlw	99
 20245  001DFA  6E0E               	movwf	?_readEEPROM,c
 20246  001DFC  EC62  F02A         	call	_readEEPROM	;wreg free
 20247  001E00  D2D6               	goto	L53
 20248  001E02                     l10648:
 20249                           
 20250                           ; BSR set to: 0
 20251                           ;main.c: 1532: rv = readEEPROM(0x64);
 20252  001E02  6A0F               	clrf	?_readEEPROM+1,c
 20253  001E04  0E64               	movlw	100
 20254  001E06  6E0E               	movwf	?_readEEPROM,c
 20255  001E08  EC62  F02A         	call	_readEEPROM	;wreg free
 20256  001E0C  D2D0               	goto	L53
 20257  001E0E                     l10650:
 20258                           
 20259                           ; BSR set to: 0
 20260                           ;main.c: 1537: rv = readEEPROM(0x65);
 20261  001E0E  6A0F               	clrf	?_readEEPROM+1,c
 20262  001E10  0E65               	movlw	101
 20263  001E12  6E0E               	movwf	?_readEEPROM,c
 20264  001E14  EC62  F02A         	call	_readEEPROM	;wreg free
 20265  001E18  D2CA               	goto	L53
 20266  001E1A                     l10652:
 20267                           
 20268                           ; BSR set to: 0
 20269                           ;main.c: 1542: rv = readEEPROM(0x66);
 20270  001E1A  6A0F               	clrf	?_readEEPROM+1,c
 20271  001E1C  0E66               	movlw	102
 20272  001E1E  6E0E               	movwf	?_readEEPROM,c
 20273  001E20  EC62  F02A         	call	_readEEPROM	;wreg free
 20274  001E24  D2C4               	goto	L53
 20275  001E26                     l10654:
 20276                           
 20277                           ; BSR set to: 0
 20278                           ;main.c: 1552: rv = readEEPROM(0x67);
 20279  001E26  6A0F               	clrf	?_readEEPROM+1,c
 20280  001E28  0E67               	movlw	103
 20281  001E2A  6E0E               	movwf	?_readEEPROM,c
 20282  001E2C  EC62  F02A         	call	_readEEPROM	;wreg free
 20283  001E30  D2BE               	goto	L53
 20284  001E32                     l10656:
 20285                           
 20286                           ; BSR set to: 0
 20287                           ;main.c: 1557: rv = readEEPROM(0x68);
 20288  001E32  6A0F               	clrf	?_readEEPROM+1,c
 20289  001E34  0E68               	movlw	104
 20290  001E36  6E0E               	movwf	?_readEEPROM,c
 20291  001E38  EC62  F02A         	call	_readEEPROM	;wreg free
 20292  001E3C  D2B8               	goto	L53
 20293  001E3E                     l10658:
 20294                           
 20295                           ; BSR set to: 0
 20296                           ;main.c: 1562: rv = readEEPROM(0x69);
 20297  001E3E  6A0F               	clrf	?_readEEPROM+1,c
 20298  001E40  0E69               	movlw	105
 20299  001E42  6E0E               	movwf	?_readEEPROM,c
 20300  001E44  EC62  F02A         	call	_readEEPROM	;wreg free
 20301  001E48  D2B2               	goto	L53
 20302  001E4A                     l10660:
 20303                           
 20304                           ; BSR set to: 0
 20305                           ;main.c: 1567: rv = readEEPROM(0x6A);
 20306  001E4A  6A0F               	clrf	?_readEEPROM+1,c
 20307  001E4C  0E6A               	movlw	106
 20308  001E4E  6E0E               	movwf	?_readEEPROM,c
 20309  001E50  EC62  F02A         	call	_readEEPROM	;wreg free
 20310  001E54  D2AC               	goto	L53
 20311  001E56                     l10662:
 20312                           
 20313                           ; BSR set to: 0
 20314                           ;main.c: 1572: rv = readEEPROM(0x6B);
 20315  001E56  6A0F               	clrf	?_readEEPROM+1,c
 20316  001E58  0E6B               	movlw	107
 20317  001E5A  6E0E               	movwf	?_readEEPROM,c
 20318  001E5C  EC62  F02A         	call	_readEEPROM	;wreg free
 20319  001E60  D2A6               	goto	L53
 20320  001E62                     l10664:
 20321                           
 20322                           ; BSR set to: 0
 20323                           ;main.c: 1577: rv = readEEPROM(0x6C);
 20324  001E62  6A0F               	clrf	?_readEEPROM+1,c
 20325  001E64  0E6C               	movlw	108
 20326  001E66  6E0E               	movwf	?_readEEPROM,c
 20327  001E68  EC62  F02A         	call	_readEEPROM	;wreg free
 20328  001E6C  D2A0               	goto	L53
 20329  001E6E                     l10666:
 20330                           
 20331                           ; BSR set to: 0
 20332                           ;main.c: 1582: rv = readEEPROM(0x6D);
 20333  001E6E  6A0F               	clrf	?_readEEPROM+1,c
 20334  001E70  0E6D               	movlw	109
 20335  001E72  6E0E               	movwf	?_readEEPROM,c
 20336  001E74  EC62  F02A         	call	_readEEPROM	;wreg free
 20337  001E78  D29A               	goto	L53
 20338  001E7A                     l10668:
 20339                           
 20340                           ; BSR set to: 0
 20341                           ;main.c: 1587: rv = readEEPROM(0x6E);
 20342  001E7A  6A0F               	clrf	?_readEEPROM+1,c
 20343  001E7C  0E6E               	movlw	110
 20344  001E7E  6E0E               	movwf	?_readEEPROM,c
 20345  001E80  EC62  F02A         	call	_readEEPROM	;wreg free
 20346  001E84  D294               	goto	L53
 20347  001E86                     l10670:
 20348                           
 20349                           ; BSR set to: 0
 20350                           ;main.c: 1592: rv = readEEPROM(0x6F);
 20351  001E86  6A0F               	clrf	?_readEEPROM+1,c
 20352  001E88  0E6F               	movlw	111
 20353  001E8A  6E0E               	movwf	?_readEEPROM,c
 20354  001E8C  EC62  F02A         	call	_readEEPROM	;wreg free
 20355  001E90  D28E               	goto	L53
 20356  001E92                     l10672:
 20357                           
 20358                           ; BSR set to: 0
 20359                           ;main.c: 1597: rv = readEEPROM(0x70);
 20360  001E92  6A0F               	clrf	?_readEEPROM+1,c
 20361  001E94  0E70               	movlw	112
 20362  001E96  6E0E               	movwf	?_readEEPROM,c
 20363  001E98  EC62  F02A         	call	_readEEPROM	;wreg free
 20364  001E9C  D288               	goto	L53
 20365  001E9E                     l10674:
 20366                           
 20367                           ; BSR set to: 0
 20368                           ;main.c: 1602: rv = readEEPROM(0x71);
 20369  001E9E  6A0F               	clrf	?_readEEPROM+1,c
 20370  001EA0  0E71               	movlw	113
 20371  001EA2  6E0E               	movwf	?_readEEPROM,c
 20372  001EA4  EC62  F02A         	call	_readEEPROM	;wreg free
 20373  001EA8  D282               	goto	L53
 20374  001EAA                     l10676:
 20375                           
 20376                           ; BSR set to: 0
 20377                           ;main.c: 1607: rv = readEEPROM(0x72);
 20378  001EAA  6A0F               	clrf	?_readEEPROM+1,c
 20379  001EAC  0E72               	movlw	114
 20380  001EAE  6E0E               	movwf	?_readEEPROM,c
 20381  001EB0  EC62  F02A         	call	_readEEPROM	;wreg free
 20382  001EB4  D27C               	goto	L53
 20383  001EB6                     l10678:
 20384                           
 20385                           ; BSR set to: 0
 20386                           ;main.c: 1616: rv = readEEPROM(0x73);
 20387  001EB6  6A0F               	clrf	?_readEEPROM+1,c
 20388  001EB8  0E73               	movlw	115
 20389  001EBA  6E0E               	movwf	?_readEEPROM,c
 20390  001EBC  EC62  F02A         	call	_readEEPROM	;wreg free
 20391  001EC0  D276               	goto	L53
 20392  001EC2                     l10680:
 20393                           
 20394                           ; BSR set to: 0
 20395                           ;main.c: 1621: rv = readEEPROM(0x74);
 20396  001EC2  6A0F               	clrf	?_readEEPROM+1,c
 20397  001EC4  0E74               	movlw	116
 20398  001EC6  6E0E               	movwf	?_readEEPROM,c
 20399  001EC8  EC62  F02A         	call	_readEEPROM	;wreg free
 20400  001ECC  D270               	goto	L53
 20401  001ECE                     l10682:
 20402                           
 20403                           ; BSR set to: 0
 20404                           ;main.c: 1626: rv = readEEPROM(0x75);
 20405  001ECE  6A0F               	clrf	?_readEEPROM+1,c
 20406  001ED0  0E75               	movlw	117
 20407  001ED2  6E0E               	movwf	?_readEEPROM,c
 20408  001ED4  EC62  F02A         	call	_readEEPROM	;wreg free
 20409  001ED8  D26A               	goto	L53
 20410  001EDA                     l10684:
 20411                           
 20412                           ; BSR set to: 0
 20413                           ;main.c: 1631: rv = readEEPROM(0x76);
 20414  001EDA  6A0F               	clrf	?_readEEPROM+1,c
 20415  001EDC  0E76               	movlw	118
 20416  001EDE  6E0E               	movwf	?_readEEPROM,c
 20417  001EE0  EC62  F02A         	call	_readEEPROM	;wreg free
 20418  001EE4  D264               	goto	L53
 20419  001EE6                     l10686:
 20420                           
 20421                           ; BSR set to: 0
 20422                           ;main.c: 1636: rv = readEEPROM(0x77);
 20423  001EE6  6A0F               	clrf	?_readEEPROM+1,c
 20424  001EE8  0E77               	movlw	119
 20425  001EEA  6E0E               	movwf	?_readEEPROM,c
 20426  001EEC  EC62  F02A         	call	_readEEPROM	;wreg free
 20427  001EF0  D25E               	goto	L53
 20428  001EF2                     l10688:
 20429                           
 20430                           ; BSR set to: 0
 20431                           ;main.c: 1641: rv = readEEPROM(0x78);
 20432  001EF2  6A0F               	clrf	?_readEEPROM+1,c
 20433  001EF4  0E78               	movlw	120
 20434  001EF6  6E0E               	movwf	?_readEEPROM,c
 20435  001EF8  EC62  F02A         	call	_readEEPROM	;wreg free
 20436  001EFC  D258               	goto	L53
 20437  001EFE                     l10690:
 20438                           
 20439                           ; BSR set to: 0
 20440                           ;main.c: 1646: rv = readEEPROM(0x79);
 20441  001EFE  6A0F               	clrf	?_readEEPROM+1,c
 20442  001F00  0E79               	movlw	121
 20443  001F02  6E0E               	movwf	?_readEEPROM,c
 20444  001F04  EC62  F02A         	call	_readEEPROM	;wreg free
 20445  001F08  D252               	goto	L53
 20446  001F0A                     l10692:
 20447                           
 20448                           ; BSR set to: 0
 20449                           ;main.c: 1651: rv = readEEPROM(0x7A);
 20450  001F0A  6A0F               	clrf	?_readEEPROM+1,c
 20451  001F0C  0E7A               	movlw	122
 20452  001F0E  6E0E               	movwf	?_readEEPROM,c
 20453  001F10  EC62  F02A         	call	_readEEPROM	;wreg free
 20454  001F14  D24C               	goto	L53
 20455  001F16                     l10694:
 20456                           
 20457                           ; BSR set to: 0
 20458                           ;main.c: 1656: rv = readEEPROM(0x7B);
 20459  001F16  6A0F               	clrf	?_readEEPROM+1,c
 20460  001F18  0E7B               	movlw	123
 20461  001F1A  6E0E               	movwf	?_readEEPROM,c
 20462  001F1C  EC62  F02A         	call	_readEEPROM	;wreg free
 20463  001F20  D246               	goto	L53
 20464  001F22                     l10696:
 20465                           
 20466                           ; BSR set to: 0
 20467                           ;main.c: 1661: rv = readEEPROM(0x7C);
 20468  001F22  6A0F               	clrf	?_readEEPROM+1,c
 20469  001F24  0E7C               	movlw	124
 20470  001F26  6E0E               	movwf	?_readEEPROM,c
 20471  001F28  EC62  F02A         	call	_readEEPROM	;wreg free
 20472  001F2C  D240               	goto	L53
 20473  001F2E                     l10698:
 20474                           
 20475                           ; BSR set to: 0
 20476                           ;main.c: 1666: rv = readEEPROM(0x7D);
 20477  001F2E  6A0F               	clrf	?_readEEPROM+1,c
 20478  001F30  0E7D               	movlw	125
 20479  001F32  6E0E               	movwf	?_readEEPROM,c
 20480  001F34  EC62  F02A         	call	_readEEPROM	;wreg free
 20481  001F38  D23A               	goto	L53
 20482  001F3A                     l10700:
 20483                           
 20484                           ; BSR set to: 0
 20485                           ;main.c: 1671: rv = readEEPROM(0x7E);
 20486  001F3A  6A0F               	clrf	?_readEEPROM+1,c
 20487  001F3C  0E7E               	movlw	126
 20488  001F3E  6E0E               	movwf	?_readEEPROM,c
 20489  001F40  EC62  F02A         	call	_readEEPROM	;wreg free
 20490  001F44  D234               	goto	L53
 20491  001F46                     l10702:
 20492                           
 20493                           ; BSR set to: 0
 20494                           ;main.c: 1680: rv = readEEPROM(0x7F);
 20495  001F46  6A0F               	clrf	?_readEEPROM+1,c
 20496  001F48  0E7F               	movlw	127
 20497  001F4A  6E0E               	movwf	?_readEEPROM,c
 20498  001F4C  EC62  F02A         	call	_readEEPROM	;wreg free
 20499  001F50  D22E               	goto	L53
 20500  001F52                     l10704:
 20501                           
 20502                           ; BSR set to: 0
 20503                           ;main.c: 1685: rv = readEEPROM(0x80);
 20504  001F52  6A0F               	clrf	?_readEEPROM+1,c
 20505  001F54  0E80               	movlw	128
 20506  001F56  6E0E               	movwf	?_readEEPROM,c
 20507  001F58  EC62  F02A         	call	_readEEPROM	;wreg free
 20508  001F5C  D228               	goto	L53
 20509  001F5E                     l10706:
 20510                           
 20511                           ; BSR set to: 0
 20512                           ;main.c: 1690: rv = readEEPROM(0x81);
 20513  001F5E  6A0F               	clrf	?_readEEPROM+1,c
 20514  001F60  0E81               	movlw	129
 20515  001F62  6E0E               	movwf	?_readEEPROM,c
 20516  001F64  EC62  F02A         	call	_readEEPROM	;wreg free
 20517  001F68  D222               	goto	L53
 20518  001F6A                     l10708:
 20519                           
 20520                           ; BSR set to: 0
 20521                           ;main.c: 1695: rv = readEEPROM(0x82);
 20522  001F6A  6A0F               	clrf	?_readEEPROM+1,c
 20523  001F6C  0E82               	movlw	130
 20524  001F6E  6E0E               	movwf	?_readEEPROM,c
 20525  001F70  EC62  F02A         	call	_readEEPROM	;wreg free
 20526  001F74  D21C               	goto	L53
 20527  001F76                     l10710:
 20528                           
 20529                           ; BSR set to: 0
 20530                           ;main.c: 1700: rv = readEEPROM(0x83);
 20531  001F76  6A0F               	clrf	?_readEEPROM+1,c
 20532  001F78  0E83               	movlw	131
 20533  001F7A  6E0E               	movwf	?_readEEPROM,c
 20534  001F7C  EC62  F02A         	call	_readEEPROM	;wreg free
 20535  001F80  D216               	goto	L53
 20536  001F82                     l10712:
 20537                           
 20538                           ; BSR set to: 0
 20539                           ;main.c: 1705: rv = readEEPROM(0x84);
 20540  001F82  6A0F               	clrf	?_readEEPROM+1,c
 20541  001F84  0E84               	movlw	132
 20542  001F86  6E0E               	movwf	?_readEEPROM,c
 20543  001F88  EC62  F02A         	call	_readEEPROM	;wreg free
 20544  001F8C  D210               	goto	L53
 20545  001F8E                     l10714:
 20546                           
 20547                           ; BSR set to: 0
 20548                           ;main.c: 1710: rv = readEEPROM(0x85);
 20549  001F8E  6A0F               	clrf	?_readEEPROM+1,c
 20550  001F90  0E85               	movlw	133
 20551  001F92  6E0E               	movwf	?_readEEPROM,c
 20552  001F94  EC62  F02A         	call	_readEEPROM	;wreg free
 20553  001F98  D20A               	goto	L53
 20554  001F9A                     l10716:
 20555                           
 20556                           ; BSR set to: 0
 20557                           ;main.c: 1715: rv = readEEPROM(0x86);
 20558  001F9A  6A0F               	clrf	?_readEEPROM+1,c
 20559  001F9C  0E86               	movlw	134
 20560  001F9E  6E0E               	movwf	?_readEEPROM,c
 20561  001FA0  EC62  F02A         	call	_readEEPROM	;wreg free
 20562  001FA4  D204               	goto	L53
 20563  001FA6                     l10718:
 20564                           
 20565                           ; BSR set to: 0
 20566                           ;main.c: 1720: rv = readEEPROM(0x87);
 20567  001FA6  6A0F               	clrf	?_readEEPROM+1,c
 20568  001FA8  0E87               	movlw	135
 20569  001FAA  6E0E               	movwf	?_readEEPROM,c
 20570  001FAC  EC62  F02A         	call	_readEEPROM	;wreg free
 20571  001FB0  D1FE               	goto	L53
 20572  001FB2                     l10720:
 20573                           
 20574                           ; BSR set to: 0
 20575                           ;main.c: 1725: rv = readEEPROM(0x88);
 20576  001FB2  6A0F               	clrf	?_readEEPROM+1,c
 20577  001FB4  0E88               	movlw	136
 20578  001FB6  6E0E               	movwf	?_readEEPROM,c
 20579  001FB8  EC62  F02A         	call	_readEEPROM	;wreg free
 20580  001FBC  D1F8               	goto	L53
 20581  001FBE                     l10722:
 20582                           
 20583                           ; BSR set to: 0
 20584                           ;main.c: 1730: rv = readEEPROM(0x89);
 20585  001FBE  6A0F               	clrf	?_readEEPROM+1,c
 20586  001FC0  0E89               	movlw	137
 20587  001FC2  6E0E               	movwf	?_readEEPROM,c
 20588  001FC4  EC62  F02A         	call	_readEEPROM	;wreg free
 20589  001FC8  D1F2               	goto	L53
 20590  001FCA                     l10724:
 20591                           
 20592                           ; BSR set to: 0
 20593                           ;main.c: 1735: rv = readEEPROM(0x8A);
 20594  001FCA  6A0F               	clrf	?_readEEPROM+1,c
 20595  001FCC  0E8A               	movlw	138
 20596  001FCE  6E0E               	movwf	?_readEEPROM,c
 20597  001FD0  EC62  F02A         	call	_readEEPROM	;wreg free
 20598  001FD4  D1EC               	goto	L53
 20599  001FD6                     l10726:
 20600                           
 20601                           ; BSR set to: 0
 20602                           ;main.c: 1744: rv = readEEPROM(0x8B);
 20603  001FD6  6A0F               	clrf	?_readEEPROM+1,c
 20604  001FD8  0E8B               	movlw	139
 20605  001FDA  6E0E               	movwf	?_readEEPROM,c
 20606  001FDC  EC62  F02A         	call	_readEEPROM	;wreg free
 20607  001FE0  D1E6               	goto	L53
 20608  001FE2                     l10728:
 20609                           
 20610                           ; BSR set to: 0
 20611                           ;main.c: 1749: rv = readEEPROM(0x8C);
 20612  001FE2  6A0F               	clrf	?_readEEPROM+1,c
 20613  001FE4  0E8C               	movlw	140
 20614  001FE6  6E0E               	movwf	?_readEEPROM,c
 20615  001FE8  EC62  F02A         	call	_readEEPROM	;wreg free
 20616  001FEC  D1E0               	goto	L53
 20617  001FEE                     l10730:
 20618                           
 20619                           ; BSR set to: 0
 20620                           ;main.c: 1754: rv = readEEPROM(0x8D);
 20621  001FEE  6A0F               	clrf	?_readEEPROM+1,c
 20622  001FF0  0E8D               	movlw	141
 20623  001FF2  6E0E               	movwf	?_readEEPROM,c
 20624  001FF4  EC62  F02A         	call	_readEEPROM	;wreg free
 20625  001FF8  D1DA               	goto	L53
 20626  001FFA                     l10732:
 20627                           
 20628                           ; BSR set to: 0
 20629                           ;main.c: 1759: rv = readEEPROM(0x8E);
 20630  001FFA  6A0F               	clrf	?_readEEPROM+1,c
 20631  001FFC  0E8E               	movlw	142
 20632  001FFE  6E0E               	movwf	?_readEEPROM,c
 20633  002000  EC62  F02A         	call	_readEEPROM	;wreg free
 20634  002004  D1D4               	goto	L53
 20635  002006                     l10734:
 20636                           
 20637                           ; BSR set to: 0
 20638                           ;main.c: 1764: rv = readEEPROM(0x8F);
 20639  002006  6A0F               	clrf	?_readEEPROM+1,c
 20640  002008  0E8F               	movlw	143
 20641  00200A  6E0E               	movwf	?_readEEPROM,c
 20642  00200C  EC62  F02A         	call	_readEEPROM	;wreg free
 20643  002010  D1CE               	goto	L53
 20644  002012                     l10736:
 20645                           
 20646                           ; BSR set to: 0
 20647                           ;main.c: 1769: rv = readEEPROM(0x90);
 20648  002012  6A0F               	clrf	?_readEEPROM+1,c
 20649  002014  0E90               	movlw	144
 20650  002016  6E0E               	movwf	?_readEEPROM,c
 20651  002018  EC62  F02A         	call	_readEEPROM	;wreg free
 20652  00201C  D1C8               	goto	L53
 20653  00201E                     l10738:
 20654                           
 20655                           ; BSR set to: 0
 20656                           ;main.c: 1774: rv = readEEPROM(0x91);
 20657  00201E  6A0F               	clrf	?_readEEPROM+1,c
 20658  002020  0E91               	movlw	145
 20659  002022  6E0E               	movwf	?_readEEPROM,c
 20660  002024  EC62  F02A         	call	_readEEPROM	;wreg free
 20661  002028  D1C2               	goto	L53
 20662  00202A                     l10740:
 20663                           
 20664                           ; BSR set to: 0
 20665                           ;main.c: 1779: rv = readEEPROM(0x92);
 20666  00202A  6A0F               	clrf	?_readEEPROM+1,c
 20667  00202C  0E92               	movlw	146
 20668  00202E  6E0E               	movwf	?_readEEPROM,c
 20669  002030  EC62  F02A         	call	_readEEPROM	;wreg free
 20670  002034  D1BC               	goto	L53
 20671  002036                     l10742:
 20672                           
 20673                           ; BSR set to: 0
 20674                           ;main.c: 1784: rv = readEEPROM(0x93);
 20675  002036  6A0F               	clrf	?_readEEPROM+1,c
 20676  002038  0E93               	movlw	147
 20677  00203A  6E0E               	movwf	?_readEEPROM,c
 20678  00203C  EC62  F02A         	call	_readEEPROM	;wreg free
 20679  002040  D1B6               	goto	L53
 20680  002042                     l10744:
 20681                           
 20682                           ; BSR set to: 0
 20683                           ;main.c: 1789: rv = readEEPROM(0x94);
 20684  002042  6A0F               	clrf	?_readEEPROM+1,c
 20685  002044  0E94               	movlw	148
 20686  002046  6E0E               	movwf	?_readEEPROM,c
 20687  002048  EC62  F02A         	call	_readEEPROM	;wreg free
 20688  00204C  D1B0               	goto	L53
 20689  00204E                     l10746:
 20690                           
 20691                           ; BSR set to: 0
 20692                           ;main.c: 1794: rv = readEEPROM(0x95);
 20693  00204E  6A0F               	clrf	?_readEEPROM+1,c
 20694  002050  0E95               	movlw	149
 20695  002052  6E0E               	movwf	?_readEEPROM,c
 20696  002054  EC62  F02A         	call	_readEEPROM	;wreg free
 20697  002058  D1AA               	goto	L53
 20698  00205A                     l10748:
 20699                           
 20700                           ; BSR set to: 0
 20701                           ;main.c: 1799: rv = readEEPROM(0x96);
 20702  00205A  6A0F               	clrf	?_readEEPROM+1,c
 20703  00205C  0E96               	movlw	150
 20704  00205E  6E0E               	movwf	?_readEEPROM,c
 20705  002060  EC62  F02A         	call	_readEEPROM	;wreg free
 20706  002064  D1A4               	goto	L53
 20707  002066                     l10750:
 20708                           
 20709                           ; BSR set to: 0
 20710                           ;main.c: 1809: rv = readEEPROM(0x97);
 20711  002066  6A0F               	clrf	?_readEEPROM+1,c
 20712  002068  0E97               	movlw	151
 20713  00206A  6E0E               	movwf	?_readEEPROM,c
 20714  00206C  EC62  F02A         	call	_readEEPROM	;wreg free
 20715  002070  D19E               	goto	L53
 20716  002072                     l10752:
 20717                           
 20718                           ; BSR set to: 0
 20719                           ;main.c: 1814: rv = readEEPROM(0x98);
 20720  002072  6A0F               	clrf	?_readEEPROM+1,c
 20721  002074  0E98               	movlw	152
 20722  002076  6E0E               	movwf	?_readEEPROM,c
 20723  002078  EC62  F02A         	call	_readEEPROM	;wreg free
 20724  00207C  D198               	goto	L53
 20725  00207E                     l10754:
 20726                           
 20727                           ; BSR set to: 0
 20728                           ;main.c: 1819: rv = readEEPROM(0x99);
 20729  00207E  6A0F               	clrf	?_readEEPROM+1,c
 20730  002080  0E99               	movlw	153
 20731  002082  6E0E               	movwf	?_readEEPROM,c
 20732  002084  EC62  F02A         	call	_readEEPROM	;wreg free
 20733  002088  D192               	goto	L53
 20734  00208A                     l10756:
 20735                           
 20736                           ; BSR set to: 0
 20737                           ;main.c: 1824: rv = readEEPROM(0x9A);
 20738  00208A  6A0F               	clrf	?_readEEPROM+1,c
 20739  00208C  0E9A               	movlw	154
 20740  00208E  6E0E               	movwf	?_readEEPROM,c
 20741  002090  EC62  F02A         	call	_readEEPROM	;wreg free
 20742  002094  D18C               	goto	L53
 20743  002096                     l10758:
 20744                           
 20745                           ; BSR set to: 0
 20746                           ;main.c: 1829: rv = readEEPROM(0x9B);
 20747  002096  6A0F               	clrf	?_readEEPROM+1,c
 20748  002098  0E9B               	movlw	155
 20749  00209A  6E0E               	movwf	?_readEEPROM,c
 20750  00209C  EC62  F02A         	call	_readEEPROM	;wreg free
 20751  0020A0  D186               	goto	L53
 20752  0020A2                     l10760:
 20753                           
 20754                           ; BSR set to: 0
 20755                           ;main.c: 1834: rv = readEEPROM(0x9C);
 20756  0020A2  6A0F               	clrf	?_readEEPROM+1,c
 20757  0020A4  0E9C               	movlw	156
 20758  0020A6  6E0E               	movwf	?_readEEPROM,c
 20759  0020A8  EC62  F02A         	call	_readEEPROM	;wreg free
 20760  0020AC  D180               	goto	L53
 20761  0020AE                     l410:
 20762                           
 20763                           ; BSR set to: 0
 20764                           ;main.c: 1839: rv = 0;
 20765  0020AE  6A14               	clrf	vscp_readAppReg@rv,c
 20766                           
 20767                           ;main.c: 1840: break;
 20768  0020B0  D17F               	goto	l10792
 20769  0020B2                     l10762:
 20770                           
 20771                           ; BSR set to: 0
 20772                           ;main.c: 1848: rv = readEEPROM(0xF2);
 20773  0020B2  6A0F               	clrf	?_readEEPROM+1,c
 20774  0020B4  0EF2               	movlw	242
 20775  0020B6  6E0E               	movwf	?_readEEPROM,c
 20776  0020B8  EC62  F02A         	call	_readEEPROM	;wreg free
 20777  0020BC  D178               	goto	L53
 20778  0020BE                     l10764:
 20779                           
 20780                           ; BSR set to: 0
 20781                           ;main.c: 1852: rv = readEEPROM(0xF3);
 20782  0020BE  6A0F               	clrf	?_readEEPROM+1,c
 20783  0020C0  0EF3               	movlw	243
 20784  0020C2  6E0E               	movwf	?_readEEPROM,c
 20785  0020C4  EC62  F02A         	call	_readEEPROM	;wreg free
 20786  0020C8  D172               	goto	L53
 20787  0020CA                     l10768:
 20788                           
 20789                           ; BSR set to: 0
 20790  0020CA  5013               	movf	vscp_readAppReg@reg,w,c
 20791                           
 20792                           ; Switch size 1, requested type "space"
 20793                           ; Number of cases is 108, Range of values is 0 to 119
 20794                           ; switch strategies available:
 20795                           ; Name         Instructions Cycles
 20796                           ; simple_byte          325   163 (average)
 20797                           ;	Chosen strategy is simple_byte
 20798  0020CC  E101 D5AE          	bz	l10566
 20799  0020D0  0A01               	xorlw	1	; case 1
 20800  0020D2  E101 D5B1          	bz	l10568
 20801  0020D6  0A03               	xorlw	3	; case 2
 20802  0020D8  E101 D5B4          	bz	l10570
 20803  0020DC  0A01               	xorlw	1	; case 3
 20804  0020DE  E101 D5B7          	bz	l10572
 20805  0020E2  0A07               	xorlw	7	; case 4
 20806  0020E4  E101 D5BA          	bz	l10574
 20807  0020E8  0A01               	xorlw	1	; case 5
 20808  0020EA  E101 D5BD          	bz	l10576
 20809  0020EE  0A03               	xorlw	3	; case 6
 20810  0020F0  E101 D5C0          	bz	l10578
 20811  0020F4  0A01               	xorlw	1	; case 7
 20812  0020F6  E101 D5C3          	bz	l10580
 20813  0020FA  0A0F               	xorlw	15	; case 8
 20814  0020FC  E101 D5C6          	bz	l10582
 20815  002100  0A01               	xorlw	1	; case 9
 20816  002102  E101 D5C5          	bz	l315
 20817  002106  0A03               	xorlw	3	; case 10
 20818  002108  E101 D5C5          	bz	l10584
 20819  00210C  0A01               	xorlw	1	; case 11
 20820  00210E  E101 D5C4          	bz	l317
 20821  002112  0A07               	xorlw	7	; case 12
 20822  002114  E101 D5C4          	bz	l10586
 20823  002118  0A01               	xorlw	1	; case 13
 20824  00211A  E101 D5C3          	bz	l319
 20825  00211E  0A03               	xorlw	3	; case 14
 20826  002120  E101 D5C3          	bz	l10588
 20827  002124  0A01               	xorlw	1	; case 15
 20828  002126  E101 D5C2          	bz	l321
 20829  00212A  0A1F               	xorlw	31	; case 16
 20830  00212C  E101 D5C2          	bz	l10590
 20831  002130  0A01               	xorlw	1	; case 17
 20832  002132  E101 D5C1          	bz	l323
 20833  002136  0A03               	xorlw	3	; case 18
 20834  002138  E101 D5BC          	bz	l10590
 20835  00213C  0A01               	xorlw	1	; case 19
 20836  00213E  E101 D5BB          	bz	l323
 20837  002142  0A07               	xorlw	7	; case 20
 20838  002144  E101 D5BB          	bz	l10594
 20839  002148  0A01               	xorlw	1	; case 21
 20840  00214A  E101 D5BE          	bz	l10596
 20841  00214E  0A03               	xorlw	3	; case 22
 20842  002150  E101 D5C1          	bz	l10598
 20843  002154  0A01               	xorlw	1	; case 23
 20844  002156  E101 D5C4          	bz	l10600
 20845  00215A  0A0F               	xorlw	15	; case 24
 20846  00215C  E101 D5C7          	bz	l10602
 20847  002160  0A01               	xorlw	1	; case 25
 20848  002162  E101 D5CA          	bz	l10604
 20849  002166  0A3F               	xorlw	63	; case 38
 20850  002168  E101 D5CD          	bz	l10606
 20851  00216C  0A01               	xorlw	1	; case 39
 20852  00216E  E101 D5D0          	bz	l10608
 20853  002172  0A0F               	xorlw	15	; case 40
 20854  002174  E101 D5D3          	bz	l10610
 20855  002178  0A01               	xorlw	1	; case 41
 20856  00217A  E101 D5D6          	bz	l10612
 20857  00217E  0A03               	xorlw	3	; case 42
 20858  002180  E101 D5D9          	bz	l10614
 20859  002184  0A01               	xorlw	1	; case 43
 20860  002186  E101 D5DC          	bz	l10616
 20861  00218A  0A07               	xorlw	7	; case 44
 20862  00218C  E101 D5DF          	bz	l10618
 20863  002190  0A01               	xorlw	1	; case 45
 20864  002192  E101 D5E2          	bz	l10620
 20865  002196  0A03               	xorlw	3	; case 46
 20866  002198  E101 D5E5          	bz	l10622
 20867  00219C  0A01               	xorlw	1	; case 47
 20868  00219E  E101 D5E8          	bz	l10624
 20869  0021A2  0A1F               	xorlw	31	; case 48
 20870  0021A4  E101 D5EB          	bz	l10626
 20871  0021A8  0A01               	xorlw	1	; case 49
 20872  0021AA  E101 D5EE          	bz	l10628
 20873  0021AE  0A03               	xorlw	3	; case 50
 20874  0021B0  E101 D5F1          	bz	l10630
 20875  0021B4  0A01               	xorlw	1	; case 51
 20876  0021B6  E101 D5F4          	bz	l10632
 20877  0021BA  0A07               	xorlw	7	; case 52
 20878  0021BC  E101 D5F7          	bz	l10634
 20879  0021C0  0A01               	xorlw	1	; case 53
 20880  0021C2  E101 D5FA          	bz	l10636
 20881  0021C6  0A03               	xorlw	3	; case 54
 20882  0021C8  E101 D5FD          	bz	l10638
 20883  0021CC  0A01               	xorlw	1	; case 55
 20884  0021CE  E101 D600          	bz	l10640
 20885  0021D2  0A0F               	xorlw	15	; case 56
 20886  0021D4  E101 D603          	bz	l10642
 20887  0021D8  0A01               	xorlw	1	; case 57
 20888  0021DA  E101 D606          	bz	l10644
 20889  0021DE  0A03               	xorlw	3	; case 58
 20890  0021E0  E101 D609          	bz	l10646
 20891  0021E4  0A01               	xorlw	1	; case 59
 20892  0021E6  E101 D60C          	bz	l10648
 20893  0021EA  0A07               	xorlw	7	; case 60
 20894  0021EC  E101 D60F          	bz	l10650
 20895  0021F0  0A01               	xorlw	1	; case 61
 20896  0021F2  E101 D612          	bz	l10652
 20897  0021F6  0A03               	xorlw	3	; case 62
 20898  0021F8  E101 D615          	bz	l10654
 20899  0021FC  0A01               	xorlw	1	; case 63
 20900  0021FE  E101 D618          	bz	l10656
 20901  002202  0A7F               	xorlw	127	; case 64
 20902  002204  E101 D61B          	bz	l10658
 20903  002208  0A01               	xorlw	1	; case 65
 20904  00220A  E101 D61E          	bz	l10660
 20905  00220E  0A03               	xorlw	3	; case 66
 20906  002210  E101 D621          	bz	l10662
 20907  002214  0A01               	xorlw	1	; case 67
 20908  002216  E101 D624          	bz	l10664
 20909  00221A  0A07               	xorlw	7	; case 68
 20910  00221C  E101 D627          	bz	l10666
 20911  002220  0A01               	xorlw	1	; case 69
 20912  002222  E101 D62A          	bz	l10668
 20913  002226  0A03               	xorlw	3	; case 70
 20914  002228  E101 D62D          	bz	l10670
 20915  00222C  0A01               	xorlw	1	; case 71
 20916  00222E  E101 D630          	bz	l10672
 20917  002232  0A0F               	xorlw	15	; case 72
 20918  002234  E101 D633          	bz	l10674
 20919  002238  0A01               	xorlw	1	; case 73
 20920  00223A  E101 D636          	bz	l10676
 20921  00223E  0A03               	xorlw	3	; case 74
 20922  002240  E101 D639          	bz	l10678
 20923  002244  0A01               	xorlw	1	; case 75
 20924  002246  E101 D63C          	bz	l10680
 20925  00224A  0A07               	xorlw	7	; case 76
 20926  00224C  E101 D63F          	bz	l10682
 20927  002250  0A01               	xorlw	1	; case 77
 20928  002252  E101 D642          	bz	l10684
 20929  002256  0A03               	xorlw	3	; case 78
 20930  002258  E101 D645          	bz	l10686
 20931  00225C  0A01               	xorlw	1	; case 79
 20932  00225E  E101 D648          	bz	l10688
 20933  002262  0A1F               	xorlw	31	; case 80
 20934  002264  E101 D64B          	bz	l10690
 20935  002268  0A01               	xorlw	1	; case 81
 20936  00226A  E101 D64E          	bz	l10692
 20937  00226E  0A03               	xorlw	3	; case 82
 20938  002270  E101 D651          	bz	l10694
 20939  002274  0A01               	xorlw	1	; case 83
 20940  002276  E101 D654          	bz	l10696
 20941  00227A  0A07               	xorlw	7	; case 84
 20942  00227C  E101 D657          	bz	l10698
 20943  002280  0A01               	xorlw	1	; case 85
 20944  002282  E101 D65A          	bz	l10700
 20945  002286  0A03               	xorlw	3	; case 86
 20946  002288  E101 D65D          	bz	l10702
 20947  00228C  0A01               	xorlw	1	; case 87
 20948  00228E  E101 D660          	bz	l10704
 20949  002292  0A0F               	xorlw	15	; case 88
 20950  002294  E101 D663          	bz	l10706
 20951  002298  0A01               	xorlw	1	; case 89
 20952  00229A  E101 D666          	bz	l10708
 20953  00229E  0A03               	xorlw	3	; case 90
 20954  0022A0  E101 D669          	bz	l10710
 20955  0022A4  0A01               	xorlw	1	; case 91
 20956  0022A6  E101 D66C          	bz	l10712
 20957  0022AA  0A07               	xorlw	7	; case 92
 20958  0022AC  E101 D66F          	bz	l10714
 20959  0022B0  0A01               	xorlw	1	; case 93
 20960  0022B2  E101 D672          	bz	l10716
 20961  0022B6  0A03               	xorlw	3	; case 94
 20962  0022B8  E101 D675          	bz	l10718
 20963  0022BC  0A01               	xorlw	1	; case 95
 20964  0022BE  E101 D678          	bz	l10720
 20965  0022C2  0A3F               	xorlw	63	; case 96
 20966  0022C4  E101 D67B          	bz	l10722
 20967  0022C8  0A01               	xorlw	1	; case 97
 20968  0022CA  E101 D67E          	bz	l10724
 20969  0022CE  0A03               	xorlw	3	; case 98
 20970  0022D0  E101 D681          	bz	l10726
 20971  0022D4  0A01               	xorlw	1	; case 99
 20972  0022D6  E101 D684          	bz	l10728
 20973  0022DA  0A07               	xorlw	7	; case 100
 20974  0022DC  E101 D687          	bz	l10730
 20975  0022E0  0A01               	xorlw	1	; case 101
 20976  0022E2  E101 D68A          	bz	l10732
 20977  0022E6  0A03               	xorlw	3	; case 102
 20978  0022E8  E101 D68D          	bz	l10734
 20979  0022EC  0A01               	xorlw	1	; case 103
 20980  0022EE  E101 D690          	bz	l10736
 20981  0022F2  0A0F               	xorlw	15	; case 104
 20982  0022F4  E101 D693          	bz	l10738
 20983  0022F8  0A01               	xorlw	1	; case 105
 20984  0022FA  E101 D696          	bz	l10740
 20985  0022FE  0A03               	xorlw	3	; case 106
 20986  002300  E101 D699          	bz	l10742
 20987  002304  0A01               	xorlw	1	; case 107
 20988  002306  E101 D69C          	bz	l10744
 20989  00230A  0A07               	xorlw	7	; case 108
 20990  00230C  E101 D69F          	bz	l10746
 20991  002310  0A01               	xorlw	1	; case 109
 20992  002312  E101 D6A2          	bz	l10748
 20993  002316  0A03               	xorlw	3	; case 110
 20994  002318  E101 D6A5          	bz	l10750
 20995  00231C  0A01               	xorlw	1	; case 111
 20996  00231E  E101 D6A8          	bz	l10752
 20997  002322  0A1F               	xorlw	31	; case 112
 20998  002324  E101 D6AB          	bz	l10754
 20999  002328  0A01               	xorlw	1	; case 113
 21000  00232A  E101 D6AE          	bz	l10756
 21001  00232E  0A03               	xorlw	3	; case 114
 21002  002330  E101 D6B1          	bz	l10758
 21003  002334  0A01               	xorlw	1	; case 115
 21004  002336  E101 D6B4          	bz	l10760
 21005  00233A  0A07               	xorlw	7	; case 116
 21006  00233C  E101 D6B7          	bz	l410
 21007  002340  0A01               	xorlw	1	; case 117
 21008  002342  E101 D6B4          	bz	l410
 21009  002346  0A03               	xorlw	3	; case 118
 21010  002348  E101 D6B3          	bz	l10762
 21011  00234C  0A01               	xorlw	1	; case 119
 21012  00234E  E101 D6B6          	bz	l10764
 21013  002352  D6AD               	goto	l410
 21014  002354                     l10770:
 21015                           
 21016                           ; BSR set to: 0
 21017                           ;main.c: 1860: else if (1 == vscp_page_select) {
 21018  002354  0446               	decf	_vscp_page_select,w,c
 21019  002356  1047               	iorwf	_vscp_page_select+1,w,c
 21020  002358  E12B               	bnz	l10792
 21021                           
 21022                           ; BSR set to: 0
 21023                           ;main.c: 1862: if (reg < 72) {
 21024  00235A  0E48               	movlw	72
 21025  00235C  6013               	cpfslt	vscp_readAppReg@reg,c
 21026  00235E  D009               	goto	l10776
 21027                           
 21028                           ; BSR set to: 0
 21029                           ;main.c: 1863: rv = readEEPROM(0xAA + reg ) ;
 21030  002360  0EAA               	movlw	170
 21031  002362  2413               	addwf	vscp_readAppReg@reg,w,c
 21032  002364  6E0E               	movwf	?_readEEPROM,c
 21033  002366  6A0F               	clrf	?_readEEPROM+1,c
 21034  002368  0E00               	movlw	0
 21035  00236A  220F               	addwfc	?_readEEPROM+1,f,c
 21036  00236C  EC62  F02A         	call	_readEEPROM	;wreg free
 21037  002370  D01E               	goto	L53
 21038  002372                     l10776:
 21039                           
 21040                           ; BSR set to: 0
 21041                           ;main.c: 1866: else if (reg < 84) {
 21042  002372  0E54               	movlw	84
 21043  002374  6013               	cpfslt	vscp_readAppReg@reg,c
 21044  002376  D010               	goto	l10788
 21045                           
 21046                           ; BSR set to: 0
 21047                           ;main.c: 1868: uint8_t pos = reg - 72;
 21048  002378  5013               	movf	vscp_readAppReg@reg,w,c
 21049  00237A  0FB8               	addlw	184
 21050  00237C  6E12               	movwf	vscp_readAppReg@pos,c
 21051                           
 21052                           ; BSR set to: 0
 21053                           ;main.c: 1869: if ( pos % 2 ) {
 21054  00237E  A012               	btfss	vscp_readAppReg@pos,0,c
 21055  002380  D002               	goto	l10784
 21056                           
 21057                           ; BSR set to: 0
 21058                           ;main.c: 1870: pos--;
 21059  002382  0612               	decf	vscp_readAppReg@pos,f,c
 21060                           
 21061                           ;main.c: 1871: }
 21062  002384  D001               	goto	l10786
 21063  002386                     l10784:
 21064                           
 21065                           ; BSR set to: 0
 21066                           ;main.c: 1872: else {
 21067                           ;main.c: 1873: pos++;
 21068  002386  2A12               	incf	vscp_readAppReg@pos,f,c
 21069  002388                     l10786:
 21070                           
 21071                           ; BSR set to: 0
 21072                           ;main.c: 1874: }
 21073                           ;main.c: 1875: rv = adc[ pos ];
 21074  002388  0E84               	movlw	low _adc
 21075  00238A  2412               	addwf	vscp_readAppReg@pos,w,c
 21076  00238C  6ED9               	movwf	fsr2l,c
 21077  00238E  6ADA               	clrf	fsr2h,c
 21078  002390  0E01               	movlw	high _adc
 21079  002392  22DA               	addwfc	fsr2h,f,c
 21080  002394  50DF               	movf	indf2,w,c
 21081  002396  D00B               	goto	L53
 21082  002398                     l10788:
 21083                           
 21084                           ; BSR set to: 0
 21085                           ;main.c: 1878: else if (reg < 98) {
 21086  002398  0E62               	movlw	98
 21087  00239A  6013               	cpfslt	vscp_readAppReg@reg,c
 21088  00239C  D009               	goto	l10792
 21089                           
 21090                           ; BSR set to: 0
 21091                           ;main.c: 1879: rv = readEEPROM( 0x9E + reg - 84 ) ;
 21092  00239E  0E4A               	movlw	74
 21093  0023A0  2413               	addwf	vscp_readAppReg@reg,w,c
 21094  0023A2  6E0E               	movwf	?_readEEPROM,c
 21095  0023A4  6A0F               	clrf	?_readEEPROM+1,c
 21096  0023A6  0E00               	movlw	0
 21097  0023A8  220F               	addwfc	?_readEEPROM+1,f,c
 21098  0023AA  EC62  F02A         	call	_readEEPROM	;wreg free
 21099  0023AE                     L53:
 21100  0023AE  6E14               	movwf	vscp_readAppReg@rv,c
 21101  0023B0                     l10792:
 21102                           
 21103                           ;main.c: 1880: }
 21104                           ;main.c: 1881: }
 21105                           ;main.c: 1883: return rv;
 21106  0023B0  5014               	movf	vscp_readAppReg@rv,w,c
 21107  0023B2  0012               	return	
 21108  0023B4                     __end_of_vscp_readAppReg:
 21109                           	opt stack 0
 21110                           tblptru	equ	0xFF8
 21111                           tblptrh	equ	0xFF7
 21112                           tblptrl	equ	0xFF6
 21113                           tablat	equ	0xFF5
 21114                           prodh	equ	0xFF4
 21115                           prodl	equ	0xFF3
 21116                           intcon	equ	0xFF2
 21117                           postinc0	equ	0xFEE
 21118                           wreg	equ	0xFE8
 21119                           indf1	equ	0xFE7
 21120                           postdec1	equ	0xFE5
 21121                           fsr1h	equ	0xFE2
 21122                           fsr1l	equ	0xFE1
 21123                           indf2	equ	0xFDF
 21124                           postinc2	equ	0xFDE
 21125                           postdec2	equ	0xFDD
 21126                           plusw2	equ	0xFDB
 21127                           fsr2h	equ	0xFDA
 21128                           fsr2l	equ	0xFD9
 21129                           status	equ	0xFD8
 21130                           
 21131 ;; *************** function _interrupt_at_low_vector *****************
 21132 ;; Defined at:
 21133 ;;		line 135 in file "../main.c"
 21134 ;; Parameters:    Size  Location     Type
 21135 ;;		None
 21136 ;; Auto vars:     Size  Location     Type
 21137 ;;		None
 21138 ;; Return value:  Size  Location     Type
 21139 ;;		None               void
 21140 ;; Registers used:
 21141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21142 ;; Tracked objects:
 21143 ;;		On entry : 0/0
 21144 ;;		On exit  : 0/0
 21145 ;;		Unchanged: 0/0
 21146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21147 ;;      Params:         0       0       0       0       0       0       0
 21148 ;;      Locals:         0       0       0       0       0       0       0
 21149 ;;      Temps:          9       0       0       0       0       0       0
 21150 ;;      Totals:         9       0       0       0       0       0       0
 21151 ;;Total ram usage:        9 bytes
 21152 ;; Hardware stack levels used:    1
 21153 ;; Hardware stack levels required when called:    1
 21154 ;; This function calls:
 21155 ;;		i1_ConvertADC
 21156 ;;		i1_WriteTimer0
 21157 ;; This function is called by:
 21158 ;;		Interrupt level 1
 21159 ;; This function uses a non-reentrant model
 21160 ;;
 21161                           
 21162                           	psect	intcodelo
 21163  000018                     __pintcodelo:
 21164                           	opt stack 0
 21165  000018                     _interrupt_at_low_vector:
 21166                           	opt stack 22
 21167                           
 21168                           ;incstack = 0
 21169  000018  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 21170  00001C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 21171  000020  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 21172  000024  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 21173  000028  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 21174  00002C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 21175  000030  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 21176  000034                     
 21177                           ;main.c: 137: if (INTCONbits.TMR0IF) {
 21178  000034  A4F2               	btfss	intcon,2,c	;volatile
 21179  000036  D001               	goto	i1u716_21
 21180  000038  D001               	goto	i1u716_20
 21181  00003A                     i1u716_21:
 21182  00003A  D044               	goto	i1l9202
 21183  00003C                     i1u716_20:
 21184  00003C                     
 21185                           ;main.c: 140: WriteTimer0(0xfb1d);
 21186  00003C  0EFB               	movlw	251
 21187  00003E  6E02               	movwf	?i1_WriteTimer0+1,c
 21188  000040  0E1D               	movlw	29
 21189  000042  6E01               	movwf	?i1_WriteTimer0,c
 21190  000044  EC90  F02A         	call	i1_WriteTimer0	;wreg free
 21191  000048                     
 21192                           ;main.c: 142: vscp_timer++;
 21193  000048  0100               	movlb	0	; () banked
 21194  00004A  4BB6               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 21195  00004C  2BB7               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 21196  00004E                     
 21197                           ; BSR set to: 0
 21198                           ;main.c: 143: vscp_configtimer++;
 21199  00004E  4BB4               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 21200  000050  2BB5               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 21201  000052                     
 21202                           ; BSR set to: 0
 21203                           ;main.c: 144: measurement_clock++;
 21204  000052  0E01               	movlw	1
 21205  000054  27AC               	addwf	_measurement_clock& (0+255),f,b	;volatile
 21206  000056  0E00               	movlw	0
 21207  000058  23AD               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 21208  00005A  0E00               	movlw	0
 21209  00005C  23AE               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 21210  00005E  0E00               	movlw	0
 21211  000060  23AF               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 21212  000062                     
 21213                           ; BSR set to: 0
 21214                           ;main.c: 145: timeout_clock++;
 21215  000062  0E01               	movlw	1
 21216  000064  27B0               	addwf	_timeout_clock& (0+255),f,b	;volatile
 21217  000066  0E00               	movlw	0
 21218  000068  23B1               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 21219  00006A  0E00               	movlw	0
 21220  00006C  23B2               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 21221  00006E  0E00               	movlw	0
 21222  000070  23B3               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 21223  000072                     
 21224                           ; BSR set to: 0
 21225                           ;main.c: 146: sendTimer++;
 21226  000072  2BBC               	incf	_sendTimer& (0+255),f,b	;volatile
 21227  000074                     
 21228                           ; BSR set to: 0
 21229                           ;main.c: 149: if (!(PORTC & 0x01)) {
 21230  000074  B082               	btfsc	3970,0,c	;volatile
 21231  000076  D001               	goto	i1u717_21
 21232  000078  D001               	goto	i1u717_20
 21233  00007A                     i1u717_21:
 21234  00007A  D002               	goto	i1l138
 21235  00007C                     i1u717_20:
 21236  00007C                     
 21237                           ; BSR set to: 0
 21238                           ;main.c: 151: vscp_initbtncnt++;
 21239  00007C  2BBE               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21240                           
 21241                           ;main.c: 152: }
 21242  00007E  D001               	goto	i1l9176
 21243  000080                     i1l138:
 21244                           
 21245                           ; BSR set to: 0
 21246                           ;main.c: 153: else {
 21247                           ;main.c: 154: vscp_initbtncnt = 0;
 21248  000080  6BBE               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21249  000082                     i1l9176:
 21250                           
 21251                           ; BSR set to: 0
 21252                           ;main.c: 155: }
 21253                           ;main.c: 158: vscp_statuscnt++;
 21254  000082  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21255  000084                     
 21256                           ; BSR set to: 0
 21257                           ;main.c: 159: if ( ( 0x02 ==
 21258                           ;main.c: 160: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21259  000084  504C               	movf	_vscp_initledfunc,w,c
 21260  000086  0A02               	xorlw	2
 21261  000088  A4D8               	btfss	status,2,c
 21262  00008A  D001               	goto	i1u718_21
 21263  00008C  D001               	goto	i1u718_20
 21264  00008E                     i1u718_21:
 21265  00008E  D00E               	goto	i1l9190
 21266  000090                     i1u718_20:
 21267  000090                     
 21268                           ; BSR set to: 0
 21269  000090  0E64               	movlw	100
 21270  000092  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21271  000094  D001               	goto	i1u719_21
 21272  000096  D001               	goto	i1u719_20
 21273  000098                     i1u719_21:
 21274  000098  D009               	goto	i1l9190
 21275  00009A                     i1u719_20:
 21276  00009A                     
 21277                           ; BSR set to: 0
 21278                           ;main.c: 161: if ( PORTC & 0x02 ) {
 21279  00009A  A282               	btfss	3970,1,c	;volatile
 21280  00009C  D001               	goto	i1u720_21
 21281  00009E  D001               	goto	i1u720_20
 21282  0000A0                     i1u720_21:
 21283  0000A0  D002               	goto	i1l9186
 21284  0000A2                     i1u720_20:
 21285  0000A2                     i1l9184:
 21286                           
 21287                           ; BSR set to: 0
 21288                           ;main.c: 162: PORTC &= ~0x02;
 21289  0000A2  9282               	bcf	3970,1,c	;volatile
 21290                           
 21291                           ;main.c: 163: }
 21292  0000A4  D001               	goto	i1l9188
 21293  0000A6                     i1l9186:
 21294                           
 21295                           ; BSR set to: 0
 21296                           ;main.c: 164: else {
 21297                           ;main.c: 165: PORTC |= 0x02;
 21298  0000A6  8282               	bsf	3970,1,c	;volatile
 21299  0000A8                     i1l9188:
 21300                           
 21301                           ; BSR set to: 0
 21302                           ;main.c: 166: }
 21303                           ;main.c: 167: vscp_statuscnt = 0;
 21304  0000A8  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21305                           
 21306                           ;main.c: 168: }
 21307  0000AA  D00B               	goto	i1l9200
 21308  0000AC                     i1l9190:
 21309                           
 21310                           ; BSR set to: 0
 21311                           ;main.c: 169: else if (0x01 == vscp_initledfunc) {
 21312  0000AC  044C               	decf	_vscp_initledfunc,w,c
 21313  0000AE  A4D8               	btfss	status,2,c
 21314  0000B0  D001               	goto	i1u721_21
 21315  0000B2  D001               	goto	i1u721_20
 21316  0000B4                     i1u721_21:
 21317  0000B4  D001               	goto	i1l144
 21318  0000B6                     i1u721_20:
 21319  0000B6  D7F7               	goto	i1l9186
 21320  0000B8                     i1l144:
 21321                           
 21322                           ; BSR set to: 0
 21323                           ;main.c: 173: else if (0x00 == vscp_initledfunc) {
 21324  0000B8  664C               	tstfsz	_vscp_initledfunc,c
 21325  0000BA  D001               	goto	i1u722_21
 21326  0000BC  D001               	goto	i1u722_20
 21327  0000BE                     i1u722_21:
 21328  0000BE  D001               	goto	i1l9200
 21329  0000C0                     i1u722_20:
 21330  0000C0  D7F0               	goto	i1l9184
 21331  0000C2                     i1l9200:
 21332                           
 21333                           ; BSR set to: 0
 21334                           ;main.c: 176: }
 21335                           ;main.c: 178: INTCONbits.TMR0IF = 0;
 21336  0000C2  94F2               	bcf	intcon,2,c	;volatile
 21337  0000C4                     i1l9202:
 21338                           
 21339                           ;main.c: 180: }
 21340                           ;main.c: 183: if ( PIR1bits.ADIF ) {
 21341  0000C4  AC9E               	btfss	3998,6,c	;volatile
 21342  0000C6  D001               	goto	i1u723_21
 21343  0000C8  D001               	goto	i1u723_20
 21344  0000CA                     i1u723_21:
 21345  0000CA  D0E5               	goto	i1l164
 21346  0000CC                     i1u723_20:
 21347  0000CC  D0C4               	goto	i1l9264
 21348  0000CE                     i1l9206:
 21349                           
 21350                           ;main.c: 189: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21351  0000CE  5049               	movf	_adc_series_counter,w,c
 21352  0000D0  0D0C               	mullw	12
 21353  0000D2  0E84               	movlw	low _adc
 21354  0000D4  24F3               	addwf	prodl,w,c
 21355  0000D6  6ED9               	movwf	fsr2l,c
 21356  0000D8  0E01               	movlw	high _adc
 21357  0000DA  20F4               	addwfc	prodh,w,c
 21358  0000DC  6EDA               	movwf	fsr2h,c
 21359  0000DE  CFC4 FFDF          	movff	4036,indf2	;volatile
 21360                           
 21361                           ;main.c: 190: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21362  0000E2  5049               	movf	_adc_series_counter,w,c
 21363  0000E4  0D0C               	mullw	12
 21364  0000E6  0E85               	movlw	low (_adc+1)
 21365  0000E8  24F3               	addwf	prodl,w,c
 21366  0000EA  6ED9               	movwf	fsr2l,c
 21367  0000EC  0E01               	movlw	high (_adc+1)
 21368  0000EE  20F4               	addwfc	prodh,w,c
 21369  0000F0  6EDA               	movwf	fsr2h,c
 21370  0000F2  CFC3 FFDF          	movff	4035,indf2	;volatile
 21371  0000F6                     
 21372                           ;main.c: 192: ADCON0 = (2<<2) + 1;
 21373  0000F6  0E09               	movlw	9
 21374  0000F8  6EC2               	movwf	4034,c	;volatile
 21375  0000FA                     
 21376                           ;main.c: 196: if ((80 - 1) == adc_series_counter) {
 21377  0000FA  5049               	movf	_adc_series_counter,w,c
 21378  0000FC  0A4F               	xorlw	79
 21379  0000FE  A4D8               	btfss	status,2,c
 21380  000100  D001               	goto	i1u724_21
 21381  000102  D001               	goto	i1u724_20
 21382  000104                     i1u724_21:
 21383  000104  D0C5               	goto	i1l9266
 21384  000106                     i1u724_20:
 21385  000106                     
 21386                           ;main.c: 197: adc_conversion_flags |= 1;
 21387  000106  0100               	movlb	0	; () banked
 21388  000108  81B8               	bsf	_adc_conversion_flags& (0+255),0,b
 21389  00010A  D0C2               	goto	i1l9266
 21390  00010C                     i1l9214:
 21391                           
 21392                           ;main.c: 203: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21393  00010C  5049               	movf	_adc_series_counter,w,c
 21394  00010E  0D0C               	mullw	12
 21395  000110  0E86               	movlw	low (_adc+2)
 21396  000112  24F3               	addwf	prodl,w,c
 21397  000114  6ED9               	movwf	fsr2l,c
 21398  000116  0E01               	movlw	high (_adc+2)
 21399  000118  20F4               	addwfc	prodh,w,c
 21400  00011A  6EDA               	movwf	fsr2h,c
 21401  00011C  CFC4 FFDF          	movff	4036,indf2	;volatile
 21402                           
 21403                           ;main.c: 204: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21404  000120  5049               	movf	_adc_series_counter,w,c
 21405  000122  0D0C               	mullw	12
 21406  000124  0E87               	movlw	low (_adc+3)
 21407  000126  24F3               	addwf	prodl,w,c
 21408  000128  6ED9               	movwf	fsr2l,c
 21409  00012A  0E01               	movlw	high (_adc+3)
 21410  00012C  20F4               	addwfc	prodh,w,c
 21411  00012E  6EDA               	movwf	fsr2h,c
 21412  000130  CFC3 FFDF          	movff	4035,indf2	;volatile
 21413  000134                     
 21414                           ;main.c: 207: ADCON0 = (1<<2) + 1;
 21415  000134  0E05               	movlw	5
 21416  000136  6EC2               	movwf	4034,c	;volatile
 21417  000138                     
 21418                           ;main.c: 211: if ((80 - 1) == adc_series_counter) {
 21419  000138  5049               	movf	_adc_series_counter,w,c
 21420  00013A  0A4F               	xorlw	79
 21421  00013C  A4D8               	btfss	status,2,c
 21422  00013E  D001               	goto	i1u725_21
 21423  000140  D001               	goto	i1u725_20
 21424  000142                     i1u725_21:
 21425  000142  D0A6               	goto	i1l9266
 21426  000144                     i1u725_20:
 21427  000144                     
 21428                           ;main.c: 212: adc_conversion_flags |= 1 << 1;
 21429  000144  0100               	movlb	0	; () banked
 21430  000146  83B8               	bsf	_adc_conversion_flags& (0+255),1,b
 21431  000148  D0A3               	goto	i1l9266
 21432  00014A                     i1l9222:
 21433                           
 21434                           ;main.c: 218: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21435  00014A  5049               	movf	_adc_series_counter,w,c
 21436  00014C  0D0C               	mullw	12
 21437  00014E  0E88               	movlw	low (_adc+4)
 21438  000150  24F3               	addwf	prodl,w,c
 21439  000152  6ED9               	movwf	fsr2l,c
 21440  000154  0E01               	movlw	high (_adc+4)
 21441  000156  20F4               	addwfc	prodh,w,c
 21442  000158  6EDA               	movwf	fsr2h,c
 21443  00015A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21444                           
 21445                           ;main.c: 219: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21446  00015E  5049               	movf	_adc_series_counter,w,c
 21447  000160  0D0C               	mullw	12
 21448  000162  0E89               	movlw	low (_adc+5)
 21449  000164  24F3               	addwf	prodl,w,c
 21450  000166  6ED9               	movwf	fsr2l,c
 21451  000168  0E01               	movlw	high (_adc+5)
 21452  00016A  20F4               	addwfc	prodh,w,c
 21453  00016C  6EDA               	movwf	fsr2h,c
 21454  00016E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21455  000172                     
 21456                           ;main.c: 222: ADCON0 = (0<<2) + 1;
 21457  000172  0E01               	movlw	1
 21458  000174  6EC2               	movwf	4034,c	;volatile
 21459  000176                     
 21460                           ;main.c: 226: if ((80 - 1) == adc_series_counter) {
 21461  000176  5049               	movf	_adc_series_counter,w,c
 21462  000178  0A4F               	xorlw	79
 21463  00017A  A4D8               	btfss	status,2,c
 21464  00017C  D001               	goto	i1u726_21
 21465  00017E  D001               	goto	i1u726_20
 21466  000180                     i1u726_21:
 21467  000180  D087               	goto	i1l9266
 21468  000182                     i1u726_20:
 21469  000182                     
 21470                           ;main.c: 227: adc_conversion_flags |= 1 << 2;
 21471  000182  0100               	movlb	0	; () banked
 21472  000184  85B8               	bsf	_adc_conversion_flags& (0+255),2,b
 21473  000186  D084               	goto	i1l9266
 21474  000188                     i1l9230:
 21475                           
 21476                           ;main.c: 233: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21477  000188  5049               	movf	_adc_series_counter,w,c
 21478  00018A  0D0C               	mullw	12
 21479  00018C  0E8A               	movlw	low (_adc+6)
 21480  00018E  24F3               	addwf	prodl,w,c
 21481  000190  6ED9               	movwf	fsr2l,c
 21482  000192  0E01               	movlw	high (_adc+6)
 21483  000194  20F4               	addwfc	prodh,w,c
 21484  000196  6EDA               	movwf	fsr2h,c
 21485  000198  CFC4 FFDF          	movff	4036,indf2	;volatile
 21486                           
 21487                           ;main.c: 234: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21488  00019C  5049               	movf	_adc_series_counter,w,c
 21489  00019E  0D0C               	mullw	12
 21490  0001A0  0E8B               	movlw	low (_adc+7)
 21491  0001A2  24F3               	addwf	prodl,w,c
 21492  0001A4  6ED9               	movwf	fsr2l,c
 21493  0001A6  0E01               	movlw	high (_adc+7)
 21494  0001A8  20F4               	addwfc	prodh,w,c
 21495  0001AA  6EDA               	movwf	fsr2h,c
 21496  0001AC  CFC3 FFDF          	movff	4035,indf2	;volatile
 21497  0001B0                     
 21498                           ;main.c: 236: ADCON0 = (9<<2) + 1;
 21499  0001B0  0E25               	movlw	37
 21500  0001B2  6EC2               	movwf	4034,c	;volatile
 21501  0001B4                     
 21502                           ;main.c: 240: if ((80 - 1) == adc_series_counter) {
 21503  0001B4  5049               	movf	_adc_series_counter,w,c
 21504  0001B6  0A4F               	xorlw	79
 21505  0001B8  A4D8               	btfss	status,2,c
 21506  0001BA  D001               	goto	i1u727_21
 21507  0001BC  D001               	goto	i1u727_20
 21508  0001BE                     i1u727_21:
 21509  0001BE  D068               	goto	i1l9266
 21510  0001C0                     i1u727_20:
 21511  0001C0                     
 21512                           ;main.c: 241: adc_conversion_flags |= 1 << 3;
 21513  0001C0  0100               	movlb	0	; () banked
 21514  0001C2  87B8               	bsf	_adc_conversion_flags& (0+255),3,b
 21515  0001C4  D065               	goto	i1l9266
 21516  0001C6                     i1l9238:
 21517                           
 21518                           ;main.c: 247: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21519  0001C6  5049               	movf	_adc_series_counter,w,c
 21520  0001C8  0D0C               	mullw	12
 21521  0001CA  0E8C               	movlw	low (_adc+8)
 21522  0001CC  24F3               	addwf	prodl,w,c
 21523  0001CE  6ED9               	movwf	fsr2l,c
 21524  0001D0  0E01               	movlw	high (_adc+8)
 21525  0001D2  20F4               	addwfc	prodh,w,c
 21526  0001D4  6EDA               	movwf	fsr2h,c
 21527  0001D6  CFC4 FFDF          	movff	4036,indf2	;volatile
 21528                           
 21529                           ;main.c: 248: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21530  0001DA  5049               	movf	_adc_series_counter,w,c
 21531  0001DC  0D0C               	mullw	12
 21532  0001DE  0E8D               	movlw	low (_adc+9)
 21533  0001E0  24F3               	addwf	prodl,w,c
 21534  0001E2  6ED9               	movwf	fsr2l,c
 21535  0001E4  0E01               	movlw	high (_adc+9)
 21536  0001E6  20F4               	addwfc	prodh,w,c
 21537  0001E8  6EDA               	movwf	fsr2h,c
 21538  0001EA  CFC3 FFDF          	movff	4035,indf2	;volatile
 21539  0001EE                     
 21540                           ;main.c: 250: ADCON0 = (8<<2) + 1;
 21541  0001EE  0E21               	movlw	33
 21542  0001F0  6EC2               	movwf	4034,c	;volatile
 21543  0001F2                     
 21544                           ;main.c: 254: if ((80 - 1) == adc_series_counter) {
 21545  0001F2  5049               	movf	_adc_series_counter,w,c
 21546  0001F4  0A4F               	xorlw	79
 21547  0001F6  A4D8               	btfss	status,2,c
 21548  0001F8  D001               	goto	i1u728_21
 21549  0001FA  D001               	goto	i1u728_20
 21550  0001FC                     i1u728_21:
 21551  0001FC  D049               	goto	i1l9266
 21552  0001FE                     i1u728_20:
 21553  0001FE                     
 21554                           ;main.c: 255: adc_conversion_flags |= 1 << 4;
 21555  0001FE  0100               	movlb	0	; () banked
 21556  000200  89B8               	bsf	_adc_conversion_flags& (0+255),4,b
 21557  000202  D046               	goto	i1l9266
 21558  000204                     i1l9246:
 21559                           
 21560                           ;main.c: 261: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21561  000204  5049               	movf	_adc_series_counter,w,c
 21562  000206  0D0C               	mullw	12
 21563  000208  0E8E               	movlw	low (_adc+10)
 21564  00020A  24F3               	addwf	prodl,w,c
 21565  00020C  6ED9               	movwf	fsr2l,c
 21566  00020E  0E01               	movlw	high (_adc+10)
 21567  000210  20F4               	addwfc	prodh,w,c
 21568  000212  6EDA               	movwf	fsr2h,c
 21569  000214  CFC4 FFDF          	movff	4036,indf2	;volatile
 21570                           
 21571                           ;main.c: 262: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21572  000218  5049               	movf	_adc_series_counter,w,c
 21573  00021A  0D0C               	mullw	12
 21574  00021C  0E8F               	movlw	low (_adc+11)
 21575  00021E  24F3               	addwf	prodl,w,c
 21576  000220  6ED9               	movwf	fsr2l,c
 21577  000222  0E01               	movlw	high (_adc+11)
 21578  000224  20F4               	addwfc	prodh,w,c
 21579  000226  6EDA               	movwf	fsr2h,c
 21580  000228  CFC3 FFDF          	movff	4035,indf2	;volatile
 21581  00022C                     
 21582                           ;main.c: 264: ADCON0 = (10<<2) + 1;
 21583  00022C  0E29               	movlw	41
 21584  00022E  6EC2               	movwf	4034,c	;volatile
 21585  000230                     
 21586                           ;main.c: 268: if ((80 - 1) == adc_series_counter) {
 21587  000230  5049               	movf	_adc_series_counter,w,c
 21588  000232  0A4F               	xorlw	79
 21589  000234  A4D8               	btfss	status,2,c
 21590  000236  D001               	goto	i1u729_21
 21591  000238  D001               	goto	i1u729_20
 21592  00023A                     i1u729_21:
 21593  00023A  D002               	goto	i1l161
 21594  00023C                     i1u729_20:
 21595  00023C                     
 21596                           ;main.c: 269: adc_conversion_flags |= 1 << 5;
 21597  00023C  0100               	movlb	0	; () banked
 21598  00023E  8BB8               	bsf	_adc_conversion_flags& (0+255),5,b
 21599  000240                     i1l161:
 21600                           
 21601                           ;main.c: 270: }
 21602                           ;main.c: 273: adc_series_counter++;
 21603  000240  2A49               	incf	_adc_series_counter,f,c
 21604  000242                     
 21605                           ;main.c: 274: if (adc_series_counter >= 80) {
 21606  000242  0E4F               	movlw	79
 21607  000244  6449               	cpfsgt	_adc_series_counter,c
 21608  000246  D001               	goto	i1u730_21
 21609  000248  D001               	goto	i1u730_20
 21610  00024A                     i1u730_21:
 21611  00024A  D022               	goto	i1l9266
 21612  00024C                     i1u730_20:
 21613  00024C                     i1l9256:
 21614                           
 21615                           ;main.c: 275: adc_series_counter = 0;
 21616  00024C  6A49               	clrf	_adc_series_counter,c
 21617  00024E  D020               	goto	i1l9266
 21618  000250                     i1l9258:
 21619                           
 21620                           ;main.c: 281: ADCON0 = (10<<2) + 1;
 21621  000250  0E29               	movlw	41
 21622  000252  6EC2               	movwf	4034,c	;volatile
 21623  000254  D7FB               	goto	i1l9256
 21624  000256                     i1l9264:
 21625  000256  50C2               	movf	4034,w,c	;volatile
 21626  000258  0B3C               	andlw	60
 21627  00025A  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21628  00025C  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21629                           
 21630                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21631                           ; Switch size 1, requested type "space"
 21632                           ; Number of cases is 1, Range of values is 0 to 0
 21633                           ; switch strategies available:
 21634                           ; Name         Instructions Cycles
 21635                           ; simple_byte            4     3 (average)
 21636                           ;	Chosen strategy is simple_byte
 21637  00025E  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21638  000260  0A00               	xorlw	0	; case 0
 21639  000262  B4D8               	btfsc	status,2,c
 21640  000264  D001               	goto	i1l14446
 21641  000266  D7F4               	goto	i1l9258
 21642  000268                     i1l14446:
 21643                           
 21644                           ; Switch size 1, requested type "space"
 21645                           ; Number of cases is 6, Range of values is 0 to 40
 21646                           ; switch strategies available:
 21647                           ; Name         Instructions Cycles
 21648                           ; simple_byte           19    10 (average)
 21649                           ;	Chosen strategy is simple_byte
 21650  000268  5005               	movf	??_interrupt_at_low_vector,w,c
 21651  00026A  0A00               	xorlw	0	; case 0
 21652  00026C  B4D8               	btfsc	status,2,c
 21653  00026E  D78C               	goto	i1l9230
 21654  000270  0A04               	xorlw	4	; case 4
 21655  000272  B4D8               	btfsc	status,2,c
 21656  000274  D76A               	goto	i1l9222
 21657  000276  0A0C               	xorlw	12	; case 8
 21658  000278  B4D8               	btfsc	status,2,c
 21659  00027A  D748               	goto	i1l9214
 21660  00027C  0A28               	xorlw	40	; case 32
 21661  00027E  B4D8               	btfsc	status,2,c
 21662  000280  D7C1               	goto	i1l9246
 21663  000282  0A04               	xorlw	4	; case 36
 21664  000284  B4D8               	btfsc	status,2,c
 21665  000286  D79F               	goto	i1l9238
 21666  000288  0A0C               	xorlw	12	; case 40
 21667  00028A  B4D8               	btfsc	status,2,c
 21668  00028C  D720               	goto	i1l9206
 21669  00028E  D7E0               	goto	i1l9258
 21670  000290                     i1l9266:
 21671                           
 21672                           ;main.c: 287: ConvertADC();
 21673  000290  ECBF  F02A         	call	i1_ConvertADC	;wreg free
 21674  000294                     
 21675                           ;main.c: 289: PIR1bits.ADIF = 0;
 21676  000294  9C9E               	bcf	3998,6,c	;volatile
 21677  000296                     i1l164:
 21678  000296  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21679  00029A  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21680  00029E  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21681  0002A2  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21682  0002A6  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21683  0002AA  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21684  0002AE  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21685  0002B2  0010               	retfie	
 21686  0002B4                     __end_of_interrupt_at_low_vector:
 21687                           	opt stack 0
 21688                           tblptru	equ	0xFF8
 21689                           tblptrh	equ	0xFF7
 21690                           tblptrl	equ	0xFF6
 21691                           tablat	equ	0xFF5
 21692                           prodh	equ	0xFF4
 21693                           prodl	equ	0xFF3
 21694                           intcon	equ	0xFF2
 21695                           postinc0	equ	0xFEE
 21696                           wreg	equ	0xFE8
 21697                           indf1	equ	0xFE7
 21698                           postdec1	equ	0xFE5
 21699                           fsr1h	equ	0xFE2
 21700                           fsr1l	equ	0xFE1
 21701                           bsr	equ	0xFE0
 21702                           indf2	equ	0xFDF
 21703                           postinc2	equ	0xFDE
 21704                           postdec2	equ	0xFDD
 21705                           plusw2	equ	0xFDB
 21706                           fsr2h	equ	0xFDA
 21707                           fsr2l	equ	0xFD9
 21708                           status	equ	0xFD8
 21709                           
 21710 ;; *************** function i1_WriteTimer0 *****************
 21711 ;; Defined at:
 21712 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21713 ;; Parameters:    Size  Location     Type
 21714 ;;  timer0          2    0[COMRAM] unsigned int 
 21715 ;; Auto vars:     Size  Location     Type
 21716 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21717 ;; Return value:  Size  Location     Type
 21718 ;;		None               void
 21719 ;; Registers used:
 21720 ;;		None
 21721 ;; Tracked objects:
 21722 ;;		On entry : 0/0
 21723 ;;		On exit  : 0/0
 21724 ;;		Unchanged: 0/0
 21725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21726 ;;      Params:         2       0       0       0       0       0       0
 21727 ;;      Locals:         2       0       0       0       0       0       0
 21728 ;;      Temps:          0       0       0       0       0       0       0
 21729 ;;      Totals:         4       0       0       0       0       0       0
 21730 ;;Total ram usage:        4 bytes
 21731 ;; Hardware stack levels used:    1
 21732 ;; This function calls:
 21733 ;;		Nothing
 21734 ;; This function is called by:
 21735 ;;		_interrupt_at_low_vector
 21736 ;; This function uses a non-reentrant model
 21737 ;;
 21738                           
 21739                           	psect	text100
 21740  005520                     __ptext100:
 21741                           	opt stack 0
 21742  005520                     i1_WriteTimer0:
 21743                           	opt stack 22
 21744                           
 21745                           ;incstack = 0
 21746                           ;incstack = 0
 21747  005520  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21748  005524  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21749  005528  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21750  00552C  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21751  005530  0012               	return	
 21752  005532                     __end_ofi1_WriteTimer0:
 21753                           	opt stack 0
 21754                           tblptru	equ	0xFF8
 21755                           tblptrh	equ	0xFF7
 21756                           tblptrl	equ	0xFF6
 21757                           tablat	equ	0xFF5
 21758                           prodh	equ	0xFF4
 21759                           prodl	equ	0xFF3
 21760                           intcon	equ	0xFF2
 21761                           postinc0	equ	0xFEE
 21762                           wreg	equ	0xFE8
 21763                           indf1	equ	0xFE7
 21764                           postdec1	equ	0xFE5
 21765                           fsr1h	equ	0xFE2
 21766                           fsr1l	equ	0xFE1
 21767                           bsr	equ	0xFE0
 21768                           indf2	equ	0xFDF
 21769                           postinc2	equ	0xFDE
 21770                           postdec2	equ	0xFDD
 21771                           plusw2	equ	0xFDB
 21772                           fsr2h	equ	0xFDA
 21773                           fsr2l	equ	0xFD9
 21774                           status	equ	0xFD8
 21775                           
 21776 ;; *************** function i1_ConvertADC *****************
 21777 ;; Defined at:
 21778 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21779 ;; Parameters:    Size  Location     Type
 21780 ;;		None
 21781 ;; Auto vars:     Size  Location     Type
 21782 ;;		None
 21783 ;; Return value:  Size  Location     Type
 21784 ;;		None               void
 21785 ;; Registers used:
 21786 ;;		None
 21787 ;; Tracked objects:
 21788 ;;		On entry : 0/0
 21789 ;;		On exit  : 0/0
 21790 ;;		Unchanged: 0/0
 21791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21792 ;;      Params:         0       0       0       0       0       0       0
 21793 ;;      Locals:         0       0       0       0       0       0       0
 21794 ;;      Temps:          0       0       0       0       0       0       0
 21795 ;;      Totals:         0       0       0       0       0       0       0
 21796 ;;Total ram usage:        0 bytes
 21797 ;; Hardware stack levels used:    1
 21798 ;; This function calls:
 21799 ;;		Nothing
 21800 ;; This function is called by:
 21801 ;;		_interrupt_at_low_vector
 21802 ;; This function uses a non-reentrant model
 21803 ;;
 21804                           
 21805                           	psect	text101
 21806  00557E                     __ptext101:
 21807                           	opt stack 0
 21808  00557E                     i1_ConvertADC:
 21809                           	opt stack 22
 21810                           
 21811                           ;incstack = 0
 21812                           ;incstack = 0
 21813  00557E  82C2               	bsf	4034,1,c	;volatile
 21814  005580  0012               	return	
 21815  005582                     __end_ofi1_ConvertADC:
 21816                           	opt stack 0
 21817                           tblptru	equ	0xFF8
 21818                           tblptrh	equ	0xFF7
 21819                           tblptrl	equ	0xFF6
 21820                           tablat	equ	0xFF5
 21821                           prodh	equ	0xFF4
 21822                           prodl	equ	0xFF3
 21823                           intcon	equ	0xFF2
 21824                           postinc0	equ	0xFEE
 21825                           wreg	equ	0xFE8
 21826                           indf1	equ	0xFE7
 21827                           postdec1	equ	0xFE5
 21828                           fsr1h	equ	0xFE2
 21829                           fsr1l	equ	0xFE1
 21830                           bsr	equ	0xFE0
 21831                           indf2	equ	0xFDF
 21832                           postinc2	equ	0xFDE
 21833                           postdec2	equ	0xFDD
 21834                           plusw2	equ	0xFDB
 21835                           fsr2h	equ	0xFDA
 21836                           fsr2l	equ	0xFD9
 21837                           status	equ	0xFD8
 21838                           tblptru	equ	0xFF8
 21839                           tblptrh	equ	0xFF7
 21840                           tblptrl	equ	0xFF6
 21841                           tablat	equ	0xFF5
 21842                           prodh	equ	0xFF4
 21843                           prodl	equ	0xFF3
 21844                           intcon	equ	0xFF2
 21845                           postinc0	equ	0xFEE
 21846                           wreg	equ	0xFE8
 21847                           indf1	equ	0xFE7
 21848                           postdec1	equ	0xFE5
 21849                           fsr1h	equ	0xFE2
 21850                           fsr1l	equ	0xFE1
 21851                           bsr	equ	0xFE0
 21852                           indf2	equ	0xFDF
 21853                           postinc2	equ	0xFDE
 21854                           postdec2	equ	0xFDD
 21855                           plusw2	equ	0xFDB
 21856                           fsr2h	equ	0xFDA
 21857                           fsr2l	equ	0xFD9
 21858                           status	equ	0xFD8
 21859                           
 21860                           	psect	text102
 21861  000000                     __ptext102:
 21862                           	opt stack 0
 21863                           tblptru	equ	0xFF8
 21864                           tblptrh	equ	0xFF7
 21865                           tblptrl	equ	0xFF6
 21866                           tablat	equ	0xFF5
 21867                           prodh	equ	0xFF4
 21868                           prodl	equ	0xFF3
 21869                           intcon	equ	0xFF2
 21870                           postinc0	equ	0xFEE
 21871                           wreg	equ	0xFE8
 21872                           indf1	equ	0xFE7
 21873                           postdec1	equ	0xFE5
 21874                           fsr1h	equ	0xFE2
 21875                           fsr1l	equ	0xFE1
 21876                           bsr	equ	0xFE0
 21877                           indf2	equ	0xFDF
 21878                           postinc2	equ	0xFDE
 21879                           postdec2	equ	0xFDD
 21880                           plusw2	equ	0xFDB
 21881                           fsr2h	equ	0xFDA
 21882                           fsr2l	equ	0xFD9
 21883                           status	equ	0xFD8
 21884                           
 21885                           	psect	rparam
 21886  0000                     tblptru	equ	0xFF8
 21887                           tblptrh	equ	0xFF7
 21888                           tblptrl	equ	0xFF6
 21889                           tablat	equ	0xFF5
 21890                           prodh	equ	0xFF4
 21891                           prodl	equ	0xFF3
 21892                           intcon	equ	0xFF2
 21893                           postinc0	equ	0xFEE
 21894                           wreg	equ	0xFE8
 21895                           indf1	equ	0xFE7
 21896                           postdec1	equ	0xFE5
 21897                           fsr1h	equ	0xFE2
 21898                           fsr1l	equ	0xFE1
 21899                           bsr	equ	0xFE0
 21900                           indf2	equ	0xFDF
 21901                           postinc2	equ	0xFDE
 21902                           postdec2	equ	0xFDD
 21903                           plusw2	equ	0xFDB
 21904                           fsr2h	equ	0xFDA
 21905                           fsr2l	equ	0xFD9
 21906                           status	equ	0xFD8
 21907                           tblptru	equ	0xFF8
 21908                           tblptrh	equ	0xFF7
 21909                           tblptrl	equ	0xFF6
 21910                           tablat	equ	0xFF5
 21911                           prodh	equ	0xFF4
 21912                           prodl	equ	0xFF3
 21913                           intcon	equ	0xFF2
 21914                           postinc0	equ	0xFEE
 21915                           wreg	equ	0xFE8
 21916                           indf1	equ	0xFE7
 21917                           postdec1	equ	0xFE5
 21918                           fsr1h	equ	0xFE2
 21919                           fsr1l	equ	0xFE1
 21920                           bsr	equ	0xFE0
 21921                           indf2	equ	0xFDF
 21922                           postinc2	equ	0xFDE
 21923                           postdec2	equ	0xFDD
 21924                           plusw2	equ	0xFDB
 21925                           fsr2h	equ	0xFDA
 21926                           fsr2l	equ	0xFD9
 21927                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     64     124
    BANK1           256     54     132
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___aldiv
    ___lwtofl->___flpack
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _eval_poly->___fladd
    ___fltol->___flmul
    ___altofl->___aldiv
    ___flsub->___fladd
    ___asflmul->___flmul
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_vscp_sendEvent
    _setEventData->_Celsius2Kelvin
    _Celsius2Fahrenheit->___fladd
    ___fladd->___flmul
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_writeCoeffs2Ram
    _writeCoeffs2Ram->___wmul
    ___wmul->_readEEPROM
    ___awtofl->___flpack
    ___flmul->___awtofl
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    _log->___fldiv
    _exp->___fldiv
    _ldexp->_eval_poly
    _eval_poly->___fladd
    _floor->___altofl
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___fladd
    ___fldiv->___flsub
    _sendTempEvent->_setEventData
    _setEventData->_Celsius2Fahrenheit
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  148262
                                             63 BANK0      1     1      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              68    68      0   74037
                                             49 BANK0     14    14      0
                                              0 BANK1     54    54      0
                        _writeEEPROM
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                     _vscp_sendEvent
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     865
                                             23 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6    2070
                                             38 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    3985
                                             58 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             61 COMRAM     8     0      8
                                              0 BANK0      6     6      0
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             17 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   14303
                                             66 COMRAM     2     2      0
                                             38 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   24732
                                             38 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             12 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    6410
                                             58 COMRAM     8     1      7
                                              8 BANK0      4     4      0
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    6633
                                             11 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             51 COMRAM    10     6      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4    1120
                                              6 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    4140
                                             58 COMRAM     6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3930
                                              8 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4    2255
                                             51 COMRAM     5     1      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    1860
                                             16 BANK0     22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                      4     4      0   18687
                                             51 BANK0      4     4      0
                         _readEEPROM
                     _vscp_sendEvent
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0   15142
                                             51 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0   14697
                                             67 COMRAM     2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3   12082
                                             42 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    6955
                                             38 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    3775
                                             51 COMRAM     7     7      0
                                              0 BANK0      8     0      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    3050
                                             58 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   27056
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    7456
                                             40 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2824
                                             33 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1260
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      1     1      0     502
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     155
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4477
                                             32 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             35 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             18 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     254
                                             17 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     186
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     251
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4726
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     344
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1070
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0     758
                                             32 COMRAM     1     1      0
                    _writeCoeffs2Ram
 ---------------------------------------------------------------------------------
 (5) _writeCoeffs2Ram                                      9     9      0     628
                                             23 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     232
                                             17 COMRAM     6     2      4
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    1120
                                             23 COMRAM     6     2      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    2045
                                             29 COMRAM    22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             17 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _writeCoeffs2Ram
           _readEEPROM
           ___wmul
             _readEEPROM (ARG)
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _writeCoeffs2Ram
               _readEEPROM
               ___wmul
                 _readEEPROM (ARG)
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _writeCoeffs2Ram
             _readEEPROM
             ___wmul
               _readEEPROM (ARG)
     ___lbmod
   _handle_sync
     _readEEPROM
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
   _doWork
     _writeEEPROM
     _readEEPROM
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
       ___flpack (ARG)
     ___wmul
       _readEEPROM (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     36      84       7       51.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     40      7C       5       77.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152       3        0.0%
DATA                 0      0     51D      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Sep 14 10:01:01 2015

                          ___asfldiv@f1p 0086                            ___altofl@sign 006A  
                           ___fldiv@cntr 007F                  __end_of_vscp_readAppReg 23B4  
                           ___fldiv@sign 0085                    __end_of_sendVSCPFrame 4672  
                           ___asflmul@mp 0038                             ___asflsub@f2 003D  
                                     PL2 2AC2                                       PL4 1AD0  
                                     PL6 1AE0                                       PL8 1AFC  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 000E  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 0011  
                    ___wmul@multiplicand 0014                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 3822                            ___asflsub@f1p 003B  
                           ___flpack@arg 000E                                      PL10 1B0C  
                                    PL20 1B7C                                      PL12 1B1C  
                                    PL30 3696                                      PL22 365C  
                                    PL14 1B2A                                      PL40 3E3E  
                                    PL32 3E2E                                      PL24 1B92  
                                    PL16 1B5A                                      PL50 3D0E  
                                    PL42 44F8                                      PL34 1BA2  
                                    PL26 3D00                                      PL18 3E1A  
                                    PL60 1BE0                                      PL52 30C8  
                                    PL44 1BD2                                      PL36 1BBA  
                                    PL28 367A                                      PL70 1BF2  
                                    PL62 3D48                                      PL54 3D22  
                                    PL46 3E50                                      PL38 30B0  
                                    PL80 1C10                                      PL72 30DC  
                                    PL64 4208                                      PL56 3D34  
                                    PL48 3822                                      PL90 30EA  
                                    PL82 4B04                                      PL74 4218  
                                    PL66 1358                                      PL58 3996  
                                    PL84 3E64                                      PL76 32EE  
                                    PL68 513E                                      PL86 3836  
                                    PL78 1C02                                      PL88 4450  
                           ___flpack@exp 0012                           _Celsius2Kelvin 50E6  
                                    l201 17B8                                      l208 197C  
                                    l224 1ACE                                      l321 1CAE  
                                    l410 20AE                                      l323 1CB8  
                                    l315 1C90                                      l317 1C9A  
                                    l253 4598                                      l245 365A  
                                    l319 1CA4                                      l183 40F6  
                                    l168 4088                                      l177 40CC  
                     vscp_readStdReg@idx 0020                                      l522 1032  
                                    l519 0FE4                                      l295 4A68  
                                    l640 51D4                                      l552 539E  
                                    l629 4B88                                      l831 3B0C  
                                    l823 3A74                                      l825 3A92  
                                    l594 546E                                      l851 319C  
                                    l843 32EC                                      l836 312C  
                                    l853 31B0                                      l918 52E6  
                                    l846 31FA                       vscp_readStdReg@reg 0023  
                                    l855 31C4                                      l847 317A  
                                    l857 31D4                                      l849 3188  
                                    l890 3CFE                                      l867 325E  
                                    l859 31E4                                      l868 3278  
                                    l885 3E18                                      l895 4C6C  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BE  
                       setEventData@ival 0091                           getVSCPFrame@id 002E  
          __end_of_vscp_handleProbeState 42E4                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                         setEventData@unit 008C  
                                    _adc 0184                                      _exp 32FC  
                                    _log 3B0E                                      fsr2 000FD9  
                                    prod 000FF3                                      wreg 000FE8  
                           ___flmul@cntr 0032                             ___flmul@sign 0033  
                           __CFG_LVP$OFF 000000                            ___flpack@sign 0013  
                           ___fltol@exp1 003D                             __CFG_WDT$OFF 000000  
                                   l1031 4F40                                     l1103 4E50  
                                   l1107 53F4                                     l1036 535A  
                                   l1212 2C96                                     l1054 42CE  
                                   l1046 42DE                                     l1303 4CCE  
                                   l1055 42B0                                     l1047 426C  
                                   l1152 537C                                     l1090 517C  
                                   l1083 5336                                     l1236 2E1A  
                                   l1317 53D6                                     l1237 2E2E  
                                   l1318 53D8                                     l1094 5228  
                                   l1238 2E6A                                     l1079 5032  
                                   l1247 2EA6                                     l1280 5252  
                                   l1272 30AE                                     l1089 5170  
                                   l1178 3F6E                                     l1622 4206  
                                   l1542 43E2                                     l1607 471E  
                                   l1615 4DE6                                     l1616 4E04  
                                   l1537 43AE                                     l1538 444E  
                                   l1563 34E0                                     l1548 4410  
                                   l1590 3926                                     l1566 33AA  
                                   l1575 3866                                     l1567 34D0  
                                   l1576 3994                                     l1656 3FAA  
                                   l1657 4072                                     l1579 388E  
                                   l1659 4062                                     l1684 4A1C  
                                   l1668 4900                                     l1855 3C3A  
                                   l1688 47C4                  __end_of_doOneSecondWork 365C  
                    vscp_readStdReg@code 0018                vscp_getManufacturerId@idx 0012  
                                   l8300 3168                                     ?_exp 0086  
                                   ?_log 0086                                     l8152 4B2C  
                                   l9130 525E                                     l8164 51B2  
                                   l8406 547C                                     l8078 53FC  
                                   l8440 4C18                                     l8344 320E  
                                   l8168 51B6                                     l8450 4C42  
                                   l8442 4C22                                     l8354 322E  
                                   l9138 5274                                     l8444 4C2C  
                                   l8436 4C06                                     l8380 32A6  
                                   l8372 327A                                     l8292 315A  
                                   l8276 311A                                     l8446 4C36  
                                   l8438 4C0E                                     l8454 4C4E  
                                   l8286 3144                                     l8294 3164  
                                   l8448 4C3C                                     l8394 32D6  
                                   l8468 3C9A                                     l8388 32C0  
                                   l9700 2AEC                                     l9702 2AF2  
                                   l9632 4248                                     l9720 2B2A  
                                   l9634 424E                                     l9618 4228  
                                   l9722 2B30                                     l9652 4288  
                                   l9582 2A28                                     l9910 2DEE  
                                   l9806 2C2E                                     l9830 2CB8  
                                   l9568 5346                                     l9656 428C  
                                   l9816 2C62                                     l9736 2B38  
                                   l9658 4290                                     l9834 2CC8  
                                   l9770 2B6A                                     l9844 2D2A  
                                   l9828 2C9A                                     l9756 2B5E  
                                   l9926 2E0E                                     l9838 2CE0  
                                   l9694 2ADA                                     l9688 42D2  
                                   l9848 2D40                                     l9864 2D66  
                                   l9696 2AE0                                     l9962 2E5E  
                                   l9954 2E4E                                     l9946 2E30  
                                   l9882 2DBC                                     l9866 2D68  
                                   l9786 2BC6                                     l9698 2AE6  
                                   l9972 2E6C                                     l9876 2D8C  
                                   l9868 2D72                                     l9796 2BFA  
                                   l9958 2E56                                     l9894 2DCE  
                                   l9976 2E86                                     l9998 2EA8  
            __size_of_vscp_getMatrixInfo 001A                           sendCANFrame@id 003C  
                                   u5460 4B7C                                     u5465 4B72  
                                   u5635 3122                                     u5637 3124  
                                   u9025 45FC                                     u5955 3C62  
                                   u9155 3D80                                     u5965 3C72  
                                   u9165 3D90                                     u5975 3C9E  
                                   u9175 3DAE                                     u9520 37F0  
                                   u9525 37EE                                     u9490 37A6  
                                   u9495 37A4                         ??_ECANInitialize 000F  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 0012  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 4074                                     _init 5070  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 0086                                     log@x 0086  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 066E                              _vscp_minute 004D  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 02B4  
          __size_of_vscp_doOneSecondWork 004C                        vscp_getUserID@idx 0012  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 3E6E  
                            _writeEEPROM 52CA                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 4CD2  
                        _sh_coefficients 0106                     __end_of_getVSCPFrame 4B8A  
                                  ??_exp 0046                                    ??_log 0043  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 511C  
                   __size_of_getCANFrame 002C                                    l10012 2ED0  
                                  l10022 2EF2                                    l11000 130E  
                                  l10040 2F36                                    l10112 304E  
                                  l11010 1324                                    l10034 2F1E  
                                  l11012 1334                                    l10060 2F60  
                                  l11110 3A0E                                    l10038 2F30  
                                  l11104 39FE                                    l11008 1322  
                                  l11016 1354                                    l10064 2F76  
                                  l10056 2F46                                    l10232 4E26  
                                  l11122 3A38                                    l10090 2FFE  
                                  l10242 4E38                                    l11132 3A78  
                                  l11300 370A                                    l11028 538A  
                                  l10068 2F92                                    l11310 372C  
                                  l10086 2FD6                                    l10078 2FBC  
                                  l10238 4E30                                    l10600 1CE2  
                                  l11144 3AC2                                    l11152 3ADC  
                                  _B0CON 000E20                                    l10610 1D1E  
                                  l10602 1CEE                                    l11138 3A94  
                                  l11162 3B02                                    l11218 502A  
                                  l11330 3766                                    l11322 374E  
                                  l11314 3738                                    l11306 3720  
                                  l10700 1F3A                                    l10620 1D5A  
                                  l10612 1D2A                                    l10604 1CFA  
                                  l11180 3DA6                                    l11164 3B04  
                                  l11340 37B0                                    l11420 3F40  
                                  l11404 3EF2                                    l11500 436C  
                                  l10710 1F76                                    l10702 1F46  
                                  l10630 1D96                                    l10622 1D66  
                                  l10614 1D36                                    l10606 1D06  
                                  l10550 47D0                                    l11158 3AFE  
                                  l11350 37F8                                    l11326 375A  
                                  l11318 3742                                    l11262 53EE  
                                  l11406 3EF6                                    l10720 1FB2  
                                  l10712 1F82                                    l10704 1F52  
                                  l10640 1DD2                                    l10632 1DA2  
                                  l10624 1D72                                    l10616 1D42  
                                  l10608 1D12                                    l10544 47CA  
                                  l10528 4FC2                                    l11088 5180  
                                  l11280 36CC                                    l11360 381E  
                                  l11272 36B8                                    l10800 0684  
                                  l11408 3F0C                                    l11504 437A  
                                  l14000 194E                                    _B1CON 000E30  
                                  l10730 1FEE                                    l10722 1FBE  
                                  l10714 1F8E                                    l10706 1F5E  
                                  l10650 1E0E                                    l10642 1DDE  
                                  l10634 1DAE                                    l10626 1D7E  
                                  l10618 1D4E                                    l10570 1C44  
                                  l10810 0710                                    l10802 06A0  
                                  l14002 1958                                    l10740 202A  
                                  l10732 1FFA                                    l10724 1FCA  
                                  l10716 1F9A                                    l10708 1F6A  
                                  l10660 1E4A                                    l10652 1E1A  
                                  l10644 1DEA                                    l10636 1DBA  
                                  l10628 1D8A                                    l10580 1C80  
                                  l10572 1C50                                    l11356 380E  
                                  l11292 36EE                                    l11284 36D6  
                                  l11276 36C2                                    l10900 0BF0  
                                  l10820 079C                                    l10812 072C  
                                  l10804 06BC                                    l11428 3F54  
                                  l11372 5372                                    l11508 438E  
                                  l10750 2066                                    l10742 2036  
                                  l10734 2006                                    l10726 1FD6  
                                  l10718 1FA6                                    l10670 1E86  
                                  l10662 1E56                                    l10654 1E26  
                                  l10646 1DF6                                    l10638 1DC6  
                                  l10590 1CB4                                    l10582 1C8C  
                                  l10574 1C5C                                    l10566 1C2C  
                                  l10910 0C72                                    l10902 0C0A  
                                  l10830 0828                                    l10822 07B8  
                                  l10814 0748                                    l10806 06D8  
                                  l11390 3EB8                                    l11438 3F70  
                                  l10760 20A2                                    l10752 2072  
                                  l10744 2042                                    l10736 2012  
                                  l10728 1FE2                                    l10680 1EC2  
                                  l10672 1E92                                    l10664 1E62  
                                  l10656 1E32                                    l10648 1E02  
                                  l10584 1C96                                    l10576 1C68  
                                  l10568 1C38                                    l11296 36FA  
                                  l11288 36E2                                    l10920 0CF4  
                                  l10912 0C8C                                    l10904 0C24  
                                  l10840 08B4                                    l10832 0844  
                                  l10824 07D4                                    l10816 0764  
                                  l10808 06F4                                    l11384 3E98  
                                  l14200 38A0                                    l14040 1AA0  
                                  l14016 1A04                                    _B2CON 000E40  
                                  l10762 20B2                                    l10754 207E  
                                  l10746 204E                                    l10738 201E  
                                  l10690 1EFE                                    l10682 1ECE  
                                  l10674 1E9E                                    l10666 1E6E  
                                  l10658 1E3E                                    l10594 1CBE  
                                  l10586 1CA0                                    l10578 1C74  
                                  l10770 2354                                    l10930 0D76  
                                  l10922 0D0E                                    l10914 0CA6  
                                  l10906 0C3E                                    l10850 0940  
                                  l10842 08D0                                    l10834 0860  
                                  l10826 07F0                                    l10818 0780  
                                  l11490 433A                                    l11482 4316  
                                  l14050 1AC4                                    l14018 1A0A  
                                  l10764 20BE                                    l10756 208A  
                                  l10748 205A                                    l10692 1F0A  
                                  l10684 1EDA                                    l10676 1EAA  
                                  l10668 1E7A                                    l10596 1CCA  
                                  l10588 1CAA                                    l10940 0DF8  
                                  l10932 0D90                                    l10924 0D28  
                                  l10916 0CC0                                    l10908 0C58  
                                  l10860 09CC                                    l10852 095C  
                                  l10844 08EC                                    l10836 087C  
                                  l10828 080C                                    l11396 3ED4  
                                  l14132 457C                                    l11820 48B4  
                                  l11804 4870                                    l11740 4762  
                                  l11492 433E                                    l11476 42FE  
                                  l10758 2096                                    l10694 1F16  
                                  l10686 1EE6                                    l10678 1EB6  
                                  l10598 1CD6                                    l14150 43B8  
                                  l10950 0E7A                                    l10942 0E12  
                                  l10934 0DAA                                    l10926 0D42  
                                  l10918 0CDA                                    l10870 0A58  
                                  l10862 09E8                                    l10854 0978  
                                  l10846 0908                                    l10838 0898  
                                  l14222 38D8                                    l11830 48D8  
                                  l11806 487A                                    l11750 4780  
                                  l14038 1A96                                    l10784 2386  
                                  l10776 2372                                    l10696 1F22  
                                  l10688 1EF2                                    l10792 23B0  
                                  l10768 20CA                                    l14320 41AA  
                                  l14304 4172                                    l14160 43F8  
                                  l14152 43BC                                    l10960 0EFC  
                                  l10952 0E94                                    l10944 0E2C  
                                  l10936 0DC4                                    l10928 0D5C  
                                  l10880 0AE4                                    l10872 0A74  
                                  l10864 0A04                                    l10856 0994  
                                  l10848 0924                                    l14240 393E  
                                  l14224 38E6                                    l14216 38BA  
                                  l14128 4544                                    l11832 48DC  
                                  l11824 48C4                                    l14064 334E  
                                  l11488 432E                                    _B3CON 000E50  
                                  l10786 2388                                    l10698 1F2E  
                                  l14162 4404                                    l14154 43D4  
                                  l10970 0F7E                                    l10962 0F16  
                                  l10954 0EAE                                    l10946 0E46  
                                  l10938 0DDE                                    l10890 0B6E  
                                  l10882 0B00                                    l10874 0A90  
                                  l10866 0A20                                    l10858 09B0  
                                  l14234 3912                                    l14226 38EE  
                                  l11770 4E02                                    l11754 478C  
                                  l14058 331A                                    l10788 2398  
                                  l14332 41C4                                    l14324 41B2  
                                  l14308 4186                                    l10980 1018  
                                  l10972 0F98                                    l10964 0F30  
                                  l10956 0EC8                                    l10948 0E60  
                                  l10892 0B88                                    l10884 0B1C  
                                  l10876 0AAC                                    l10868 0A3C  
                                  l14252 3968                                    l14244 3948  
                                  l14236 3920                                    l14228 38F4  
                                  l14180 4E6E                                    l11764 4DD0  
                                  l11836 48F0                                    l11828 48CC  
                                  l14084 349E                                    l14068 3378  
                                  l10982 1036                                    l10974 0FB2  
                                  l10966 0F4A                                    l10958 0EE2  
                                  l10894 0BA2                                    l10886 0B38  
                                  l10878 0AC8                                    l10990 106E  
                                  l11790 49BE                                    l14336 41CC  
                                  l14360 50BC                                    l10984 1050  
                                  l10976 0FCC                                    l10968 0F64  
                                  l10896 0BBC                                    l10888 0B54  
                                  l10992 12E2                                    l14280 46B6  
                                  l14264 4680                                    l14096 3B2C  
                                  _B4CON 000E60                                    l10986 106A  
                                  l10978 0FFE                                    l10898 0BD6  
                                  l14194 3878                                    l13810 4A84  
                                  l13802 4A44                                    l11778 5302  
          __size_of_vscp_getMajorVersion 0002                                    l13812 4A8E  
                                  l14268 4696                                    l13900 13A0  
                                  l13740 40BC                                    l13732 40AA  
                                  l13806 4A72                                    l14374 3FB4  
                                  l13742 40C0                                    l13824 34EC  
                                  l14288 46E4                                    l13752 40DC  
                                  l13744 40C6                                    l13736 40B2  
                                  _B5CON 000E70                                    l13850 35A8  
                                  l13834 3530                                    l14378 3FD0  
                                  l14386 4478                                    l13762 40FA  
                                  l13852 35B2                                    l14388 44E0  
                                  l13908 13C2                                    l13780 413C  
                                  l13764 4112                                    l13862 35CE  
                                  l13790 415C                                    l13758 40F0  
                                  l13960 1828                                    l13786 4154  
                                  l13876 362C                                    l13980 18BC  
                                  l13972 1840                                    l13798 4A20  
                                  l13878 3636                                    l13958 1818  
                                  l13888 3652                                    l13978 18B6  
             __end_of_vscp_goActiveState 53BE                            ___fltol@sign1 003C  
                        __end_of___aldiv 43A0            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 3996  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                          __end_of___fldiv 4720  
                          i1_WriteTimer0 5520                          __end_of___flneg 5314  
                                  _EEADR 000FA9                          __end_of___lbmod 527C  
                        __end_of___flmul 4208                          __end_of___flsub 5070  
                        __end_of___fltol 4902                  _vscp_handleDropNickname 514E  
                                  _BSEL0 000DF8                                    u10200 4758  
                                  _T0CON 000FD5                                    u10290 4898  
                                  u10295 488E                                    u13104 1848  
                                  u13024 13AA                                    u13105 1844  
                                  u13025 13A6                                    u13204 198C  
                                  u13205 1988                                    u13134 1BCA  
                                  u13135 1BC6                                    u13154 1908  
                                  u13074 1820                                    u13155 1904  
                                  u13075 181C                                    u13254 1A50  
                                  u13255 1A4C                                    u13370 3494  
                                  u13710 468C                                    u13390 3B22  
                                  u12914 355A                                    u12915 3556  
                                  u13740 417C                                    u12964 35DE  
                                  u12965 35DA                                    i1l144 00B8  
                                  i1l161 0240                                    i1l138 0080  
                                  i1l164 0296                          sendCANFrame@dlc 0040  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                      ??_writeCoeffs2Ram 0018                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 5564  
             _vscp_readNicknamePermanent 555A                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                       setEventData@newval 008D  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                          ___awtofl@sign 001D                           __CFG_EBTR3$OFF 000000  
                  __end_of_sendTempEvent 4B04                             _vscp_getGUID 54B0  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                                  _floor 3F74                                    _ldexp 4720  
                           _vscp_getZone 553C                                    _frexp 4998  
                     vscp_writeAppReg@rv 0024                _vscp_getRegisterPagesUsed 5582  
                 __size_of_vscp_getEvent 002A                                    main@i 009F  
                             _ConvertADC 557A                             _vscp_setGUID 537E  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 5588  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 52CA                              exp@exponent 008E  
                            ldexp@newexp 0070                     _ECANSetOperationMode 5470  
                        __initialization 4F72                              log@exponent 0043  
                           __end_of_main 4166                             __end_of_init 50AC  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                        ?_Celsius2Kelvin 003B                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001F                           ?i1_WriteTimer0 0001  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 0024  
                 ??_vscp_restoreDefaults 0022                                   ??_main 0046  
                                 ??_init 0022            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 0012                 ??_vscp_setManufacturerId 0012  
               _vscp_handleProtocolEvent 2AD0                            __activetblptr 000002  
                      __RegsToCANID@type 0011               ECANReceiveMessage@msgFlags 0017  
                       doWork@calVoltage 0152                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_floor 006B  
                                 ?_ldexp 006C                     __size_of_handle_sync 007A  
                                 ?_frexp 000E                         __end_of___altofl 4E9C  
             ECANReceiveMessage@savedPtr 0018                                   _CANCON 000F6F  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                         __end_of___flpack 4450  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                       __end_of___awtofl 50E6                         ?_doOneSecondWork 0001  
                     vscp_writeStdReg@rv 0027                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 53BE                                   i1l9200 00C2  
                                 i1l9210 00FA                                   i1l9202 00C4  
                                 i1l9220 0144                                   i1l9212 0106  
                                 i1l9230 0188                                   i1l9222 014A  
                                 i1l9214 010C                                   i1l9206 00CE  
                                 i1l9240 01EE                                   i1l9232 01B0  
                                 i1l9224 0172                                   i1l9216 0134  
                                 i1l9208 00F6                                   i1l9160 003C  
                                 i1l9250 0230                                   i1l9242 01F2  
                                 i1l9234 01B4                                   i1l9226 0176  
                                 i1l9218 0138                                   i1l9170 0072  
                                 i1l9162 0048                                   i1l9252 023C  
                                 i1l9244 01FE                                   i1l9236 01C0  
                                 i1l9228 0182                                   i1l9180 0090  
                                 i1l9172 0074                                   i1l9164 004E  
                                 i1l9254 0242                                   i1l9246 0204  
                                 i1l9238 01C6                                   i1l9182 009A  
                                 i1l9190 00AC                                   i1l9174 007C  
                                 i1l9166 0052                                   i1l9158 0034  
                                 i1l9256 024C                                   i1l9248 022C  
                                 i1l9264 0256                                   i1l9184 00A2  
                                 i1l9176 0082                                   i1l9168 0062  
                                 i1l9258 0250                                   i1l9266 0290  
                                 i1l9186 00A6                                   i1l9178 0084  
                                 i1l9268 0294                                   i1l9188 00A8  
                        _init_app_eeprom 23B4                         __end_of___lwtofl 5200  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                 ECANReceiveMessage@data 0015                   ECANReceiveMessage@mode 001C  
                 ECANReceiveMessage@temp 001D                        getVSCPFrame@pData 0028  
                      getVSCPFrame@pSize 0027                                ??_OpenADC 0010  
                     _vscp_newNodeOnline 5200                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0017   vscp_handleProtocolEvent@page_save_1167 0088  
                                 ___flge 4DBA                           getCANFrame@pid 0022  
                              ??___aldiv 0046                                ??___fladd 0034  
                                 ___wmul 511C                                ??___fldiv 003B  
                              ??___flneg 0012                           __CFG_STVREN$ON 000000  
                              ??___lbmod 000F                                ??___flmul 0026  
                              ??___flsub 003B                                ??___fltol 0038  
                          _vscp_getEvent 522A                                   _doWork 1368  
                       OpenTimer0@config 000E                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 0012                      vscp_writeAppReg@reg 0023  
             __end_of_vscp_setSegmentCRC 54FC                      vscp_writeAppReg@val 0021  
                    vscp_writeAppReg@pos 0022                                   clear_0 4F7A  
                                 clear_1 4F8C                                   clear_2 4F98  
                                 clear_3 4FA4                            ?_sendCANFrame 003C  
           vscp_handleProtocolEvent@byte 0095                                   floor@i 006F  
                                 floor@x 006B                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 00BF                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 0011  
              ??_vscp_getSubMinorVersion 000E     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 0021                     ??_vscp_newNodeOnline 0044  
                            ?_ConvertADC 0001                       __size_of___asfladd 004E  
                     __size_of___asfldiv 004C                       __size_of___asflmul 004A  
                             ___fladd@f1 0060                               ___fladd@f2 0064  
                     __size_of___asflsub 004E                               ___flge@ff1 000E  
                             ___flge@ff2 0012                         __end_ofexp@coeff 0648  
                       __end_oflog@coeff 066C                          ___lbmod@divisor 000E  
                             ___altofl@c 0066                               ___fldiv@f1 0070  
                             ___fldiv@f2 0074                               ___fldiv@f3 0080  
                             __accesstop 0060                  __end_of__initialization 4FAA  
                        ___lbmod@counter 0010                       _Celsius2Fahrenheit 4B8A  
                             ___flneg@f1 000E            __size_of_vscp_getMinorVersion 0002  
                             ___flmul@f1 001E                               ___flmul@f2 0022  
                           eval_poly@res 0068                               ___flsub@f1 0068  
                             ___flsub@f2 006C                               ___fltol@f1 0034  
                        writeEEPROM@data 0010                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 535C                               ___awtofl@c 0018  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0028  
                    ?_Celsius2Fahrenheit 0086                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                   ___asflmul@multiplicand 0034  
            __end_of_vscp_check_pstorage 535C                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                            __end_of_floor 4074  
                          __end_of_ldexp 47C6                            __end_of_frexp 4A1E  
                    ?_vscp_writeRegister 0029                               __end_ofPL2 2AD0  
                             __end_ofPL4 1AE0                               __end_ofPL6 1AFC  
                             __end_ofPL8 1B0C                           ??_sendCANFrame 0042  
                             ___lwtofl@c 0018               __end_of_vscp_getFamilyCode 555A  
                          ?__RegsToCANID 000E              __size_of_ECANReceiveMessage 01FA  
           __size_of_getCalibrationValue 0048                       sendVSCPFrame@pData 0066  
             __end_of_vscp_getFamilyType 5550          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 0029          __size_of_vscp_setManufacturerId 0018  
               __end_of_vscp_writeAppReg 1358                   getVSCPFrame@pvscpclass 002D  
                __end_of_init_app_eeprom 2AC2                     ??_Celsius2Fahrenheit 003B  
            __end_of_vscp_setControlByte 54EA                 __end_of_vscp_writeStdReg 3F74  
                     __RegsToCANID@Value 0014                                  ??_floor 0046  
                                ??_ldexp 0043                                  ??_frexp 0014  
                          ?_setEventData 008A                     ??_vscp_writeRegister 002A  
        __end_of_vscp_handleDropNickname 517E                             _getVSCPFrame 4B12  
                             __pbssBANK0 00A0                               __pbssBANK1 0100  
                            ?_OpenTimer0 0001                       __size_of_eval_poly 009C  
             __end_of_vscp_getBufferSize 5586                         Celsius2Kelvin@tc 003B  
                  vscp_writeRegister@reg 002A                   ??_ECANSetOperationMode 000E  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 000E  
                        _writeCoeffs2Ram 47C6                                  ?___flge 000E  
        __end_of_vscp_getSubMinorVersion 558A                 ECANSetOperationMode@mode 000E  
                                ?___wmul 0012                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0048  
                         doWork@setpoint 0179                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 0011  
                                _B5RXFUL 007387                        __end_of___asfladd 4D20  
                      __end_of___asfldiv 4DBA                         WriteTimer0@timer 0010  
                              ?___altofl 0066                        __end_of___asflmul 4EE6  
                                _ECANCON 000F77                        __end_of___asflsub 4D6E  
                              ?___flpack 000E                            ??_WriteTimer0 0010  
                       doWork@resistance 0174                      __size_of_ConvertADC 0004  
                              ?___awtofl 0018                           ??__RegsToCANID 0012  
                  sendVSCPFrame@priority 0064                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
                              ?___lwtofl 0018                      vscp_writeStdReg@reg 0028  
           __end_of_vscp_doOneSecondWork 4E52                                  i1l14446 0268  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00B9  
        __end_of_interrupt_at_low_vector 02B4                 vscp_readStdReg@code_1140 001C  
                      sendCANFrame@pdata 0041                    _vscp_handleProbeState 4226  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 4C00  
             __end_of_vscp_getMatrixInfo 5410                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                         ??_setEventData 003F                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                            setEventData@v 008A  
                     _vscp_goActiveState 53A0                   __size_of_sendVSCPFrame 00B2  
           __end_of_vscp_getMajorVersion 558E                       __size_of_vscp_init 0044  
                             _readEEPROM 54C4                   _vscp_getManufacturerId 5488  
                 _vscp_setManufacturerId 5410                          _ECANSendMessage 39A8  
                    ?_vscp_goActiveState 0001                                  _OpenADC 4C76  
                                __Hparam 0000                          ??_vscp_getEvent 0032  
                       ??_Celsius2Kelvin 003F                                  __Lparam 0000  
                     _vscp_node_substate 004E               __end_of_vscp_getSegmentCRC 556E  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
      __end_of_vscp_getRegisterPagesUsed 5584                 __size_of_vscp_getMDF_URL 0018  
                                ___aldiv 42E4                          __size_of___flge 004C  
                                ___fladd 3842                                  ___fldiv 4672  
                                ___flneg 52F0                                  ___lbmod 5254  
                                ___flmul 4166                                  ___flsub 5034  
                                ___fltol 4866                          __size_of___wmul 0022  
                        getCANFrame@pdlc 0020                                _FIFOEMPTY 007BA7  
                          ?i1_ConvertADC 0001                          __size_of_doWork 0768  
                           __psmallconst 0600                               ??___altofl 0046  
                   __end_of_init_app_ram 4FF6                               ??___flpack 0014  
                     _vscp_sendHeartBeat 52A4                                  __pcinit 4F72  
                             ??___awtofl 001C                           _vscp_deviceURL 0600  
                      __end_of_eval_poly 44F8                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 4074  
                                __ptext1 1368                                  __ptext2 51D6  
                                __ptext3 4D6E                                  __ptext4 4CD2  
                                __ptext5 42E4                                  __ptext6 4EE6  
                                __ptext7 3B0E                                  __ptext8 32FC  
                                __ptext9 52F0                               ??___lwtofl 001C  
                         _vscp_getUserID 549C                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 0044                             __size_of_exp 01E6  
                           __size_of_log 012E                    vscp_writeStdReg@value 0022  
                       ___aldiv@dividend 003E                      ?_vscp_sendHeartBeat 0044  
               ??_vscp_handleSetNickname 0012                                  _seconds 00BB  
                                doWork@B 0172                                  doWork@i 0183  
                                doWork@j 0178                                  doWork@v 016E  
                    __end_of_WriteTimer0 5520                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 0014                       vscp_getMDF_URL@idx 000F  
                         OpenADC@config2 000E            vscp_handleProtocolEvent@bytes 008C  
                   end_of_initialization 4FAA                                  exp@sign 0090  
           __end_of_vscp_handleHeartbeat 5034                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                  __end_of_writeCoeffs2Ram 4866  
                   __end_of_sendCANFrame 51AA                               doWork@Rinf 014E  
                     doOneSecondWork@tmp 0095                               doWork@temp 017F  
              vscp_handleProtocolEvent@i 0099                vscp_handleProtocolEvent@j 009A  
              vscp_handleProtocolEvent@k 0093                     ??_vscp_sendHeartBeat 0045  
                         _vscp_sendEvent 527C                        ECANSendMessage@id 0018  
                      ECANSendMessage@pb 0020                         ___aldiv@quotient 0062  
                                postdec1 000FE5                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                   __size_of_sendTempEvent 006C  
                         _vscp_setUserID 5428                                  postinc0 000FEE  
                                postinc2 000FDE                           ??i1_ConvertADC 0001  
                 __end_of_vscp_deviceURL 0620      __end_of_vscp_writeNicknamePermanent 550E  
            _vscp_writeNicknamePermanent 54FC                       __ECANPointBuffer@b 0011  
                          _sendVSCPFrame 45C0                   __end_of_vscp_getUserID 54B0  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 4F72                           _vscp_probe_cnt 0050  
                    __end_of_getCANFrame 51D6            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                            ??_handle_sync 0093  
               __size_of_vscp_readAppReg 0796                         ___lbmod@dividend 000F  
                       writeCoeffs2Ram@c 001A                         writeCoeffs2Ram@i 001D  
                       writeCoeffs2Ram@j 001F                              ___fldiv@exp 0084  
                         _vscp_statuscnt 0052                 __size_of_vscp_readStdReg 017E  
                     _vscp_setSegmentCRC 54EA                        readEEPROM@address 000E  
                           ??_ConvertADC 000E               vscp_handleProtocolEvent@cb 0091  
                __end_of_ECANSendMessage 3B0E                        vscp_readStdReg@rv 0022  
                            ___lbmod@rem 0011                              ___flmul@exp 002D  
                          ?__CANIDToRegs 000E                     __end_of__RegsToCANID 3D00  
                    _getCalibrationValue 4EE6                              ?_readEEPROM 000E  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 52A4  
                             _vscp_error 5576                     _vscp_doOneSecondWork 4E06  
                     i1WriteTimer0@timer 0003                               _vscp_timer 00B6  
                 __end_of_vscp_setUserID 5440                 __size_of_doOneSecondWork 017A  
                 vscp_sendHeartBeat@zone 0045                     __end_of_setEventData 45C0  
                         ?_sendVSCPFrame 0060                           __end_of___flge 4E06  
                   __size_of_writeEEPROM 0026                           __end_of___wmul 513E  
                        ?_vscp_getUserID 0001                           __end_of_doWork 1AD0  
           __end_of_vscp_getMinorVersion 558C                              _WriteTimer0 550E  
                   _vscp_getMajorVersion 558C                       __end_of_ConvertADC 557E  
                   ?_getCalibrationValue 0012                     ??_vscp_setSegmentCRC 0011  
                      ??_vscp_getMDF_URL 000E            ??_vscp_getBootLoaderAlgorithm 000E  
                             floor@expon 0073                              __end_ofPL10 1B1C  
                            __end_ofPL20 1B92                              __end_ofPL12 1B2A  
                      ?_vscp_writeAppReg 0021                              __end_ofPL30 36A4  
                            __end_ofPL22 367A                              __end_ofPL14 1B5A  
                            __end_ofPL40 3E50                              __end_ofPL32 3E3E  
                            __end_ofPL24 1BA2                              __end_ofPL16 1B7C  
                            __end_ofPL50 3D22                              __end_ofPL42 450E  
                            __end_ofPL34 1BBA                              __end_ofPL26 3D0E  
                            __end_ofPL18 3E2E                              __end_ofPL60 1BF2  
                            __end_ofPL52 30DC                              __end_ofPL44 1BE0  
                            __end_ofPL36 1BD2                              __end_ofPL28 3696  
                            __end_ofPL70 1C02                              __end_ofPL62 3D5A  
                            __end_ofPL54 3D34                              __end_ofPL46 3E64  
                            __end_ofPL38 30C8                              __end_ofPL80 1C1E  
                            __end_ofPL72 30EA                              __end_ofPL64 4218  
                            __end_ofPL56 3D48                              __end_ofPL48 3836  
                            __end_ofPL90 30F4                              __end_ofPL82 4B12  
                            __end_ofPL74 4226                              __end_ofPL66 1368  
                            __end_ofPL58 39A8                              __end_ofPL84 3E6E  
                            __end_ofPL76 32FC                              __end_ofPL68 514E  
                            __end_ofPL86 3842                              __end_ofPL78 1C10  
                            __end_ofPL88 445C                      start_initialization 4F72  
                             eval_poly@d 003F                               eval_poly@n 0040  
                             eval_poly@x 003B                               ldexp@value 006C  
        __size_of_vscp_handleSetNickname 0024                              __end_of_exp 34E2  
                            __end_of_log 3C3C                       ??_vscp_writeAppReg 0022  
                          _sendTempEvent 4A98                        ?_vscp_writeStdReg 0022  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 0023  
                     _vscp_getFamilyCode 5550                      __end_of_handle_sync 4A98  
                         ??__CANIDToRegs 0015                       _vscp_getFamilyType 5546  
                             frexp@value 000E                      sendVSCPFrame@nodeid 0063  
                       ?_writeCoeffs2Ram 0001                        _vscp_readRegister 53DC  
                   Celsius2Fahrenheit@tc 0086                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 0090                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 001E                      ?_vscp_getFamilyCode 000E  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 30B0  
                        ?_vscp_setUserID 0011                      ?_vscp_getFamilyType 000E  
                  __size_of_init_app_ram 0042                 ?_vscp_handleDropNickname 0001  
                 getCalibrationValue@cal 0017                        ??_vscp_getSubzone 0012  
                               ??___flge 0016                 __end_of__ECANPointBuffer 4C76  
                      __CANIDToRegs@type 0014                              _getCANFrame 51AA  
                               ??___wmul 0016                                 ??_doWork 0091  
                     _vscp_getBufferSize 5584              vscp_handleProtocolEvent@len 008D  
            vscp_handleProtocolEvent@pos 008B               __end_of_ECANReceiveMessage 32EE  
                    ??_vscp_readRegister 0024           __size_of_vscp_goBootloaderMode 0018  
                  ?_vscp_getMajorVersion 0001                    ??_getCalibrationValue 0014  
                  __end_ofi1_WriteTimer0 5532            __end_of_vscp_goBootloaderMode 5470  
                   _vscp_handleHeartbeat 4FF6                       __end_of_OpenTimer0 53DC  
                      __size_of___altofl 004A                        __size_of___flpack 00B0  
                              ___asfladd 4CD2                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                      __size_of_readEEPROM 0014  
                              ___asfldiv 4D6E                              __pbssBIGRAM 0184  
                              ___asflmul 4E9C                                ___asflsub 4D20  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 014E                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004A              __size_of_Celsius2Fahrenheit 0076  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 002C  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 5582                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 0012                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 53F6                             _init_app_ram 4FB4  
                   getCalibrationValue@i 0019                              _doWork$2270 0156  
                            _doWork$2271 015A                              _doWork$2272 015E  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 017B  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 0013  
                   ??_vscp_getBufferSize 000E                             _current_temp 00A0  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 53F6  
                 _vscp_handleSetNickname 5314            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 4902  
                               ?___aldiv 003E                                 ?___fladd 0060  
                               ?___fldiv 0070                                __ptext100 5520  
                              __ptext101 557E                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 001E                                 ?___flsub 0068  
                               ?___fltol 0034                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 0012                              __pintcodelo 0018  
                      ??_doOneSecondWork 0093                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1157 008F                  vscp_readStdReg@idx_1141 0021  
             vscp_setManufacturerId@data 0011                             _sendCANFrame 517E  
                            __smallconst 0600                               ?___asfladd 003B  
                      WriteTimer0@timer0 000E                               ?___asfldiv 0086  
                             ?___asflmul 0034                               ?___asflsub 003B  
                     _vscp_getSegmentCRC 5564                           ??_vscp_getGUID 0012  
                              _eval_poly 445C                              _handle_sync 4A1E  
                         ??_vscp_getZone 0012           __end_of_vscp_getManufacturerId 549C  
         __end_of_vscp_setManufacturerId 5428                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1156 008E                           __size_of_floor 0100  
                         __size_of_ldexp 00A6                           ??_vscp_setGUID 0012  
                         __size_of_frexp 0086                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 000E                         _vscp_configtimer 00B4  
                        ___aldiv@divisor 0042                          ___aldiv@counter 0060  
                         ___wmul@product 0016                   ??_vscp_doOneSecondWork 007F  
                 sendVSCPFrame@vscpclass 0060                            OpenADC@config 0012  
                   _vscp_getMinorVersion 558A                                _sendTimer 00BC  
                               _PIE1bits 000F9D                                _low_alarm 00BA  
                  __size_of_setEventData 00B2                   __end_of_ECANInitialize 4998  
                               i1u720_20 00A2                                 i1u720_21 00A0  
                               i1u721_20 00B6                                 i1u721_21 00B4  
                               i1u730_20 024C                                 i1u722_20 00C0  
                               i1u730_21 024A                                 i1u722_21 00BE  
                               i1u723_20 00CC                                 i1u723_21 00CA  
                               i1u724_20 0106                                 i1u716_20 003C  
                               i1u724_21 0104                                 i1u716_21 003A  
                               i1u725_20 0144                                 i1u717_20 007C  
                               i1u725_21 0142                                 i1u717_21 007A  
                               i1u726_20 0182                                 i1u718_20 0090  
                               i1u726_21 0180                                 i1u718_21 008E  
                               i1u727_20 01C0                                 i1u719_20 009A  
                               i1u727_21 01BE                                 i1u719_21 0098  
                               i1u728_20 01FE                                 i1u728_21 01FC  
                               i1u729_20 023C                                 i1u729_21 023A  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 5254                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 0012                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 3E1A  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 0012  
                           __RegsToCANID 3C3C                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0044              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 003B                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 4F2E                                _vscp_imsg 00C1  
                              _vscp_hour 00BD                                _vscp_omsg 00CF  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 05E0  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 450E               __size_of_vscp_readRegister 001A  
                      _measurement_clock 00AC                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 0010                 __size_of_init_app_eeprom 070E  
           __end_of_vscp_restoreDefaults 5576                                frexp@eptr 0012  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 0100              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 005C                         ??_vscp_getUserID 0012  
                        _vscp_getMDF_URL 5440                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                       __size_of___aldiv 00BC                         __size_of___fladd 0154  
                       __size_of___fldiv 00AE                         __size_of___flneg 0024  
                       _vscp_initledfunc 004C                         __size_of___lbmod 0028  
                       __size_of___flmul 00A2                   ??_vscp_handleHeartbeat 0012  
                       __size_of___flsub 003C                         __size_of___fltol 009C  
                               ___altofl 4E52                                 ___flpack 43A0  
                       getCANFrame@flags 0023                             ?_WriteTimer0 000E  
                               ___awtofl 50AC                         getCANFrame@pdata 0021  
                               ___lwtofl 51D6                           sendTempEvent@i 0045  
                __size_of_Celsius2Kelvin 0036                              ??___asfladd 0041  
                            ??___asfldiv 003B                              ??___asflmul 0038  
                               _exp$2276 008A                              ??___asflsub 0041  
                     __end_of_readEEPROM 54D8                    __size_ofi1_ConvertADC 0004  
                             ?_vscp_init 0001                                 __ptext10 4720  
                               __ptext11 445C                                 __ptext20 4672  
                               __ptext12 3F74                                 __ptext21 4E06  
                               __ptext13 4866                                 __ptext30 4B8A  
                               __ptext22 52A4                                 __ptext14 4998  
                               __ptext31 3842                                 __ptext23 5532  
                               __ptext15 4DBA                                 __ptext40 5428  
                               __ptext32 50E6                                 __ptext24 553C  
                               __ptext16 4E52                                 __ptext41 537E  
                               __ptext33 2AD0                                 __ptext25 34E2  
                               __ptext17 4D20                                 __ptext50 5488  
                               __ptext42 066E                                 __ptext34 5254  
                               __ptext26 5576                                 __ptext18 5034  
                               __ptext51 549C                                 __ptext43 53DC  
                               __ptext35 535C                                 __ptext27 4A1E  
                               __ptext19 4E9C                                 __ptext60 555A  
                               __ptext52 5440                                 __ptext44 36A4  
                               __ptext36 3E6E                                 __ptext28 4A98  
                               __ptext61 5314                                 __ptext53 54B0  
                               __ptext45 5546                                 __ptext37 556E  
                               __ptext29 450E                                 __ptext70 39A8  
                               __ptext62 4FF6                                 __ptext54 5588  
                               __ptext46 5550                                 __ptext38 23B4  
                               __ptext71 3D5A                                 __ptext63 5458  
                               __ptext55 558A                                 __ptext47 5582  
                               __ptext39 5410                                 __ptext80 54EA  
                               __ptext72 522A                                 __ptext64 53F6  
                               __ptext56 558C                                 __ptext48 5584  
                               __ptext81 5564                                 __ptext73 4B12  
                               __ptext65 4226                                 __ptext57 5200  
                               __ptext49 5586                                 __ptext90 4FB4  
                               __ptext82 54C4                                 __ptext74 51AA  
                               __ptext66 53A0                                 __ptext58 514E  
                               __ptext91 47C6                                 __ptext83 54FC  
                               __ptext75 30F4                                 __ptext67 527C  
                               __ptext59 4F2E                                 __ptext92 511C  
                               __ptext84 52CA                                 __ptext76 3C3C  
                               __ptext68 45C0                                 __ptext93 557A  
                               __ptext85 5070                                 __ptext77 4C00  
                               __ptext69 517E                                 __ptext94 550E  
                               __ptext86 4902                                 __ptext78 5338  
                               __ptext95 50AC                                 __ptext87 5470  
                               __ptext79 54D8                                 __ptext96 43A0  
                               __ptext88 4C76                                 __ptext97 4166  
                               __ptext89 53BE                                 __ptext98 1C1E  
         vscp_goBootloaderMode@algorithm 0011                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5532                         ??_vscp_setUserID 0012  
                          __size_of_main 00F2                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0CEA                      _vscp_check_pstorage 5338  
                          init_app_ram@i 0021           vscp_handleProtocolEvent@i_1155 0094  
         vscp_handleProtocolEvent@i_1158 0098           vscp_handleProtocolEvent@i_1166 0092  
                       doOneSecondWork@i 0096                     __end_of_vscp_getGUID 54C4  
                          ??_writeEEPROM 0011                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 001C                 ECANSendMessage@tempBSEL0 0035  
                           ?_getCANFrame 0020                      ECANSendMessage@mode 0032  
                   __end_of_vscp_getZone 5546                      ECANSendMessage@temp 0038  
                      ?__ECANPointBuffer 000E                        vscp_setUserID@idx 0012  
                   __end_of_vscp_setGUID 53A0                       vscp_readAppReg@reg 0013  
                     vscp_readAppReg@pos 0012                             i1_ConvertADC 557E  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 008A                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                         init_app_eeprom@i 0011  
                    _vscp_setControlByte 54D8                                 exp@coeff 0620  
                  ___flmul@f3_as_product 002E                                 log@coeff 0648  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 1C1E  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
                            ??_eval_poly 0042             ??_vscp_readNicknamePermanent 0012  
                    ECANReceiveMessage@i 001B                          _vscp_guid_reset 004B  
                        _vscp_readStdReg 36A4             vscp_handleDropNickname@bytes 0012  
             __end_of_vscp_newNodeOnline 522A                       _ECANReceiveMessage 30F4  
                         ??_getVSCPFrame 0029                          _vscp_initbtncnt 00BE  
                        sendVSCPFrame@id 007B                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 5458                     ?_vscp_setControlByte 0001  
                          _timeout_clock 00B0                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 00C0                             handle_sync@i 0095  
                        _doOneSecondWork 34E2                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0011              __end_of_getCalibrationValue 4F2E  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0011  
                  __size_of__CANIDToRegs 00C0                           readEEPROM@data 0011  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 5588              _vscp_getBootLoaderAlgorithm 5586  
       __size_of_interrupt_at_low_vector 029C                   ECANSendMessage@dataLen 001D  
                    __end_of_writeEEPROM 52F0                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 0018                    ??_vscp_check_pstorage 0012  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 5458  
             __end_of_Celsius2Fahrenheit 4C00             __end_of_ECANSetOperationMode 5488  
                   _vscp_restoreDefaults 556E              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 0012                  __end_of_vscp_getSubzone 553C  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 0061                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 537E                       __end_of_vscp_error 557A  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 00B8  
         __end_of_vscp_handleSetNickname 5338       vscp_handleProtocolEvent@bytes_1162 0096  
                  ??_vscp_setControlByte 0011                     vscp_readRegister@reg 0024  
                           ___fladd@exp1 003A                             ___fladd@exp2 0039  
                           ___fladd@sign 0038                             __CANIDToRegs 3D5A  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 0086  
                          ___asfladd@f1p 003B              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 003D                 __size_of_ECANSendMessage 0166  
                           ___asfldiv@f2 0088  



Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Wed Nov 25 16:57:54 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   112                           	psect	pa_nodes,global,class=CODE,delta=1
   113  0000                     tblptrh	equ	0xFF7
   114                           tblptrl	equ	0xFF6
   115                           tablat	equ	0xFF5
   116                           prodh	equ	0xFF4
   117                           prodl	equ	0xFF3
   118                           intcon	equ	0xFF2
   119                           wreg	equ	0xFE8
   120                           indf1	equ	0xFE7
   121                           fsr1h	equ	0xFE2
   122                           fsr1l	equ	0xFE1
   123                           indf2	equ	0xFDF
   124                           postinc2	equ	0xFDE
   125                           postdec2	equ	0xFDD
   126                           plusw2	equ	0xFDB
   127                           fsr2h	equ	0xFDA
   128                           fsr2l	equ	0xFD9
   129                           status	equ	0xFD8
   130                           
   131                           	psect	smallconst
   132  000600                     __psmallconst:
   133                           	opt stack 0
   134  000600                     _vscp_deviceURL:
   135                           	opt stack 0
   136  000600  77                 	db	119
   137  000601  77                 	db	119
   138  000602  77                 	db	119
   139  000603  2E                 	db	46
   140  000604  65                 	db	101
   141  000605  75                 	db	117
   142  000606  72                 	db	114
   143  000607  6F                 	db	111
   144  000608  73                 	db	115
   145  000609  6F                 	db	111
   146  00060A  75                 	db	117
   147  00060B  72                 	db	114
   148  00060C  63                 	db	99
   149  00060D  65                 	db	101
   150  00060E  2E                 	db	46
   151  00060F  73                 	db	115
   152  000610  65                 	db	101
   153  000611  2F                 	db	47
   154  000612  6E                 	db	110
   155  000613  74                 	db	116
   156  000614  63                 	db	99
   157  000615  31                 	db	49
   158  000616  30                 	db	48
   159  000617  4B                 	db	75
   160  000618  41                 	db	65
   161  000619  5F                 	db	95
   162  00061A  33                 	db	51
   163  00061B  2E                 	db	46
   164  00061C  78                 	db	120
   165  00061D  6D                 	db	109
   166  00061E  6C                 	db	108
   167  00061F  00                 	db	0
   168  000620                     __end_of_vscp_deviceURL:
   169                           	opt stack 0
   170  000620                     exp@coeff:
   171                           	opt stack 0
   172  000620  0000               	dw	0
   173  000622  3F80               	dw	16256
   174  000624  7218               	dw	29208
   175  000626  3F31               	dw	16177
   176  000628  FDF0               	dw	65008
   177  00062A  3E75               	dw	15989
   178  00062C  5847               	dw	22599
   179  00062E  3D63               	dw	15715
   180  000630  9558               	dw	38232
   181  000632  3C1D               	dw	15389
   182  000634  C482               	dw	50306
   183  000636  3AAE               	dw	15022
   184  000638  78A8               	dw	30888
   185  00063A  3921               	dw	14625
   186  00063C  93EF               	dw	37871
   187  00063E  3780               	dw	14208
   188  000640  92A0               	dw	37536
   189  000642  35A7               	dw	13735
   190  000644  5646               	dw	22086
   191  000646  3415               	dw	13333
   192  000648                     __end_ofexp@coeff:
   193                           	opt stack 0
   194  000648                     log@coeff:
   195                           	opt stack 0
   196  000648  0000               	dw	0
   197  00064A  0000               	dw	0
   198  00064C  FFC4               	dw	65476
   199  00064E  3F7F               	dw	16255
   200  000650  EF80               	dw	61312
   201  000652  BEFF               	dw	48895
   202  000654  E190               	dw	57744
   203  000656  3EA9               	dw	16041
   204  000658  82EC               	dw	33516
   205  00065A  BE76               	dw	48758
   206  00065C  AD82               	dw	44418
   207  00065E  3E2B               	dw	15915
   208  000660  3C0E               	dw	15374
   209  000662  BDC3               	dw	48579
   210  000664  D187               	dw	53639
   211  000666  3D13               	dw	15635
   212  000668  7841               	dw	30785
   213  00066A  BBD3               	dw	48083
   214  00066C                     __end_oflog@coeff:
   215                           	opt stack 0
   216  0000                     _ADCON0	set	4034
   217  0000                     _ADCON0bits	set	4034
   218  0000                     _ADCON1	set	4033
   219  0000                     _ADCON2	set	4032
   220  0000                     _ADRESH	set	4036
   221  0000                     _ADRESL	set	4035
   222  0000                     _BRGCON1	set	3952
   223  0000                     _BRGCON2	set	3953
   224  0000                     _BRGCON3	set	3954
   225  0000                     _BSEL0	set	3576
   226  0000                     _CANCON	set	3951
   227  0000                     _CIOCON	set	3955
   228  0000                     _ECANCON	set	3959
   229  0000                     _EEADR	set	4009
   230  0000                     _EECON1bits	set	4006
   231  0000                     _EECON2	set	4007
   232  0000                     _EEDATA	set	4008
   233  0000                     _INTCONbits	set	4082
   234  0000                     _MSEL0	set	3568
   235  0000                     _MSEL1	set	3569
   236  0000                     _MSEL2	set	3570
   237  0000                     _PIE1bits	set	3997
   238  0000                     _PIR1bits	set	3998
   239  0000                     _PIR2bits	set	4001
   240  0000                     _PORTC	set	3970
   241  0000                     _RXB1CONbits	set	3920
   242  0000                     _RXF0EIDH	set	3842
   243  0000                     _RXF0EIDL	set	3843
   244  0000                     _RXF0SIDH	set	3840
   245  0000                     _RXF0SIDL	set	3841
   246  0000                     _RXF1EIDH	set	3846
   247  0000                     _RXF1EIDL	set	3847
   248  0000                     _RXF1SIDH	set	3844
   249  0000                     _RXF1SIDL	set	3845
   250  0000                     _RXFBCON0	set	3552
   251  0000                     _RXFBCON1	set	3553
   252  0000                     _RXFBCON2	set	3554
   253  0000                     _RXFBCON3	set	3555
   254  0000                     _RXFBCON4	set	3556
   255  0000                     _RXFBCON5	set	3557
   256  0000                     _RXFBCON6	set	3558
   257  0000                     _RXFBCON7	set	3559
   258  0000                     _RXFCON0	set	3540
   259  0000                     _RXFCON1	set	3541
   260  0000                     _RXM0EIDH	set	3866
   261  0000                     _RXM0EIDL	set	3867
   262  0000                     _RXM0SIDH	set	3864
   263  0000                     _RXM0SIDL	set	3865
   264  0000                     _RXM1EIDH	set	3870
   265  0000                     _RXM1EIDL	set	3871
   266  0000                     _RXM1SIDH	set	3868
   267  0000                     _RXM1SIDL	set	3869
   268  0000                     _T0CON	set	4053
   269  0000                     _T0CONbits	set	4053
   270  0000                     _TMR0H	set	4055
   271  0000                     _TMR0L	set	4054
   272  0000                     _TRISA	set	3986
   273  0000                     _TRISB	set	3987
   274  0000                     _TRISC	set	3988
   275  0000                     _B0RXFUL	set	28935
   276  0000                     _B0TXEN	set	28610
   277  0000                     _B1RXFUL	set	29063
   278  0000                     _B1TXEN	set	28611
   279  0000                     _B2RXFUL	set	29191
   280  0000                     _B2TXEN	set	28612
   281  0000                     _B3RXFUL	set	29319
   282  0000                     _B3TXEN	set	28613
   283  0000                     _B4RXFUL	set	29447
   284  0000                     _B4TXEN	set	28614
   285  0000                     _B5RXFUL	set	29575
   286  0000                     _B5TXEN	set	28615
   287  0000                     _FIFOEMPTY	set	31655
   288  0000                     _IRXIF	set	32039
   289  0000                     _MDSEL0	set	31678
   290  0000                     _MDSEL1	set	31679
   291  0000                     _RXB0FILHIT0	set	31488
   292  0000                     _RXB0FUL	set	31495
   293  0000                     _RXB0IF	set	32032
   294  0000                     _RXB0OVFL	set	31655
   295  0000                     _RXB1IF	set	32033
   296  0000                     _RXB1OVFL	set	31654
   297  0000                     _RXM0EXIDM	set	30923
   298  0000                     _RXM1EXIDEN	set	30955
   299  0000                     _B0CON	set	3616
   300  0000                     _B1CON	set	3632
   301  0000                     _B2CON	set	3648
   302  0000                     _B3CON	set	3664
   303  0000                     _B4CON	set	3680
   304  0000                     _B5CON	set	3696
   305  0000                     _RXB0CON	set	3936
   306  0000                     _RXB1CON	set	3920
   307  0000                     _TXB0CON	set	3904
   308  0000                     _TXB1CON	set	3888
   309  0000                     _TXB2CON	set	3872
   310                           
   311                           ; #config settings
   312  00066C  00                 	db	0	; dummy byte at the end
   313  0000                     tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           prodh	equ	0xFF4
   317                           prodl	equ	0xFF3
   318                           intcon	equ	0xFF2
   319                           wreg	equ	0xFE8
   320                           indf1	equ	0xFE7
   321                           fsr1h	equ	0xFE2
   322                           fsr1l	equ	0xFE1
   323                           indf2	equ	0xFDF
   324                           postinc2	equ	0xFDE
   325                           postdec2	equ	0xFDD
   326                           plusw2	equ	0xFDB
   327                           fsr2h	equ	0xFDA
   328                           fsr2l	equ	0xFD9
   329                           status	equ	0xFD8
   330                           
   331                           	psect	cinit
   332  004CD8                     __pcinit:
   333                           	opt stack 0
   334  004CD8                     start_initialization:
   335                           	opt stack 0
   336  004CD8                     __initialization:
   337                           	opt stack 0
   338                           
   339                           ; Clear objects allocated to BIGRAM (960 bytes)
   340  004CD8  EE01  F0A2         	lfsr	0,__pbssBIGRAM
   341  004CDC  EE13 F0C0          	lfsr	1,960
   342  004CE0                     clear_0:
   343  004CE0  6AEE               	clrf	postinc0,c
   344  004CE2  50E5               	movf	postdec1,w,c
   345  004CE4  50E1               	movf	fsr1l,w,c
   346  004CE6  E1FC               	bnz	clear_0
   347  004CE8  50E2               	movf	fsr1h,w,c
   348  004CEA  E1FA               	bnz	clear_0
   349                           
   350                           ; Clear objects allocated to BANK1 (110 bytes)
   351  004CEC  EE01  F000         	lfsr	0,__pbssBANK1
   352  004CF0  0E6E               	movlw	110
   353  004CF2                     clear_1:
   354  004CF2  6AEE               	clrf	postinc0,c
   355  004CF4  06E8               	decf	wreg,f,c
   356  004CF6  E1FD               	bnz	clear_1
   357                           
   358                           ; Clear objects allocated to BANK0 (29 bytes)
   359  004CF8  EE00  F0BC         	lfsr	0,__pbssBANK0
   360  004CFC  0E1D               	movlw	29
   361  004CFE                     clear_2:
   362  004CFE  6AEE               	clrf	postinc0,c
   363  004D00  06E8               	decf	wreg,f,c
   364  004D02  E1FD               	bnz	clear_2
   365                           
   366                           ; Clear objects allocated to COMRAM (13 bytes)
   367  004D04  EE00  F046         	lfsr	0,__pbssCOMRAM
   368  004D08  0E0D               	movlw	13
   369  004D0A                     clear_3:
   370  004D0A  6AEE               	clrf	postinc0,c
   371  004D0C  06E8               	decf	wreg,f,c
   372  004D0E  E1FD               	bnz	clear_3
   373  004D10                     end_of_initialization:
   374                           	opt stack 0
   375  004D10                     __end_of__initialization:
   376                           	opt stack 0
   377  004D10  0E00               	movlw	low (__Lmediumconst shr (0+16))
   378  004D12  6EF8               	movwf	tblptru,c
   379  004D14  0100               	movlb	0
   380  004D16  EF2E  F01F         	goto	_main	;jump to C main() function
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           prodh	equ	0xFF4
   386                           prodl	equ	0xFF3
   387                           intcon	equ	0xFF2
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           indf1	equ	0xFE7
   391                           postdec1	equ	0xFE5
   392                           fsr1h	equ	0xFE2
   393                           fsr1l	equ	0xFE1
   394                           indf2	equ	0xFDF
   395                           postinc2	equ	0xFDE
   396                           postdec2	equ	0xFDD
   397                           plusw2	equ	0xFDB
   398                           fsr2h	equ	0xFDA
   399                           fsr2l	equ	0xFD9
   400                           status	equ	0xFD8
   401                           
   402                           	psect	bssCOMRAM
   403  000046                     __pbssCOMRAM:
   404                           	opt stack 0
   405  000046                     _vscp_page_select:
   406                           	opt stack 0
   407  000046                     	ds	2
   408  000048                     _adc_conversion_flags:
   409                           	opt stack 0
   410  000048                     	ds	1
   411  000049                     _adc_series_counter:
   412                           	opt stack 0
   413  000049                     	ds	1
   414  00004A                     _high_alarm:
   415                           	opt stack 0
   416  00004A                     	ds	1
   417  00004B                     _low_alarm:
   418                           	opt stack 0
   419  00004B                     	ds	1
   420  00004C                     _seconds:
   421                           	opt stack 0
   422  00004C                     	ds	1
   423  00004D                     _vscp_alarmstatus:
   424                           	opt stack 0
   425  00004D                     	ds	1
   426  00004E                     _vscp_guid_reset:
   427                           	opt stack 0
   428  00004E                     	ds	1
   429  00004F                     _vscp_initbtncnt:
   430                           	opt stack 0
   431  00004F                     	ds	1
   432  000050                     _vscp_initledfunc:
   433                           	opt stack 0
   434  000050                     	ds	1
   435  000051                     _vscp_probe_address:
   436                           	opt stack 0
   437  000051                     	ds	1
   438  000052                     _vscp_statuscnt:
   439                           	opt stack 0
   440  000052                     	ds	1
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           prodh	equ	0xFF4
   446                           prodl	equ	0xFF3
   447                           intcon	equ	0xFF2
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           indf1	equ	0xFE7
   451                           postdec1	equ	0xFE5
   452                           fsr1h	equ	0xFE2
   453                           fsr1l	equ	0xFE1
   454                           indf2	equ	0xFDF
   455                           postinc2	equ	0xFDE
   456                           postdec2	equ	0xFDD
   457                           plusw2	equ	0xFDB
   458                           fsr2h	equ	0xFDA
   459                           fsr2l	equ	0xFD9
   460                           status	equ	0xFD8
   461                           
   462                           	psect	bssBANK0
   463  0000BC                     __pbssBANK0:
   464                           	opt stack 0
   465  0000BC                     _vscp_nickname:
   466                           	opt stack 0
   467  0000BC                     	ds	1
   468  0000BD                     _vscp_node_state:
   469                           	opt stack 0
   470  0000BD                     	ds	1
   471  0000BE                     _vscp_imsg:
   472                           	opt stack 0
   473  0000BE                     	ds	14
   474  0000CC                     _vscp_omsg:
   475                           	opt stack 0
   476  0000CC                     	ds	13
   477                           tblptru	equ	0xFF8
   478                           tblptrh	equ	0xFF7
   479                           tblptrl	equ	0xFF6
   480                           tablat	equ	0xFF5
   481                           prodh	equ	0xFF4
   482                           prodl	equ	0xFF3
   483                           intcon	equ	0xFF2
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           indf1	equ	0xFE7
   487                           postdec1	equ	0xFE5
   488                           fsr1h	equ	0xFE2
   489                           fsr1l	equ	0xFE1
   490                           indf2	equ	0xFDF
   491                           postinc2	equ	0xFDE
   492                           postdec2	equ	0xFDD
   493                           plusw2	equ	0xFDB
   494                           fsr2h	equ	0xFDA
   495                           fsr2l	equ	0xFD9
   496                           status	equ	0xFD8
   497                           
   498                           	psect	bssBANK1
   499  000100                     __pbssBANK1:
   500                           	opt stack 0
   501  000100                     _current_temp:
   502                           	opt stack 0
   503  000100                     	ds	12
   504  00010C                     _seconds_temp:
   505                           	opt stack 0
   506  00010C                     	ds	6
   507  000112                     _measurement_clock:
   508                           	opt stack 0
   509  000112                     	ds	4
   510  000116                     _timeout_clock:
   511                           	opt stack 0
   512  000116                     	ds	4
   513  00011A                     _sendTimer:
   514                           	opt stack 0
   515  00011A                     	ds	2
   516  00011C                     _vscp_configtimer:
   517                           	opt stack 0
   518  00011C                     	ds	2
   519  00011E                     _vscp_timer:
   520                           	opt stack 0
   521  00011E                     	ds	2
   522  000120                     __ECANRxFilterHitInfo:
   523                           	opt stack 0
   524  000120                     	ds	1
   525  000121                     _vscp_hour:
   526                           	opt stack 0
   527  000121                     	ds	1
   528  000122                     _vscp_minute:
   529                           	opt stack 0
   530  000122                     	ds	1
   531  000123                     _vscp_node_substate:
   532                           	opt stack 0
   533  000123                     	ds	1
   534  000124                     _vscp_probe_cnt:
   535                           	opt stack 0
   536  000124                     	ds	1
   537  000125                     _vscp_second:
   538                           	opt stack 0
   539  000125                     	ds	1
   540  000126                     _sh_coefficients:
   541                           	opt stack 0
   542  000126                     	ds	72
   543                           tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           prodh	equ	0xFF4
   548                           prodl	equ	0xFF3
   549                           intcon	equ	0xFF2
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           indf1	equ	0xFE7
   553                           postdec1	equ	0xFE5
   554                           fsr1h	equ	0xFE2
   555                           fsr1l	equ	0xFE1
   556                           indf2	equ	0xFDF
   557                           postinc2	equ	0xFDE
   558                           postdec2	equ	0xFDD
   559                           plusw2	equ	0xFDB
   560                           fsr2h	equ	0xFDA
   561                           fsr2l	equ	0xFD9
   562                           status	equ	0xFD8
   563                           
   564                           	psect	bssBIGRAM
   565  0001A2                     __pbssBIGRAM:
   566                           	opt stack 0
   567  0001A2                     _adc:
   568                           	opt stack 0
   569  0001A2                     	ds	960
   570                           tblptru	equ	0xFF8
   571                           tblptrh	equ	0xFF7
   572                           tblptrl	equ	0xFF6
   573                           tablat	equ	0xFF5
   574                           prodh	equ	0xFF4
   575                           prodl	equ	0xFF3
   576                           intcon	equ	0xFF2
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           indf1	equ	0xFE7
   580                           postdec1	equ	0xFE5
   581                           fsr1h	equ	0xFE2
   582                           fsr1l	equ	0xFE1
   583                           indf2	equ	0xFDF
   584                           postinc2	equ	0xFDE
   585                           postdec2	equ	0xFDD
   586                           plusw2	equ	0xFDB
   587                           fsr2h	equ	0xFDA
   588                           fsr2l	equ	0xFD9
   589                           status	equ	0xFD8
   590                           
   591                           	psect	cstackBANK1
   592  00016E                     __pcstackBANK1:
   593                           	opt stack 0
   594  00016E                     doWork@Rinf:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0x0
   598  00016E                     	ds	4
   599  000172                     doWork@calVoltage:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x4
   603  000172                     	ds	4
   604  000176                     _doWork$2267:
   605                           	opt stack 0
   606                           
   607                           ; 4 bytes @ 0x8
   608  000176                     	ds	4
   609  00017A                     _doWork$2268:
   610                           	opt stack 0
   611                           
   612                           ; 4 bytes @ 0xC
   613  00017A                     	ds	4
   614  00017E                     _doWork$2269:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x10
   618  00017E                     	ds	16
   619  00018E                     doWork@v:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0x20
   623  00018E                     	ds	4
   624  000192                     doWork@B:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x24
   628  000192                     	ds	2
   629  000194                     doWork@resistance:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0x26
   633  000194                     	ds	4
   634  000198                     doWork@j:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x2A
   638  000198                     	ds	1
   639  000199                     doWork@avarage:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x2B
   643  000199                     	ds	4
   644  00019D                     doWork@temp:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x2F
   648  00019D                     	ds	4
   649  0001A1                     doWork@i:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x33
   653  0001A1                     	ds	1
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           prodh	equ	0xFF4
   659                           prodl	equ	0xFF3
   660                           intcon	equ	0xFF2
   661                           postinc0	equ	0xFEE
   662                           wreg	equ	0xFE8
   663                           indf1	equ	0xFE7
   664                           postdec1	equ	0xFE5
   665                           fsr1h	equ	0xFE2
   666                           fsr1l	equ	0xFE1
   667                           indf2	equ	0xFDF
   668                           postinc2	equ	0xFDE
   669                           postdec2	equ	0xFDD
   670                           plusw2	equ	0xFDB
   671                           fsr2h	equ	0xFDA
   672                           fsr2l	equ	0xFD9
   673                           status	equ	0xFD8
   674                           
   675                           	psect	cstackBANK0
   676  000060                     __pcstackBANK0:
   677                           	opt stack 0
   678  000060                     ?_sendVSCPFrame:
   679                           	opt stack 0
   680  000060                     ?___fldiv:
   681                           	opt stack 0
   682  000060                     sendVSCPFrame@vscpclass:
   683                           	opt stack 0
   684  000060                     ___fldiv@f1:
   685                           	opt stack 0
   686                           
   687                           ; 4 bytes @ 0x0
   688  000060                     	ds	2
   689  000062                     sendVSCPFrame@vscptype:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x2
   693  000062                     	ds	1
   694  000063                     sendVSCPFrame@nodeid:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x3
   698  000063                     	ds	1
   699  000064                     sendVSCPFrame@priority:
   700                           	opt stack 0
   701  000064                     ___fldiv@f2:
   702                           	opt stack 0
   703                           
   704                           ; 4 bytes @ 0x4
   705  000064                     	ds	1
   706  000065                     sendVSCPFrame@size:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x5
   710  000065                     	ds	1
   711  000066                     sendVSCPFrame@pData:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x6
   715  000066                     	ds	1
   716  000067                     ??_sendVSCPFrame:
   717                           
   718                           ; 0 bytes @ 0x7
   719  000067                     	ds	1
   720  000068                     ?___flmul:
   721                           	opt stack 0
   722  000068                     ?___asfldiv:
   723                           	opt stack 0
   724  000068                     ___asfldiv@f1p:
   725                           	opt stack 0
   726  000068                     ___flmul@f1:
   727                           	opt stack 0
   728                           
   729                           ; 4 bytes @ 0x8
   730  000068                     	ds	2
   731  00006A                     ___asfldiv@f2:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0xA
   735  00006A                     	ds	2
   736  00006C                     ___flmul@f2:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0xC
   740  00006C                     	ds	11
   741  000077                     ___flmul@exp:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x17
   745  000077                     	ds	1
   746  000078                     ___flmul@f3_as_product:
   747                           	opt stack 0
   748                           
   749                           ; 4 bytes @ 0x18
   750  000078                     	ds	3
   751  00007B                     sendVSCPFrame@id:
   752                           	opt stack 0
   753                           
   754                           ; 4 bytes @ 0x1B
   755  00007B                     	ds	1
   756  00007C                     ___flmul@cntr:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x1C
   760  00007C                     	ds	1
   761  00007D                     ___flmul@sign:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x1D
   765  00007D                     	ds	1
   766  00007E                     ?_Celsius2Fahrenheit:
   767                           	opt stack 0
   768  00007E                     ?_eval_poly:
   769                           	opt stack 0
   770  00007E                     ?___asflmul:
   771                           	opt stack 0
   772  00007E                     ?___fltol:
   773                           	opt stack 0
   774  00007E                     Celsius2Fahrenheit@tc:
   775                           	opt stack 0
   776  00007E                     ___asflmul@multiplicand:
   777                           	opt stack 0
   778  00007E                     ___fltol@f1:
   779                           	opt stack 0
   780  00007E                     eval_poly@x:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x1E
   784  00007E                     	ds	1
   785  00007F                     ??_vscp_handleProtocolEvent:
   786  00007F                     ??_vscp_doOneSecondWork:
   787                           
   788                           ; 0 bytes @ 0x1F
   789  00007F                     	ds	3
   790  000082                     ??___fltol:
   791  000082                     eval_poly@d:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x22
   795  000082                     	ds	1
   796  000083                     eval_poly@n:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x23
   800  000083                     	ds	2
   801  000085                     eval_poly@res:
   802                           	opt stack 0
   803                           
   804                           ; 4 bytes @ 0x25
   805  000085                     	ds	1
   806  000086                     ?_setEventData:
   807                           	opt stack 0
   808  000086                     ?___aldiv:
   809                           	opt stack 0
   810  000086                     setEventData@v:
   811                           	opt stack 0
   812  000086                     vscp_handleProtocolEvent@page_save:
   813                           	opt stack 0
   814  000086                     ___aldiv@dividend:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x26
   818  000086                     	ds	2
   819  000088                     setEventData@unit:
   820                           	opt stack 0
   821  000088                     vscp_handleProtocolEvent@page_save_1162:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x28
   825  000088                     	ds	1
   826  000089                     ?_log:
   827                           	opt stack 0
   828  000089                     ?_ldexp:
   829                           	opt stack 0
   830  000089                     setEventData@newval:
   831                           	opt stack 0
   832  000089                     ldexp@value:
   833                           	opt stack 0
   834  000089                     log@x:
   835                           	opt stack 0
   836                           
   837                           ; 4 bytes @ 0x29
   838  000089                     	ds	1
   839  00008A                     vscp_handleProtocolEvent@offset:
   840                           	opt stack 0
   841  00008A                     ___aldiv@divisor:
   842                           	opt stack 0
   843                           
   844                           ; 4 bytes @ 0x2A
   845  00008A                     	ds	1
   846  00008B                     vscp_handleProtocolEvent@pos:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x2B
   850  00008B                     	ds	1
   851  00008C                     vscp_handleProtocolEvent@bytes:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x2C
   855  00008C                     	ds	1
   856  00008D                     vscp_handleProtocolEvent@len:
   857                           	opt stack 0
   858  00008D                     setEventData@ival:
   859                           	opt stack 0
   860  00008D                     ldexp@newexp:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x2D
   864  00008D                     	ds	1
   865  00008E                     vscp_handleProtocolEvent@pos_1151:
   866                           	opt stack 0
   867  00008E                     ___aldiv@counter:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x2E
   871  00008E                     	ds	1
   872  00008F                     ??_ldexp:
   873  00008F                     sendTempEvent@i:
   874                           	opt stack 0
   875  00008F                     vscp_handleProtocolEvent@len_1152:
   876                           	opt stack 0
   877  00008F                     ___aldiv@sign:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x2F
   881  00008F                     	ds	1
   882  000090                     ??_handle_sync:
   883  000090                     ??_doOneSecondWork:
   884  000090                     vscp_handleProtocolEvent@bytes_this_time:
   885                           	opt stack 0
   886  000090                     ___aldiv@quotient:
   887                           	opt stack 0
   888                           
   889                           ; 4 bytes @ 0x30
   890  000090                     	ds	1
   891  000091                     vscp_handleProtocolEvent@cb:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x31
   895  000091                     	ds	1
   896  000092                     handle_sync@i:
   897                           	opt stack 0
   898  000092                     vscp_handleProtocolEvent@i_1161:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x32
   902  000092                     	ds	1
   903  000093                     vscp_handleProtocolEvent@k:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x33
   907  000093                     	ds	1
   908  000094                     ?___altofl:
   909                           	opt stack 0
   910  000094                     vscp_handleProtocolEvent@i_1150:
   911                           	opt stack 0
   912  000094                     ___altofl@c:
   913                           	opt stack 0
   914                           
   915                           ; 4 bytes @ 0x34
   916  000094                     	ds	1
   917  000095                     vscp_handleProtocolEvent@byte:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x35
   921  000095                     	ds	1
   922  000096                     vscp_handleProtocolEvent@bytes_1157:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x36
   926  000096                     	ds	1
   927  000097                     doOneSecondWork@tmp:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x37
   931  000097                     	ds	1
   932  000098                     ?_floor:
   933                           	opt stack 0
   934  000098                     vscp_handleProtocolEvent@i_1153:
   935                           	opt stack 0
   936  000098                     doOneSecondWork@setpoint:
   937                           	opt stack 0
   938  000098                     floor@x:
   939                           	opt stack 0
   940                           
   941                           ; 4 bytes @ 0x38
   942  000098                     	ds	1
   943  000099                     vscp_handleProtocolEvent@i:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0x39
   947  000099                     	ds	1
   948  00009A                     doOneSecondWork@i:
   949                           	opt stack 0
   950  00009A                     vscp_handleProtocolEvent@j:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x3A
   954  00009A                     	ds	2
   955  00009C                     floor@i:
   956                           	opt stack 0
   957                           
   958                           ; 4 bytes @ 0x3C
   959  00009C                     	ds	4
   960  0000A0                     floor@expon:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x40
   964  0000A0                     	ds	2
   965  0000A2                     ?_exp:
   966                           	opt stack 0
   967  0000A2                     exp@x:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x42
   971  0000A2                     	ds	4
   972  0000A6                     _exp$2273:
   973                           	opt stack 0
   974                           
   975                           ; 4 bytes @ 0x46
   976  0000A6                     	ds	4
   977  0000AA                     exp@exponent:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x4A
   981  0000AA                     	ds	2
   982  0000AC                     exp@sign:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x4C
   986  0000AC                     	ds	1
   987  0000AD                     ??_doWork:
   988                           
   989                           ; 0 bytes @ 0x4D
   990  0000AD                     	ds	14
   991  0000BB                     main@i:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x5B
   995  0000BB                     	ds	1
   996                           tblptru	equ	0xFF8
   997                           tblptrh	equ	0xFF7
   998                           tblptrl	equ	0xFF6
   999                           tablat	equ	0xFF5
  1000                           prodh	equ	0xFF4
  1001                           prodl	equ	0xFF3
  1002                           intcon	equ	0xFF2
  1003                           postinc0	equ	0xFEE
  1004                           wreg	equ	0xFE8
  1005                           indf1	equ	0xFE7
  1006                           postdec1	equ	0xFE5
  1007                           fsr1h	equ	0xFE2
  1008                           fsr1l	equ	0xFE1
  1009                           indf2	equ	0xFDF
  1010                           postinc2	equ	0xFDE
  1011                           postdec2	equ	0xFDD
  1012                           plusw2	equ	0xFDB
  1013                           fsr2h	equ	0xFDA
  1014                           fsr2l	equ	0xFD9
  1015                           status	equ	0xFD8
  1016                           
  1017                           	psect	cstackCOMRAM
  1018  000001                     __pcstackCOMRAM:
  1019                           	opt stack 0
  1020  000001                     ?_WriteTimer0:
  1021                           	opt stack 0
  1022  000001                     WriteTimer0@timer0:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x0
  1026  000001                     	ds	2
  1027  000003                     WriteTimer0@timer:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x2
  1031  000003                     	ds	2
  1032  000005                     ??_interrupt_at_low_vector:
  1033                           
  1034                           ; 0 bytes @ 0x4
  1035  000005                     	ds	9
  1036  00000E                     ?_writeEEPROM:
  1037                           	opt stack 0
  1038  00000E                     ?__CANIDToRegs:
  1039                           	opt stack 0
  1040  00000E                     ?__RegsToCANID:
  1041                           	opt stack 0
  1042  00000E                     ??_vscp_getMDF_URL:
  1043  00000E                     ?___flge:
  1044                           	opt stack 0
  1045  00000E                     ?___lbmod:
  1046                           	opt stack 0
  1047  00000E                     ?__ECANPointBuffer:
  1048                           	opt stack 0
  1049  00000E                     ?___wmul:
  1050                           	opt stack 0
  1051  00000E                     ?___flpack:
  1052                           	opt stack 0
  1053  00000E                     ?_frexp:
  1054                           	opt stack 0
  1055  00000E                     ?_vscp_getFamilyCode:
  1056                           	opt stack 0
  1057  00000E                     ?_vscp_getFamilyType:
  1058                           	opt stack 0
  1059  00000E                     ?___flneg:
  1060                           	opt stack 0
  1061  00000E                     init_app_ram@i:
  1062                           	opt stack 0
  1063  00000E                     vscp_getMatrixInfo@pData:
  1064                           	opt stack 0
  1065  00000E                     ___lbmod@divisor:
  1066                           	opt stack 0
  1067  00000E                     __CANIDToRegs@ptr:
  1068                           	opt stack 0
  1069  00000E                     __RegsToCANID@ptr:
  1070                           	opt stack 0
  1071  00000E                     writeEEPROM@address:
  1072                           	opt stack 0
  1073  00000E                     ___wmul@multiplier:
  1074                           	opt stack 0
  1075  00000E                     ___flpack@arg:
  1076                           	opt stack 0
  1077  00000E                     ___flge@ff1:
  1078                           	opt stack 0
  1079  00000E                     ___flneg@f1:
  1080                           	opt stack 0
  1081  00000E                     frexp@value:
  1082                           	opt stack 0
  1083                           
  1084                           ; 4 bytes @ 0xD
  1085  00000E                     	ds	1
  1086  00000F                     vscp_getMDF_URL@idx:
  1087                           	opt stack 0
  1088  00000F                     vscp_getMatrixInfo@i:
  1089                           	opt stack 0
  1090  00000F                     ___lbmod@dividend:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0xE
  1094  00000F                     	ds	1
  1095  000010                     __RegsToCANID@val:
  1096                           	opt stack 0
  1097  000010                     writeEEPROM@data:
  1098                           	opt stack 0
  1099  000010                     ___lbmod@counter:
  1100                           	opt stack 0
  1101  000010                     ___wmul@multiplicand:
  1102                           	opt stack 0
  1103  000010                     __CANIDToRegs@val:
  1104                           	opt stack 0
  1105                           
  1106                           ; 4 bytes @ 0xF
  1107  000010                     	ds	1
  1108  000011                     ?_vscp_setGUID:
  1109                           	opt stack 0
  1110  000011                     ?_vscp_setUserID:
  1111                           	opt stack 0
  1112  000011                     ?_vscp_setManufacturerId:
  1113                           	opt stack 0
  1114  000011                     vscp_setGUID@data:
  1115                           	opt stack 0
  1116  000011                     vscp_setUserID@data:
  1117                           	opt stack 0
  1118  000011                     vscp_setManufacturerId@data:
  1119                           	opt stack 0
  1120  000011                     vscp_goBootloaderMode@algorithm:
  1121                           	opt stack 0
  1122  000011                     vscp_writeNicknamePermanent@nickname:
  1123                           	opt stack 0
  1124  000011                     vscp_setSegmentCRC@crc:
  1125                           	opt stack 0
  1126  000011                     vscp_setControlByte@ctrl:
  1127                           	opt stack 0
  1128  000011                     __RegsToCANID@type:
  1129                           	opt stack 0
  1130  000011                     __ECANPointBuffer@b:
  1131                           	opt stack 0
  1132  000011                     ___lbmod@rem:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x10
  1136  000011                     	ds	1
  1137  000012                     ??__RegsToCANID:
  1138  000012                     vscp_setGUID@idx:
  1139                           	opt stack 0
  1140  000012                     vscp_setUserID@idx:
  1141                           	opt stack 0
  1142  000012                     vscp_setManufacturerId@idx:
  1143                           	opt stack 0
  1144  000012                     ___flpack@exp:
  1145                           	opt stack 0
  1146  000012                     __ECANPointBuffer@pt:
  1147                           	opt stack 0
  1148  000012                     frexp@eptr:
  1149                           	opt stack 0
  1150  000012                     ___flge@ff2:
  1151                           	opt stack 0
  1152                           
  1153                           ; 4 bytes @ 0x11
  1154  000012                     	ds	1
  1155  000013                     ___flpack@sign:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x12
  1159  000013                     	ds	1
  1160  000014                     ??___flpack:
  1161  000014                     ??_frexp:
  1162  000014                     __CANIDToRegs@type:
  1163                           	opt stack 0
  1164  000014                     __RegsToCANID@Value:
  1165                           	opt stack 0
  1166  000014                     ___wmul@product:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x13
  1170  000014                     	ds	1
  1171  000015                     ??__CANIDToRegs:
  1172  000015                     ?_ECANReceiveMessage:
  1173                           	opt stack 0
  1174  000015                     ECANReceiveMessage@data:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x14
  1178  000015                     	ds	1
  1179  000016                     ?_readEEPROM:
  1180                           	opt stack 0
  1181  000016                     ECANReceiveMessage@dataLen:
  1182                           	opt stack 0
  1183  000016                     readEEPROM@address:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x15
  1187  000016                     	ds	1
  1188  000017                     ECANReceiveMessage@msgFlags:
  1189                           	opt stack 0
  1190  000017                     __CANIDToRegs@Value:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x16
  1194  000017                     	ds	1
  1195  000018                     ?_ECANSendMessage:
  1196                           	opt stack 0
  1197  000018                     ?___awtofl:
  1198                           	opt stack 0
  1199  000018                     ECANReceiveMessage@savedPtr:
  1200                           	opt stack 0
  1201  000018                     ___awtofl@c:
  1202                           	opt stack 0
  1203  000018                     ECANSendMessage@id:
  1204                           	opt stack 0
  1205                           
  1206                           ; 4 bytes @ 0x17
  1207  000018                     	ds	1
  1208  000019                     readEEPROM@data:
  1209                           	opt stack 0
  1210                           
  1211                           ; 1 bytes @ 0x18
  1212  000019                     	ds	1
  1213  00001A                     ??_writeCoeffs2Ram:
  1214  00001A                     ?_getCalibrationValue:
  1215                           	opt stack 0
  1216  00001A                     ?___lwtofl:
  1217                           	opt stack 0
  1218  00001A                     vscp_readAppReg@pos:
  1219                           	opt stack 0
  1220  00001A                     vscp_getGUID@idx:
  1221                           	opt stack 0
  1222  00001A                     vscp_getUserID@idx:
  1223                           	opt stack 0
  1224  00001A                     vscp_getManufacturerId@idx:
  1225                           	opt stack 0
  1226  00001A                     ECANReceiveMessage@id:
  1227                           	opt stack 0
  1228  00001A                     vscp_handleDropNickname@bytes:
  1229                           	opt stack 0
  1230  00001A                     ___lwtofl@c:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x19
  1234  00001A                     	ds	1
  1235  00001B                     ??_vscp_readStdReg:
  1236  00001B                     ?_vscp_writeStdReg:
  1237                           	opt stack 0
  1238  00001B                     vscp_readAppReg@reg:
  1239                           	opt stack 0
  1240  00001B                     ECANReceiveMessage@i:
  1241                           	opt stack 0
  1242  00001B                     vscp_writeStdReg@value:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x1A
  1246  00001B                     	ds	1
  1247  00001C                     ??_getCalibrationValue:
  1248  00001C                     ??_vscp_writeStdReg:
  1249  00001C                     vscp_readAppReg@rv:
  1250                           	opt stack 0
  1251  00001C                     ECANSendMessage@data:
  1252                           	opt stack 0
  1253  00001C                     ECANReceiveMessage@mode:
  1254                           	opt stack 0
  1255  00001C                     writeCoeffs2Ram@c:
  1256                           	opt stack 0
  1257                           
  1258                           ; 3 bytes @ 0x1B
  1259  00001C                     	ds	1
  1260  00001D                     ECANSendMessage@dataLen:
  1261                           	opt stack 0
  1262  00001D                     ECANReceiveMessage@temp:
  1263                           	opt stack 0
  1264  00001D                     ___awtofl@sign:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x1C
  1268  00001D                     	ds	1
  1269  00001E                     ?___fladd:
  1270                           	opt stack 0
  1271  00001E                     ECANSendMessage@msgFlags:
  1272                           	opt stack 0
  1273  00001E                     ECANReceiveMessage@ptr:
  1274                           	opt stack 0
  1275  00001E                     ___fladd@f1:
  1276                           	opt stack 0
  1277                           
  1278                           ; 4 bytes @ 0x1D
  1279  00001E                     	ds	1
  1280  00001F                     ??_ECANSendMessage:
  1281  00001F                     getCalibrationValue@cal:
  1282                           	opt stack 0
  1283  00001F                     writeCoeffs2Ram@i:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x1E
  1287  00001F                     	ds	1
  1288  000020                     ?_getCANFrame:
  1289                           	opt stack 0
  1290  000020                     getCANFrame@pdlc:
  1291                           	opt stack 0
  1292  000020                     vscp_writeStdReg@rv:
  1293                           	opt stack 0
  1294  000020                     vscp_readStdReg@code:
  1295                           	opt stack 0
  1296  000020                     ECANSendMessage@pb:
  1297                           	opt stack 0
  1298                           
  1299                           ; 18 bytes @ 0x1F
  1300  000020                     	ds	1
  1301  000021                     getCalibrationValue@i:
  1302                           	opt stack 0
  1303  000021                     getCANFrame@pdata:
  1304                           	opt stack 0
  1305  000021                     vscp_writeStdReg@reg:
  1306                           	opt stack 0
  1307  000021                     writeCoeffs2Ram@j:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x20
  1311  000021                     	ds	1
  1312  000022                     getCANFrame@pid:
  1313                           	opt stack 0
  1314  000022                     ___fladd@f2:
  1315                           	opt stack 0
  1316                           
  1317                           ; 4 bytes @ 0x21
  1318  000022                     	ds	1
  1319  000023                     ?_vscp_writeAppReg:
  1320                           	opt stack 0
  1321  000023                     vscp_writeAppReg@val:
  1322                           	opt stack 0
  1323  000023                     getCANFrame@flags:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x22
  1327  000023                     	ds	1
  1328  000024                     ?_getVSCPFrame:
  1329                           	opt stack 0
  1330  000024                     vscp_writeAppReg@pos:
  1331                           	opt stack 0
  1332  000024                     getVSCPFrame@pvscptype:
  1333                           	opt stack 0
  1334  000024                     vscp_readStdReg@code_1135:
  1335                           	opt stack 0
  1336                           
  1337                           ; 4 bytes @ 0x23
  1338  000024                     	ds	1
  1339  000025                     vscp_writeAppReg@reg:
  1340                           	opt stack 0
  1341  000025                     getVSCPFrame@pNodeId:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x24
  1345  000025                     	ds	1
  1346  000026                     ??___fladd:
  1347  000026                     vscp_writeAppReg@rv:
  1348                           	opt stack 0
  1349  000026                     getVSCPFrame@pPriority:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x25
  1353  000026                     	ds	1
  1354  000027                     ?_vscp_writeRegister:
  1355                           	opt stack 0
  1356  000027                     getVSCPFrame@pSize:
  1357                           	opt stack 0
  1358  000027                     vscp_writeRegister@value:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x26
  1362  000027                     	ds	1
  1363  000028                     getVSCPFrame@pData:
  1364                           	opt stack 0
  1365  000028                     vscp_readStdReg@idx:
  1366                           	opt stack 0
  1367  000028                     vscp_writeRegister@reg:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x27
  1371  000028                     	ds	1
  1372  000029                     ??_getVSCPFrame:
  1373  000029                     vscp_readStdReg@idx_1136:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x28
  1377  000029                     	ds	1
  1378  00002A                     vscp_readStdReg@rv:
  1379                           	opt stack 0
  1380  00002A                     ___fladd@sign:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x29
  1384  00002A                     	ds	1
  1385  00002B                     vscp_readStdReg@reg:
  1386                           	opt stack 0
  1387  00002B                     ___fladd@exp2:
  1388                           	opt stack 0
  1389                           
  1390                           ; 1 bytes @ 0x2A
  1391  00002B                     	ds	1
  1392  00002C                     vscp_readRegister@reg:
  1393                           	opt stack 0
  1394  00002C                     ___fladd@exp1:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x2B
  1398  00002C                     	ds	1
  1399  00002D                     ?_Celsius2Kelvin:
  1400                           	opt stack 0
  1401  00002D                     ?___flsub:
  1402                           	opt stack 0
  1403  00002D                     ?___asfladd:
  1404                           	opt stack 0
  1405  00002D                     getVSCPFrame@pvscpclass:
  1406                           	opt stack 0
  1407  00002D                     ___asfladd@f1p:
  1408                           	opt stack 0
  1409  00002D                     Celsius2Kelvin@tc:
  1410                           	opt stack 0
  1411  00002D                     ___flsub@f1:
  1412                           	opt stack 0
  1413                           
  1414                           ; 4 bytes @ 0x2C
  1415  00002D                     	ds	1
  1416  00002E                     getVSCPFrame@id:
  1417                           	opt stack 0
  1418                           
  1419                           ; 4 bytes @ 0x2D
  1420  00002E                     	ds	1
  1421  00002F                     ___asfladd@f2:
  1422                           	opt stack 0
  1423                           
  1424                           ; 4 bytes @ 0x2E
  1425  00002F                     	ds	2
  1426  000031                     ___flsub@f2:
  1427                           	opt stack 0
  1428                           
  1429                           ; 4 bytes @ 0x30
  1430  000031                     	ds	1
  1431  000032                     ECANSendMessage@mode:
  1432                           	opt stack 0
  1433  000032                     vscp_getEvent@rv:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x31
  1437  000032                     	ds	1
  1438  000033                     ECANSendMessage@buffers:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x32
  1442  000033                     	ds	1
  1443  000034                     ECANSendMessage@j:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x33
  1447  000034                     	ds	1
  1448  000035                     ?___asflsub:
  1449                           	opt stack 0
  1450  000035                     ECANSendMessage@tempBSEL0:
  1451                           	opt stack 0
  1452  000035                     ___asflsub@f1p:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x34
  1456  000035                     	ds	1
  1457  000036                     ECANSendMessage@tempPtr:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x35
  1461  000036                     	ds	1
  1462  000037                     ___asflsub@f2:
  1463                           	opt stack 0
  1464                           
  1465                           ; 4 bytes @ 0x36
  1466  000037                     	ds	1
  1467  000038                     ECANSendMessage@temp:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x37
  1471  000038                     	ds	1
  1472  000039                     ECANSendMessage@i:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x38
  1476  000039                     	ds	1
  1477  00003A                     ECANSendMessage@ptr:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x39
  1481  00003A                     	ds	1
  1482  00003B                     
  1483                           ; 0 bytes @ 0x3A
  1484  00003B                     	ds	1
  1485  00003C                     ?_sendCANFrame:
  1486                           	opt stack 0
  1487  00003C                     sendCANFrame@id:
  1488                           	opt stack 0
  1489  00003C                     ___fldiv@f3:
  1490                           	opt stack 0
  1491                           
  1492                           ; 4 bytes @ 0x3B
  1493  00003C                     	ds	4
  1494  000040                     sendCANFrame@dlc:
  1495                           	opt stack 0
  1496  000040                     ___fldiv@cntr:
  1497                           	opt stack 0
  1498                           
  1499                           ; 1 bytes @ 0x3F
  1500  000040                     	ds	1
  1501  000041                     sendCANFrame@pdata:
  1502                           	opt stack 0
  1503  000041                     ___fldiv@exp:
  1504                           	opt stack 0
  1505                           
  1506                           ; 1 bytes @ 0x40
  1507  000041                     	ds	1
  1508  000042                     sendCANFrame@rv:
  1509                           	opt stack 0
  1510  000042                     ___fldiv@sign:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x41
  1514  000042                     	ds	1
  1515  000043                     ??_eval_poly:
  1516  000043                     vscp_sendEvent@rv:
  1517                           	opt stack 0
  1518  000043                     ___asflmul@mp:
  1519                           	opt stack 0
  1520  000043                     ___fltol@sign1:
  1521                           	opt stack 0
  1522                           
  1523                           ; 1 bytes @ 0x42
  1524  000043                     	ds	1
  1525  000044                     ?_vscp_sendHeartBeat:
  1526                           	opt stack 0
  1527  000044                     ??_vscp_newNodeOnline:
  1528  000044                     vscp_sendHeartBeat@subzone:
  1529                           	opt stack 0
  1530  000044                     ___fltol@exp1:
  1531                           	opt stack 0
  1532  000044                     log@exponent:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x43
  1536  000044                     	ds	1
  1537  000045                     ??_sendTempEvent:
  1538  000045                     vscp_sendHeartBeat@zone:
  1539                           	opt stack 0
  1540  000045                     ___altofl@sign:
  1541                           	opt stack 0
  1542                           
  1543                           ; 1 bytes @ 0x44
  1544  000045                     	ds	1
  1545  000046                     tblptru	equ	0xFF8
  1546                           tblptrh	equ	0xFF7
  1547                           tblptrl	equ	0xFF6
  1548                           tablat	equ	0xFF5
  1549                           prodh	equ	0xFF4
  1550                           prodl	equ	0xFF3
  1551                           intcon	equ	0xFF2
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           indf1	equ	0xFE7
  1555                           postdec1	equ	0xFE5
  1556                           fsr1h	equ	0xFE2
  1557                           fsr1l	equ	0xFE1
  1558                           indf2	equ	0xFDF
  1559                           postinc2	equ	0xFDE
  1560                           postdec2	equ	0xFDD
  1561                           plusw2	equ	0xFDB
  1562                           fsr2h	equ	0xFDA
  1563                           fsr2l	equ	0xFD9
  1564                           status	equ	0xFD8
  1565                           
  1566                           ; 0 bytes @ 0x45
  1567 ;;
  1568 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1569 ;;
  1570 ;; *************** function _main *****************
  1571 ;; Defined at:
  1572 ;;		line 301 in file "../main.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  i               1   91[BANK0 ] unsigned char 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;		None               void
  1579 ;; Registers used:
  1580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : F/1
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1586 ;;      Params:         0       0       0       0       0       0       0
  1587 ;;      Locals:         0       1       0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0       0       0
  1589 ;;      Totals:         0       1       0       0       0       0       0
  1590 ;;Total ram usage:        1 bytes
  1591 ;; Hardware stack levels required when called:    9
  1592 ;; This function calls:
  1593 ;;		_vscp_check_pstorage
  1594 ;;		_init_app_eeprom
  1595 ;;		_vscp_init
  1596 ;;		_writeEEPROM
  1597 ;;		_vscp_getEvent
  1598 ;;		_vscp_goActiveState
  1599 ;;		_vscp_handleProbeState
  1600 ;;		_vscp_handleProtocolEvent
  1601 ;;		_handle_sync
  1602 ;;		_vscp_error
  1603 ;;		_doOneSecondWork
  1604 ;;		_vscp_doOneSecondWork
  1605 ;;		_doWork
  1606 ;; This function is called by:
  1607 ;;		Startup code after reset
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text0
  1612  003E5C                     __ptext0:
  1613                           	opt stack 0
  1614  003E5C                     _main:
  1615                           	opt stack 22
  1616                           
  1617                           ;main.c: 302: unsigned char i;
  1618                           ;main.c: 306: if ( !vscp_check_pstorage() ) {
  1619                           
  1620                           ;incstack = 0
  1621                           ;incstack = 0
  1622  003E5C  EC15  F028         	call	_vscp_check_pstorage	;wreg free
  1623  003E60  0900               	iorlw	0
  1624  003E62  B4D8               	btfsc	status,2,c
  1625                           
  1626                           ;main.c: 309: init_app_eeprom();
  1627  003E64  EC9C  F010         	call	_init_app_eeprom	;wreg free
  1628                           
  1629                           ;main.c: 311: }
  1630                           ;main.c: 313: vscp_init();
  1631  003E68  EC49  F026         	call	_vscp_init	;wreg free
  1632  003E6C                     l166:
  1633                           
  1634                           ; BSR set to: 1
  1635  003E6C  0004               	clrwdt		;# 
  1636                           
  1637                           ;main.c: 319: if ((vscp_initbtncnt > 250) &&
  1638                           ;main.c: 320: (0x01 != vscp_node_state)) {
  1639  003E6E  0EFA               	movlw	250
  1640  003E70  644F               	cpfsgt	_vscp_initbtncnt,c	;volatile
  1641  003E72  D00D               	goto	l9102
  1642  003E74  0100               	movlb	0	; () banked
  1643  003E76  05BD               	decf	_vscp_node_state& (0+255),w,b
  1644  003E78  E00A               	bz	l9102
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;main.c: 323: vscp_nickname = 0xff;
  1648  003E7A  69BC               	setf	_vscp_nickname& (0+255),b
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;main.c: 324: writeEEPROM(0x01, 0xff);
  1652  003E7C  6A0F               	clrf	?_writeEEPROM+1,c
  1653  003E7E  0E01               	movlw	1
  1654  003E80  6E0E               	movwf	?_writeEEPROM,c
  1655  003E82  0EFF               	movlw	255
  1656  003E84  6810               	setf	?_writeEEPROM+2,c
  1657  003E86  ECDE  F027         	call	_writeEEPROM	;wreg free
  1658                           
  1659                           ;main.c: 325: vscp_init();
  1660  003E8A  EC49  F026         	call	_vscp_init	;wreg free
  1661  003E8E                     l9102:
  1662                           
  1663                           ;main.c: 327: }
  1664                           ;main.c: 331: vscp_imsg.flags = 0;
  1665  003E8E  0100               	movlb	0	; () banked
  1666  003E90  6BBE               	clrf	_vscp_imsg& (0+255),b
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 332: vscp_getEvent();
  1670  003E92  EC8E  F027         	call	_vscp_getEvent	;wreg free
  1671                           
  1672                           ;main.c: 335: switch (vscp_node_state) {
  1673  003E96  D024               	goto	l9132
  1674  003E98                     l9106:
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;main.c: 340: if (0xff == vscp_nickname) {
  1678  003E98  29BC               	incf	_vscp_nickname& (0+255),w,b
  1679  003E9A  E103               	bnz	l9110
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;main.c: 342: vscp_node_state = 0x01;
  1683  003E9C  0E01               	movlw	1
  1684  003E9E  6FBD               	movwf	_vscp_node_state& (0+255),b
  1685                           
  1686                           ;main.c: 343: }
  1687  003EA0  D02B               	goto	l9134
  1688  003EA2                     l9110:
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 344: else {
  1692                           ;main.c: 346: vscp_node_state = 0x03;
  1693  003EA2  0E03               	movlw	3
  1694  003EA4  6FBD               	movwf	_vscp_node_state& (0+255),b
  1695  003EA6                     l9112:
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;main.c: 347: vscp_goActiveState();
  1699  003EA6  EC49  F028         	call	_vscp_goActiveState	;wreg free
  1700  003EAA  D026               	goto	l9134
  1701  003EAC                     l9114:
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;main.c: 352: vscp_handleProbeState();
  1705  003EAC  ECA9  F01F         	call	_vscp_handleProbeState	;wreg free
  1706                           
  1707                           ;main.c: 353: break;
  1708  003EB0  D023               	goto	l9134
  1709  003EB2                     l175:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;main.c: 362: if (vscp_imsg.flags & 0x80) {
  1713  003EB2  AFBE               	btfss	_vscp_imsg& (0+255),7,b
  1714  003EB4  D021               	goto	l9134
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;main.c: 364: if ( 0 == vscp_imsg.vscp_class ) {
  1718  003EB6  51C1               	movf	(_vscp_imsg+3)& (0+255),w,b
  1719  003EB8  11C0               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1720  003EBA  E103               	bnz	l9122
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;main.c: 367: vscp_handleProtocolEvent();
  1724  003EBC  EC8A  F00D         	call	_vscp_handleProtocolEvent	;wreg free
  1725                           
  1726                           ;main.c: 369: }
  1727  003EC0  D01B               	goto	l9134
  1728  003EC2                     l9122:
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;main.c: 370: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1732                           ;main.c: 371: ( 26 == vscp_imsg.vscp_type ) ) {
  1733  003EC2  51C0               	movf	(_vscp_imsg+2)& (0+255),w,b
  1734  003EC4  0A1E               	xorlw	30
  1735  003EC6  11C1               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1736  003EC8  E117               	bnz	l9134
  1737                           
  1738                           ; BSR set to: 0
  1739  003ECA  51C2               	movf	(_vscp_imsg+4)& (0+255),w,b
  1740  003ECC  0A1A               	xorlw	26
  1741  003ECE  E114               	bnz	l9134
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;main.c: 372: handle_sync();
  1745  003ED0  ECC9  F023         	call	_handle_sync	;wreg free
  1746  003ED4  D011               	goto	l9134
  1747  003ED6                     l9128:
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;main.c: 379: vscp_error();
  1751  003ED6  EC10  F029         	call	_vscp_error	;wreg free
  1752                           
  1753                           ;main.c: 380: break;
  1754  003EDA  D00E               	goto	l9134
  1755  003EDC                     l181:
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 383: vscp_node_state = 0x00;
  1759  003EDC  6BBD               	clrf	_vscp_node_state& (0+255),b
  1760                           
  1761                           ;main.c: 384: break;
  1762  003EDE  D00C               	goto	l9134
  1763  003EE0                     l9132:
  1764  003EE0  0100               	movlb	0	; () banked
  1765  003EE2  51BD               	movf	_vscp_node_state& (0+255),w,b
  1766                           
  1767                           ; Switch size 1, requested type "space"
  1768                           ; Number of cases is 5, Range of values is 0 to 4
  1769                           ; switch strategies available:
  1770                           ; Name         Instructions Cycles
  1771                           ; simple_byte           16     9 (average)
  1772                           ;	Chosen strategy is simple_byte
  1773  003EE4  E0D9               	bz	l9106
  1774  003EE6  0A01               	xorlw	1	; case 1
  1775  003EE8  E0E1               	bz	l9114
  1776  003EEA  0A03               	xorlw	3	; case 2
  1777  003EEC  E0DC               	bz	l9112
  1778  003EEE  0A01               	xorlw	1	; case 3
  1779  003EF0  E0E0               	bz	l175
  1780  003EF2  0A07               	xorlw	7	; case 4
  1781  003EF4  E0F0               	bz	l9128
  1782  003EF6  D7F2               	goto	l181
  1783  003EF8                     l9134:
  1784                           
  1785                           ;main.c: 390: if ( measurement_clock > 1000 ) {
  1786  003EF8  0EE9               	movlw	233
  1787  003EFA  0101               	movlb	1	; () banked
  1788  003EFC  5D12               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1789  003EFE  0E03               	movlw	3
  1790  003F00  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1791  003F02  0E00               	movlw	0
  1792  003F04  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1793  003F06  0E00               	movlw	0
  1794  003F08  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1795  003F0A  E3B0               	bnc	l166
  1796                           
  1797                           ; BSR set to: 1
  1798                           ;main.c: 392: measurement_clock = 0;
  1799  003F0C  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
  1800  003F0E  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1801  003F10  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1802  003F12  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1803                           
  1804                           ; BSR set to: 1
  1805                           ;main.c: 393: doOneSecondWork();
  1806  003F14  EC80  F013         	call	_doOneSecondWork	;wreg free
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 394: seconds++;
  1810  003F18  2A4C               	incf	_seconds,f,c
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;main.c: 398: if (0x03 == vscp_node_state) {
  1814  003F1A  51BD               	movf	_vscp_node_state& (0+255),w,b
  1815  003F1C  0A03               	xorlw	3
  1816  003F1E  E10D               	bnz	l9156
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 399: for (i = 0; i < 6; i++) {
  1820  003F20  6BBB               	clrf	main@i& (0+255),b
  1821  003F22                     l9150:
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;main.c: 400: seconds_temp[i]++;
  1825  003F22  0E0C               	movlw	low _seconds_temp
  1826  003F24  0100               	movlb	0	; () banked
  1827  003F26  25BB               	addwf	main@i& (0+255),w,b
  1828  003F28  6ED9               	movwf	fsr2l,c
  1829  003F2A  6ADA               	clrf	fsr2h,c
  1830  003F2C  0E01               	movlw	high _seconds_temp
  1831  003F2E  22DA               	addwfc	fsr2h,f,c
  1832  003F30  2ADF               	incf	indf2,f,c
  1833                           
  1834                           ; BSR set to: 1
  1835  003F32  2BBB               	incf	main@i& (0+255),f,b
  1836                           
  1837                           ; BSR set to: 0
  1838  003F34  0E05               	movlw	5
  1839  003F36  65BB               	cpfsgt	main@i& (0+255),b
  1840  003F38  D7F4               	goto	l9150
  1841  003F3A                     l9156:
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;main.c: 401: }
  1845                           ;main.c: 402: }
  1846                           ;main.c: 404: if (seconds > 60) {
  1847  003F3A  0E3C               	movlw	60
  1848  003F3C  644C               	cpfsgt	_seconds,c
  1849  003F3E  D001               	goto	l9160
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;main.c: 405: seconds = 0;
  1853  003F40  6A4C               	clrf	_seconds,c
  1854  003F42                     l9160:
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;main.c: 406: }
  1858                           ;main.c: 410: if (0x03 == vscp_node_state) {
  1859  003F42  51BD               	movf	_vscp_node_state& (0+255),w,b
  1860  003F44  0A03               	xorlw	3
  1861  003F46  B4D8               	btfsc	status,2,c
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 411: vscp_doOneSecondWork();
  1865  003F48  ECF7  F024         	call	_vscp_doOneSecondWork	;wreg free
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 412: }
  1869                           ;main.c: 415: doWork();
  1870  003F4C  EC33  F016         	call	_doWork	;wreg free
  1871  003F50  D78D               	goto	l166
  1872  003F52                     __end_of_main:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           prodh	equ	0xFF4
  1879                           prodl	equ	0xFF3
  1880                           intcon	equ	0xFF2
  1881                           postinc0	equ	0xFEE
  1882                           wreg	equ	0xFE8
  1883                           indf1	equ	0xFE7
  1884                           postdec1	equ	0xFE5
  1885                           fsr1h	equ	0xFE2
  1886                           fsr1l	equ	0xFE1
  1887                           indf2	equ	0xFDF
  1888                           postinc2	equ	0xFDE
  1889                           postdec2	equ	0xFDD
  1890                           plusw2	equ	0xFDB
  1891                           fsr2h	equ	0xFDA
  1892                           fsr2l	equ	0xFD9
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _doWork *****************
  1896 ;; Defined at:
  1897 ;;		line 430 in file "../main.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  temp            4   47[BANK1 ] unsigned char 
  1902 ;;  avarage         4   43[BANK1 ] unsigned char 
  1903 ;;  resistance      4   38[BANK1 ] unsigned char 
  1904 ;;  v               4   32[BANK1 ] unsigned char 
  1905 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1906 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1907 ;;  B               2   36[BANK1 ] unsigned short 
  1908 ;;  i               1   51[BANK1 ] unsigned char 
  1909 ;;  j               1   42[BANK1 ] unsigned char 
  1910 ;; Return value:  Size  Location     Type
  1911 ;;		None               void
  1912 ;; Registers used:
  1913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1914 ;; Tracked objects:
  1915 ;;		On entry : F/0
  1916 ;;		On exit  : F/1
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1919 ;;      Params:         0       0       0       0       0       0       0
  1920 ;;      Locals:         0       0      52       0       0       0       0
  1921 ;;      Temps:          0      14       0       0       0       0       0
  1922 ;;      Totals:         0      14      52       0       0       0       0
  1923 ;;Total ram usage:       66 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    7
  1926 ;; This function calls:
  1927 ;;		_readEEPROM
  1928 ;;		_exp
  1929 ;;		_log
  1930 ;;		_getCalibrationValue
  1931 ;;		___aldiv
  1932 ;;		___altofl
  1933 ;;		___asfladd
  1934 ;;		___fladd
  1935 ;;		___asfldiv
  1936 ;;		___fldiv
  1937 ;;		___flmul
  1938 ;;		___asflsub
  1939 ;;		___flsub
  1940 ;;		___fltol
  1941 ;;		___lwtofl
  1942 ;; This function is called by:
  1943 ;;		_main
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text1
  1948  002C66                     __ptext1:
  1949                           	opt stack 0
  1950  002C66                     _doWork:
  1951                           	opt stack 23
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 431: uint8_t i, j;
  1955                           ;main.c: 432: uint16_t B;
  1956                           ;main.c: 433: double avarage;
  1957                           ;main.c: 434: double resistance;
  1958                           ;main.c: 435: double Rinf;
  1959                           ;main.c: 436: double temp;
  1960                           ;main.c: 437: double v;
  1961                           ;main.c: 438: double calVoltage;
  1962                           ;main.c: 440: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1963                           ;main.c: 441: readEEPROM(0xF3));
  1964                           
  1965                           ; BSR set to: 1
  1966                           ;incstack = 0
  1967                           ;incstack = 0
  1968  002C66  6A17               	clrf	?_readEEPROM+1,c
  1969  002C68  0EF3               	movlw	243
  1970  002C6A  6E16               	movwf	?_readEEPROM,c
  1971  002C6C  ECC0  F028         	call	_readEEPROM	;wreg free
  1972  002C70  0100               	movlb	0	; () banked
  1973  002C72  6FAD               	movwf	??_doWork& (0+255),b
  1974  002C74  6A17               	clrf	?_readEEPROM+1,c
  1975  002C76  0EF2               	movlw	242
  1976  002C78  6E16               	movwf	?_readEEPROM,c
  1977  002C7A  ECC0  F028         	call	_readEEPROM	;wreg free
  1978  002C7E  6E1B               	movwf	?___lwtofl+1,c
  1979  002C80  0100               	movlb	0	; () banked
  1980  002C82  51AD               	movf	??_doWork& (0+255),w,b
  1981  002C84  6E1A               	movwf	?___lwtofl,c
  1982  002C86  EC64  F027         	call	___lwtofl	;wreg free
  1983  002C8A  C01D  F175         	movff	?___lwtofl+3,doWork@calVoltage+3
  1984  002C8E  C01C  F174         	movff	?___lwtofl+2,doWork@calVoltage+2
  1985  002C92  C01B  F173         	movff	?___lwtofl+1,doWork@calVoltage+1
  1986  002C96  C01A  F172         	movff	?___lwtofl,doWork@calVoltage
  1987                           
  1988                           ;main.c: 446: for (i = 0; i < 6; i++) {
  1989  002C9A  0101               	movlb	1	; () banked
  1990  002C9C  6BA1               	clrf	doWork@i& (0+255),b
  1991  002C9E                     l9918:
  1992                           
  1993                           ; BSR set to: 1
  1994                           ;main.c: 448: if (adc_conversion_flags & 1 << i) {
  1995  002C9E  C1A1  F0AD         	movff	doWork@i,??_doWork
  1996  002CA2  0E01               	movlw	1
  1997  002CA4  0100               	movlb	0	; () banked
  1998  002CA6  6FAE               	movwf	(??_doWork+1)& (0+255),b
  1999  002CA8  2BAD               	incf	??_doWork& (0+255),f,b
  2000  002CAA  D002               	goto	u8544
  2001  002CAC                     u8545:
  2002  002CAC  90D8               	bcf	status,0,c
  2003  002CAE  37AE               	rlcf	(??_doWork+1)& (0+255),f,b
  2004  002CB0                     u8544:
  2005  002CB0  2FAD               	decfsz	??_doWork& (0+255),f,b
  2006  002CB2  D7FC               	goto	u8545
  2007  002CB4  51AE               	movf	(??_doWork+1)& (0+255),w,b
  2008  002CB6  1448               	andwf	_adc_conversion_flags,w,c
  2009  002CB8  E101 D1E5          	bz	l9972
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;main.c: 451: avarage = 0;
  2013  002CBC  0101               	movlb	1	; () banked
  2014  002CBE  6B99               	clrf	doWork@avarage& (0+255),b
  2015  002CC0  6B9A               	clrf	(doWork@avarage+1)& (0+255),b
  2016  002CC2  6B9B               	clrf	(doWork@avarage+2)& (0+255),b
  2017  002CC4  6B9C               	clrf	(doWork@avarage+3)& (0+255),b
  2018                           
  2019                           ;main.c: 452: for (j = 0; j < 80; j++) {
  2020  002CC6  6B98               	clrf	doWork@j& (0+255),b
  2021  002CC8                     l9926:
  2022                           
  2023                           ; BSR set to: 1
  2024                           ;main.c: 453: avarage += ((uint16_t)adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  2025  002CC8  0E01               	movlw	high doWork@avarage
  2026  002CCA  6E2E               	movwf	?___asfladd+1,c
  2027  002CCC  0E99               	movlw	low doWork@avarage
  2028  002CCE  6E2D               	movwf	?___asfladd,c
  2029  002CD0  90D8               	bcf	status,0,c
  2030  002CD2  35A1               	rlcf	doWork@i& (0+255),w,b
  2031  002CD4  0100               	movlb	0	; () banked
  2032  002CD6  6FAD               	movwf	??_doWork& (0+255),b
  2033  002CD8  6BAE               	clrf	(??_doWork+1)& (0+255),b
  2034  002CDA  37AE               	rlcf	(??_doWork+1)& (0+255),f,b
  2035  002CDC  0101               	movlb	1	; () banked
  2036  002CDE  5198               	movf	doWork@j& (0+255),w,b
  2037  002CE0  0D0C               	mullw	12
  2038  002CE2  0EA3               	movlw	low (_adc+1)
  2039  002CE4  24F3               	addwf	prodl,w,c
  2040  002CE6  0100               	movlb	0	; () banked
  2041  002CE8  6FAF               	movwf	(??_doWork+2)& (0+255),b
  2042  002CEA  0E01               	movlw	high (_adc+1)
  2043  002CEC  20F4               	addwfc	prodh,w,c
  2044  002CEE  6FB0               	movwf	(??_doWork+3)& (0+255),b
  2045  002CF0  51AD               	movf	??_doWork& (0+255),w,b
  2046  002CF2  25AF               	addwf	(??_doWork+2)& (0+255),w,b
  2047  002CF4  6ED9               	movwf	fsr2l,c
  2048  002CF6  51AE               	movf	(??_doWork+1)& (0+255),w,b
  2049  002CF8  21B0               	addwfc	(??_doWork+3)& (0+255),w,b
  2050  002CFA  6EDA               	movwf	fsr2h,c
  2051  002CFC  50DF               	movf	indf2,w,c
  2052  002CFE  6FB1               	movwf	(??_doWork+4)& (0+255),b
  2053  002D00  90D8               	bcf	status,0,c
  2054  002D02  0101               	movlb	1	; () banked
  2055  002D04  35A1               	rlcf	doWork@i& (0+255),w,b
  2056  002D06  0100               	movlb	0	; () banked
  2057  002D08  6FB2               	movwf	(??_doWork+5)& (0+255),b
  2058  002D0A  6BB3               	clrf	(??_doWork+6)& (0+255),b
  2059  002D0C  37B3               	rlcf	(??_doWork+6)& (0+255),f,b
  2060  002D0E  0101               	movlb	1	; () banked
  2061  002D10  5198               	movf	doWork@j& (0+255),w,b
  2062  002D12  0D0C               	mullw	12
  2063  002D14  0EA2               	movlw	low _adc
  2064  002D16  24F3               	addwf	prodl,w,c
  2065  002D18  0100               	movlb	0	; () banked
  2066  002D1A  6FB4               	movwf	(??_doWork+7)& (0+255),b
  2067  002D1C  0E01               	movlw	high _adc
  2068  002D1E  20F4               	addwfc	prodh,w,c
  2069  002D20  6FB5               	movwf	(??_doWork+8)& (0+255),b
  2070  002D22  51B2               	movf	(??_doWork+5)& (0+255),w,b
  2071  002D24  25B4               	addwf	(??_doWork+7)& (0+255),w,b
  2072  002D26  6ED9               	movwf	fsr2l,c
  2073  002D28  51B3               	movf	(??_doWork+6)& (0+255),w,b
  2074  002D2A  21B5               	addwfc	(??_doWork+8)& (0+255),w,b
  2075  002D2C  6EDA               	movwf	fsr2h,c
  2076  002D2E  50DF               	movf	indf2,w,c
  2077  002D30  6E1B               	movwf	?___lwtofl+1,c
  2078  002D32  51B1               	movf	(??_doWork+4)& (0+255),w,b
  2079  002D34  6E1A               	movwf	?___lwtofl,c
  2080  002D36  EC64  F027         	call	___lwtofl	;wreg free
  2081  002D3A  C01D  F032         	movff	?___lwtofl+3,?___asfladd+5
  2082  002D3E  C01C  F031         	movff	?___lwtofl+2,?___asfladd+4
  2083  002D42  C01B  F030         	movff	?___lwtofl+1,?___asfladd+3
  2084  002D46  C01A  F02F         	movff	?___lwtofl,?___asfladd+2
  2085  002D4A  EC93  F025         	call	___asfladd	;wreg free
  2086  002D4E  0101               	movlb	1	; () banked
  2087  002D50  2B98               	incf	doWork@j& (0+255),f,b
  2088                           
  2089                           ; BSR set to: 1
  2090  002D52  0E4F               	movlw	79
  2091  002D54  6598               	cpfsgt	doWork@j& (0+255),b
  2092  002D56  D7B8               	goto	l9926
  2093                           
  2094                           ; BSR set to: 1
  2095                           ;main.c: 457: if (1) {
  2096  002D58  0E01               	movlw	high doWork@avarage
  2097  002D5A  0100               	movlb	0	; () banked
  2098  002D5C  6F69               	movwf	(?___asfldiv+1)& (0+255),b
  2099  002D5E  0E99               	movlw	low doWork@avarage
  2100  002D60  6F68               	movwf	?___asfldiv& (0+255),b
  2101  002D62  6B6A               	clrf	(?___asfldiv+2)& (0+255),b
  2102  002D64  6B6B               	clrf	(?___asfldiv+3)& (0+255),b
  2103  002D66  0EA0               	movlw	160
  2104  002D68  6F6C               	movwf	(?___asfldiv+4)& (0+255),b
  2105  002D6A  0E42               	movlw	66
  2106  002D6C  6F6D               	movwf	(?___asfldiv+5)& (0+255),b
  2107  002D6E  EC21  F025         	call	___asfldiv	;wreg free
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;main.c: 465: B = (uint16_t)readEEPROM(2 * i + 0x4F)*256 +
  2111                           ;main.c: 466: readEEPROM(2 * i + 0x50);
  2112  002D72  0101               	movlb	1	; () banked
  2113  002D74  51A1               	movf	doWork@i& (0+255),w,b
  2114  002D76  0D02               	mullw	2
  2115  002D78  0E50               	movlw	80
  2116  002D7A  24F3               	addwf	prodl,w,c
  2117  002D7C  6E16               	movwf	?_readEEPROM,c
  2118  002D7E  0E00               	movlw	0
  2119  002D80  20F4               	addwfc	prodh,w,c
  2120  002D82  6E17               	movwf	?_readEEPROM+1,c
  2121  002D84  ECC0  F028         	call	_readEEPROM	;wreg free
  2122  002D88  0100               	movlb	0	; () banked
  2123  002D8A  6FAD               	movwf	??_doWork& (0+255),b
  2124  002D8C  0101               	movlb	1	; () banked
  2125  002D8E  51A1               	movf	doWork@i& (0+255),w,b
  2126  002D90  0D02               	mullw	2
  2127  002D92  0E4F               	movlw	79
  2128  002D94  24F3               	addwf	prodl,w,c
  2129  002D96  6E16               	movwf	?_readEEPROM,c
  2130  002D98  0E00               	movlw	0
  2131  002D9A  20F4               	addwfc	prodh,w,c
  2132  002D9C  6E17               	movwf	?_readEEPROM+1,c
  2133  002D9E  ECC0  F028         	call	_readEEPROM	;wreg free
  2134  002DA2  0101               	movlb	1	; () banked
  2135  002DA4  6F93               	movwf	(doWork@B+1)& (0+255),b
  2136  002DA6  0100               	movlb	0	; () banked
  2137  002DA8  51AD               	movf	??_doWork& (0+255),w,b
  2138  002DAA  0101               	movlb	1	; () banked
  2139  002DAC  6F92               	movwf	doWork@B& (0+255),b
  2140                           
  2141                           ; BSR set to: 1
  2142                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2143  002DAE  0E33               	movlw	51
  2144  002DB0  0100               	movlb	0	; () banked
  2145  002DB2  6F64               	movwf	(?___fldiv+4)& (0+255),b
  2146  002DB4  0E13               	movlw	19
  2147  002DB6  6F65               	movwf	(?___fldiv+5)& (0+255),b
  2148  002DB8  0E95               	movlw	149
  2149  002DBA  6F66               	movwf	(?___fldiv+6)& (0+255),b
  2150  002DBC  0EC3               	movlw	195
  2151  002DBE  6F67               	movwf	(?___fldiv+7)& (0+255),b
  2152  002DC0  C192  F01A         	movff	doWork@B,?___lwtofl
  2153  002DC4  C193  F01B         	movff	doWork@B+1,?___lwtofl+1
  2154  002DC8  EC64  F027         	call	___lwtofl	;wreg free
  2155  002DCC  C01D  F063         	movff	?___lwtofl+3,?___fldiv+3
  2156  002DD0  C01C  F062         	movff	?___lwtofl+2,?___fldiv+2
  2157  002DD4  C01B  F061         	movff	?___lwtofl+1,?___fldiv+1
  2158  002DD8  C01A  F060         	movff	?___lwtofl,?___fldiv
  2159  002DDC  ECE3  F021         	call	___fldiv	;wreg free
  2160  002DE0  C063  F179         	movff	?___fldiv+3,_doWork$2267+3
  2161  002DE4  C062  F178         	movff	?___fldiv+2,_doWork$2267+2
  2162  002DE8  C061  F177         	movff	?___fldiv+1,_doWork$2267+1
  2163  002DEC  C060  F176         	movff	?___fldiv,_doWork$2267
  2164                           
  2165                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2166  002DF0  C176  F0A2         	movff	_doWork$2267,?_exp
  2167  002DF4  C177  F0A3         	movff	_doWork$2267+1,?_exp+1
  2168  002DF8  C178  F0A4         	movff	_doWork$2267+2,?_exp+2
  2169  002DFC  C179  F0A5         	movff	_doWork$2267+3,?_exp+3
  2170  002E00  EC5B  F019         	call	_exp	;wreg free
  2171  002E04  C0A5  F17D         	movff	?_exp+3,_doWork$2268+3
  2172  002E08  C0A4  F17C         	movff	?_exp+2,_doWork$2268+2
  2173  002E0C  C0A3  F17B         	movff	?_exp+1,_doWork$2268+1
  2174  002E10  C0A2  F17A         	movff	?_exp,_doWork$2268
  2175                           
  2176                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2177  002E14  C17A  F068         	movff	_doWork$2268,?___flmul
  2178  002E18  C17B  F069         	movff	_doWork$2268+1,?___flmul+1
  2179  002E1C  C17C  F06A         	movff	_doWork$2268+2,?___flmul+2
  2180  002E20  C17D  F06B         	movff	_doWork$2268+3,?___flmul+3
  2181  002E24  D936               	call	PL56	;call to abstracted procedure
  2182  002E26  EC11  F020         	call	___flmul	;wreg free
  2183  002E2A  C06B  F171         	movff	?___flmul+3,doWork@Rinf+3
  2184  002E2E  C06A  F170         	movff	?___flmul+2,doWork@Rinf+2
  2185  002E32  C069  F16F         	movff	?___flmul+1,doWork@Rinf+1
  2186  002E36  C068  F16E         	movff	?___flmul,doWork@Rinf
  2187                           
  2188                           ;main.c: 471: v = 5.0 * (double) avarage / 1025;
  2189  002E3A  0100               	movlb	0	; () banked
  2190  002E3C  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2191  002E3E  6B6D               	clrf	(?___flmul+5)& (0+255),b
  2192  002E40  0EA0               	movlw	160
  2193  002E42  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2194  002E44  0E40               	movlw	64
  2195  002E46  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2196  002E48  C199  F068         	movff	doWork@avarage,?___flmul
  2197  002E4C  C19A  F069         	movff	doWork@avarage+1,?___flmul+1
  2198  002E50  C19B  F06A         	movff	doWork@avarage+2,?___flmul+2
  2199  002E54  C19C  F06B         	movff	doWork@avarage+3,?___flmul+3
  2200  002E58  EC11  F020         	call	___flmul	;wreg free
  2201  002E5C  C06B  F063         	movff	?___flmul+3,?___fldiv+3
  2202  002E60  C06A  F062         	movff	?___flmul+2,?___fldiv+2
  2203  002E64  C069  F061         	movff	?___flmul+1,?___fldiv+1
  2204  002E68  C068  F060         	movff	?___flmul,?___fldiv
  2205  002E6C  0100               	movlb	0	; () banked
  2206  002E6E  6B64               	clrf	(?___fldiv+4)& (0+255),b
  2207  002E70  0E20               	movlw	32
  2208  002E72  6F65               	movwf	(?___fldiv+5)& (0+255),b
  2209  002E74  0E80               	movlw	128
  2210  002E76  6F66               	movwf	(?___fldiv+6)& (0+255),b
  2211  002E78  0E44               	movlw	68
  2212  002E7A  6F67               	movwf	(?___fldiv+7)& (0+255),b
  2213  002E7C  ECE3  F021         	call	___fldiv	;wreg free
  2214  002E80  C063  F191         	movff	?___fldiv+3,doWork@v+3
  2215  002E84  C062  F190         	movff	?___fldiv+2,doWork@v+2
  2216  002E88  C061  F18F         	movff	?___fldiv+1,doWork@v+1
  2217  002E8C  C060  F18E         	movff	?___fldiv,doWork@v
  2218                           
  2219                           ;main.c: 473: resistance = (calVoltage - 10000.0 * v) / v;
  2220  002E90  D900               	call	PL56	;call to abstracted procedure
  2221  002E92  C18E  F068         	movff	doWork@v,?___flmul
  2222  002E96  C18F  F069         	movff	doWork@v+1,?___flmul+1
  2223  002E9A  C190  F06A         	movff	doWork@v+2,?___flmul+2
  2224  002E9E  C191  F06B         	movff	doWork@v+3,?___flmul+3
  2225  002EA2  EC11  F020         	call	___flmul	;wreg free
  2226  002EA6  C06B  F034         	movff	?___flmul+3,?___flsub+7
  2227  002EAA  C06A  F033         	movff	?___flmul+2,?___flsub+6
  2228  002EAE  C069  F032         	movff	?___flmul+1,?___flsub+5
  2229  002EB2  C068  F031         	movff	?___flmul,?___flsub+4
  2230  002EB6  C172  F02D         	movff	doWork@calVoltage,?___flsub
  2231  002EBA  C173  F02E         	movff	doWork@calVoltage+1,?___flsub+1
  2232  002EBE  C174  F02F         	movff	doWork@calVoltage+2,?___flsub+2
  2233  002EC2  C175  F030         	movff	doWork@calVoltage+3,?___flsub+3
  2234  002EC6  ECAC  F026         	call	___flsub	;wreg free
  2235  002ECA  C030  F063         	movff	?___flsub+3,?___fldiv+3
  2236  002ECE  C02F  F062         	movff	?___flsub+2,?___fldiv+2
  2237  002ED2  C02E  F061         	movff	?___flsub+1,?___fldiv+1
  2238  002ED6  C02D  F060         	movff	?___flsub,?___fldiv
  2239  002EDA  C18E  F064         	movff	doWork@v,?___fldiv+4
  2240  002EDE  C18F  F065         	movff	doWork@v+1,?___fldiv+5
  2241  002EE2  C190  F066         	movff	doWork@v+2,?___fldiv+6
  2242  002EE6  C191  F067         	movff	doWork@v+3,?___fldiv+7
  2243  002EEA  ECE3  F021         	call	___fldiv	;wreg free
  2244  002EEE  C063  F197         	movff	?___fldiv+3,doWork@resistance+3
  2245  002EF2  C062  F196         	movff	?___fldiv+2,doWork@resistance+2
  2246  002EF6  C061  F195         	movff	?___fldiv+1,doWork@resistance+1
  2247  002EFA  C060  F194         	movff	?___fldiv,doWork@resistance
  2248                           
  2249                           ;main.c: 475: temp = ((double) B) / log(resistance / Rinf);
  2250  002EFE  C16E  F064         	movff	doWork@Rinf,?___fldiv+4
  2251  002F02  C16F  F065         	movff	doWork@Rinf+1,?___fldiv+5
  2252  002F06  C170  F066         	movff	doWork@Rinf+2,?___fldiv+6
  2253  002F0A  C171  F067         	movff	doWork@Rinf+3,?___fldiv+7
  2254  002F0E  C194  F060         	movff	doWork@resistance,?___fldiv
  2255  002F12  C195  F061         	movff	doWork@resistance+1,?___fldiv+1
  2256  002F16  C196  F062         	movff	doWork@resistance+2,?___fldiv+2
  2257  002F1A  C197  F063         	movff	doWork@resistance+3,?___fldiv+3
  2258  002F1E  ECE3  F021         	call	___fldiv	;wreg free
  2259  002F22  C063  F08C         	movff	?___fldiv+3,?_log+3
  2260  002F26  C062  F08B         	movff	?___fldiv+2,?_log+2
  2261  002F2A  C061  F08A         	movff	?___fldiv+1,?_log+1
  2262  002F2E  C060  F089         	movff	?___fldiv,?_log
  2263  002F32  EC7B  F01C         	call	_log	;wreg free
  2264  002F36  C08C  F181         	movff	?_log+3,_doWork$2269+3
  2265  002F3A  C08B  F180         	movff	?_log+2,_doWork$2269+2
  2266  002F3E  C08A  F17F         	movff	?_log+1,_doWork$2269+1
  2267  002F42  C089  F17E         	movff	?_log,_doWork$2269
  2268                           
  2269                           ;main.c: 475: temp = ((double) B) / log(resistance / Rinf);
  2270  002F46  C192  F01A         	movff	doWork@B,?___lwtofl
  2271  002F4A  C193  F01B         	movff	doWork@B+1,?___lwtofl+1
  2272  002F4E  EC64  F027         	call	___lwtofl	;wreg free
  2273  002F52  C01D  F063         	movff	?___lwtofl+3,?___fldiv+3
  2274  002F56  C01C  F062         	movff	?___lwtofl+2,?___fldiv+2
  2275  002F5A  C01B  F061         	movff	?___lwtofl+1,?___fldiv+1
  2276  002F5E  C01A  F060         	movff	?___lwtofl,?___fldiv
  2277  002F62  C17E  F064         	movff	_doWork$2269,?___fldiv+4
  2278  002F66  C17F  F065         	movff	_doWork$2269+1,?___fldiv+5
  2279  002F6A  C180  F066         	movff	_doWork$2269+2,?___fldiv+6
  2280  002F6E  C181  F067         	movff	_doWork$2269+3,?___fldiv+7
  2281  002F72  ECE3  F021         	call	___fldiv	;wreg free
  2282  002F76  C063  F1A0         	movff	?___fldiv+3,doWork@temp+3
  2283  002F7A  C062  F19F         	movff	?___fldiv+2,doWork@temp+2
  2284  002F7E  C061  F19E         	movff	?___fldiv+1,doWork@temp+1
  2285  002F82  C060  F19D         	movff	?___fldiv,doWork@temp
  2286                           
  2287                           ;main.c: 477: temp -= 273.15;
  2288  002F86  0101               	movlb	1	; () banked
  2289  002F88  0E01               	movlw	high doWork@temp
  2290  002F8A  6E36               	movwf	?___asflsub+1,c
  2291  002F8C  0E9D               	movlw	low doWork@temp
  2292  002F8E  6E35               	movwf	?___asflsub,c
  2293  002F90  0E33               	movlw	51
  2294  002F92  6E37               	movwf	?___asflsub+2,c
  2295  002F94  0E93               	movlw	147
  2296  002F96  6E38               	movwf	?___asflsub+3,c
  2297  002F98  0E88               	movlw	136
  2298  002F9A  6E39               	movwf	?___asflsub+4,c
  2299  002F9C  0E43               	movlw	67
  2300  002F9E  6E3A               	movwf	?___asflsub+5,c
  2301  002FA0  ECB8  F025         	call	___asflsub	;wreg free
  2302                           
  2303                           ;main.c: 492: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2304  002FA4  0101               	movlb	1	; () banked
  2305  002FA6  51A1               	movf	doWork@i& (0+255),w,b
  2306  002FA8  0D02               	mullw	2
  2307  002FAA  EC80  F015         	call	PL2	;call to abstracted procedure
  2308  002FAE  CFDE F0AD          	movff	postinc2,??_doWork
  2309  002FB2  CFDD F0AE          	movff	postdec2,??_doWork+1
  2310  002FB6  C0AD  F0AF         	movff	??_doWork,??_doWork+2
  2311  002FBA  C0AE  F0B0         	movff	??_doWork+1,??_doWork+3
  2312  002FBE  0E00               	movlw	0
  2313  002FC0  0100               	movlb	0	; () banked
  2314  002FC2  BFB0               	btfsc	(??_doWork+3)& (0+255),7,b
  2315  002FC4  0EFF               	movlw	255
  2316  002FC6  6FB1               	movwf	(??_doWork+4)& (0+255),b
  2317  002FC8  6FB2               	movwf	(??_doWork+5)& (0+255),b
  2318  002FCA  0101               	movlb	1	; () banked
  2319  002FCC  51A1               	movf	doWork@i& (0+255),w,b
  2320  002FCE  ECDD  F025         	call	_getCalibrationValue
  2321  002FD2  C01A  F0B3         	movff	?_getCalibrationValue,??_doWork+6
  2322  002FD6  C01B  F0B4         	movff	?_getCalibrationValue+1,??_doWork+7
  2323  002FDA  0E00               	movlw	0
  2324  002FDC  0100               	movlb	0	; () banked
  2325  002FDE  BFB4               	btfsc	(??_doWork+7)& (0+255),7,b
  2326  002FE0  0EFF               	movlw	255
  2327  002FE2  6FB5               	movwf	(??_doWork+8)& (0+255),b
  2328  002FE4  6FB6               	movwf	(??_doWork+9)& (0+255),b
  2329  002FE6  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2330  002FE8  6B6D               	clrf	(?___flmul+5)& (0+255),b
  2331  002FEA  0EC8               	movlw	200
  2332  002FEC  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2333  002FEE  0E42               	movlw	66
  2334  002FF0  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2335  002FF2  C19D  F068         	movff	doWork@temp,?___flmul
  2336  002FF6  C19E  F069         	movff	doWork@temp+1,?___flmul+1
  2337  002FFA  C19F  F06A         	movff	doWork@temp+2,?___flmul+2
  2338  002FFE  C1A0  F06B         	movff	doWork@temp+3,?___flmul+3
  2339  003002  EC11  F020         	call	___flmul	;wreg free
  2340  003006  C06B  F081         	movff	?___flmul+3,?___fltol+3
  2341  00300A  C06A  F080         	movff	?___flmul+2,?___fltol+2
  2342  00300E  C069  F07F         	movff	?___flmul+1,?___fltol+1
  2343  003012  C068  F07E         	movff	?___flmul,?___fltol
  2344  003016  ECE5  F022         	call	___fltol	;wreg free
  2345  00301A  51B3               	movf	(??_doWork+6)& (0+255),w,b
  2346  00301C  257E               	addwf	?___fltol& (0+255),w,b
  2347  00301E  6FB7               	movwf	(??_doWork+10)& (0+255),b
  2348  003020  51B4               	movf	(??_doWork+7)& (0+255),w,b
  2349  003022  217F               	addwfc	(?___fltol+1)& (0+255),w,b
  2350  003024  6FB8               	movwf	(??_doWork+11)& (0+255),b
  2351  003026  51B5               	movf	(??_doWork+8)& (0+255),w,b
  2352  003028  2180               	addwfc	(?___fltol+2)& (0+255),w,b
  2353  00302A  6FB9               	movwf	(??_doWork+12)& (0+255),b
  2354  00302C  51B6               	movf	(??_doWork+9)& (0+255),w,b
  2355  00302E  2181               	addwfc	(?___fltol+3)& (0+255),w,b
  2356  003030  6FBA               	movwf	(??_doWork+13)& (0+255),b
  2357  003032  51AF               	movf	(??_doWork+2)& (0+255),w,b
  2358  003034  25B7               	addwf	(??_doWork+10)& (0+255),w,b
  2359  003036  6F86               	movwf	?___aldiv& (0+255),b
  2360  003038  51B0               	movf	(??_doWork+3)& (0+255),w,b
  2361  00303A  21B8               	addwfc	(??_doWork+11)& (0+255),w,b
  2362  00303C  6F87               	movwf	(?___aldiv+1)& (0+255),b
  2363  00303E  51B1               	movf	(??_doWork+4)& (0+255),w,b
  2364  003040  21B9               	addwfc	(??_doWork+12)& (0+255),w,b
  2365  003042  6F88               	movwf	(?___aldiv+2)& (0+255),b
  2366  003044  51B2               	movf	(??_doWork+5)& (0+255),w,b
  2367  003046  21BA               	addwfc	(??_doWork+13)& (0+255),w,b
  2368  003048  6F89               	movwf	(?___aldiv+3)& (0+255),b
  2369  00304A  0E02               	movlw	2
  2370  00304C  6F8A               	movwf	(?___aldiv+4)& (0+255),b
  2371  00304E  0E00               	movlw	0
  2372  003050  6B8B               	clrf	(?___aldiv+5)& (0+255),b
  2373  003052  6B8C               	clrf	(?___aldiv+6)& (0+255),b
  2374  003054  6B8D               	clrf	(?___aldiv+7)& (0+255),b
  2375  003056  EC74  F020         	call	___aldiv	;wreg free
  2376  00305A  0101               	movlb	1	; () banked
  2377  00305C  51A1               	movf	doWork@i& (0+255),w,b
  2378  00305E  0D02               	mullw	2
  2379  003060  EC80  F015         	call	PL2	;call to abstracted procedure
  2380  003064  0100               	movlb	0	; () banked
  2381  003066  C086  FFDE         	movff	?___aldiv,postinc2
  2382  00306A  C087  FFDD         	movff	?___aldiv+1,postdec2
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;main.c: 513: }
  2386                           ;main.c: 516: adc_conversion_flags &= ~(1 << i);
  2387                           
  2388                           ;main.c: 494: }
  2389  00306E  C1A1  F0AD         	movff	doWork@i,??_doWork
  2390  003072  0E01               	movlw	1
  2391  003074  6FAE               	movwf	(??_doWork+1)& (0+255),b
  2392  003076  2BAD               	incf	??_doWork& (0+255),f,b
  2393  003078  D002               	goto	u8574
  2394  00307A                     u8575:
  2395  00307A  90D8               	bcf	status,0,c
  2396  00307C  37AE               	rlcf	(??_doWork+1)& (0+255),f,b
  2397  00307E                     u8574:
  2398  00307E  2FAD               	decfsz	??_doWork& (0+255),f,b
  2399  003080  D7FC               	goto	u8575
  2400  003082  1DAE               	comf	(??_doWork+1)& (0+255),w,b
  2401  003084  1648               	andwf	_adc_conversion_flags,f,c
  2402  003086                     l9972:
  2403                           
  2404                           ; BSR set to: 0
  2405  003086  0101               	movlb	1	; () banked
  2406  003088  2BA1               	incf	doWork@i& (0+255),f,b
  2407                           
  2408                           ; BSR set to: 1
  2409  00308A  0E05               	movlw	5
  2410  00308C  65A1               	cpfsgt	doWork@i& (0+255),b
  2411  00308E  D607               	goto	l9918
  2412                           
  2413                           ; BSR set to: 1
  2414  003090  0C05               	retlw	5
  2415  003092                     __end_of_doWork:
  2416                           	opt stack 0
  2417  003092                     PL56:
  2418                           	opt stack 23
  2419  003092  0100               	movlb	0	; () banked
  2420  003094  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2421  003096  0E40               	movlw	64
  2422  003098  6F6D               	movwf	(?___flmul+5)& (0+255),b
  2423  00309A  0E1C               	movlw	28
  2424  00309C  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2425  00309E  0E46               	movlw	70
  2426  0030A0  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2427  0030A2  0C46               	retlw	70
  2428  0030A4                     __end_ofPL56:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           tblptrh	equ	0xFF7
  2432                           tblptrl	equ	0xFF6
  2433                           tablat	equ	0xFF5
  2434                           prodh	equ	0xFF4
  2435                           prodl	equ	0xFF3
  2436                           intcon	equ	0xFF2
  2437                           postinc0	equ	0xFEE
  2438                           wreg	equ	0xFE8
  2439                           indf1	equ	0xFE7
  2440                           postdec1	equ	0xFE5
  2441                           fsr1h	equ	0xFE2
  2442                           fsr1l	equ	0xFE1
  2443                           indf2	equ	0xFDF
  2444                           postinc2	equ	0xFDE
  2445                           postdec2	equ	0xFDD
  2446                           plusw2	equ	0xFDB
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           status	equ	0xFD8
  2450                           
  2451 ;; *************** function ___lwtofl *****************
  2452 ;; Defined at:
  2453 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  c               2   25[COMRAM] unsigned int 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  4   25[COMRAM] unsigned int 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2467 ;;      Params:         4       0       0       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0       0       0
  2470 ;;      Totals:         4       0       0       0       0       0       0
  2471 ;;Total ram usage:        4 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    3
  2474 ;; This function calls:
  2475 ;;		___flpack
  2476 ;; This function is called by:
  2477 ;;		_doWork
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text2
  2482  004EC8                     __ptext2:
  2483                           	opt stack 0
  2484  004EC8                     ___lwtofl:
  2485                           	opt stack 26
  2486                           
  2487                           ; BSR set to: 1
  2488                           ;incstack = 0
  2489                           ;incstack = 0
  2490  004EC8  C01A  F00E         	movff	___lwtofl@c,?___flpack
  2491  004ECC  C01B  F00F         	movff	___lwtofl@c+1,?___flpack+1
  2492  004ED0  6A10               	clrf	?___flpack+2,c
  2493  004ED2  6A11               	clrf	?___flpack+3,c
  2494  004ED4  0E96               	movlw	150
  2495  004ED6  6E12               	movwf	?___flpack+4,c
  2496  004ED8  0E00               	movlw	0
  2497  004EDA  6A13               	clrf	?___flpack+5,c
  2498  004EDC  ECD2  F020         	call	___flpack	;wreg free
  2499  004EE0  C011  F01D         	movff	?___flpack+3,?___lwtofl+3
  2500  004EE4  C010  F01C         	movff	?___flpack+2,?___lwtofl+2
  2501  004EE8  C00F  F01B         	movff	?___flpack+1,?___lwtofl+1
  2502  004EEC  C00E  F01A         	movff	?___flpack,?___lwtofl
  2503  004EF0  0012               	return	
  2504  004EF2                     __end_of___lwtofl:
  2505                           	opt stack 0
  2506                           tblptru	equ	0xFF8
  2507                           tblptrh	equ	0xFF7
  2508                           tblptrl	equ	0xFF6
  2509                           tablat	equ	0xFF5
  2510                           prodh	equ	0xFF4
  2511                           prodl	equ	0xFF3
  2512                           intcon	equ	0xFF2
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           indf1	equ	0xFE7
  2516                           postdec1	equ	0xFE5
  2517                           fsr1h	equ	0xFE2
  2518                           fsr1l	equ	0xFE1
  2519                           indf2	equ	0xFDF
  2520                           postinc2	equ	0xFDE
  2521                           postdec2	equ	0xFDD
  2522                           plusw2	equ	0xFDB
  2523                           fsr2h	equ	0xFDA
  2524                           fsr2l	equ	0xFD9
  2525                           status	equ	0xFD8
  2526                           
  2527 ;; *************** function ___asfldiv *****************
  2528 ;; Defined at:
  2529 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;  f1p             2    8[BANK0 ] PTR 
  2532 ;;		 -> doWork@avarage(4), 
  2533 ;;  f2              4   10[BANK0 ] PTR 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  4    8[BANK0 ] PTR 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : F/0
  2542 ;;		On exit  : F/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2545 ;;      Params:         0       6       0       0       0       0       0
  2546 ;;      Locals:         0       0       0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0       0       0
  2548 ;;      Totals:         0       6       0       0       0       0       0
  2549 ;;Total ram usage:        6 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    4
  2552 ;; This function calls:
  2553 ;;		___fldiv
  2554 ;; This function is called by:
  2555 ;;		_doWork
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text3
  2560  004A42                     __ptext3:
  2561                           	opt stack 0
  2562  004A42                     ___asfldiv:
  2563                           	opt stack 25
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;	Return value of ___asfldiv is never used
  2567                           
  2568                           ;incstack = 0
  2569                           ;incstack = 0
  2570  004A42  C068  FFD9         	movff	___asfldiv@f1p,fsr2l
  2571  004A46  C069  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2572  004A4A  CFDE F060          	movff	postinc2,?___fldiv
  2573  004A4E  CFDE F061          	movff	postinc2,?___fldiv+1
  2574  004A52  CFDE F062          	movff	postinc2,?___fldiv+2
  2575  004A56  CFDE F063          	movff	postinc2,?___fldiv+3
  2576  004A5A  C06A  F064         	movff	___asfldiv@f2,?___fldiv+4
  2577  004A5E  C06B  F065         	movff	___asfldiv@f2+1,?___fldiv+5
  2578  004A62  C06C  F066         	movff	___asfldiv@f2+2,?___fldiv+6
  2579  004A66  C06D  F067         	movff	___asfldiv@f2+3,?___fldiv+7
  2580  004A6A  ECE3  F021         	call	___fldiv	;wreg free
  2581  004A6E  C068  FFD9         	movff	___asfldiv@f1p,fsr2l
  2582  004A72  C069  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2583  004A76  0100               	movlb	0	; () banked
  2584  004A78  C060  FFDE         	movff	?___fldiv,postinc2
  2585  004A7C  C061  FFDE         	movff	?___fldiv+1,postinc2
  2586  004A80  C062  FFDE         	movff	?___fldiv+2,postinc2
  2587  004A84  C063  FFDD         	movff	?___fldiv+3,postdec2
  2588  004A88  06D9               	decf	fsr2l,f,c
  2589  004A8A  06D9               	decf	fsr2l,f,c
  2590                           
  2591                           ; BSR set to: 0
  2592  004A8C  0012               	return	
  2593  004A8E                     __end_of___asfldiv:
  2594                           	opt stack 0
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           prodh	equ	0xFF4
  2600                           prodl	equ	0xFF3
  2601                           intcon	equ	0xFF2
  2602                           postinc0	equ	0xFEE
  2603                           wreg	equ	0xFE8
  2604                           indf1	equ	0xFE7
  2605                           postdec1	equ	0xFE5
  2606                           fsr1h	equ	0xFE2
  2607                           fsr1l	equ	0xFE1
  2608                           indf2	equ	0xFDF
  2609                           postinc2	equ	0xFDE
  2610                           postdec2	equ	0xFDD
  2611                           plusw2	equ	0xFDB
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8
  2615                           
  2616 ;; *************** function ___asfladd *****************
  2617 ;; Defined at:
  2618 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;  f1p             2   44[COMRAM] PTR 
  2621 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  2622 ;;  f2              4   46[COMRAM] PTR 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;		None
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  4   44[COMRAM] PTR 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2634 ;;      Params:         6       0       0       0       0       0       0
  2635 ;;      Locals:         0       0       0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0
  2637 ;;      Totals:         6       0       0       0       0       0       0
  2638 ;;Total ram usage:        6 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    4
  2641 ;; This function calls:
  2642 ;;		___fladd
  2643 ;; This function is called by:
  2644 ;;		_doWork
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           	psect	text4
  2649  004B26                     __ptext4:
  2650                           	opt stack 0
  2651  004B26                     ___asfladd:
  2652                           	opt stack 25
  2653                           
  2654                           ;	Return value of ___asfladd is never used
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;incstack = 0
  2658                           ;incstack = 0
  2659  004B26  C02D  FFD9         	movff	___asfladd@f1p,fsr2l
  2660  004B2A  C02E  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2661  004B2E  CFDE F01E          	movff	postinc2,?___fladd
  2662  004B32  CFDE F01F          	movff	postinc2,?___fladd+1
  2663  004B36  CFDE F020          	movff	postinc2,?___fladd+2
  2664  004B3A  CFDE F021          	movff	postinc2,?___fladd+3
  2665  004B3E  C02F  F022         	movff	___asfladd@f2,?___fladd+4
  2666  004B42  C030  F023         	movff	___asfladd@f2+1,?___fladd+5
  2667  004B46  C031  F024         	movff	___asfladd@f2+2,?___fladd+6
  2668  004B4A  C032  F025         	movff	___asfladd@f2+3,?___fladd+7
  2669  004B4E  ECD0  F01B         	call	___fladd	;wreg free
  2670  004B52  C02D  FFD9         	movff	___asfladd@f1p,fsr2l
  2671  004B56  C02E  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2672  004B5A  C01E  FFDE         	movff	?___fladd,postinc2
  2673  004B5E  C01F  FFDE         	movff	?___fladd+1,postinc2
  2674  004B62  C020  FFDE         	movff	?___fladd+2,postinc2
  2675  004B66  C021  FFDD         	movff	?___fladd+3,postdec2
  2676  004B6A  06D9               	decf	fsr2l,f,c
  2677  004B6C  06D9               	decf	fsr2l,f,c
  2678  004B6E  0012               	return	
  2679  004B70                     __end_of___asfladd:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           prodh	equ	0xFF4
  2686                           prodl	equ	0xFF3
  2687                           intcon	equ	0xFF2
  2688                           postinc0	equ	0xFEE
  2689                           wreg	equ	0xFE8
  2690                           indf1	equ	0xFE7
  2691                           postdec1	equ	0xFE5
  2692                           fsr1h	equ	0xFE2
  2693                           fsr1l	equ	0xFE1
  2694                           indf2	equ	0xFDF
  2695                           postinc2	equ	0xFDE
  2696                           postdec2	equ	0xFDD
  2697                           plusw2	equ	0xFDB
  2698                           fsr2h	equ	0xFDA
  2699                           fsr2l	equ	0xFD9
  2700                           status	equ	0xFD8
  2701                           
  2702 ;; *************** function ___aldiv *****************
  2703 ;; Defined at:
  2704 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  dividend        4   38[BANK0 ] long 
  2707 ;;  divisor         4   42[BANK0 ] long 
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  quotient        4   48[BANK0 ] long 
  2710 ;;  sign            1   47[BANK0 ] unsigned char 
  2711 ;;  counter         1   46[BANK0 ] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  4   38[BANK0 ] long 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : F/0
  2718 ;;		On exit  : F/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2721 ;;      Params:         0       8       0       0       0       0       0
  2722 ;;      Locals:         0       6       0       0       0       0       0
  2723 ;;      Temps:          0       0       0       0       0       0       0
  2724 ;;      Totals:         0      14       0       0       0       0       0
  2725 ;;Total ram usage:       14 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    2
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_doWork
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text5
  2736  0040E8                     __ptext5:
  2737                           	opt stack 0
  2738  0040E8                     ___aldiv:
  2739                           	opt stack 27
  2740                           
  2741                           ; BSR set to: 0
  2742                           
  2743                           ;incstack = 0
  2744                           ;incstack = 0
  2745  0040E8  6B8F               	clrf	___aldiv@sign& (0+255),b
  2746  0040EA  AF8D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2747  0040EC  D00A               	goto	l10994
  2748                           
  2749                           ; BSR set to: 0
  2750  0040EE  1F8D               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2751  0040F0  1F8C               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2752  0040F2  1F8B               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2753  0040F4  6D8A               	negf	___aldiv@divisor& (0+255),b
  2754  0040F6  0E00               	movlw	0
  2755  0040F8  238B               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2756  0040FA  238C               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2757  0040FC  238D               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2758                           
  2759                           ; BSR set to: 0
  2760  0040FE  0E01               	movlw	1
  2761  004100  6F8F               	movwf	___aldiv@sign& (0+255),b
  2762  004102                     l10994:
  2763                           
  2764                           ; BSR set to: 0
  2765  004102  AF89               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2766  004104  D00A               	goto	l11000
  2767                           
  2768                           ; BSR set to: 0
  2769  004106  1F89               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2770  004108  1F88               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2771  00410A  1F87               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2772  00410C  6D86               	negf	___aldiv@dividend& (0+255),b
  2773  00410E  0E00               	movlw	0
  2774  004110  2387               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2775  004112  2388               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2776  004114  2389               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2777                           
  2778                           ; BSR set to: 0
  2779  004116  0E01               	movlw	1
  2780  004118  1B8F               	xorwf	___aldiv@sign& (0+255),f,b
  2781  00411A                     l11000:
  2782                           
  2783                           ; BSR set to: 0
  2784  00411A  6B90               	clrf	___aldiv@quotient& (0+255),b
  2785  00411C  6B91               	clrf	(___aldiv@quotient+1)& (0+255),b
  2786  00411E  6B92               	clrf	(___aldiv@quotient+2)& (0+255),b
  2787  004120  6B93               	clrf	(___aldiv@quotient+3)& (0+255),b
  2788                           
  2789                           ; BSR set to: 0
  2790  004122  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2791  004124  118A               	iorwf	___aldiv@divisor& (0+255),w,b
  2792  004126  118B               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2793  004128  118C               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2794  00412A  E029               	bz	l11022
  2795                           
  2796                           ; BSR set to: 0
  2797  00412C  0E01               	movlw	1
  2798  00412E  6F8E               	movwf	___aldiv@counter& (0+255),b
  2799  004130  D006               	goto	l11008
  2800  004132                     l11006:
  2801                           
  2802                           ; BSR set to: 0
  2803  004132  90D8               	bcf	status,0,c
  2804  004134  378A               	rlcf	___aldiv@divisor& (0+255),f,b
  2805  004136  378B               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2806  004138  378C               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2807  00413A  378D               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2808  00413C  2B8E               	incf	___aldiv@counter& (0+255),f,b
  2809  00413E                     l11008:
  2810                           
  2811                           ; BSR set to: 0
  2812  00413E  AF8D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2813  004140  D7F8               	goto	l11006
  2814  004142                     l11010:
  2815                           
  2816                           ; BSR set to: 0
  2817  004142  90D8               	bcf	status,0,c
  2818  004144  3790               	rlcf	___aldiv@quotient& (0+255),f,b
  2819  004146  3791               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2820  004148  3792               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2821  00414A  3793               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2822                           
  2823                           ; BSR set to: 0
  2824  00414C  518A               	movf	___aldiv@divisor& (0+255),w,b
  2825  00414E  5D86               	subwf	___aldiv@dividend& (0+255),w,b
  2826  004150  518B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2827  004152  5987               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2828  004154  518C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2829  004156  5988               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2830  004158  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2831  00415A  5989               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2832  00415C  E309               	bnc	l11018
  2833                           
  2834                           ; BSR set to: 0
  2835  00415E  518A               	movf	___aldiv@divisor& (0+255),w,b
  2836  004160  5F86               	subwf	___aldiv@dividend& (0+255),f,b
  2837  004162  518B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2838  004164  5B87               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2839  004166  518C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2840  004168  5B88               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2841  00416A  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2842  00416C  5B89               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2843                           
  2844                           ; BSR set to: 0
  2845  00416E  8190               	bsf	___aldiv@quotient& (0+255),0,b
  2846  004170                     l11018:
  2847                           
  2848                           ; BSR set to: 0
  2849  004170  90D8               	bcf	status,0,c
  2850  004172  338D               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2851  004174  338C               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2852  004176  338B               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2853  004178  338A               	rrcf	___aldiv@divisor& (0+255),f,b
  2854                           
  2855                           ; BSR set to: 0
  2856  00417A  2F8E               	decfsz	___aldiv@counter& (0+255),f,b
  2857  00417C  D7E2               	goto	l11010
  2858  00417E                     l11022:
  2859                           
  2860                           ; BSR set to: 0
  2861  00417E  518F               	movf	___aldiv@sign& (0+255),w,b
  2862  004180  E008               	bz	l11026
  2863                           
  2864                           ; BSR set to: 0
  2865  004182  1F93               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2866  004184  1F92               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2867  004186  1F91               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2868  004188  6D90               	negf	___aldiv@quotient& (0+255),b
  2869  00418A  0E00               	movlw	0
  2870  00418C  2391               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2871  00418E  2392               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2872  004190  2393               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2873  004192                     l11026:
  2874                           
  2875                           ; BSR set to: 0
  2876  004192  C090  F086         	movff	___aldiv@quotient,?___aldiv
  2877  004196  C091  F087         	movff	___aldiv@quotient+1,?___aldiv+1
  2878  00419A  C092  F088         	movff	___aldiv@quotient+2,?___aldiv+2
  2879  00419E  C093  F089         	movff	___aldiv@quotient+3,?___aldiv+3
  2880                           
  2881                           ; BSR set to: 0
  2882  0041A2  0012               	return	
  2883  0041A4                     __end_of___aldiv:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           prodh	equ	0xFF4
  2890                           prodl	equ	0xFF3
  2891                           intcon	equ	0xFF2
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           indf1	equ	0xFE7
  2895                           postdec1	equ	0xFE5
  2896                           fsr1h	equ	0xFE2
  2897                           fsr1l	equ	0xFE1
  2898                           indf2	equ	0xFDF
  2899                           postinc2	equ	0xFDE
  2900                           postdec2	equ	0xFDD
  2901                           plusw2	equ	0xFDB
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _getCalibrationValue *****************
  2907 ;; Defined at:
  2908 ;;		line 863 in file "../main.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  i               1    wreg     unsigned char 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  i               1   32[COMRAM] unsigned char 
  2913 ;;  cal             2   30[COMRAM] short 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  2   25[COMRAM] short 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : F/1
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2923 ;;      Params:         2       0       0       0       0       0       0
  2924 ;;      Locals:         3       0       0       0       0       0       0
  2925 ;;      Temps:          3       0       0       0       0       0       0
  2926 ;;      Totals:         8       0       0       0       0       0       0
  2927 ;;Total ram usage:        8 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    3
  2930 ;; This function calls:
  2931 ;;		_readEEPROM
  2932 ;; This function is called by:
  2933 ;;		_doWork
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text6
  2938  004BBA                     __ptext6:
  2939                           	opt stack 0
  2940  004BBA                     _getCalibrationValue:
  2941                           	opt stack 26
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;incstack = 0
  2945                           ;incstack = 0
  2946                           ;getCalibrationValue@i stored from wreg
  2947  004BBA  CFE8 F021          	movff	wreg,getCalibrationValue@i
  2948                           
  2949                           ; BSR set to: 1
  2950                           ;main.c: 864: int16_t cal;
  2951                           ;main.c: 866: cal = readEEPROM(2 * i + 0x9E) * 256 +
  2952                           ;main.c: 867: readEEPROM(2 * i + 0x9F);
  2953  004BBE  5021               	movf	getCalibrationValue@i,w,c
  2954  004BC0  0D02               	mullw	2
  2955  004BC2  0E9F               	movlw	159
  2956  004BC4  24F3               	addwf	prodl,w,c
  2957  004BC6  6E16               	movwf	?_readEEPROM,c
  2958  004BC8  0E00               	movlw	0
  2959  004BCA  20F4               	addwfc	prodh,w,c
  2960  004BCC  6E17               	movwf	?_readEEPROM+1,c
  2961  004BCE  ECC0  F028         	call	_readEEPROM	;wreg free
  2962  004BD2  6E1C               	movwf	??_getCalibrationValue& (0+255),c
  2963  004BD4  5021               	movf	getCalibrationValue@i,w,c
  2964  004BD6  0D02               	mullw	2
  2965  004BD8  0E9E               	movlw	158
  2966  004BDA  24F3               	addwf	prodl,w,c
  2967  004BDC  6E16               	movwf	?_readEEPROM,c
  2968  004BDE  0E00               	movlw	0
  2969  004BE0  20F4               	addwfc	prodh,w,c
  2970  004BE2  6E17               	movwf	?_readEEPROM+1,c
  2971  004BE4  ECC0  F028         	call	_readEEPROM	;wreg free
  2972  004BE8  6E1E               	movwf	(??_getCalibrationValue+2)& (0+255),c
  2973  004BEA  6A1D               	clrf	(??_getCalibrationValue+1)& (0+255),c
  2974  004BEC  501C               	movf	??_getCalibrationValue,w,c
  2975  004BEE  241D               	addwf	??_getCalibrationValue+1,w,c
  2976  004BF0  6E1F               	movwf	getCalibrationValue@cal,c
  2977  004BF2  0E00               	movlw	0
  2978  004BF4  201E               	addwfc	??_getCalibrationValue+2,w,c
  2979  004BF6  6E20               	movwf	getCalibrationValue@cal+1,c
  2980                           
  2981                           ;main.c: 869: return cal;
  2982  004BF8  C01F  F01A         	movff	getCalibrationValue@cal,?_getCalibrationValue
  2983  004BFC  C020  F01B         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  2984  004C00  0012               	return	
  2985  004C02                     __end_of_getCalibrationValue:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           intcon	equ	0xFF2
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           indf1	equ	0xFE7
  2997                           postdec1	equ	0xFE5
  2998                           fsr1h	equ	0xFE2
  2999                           fsr1l	equ	0xFE1
  3000                           indf2	equ	0xFDF
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           plusw2	equ	0xFDB
  3004                           fsr2h	equ	0xFDA
  3005                           fsr2l	equ	0xFD9
  3006                           status	equ	0xFD8
  3007                           
  3008 ;; *************** function _log *****************
  3009 ;; Defined at:
  3010 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;  x               4   41[BANK0 ] short 
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;  exponent        2   67[COMRAM] int 
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  4   41[BANK0 ] int 
  3017 ;; Registers used:
  3018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/1
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3024 ;;      Params:         0       4       0       0       0       0       0
  3025 ;;      Locals:         2       0       0       0       0       0       0
  3026 ;;      Temps:          0       0       0       0       0       0       0
  3027 ;;      Totals:         2       4       0       0       0       0       0
  3028 ;;Total ram usage:        6 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    5
  3031 ;; This function calls:
  3032 ;;		___fladd
  3033 ;;		___flmul
  3034 ;;		___awtofl
  3035 ;;		_eval_poly
  3036 ;;		_frexp
  3037 ;; This function is called by:
  3038 ;;		_doWork
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text7
  3043  0038F6                     __ptext7:
  3044                           	opt stack 0
  3045  0038F6                     _log:
  3046                           	opt stack 24
  3047                           
  3048                           ;incstack = 0
  3049                           ;incstack = 0
  3050  0038F6  0100               	movlb	0	; () banked
  3051  0038F8  BF8C               	btfsc	(log@x+3)& (0+255),7,b
  3052  0038FA  D007               	goto	u8670
  3053                           
  3054                           ; BSR set to: 0
  3055                           
  3056                           ; BSR set to: 0
  3057  0038FC  EE20  F089         	lfsr	2,log@x
  3058  003900  50DE               	movf	postinc2,w,c
  3059  003902  10DE               	iorwf	postinc2,w,c
  3060  003904  10DE               	iorwf	postinc2,w,c
  3061  003906  10DE               	iorwf	postinc2,w,c
  3062  003908  E105               	bnz	l10026
  3063  00390A                     u8670:
  3064                           
  3065                           ; BSR set to: 0
  3066  00390A  6B89               	clrf	?_log& (0+255),b
  3067  00390C  6B8A               	clrf	(?_log+1)& (0+255),b
  3068  00390E  6B8B               	clrf	(?_log+2)& (0+255),b
  3069  003910  6B8C               	clrf	(?_log+3)& (0+255),b
  3070  003912  D087               	goto	l1849
  3071  003914                     l10026:
  3072                           
  3073                           ; BSR set to: 0
  3074  003914  6B6C               	clrf	(?___flmul+4)& (0+255),b
  3075  003916  6B6D               	clrf	(?___flmul+5)& (0+255),b
  3076  003918  6B6E               	clrf	(?___flmul+6)& (0+255),b
  3077  00391A  0E40               	movlw	64
  3078  00391C  6F6F               	movwf	(?___flmul+7)& (0+255),b
  3079  00391E  0E44               	movlw	low log@exponent
  3080  003920  6E12               	movwf	?_frexp+4,c
  3081  003922  0E00               	movlw	high log@exponent
  3082  003924  6E13               	movwf	?_frexp+5,c
  3083  003926  0E0F               	movlw	15
  3084  003928  6E13               	movwf	?_frexp+5,c
  3085  00392A  0E5F               	movlw	__accesstop+-1
  3086  00392C  6412               	cpfsgt	?_frexp+4,c
  3087  00392E  6A13               	clrf	?_frexp+5,c
  3088  003930  C089  F00E         	movff	log@x,?_frexp
  3089  003934  C08A  F00F         	movff	log@x+1,?_frexp+1
  3090  003938  C08B  F010         	movff	log@x+2,?_frexp+2
  3091  00393C  C08C  F011         	movff	log@x+3,?_frexp+3
  3092  003940  EC86  F023         	call	_frexp	;wreg free
  3093  003944  C011  F06B         	movff	?_frexp+3,?___flmul+3
  3094  003948  C010  F06A         	movff	?_frexp+2,?___flmul+2
  3095  00394C  C00F  F069         	movff	?_frexp+1,?___flmul+1
  3096  003950  C00E  F068         	movff	?_frexp,?___flmul
  3097  003954  EC11  F020         	call	___flmul	;wreg free
  3098  003958  C06B  F021         	movff	?___flmul+3,?___fladd+3
  3099  00395C  C06A  F020         	movff	?___flmul+2,?___fladd+2
  3100  003960  C069  F01F         	movff	?___flmul+1,?___fladd+1
  3101  003964  C068  F01E         	movff	?___flmul,?___fladd
  3102  003968  6A22               	clrf	?___fladd+4,c
  3103  00396A  6A23               	clrf	?___fladd+5,c
  3104  00396C  0E80               	movlw	128
  3105  00396E  6E24               	movwf	?___fladd+6,c
  3106  003970  0EBF               	movlw	191
  3107  003972  6E25               	movwf	?___fladd+7,c
  3108  003974  ECD0  F01B         	call	___fladd	;wreg free
  3109  003978  C021  F08C         	movff	?___fladd+3,log@x+3
  3110  00397C  C020  F08B         	movff	?___fladd+2,log@x+2
  3111  003980  C01F  F08A         	movff	?___fladd+1,log@x+1
  3112  003984  C01E  F089         	movff	?___fladd,log@x
  3113  003988  0644               	decf	log@exponent,f,c
  3114  00398A  A0D8               	btfss	status,0,c
  3115  00398C  0645               	decf	log@exponent+1,f,c
  3116  00398E  C089  F07E         	movff	log@x,?_eval_poly
  3117  003992  C08A  F07F         	movff	log@x+1,?_eval_poly+1
  3118  003996  C08B  F080         	movff	log@x+2,?_eval_poly+2
  3119  00399A  C08C  F081         	movff	log@x+3,?_eval_poly+3
  3120  00399E  0E48               	movlw	low log@coeff
  3121  0039A0  0100               	movlb	0	; () banked
  3122  0039A2  6F82               	movwf	(?_eval_poly+4)& (0+255),b
  3123  0039A4  6B84               	clrf	(?_eval_poly+6)& (0+255),b
  3124  0039A6  0E08               	movlw	8
  3125  0039A8  6F83               	movwf	(?_eval_poly+5)& (0+255),b
  3126  0039AA  EC30  F021         	call	_eval_poly	;wreg free
  3127  0039AE  C081  F08C         	movff	?_eval_poly+3,log@x+3
  3128  0039B2  C080  F08B         	movff	?_eval_poly+2,log@x+2
  3129  0039B6  C07F  F08A         	movff	?_eval_poly+1,log@x+1
  3130  0039BA  C07E  F089         	movff	?_eval_poly,log@x
  3131                           
  3132                           ; BSR set to: 0
  3133  0039BE  0E18               	movlw	24
  3134  0039C0  6F6C               	movwf	(?___flmul+4)& (0+255),b
  3135  0039C2  0E72               	movlw	114
  3136  0039C4  6F6D               	movwf	(?___flmul+5)& (0+255),b
  3137  0039C6  0E31               	movlw	49
  3138  0039C8  6F6E               	movwf	(?___flmul+6)& (0+255),b
  3139  0039CA  0E3F               	movlw	63
  3140  0039CC  6F6F               	movwf	(?___flmul+7)& (0+255),b
  3141  0039CE  C044  F018         	movff	log@exponent,?___awtofl
  3142  0039D2  C045  F019         	movff	log@exponent+1,?___awtofl+1
  3143  0039D6  ECE6  F026         	call	___awtofl	;wreg free
  3144  0039DA  C01B  F06B         	movff	?___awtofl+3,?___flmul+3
  3145  0039DE  C01A  F06A         	movff	?___awtofl+2,?___flmul+2
  3146  0039E2  C019  F069         	movff	?___awtofl+1,?___flmul+1
  3147  0039E6  C018  F068         	movff	?___awtofl,?___flmul
  3148  0039EA  EC11  F020         	call	___flmul	;wreg free
  3149  0039EE  C06B  F021         	movff	?___flmul+3,?___fladd+3
  3150  0039F2  C06A  F020         	movff	?___flmul+2,?___fladd+2
  3151  0039F6  C069  F01F         	movff	?___flmul+1,?___fladd+1
  3152  0039FA  C068  F01E         	movff	?___flmul,?___fladd
  3153  0039FE  C089  F022         	movff	log@x,?___fladd+4
  3154  003A02  C08A  F023         	movff	log@x+1,?___fladd+5
  3155  003A06  C08B  F024         	movff	log@x+2,?___fladd+6
  3156  003A0A  C08C  F025         	movff	log@x+3,?___fladd+7
  3157  003A0E  ECD0  F01B         	call	___fladd	;wreg free
  3158  003A12  C021  F08C         	movff	?___fladd+3,?_log+3
  3159  003A16  C020  F08B         	movff	?___fladd+2,?_log+2
  3160  003A1A  C01F  F08A         	movff	?___fladd+1,?_log+1
  3161  003A1E  C01E  F089         	movff	?___fladd,?_log
  3162  003A22                     l1849:
  3163  003A22  0012               	return	
  3164  003A24                     __end_of_log:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon	equ	0xFF2
  3173                           postinc0	equ	0xFEE
  3174                           wreg	equ	0xFE8
  3175                           indf1	equ	0xFE7
  3176                           postdec1	equ	0xFE5
  3177                           fsr1h	equ	0xFE2
  3178                           fsr1l	equ	0xFE1
  3179                           indf2	equ	0xFDF
  3180                           postinc2	equ	0xFDE
  3181                           postdec2	equ	0xFDD
  3182                           plusw2	equ	0xFDB
  3183                           fsr2h	equ	0xFDA
  3184                           fsr2l	equ	0xFD9
  3185                           status	equ	0xFD8
  3186                           
  3187 ;; *************** function _exp *****************
  3188 ;; Defined at:
  3189 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;  x               4   66[BANK0 ] int 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  exponent        2   74[BANK0 ] int 
  3194 ;;  sign            1   76[BANK0 ] unsigned char 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  4   66[BANK0 ] unsigned char 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/1
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3204 ;;      Params:         0       4       0       0       0       0       0
  3205 ;;      Locals:         0       7       0       0       0       0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0
  3207 ;;      Totals:         0      11       0       0       0       0       0
  3208 ;;Total ram usage:       11 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    6
  3211 ;; This function calls:
  3212 ;;		___fldiv
  3213 ;;		___asflmul
  3214 ;;		___asflsub
  3215 ;;		___awtofl
  3216 ;;		_floor
  3217 ;;		_eval_poly
  3218 ;;		_ldexp
  3219 ;;		___flge
  3220 ;;		___flneg
  3221 ;;		___fltol
  3222 ;; This function is called by:
  3223 ;;		_doWork
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text8
  3228  0032B6                     __ptext8:
  3229                           	opt stack 0
  3230  0032B6                     _exp:
  3231                           	opt stack 23
  3232                           
  3233                           ;incstack = 0
  3234                           ;incstack = 0
  3235  0032B6  0100               	movlb	0	; () banked
  3236  0032B8  EE20  F0A2         	lfsr	2,exp@x
  3237  0032BC  50DE               	movf	postinc2,w,c
  3238  0032BE  10DE               	iorwf	postinc2,w,c
  3239  0032C0  10DE               	iorwf	postinc2,w,c
  3240  0032C2  10DE               	iorwf	postinc2,w,c
  3241  0032C4  E107               	bnz	l9988
  3242                           
  3243                           ; BSR set to: 0
  3244  0032C6  0E00               	movlw	0
  3245  0032C8  6FA2               	movwf	?_exp& (0+255),b
  3246  0032CA  6FA3               	movwf	(?_exp+1)& (0+255),b
  3247  0032CC  0E80               	movlw	128
  3248  0032CE  6FA4               	movwf	(?_exp+2)& (0+255),b
  3249  0032D0  0E3F               	movlw	63
  3250  0032D2  D018               	goto	L1
  3251  0032D4                     l9988:
  3252                           
  3253                           ; BSR set to: 0
  3254  0032D4  0E18               	movlw	24
  3255  0032D6  6E0E               	movwf	?___flge,c
  3256  0032D8  0E72               	movlw	114
  3257  0032DA  6E0F               	movwf	?___flge+1,c
  3258  0032DC  0E31               	movlw	49
  3259  0032DE  6E10               	movwf	?___flge+2,c
  3260  0032E0  0E44               	movlw	68
  3261  0032E2  6E11               	movwf	?___flge+3,c
  3262  0032E4  C0A2  F012         	movff	exp@x,?___flge+4
  3263  0032E8  C0A3  F013         	movff	exp@x+1,?___flge+5
  3264  0032EC  C0A4  F014         	movff	exp@x+2,?___flge+6
  3265  0032F0  C0A5  F015         	movff	exp@x+3,?___flge+7
  3266  0032F4  EC47  F025         	call	___flge	;wreg free
  3267  0032F8  E207               	bc	l9994
  3268  0032FA  0100               	movlb	0	; () banked
  3269  0032FC  69A2               	setf	?_exp& (0+255),b
  3270  0032FE  69A3               	setf	(?_exp+1)& (0+255),b
  3271  003300  0E7F               	movlw	127
  3272  003302  6FA4               	movwf	(?_exp+2)& (0+255),b
  3273  003304                     L1:
  3274  003304  6FA5               	movwf	(?_exp+3)& (0+255),b
  3275  003306  D0C9               	goto	l1557
  3276  003308                     l9994:
  3277  003308  C0A2  F00E         	movff	exp@x,?___flge
  3278  00330C  C0A3  F00F         	movff	exp@x+1,?___flge+1
  3279  003310  C0A4  F010         	movff	exp@x+2,?___flge+2
  3280  003314  C0A5  F011         	movff	exp@x+3,?___flge+3
  3281  003318  0E87               	movlw	135
  3282  00331A  6E12               	movwf	?___flge+4,c
  3283  00331C  0E48               	movlw	72
  3284  00331E  6E13               	movwf	?___flge+5,c
  3285  003320  0E3A               	movlw	58
  3286  003322  6E14               	movwf	?___flge+6,c
  3287  003324  0EC4               	movlw	196
  3288  003326  6E15               	movwf	?___flge+7,c
  3289  003328  EC47  F025         	call	___flge	;wreg free
  3290  00332C  E202               	bc	l9998
  3291  00332E  0100               	movlb	0	; () banked
  3292  003330  D08E               	goto	u8650
  3293  003332                     l9998:
  3294  003332  0100               	movlb	0	; () banked
  3295  003334  0E01               	movlw	1
  3296  003336  AFA5               	btfss	(exp@x+3)& (0+255),7,b
  3297  003338  0E00               	movlw	0
  3298  00333A  6FAC               	movwf	exp@sign& (0+255),b
  3299  00333C  51AC               	movf	exp@sign& (0+255),w,b
  3300  00333E  E012               	bz	l1560
  3301                           
  3302                           ; BSR set to: 0
  3303  003340  C0A2  F00E         	movff	exp@x,?___flneg
  3304  003344  C0A3  F00F         	movff	exp@x+1,?___flneg+1
  3305  003348  C0A4  F010         	movff	exp@x+2,?___flneg+2
  3306  00334C  C0A5  F011         	movff	exp@x+3,?___flneg+3
  3307  003350  ECF1  F027         	call	___flneg	;wreg free
  3308  003354  C011  F0A5         	movff	?___flneg+3,exp@x+3
  3309  003358  C010  F0A4         	movff	?___flneg+2,exp@x+2
  3310  00335C  C00F  F0A3         	movff	?___flneg+1,exp@x+1
  3311  003360  C00E  F0A2         	movff	?___flneg,exp@x
  3312  003364                     l1560:
  3313                           
  3314                           ; BSR set to: 0
  3315  003364  0E3B               	movlw	59
  3316  003366  6F7E               	movwf	?___asflmul& (0+255),b
  3317  003368  0EAA               	movlw	170
  3318  00336A  6F7F               	movwf	(?___asflmul+1)& (0+255),b
  3319  00336C  0EB8               	movlw	184
  3320  00336E  6F80               	movwf	(?___asflmul+2)& (0+255),b
  3321  003370  0E3F               	movlw	63
  3322  003372  6F81               	movwf	(?___asflmul+3)& (0+255),b
  3323  003374  0EA2               	movlw	exp@x& (0+255)
  3324  003376  EC6D  F025         	call	___asflmul
  3325  00337A  C0A2  F098         	movff	exp@x,?_floor
  3326  00337E  C0A3  F099         	movff	exp@x+1,?_floor+1
  3327  003382  C0A4  F09A         	movff	exp@x+2,?_floor+2
  3328  003386  C0A5  F09B         	movff	exp@x+3,?_floor+3
  3329  00338A  ECB0  F01E         	call	_floor	;wreg free
  3330  00338E  C09B  F0A9         	movff	?_floor+3,_exp$2273+3
  3331  003392  C09A  F0A8         	movff	?_floor+2,_exp$2273+2
  3332  003396  C099  F0A7         	movff	?_floor+1,_exp$2273+1
  3333  00339A  C098  F0A6         	movff	?_floor,_exp$2273
  3334  00339E  C0A6  F07E         	movff	_exp$2273,?___fltol
  3335  0033A2  C0A7  F07F         	movff	_exp$2273+1,?___fltol+1
  3336  0033A6  C0A8  F080         	movff	_exp$2273+2,?___fltol+2
  3337  0033AA  C0A9  F081         	movff	_exp$2273+3,?___fltol+3
  3338  0033AE  ECE5  F022         	call	___fltol	;wreg free
  3339  0033B2  C07E  F0AA         	movff	?___fltol,exp@exponent
  3340  0033B6  C07F  F0AB         	movff	?___fltol+1,exp@exponent+1
  3341                           
  3342                           ; BSR set to: 0
  3343  0033BA  0E00               	movlw	high exp@x
  3344  0033BC  6E36               	movwf	?___asflsub+1,c
  3345  0033BE  0EA2               	movlw	low exp@x
  3346  0033C0  6E35               	movwf	?___asflsub,c
  3347  0033C2  C0AA  F018         	movff	exp@exponent,?___awtofl
  3348  0033C6  C0AB  F019         	movff	exp@exponent+1,?___awtofl+1
  3349  0033CA  ECE6  F026         	call	___awtofl	;wreg free
  3350  0033CE  C01B  F03A         	movff	?___awtofl+3,?___asflsub+5
  3351  0033D2  C01A  F039         	movff	?___awtofl+2,?___asflsub+4
  3352  0033D6  C019  F038         	movff	?___awtofl+1,?___asflsub+3
  3353  0033DA  C018  F037         	movff	?___awtofl,?___asflsub+2
  3354  0033DE  ECB8  F025         	call	___asflsub	;wreg free
  3355  0033E2  C0A2  F07E         	movff	exp@x,?_eval_poly
  3356  0033E6  C0A3  F07F         	movff	exp@x+1,?_eval_poly+1
  3357  0033EA  C0A4  F080         	movff	exp@x+2,?_eval_poly+2
  3358  0033EE  C0A5  F081         	movff	exp@x+3,?_eval_poly+3
  3359  0033F2  0E20               	movlw	low exp@coeff
  3360  0033F4  0100               	movlb	0	; () banked
  3361  0033F6  6F82               	movwf	(?_eval_poly+4)& (0+255),b
  3362  0033F8  6B84               	clrf	(?_eval_poly+6)& (0+255),b
  3363  0033FA  0E09               	movlw	9
  3364  0033FC  6F83               	movwf	(?_eval_poly+5)& (0+255),b
  3365  0033FE  EC30  F021         	call	_eval_poly	;wreg free
  3366  003402  C081  F08C         	movff	?_eval_poly+3,?_ldexp+3
  3367  003406  C080  F08B         	movff	?_eval_poly+2,?_ldexp+2
  3368  00340A  C07F  F08A         	movff	?_eval_poly+1,?_ldexp+1
  3369  00340E  C07E  F089         	movff	?_eval_poly,?_ldexp
  3370  003412  C0AA  F08D         	movff	exp@exponent,?_ldexp+4
  3371  003416  C0AB  F08E         	movff	exp@exponent+1,?_ldexp+5
  3372  00341A  EC93  F022         	call	_ldexp	;wreg free
  3373  00341E  C08C  F0A5         	movff	?_ldexp+3,exp@x+3
  3374  003422  C08B  F0A4         	movff	?_ldexp+2,exp@x+2
  3375  003426  C08A  F0A3         	movff	?_ldexp+1,exp@x+1
  3376  00342A  C089  F0A2         	movff	?_ldexp,exp@x
  3377                           
  3378                           ; BSR set to: 0
  3379  00342E  51AC               	movf	exp@sign& (0+255),w,b
  3380  003430  E02C               	bz	l1561
  3381                           
  3382                           ; BSR set to: 0
  3383  003432  EE20  F0A2         	lfsr	2,exp@x
  3384  003436  0EFF               	movlw	255
  3385  003438  18DE               	xorwf	postinc2,w,c
  3386  00343A  0EFF               	movlw	255
  3387  00343C  B4D8               	btfsc	status,2,c
  3388  00343E  18DE               	xorwf	postinc2,w,c
  3389  003440  0E7F               	movlw	127
  3390  003442  B4D8               	btfsc	status,2,c
  3391  003444  18DE               	xorwf	postinc2,w,c
  3392  003446  0E7F               	movlw	127
  3393  003448  B4D8               	btfsc	status,2,c
  3394  00344A  18DE               	xorwf	postinc2,w,c
  3395  00344C  E105               	bnz	l10014
  3396  00344E                     u8650:
  3397                           
  3398                           ; BSR set to: 0
  3399  00344E  6BA2               	clrf	?_exp& (0+255),b
  3400  003450  6BA3               	clrf	(?_exp+1)& (0+255),b
  3401  003452  6BA4               	clrf	(?_exp+2)& (0+255),b
  3402  003454  6BA5               	clrf	(?_exp+3)& (0+255),b
  3403  003456  D021               	goto	l1557
  3404  003458                     l10014:
  3405                           
  3406                           ; BSR set to: 0
  3407  003458  6B60               	clrf	?___fldiv& (0+255),b
  3408  00345A  6B61               	clrf	(?___fldiv+1)& (0+255),b
  3409  00345C  0E80               	movlw	128
  3410  00345E  6F62               	movwf	(?___fldiv+2)& (0+255),b
  3411  003460  0E3F               	movlw	63
  3412  003462  6F63               	movwf	(?___fldiv+3)& (0+255),b
  3413  003464  C0A2  F064         	movff	exp@x,?___fldiv+4
  3414  003468  C0A3  F065         	movff	exp@x+1,?___fldiv+5
  3415  00346C  C0A4  F066         	movff	exp@x+2,?___fldiv+6
  3416  003470  C0A5  F067         	movff	exp@x+3,?___fldiv+7
  3417  003474  ECE3  F021         	call	___fldiv	;wreg free
  3418  003478  C063  F0A5         	movff	?___fldiv+3,?_exp+3
  3419  00347C  C062  F0A4         	movff	?___fldiv+2,?_exp+2
  3420  003480  C061  F0A3         	movff	?___fldiv+1,?_exp+1
  3421  003484  C060  F0A2         	movff	?___fldiv,?_exp
  3422  003488  D008               	goto	l1557
  3423  00348A                     l1561:
  3424                           
  3425                           ; BSR set to: 0
  3426  00348A  C0A2  F0A2         	movff	exp@x,?_exp
  3427  00348E  C0A3  F0A3         	movff	exp@x+1,?_exp+1
  3428  003492  C0A4  F0A4         	movff	exp@x+2,?_exp+2
  3429  003496  C0A5  F0A5         	movff	exp@x+3,?_exp+3
  3430  00349A                     l1557:
  3431  00349A  0012               	return	
  3432  00349C                     __end_of_exp:
  3433                           	opt stack 0
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           prodh	equ	0xFF4
  3439                           prodl	equ	0xFF3
  3440                           intcon	equ	0xFF2
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           indf1	equ	0xFE7
  3444                           postdec1	equ	0xFE5
  3445                           fsr1h	equ	0xFE2
  3446                           fsr1l	equ	0xFE1
  3447                           indf2	equ	0xFDF
  3448                           postinc2	equ	0xFDE
  3449                           postdec2	equ	0xFDD
  3450                           plusw2	equ	0xFDB
  3451                           fsr2h	equ	0xFDA
  3452                           fsr2l	equ	0xFD9
  3453                           status	equ	0xFD8
  3454                           
  3455 ;; *************** function ___flneg *****************
  3456 ;; Defined at:
  3457 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  f1              4   13[COMRAM] unsigned char 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;		None
  3462 ;; Return value:  Size  Location     Type
  3463 ;;                  4   13[COMRAM] unsigned char 
  3464 ;; Registers used:
  3465 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3466 ;; Tracked objects:
  3467 ;;		On entry : F/0
  3468 ;;		On exit  : F/0
  3469 ;;		Unchanged: F/0
  3470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3471 ;;      Params:         4       0       0       0       0       0       0
  3472 ;;      Locals:         0       0       0       0       0       0       0
  3473 ;;      Temps:          0       0       0       0       0       0       0
  3474 ;;      Totals:         4       0       0       0       0       0       0
  3475 ;;Total ram usage:        4 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; Hardware stack levels required when called:    2
  3478 ;; This function calls:
  3479 ;;		Nothing
  3480 ;; This function is called by:
  3481 ;;		_exp
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           	psect	text9
  3486  004FE2                     __ptext9:
  3487                           	opt stack 0
  3488  004FE2                     ___flneg:
  3489                           	opt stack 26
  3490                           
  3491                           ; BSR set to: 0
  3492                           
  3493                           ;incstack = 0
  3494                           ;incstack = 0
  3495  004FE2  EE20  F00E         	lfsr	2,___flneg@f1
  3496  004FE6  50DE               	movf	postinc2,w,c
  3497  004FE8  10DE               	iorwf	postinc2,w,c
  3498  004FEA  10DE               	iorwf	postinc2,w,c
  3499  004FEC  10DE               	iorwf	postinc2,w,c
  3500  004FEE  E002               	bz	l11296
  3501                           
  3502                           ; BSR set to: 0
  3503  004FF0  0E80               	movlw	128
  3504  004FF2  1A11               	xorwf	___flneg@f1+3,f,c
  3505  004FF4                     l11296:
  3506                           
  3507                           ; BSR set to: 0
  3508  004FF4  C00E  F00E         	movff	___flneg@f1,?___flneg
  3509  004FF8  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  3510  004FFC  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  3511  005000  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  3512                           
  3513                           ; BSR set to: 0
  3514  005004  0012               	return	
  3515  005006                     __end_of___flneg:
  3516                           	opt stack 0
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           intcon	equ	0xFF2
  3524                           postinc0	equ	0xFEE
  3525                           wreg	equ	0xFE8
  3526                           indf1	equ	0xFE7
  3527                           postdec1	equ	0xFE5
  3528                           fsr1h	equ	0xFE2
  3529                           fsr1l	equ	0xFE1
  3530                           indf2	equ	0xFDF
  3531                           postinc2	equ	0xFDE
  3532                           postdec2	equ	0xFDD
  3533                           plusw2	equ	0xFDB
  3534                           fsr2h	equ	0xFDA
  3535                           fsr2l	equ	0xFD9
  3536                           status	equ	0xFD8
  3537                           
  3538 ;; *************** function _ldexp *****************
  3539 ;; Defined at:
  3540 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  value           4   41[BANK0 ] unsigned char 
  3543 ;;  newexp          2   45[BANK0 ] int 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  4   41[BANK0 ] int 
  3548 ;; Registers used:
  3549 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3550 ;; Tracked objects:
  3551 ;;		On entry : F/0
  3552 ;;		On exit  : F/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3555 ;;      Params:         0       6       0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0
  3557 ;;      Temps:          0       3       0       0       0       0       0
  3558 ;;      Totals:         0       9       0       0       0       0       0
  3559 ;;Total ram usage:        9 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    2
  3562 ;; This function calls:
  3563 ;;		Nothing
  3564 ;; This function is called by:
  3565 ;;		_exp
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text10
  3570  004526                     __ptext10:
  3571                           	opt stack 0
  3572  004526                     _ldexp:
  3573                           	opt stack 26
  3574                           
  3575                           ; BSR set to: 0
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;incstack = 0
  3579                           ;incstack = 0
  3580  004526  EE20  F089         	lfsr	2,ldexp@value
  3581  00452A  50DE               	movf	postinc2,w,c
  3582  00452C  10DE               	iorwf	postinc2,w,c
  3583  00452E  10DE               	iorwf	postinc2,w,c
  3584  004530  10DE               	iorwf	postinc2,w,c
  3585  004532  E014               	bz	u10020
  3586                           
  3587                           ; BSR set to: 0
  3588                           
  3589                           ; BSR set to: 0
  3590  004534  518C               	movf	(ldexp@value+3)& (0+255),w,b
  3591  004536  0B7F               	andlw	127
  3592  004538  6F8F               	movwf	??_ldexp& (0+255),b
  3593  00453A  90D8               	bcf	status,0,c
  3594  00453C  358F               	rlcf	??_ldexp& (0+255),w,b
  3595  00453E  6F90               	movwf	(??_ldexp+1)& (0+255),b
  3596  004540  6B91               	clrf	(??_ldexp+2)& (0+255),b
  3597  004542  3791               	rlcf	(??_ldexp+2)& (0+255),f,b
  3598  004544  5190               	movf	(??_ldexp+1)& (0+255),w,b
  3599  004546  278D               	addwf	ldexp@newexp& (0+255),f,b
  3600  004548  5191               	movf	(??_ldexp+2)& (0+255),w,b
  3601  00454A  238E               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3602  00454C  358B               	rlcf	(ldexp@value+2)& (0+255),w,b
  3603  00454E  36E8               	rlcf	wreg,f,c
  3604  004550  0B01               	andlw	1
  3605  004552  278D               	addwf	ldexp@newexp& (0+255),f,b
  3606  004554  0E00               	movlw	0
  3607  004556  238E               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3608                           
  3609                           ; BSR set to: 0
  3610  004558  AF8E               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3611  00455A  D005               	goto	l11258
  3612  00455C                     u10020:
  3613                           
  3614                           ; BSR set to: 0
  3615  00455C  6B89               	clrf	?_ldexp& (0+255),b
  3616  00455E  6B8A               	clrf	(?_ldexp+1)& (0+255),b
  3617  004560  6B8B               	clrf	(?_ldexp+2)& (0+255),b
  3618  004562  6B8C               	clrf	(?_ldexp+3)& (0+255),b
  3619  004564  D031               	goto	l1682
  3620  004566                     l11258:
  3621                           
  3622                           ; BSR set to: 0
  3623  004566  518E               	movf	(ldexp@newexp+1)& (0+255),w,b
  3624  004568  0A80               	xorlw	128
  3625  00456A  0F7F               	addlw	-129
  3626  00456C  0E00               	movlw	0
  3627  00456E  B4D8               	btfsc	status,2,c
  3628  004570  5D8D               	subwf	ldexp@newexp& (0+255),w,b
  3629  004572  E30E               	bnc	l11272
  3630                           
  3631                           ; BSR set to: 0
  3632  004574  AF8C               	btfss	(ldexp@value+3)& (0+255),7,b
  3633  004576  D006               	goto	l11268
  3634                           
  3635                           ; BSR set to: 0
  3636  004578  6989               	setf	?_ldexp& (0+255),b
  3637  00457A  698A               	setf	(?_ldexp+1)& (0+255),b
  3638  00457C  0E7F               	movlw	127
  3639  00457E  6F8B               	movwf	(?_ldexp+2)& (0+255),b
  3640  004580  0EFF               	movlw	255
  3641  004582  D004               	goto	L2
  3642  004584                     l11268:
  3643                           
  3644                           ; BSR set to: 0
  3645  004584  6989               	setf	?_ldexp& (0+255),b
  3646  004586  698A               	setf	(?_ldexp+1)& (0+255),b
  3647  004588  0E7F               	movlw	127
  3648  00458A  6F8B               	movwf	(?_ldexp+2)& (0+255),b
  3649  00458C                     L2:
  3650  00458C  6F8C               	movwf	(?_ldexp+3)& (0+255),b
  3651  00458E  D01C               	goto	l1682
  3652  004590                     l11272:
  3653                           
  3654                           ; BSR set to: 0
  3655  004590  358E               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3656  004592  318E               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3657  004594  6F90               	movwf	(??_ldexp+1)& (0+255),b
  3658  004596  318D               	rrcf	ldexp@newexp& (0+255),w,b
  3659  004598  6F8F               	movwf	??_ldexp& (0+255),b
  3660  00459A  198C               	xorwf	(ldexp@value+3)& (0+255),w,b
  3661  00459C  0B80               	andlw	-128
  3662  00459E  198F               	xorwf	??_ldexp& (0+255),w,b
  3663  0045A0  6F8C               	movwf	(ldexp@value+3)& (0+255),b
  3664  0045A2  C08D  F08F         	movff	ldexp@newexp,??_ldexp
  3665  0045A6  0E01               	movlw	1
  3666  0045A8  178F               	andwf	??_ldexp& (0+255),f,b
  3667  0045AA  338F               	rrcf	??_ldexp& (0+255),f,b
  3668  0045AC  338F               	rrcf	??_ldexp& (0+255),f,b
  3669  0045AE  518B               	movf	(ldexp@value+2)& (0+255),w,b
  3670  0045B0  198F               	xorwf	??_ldexp& (0+255),w,b
  3671  0045B2  0B7F               	andlw	-129
  3672  0045B4  198F               	xorwf	??_ldexp& (0+255),w,b
  3673  0045B6  6F8B               	movwf	(ldexp@value+2)& (0+255),b
  3674                           
  3675                           ; BSR set to: 0
  3676  0045B8  C089  F089         	movff	ldexp@value,?_ldexp
  3677  0045BC  C08A  F08A         	movff	ldexp@value+1,?_ldexp+1
  3678  0045C0  C08B  F08B         	movff	ldexp@value+2,?_ldexp+2
  3679  0045C4  C08C  F08C         	movff	ldexp@value+3,?_ldexp+3
  3680  0045C8                     l1682:
  3681                           
  3682                           ; BSR set to: 0
  3683  0045C8  0012               	return	
  3684  0045CA                     __end_of_ldexp:
  3685                           	opt stack 0
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           postinc0	equ	0xFEE
  3694                           wreg	equ	0xFE8
  3695                           indf1	equ	0xFE7
  3696                           postdec1	equ	0xFE5
  3697                           fsr1h	equ	0xFE2
  3698                           fsr1l	equ	0xFE1
  3699                           indf2	equ	0xFDF
  3700                           postinc2	equ	0xFDE
  3701                           postdec2	equ	0xFDD
  3702                           plusw2	equ	0xFDB
  3703                           fsr2h	equ	0xFDA
  3704                           fsr2l	equ	0xFD9
  3705                           status	equ	0xFD8
  3706                           
  3707 ;; *************** function _eval_poly *****************
  3708 ;; Defined at:
  3709 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;  x               4   30[BANK0 ] int 
  3712 ;;  d               1   34[BANK0 ] PTR const 
  3713 ;;		 -> log@coeff(36), exp@coeff(40), 
  3714 ;;  n               2   35[BANK0 ] int 
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;  res             4   37[BANK0 ] int 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  4   30[BANK0 ] int 
  3719 ;; Registers used:
  3720 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3721 ;; Tracked objects:
  3722 ;;		On entry : F/0
  3723 ;;		On exit  : F/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3726 ;;      Params:         0       7       0       0       0       0       0
  3727 ;;      Locals:         0       4       0       0       0       0       0
  3728 ;;      Temps:          1       0       0       0       0       0       0
  3729 ;;      Totals:         1      11       0       0       0       0       0
  3730 ;;Total ram usage:       12 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    4
  3733 ;; This function calls:
  3734 ;;		___fladd
  3735 ;;		___flmul
  3736 ;; This function is called by:
  3737 ;;		_exp
  3738 ;;		_log
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           	psect	text11
  3743  004260                     __ptext11:
  3744                           	opt stack 0
  3745  004260                     _eval_poly:
  3746                           	opt stack 24
  3747                           
  3748                           ; BSR set to: 0
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;incstack = 0
  3752                           ;incstack = 0
  3753  004260  5183               	movf	eval_poly@n& (0+255),w,b
  3754  004262  D84E               	call	PL38	;call to abstracted procedure
  3755  004264  CFF5 F085          	movff	tablat,eval_poly@res
  3756  004268  0009               	tblrd		*+
  3757  00426A  CFF5 F086          	movff	tablat,eval_poly@res+1
  3758  00426E  0009               	tblrd		*+
  3759  004270  CFF5 F087          	movff	tablat,eval_poly@res+2
  3760  004274  000A               	tblrd		*-
  3761  004276  CFF5 F088          	movff	tablat,eval_poly@res+3
  3762  00427A  D035               	goto	l11244
  3763  00427C                     l11242:
  3764                           
  3765                           ; BSR set to: 0
  3766  00427C  C085  F06C         	movff	eval_poly@res,?___flmul+4
  3767  004280  C086  F06D         	movff	eval_poly@res+1,?___flmul+5
  3768  004284  C087  F06E         	movff	eval_poly@res+2,?___flmul+6
  3769  004288  C088  F06F         	movff	eval_poly@res+3,?___flmul+7
  3770  00428C  C07E  F068         	movff	eval_poly@x,?___flmul
  3771  004290  C07F  F069         	movff	eval_poly@x+1,?___flmul+1
  3772  004294  C080  F06A         	movff	eval_poly@x+2,?___flmul+2
  3773  004298  C081  F06B         	movff	eval_poly@x+3,?___flmul+3
  3774  00429C  EC11  F020         	call	___flmul	;wreg free
  3775  0042A0  C06B  F021         	movff	?___flmul+3,?___fladd+3
  3776  0042A4  C06A  F020         	movff	?___flmul+2,?___fladd+2
  3777  0042A8  C069  F01F         	movff	?___flmul+1,?___fladd+1
  3778  0042AC  C068  F01E         	movff	?___flmul,?___fladd
  3779  0042B0  0100               	movlb	0	; () banked
  3780  0042B2  0783               	decf	eval_poly@n& (0+255),f,b
  3781  0042B4  A0D8               	btfss	status,0,c
  3782  0042B6  0784               	decf	(eval_poly@n+1)& (0+255),f,b
  3783  0042B8  5183               	movf	eval_poly@n& (0+255),w,b
  3784  0042BA  D822               	call	PL38	;call to abstracted procedure
  3785  0042BC  CFF5 F022          	movff	tablat,?___fladd+4
  3786  0042C0  0009               	tblrd		*+
  3787  0042C2  CFF5 F023          	movff	tablat,?___fladd+5
  3788  0042C6  0009               	tblrd		*+
  3789  0042C8  CFF5 F024          	movff	tablat,?___fladd+6
  3790  0042CC  000A               	tblrd		*-
  3791  0042CE  CFF5 F025          	movff	tablat,?___fladd+7
  3792  0042D2  ECD0  F01B         	call	___fladd	;wreg free
  3793  0042D6  C021  F088         	movff	?___fladd+3,eval_poly@res+3
  3794  0042DA  C020  F087         	movff	?___fladd+2,eval_poly@res+2
  3795  0042DE  C01F  F086         	movff	?___fladd+1,eval_poly@res+1
  3796  0042E2  C01E  F085         	movff	?___fladd,eval_poly@res
  3797  0042E6                     l11244:
  3798  0042E6  0100               	movlb	0	; () banked
  3799  0042E8  5184               	movf	(eval_poly@n+1)& (0+255),w,b
  3800  0042EA  1183               	iorwf	eval_poly@n& (0+255),w,b
  3801  0042EC  E1C7               	bnz	l11242
  3802                           
  3803                           ; BSR set to: 0
  3804  0042EE  C085  F07E         	movff	eval_poly@res,?_eval_poly
  3805  0042F2  C086  F07F         	movff	eval_poly@res+1,?_eval_poly+1
  3806  0042F6  C087  F080         	movff	eval_poly@res+2,?_eval_poly+2
  3807  0042FA  C088  F081         	movff	eval_poly@res+3,?_eval_poly+3
  3808                           
  3809                           ; BSR set to: 0
  3810  0042FE  0012               	return	
  3811  004300                     __end_of_eval_poly:
  3812                           	opt stack 0
  3813  004300                     PL38:
  3814                           	opt stack 24
  3815  004300  0D04               	mullw	4
  3816  004302  5182               	movf	eval_poly@d& (0+255),w,b
  3817  004304  24F3               	addwf	prodl,w,c
  3818  004306  6E43               	movwf	??_eval_poly& (0+255),c
  3819  004308  C043  FFF6         	movff	??_eval_poly,tblptrl
  3820  00430C  0E06               	movlw	high __smallconst
  3821  00430E  6EF7               	movwf	tblptrh,c
  3822  004310  0009               	tblrd		*+
  3823  004312  0012               	return	
  3824  004314                     __end_ofPL38:
  3825                           	opt stack 0
  3826                           tblptru	equ	0xFF8
  3827                           tblptrh	equ	0xFF7
  3828                           tblptrl	equ	0xFF6
  3829                           tablat	equ	0xFF5
  3830                           prodh	equ	0xFF4
  3831                           prodl	equ	0xFF3
  3832                           intcon	equ	0xFF2
  3833                           postinc0	equ	0xFEE
  3834                           wreg	equ	0xFE8
  3835                           indf1	equ	0xFE7
  3836                           postdec1	equ	0xFE5
  3837                           fsr1h	equ	0xFE2
  3838                           fsr1l	equ	0xFE1
  3839                           indf2	equ	0xFDF
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           plusw2	equ	0xFDB
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _floor *****************
  3848 ;; Defined at:
  3849 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  x               4   56[BANK0 ] int 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;  i               4   60[BANK0 ] int 
  3854 ;;  expon           2   64[BANK0 ] int 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  4   56[BANK0 ] int 
  3857 ;; Registers used:
  3858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3859 ;; Tracked objects:
  3860 ;;		On entry : F/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3864 ;;      Params:         0       4       0       0       0       0       0
  3865 ;;      Locals:         0       6       0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0
  3867 ;;      Totals:         0      10       0       0       0       0       0
  3868 ;;Total ram usage:       10 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; Hardware stack levels required when called:    4
  3871 ;; This function calls:
  3872 ;;		___altofl
  3873 ;;		___fladd
  3874 ;;		___flge
  3875 ;;		_frexp
  3876 ;;		___fltol
  3877 ;; This function is called by:
  3878 ;;		_exp
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text12
  3883  003D60                     __ptext12:
  3884                           	opt stack 0
  3885  003D60                     _floor:
  3886                           	opt stack 24
  3887                           
  3888                           ; BSR set to: 0
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;incstack = 0
  3892                           ;incstack = 0
  3893  003D60  C098  F00E         	movff	floor@x,?_frexp
  3894  003D64  C099  F00F         	movff	floor@x+1,?_frexp+1
  3895  003D68  C09A  F010         	movff	floor@x+2,?_frexp+2
  3896  003D6C  C09B  F011         	movff	floor@x+3,?_frexp+3
  3897  003D70  0E00               	movlw	high floor@expon
  3898  003D72  6E13               	movwf	?_frexp+5,c
  3899  003D74  0EA0               	movlw	low floor@expon
  3900  003D76  6E12               	movwf	?_frexp+4,c
  3901  003D78  EC86  F023         	call	_frexp	;wreg free
  3902                           
  3903                           ; BSR set to: 0
  3904  003D7C  AFA1               	btfss	(floor@expon+1)& (0+255),7,b
  3905  003D7E  D00F               	goto	l11230
  3906                           
  3907                           ; BSR set to: 0
  3908  003D80  AF9B               	btfss	(floor@x+3)& (0+255),7,b
  3909  003D82  D008               	goto	l1650
  3910                           
  3911                           ; BSR set to: 0
  3912  003D84  0E00               	movlw	0
  3913  003D86  6F98               	movwf	?_floor& (0+255),b
  3914  003D88  6F99               	movwf	(?_floor+1)& (0+255),b
  3915  003D8A  0E80               	movlw	128
  3916  003D8C  6F9A               	movwf	(?_floor+2)& (0+255),b
  3917  003D8E  0EBF               	movlw	191
  3918  003D90  6F9B               	movwf	(?_floor+3)& (0+255),b
  3919  003D92  D063               	goto	l1651
  3920  003D94                     l1650:
  3921                           
  3922                           ; BSR set to: 0
  3923  003D94  6B98               	clrf	?_floor& (0+255),b
  3924  003D96  6B99               	clrf	(?_floor+1)& (0+255),b
  3925  003D98  6B9A               	clrf	(?_floor+2)& (0+255),b
  3926  003D9A  6B9B               	clrf	(?_floor+3)& (0+255),b
  3927  003D9C  D05E               	goto	l1651
  3928  003D9E                     l11230:
  3929                           
  3930                           ; BSR set to: 0
  3931  003D9E  0E1D               	movlw	29
  3932  003DA0  5DA0               	subwf	floor@expon& (0+255),w,b
  3933  003DA2  0E00               	movlw	0
  3934  003DA4  59A1               	subwfb	(floor@expon+1)& (0+255),w,b
  3935  003DA6  E309               	bnc	l11234
  3936                           
  3937                           ; BSR set to: 0
  3938  003DA8  C098  F098         	movff	floor@x,?_floor
  3939  003DAC  C099  F099         	movff	floor@x+1,?_floor+1
  3940  003DB0  C09A  F09A         	movff	floor@x+2,?_floor+2
  3941  003DB4  C09B  F09B         	movff	floor@x+3,?_floor+3
  3942  003DB8  D050               	goto	l1651
  3943  003DBA                     l11234:
  3944                           
  3945                           ; BSR set to: 0
  3946  003DBA  C098  F07E         	movff	floor@x,?___fltol
  3947  003DBE  C099  F07F         	movff	floor@x+1,?___fltol+1
  3948  003DC2  C09A  F080         	movff	floor@x+2,?___fltol+2
  3949  003DC6  C09B  F081         	movff	floor@x+3,?___fltol+3
  3950  003DCA  ECE5  F022         	call	___fltol	;wreg free
  3951  003DCE  C081  F097         	movff	?___fltol+3,?___altofl+3
  3952  003DD2  C080  F096         	movff	?___fltol+2,?___altofl+2
  3953  003DD6  C07F  F095         	movff	?___fltol+1,?___altofl+1
  3954  003DDA  C07E  F094         	movff	?___fltol,?___altofl
  3955  003DDE  EC01  F026         	call	___altofl	;wreg free
  3956  003DE2  C097  F09F         	movff	?___altofl+3,floor@i+3
  3957  003DE6  C096  F09E         	movff	?___altofl+2,floor@i+2
  3958  003DEA  C095  F09D         	movff	?___altofl+1,floor@i+1
  3959  003DEE  C094  F09C         	movff	?___altofl,floor@i
  3960  003DF2  C098  F00E         	movff	floor@x,?___flge
  3961  003DF6  C099  F00F         	movff	floor@x+1,?___flge+1
  3962  003DFA  C09A  F010         	movff	floor@x+2,?___flge+2
  3963  003DFE  C09B  F011         	movff	floor@x+3,?___flge+3
  3964  003E02  C09C  F012         	movff	floor@i,?___flge+4
  3965  003E06  C09D  F013         	movff	floor@i+1,?___flge+5
  3966  003E0A  C09E  F014         	movff	floor@i+2,?___flge+6
  3967  003E0E  C09F  F015         	movff	floor@i+3,?___flge+7
  3968  003E12  EC47  F025         	call	___flge	;wreg free
  3969  003E16  E219               	bc	l1653
  3970  003E18  C09C  F01E         	movff	floor@i,?___fladd
  3971  003E1C  C09D  F01F         	movff	floor@i+1,?___fladd+1
  3972  003E20  C09E  F020         	movff	floor@i+2,?___fladd+2
  3973  003E24  C09F  F021         	movff	floor@i+3,?___fladd+3
  3974  003E28  6A22               	clrf	?___fladd+4,c
  3975  003E2A  6A23               	clrf	?___fladd+5,c
  3976  003E2C  0E80               	movlw	128
  3977  003E2E  6E24               	movwf	?___fladd+6,c
  3978  003E30  0EBF               	movlw	191
  3979  003E32  6E25               	movwf	?___fladd+7,c
  3980  003E34  ECD0  F01B         	call	___fladd	;wreg free
  3981  003E38  C021  F09B         	movff	?___fladd+3,?_floor+3
  3982  003E3C  C020  F09A         	movff	?___fladd+2,?_floor+2
  3983  003E40  C01F  F099         	movff	?___fladd+1,?_floor+1
  3984  003E44  C01E  F098         	movff	?___fladd,?_floor
  3985  003E48  D008               	goto	l1651
  3986  003E4A                     l1653:
  3987  003E4A  C09C  F098         	movff	floor@i,?_floor
  3988  003E4E  C09D  F099         	movff	floor@i+1,?_floor+1
  3989  003E52  C09E  F09A         	movff	floor@i+2,?_floor+2
  3990  003E56  C09F  F09B         	movff	floor@i+3,?_floor+3
  3991  003E5A                     l1651:
  3992  003E5A  0012               	return	
  3993  003E5C                     __end_of_floor:
  3994                           	opt stack 0
  3995                           tblptru	equ	0xFF8
  3996                           tblptrh	equ	0xFF7
  3997                           tblptrl	equ	0xFF6
  3998                           tablat	equ	0xFF5
  3999                           prodh	equ	0xFF4
  4000                           prodl	equ	0xFF3
  4001                           intcon	equ	0xFF2
  4002                           postinc0	equ	0xFEE
  4003                           wreg	equ	0xFE8
  4004                           indf1	equ	0xFE7
  4005                           postdec1	equ	0xFE5
  4006                           fsr1h	equ	0xFE2
  4007                           fsr1l	equ	0xFE1
  4008                           indf2	equ	0xFDF
  4009                           postinc2	equ	0xFDE
  4010                           postdec2	equ	0xFDD
  4011                           plusw2	equ	0xFDB
  4012                           fsr2h	equ	0xFDA
  4013                           fsr2l	equ	0xFD9
  4014                           status	equ	0xFD8
  4015                           
  4016 ;; *************** function ___fltol *****************
  4017 ;; Defined at:
  4018 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  f1              4   30[BANK0 ] int 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  exp1            1   67[COMRAM] unsigned char 
  4023 ;;  sign1           1   66[COMRAM] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  4   30[BANK0 ] long 
  4026 ;; Registers used:
  4027 ;;		wreg, status,2, status,0
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : F/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4033 ;;      Params:         0       4       0       0       0       0       0
  4034 ;;      Locals:         2       0       0       0       0       0       0
  4035 ;;      Temps:          0       4       0       0       0       0       0
  4036 ;;      Totals:         2       8       0       0       0       0       0
  4037 ;;Total ram usage:       10 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    2
  4040 ;; This function calls:
  4041 ;;		Nothing
  4042 ;; This function is called by:
  4043 ;;		_doWork
  4044 ;;		_setEventData
  4045 ;;		_exp
  4046 ;;		_floor
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           	psect	text13
  4051  0045CA                     __ptext13:
  4052                           	opt stack 0
  4053  0045CA                     ___fltol:
  4054                           	opt stack 27
  4055                           
  4056                           ;incstack = 0
  4057                           ;incstack = 0
  4058  0045CA  0100               	movlb	0	; () banked
  4059  0045CC  3580               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4060  0045CE  3581               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4061  0045D0  6E44               	movwf	___fltol@exp1,c
  4062  0045D2  6644               	tstfsz	___fltol@exp1& (0+255),c
  4063  0045D4  D006               	goto	l11324
  4064  0045D6                     l11322:
  4065  0045D6  0100               	movlb	0	; () banked
  4066  0045D8  6B7E               	clrf	?___fltol& (0+255),b
  4067  0045DA  6B7F               	clrf	(?___fltol+1)& (0+255),b
  4068  0045DC  6B80               	clrf	(?___fltol+2)& (0+255),b
  4069  0045DE  6B81               	clrf	(?___fltol+3)& (0+255),b
  4070  0045E0  D044               	goto	l1662
  4071  0045E2                     l11324:
  4072  0045E2  0100               	movlb	0	; () banked
  4073  0045E4  C07E  F082         	movff	___fltol@f1,??___fltol
  4074  0045E8  C07F  F083         	movff	___fltol@f1+1,??___fltol+1
  4075  0045EC  C080  F084         	movff	___fltol@f1+2,??___fltol+2
  4076  0045F0  C081  F085         	movff	___fltol@f1+3,??___fltol+3
  4077  0045F4  0E20               	movlw	32
  4078  0045F6  D005               	goto	u10110
  4079  0045F8                     u10115:
  4080  0045F8  90D8               	bcf	status,0,c
  4081  0045FA  3385               	rrcf	(??___fltol+3)& (0+255),f,b
  4082  0045FC  3384               	rrcf	(??___fltol+2)& (0+255),f,b
  4083  0045FE  3383               	rrcf	(??___fltol+1)& (0+255),f,b
  4084  004600  3382               	rrcf	??___fltol& (0+255),f,b
  4085  004602                     u10110:
  4086  004602  2EE8               	decfsz	wreg,f,c
  4087  004604  D7F9               	goto	u10115
  4088  004606  5182               	movf	??___fltol& (0+255),w,b
  4089  004608  6E43               	movwf	___fltol@sign1,c
  4090                           
  4091                           ; BSR set to: 0
  4092  00460A  8F80               	bsf	(___fltol@f1+2)& (0+255),7,b
  4093                           
  4094                           ; BSR set to: 0
  4095  00460C  6B81               	clrf	(___fltol@f1+3)& (0+255),b
  4096                           
  4097                           ; BSR set to: 0
  4098  00460E  0E96               	movlw	150
  4099  004610  5E44               	subwf	___fltol@exp1,f,c
  4100                           
  4101                           ; BSR set to: 0
  4102  004612  AE44               	btfss	___fltol@exp1,7,c
  4103  004614  D00C               	goto	l11342
  4104                           
  4105                           ; BSR set to: 0
  4106  004616  5044               	movf	___fltol@exp1,w,c
  4107  004618  0A80               	xorlw	128
  4108  00461A  0F97               	addlw	151
  4109  00461C  E3DC               	bnc	l11322
  4110  00461E                     l11338:
  4111                           
  4112                           ; BSR set to: 0
  4113  00461E  90D8               	bcf	status,0,c
  4114  004620  3381               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4115  004622  3380               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4116  004624  337F               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4117  004626  337E               	rrcf	___fltol@f1& (0+255),f,b
  4118                           
  4119                           ; BSR set to: 0
  4120  004628  3E44               	incfsz	___fltol@exp1,f,c
  4121  00462A  D7F9               	goto	l11338
  4122  00462C  D00C               	goto	l11350
  4123  00462E                     l11342:
  4124                           
  4125                           ; BSR set to: 0
  4126  00462E  0E1F               	movlw	31
  4127  004630  6444               	cpfsgt	___fltol@exp1,c
  4128  004632  D007               	goto	l11348
  4129  004634  D7D0               	goto	l11322
  4130  004636                     l11346:
  4131                           
  4132                           ; BSR set to: 0
  4133  004636  90D8               	bcf	status,0,c
  4134  004638  377E               	rlcf	___fltol@f1& (0+255),f,b
  4135  00463A  377F               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4136  00463C  3780               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4137  00463E  3781               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4138  004640  0644               	decf	___fltol@exp1,f,c
  4139  004642                     l11348:
  4140                           
  4141                           ; BSR set to: 0
  4142  004642  6644               	tstfsz	___fltol@exp1,c
  4143  004644  D7F8               	goto	l11346
  4144  004646                     l11350:
  4145                           
  4146                           ; BSR set to: 0
  4147  004646  5043               	movf	___fltol@sign1,w,c
  4148  004648  E008               	bz	l11354
  4149                           
  4150                           ; BSR set to: 0
  4151  00464A  1F81               	comf	(___fltol@f1+3)& (0+255),f,b
  4152  00464C  1F80               	comf	(___fltol@f1+2)& (0+255),f,b
  4153  00464E  1F7F               	comf	(___fltol@f1+1)& (0+255),f,b
  4154  004650  6D7E               	negf	___fltol@f1& (0+255),b
  4155  004652  0E00               	movlw	0
  4156  004654  237F               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4157  004656  2380               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4158  004658  2381               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4159  00465A                     l11354:
  4160                           
  4161                           ; BSR set to: 0
  4162  00465A  C07E  F07E         	movff	___fltol@f1,?___fltol
  4163  00465E  C07F  F07F         	movff	___fltol@f1+1,?___fltol+1
  4164  004662  C080  F080         	movff	___fltol@f1+2,?___fltol+2
  4165  004666  C081  F081         	movff	___fltol@f1+3,?___fltol+3
  4166  00466A                     l1662:
  4167                           
  4168                           ; BSR set to: 0
  4169  00466A  0012               	return	
  4170  00466C                     __end_of___fltol:
  4171                           	opt stack 0
  4172                           tblptru	equ	0xFF8
  4173                           tblptrh	equ	0xFF7
  4174                           tblptrl	equ	0xFF6
  4175                           tablat	equ	0xFF5
  4176                           prodh	equ	0xFF4
  4177                           prodl	equ	0xFF3
  4178                           intcon	equ	0xFF2
  4179                           postinc0	equ	0xFEE
  4180                           wreg	equ	0xFE8
  4181                           indf1	equ	0xFE7
  4182                           postdec1	equ	0xFE5
  4183                           fsr1h	equ	0xFE2
  4184                           fsr1l	equ	0xFE1
  4185                           indf2	equ	0xFDF
  4186                           postinc2	equ	0xFDE
  4187                           postdec2	equ	0xFDD
  4188                           plusw2	equ	0xFDB
  4189                           fsr2h	equ	0xFDA
  4190                           fsr2l	equ	0xFD9
  4191                           status	equ	0xFD8
  4192                           
  4193 ;; *************** function _frexp *****************
  4194 ;; Defined at:
  4195 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  value           4   13[COMRAM] long 
  4198 ;;  eptr            2   17[COMRAM] PTR int 
  4199 ;;		 -> log@exponent(2), floor@expon(2), 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  4   13[COMRAM] PTR int 
  4204 ;; Registers used:
  4205 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4206 ;; Tracked objects:
  4207 ;;		On entry : F/0
  4208 ;;		On exit  : F/0
  4209 ;;		Unchanged: F/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4211 ;;      Params:         6       0       0       0       0       0       0
  4212 ;;      Locals:         0       0       0       0       0       0       0
  4213 ;;      Temps:          3       0       0       0       0       0       0
  4214 ;;      Totals:         9       0       0       0       0       0       0
  4215 ;;Total ram usage:        9 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    2
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_floor
  4222 ;;		_log
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           	psect	text14
  4227  00470C                     __ptext14:
  4228                           	opt stack 0
  4229  00470C                     _frexp:
  4230                           	opt stack 26
  4231                           
  4232                           ; BSR set to: 0
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;incstack = 0
  4236                           ;incstack = 0
  4237  00470C  EE20  F00E         	lfsr	2,frexp@value
  4238  004710  50DE               	movf	postinc2,w,c
  4239  004712  10DE               	iorwf	postinc2,w,c
  4240  004714  10DE               	iorwf	postinc2,w,c
  4241  004716  10DE               	iorwf	postinc2,w,c
  4242  004718  E10C               	bnz	l11308
  4243                           
  4244                           ; BSR set to: 0
  4245  00471A  C012  FFD9         	movff	frexp@eptr,fsr2l
  4246  00471E  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4247  004722  0E00               	movlw	0
  4248  004724  6ADE               	clrf	postinc2,c
  4249  004726  6ADD               	clrf	postdec2,c
  4250                           
  4251                           ; BSR set to: 0
  4252  004728  6A0E               	clrf	?_frexp,c
  4253  00472A  6A0F               	clrf	?_frexp+1,c
  4254  00472C  6A10               	clrf	?_frexp+2,c
  4255  00472E  6A11               	clrf	?_frexp+3,c
  4256  004730  D02F               	goto	l1678
  4257  004732                     l11308:
  4258                           
  4259                           ; BSR set to: 0
  4260  004732  5011               	movf	frexp@value+3,w,c
  4261  004734  0B7F               	andlw	127
  4262  004736  6E14               	movwf	??_frexp& (0+255),c
  4263  004738  90D8               	bcf	status,0,c
  4264  00473A  3414               	rlcf	??_frexp,w,c
  4265  00473C  6E15               	movwf	(??_frexp+1)& (0+255),c
  4266  00473E  6A16               	clrf	(??_frexp+2)& (0+255),c
  4267  004740  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  4268  004742  C012  FFD9         	movff	frexp@eptr,fsr2l
  4269  004746  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4270  00474A  C015  FFDE         	movff	??_frexp+1,postinc2
  4271  00474E  C016  FFDD         	movff	??_frexp+2,postdec2
  4272  004752  3410               	rlcf	frexp@value+2,w,c
  4273  004754  36E8               	rlcf	wreg,f,c
  4274  004756  0B01               	andlw	1
  4275  004758  C012  FFD9         	movff	frexp@eptr,fsr2l
  4276  00475C  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4277  004760  12DE               	iorwf	postinc2,f,c
  4278  004762  0E00               	movlw	0
  4279  004764  12DD               	iorwf	postdec2,f,c
  4280                           
  4281                           ; BSR set to: 0
  4282  004766  C012  FFD9         	movff	frexp@eptr,fsr2l
  4283  00476A  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4284  00476E  0E82               	movlw	130
  4285  004770  26DE               	addwf	postinc2,f,c
  4286  004772  0EFF               	movlw	255
  4287  004774  22DD               	addwfc	postdec2,f,c
  4288                           
  4289                           ; BSR set to: 0
  4290  004776  5011               	movf	frexp@value+3,w,c
  4291  004778  0B80               	andlw	-128
  4292  00477A  093F               	iorlw	63
  4293  00477C  6E11               	movwf	frexp@value+3,c
  4294                           
  4295                           ; BSR set to: 0
  4296  00477E  9E10               	bcf	frexp@value+2,7,c
  4297                           
  4298                           ; BSR set to: 0
  4299  004780  C00E  F00E         	movff	frexp@value,?_frexp
  4300  004784  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4301  004788  C010  F010         	movff	frexp@value+2,?_frexp+2
  4302  00478C  C011  F011         	movff	frexp@value+3,?_frexp+3
  4303  004790                     l1678:
  4304                           
  4305                           ; BSR set to: 0
  4306  004790  0012               	return	
  4307  004792                     __end_of_frexp:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           prodh	equ	0xFF4
  4314                           prodl	equ	0xFF3
  4315                           intcon	equ	0xFF2
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           indf1	equ	0xFE7
  4319                           postdec1	equ	0xFE5
  4320                           fsr1h	equ	0xFE2
  4321                           fsr1l	equ	0xFE1
  4322                           indf2	equ	0xFDF
  4323                           postinc2	equ	0xFDE
  4324                           postdec2	equ	0xFDD
  4325                           plusw2	equ	0xFDB
  4326                           fsr2h	equ	0xFDA
  4327                           fsr2l	equ	0xFD9
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function ___flge *****************
  4331 ;; Defined at:
  4332 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  ff1             4   13[COMRAM] PTR int 
  4335 ;;  ff2             4   17[COMRAM] PTR int 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;		None
  4338 ;; Return value:  Size  Location     Type
  4339 ;;		None               void
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4347 ;;      Params:         8       0       0       0       0       0       0
  4348 ;;      Locals:         0       0       0       0       0       0       0
  4349 ;;      Temps:          0       0       0       0       0       0       0
  4350 ;;      Totals:         8       0       0       0       0       0       0
  4351 ;;Total ram usage:        8 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    2
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_exp
  4358 ;;		_floor
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text15
  4363  004A8E                     __ptext15:
  4364                           	opt stack 0
  4365  004A8E                     ___flge:
  4366                           	opt stack 26
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;incstack = 0
  4370                           ;incstack = 0
  4371  004A8E  AE11               	btfss	___flge@ff1+3,7,c
  4372  004A90  D009               	goto	l11282
  4373  004A92  6C0E               	negf	___flge@ff1,c
  4374  004A94  1E0F               	comf	___flge@ff1+1,f,c
  4375  004A96  B0D8               	btfsc	status,0,c
  4376  004A98  2A0F               	incf	___flge@ff1+1,f,c
  4377  004A9A  1E10               	comf	___flge@ff1+2,f,c
  4378  004A9C  B0D8               	btfsc	status,0,c
  4379  004A9E  2A10               	incf	___flge@ff1+2,f,c
  4380  004AA0  0E80               	movlw	128
  4381  004AA2  5611               	subfwb	___flge@ff1+3,f,c
  4382  004AA4                     l11282:
  4383  004AA4  AE15               	btfss	___flge@ff2+3,7,c
  4384  004AA6  D009               	goto	l1609
  4385  004AA8  6C12               	negf	___flge@ff2,c
  4386  004AAA  1E13               	comf	___flge@ff2+1,f,c
  4387  004AAC  B0D8               	btfsc	status,0,c
  4388  004AAE  2A13               	incf	___flge@ff2+1,f,c
  4389  004AB0  1E14               	comf	___flge@ff2+2,f,c
  4390  004AB2  B0D8               	btfsc	status,0,c
  4391  004AB4  2A14               	incf	___flge@ff2+2,f,c
  4392  004AB6  0E80               	movlw	128
  4393  004AB8  5615               	subfwb	___flge@ff2+3,f,c
  4394  004ABA                     l1609:
  4395  004ABA  0E80               	movlw	128
  4396  004ABC  1A11               	xorwf	___flge@ff1+3,f,c
  4397  004ABE  1A15               	xorwf	___flge@ff2+3,f,c
  4398  004AC0  5012               	movf	___flge@ff2,w,c
  4399  004AC2  5C0E               	subwf	___flge@ff1,w,c
  4400  004AC4  5013               	movf	___flge@ff2+1,w,c
  4401  004AC6  580F               	subwfb	___flge@ff1+1,w,c
  4402  004AC8  5014               	movf	___flge@ff2+2,w,c
  4403  004ACA  5810               	subwfb	___flge@ff1+2,w,c
  4404  004ACC  5015               	movf	___flge@ff2+3,w,c
  4405  004ACE  5811               	subwfb	___flge@ff1+3,w,c
  4406  004AD0  E202               	bc	l11288
  4407  004AD2  90D8               	bcf	status,0,c
  4408  004AD4  D001               	goto	l1610
  4409  004AD6                     l11288:
  4410  004AD6  80D8               	bsf	status,0,c
  4411  004AD8                     l1610:
  4412  004AD8  0012               	return	
  4413  004ADA                     __end_of___flge:
  4414                           	opt stack 0
  4415                           tblptru	equ	0xFF8
  4416                           tblptrh	equ	0xFF7
  4417                           tblptrl	equ	0xFF6
  4418                           tablat	equ	0xFF5
  4419                           prodh	equ	0xFF4
  4420                           prodl	equ	0xFF3
  4421                           intcon	equ	0xFF2
  4422                           postinc0	equ	0xFEE
  4423                           wreg	equ	0xFE8
  4424                           indf1	equ	0xFE7
  4425                           postdec1	equ	0xFE5
  4426                           fsr1h	equ	0xFE2
  4427                           fsr1l	equ	0xFE1
  4428                           indf2	equ	0xFDF
  4429                           postinc2	equ	0xFDE
  4430                           postdec2	equ	0xFDD
  4431                           plusw2	equ	0xFDB
  4432                           fsr2h	equ	0xFDA
  4433                           fsr2l	equ	0xFD9
  4434                           status	equ	0xFD8
  4435                           
  4436 ;; *************** function ___altofl *****************
  4437 ;; Defined at:
  4438 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;  c               4   52[BANK0 ] long 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  sign            1   68[COMRAM] unsigned char 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  4   52[BANK0 ] unsigned char 
  4445 ;; Registers used:
  4446 ;;		wreg, status,2, status,0, cstack
  4447 ;; Tracked objects:
  4448 ;;		On entry : F/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4452 ;;      Params:         0       4       0       0       0       0       0
  4453 ;;      Locals:         1       0       0       0       0       0       0
  4454 ;;      Temps:          0       0       0       0       0       0       0
  4455 ;;      Totals:         1       4       0       0       0       0       0
  4456 ;;Total ram usage:        5 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    3
  4459 ;; This function calls:
  4460 ;;		___flpack
  4461 ;; This function is called by:
  4462 ;;		_doWork
  4463 ;;		_floor
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text16
  4468  004C02                     __ptext16:
  4469                           	opt stack 0
  4470  004C02                     ___altofl:
  4471                           	opt stack 26
  4472                           
  4473                           ; BSR set to: 0
  4474                           
  4475                           ;incstack = 0
  4476                           ;incstack = 0
  4477  004C02  6A45               	clrf	___altofl@sign,c
  4478  004C04  AF97               	btfss	(___altofl@c+3)& (0+255),7,b
  4479  004C06  D00A               	goto	l11036
  4480                           
  4481                           ; BSR set to: 0
  4482  004C08  1F97               	comf	(___altofl@c+3)& (0+255),f,b
  4483  004C0A  1F96               	comf	(___altofl@c+2)& (0+255),f,b
  4484  004C0C  1F95               	comf	(___altofl@c+1)& (0+255),f,b
  4485  004C0E  6D94               	negf	___altofl@c& (0+255),b
  4486  004C10  0E00               	movlw	0
  4487  004C12  2395               	addwfc	(___altofl@c+1)& (0+255),f,b
  4488  004C14  2396               	addwfc	(___altofl@c+2)& (0+255),f,b
  4489  004C16  2397               	addwfc	(___altofl@c+3)& (0+255),f,b
  4490                           
  4491                           ; BSR set to: 0
  4492  004C18  0E01               	movlw	1
  4493  004C1A  6E45               	movwf	___altofl@sign,c
  4494  004C1C                     l11036:
  4495                           
  4496                           ; BSR set to: 0
  4497  004C1C  C094  F00E         	movff	___altofl@c,?___flpack
  4498  004C20  C095  F00F         	movff	___altofl@c+1,?___flpack+1
  4499  004C24  C096  F010         	movff	___altofl@c+2,?___flpack+2
  4500  004C28  C097  F011         	movff	___altofl@c+3,?___flpack+3
  4501  004C2C  0E96               	movlw	150
  4502  004C2E  6E12               	movwf	?___flpack+4,c
  4503  004C30  C045  F013         	movff	___altofl@sign,?___flpack+5
  4504  004C34  ECD2  F020         	call	___flpack	;wreg free
  4505  004C38  C011  F097         	movff	?___flpack+3,?___altofl+3
  4506  004C3C  C010  F096         	movff	?___flpack+2,?___altofl+2
  4507  004C40  C00F  F095         	movff	?___flpack+1,?___altofl+1
  4508  004C44  C00E  F094         	movff	?___flpack,?___altofl
  4509  004C48  0012               	return	
  4510  004C4A                     __end_of___altofl:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           prodh	equ	0xFF4
  4517                           prodl	equ	0xFF3
  4518                           intcon	equ	0xFF2
  4519                           postinc0	equ	0xFEE
  4520                           wreg	equ	0xFE8
  4521                           indf1	equ	0xFE7
  4522                           postdec1	equ	0xFE5
  4523                           fsr1h	equ	0xFE2
  4524                           fsr1l	equ	0xFE1
  4525                           indf2	equ	0xFDF
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           plusw2	equ	0xFDB
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function ___asflsub *****************
  4534 ;; Defined at:
  4535 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  f1p             2   52[COMRAM] PTR 
  4538 ;;		 -> exp@x(4), doWork@temp(4), 
  4539 ;;  f2              4   54[COMRAM] PTR 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  4   52[COMRAM] PTR 
  4544 ;; Registers used:
  4545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/1
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4551 ;;      Params:         6       0       0       0       0       0       0
  4552 ;;      Locals:         0       0       0       0       0       0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0
  4554 ;;      Totals:         6       0       0       0       0       0       0
  4555 ;;Total ram usage:        6 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    5
  4558 ;; This function calls:
  4559 ;;		___flsub
  4560 ;; This function is called by:
  4561 ;;		_doWork
  4562 ;;		_exp
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text17
  4567  004B70                     __ptext17:
  4568                           	opt stack 0
  4569  004B70                     ___asflsub:
  4570                           	opt stack 24
  4571                           
  4572                           ;	Return value of ___asflsub is never used
  4573                           
  4574                           ;incstack = 0
  4575                           ;incstack = 0
  4576  004B70  C035  FFD9         	movff	___asflsub@f1p,fsr2l
  4577  004B74  C036  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4578  004B78  CFDE F02D          	movff	postinc2,?___flsub
  4579  004B7C  CFDE F02E          	movff	postinc2,?___flsub+1
  4580  004B80  CFDE F02F          	movff	postinc2,?___flsub+2
  4581  004B84  CFDE F030          	movff	postinc2,?___flsub+3
  4582  004B88  C037  F031         	movff	___asflsub@f2,?___flsub+4
  4583  004B8C  C038  F032         	movff	___asflsub@f2+1,?___flsub+5
  4584  004B90  C039  F033         	movff	___asflsub@f2+2,?___flsub+6
  4585  004B94  C03A  F034         	movff	___asflsub@f2+3,?___flsub+7
  4586  004B98  ECAC  F026         	call	___flsub	;wreg free
  4587  004B9C  C035  FFD9         	movff	___asflsub@f1p,fsr2l
  4588  004BA0  C036  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4589  004BA4  C02D  FFDE         	movff	?___flsub,postinc2
  4590  004BA8  C02E  FFDE         	movff	?___flsub+1,postinc2
  4591  004BAC  C02F  FFDE         	movff	?___flsub+2,postinc2
  4592  004BB0  C030  FFDD         	movff	?___flsub+3,postdec2
  4593  004BB4  06D9               	decf	fsr2l,f,c
  4594  004BB6  06D9               	decf	fsr2l,f,c
  4595  004BB8  0012               	return	
  4596  004BBA                     __end_of___asflsub:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           indf1	equ	0xFE7
  4608                           postdec1	equ	0xFE5
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           plusw2	equ	0xFDB
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function ___flsub *****************
  4620 ;; Defined at:
  4621 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;  f1              4   44[COMRAM] PTR 
  4624 ;;  f2              4   48[COMRAM] PTR 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;                  4   44[COMRAM] PTR 
  4629 ;; Registers used:
  4630 ;;		wreg, status,2, status,0, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4636 ;;      Params:         8       0       0       0       0       0       0
  4637 ;;      Locals:         0       0       0       0       0       0       0
  4638 ;;      Temps:          0       0       0       0       0       0       0
  4639 ;;      Totals:         8       0       0       0       0       0       0
  4640 ;;Total ram usage:        8 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    4
  4643 ;; This function calls:
  4644 ;;		___fladd
  4645 ;; This function is called by:
  4646 ;;		_doWork
  4647 ;;		___asflsub
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           	psect	text18
  4652  004D58                     __ptext18:
  4653                           	opt stack 0
  4654  004D58                     ___flsub:
  4655                           	opt stack 25
  4656                           
  4657                           ;incstack = 0
  4658                           ;incstack = 0
  4659  004D58  0E80               	movlw	128
  4660  004D5A  1A34               	xorwf	___flsub@f2+3,f,c
  4661  004D5C  C02D  F01E         	movff	___flsub@f1,?___fladd
  4662  004D60  C02E  F01F         	movff	___flsub@f1+1,?___fladd+1
  4663  004D64  C02F  F020         	movff	___flsub@f1+2,?___fladd+2
  4664  004D68  C030  F021         	movff	___flsub@f1+3,?___fladd+3
  4665  004D6C  C031  F022         	movff	___flsub@f2,?___fladd+4
  4666  004D70  C032  F023         	movff	___flsub@f2+1,?___fladd+5
  4667  004D74  C033  F024         	movff	___flsub@f2+2,?___fladd+6
  4668  004D78  C034  F025         	movff	___flsub@f2+3,?___fladd+7
  4669  004D7C  ECD0  F01B         	call	___fladd	;wreg free
  4670  004D80  C021  F030         	movff	?___fladd+3,?___flsub+3
  4671  004D84  C020  F02F         	movff	?___fladd+2,?___flsub+2
  4672  004D88  C01F  F02E         	movff	?___fladd+1,?___flsub+1
  4673  004D8C  C01E  F02D         	movff	?___fladd,?___flsub
  4674  004D90  0012               	return	
  4675  004D92                     __end_of___flsub:
  4676                           	opt stack 0
  4677                           tblptru	equ	0xFF8
  4678                           tblptrh	equ	0xFF7
  4679                           tblptrl	equ	0xFF6
  4680                           tablat	equ	0xFF5
  4681                           prodh	equ	0xFF4
  4682                           prodl	equ	0xFF3
  4683                           intcon	equ	0xFF2
  4684                           postinc0	equ	0xFEE
  4685                           wreg	equ	0xFE8
  4686                           indf1	equ	0xFE7
  4687                           postdec1	equ	0xFE5
  4688                           fsr1h	equ	0xFE2
  4689                           fsr1l	equ	0xFE1
  4690                           indf2	equ	0xFDF
  4691                           postinc2	equ	0xFDE
  4692                           postdec2	equ	0xFDD
  4693                           plusw2	equ	0xFDB
  4694                           fsr2h	equ	0xFDA
  4695                           fsr2l	equ	0xFD9
  4696                           status	equ	0xFD8
  4697                           
  4698 ;; *************** function ___asflmul *****************
  4699 ;; Defined at:
  4700 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  mp              1    wreg     PTR 
  4703 ;;		 -> exp@x(4), 
  4704 ;;  multiplicand    4   30[BANK0 ] PTR 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  mp              1   66[COMRAM] PTR 
  4707 ;;		 -> exp@x(4), 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  4   30[BANK0 ] PTR 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : F/0
  4714 ;;		On exit  : F/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4717 ;;      Params:         0       4       0       0       0       0       0
  4718 ;;      Locals:         1       0       0       0       0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0
  4720 ;;      Totals:         1       4       0       0       0       0       0
  4721 ;;Total ram usage:        5 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    4
  4724 ;; This function calls:
  4725 ;;		___flmul
  4726 ;; This function is called by:
  4727 ;;		_exp
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text19
  4732  004ADA                     __ptext19:
  4733                           	opt stack 0
  4734  004ADA                     ___asflmul:
  4735                           	opt stack 24
  4736                           
  4737                           ;incstack = 0
  4738                           ;incstack = 0
  4739                           ;___asflmul@mp stored from wreg
  4740  004ADA  CFE8 F043          	movff	wreg,___asflmul@mp
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;	Return value of ___asflmul is never used
  4744  004ADE  5043               	movf	___asflmul@mp,w,c
  4745  004AE0  6ED9               	movwf	fsr2l,c
  4746  004AE2  6ADA               	clrf	fsr2h,c
  4747  004AE4  CFDE F068          	movff	postinc2,?___flmul
  4748  004AE8  CFDE F069          	movff	postinc2,?___flmul+1
  4749  004AEC  CFDE F06A          	movff	postinc2,?___flmul+2
  4750  004AF0  CFDE F06B          	movff	postinc2,?___flmul+3
  4751  004AF4  C07E  F06C         	movff	___asflmul@multiplicand,?___flmul+4
  4752  004AF8  C07F  F06D         	movff	___asflmul@multiplicand+1,?___flmul+5
  4753  004AFC  C080  F06E         	movff	___asflmul@multiplicand+2,?___flmul+6
  4754  004B00  C081  F06F         	movff	___asflmul@multiplicand+3,?___flmul+7
  4755  004B04  EC11  F020         	call	___flmul	;wreg free
  4756  004B08  5043               	movf	___asflmul@mp,w,c
  4757  004B0A  6ED9               	movwf	fsr2l,c
  4758  004B0C  6ADA               	clrf	fsr2h,c
  4759  004B0E  0100               	movlb	0	; () banked
  4760  004B10  C068  FFDE         	movff	?___flmul,postinc2
  4761  004B14  C069  FFDE         	movff	?___flmul+1,postinc2
  4762  004B18  C06A  FFDE         	movff	?___flmul+2,postinc2
  4763  004B1C  C06B  FFDD         	movff	?___flmul+3,postdec2
  4764  004B20  06D9               	decf	fsr2l,f,c
  4765  004B22  06D9               	decf	fsr2l,f,c
  4766                           
  4767                           ; BSR set to: 0
  4768  004B24  0012               	return	
  4769  004B26                     __end_of___asflmul:
  4770                           	opt stack 0
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           intcon	equ	0xFF2
  4778                           postinc0	equ	0xFEE
  4779                           wreg	equ	0xFE8
  4780                           indf1	equ	0xFE7
  4781                           postdec1	equ	0xFE5
  4782                           fsr1h	equ	0xFE2
  4783                           fsr1l	equ	0xFE1
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           postdec2	equ	0xFDD
  4787                           plusw2	equ	0xFDB
  4788                           fsr2h	equ	0xFDA
  4789                           fsr2l	equ	0xFD9
  4790                           status	equ	0xFD8
  4791                           
  4792 ;; *************** function ___fldiv *****************
  4793 ;; Defined at:
  4794 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  f1              4    0[BANK0 ] PTR 
  4797 ;;  f2              4    4[BANK0 ] PTR 
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;  f3              4   59[COMRAM] PTR 
  4800 ;;  sign            1   65[COMRAM] unsigned char 
  4801 ;;  exp             1   64[COMRAM] unsigned char 
  4802 ;;  cntr            1   63[COMRAM] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  4    0[BANK0 ] unsigned char 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4812 ;;      Params:         0       8       0       0       0       0       0
  4813 ;;      Locals:        14       0       0       0       0       0       0
  4814 ;;      Temps:          0       0       0       0       0       0       0
  4815 ;;      Totals:        14       8       0       0       0       0       0
  4816 ;;Total ram usage:       22 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    3
  4819 ;; This function calls:
  4820 ;;		___flpack
  4821 ;; This function is called by:
  4822 ;;		_doWork
  4823 ;;		_Celsius2Fahrenheit
  4824 ;;		___asfldiv
  4825 ;;		_exp
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           	psect	text20
  4830  0043C6                     __ptext20:
  4831                           	opt stack 0
  4832  0043C6                     ___fldiv:
  4833                           	opt stack 26
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;incstack = 0
  4837                           ;incstack = 0
  4838  0043C6  0100               	movlb	0	; () banked
  4839  0043C8  3562               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  4840  0043CA  3563               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  4841  0043CC  6E41               	movwf	___fldiv@exp,c
  4842  0043CE  6641               	tstfsz	___fldiv@exp& (0+255),c
  4843  0043D0  D001               	goto	l11120
  4844  0043D2  D006               	goto	u9890
  4845  0043D4                     l11120:
  4846  0043D4  0100               	movlb	0	; () banked
  4847  0043D6  3566               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  4848  0043D8  3567               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  4849  0043DA  6E42               	movwf	___fldiv@sign,c
  4850  0043DC  6642               	tstfsz	___fldiv@sign& (0+255),c
  4851  0043DE  D006               	goto	l11124
  4852  0043E0                     u9890:
  4853  0043E0  0100               	movlb	0	; () banked
  4854  0043E2  6B60               	clrf	?___fldiv& (0+255),b
  4855  0043E4  6B61               	clrf	(?___fldiv+1)& (0+255),b
  4856  0043E6  6B62               	clrf	(?___fldiv+2)& (0+255),b
  4857  0043E8  6B63               	clrf	(?___fldiv+3)& (0+255),b
  4858  0043EA  D044               	goto	l1601
  4859  0043EC                     l11124:
  4860  0043EC  5042               	movf	___fldiv@sign,w,c
  4861  0043EE  0F89               	addlw	137
  4862  0043F0  5E41               	subwf	___fldiv@exp,f,c
  4863  0043F2  C063  F042         	movff	___fldiv@f1+3,___fldiv@sign
  4864  0043F6  0100               	movlb	0	; () banked
  4865  0043F8  5167               	movf	(___fldiv@f2+3)& (0+255),w,b
  4866  0043FA  1A42               	xorwf	___fldiv@sign,f,c
  4867  0043FC  0E80               	movlw	128
  4868  0043FE  1642               	andwf	___fldiv@sign,f,c
  4869                           
  4870                           ; BSR set to: 0
  4871  004400  8F62               	bsf	(___fldiv@f1+2)& (0+255),7,b
  4872                           
  4873                           ; BSR set to: 0
  4874  004402  6B63               	clrf	(___fldiv@f1+3)& (0+255),b
  4875  004404  8F66               	bsf	(___fldiv@f2+2)& (0+255),7,b
  4876                           
  4877                           ; BSR set to: 0
  4878  004406  6B67               	clrf	(___fldiv@f2+3)& (0+255),b
  4879                           
  4880                           ; BSR set to: 0
  4881  004408  0E20               	movlw	32
  4882  00440A  6E40               	movwf	___fldiv@cntr,c
  4883  00440C                     l11136:
  4884                           
  4885                           ; BSR set to: 0
  4886  00440C  90D8               	bcf	status,0,c
  4887  00440E  363C               	rlcf	___fldiv@f3,f,c
  4888  004410  363D               	rlcf	___fldiv@f3+1,f,c
  4889  004412  363E               	rlcf	___fldiv@f3+2,f,c
  4890  004414  363F               	rlcf	___fldiv@f3+3,f,c
  4891                           
  4892                           ; BSR set to: 0
  4893  004416  5164               	movf	___fldiv@f2& (0+255),w,b
  4894  004418  5D60               	subwf	___fldiv@f1& (0+255),w,b
  4895  00441A  5165               	movf	(___fldiv@f2+1)& (0+255),w,b
  4896  00441C  5961               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  4897  00441E  5166               	movf	(___fldiv@f2+2)& (0+255),w,b
  4898  004420  5962               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  4899  004422  5167               	movf	(___fldiv@f2+3)& (0+255),w,b
  4900  004424  5963               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  4901  004426  E309               	bnc	l11144
  4902                           
  4903                           ; BSR set to: 0
  4904  004428  5164               	movf	___fldiv@f2& (0+255),w,b
  4905  00442A  5F60               	subwf	___fldiv@f1& (0+255),f,b
  4906  00442C  5165               	movf	(___fldiv@f2+1)& (0+255),w,b
  4907  00442E  5B61               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  4908  004430  5166               	movf	(___fldiv@f2+2)& (0+255),w,b
  4909  004432  5B62               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  4910  004434  5167               	movf	(___fldiv@f2+3)& (0+255),w,b
  4911  004436  5B63               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  4912                           
  4913                           ; BSR set to: 0
  4914  004438  803C               	bsf	___fldiv@f3,0,c
  4915  00443A                     l11144:
  4916                           
  4917                           ; BSR set to: 0
  4918  00443A  90D8               	bcf	status,0,c
  4919  00443C  3760               	rlcf	___fldiv@f1& (0+255),f,b
  4920  00443E  3761               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  4921  004440  3762               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  4922  004442  3763               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  4923                           
  4924                           ; BSR set to: 0
  4925  004444  2E40               	decfsz	___fldiv@cntr,f,c
  4926  004446  D7E2               	goto	l11136
  4927                           
  4928                           ; BSR set to: 0
  4929  004448  C03C  F00E         	movff	___fldiv@f3,?___flpack
  4930  00444C  C03D  F00F         	movff	___fldiv@f3+1,?___flpack+1
  4931  004450  C03E  F010         	movff	___fldiv@f3+2,?___flpack+2
  4932  004454  C03F  F011         	movff	___fldiv@f3+3,?___flpack+3
  4933  004458  C041  F012         	movff	___fldiv@exp,?___flpack+4
  4934  00445C  C042  F013         	movff	___fldiv@sign,?___flpack+5
  4935  004460  ECD2  F020         	call	___flpack	;wreg free
  4936  004464  C011  F063         	movff	?___flpack+3,?___fldiv+3
  4937  004468  C010  F062         	movff	?___flpack+2,?___fldiv+2
  4938  00446C  C00F  F061         	movff	?___flpack+1,?___fldiv+1
  4939  004470  C00E  F060         	movff	?___flpack,?___fldiv
  4940  004474                     l1601:
  4941  004474  0012               	return	
  4942  004476                     __end_of___fldiv:
  4943                           	opt stack 0
  4944                           tblptru	equ	0xFF8
  4945                           tblptrh	equ	0xFF7
  4946                           tblptrl	equ	0xFF6
  4947                           tablat	equ	0xFF5
  4948                           prodh	equ	0xFF4
  4949                           prodl	equ	0xFF3
  4950                           intcon	equ	0xFF2
  4951                           postinc0	equ	0xFEE
  4952                           wreg	equ	0xFE8
  4953                           indf1	equ	0xFE7
  4954                           postdec1	equ	0xFE5
  4955                           fsr1h	equ	0xFE2
  4956                           fsr1l	equ	0xFE1
  4957                           indf2	equ	0xFDF
  4958                           postinc2	equ	0xFDE
  4959                           postdec2	equ	0xFDD
  4960                           plusw2	equ	0xFDB
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function _vscp_doOneSecondWork *****************
  4966 ;; Defined at:
  4967 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;		None
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;		None               void
  4974 ;; Registers used:
  4975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4976 ;; Tracked objects:
  4977 ;;		On entry : F/0
  4978 ;;		On exit  : F/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4981 ;;      Params:         0       0       0       0       0       0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0
  4983 ;;      Temps:          0       1       0       0       0       0       0
  4984 ;;      Totals:         0       1       0       0       0       0       0
  4985 ;;Total ram usage:        1 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    8
  4988 ;; This function calls:
  4989 ;;		_vscp_getZone
  4990 ;;		_vscp_getSubzone
  4991 ;;		_vscp_sendHeartBeat
  4992 ;; This function is called by:
  4993 ;;		_main
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text21
  4998  0049EE                     __ptext21:
  4999                           	opt stack 0
  5000  0049EE                     _vscp_doOneSecondWork:
  5001                           	opt stack 22
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;vscp_firmware.c: 526: ++vscp_second;
  5005                           
  5006                           ;incstack = 0
  5007                           ;incstack = 0
  5008  0049EE  0101               	movlb	1	; () banked
  5009  0049F0  2B25               	incf	_vscp_second& (0+255),f,b
  5010                           
  5011                           ; BSR set to: 1
  5012                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  5013  0049F2  0E3B               	movlw	59
  5014  0049F4  6525               	cpfsgt	_vscp_second& (0+255),b
  5015  0049F6  D00D               	goto	l9892
  5016                           
  5017                           ; BSR set to: 1
  5018                           ;vscp_firmware.c: 529: vscp_second = 0;
  5019  0049F8  6B25               	clrf	_vscp_second& (0+255),b
  5020                           
  5021                           ; BSR set to: 1
  5022                           ;vscp_firmware.c: 530: vscp_minute++;
  5023  0049FA  2B22               	incf	_vscp_minute& (0+255),f,b
  5024                           
  5025                           ; BSR set to: 1
  5026                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  5027  0049FC  0100               	movlb	0	; () banked
  5028  0049FE  51BD               	movf	_vscp_node_state& (0+255),w,b
  5029  004A00  0A03               	xorlw	3
  5030  004A02  E107               	bnz	l9892
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  5034                           ;vscp_firmware.c: 535: vscp_getSubzone());
  5035  004A04  ECEE  F028         	call	_vscp_getSubzone	;wreg free
  5036  004A08  6E44               	movwf	?_vscp_sendHeartBeat,c
  5037  004A0A  ECF3  F028         	call	_vscp_getZone	;wreg free
  5038  004A0E  ECCB  F027         	call	_vscp_sendHeartBeat
  5039  004A12                     l9892:
  5040                           
  5041                           ;vscp_firmware.c: 536: }
  5042                           ;vscp_firmware.c: 537: }
  5043                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  5044  004A12  0E3B               	movlw	59
  5045  004A14  0101               	movlb	1	; () banked
  5046  004A16  6522               	cpfsgt	_vscp_minute& (0+255),b
  5047  004A18  D002               	goto	l9898
  5048                           
  5049                           ; BSR set to: 1
  5050                           ;vscp_firmware.c: 540: vscp_minute = 0;
  5051  004A1A  6B22               	clrf	_vscp_minute& (0+255),b
  5052                           
  5053                           ; BSR set to: 1
  5054                           ;vscp_firmware.c: 541: vscp_hour++;
  5055  004A1C  2B21               	incf	_vscp_hour& (0+255),f,b
  5056  004A1E                     l9898:
  5057                           
  5058                           ; BSR set to: 1
  5059                           ;vscp_firmware.c: 542: }
  5060                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  5061  004A1E  0E17               	movlw	23
  5062  004A20  6521               	cpfsgt	_vscp_hour& (0+255),b
  5063  004A22  D001               	goto	l9902
  5064                           
  5065                           ; BSR set to: 1
  5066  004A24  6B21               	clrf	_vscp_hour& (0+255),b
  5067  004A26                     l9902:
  5068                           
  5069                           ; BSR set to: 1
  5070                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  5071  004A26  0100               	movlb	0	; () banked
  5072  004A28  51BD               	movf	_vscp_node_state& (0+255),w,b
  5073  004A2A  0A03               	xorlw	3
  5074  004A2C  E109               	bnz	l1097
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  5078  004A2E  2A4E               	incf	_vscp_guid_reset,f,c
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  5082  004A30  C04E  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5083  004A34  0E0F               	movlw	15
  5084  004A36  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5085  004A38  0E02               	movlw	2
  5086  004A3A  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5087  004A3C  B0D8               	btfsc	status,0,c
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  5091  004A3E  6A4E               	clrf	_vscp_guid_reset,c
  5092  004A40                     l1097:
  5093                           
  5094                           ; BSR set to: 0
  5095  004A40  0012               	return	
  5096  004A42                     __end_of_vscp_doOneSecondWork:
  5097                           	opt stack 0
  5098                           tblptru	equ	0xFF8
  5099                           tblptrh	equ	0xFF7
  5100                           tblptrl	equ	0xFF6
  5101                           tablat	equ	0xFF5
  5102                           prodh	equ	0xFF4
  5103                           prodl	equ	0xFF3
  5104                           intcon	equ	0xFF2
  5105                           postinc0	equ	0xFEE
  5106                           wreg	equ	0xFE8
  5107                           indf1	equ	0xFE7
  5108                           postdec1	equ	0xFE5
  5109                           fsr1h	equ	0xFE2
  5110                           fsr1l	equ	0xFE1
  5111                           indf2	equ	0xFDF
  5112                           postinc2	equ	0xFDE
  5113                           postdec2	equ	0xFDD
  5114                           plusw2	equ	0xFDB
  5115                           fsr2h	equ	0xFDA
  5116                           fsr2l	equ	0xFD9
  5117                           status	equ	0xFD8
  5118                           
  5119 ;; *************** function _vscp_sendHeartBeat *****************
  5120 ;; Defined at:
  5121 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  zone            1    wreg     unsigned char 
  5124 ;;  subzone         1   67[COMRAM] unsigned char 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  zone            1   68[COMRAM] unsigned char 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;		None               void
  5129 ;; Registers used:
  5130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : F/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5136 ;;      Params:         1       0       0       0       0       0       0
  5137 ;;      Locals:         1       0       0       0       0       0       0
  5138 ;;      Temps:          0       0       0       0       0       0       0
  5139 ;;      Totals:         2       0       0       0       0       0       0
  5140 ;;Total ram usage:        2 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    7
  5143 ;; This function calls:
  5144 ;;		_vscp_sendEvent
  5145 ;; This function is called by:
  5146 ;;		_vscp_doOneSecondWork
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           	psect	text22
  5151  004F96                     __ptext22:
  5152                           	opt stack 0
  5153  004F96                     _vscp_sendHeartBeat:
  5154                           	opt stack 22
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;incstack = 0
  5158                           ;incstack = 0
  5159                           ;vscp_sendHeartBeat@zone stored from wreg
  5160  004F96  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5161                           
  5162                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  5163  004F9A  0E83               	movlw	131
  5164  004F9C  0100               	movlb	0	; () banked
  5165  004F9E  6FCC               	movwf	_vscp_omsg& (0+255),b
  5166                           
  5167                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  5168  004FA0  0E07               	movlw	7
  5169  004FA2  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  5170                           
  5171                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  5172  004FA4  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5173  004FA6  0E14               	movlw	20
  5174  004FA8  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  5175                           
  5176                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  5177  004FAA  0E09               	movlw	9
  5178  004FAC  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  5182  004FAE  6BD1               	clrf	(_vscp_omsg+5)& (0+255),b
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  5186  004FB0  C045  F0D2         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  5190  004FB4  C044  F0D3         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;vscp_firmware.c: 388: vscp_sendEvent();
  5194  004FB8  EFB7  F027         	goto	_vscp_sendEvent	;wreg free
  5195  004FBC                     __end_of_vscp_sendHeartBeat:
  5196                           	opt stack 0
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           prodh	equ	0xFF4
  5202                           prodl	equ	0xFF3
  5203                           intcon	equ	0xFF2
  5204                           postinc0	equ	0xFEE
  5205                           wreg	equ	0xFE8
  5206                           indf1	equ	0xFE7
  5207                           postdec1	equ	0xFE5
  5208                           fsr1h	equ	0xFE2
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           plusw2	equ	0xFDB
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function _vscp_getSubzone *****************
  5219 ;; Defined at:
  5220 ;;		line 2732 in file "../main.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;		None
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      unsigned char 
  5227 ;; Registers used:
  5228 ;;		wreg, status,2, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : F/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5234 ;;      Params:         0       0       0       0       0       0       0
  5235 ;;      Locals:         0       0       0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0
  5237 ;;      Totals:         0       0       0       0       0       0       0
  5238 ;;Total ram usage:        0 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    3
  5241 ;; This function calls:
  5242 ;;		_readEEPROM
  5243 ;; This function is called by:
  5244 ;;		_vscp_doOneSecondWork
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           	psect	text23
  5249  0051DC                     __ptext23:
  5250                           	opt stack 0
  5251  0051DC                     _vscp_getSubzone:
  5252                           	opt stack 26
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;main.c: 2733: return readEEPROM(0x42);
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;incstack = 0
  5259                           ;incstack = 0
  5260  0051DC  6A17               	clrf	?_readEEPROM+1,c
  5261  0051DE  0E42               	movlw	66
  5262  0051E0  6E16               	movwf	?_readEEPROM,c
  5263  0051E2  EFC0  F028         	goto	_readEEPROM	;wreg free
  5264  0051E6                     __end_of_vscp_getSubzone:
  5265                           	opt stack 0
  5266                           tblptru	equ	0xFF8
  5267                           tblptrh	equ	0xFF7
  5268                           tblptrl	equ	0xFF6
  5269                           tablat	equ	0xFF5
  5270                           prodh	equ	0xFF4
  5271                           prodl	equ	0xFF3
  5272                           intcon	equ	0xFF2
  5273                           postinc0	equ	0xFEE
  5274                           wreg	equ	0xFE8
  5275                           indf1	equ	0xFE7
  5276                           postdec1	equ	0xFE5
  5277                           fsr1h	equ	0xFE2
  5278                           fsr1l	equ	0xFE1
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           postdec2	equ	0xFDD
  5282                           plusw2	equ	0xFDB
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287 ;; *************** function _vscp_getZone *****************
  5288 ;; Defined at:
  5289 ;;		line 2723 in file "../main.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;		None
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;		None
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  1    wreg      unsigned char 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5303 ;;      Params:         0       0       0       0       0       0       0
  5304 ;;      Locals:         0       0       0       0       0       0       0
  5305 ;;      Temps:          0       0       0       0       0       0       0
  5306 ;;      Totals:         0       0       0       0       0       0       0
  5307 ;;Total ram usage:        0 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    3
  5310 ;; This function calls:
  5311 ;;		_readEEPROM
  5312 ;; This function is called by:
  5313 ;;		_vscp_doOneSecondWork
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text24
  5318  0051E6                     __ptext24:
  5319                           	opt stack 0
  5320  0051E6                     _vscp_getZone:
  5321                           	opt stack 26
  5322                           
  5323                           ;main.c: 2724: return readEEPROM(0x41);
  5324                           
  5325                           ;incstack = 0
  5326                           ;incstack = 0
  5327  0051E6  6A17               	clrf	?_readEEPROM+1,c
  5328  0051E8  0E41               	movlw	65
  5329  0051EA  6E16               	movwf	?_readEEPROM,c
  5330  0051EC  EFC0  F028         	goto	_readEEPROM	;wreg free
  5331  0051F0                     __end_of_vscp_getZone:
  5332                           	opt stack 0
  5333                           tblptru	equ	0xFF8
  5334                           tblptrh	equ	0xFF7
  5335                           tblptrl	equ	0xFF6
  5336                           tablat	equ	0xFF5
  5337                           prodh	equ	0xFF4
  5338                           prodl	equ	0xFF3
  5339                           intcon	equ	0xFF2
  5340                           postinc0	equ	0xFEE
  5341                           wreg	equ	0xFE8
  5342                           indf1	equ	0xFE7
  5343                           postdec1	equ	0xFE5
  5344                           fsr1h	equ	0xFE2
  5345                           fsr1l	equ	0xFE1
  5346                           indf2	equ	0xFDF
  5347                           postinc2	equ	0xFDE
  5348                           postdec2	equ	0xFDD
  5349                           plusw2	equ	0xFDB
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function _doOneSecondWork *****************
  5355 ;; Defined at:
  5356 ;;		line 527 in file "../main.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;		None
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  setpoint        2   56[BANK0 ] short 
  5361 ;;  i               1   58[BANK0 ] unsigned char 
  5362 ;;  tmp             1   55[BANK0 ] unsigned char 
  5363 ;; Return value:  Size  Location     Type
  5364 ;;		None               void
  5365 ;; Registers used:
  5366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : F/1
  5369 ;;		On exit  : F/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5372 ;;      Params:         0       0       0       0       0       0       0
  5373 ;;      Locals:         0       4       0       0       0       0       0
  5374 ;;      Temps:          0       7       0       0       0       0       0
  5375 ;;      Totals:         0      11       0       0       0       0       0
  5376 ;;Total ram usage:       11 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    8
  5379 ;; This function calls:
  5380 ;;		_writeEEPROM
  5381 ;;		_readEEPROM
  5382 ;;		_sendTempEvent
  5383 ;;		_vscp_sendEvent
  5384 ;; This function is called by:
  5385 ;;		_main
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           	psect	text25
  5390  002700                     __ptext25:
  5391                           	opt stack 0
  5392  002700                     _doOneSecondWork:
  5393                           	opt stack 22
  5394                           
  5395                           ; BSR set to: 1
  5396                           ;main.c: 528: uint8_t tmp;
  5397                           ;main.c: 529: uint8_t i;
  5398                           ;main.c: 530: int16_t setpoint;
  5399                           ;main.c: 532: for (i = 0; i < 6; i++) {
  5400                           
  5401                           ;incstack = 0
  5402                           ;incstack = 0
  5403  002700  0100               	movlb	0	; () banked
  5404  002702  6B9A               	clrf	doOneSecondWork@i& (0+255),b
  5405  002704                     l9730:
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;main.c: 535: if (current_temp[ i ] < ((int16_t)( (((uint16_t)readEEPROM(0x7F + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x80 + 2*i)) ) ) {
  5409  002704  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5410  002706  0D02               	mullw	2
  5411  002708  0E7F               	movlw	127
  5412  00270A  24F3               	addwf	prodl,w,c
  5413  00270C  6E16               	movwf	?_readEEPROM,c
  5414  00270E  0E00               	movlw	0
  5415  002710  20F4               	addwfc	prodh,w,c
  5416  002712  6E17               	movwf	?_readEEPROM+1,c
  5417  002714  ECC0  F028         	call	_readEEPROM	;wreg free
  5418  002718  0100               	movlb	0	; () banked
  5419  00271A  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5420  00271C  6B90               	clrf	??_doOneSecondWork& (0+255),b
  5421  00271E  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5422  002720  0D02               	mullw	2
  5423  002722  0E80               	movlw	128
  5424  002724  24F3               	addwf	prodl,w,c
  5425  002726  6E16               	movwf	?_readEEPROM,c
  5426  002728  0E00               	movlw	0
  5427  00272A  20F4               	addwfc	prodh,w,c
  5428  00272C  6E17               	movwf	?_readEEPROM+1,c
  5429  00272E  ECC0  F028         	call	_readEEPROM	;wreg free
  5430  002732  0100               	movlb	0	; () banked
  5431  002734  2790               	addwf	??_doOneSecondWork& (0+255),f,b
  5432  002736  0E00               	movlw	0
  5433  002738  2391               	addwfc	(??_doOneSecondWork+1)& (0+255),f,b
  5434  00273A  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5435  00273C  0D02               	mullw	2
  5436  00273E  D9E0               	call	PL2	;call to abstracted procedure
  5437  002740  CFDE F092          	movff	postinc2,??_doOneSecondWork+2
  5438  002744  CFDD F093          	movff	postdec2,??_doOneSecondWork+3
  5439  002748  DA59               	call	PL54	;call to abstracted procedure
  5440  00274A  E214               	bc	l205
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;main.c: 538: writeEEPROM(0x7F + 2*i, current_temp[ i ] >> 8);
  5444  00274C  90D8               	bcf	status,0,c
  5445  00274E  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5446  002750  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5447  002752  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5448  002754  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5449  002756  0E7F               	movlw	127
  5450  002758  DA1D               	call	PL16	;call to abstracted procedure
  5451  00275A  D9D2               	call	PL2	;call to abstracted procedure
  5452  00275C  DA38               	call	PL32	;call to abstracted procedure
  5453  00275E  ECDE  F027         	call	_writeEEPROM	;wreg free
  5454                           
  5455                           ;main.c: 539: writeEEPROM(0x80 + 2*i, current_temp[ i ] & 0xff);
  5456  002762  DA74               	call	PL80	;call to abstracted procedure
  5457  002764  0E80               	movlw	128
  5458  002766  DA16               	call	PL16	;call to abstracted procedure
  5459  002768  0101               	movlb	1	; () banked
  5460  00276A  D9CA               	call	PL2	;call to abstracted procedure
  5461  00276C  50DF               	movf	indf2,w,c
  5462  00276E  6E10               	movwf	?_writeEEPROM+2,c
  5463  002770  ECDE  F027         	call	_writeEEPROM	;wreg free
  5464  002774                     l205:
  5465                           
  5466                           ;main.c: 540: }
  5467                           ;main.c: 543: if (current_temp[ i ] > ((int16_t)( (((uint16_t)readEEPROM(0x8B + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x8C + 2*i )) ) ) {
  5468  002774  0100               	movlb	0	; () banked
  5469  002776  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5470  002778  0D02               	mullw	2
  5471  00277A  D9C2               	call	PL2	;call to abstracted procedure
  5472  00277C  CFDE F090          	movff	postinc2,??_doOneSecondWork
  5473  002780  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  5474  002784  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5475  002786  0D02               	mullw	2
  5476  002788  0E8B               	movlw	139
  5477  00278A  24F3               	addwf	prodl,w,c
  5478  00278C  6E16               	movwf	?_readEEPROM,c
  5479  00278E  0E00               	movlw	0
  5480  002790  20F4               	addwfc	prodh,w,c
  5481  002792  6E17               	movwf	?_readEEPROM+1,c
  5482  002794  ECC0  F028         	call	_readEEPROM	;wreg free
  5483  002798  0100               	movlb	0	; () banked
  5484  00279A  6F93               	movwf	(??_doOneSecondWork+3)& (0+255),b
  5485  00279C  6B92               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5486  00279E  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5487  0027A0  0D02               	mullw	2
  5488  0027A2  0E8C               	movlw	140
  5489  0027A4  24F3               	addwf	prodl,w,c
  5490  0027A6  6E16               	movwf	?_readEEPROM,c
  5491  0027A8  0E00               	movlw	0
  5492  0027AA  20F4               	addwfc	prodh,w,c
  5493  0027AC  6E17               	movwf	?_readEEPROM+1,c
  5494  0027AE  ECC0  F028         	call	_readEEPROM	;wreg free
  5495  0027B2  0100               	movlb	0	; () banked
  5496  0027B4  2792               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  5497  0027B6  0E00               	movlw	0
  5498  0027B8  2393               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  5499  0027BA  DA20               	call	PL54	;call to abstracted procedure
  5500  0027BC  E214               	bc	l9736
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;main.c: 546: writeEEPROM(0x8B + 2*i, current_temp[ i ] >> 8);
  5504  0027BE  90D8               	bcf	status,0,c
  5505  0027C0  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5506  0027C2  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5507  0027C4  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5508  0027C6  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5509  0027C8  0E8B               	movlw	139
  5510  0027CA  D9E4               	call	PL16	;call to abstracted procedure
  5511  0027CC  D999               	call	PL2	;call to abstracted procedure
  5512  0027CE  D9FF               	call	PL32	;call to abstracted procedure
  5513  0027D0  ECDE  F027         	call	_writeEEPROM	;wreg free
  5514                           
  5515                           ;main.c: 547: writeEEPROM(0x8C + 2*i, current_temp[ i ] & 0xff );
  5516  0027D4  DA3B               	call	PL80	;call to abstracted procedure
  5517  0027D6  0E8C               	movlw	140
  5518  0027D8  D9DD               	call	PL16	;call to abstracted procedure
  5519  0027DA  0101               	movlb	1	; () banked
  5520  0027DC  D991               	call	PL2	;call to abstracted procedure
  5521  0027DE  50DF               	movf	indf2,w,c
  5522  0027E0  6E10               	movwf	?_writeEEPROM+2,c
  5523  0027E2  ECDE  F027         	call	_writeEEPROM	;wreg free
  5524  0027E6                     l9736:
  5525                           
  5526                           ;main.c: 548: }
  5527                           ;main.c: 551: tmp = readEEPROM(0x49 + i);
  5528  0027E6  0E49               	movlw	73
  5529  0027E8  DA2A               	call	PL78	;call to abstracted procedure
  5530  0027EA  ECC0  F028         	call	_readEEPROM	;wreg free
  5531  0027EE  0100               	movlb	0	; () banked
  5532  0027F0  6F97               	movwf	doOneSecondWork@tmp& (0+255),b
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;main.c: 552: if (tmp && (seconds_temp[i] > tmp)) {
  5536  0027F2  5197               	movf	doOneSecondWork@tmp& (0+255),w,b
  5537  0027F4  E016               	bz	l9746
  5538                           
  5539                           ; BSR set to: 0
  5540  0027F6  0E0C               	movlw	low _seconds_temp
  5541  0027F8  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5542  0027FA  6ED9               	movwf	fsr2l,c
  5543  0027FC  6ADA               	clrf	fsr2h,c
  5544  0027FE  0E01               	movlw	high _seconds_temp
  5545  002800  22DA               	addwfc	fsr2h,f,c
  5546  002802  50DF               	movf	indf2,w,c
  5547  002804  6197               	cpfslt	doOneSecondWork@tmp& (0+255),b
  5548  002806  D00D               	goto	l9746
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;main.c: 555: if (sendTempEvent(i)) {
  5552  002808  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5553  00280A  EC46  F024         	call	_sendTempEvent
  5554  00280E  0900               	iorlw	0
  5555  002810  E008               	bz	l9746
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;main.c: 556: seconds_temp[i] = 0;
  5559  002812  0E0C               	movlw	low _seconds_temp
  5560  002814  0100               	movlb	0	; () banked
  5561  002816  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5562  002818  6ED9               	movwf	fsr2l,c
  5563  00281A  6ADA               	clrf	fsr2h,c
  5564  00281C  0E01               	movlw	high _seconds_temp
  5565  00281E  22DA               	addwfc	fsr2h,f,c
  5566  002820  6ADF               	clrf	indf2,c
  5567  002822                     l9746:
  5568                           
  5569                           ;main.c: 557: }
  5570                           ;main.c: 559: }
  5571                           ;main.c: 562: if (0x80 & readEEPROM(0x43 + i)) {
  5572  002822  0E43               	movlw	67
  5573  002824  DA0C               	call	PL78	;call to abstracted procedure
  5574  002826  ECC0  F028         	call	_readEEPROM	;wreg free
  5575  00282A  0100               	movlb	0	; () banked
  5576  00282C  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5577  00282E  AF90               	btfss	??_doOneSecondWork& (0+255),7,b
  5578  002830  D076               	goto	l9800
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;main.c: 565: if (low_alarm & (1 << i)) {
  5582  002832  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  5583  002836  0E01               	movlw	1
  5584  002838  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5585  00283A  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  5586  00283C  D002               	goto	u8174
  5587  00283E                     u8175:
  5588  00283E  90D8               	bcf	status,0,c
  5589  002840  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5590  002842                     u8174:
  5591  002842  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  5592  002844  D7FC               	goto	u8175
  5593  002846  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5594  002848  144B               	andwf	_low_alarm,w,c
  5595  00284A  E032               	bz	l9774
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;main.c: 568: if (readEEPROM(0x43 + i) & (1<<3)) {
  5599  00284C  D988               	call	PL10	;call to abstracted procedure
  5600  00284E  ECC0  F028         	call	_readEEPROM	;wreg free
  5601  002852  0100               	movlb	0	; () banked
  5602  002854  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5603  002856  A790               	btfss	??_doOneSecondWork& (0+255),3,b
  5604  002858  D02B               	goto	l9774
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;main.c: 570: vscp_omsg.priority = 0x00;
  5608  00285A  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;main.c: 571: vscp_omsg.flags = 0x80 + 3;
  5612  00285C  0E83               	movlw	131
  5613  00285E  6FCC               	movwf	_vscp_omsg& (0+255),b
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;main.c: 574: if (readEEPROM(0x43 + i) & (1<<5)) {
  5617  002860  D97E               	call	PL10	;call to abstracted procedure
  5618  002862  ECC0  F028         	call	_readEEPROM	;wreg free
  5619  002866  0100               	movlb	0	; () banked
  5620  002868  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5621  00286A  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  5622  00286C  D012               	goto	l9764
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;main.c: 576: if (readEEPROM(0x43 + i) & (1<<6)) {
  5626  00286E  0E43               	movlw	67
  5627  002870  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5628  002872  6E16               	movwf	?_readEEPROM,c
  5629  002874  6A17               	clrf	?_readEEPROM+1,c
  5630  002876  0E00               	movlw	0
  5631  002878  2217               	addwfc	?_readEEPROM+1,f,c
  5632  00287A  ECC0  F028         	call	_readEEPROM	;wreg free
  5633  00287E  0100               	movlb	0	; () banked
  5634  002880  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5635  002882  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  5636  002884  D003               	goto	l9762
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;main.c: 577: vscp_omsg.vscp_class = 30;
  5640  002886  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5641                           
  5642                           ;main.c: 578: vscp_omsg.vscp_type = 5;
  5643  002888  D9E8               	call	PL90	;call to abstracted procedure
  5644  00288A  D007               	goto	L4
  5645  00288C                     l9762:
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;main.c: 580: else {
  5649                           ;main.c: 581: vscp_omsg.vscp_class = 30;
  5650  00288C  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5651                           
  5652                           ;main.c: 582: vscp_omsg.vscp_type = 6;
  5653  00288E  D9E8               	call	PL92	;call to abstracted procedure
  5654  002890  D004               	goto	L4
  5655  002892                     l9764:
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;main.c: 586: else {
  5659                           ;main.c: 588: vscp_omsg.vscp_class = 1;
  5660  002892  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5661  002894  0E01               	movlw	1
  5662  002896  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  5663                           
  5664                           ;main.c: 589: vscp_omsg.vscp_type = 2;
  5665  002898  0E02               	movlw	2
  5666  00289A                     L4:
  5667  00289A  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;main.c: 590: }
  5671                           ;main.c: 592: vscp_omsg.data[ 0 ] = i;
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;main.c: 593: vscp_omsg.data[ 1 ] =
  5675                           ;main.c: 594: readEEPROM(0x73 + 2*i);
  5676  00289C  D944               	call	PL6	;call to abstracted procedure
  5677  00289E  ECC0  F028         	call	_readEEPROM	;wreg free
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;main.c: 595: vscp_omsg.data[ 2 ] =
  5681                           ;main.c: 596: readEEPROM(0x74 + 2*i);
  5682  0028A2  D94F               	call	PL8	;call to abstracted procedure
  5683  0028A4  ECC0  F028         	call	_readEEPROM	;wreg free
  5684  0028A8  0100               	movlb	0	; () banked
  5685  0028AA  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;main.c: 601: vscp_sendEvent();
  5689  0028AC  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  5690  0028B0                     l9774:
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;main.c: 603: }
  5694                           ;main.c: 604: }
  5695                           ;main.c: 607: if (high_alarm & (1 << i)) {
  5696  0028B0  D92E               	call	PL4	;call to abstracted procedure
  5697  0028B2  144A               	andwf	_high_alarm,w,c
  5698  0028B4  E101 D11F          	bz	l9878
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;main.c: 610: if ((readEEPROM(0x43 + i) & (1<<4))) {
  5702  0028B8  D952               	call	PL10	;call to abstracted procedure
  5703  0028BA  ECC0  F028         	call	_readEEPROM	;wreg free
  5704  0028BE  0100               	movlb	0	; () banked
  5705  0028C0  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5706  0028C2  A990               	btfss	??_doOneSecondWork& (0+255),4,b
  5707  0028C4  D118               	goto	l9878
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;main.c: 612: vscp_omsg.priority = 0x00;
  5711  0028C6  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;main.c: 613: vscp_omsg.flags = 0x80 + 3;
  5715  0028C8  0E83               	movlw	131
  5716  0028CA  6FCC               	movwf	_vscp_omsg& (0+255),b
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;main.c: 615: if (readEEPROM(0x43 + i) & (1<<5)) {
  5720  0028CC  D948               	call	PL10	;call to abstracted procedure
  5721  0028CE  ECC0  F028         	call	_readEEPROM	;wreg free
  5722  0028D2  0100               	movlb	0	; () banked
  5723  0028D4  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5724  0028D6  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  5725  0028D8  D012               	goto	l9790
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;main.c: 617: if (readEEPROM(0x43 + i) & (1<<6)) {
  5729  0028DA  0E43               	movlw	67
  5730  0028DC  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5731  0028DE  6E16               	movwf	?_readEEPROM,c
  5732  0028E0  6A17               	clrf	?_readEEPROM+1,c
  5733  0028E2  0E00               	movlw	0
  5734  0028E4  2217               	addwfc	?_readEEPROM+1,f,c
  5735  0028E6  ECC0  F028         	call	_readEEPROM	;wreg free
  5736  0028EA  0100               	movlb	0	; () banked
  5737  0028EC  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5738  0028EE  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  5739  0028F0  D003               	goto	l9788
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;main.c: 618: vscp_omsg.vscp_class = 30;
  5743  0028F2  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5744                           
  5745                           ;main.c: 619: vscp_omsg.vscp_type = 6;
  5746  0028F4  D9B5               	call	PL92	;call to abstracted procedure
  5747  0028F6  D007               	goto	L5
  5748  0028F8                     l9788:
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;main.c: 621: else {
  5752                           ;main.c: 622: vscp_omsg.vscp_class = 30;
  5753  0028F8  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5754                           
  5755                           ;main.c: 623: vscp_omsg.vscp_type = 5;
  5756  0028FA  D9AF               	call	PL90	;call to abstracted procedure
  5757  0028FC  D004               	goto	L5
  5758  0028FE                     l9790:
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;main.c: 626: else {
  5762                           ;main.c: 628: vscp_omsg.vscp_class = 1;
  5763  0028FE  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5764  002900  0E01               	movlw	1
  5765  002902  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  5766                           
  5767                           ;main.c: 629: vscp_omsg.vscp_type = 2;
  5768  002904  0E02               	movlw	2
  5769  002906                     L5:
  5770  002906  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;main.c: 630: }
  5774                           ;main.c: 632: vscp_omsg.data[ 0 ] = i;
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;main.c: 633: vscp_omsg.data[ 1 ] =
  5778                           ;main.c: 634: readEEPROM(0x73 + 2*i);
  5779  002908  D90E               	call	PL6	;call to abstracted procedure
  5780  00290A  ECC0  F028         	call	_readEEPROM	;wreg free
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;main.c: 635: vscp_omsg.data[ 2 ] =
  5784                           ;main.c: 636: readEEPROM(0x74 + 2*i);
  5785  00290E  D919               	call	PL8	;call to abstracted procedure
  5786  002910  ECC0  F028         	call	_readEEPROM	;wreg free
  5787  002914  0100               	movlb	0	; () banked
  5788  002916  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;main.c: 641: vscp_sendEvent();
  5792  002918  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  5793  00291C  D0EC               	goto	l9878
  5794  00291E                     l9800:
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;main.c: 646: else {
  5798                           ;main.c: 650: if (low_alarm & (1 << i)) {
  5799  00291E  D8F7               	call	PL4	;call to abstracted procedure
  5800  002920  144B               	andwf	_low_alarm,w,c
  5801  002922  E026               	bz	l9808
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;main.c: 653: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B +2*i))<<8) + (uint16_t)
      +                          readEEPROM(0x5C + 2*i )) ) +
  5805                           ;main.c: 655: (int8_t)readEEPROM(0x97 + i);
  5806  002924  D985               	call	PL70	;call to abstracted procedure
  5807  002926  ECC0  F028         	call	_readEEPROM	;wreg free
  5808  00292A  D97A               	call	PL62	;call to abstracted procedure
  5809  00292C  0E5B               	movlw	91
  5810  00292E  2591               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  5811  002930  6E16               	movwf	?_readEEPROM,c
  5812  002932  0E00               	movlw	0
  5813  002934  2192               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  5814  002936  6E17               	movwf	?_readEEPROM+1,c
  5815  002938  ECC0  F028         	call	_readEEPROM	;wreg free
  5816  00293C  D968               	call	PL58	;call to abstracted procedure
  5817  00293E  0E5C               	movlw	92
  5818  002940  2595               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  5819  002942  6E16               	movwf	?_readEEPROM,c
  5820  002944  0E00               	movlw	0
  5821  002946  2196               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  5822  002948  6E17               	movwf	?_readEEPROM+1,c
  5823  00294A  ECC0  F028         	call	_readEEPROM	;wreg free
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;main.c: 660: if (current_temp[ i ] > setpoint) {
  5827  00294E  D90E               	call	PL12	;call to abstracted procedure
  5828  002950  D8D7               	call	PL2	;call to abstracted procedure
  5829  002952  D930               	call	PL24	;call to abstracted procedure
  5830  002954  E25A               	bc	l225
  5831  002956                     l9806:
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;main.c: 663: low_alarm &= ~(1 << i);
  5835  002956  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  5836  00295A  0E01               	movlw	1
  5837  00295C  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5838  00295E  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  5839  002960  D002               	goto	u8304
  5840  002962                     u8305:
  5841  002962  90D8               	bcf	status,0,c
  5842  002964  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5843  002966                     u8304:
  5844  002966  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  5845  002968  D7FC               	goto	u8305
  5846  00296A  1D91               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  5847  00296C  164B               	andwf	_low_alarm,f,c
  5848  00296E  D04D               	goto	l225
  5849  002970                     l9808:
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;main.c: 668: else {
  5853                           ;main.c: 672: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2*i ))<<8) + (uint16_
      +                          t)readEEPROM(0x5C + 2*i )) );
  5854  002970  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5855  002972  0D02               	mullw	2
  5856  002974  0E5C               	movlw	92
  5857  002976  24F3               	addwf	prodl,w,c
  5858  002978  6E16               	movwf	?_readEEPROM,c
  5859  00297A  0E00               	movlw	0
  5860  00297C  20F4               	addwfc	prodh,w,c
  5861  00297E  6E17               	movwf	?_readEEPROM+1,c
  5862  002980  ECC0  F028         	call	_readEEPROM	;wreg free
  5863  002984  0100               	movlb	0	; () banked
  5864  002986  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5865  002988  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5866  00298A  0D02               	mullw	2
  5867  00298C  0E5B               	movlw	91
  5868  00298E  24F3               	addwf	prodl,w,c
  5869  002990  6E16               	movwf	?_readEEPROM,c
  5870  002992  0E00               	movlw	0
  5871  002994  20F4               	addwfc	prodh,w,c
  5872  002996  6E17               	movwf	?_readEEPROM+1,c
  5873  002998  ECC0  F028         	call	_readEEPROM	;wreg free
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;main.c: 675: if (current_temp[ i ] < setpoint) {
  5877  00299C  D8F4               	call	PL14	;call to abstracted procedure
  5878  00299E  D8B0               	call	PL2	;call to abstracted procedure
  5879  0029A0  CFDE F090          	movff	postinc2,??_doOneSecondWork
  5880  0029A4  D920               	call	PL34	;call to abstracted procedure
  5881  0029A6  E231               	bc	l225
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;main.c: 678: low_alarm |= (1 << i);
  5885  0029A8  D8B2               	call	PL4	;call to abstracted procedure
  5886  0029AA  124B               	iorwf	_low_alarm,f,c
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;main.c: 683: vscp_alarmstatus |= 1;
  5890  0029AC  804D               	bsf	_vscp_alarmstatus,0,c
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;main.c: 686: if (readEEPROM(i + 0x43) & (1<<3)) {
  5894  0029AE  D8D7               	call	PL10	;call to abstracted procedure
  5895  0029B0  ECC0  F028         	call	_readEEPROM	;wreg free
  5896  0029B4  0100               	movlb	0	; () banked
  5897  0029B6  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5898  0029B8  A790               	btfss	??_doOneSecondWork& (0+255),3,b
  5899  0029BA  D027               	goto	l225
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;main.c: 688: vscp_omsg.vscp_class = 1;
  5903  0029BC  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5904                           
  5905                           ;main.c: 689: vscp_omsg.vscp_type = 2;
  5906                           
  5907                           ; BSR set to: 0
  5908                           ;main.c: 690: vscp_omsg.priority = 0x00;
  5909                           
  5910                           ;main.c: 691: vscp_omsg.flags = 0x80 + 3;
  5911  0029BE  D8F2               	call	PL20	;call to abstracted procedure
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;main.c: 694: if (readEEPROM(0x43 + i) & (1<<5)) {
  5915  0029C0  D8CE               	call	PL10	;call to abstracted procedure
  5916  0029C2  ECC0  F028         	call	_readEEPROM	;wreg free
  5917  0029C6  0100               	movlb	0	; () banked
  5918  0029C8  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5919  0029CA  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  5920  0029CC  D012               	goto	l9830
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;main.c: 696: if (readEEPROM(0x43 + i) & (1<<6)) {
  5924  0029CE  0E43               	movlw	67
  5925  0029D0  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5926  0029D2  6E16               	movwf	?_readEEPROM,c
  5927  0029D4  6A17               	clrf	?_readEEPROM+1,c
  5928  0029D6  0E00               	movlw	0
  5929  0029D8  2217               	addwfc	?_readEEPROM+1,f,c
  5930  0029DA  ECC0  F028         	call	_readEEPROM	;wreg free
  5931  0029DE  0100               	movlb	0	; () banked
  5932  0029E0  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5933  0029E2  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  5934  0029E4  D003               	goto	l9828
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;main.c: 697: vscp_omsg.vscp_class = 30;
  5938  0029E6  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5939                           
  5940                           ;main.c: 698: vscp_omsg.vscp_type = 5;
  5941  0029E8  D938               	call	PL90	;call to abstracted procedure
  5942  0029EA  D002               	goto	L6
  5943  0029EC                     l9828:
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;main.c: 700: else {
  5947                           ;main.c: 701: vscp_omsg.vscp_class = 30;
  5948  0029EC  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  5949                           
  5950                           ;main.c: 702: vscp_omsg.vscp_type = 6;
  5951  0029EE  D938               	call	PL92	;call to abstracted procedure
  5952  0029F0                     L6:
  5953  0029F0  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  5954  0029F2                     l9830:
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;main.c: 703: }
  5958                           ;main.c: 705: }
  5959                           ;main.c: 707: vscp_omsg.data[ 0 ] = i;
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;main.c: 708: vscp_omsg.data[ 1 ] =
  5963                           ;main.c: 709: readEEPROM(0x73 + 2*i);
  5964  0029F2  D899               	call	PL6	;call to abstracted procedure
  5965  0029F4  ECC0  F028         	call	_readEEPROM	;wreg free
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;main.c: 710: vscp_omsg.data[ 2 ] =
  5969                           ;main.c: 711: readEEPROM(0x74 + 2*i);
  5970  0029F8  D8A4               	call	PL8	;call to abstracted procedure
  5971  0029FA  ECC0  F028         	call	_readEEPROM	;wreg free
  5972  0029FE  0100               	movlb	0	; () banked
  5973  002A00  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;main.c: 714: if ( !vscp_sendEvent()) {
  5977  002A02  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  5978  002A06  0900               	iorlw	0
  5979  002A08  E0A6               	bz	l9806
  5980  002A0A                     l225:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;main.c: 718: }
  5984                           ;main.c: 720: }
  5985                           ;main.c: 721: }
  5986                           ;main.c: 722: }
  5987                           ;main.c: 725: if (high_alarm & (1 << i)) {
  5988  002A0A  D881               	call	PL4	;call to abstracted procedure
  5989  002A0C  144A               	andwf	_high_alarm,w,c
  5990  002A0E  E028               	bz	l9846
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;main.c: 729: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2*i ))<<8) + (uint16_
      +                          t)readEEPROM(0x68 + 2*i )) ) +
  5994                           ;main.c: 731: (int8_t)readEEPROM( 0x97 + i );
  5995  002A10  D90F               	call	PL70	;call to abstracted procedure
  5996  002A12  ECC0  F028         	call	_readEEPROM	;wreg free
  5997  002A16  D904               	call	PL62	;call to abstracted procedure
  5998  002A18  0E67               	movlw	103
  5999  002A1A  2591               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  6000  002A1C  6E16               	movwf	?_readEEPROM,c
  6001  002A1E  0E00               	movlw	0
  6002  002A20  2192               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  6003  002A22  6E17               	movwf	?_readEEPROM+1,c
  6004  002A24  ECC0  F028         	call	_readEEPROM	;wreg free
  6005  002A28  D8F2               	call	PL58	;call to abstracted procedure
  6006  002A2A  0E68               	movlw	104
  6007  002A2C  2595               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  6008  002A2E  6E16               	movwf	?_readEEPROM,c
  6009  002A30  0E00               	movlw	0
  6010  002A32  2196               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  6011  002A34  6E17               	movwf	?_readEEPROM+1,c
  6012  002A36  ECC0  F028         	call	_readEEPROM	;wreg free
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;main.c: 734: if (current_temp[ i ] < setpoint) {
  6016  002A3A  D898               	call	PL12	;call to abstracted procedure
  6017  002A3C  D861               	call	PL2	;call to abstracted procedure
  6018  002A3E  CFDE F090          	movff	postinc2,??_doOneSecondWork
  6019  002A42  D8D1               	call	PL34	;call to abstracted procedure
  6020  002A44  E258               	bc	l9878
  6021  002A46                     l9844:
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;main.c: 737: high_alarm &= ~(1 << i);
  6025  002A46  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  6026  002A4A  0E01               	movlw	1
  6027  002A4C  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6028  002A4E  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  6029  002A50  D002               	goto	u8404
  6030  002A52                     u8405:
  6031  002A52  90D8               	bcf	status,0,c
  6032  002A54  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6033  002A56                     u8404:
  6034  002A56  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  6035  002A58  D7FC               	goto	u8405
  6036  002A5A  1D91               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  6037  002A5C  164A               	andwf	_high_alarm,f,c
  6038  002A5E  D04B               	goto	l9878
  6039  002A60                     l9846:
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;main.c: 742: else {
  6043                           ;main.c: 747: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2*i ))<<8) + (uint16_
      +                          t)readEEPROM(0x68 + 2*i )) );
  6044  002A60  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6045  002A62  0D02               	mullw	2
  6046  002A64  0E68               	movlw	104
  6047  002A66  24F3               	addwf	prodl,w,c
  6048  002A68  6E16               	movwf	?_readEEPROM,c
  6049  002A6A  0E00               	movlw	0
  6050  002A6C  20F4               	addwfc	prodh,w,c
  6051  002A6E  6E17               	movwf	?_readEEPROM+1,c
  6052  002A70  ECC0  F028         	call	_readEEPROM	;wreg free
  6053  002A74  0100               	movlb	0	; () banked
  6054  002A76  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6055  002A78  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6056  002A7A  0D02               	mullw	2
  6057  002A7C  0E67               	movlw	103
  6058  002A7E  24F3               	addwf	prodl,w,c
  6059  002A80  6E16               	movwf	?_readEEPROM,c
  6060  002A82  0E00               	movlw	0
  6061  002A84  20F4               	addwfc	prodh,w,c
  6062  002A86  6E17               	movwf	?_readEEPROM+1,c
  6063  002A88  ECC0  F028         	call	_readEEPROM	;wreg free
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;main.c: 750: if (current_temp[ i ] > setpoint) {
  6067  002A8C  D87C               	call	PL14	;call to abstracted procedure
  6068  002A8E  D838               	call	PL2	;call to abstracted procedure
  6069  002A90  D891               	call	PL24	;call to abstracted procedure
  6070  002A92  E231               	bc	l9878
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;main.c: 753: high_alarm |= (1 << i);
  6074  002A94  D83C               	call	PL4	;call to abstracted procedure
  6075  002A96  124A               	iorwf	_high_alarm,f,c
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;main.c: 759: vscp_alarmstatus |= 2;
  6079  002A98  824D               	bsf	_vscp_alarmstatus,1,c
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;main.c: 762: if ( readEEPROM(0x43 + i) & (1<<4) ) {
  6083  002A9A  D861               	call	PL10	;call to abstracted procedure
  6084  002A9C  ECC0  F028         	call	_readEEPROM	;wreg free
  6085  002AA0  0100               	movlb	0	; () banked
  6086  002AA2  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6087  002AA4  A990               	btfss	??_doOneSecondWork& (0+255),4,b
  6088  002AA6  D027               	goto	l9878
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;main.c: 764: vscp_omsg.vscp_class = 1;
  6092  002AA8  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6093                           
  6094                           ;main.c: 765: vscp_omsg.vscp_type = 2;
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;main.c: 766: vscp_omsg.priority = 0x00;
  6098                           
  6099                           ;main.c: 767: vscp_omsg.flags = 0x80 + 3;
  6100  002AAA  D87C               	call	PL20	;call to abstracted procedure
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;main.c: 769: if (readEEPROM(0x43 + i) & (1<<5)) {
  6104  002AAC  D858               	call	PL10	;call to abstracted procedure
  6105  002AAE  ECC0  F028         	call	_readEEPROM	;wreg free
  6106  002AB2  0100               	movlb	0	; () banked
  6107  002AB4  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6108  002AB6  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  6109  002AB8  D012               	goto	l9868
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;main.c: 771: if (readEEPROM(0x43 + i) & (1<<6)) {
  6113  002ABA  0E43               	movlw	67
  6114  002ABC  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6115  002ABE  6E16               	movwf	?_readEEPROM,c
  6116  002AC0  6A17               	clrf	?_readEEPROM+1,c
  6117  002AC2  0E00               	movlw	0
  6118  002AC4  2217               	addwfc	?_readEEPROM+1,f,c
  6119  002AC6  ECC0  F028         	call	_readEEPROM	;wreg free
  6120  002ACA  0100               	movlb	0	; () banked
  6121  002ACC  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6122  002ACE  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  6123  002AD0  D003               	goto	l9866
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;main.c: 772: vscp_omsg.vscp_class = 30;
  6127  002AD2  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6128                           
  6129                           ;main.c: 773: vscp_omsg.vscp_type = 6;
  6130  002AD4  D8C5               	call	PL92	;call to abstracted procedure
  6131  002AD6  D002               	goto	L7
  6132  002AD8                     l9866:
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;main.c: 775: else {
  6136                           ;main.c: 776: vscp_omsg.vscp_class = 30;
  6137  002AD8  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6138                           
  6139                           ;main.c: 777: vscp_omsg.vscp_type = 5;
  6140  002ADA  D8BF               	call	PL90	;call to abstracted procedure
  6141  002ADC                     L7:
  6142  002ADC  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  6143  002ADE                     l9868:
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;main.c: 778: }
  6147                           ;main.c: 779: }
  6148                           ;main.c: 781: vscp_omsg.data[ 0 ] = i;
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;main.c: 782: vscp_omsg.data[ 1 ] =
  6152                           ;main.c: 783: readEEPROM(0x73 + 2*i);
  6153  002ADE  D823               	call	PL6	;call to abstracted procedure
  6154  002AE0  ECC0  F028         	call	_readEEPROM	;wreg free
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;main.c: 784: vscp_omsg.data[ 2 ] =
  6158                           ;main.c: 785: readEEPROM(0x74 + 2*i);
  6159  002AE4  D82E               	call	PL8	;call to abstracted procedure
  6160  002AE6  ECC0  F028         	call	_readEEPROM	;wreg free
  6161  002AEA  0100               	movlb	0	; () banked
  6162  002AEC  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;main.c: 788: if (!vscp_sendEvent()) {
  6166  002AEE  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  6167  002AF2  0900               	iorlw	0
  6168  002AF4  E0A8               	bz	l9844
  6169  002AF6                     l9878:
  6170                           
  6171                           ; BSR set to: 0
  6172  002AF6  2B9A               	incf	doOneSecondWork@i& (0+255),f,b
  6173  002AF8  0E05               	movlw	5
  6174  002AFA  659A               	cpfsgt	doOneSecondWork@i& (0+255),b
  6175  002AFC  D603               	goto	l9730
  6176                           
  6177                           ; BSR set to: 0
  6178  002AFE  0C05               	retlw	5
  6179  002B00                     __end_of_doOneSecondWork:
  6180                           	opt stack 0
  6181  002B00                     PL2:
  6182                           	opt stack 23
  6183  002B00  0E00               	movlw	low _current_temp
  6184  002B02  24F3               	addwf	prodl,w,c
  6185  002B04  6ED9               	movwf	fsr2l,c
  6186  002B06  0E01               	movlw	high _current_temp
  6187  002B08  20F4               	addwfc	prodh,w,c
  6188  002B0A  6EDA               	movwf	fsr2h,c
  6189  002B0C  0012               	return	
  6190  002B0E                     __end_ofPL2:
  6191                           	opt stack 0
  6192  002B0E                     PL4:
  6193                           	opt stack 22
  6194  002B0E  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  6195  002B12  0E01               	movlw	1
  6196  002B14  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6197  002B16  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  6198  002B18  D002               	goto	u8224
  6199  002B1A                     u8225:
  6200  002B1A  90D8               	bcf	status,0,c
  6201  002B1C  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6202  002B1E                     u8224:
  6203  002B1E  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  6204  002B20  D7FC               	goto	u8225
  6205  002B22  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6206  002B24  0012               	return	
  6207  002B26                     __end_ofPL4:
  6208                           	opt stack 0
  6209  002B26                     PL6:
  6210                           	opt stack 22
  6211  002B26  C09A  F0D1         	movff	doOneSecondWork@i,_vscp_omsg+5
  6212  002B2A  90D8               	bcf	status,0,c
  6213  002B2C  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6214  002B2E  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6215  002B30  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6216  002B32  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6217  002B34  0E73               	movlw	115
  6218  002B36  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6219  002B38  6E16               	movwf	?_readEEPROM,c
  6220  002B3A  0E00               	movlw	0
  6221  002B3C  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6222  002B3E  6E17               	movwf	?_readEEPROM+1,c
  6223  002B40  0012               	return	
  6224  002B42                     __end_ofPL6:
  6225                           	opt stack 0
  6226  002B42                     PL8:
  6227                           	opt stack 22
  6228  002B42  0100               	movlb	0	; () banked
  6229  002B44  6FD2               	movwf	(_vscp_omsg+6)& (0+255),b
  6230  002B46  90D8               	bcf	status,0,c
  6231  002B48  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6232  002B4A  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6233  002B4C  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6234  002B4E  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6235  002B50  0E74               	movlw	116
  6236  002B52  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6237  002B54  6E16               	movwf	?_readEEPROM,c
  6238  002B56  0E00               	movlw	0
  6239  002B58  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6240  002B5A  6E17               	movwf	?_readEEPROM+1,c
  6241  002B5C  0012               	return	
  6242  002B5E                     __end_ofPL8:
  6243                           	opt stack 0
  6244  002B5E                     PL10:
  6245                           	opt stack 22
  6246  002B5E  0E43               	movlw	67
  6247  002B60  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6248  002B62  6E16               	movwf	?_readEEPROM,c
  6249  002B64  6A17               	clrf	?_readEEPROM+1,c
  6250  002B66  0E00               	movlw	0
  6251  002B68  2217               	addwfc	?_readEEPROM+1,f,c
  6252  002B6A  0C00               	retlw	0
  6253  002B6C                     __end_ofPL10:
  6254                           	opt stack 0
  6255  002B6C                     PL12:
  6256                           	opt stack 22
  6257  002B6C  0100               	movlb	0	; () banked
  6258  002B6E  2793               	addwf	(??_doOneSecondWork+3)& (0+255),f,b
  6259  002B70  0E00               	movlw	0
  6260  002B72  2394               	addwfc	(??_doOneSecondWork+4)& (0+255),f,b
  6261  002B74  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6262  002B76  2593               	addwf	(??_doOneSecondWork+3)& (0+255),w,b
  6263  002B78  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  6264  002B7A  0E00               	movlw	0
  6265  002B7C  2194               	addwfc	(??_doOneSecondWork+4)& (0+255),w,b
  6266  002B7E  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6267  002B80  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6268  002B82  0D02               	mullw	2
  6269  002B84  0012               	return	
  6270  002B86                     __end_ofPL12:
  6271                           	opt stack 0
  6272  002B86                     PL14:
  6273                           	opt stack 22
  6274  002B86  0100               	movlb	0	; () banked
  6275  002B88  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6276  002B8A  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6277  002B8C  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  6278  002B8E  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6279  002B90  0D02               	mullw	2
  6280  002B92  0012               	return	
  6281  002B94                     __end_ofPL14:
  6282                           	opt stack 0
  6283  002B94                     PL16:
  6284                           	opt stack 22
  6285  002B94  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6286  002B96  6E0E               	movwf	?_writeEEPROM,c
  6287  002B98  0E00               	movlw	0
  6288  002B9A  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6289  002B9C  6E0F               	movwf	?_writeEEPROM+1,c
  6290  002B9E  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6291  002BA0  0D02               	mullw	2
  6292  002BA2  0012               	return	
  6293  002BA4                     __end_ofPL16:
  6294                           	opt stack 0
  6295  002BA4                     PL20:
  6296                           	opt stack 22
  6297  002BA4  0E01               	movlw	1
  6298  002BA6  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6299  002BA8  0E02               	movlw	2
  6300  002BAA  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  6301  002BAC  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
  6302  002BAE  0E83               	movlw	131
  6303  002BB0  6FCC               	movwf	_vscp_omsg& (0+255),b
  6304  002BB2  0C83               	retlw	131
  6305  002BB4                     __end_ofPL20:
  6306                           	opt stack 0
  6307  002BB4                     PL24:
  6308                           	opt stack 22
  6309  002BB4  CFDE F090          	movff	postinc2,??_doOneSecondWork
  6310  002BB8  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  6311  002BBC  5199               	movf	(doOneSecondWork@setpoint+1)& (0+255),w,b
  6312  002BBE  0A80               	xorlw	128
  6313  002BC0  6F92               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6314  002BC2  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6315  002BC4  5D98               	subwf	doOneSecondWork@setpoint& (0+255),w,b
  6316  002BC6  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6317  002BC8  0A80               	xorlw	128
  6318  002BCA  5992               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6319  002BCC  0012               	return	
  6320  002BCE                     __end_ofPL24:
  6321                           	opt stack 0
  6322  002BCE                     PL32:
  6323                           	opt stack 22
  6324  002BCE  CFDE F092          	movff	postinc2,??_doOneSecondWork+2
  6325  002BD2  CFDD F093          	movff	postdec2,??_doOneSecondWork+3
  6326  002BD6  C093  F092         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  6327  002BDA  6B93               	clrf	(??_doOneSecondWork+3)& (0+255),b
  6328  002BDC  BF92               	btfsc	(??_doOneSecondWork+2)& (0+255),7,b
  6329  002BDE  6993               	setf	(??_doOneSecondWork+3)& (0+255),b
  6330  002BE0  5192               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  6331  002BE2  6E10               	movwf	?_writeEEPROM+2,c
  6332  002BE4  0012               	return	
  6333  002BE6                     __end_ofPL32:
  6334                           	opt stack 0
  6335  002BE6                     PL34:
  6336                           	opt stack 22
  6337  002BE6  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  6338  002BEA  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6339  002BEC  0A80               	xorlw	128
  6340  002BEE  6F92               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6341  002BF0  5198               	movf	doOneSecondWork@setpoint& (0+255),w,b
  6342  002BF2  5D90               	subwf	??_doOneSecondWork& (0+255),w,b
  6343  002BF4  5199               	movf	(doOneSecondWork@setpoint+1)& (0+255),w,b
  6344  002BF6  0A80               	xorlw	128
  6345  002BF8  5992               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6346  002BFA  0012               	return	
  6347  002BFC                     __end_ofPL34:
  6348                           	opt stack 0
  6349  002BFC                     PL54:
  6350                           	opt stack 22
  6351  002BFC  5193               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6352  002BFE  0A80               	xorlw	128
  6353  002C00  6F94               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6354  002C02  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6355  002C04  5D92               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6356  002C06  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6357  002C08  0A80               	xorlw	128
  6358  002C0A  5994               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  6359  002C0C  0012               	return	
  6360  002C0E                     __end_ofPL54:
  6361                           	opt stack 0
  6362  002C0E                     PL58:
  6363                           	opt stack 22
  6364  002C0E  0100               	movlb	0	; () banked
  6365  002C10  6F94               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6366  002C12  6B93               	clrf	(??_doOneSecondWork+3)& (0+255),b
  6367  002C14  90D8               	bcf	status,0,c
  6368  002C16  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6369  002C18  6F95               	movwf	(??_doOneSecondWork+5)& (0+255),b
  6370  002C1A  6B96               	clrf	(??_doOneSecondWork+6)& (0+255),b
  6371  002C1C  3796               	rlcf	(??_doOneSecondWork+6)& (0+255),f,b
  6372  002C1E  0012               	return	
  6373  002C20                     __end_ofPL58:
  6374                           	opt stack 0
  6375  002C20                     PL62:
  6376                           	opt stack 22
  6377  002C20  0100               	movlb	0	; () banked
  6378  002C22  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6379  002C24  90D8               	bcf	status,0,c
  6380  002C26  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6381  002C28  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6382  002C2A  6B92               	clrf	(??_doOneSecondWork+2)& (0+255),b
  6383  002C2C  3792               	rlcf	(??_doOneSecondWork+2)& (0+255),f,b
  6384  002C2E  0012               	return	
  6385  002C30                     __end_ofPL62:
  6386                           	opt stack 0
  6387  002C30                     PL70:
  6388                           	opt stack 22
  6389  002C30  0E97               	movlw	151
  6390  002C32  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6391  002C34  6E16               	movwf	?_readEEPROM,c
  6392  002C36  6A17               	clrf	?_readEEPROM+1,c
  6393  002C38  0E00               	movlw	0
  6394  002C3A  2217               	addwfc	?_readEEPROM+1,f,c
  6395  002C3C  0C00               	retlw	0
  6396  002C3E                     __end_ofPL70:
  6397                           	opt stack 0
  6398  002C3E                     PL78:
  6399                           	opt stack 22
  6400  002C3E  0100               	movlb	0	; () banked
  6401  002C40  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6402  002C42  6E16               	movwf	?_readEEPROM,c
  6403  002C44  6A17               	clrf	?_readEEPROM+1,c
  6404  002C46  0E00               	movlw	0
  6405  002C48  2217               	addwfc	?_readEEPROM+1,f,c
  6406  002C4A  0C00               	retlw	0
  6407  002C4C                     __end_ofPL78:
  6408                           	opt stack 0
  6409  002C4C                     PL80:
  6410                           	opt stack 22
  6411  002C4C  90D8               	bcf	status,0,c
  6412  002C4E  0100               	movlb	0	; () banked
  6413  002C50  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6414  002C52  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6415  002C54  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6416  002C56  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6417  002C58  0012               	return	
  6418  002C5A                     __end_ofPL80:
  6419                           	opt stack 0
  6420  002C5A                     PL90:
  6421                           	opt stack 22
  6422  002C5A  0E1E               	movlw	30
  6423  002C5C  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6424  002C5E  0C05               	retlw	5
  6425  002C60                     __end_ofPL90:
  6426                           	opt stack 0
  6427  002C60                     PL92:
  6428                           	opt stack 22
  6429  002C60  0E1E               	movlw	30
  6430  002C62  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6431  002C64  0C06               	retlw	6
  6432  002C66                     __end_ofPL92:
  6433                           	opt stack 0
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           intcon	equ	0xFF2
  6441                           postinc0	equ	0xFEE
  6442                           wreg	equ	0xFE8
  6443                           indf1	equ	0xFE7
  6444                           postdec1	equ	0xFE5
  6445                           fsr1h	equ	0xFE2
  6446                           fsr1l	equ	0xFE1
  6447                           indf2	equ	0xFDF
  6448                           postinc2	equ	0xFDE
  6449                           postdec2	equ	0xFDD
  6450                           plusw2	equ	0xFDB
  6451                           fsr2h	equ	0xFDA
  6452                           fsr2l	equ	0xFD9
  6453                           status	equ	0xFD8
  6454                           
  6455 ;; *************** function _vscp_error *****************
  6456 ;; Defined at:
  6457 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;		None               void
  6464 ;; Registers used:
  6465 ;;		None
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6471 ;;      Params:         0       0       0       0       0       0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0
  6474 ;;      Totals:         0       0       0       0       0       0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    2
  6478 ;; This function calls:
  6479 ;;		Nothing
  6480 ;; This function is called by:
  6481 ;;		_main
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           	psect	text26
  6486  005220                     __ptext26:
  6487                           	opt stack 0
  6488  005220                     _vscp_error:
  6489                           	opt stack 28
  6490                           
  6491                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  6492                           
  6493                           ; BSR set to: 0
  6494                           ;incstack = 0
  6495                           ;incstack = 0
  6496  005220  6A50               	clrf	_vscp_initledfunc,c
  6497  005222  0012               	return	
  6498  005224                     __end_of_vscp_error:
  6499                           	opt stack 0
  6500                           tblptru	equ	0xFF8
  6501                           tblptrh	equ	0xFF7
  6502                           tblptrl	equ	0xFF6
  6503                           tablat	equ	0xFF5
  6504                           prodh	equ	0xFF4
  6505                           prodl	equ	0xFF3
  6506                           intcon	equ	0xFF2
  6507                           postinc0	equ	0xFEE
  6508                           wreg	equ	0xFE8
  6509                           indf1	equ	0xFE7
  6510                           postdec1	equ	0xFE5
  6511                           fsr1h	equ	0xFE2
  6512                           fsr1l	equ	0xFE1
  6513                           indf2	equ	0xFDF
  6514                           postinc2	equ	0xFDE
  6515                           postdec2	equ	0xFDD
  6516                           plusw2	equ	0xFDB
  6517                           fsr2h	equ	0xFDA
  6518                           fsr2l	equ	0xFD9
  6519                           status	equ	0xFD8
  6520                           
  6521 ;; *************** function _handle_sync *****************
  6522 ;; Defined at:
  6523 ;;		line 1247 in file "../main.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;		None
  6526 ;; Auto vars:     Size  Location     Type
  6527 ;;  i               1   50[BANK0 ] unsigned char 
  6528 ;; Return value:  Size  Location     Type
  6529 ;;		None               void
  6530 ;; Registers used:
  6531 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6532 ;; Tracked objects:
  6533 ;;		On entry : F/0
  6534 ;;		On exit  : F/0
  6535 ;;		Unchanged: 0/0
  6536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6537 ;;      Params:         0       0       0       0       0       0       0
  6538 ;;      Locals:         0       1       0       0       0       0       0
  6539 ;;      Temps:          0       2       0       0       0       0       0
  6540 ;;      Totals:         0       3       0       0       0       0       0
  6541 ;;Total ram usage:        3 bytes
  6542 ;; Hardware stack levels used:    1
  6543 ;; Hardware stack levels required when called:    8
  6544 ;; This function calls:
  6545 ;;		_readEEPROM
  6546 ;;		_sendTempEvent
  6547 ;; This function is called by:
  6548 ;;		_main
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           	psect	text27
  6553  004792                     __ptext27:
  6554                           	opt stack 0
  6555  004792                     _handle_sync:
  6556                           	opt stack 22
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;main.c: 1248: uint8_t i;
  6560                           ;main.c: 1250: for (i = 0; i < 6; i++) {
  6561                           
  6562                           ;incstack = 0
  6563                           ;incstack = 0
  6564  004792  6B92               	clrf	handle_sync@i& (0+255),b
  6565  004794                     l9706:
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;main.c: 1252: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6569                           ;main.c: 1253: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6570                           ;main.c: 1254: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6571                           ;main.c: 1255: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6572  004794  29C5               	incf	(_vscp_imsg+7)& (0+255),w,b
  6573  004796  E010               	bz	l9710
  6574                           
  6575                           ; BSR set to: 0
  6576  004798  90D8               	bcf	status,0,c
  6577  00479A  3592               	rlcf	handle_sync@i& (0+255),w,b
  6578  00479C  6F90               	movwf	??_handle_sync& (0+255),b
  6579  00479E  6B91               	clrf	(??_handle_sync+1)& (0+255),b
  6580  0047A0  3791               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6581  0047A2  0E73               	movlw	115
  6582  0047A4  2590               	addwf	??_handle_sync& (0+255),w,b
  6583  0047A6  6E16               	movwf	?_readEEPROM,c
  6584  0047A8  0E00               	movlw	0
  6585  0047AA  2191               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6586  0047AC  6E17               	movwf	?_readEEPROM+1,c
  6587  0047AE  ECC0  F028         	call	_readEEPROM	;wreg free
  6588  0047B2  0100               	movlb	0	; () banked
  6589  0047B4  19C5               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6590  0047B6  E128               	bnz	l9720
  6591  0047B8                     l9710:
  6592                           
  6593                           ; BSR set to: 0
  6594  0047B8  29C6               	incf	(_vscp_imsg+8)& (0+255),w,b
  6595  0047BA  E010               	bz	l289
  6596                           
  6597                           ; BSR set to: 0
  6598  0047BC  90D8               	bcf	status,0,c
  6599  0047BE  3592               	rlcf	handle_sync@i& (0+255),w,b
  6600  0047C0  6F90               	movwf	??_handle_sync& (0+255),b
  6601  0047C2  6B91               	clrf	(??_handle_sync+1)& (0+255),b
  6602  0047C4  3791               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6603  0047C6  0E74               	movlw	116
  6604  0047C8  2590               	addwf	??_handle_sync& (0+255),w,b
  6605  0047CA  6E16               	movwf	?_readEEPROM,c
  6606  0047CC  0E00               	movlw	0
  6607  0047CE  2191               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6608  0047D0  6E17               	movwf	?_readEEPROM+1,c
  6609  0047D2  ECC0  F028         	call	_readEEPROM	;wreg free
  6610  0047D6  0100               	movlb	0	; () banked
  6611  0047D8  19C6               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6612  0047DA  E116               	bnz	l9720
  6613  0047DC                     l289:
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;main.c: 1258: timeout_clock = 0;
  6617  0047DC  0101               	movlb	1	; () banked
  6618  0047DE  6B16               	clrf	_timeout_clock& (0+255),b	;volatile
  6619  0047E0  6B17               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6620  0047E2  6B18               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6621  0047E4  6B19               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6622                           
  6623                           ;main.c: 1259: while (!sendTempEvent(i)) {
  6624  0047E6  D00A               	goto	l9718
  6625  0047E8                     l9714:
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;main.c: 1260: if (timeout_clock > 1000) break;
  6629  0047E8  0EE9               	movlw	233
  6630  0047EA  0101               	movlb	1	; () banked
  6631  0047EC  5D16               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6632  0047EE  0E03               	movlw	3
  6633  0047F0  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6634  0047F2  0E00               	movlw	0
  6635  0047F4  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6636  0047F6  0E00               	movlw	0
  6637  0047F8  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6638  0047FA  E206               	bc	l9720
  6639  0047FC                     l9718:
  6640                           
  6641                           ; BSR set to: 1
  6642  0047FC  0100               	movlb	0	; () banked
  6643  0047FE  5192               	movf	handle_sync@i& (0+255),w,b
  6644  004800  EC46  F024         	call	_sendTempEvent
  6645  004804  0900               	iorlw	0
  6646  004806  E0F0               	bz	l9714
  6647  004808                     l9720:
  6648  004808  0100               	movlb	0	; () banked
  6649  00480A  2B92               	incf	handle_sync@i& (0+255),f,b
  6650                           
  6651                           ; BSR set to: 0
  6652  00480C  0E05               	movlw	5
  6653  00480E  6592               	cpfsgt	handle_sync@i& (0+255),b
  6654  004810  D7C1               	goto	l9706
  6655                           
  6656                           ; BSR set to: 0
  6657  004812  0C05               	retlw	5
  6658  004814                     __end_of_handle_sync:
  6659                           	opt stack 0
  6660                           tblptru	equ	0xFF8
  6661                           tblptrh	equ	0xFF7
  6662                           tblptrl	equ	0xFF6
  6663                           tablat	equ	0xFF5
  6664                           prodh	equ	0xFF4
  6665                           prodl	equ	0xFF3
  6666                           intcon	equ	0xFF2
  6667                           postinc0	equ	0xFEE
  6668                           wreg	equ	0xFE8
  6669                           indf1	equ	0xFE7
  6670                           postdec1	equ	0xFE5
  6671                           fsr1h	equ	0xFE2
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           plusw2	equ	0xFDB
  6677                           fsr2h	equ	0xFDA
  6678                           fsr2l	equ	0xFD9
  6679                           status	equ	0xFD8
  6680                           
  6681 ;; *************** function _sendTempEvent *****************
  6682 ;; Defined at:
  6683 ;;		line 806 in file "../main.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;  i               1    wreg     unsigned char 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  i               1   47[BANK0 ] unsigned char 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      unsigned char 
  6690 ;; Registers used:
  6691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : F/0
  6694 ;;		On exit  : F/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6697 ;;      Params:         0       0       0       0       0       0       0
  6698 ;;      Locals:         0       1       0       0       0       0       0
  6699 ;;      Temps:          1       0       0       0       0       0       0
  6700 ;;      Totals:         1       1       0       0       0       0       0
  6701 ;;Total ram usage:        2 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    7
  6704 ;; This function calls:
  6705 ;;		_readEEPROM
  6706 ;;		_vscp_sendEvent
  6707 ;;		_setEventData
  6708 ;; This function is called by:
  6709 ;;		_doOneSecondWork
  6710 ;;		_handle_sync
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text28
  6715  00488C                     __ptext28:
  6716                           	opt stack 0
  6717  00488C                     _sendTempEvent:
  6718                           	opt stack 22
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;incstack = 0
  6722                           ;incstack = 0
  6723                           ;sendTempEvent@i stored from wreg
  6724  00488C  CFE8 F08F          	movff	wreg,sendTempEvent@i
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;main.c: 807: vscp_omsg.priority = 0x03;
  6728  004890  0E03               	movlw	3
  6729  004892  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  6730                           
  6731                           ;main.c: 808: vscp_omsg.flags = 0x80 + 4;
  6732  004894  0E84               	movlw	132
  6733  004896  6FCC               	movwf	_vscp_omsg& (0+255),b
  6734                           
  6735                           ;main.c: 809: vscp_omsg.vscp_class = 10;
  6736  004898  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  6737  00489A  0E0A               	movlw	10
  6738  00489C  6FCE               	movwf	(_vscp_omsg+2)& (0+255),b
  6739                           
  6740                           ;main.c: 810: vscp_omsg.vscp_type = 6;
  6741  00489E  0E06               	movlw	6
  6742  0048A0  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;main.c: 813: vscp_omsg.data[ 0 ] = 0x80 |
  6746                           ;main.c: 814: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6747                           ;main.c: 815: i;
  6748  0048A2  D828               	call	PL72	;call to abstracted procedure
  6749  0048A4  ECC0  F028         	call	_readEEPROM	;wreg free
  6750  0048A8  6E45               	movwf	??_sendTempEvent& (0+255),c
  6751  0048AA  0E03               	movlw	3
  6752  0048AC  1645               	andwf	??_sendTempEvent,f,c
  6753  0048AE  90D8               	bcf	status,0,c
  6754  0048B0  3645               	rlcf	??_sendTempEvent,f,c
  6755  0048B2  90D8               	bcf	status,0,c
  6756  0048B4  3645               	rlcf	??_sendTempEvent,f,c
  6757  0048B6  90D8               	bcf	status,0,c
  6758  0048B8  3445               	rlcf	??_sendTempEvent,w,c
  6759  0048BA  0100               	movlb	0	; () banked
  6760  0048BC  118F               	iorwf	sendTempEvent@i& (0+255),w,b
  6761  0048BE  0980               	iorlw	128
  6762  0048C0  6FD1               	movwf	(_vscp_omsg+5)& (0+255),b
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;main.c: 817: vscp_omsg.data[ 1 ] = 0x82;
  6766  0048C2  0E82               	movlw	130
  6767  0048C4  6FD2               	movwf	(_vscp_omsg+6)& (0+255),b
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;main.c: 819: setEventData( current_temp[i],
  6771                           ;main.c: 820: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6772  0048C6  518F               	movf	sendTempEvent@i& (0+255),w,b
  6773  0048C8  0D02               	mullw	2
  6774  0048CA  EC80  F015         	call	PL2	;call to abstracted procedure
  6775  0048CE  CFDE F086          	movff	postinc2,?_setEventData
  6776  0048D2  CFDD F087          	movff	postdec2,?_setEventData+1
  6777  0048D6  D80E               	call	PL72	;call to abstracted procedure
  6778  0048D8  ECC0  F028         	call	_readEEPROM	;wreg free
  6779  0048DC  0B03               	andlw	3
  6780  0048DE  0100               	movlb	0	; () banked
  6781  0048E0  6F88               	movwf	(?_setEventData+2)& (0+255),b
  6782  0048E2  EC3B  F022         	call	_setEventData	;wreg free
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;main.c: 823: if (!vscp_sendEvent()) {
  6786  0048E6  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  6787  0048EA  0900               	iorlw	0
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;main.c: 824: return 0;
  6791  0048EC  0E00               	movlw	0
  6792  0048EE  A4D8               	btfss	status,2,c
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;main.c: 825: }
  6796                           ;main.c: 827: return 1;
  6797  0048F0  0E01               	movlw	1
  6798                           
  6799                           ; BSR set to: 0
  6800  0048F2  0012               	return	
  6801  0048F4                     __end_of_sendTempEvent:
  6802                           	opt stack 0
  6803  0048F4                     PL72:
  6804                           	opt stack 22
  6805  0048F4  0E43               	movlw	67
  6806  0048F6  258F               	addwf	sendTempEvent@i& (0+255),w,b
  6807  0048F8  6E16               	movwf	?_readEEPROM,c
  6808  0048FA  6A17               	clrf	?_readEEPROM+1,c
  6809  0048FC  0E00               	movlw	0
  6810  0048FE  2217               	addwfc	?_readEEPROM+1,f,c
  6811  004900  0C00               	retlw	0
  6812  004902                     __end_ofPL72:
  6813                           	opt stack 0
  6814                           tblptru	equ	0xFF8
  6815                           tblptrh	equ	0xFF7
  6816                           tblptrl	equ	0xFF6
  6817                           tablat	equ	0xFF5
  6818                           prodh	equ	0xFF4
  6819                           prodl	equ	0xFF3
  6820                           intcon	equ	0xFF2
  6821                           postinc0	equ	0xFEE
  6822                           wreg	equ	0xFE8
  6823                           indf1	equ	0xFE7
  6824                           postdec1	equ	0xFE5
  6825                           fsr1h	equ	0xFE2
  6826                           fsr1l	equ	0xFE1
  6827                           indf2	equ	0xFDF
  6828                           postinc2	equ	0xFDE
  6829                           postdec2	equ	0xFDD
  6830                           plusw2	equ	0xFDB
  6831                           fsr2h	equ	0xFDA
  6832                           fsr2l	equ	0xFD9
  6833                           status	equ	0xFD8
  6834                           
  6835 ;; *************** function _setEventData *****************
  6836 ;; Defined at:
  6837 ;;		line 835 in file "../main.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;  v               2   38[BANK0 ] int 
  6840 ;;  unit            1   40[BANK0 ] unsigned char 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  newval          4   41[BANK0 ] unsigned char 
  6843 ;;  ival            2   45[BANK0 ] int 
  6844 ;; Return value:  Size  Location     Type
  6845 ;;		None               void
  6846 ;; Registers used:
  6847 ;;		wreg, status,2, status,0, cstack
  6848 ;; Tracked objects:
  6849 ;;		On entry : F/0
  6850 ;;		On exit  : F/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6853 ;;      Params:         0       3       0       0       0       0       0
  6854 ;;      Locals:         0       6       0       0       0       0       0
  6855 ;;      Temps:          0       0       0       0       0       0       0
  6856 ;;      Totals:         0       9       0       0       0       0       0
  6857 ;;Total ram usage:        9 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; Hardware stack levels required when called:    5
  6860 ;; This function calls:
  6861 ;;		_Celsius2Kelvin
  6862 ;;		_Celsius2Fahrenheit
  6863 ;;		___awtofl
  6864 ;;		___fltol
  6865 ;; This function is called by:
  6866 ;;		_sendTempEvent
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           	psect	text29
  6871  004476                     __ptext29:
  6872                           	opt stack 0
  6873  004476                     _setEventData:
  6874                           	opt stack 23
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;main.c: 836: double newval;
  6878                           ;main.c: 837: int ival;
  6879                           ;main.c: 839: if (0 == unit) {
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;incstack = 0
  6883                           ;incstack = 0
  6884  004476  6788               	tstfsz	setEventData@unit& (0+255),b
  6885  004478  D019               	goto	l10070
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;main.c: 841: newval = Celsius2Kelvin(v);
  6889  00447A  C086  F018         	movff	setEventData@v,?___awtofl
  6890  00447E  C087  F019         	movff	setEventData@v+1,?___awtofl+1
  6891  004482  ECE6  F026         	call	___awtofl	;wreg free
  6892  004486  C01B  F030         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6893  00448A  C01A  F02F         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6894  00448E  C019  F02E         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6895  004492  C018  F02D         	movff	?___awtofl,?_Celsius2Kelvin
  6896  004496  EC03  F027         	call	_Celsius2Kelvin	;wreg free
  6897  00449A  C030  F08C         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6898  00449E  C02F  F08B         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6899  0044A2  C02E  F08A         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6900  0044A6  C02D  F089         	movff	?_Celsius2Kelvin,setEventData@newval
  6901                           
  6902                           ;main.c: 842: } else if (2 == unit) {
  6903  0044AA  D02A               	goto	l249
  6904  0044AC                     l10070:
  6905                           
  6906                           ; BSR set to: 0
  6907  0044AC  5188               	movf	setEventData@unit& (0+255),w,b
  6908  0044AE  0A02               	xorlw	2
  6909  0044B0  E119               	bnz	l10074
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;main.c: 844: newval = Celsius2Fahrenheit(v);
  6913  0044B2  C086  F018         	movff	setEventData@v,?___awtofl
  6914  0044B6  C087  F019         	movff	setEventData@v+1,?___awtofl+1
  6915  0044BA  ECE6  F026         	call	___awtofl	;wreg free
  6916  0044BE  C01B  F081         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6917  0044C2  C01A  F080         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6918  0044C6  C019  F07F         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6919  0044CA  C018  F07E         	movff	?___awtofl,?_Celsius2Fahrenheit
  6920  0044CE  EC81  F024         	call	_Celsius2Fahrenheit	;wreg free
  6921  0044D2  C081  F08C         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6922  0044D6  C080  F08B         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6923  0044DA  C07F  F08A         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6924  0044DE  C07E  F089         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6925                           
  6926                           ;main.c: 845: } else {
  6927  0044E2  D00E               	goto	l249
  6928  0044E4                     l10074:
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;main.c: 847: newval = v;
  6932  0044E4  C086  F018         	movff	setEventData@v,?___awtofl
  6933  0044E8  C087  F019         	movff	setEventData@v+1,?___awtofl+1
  6934  0044EC  ECE6  F026         	call	___awtofl	;wreg free
  6935  0044F0  C01B  F08C         	movff	?___awtofl+3,setEventData@newval+3
  6936  0044F4  C01A  F08B         	movff	?___awtofl+2,setEventData@newval+2
  6937  0044F8  C019  F08A         	movff	?___awtofl+1,setEventData@newval+1
  6938  0044FC  C018  F089         	movff	?___awtofl,setEventData@newval
  6939  004500                     l249:
  6940                           
  6941                           ;main.c: 848: }
  6942                           ;main.c: 850: ival = (int) newval;
  6943  004500  C089  F07E         	movff	setEventData@newval,?___fltol
  6944  004504  C08A  F07F         	movff	setEventData@newval+1,?___fltol+1
  6945  004508  C08B  F080         	movff	setEventData@newval+2,?___fltol+2
  6946  00450C  C08C  F081         	movff	setEventData@newval+3,?___fltol+3
  6947  004510  ECE5  F022         	call	___fltol	;wreg free
  6948  004514  C07E  F08D         	movff	?___fltol,setEventData@ival
  6949  004518  C07F  F08E         	movff	?___fltol+1,setEventData@ival+1
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;main.c: 852: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  6953  00451C  518E               	movf	(setEventData@ival+1)& (0+255),w,b
  6954  00451E  6FD3               	movwf	(_vscp_omsg+7)& (0+255),b
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;main.c: 853: vscp_omsg.data[ 3 ] = (ival & 0xff);
  6958  004520  C08D  F0D4         	movff	setEventData@ival,_vscp_omsg+8
  6959                           
  6960                           ; BSR set to: 0
  6961  004524  0012               	return	
  6962  004526                     __end_of_setEventData:
  6963                           	opt stack 0
  6964                           tblptru	equ	0xFF8
  6965                           tblptrh	equ	0xFF7
  6966                           tblptrl	equ	0xFF6
  6967                           tablat	equ	0xFF5
  6968                           prodh	equ	0xFF4
  6969                           prodl	equ	0xFF3
  6970                           intcon	equ	0xFF2
  6971                           postinc0	equ	0xFEE
  6972                           wreg	equ	0xFE8
  6973                           indf1	equ	0xFE7
  6974                           postdec1	equ	0xFE5
  6975                           fsr1h	equ	0xFE2
  6976                           fsr1l	equ	0xFE1
  6977                           indf2	equ	0xFDF
  6978                           postinc2	equ	0xFDE
  6979                           postdec2	equ	0xFDD
  6980                           plusw2	equ	0xFDB
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function _Celsius2Fahrenheit *****************
  6986 ;; Defined at:
  6987 ;;		line 42 in file "../ntc.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  tc              4   30[BANK0 ] int 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  4   30[BANK0 ] int 
  6994 ;; Registers used:
  6995 ;;		wreg, status,2, status,0, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7001 ;;      Params:         0       4       0       0       0       0       0
  7002 ;;      Locals:         0       0       0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0       0
  7004 ;;      Totals:         0       4       0       0       0       0       0
  7005 ;;Total ram usage:        4 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    4
  7008 ;; This function calls:
  7009 ;;		___fladd
  7010 ;;		___fldiv
  7011 ;;		___flmul
  7012 ;; This function is called by:
  7013 ;;		_setEventData
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text30
  7018  004902                     __ptext30:
  7019                           	opt stack 0
  7020  004902                     _Celsius2Fahrenheit:
  7021                           	opt stack 23
  7022                           
  7023                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;incstack = 0
  7027                           ;incstack = 0
  7028  004902  6A22               	clrf	?___fladd+4,c
  7029  004904  6A23               	clrf	?___fladd+5,c
  7030  004906  0E7A               	movlw	122
  7031  004908  6E24               	movwf	?___fladd+6,c
  7032  00490A  0E46               	movlw	70
  7033  00490C  6E25               	movwf	?___fladd+7,c
  7034  00490E  0100               	movlb	0	; () banked
  7035  004910  6B6C               	clrf	(?___flmul+4)& (0+255),b
  7036  004912  6B6D               	clrf	(?___flmul+5)& (0+255),b
  7037  004914  0E10               	movlw	16
  7038  004916  6F6E               	movwf	(?___flmul+6)& (0+255),b
  7039  004918  0E41               	movlw	65
  7040  00491A  6F6F               	movwf	(?___flmul+7)& (0+255),b
  7041  00491C  C07E  F068         	movff	Celsius2Fahrenheit@tc,?___flmul
  7042  004920  C07F  F069         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7043  004924  C080  F06A         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7044  004928  C081  F06B         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7045  00492C  EC11  F020         	call	___flmul	;wreg free
  7046  004930  C06B  F021         	movff	?___flmul+3,?___fladd+3
  7047  004934  C06A  F020         	movff	?___flmul+2,?___fladd+2
  7048  004938  C069  F01F         	movff	?___flmul+1,?___fladd+1
  7049  00493C  C068  F01E         	movff	?___flmul,?___fladd
  7050  004940  ECD0  F01B         	call	___fladd	;wreg free
  7051  004944  C021  F063         	movff	?___fladd+3,?___fldiv+3
  7052  004948  C020  F062         	movff	?___fladd+2,?___fldiv+2
  7053  00494C  C01F  F061         	movff	?___fladd+1,?___fldiv+1
  7054  004950  C01E  F060         	movff	?___fladd,?___fldiv
  7055  004954  0100               	movlb	0	; () banked
  7056  004956  6B64               	clrf	(?___fldiv+4)& (0+255),b
  7057  004958  6B65               	clrf	(?___fldiv+5)& (0+255),b
  7058  00495A  0EA0               	movlw	160
  7059  00495C  6F66               	movwf	(?___fldiv+6)& (0+255),b
  7060  00495E  0E40               	movlw	64
  7061  004960  6F67               	movwf	(?___fldiv+7)& (0+255),b
  7062  004962  ECE3  F021         	call	___fldiv	;wreg free
  7063  004966  C063  F081         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7064  00496A  C062  F080         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7065  00496E  C061  F07F         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7066  004972  C060  F07E         	movff	?___fldiv,?_Celsius2Fahrenheit
  7067  004976  0012               	return	
  7068  004978                     __end_of_Celsius2Fahrenheit:
  7069                           	opt stack 0
  7070                           tblptru	equ	0xFF8
  7071                           tblptrh	equ	0xFF7
  7072                           tblptrl	equ	0xFF6
  7073                           tablat	equ	0xFF5
  7074                           prodh	equ	0xFF4
  7075                           prodl	equ	0xFF3
  7076                           intcon	equ	0xFF2
  7077                           postinc0	equ	0xFEE
  7078                           wreg	equ	0xFE8
  7079                           indf1	equ	0xFE7
  7080                           postdec1	equ	0xFE5
  7081                           fsr1h	equ	0xFE2
  7082                           fsr1l	equ	0xFE1
  7083                           indf2	equ	0xFDF
  7084                           postinc2	equ	0xFDE
  7085                           postdec2	equ	0xFDD
  7086                           plusw2	equ	0xFDB
  7087                           fsr2h	equ	0xFDA
  7088                           fsr2l	equ	0xFD9
  7089                           status	equ	0xFD8
  7090                           
  7091 ;; *************** function ___fladd *****************
  7092 ;; Defined at:
  7093 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;  f1              4   29[COMRAM] int 
  7096 ;;  f2              4   33[COMRAM] int 
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;  exp1            1   43[COMRAM] unsigned char 
  7099 ;;  exp2            1   42[COMRAM] unsigned char 
  7100 ;;  sign            1   41[COMRAM] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  4   29[COMRAM] unsigned char 
  7103 ;; Registers used:
  7104 ;;		wreg, status,2, status,0, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7110 ;;      Params:         8       0       0       0       0       0       0
  7111 ;;      Locals:         6       0       0       0       0       0       0
  7112 ;;      Temps:          1       0       0       0       0       0       0
  7113 ;;      Totals:        15       0       0       0       0       0       0
  7114 ;;Total ram usage:       15 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    3
  7117 ;; This function calls:
  7118 ;;		___flpack
  7119 ;; This function is called by:
  7120 ;;		_doWork
  7121 ;;		_Celsius2Fahrenheit
  7122 ;;		_Celsius2Kelvin
  7123 ;;		___asfladd
  7124 ;;		_floor
  7125 ;;		___flsub
  7126 ;;		_log
  7127 ;;		_eval_poly
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           	psect	text31
  7132  0037A0                     __ptext31:
  7133                           	opt stack 0
  7134  0037A0                     ___fladd:
  7135                           	opt stack 25
  7136                           
  7137                           ;incstack = 0
  7138                           ;incstack = 0
  7139  0037A0  3420               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7140  0037A2  3421               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7141  0037A4  6E2C               	movwf	___fladd@exp1,c
  7142  0037A6  3424               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7143  0037A8  3425               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7144  0037AA  6E2B               	movwf	___fladd@exp2,c
  7145  0037AC  502C               	movf	___fladd@exp1,w,c
  7146  0037AE  E009               	bz	l1569
  7147  0037B0  502B               	movf	___fladd@exp2,w,c
  7148  0037B2  602C               	cpfslt	___fladd@exp1,c
  7149  0037B4  D00F               	goto	l11050
  7150  0037B6  502C               	movf	___fladd@exp1,w,c
  7151  0037B8  5C2B               	subwf	___fladd@exp2,w,c
  7152  0037BA  6E26               	movwf	??___fladd& (0+255),c
  7153  0037BC  0E21               	movlw	33
  7154  0037BE  5C26               	subwf	??___fladd,w,c
  7155  0037C0  E309               	bnc	l11050
  7156  0037C2                     l1569:
  7157  0037C2  C022  F01E         	movff	___fladd@f2,?___fladd
  7158  0037C6  C023  F01F         	movff	___fladd@f2+1,?___fladd+1
  7159  0037CA  C024  F020         	movff	___fladd@f2+2,?___fladd+2
  7160  0037CE  C025  F021         	movff	___fladd@f2+3,?___fladd+3
  7161  0037D2  D087               	goto	l1570
  7162  0037D4                     l11050:
  7163  0037D4  502B               	movf	___fladd@exp2,w,c
  7164  0037D6  E009               	bz	l1573
  7165  0037D8  502C               	movf	___fladd@exp1,w,c
  7166  0037DA  602B               	cpfslt	___fladd@exp2,c
  7167  0037DC  D00F               	goto	l11056
  7168  0037DE  502B               	movf	___fladd@exp2,w,c
  7169  0037E0  5C2C               	subwf	___fladd@exp1,w,c
  7170  0037E2  6E26               	movwf	??___fladd& (0+255),c
  7171  0037E4  0E21               	movlw	33
  7172  0037E6  5C26               	subwf	??___fladd,w,c
  7173  0037E8  E309               	bnc	l11056
  7174  0037EA                     l1573:
  7175  0037EA  C01E  F01E         	movff	___fladd@f1,?___fladd
  7176  0037EE  C01F  F01F         	movff	___fladd@f1+1,?___fladd+1
  7177  0037F2  C020  F020         	movff	___fladd@f1+2,?___fladd+2
  7178  0037F6  C021  F021         	movff	___fladd@f1+3,?___fladd+3
  7179  0037FA  D073               	goto	l1570
  7180  0037FC                     l11056:
  7181  0037FC  0E06               	movlw	6
  7182  0037FE  6E2A               	movwf	___fladd@sign,c
  7183  003800  BE21               	btfsc	___fladd@f1+3,7,c
  7184  003802  8E2A               	bsf	___fladd@sign,7,c
  7185  003804  BE25               	btfsc	___fladd@f2+3,7,c
  7186  003806  8C2A               	bsf	___fladd@sign,6,c
  7187  003808  8E20               	bsf	___fladd@f1+2,7,c
  7188  00380A  6A21               	clrf	___fladd@f1+3,c
  7189  00380C  8E24               	bsf	___fladd@f2+2,7,c
  7190  00380E  6A25               	clrf	___fladd@f2+3,c
  7191  003810  502B               	movf	___fladd@exp2,w,c
  7192  003812  602C               	cpfslt	___fladd@exp1,c
  7193  003814  D018               	goto	l11082
  7194  003816                     l11072:
  7195  003816  90D8               	bcf	status,0,c
  7196  003818  3622               	rlcf	___fladd@f2,f,c
  7197  00381A  3623               	rlcf	___fladd@f2+1,f,c
  7198  00381C  3624               	rlcf	___fladd@f2+2,f,c
  7199  00381E  3625               	rlcf	___fladd@f2+3,f,c
  7200  003820  062B               	decf	___fladd@exp2,f,c
  7201  003822  502B               	movf	___fladd@exp2,w,c
  7202  003824  182C               	xorwf	___fladd@exp1,w,c
  7203  003826  E00B               	bz	l11080
  7204  003828  062A               	decf	___fladd@sign,f,c
  7205  00382A  502A               	movf	___fladd@sign& (0+255),w,c
  7206  00382C  0B07               	andlw	7
  7207  00382E  E007               	bz	l11080
  7208  003830  D7F2               	goto	l11072
  7209  003832                     l11078:
  7210  003832  90D8               	bcf	status,0,c
  7211  003834  3221               	rrcf	___fladd@f1+3,f,c
  7212  003836  3220               	rrcf	___fladd@f1+2,f,c
  7213  003838  321F               	rrcf	___fladd@f1+1,f,c
  7214  00383A  321E               	rrcf	___fladd@f1,f,c
  7215  00383C  2A2C               	incf	___fladd@exp1,f,c
  7216  00383E                     l11080:
  7217  00383E  502B               	movf	___fladd@exp2,w,c
  7218  003840  622C               	cpfseq	___fladd@exp1,c
  7219  003842  D7F7               	goto	l11078
  7220  003844  D01A               	goto	l1584
  7221  003846                     l11082:
  7222  003846  502C               	movf	___fladd@exp1,w,c
  7223  003848  602B               	cpfslt	___fladd@exp2,c
  7224  00384A  D017               	goto	l1584
  7225  00384C                     l11084:
  7226  00384C  90D8               	bcf	status,0,c
  7227  00384E  361E               	rlcf	___fladd@f1,f,c
  7228  003850  361F               	rlcf	___fladd@f1+1,f,c
  7229  003852  3620               	rlcf	___fladd@f1+2,f,c
  7230  003854  3621               	rlcf	___fladd@f1+3,f,c
  7231  003856  062C               	decf	___fladd@exp1,f,c
  7232  003858  502B               	movf	___fladd@exp2,w,c
  7233  00385A  182C               	xorwf	___fladd@exp1,w,c
  7234  00385C  E00B               	bz	l11092
  7235  00385E  062A               	decf	___fladd@sign,f,c
  7236  003860  502A               	movf	___fladd@sign& (0+255),w,c
  7237  003862  0B07               	andlw	7
  7238  003864  E007               	bz	l11092
  7239  003866  D7F2               	goto	l11084
  7240  003868                     l11090:
  7241  003868  90D8               	bcf	status,0,c
  7242  00386A  3225               	rrcf	___fladd@f2+3,f,c
  7243  00386C  3224               	rrcf	___fladd@f2+2,f,c
  7244  00386E  3223               	rrcf	___fladd@f2+1,f,c
  7245  003870  3222               	rrcf	___fladd@f2,f,c
  7246  003872  2A2B               	incf	___fladd@exp2,f,c
  7247  003874                     l11092:
  7248  003874  502B               	movf	___fladd@exp2,w,c
  7249  003876  622C               	cpfseq	___fladd@exp1,c
  7250  003878  D7F7               	goto	l11090
  7251  00387A                     l1584:
  7252  00387A  AE2A               	btfss	___fladd@sign,7,c
  7253  00387C  D009               	goto	l11096
  7254  00387E  1E1E               	comf	___fladd@f1,f,c
  7255  003880  1E1F               	comf	___fladd@f1+1,f,c
  7256  003882  1E20               	comf	___fladd@f1+2,f,c
  7257  003884  1E21               	comf	___fladd@f1+3,f,c
  7258  003886  2A1E               	incf	___fladd@f1,f,c
  7259  003888  0E00               	movlw	0
  7260  00388A  221F               	addwfc	___fladd@f1+1,f,c
  7261  00388C  2220               	addwfc	___fladd@f1+2,f,c
  7262  00388E  2221               	addwfc	___fladd@f1+3,f,c
  7263  003890                     l11096:
  7264  003890  AC2A               	btfss	___fladd@sign,6,c
  7265  003892  D002               	goto	l11100
  7266  003894  1E22               	comf	___fladd@f2,f,c
  7267  003896  D826               	call	PL50	;call to abstracted procedure
  7268  003898                     l11100:
  7269  003898  6A2A               	clrf	___fladd@sign,c
  7270  00389A  501E               	movf	___fladd@f1,w,c
  7271  00389C  2622               	addwf	___fladd@f2,f,c
  7272  00389E  501F               	movf	___fladd@f1+1,w,c
  7273  0038A0  2223               	addwfc	___fladd@f2+1,f,c
  7274  0038A2  5020               	movf	___fladd@f1+2,w,c
  7275  0038A4  2224               	addwfc	___fladd@f2+2,f,c
  7276  0038A6  5021               	movf	___fladd@f1+3,w,c
  7277  0038A8  2225               	addwfc	___fladd@f2+3,f,c
  7278  0038AA  AE25               	btfss	___fladd@f2+3,7,c
  7279  0038AC  D004               	goto	l11108
  7280  0038AE  1E22               	comf	___fladd@f2,f,c
  7281  0038B0  D819               	call	PL50	;call to abstracted procedure
  7282  0038B2  0E01               	movlw	1
  7283  0038B4  6E2A               	movwf	___fladd@sign,c
  7284  0038B6                     l11108:
  7285  0038B6  C022  F00E         	movff	___fladd@f2,?___flpack
  7286  0038BA  C023  F00F         	movff	___fladd@f2+1,?___flpack+1
  7287  0038BE  C024  F010         	movff	___fladd@f2+2,?___flpack+2
  7288  0038C2  C025  F011         	movff	___fladd@f2+3,?___flpack+3
  7289  0038C6  C02C  F012         	movff	___fladd@exp1,?___flpack+4
  7290  0038CA  C02A  F013         	movff	___fladd@sign,?___flpack+5
  7291  0038CE  ECD2  F020         	call	___flpack	;wreg free
  7292  0038D2  C011  F021         	movff	?___flpack+3,?___fladd+3
  7293  0038D6  C010  F020         	movff	?___flpack+2,?___fladd+2
  7294  0038DA  C00F  F01F         	movff	?___flpack+1,?___fladd+1
  7295  0038DE  C00E  F01E         	movff	?___flpack,?___fladd
  7296  0038E2                     l1570:
  7297  0038E2  0012               	return	
  7298  0038E4                     __end_of___fladd:
  7299                           	opt stack 0
  7300  0038E4                     PL50:
  7301                           	opt stack 25
  7302  0038E4  1E23               	comf	___fladd@f2+1,f,c
  7303  0038E6  1E24               	comf	___fladd@f2+2,f,c
  7304  0038E8  1E25               	comf	___fladd@f2+3,f,c
  7305  0038EA  2A22               	incf	___fladd@f2,f,c
  7306  0038EC  0E00               	movlw	0
  7307  0038EE  2223               	addwfc	___fladd@f2+1,f,c
  7308  0038F0  2224               	addwfc	___fladd@f2+2,f,c
  7309  0038F2  2225               	addwfc	___fladd@f2+3,f,c
  7310  0038F4  0C00               	retlw	0
  7311  0038F6                     __end_ofPL50:
  7312                           	opt stack 0
  7313                           tblptru	equ	0xFF8
  7314                           tblptrh	equ	0xFF7
  7315                           tblptrl	equ	0xFF6
  7316                           tablat	equ	0xFF5
  7317                           prodh	equ	0xFF4
  7318                           prodl	equ	0xFF3
  7319                           intcon	equ	0xFF2
  7320                           postinc0	equ	0xFEE
  7321                           wreg	equ	0xFE8
  7322                           indf1	equ	0xFE7
  7323                           postdec1	equ	0xFE5
  7324                           fsr1h	equ	0xFE2
  7325                           fsr1l	equ	0xFE1
  7326                           indf2	equ	0xFDF
  7327                           postinc2	equ	0xFDE
  7328                           postdec2	equ	0xFDD
  7329                           plusw2	equ	0xFDB
  7330                           fsr2h	equ	0xFDA
  7331                           fsr2l	equ	0xFD9
  7332                           status	equ	0xFD8
  7333                           
  7334 ;; *************** function _Celsius2Kelvin *****************
  7335 ;; Defined at:
  7336 ;;		line 61 in file "../ntc.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;  tc              4   44[COMRAM] unsigned char 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;		None
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  4   44[COMRAM] unsigned char 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, status,0, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7350 ;;      Params:         4       0       0       0       0       0       0
  7351 ;;      Locals:         0       0       0       0       0       0       0
  7352 ;;      Temps:          0       0       0       0       0       0       0
  7353 ;;      Totals:         4       0       0       0       0       0       0
  7354 ;;Total ram usage:        4 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    4
  7357 ;; This function calls:
  7358 ;;		___fladd
  7359 ;; This function is called by:
  7360 ;;		_setEventData
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           	psect	text32
  7365  004E06                     __ptext32:
  7366                           	opt stack 0
  7367  004E06                     _Celsius2Kelvin:
  7368                           	opt stack 23
  7369                           
  7370                           ;ntc.c: 62: return (27316.0 + tc);
  7371                           
  7372                           ;incstack = 0
  7373                           ;incstack = 0
  7374  004E06  C02D  F01E         	movff	Celsius2Kelvin@tc,?___fladd
  7375  004E0A  C02E  F01F         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7376  004E0E  C02F  F020         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7377  004E12  C030  F021         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7378  004E16  6A22               	clrf	?___fladd+4,c
  7379  004E18  0E68               	movlw	104
  7380  004E1A  6E23               	movwf	?___fladd+5,c
  7381  004E1C  0ED5               	movlw	213
  7382  004E1E  6E24               	movwf	?___fladd+6,c
  7383  004E20  0E46               	movlw	70
  7384  004E22  6E25               	movwf	?___fladd+7,c
  7385  004E24  ECD0  F01B         	call	___fladd	;wreg free
  7386  004E28  C021  F030         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7387  004E2C  C020  F02F         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7388  004E30  C01F  F02E         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7389  004E34  C01E  F02D         	movff	?___fladd,?_Celsius2Kelvin
  7390  004E38  0012               	return	
  7391  004E3A                     __end_of_Celsius2Kelvin:
  7392                           	opt stack 0
  7393                           tblptru	equ	0xFF8
  7394                           tblptrh	equ	0xFF7
  7395                           tblptrl	equ	0xFF6
  7396                           tablat	equ	0xFF5
  7397                           prodh	equ	0xFF4
  7398                           prodl	equ	0xFF3
  7399                           intcon	equ	0xFF2
  7400                           postinc0	equ	0xFEE
  7401                           wreg	equ	0xFE8
  7402                           indf1	equ	0xFE7
  7403                           postdec1	equ	0xFE5
  7404                           fsr1h	equ	0xFE2
  7405                           fsr1l	equ	0xFE1
  7406                           indf2	equ	0xFDF
  7407                           postinc2	equ	0xFDE
  7408                           postdec2	equ	0xFDD
  7409                           plusw2	equ	0xFDB
  7410                           fsr2h	equ	0xFDA
  7411                           fsr2l	equ	0xFD9
  7412                           status	equ	0xFD8
  7413                           
  7414 ;; *************** function _vscp_handleProtocolEvent *****************
  7415 ;; Defined at:
  7416 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;		None
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;  bytes           1   44[BANK0 ] unsigned char 
  7421 ;;  page_save       2   40[BANK0 ] unsigned short 
  7422 ;;  i               1   50[BANK0 ] unsigned char 
  7423 ;;  bytes           2   54[BANK0 ] unsigned short 
  7424 ;;  page_save       2   38[BANK0 ] unsigned short 
  7425 ;;  byte            1   53[BANK0 ] unsigned char 
  7426 ;;  cb              1   49[BANK0 ] unsigned char 
  7427 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7428 ;;  j               1   58[BANK0 ] unsigned char 
  7429 ;;  i               1   56[BANK0 ] unsigned char 
  7430 ;;  k               1   51[BANK0 ] unsigned char 
  7431 ;;  i               1   52[BANK0 ] unsigned char 
  7432 ;;  len             1   47[BANK0 ] unsigned char 
  7433 ;;  pos             1   46[BANK0 ] unsigned char 
  7434 ;;  i               1   57[BANK0 ] unsigned char 
  7435 ;;  len             1   45[BANK0 ] unsigned char 
  7436 ;;  pos             1   43[BANK0 ] unsigned char 
  7437 ;;  offset          1   42[BANK0 ] unsigned char 
  7438 ;; Return value:  Size  Location     Type
  7439 ;;		None               void
  7440 ;; Registers used:
  7441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7442 ;; Tracked objects:
  7443 ;;		On entry : F/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7447 ;;      Params:         0       0       0       0       0       0       0
  7448 ;;      Locals:         0      21       0       0       0       0       0
  7449 ;;      Temps:          0       7       0       0       0       0       0
  7450 ;;      Totals:         0      28       0       0       0       0       0
  7451 ;;Total ram usage:       28 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    8
  7454 ;; This function calls:
  7455 ;;		_vscp_init
  7456 ;;		_vscp_sendEvent
  7457 ;;		_vscp_readAppReg
  7458 ;;		_vscp_writeAppReg
  7459 ;;		_vscp_getGUID
  7460 ;;		_vscp_getMDF_URL
  7461 ;;		_vscp_getMatrixInfo
  7462 ;;		_vscp_goBootloaderMode
  7463 ;;		_vscp_handleHeartbeat
  7464 ;;		_vscp_handleSetNickname
  7465 ;;		_vscp_handleDropNickname
  7466 ;;		_vscp_newNodeOnline
  7467 ;;		_vscp_readRegister
  7468 ;;		_vscp_readStdReg
  7469 ;;		_vscp_writeRegister
  7470 ;;		_vscp_writeStdReg
  7471 ;;		___lbmod
  7472 ;; This function is called by:
  7473 ;;		_main
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           	psect	text33
  7478  001B14                     __ptext33:
  7479                           	opt stack 0
  7480  001B14                     _vscp_handleProtocolEvent:
  7481                           	opt stack 22
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  7485                           
  7486                           ;incstack = 0
  7487                           ;incstack = 0
  7488  001B14  51C1               	movf	(_vscp_imsg+3)& (0+255),w,b
  7489  001B16  11C0               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7490  001B18  E101 D2BB          	bz	l9692
  7491  001B1C  D2EA               	goto	l1266
  7492  001B1E                     l9274:
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  7496  001B1E  EC8D  F026         	call	_vscp_handleHeartbeat	;wreg free
  7497                           
  7498                           ;vscp_firmware.c: 807: break;
  7499  001B22  D2E7               	goto	l1266
  7500  001B24                     l9276:
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  7504  001B24  EC79  F027         	call	_vscp_newNodeOnline	;wreg free
  7505                           
  7506                           ;vscp_firmware.c: 812: break;
  7507  001B28  D2E4               	goto	l1266
  7508  001B2A                     l9278:
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7512  001B2A  EC03  F028         	call	_vscp_handleSetNickname	;wreg free
  7513                           
  7514                           ;vscp_firmware.c: 817: break;
  7515  001B2E  D2E1               	goto	l1266
  7516  001B30                     l9280:
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7520  001B30  EC36  F027         	call	_vscp_handleDropNickname	;wreg free
  7521                           
  7522                           ;vscp_firmware.c: 822: break;
  7523  001B34  D2DE               	goto	l1266
  7524  001B36                     l9282:
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7528                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7529  001B36  51BE               	movf	_vscp_imsg& (0+255),w,b
  7530  001B38  0B0F               	andlw	15
  7531  001B3A  0A02               	xorlw	2
  7532  001B3C  E001 D2D9          	bnz	l1266
  7533                           
  7534                           ; BSR set to: 0
  7535  001B40  51BC               	movf	_vscp_nickname& (0+255),w,b
  7536  001B42  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  7537  001B46  62DF               	cpfseq	indf2,c
  7538  001B48  D2D4               	goto	l1266
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7542  001B4A  0E80               	movlw	128
  7543  001B4C  61C5               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7544  001B4E  D012               	goto	l9302
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7548  001B50  51C5               	movf	(_vscp_imsg+7)& (0+255),w,b
  7549  001B52  ECB4  F009         	call	_vscp_readAppReg
  7550  001B56                     L8:
  7551  001B56  0100               	movlb	0	; () banked
  7552  001B58  6FD2               	movwf	(_vscp_omsg+6)& (0+255),b
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7556  001B5A  C0C5  F0D1         	movff	_vscp_imsg+7,_vscp_omsg+5
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7560  001B5E  0E03               	movlw	3
  7561  001B60  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7565  001B62  0E82               	movlw	130
  7566  001B64  6FCC               	movwf	_vscp_omsg& (0+255),b
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7570  001B66  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  7571  001B68  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7575  001B6A  0E0A               	movlw	10
  7576  001B6C  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  7577  001B6E                     l9300:
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7581  001B6E  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  7582                           
  7583                           ;vscp_firmware.c: 844: }
  7584  001B72  D2BF               	goto	l1266
  7585  001B74                     l9302:
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;vscp_firmware.c: 845: else {
  7589                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7590                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7591  001B74  51C5               	movf	(_vscp_imsg+7)& (0+255),w,b
  7592  001B76  EC4E  F01A         	call	_vscp_readStdReg
  7593  001B7A  D7ED               	goto	L8
  7594  001B7C                     l9316:
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7598                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7599  001B7C  51BE               	movf	_vscp_imsg& (0+255),w,b
  7600  001B7E  0B0F               	andlw	15
  7601  001B80  0A03               	xorlw	3
  7602  001B82  E001 D2B6          	bnz	l1266
  7603                           
  7604                           ; BSR set to: 0
  7605  001B86  51BC               	movf	_vscp_nickname& (0+255),w,b
  7606  001B88  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  7607  001B8C  62DF               	cpfseq	indf2,c
  7608  001B8E  D2B1               	goto	l1266
  7609                           
  7610                           ; BSR set to: 0
  7611                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7612  001B90  0E80               	movlw	128
  7613  001B92  61C5               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7614  001B94  D006               	goto	l9336
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7618                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7619  001B96  C0C6  F023         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7620  001B9A  51C5               	movf	(_vscp_imsg+7)& (0+255),w,b
  7621  001B9C  EC37  F003         	call	_vscp_writeAppReg
  7622  001BA0  D7DA               	goto	L8
  7623  001BA2                     l9336:
  7624                           
  7625                           ; BSR set to: 0
  7626                           ;vscp_firmware.c: 888: else {
  7627                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7628                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7629  001BA2  C0C6  F01B         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7630  001BA6  51C5               	movf	(_vscp_imsg+7)& (0+255),w,b
  7631  001BA8  EC2B  F01E         	call	_vscp_writeStdReg
  7632  001BAC  D7D4               	goto	L8
  7633  001BAE                     l9350:
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7637                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7638                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7639                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7640                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7641                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7642                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7643  001BAE  51BC               	movf	_vscp_nickname& (0+255),w,b
  7644  001BB0  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  7645  001BB4  62DF               	cpfseq	indf2,c
  7646  001BB6  D29D               	goto	l1266
  7647                           
  7648                           ; BSR set to: 0
  7649  001BB8  0E00               	movlw	0
  7650  001BBA  ECB6  F028         	call	_vscp_getGUID
  7651  001BBE  0100               	movlb	0	; () banked
  7652  001BC0  19C6               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7653  001BC2  E001 D296          	bnz	l1266
  7654                           
  7655                           ; BSR set to: 0
  7656  001BC6  0E03               	movlw	3
  7657  001BC8  ECB6  F028         	call	_vscp_getGUID
  7658  001BCC  0100               	movlb	0	; () banked
  7659  001BCE  19C7               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7660  001BD0  E001 D28F          	bnz	l1266
  7661                           
  7662                           ; BSR set to: 0
  7663  001BD4  0E05               	movlw	5
  7664  001BD6  ECB6  F028         	call	_vscp_getGUID
  7665  001BDA  0100               	movlb	0	; () banked
  7666  001BDC  19C8               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7667  001BDE  E001 D288          	bnz	l1266
  7668                           
  7669                           ; BSR set to: 0
  7670  001BE2  0E07               	movlw	7
  7671  001BE4  ECB6  F028         	call	_vscp_getGUID
  7672  001BE8  0100               	movlb	0	; () banked
  7673  001BEA  19C9               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7674  001BEC  E001 D281          	bnz	l1266
  7675                           
  7676                           ; BSR set to: 0
  7677  001BF0  5047               	movf	_vscp_page_select+1,w,c
  7678  001BF2  19CA               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7679  001BF4  E001 D27D          	bnz	l1266
  7680                           
  7681                           ; BSR set to: 0
  7682  001BF8  5046               	movf	_vscp_page_select,w,c
  7683  001BFA  EE20  F0CB         	lfsr	2,_vscp_imsg+13
  7684  001BFE  62DF               	cpfseq	indf2,c
  7685  001C00  D278               	goto	l1266
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7689  001C02  51C5               	movf	(_vscp_imsg+7)& (0+255),w,b
  7690  001C04  EC96  F028         	call	_vscp_goBootloaderMode
  7691  001C08  D274               	goto	l1266
  7692  001C0A                     l9366:
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7696                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7697                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7698                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7699  001C0A  0E00               	movlw	0
  7700  001C0C  ECB6  F028         	call	_vscp_getGUID
  7701  001C10  0100               	movlb	0	; () banked
  7702  001C12  19C5               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7703  001C14  E173               	bnz	l9410
  7704                           
  7705                           ; BSR set to: 0
  7706  001C16  0E01               	movlw	1
  7707  001C18  ECB6  F028         	call	_vscp_getGUID
  7708  001C1C  0100               	movlb	0	; () banked
  7709  001C1E  19C6               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7710  001C20  E16D               	bnz	l9410
  7711                           
  7712                           ; BSR set to: 0
  7713  001C22  0E02               	movlw	2
  7714  001C24  ECB6  F028         	call	_vscp_getGUID
  7715  001C28  0100               	movlb	0	; () banked
  7716  001C2A  19C7               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7717  001C2C  E167               	bnz	l9410
  7718                           
  7719                           ; BSR set to: 0
  7720  001C2E  0E03               	movlw	3
  7721  001C30  ECB6  F028         	call	_vscp_getGUID
  7722  001C34  0100               	movlb	0	; () banked
  7723  001C36  19C8               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7724  001C38  E161               	bnz	l9410
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7728  001C3A  884E               	bsf	_vscp_guid_reset,4,c
  7729  001C3C  D05F               	goto	l9410
  7730  001C3E                     l9376:
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7734                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7735                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7736                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7737  001C3E  0E04               	movlw	4
  7738  001C40  ECB6  F028         	call	_vscp_getGUID
  7739  001C44  0100               	movlb	0	; () banked
  7740  001C46  19C5               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7741  001C48  E159               	bnz	l9410
  7742                           
  7743                           ; BSR set to: 0
  7744  001C4A  0E05               	movlw	5
  7745  001C4C  ECB6  F028         	call	_vscp_getGUID
  7746  001C50  0100               	movlb	0	; () banked
  7747  001C52  19C6               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7748  001C54  E153               	bnz	l9410
  7749                           
  7750                           ; BSR set to: 0
  7751  001C56  0E06               	movlw	6
  7752  001C58  ECB6  F028         	call	_vscp_getGUID
  7753  001C5C  0100               	movlb	0	; () banked
  7754  001C5E  19C7               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7755  001C60  E14D               	bnz	l9410
  7756                           
  7757                           ; BSR set to: 0
  7758  001C62  0E07               	movlw	7
  7759  001C64  ECB6  F028         	call	_vscp_getGUID
  7760  001C68  0100               	movlb	0	; () banked
  7761  001C6A  19C8               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7762  001C6C  E147               	bnz	l9410
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7766  001C6E  8A4E               	bsf	_vscp_guid_reset,5,c
  7767  001C70  D045               	goto	l9410
  7768  001C72                     l9386:
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7772                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7773                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7774                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7775  001C72  0E08               	movlw	8
  7776  001C74  ECB6  F028         	call	_vscp_getGUID
  7777  001C78  0100               	movlb	0	; () banked
  7778  001C7A  19C5               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7779  001C7C  E13F               	bnz	l9410
  7780                           
  7781                           ; BSR set to: 0
  7782  001C7E  0E09               	movlw	9
  7783  001C80  ECB6  F028         	call	_vscp_getGUID
  7784  001C84  0100               	movlb	0	; () banked
  7785  001C86  19C6               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7786  001C88  E139               	bnz	l9410
  7787                           
  7788                           ; BSR set to: 0
  7789  001C8A  0E0A               	movlw	10
  7790  001C8C  ECB6  F028         	call	_vscp_getGUID
  7791  001C90  0100               	movlb	0	; () banked
  7792  001C92  19C7               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7793  001C94  E133               	bnz	l9410
  7794                           
  7795                           ; BSR set to: 0
  7796  001C96  0E0B               	movlw	11
  7797  001C98  ECB6  F028         	call	_vscp_getGUID
  7798  001C9C  0100               	movlb	0	; () banked
  7799  001C9E  19C8               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7800  001CA0  E12D               	bnz	l9410
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7804  001CA2  8C4E               	bsf	_vscp_guid_reset,6,c
  7805  001CA4  D02B               	goto	l9410
  7806  001CA6                     l9396:
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7810                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7811                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7812                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7813  001CA6  0E0C               	movlw	12
  7814  001CA8  ECB6  F028         	call	_vscp_getGUID
  7815  001CAC  0100               	movlb	0	; () banked
  7816  001CAE  19C5               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7817  001CB0  E125               	bnz	l9410
  7818                           
  7819                           ; BSR set to: 0
  7820  001CB2  0E0D               	movlw	13
  7821  001CB4  ECB6  F028         	call	_vscp_getGUID
  7822  001CB8  0100               	movlb	0	; () banked
  7823  001CBA  19C6               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7824  001CBC  E11F               	bnz	l9410
  7825                           
  7826                           ; BSR set to: 0
  7827  001CBE  0E0E               	movlw	14
  7828  001CC0  ECB6  F028         	call	_vscp_getGUID
  7829  001CC4  0100               	movlb	0	; () banked
  7830  001CC6  19C7               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7831  001CC8  E119               	bnz	l9410
  7832                           
  7833                           ; BSR set to: 0
  7834  001CCA  0E0F               	movlw	15
  7835  001CCC  ECB6  F028         	call	_vscp_getGUID
  7836  001CD0  0100               	movlb	0	; () banked
  7837  001CD2  19C8               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7838  001CD4  E113               	bnz	l9410
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7842  001CD6  8E4E               	bsf	_vscp_guid_reset,7,c
  7843  001CD8  D011               	goto	l9410
  7844  001CDA                     l1206:
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7848  001CDA  6A4E               	clrf	_vscp_guid_reset,c
  7849                           
  7850                           ;vscp_firmware.c: 965: break;
  7851  001CDC  D00F               	goto	l9410
  7852  001CDE                     l9408:
  7853                           
  7854                           ; BSR set to: 0
  7855  001CDE  39C4               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7856  001CE0  0B0F               	andlw	15
  7857  001CE2  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7858  001CE4  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7859                           
  7860                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7861                           ; Switch size 1, requested type "space"
  7862                           ; Number of cases is 1, Range of values is 0 to 0
  7863                           ; switch strategies available:
  7864                           ; Name         Instructions Cycles
  7865                           ; simple_byte            4     3 (average)
  7866                           ;	Chosen strategy is simple_byte
  7867  001CE6  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7868  001CE8  E1F8               	bnz	l1206
  7869                           
  7870                           ; BSR set to: 0
  7871                           ; Switch size 1, requested type "space"
  7872                           ; Number of cases is 4, Range of values is 0 to 3
  7873                           ; switch strategies available:
  7874                           ; Name         Instructions Cycles
  7875                           ; simple_byte           13     7 (average)
  7876                           ;	Chosen strategy is simple_byte
  7877  001CEA  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7878  001CEC  E08E               	bz	l9366
  7879  001CEE  0A01               	xorlw	1	; case 1
  7880  001CF0  E0A6               	bz	l9376
  7881  001CF2  0A03               	xorlw	3	; case 2
  7882  001CF4  E0BE               	bz	l9386
  7883  001CF6  0A01               	xorlw	1	; case 3
  7884  001CF8  E0D6               	bz	l9396
  7885  001CFA  D7EF               	goto	l1206
  7886  001CFC                     l9410:
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7890  001CFC  504E               	movf	_vscp_guid_reset,w,c
  7891  001CFE  0BF0               	andlw	240
  7892  001D00  0AF0               	xorlw	240
  7893  001D02  E001 D1F6          	bnz	l1266
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;vscp_firmware.c: 970: vscp_init();
  7897  001D06  EC49  F026         	call	_vscp_init	;wreg free
  7898  001D0A  D1F3               	goto	l1266
  7899  001D0C                     l9414:
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7903  001D0C  51BC               	movf	_vscp_nickname& (0+255),w,b
  7904  001D0E  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  7905  001D12  62DF               	cpfseq	indf2,c
  7906  001D14  D1EE               	goto	l1266
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;vscp_firmware.c: 978: uint8_t i;
  7910                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  7911  001D16  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7912                           
  7913                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  7914  001D18  C0C5  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7915                           
  7916                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  7917  001D1C  C0C6  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7918                           
  7919                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  7920  001D20  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7921  001D22  D044               	goto	l9446
  7922  001D24                     l9418:
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7926  001D24  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7927  001D26  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7928  001D28  EC58  F028         	call	_vscp_readRegister
  7929  001D2C  0100               	movlb	0	; () banked
  7930  001D2E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7931  001D30  0E07               	movlw	7
  7932  001D32  6E0E               	movwf	?___lbmod,c
  7933  001D34  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7934  001D36  ECA3  F027         	call	___lbmod
  7935  001D3A  0100               	movlb	0	; () banked
  7936  001D3C  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7937  001D3E  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7938  001D40  0FD2               	addlw	low (_vscp_omsg+6)
  7939  001D42  6ED9               	movwf	fsr2l,c
  7940  001D44  6ADA               	clrf	fsr2h,c
  7941  001D46  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  7945  001D4A  0E07               	movlw	7
  7946  001D4C  6E0E               	movwf	?___lbmod,c
  7947  001D4E  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7948  001D50  ECA3  F027         	call	___lbmod
  7949  001D54  0A06               	xorlw	6
  7950  001D56  E00B               	bz	l9424
  7951  001D58  0EFF               	movlw	255
  7952  001D5A  0100               	movlb	0	; () banked
  7953  001D5C  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7954  001D5E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7955  001D60  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7956  001D62  0EFF               	movlw	255
  7957  001D64  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7958  001D66  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7959  001D68  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7960  001D6A  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7961  001D6C  E11E               	bnz	l9444
  7962  001D6E                     l9424:
  7963                           
  7964                           ;vscp_firmware.c: 988: uint8_t bytes;
  7965                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  7966  001D6E  0E07               	movlw	7
  7967  001D70  6E0E               	movwf	?___lbmod,c
  7968  001D72  0100               	movlb	0	; () banked
  7969  001D74  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7970  001D76  ECA3  F027         	call	___lbmod
  7971  001D7A  0A06               	xorlw	6
  7972  001D7C  E103               	bnz	l9428
  7973                           
  7974                           ;vscp_firmware.c: 991: bytes = 7;
  7975  001D7E  0E07               	movlw	7
  7976  001D80  0100               	movlb	0	; () banked
  7977  001D82  D009               	goto	L9
  7978  001D84                     l9428:
  7979                           
  7980                           ;vscp_firmware.c: 993: else {
  7981                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  7982  001D84  0E07               	movlw	7
  7983  001D86  6E0E               	movwf	?___lbmod,c
  7984  001D88  0100               	movlb	0	; () banked
  7985  001D8A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7986  001D8C  ECA3  F027         	call	___lbmod
  7987  001D90  0100               	movlb	0	; () banked
  7988  001D92  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7989  001D94  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7990  001D96                     L9:
  7991  001D96  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;vscp_firmware.c: 995: }
  7995                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  7996  001D98  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  7997  001D9A  0F81               	addlw	129
  7998  001D9C  6FCC               	movwf	_vscp_omsg& (0+255),b
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  8002                           
  8003                           ; BSR set to: 0
  8004                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  8008  001D9E  D9C0               	call	PL76	;call to abstracted procedure
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  8012  001DA0  C08B  F0D1         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  8016  001DA4  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;vscp_firmware.c: 1005: pos++;
  8020  001DA8  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8021  001DAA                     l9444:
  8022                           
  8023                           ; BSR set to: 0
  8024  001DAA  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8025  001DAC                     l9446:
  8026                           
  8027                           ; BSR set to: 0
  8028  001DAC  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8029  001DAE  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8030  001DB0  E301 D19F          	bc	l1266
  8031  001DB4  D7B7               	goto	l9418
  8032  001DB6                     l9448:
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8036  001DB6  51BC               	movf	_vscp_nickname& (0+255),w,b
  8037  001DB8  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  8038  001DBC  62DF               	cpfseq	indf2,c
  8039  001DBE  D199               	goto	l1266
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;vscp_firmware.c: 1014: uint8_t i;
  8043                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  8044  001DC0  C0C5  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1151
  8045                           
  8046                           ; BSR set to: 0
  8047                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8048  001DC4  51BE               	movf	_vscp_imsg& (0+255),w,b
  8049  001DC6  0FFE               	addlw	254
  8050  001DC8  0B07               	andlw	7
  8051  001DCA  6F8F               	movwf	vscp_handleProtocolEvent@len_1152& (0+255),b
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  8055  001DCC  6B94               	clrf	vscp_handleProtocolEvent@i_1150& (0+255),b
  8056  001DCE  D018               	goto	l9462
  8057  001DD0                     l9456:
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8061  001DD0  5194               	movf	vscp_handleProtocolEvent@i_1150& (0+255),w,b
  8062  001DD2  0FC6               	addlw	low (_vscp_imsg+8)
  8063  001DD4  6ED9               	movwf	fsr2l,c
  8064  001DD6  6ADA               	clrf	fsr2h,c
  8065  001DD8  50DF               	movf	indf2,w,c
  8066  001DDA  6E27               	movwf	?_vscp_writeRegister,c
  8067  001DDC  518E               	movf	vscp_handleProtocolEvent@pos_1151& (0+255),w,b
  8068  001DDE  2594               	addwf	vscp_handleProtocolEvent@i_1150& (0+255),w,b
  8069  001DE0  EC27  F028         	call	_vscp_writeRegister
  8070                           
  8071                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8072  001DE4  0100               	movlb	0	; () banked
  8073  001DE6  518E               	movf	vscp_handleProtocolEvent@pos_1151& (0+255),w,b
  8074  001DE8  2594               	addwf	vscp_handleProtocolEvent@i_1150& (0+255),w,b
  8075  001DEA  EC58  F028         	call	_vscp_readRegister
  8076  001DEE  0100               	movlb	0	; () banked
  8077  001DF0  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8078  001DF2  5194               	movf	vscp_handleProtocolEvent@i_1150& (0+255),w,b
  8079  001DF4  0FD2               	addlw	low (_vscp_omsg+6)
  8080  001DF6  6ED9               	movwf	fsr2l,c
  8081  001DF8  6ADA               	clrf	fsr2h,c
  8082  001DFA  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8083                           
  8084                           ; BSR set to: 0
  8085  001DFE  2B94               	incf	vscp_handleProtocolEvent@i_1150& (0+255),f,b
  8086  001E00                     l9462:
  8087                           
  8088                           ; BSR set to: 0
  8089  001E00  518F               	movf	vscp_handleProtocolEvent@len_1152& (0+255),w,b
  8090  001E02  5D94               	subwf	vscp_handleProtocolEvent@i_1150& (0+255),w,b
  8091  001E04  E3E5               	bnc	l9456
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;vscp_firmware.c: 1022: }
  8095                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  8099                           
  8100                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  8101  001E06  D98C               	call	PL76	;call to abstracted procedure
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  8105  001E08  6BD1               	clrf	(_vscp_omsg+5)& (0+255),b
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  8109  001E0A  518F               	movf	vscp_handleProtocolEvent@len_1152& (0+255),w,b
  8110  001E0C  0F81               	addlw	129
  8111  001E0E  6FCC               	movwf	_vscp_omsg& (0+255),b
  8112  001E10  D6AE               	goto	l9300
  8113  001E12                     l9474:
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8117  001E12  51BC               	movf	_vscp_nickname& (0+255),w,b
  8118  001E14  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  8119  001E18  62DF               	cpfseq	indf2,c
  8120  001E1A  D16B               	goto	l1266
  8121                           
  8122                           ; BSR set to: 0
  8123                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8124                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  8125                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8126  001E1C  51C5               	movf	(_vscp_imsg+7)& (0+255),w,b
  8127  001E1E  ECB4  F009         	call	_vscp_readAppReg
  8128  001E22  0100               	movlb	0	; () banked
  8129  001E24  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8130  001E26  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8131  001E28  6E23               	movwf	?_vscp_writeAppReg,c
  8132  001E2A  51C5               	movf	(_vscp_imsg+7)& (0+255),w,b
  8133  001E2C  EC37  F003         	call	_vscp_writeAppReg
  8134  001E30  D692               	goto	L8
  8135  001E32                     l9490:
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8139  001E32  51BC               	movf	_vscp_nickname& (0+255),w,b
  8140  001E34  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  8141  001E38  62DF               	cpfseq	indf2,c
  8142  001E3A  D15B               	goto	l1266
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8146                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  8147                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8148  001E3C  51C5               	movf	(_vscp_imsg+7)& (0+255),w,b
  8149  001E3E  ECB4  F009         	call	_vscp_readAppReg
  8150  001E42  0100               	movlb	0	; () banked
  8151  001E44  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8152  001E46  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8153  001E48  6E23               	movwf	?_vscp_writeAppReg,c
  8154  001E4A  51C5               	movf	(_vscp_imsg+7)& (0+255),w,b
  8155  001E4C  EC37  F003         	call	_vscp_writeAppReg
  8156  001E50  D682               	goto	L8
  8157  001E52                     l9506:
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8161                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  8162  001E52  51C4               	movf	(_vscp_imsg+6)& (0+255),w,b
  8163  001E54  19BC               	xorwf	_vscp_nickname& (0+255),w,b
  8164  001E56  E003               	bz	l1230
  8165                           
  8166                           ; BSR set to: 0
  8167  001E58  29C4               	incf	(_vscp_imsg+6)& (0+255),w,b
  8168  001E5A  E001 D14A          	bnz	l1266
  8169  001E5E                     l1230:
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  8173  001E5E  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  8177  001E60  0E03               	movlw	3
  8178  001E62  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8179                           
  8180                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  8181  001E64  0E88               	movlw	136
  8182  001E66  6FCC               	movwf	_vscp_omsg& (0+255),b
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  8186  001E68  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  8187  001E6A  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  8188                           
  8189                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  8190  001E6C  0E20               	movlw	32
  8191  001E6E  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  8195  001E70  6B98               	clrf	vscp_handleProtocolEvent@i_1153& (0+255),b
  8196  001E72                     l1231:
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;vscp_firmware.c: 1091: {
  8200                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  8204  001E72  D95D               	call	PL88	;call to abstracted procedure
  8205  001E74                     l9526:
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8209  001E74  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8210  001E76  0FD1               	addlw	low (_vscp_omsg+5)
  8211  001E78  6ED9               	movwf	fsr2l,c
  8212  001E7A  6ADA               	clrf	fsr2h,c
  8213  001E7C  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8214  001E7E  080F               	sublw	15
  8215  001E80  ECB6  F028         	call	_vscp_getGUID
  8216  001E84  6EDF               	movwf	indf2,c
  8217  001E86  0100               	movlb	0	; () banked
  8218  001E88  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;vscp_firmware.c: 1096: if (k > 16)
  8222  001E8A  0E10               	movlw	16
  8223  001E8C  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8224  001E8E  D001               	goto	l9534
  8225  001E90  D004               	goto	l9538
  8226  001E92                     l9534:
  8227                           
  8228                           ; BSR set to: 0
  8229  001E92  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8230                           
  8231                           ; BSR set to: 0
  8232  001E94  0E07               	movlw	7
  8233  001E96  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8234  001E98  D7ED               	goto	l9526
  8235  001E9A                     l9538:
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;vscp_firmware.c: 1098: }
  8239                           ;vscp_firmware.c: 1100: if (k > 16)
  8240  001E9A  0E10               	movlw	16
  8241  001E9C  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8242  001E9E  D001               	goto	l9542
  8243  001EA0  D006               	goto	l1232
  8244  001EA2                     l9542:
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  8248  001EA2  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  8249                           
  8250                           ; BSR set to: 0
  8251  001EA6  2B98               	incf	vscp_handleProtocolEvent@i_1153& (0+255),f,b
  8252                           
  8253                           ; BSR set to: 0
  8254  001EA8  0E02               	movlw	2
  8255  001EAA  6598               	cpfsgt	vscp_handleProtocolEvent@i_1153& (0+255),b
  8256  001EAC  D7E2               	goto	l1231
  8257  001EAE                     l1232:
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;vscp_firmware.c: 1104: }
  8261                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  8262  001EAE  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8263  001EB0                     l9552:
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;vscp_firmware.c: 1107: {
  8267                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  8268  001EB0  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8269  001EB2  EC8A  F028         	call	_vscp_getMDF_URL
  8270  001EB6  0900               	iorlw	0
  8271  001EB8  E008               	bz	l9556
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8275  001EBA  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8276  001EBC  0FD4               	addlw	low (_vscp_omsg+8)
  8277  001EBE  6ED9               	movwf	fsr2l,c
  8278  001EC0  6ADA               	clrf	fsr2h,c
  8279  001EC2  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8280  001EC4  EC8A  F028         	call	_vscp_getMDF_URL
  8281  001EC8  D005               	goto	L10
  8282  001ECA                     l9556:
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;vscp_firmware.c: 1110: else
  8286                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  8287  001ECA  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8288  001ECC  0FD4               	addlw	low (_vscp_omsg+8)
  8289  001ECE  6ED9               	movwf	fsr2l,c
  8290  001ED0  6ADA               	clrf	fsr2h,c
  8291  001ED2  0E00               	movlw	0
  8292  001ED4                     L10:
  8293  001ED4  6EDF               	movwf	indf2,c
  8294                           
  8295                           ; BSR set to: 0
  8296  001ED6  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8297                           
  8298                           ; BSR set to: 0
  8299  001ED8  0E04               	movlw	4
  8300  001EDA  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8301  001EDC  D7E9               	goto	l9552
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;vscp_firmware.c: 1112: }
  8305                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  8306  001EDE  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;vscp_firmware.c: 1116: k = 5;
  8310  001EE2  0E05               	movlw	5
  8311  001EE4  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  8315  001EE6  0E03               	movlw	3
  8316  001EE8  6F98               	movwf	vscp_handleProtocolEvent@i_1153& (0+255),b
  8317  001EEA                     l1241:
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;vscp_firmware.c: 1118: {
  8321                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  8325  001EEA  D921               	call	PL88	;call to abstracted procedure
  8326  001EEC                     l9578:
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8330  001EEC  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8331  001EEE  0FD1               	addlw	low (_vscp_omsg+5)
  8332  001EF0  6ED9               	movwf	fsr2l,c
  8333  001EF2  6ADA               	clrf	fsr2h,c
  8334  001EF4  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8335  001EF6  EC8A  F028         	call	_vscp_getMDF_URL
  8336  001EFA  6EDF               	movwf	indf2,c
  8337                           
  8338                           ; BSR set to: 0
  8339  001EFC  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8340                           
  8341                           ; BSR set to: 0
  8342  001EFE  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8343                           
  8344                           ; BSR set to: 0
  8345  001F00  0E07               	movlw	7
  8346  001F02  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8347  001F04  D7F3               	goto	l9578
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;vscp_firmware.c: 1123: }
  8351                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  8352  001F06  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  8353                           
  8354                           ; BSR set to: 0
  8355  001F0A  2B98               	incf	vscp_handleProtocolEvent@i_1153& (0+255),f,b
  8356                           
  8357                           ; BSR set to: 0
  8358  001F0C  0E06               	movlw	6
  8359  001F0E  6598               	cpfsgt	vscp_handleProtocolEvent@i_1153& (0+255),b
  8360  001F10  D7EC               	goto	l1241
  8361  001F12  D0EF               	goto	l1266
  8362  001F14                     l9592:
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8366  001F14  51BC               	movf	_vscp_nickname& (0+255),w,b
  8367  001F16  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  8368  001F1A  62DF               	cpfseq	indf2,c
  8369  001F1C  D0EA               	goto	l1266
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  8373  001F1E  0E03               	movlw	3
  8374  001F20  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8375                           
  8376                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  8377  001F22  0E87               	movlw	135
  8378  001F24  6FCC               	movwf	_vscp_omsg& (0+255),b
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  8382  001F26  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  8383  001F28  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  8384                           
  8385                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  8386  001F2A  0E22               	movlw	34
  8387  001F2C  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8391  001F2E  0ED1               	movlw	(_vscp_omsg+5)& (0+255)
  8392  001F30  EC65  F028         	call	_vscp_getMatrixInfo
  8393  001F34  D61C               	goto	l9300
  8394  001F36                     l9602:
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;vscp_firmware.c: 1155: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8398  001F36  51BC               	movf	_vscp_nickname& (0+255),w,b
  8399  001F38  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  8400  001F3C  62DF               	cpfseq	indf2,c
  8401  001F3E  D0D9               	goto	l1266
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;vscp_firmware.c: 1158: uint8_t byte = 0;
  8405  001F40  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;vscp_firmware.c: 1159: uint8_t bytes_this_time, cb;
  8409                           ;vscp_firmware.c: 1163: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8410  001F42  C0BE  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8411  001F46  0E0F               	movlw	15
  8412  001F48  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8413  001F4A  0E04               	movlw	4
  8414  001F4C  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8415  001F4E  E312               	bnc	l9618
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;vscp_firmware.c: 1166: bytes = (uint16_t)vscp_imsg.data[4];
  8419  001F50  C0C8  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1157
  8420  001F54  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1157+1)& (0+255),b
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;vscp_firmware.c: 1168: if (bytes == 0) bytes = 256;
  8424  001F56  5197               	movf	(vscp_handleProtocolEvent@bytes_1157+1)& (0+255),w,b
  8425  001F58  1196               	iorwf	vscp_handleProtocolEvent@bytes_1157& (0+255),w,b
  8426  001F5A  E103               	bnz	l9614
  8427                           
  8428                           ; BSR set to: 0
  8429  001F5C  0E01               	movlw	1
  8430  001F5E  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1157+1)& (0+255),b
  8431  001F60  6B96               	clrf	vscp_handleProtocolEvent@bytes_1157& (0+255),b
  8432  001F62                     l9614:
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;vscp_firmware.c: 1170: if (bytes > 256) bytes = 256;
  8436  001F62  0E01               	movlw	1
  8437  001F64  5D96               	subwf	vscp_handleProtocolEvent@bytes_1157& (0+255),w,b
  8438  001F66  0E01               	movlw	1
  8439  001F68  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1157+1)& (0+255),w,b
  8440  001F6A  E307               	bnc	l9620
  8441                           
  8442                           ; BSR set to: 0
  8443  001F6C  0E01               	movlw	1
  8444  001F6E  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1157+1)& (0+255),b
  8445  001F70  0E00               	movlw	0
  8446  001F72  D002               	goto	L12
  8447  001F74                     l9618:
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;vscp_firmware.c: 1172: else {
  8451                           ;vscp_firmware.c: 1173: bytes = 1;
  8452  001F74  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1157+1)& (0+255),b
  8453  001F76  0E01               	movlw	1
  8454  001F78                     L12:
  8455  001F78  6F96               	movwf	vscp_handleProtocolEvent@bytes_1157& (0+255),b
  8456  001F7A                     l9620:
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;vscp_firmware.c: 1174: }
  8460                           ;vscp_firmware.c: 1177: page_save = vscp_page_select;
  8461  001F7A  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8462  001F7E  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;vscp_firmware.c: 1182: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8466  001F82  D8B8               	call	PL28	;call to abstracted procedure
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;vscp_firmware.c: 1185: vscp_omsg.priority = 0x07;
  8470  001F84  0E07               	movlw	7
  8471  001F86  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;vscp_firmware.c: 1186: vscp_omsg.vscp_class = 0;
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_type = 39;
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;vscp_firmware.c: 1188: vscp_omsg.data[0] = 0;
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;vscp_firmware.c: 1189: vscp_omsg.data[1] = vscp_imsg.data[1];
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;vscp_firmware.c: 1190: vscp_omsg.data[2] = vscp_imsg.data[2];
  8487  001F88  D8C1               	call	PL36	;call to abstracted procedure
  8488  001F8A                     l9636:
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;vscp_firmware.c: 1194: if ( ( bytes - byte ) >= 4 ) {
  8492  001F8A  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8493  001F8C  5D96               	subwf	vscp_handleProtocolEvent@bytes_1157& (0+255),w,b
  8494  001F8E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8495  001F90  0E00               	movlw	0
  8496  001F92  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1157+1)& (0+255),w,b
  8497  001F94  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8498  001F96  0E04               	movlw	4
  8499  001F98  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8500  001F9A  0E00               	movlw	0
  8501  001F9C  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8502  001F9E  E302               	bnc	l9640
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;vscp_firmware.c: 1195: bytes_this_time = 4;
  8506  001FA0  0E04               	movlw	4
  8507  001FA2  D002               	goto	L13
  8508  001FA4                     l9640:
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;vscp_firmware.c: 1197: else {
  8512                           ;vscp_firmware.c: 1198: bytes_this_time = (bytes - byte);
  8513  001FA4  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8514  001FA6  5D96               	subwf	vscp_handleProtocolEvent@bytes_1157& (0+255),w,b
  8515  001FA8                     L13:
  8516  001FA8  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;vscp_firmware.c: 1199: }
  8520                           ;vscp_firmware.c: 1202: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8521  001FAA  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8522  001FAC  0F84               	addlw	132
  8523  001FAE  6FCC               	movwf	_vscp_omsg& (0+255),b
  8524                           
  8525                           ;vscp_firmware.c: 1203: vscp_omsg.data[3] =
  8526                           ;vscp_firmware.c: 1204: vscp_imsg.data[3] + byte;
  8527  001FB0  51C7               	movf	(_vscp_imsg+9)& (0+255),w,b
  8528  001FB2  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8529  001FB4  6FD4               	movwf	(_vscp_omsg+8)& (0+255),b
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;vscp_firmware.c: 1207: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8533  001FB6  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8534  001FB8  D00E               	goto	l9648
  8535  001FBA                     l9644:
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;vscp_firmware.c: 1208: vscp_omsg.data[ (4 + cb) ] =
  8539                           ;vscp_firmware.c: 1209: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8540  001FBA  51C7               	movf	(_vscp_imsg+9)& (0+255),w,b
  8541  001FBC  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8542  001FBE  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8543  001FC0  EC58  F028         	call	_vscp_readRegister
  8544  001FC4  0100               	movlb	0	; () banked
  8545  001FC6  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8546  001FC8  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8547  001FCA  0FD5               	addlw	low (_vscp_omsg+9)
  8548  001FCC  6ED9               	movwf	fsr2l,c
  8549  001FCE  6ADA               	clrf	fsr2h,c
  8550  001FD0  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8551                           
  8552                           ; BSR set to: 0
  8553  001FD4  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8554  001FD6                     l9648:
  8555                           
  8556                           ; BSR set to: 0
  8557  001FD6  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8558  001FD8  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8559  001FDA  E3EF               	bnc	l9644
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;vscp_firmware.c: 1210: }
  8563                           ;vscp_firmware.c: 1213: vscp_sendEvent();
  8564  001FDC  ECB7  F027         	call	_vscp_sendEvent	;wreg free
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;vscp_firmware.c: 1216: byte += bytes_this_time;
  8568  001FE0  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8569  001FE2  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;vscp_firmware.c: 1219: vscp_omsg.data[0] += 1;
  8573  001FE4  2BD1               	incf	(_vscp_omsg+5)& (0+255),f,b
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;vscp_firmware.c: 1221: } while (byte < bytes);
  8577  001FE6  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8578  001FE8  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8579  001FEA  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8580  001FEC  5196               	movf	vscp_handleProtocolEvent@bytes_1157& (0+255),w,b
  8581  001FEE  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8582  001FF0  5197               	movf	(vscp_handleProtocolEvent@bytes_1157+1)& (0+255),w,b
  8583  001FF2  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8584  001FF4  E3CA               	bnc	l9636
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;vscp_firmware.c: 1224: vscp_page_select = page_save;
  8588  001FF6  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8589  001FFA  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8590  001FFE  D079               	goto	l1266
  8591  002000                     l9658:
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;vscp_firmware.c: 1231: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8595  002000  51BC               	movf	_vscp_nickname& (0+255),w,b
  8596  002002  EE20  F0C4         	lfsr	2,_vscp_imsg+6
  8597  002006  62DF               	cpfseq	indf2,c
  8598  002008  D074               	goto	l1266
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;vscp_firmware.c: 1233: uint8_t i;
  8602                           ;vscp_firmware.c: 1234: uint16_t page_save;
  8603                           ;vscp_firmware.c: 1237: page_save = vscp_page_select;
  8604  00200A  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1162
  8605  00200E  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1162+1
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;vscp_firmware.c: 1241: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8609  002012  D870               	call	PL28	;call to abstracted procedure
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;vscp_firmware.c: 1243: for (i = vscp_imsg.data[ 3 ];
  8613  002014  C0C7  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1161
  8614                           
  8615                           ;vscp_firmware.c: 1246: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8616                           ;vscp_firmware.c: 1247: i++) {
  8617  002018  D014               	goto	l9670
  8618  00201A                     l9666:
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;vscp_firmware.c: 1248: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8622                           ;vscp_firmware.c: 1249: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8623  00201A  51C7               	movf	(_vscp_imsg+9)& (0+255),w,b
  8624  00201C  08C8               	sublw	low (_vscp_imsg+10)
  8625  00201E  2592               	addwf	vscp_handleProtocolEvent@i_1161& (0+255),w,b
  8626  002020  6ED9               	movwf	fsr2l,c
  8627  002022  6ADA               	clrf	fsr2h,c
  8628  002024  50DF               	movf	indf2,w,c
  8629  002026  6E27               	movwf	?_vscp_writeRegister,c
  8630  002028  5192               	movf	vscp_handleProtocolEvent@i_1161& (0+255),w,b
  8631  00202A  EC27  F028         	call	_vscp_writeRegister
  8632  00202E  0100               	movlb	0	; () banked
  8633  002030  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8634  002032  51C7               	movf	(_vscp_imsg+9)& (0+255),w,b
  8635  002034  08D5               	sublw	low (_vscp_omsg+9)
  8636  002036  2592               	addwf	vscp_handleProtocolEvent@i_1161& (0+255),w,b
  8637  002038  6ED9               	movwf	fsr2l,c
  8638  00203A  6ADA               	clrf	fsr2h,c
  8639  00203C  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8640                           
  8641                           ; BSR set to: 0
  8642  002040  2B92               	incf	vscp_handleProtocolEvent@i_1161& (0+255),f,b
  8643  002042                     l9670:
  8644                           
  8645                           ; BSR set to: 0
  8646  002042  51BE               	movf	_vscp_imsg& (0+255),w,b
  8647  002044  0B0F               	andlw	15
  8648  002046  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8649  002048  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8650  00204A  51C7               	movf	(_vscp_imsg+9)& (0+255),w,b
  8651  00204C  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8652  00204E  0E00               	movlw	0
  8653  002050  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8654  002052  0EFC               	movlw	252
  8655  002054  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8656  002056  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8657  002058  0EFF               	movlw	255
  8658  00205A  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8659  00205C  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8660  00205E  5192               	movf	vscp_handleProtocolEvent@i_1161& (0+255),w,b
  8661  002060  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8662  002062  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8663  002064  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8664  002066  0A80               	xorlw	128
  8665  002068  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8666  00206A  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8667  00206C  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8668  00206E  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8669  002070  0A80               	xorlw	128
  8670  002072  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8671  002074  E3D2               	bnc	l9666
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;vscp_firmware.c: 1250: }
  8675                           ;vscp_firmware.c: 1253: vscp_page_select = page_save;
  8676  002076  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1162,_vscp_page_select
  8677  00207A  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1162+1,_vscp_page_select+1
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;vscp_firmware.c: 1255: vscp_omsg.priority = 0x07;
  8681  00207E  0E07               	movlw	7
  8682  002080  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8683                           
  8684                           ; BSR set to: 0
  8685                           ;vscp_firmware.c: 1256: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8686  002082  51BE               	movf	_vscp_imsg& (0+255),w,b
  8687  002084  0B0F               	andlw	15
  8688  002086  0F80               	addlw	128
  8689  002088  6FCC               	movwf	_vscp_omsg& (0+255),b
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;vscp_firmware.c: 1257: vscp_omsg.vscp_class = 0;
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_type = 39;
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;vscp_firmware.c: 1259: vscp_omsg.data[0] = 0;
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;vscp_firmware.c: 1260: vscp_omsg.data[1] = vscp_imsg.data[1];
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;vscp_firmware.c: 1261: vscp_omsg.data[2] = vscp_imsg.data[2];
  8705  00208A  D840               	call	PL36	;call to abstracted procedure
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;vscp_firmware.c: 1262: vscp_omsg.data[3] = vscp_imsg.data[3];
  8709  00208C  C0C7  F0D4         	movff	_vscp_imsg+9,_vscp_omsg+8
  8710  002090  D56E               	goto	l9300
  8711  002092                     l9692:
  8712                           
  8713                           ; BSR set to: 0
  8714  002092  51C2               	movf	(_vscp_imsg+4)& (0+255),w,b
  8715                           
  8716                           ; Switch size 1, requested type "space"
  8717                           ; Number of cases is 16, Range of values is 1 to 38
  8718                           ; switch strategies available:
  8719                           ; Name         Instructions Cycles
  8720                           ; simple_byte           49    25 (average)
  8721                           ;	Chosen strategy is simple_byte
  8722  002094  0A01               	xorlw	1	; case 1
  8723  002096  E101 D542          	bz	l9274
  8724  00209A  0A03               	xorlw	3	; case 2
  8725  00209C  E101 D542          	bz	l9276
  8726  0020A0  0A04               	xorlw	4	; case 6
  8727  0020A2  E101 D542          	bz	l9278
  8728  0020A6  0A0E               	xorlw	14	; case 8
  8729  0020A8  E101 D542          	bz	l9280
  8730  0020AC  0A01               	xorlw	1	; case 9
  8731  0020AE  E101 D542          	bz	l9282
  8732  0020B2  0A02               	xorlw	2	; case 11
  8733  0020B4  E101 D562          	bz	l9316
  8734  0020B8  0A07               	xorlw	7	; case 12
  8735  0020BA  E101 D578          	bz	l9350
  8736  0020BE  0A1B               	xorlw	27	; case 23
  8737  0020C0  E101 D60D          	bz	l9408
  8738  0020C4  0A0F               	xorlw	15	; case 24
  8739  0020C6  E101 D621          	bz	l9414
  8740  0020CA  0A01               	xorlw	1	; case 25
  8741  0020CC  E101 D673          	bz	l9448
  8742  0020D0  0A04               	xorlw	4	; case 29
  8743  0020D2  E101 D69E          	bz	l9474
  8744  0020D6  0A03               	xorlw	3	; case 30
  8745  0020D8  E101 D6AB          	bz	l9490
  8746  0020DC  0A01               	xorlw	1	; case 31
  8747  0020DE  E101 D6B8          	bz	l9506
  8748  0020E2  0A3E               	xorlw	62	; case 33
  8749  0020E4  E101 D716          	bz	l9592
  8750  0020E8  0A04               	xorlw	4	; case 37
  8751  0020EA  E101 D724          	bz	l9602
  8752  0020EE  0A03               	xorlw	3	; case 38
  8753  0020F0  E087               	bz	l9658
  8754  0020F2                     l1266:
  8755  0020F2  0012               	return	
  8756  0020F4                     __end_of_vscp_handleProtocolEvent:
  8757                           	opt stack 0
  8758  0020F4                     PL28:
  8759                           	opt stack 22
  8760  0020F4  51C6               	movf	(_vscp_imsg+8)& (0+255),w,b
  8761  0020F6  C0C5  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8762  0020FA  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8763  0020FC  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8764  002100  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8765  002102  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8766  002104  6E46               	movwf	_vscp_page_select,c
  8767  002106  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8768  002108  6E47               	movwf	_vscp_page_select+1,c
  8769  00210A  0012               	return	
  8770  00210C                     __end_ofPL28:
  8771                           	opt stack 0
  8772  00210C                     PL36:
  8773                           	opt stack 22
  8774  00210C  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  8775  00210E  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  8776  002110  0E27               	movlw	39
  8777  002112  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  8778  002114  6BD1               	clrf	(_vscp_omsg+5)& (0+255),b
  8779  002116  C0C5  F0D2         	movff	_vscp_imsg+7,_vscp_omsg+6
  8780  00211A  C0C6  F0D3         	movff	_vscp_imsg+8,_vscp_omsg+7
  8781  00211E  0012               	return	
  8782  002120                     __end_ofPL36:
  8783                           	opt stack 0
  8784  002120                     PL76:
  8785                           	opt stack 22
  8786  002120  0E07               	movlw	7
  8787  002122  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
  8788  002124  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
  8789  002126  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
  8790  002128  0E1A               	movlw	26
  8791  00212A  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
  8792  00212C  0C1A               	retlw	26
  8793  00212E                     __end_ofPL76:
  8794                           	opt stack 0
  8795  00212E                     PL88:
  8796                           	opt stack 22
  8797  00212E  C098  F0D1         	movff	vscp_handleProtocolEvent@i_1153,_vscp_omsg+5
  8798  002132  0E01               	movlw	1
  8799  002134  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8800  002136  0C01               	retlw	1
  8801  002138                     __end_ofPL88:
  8802                           	opt stack 0
  8803                           tblptru	equ	0xFF8
  8804                           tblptrh	equ	0xFF7
  8805                           tblptrl	equ	0xFF6
  8806                           tablat	equ	0xFF5
  8807                           prodh	equ	0xFF4
  8808                           prodl	equ	0xFF3
  8809                           intcon	equ	0xFF2
  8810                           postinc0	equ	0xFEE
  8811                           wreg	equ	0xFE8
  8812                           indf1	equ	0xFE7
  8813                           postdec1	equ	0xFE5
  8814                           fsr1h	equ	0xFE2
  8815                           fsr1l	equ	0xFE1
  8816                           indf2	equ	0xFDF
  8817                           postinc2	equ	0xFDE
  8818                           postdec2	equ	0xFDD
  8819                           plusw2	equ	0xFDB
  8820                           fsr2h	equ	0xFDA
  8821                           fsr2l	equ	0xFD9
  8822                           status	equ	0xFD8
  8823                           
  8824 ;; *************** function ___lbmod *****************
  8825 ;; Defined at:
  8826 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;  dividend        1    wreg     unsigned char 
  8829 ;;  divisor         1   13[COMRAM] unsigned char 
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;  dividend        1   14[COMRAM] unsigned char 
  8832 ;;  rem             1   16[COMRAM] unsigned char 
  8833 ;;  counter         1   15[COMRAM] unsigned char 
  8834 ;; Return value:  Size  Location     Type
  8835 ;;                  1    wreg      unsigned char 
  8836 ;; Registers used:
  8837 ;;		wreg, status,2, status,0
  8838 ;; Tracked objects:
  8839 ;;		On entry : F/0
  8840 ;;		On exit  : 0/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8843 ;;      Params:         1       0       0       0       0       0       0
  8844 ;;      Locals:         3       0       0       0       0       0       0
  8845 ;;      Temps:          0       0       0       0       0       0       0
  8846 ;;      Totals:         4       0       0       0       0       0       0
  8847 ;;Total ram usage:        4 bytes
  8848 ;; Hardware stack levels used:    1
  8849 ;; Hardware stack levels required when called:    2
  8850 ;; This function calls:
  8851 ;;		Nothing
  8852 ;; This function is called by:
  8853 ;;		_vscp_handleProtocolEvent
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           	psect	text34
  8858  004F46                     __ptext34:
  8859                           	opt stack 0
  8860  004F46                     ___lbmod:
  8861                           	opt stack 27
  8862                           
  8863                           ;incstack = 0
  8864                           ;incstack = 0
  8865                           ;___lbmod@dividend stored from wreg
  8866  004F46  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8867                           
  8868                           ; BSR set to: 0
  8869  004F4A  0E08               	movlw	8
  8870  004F4C  6E10               	movwf	___lbmod@counter,c
  8871                           
  8872                           ; BSR set to: 0
  8873  004F4E  6A11               	clrf	___lbmod@rem,c
  8874  004F50                     l8764:
  8875  004F50  90D8               	bcf	status,0,c
  8876  004F52  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8877  004F54  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8878  004F56  6E11               	movwf	___lbmod@rem,c
  8879  004F58  90D8               	bcf	status,0,c
  8880  004F5A  360F               	rlcf	___lbmod@dividend,f,c
  8881  004F5C  500E               	movf	___lbmod@divisor,w,c
  8882  004F5E  5C11               	subwf	___lbmod@rem,w,c
  8883  004F60  E302               	bnc	l8772
  8884  004F62  500E               	movf	___lbmod@divisor,w,c
  8885  004F64  5E11               	subwf	___lbmod@rem,f,c
  8886  004F66                     l8772:
  8887  004F66  2E10               	decfsz	___lbmod@counter,f,c
  8888  004F68  D7F3               	goto	l8764
  8889  004F6A  5011               	movf	___lbmod@rem,w,c
  8890  004F6C  0012               	return	
  8891  004F6E                     __end_of___lbmod:
  8892                           	opt stack 0
  8893                           tblptru	equ	0xFF8
  8894                           tblptrh	equ	0xFF7
  8895                           tblptrl	equ	0xFF6
  8896                           tablat	equ	0xFF5
  8897                           prodh	equ	0xFF4
  8898                           prodl	equ	0xFF3
  8899                           intcon	equ	0xFF2
  8900                           postinc0	equ	0xFEE
  8901                           wreg	equ	0xFE8
  8902                           indf1	equ	0xFE7
  8903                           postdec1	equ	0xFE5
  8904                           fsr1h	equ	0xFE2
  8905                           fsr1l	equ	0xFE1
  8906                           indf2	equ	0xFDF
  8907                           postinc2	equ	0xFDE
  8908                           postdec2	equ	0xFDD
  8909                           plusw2	equ	0xFDB
  8910                           fsr2h	equ	0xFDA
  8911                           fsr2l	equ	0xFD9
  8912                           status	equ	0xFD8
  8913                           
  8914 ;; *************** function _vscp_writeRegister *****************
  8915 ;; Defined at:
  8916 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  reg             1    wreg     unsigned char 
  8919 ;;  value           1   38[COMRAM] unsigned char 
  8920 ;; Auto vars:     Size  Location     Type
  8921 ;;  reg             1   39[COMRAM] unsigned char 
  8922 ;; Return value:  Size  Location     Type
  8923 ;;                  1    wreg      unsigned char 
  8924 ;; Registers used:
  8925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8926 ;; Tracked objects:
  8927 ;;		On entry : F/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8931 ;;      Params:         1       0       0       0       0       0       0
  8932 ;;      Locals:         1       0       0       0       0       0       0
  8933 ;;      Temps:          0       0       0       0       0       0       0
  8934 ;;      Totals:         2       0       0       0       0       0       0
  8935 ;;Total ram usage:        2 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; Hardware stack levels required when called:    6
  8938 ;; This function calls:
  8939 ;;		_vscp_writeAppReg
  8940 ;;		_vscp_writeStdReg
  8941 ;; This function is called by:
  8942 ;;		_vscp_handleProtocolEvent
  8943 ;; This function uses a non-reentrant model
  8944 ;;
  8945                           
  8946                           	psect	text35
  8947  00504E                     __ptext35:
  8948                           	opt stack 0
  8949  00504E                     _vscp_writeRegister:
  8950                           	opt stack 23
  8951                           
  8952                           ;incstack = 0
  8953                           ;incstack = 0
  8954                           ;vscp_writeRegister@reg stored from wreg
  8955  00504E  CFE8 F028          	movff	wreg,vscp_writeRegister@reg
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  8959  005052  0E7F               	movlw	127
  8960  005054  6428               	cpfsgt	vscp_writeRegister@reg,c
  8961  005056  D006               	goto	l10890
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  8965  005058  C027  F01B         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8966  00505C  5028               	movf	vscp_writeRegister@reg,w,c
  8967  00505E  EC2B  F01E         	call	_vscp_writeStdReg
  8968  005062  D005               	goto	l1146
  8969  005064                     l10890:
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;vscp_firmware.c: 705: else {
  8973                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  8974  005064  C027  F023         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  8975  005068  5028               	movf	vscp_writeRegister@reg,w,c
  8976  00506A  EC37  F003         	call	_vscp_writeAppReg
  8977  00506E                     l1146:
  8978  00506E  0012               	return	
  8979  005070                     __end_of_vscp_writeRegister:
  8980                           	opt stack 0
  8981                           tblptru	equ	0xFF8
  8982                           tblptrh	equ	0xFF7
  8983                           tblptrl	equ	0xFF6
  8984                           tablat	equ	0xFF5
  8985                           prodh	equ	0xFF4
  8986                           prodl	equ	0xFF3
  8987                           intcon	equ	0xFF2
  8988                           postinc0	equ	0xFEE
  8989                           wreg	equ	0xFE8
  8990                           indf1	equ	0xFE7
  8991                           postdec1	equ	0xFE5
  8992                           fsr1h	equ	0xFE2
  8993                           fsr1l	equ	0xFE1
  8994                           indf2	equ	0xFDF
  8995                           postinc2	equ	0xFDE
  8996                           postdec2	equ	0xFDD
  8997                           plusw2	equ	0xFDB
  8998                           fsr2h	equ	0xFDA
  8999                           fsr2l	equ	0xFD9
  9000                           status	equ	0xFD8
  9001                           
  9002 ;; *************** function _vscp_writeStdReg *****************
  9003 ;; Defined at:
  9004 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;  reg             1    wreg     unsigned char 
  9007 ;;  value           1   26[COMRAM] unsigned char 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  reg             1   32[COMRAM] unsigned char 
  9010 ;;  rv              1   31[COMRAM] unsigned char 
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      unsigned char 
  9013 ;; Registers used:
  9014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9015 ;; Tracked objects:
  9016 ;;		On entry : F/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9020 ;;      Params:         1       0       0       0       0       0       0
  9021 ;;      Locals:         2       0       0       0       0       0       0
  9022 ;;      Temps:          4       0       0       0       0       0       0
  9023 ;;      Totals:         7       0       0       0       0       0       0
  9024 ;;Total ram usage:        7 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    5
  9027 ;; This function calls:
  9028 ;;		_vscp_getGUID
  9029 ;;		_vscp_setGUID
  9030 ;;		_vscp_getUserID
  9031 ;;		_vscp_setUserID
  9032 ;;		_vscp_getManufacturerId
  9033 ;;		_vscp_setManufacturerId
  9034 ;;		_vscp_restoreDefaults
  9035 ;; This function is called by:
  9036 ;;		_vscp_writeRegister
  9037 ;;		_vscp_handleProtocolEvent
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text36
  9042  003C56                     __ptext36:
  9043                           	opt stack 0
  9044  003C56                     _vscp_writeStdReg:
  9045                           	opt stack 24
  9046                           
  9047                           ;incstack = 0
  9048                           ;incstack = 0
  9049                           ;vscp_writeStdReg@reg stored from wreg
  9050  003C56  CFE8 F021          	movff	wreg,vscp_writeStdReg@reg
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  9054  003C5A  1C1B               	comf	vscp_writeStdReg@value,w,c
  9055  003C5C  6E20               	movwf	vscp_writeStdReg@rv,c
  9056                           
  9057                           ; BSR set to: 0
  9058                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  9059                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  9060  003C5E  0E83               	movlw	131
  9061  003C60  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9062  003C62  D00E               	goto	l10902
  9063                           
  9064                           ; BSR set to: 0
  9065  003C64  0E89               	movlw	137
  9066  003C66  6021               	cpfslt	vscp_writeStdReg@reg,c
  9067  003C68  D00B               	goto	l10902
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  9071  003C6A  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9072  003C6E  5021               	movf	vscp_writeStdReg@reg,w,c
  9073  003C70  0F7C               	addlw	124
  9074  003C72  EC7E  F028         	call	_vscp_setUserID
  9075                           
  9076                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  9077  003C76  5021               	movf	vscp_writeStdReg@reg,w,c
  9078  003C78  0F7C               	addlw	124
  9079  003C7A  ECAC  F028         	call	_vscp_getUserID
  9080  003C7E  D06B               	goto	L19
  9081  003C80                     l10902:
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  9085  003C80  5021               	movf	vscp_writeStdReg@reg,w,c
  9086  003C82  0A92               	xorlw	146
  9087  003C84  E10D               	bnz	l10908
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9091  003C86  501B               	movf	vscp_writeStdReg@value,w,c
  9092  003C88  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9093  003C8A  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9094  003C8C  5046               	movf	_vscp_page_select,w,c
  9095  003C8E  6E1E               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9096  003C90  6A1F               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9097  003C92  101C               	iorwf	??_vscp_writeStdReg,w,c
  9098  003C94  6E46               	movwf	_vscp_page_select,c
  9099  003C96  501D               	movf	??_vscp_writeStdReg+1,w,c
  9100  003C98  101F               	iorwf	??_vscp_writeStdReg+3,w,c
  9101  003C9A  6E47               	movwf	_vscp_page_select+1,c
  9102                           
  9103                           ; BSR set to: 0
  9104                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  9105  003C9C  5047               	movf	_vscp_page_select+1,w,c
  9106  003C9E  D05B               	goto	L19
  9107  003CA0                     l10908:
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  9111  003CA0  5021               	movf	vscp_writeStdReg@reg,w,c
  9112  003CA2  0A93               	xorlw	147
  9113  003CA4  E10B               	bnz	l10914
  9114                           
  9115                           ; BSR set to: 0
  9116                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9117  003CA6  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9118  003CA8  5047               	movf	_vscp_page_select+1,w,c
  9119  003CAA  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9120  003CAC  501B               	movf	vscp_writeStdReg@value,w,c
  9121  003CAE  101C               	iorwf	??_vscp_writeStdReg,w,c
  9122  003CB0  6E46               	movwf	_vscp_page_select,c
  9123  003CB2  501D               	movf	??_vscp_writeStdReg+1,w,c
  9124  003CB4  6E47               	movwf	_vscp_page_select+1,c
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  9128  003CB6  C046  F020         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9129                           
  9130                           ;vscp_firmware.c: 737: }
  9131  003CBA  D050               	goto	l10956
  9132  003CBC                     l10914:
  9133                           
  9134                           ; BSR set to: 0
  9135                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  9136  003CBC  0E88               	movlw	136
  9137  003CBE  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9138  003CC0  D019               	goto	l10926
  9139                           
  9140                           ; BSR set to: 0
  9141  003CC2  0E91               	movlw	145
  9142  003CC4  6021               	cpfslt	vscp_writeStdReg@reg,c
  9143  003CC6  D016               	goto	l10926
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9147                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  9148  003CC8  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9149  003CCC  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9150  003CD0  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9151  003CD2  281D               	incf	??_vscp_writeStdReg+1,w,c
  9152  003CD4  E102               	bnz	l10922
  9153                           
  9154                           ; BSR set to: 0
  9155  003CD6  2846               	incf	_vscp_page_select,w,c
  9156  003CD8  E002               	bz	l10924
  9157  003CDA                     l10922:
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;vscp_firmware.c: 747: rv = ~value;
  9161  003CDA  1C1B               	comf	vscp_writeStdReg@value,w,c
  9162  003CDC  D03C               	goto	L19
  9163  003CDE                     l10924:
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;vscp_firmware.c: 749: else {
  9167                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  9168  003CDE  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9169  003CE2  5021               	movf	vscp_writeStdReg@reg,w,c
  9170  003CE4  0F77               	addlw	119
  9171  003CE6  EC72  F028         	call	_vscp_setManufacturerId
  9172                           
  9173                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  9174  003CEA  5021               	movf	vscp_writeStdReg@reg,w,c
  9175  003CEC  0F77               	addlw	119
  9176  003CEE  ECA2  F028         	call	_vscp_getManufacturerId
  9177  003CF2  D031               	goto	L19
  9178  003CF4                     l10926:
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9182  003CF4  0ECF               	movlw	207
  9183  003CF6  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9184  003CF8  D017               	goto	l10938
  9185                           
  9186                           ; BSR set to: 0
  9187  003CFA  0EE0               	movlw	224
  9188  003CFC  6021               	cpfslt	vscp_writeStdReg@reg,c
  9189  003CFE  D014               	goto	l10938
  9190                           
  9191                           ; BSR set to: 0
  9192                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9193                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  9194  003D00  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9195  003D04  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9196  003D08  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9197  003D0A  281D               	incf	??_vscp_writeStdReg+1,w,c
  9198  003D0C  E1E6               	bnz	l10922
  9199                           
  9200                           ; BSR set to: 0
  9201  003D0E  2846               	incf	_vscp_page_select,w,c
  9202  003D10  E1E4               	bnz	l10922
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;vscp_firmware.c: 762: else {
  9206                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  9207  003D12  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9208  003D16  5021               	movf	vscp_writeStdReg@reg,w,c
  9209  003D18  0F30               	addlw	48
  9210  003D1A  EC38  F028         	call	_vscp_setGUID
  9211                           
  9212                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  9213  003D1E  5021               	movf	vscp_writeStdReg@reg,w,c
  9214  003D20  0F30               	addlw	48
  9215  003D22  ECB6  F028         	call	_vscp_getGUID
  9216  003D26  D017               	goto	L19
  9217  003D28                     l10938:
  9218                           
  9219                           ; BSR set to: 0
  9220                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  9221  003D28  5021               	movf	vscp_writeStdReg@reg,w,c
  9222  003D2A  0AA2               	xorlw	162
  9223  003D2C  E1D6               	bnz	l10922
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  9227  003D2E  501B               	movf	vscp_writeStdReg@value,w,c
  9228  003D30  0A55               	xorlw	85
  9229  003D32  E105               	bnz	l10946
  9230                           
  9231                           ; BSR set to: 0
  9232                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  9233  003D34  0101               	movlb	1	; () banked
  9234  003D36  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9235  003D38  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9236                           
  9237                           ; BSR set to: 1
  9238                           ;vscp_firmware.c: 771: rv = 0x55;
  9239  003D3A  0E55               	movlw	85
  9240  003D3C  D00C               	goto	L19
  9241  003D3E                     l10946:
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  9245  003D3E  501B               	movf	vscp_writeStdReg@value,w,c
  9246  003D40  0AAA               	xorlw	170
  9247  003D42  E10C               	bnz	l10956
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  9251  003D44  0EE8               	movlw	232
  9252  003D46  0101               	movlb	1	; () banked
  9253  003D48  5D1C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9254  003D4A  0E03               	movlw	3
  9255  003D4C  591D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9256  003D4E  E205               	bc	l1172
  9257                           
  9258                           ; BSR set to: 1
  9259                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  9260  003D50  EC0C  F029         	call	_vscp_restoreDefaults	;wreg free
  9261                           
  9262                           ; BSR set to: 1
  9263                           ;vscp_firmware.c: 776: rv = 0xaa;
  9264  003D54  0EAA               	movlw	170
  9265  003D56                     L19:
  9266  003D56  6E20               	movwf	vscp_writeStdReg@rv,c
  9267                           
  9268                           ;vscp_firmware.c: 777: }
  9269  003D58  D001               	goto	l10956
  9270  003D5A                     l1172:
  9271                           
  9272                           ; BSR set to: 1
  9273                           ;vscp_firmware.c: 778: else {
  9274                           ;vscp_firmware.c: 779: rv = 0;
  9275  003D5A  6A20               	clrf	vscp_writeStdReg@rv,c
  9276  003D5C                     l10956:
  9277                           
  9278                           ;vscp_firmware.c: 787: }
  9279                           ;vscp_firmware.c: 789: return rv;
  9280  003D5C  5020               	movf	vscp_writeStdReg@rv,w,c
  9281  003D5E  0012               	return	
  9282  003D60                     __end_of_vscp_writeStdReg:
  9283                           	opt stack 0
  9284                           tblptru	equ	0xFF8
  9285                           tblptrh	equ	0xFF7
  9286                           tblptrl	equ	0xFF6
  9287                           tablat	equ	0xFF5
  9288                           prodh	equ	0xFF4
  9289                           prodl	equ	0xFF3
  9290                           intcon	equ	0xFF2
  9291                           postinc0	equ	0xFEE
  9292                           wreg	equ	0xFE8
  9293                           indf1	equ	0xFE7
  9294                           postdec1	equ	0xFE5
  9295                           fsr1h	equ	0xFE2
  9296                           fsr1l	equ	0xFE1
  9297                           indf2	equ	0xFDF
  9298                           postinc2	equ	0xFDE
  9299                           postdec2	equ	0xFDD
  9300                           plusw2	equ	0xFDB
  9301                           fsr2h	equ	0xFDA
  9302                           fsr2l	equ	0xFD9
  9303                           status	equ	0xFD8
  9304                           
  9305 ;; *************** function _vscp_restoreDefaults *****************
  9306 ;; Defined at:
  9307 ;;		line 2832 in file "../main.c"
  9308 ;; Parameters:    Size  Location     Type
  9309 ;;		None
  9310 ;; Auto vars:     Size  Location     Type
  9311 ;;		None
  9312 ;; Return value:  Size  Location     Type
  9313 ;;		None               void
  9314 ;; Registers used:
  9315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9316 ;; Tracked objects:
  9317 ;;		On entry : F/1
  9318 ;;		On exit  : F/1
  9319 ;;		Unchanged: 0/0
  9320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9321 ;;      Params:         0       0       0       0       0       0       0
  9322 ;;      Locals:         0       0       0       0       0       0       0
  9323 ;;      Temps:          0       0       0       0       0       0       0
  9324 ;;      Totals:         0       0       0       0       0       0       0
  9325 ;;Total ram usage:        0 bytes
  9326 ;; Hardware stack levels used:    1
  9327 ;; Hardware stack levels required when called:    4
  9328 ;; This function calls:
  9329 ;;		_init_app_eeprom
  9330 ;;		_init_app_ram
  9331 ;; This function is called by:
  9332 ;;		_vscp_writeStdReg
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336                           	psect	text37
  9337  005218                     __ptext37:
  9338                           	opt stack 0
  9339  005218                     _vscp_restoreDefaults:
  9340                           	opt stack 24
  9341                           
  9342                           ; BSR set to: 1
  9343                           ;main.c: 2833: init_app_eeprom();
  9344                           
  9345                           ;incstack = 0
  9346                           ;incstack = 0
  9347  005218  EC9C  F010         	call	_init_app_eeprom	;wreg free
  9348                           
  9349                           ;main.c: 2834: init_app_ram();
  9350  00521C  EFC9  F026         	goto	_init_app_ram	;wreg free
  9351  005220                     __end_of_vscp_restoreDefaults:
  9352                           	opt stack 0
  9353                           tblptru	equ	0xFF8
  9354                           tblptrh	equ	0xFF7
  9355                           tblptrl	equ	0xFF6
  9356                           tablat	equ	0xFF5
  9357                           prodh	equ	0xFF4
  9358                           prodl	equ	0xFF3
  9359                           intcon	equ	0xFF2
  9360                           postinc0	equ	0xFEE
  9361                           wreg	equ	0xFE8
  9362                           indf1	equ	0xFE7
  9363                           postdec1	equ	0xFE5
  9364                           fsr1h	equ	0xFE2
  9365                           fsr1l	equ	0xFE1
  9366                           indf2	equ	0xFDF
  9367                           postinc2	equ	0xFDE
  9368                           postdec2	equ	0xFDD
  9369                           plusw2	equ	0xFDB
  9370                           fsr2h	equ	0xFDA
  9371                           fsr2l	equ	0xFD9
  9372                           status	equ	0xFD8
  9373                           
  9374 ;; *************** function _init_app_ram *****************
  9375 ;; Defined at:
  9376 ;;		line 976 in file "../main.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;		None
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;  i               1   13[COMRAM] unsigned char 
  9381 ;; Return value:  Size  Location     Type
  9382 ;;		None               void
  9383 ;; Registers used:
  9384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9385 ;; Tracked objects:
  9386 ;;		On entry : 0/1
  9387 ;;		On exit  : F/1
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9390 ;;      Params:         0       0       0       0       0       0       0
  9391 ;;      Locals:         1       0       0       0       0       0       0
  9392 ;;      Temps:          0       0       0       0       0       0       0
  9393 ;;      Totals:         1       0       0       0       0       0       0
  9394 ;;Total ram usage:        1 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    2
  9397 ;; This function calls:
  9398 ;;		Nothing
  9399 ;; This function is called by:
  9400 ;;		_vscp_restoreDefaults
  9401 ;; This function uses a non-reentrant model
  9402 ;;
  9403                           
  9404                           	psect	text38
  9405  004D92                     __ptext38:
  9406                           	opt stack 0
  9407  004D92                     _init_app_ram:
  9408                           	opt stack 25
  9409                           
  9410                           ;main.c: 977: char i;
  9411                           ;main.c: 979: measurement_clock = 0;
  9412                           
  9413                           ; BSR set to: 1
  9414                           ;incstack = 0
  9415                           ;incstack = 0
  9416  004D92  0101               	movlb	1	; () banked
  9417  004D94  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
  9418  004D96  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  9419  004D98  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  9420  004D9A  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  9421                           
  9422                           ;main.c: 980: seconds = 0;
  9423  004D9C  6A4C               	clrf	_seconds,c
  9424                           
  9425                           ;main.c: 983: for (i = 0; i < 6; i++) {
  9426  004D9E  6A0E               	clrf	init_app_ram@i,c
  9427  004DA0                     l7172:
  9428                           
  9429                           ; BSR set to: 1
  9430                           ;main.c: 984: seconds_temp[i] = 0;
  9431  004DA0  0E0C               	movlw	low _seconds_temp
  9432  004DA2  240E               	addwf	init_app_ram@i,w,c
  9433  004DA4  6ED9               	movwf	fsr2l,c
  9434  004DA6  6ADA               	clrf	fsr2h,c
  9435  004DA8  0E01               	movlw	high _seconds_temp
  9436  004DAA  22DA               	addwfc	fsr2h,f,c
  9437  004DAC  6ADF               	clrf	indf2,c
  9438                           
  9439                           ; BSR set to: 1
  9440                           ;main.c: 985: current_temp[i] = 0;
  9441  004DAE  500E               	movf	init_app_ram@i,w,c
  9442  004DB0  0D02               	mullw	2
  9443  004DB2  EC80  F015         	call	PL2	;call to abstracted procedure
  9444  004DB6  6ADE               	clrf	postinc2,c
  9445  004DB8  6ADD               	clrf	postdec2,c
  9446                           
  9447                           ; BSR set to: 1
  9448  004DBA  2A0E               	incf	init_app_ram@i,f,c
  9449                           
  9450                           ; BSR set to: 1
  9451  004DBC  0E05               	movlw	5
  9452  004DBE  640E               	cpfsgt	init_app_ram@i,c
  9453  004DC0  D7EF               	goto	l7172
  9454                           
  9455                           ; BSR set to: 1
  9456                           ;main.c: 986: }
  9457                           ;main.c: 989: adc_conversion_flags = 0;
  9458  004DC2  6A48               	clrf	_adc_conversion_flags,c
  9459                           
  9460                           ;main.c: 992: adc_series_counter = 0;
  9461  004DC4  6A49               	clrf	_adc_series_counter,c
  9462                           
  9463                           ;main.c: 995: low_alarm = 0;
  9464  004DC6  6A4B               	clrf	_low_alarm,c
  9465                           
  9466                           ;main.c: 998: high_alarm = 0;
  9467  004DC8  6A4A               	clrf	_high_alarm,c
  9468                           
  9469                           ; BSR set to: 1
  9470  004DCA  0012               	return	
  9471  004DCC                     __end_of_init_app_ram:
  9472                           	opt stack 0
  9473                           tblptru	equ	0xFF8
  9474                           tblptrh	equ	0xFF7
  9475                           tblptrl	equ	0xFF6
  9476                           tablat	equ	0xFF5
  9477                           prodh	equ	0xFF4
  9478                           prodl	equ	0xFF3
  9479                           intcon	equ	0xFF2
  9480                           postinc0	equ	0xFEE
  9481                           wreg	equ	0xFE8
  9482                           indf1	equ	0xFE7
  9483                           postdec1	equ	0xFE5
  9484                           fsr1h	equ	0xFE2
  9485                           fsr1l	equ	0xFE1
  9486                           indf2	equ	0xFDF
  9487                           postinc2	equ	0xFDE
  9488                           postdec2	equ	0xFDD
  9489                           plusw2	equ	0xFDB
  9490                           fsr2h	equ	0xFDA
  9491                           fsr2l	equ	0xFD9
  9492                           status	equ	0xFD8
  9493                           
  9494 ;; *************** function _init_app_eeprom *****************
  9495 ;; Defined at:
  9496 ;;		line 1011 in file "../main.c"
  9497 ;; Parameters:    Size  Location     Type
  9498 ;;		None
  9499 ;; Auto vars:     Size  Location     Type
  9500 ;;		None
  9501 ;; Return value:  Size  Location     Type
  9502 ;;		None               void
  9503 ;; Registers used:
  9504 ;;		wreg, status,2, cstack
  9505 ;; Tracked objects:
  9506 ;;		On entry : 0/0
  9507 ;;		On exit  : 0/0
  9508 ;;		Unchanged: 0/0
  9509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9510 ;;      Params:         0       0       0       0       0       0       0
  9511 ;;      Locals:         0       0       0       0       0       0       0
  9512 ;;      Temps:          0       0       0       0       0       0       0
  9513 ;;      Totals:         0       0       0       0       0       0       0
  9514 ;;Total ram usage:        0 bytes
  9515 ;; Hardware stack levels used:    1
  9516 ;; Hardware stack levels required when called:    3
  9517 ;; This function calls:
  9518 ;;		_writeEEPROM
  9519 ;; This function is called by:
  9520 ;;		_main
  9521 ;;		_vscp_restoreDefaults
  9522 ;; This function uses a non-reentrant model
  9523 ;;
  9524                           
  9525                           	psect	text39
  9526  002138                     __ptext39:
  9527                           	opt stack 0
  9528  002138                     _init_app_eeprom:
  9529                           	opt stack 24
  9530                           
  9531                           ;main.c: 1013: writeEEPROM( 0x41, 0 );
  9532                           
  9533                           ; BSR set to: 1
  9534                           ;incstack = 0
  9535                           ;incstack = 0
  9536  002138  6A0F               	clrf	?_writeEEPROM+1,c
  9537  00213A  0E41               	movlw	65
  9538  00213C  6E0E               	movwf	?_writeEEPROM,c
  9539  00213E  0E00               	movlw	0
  9540  002140  6A10               	clrf	?_writeEEPROM+2,c
  9541  002142  ECDE  F027         	call	_writeEEPROM	;wreg free
  9542                           
  9543                           ;main.c: 1014: writeEEPROM( 0x41, 0 );
  9544  002146  6A0F               	clrf	?_writeEEPROM+1,c
  9545  002148  0E41               	movlw	65
  9546  00214A  6E0E               	movwf	?_writeEEPROM,c
  9547  00214C  0E00               	movlw	0
  9548  00214E  6A10               	clrf	?_writeEEPROM+2,c
  9549  002150  ECDE  F027         	call	_writeEEPROM	;wreg free
  9550                           
  9551                           ;main.c: 1016: writeEEPROM(0x43, 0b00000001);
  9552  002154  6A0F               	clrf	?_writeEEPROM+1,c
  9553  002156  0E43               	movlw	67
  9554  002158  6E0E               	movwf	?_writeEEPROM,c
  9555  00215A  0E01               	movlw	1
  9556  00215C  6E10               	movwf	?_writeEEPROM+2,c
  9557  00215E  ECDE  F027         	call	_writeEEPROM	;wreg free
  9558                           
  9559                           ;main.c: 1017: writeEEPROM(0x44, 0b00000001);
  9560  002162  6A0F               	clrf	?_writeEEPROM+1,c
  9561  002164  0E44               	movlw	68
  9562  002166  6E0E               	movwf	?_writeEEPROM,c
  9563  002168  0E01               	movlw	1
  9564  00216A  6E10               	movwf	?_writeEEPROM+2,c
  9565  00216C  ECDE  F027         	call	_writeEEPROM	;wreg free
  9566                           
  9567                           ;main.c: 1018: writeEEPROM(0x45, 0b00000001);
  9568  002170  6A0F               	clrf	?_writeEEPROM+1,c
  9569  002172  0E45               	movlw	69
  9570  002174  6E0E               	movwf	?_writeEEPROM,c
  9571  002176  0E01               	movlw	1
  9572  002178  6E10               	movwf	?_writeEEPROM+2,c
  9573  00217A  ECDE  F027         	call	_writeEEPROM	;wreg free
  9574                           
  9575                           ;main.c: 1019: writeEEPROM(0x46, 0b00000001);
  9576  00217E  6A0F               	clrf	?_writeEEPROM+1,c
  9577  002180  0E46               	movlw	70
  9578  002182  6E0E               	movwf	?_writeEEPROM,c
  9579  002184  0E01               	movlw	1
  9580  002186  6E10               	movwf	?_writeEEPROM+2,c
  9581  002188  ECDE  F027         	call	_writeEEPROM	;wreg free
  9582                           
  9583                           ;main.c: 1020: writeEEPROM(0x47, 0b00000001);
  9584  00218C  6A0F               	clrf	?_writeEEPROM+1,c
  9585  00218E  0E47               	movlw	71
  9586  002190  6E0E               	movwf	?_writeEEPROM,c
  9587  002192  0E01               	movlw	1
  9588  002194  6E10               	movwf	?_writeEEPROM+2,c
  9589  002196  ECDE  F027         	call	_writeEEPROM	;wreg free
  9590                           
  9591                           ;main.c: 1021: writeEEPROM(0x48, 0b00000001);
  9592  00219A  6A0F               	clrf	?_writeEEPROM+1,c
  9593  00219C  0E48               	movlw	72
  9594  00219E  6E0E               	movwf	?_writeEEPROM,c
  9595  0021A0  0E01               	movlw	1
  9596  0021A2  6E10               	movwf	?_writeEEPROM+2,c
  9597  0021A4  ECDE  F027         	call	_writeEEPROM	;wreg free
  9598                           
  9599                           ;main.c: 1023: writeEEPROM(0x49, 30);
  9600  0021A8  6A0F               	clrf	?_writeEEPROM+1,c
  9601  0021AA  0E49               	movlw	73
  9602  0021AC  6E0E               	movwf	?_writeEEPROM,c
  9603  0021AE  0E1E               	movlw	30
  9604  0021B0  6E10               	movwf	?_writeEEPROM+2,c
  9605  0021B2  ECDE  F027         	call	_writeEEPROM	;wreg free
  9606                           
  9607                           ;main.c: 1024: writeEEPROM(0x4A, 0);
  9608  0021B6  6A0F               	clrf	?_writeEEPROM+1,c
  9609  0021B8  0E4A               	movlw	74
  9610  0021BA  6E0E               	movwf	?_writeEEPROM,c
  9611  0021BC  0E00               	movlw	0
  9612  0021BE  6A10               	clrf	?_writeEEPROM+2,c
  9613  0021C0  ECDE  F027         	call	_writeEEPROM	;wreg free
  9614                           
  9615                           ;main.c: 1025: writeEEPROM(0x4B, 0);
  9616  0021C4  6A0F               	clrf	?_writeEEPROM+1,c
  9617  0021C6  0E4B               	movlw	75
  9618  0021C8  6E0E               	movwf	?_writeEEPROM,c
  9619  0021CA  0E00               	movlw	0
  9620  0021CC  6A10               	clrf	?_writeEEPROM+2,c
  9621  0021CE  ECDE  F027         	call	_writeEEPROM	;wreg free
  9622                           
  9623                           ;main.c: 1026: writeEEPROM(0x4C, 0);
  9624  0021D2  6A0F               	clrf	?_writeEEPROM+1,c
  9625  0021D4  0E4C               	movlw	76
  9626  0021D6  6E0E               	movwf	?_writeEEPROM,c
  9627  0021D8  0E00               	movlw	0
  9628  0021DA  6A10               	clrf	?_writeEEPROM+2,c
  9629  0021DC  ECDE  F027         	call	_writeEEPROM	;wreg free
  9630                           
  9631                           ;main.c: 1027: writeEEPROM(0x4D, 0);
  9632  0021E0  6A0F               	clrf	?_writeEEPROM+1,c
  9633  0021E2  0E4D               	movlw	77
  9634  0021E4  6E0E               	movwf	?_writeEEPROM,c
  9635  0021E6  0E00               	movlw	0
  9636  0021E8  6A10               	clrf	?_writeEEPROM+2,c
  9637  0021EA  ECDE  F027         	call	_writeEEPROM	;wreg free
  9638                           
  9639                           ;main.c: 1028: writeEEPROM(0x4E, 0);
  9640  0021EE  6A0F               	clrf	?_writeEEPROM+1,c
  9641  0021F0  0E4E               	movlw	78
  9642  0021F2  6E0E               	movwf	?_writeEEPROM,c
  9643  0021F4  0E00               	movlw	0
  9644  0021F6  6A10               	clrf	?_writeEEPROM+2,c
  9645  0021F8  ECDE  F027         	call	_writeEEPROM	;wreg free
  9646                           
  9647                           ;main.c: 1032: writeEEPROM(0x4F, 0x0F);
  9648  0021FC  6A0F               	clrf	?_writeEEPROM+1,c
  9649  0021FE  0E4F               	movlw	79
  9650  002200  6E0E               	movwf	?_writeEEPROM,c
  9651  002202  0E0F               	movlw	15
  9652  002204  6E10               	movwf	?_writeEEPROM+2,c
  9653  002206  ECDE  F027         	call	_writeEEPROM	;wreg free
  9654                           
  9655                           ;main.c: 1033: writeEEPROM(0x50, 0x68);
  9656  00220A  6A0F               	clrf	?_writeEEPROM+1,c
  9657  00220C  0E50               	movlw	80
  9658  00220E  6E0E               	movwf	?_writeEEPROM,c
  9659  002210  0E68               	movlw	104
  9660  002212  6E10               	movwf	?_writeEEPROM+2,c
  9661  002214  ECDE  F027         	call	_writeEEPROM	;wreg free
  9662                           
  9663                           ;main.c: 1035: writeEEPROM(0x51, 0x0D);
  9664  002218  6A0F               	clrf	?_writeEEPROM+1,c
  9665  00221A  0E51               	movlw	81
  9666  00221C  6E0E               	movwf	?_writeEEPROM,c
  9667  00221E  0E0D               	movlw	13
  9668  002220  6E10               	movwf	?_writeEEPROM+2,c
  9669  002222  ECDE  F027         	call	_writeEEPROM	;wreg free
  9670                           
  9671                           ;main.c: 1036: writeEEPROM(0x52, 0x7F);
  9672  002226  6A0F               	clrf	?_writeEEPROM+1,c
  9673  002228  0E52               	movlw	82
  9674  00222A  6E0E               	movwf	?_writeEEPROM,c
  9675  00222C  0E7F               	movlw	127
  9676  00222E  6E10               	movwf	?_writeEEPROM+2,c
  9677  002230  ECDE  F027         	call	_writeEEPROM	;wreg free
  9678                           
  9679                           ;main.c: 1038: writeEEPROM(0x53, 0x0D);
  9680  002234  6A0F               	clrf	?_writeEEPROM+1,c
  9681  002236  0E53               	movlw	83
  9682  002238  6E0E               	movwf	?_writeEEPROM,c
  9683  00223A  0E0D               	movlw	13
  9684  00223C  6E10               	movwf	?_writeEEPROM+2,c
  9685  00223E  ECDE  F027         	call	_writeEEPROM	;wreg free
  9686                           
  9687                           ;main.c: 1039: writeEEPROM(0x54, 0x7F);
  9688  002242  6A0F               	clrf	?_writeEEPROM+1,c
  9689  002244  0E54               	movlw	84
  9690  002246  6E0E               	movwf	?_writeEEPROM,c
  9691  002248  0E7F               	movlw	127
  9692  00224A  6E10               	movwf	?_writeEEPROM+2,c
  9693  00224C  ECDE  F027         	call	_writeEEPROM	;wreg free
  9694                           
  9695                           ;main.c: 1041: writeEEPROM(0x55, 0x0D);
  9696  002250  6A0F               	clrf	?_writeEEPROM+1,c
  9697  002252  0E55               	movlw	85
  9698  002254  6E0E               	movwf	?_writeEEPROM,c
  9699  002256  0E0D               	movlw	13
  9700  002258  6E10               	movwf	?_writeEEPROM+2,c
  9701  00225A  ECDE  F027         	call	_writeEEPROM	;wreg free
  9702                           
  9703                           ;main.c: 1042: writeEEPROM(0x56, 0x7F);
  9704  00225E  6A0F               	clrf	?_writeEEPROM+1,c
  9705  002260  0E56               	movlw	86
  9706  002262  6E0E               	movwf	?_writeEEPROM,c
  9707  002264  0E7F               	movlw	127
  9708  002266  6E10               	movwf	?_writeEEPROM+2,c
  9709  002268  ECDE  F027         	call	_writeEEPROM	;wreg free
  9710                           
  9711                           ;main.c: 1044: writeEEPROM(0x57, 0x0D);
  9712  00226C  6A0F               	clrf	?_writeEEPROM+1,c
  9713  00226E  0E57               	movlw	87
  9714  002270  6E0E               	movwf	?_writeEEPROM,c
  9715  002272  0E0D               	movlw	13
  9716  002274  6E10               	movwf	?_writeEEPROM+2,c
  9717  002276  ECDE  F027         	call	_writeEEPROM	;wreg free
  9718                           
  9719                           ;main.c: 1045: writeEEPROM(0x58, 0x7F);
  9720  00227A  6A0F               	clrf	?_writeEEPROM+1,c
  9721  00227C  0E58               	movlw	88
  9722  00227E  6E0E               	movwf	?_writeEEPROM,c
  9723  002280  0E7F               	movlw	127
  9724  002282  6E10               	movwf	?_writeEEPROM+2,c
  9725  002284  ECDE  F027         	call	_writeEEPROM	;wreg free
  9726                           
  9727                           ;main.c: 1047: writeEEPROM(0x59, 0x0D);
  9728  002288  6A0F               	clrf	?_writeEEPROM+1,c
  9729  00228A  0E59               	movlw	89
  9730  00228C  6E0E               	movwf	?_writeEEPROM,c
  9731  00228E  0E0D               	movlw	13
  9732  002290  6E10               	movwf	?_writeEEPROM+2,c
  9733  002292  ECDE  F027         	call	_writeEEPROM	;wreg free
  9734                           
  9735                           ;main.c: 1048: writeEEPROM(0x5A, 0x7F);
  9736  002296  6A0F               	clrf	?_writeEEPROM+1,c
  9737  002298  0E5A               	movlw	90
  9738  00229A  6E0E               	movwf	?_writeEEPROM,c
  9739  00229C  0E7F               	movlw	127
  9740  00229E  6E10               	movwf	?_writeEEPROM+2,c
  9741  0022A0  ECDE  F027         	call	_writeEEPROM	;wreg free
  9742                           
  9743                           ;main.c: 1052: writeEEPROM(0x5B, 0x80);
  9744  0022A4  6A0F               	clrf	?_writeEEPROM+1,c
  9745  0022A6  0E5B               	movlw	91
  9746  0022A8  6E0E               	movwf	?_writeEEPROM,c
  9747  0022AA  0E80               	movlw	128
  9748  0022AC  6E10               	movwf	?_writeEEPROM+2,c
  9749  0022AE  ECDE  F027         	call	_writeEEPROM	;wreg free
  9750                           
  9751                           ;main.c: 1053: writeEEPROM(0x5C, 0xff);
  9752  0022B2  6A0F               	clrf	?_writeEEPROM+1,c
  9753  0022B4  0E5C               	movlw	92
  9754  0022B6  6E0E               	movwf	?_writeEEPROM,c
  9755  0022B8  0EFF               	movlw	255
  9756  0022BA  6810               	setf	?_writeEEPROM+2,c
  9757  0022BC  ECDE  F027         	call	_writeEEPROM	;wreg free
  9758                           
  9759                           ;main.c: 1055: writeEEPROM(0x5D, 0x80);
  9760  0022C0  6A0F               	clrf	?_writeEEPROM+1,c
  9761  0022C2  0E5D               	movlw	93
  9762  0022C4  6E0E               	movwf	?_writeEEPROM,c
  9763  0022C6  0E80               	movlw	128
  9764  0022C8  6E10               	movwf	?_writeEEPROM+2,c
  9765  0022CA  ECDE  F027         	call	_writeEEPROM	;wreg free
  9766                           
  9767                           ;main.c: 1056: writeEEPROM(0x5E, 0xff);
  9768  0022CE  6A0F               	clrf	?_writeEEPROM+1,c
  9769  0022D0  0E5E               	movlw	94
  9770  0022D2  6E0E               	movwf	?_writeEEPROM,c
  9771  0022D4  0EFF               	movlw	255
  9772  0022D6  6810               	setf	?_writeEEPROM+2,c
  9773  0022D8  ECDE  F027         	call	_writeEEPROM	;wreg free
  9774                           
  9775                           ;main.c: 1058: writeEEPROM(0x5F, 0x80);
  9776  0022DC  6A0F               	clrf	?_writeEEPROM+1,c
  9777  0022DE  0E5F               	movlw	95
  9778  0022E0  6E0E               	movwf	?_writeEEPROM,c
  9779  0022E2  0E80               	movlw	128
  9780  0022E4  6E10               	movwf	?_writeEEPROM+2,c
  9781  0022E6  ECDE  F027         	call	_writeEEPROM	;wreg free
  9782                           
  9783                           ;main.c: 1059: writeEEPROM(0x60, 0xff);
  9784  0022EA  6A0F               	clrf	?_writeEEPROM+1,c
  9785  0022EC  0E60               	movlw	96
  9786  0022EE  6E0E               	movwf	?_writeEEPROM,c
  9787  0022F0  0EFF               	movlw	255
  9788  0022F2  6810               	setf	?_writeEEPROM+2,c
  9789  0022F4  ECDE  F027         	call	_writeEEPROM	;wreg free
  9790                           
  9791                           ;main.c: 1061: writeEEPROM(0x61, 0x80);
  9792  0022F8  6A0F               	clrf	?_writeEEPROM+1,c
  9793  0022FA  0E61               	movlw	97
  9794  0022FC  6E0E               	movwf	?_writeEEPROM,c
  9795  0022FE  0E80               	movlw	128
  9796  002300  6E10               	movwf	?_writeEEPROM+2,c
  9797  002302  ECDE  F027         	call	_writeEEPROM	;wreg free
  9798                           
  9799                           ;main.c: 1062: writeEEPROM(0x62, 0xff);
  9800  002306  6A0F               	clrf	?_writeEEPROM+1,c
  9801  002308  0E62               	movlw	98
  9802  00230A  6E0E               	movwf	?_writeEEPROM,c
  9803  00230C  0EFF               	movlw	255
  9804  00230E  6810               	setf	?_writeEEPROM+2,c
  9805  002310  ECDE  F027         	call	_writeEEPROM	;wreg free
  9806                           
  9807                           ;main.c: 1064: writeEEPROM(0x63, 0x80);
  9808  002314  6A0F               	clrf	?_writeEEPROM+1,c
  9809  002316  0E63               	movlw	99
  9810  002318  6E0E               	movwf	?_writeEEPROM,c
  9811  00231A  0E80               	movlw	128
  9812  00231C  6E10               	movwf	?_writeEEPROM+2,c
  9813  00231E  ECDE  F027         	call	_writeEEPROM	;wreg free
  9814                           
  9815                           ;main.c: 1065: writeEEPROM(0x64, 0xff);
  9816  002322  6A0F               	clrf	?_writeEEPROM+1,c
  9817  002324  0E64               	movlw	100
  9818  002326  6E0E               	movwf	?_writeEEPROM,c
  9819  002328  0EFF               	movlw	255
  9820  00232A  6810               	setf	?_writeEEPROM+2,c
  9821  00232C  ECDE  F027         	call	_writeEEPROM	;wreg free
  9822                           
  9823                           ;main.c: 1067: writeEEPROM(0x65, 0x80);
  9824  002330  6A0F               	clrf	?_writeEEPROM+1,c
  9825  002332  0E65               	movlw	101
  9826  002334  6E0E               	movwf	?_writeEEPROM,c
  9827  002336  0E80               	movlw	128
  9828  002338  6E10               	movwf	?_writeEEPROM+2,c
  9829  00233A  ECDE  F027         	call	_writeEEPROM	;wreg free
  9830                           
  9831                           ;main.c: 1068: writeEEPROM(0x66, 0xff);
  9832  00233E  6A0F               	clrf	?_writeEEPROM+1,c
  9833  002340  0E66               	movlw	102
  9834  002342  6E0E               	movwf	?_writeEEPROM,c
  9835  002344  0EFF               	movlw	255
  9836  002346  6810               	setf	?_writeEEPROM+2,c
  9837  002348  ECDE  F027         	call	_writeEEPROM	;wreg free
  9838                           
  9839                           ;main.c: 1072: writeEEPROM(0x67, 0x7f);
  9840  00234C  6A0F               	clrf	?_writeEEPROM+1,c
  9841  00234E  0E67               	movlw	103
  9842  002350  6E0E               	movwf	?_writeEEPROM,c
  9843  002352  0E7F               	movlw	127
  9844  002354  6E10               	movwf	?_writeEEPROM+2,c
  9845  002356  ECDE  F027         	call	_writeEEPROM	;wreg free
  9846                           
  9847                           ;main.c: 1073: writeEEPROM(0x68, 0xff);
  9848  00235A  6A0F               	clrf	?_writeEEPROM+1,c
  9849  00235C  0E68               	movlw	104
  9850  00235E  6E0E               	movwf	?_writeEEPROM,c
  9851  002360  0EFF               	movlw	255
  9852  002362  6810               	setf	?_writeEEPROM+2,c
  9853  002364  ECDE  F027         	call	_writeEEPROM	;wreg free
  9854                           
  9855                           ;main.c: 1075: writeEEPROM(0x69, 0x7f);
  9856  002368  6A0F               	clrf	?_writeEEPROM+1,c
  9857  00236A  0E69               	movlw	105
  9858  00236C  6E0E               	movwf	?_writeEEPROM,c
  9859  00236E  0E7F               	movlw	127
  9860  002370  6E10               	movwf	?_writeEEPROM+2,c
  9861  002372  ECDE  F027         	call	_writeEEPROM	;wreg free
  9862                           
  9863                           ;main.c: 1076: writeEEPROM(0x6A, 0xff);
  9864  002376  6A0F               	clrf	?_writeEEPROM+1,c
  9865  002378  0E6A               	movlw	106
  9866  00237A  6E0E               	movwf	?_writeEEPROM,c
  9867  00237C  0EFF               	movlw	255
  9868  00237E  6810               	setf	?_writeEEPROM+2,c
  9869  002380  ECDE  F027         	call	_writeEEPROM	;wreg free
  9870                           
  9871                           ;main.c: 1078: writeEEPROM(0x6B, 0x7f);
  9872  002384  6A0F               	clrf	?_writeEEPROM+1,c
  9873  002386  0E6B               	movlw	107
  9874  002388  6E0E               	movwf	?_writeEEPROM,c
  9875  00238A  0E7F               	movlw	127
  9876  00238C  6E10               	movwf	?_writeEEPROM+2,c
  9877  00238E  ECDE  F027         	call	_writeEEPROM	;wreg free
  9878                           
  9879                           ;main.c: 1079: writeEEPROM(0x6C, 0xff);
  9880  002392  6A0F               	clrf	?_writeEEPROM+1,c
  9881  002394  0E6C               	movlw	108
  9882  002396  6E0E               	movwf	?_writeEEPROM,c
  9883  002398  0EFF               	movlw	255
  9884  00239A  6810               	setf	?_writeEEPROM+2,c
  9885  00239C  ECDE  F027         	call	_writeEEPROM	;wreg free
  9886                           
  9887                           ;main.c: 1081: writeEEPROM(0x6D, 0x7f);
  9888  0023A0  6A0F               	clrf	?_writeEEPROM+1,c
  9889  0023A2  0E6D               	movlw	109
  9890  0023A4  6E0E               	movwf	?_writeEEPROM,c
  9891  0023A6  0E7F               	movlw	127
  9892  0023A8  6E10               	movwf	?_writeEEPROM+2,c
  9893  0023AA  ECDE  F027         	call	_writeEEPROM	;wreg free
  9894                           
  9895                           ;main.c: 1082: writeEEPROM(0x6E, 0xff);
  9896  0023AE  6A0F               	clrf	?_writeEEPROM+1,c
  9897  0023B0  0E6E               	movlw	110
  9898  0023B2  6E0E               	movwf	?_writeEEPROM,c
  9899  0023B4  0EFF               	movlw	255
  9900  0023B6  6810               	setf	?_writeEEPROM+2,c
  9901  0023B8  ECDE  F027         	call	_writeEEPROM	;wreg free
  9902                           
  9903                           ;main.c: 1084: writeEEPROM(0x6F, 0x7f);
  9904  0023BC  6A0F               	clrf	?_writeEEPROM+1,c
  9905  0023BE  0E6F               	movlw	111
  9906  0023C0  6E0E               	movwf	?_writeEEPROM,c
  9907  0023C2  0E7F               	movlw	127
  9908  0023C4  6E10               	movwf	?_writeEEPROM+2,c
  9909  0023C6  ECDE  F027         	call	_writeEEPROM	;wreg free
  9910                           
  9911                           ;main.c: 1085: writeEEPROM(0x70, 0xff);
  9912  0023CA  6A0F               	clrf	?_writeEEPROM+1,c
  9913  0023CC  0E70               	movlw	112
  9914  0023CE  6E0E               	movwf	?_writeEEPROM,c
  9915  0023D0  0EFF               	movlw	255
  9916  0023D2  6810               	setf	?_writeEEPROM+2,c
  9917  0023D4  ECDE  F027         	call	_writeEEPROM	;wreg free
  9918                           
  9919                           ;main.c: 1087: writeEEPROM(0x71, 0x7f);
  9920  0023D8  6A0F               	clrf	?_writeEEPROM+1,c
  9921  0023DA  0E71               	movlw	113
  9922  0023DC  6E0E               	movwf	?_writeEEPROM,c
  9923  0023DE  0E7F               	movlw	127
  9924  0023E0  6E10               	movwf	?_writeEEPROM+2,c
  9925  0023E2  ECDE  F027         	call	_writeEEPROM	;wreg free
  9926                           
  9927                           ;main.c: 1088: writeEEPROM(0x72, 0xff);
  9928  0023E6  6A0F               	clrf	?_writeEEPROM+1,c
  9929  0023E8  0E72               	movlw	114
  9930  0023EA  6E0E               	movwf	?_writeEEPROM,c
  9931  0023EC  0EFF               	movlw	255
  9932  0023EE  6810               	setf	?_writeEEPROM+2,c
  9933  0023F0  ECDE  F027         	call	_writeEEPROM	;wreg free
  9934                           
  9935                           ;main.c: 1092: writeEEPROM(0x73, 0);
  9936  0023F4  6A0F               	clrf	?_writeEEPROM+1,c
  9937  0023F6  0E73               	movlw	115
  9938  0023F8  6E0E               	movwf	?_writeEEPROM,c
  9939  0023FA  0E00               	movlw	0
  9940  0023FC  6A10               	clrf	?_writeEEPROM+2,c
  9941  0023FE  ECDE  F027         	call	_writeEEPROM	;wreg free
  9942                           
  9943                           ;main.c: 1093: writeEEPROM(0x74, 0);
  9944  002402  6A0F               	clrf	?_writeEEPROM+1,c
  9945  002404  0E74               	movlw	116
  9946  002406  6E0E               	movwf	?_writeEEPROM,c
  9947  002408  0E00               	movlw	0
  9948  00240A  6A10               	clrf	?_writeEEPROM+2,c
  9949  00240C  ECDE  F027         	call	_writeEEPROM	;wreg free
  9950                           
  9951                           ;main.c: 1095: writeEEPROM(0x75, 0);
  9952  002410  6A0F               	clrf	?_writeEEPROM+1,c
  9953  002412  0E75               	movlw	117
  9954  002414  6E0E               	movwf	?_writeEEPROM,c
  9955  002416  0E00               	movlw	0
  9956  002418  6A10               	clrf	?_writeEEPROM+2,c
  9957  00241A  ECDE  F027         	call	_writeEEPROM	;wreg free
  9958                           
  9959                           ;main.c: 1096: writeEEPROM(0x76, 0);
  9960  00241E  6A0F               	clrf	?_writeEEPROM+1,c
  9961  002420  0E76               	movlw	118
  9962  002422  6E0E               	movwf	?_writeEEPROM,c
  9963  002424  0E00               	movlw	0
  9964  002426  6A10               	clrf	?_writeEEPROM+2,c
  9965  002428  ECDE  F027         	call	_writeEEPROM	;wreg free
  9966                           
  9967                           ;main.c: 1098: writeEEPROM(0x77, 0);
  9968  00242C  6A0F               	clrf	?_writeEEPROM+1,c
  9969  00242E  0E77               	movlw	119
  9970  002430  6E0E               	movwf	?_writeEEPROM,c
  9971  002432  0E00               	movlw	0
  9972  002434  6A10               	clrf	?_writeEEPROM+2,c
  9973  002436  ECDE  F027         	call	_writeEEPROM	;wreg free
  9974                           
  9975                           ;main.c: 1099: writeEEPROM(0x78, 0);
  9976  00243A  6A0F               	clrf	?_writeEEPROM+1,c
  9977  00243C  0E78               	movlw	120
  9978  00243E  6E0E               	movwf	?_writeEEPROM,c
  9979  002440  0E00               	movlw	0
  9980  002442  6A10               	clrf	?_writeEEPROM+2,c
  9981  002444  ECDE  F027         	call	_writeEEPROM	;wreg free
  9982                           
  9983                           ;main.c: 1101: writeEEPROM(0x79, 0);
  9984  002448  6A0F               	clrf	?_writeEEPROM+1,c
  9985  00244A  0E79               	movlw	121
  9986  00244C  6E0E               	movwf	?_writeEEPROM,c
  9987  00244E  0E00               	movlw	0
  9988  002450  6A10               	clrf	?_writeEEPROM+2,c
  9989  002452  ECDE  F027         	call	_writeEEPROM	;wreg free
  9990                           
  9991                           ;main.c: 1102: writeEEPROM(0x7A, 0);
  9992  002456  6A0F               	clrf	?_writeEEPROM+1,c
  9993  002458  0E7A               	movlw	122
  9994  00245A  6E0E               	movwf	?_writeEEPROM,c
  9995  00245C  0E00               	movlw	0
  9996  00245E  6A10               	clrf	?_writeEEPROM+2,c
  9997  002460  ECDE  F027         	call	_writeEEPROM	;wreg free
  9998                           
  9999                           ;main.c: 1104: writeEEPROM(0x7B, 0);
 10000  002464  6A0F               	clrf	?_writeEEPROM+1,c
 10001  002466  0E7B               	movlw	123
 10002  002468  6E0E               	movwf	?_writeEEPROM,c
 10003  00246A  0E00               	movlw	0
 10004  00246C  6A10               	clrf	?_writeEEPROM+2,c
 10005  00246E  ECDE  F027         	call	_writeEEPROM	;wreg free
 10006                           
 10007                           ;main.c: 1105: writeEEPROM(0x7C, 0);
 10008  002472  6A0F               	clrf	?_writeEEPROM+1,c
 10009  002474  0E7C               	movlw	124
 10010  002476  6E0E               	movwf	?_writeEEPROM,c
 10011  002478  0E00               	movlw	0
 10012  00247A  6A10               	clrf	?_writeEEPROM+2,c
 10013  00247C  ECDE  F027         	call	_writeEEPROM	;wreg free
 10014                           
 10015                           ;main.c: 1107: writeEEPROM(0x7D, 0);
 10016  002480  6A0F               	clrf	?_writeEEPROM+1,c
 10017  002482  0E7D               	movlw	125
 10018  002484  6E0E               	movwf	?_writeEEPROM,c
 10019  002486  0E00               	movlw	0
 10020  002488  6A10               	clrf	?_writeEEPROM+2,c
 10021  00248A  ECDE  F027         	call	_writeEEPROM	;wreg free
 10022                           
 10023                           ;main.c: 1108: writeEEPROM(0x7E, 0);
 10024  00248E  6A0F               	clrf	?_writeEEPROM+1,c
 10025  002490  0E7E               	movlw	126
 10026  002492  6E0E               	movwf	?_writeEEPROM,c
 10027  002494  0E00               	movlw	0
 10028  002496  6A10               	clrf	?_writeEEPROM+2,c
 10029  002498  ECDE  F027         	call	_writeEEPROM	;wreg free
 10030                           
 10031                           ;main.c: 1112: writeEEPROM(0x7F, 0x7f);
 10032  00249C  6A0F               	clrf	?_writeEEPROM+1,c
 10033  00249E  0E7F               	movlw	127
 10034  0024A0  6E0E               	movwf	?_writeEEPROM,c
 10035  0024A2  6E10               	movwf	?_writeEEPROM+2,c
 10036  0024A4  ECDE  F027         	call	_writeEEPROM	;wreg free
 10037                           
 10038                           ;main.c: 1113: writeEEPROM(0x80, 0xff);
 10039  0024A8  6A0F               	clrf	?_writeEEPROM+1,c
 10040  0024AA  0E80               	movlw	128
 10041  0024AC  6E0E               	movwf	?_writeEEPROM,c
 10042  0024AE  0EFF               	movlw	255
 10043  0024B0  6810               	setf	?_writeEEPROM+2,c
 10044  0024B2  ECDE  F027         	call	_writeEEPROM	;wreg free
 10045                           
 10046                           ;main.c: 1115: writeEEPROM(0x81, 0x7f);
 10047  0024B6  6A0F               	clrf	?_writeEEPROM+1,c
 10048  0024B8  0E81               	movlw	129
 10049  0024BA  6E0E               	movwf	?_writeEEPROM,c
 10050  0024BC  0E7F               	movlw	127
 10051  0024BE  6E10               	movwf	?_writeEEPROM+2,c
 10052  0024C0  ECDE  F027         	call	_writeEEPROM	;wreg free
 10053                           
 10054                           ;main.c: 1116: writeEEPROM(0x82, 0xff);
 10055  0024C4  6A0F               	clrf	?_writeEEPROM+1,c
 10056  0024C6  0E82               	movlw	130
 10057  0024C8  6E0E               	movwf	?_writeEEPROM,c
 10058  0024CA  0EFF               	movlw	255
 10059  0024CC  6810               	setf	?_writeEEPROM+2,c
 10060  0024CE  ECDE  F027         	call	_writeEEPROM	;wreg free
 10061                           
 10062                           ;main.c: 1118: writeEEPROM(0x83, 0x7f);
 10063  0024D2  6A0F               	clrf	?_writeEEPROM+1,c
 10064  0024D4  0E83               	movlw	131
 10065  0024D6  6E0E               	movwf	?_writeEEPROM,c
 10066  0024D8  0E7F               	movlw	127
 10067  0024DA  6E10               	movwf	?_writeEEPROM+2,c
 10068  0024DC  ECDE  F027         	call	_writeEEPROM	;wreg free
 10069                           
 10070                           ;main.c: 1119: writeEEPROM(0x84, 0xff);
 10071  0024E0  6A0F               	clrf	?_writeEEPROM+1,c
 10072  0024E2  0E84               	movlw	132
 10073  0024E4  6E0E               	movwf	?_writeEEPROM,c
 10074  0024E6  0EFF               	movlw	255
 10075  0024E8  6810               	setf	?_writeEEPROM+2,c
 10076  0024EA  ECDE  F027         	call	_writeEEPROM	;wreg free
 10077                           
 10078                           ;main.c: 1121: writeEEPROM(0x85, 0x7f);
 10079  0024EE  6A0F               	clrf	?_writeEEPROM+1,c
 10080  0024F0  0E85               	movlw	133
 10081  0024F2  6E0E               	movwf	?_writeEEPROM,c
 10082  0024F4  0E7F               	movlw	127
 10083  0024F6  6E10               	movwf	?_writeEEPROM+2,c
 10084  0024F8  ECDE  F027         	call	_writeEEPROM	;wreg free
 10085                           
 10086                           ;main.c: 1122: writeEEPROM(0x86, 0xff);
 10087  0024FC  6A0F               	clrf	?_writeEEPROM+1,c
 10088  0024FE  0E86               	movlw	134
 10089  002500  6E0E               	movwf	?_writeEEPROM,c
 10090  002502  0EFF               	movlw	255
 10091  002504  6810               	setf	?_writeEEPROM+2,c
 10092  002506  ECDE  F027         	call	_writeEEPROM	;wreg free
 10093                           
 10094                           ;main.c: 1124: writeEEPROM(0x87, 0x7f);
 10095  00250A  6A0F               	clrf	?_writeEEPROM+1,c
 10096  00250C  0E87               	movlw	135
 10097  00250E  6E0E               	movwf	?_writeEEPROM,c
 10098  002510  0E7F               	movlw	127
 10099  002512  6E10               	movwf	?_writeEEPROM+2,c
 10100  002514  ECDE  F027         	call	_writeEEPROM	;wreg free
 10101                           
 10102                           ;main.c: 1125: writeEEPROM(0x88, 0xff);
 10103  002518  6A0F               	clrf	?_writeEEPROM+1,c
 10104  00251A  0E88               	movlw	136
 10105  00251C  6E0E               	movwf	?_writeEEPROM,c
 10106  00251E  0EFF               	movlw	255
 10107  002520  6810               	setf	?_writeEEPROM+2,c
 10108  002522  ECDE  F027         	call	_writeEEPROM	;wreg free
 10109                           
 10110                           ;main.c: 1127: writeEEPROM(0x89, 0x7f);
 10111  002526  6A0F               	clrf	?_writeEEPROM+1,c
 10112  002528  0E89               	movlw	137
 10113  00252A  6E0E               	movwf	?_writeEEPROM,c
 10114  00252C  0E7F               	movlw	127
 10115  00252E  6E10               	movwf	?_writeEEPROM+2,c
 10116  002530  ECDE  F027         	call	_writeEEPROM	;wreg free
 10117                           
 10118                           ;main.c: 1128: writeEEPROM(0x8A, 0xff);
 10119  002534  6A0F               	clrf	?_writeEEPROM+1,c
 10120  002536  0E8A               	movlw	138
 10121  002538  6E0E               	movwf	?_writeEEPROM,c
 10122  00253A  0EFF               	movlw	255
 10123  00253C  6810               	setf	?_writeEEPROM+2,c
 10124  00253E  ECDE  F027         	call	_writeEEPROM	;wreg free
 10125                           
 10126                           ;main.c: 1132: writeEEPROM(0x8B, 0x80);
 10127  002542  6A0F               	clrf	?_writeEEPROM+1,c
 10128  002544  0E8B               	movlw	139
 10129  002546  6E0E               	movwf	?_writeEEPROM,c
 10130  002548  0E80               	movlw	128
 10131  00254A  6E10               	movwf	?_writeEEPROM+2,c
 10132  00254C  ECDE  F027         	call	_writeEEPROM	;wreg free
 10133                           
 10134                           ;main.c: 1133: writeEEPROM(0x8C, 0x00);
 10135  002550  6A0F               	clrf	?_writeEEPROM+1,c
 10136  002552  0E8C               	movlw	140
 10137  002554  6E0E               	movwf	?_writeEEPROM,c
 10138  002556  0E00               	movlw	0
 10139  002558  6A10               	clrf	?_writeEEPROM+2,c
 10140  00255A  ECDE  F027         	call	_writeEEPROM	;wreg free
 10141                           
 10142                           ;main.c: 1135: writeEEPROM(0x8D, 0x80);
 10143  00255E  6A0F               	clrf	?_writeEEPROM+1,c
 10144  002560  0E8D               	movlw	141
 10145  002562  6E0E               	movwf	?_writeEEPROM,c
 10146  002564  0E80               	movlw	128
 10147  002566  6E10               	movwf	?_writeEEPROM+2,c
 10148  002568  ECDE  F027         	call	_writeEEPROM	;wreg free
 10149                           
 10150                           ;main.c: 1136: writeEEPROM(0x8E, 0x00);
 10151  00256C  6A0F               	clrf	?_writeEEPROM+1,c
 10152  00256E  0E8E               	movlw	142
 10153  002570  6E0E               	movwf	?_writeEEPROM,c
 10154  002572  0E00               	movlw	0
 10155  002574  6A10               	clrf	?_writeEEPROM+2,c
 10156  002576  ECDE  F027         	call	_writeEEPROM	;wreg free
 10157                           
 10158                           ;main.c: 1138: writeEEPROM(0x8F, 0x80);
 10159  00257A  6A0F               	clrf	?_writeEEPROM+1,c
 10160  00257C  0E8F               	movlw	143
 10161  00257E  6E0E               	movwf	?_writeEEPROM,c
 10162  002580  0E80               	movlw	128
 10163  002582  6E10               	movwf	?_writeEEPROM+2,c
 10164  002584  ECDE  F027         	call	_writeEEPROM	;wreg free
 10165                           
 10166                           ;main.c: 1139: writeEEPROM(0x90, 0x00);
 10167  002588  6A0F               	clrf	?_writeEEPROM+1,c
 10168  00258A  0E90               	movlw	144
 10169  00258C  6E0E               	movwf	?_writeEEPROM,c
 10170  00258E  0E00               	movlw	0
 10171  002590  6A10               	clrf	?_writeEEPROM+2,c
 10172  002592  ECDE  F027         	call	_writeEEPROM	;wreg free
 10173                           
 10174                           ;main.c: 1141: writeEEPROM(0x91, 0x80);
 10175  002596  6A0F               	clrf	?_writeEEPROM+1,c
 10176  002598  0E91               	movlw	145
 10177  00259A  6E0E               	movwf	?_writeEEPROM,c
 10178  00259C  0E80               	movlw	128
 10179  00259E  6E10               	movwf	?_writeEEPROM+2,c
 10180  0025A0  ECDE  F027         	call	_writeEEPROM	;wreg free
 10181                           
 10182                           ;main.c: 1142: writeEEPROM(0x92, 0x00);
 10183  0025A4  6A0F               	clrf	?_writeEEPROM+1,c
 10184  0025A6  0E92               	movlw	146
 10185  0025A8  6E0E               	movwf	?_writeEEPROM,c
 10186  0025AA  0E00               	movlw	0
 10187  0025AC  6A10               	clrf	?_writeEEPROM+2,c
 10188  0025AE  ECDE  F027         	call	_writeEEPROM	;wreg free
 10189                           
 10190                           ;main.c: 1144: writeEEPROM(0x93, 0x80);
 10191  0025B2  6A0F               	clrf	?_writeEEPROM+1,c
 10192  0025B4  0E93               	movlw	147
 10193  0025B6  6E0E               	movwf	?_writeEEPROM,c
 10194  0025B8  0E80               	movlw	128
 10195  0025BA  6E10               	movwf	?_writeEEPROM+2,c
 10196  0025BC  ECDE  F027         	call	_writeEEPROM	;wreg free
 10197                           
 10198                           ;main.c: 1145: writeEEPROM(0x94, 0x00);
 10199  0025C0  6A0F               	clrf	?_writeEEPROM+1,c
 10200  0025C2  0E94               	movlw	148
 10201  0025C4  6E0E               	movwf	?_writeEEPROM,c
 10202  0025C6  0E00               	movlw	0
 10203  0025C8  6A10               	clrf	?_writeEEPROM+2,c
 10204  0025CA  ECDE  F027         	call	_writeEEPROM	;wreg free
 10205                           
 10206                           ;main.c: 1147: writeEEPROM(0x95, 0x80);
 10207  0025CE  6A0F               	clrf	?_writeEEPROM+1,c
 10208  0025D0  0E95               	movlw	149
 10209  0025D2  6E0E               	movwf	?_writeEEPROM,c
 10210  0025D4  0E80               	movlw	128
 10211  0025D6  6E10               	movwf	?_writeEEPROM+2,c
 10212  0025D8  ECDE  F027         	call	_writeEEPROM	;wreg free
 10213                           
 10214                           ;main.c: 1148: writeEEPROM(0x96, 0x00);
 10215  0025DC  6A0F               	clrf	?_writeEEPROM+1,c
 10216  0025DE  0E96               	movlw	150
 10217  0025E0  6E0E               	movwf	?_writeEEPROM,c
 10218  0025E2  0E00               	movlw	0
 10219  0025E4  6A10               	clrf	?_writeEEPROM+2,c
 10220  0025E6  ECDE  F027         	call	_writeEEPROM	;wreg free
 10221                           
 10222                           ;main.c: 1152: writeEEPROM(0x97, 2);
 10223  0025EA  6A0F               	clrf	?_writeEEPROM+1,c
 10224  0025EC  0E97               	movlw	151
 10225  0025EE  6E0E               	movwf	?_writeEEPROM,c
 10226  0025F0  0E02               	movlw	2
 10227  0025F2  6E10               	movwf	?_writeEEPROM+2,c
 10228  0025F4  ECDE  F027         	call	_writeEEPROM	;wreg free
 10229                           
 10230                           ;main.c: 1153: writeEEPROM(0x98, 2);
 10231  0025F8  6A0F               	clrf	?_writeEEPROM+1,c
 10232  0025FA  0E98               	movlw	152
 10233  0025FC  6E0E               	movwf	?_writeEEPROM,c
 10234  0025FE  0E02               	movlw	2
 10235  002600  6E10               	movwf	?_writeEEPROM+2,c
 10236  002602  ECDE  F027         	call	_writeEEPROM	;wreg free
 10237                           
 10238                           ;main.c: 1154: writeEEPROM(0x99, 2);
 10239  002606  6A0F               	clrf	?_writeEEPROM+1,c
 10240  002608  0E99               	movlw	153
 10241  00260A  6E0E               	movwf	?_writeEEPROM,c
 10242  00260C  0E02               	movlw	2
 10243  00260E  6E10               	movwf	?_writeEEPROM+2,c
 10244  002610  ECDE  F027         	call	_writeEEPROM	;wreg free
 10245                           
 10246                           ;main.c: 1155: writeEEPROM(0x9A, 2);
 10247  002614  6A0F               	clrf	?_writeEEPROM+1,c
 10248  002616  0E9A               	movlw	154
 10249  002618  6E0E               	movwf	?_writeEEPROM,c
 10250  00261A  0E02               	movlw	2
 10251  00261C  6E10               	movwf	?_writeEEPROM+2,c
 10252  00261E  ECDE  F027         	call	_writeEEPROM	;wreg free
 10253                           
 10254                           ;main.c: 1156: writeEEPROM(0x9B, 2);
 10255  002622  6A0F               	clrf	?_writeEEPROM+1,c
 10256  002624  0E9B               	movlw	155
 10257  002626  6E0E               	movwf	?_writeEEPROM,c
 10258  002628  0E02               	movlw	2
 10259  00262A  6E10               	movwf	?_writeEEPROM+2,c
 10260  00262C  ECDE  F027         	call	_writeEEPROM	;wreg free
 10261                           
 10262                           ;main.c: 1157: writeEEPROM(0x9C, 2);
 10263  002630  6A0F               	clrf	?_writeEEPROM+1,c
 10264  002632  0E9C               	movlw	156
 10265  002634  6E0E               	movwf	?_writeEEPROM,c
 10266  002636  0E02               	movlw	2
 10267  002638  6E10               	movwf	?_writeEEPROM+2,c
 10268  00263A  ECDE  F027         	call	_writeEEPROM	;wreg free
 10269                           
 10270                           ;main.c: 1161: writeEEPROM(0xF2, 0xc3);
 10271  00263E  6A0F               	clrf	?_writeEEPROM+1,c
 10272  002640  0EF2               	movlw	242
 10273  002642  6E0E               	movwf	?_writeEEPROM,c
 10274  002644  0EC3               	movlw	195
 10275  002646  6E10               	movwf	?_writeEEPROM+2,c
 10276  002648  ECDE  F027         	call	_writeEEPROM	;wreg free
 10277                           
 10278                           ;main.c: 1162: writeEEPROM(0xF3, 0x50);
 10279  00264C  6A0F               	clrf	?_writeEEPROM+1,c
 10280  00264E  0EF3               	movlw	243
 10281  002650  6E0E               	movwf	?_writeEEPROM,c
 10282  002652  0E50               	movlw	80
 10283  002654  6E10               	movwf	?_writeEEPROM+2,c
 10284  002656  ECDE  F027         	call	_writeEEPROM	;wreg free
 10285                           
 10286                           ;main.c: 1166: writeEEPROM(0x9E, 0);
 10287  00265A  6A0F               	clrf	?_writeEEPROM+1,c
 10288  00265C  0E9E               	movlw	158
 10289  00265E  6E0E               	movwf	?_writeEEPROM,c
 10290  002660  0E00               	movlw	0
 10291  002662  6A10               	clrf	?_writeEEPROM+2,c
 10292  002664  ECDE  F027         	call	_writeEEPROM	;wreg free
 10293                           
 10294                           ;main.c: 1167: writeEEPROM(0x9F, 0);
 10295  002668  6A0F               	clrf	?_writeEEPROM+1,c
 10296  00266A  0E9F               	movlw	159
 10297  00266C  6E0E               	movwf	?_writeEEPROM,c
 10298  00266E  0E00               	movlw	0
 10299  002670  6A10               	clrf	?_writeEEPROM+2,c
 10300  002672  ECDE  F027         	call	_writeEEPROM	;wreg free
 10301                           
 10302                           ;main.c: 1168: writeEEPROM(0xA0, 0);
 10303  002676  6A0F               	clrf	?_writeEEPROM+1,c
 10304  002678  0EA0               	movlw	160
 10305  00267A  6E0E               	movwf	?_writeEEPROM,c
 10306  00267C  0E00               	movlw	0
 10307  00267E  6A10               	clrf	?_writeEEPROM+2,c
 10308  002680  ECDE  F027         	call	_writeEEPROM	;wreg free
 10309                           
 10310                           ;main.c: 1169: writeEEPROM(0xA1, 0);
 10311  002684  6A0F               	clrf	?_writeEEPROM+1,c
 10312  002686  0EA1               	movlw	161
 10313  002688  6E0E               	movwf	?_writeEEPROM,c
 10314  00268A  0E00               	movlw	0
 10315  00268C  6A10               	clrf	?_writeEEPROM+2,c
 10316  00268E  ECDE  F027         	call	_writeEEPROM	;wreg free
 10317                           
 10318                           ;main.c: 1170: writeEEPROM(0xA2, 0);
 10319  002692  6A0F               	clrf	?_writeEEPROM+1,c
 10320  002694  0EA2               	movlw	162
 10321  002696  6E0E               	movwf	?_writeEEPROM,c
 10322  002698  0E00               	movlw	0
 10323  00269A  6A10               	clrf	?_writeEEPROM+2,c
 10324  00269C  ECDE  F027         	call	_writeEEPROM	;wreg free
 10325                           
 10326                           ;main.c: 1171: writeEEPROM(0xA3, 0);
 10327  0026A0  6A0F               	clrf	?_writeEEPROM+1,c
 10328  0026A2  0EA3               	movlw	163
 10329  0026A4  6E0E               	movwf	?_writeEEPROM,c
 10330  0026A6  0E00               	movlw	0
 10331  0026A8  6A10               	clrf	?_writeEEPROM+2,c
 10332  0026AA  ECDE  F027         	call	_writeEEPROM	;wreg free
 10333                           
 10334                           ;main.c: 1172: writeEEPROM(0xA4, 0);
 10335  0026AE  6A0F               	clrf	?_writeEEPROM+1,c
 10336  0026B0  0EA4               	movlw	164
 10337  0026B2  6E0E               	movwf	?_writeEEPROM,c
 10338  0026B4  0E00               	movlw	0
 10339  0026B6  6A10               	clrf	?_writeEEPROM+2,c
 10340  0026B8  ECDE  F027         	call	_writeEEPROM	;wreg free
 10341                           
 10342                           ;main.c: 1173: writeEEPROM(0xA5, 0);
 10343  0026BC  6A0F               	clrf	?_writeEEPROM+1,c
 10344  0026BE  0EA5               	movlw	165
 10345  0026C0  6E0E               	movwf	?_writeEEPROM,c
 10346  0026C2  0E00               	movlw	0
 10347  0026C4  6A10               	clrf	?_writeEEPROM+2,c
 10348  0026C6  ECDE  F027         	call	_writeEEPROM	;wreg free
 10349                           
 10350                           ;main.c: 1174: writeEEPROM(0xA6, 0);
 10351  0026CA  6A0F               	clrf	?_writeEEPROM+1,c
 10352  0026CC  0EA6               	movlw	166
 10353  0026CE  6E0E               	movwf	?_writeEEPROM,c
 10354  0026D0  0E00               	movlw	0
 10355  0026D2  6A10               	clrf	?_writeEEPROM+2,c
 10356  0026D4  ECDE  F027         	call	_writeEEPROM	;wreg free
 10357                           
 10358                           ;main.c: 1175: writeEEPROM(0xA7, 0);
 10359  0026D8  6A0F               	clrf	?_writeEEPROM+1,c
 10360  0026DA  0EA7               	movlw	167
 10361  0026DC  6E0E               	movwf	?_writeEEPROM,c
 10362  0026DE  0E00               	movlw	0
 10363  0026E0  6A10               	clrf	?_writeEEPROM+2,c
 10364  0026E2  ECDE  F027         	call	_writeEEPROM	;wreg free
 10365                           
 10366                           ;main.c: 1176: writeEEPROM(0xA8, 0);
 10367  0026E6  6A0F               	clrf	?_writeEEPROM+1,c
 10368  0026E8  0EA8               	movlw	168
 10369  0026EA  6E0E               	movwf	?_writeEEPROM,c
 10370  0026EC  0E00               	movlw	0
 10371  0026EE  6A10               	clrf	?_writeEEPROM+2,c
 10372  0026F0  ECDE  F027         	call	_writeEEPROM	;wreg free
 10373                           
 10374                           ;main.c: 1177: writeEEPROM(0xA9, 0);
 10375  0026F4  6A0F               	clrf	?_writeEEPROM+1,c
 10376  0026F6  0EA9               	movlw	169
 10377  0026F8  6E0E               	movwf	?_writeEEPROM,c
 10378  0026FA  6A10               	clrf	?_writeEEPROM+2,c
 10379  0026FC  EFDE  F027         	goto	_writeEEPROM	;wreg free
 10380  002700                     __end_of_init_app_eeprom:
 10381                           	opt stack 0
 10382                           tblptru	equ	0xFF8
 10383                           tblptrh	equ	0xFF7
 10384                           tblptrl	equ	0xFF6
 10385                           tablat	equ	0xFF5
 10386                           prodh	equ	0xFF4
 10387                           prodl	equ	0xFF3
 10388                           intcon	equ	0xFF2
 10389                           postinc0	equ	0xFEE
 10390                           wreg	equ	0xFE8
 10391                           indf1	equ	0xFE7
 10392                           postdec1	equ	0xFE5
 10393                           fsr1h	equ	0xFE2
 10394                           fsr1l	equ	0xFE1
 10395                           indf2	equ	0xFDF
 10396                           postinc2	equ	0xFDE
 10397                           postdec2	equ	0xFDD
 10398                           plusw2	equ	0xFDB
 10399                           fsr2h	equ	0xFDA
 10400                           fsr2l	equ	0xFD9
 10401                           status	equ	0xFD8
 10402                           
 10403 ;; *************** function _vscp_setManufacturerId *****************
 10404 ;; Defined at:
 10405 ;;		line 2649 in file "../main.c"
 10406 ;; Parameters:    Size  Location     Type
 10407 ;;  idx             1    wreg     unsigned char 
 10408 ;;  data            1   16[COMRAM] unsigned char 
 10409 ;; Auto vars:     Size  Location     Type
 10410 ;;  idx             1   17[COMRAM] unsigned char 
 10411 ;; Return value:  Size  Location     Type
 10412 ;;		None               void
 10413 ;; Registers used:
 10414 ;;		wreg, status,2, status,0, cstack
 10415 ;; Tracked objects:
 10416 ;;		On entry : F/0
 10417 ;;		On exit  : 0/0
 10418 ;;		Unchanged: 0/0
 10419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10420 ;;      Params:         1       0       0       0       0       0       0
 10421 ;;      Locals:         1       0       0       0       0       0       0
 10422 ;;      Temps:          0       0       0       0       0       0       0
 10423 ;;      Totals:         2       0       0       0       0       0       0
 10424 ;;Total ram usage:        2 bytes
 10425 ;; Hardware stack levels used:    1
 10426 ;; Hardware stack levels required when called:    3
 10427 ;; This function calls:
 10428 ;;		_writeEEPROM
 10429 ;; This function is called by:
 10430 ;;		_vscp_writeStdReg
 10431 ;; This function uses a non-reentrant model
 10432 ;;
 10433                           
 10434                           	psect	text40
 10435  0050E4                     __ptext40:
 10436                           	opt stack 0
 10437  0050E4                     _vscp_setManufacturerId:
 10438                           	opt stack 25
 10439                           
 10440                           ;incstack = 0
 10441                           ;incstack = 0
 10442                           ;vscp_setManufacturerId@idx stored from wreg
 10443  0050E4  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10444                           
 10445                           ; BSR set to: 0
 10446                           ;main.c: 2650: writeEEPROM(0x09 + idx, data);
 10447  0050E8  0E09               	movlw	9
 10448  0050EA  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10449  0050EC  6E0E               	movwf	?_writeEEPROM,c
 10450  0050EE  6A0F               	clrf	?_writeEEPROM+1,c
 10451  0050F0  0E00               	movlw	0
 10452  0050F2  220F               	addwfc	?_writeEEPROM+1,f,c
 10453  0050F4  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10454  0050F8  EFDE  F027         	goto	_writeEEPROM	;wreg free
 10455  0050FC                     __end_of_vscp_setManufacturerId:
 10456                           	opt stack 0
 10457                           tblptru	equ	0xFF8
 10458                           tblptrh	equ	0xFF7
 10459                           tblptrl	equ	0xFF6
 10460                           tablat	equ	0xFF5
 10461                           prodh	equ	0xFF4
 10462                           prodl	equ	0xFF3
 10463                           intcon	equ	0xFF2
 10464                           postinc0	equ	0xFEE
 10465                           wreg	equ	0xFE8
 10466                           indf1	equ	0xFE7
 10467                           postdec1	equ	0xFE5
 10468                           fsr1h	equ	0xFE2
 10469                           fsr1l	equ	0xFE1
 10470                           indf2	equ	0xFDF
 10471                           postinc2	equ	0xFDE
 10472                           postdec2	equ	0xFDD
 10473                           plusw2	equ	0xFDB
 10474                           fsr2h	equ	0xFDA
 10475                           fsr2l	equ	0xFD9
 10476                           status	equ	0xFD8
 10477                           
 10478 ;; *************** function _vscp_setUserID *****************
 10479 ;; Defined at:
 10480 ;;		line 2627 in file "../main.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;  idx             1    wreg     unsigned char 
 10483 ;;  data            1   16[COMRAM] unsigned char 
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;  idx             1   17[COMRAM] unsigned char 
 10486 ;; Return value:  Size  Location     Type
 10487 ;;		None               void
 10488 ;; Registers used:
 10489 ;;		wreg, status,2, status,0, cstack
 10490 ;; Tracked objects:
 10491 ;;		On entry : F/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10495 ;;      Params:         1       0       0       0       0       0       0
 10496 ;;      Locals:         1       0       0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0
 10498 ;;      Totals:         2       0       0       0       0       0       0
 10499 ;;Total ram usage:        2 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    3
 10502 ;; This function calls:
 10503 ;;		_writeEEPROM
 10504 ;; This function is called by:
 10505 ;;		_vscp_writeStdReg
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	text41
 10510  0050FC                     __ptext41:
 10511                           	opt stack 0
 10512  0050FC                     _vscp_setUserID:
 10513                           	opt stack 25
 10514                           
 10515                           ;incstack = 0
 10516                           ;incstack = 0
 10517                           ;vscp_setUserID@idx stored from wreg
 10518  0050FC  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;main.c: 2628: writeEEPROM(idx + 0x04, data);
 10522  005100  0E04               	movlw	4
 10523  005102  2412               	addwf	vscp_setUserID@idx,w,c
 10524  005104  6E0E               	movwf	?_writeEEPROM,c
 10525  005106  6A0F               	clrf	?_writeEEPROM+1,c
 10526  005108  0E00               	movlw	0
 10527  00510A  220F               	addwfc	?_writeEEPROM+1,f,c
 10528  00510C  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10529  005110  EFDE  F027         	goto	_writeEEPROM	;wreg free
 10530  005114                     __end_of_vscp_setUserID:
 10531                           	opt stack 0
 10532                           tblptru	equ	0xFF8
 10533                           tblptrh	equ	0xFF7
 10534                           tblptrl	equ	0xFF6
 10535                           tablat	equ	0xFF5
 10536                           prodh	equ	0xFF4
 10537                           prodl	equ	0xFF3
 10538                           intcon	equ	0xFF2
 10539                           postinc0	equ	0xFEE
 10540                           wreg	equ	0xFE8
 10541                           indf1	equ	0xFE7
 10542                           postdec1	equ	0xFE5
 10543                           fsr1h	equ	0xFE2
 10544                           fsr1l	equ	0xFE1
 10545                           indf2	equ	0xFDF
 10546                           postinc2	equ	0xFDE
 10547                           postdec2	equ	0xFDD
 10548                           plusw2	equ	0xFDB
 10549                           fsr2h	equ	0xFDA
 10550                           fsr2l	equ	0xFD9
 10551                           status	equ	0xFD8
 10552                           
 10553 ;; *************** function _vscp_setGUID *****************
 10554 ;; Defined at:
 10555 ;;		line 2596 in file "../main.c"
 10556 ;; Parameters:    Size  Location     Type
 10557 ;;  idx             1    wreg     unsigned char 
 10558 ;;  data            1   16[COMRAM] unsigned char 
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;  idx             1   17[COMRAM] unsigned char 
 10561 ;; Return value:  Size  Location     Type
 10562 ;;		None               void
 10563 ;; Registers used:
 10564 ;;		wreg, status,2, status,0, cstack
 10565 ;; Tracked objects:
 10566 ;;		On entry : F/0
 10567 ;;		On exit  : 0/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10570 ;;      Params:         1       0       0       0       0       0       0
 10571 ;;      Locals:         1       0       0       0       0       0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0
 10573 ;;      Totals:         2       0       0       0       0       0       0
 10574 ;;Total ram usage:        2 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    3
 10577 ;; This function calls:
 10578 ;;		_writeEEPROM
 10579 ;; This function is called by:
 10580 ;;		_vscp_writeStdReg
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           	psect	text42
 10585  005070                     __ptext42:
 10586                           	opt stack 0
 10587  005070                     _vscp_setGUID:
 10588                           	opt stack 25
 10589                           
 10590                           ;incstack = 0
 10591                           ;incstack = 0
 10592                           ;vscp_setGUID@idx stored from wreg
 10593  005070  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;main.c: 2597: if ( idx>15 ) return;
 10597  005074  0E0F               	movlw	15
 10598  005076  6412               	cpfsgt	vscp_setGUID@idx,c
 10599  005078  D001               	goto	l7682
 10600  00507A  D00A               	goto	l546
 10601  00507C                     l7682:
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;main.c: 2598: writeEEPROM( 0x11 + idx, data );
 10605  00507C  0E11               	movlw	17
 10606  00507E  2412               	addwf	vscp_setGUID@idx,w,c
 10607  005080  6E0E               	movwf	?_writeEEPROM,c
 10608  005082  6A0F               	clrf	?_writeEEPROM+1,c
 10609  005084  0E00               	movlw	0
 10610  005086  220F               	addwfc	?_writeEEPROM+1,f,c
 10611  005088  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 10612  00508C  ECDE  F027         	call	_writeEEPROM	;wreg free
 10613  005090                     l546:
 10614  005090  0012               	return	
 10615  005092                     __end_of_vscp_setGUID:
 10616                           	opt stack 0
 10617                           tblptru	equ	0xFF8
 10618                           tblptrh	equ	0xFF7
 10619                           tblptrl	equ	0xFF6
 10620                           tablat	equ	0xFF5
 10621                           prodh	equ	0xFF4
 10622                           prodl	equ	0xFF3
 10623                           intcon	equ	0xFF2
 10624                           postinc0	equ	0xFEE
 10625                           wreg	equ	0xFE8
 10626                           indf1	equ	0xFE7
 10627                           postdec1	equ	0xFE5
 10628                           fsr1h	equ	0xFE2
 10629                           fsr1l	equ	0xFE1
 10630                           indf2	equ	0xFDF
 10631                           postinc2	equ	0xFDE
 10632                           postdec2	equ	0xFDD
 10633                           plusw2	equ	0xFDB
 10634                           fsr2h	equ	0xFDA
 10635                           fsr2l	equ	0xFD9
 10636                           status	equ	0xFD8
 10637                           
 10638 ;; *************** function _vscp_writeAppReg *****************
 10639 ;; Defined at:
 10640 ;;		line 1887 in file "../main.c"
 10641 ;; Parameters:    Size  Location     Type
 10642 ;;  reg             1    wreg     unsigned char 
 10643 ;;  val             1   34[COMRAM] unsigned char 
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  reg             1   36[COMRAM] unsigned char 
 10646 ;;  pos             1   35[COMRAM] unsigned char 
 10647 ;;  rv              1   37[COMRAM] unsigned char 
 10648 ;; Return value:  Size  Location     Type
 10649 ;;                  1    wreg      unsigned char 
 10650 ;; Registers used:
 10651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10652 ;; Tracked objects:
 10653 ;;		On entry : F/0
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10657 ;;      Params:         1       0       0       0       0       0       0
 10658 ;;      Locals:         3       0       0       0       0       0       0
 10659 ;;      Temps:          0       0       0       0       0       0       0
 10660 ;;      Totals:         4       0       0       0       0       0       0
 10661 ;;Total ram usage:        4 bytes
 10662 ;; Hardware stack levels used:    1
 10663 ;; Hardware stack levels required when called:    4
 10664 ;; This function calls:
 10665 ;;		_writeEEPROM
 10666 ;;		_readEEPROM
 10667 ;;		_writeCoeffs2Ram
 10668 ;; This function is called by:
 10669 ;;		_vscp_writeRegister
 10670 ;;		_vscp_handleProtocolEvent
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674                           	psect	text43
 10675  00066E                     __ptext43:
 10676                           	opt stack 0
 10677  00066E                     _vscp_writeAppReg:
 10678                           	opt stack 24
 10679                           
 10680                           ;incstack = 0
 10681                           ;incstack = 0
 10682                           ;vscp_writeAppReg@reg stored from wreg
 10683  00066E  CFE8 F025          	movff	wreg,vscp_writeAppReg@reg
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;main.c: 1888: uint8_t rv;
 10687                           ;main.c: 1895: rv = ~val;
 10688  000672  1C23               	comf	vscp_writeAppReg@val,w,c
 10689  000674  6E26               	movwf	vscp_writeAppReg@rv,c
 10690                           
 10691                           ;main.c: 1897: if (0 == vscp_page_select) {
 10692  000676  5047               	movf	_vscp_page_select+1,w,c
 10693  000678  1046               	iorwf	_vscp_page_select,w,c
 10694  00067A  E102 EF37  F008    	bz	l10540
 10695  000680  EF71  F009         	goto	l10542
 10696  000684                     l10350:
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;main.c: 1903: writeEEPROM(0x41, val);
 10700  000684  6A0F               	clrf	?_writeEEPROM+1,c
 10701  000686  0E41               	movlw	65
 10702  000688  6E0E               	movwf	?_writeEEPROM,c
 10703  00068A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10704  00068E  ECDE  F027         	call	_writeEEPROM	;wreg free
 10705                           
 10706                           ;main.c: 1904: rv = readEEPROM(0x41);
 10707  000692  6A17               	clrf	?_readEEPROM+1,c
 10708  000694  0E41               	movlw	65
 10709  000696  6E16               	movwf	?_readEEPROM,c
 10710  000698  ECC0  F028         	call	_readEEPROM	;wreg free
 10711  00069C  EFA9  F009         	goto	L20
 10712  0006A0                     l10352:
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;main.c: 1909: writeEEPROM(0x42, val);
 10716  0006A0  6A0F               	clrf	?_writeEEPROM+1,c
 10717  0006A2  0E42               	movlw	66
 10718  0006A4  6E0E               	movwf	?_writeEEPROM,c
 10719  0006A6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10720  0006AA  ECDE  F027         	call	_writeEEPROM	;wreg free
 10721                           
 10722                           ;main.c: 1910: rv = readEEPROM(0x42);
 10723  0006AE  6A17               	clrf	?_readEEPROM+1,c
 10724  0006B0  0E42               	movlw	66
 10725  0006B2  6E16               	movwf	?_readEEPROM,c
 10726  0006B4  ECC0  F028         	call	_readEEPROM	;wreg free
 10727  0006B8  EFA9  F009         	goto	L20
 10728  0006BC                     l10354:
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;main.c: 1919: writeEEPROM(0x43, val);
 10732  0006BC  6A0F               	clrf	?_writeEEPROM+1,c
 10733  0006BE  0E43               	movlw	67
 10734  0006C0  6E0E               	movwf	?_writeEEPROM,c
 10735  0006C2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10736  0006C6  ECDE  F027         	call	_writeEEPROM	;wreg free
 10737                           
 10738                           ;main.c: 1920: rv = readEEPROM(0x43);
 10739  0006CA  6A17               	clrf	?_readEEPROM+1,c
 10740  0006CC  0E43               	movlw	67
 10741  0006CE  6E16               	movwf	?_readEEPROM,c
 10742  0006D0  ECC0  F028         	call	_readEEPROM	;wreg free
 10743  0006D4  EFA9  F009         	goto	L20
 10744  0006D8                     l10356:
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;main.c: 1925: writeEEPROM(0x44, val);
 10748  0006D8  6A0F               	clrf	?_writeEEPROM+1,c
 10749  0006DA  0E44               	movlw	68
 10750  0006DC  6E0E               	movwf	?_writeEEPROM,c
 10751  0006DE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10752  0006E2  ECDE  F027         	call	_writeEEPROM	;wreg free
 10753                           
 10754                           ;main.c: 1926: rv = readEEPROM(0x44);
 10755  0006E6  6A17               	clrf	?_readEEPROM+1,c
 10756  0006E8  0E44               	movlw	68
 10757  0006EA  6E16               	movwf	?_readEEPROM,c
 10758  0006EC  ECC0  F028         	call	_readEEPROM	;wreg free
 10759  0006F0  EFA9  F009         	goto	L20
 10760  0006F4                     l10358:
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;main.c: 1931: writeEEPROM(0x45, val);
 10764  0006F4  6A0F               	clrf	?_writeEEPROM+1,c
 10765  0006F6  0E45               	movlw	69
 10766  0006F8  6E0E               	movwf	?_writeEEPROM,c
 10767  0006FA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10768  0006FE  ECDE  F027         	call	_writeEEPROM	;wreg free
 10769                           
 10770                           ;main.c: 1932: rv = readEEPROM(0x45);
 10771  000702  6A17               	clrf	?_readEEPROM+1,c
 10772  000704  0E45               	movlw	69
 10773  000706  6E16               	movwf	?_readEEPROM,c
 10774  000708  ECC0  F028         	call	_readEEPROM	;wreg free
 10775  00070C  EFA9  F009         	goto	L20
 10776  000710                     l10360:
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;main.c: 1937: writeEEPROM(0x46, val);
 10780  000710  6A0F               	clrf	?_writeEEPROM+1,c
 10781  000712  0E46               	movlw	70
 10782  000714  6E0E               	movwf	?_writeEEPROM,c
 10783  000716  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10784  00071A  ECDE  F027         	call	_writeEEPROM	;wreg free
 10785                           
 10786                           ;main.c: 1938: rv = readEEPROM(0x46);
 10787  00071E  6A17               	clrf	?_readEEPROM+1,c
 10788  000720  0E46               	movlw	70
 10789  000722  6E16               	movwf	?_readEEPROM,c
 10790  000724  ECC0  F028         	call	_readEEPROM	;wreg free
 10791  000728  EFA9  F009         	goto	L20
 10792  00072C                     l10362:
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;main.c: 1943: writeEEPROM(0x47, val);
 10796  00072C  6A0F               	clrf	?_writeEEPROM+1,c
 10797  00072E  0E47               	movlw	71
 10798  000730  6E0E               	movwf	?_writeEEPROM,c
 10799  000732  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10800  000736  ECDE  F027         	call	_writeEEPROM	;wreg free
 10801                           
 10802                           ;main.c: 1944: rv = readEEPROM(0x47);
 10803  00073A  6A17               	clrf	?_readEEPROM+1,c
 10804  00073C  0E47               	movlw	71
 10805  00073E  6E16               	movwf	?_readEEPROM,c
 10806  000740  ECC0  F028         	call	_readEEPROM	;wreg free
 10807  000744  EFA9  F009         	goto	L20
 10808  000748                     l10364:
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;main.c: 1949: writeEEPROM(0x48, val);
 10812  000748  6A0F               	clrf	?_writeEEPROM+1,c
 10813  00074A  0E48               	movlw	72
 10814  00074C  6E0E               	movwf	?_writeEEPROM,c
 10815  00074E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10816  000752  ECDE  F027         	call	_writeEEPROM	;wreg free
 10817                           
 10818                           ;main.c: 1950: rv = readEEPROM(0x48);
 10819  000756  6A17               	clrf	?_readEEPROM+1,c
 10820  000758  0E48               	movlw	72
 10821  00075A  6E16               	movwf	?_readEEPROM,c
 10822  00075C  ECC0  F028         	call	_readEEPROM	;wreg free
 10823  000760  EFA9  F009         	goto	L20
 10824  000764                     l10366:
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;main.c: 1959: writeEEPROM(0x49, val);
 10828  000764  6A0F               	clrf	?_writeEEPROM+1,c
 10829  000766  0E49               	movlw	73
 10830  000768  6E0E               	movwf	?_writeEEPROM,c
 10831  00076A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10832  00076E  ECDE  F027         	call	_writeEEPROM	;wreg free
 10833                           
 10834                           ;main.c: 1960: rv = readEEPROM(0x49);
 10835  000772  6A17               	clrf	?_readEEPROM+1,c
 10836  000774  0E49               	movlw	73
 10837  000776  6E16               	movwf	?_readEEPROM,c
 10838  000778  ECC0  F028         	call	_readEEPROM	;wreg free
 10839  00077C  EFA9  F009         	goto	L20
 10840  000780                     l10368:
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;main.c: 1965: writeEEPROM(0x4A, val);
 10844  000780  6A0F               	clrf	?_writeEEPROM+1,c
 10845  000782  0E4A               	movlw	74
 10846  000784  6E0E               	movwf	?_writeEEPROM,c
 10847  000786  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10848  00078A  ECDE  F027         	call	_writeEEPROM	;wreg free
 10849                           
 10850                           ;main.c: 1966: rv = readEEPROM(0x4A);
 10851  00078E  6A17               	clrf	?_readEEPROM+1,c
 10852  000790  0E4A               	movlw	74
 10853  000792  6E16               	movwf	?_readEEPROM,c
 10854  000794  ECC0  F028         	call	_readEEPROM	;wreg free
 10855  000798  EFA9  F009         	goto	L20
 10856  00079C                     l10370:
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;main.c: 1971: writeEEPROM(0x4B, val);
 10860  00079C  6A0F               	clrf	?_writeEEPROM+1,c
 10861  00079E  0E4B               	movlw	75
 10862  0007A0  6E0E               	movwf	?_writeEEPROM,c
 10863  0007A2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10864  0007A6  ECDE  F027         	call	_writeEEPROM	;wreg free
 10865                           
 10866                           ;main.c: 1972: rv = readEEPROM(0x4B);
 10867  0007AA  6A17               	clrf	?_readEEPROM+1,c
 10868  0007AC  0E4B               	movlw	75
 10869  0007AE  6E16               	movwf	?_readEEPROM,c
 10870  0007B0  ECC0  F028         	call	_readEEPROM	;wreg free
 10871  0007B4  EFA9  F009         	goto	L20
 10872  0007B8                     l10372:
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;main.c: 1977: writeEEPROM(0x4C, val);
 10876  0007B8  6A0F               	clrf	?_writeEEPROM+1,c
 10877  0007BA  0E4C               	movlw	76
 10878  0007BC  6E0E               	movwf	?_writeEEPROM,c
 10879  0007BE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10880  0007C2  ECDE  F027         	call	_writeEEPROM	;wreg free
 10881                           
 10882                           ;main.c: 1978: rv = readEEPROM(0x4C);
 10883  0007C6  6A17               	clrf	?_readEEPROM+1,c
 10884  0007C8  0E4C               	movlw	76
 10885  0007CA  6E16               	movwf	?_readEEPROM,c
 10886  0007CC  ECC0  F028         	call	_readEEPROM	;wreg free
 10887  0007D0  EFA9  F009         	goto	L20
 10888  0007D4                     l10374:
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;main.c: 1983: writeEEPROM(0x4D, val);
 10892  0007D4  6A0F               	clrf	?_writeEEPROM+1,c
 10893  0007D6  0E4D               	movlw	77
 10894  0007D8  6E0E               	movwf	?_writeEEPROM,c
 10895  0007DA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10896  0007DE  ECDE  F027         	call	_writeEEPROM	;wreg free
 10897                           
 10898                           ;main.c: 1984: rv = readEEPROM(0x4D);
 10899  0007E2  6A17               	clrf	?_readEEPROM+1,c
 10900  0007E4  0E4D               	movlw	77
 10901  0007E6  6E16               	movwf	?_readEEPROM,c
 10902  0007E8  ECC0  F028         	call	_readEEPROM	;wreg free
 10903  0007EC  EFA9  F009         	goto	L20
 10904  0007F0                     l10376:
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;main.c: 1989: writeEEPROM(0x4E, val);
 10908  0007F0  6A0F               	clrf	?_writeEEPROM+1,c
 10909  0007F2  0E4E               	movlw	78
 10910  0007F4  6E0E               	movwf	?_writeEEPROM,c
 10911  0007F6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10912  0007FA  ECDE  F027         	call	_writeEEPROM	;wreg free
 10913                           
 10914                           ;main.c: 1990: rv = readEEPROM(0x4E);
 10915  0007FE  6A17               	clrf	?_readEEPROM+1,c
 10916  000800  0E4E               	movlw	78
 10917  000802  6E16               	movwf	?_readEEPROM,c
 10918  000804  ECC0  F028         	call	_readEEPROM	;wreg free
 10919  000808  EFA9  F009         	goto	L20
 10920  00080C                     l10378:
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;main.c: 1999: writeEEPROM(0x4F, val);
 10924  00080C  6A0F               	clrf	?_writeEEPROM+1,c
 10925  00080E  0E4F               	movlw	79
 10926  000810  6E0E               	movwf	?_writeEEPROM,c
 10927  000812  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10928  000816  ECDE  F027         	call	_writeEEPROM	;wreg free
 10929                           
 10930                           ;main.c: 2000: rv = readEEPROM(0x4F);
 10931  00081A  6A17               	clrf	?_readEEPROM+1,c
 10932  00081C  0E4F               	movlw	79
 10933  00081E  6E16               	movwf	?_readEEPROM,c
 10934  000820  ECC0  F028         	call	_readEEPROM	;wreg free
 10935  000824  EFA9  F009         	goto	L20
 10936  000828                     l10380:
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;main.c: 2005: writeEEPROM(0x50, val);
 10940  000828  6A0F               	clrf	?_writeEEPROM+1,c
 10941  00082A  0E50               	movlw	80
 10942  00082C  6E0E               	movwf	?_writeEEPROM,c
 10943  00082E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10944  000832  ECDE  F027         	call	_writeEEPROM	;wreg free
 10945                           
 10946                           ;main.c: 2006: rv = readEEPROM(0x50);
 10947  000836  6A17               	clrf	?_readEEPROM+1,c
 10948  000838  0E50               	movlw	80
 10949  00083A  6E16               	movwf	?_readEEPROM,c
 10950  00083C  ECC0  F028         	call	_readEEPROM	;wreg free
 10951  000840  EFA9  F009         	goto	L20
 10952  000844                     l10382:
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;main.c: 2011: writeEEPROM(0x51, val);
 10956  000844  6A0F               	clrf	?_writeEEPROM+1,c
 10957  000846  0E51               	movlw	81
 10958  000848  6E0E               	movwf	?_writeEEPROM,c
 10959  00084A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10960  00084E  ECDE  F027         	call	_writeEEPROM	;wreg free
 10961                           
 10962                           ;main.c: 2012: rv = readEEPROM(0x51);
 10963  000852  6A17               	clrf	?_readEEPROM+1,c
 10964  000854  0E51               	movlw	81
 10965  000856  6E16               	movwf	?_readEEPROM,c
 10966  000858  ECC0  F028         	call	_readEEPROM	;wreg free
 10967  00085C  EFA9  F009         	goto	L20
 10968  000860                     l10384:
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;main.c: 2017: writeEEPROM(0x52, val);
 10972  000860  6A0F               	clrf	?_writeEEPROM+1,c
 10973  000862  0E52               	movlw	82
 10974  000864  6E0E               	movwf	?_writeEEPROM,c
 10975  000866  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10976  00086A  ECDE  F027         	call	_writeEEPROM	;wreg free
 10977                           
 10978                           ;main.c: 2018: rv = readEEPROM(0x52);
 10979  00086E  6A17               	clrf	?_readEEPROM+1,c
 10980  000870  0E52               	movlw	82
 10981  000872  6E16               	movwf	?_readEEPROM,c
 10982  000874  ECC0  F028         	call	_readEEPROM	;wreg free
 10983  000878  EFA9  F009         	goto	L20
 10984  00087C                     l10386:
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;main.c: 2023: writeEEPROM(0x53, val);
 10988  00087C  6A0F               	clrf	?_writeEEPROM+1,c
 10989  00087E  0E53               	movlw	83
 10990  000880  6E0E               	movwf	?_writeEEPROM,c
 10991  000882  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10992  000886  ECDE  F027         	call	_writeEEPROM	;wreg free
 10993                           
 10994                           ;main.c: 2024: rv = readEEPROM(0x53);
 10995  00088A  6A17               	clrf	?_readEEPROM+1,c
 10996  00088C  0E53               	movlw	83
 10997  00088E  6E16               	movwf	?_readEEPROM,c
 10998  000890  ECC0  F028         	call	_readEEPROM	;wreg free
 10999  000894  EFA9  F009         	goto	L20
 11000  000898                     l10388:
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;main.c: 2029: writeEEPROM(0x54, val);
 11004  000898  6A0F               	clrf	?_writeEEPROM+1,c
 11005  00089A  0E54               	movlw	84
 11006  00089C  6E0E               	movwf	?_writeEEPROM,c
 11007  00089E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11008  0008A2  ECDE  F027         	call	_writeEEPROM	;wreg free
 11009                           
 11010                           ;main.c: 2030: rv = readEEPROM(0x54);
 11011  0008A6  6A17               	clrf	?_readEEPROM+1,c
 11012  0008A8  0E54               	movlw	84
 11013  0008AA  6E16               	movwf	?_readEEPROM,c
 11014  0008AC  ECC0  F028         	call	_readEEPROM	;wreg free
 11015  0008B0  EFA9  F009         	goto	L20
 11016  0008B4                     l10390:
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;main.c: 2035: writeEEPROM(0x55, val);
 11020  0008B4  6A0F               	clrf	?_writeEEPROM+1,c
 11021  0008B6  0E55               	movlw	85
 11022  0008B8  6E0E               	movwf	?_writeEEPROM,c
 11023  0008BA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11024  0008BE  ECDE  F027         	call	_writeEEPROM	;wreg free
 11025                           
 11026                           ;main.c: 2036: rv = readEEPROM(0x55);
 11027  0008C2  6A17               	clrf	?_readEEPROM+1,c
 11028  0008C4  0E55               	movlw	85
 11029  0008C6  6E16               	movwf	?_readEEPROM,c
 11030  0008C8  ECC0  F028         	call	_readEEPROM	;wreg free
 11031  0008CC  EFA9  F009         	goto	L20
 11032  0008D0                     l10392:
 11033                           
 11034                           ; BSR set to: 0
 11035                           ;main.c: 2041: writeEEPROM(0x56, val);
 11036  0008D0  6A0F               	clrf	?_writeEEPROM+1,c
 11037  0008D2  0E56               	movlw	86
 11038  0008D4  6E0E               	movwf	?_writeEEPROM,c
 11039  0008D6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11040  0008DA  ECDE  F027         	call	_writeEEPROM	;wreg free
 11041                           
 11042                           ;main.c: 2042: rv = readEEPROM(0x56);
 11043  0008DE  6A17               	clrf	?_readEEPROM+1,c
 11044  0008E0  0E56               	movlw	86
 11045  0008E2  6E16               	movwf	?_readEEPROM,c
 11046  0008E4  ECC0  F028         	call	_readEEPROM	;wreg free
 11047  0008E8  EFA9  F009         	goto	L20
 11048  0008EC                     l10394:
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;main.c: 2047: writeEEPROM(0x57, val);
 11052  0008EC  6A0F               	clrf	?_writeEEPROM+1,c
 11053  0008EE  0E57               	movlw	87
 11054  0008F0  6E0E               	movwf	?_writeEEPROM,c
 11055  0008F2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11056  0008F6  ECDE  F027         	call	_writeEEPROM	;wreg free
 11057                           
 11058                           ;main.c: 2048: rv = readEEPROM(0x57);
 11059  0008FA  6A17               	clrf	?_readEEPROM+1,c
 11060  0008FC  0E57               	movlw	87
 11061  0008FE  6E16               	movwf	?_readEEPROM,c
 11062  000900  ECC0  F028         	call	_readEEPROM	;wreg free
 11063  000904  EFA9  F009         	goto	L20
 11064  000908                     l10396:
 11065                           
 11066                           ; BSR set to: 0
 11067                           ;main.c: 2053: writeEEPROM(0x58, val);
 11068  000908  6A0F               	clrf	?_writeEEPROM+1,c
 11069  00090A  0E58               	movlw	88
 11070  00090C  6E0E               	movwf	?_writeEEPROM,c
 11071  00090E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11072  000912  ECDE  F027         	call	_writeEEPROM	;wreg free
 11073                           
 11074                           ;main.c: 2054: rv = readEEPROM(0x58);
 11075  000916  6A17               	clrf	?_readEEPROM+1,c
 11076  000918  0E58               	movlw	88
 11077  00091A  6E16               	movwf	?_readEEPROM,c
 11078  00091C  ECC0  F028         	call	_readEEPROM	;wreg free
 11079  000920  EFA9  F009         	goto	L20
 11080  000924                     l10398:
 11081                           
 11082                           ; BSR set to: 0
 11083                           ;main.c: 2059: writeEEPROM(0x59, val);
 11084  000924  6A0F               	clrf	?_writeEEPROM+1,c
 11085  000926  0E59               	movlw	89
 11086  000928  6E0E               	movwf	?_writeEEPROM,c
 11087  00092A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11088  00092E  ECDE  F027         	call	_writeEEPROM	;wreg free
 11089                           
 11090                           ;main.c: 2060: rv = readEEPROM(0x59);
 11091  000932  6A17               	clrf	?_readEEPROM+1,c
 11092  000934  0E59               	movlw	89
 11093  000936  6E16               	movwf	?_readEEPROM,c
 11094  000938  ECC0  F028         	call	_readEEPROM	;wreg free
 11095  00093C  EFA9  F009         	goto	L20
 11096  000940                     l10400:
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;main.c: 2065: writeEEPROM(0x5A, val);
 11100  000940  6A0F               	clrf	?_writeEEPROM+1,c
 11101  000942  0E5A               	movlw	90
 11102  000944  6E0E               	movwf	?_writeEEPROM,c
 11103  000946  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11104  00094A  ECDE  F027         	call	_writeEEPROM	;wreg free
 11105                           
 11106                           ;main.c: 2066: rv = readEEPROM(0x5A);
 11107  00094E  6A17               	clrf	?_readEEPROM+1,c
 11108  000950  0E5A               	movlw	90
 11109  000952  6E16               	movwf	?_readEEPROM,c
 11110  000954  ECC0  F028         	call	_readEEPROM	;wreg free
 11111  000958  EFA9  F009         	goto	L20
 11112  00095C                     l10402:
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;main.c: 2075: writeEEPROM(0x5B, val);
 11116  00095C  6A0F               	clrf	?_writeEEPROM+1,c
 11117  00095E  0E5B               	movlw	91
 11118  000960  6E0E               	movwf	?_writeEEPROM,c
 11119  000962  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11120  000966  ECDE  F027         	call	_writeEEPROM	;wreg free
 11121                           
 11122                           ;main.c: 2076: rv = readEEPROM(0x5B);
 11123  00096A  6A17               	clrf	?_readEEPROM+1,c
 11124  00096C  0E5B               	movlw	91
 11125  00096E  6E16               	movwf	?_readEEPROM,c
 11126  000970  ECC0  F028         	call	_readEEPROM	;wreg free
 11127  000974  EFA9  F009         	goto	L20
 11128  000978                     l10404:
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;main.c: 2081: writeEEPROM(0x5C, val);
 11132  000978  6A0F               	clrf	?_writeEEPROM+1,c
 11133  00097A  0E5C               	movlw	92
 11134  00097C  6E0E               	movwf	?_writeEEPROM,c
 11135  00097E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11136  000982  ECDE  F027         	call	_writeEEPROM	;wreg free
 11137                           
 11138                           ;main.c: 2082: rv = readEEPROM(0x5C);
 11139  000986  6A17               	clrf	?_readEEPROM+1,c
 11140  000988  0E5C               	movlw	92
 11141  00098A  6E16               	movwf	?_readEEPROM,c
 11142  00098C  ECC0  F028         	call	_readEEPROM	;wreg free
 11143  000990  EFA9  F009         	goto	L20
 11144  000994                     l10406:
 11145                           
 11146                           ; BSR set to: 0
 11147                           ;main.c: 2087: writeEEPROM(0x5D, val);
 11148  000994  6A0F               	clrf	?_writeEEPROM+1,c
 11149  000996  0E5D               	movlw	93
 11150  000998  6E0E               	movwf	?_writeEEPROM,c
 11151  00099A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11152  00099E  ECDE  F027         	call	_writeEEPROM	;wreg free
 11153                           
 11154                           ;main.c: 2088: rv = readEEPROM(0x5D);
 11155  0009A2  6A17               	clrf	?_readEEPROM+1,c
 11156  0009A4  0E5D               	movlw	93
 11157  0009A6  6E16               	movwf	?_readEEPROM,c
 11158  0009A8  ECC0  F028         	call	_readEEPROM	;wreg free
 11159  0009AC  EFA9  F009         	goto	L20
 11160  0009B0                     l10408:
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;main.c: 2093: writeEEPROM(0x5E, val);
 11164  0009B0  6A0F               	clrf	?_writeEEPROM+1,c
 11165  0009B2  0E5E               	movlw	94
 11166  0009B4  6E0E               	movwf	?_writeEEPROM,c
 11167  0009B6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11168  0009BA  ECDE  F027         	call	_writeEEPROM	;wreg free
 11169                           
 11170                           ;main.c: 2094: rv = readEEPROM(0x5E);
 11171  0009BE  6A17               	clrf	?_readEEPROM+1,c
 11172  0009C0  0E5E               	movlw	94
 11173  0009C2  6E16               	movwf	?_readEEPROM,c
 11174  0009C4  ECC0  F028         	call	_readEEPROM	;wreg free
 11175  0009C8  EFA9  F009         	goto	L20
 11176  0009CC                     l10410:
 11177                           
 11178                           ; BSR set to: 0
 11179                           ;main.c: 2099: writeEEPROM(0x5F, val);
 11180  0009CC  6A0F               	clrf	?_writeEEPROM+1,c
 11181  0009CE  0E5F               	movlw	95
 11182  0009D0  6E0E               	movwf	?_writeEEPROM,c
 11183  0009D2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11184  0009D6  ECDE  F027         	call	_writeEEPROM	;wreg free
 11185                           
 11186                           ;main.c: 2100: rv = readEEPROM(0x5F);
 11187  0009DA  6A17               	clrf	?_readEEPROM+1,c
 11188  0009DC  0E5F               	movlw	95
 11189  0009DE  6E16               	movwf	?_readEEPROM,c
 11190  0009E0  ECC0  F028         	call	_readEEPROM	;wreg free
 11191  0009E4  EFA9  F009         	goto	L20
 11192  0009E8                     l10412:
 11193                           
 11194                           ; BSR set to: 0
 11195                           ;main.c: 2105: writeEEPROM(0x60, val);
 11196  0009E8  6A0F               	clrf	?_writeEEPROM+1,c
 11197  0009EA  0E60               	movlw	96
 11198  0009EC  6E0E               	movwf	?_writeEEPROM,c
 11199  0009EE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11200  0009F2  ECDE  F027         	call	_writeEEPROM	;wreg free
 11201                           
 11202                           ;main.c: 2106: rv = readEEPROM(0x60);
 11203  0009F6  6A17               	clrf	?_readEEPROM+1,c
 11204  0009F8  0E60               	movlw	96
 11205  0009FA  6E16               	movwf	?_readEEPROM,c
 11206  0009FC  ECC0  F028         	call	_readEEPROM	;wreg free
 11207  000A00  EFA9  F009         	goto	L20
 11208  000A04                     l10414:
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;main.c: 2111: writeEEPROM(0x61, val);
 11212  000A04  6A0F               	clrf	?_writeEEPROM+1,c
 11213  000A06  0E61               	movlw	97
 11214  000A08  6E0E               	movwf	?_writeEEPROM,c
 11215  000A0A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11216  000A0E  ECDE  F027         	call	_writeEEPROM	;wreg free
 11217                           
 11218                           ;main.c: 2112: rv = readEEPROM(0x61);
 11219  000A12  6A17               	clrf	?_readEEPROM+1,c
 11220  000A14  0E61               	movlw	97
 11221  000A16  6E16               	movwf	?_readEEPROM,c
 11222  000A18  ECC0  F028         	call	_readEEPROM	;wreg free
 11223  000A1C  EFA9  F009         	goto	L20
 11224  000A20                     l10416:
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;main.c: 2117: writeEEPROM(0x62, val);
 11228  000A20  6A0F               	clrf	?_writeEEPROM+1,c
 11229  000A22  0E62               	movlw	98
 11230  000A24  6E0E               	movwf	?_writeEEPROM,c
 11231  000A26  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11232  000A2A  ECDE  F027         	call	_writeEEPROM	;wreg free
 11233                           
 11234                           ;main.c: 2118: rv = readEEPROM(0x62);
 11235  000A2E  6A17               	clrf	?_readEEPROM+1,c
 11236  000A30  0E62               	movlw	98
 11237  000A32  6E16               	movwf	?_readEEPROM,c
 11238  000A34  ECC0  F028         	call	_readEEPROM	;wreg free
 11239  000A38  EFA9  F009         	goto	L20
 11240  000A3C                     l10418:
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;main.c: 2123: writeEEPROM(0x63, val);
 11244  000A3C  6A0F               	clrf	?_writeEEPROM+1,c
 11245  000A3E  0E63               	movlw	99
 11246  000A40  6E0E               	movwf	?_writeEEPROM,c
 11247  000A42  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11248  000A46  ECDE  F027         	call	_writeEEPROM	;wreg free
 11249                           
 11250                           ;main.c: 2124: rv = readEEPROM(0x63);
 11251  000A4A  6A17               	clrf	?_readEEPROM+1,c
 11252  000A4C  0E63               	movlw	99
 11253  000A4E  6E16               	movwf	?_readEEPROM,c
 11254  000A50  ECC0  F028         	call	_readEEPROM	;wreg free
 11255  000A54  EFA9  F009         	goto	L20
 11256  000A58                     l10420:
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;main.c: 2129: writeEEPROM(0x64, val);
 11260  000A58  6A0F               	clrf	?_writeEEPROM+1,c
 11261  000A5A  0E64               	movlw	100
 11262  000A5C  6E0E               	movwf	?_writeEEPROM,c
 11263  000A5E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11264  000A62  ECDE  F027         	call	_writeEEPROM	;wreg free
 11265                           
 11266                           ;main.c: 2130: rv = readEEPROM(0x64);
 11267  000A66  6A17               	clrf	?_readEEPROM+1,c
 11268  000A68  0E64               	movlw	100
 11269  000A6A  6E16               	movwf	?_readEEPROM,c
 11270  000A6C  ECC0  F028         	call	_readEEPROM	;wreg free
 11271  000A70  EFA9  F009         	goto	L20
 11272  000A74                     l10422:
 11273                           
 11274                           ; BSR set to: 0
 11275                           ;main.c: 2135: writeEEPROM(0x65, val);
 11276  000A74  6A0F               	clrf	?_writeEEPROM+1,c
 11277  000A76  0E65               	movlw	101
 11278  000A78  6E0E               	movwf	?_writeEEPROM,c
 11279  000A7A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11280  000A7E  ECDE  F027         	call	_writeEEPROM	;wreg free
 11281                           
 11282                           ;main.c: 2136: rv = readEEPROM(0x65);
 11283  000A82  6A17               	clrf	?_readEEPROM+1,c
 11284  000A84  0E65               	movlw	101
 11285  000A86  6E16               	movwf	?_readEEPROM,c
 11286  000A88  ECC0  F028         	call	_readEEPROM	;wreg free
 11287  000A8C  EFA9  F009         	goto	L20
 11288  000A90                     l10424:
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;main.c: 2141: writeEEPROM(0x66, val);
 11292  000A90  6A0F               	clrf	?_writeEEPROM+1,c
 11293  000A92  0E66               	movlw	102
 11294  000A94  6E0E               	movwf	?_writeEEPROM,c
 11295  000A96  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11296  000A9A  ECDE  F027         	call	_writeEEPROM	;wreg free
 11297                           
 11298                           ;main.c: 2142: rv = readEEPROM(0x66);
 11299  000A9E  6A17               	clrf	?_readEEPROM+1,c
 11300  000AA0  0E66               	movlw	102
 11301  000AA2  6E16               	movwf	?_readEEPROM,c
 11302  000AA4  ECC0  F028         	call	_readEEPROM	;wreg free
 11303  000AA8  EFA9  F009         	goto	L20
 11304  000AAC                     l10426:
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;main.c: 2151: writeEEPROM(0x67, val);
 11308  000AAC  6A0F               	clrf	?_writeEEPROM+1,c
 11309  000AAE  0E67               	movlw	103
 11310  000AB0  6E0E               	movwf	?_writeEEPROM,c
 11311  000AB2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11312  000AB6  ECDE  F027         	call	_writeEEPROM	;wreg free
 11313                           
 11314                           ;main.c: 2152: rv = readEEPROM(0x67);
 11315  000ABA  6A17               	clrf	?_readEEPROM+1,c
 11316  000ABC  0E67               	movlw	103
 11317  000ABE  6E16               	movwf	?_readEEPROM,c
 11318  000AC0  ECC0  F028         	call	_readEEPROM	;wreg free
 11319  000AC4  EFA9  F009         	goto	L20
 11320  000AC8                     l10428:
 11321                           
 11322                           ; BSR set to: 0
 11323                           ;main.c: 2157: writeEEPROM(0x68, val);
 11324  000AC8  6A0F               	clrf	?_writeEEPROM+1,c
 11325  000ACA  0E68               	movlw	104
 11326  000ACC  6E0E               	movwf	?_writeEEPROM,c
 11327  000ACE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11328  000AD2  ECDE  F027         	call	_writeEEPROM	;wreg free
 11329                           
 11330                           ;main.c: 2158: rv = readEEPROM(0x68);
 11331  000AD6  6A17               	clrf	?_readEEPROM+1,c
 11332  000AD8  0E68               	movlw	104
 11333  000ADA  6E16               	movwf	?_readEEPROM,c
 11334  000ADC  ECC0  F028         	call	_readEEPROM	;wreg free
 11335  000AE0  EFA9  F009         	goto	L20
 11336  000AE4                     l10430:
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;main.c: 2163: writeEEPROM(0x69, val);
 11340  000AE4  6A0F               	clrf	?_writeEEPROM+1,c
 11341  000AE6  0E69               	movlw	105
 11342  000AE8  6E0E               	movwf	?_writeEEPROM,c
 11343  000AEA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11344  000AEE  ECDE  F027         	call	_writeEEPROM	;wreg free
 11345                           
 11346                           ;main.c: 2164: rv = readEEPROM(0x69);
 11347  000AF2  6A17               	clrf	?_readEEPROM+1,c
 11348  000AF4  0E69               	movlw	105
 11349  000AF6  6E16               	movwf	?_readEEPROM,c
 11350  000AF8  ECC0  F028         	call	_readEEPROM	;wreg free
 11351  000AFC  EFA9  F009         	goto	L20
 11352  000B00                     l10432:
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;main.c: 2169: writeEEPROM(0x6A, val);
 11356  000B00  6A0F               	clrf	?_writeEEPROM+1,c
 11357  000B02  0E6A               	movlw	106
 11358  000B04  6E0E               	movwf	?_writeEEPROM,c
 11359  000B06  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11360  000B0A  ECDE  F027         	call	_writeEEPROM	;wreg free
 11361                           
 11362                           ;main.c: 2170: rv = readEEPROM(0x6A);
 11363  000B0E  6A17               	clrf	?_readEEPROM+1,c
 11364  000B10  0E6A               	movlw	106
 11365  000B12  6E16               	movwf	?_readEEPROM,c
 11366  000B14  ECC0  F028         	call	_readEEPROM	;wreg free
 11367  000B18  EFA9  F009         	goto	L20
 11368  000B1C                     l10434:
 11369                           
 11370                           ; BSR set to: 0
 11371                           ;main.c: 2175: writeEEPROM(0x6B, val);
 11372  000B1C  6A0F               	clrf	?_writeEEPROM+1,c
 11373  000B1E  0E6B               	movlw	107
 11374  000B20  6E0E               	movwf	?_writeEEPROM,c
 11375  000B22  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11376  000B26  ECDE  F027         	call	_writeEEPROM	;wreg free
 11377                           
 11378                           ;main.c: 2176: rv = readEEPROM(0x6B);
 11379  000B2A  6A17               	clrf	?_readEEPROM+1,c
 11380  000B2C  0E6B               	movlw	107
 11381  000B2E  6E16               	movwf	?_readEEPROM,c
 11382  000B30  ECC0  F028         	call	_readEEPROM	;wreg free
 11383  000B34  EFA9  F009         	goto	L20
 11384  000B38                     l10436:
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;main.c: 2181: writeEEPROM(0x6C, val);
 11388  000B38  6A0F               	clrf	?_writeEEPROM+1,c
 11389  000B3A  0E6C               	movlw	108
 11390  000B3C  6E0E               	movwf	?_writeEEPROM,c
 11391  000B3E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11392  000B42  ECDE  F027         	call	_writeEEPROM	;wreg free
 11393                           
 11394                           ;main.c: 2182: rv = readEEPROM(0x6C);
 11395  000B46  6A17               	clrf	?_readEEPROM+1,c
 11396  000B48  0E6C               	movlw	108
 11397  000B4A  6E16               	movwf	?_readEEPROM,c
 11398  000B4C  ECC0  F028         	call	_readEEPROM	;wreg free
 11399  000B50  EFA9  F009         	goto	L20
 11400  000B54                     l10438:
 11401                           
 11402                           ; BSR set to: 0
 11403                           ;main.c: 2187: writeEEPROM(0x6D, val);
 11404  000B54  6A0F               	clrf	?_writeEEPROM+1,c
 11405  000B56  0E6D               	movlw	109
 11406  000B58  6E0E               	movwf	?_writeEEPROM,c
 11407  000B5A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11408  000B5E  ECDE  F027         	call	_writeEEPROM	;wreg free
 11409                           
 11410                           ;main.c: 2188: rv = readEEPROM(0x6D);
 11411  000B62  6A17               	clrf	?_readEEPROM+1,c
 11412  000B64  0E6D               	movlw	109
 11413  000B66  6E16               	movwf	?_readEEPROM,c
 11414  000B68  ECC0  F028         	call	_readEEPROM	;wreg free
 11415  000B6C  D3F2               	goto	L20
 11416  000B6E                     l10440:
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;main.c: 2193: writeEEPROM(0x6E, val);
 11420  000B6E  6A0F               	clrf	?_writeEEPROM+1,c
 11421  000B70  0E6E               	movlw	110
 11422  000B72  6E0E               	movwf	?_writeEEPROM,c
 11423  000B74  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11424  000B78  ECDE  F027         	call	_writeEEPROM	;wreg free
 11425                           
 11426                           ;main.c: 2194: rv = readEEPROM(0x6E);
 11427  000B7C  6A17               	clrf	?_readEEPROM+1,c
 11428  000B7E  0E6E               	movlw	110
 11429  000B80  6E16               	movwf	?_readEEPROM,c
 11430  000B82  ECC0  F028         	call	_readEEPROM	;wreg free
 11431  000B86  D3E5               	goto	L20
 11432  000B88                     l10442:
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;main.c: 2199: writeEEPROM(0x6F, val);
 11436  000B88  6A0F               	clrf	?_writeEEPROM+1,c
 11437  000B8A  0E6F               	movlw	111
 11438  000B8C  6E0E               	movwf	?_writeEEPROM,c
 11439  000B8E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11440  000B92  ECDE  F027         	call	_writeEEPROM	;wreg free
 11441                           
 11442                           ;main.c: 2200: rv = readEEPROM(0x6F);
 11443  000B96  6A17               	clrf	?_readEEPROM+1,c
 11444  000B98  0E6F               	movlw	111
 11445  000B9A  6E16               	movwf	?_readEEPROM,c
 11446  000B9C  ECC0  F028         	call	_readEEPROM	;wreg free
 11447  000BA0  D3D8               	goto	L20
 11448  000BA2                     l10444:
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;main.c: 2205: writeEEPROM(0x70, val);
 11452  000BA2  6A0F               	clrf	?_writeEEPROM+1,c
 11453  000BA4  0E70               	movlw	112
 11454  000BA6  6E0E               	movwf	?_writeEEPROM,c
 11455  000BA8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11456  000BAC  ECDE  F027         	call	_writeEEPROM	;wreg free
 11457                           
 11458                           ;main.c: 2206: rv = readEEPROM(0x70);
 11459  000BB0  6A17               	clrf	?_readEEPROM+1,c
 11460  000BB2  0E70               	movlw	112
 11461  000BB4  6E16               	movwf	?_readEEPROM,c
 11462  000BB6  ECC0  F028         	call	_readEEPROM	;wreg free
 11463  000BBA  D3CB               	goto	L20
 11464  000BBC                     l10446:
 11465                           
 11466                           ; BSR set to: 0
 11467                           ;main.c: 2211: writeEEPROM(0x71, val);
 11468  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 11469  000BBE  0E71               	movlw	113
 11470  000BC0  6E0E               	movwf	?_writeEEPROM,c
 11471  000BC2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11472  000BC6  ECDE  F027         	call	_writeEEPROM	;wreg free
 11473                           
 11474                           ;main.c: 2212: rv = readEEPROM(0x71);
 11475  000BCA  6A17               	clrf	?_readEEPROM+1,c
 11476  000BCC  0E71               	movlw	113
 11477  000BCE  6E16               	movwf	?_readEEPROM,c
 11478  000BD0  ECC0  F028         	call	_readEEPROM	;wreg free
 11479  000BD4  D3BE               	goto	L20
 11480  000BD6                     l10448:
 11481                           
 11482                           ; BSR set to: 0
 11483                           ;main.c: 2217: writeEEPROM(0x72, val);
 11484  000BD6  6A0F               	clrf	?_writeEEPROM+1,c
 11485  000BD8  0E72               	movlw	114
 11486  000BDA  6E0E               	movwf	?_writeEEPROM,c
 11487  000BDC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11488  000BE0  ECDE  F027         	call	_writeEEPROM	;wreg free
 11489                           
 11490                           ;main.c: 2218: rv = readEEPROM(0x72);
 11491  000BE4  6A17               	clrf	?_readEEPROM+1,c
 11492  000BE6  0E72               	movlw	114
 11493  000BE8  6E16               	movwf	?_readEEPROM,c
 11494  000BEA  ECC0  F028         	call	_readEEPROM	;wreg free
 11495  000BEE  D3B1               	goto	L20
 11496  000BF0                     l10450:
 11497                           
 11498                           ; BSR set to: 0
 11499                           ;main.c: 2227: writeEEPROM(0x73, val);
 11500  000BF0  6A0F               	clrf	?_writeEEPROM+1,c
 11501  000BF2  0E73               	movlw	115
 11502  000BF4  6E0E               	movwf	?_writeEEPROM,c
 11503  000BF6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11504  000BFA  ECDE  F027         	call	_writeEEPROM	;wreg free
 11505                           
 11506                           ;main.c: 2228: rv = readEEPROM(0x73);
 11507  000BFE  6A17               	clrf	?_readEEPROM+1,c
 11508  000C00  0E73               	movlw	115
 11509  000C02  6E16               	movwf	?_readEEPROM,c
 11510  000C04  ECC0  F028         	call	_readEEPROM	;wreg free
 11511  000C08  D3A4               	goto	L20
 11512  000C0A                     l10452:
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;main.c: 2233: writeEEPROM(0x74, val);
 11516  000C0A  6A0F               	clrf	?_writeEEPROM+1,c
 11517  000C0C  0E74               	movlw	116
 11518  000C0E  6E0E               	movwf	?_writeEEPROM,c
 11519  000C10  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11520  000C14  ECDE  F027         	call	_writeEEPROM	;wreg free
 11521                           
 11522                           ;main.c: 2234: rv = readEEPROM(0x74);
 11523  000C18  6A17               	clrf	?_readEEPROM+1,c
 11524  000C1A  0E74               	movlw	116
 11525  000C1C  6E16               	movwf	?_readEEPROM,c
 11526  000C1E  ECC0  F028         	call	_readEEPROM	;wreg free
 11527  000C22  D397               	goto	L20
 11528  000C24                     l10454:
 11529                           
 11530                           ; BSR set to: 0
 11531                           ;main.c: 2239: writeEEPROM(0x75, val);
 11532  000C24  6A0F               	clrf	?_writeEEPROM+1,c
 11533  000C26  0E75               	movlw	117
 11534  000C28  6E0E               	movwf	?_writeEEPROM,c
 11535  000C2A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11536  000C2E  ECDE  F027         	call	_writeEEPROM	;wreg free
 11537                           
 11538                           ;main.c: 2240: rv = readEEPROM(0x75);
 11539  000C32  6A17               	clrf	?_readEEPROM+1,c
 11540  000C34  0E75               	movlw	117
 11541  000C36  6E16               	movwf	?_readEEPROM,c
 11542  000C38  ECC0  F028         	call	_readEEPROM	;wreg free
 11543  000C3C  D38A               	goto	L20
 11544  000C3E                     l10456:
 11545                           
 11546                           ; BSR set to: 0
 11547                           ;main.c: 2245: writeEEPROM(0x76, val);
 11548  000C3E  6A0F               	clrf	?_writeEEPROM+1,c
 11549  000C40  0E76               	movlw	118
 11550  000C42  6E0E               	movwf	?_writeEEPROM,c
 11551  000C44  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11552  000C48  ECDE  F027         	call	_writeEEPROM	;wreg free
 11553                           
 11554                           ;main.c: 2246: rv = readEEPROM(0x76);
 11555  000C4C  6A17               	clrf	?_readEEPROM+1,c
 11556  000C4E  0E76               	movlw	118
 11557  000C50  6E16               	movwf	?_readEEPROM,c
 11558  000C52  ECC0  F028         	call	_readEEPROM	;wreg free
 11559  000C56  D37D               	goto	L20
 11560  000C58                     l10458:
 11561                           
 11562                           ; BSR set to: 0
 11563                           ;main.c: 2251: writeEEPROM(0x77, val);
 11564  000C58  6A0F               	clrf	?_writeEEPROM+1,c
 11565  000C5A  0E77               	movlw	119
 11566  000C5C  6E0E               	movwf	?_writeEEPROM,c
 11567  000C5E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11568  000C62  ECDE  F027         	call	_writeEEPROM	;wreg free
 11569                           
 11570                           ;main.c: 2252: rv = readEEPROM(0x77);
 11571  000C66  6A17               	clrf	?_readEEPROM+1,c
 11572  000C68  0E77               	movlw	119
 11573  000C6A  6E16               	movwf	?_readEEPROM,c
 11574  000C6C  ECC0  F028         	call	_readEEPROM	;wreg free
 11575  000C70  D370               	goto	L20
 11576  000C72                     l10460:
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;main.c: 2257: writeEEPROM(0x78, val);
 11580  000C72  6A0F               	clrf	?_writeEEPROM+1,c
 11581  000C74  0E78               	movlw	120
 11582  000C76  6E0E               	movwf	?_writeEEPROM,c
 11583  000C78  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11584  000C7C  ECDE  F027         	call	_writeEEPROM	;wreg free
 11585                           
 11586                           ;main.c: 2258: rv = readEEPROM(0x78);
 11587  000C80  6A17               	clrf	?_readEEPROM+1,c
 11588  000C82  0E78               	movlw	120
 11589  000C84  6E16               	movwf	?_readEEPROM,c
 11590  000C86  ECC0  F028         	call	_readEEPROM	;wreg free
 11591  000C8A  D363               	goto	L20
 11592  000C8C                     l10462:
 11593                           
 11594                           ; BSR set to: 0
 11595                           ;main.c: 2263: writeEEPROM(0x79, val);
 11596  000C8C  6A0F               	clrf	?_writeEEPROM+1,c
 11597  000C8E  0E79               	movlw	121
 11598  000C90  6E0E               	movwf	?_writeEEPROM,c
 11599  000C92  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11600  000C96  ECDE  F027         	call	_writeEEPROM	;wreg free
 11601                           
 11602                           ;main.c: 2264: rv = readEEPROM(0x79);
 11603  000C9A  6A17               	clrf	?_readEEPROM+1,c
 11604  000C9C  0E79               	movlw	121
 11605  000C9E  6E16               	movwf	?_readEEPROM,c
 11606  000CA0  ECC0  F028         	call	_readEEPROM	;wreg free
 11607  000CA4  D356               	goto	L20
 11608  000CA6                     l10464:
 11609                           
 11610                           ; BSR set to: 0
 11611                           ;main.c: 2269: writeEEPROM(0x7A, val);
 11612  000CA6  6A0F               	clrf	?_writeEEPROM+1,c
 11613  000CA8  0E7A               	movlw	122
 11614  000CAA  6E0E               	movwf	?_writeEEPROM,c
 11615  000CAC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11616  000CB0  ECDE  F027         	call	_writeEEPROM	;wreg free
 11617                           
 11618                           ;main.c: 2270: rv = readEEPROM(0x7A);
 11619  000CB4  6A17               	clrf	?_readEEPROM+1,c
 11620  000CB6  0E7A               	movlw	122
 11621  000CB8  6E16               	movwf	?_readEEPROM,c
 11622  000CBA  ECC0  F028         	call	_readEEPROM	;wreg free
 11623  000CBE  D349               	goto	L20
 11624  000CC0                     l10466:
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;main.c: 2275: writeEEPROM(0x7B, val);
 11628  000CC0  6A0F               	clrf	?_writeEEPROM+1,c
 11629  000CC2  0E7B               	movlw	123
 11630  000CC4  6E0E               	movwf	?_writeEEPROM,c
 11631  000CC6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11632  000CCA  ECDE  F027         	call	_writeEEPROM	;wreg free
 11633                           
 11634                           ;main.c: 2276: rv = readEEPROM(0x7B);
 11635  000CCE  6A17               	clrf	?_readEEPROM+1,c
 11636  000CD0  0E7B               	movlw	123
 11637  000CD2  6E16               	movwf	?_readEEPROM,c
 11638  000CD4  ECC0  F028         	call	_readEEPROM	;wreg free
 11639  000CD8  D33C               	goto	L20
 11640  000CDA                     l10468:
 11641                           
 11642                           ; BSR set to: 0
 11643                           ;main.c: 2281: writeEEPROM(0x7C, val);
 11644  000CDA  6A0F               	clrf	?_writeEEPROM+1,c
 11645  000CDC  0E7C               	movlw	124
 11646  000CDE  6E0E               	movwf	?_writeEEPROM,c
 11647  000CE0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11648  000CE4  ECDE  F027         	call	_writeEEPROM	;wreg free
 11649                           
 11650                           ;main.c: 2282: rv = readEEPROM(0x7C);
 11651  000CE8  6A17               	clrf	?_readEEPROM+1,c
 11652  000CEA  0E7C               	movlw	124
 11653  000CEC  6E16               	movwf	?_readEEPROM,c
 11654  000CEE  ECC0  F028         	call	_readEEPROM	;wreg free
 11655  000CF2  D32F               	goto	L20
 11656  000CF4                     l10470:
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;main.c: 2287: writeEEPROM(0x7D, val);
 11660  000CF4  6A0F               	clrf	?_writeEEPROM+1,c
 11661  000CF6  0E7D               	movlw	125
 11662  000CF8  6E0E               	movwf	?_writeEEPROM,c
 11663  000CFA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11664  000CFE  ECDE  F027         	call	_writeEEPROM	;wreg free
 11665                           
 11666                           ;main.c: 2288: rv = readEEPROM(0x7D);
 11667  000D02  6A17               	clrf	?_readEEPROM+1,c
 11668  000D04  0E7D               	movlw	125
 11669  000D06  6E16               	movwf	?_readEEPROM,c
 11670  000D08  ECC0  F028         	call	_readEEPROM	;wreg free
 11671  000D0C  D322               	goto	L20
 11672  000D0E                     l10472:
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;main.c: 2293: writeEEPROM(0x7E, val);
 11676  000D0E  6A0F               	clrf	?_writeEEPROM+1,c
 11677  000D10  0E7E               	movlw	126
 11678  000D12  6E0E               	movwf	?_writeEEPROM,c
 11679  000D14  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11680  000D18  ECDE  F027         	call	_writeEEPROM	;wreg free
 11681                           
 11682                           ;main.c: 2294: rv = readEEPROM(0x7E);
 11683  000D1C  6A17               	clrf	?_readEEPROM+1,c
 11684  000D1E  0E7E               	movlw	126
 11685  000D20  6E16               	movwf	?_readEEPROM,c
 11686  000D22  ECC0  F028         	call	_readEEPROM	;wreg free
 11687  000D26  D315               	goto	L20
 11688  000D28                     l10474:
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;main.c: 2303: writeEEPROM(0x7F, val );
 11692  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 11693  000D2A  0E7F               	movlw	127
 11694  000D2C  6E0E               	movwf	?_writeEEPROM,c
 11695  000D2E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11696  000D32  ECDE  F027         	call	_writeEEPROM	;wreg free
 11697                           
 11698                           ;main.c: 2304: rv = readEEPROM(0x7F);
 11699  000D36  6A17               	clrf	?_readEEPROM+1,c
 11700  000D38  0E7F               	movlw	127
 11701  000D3A  6E16               	movwf	?_readEEPROM,c
 11702  000D3C  ECC0  F028         	call	_readEEPROM	;wreg free
 11703  000D40  D308               	goto	L20
 11704  000D42                     l10476:
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;main.c: 2309: writeEEPROM(0x80, val );
 11708  000D42  6A0F               	clrf	?_writeEEPROM+1,c
 11709  000D44  0E80               	movlw	128
 11710  000D46  6E0E               	movwf	?_writeEEPROM,c
 11711  000D48  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11712  000D4C  ECDE  F027         	call	_writeEEPROM	;wreg free
 11713                           
 11714                           ;main.c: 2310: rv = readEEPROM(0x80);
 11715  000D50  6A17               	clrf	?_readEEPROM+1,c
 11716  000D52  0E80               	movlw	128
 11717  000D54  6E16               	movwf	?_readEEPROM,c
 11718  000D56  ECC0  F028         	call	_readEEPROM	;wreg free
 11719  000D5A  D2FB               	goto	L20
 11720  000D5C                     l10478:
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;main.c: 2315: writeEEPROM(0x81, val );
 11724  000D5C  6A0F               	clrf	?_writeEEPROM+1,c
 11725  000D5E  0E81               	movlw	129
 11726  000D60  6E0E               	movwf	?_writeEEPROM,c
 11727  000D62  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11728  000D66  ECDE  F027         	call	_writeEEPROM	;wreg free
 11729                           
 11730                           ;main.c: 2316: rv = readEEPROM(0x81);
 11731  000D6A  6A17               	clrf	?_readEEPROM+1,c
 11732  000D6C  0E81               	movlw	129
 11733  000D6E  6E16               	movwf	?_readEEPROM,c
 11734  000D70  ECC0  F028         	call	_readEEPROM	;wreg free
 11735  000D74  D2EE               	goto	L20
 11736  000D76                     l10480:
 11737                           
 11738                           ; BSR set to: 0
 11739                           ;main.c: 2321: writeEEPROM(0x82, val );
 11740  000D76  6A0F               	clrf	?_writeEEPROM+1,c
 11741  000D78  0E82               	movlw	130
 11742  000D7A  6E0E               	movwf	?_writeEEPROM,c
 11743  000D7C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11744  000D80  ECDE  F027         	call	_writeEEPROM	;wreg free
 11745                           
 11746                           ;main.c: 2322: rv = readEEPROM(0x82);
 11747  000D84  6A17               	clrf	?_readEEPROM+1,c
 11748  000D86  0E82               	movlw	130
 11749  000D88  6E16               	movwf	?_readEEPROM,c
 11750  000D8A  ECC0  F028         	call	_readEEPROM	;wreg free
 11751  000D8E  D2E1               	goto	L20
 11752  000D90                     l10482:
 11753                           
 11754                           ; BSR set to: 0
 11755                           ;main.c: 2327: writeEEPROM(0x83, val );
 11756  000D90  6A0F               	clrf	?_writeEEPROM+1,c
 11757  000D92  0E83               	movlw	131
 11758  000D94  6E0E               	movwf	?_writeEEPROM,c
 11759  000D96  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11760  000D9A  ECDE  F027         	call	_writeEEPROM	;wreg free
 11761                           
 11762                           ;main.c: 2328: rv = readEEPROM(0x83);
 11763  000D9E  6A17               	clrf	?_readEEPROM+1,c
 11764  000DA0  0E83               	movlw	131
 11765  000DA2  6E16               	movwf	?_readEEPROM,c
 11766  000DA4  ECC0  F028         	call	_readEEPROM	;wreg free
 11767  000DA8  D2D4               	goto	L20
 11768  000DAA                     l10484:
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;main.c: 2333: writeEEPROM(0x84, val );
 11772  000DAA  6A0F               	clrf	?_writeEEPROM+1,c
 11773  000DAC  0E84               	movlw	132
 11774  000DAE  6E0E               	movwf	?_writeEEPROM,c
 11775  000DB0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11776  000DB4  ECDE  F027         	call	_writeEEPROM	;wreg free
 11777                           
 11778                           ;main.c: 2334: rv = readEEPROM(0x84);
 11779  000DB8  6A17               	clrf	?_readEEPROM+1,c
 11780  000DBA  0E84               	movlw	132
 11781  000DBC  6E16               	movwf	?_readEEPROM,c
 11782  000DBE  ECC0  F028         	call	_readEEPROM	;wreg free
 11783  000DC2  D2C7               	goto	L20
 11784  000DC4                     l10486:
 11785                           
 11786                           ; BSR set to: 0
 11787                           ;main.c: 2339: writeEEPROM(0x85, val );
 11788  000DC4  6A0F               	clrf	?_writeEEPROM+1,c
 11789  000DC6  0E85               	movlw	133
 11790  000DC8  6E0E               	movwf	?_writeEEPROM,c
 11791  000DCA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11792  000DCE  ECDE  F027         	call	_writeEEPROM	;wreg free
 11793                           
 11794                           ;main.c: 2340: rv = readEEPROM(0x85);
 11795  000DD2  6A17               	clrf	?_readEEPROM+1,c
 11796  000DD4  0E85               	movlw	133
 11797  000DD6  6E16               	movwf	?_readEEPROM,c
 11798  000DD8  ECC0  F028         	call	_readEEPROM	;wreg free
 11799  000DDC  D2BA               	goto	L20
 11800  000DDE                     l10488:
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;main.c: 2345: writeEEPROM(0x86, val );
 11804  000DDE  6A0F               	clrf	?_writeEEPROM+1,c
 11805  000DE0  0E86               	movlw	134
 11806  000DE2  6E0E               	movwf	?_writeEEPROM,c
 11807  000DE4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11808  000DE8  ECDE  F027         	call	_writeEEPROM	;wreg free
 11809                           
 11810                           ;main.c: 2346: rv = readEEPROM(0x86);
 11811  000DEC  6A17               	clrf	?_readEEPROM+1,c
 11812  000DEE  0E86               	movlw	134
 11813  000DF0  6E16               	movwf	?_readEEPROM,c
 11814  000DF2  ECC0  F028         	call	_readEEPROM	;wreg free
 11815  000DF6  D2AD               	goto	L20
 11816  000DF8                     l10490:
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;main.c: 2351: writeEEPROM(0x87, val );
 11820  000DF8  6A0F               	clrf	?_writeEEPROM+1,c
 11821  000DFA  0E87               	movlw	135
 11822  000DFC  6E0E               	movwf	?_writeEEPROM,c
 11823  000DFE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11824  000E02  ECDE  F027         	call	_writeEEPROM	;wreg free
 11825                           
 11826                           ;main.c: 2352: rv = readEEPROM(0x87);
 11827  000E06  6A17               	clrf	?_readEEPROM+1,c
 11828  000E08  0E87               	movlw	135
 11829  000E0A  6E16               	movwf	?_readEEPROM,c
 11830  000E0C  ECC0  F028         	call	_readEEPROM	;wreg free
 11831  000E10  D2A0               	goto	L20
 11832  000E12                     l10492:
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;main.c: 2357: writeEEPROM(0x88, val );
 11836  000E12  6A0F               	clrf	?_writeEEPROM+1,c
 11837  000E14  0E88               	movlw	136
 11838  000E16  6E0E               	movwf	?_writeEEPROM,c
 11839  000E18  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11840  000E1C  ECDE  F027         	call	_writeEEPROM	;wreg free
 11841                           
 11842                           ;main.c: 2358: rv = readEEPROM(0x88);
 11843  000E20  6A17               	clrf	?_readEEPROM+1,c
 11844  000E22  0E88               	movlw	136
 11845  000E24  6E16               	movwf	?_readEEPROM,c
 11846  000E26  ECC0  F028         	call	_readEEPROM	;wreg free
 11847  000E2A  D293               	goto	L20
 11848  000E2C                     l10494:
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;main.c: 2363: writeEEPROM(0x89, val );
 11852  000E2C  6A0F               	clrf	?_writeEEPROM+1,c
 11853  000E2E  0E89               	movlw	137
 11854  000E30  6E0E               	movwf	?_writeEEPROM,c
 11855  000E32  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11856  000E36  ECDE  F027         	call	_writeEEPROM	;wreg free
 11857                           
 11858                           ;main.c: 2364: rv = readEEPROM(0x89);
 11859  000E3A  6A17               	clrf	?_readEEPROM+1,c
 11860  000E3C  0E89               	movlw	137
 11861  000E3E  6E16               	movwf	?_readEEPROM,c
 11862  000E40  ECC0  F028         	call	_readEEPROM	;wreg free
 11863  000E44  D286               	goto	L20
 11864  000E46                     l10496:
 11865                           
 11866                           ; BSR set to: 0
 11867                           ;main.c: 2369: writeEEPROM(0x8A, val );
 11868  000E46  6A0F               	clrf	?_writeEEPROM+1,c
 11869  000E48  0E8A               	movlw	138
 11870  000E4A  6E0E               	movwf	?_writeEEPROM,c
 11871  000E4C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11872  000E50  ECDE  F027         	call	_writeEEPROM	;wreg free
 11873                           
 11874                           ;main.c: 2370: rv = readEEPROM(0x8A);
 11875  000E54  6A17               	clrf	?_readEEPROM+1,c
 11876  000E56  0E8A               	movlw	138
 11877  000E58  6E16               	movwf	?_readEEPROM,c
 11878  000E5A  ECC0  F028         	call	_readEEPROM	;wreg free
 11879  000E5E  D279               	goto	L20
 11880  000E60                     l10498:
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;main.c: 2379: writeEEPROM(0x8B, val );
 11884  000E60  6A0F               	clrf	?_writeEEPROM+1,c
 11885  000E62  0E8B               	movlw	139
 11886  000E64  6E0E               	movwf	?_writeEEPROM,c
 11887  000E66  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11888  000E6A  ECDE  F027         	call	_writeEEPROM	;wreg free
 11889                           
 11890                           ;main.c: 2380: rv = readEEPROM(0x8B);
 11891  000E6E  6A17               	clrf	?_readEEPROM+1,c
 11892  000E70  0E8B               	movlw	139
 11893  000E72  6E16               	movwf	?_readEEPROM,c
 11894  000E74  ECC0  F028         	call	_readEEPROM	;wreg free
 11895  000E78  D26C               	goto	L20
 11896  000E7A                     l10500:
 11897                           
 11898                           ; BSR set to: 0
 11899                           ;main.c: 2385: writeEEPROM(0x8C, val );
 11900  000E7A  6A0F               	clrf	?_writeEEPROM+1,c
 11901  000E7C  0E8C               	movlw	140
 11902  000E7E  6E0E               	movwf	?_writeEEPROM,c
 11903  000E80  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11904  000E84  ECDE  F027         	call	_writeEEPROM	;wreg free
 11905                           
 11906                           ;main.c: 2386: rv = readEEPROM(0x8C);
 11907  000E88  6A17               	clrf	?_readEEPROM+1,c
 11908  000E8A  0E8C               	movlw	140
 11909  000E8C  6E16               	movwf	?_readEEPROM,c
 11910  000E8E  ECC0  F028         	call	_readEEPROM	;wreg free
 11911  000E92  D25F               	goto	L20
 11912  000E94                     l10502:
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;main.c: 2391: writeEEPROM(0x8D, val );
 11916  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 11917  000E96  0E8D               	movlw	141
 11918  000E98  6E0E               	movwf	?_writeEEPROM,c
 11919  000E9A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11920  000E9E  ECDE  F027         	call	_writeEEPROM	;wreg free
 11921                           
 11922                           ;main.c: 2392: rv = readEEPROM(0x8D);
 11923  000EA2  6A17               	clrf	?_readEEPROM+1,c
 11924  000EA4  0E8D               	movlw	141
 11925  000EA6  6E16               	movwf	?_readEEPROM,c
 11926  000EA8  ECC0  F028         	call	_readEEPROM	;wreg free
 11927  000EAC  D252               	goto	L20
 11928  000EAE                     l10504:
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;main.c: 2397: writeEEPROM(0x8E, val );
 11932  000EAE  6A0F               	clrf	?_writeEEPROM+1,c
 11933  000EB0  0E8E               	movlw	142
 11934  000EB2  6E0E               	movwf	?_writeEEPROM,c
 11935  000EB4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11936  000EB8  ECDE  F027         	call	_writeEEPROM	;wreg free
 11937                           
 11938                           ;main.c: 2398: rv = readEEPROM(0x8E);
 11939  000EBC  6A17               	clrf	?_readEEPROM+1,c
 11940  000EBE  0E8E               	movlw	142
 11941  000EC0  6E16               	movwf	?_readEEPROM,c
 11942  000EC2  ECC0  F028         	call	_readEEPROM	;wreg free
 11943  000EC6  D245               	goto	L20
 11944  000EC8                     l10506:
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;main.c: 2403: writeEEPROM(0x8F, val );
 11948  000EC8  6A0F               	clrf	?_writeEEPROM+1,c
 11949  000ECA  0E8F               	movlw	143
 11950  000ECC  6E0E               	movwf	?_writeEEPROM,c
 11951  000ECE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11952  000ED2  ECDE  F027         	call	_writeEEPROM	;wreg free
 11953                           
 11954                           ;main.c: 2404: rv = readEEPROM(0x8F);
 11955  000ED6  6A17               	clrf	?_readEEPROM+1,c
 11956  000ED8  0E8F               	movlw	143
 11957  000EDA  6E16               	movwf	?_readEEPROM,c
 11958  000EDC  ECC0  F028         	call	_readEEPROM	;wreg free
 11959  000EE0  D238               	goto	L20
 11960  000EE2                     l10508:
 11961                           
 11962                           ; BSR set to: 0
 11963                           ;main.c: 2409: writeEEPROM(0x90, val );
 11964  000EE2  6A0F               	clrf	?_writeEEPROM+1,c
 11965  000EE4  0E90               	movlw	144
 11966  000EE6  6E0E               	movwf	?_writeEEPROM,c
 11967  000EE8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11968  000EEC  ECDE  F027         	call	_writeEEPROM	;wreg free
 11969                           
 11970                           ;main.c: 2410: rv = readEEPROM(0x90);
 11971  000EF0  6A17               	clrf	?_readEEPROM+1,c
 11972  000EF2  0E90               	movlw	144
 11973  000EF4  6E16               	movwf	?_readEEPROM,c
 11974  000EF6  ECC0  F028         	call	_readEEPROM	;wreg free
 11975  000EFA  D22B               	goto	L20
 11976  000EFC                     l10510:
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;main.c: 2415: writeEEPROM(0x91, val );
 11980  000EFC  6A0F               	clrf	?_writeEEPROM+1,c
 11981  000EFE  0E91               	movlw	145
 11982  000F00  6E0E               	movwf	?_writeEEPROM,c
 11983  000F02  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11984  000F06  ECDE  F027         	call	_writeEEPROM	;wreg free
 11985                           
 11986                           ;main.c: 2416: rv = readEEPROM(0x91);
 11987  000F0A  6A17               	clrf	?_readEEPROM+1,c
 11988  000F0C  0E91               	movlw	145
 11989  000F0E  6E16               	movwf	?_readEEPROM,c
 11990  000F10  ECC0  F028         	call	_readEEPROM	;wreg free
 11991  000F14  D21E               	goto	L20
 11992  000F16                     l10512:
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;main.c: 2421: writeEEPROM(0x92, val );
 11996  000F16  6A0F               	clrf	?_writeEEPROM+1,c
 11997  000F18  0E92               	movlw	146
 11998  000F1A  6E0E               	movwf	?_writeEEPROM,c
 11999  000F1C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12000  000F20  ECDE  F027         	call	_writeEEPROM	;wreg free
 12001                           
 12002                           ;main.c: 2422: rv = readEEPROM(0x92);
 12003  000F24  6A17               	clrf	?_readEEPROM+1,c
 12004  000F26  0E92               	movlw	146
 12005  000F28  6E16               	movwf	?_readEEPROM,c
 12006  000F2A  ECC0  F028         	call	_readEEPROM	;wreg free
 12007  000F2E  D211               	goto	L20
 12008  000F30                     l10514:
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;main.c: 2427: writeEEPROM(0x93, val );
 12012  000F30  6A0F               	clrf	?_writeEEPROM+1,c
 12013  000F32  0E93               	movlw	147
 12014  000F34  6E0E               	movwf	?_writeEEPROM,c
 12015  000F36  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12016  000F3A  ECDE  F027         	call	_writeEEPROM	;wreg free
 12017                           
 12018                           ;main.c: 2428: rv = readEEPROM(0x93);
 12019  000F3E  6A17               	clrf	?_readEEPROM+1,c
 12020  000F40  0E93               	movlw	147
 12021  000F42  6E16               	movwf	?_readEEPROM,c
 12022  000F44  ECC0  F028         	call	_readEEPROM	;wreg free
 12023  000F48  D204               	goto	L20
 12024  000F4A                     l10516:
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;main.c: 2433: writeEEPROM(0x94, val );
 12028  000F4A  6A0F               	clrf	?_writeEEPROM+1,c
 12029  000F4C  0E94               	movlw	148
 12030  000F4E  6E0E               	movwf	?_writeEEPROM,c
 12031  000F50  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12032  000F54  ECDE  F027         	call	_writeEEPROM	;wreg free
 12033                           
 12034                           ;main.c: 2434: rv = readEEPROM(0x94);
 12035  000F58  6A17               	clrf	?_readEEPROM+1,c
 12036  000F5A  0E94               	movlw	148
 12037  000F5C  6E16               	movwf	?_readEEPROM,c
 12038  000F5E  ECC0  F028         	call	_readEEPROM	;wreg free
 12039  000F62  D1F7               	goto	L20
 12040  000F64                     l10518:
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;main.c: 2439: writeEEPROM(0x95, val );
 12044  000F64  6A0F               	clrf	?_writeEEPROM+1,c
 12045  000F66  0E95               	movlw	149
 12046  000F68  6E0E               	movwf	?_writeEEPROM,c
 12047  000F6A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12048  000F6E  ECDE  F027         	call	_writeEEPROM	;wreg free
 12049                           
 12050                           ;main.c: 2440: rv = readEEPROM(0x95);
 12051  000F72  6A17               	clrf	?_readEEPROM+1,c
 12052  000F74  0E95               	movlw	149
 12053  000F76  6E16               	movwf	?_readEEPROM,c
 12054  000F78  ECC0  F028         	call	_readEEPROM	;wreg free
 12055  000F7C  D1EA               	goto	L20
 12056  000F7E                     l10520:
 12057                           
 12058                           ; BSR set to: 0
 12059                           ;main.c: 2445: writeEEPROM(0x96, val );
 12060  000F7E  6A0F               	clrf	?_writeEEPROM+1,c
 12061  000F80  0E96               	movlw	150
 12062  000F82  6E0E               	movwf	?_writeEEPROM,c
 12063  000F84  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12064  000F88  ECDE  F027         	call	_writeEEPROM	;wreg free
 12065                           
 12066                           ;main.c: 2446: rv = readEEPROM(0x96);
 12067  000F8C  6A17               	clrf	?_readEEPROM+1,c
 12068  000F8E  0E96               	movlw	150
 12069  000F90  6E16               	movwf	?_readEEPROM,c
 12070  000F92  ECC0  F028         	call	_readEEPROM	;wreg free
 12071  000F96  D1DD               	goto	L20
 12072  000F98                     l10522:
 12073                           
 12074                           ; BSR set to: 0
 12075                           ;main.c: 2455: writeEEPROM(0x97, val);
 12076  000F98  6A0F               	clrf	?_writeEEPROM+1,c
 12077  000F9A  0E97               	movlw	151
 12078  000F9C  6E0E               	movwf	?_writeEEPROM,c
 12079  000F9E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12080  000FA2  ECDE  F027         	call	_writeEEPROM	;wreg free
 12081                           
 12082                           ;main.c: 2456: rv = readEEPROM(0x97);
 12083  000FA6  6A17               	clrf	?_readEEPROM+1,c
 12084  000FA8  0E97               	movlw	151
 12085  000FAA  6E16               	movwf	?_readEEPROM,c
 12086  000FAC  ECC0  F028         	call	_readEEPROM	;wreg free
 12087  000FB0  D1D0               	goto	L20
 12088  000FB2                     l10524:
 12089                           
 12090                           ; BSR set to: 0
 12091                           ;main.c: 2461: writeEEPROM(0x98, val);
 12092  000FB2  6A0F               	clrf	?_writeEEPROM+1,c
 12093  000FB4  0E98               	movlw	152
 12094  000FB6  6E0E               	movwf	?_writeEEPROM,c
 12095  000FB8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12096  000FBC  ECDE  F027         	call	_writeEEPROM	;wreg free
 12097                           
 12098                           ;main.c: 2462: rv = readEEPROM(0x98);
 12099  000FC0  6A17               	clrf	?_readEEPROM+1,c
 12100  000FC2  0E98               	movlw	152
 12101  000FC4  6E16               	movwf	?_readEEPROM,c
 12102  000FC6  ECC0  F028         	call	_readEEPROM	;wreg free
 12103  000FCA  D1C3               	goto	L20
 12104  000FCC                     l10526:
 12105                           
 12106                           ; BSR set to: 0
 12107                           ;main.c: 2467: writeEEPROM(0x99, val);
 12108  000FCC  6A0F               	clrf	?_writeEEPROM+1,c
 12109  000FCE  0E99               	movlw	153
 12110  000FD0  6E0E               	movwf	?_writeEEPROM,c
 12111  000FD2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12112  000FD6  ECDE  F027         	call	_writeEEPROM	;wreg free
 12113  000FDA  6A17               	clrf	?_readEEPROM+1,c
 12114  000FDC  0E99               	movlw	153
 12115  000FDE  6E16               	movwf	?_readEEPROM,c
 12116  000FE0  ECC0  F028         	call	_readEEPROM	;wreg free
 12117  000FE4                     l513:
 12118                           
 12119                           ;main.c: 2472: writeEEPROM(0x9A, val);
 12120  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 12121  000FE6  0E9A               	movlw	154
 12122  000FE8  6E0E               	movwf	?_writeEEPROM,c
 12123  000FEA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12124  000FEE  ECDE  F027         	call	_writeEEPROM	;wreg free
 12125                           
 12126                           ;main.c: 2473: rv = readEEPROM(0x9A);
 12127  000FF2  6A17               	clrf	?_readEEPROM+1,c
 12128  000FF4  0E9A               	movlw	154
 12129  000FF6  6E16               	movwf	?_readEEPROM,c
 12130  000FF8  ECC0  F028         	call	_readEEPROM	;wreg free
 12131  000FFC  D1AA               	goto	L20
 12132  000FFE                     l10528:
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;main.c: 2478: writeEEPROM(0x9B, val);
 12136  000FFE  6A0F               	clrf	?_writeEEPROM+1,c
 12137  001000  0E9B               	movlw	155
 12138  001002  6E0E               	movwf	?_writeEEPROM,c
 12139  001004  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12140  001008  ECDE  F027         	call	_writeEEPROM	;wreg free
 12141                           
 12142                           ;main.c: 2479: rv = readEEPROM(0x9B);
 12143  00100C  6A17               	clrf	?_readEEPROM+1,c
 12144  00100E  0E9B               	movlw	155
 12145  001010  6E16               	movwf	?_readEEPROM,c
 12146  001012  ECC0  F028         	call	_readEEPROM	;wreg free
 12147  001016  D19D               	goto	L20
 12148  001018                     l10530:
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;main.c: 2484: writeEEPROM(0x9C, val);
 12152  001018  6A0F               	clrf	?_writeEEPROM+1,c
 12153  00101A  0E9C               	movlw	156
 12154  00101C  6E0E               	movwf	?_writeEEPROM,c
 12155  00101E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12156  001022  ECDE  F027         	call	_writeEEPROM	;wreg free
 12157                           
 12158                           ;main.c: 2485: rv = readEEPROM(0x9C);
 12159  001026  6A17               	clrf	?_readEEPROM+1,c
 12160  001028  0E9C               	movlw	156
 12161  00102A  6E16               	movwf	?_readEEPROM,c
 12162  00102C  ECC0  F028         	call	_readEEPROM	;wreg free
 12163  001030  D190               	goto	L20
 12164  001032                     l516:
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;main.c: 2490: rv = 0;
 12168  001032  6A26               	clrf	vscp_writeAppReg@rv,c
 12169                           
 12170                           ;main.c: 2491: break;
 12171  001034  D18F               	goto	l10566
 12172  001036                     l10532:
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;main.c: 2500: writeEEPROM(0xF2, val);
 12176  001036  6A0F               	clrf	?_writeEEPROM+1,c
 12177  001038  0EF2               	movlw	242
 12178  00103A  6E0E               	movwf	?_writeEEPROM,c
 12179  00103C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12180  001040  ECDE  F027         	call	_writeEEPROM	;wreg free
 12181                           
 12182                           ;main.c: 2501: rv = readEEPROM(0xF2);
 12183  001044  6A17               	clrf	?_readEEPROM+1,c
 12184  001046  0EF2               	movlw	242
 12185  001048  6E16               	movwf	?_readEEPROM,c
 12186  00104A  ECC0  F028         	call	_readEEPROM	;wreg free
 12187  00104E  D181               	goto	L20
 12188  001050                     l10534:
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;main.c: 2506: writeEEPROM(0xF3, val);
 12192  001050  6A0F               	clrf	?_writeEEPROM+1,c
 12193  001052  0EF3               	movlw	243
 12194  001054  6E0E               	movwf	?_writeEEPROM,c
 12195  001056  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12196  00105A  ECDE  F027         	call	_writeEEPROM	;wreg free
 12197                           
 12198                           ;main.c: 2507: rv = readEEPROM(0xF3);
 12199  00105E  6A17               	clrf	?_readEEPROM+1,c
 12200  001060  0EF3               	movlw	243
 12201  001062  6E16               	movwf	?_readEEPROM,c
 12202  001064  ECC0  F028         	call	_readEEPROM	;wreg free
 12203  001068  D174               	goto	L20
 12204  00106A                     l10536:
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;main.c: 2511: rv = ~val;
 12208  00106A  1C23               	comf	vscp_writeAppReg@val,w,c
 12209  00106C  D172               	goto	L20
 12210  00106E                     l10540:
 12211                           
 12212                           ; BSR set to: 0
 12213  00106E  5025               	movf	vscp_writeAppReg@reg,w,c
 12214                           
 12215                           ; Switch size 1, requested type "space"
 12216                           ; Number of cases is 96, Range of values is 0 to 119
 12217                           ; switch strategies available:
 12218                           ; Name         Instructions Cycles
 12219                           ; simple_byte          289   145 (average)
 12220                           ;	Chosen strategy is simple_byte
 12221  001070  E102 EF42  F003    	bz	l10350
 12222  001076  0A01               	xorlw	1	; case 1
 12223  001078  E102 EF50  F003    	bz	l10352
 12224  00107E  0A03               	xorlw	3	; case 2
 12225  001080  E102 EF5E  F003    	bz	l10354
 12226  001086  0A01               	xorlw	1	; case 3
 12227  001088  E102 EF6C  F003    	bz	l10356
 12228  00108E  0A07               	xorlw	7	; case 4
 12229  001090  E102 EF7A  F003    	bz	l10358
 12230  001096  0A01               	xorlw	1	; case 5
 12231  001098  E102 EF88  F003    	bz	l10360
 12232  00109E  0A03               	xorlw	3	; case 6
 12233  0010A0  E102 EF96  F003    	bz	l10362
 12234  0010A6  0A01               	xorlw	1	; case 7
 12235  0010A8  E102 EFA4  F003    	bz	l10364
 12236  0010AE  0A13               	xorlw	19	; case 20
 12237  0010B0  E102 EFB2  F003    	bz	l10366
 12238  0010B6  0A01               	xorlw	1	; case 21
 12239  0010B8  E102 EFC0  F003    	bz	l10368
 12240  0010BE  0A03               	xorlw	3	; case 22
 12241  0010C0  E102 EFCE  F003    	bz	l10370
 12242  0010C6  0A01               	xorlw	1	; case 23
 12243  0010C8  E102 EFDC  F003    	bz	l10372
 12244  0010CE  0A0F               	xorlw	15	; case 24
 12245  0010D0  E102 EFEA  F003    	bz	l10374
 12246  0010D6  0A01               	xorlw	1	; case 25
 12247  0010D8  E102 EFF8  F003    	bz	l10376
 12248  0010DE  0A3F               	xorlw	63	; case 38
 12249  0010E0  E102 EF06  F004    	bz	l10378
 12250  0010E6  0A01               	xorlw	1	; case 39
 12251  0010E8  E102 EF14  F004    	bz	l10380
 12252  0010EE  0A0F               	xorlw	15	; case 40
 12253  0010F0  E102 EF22  F004    	bz	l10382
 12254  0010F6  0A01               	xorlw	1	; case 41
 12255  0010F8  E102 EF30  F004    	bz	l10384
 12256  0010FE  0A03               	xorlw	3	; case 42
 12257  001100  E102 EF3E  F004    	bz	l10386
 12258  001106  0A01               	xorlw	1	; case 43
 12259  001108  E102 EF4C  F004    	bz	l10388
 12260  00110E  0A07               	xorlw	7	; case 44
 12261  001110  E102 EF5A  F004    	bz	l10390
 12262  001116  0A01               	xorlw	1	; case 45
 12263  001118  E102 EF68  F004    	bz	l10392
 12264  00111E  0A03               	xorlw	3	; case 46
 12265  001120  E102 EF76  F004    	bz	l10394
 12266  001126  0A01               	xorlw	1	; case 47
 12267  001128  E102 EF84  F004    	bz	l10396
 12268  00112E  0A1F               	xorlw	31	; case 48
 12269  001130  E102 EF92  F004    	bz	l10398
 12270  001136  0A01               	xorlw	1	; case 49
 12271  001138  E101 D402          	bz	l10400
 12272  00113C  0A03               	xorlw	3	; case 50
 12273  00113E  E101 D40D          	bz	l10402
 12274  001142  0A01               	xorlw	1	; case 51
 12275  001144  E101 D418          	bz	l10404
 12276  001148  0A07               	xorlw	7	; case 52
 12277  00114A  E101 D423          	bz	l10406
 12278  00114E  0A01               	xorlw	1	; case 53
 12279  001150  E101 D42E          	bz	l10408
 12280  001154  0A03               	xorlw	3	; case 54
 12281  001156  E101 D439          	bz	l10410
 12282  00115A  0A01               	xorlw	1	; case 55
 12283  00115C  E101 D444          	bz	l10412
 12284  001160  0A0F               	xorlw	15	; case 56
 12285  001162  E101 D44F          	bz	l10414
 12286  001166  0A01               	xorlw	1	; case 57
 12287  001168  E101 D45A          	bz	l10416
 12288  00116C  0A03               	xorlw	3	; case 58
 12289  00116E  E101 D465          	bz	l10418
 12290  001172  0A01               	xorlw	1	; case 59
 12291  001174  E101 D470          	bz	l10420
 12292  001178  0A07               	xorlw	7	; case 60
 12293  00117A  E101 D47B          	bz	l10422
 12294  00117E  0A01               	xorlw	1	; case 61
 12295  001180  E101 D486          	bz	l10424
 12296  001184  0A03               	xorlw	3	; case 62
 12297  001186  E101 D491          	bz	l10426
 12298  00118A  0A01               	xorlw	1	; case 63
 12299  00118C  E101 D49C          	bz	l10428
 12300  001190  0A7F               	xorlw	127	; case 64
 12301  001192  E101 D4A7          	bz	l10430
 12302  001196  0A01               	xorlw	1	; case 65
 12303  001198  E101 D4B2          	bz	l10432
 12304  00119C  0A03               	xorlw	3	; case 66
 12305  00119E  E101 D4BD          	bz	l10434
 12306  0011A2  0A01               	xorlw	1	; case 67
 12307  0011A4  E101 D4C8          	bz	l10436
 12308  0011A8  0A07               	xorlw	7	; case 68
 12309  0011AA  E101 D4D3          	bz	l10438
 12310  0011AE  0A01               	xorlw	1	; case 69
 12311  0011B0  E101 D4DD          	bz	l10440
 12312  0011B4  0A03               	xorlw	3	; case 70
 12313  0011B6  E101 D4E7          	bz	l10442
 12314  0011BA  0A01               	xorlw	1	; case 71
 12315  0011BC  E101 D4F1          	bz	l10444
 12316  0011C0  0A0F               	xorlw	15	; case 72
 12317  0011C2  E101 D4FB          	bz	l10446
 12318  0011C6  0A01               	xorlw	1	; case 73
 12319  0011C8  E101 D505          	bz	l10448
 12320  0011CC  0A03               	xorlw	3	; case 74
 12321  0011CE  E101 D50F          	bz	l10450
 12322  0011D2  0A01               	xorlw	1	; case 75
 12323  0011D4  E101 D519          	bz	l10452
 12324  0011D8  0A07               	xorlw	7	; case 76
 12325  0011DA  E101 D523          	bz	l10454
 12326  0011DE  0A01               	xorlw	1	; case 77
 12327  0011E0  E101 D52D          	bz	l10456
 12328  0011E4  0A03               	xorlw	3	; case 78
 12329  0011E6  E101 D537          	bz	l10458
 12330  0011EA  0A01               	xorlw	1	; case 79
 12331  0011EC  E101 D541          	bz	l10460
 12332  0011F0  0A1F               	xorlw	31	; case 80
 12333  0011F2  E101 D54B          	bz	l10462
 12334  0011F6  0A01               	xorlw	1	; case 81
 12335  0011F8  E101 D555          	bz	l10464
 12336  0011FC  0A03               	xorlw	3	; case 82
 12337  0011FE  E101 D55F          	bz	l10466
 12338  001202  0A01               	xorlw	1	; case 83
 12339  001204  E101 D569          	bz	l10468
 12340  001208  0A07               	xorlw	7	; case 84
 12341  00120A  E101 D573          	bz	l10470
 12342  00120E  0A01               	xorlw	1	; case 85
 12343  001210  E101 D57D          	bz	l10472
 12344  001214  0A03               	xorlw	3	; case 86
 12345  001216  E101 D587          	bz	l10474
 12346  00121A  0A01               	xorlw	1	; case 87
 12347  00121C  E101 D591          	bz	l10476
 12348  001220  0A0F               	xorlw	15	; case 88
 12349  001222  E101 D59B          	bz	l10478
 12350  001226  0A01               	xorlw	1	; case 89
 12351  001228  E101 D5A5          	bz	l10480
 12352  00122C  0A03               	xorlw	3	; case 90
 12353  00122E  E101 D5AF          	bz	l10482
 12354  001232  0A01               	xorlw	1	; case 91
 12355  001234  E101 D5B9          	bz	l10484
 12356  001238  0A07               	xorlw	7	; case 92
 12357  00123A  E101 D5C3          	bz	l10486
 12358  00123E  0A01               	xorlw	1	; case 93
 12359  001240  E101 D5CD          	bz	l10488
 12360  001244  0A03               	xorlw	3	; case 94
 12361  001246  E101 D5D7          	bz	l10490
 12362  00124A  0A01               	xorlw	1	; case 95
 12363  00124C  E101 D5E1          	bz	l10492
 12364  001250  0A3F               	xorlw	63	; case 96
 12365  001252  E101 D5EB          	bz	l10494
 12366  001256  0A01               	xorlw	1	; case 97
 12367  001258  E101 D5F5          	bz	l10496
 12368  00125C  0A03               	xorlw	3	; case 98
 12369  00125E  E101 D5FF          	bz	l10498
 12370  001262  0A01               	xorlw	1	; case 99
 12371  001264  E101 D609          	bz	l10500
 12372  001268  0A07               	xorlw	7	; case 100
 12373  00126A  E101 D613          	bz	l10502
 12374  00126E  0A01               	xorlw	1	; case 101
 12375  001270  E101 D61D          	bz	l10504
 12376  001274  0A03               	xorlw	3	; case 102
 12377  001276  E101 D627          	bz	l10506
 12378  00127A  0A01               	xorlw	1	; case 103
 12379  00127C  E101 D631          	bz	l10508
 12380  001280  0A0F               	xorlw	15	; case 104
 12381  001282  E101 D63B          	bz	l10510
 12382  001286  0A01               	xorlw	1	; case 105
 12383  001288  E101 D645          	bz	l10512
 12384  00128C  0A03               	xorlw	3	; case 106
 12385  00128E  E101 D64F          	bz	l10514
 12386  001292  0A01               	xorlw	1	; case 107
 12387  001294  E101 D659          	bz	l10516
 12388  001298  0A07               	xorlw	7	; case 108
 12389  00129A  E101 D663          	bz	l10518
 12390  00129E  0A01               	xorlw	1	; case 109
 12391  0012A0  E101 D66D          	bz	l10520
 12392  0012A4  0A03               	xorlw	3	; case 110
 12393  0012A6  E101 D677          	bz	l10522
 12394  0012AA  0A01               	xorlw	1	; case 111
 12395  0012AC  E101 D681          	bz	l10524
 12396  0012B0  0A1F               	xorlw	31	; case 112
 12397  0012B2  E101 D68B          	bz	l10526
 12398  0012B6  0A01               	xorlw	1	; case 113
 12399  0012B8  E101 D694          	bz	l513
 12400  0012BC  0A03               	xorlw	3	; case 114
 12401  0012BE  E101 D69E          	bz	l10528
 12402  0012C2  0A01               	xorlw	1	; case 115
 12403  0012C4  E101 D6A8          	bz	l10530
 12404  0012C8  0A07               	xorlw	7	; case 116
 12405  0012CA  E101 D6B2          	bz	l516
 12406  0012CE  0A01               	xorlw	1	; case 117
 12407  0012D0  E101 D6AF          	bz	l516
 12408  0012D4  0A03               	xorlw	3	; case 118
 12409  0012D6  E101 D6AE          	bz	l10532
 12410  0012DA  0A01               	xorlw	1	; case 119
 12411  0012DC  E101 D6B8          	bz	l10534
 12412  0012E0  D6C4               	goto	l10536
 12413  0012E2                     l10542:
 12414                           
 12415                           ; BSR set to: 0
 12416                           ;main.c: 2515: else if (1 == vscp_page_select) {
 12417  0012E2  0446               	decf	_vscp_page_select,w,c
 12418  0012E4  1047               	iorwf	_vscp_page_select+1,w,c
 12419  0012E6  E136               	bnz	l10566
 12420                           
 12421                           ; BSR set to: 0
 12422                           ;main.c: 2518: if (reg < 72) {
 12423  0012E8  0E48               	movlw	72
 12424  0012EA  6025               	cpfslt	vscp_writeAppReg@reg,c
 12425  0012EC  D010               	goto	l10550
 12426                           
 12427                           ; BSR set to: 0
 12428                           ;main.c: 2519: writeEEPROM(0xAA + reg, val);
 12429  0012EE  0EAA               	movlw	170
 12430  0012F0  D833               	call	PL64	;call to abstracted procedure
 12431  0012F2  ECDE  F027         	call	_writeEEPROM	;wreg free
 12432                           
 12433                           ;main.c: 2520: rv = readEEPROM(0xAA + reg );
 12434  0012F6  0EAA               	movlw	170
 12435  0012F8  2425               	addwf	vscp_writeAppReg@reg,w,c
 12436  0012FA  6E16               	movwf	?_readEEPROM,c
 12437  0012FC  6A17               	clrf	?_readEEPROM+1,c
 12438  0012FE  0E00               	movlw	0
 12439  001300  2217               	addwfc	?_readEEPROM+1,f,c
 12440  001302  ECC0  F028         	call	_readEEPROM	;wreg free
 12441  001306  6E26               	movwf	vscp_writeAppReg@rv,c
 12442                           
 12443                           ;main.c: 2521: writeCoeffs2Ram();
 12444  001308  EC36  F023         	call	_writeCoeffs2Ram	;wreg free
 12445                           
 12446                           ;main.c: 2522: }
 12447  00130C  D023               	goto	l10566
 12448  00130E                     l10550:
 12449                           
 12450                           ; BSR set to: 0
 12451                           ;main.c: 2524: else if (reg < 84) {
 12452  00130E  0E54               	movlw	84
 12453  001310  6025               	cpfslt	vscp_writeAppReg@reg,c
 12454  001312  D010               	goto	l10562
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;main.c: 2526: uint8_t pos = reg - 72;
 12458  001314  5025               	movf	vscp_writeAppReg@reg,w,c
 12459  001316  0FB8               	addlw	184
 12460  001318  6E24               	movwf	vscp_writeAppReg@pos,c
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;main.c: 2527: if ( pos % 2 ) {
 12464  00131A  A024               	btfss	vscp_writeAppReg@pos,0,c
 12465  00131C  D002               	goto	l10558
 12466                           
 12467                           ; BSR set to: 0
 12468                           ;main.c: 2528: pos--;
 12469  00131E  0624               	decf	vscp_writeAppReg@pos,f,c
 12470                           
 12471                           ;main.c: 2529: }
 12472  001320  D001               	goto	l10560
 12473  001322                     l10558:
 12474                           
 12475                           ; BSR set to: 0
 12476                           ;main.c: 2530: else {
 12477                           ;main.c: 2531: pos++;
 12478  001322  2A24               	incf	vscp_writeAppReg@pos,f,c
 12479  001324                     l10560:
 12480                           
 12481                           ; BSR set to: 0
 12482                           ;main.c: 2532: }
 12483                           ;main.c: 2533: rv = adc[ pos ];
 12484  001324  0EA2               	movlw	low _adc
 12485  001326  2424               	addwf	vscp_writeAppReg@pos,w,c
 12486  001328  6ED9               	movwf	fsr2l,c
 12487  00132A  6ADA               	clrf	fsr2h,c
 12488  00132C  0E01               	movlw	high _adc
 12489  00132E  22DA               	addwfc	fsr2h,f,c
 12490  001330  50DF               	movf	indf2,w,c
 12491  001332  D00F               	goto	L20
 12492  001334                     l10562:
 12493                           
 12494                           ; BSR set to: 0
 12495                           ;main.c: 2536: else if (reg < 98) {
 12496  001334  0E62               	movlw	98
 12497  001336  6025               	cpfslt	vscp_writeAppReg@reg,c
 12498  001338  D00D               	goto	l10566
 12499                           
 12500                           ; BSR set to: 0
 12501                           ;main.c: 2537: writeEEPROM( 0x9E + reg - 84, val );
 12502  00133A  0E4A               	movlw	74
 12503  00133C  D80D               	call	PL64	;call to abstracted procedure
 12504  00133E  ECDE  F027         	call	_writeEEPROM	;wreg free
 12505                           
 12506                           ;main.c: 2538: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12507  001342  0E4A               	movlw	74
 12508  001344  2425               	addwf	vscp_writeAppReg@reg,w,c
 12509  001346  6E16               	movwf	?_readEEPROM,c
 12510  001348  6A17               	clrf	?_readEEPROM+1,c
 12511  00134A  0E00               	movlw	0
 12512  00134C  2217               	addwfc	?_readEEPROM+1,f,c
 12513  00134E  ECC0  F028         	call	_readEEPROM	;wreg free
 12514  001352                     L20:
 12515  001352  6E26               	movwf	vscp_writeAppReg@rv,c
 12516  001354                     l10566:
 12517                           
 12518                           ;main.c: 2539: }
 12519                           ;main.c: 2540: }
 12520                           ;main.c: 2542: return rv;
 12521  001354  5026               	movf	vscp_writeAppReg@rv,w,c
 12522  001356  0012               	return	
 12523  001358                     __end_of_vscp_writeAppReg:
 12524                           	opt stack 0
 12525  001358                     PL64:
 12526                           	opt stack 24
 12527  001358  2425               	addwf	vscp_writeAppReg@reg,w,c
 12528  00135A  6E0E               	movwf	?_writeEEPROM,c
 12529  00135C  6A0F               	clrf	?_writeEEPROM+1,c
 12530  00135E  0E00               	movlw	0
 12531  001360  220F               	addwfc	?_writeEEPROM+1,f,c
 12532  001362  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12533  001366  0C00               	retlw	0
 12534  001368                     __end_ofPL64:
 12535                           	opt stack 0
 12536                           tblptru	equ	0xFF8
 12537                           tblptrh	equ	0xFF7
 12538                           tblptrl	equ	0xFF6
 12539                           tablat	equ	0xFF5
 12540                           prodh	equ	0xFF4
 12541                           prodl	equ	0xFF3
 12542                           intcon	equ	0xFF2
 12543                           postinc0	equ	0xFEE
 12544                           wreg	equ	0xFE8
 12545                           indf1	equ	0xFE7
 12546                           postdec1	equ	0xFE5
 12547                           fsr1h	equ	0xFE2
 12548                           fsr1l	equ	0xFE1
 12549                           indf2	equ	0xFDF
 12550                           postinc2	equ	0xFDE
 12551                           postdec2	equ	0xFDD
 12552                           plusw2	equ	0xFDB
 12553                           fsr2h	equ	0xFDA
 12554                           fsr2l	equ	0xFD9
 12555                           status	equ	0xFD8
 12556                           
 12557 ;; *************** function _writeCoeffs2Ram *****************
 12558 ;; Defined at:
 12559 ;;		line 958 in file "../main.c"
 12560 ;; Parameters:    Size  Location     Type
 12561 ;;		None
 12562 ;; Auto vars:     Size  Location     Type
 12563 ;;  c               3   27[COMRAM] unsigned char [3]
 12564 ;;  j               2   32[COMRAM] int 
 12565 ;;  i               2   30[COMRAM] int 
 12566 ;; Return value:  Size  Location     Type
 12567 ;;		None               void
 12568 ;; Registers used:
 12569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12570 ;; Tracked objects:
 12571 ;;		On entry : 0/0
 12572 ;;		On exit  : F/1
 12573 ;;		Unchanged: 0/0
 12574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12575 ;;      Params:         0       0       0       0       0       0       0
 12576 ;;      Locals:         7       0       0       0       0       0       0
 12577 ;;      Temps:          2       0       0       0       0       0       0
 12578 ;;      Totals:         9       0       0       0       0       0       0
 12579 ;;Total ram usage:        9 bytes
 12580 ;; Hardware stack levels used:    1
 12581 ;; Hardware stack levels required when called:    3
 12582 ;; This function calls:
 12583 ;;		_readEEPROM
 12584 ;;		___wmul
 12585 ;; This function is called by:
 12586 ;;		_vscp_writeAppReg
 12587 ;; This function uses a non-reentrant model
 12588 ;;
 12589                           
 12590                           	psect	text44
 12591  00466C                     __ptext44:
 12592                           	opt stack 0
 12593  00466C                     _writeCoeffs2Ram:
 12594                           	opt stack 24
 12595                           
 12596                           ;main.c: 959: int i, j;
 12597                           ;main.c: 960: uint8_t c[3];
 12598                           ;main.c: 962: for (i = 0; i < 6; i++) {
 12599                           
 12600                           ;incstack = 0
 12601                           ;incstack = 0
 12602  00466C  6A1F               	clrf	writeCoeffs2Ram@i,c
 12603  00466E  6A20               	clrf	writeCoeffs2Ram@i+1,c
 12604  004670                     l10094:
 12605                           
 12606                           ;main.c: 963: for (j = 2; j > 0; j--) {
 12607  004670  6A22               	clrf	writeCoeffs2Ram@j+1,c
 12608  004672  0E02               	movlw	2
 12609  004674  6E21               	movwf	writeCoeffs2Ram@j,c
 12610  004676                     l10100:
 12611                           
 12612                           ;main.c: 965: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 12613  004676  5021               	movf	writeCoeffs2Ram@j,w,c
 12614  004678  0802               	sublw	2
 12615  00467A  6E1A               	movwf	??_writeCoeffs2Ram& (0+255),c
 12616  00467C  501A               	movf	??_writeCoeffs2Ram,w,c
 12617  00467E  0F1C               	addlw	low writeCoeffs2Ram@c
 12618  004680  6ED9               	movwf	fsr2l,c
 12619  004682  6ADA               	clrf	fsr2h,c
 12620  004684  C01F  F00E         	movff	writeCoeffs2Ram@i,?___wmul
 12621  004688  C020  F00F         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 12622  00468C  6A11               	clrf	?___wmul+3,c
 12623  00468E  0E03               	movlw	3
 12624  004690  6E10               	movwf	?___wmul+2,c
 12625  004692  EC1D  F027         	call	___wmul	;wreg free
 12626  004696  5021               	movf	writeCoeffs2Ram@j,w,c
 12627  004698  260E               	addwf	?___wmul,f,c
 12628  00469A  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12629  00469C  220F               	addwfc	?___wmul+1,f,c
 12630  00469E  0EAA               	movlw	170
 12631  0046A0  240E               	addwf	?___wmul,w,c
 12632  0046A2  6E16               	movwf	?_readEEPROM,c
 12633  0046A4  0E00               	movlw	0
 12634  0046A6  200F               	addwfc	?___wmul+1,w,c
 12635  0046A8  6E17               	movwf	?_readEEPROM+1,c
 12636  0046AA  ECC0  F028         	call	_readEEPROM	;wreg free
 12637  0046AE  6EDF               	movwf	indf2,c
 12638  0046B0  0621               	decf	writeCoeffs2Ram@j,f,c
 12639  0046B2  A0D8               	btfss	status,0,c
 12640  0046B4  0622               	decf	writeCoeffs2Ram@j+1,f,c
 12641  0046B6  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12642  0046B8  0A80               	xorlw	128
 12643  0046BA  0F80               	addlw	-128
 12644  0046BC  0E01               	movlw	1
 12645  0046BE  B4D8               	btfsc	status,2,c
 12646  0046C0  5C21               	subwf	writeCoeffs2Ram@j,w,c
 12647  0046C2  E2D9               	bc	l10100
 12648                           
 12649                           ;main.c: 966: }
 12650                           ;main.c: 967: sh_coefficients[i] = *((double*) c);
 12651  0046C4  C01F  F01A         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 12652  0046C8  C020  F01B         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 12653  0046CC  90D8               	bcf	status,0,c
 12654  0046CE  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12655  0046D0  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12656  0046D2  90D8               	bcf	status,0,c
 12657  0046D4  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12658  0046D6  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12659  0046D8  0101               	movlb	1	; () banked
 12660  0046DA  0E26               	movlw	low _sh_coefficients
 12661  0046DC  241A               	addwf	??_writeCoeffs2Ram,w,c
 12662  0046DE  6ED9               	movwf	fsr2l,c
 12663  0046E0  0E01               	movlw	high _sh_coefficients
 12664  0046E2  201B               	addwfc	??_writeCoeffs2Ram+1,w,c
 12665  0046E4  6EDA               	movwf	fsr2h,c
 12666  0046E6  C01C  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 12667  0046EA  C01D  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 12668  0046EE  C01E  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 12669  0046F2  C01F  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 12670                           
 12671                           ; BSR set to: 1
 12672  0046F6  4A1F               	infsnz	writeCoeffs2Ram@i,f,c
 12673  0046F8  2A20               	incf	writeCoeffs2Ram@i+1,f,c
 12674                           
 12675                           ; BSR set to: 1
 12676  0046FA  5020               	movf	writeCoeffs2Ram@i+1,w,c
 12677  0046FC  0A80               	xorlw	128
 12678  0046FE  0F80               	addlw	-128
 12679  004700  0E06               	movlw	6
 12680  004702  B4D8               	btfsc	status,2,c
 12681  004704  5C1F               	subwf	writeCoeffs2Ram@i,w,c
 12682  004706  B0D8               	btfsc	status,0,c
 12683                           
 12684                           ; BSR set to: 1
 12685  004708  0012               	return	
 12686  00470A  D7B2               	goto	l10094
 12687  00470C                     __end_of_writeCoeffs2Ram:
 12688                           	opt stack 0
 12689                           tblptru	equ	0xFF8
 12690                           tblptrh	equ	0xFF7
 12691                           tblptrl	equ	0xFF6
 12692                           tablat	equ	0xFF5
 12693                           prodh	equ	0xFF4
 12694                           prodl	equ	0xFF3
 12695                           intcon	equ	0xFF2
 12696                           postinc0	equ	0xFEE
 12697                           wreg	equ	0xFE8
 12698                           indf1	equ	0xFE7
 12699                           postdec1	equ	0xFE5
 12700                           fsr1h	equ	0xFE2
 12701                           fsr1l	equ	0xFE1
 12702                           indf2	equ	0xFDF
 12703                           postinc2	equ	0xFDE
 12704                           postdec2	equ	0xFDD
 12705                           plusw2	equ	0xFDB
 12706                           fsr2h	equ	0xFDA
 12707                           fsr2l	equ	0xFD9
 12708                           status	equ	0xFD8
 12709                           
 12710 ;; *************** function ___wmul *****************
 12711 ;; Defined at:
 12712 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;  multiplier      2   13[COMRAM] unsigned int 
 12715 ;;  multiplicand    2   15[COMRAM] unsigned int 
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;  product         2   19[COMRAM] unsigned int 
 12718 ;; Return value:  Size  Location     Type
 12719 ;;                  2   13[COMRAM] unsigned int 
 12720 ;; Registers used:
 12721 ;;		wreg, status,2, status,0, prodl, prodh
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12727 ;;      Params:         4       0       0       0       0       0       0
 12728 ;;      Locals:         4       0       0       0       0       0       0
 12729 ;;      Temps:          0       0       0       0       0       0       0
 12730 ;;      Totals:         8       0       0       0       0       0       0
 12731 ;;Total ram usage:        8 bytes
 12732 ;; Hardware stack levels used:    1
 12733 ;; Hardware stack levels required when called:    2
 12734 ;; This function calls:
 12735 ;;		Nothing
 12736 ;; This function is called by:
 12737 ;;		_writeCoeffs2Ram
 12738 ;; This function uses a non-reentrant model
 12739 ;;
 12740                           
 12741                           	psect	text45
 12742  004E3A                     __ptext45:
 12743                           	opt stack 0
 12744  004E3A                     ___wmul:
 12745                           	opt stack 24
 12746                           
 12747                           ; BSR set to: 1
 12748                           ;incstack = 0
 12749                           ;incstack = 0
 12750  004E3A  500E               	movf	___wmul@multiplier,w,c
 12751  004E3C  0210               	mulwf	___wmul@multiplicand,c
 12752  004E3E  CFF3 F014          	movff	prodl,___wmul@product
 12753  004E42  CFF4 F015          	movff	prodh,___wmul@product+1
 12754  004E46  500E               	movf	___wmul@multiplier,w,c
 12755  004E48  0211               	mulwf	___wmul@multiplicand+1,c
 12756  004E4A  D808               	call	PL60	;call to abstracted procedure
 12757  004E4C  500F               	movf	___wmul@multiplier+1,w,c
 12758  004E4E  0210               	mulwf	___wmul@multiplicand,c
 12759  004E50  D805               	call	PL60	;call to abstracted procedure
 12760  004E52  C014  F00E         	movff	___wmul@product,?___wmul
 12761  004E56  C015  F00F         	movff	___wmul@product+1,?___wmul+1
 12762  004E5A  0012               	return	
 12763  004E5C                     __end_of___wmul:
 12764                           	opt stack 0
 12765  004E5C                     PL60:
 12766                           	opt stack 24
 12767  004E5C  CFF3 FFF4          	movff	prodl,prodh
 12768  004E60  6AF3               	clrf	prodl,c
 12769  004E62  50F3               	movf	prodl,w,c
 12770  004E64  2614               	addwf	___wmul@product,f,c
 12771  004E66  50F4               	movf	prodh,w,c
 12772  004E68  2215               	addwfc	___wmul@product+1,f,c
 12773  004E6A  0012               	return	
 12774  004E6C                     __end_ofPL60:
 12775                           	opt stack 0
 12776                           tblptru	equ	0xFF8
 12777                           tblptrh	equ	0xFF7
 12778                           tblptrl	equ	0xFF6
 12779                           tablat	equ	0xFF5
 12780                           prodh	equ	0xFF4
 12781                           prodl	equ	0xFF3
 12782                           intcon	equ	0xFF2
 12783                           postinc0	equ	0xFEE
 12784                           wreg	equ	0xFE8
 12785                           indf1	equ	0xFE7
 12786                           postdec1	equ	0xFE5
 12787                           fsr1h	equ	0xFE2
 12788                           fsr1l	equ	0xFE1
 12789                           indf2	equ	0xFDF
 12790                           postinc2	equ	0xFDE
 12791                           postdec2	equ	0xFDD
 12792                           plusw2	equ	0xFDB
 12793                           fsr2h	equ	0xFDA
 12794                           fsr2l	equ	0xFD9
 12795                           status	equ	0xFD8
 12796                           
 12797 ;; *************** function _vscp_readRegister *****************
 12798 ;; Defined at:
 12799 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;  reg             1    wreg     unsigned char 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;  reg             1   43[COMRAM] unsigned char 
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      unsigned char 
 12806 ;; Registers used:
 12807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12808 ;; Tracked objects:
 12809 ;;		On entry : F/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12813 ;;      Params:         0       0       0       0       0       0       0
 12814 ;;      Locals:         1       0       0       0       0       0       0
 12815 ;;      Temps:          0       0       0       0       0       0       0
 12816 ;;      Totals:         1       0       0       0       0       0       0
 12817 ;;Total ram usage:        1 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:    5
 12820 ;; This function calls:
 12821 ;;		_vscp_readAppReg
 12822 ;;		_vscp_readStdReg
 12823 ;; This function is called by:
 12824 ;;		_vscp_handleProtocolEvent
 12825 ;; This function uses a non-reentrant model
 12826 ;;
 12827                           
 12828                           	psect	text46
 12829  0050B0                     __ptext46:
 12830                           	opt stack 0
 12831  0050B0                     _vscp_readRegister:
 12832                           	opt stack 24
 12833                           
 12834                           ;incstack = 0
 12835                           ;incstack = 0
 12836                           ;vscp_readRegister@reg stored from wreg
 12837  0050B0  CFE8 F02C          	movff	wreg,vscp_readRegister@reg
 12838                           
 12839                           ; BSR set to: 0
 12840                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 12841  0050B4  0E7F               	movlw	127
 12842  0050B6  642C               	cpfsgt	vscp_readRegister@reg,c
 12843  0050B8  D004               	goto	l10780
 12844                           
 12845                           ; BSR set to: 0
 12846                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 12847  0050BA  502C               	movf	vscp_readRegister@reg,w,c
 12848  0050BC  EC4E  F01A         	call	_vscp_readStdReg
 12849  0050C0  D003               	goto	l1101
 12850  0050C2                     l10780:
 12851                           
 12852                           ; BSR set to: 0
 12853                           ;vscp_firmware.c: 565: else {
 12854                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 12855  0050C2  502C               	movf	vscp_readRegister@reg,w,c
 12856  0050C4  ECB4  F009         	call	_vscp_readAppReg
 12857  0050C8                     l1101:
 12858  0050C8  0012               	return	
 12859  0050CA                     __end_of_vscp_readRegister:
 12860                           	opt stack 0
 12861                           tblptru	equ	0xFF8
 12862                           tblptrh	equ	0xFF7
 12863                           tblptrl	equ	0xFF6
 12864                           tablat	equ	0xFF5
 12865                           prodh	equ	0xFF4
 12866                           prodl	equ	0xFF3
 12867                           intcon	equ	0xFF2
 12868                           postinc0	equ	0xFEE
 12869                           wreg	equ	0xFE8
 12870                           indf1	equ	0xFE7
 12871                           postdec1	equ	0xFE5
 12872                           fsr1h	equ	0xFE2
 12873                           fsr1l	equ	0xFE1
 12874                           indf2	equ	0xFDF
 12875                           postinc2	equ	0xFDE
 12876                           postdec2	equ	0xFDD
 12877                           plusw2	equ	0xFDB
 12878                           fsr2h	equ	0xFDA
 12879                           fsr2l	equ	0xFD9
 12880                           status	equ	0xFD8
 12881                           
 12882 ;; *************** function _vscp_readStdReg *****************
 12883 ;; Defined at:
 12884 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 12885 ;; Parameters:    Size  Location     Type
 12886 ;;  reg             1    wreg     unsigned char 
 12887 ;; Auto vars:     Size  Location     Type
 12888 ;;  reg             1   42[COMRAM] unsigned char 
 12889 ;;  code            4   35[COMRAM] unsigned long 
 12890 ;;  idx             1   40[COMRAM] unsigned char 
 12891 ;;  code            4   31[COMRAM] unsigned long 
 12892 ;;  idx             1   39[COMRAM] unsigned char 
 12893 ;;  rv              1   41[COMRAM] unsigned char 
 12894 ;; Return value:  Size  Location     Type
 12895 ;;                  1    wreg      unsigned char 
 12896 ;; Registers used:
 12897 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12898 ;; Tracked objects:
 12899 ;;		On entry : F/0
 12900 ;;		On exit  : 0/0
 12901 ;;		Unchanged: 0/0
 12902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12903 ;;      Params:         0       0       0       0       0       0       0
 12904 ;;      Locals:        12       0       0       0       0       0       0
 12905 ;;      Temps:          5       0       0       0       0       0       0
 12906 ;;      Totals:        17       0       0       0       0       0       0
 12907 ;;Total ram usage:       17 bytes
 12908 ;; Hardware stack levels used:    1
 12909 ;; Hardware stack levels required when called:    4
 12910 ;; This function calls:
 12911 ;;		_vscp_getMajorVersion
 12912 ;;		_vscp_getMinorVersion
 12913 ;;		_vscp_getSubMinorVersion
 12914 ;;		_vscp_getGUID
 12915 ;;		_vscp_getMDF_URL
 12916 ;;		_vscp_getUserID
 12917 ;;		_vscp_getManufacturerId
 12918 ;;		_vscp_getBootLoaderAlgorithm
 12919 ;;		_vscp_getBufferSize
 12920 ;;		_vscp_getRegisterPagesUsed
 12921 ;;		_vscp_getFamilyCode
 12922 ;;		_vscp_getFamilyType
 12923 ;; This function is called by:
 12924 ;;		_vscp_readRegister
 12925 ;;		_vscp_handleProtocolEvent
 12926 ;; This function uses a non-reentrant model
 12927 ;;
 12928                           
 12929                           	psect	text47
 12930  00349C                     __ptext47:
 12931                           	opt stack 0
 12932  00349C                     _vscp_readStdReg:
 12933                           	opt stack 25
 12934                           
 12935                           ;incstack = 0
 12936                           ;incstack = 0
 12937                           ;vscp_readStdReg@reg stored from wreg
 12938  00349C  CFE8 F02B          	movff	wreg,vscp_readStdReg@reg
 12939                           
 12940                           ; BSR set to: 0
 12941                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 12942  0034A0  6A2A               	clrf	vscp_readStdReg@rv,c
 12943                           
 12944                           ; BSR set to: 0
 12945                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 12946  0034A2  502B               	movf	vscp_readStdReg@reg,w,c
 12947  0034A4  0A80               	xorlw	128
 12948  0034A6  E104               	bnz	l10790
 12949                           
 12950                           ; BSR set to: 0
 12951                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 12952  0034A8  C04D  F02A         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12953                           
 12954                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 12955  0034AC  6A4D               	clrf	_vscp_alarmstatus,c
 12956                           
 12957                           ;vscp_firmware.c: 584: }
 12958  0034AE  D0B3               	goto	l10878
 12959  0034B0                     l10790:
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 12963  0034B0  502B               	movf	vscp_readStdReg@reg,w,c
 12964  0034B2  0A81               	xorlw	129
 12965  0034B4  E102               	bnz	l10794
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;vscp_firmware.c: 588: rv = 1;
 12969  0034B6  0E01               	movlw	1
 12970  0034B8  D075               	goto	L31
 12971  0034BA                     l10794:
 12972                           
 12973                           ; BSR set to: 0
 12974                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 12975  0034BA  502B               	movf	vscp_readStdReg@reg,w,c
 12976  0034BC  0A82               	xorlw	130
 12977  0034BE  E102               	bnz	l10798
 12978                           
 12979                           ; BSR set to: 0
 12980                           ;vscp_firmware.c: 594: rv = 5;
 12981  0034C0  0E05               	movlw	5
 12982  0034C2  D070               	goto	L31
 12983  0034C4                     l10798:
 12984                           
 12985                           ; BSR set to: 0
 12986                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 12987  0034C4  502B               	movf	vscp_readStdReg@reg,w,c
 12988  0034C6  0A83               	xorlw	131
 12989  0034C8  E102               	bnz	l10802
 12990                           
 12991                           ; BSR set to: 0
 12992                           ;vscp_firmware.c: 600: rv = 0;
 12993  0034CA  6A2A               	clrf	vscp_readStdReg@rv,c
 12994                           
 12995                           ;vscp_firmware.c: 602: }
 12996  0034CC  D0A4               	goto	l10878
 12997  0034CE                     l10802:
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 13001  0034CE  502B               	movf	vscp_readStdReg@reg,w,c
 13002  0034D0  0A94               	xorlw	148
 13003  0034D2  E103               	bnz	l10806
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 13007  0034D4  EC19  F029         	call	_vscp_getMajorVersion	;wreg free
 13008  0034D8  D065               	goto	L31
 13009  0034DA                     l10806:
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 13013  0034DA  502B               	movf	vscp_readStdReg@reg,w,c
 13014  0034DC  0A95               	xorlw	149
 13015  0034DE  E103               	bnz	l10810
 13016                           
 13017                           ; BSR set to: 0
 13018                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 13019  0034E0  EC18  F029         	call	_vscp_getMinorVersion	;wreg free
 13020  0034E4  D05F               	goto	L31
 13021  0034E6                     l10810:
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 13025  0034E6  502B               	movf	vscp_readStdReg@reg,w,c
 13026  0034E8  0A96               	xorlw	150
 13027  0034EA  E103               	bnz	l10814
 13028                           
 13029                           ; BSR set to: 0
 13030                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 13031  0034EC  EC17  F029         	call	_vscp_getSubMinorVersion	;wreg free
 13032  0034F0  D059               	goto	L31
 13033  0034F2                     l10814:
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 13037  0034F2  0E89               	movlw	137
 13038  0034F4  602B               	cpfslt	vscp_readStdReg@reg,c
 13039  0034F6  D005               	goto	l10818
 13040                           
 13041                           ; BSR set to: 0
 13042                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 13043  0034F8  502B               	movf	vscp_readStdReg@reg,w,c
 13044  0034FA  0F7C               	addlw	124
 13045  0034FC  ECAC  F028         	call	_vscp_getUserID
 13046  003500  D051               	goto	L31
 13047  003502                     l10818:
 13048                           
 13049                           ; BSR set to: 0
 13050                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 13051                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 13052  003502  0E88               	movlw	136
 13053  003504  642B               	cpfsgt	vscp_readStdReg@reg,c
 13054  003506  D008               	goto	l10824
 13055                           
 13056                           ; BSR set to: 0
 13057  003508  0E91               	movlw	145
 13058  00350A  602B               	cpfslt	vscp_readStdReg@reg,c
 13059  00350C  D005               	goto	l10824
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 13063  00350E  502B               	movf	vscp_readStdReg@reg,w,c
 13064  003510  0F77               	addlw	119
 13065  003512  ECA2  F028         	call	_vscp_getManufacturerId
 13066  003516  D046               	goto	L31
 13067  003518                     l10824:
 13068                           
 13069                           ; BSR set to: 0
 13070                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 13071  003518  502B               	movf	vscp_readStdReg@reg,w,c
 13072  00351A  0A91               	xorlw	145
 13073  00351C  E103               	bnz	l10828
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 13077  00351E  C0BC  F02A         	movff	_vscp_nickname,vscp_readStdReg@rv
 13078                           
 13079                           ;vscp_firmware.c: 639: }
 13080  003522  D079               	goto	l10878
 13081  003524                     l10828:
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 13085  003524  502B               	movf	vscp_readStdReg@reg,w,c
 13086  003526  0A93               	xorlw	147
 13087  003528  E103               	bnz	l10832
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 13091  00352A  C046  F02A         	movff	_vscp_page_select,vscp_readStdReg@rv
 13092                           
 13093                           ;vscp_firmware.c: 645: }
 13094  00352E  D073               	goto	l10878
 13095  003530                     l10832:
 13096                           
 13097                           ; BSR set to: 0
 13098                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13099  003530  502B               	movf	vscp_readStdReg@reg,w,c
 13100  003532  0A92               	xorlw	146
 13101  003534  E102               	bnz	l10836
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13105  003536  5047               	movf	_vscp_page_select+1,w,c
 13106  003538  D035               	goto	L31
 13107  00353A                     l10836:
 13108                           
 13109                           ; BSR set to: 0
 13110                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13111  00353A  502B               	movf	vscp_readStdReg@reg,w,c
 13112  00353C  0A97               	xorlw	151
 13113  00353E  E103               	bnz	l10840
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13117  003540  EC16  F029         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13118  003544  D02F               	goto	L31
 13119  003546                     l10840:
 13120                           
 13121                           ; BSR set to: 0
 13122                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13123  003546  502B               	movf	vscp_readStdReg@reg,w,c
 13124  003548  0A98               	xorlw	152
 13125  00354A  E103               	bnz	l10844
 13126                           
 13127                           ; BSR set to: 0
 13128                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13129  00354C  EC15  F029         	call	_vscp_getBufferSize	;wreg free
 13130  003550  D029               	goto	L31
 13131  003552                     l10844:
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13135  003552  502B               	movf	vscp_readStdReg@reg,w,c
 13136  003554  0A99               	xorlw	153
 13137  003556  E103               	bnz	l10848
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13141  003558  EC14  F029         	call	_vscp_getRegisterPagesUsed	;wreg free
 13142  00355C  D023               	goto	L31
 13143  00355E                     l10848:
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13147                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13148  00355E  0E99               	movlw	153
 13149  003560  642B               	cpfsgt	vscp_readStdReg@reg,c
 13150  003562  D022               	goto	l10858
 13151                           
 13152                           ; BSR set to: 0
 13153  003564  0E9E               	movlw	158
 13154  003566  602B               	cpfslt	vscp_readStdReg@reg,c
 13155  003568  D01F               	goto	l10858
 13156                           
 13157                           ; BSR set to: 0
 13158                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13159  00356A  ECFD  F028         	call	_vscp_getFamilyCode	;wreg free
 13160  00356E  C011  F023         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13161  003572  C010  F022         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13162  003576  C00F  F021         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13163  00357A  C00E  F020         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13167  00357E  502B               	movf	vscp_readStdReg@reg,w,c
 13168  003580  0F66               	addlw	102
 13169  003582  6E28               	movwf	vscp_readStdReg@idx,c
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13173  003584  5028               	movf	vscp_readStdReg@idx,w,c
 13174  003586  D849               	call	PL46	;call to abstracted procedure
 13175  003588  C020  F01C         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13176  00358C  C021  F01D         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13177  003590  C022  F01E         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13178  003594  C023  F01F         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13179  003598  2AE8               	incf	wreg,f,c
 13180  00359A  D001               	goto	u9310
 13181  00359C                     u9315:
 13182  00359C  D848               	call	PL84	;call to abstracted procedure
 13183  00359E                     u9310:
 13184  00359E  2EE8               	decfsz	wreg,f,c
 13185  0035A0  D7FD               	goto	u9315
 13186  0035A2  D024               	goto	L32
 13187  0035A4                     L31:
 13188  0035A4  6E2A               	movwf	vscp_readStdReg@rv,c
 13189                           
 13190                           ;vscp_firmware.c: 671: }
 13191  0035A6  D037               	goto	l10878
 13192  0035A8                     l10858:
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13196                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13197  0035A8  0E9D               	movlw	157
 13198  0035AA  642B               	cpfsgt	vscp_readStdReg@reg,c
 13199  0035AC  D021               	goto	l10868
 13200                           
 13201                           ; BSR set to: 0
 13202  0035AE  0EA2               	movlw	162
 13203  0035B0  602B               	cpfslt	vscp_readStdReg@reg,c
 13204  0035B2  D01E               	goto	l10868
 13205                           
 13206                           ; BSR set to: 0
 13207                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13208  0035B4  ECF8  F028         	call	_vscp_getFamilyType	;wreg free
 13209  0035B8  C011  F027         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1135+3
 13210  0035BC  C010  F026         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1135+2
 13211  0035C0  C00F  F025         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1135+1
 13212  0035C4  C00E  F024         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1135
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13216  0035C8  502B               	movf	vscp_readStdReg@reg,w,c
 13217  0035CA  0F62               	addlw	98
 13218  0035CC  6E29               	movwf	vscp_readStdReg@idx_1136,c
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13222  0035CE  5029               	movf	vscp_readStdReg@idx_1136,w,c
 13223  0035D0  D824               	call	PL46	;call to abstracted procedure
 13224  0035D2  C024  F01C         	movff	vscp_readStdReg@code_1135,??_vscp_readStdReg+1
 13225  0035D6  C025  F01D         	movff	vscp_readStdReg@code_1135+1,??_vscp_readStdReg+2
 13226  0035DA  C026  F01E         	movff	vscp_readStdReg@code_1135+2,??_vscp_readStdReg+3
 13227  0035DE  C027  F01F         	movff	vscp_readStdReg@code_1135+3,??_vscp_readStdReg+4
 13228  0035E2  2AE8               	incf	wreg,f,c
 13229  0035E4  D001               	goto	u9340
 13230  0035E6                     u9345:
 13231  0035E6  D823               	call	PL84	;call to abstracted procedure
 13232  0035E8                     u9340:
 13233  0035E8  2EE8               	decfsz	wreg,f,c
 13234  0035EA  D7FD               	goto	u9345
 13235  0035EC                     L32:
 13236  0035EC  501C               	movf	??_vscp_readStdReg+1,w,c
 13237  0035EE  D7DA               	goto	L31
 13238  0035F0                     l10868:
 13239                           
 13240                           ; BSR set to: 0
 13241                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13242                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13243  0035F0  0ECF               	movlw	207
 13244  0035F2  642B               	cpfsgt	vscp_readStdReg@reg,c
 13245  0035F4  D008               	goto	l10874
 13246                           
 13247                           ; BSR set to: 0
 13248  0035F6  0EE0               	movlw	224
 13249  0035F8  602B               	cpfslt	vscp_readStdReg@reg,c
 13250  0035FA  D005               	goto	l10874
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13254  0035FC  502B               	movf	vscp_readStdReg@reg,w,c
 13255  0035FE  0F30               	addlw	48
 13256  003600  ECB6  F028         	call	_vscp_getGUID
 13257  003604  D7CF               	goto	L31
 13258  003606                     l10874:
 13259                           
 13260                           ; BSR set to: 0
 13261                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13262  003606  0EDF               	movlw	223
 13263  003608  642B               	cpfsgt	vscp_readStdReg@reg,c
 13264  00360A  D005               	goto	l10878
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13268  00360C  502B               	movf	vscp_readStdReg@reg,w,c
 13269  00360E  0F20               	addlw	32
 13270  003610  EC8A  F028         	call	_vscp_getMDF_URL
 13271  003614  D7C7               	goto	L31
 13272  003616                     l10878:
 13273                           
 13274                           ;vscp_firmware.c: 691: }
 13275                           ;vscp_firmware.c: 693: return rv;
 13276  003616  502A               	movf	vscp_readStdReg@rv,w,c
 13277  003618  0012               	return	
 13278  00361A                     __end_of_vscp_readStdReg:
 13279                           	opt stack 0
 13280  00361A                     PL46:
 13281                           	opt stack 25
 13282  00361A  0803               	sublw	3
 13283  00361C  6E1B               	movwf	??_vscp_readStdReg& (0+255),c
 13284  00361E  90D8               	bcf	status,0,c
 13285  003620  361B               	rlcf	??_vscp_readStdReg,f,c
 13286  003622  90D8               	bcf	status,0,c
 13287  003624  361B               	rlcf	??_vscp_readStdReg,f,c
 13288  003626  90D8               	bcf	status,0,c
 13289  003628  361B               	rlcf	??_vscp_readStdReg,f,c
 13290  00362A  501B               	movf	??_vscp_readStdReg,w,c
 13291  00362C  0012               	return	
 13292  00362E                     __end_ofPL46:
 13293                           	opt stack 0
 13294  00362E                     PL84:
 13295                           	opt stack 25
 13296  00362E  90D8               	bcf	status,0,c
 13297  003630  321F               	rrcf	??_vscp_readStdReg+4,f,c
 13298  003632  321E               	rrcf	??_vscp_readStdReg+3,f,c
 13299  003634  321D               	rrcf	??_vscp_readStdReg+2,f,c
 13300  003636  321C               	rrcf	??_vscp_readStdReg+1,f,c
 13301  003638  0012               	return	
 13302  00363A                     __end_ofPL84:
 13303                           	opt stack 0
 13304                           tblptru	equ	0xFF8
 13305                           tblptrh	equ	0xFF7
 13306                           tblptrl	equ	0xFF6
 13307                           tablat	equ	0xFF5
 13308                           prodh	equ	0xFF4
 13309                           prodl	equ	0xFF3
 13310                           intcon	equ	0xFF2
 13311                           postinc0	equ	0xFEE
 13312                           wreg	equ	0xFE8
 13313                           indf1	equ	0xFE7
 13314                           postdec1	equ	0xFE5
 13315                           fsr1h	equ	0xFE2
 13316                           fsr1l	equ	0xFE1
 13317                           indf2	equ	0xFDF
 13318                           postinc2	equ	0xFDE
 13319                           postdec2	equ	0xFDD
 13320                           plusw2	equ	0xFDB
 13321                           fsr2h	equ	0xFDA
 13322                           fsr2l	equ	0xFD9
 13323                           status	equ	0xFD8
 13324                           
 13325 ;; *************** function _vscp_getFamilyType *****************
 13326 ;; Defined at:
 13327 ;;		line 2823 in file "../main.c"
 13328 ;; Parameters:    Size  Location     Type
 13329 ;;		None
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;		None
 13332 ;; Return value:  Size  Location     Type
 13333 ;;                  4   13[COMRAM] unsigned long 
 13334 ;; Registers used:
 13335 ;;		None
 13336 ;; Tracked objects:
 13337 ;;		On entry : F/0
 13338 ;;		On exit  : F/0
 13339 ;;		Unchanged: F/0
 13340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13341 ;;      Params:         4       0       0       0       0       0       0
 13342 ;;      Locals:         0       0       0       0       0       0       0
 13343 ;;      Temps:          0       0       0       0       0       0       0
 13344 ;;      Totals:         4       0       0       0       0       0       0
 13345 ;;Total ram usage:        4 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; Hardware stack levels required when called:    2
 13348 ;; This function calls:
 13349 ;;		Nothing
 13350 ;; This function is called by:
 13351 ;;		_vscp_readStdReg
 13352 ;; This function uses a non-reentrant model
 13353 ;;
 13354                           
 13355                           	psect	text48
 13356  0051F0                     __ptext48:
 13357                           	opt stack 0
 13358  0051F0                     _vscp_getFamilyType:
 13359                           	opt stack 26
 13360                           
 13361                           ; BSR set to: 0
 13362                           ;main.c: 2824: return 0;
 13363                           
 13364                           ;incstack = 0
 13365                           ;incstack = 0
 13366  0051F0  6A0E               	clrf	?_vscp_getFamilyType,c
 13367  0051F2  6A0F               	clrf	?_vscp_getFamilyType+1,c
 13368  0051F4  6A10               	clrf	?_vscp_getFamilyType+2,c
 13369  0051F6  6A11               	clrf	?_vscp_getFamilyType+3,c
 13370                           
 13371                           ; BSR set to: 0
 13372  0051F8  0012               	return	
 13373  0051FA                     __end_of_vscp_getFamilyType:
 13374                           	opt stack 0
 13375                           tblptru	equ	0xFF8
 13376                           tblptrh	equ	0xFF7
 13377                           tblptrl	equ	0xFF6
 13378                           tablat	equ	0xFF5
 13379                           prodh	equ	0xFF4
 13380                           prodl	equ	0xFF3
 13381                           intcon	equ	0xFF2
 13382                           postinc0	equ	0xFEE
 13383                           wreg	equ	0xFE8
 13384                           indf1	equ	0xFE7
 13385                           postdec1	equ	0xFE5
 13386                           fsr1h	equ	0xFE2
 13387                           fsr1l	equ	0xFE1
 13388                           indf2	equ	0xFDF
 13389                           postinc2	equ	0xFDE
 13390                           postdec2	equ	0xFDD
 13391                           plusw2	equ	0xFDB
 13392                           fsr2h	equ	0xFDA
 13393                           fsr2l	equ	0xFD9
 13394                           status	equ	0xFD8
 13395                           
 13396 ;; *************** function _vscp_getFamilyCode *****************
 13397 ;; Defined at:
 13398 ;;		line 2813 in file "../main.c"
 13399 ;; Parameters:    Size  Location     Type
 13400 ;;		None
 13401 ;; Auto vars:     Size  Location     Type
 13402 ;;		None
 13403 ;; Return value:  Size  Location     Type
 13404 ;;                  4   13[COMRAM] unsigned long 
 13405 ;; Registers used:
 13406 ;;		None
 13407 ;; Tracked objects:
 13408 ;;		On entry : F/0
 13409 ;;		On exit  : F/0
 13410 ;;		Unchanged: F/0
 13411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13412 ;;      Params:         4       0       0       0       0       0       0
 13413 ;;      Locals:         0       0       0       0       0       0       0
 13414 ;;      Temps:          0       0       0       0       0       0       0
 13415 ;;      Totals:         4       0       0       0       0       0       0
 13416 ;;Total ram usage:        4 bytes
 13417 ;; Hardware stack levels used:    1
 13418 ;; Hardware stack levels required when called:    2
 13419 ;; This function calls:
 13420 ;;		Nothing
 13421 ;; This function is called by:
 13422 ;;		_vscp_readStdReg
 13423 ;; This function uses a non-reentrant model
 13424 ;;
 13425                           
 13426                           	psect	text49
 13427  0051FA                     __ptext49:
 13428                           	opt stack 0
 13429  0051FA                     _vscp_getFamilyCode:
 13430                           	opt stack 26
 13431                           
 13432                           ; BSR set to: 0
 13433                           ;main.c: 2814: return 0L;
 13434                           
 13435                           ; BSR set to: 0
 13436                           ;incstack = 0
 13437                           ;incstack = 0
 13438  0051FA  6A0E               	clrf	?_vscp_getFamilyCode,c
 13439  0051FC  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 13440  0051FE  6A10               	clrf	?_vscp_getFamilyCode+2,c
 13441  005200  6A11               	clrf	?_vscp_getFamilyCode+3,c
 13442                           
 13443                           ; BSR set to: 0
 13444  005202  0012               	return	
 13445  005204                     __end_of_vscp_getFamilyCode:
 13446                           	opt stack 0
 13447                           tblptru	equ	0xFF8
 13448                           tblptrh	equ	0xFF7
 13449                           tblptrl	equ	0xFF6
 13450                           tablat	equ	0xFF5
 13451                           prodh	equ	0xFF4
 13452                           prodl	equ	0xFF3
 13453                           intcon	equ	0xFF2
 13454                           postinc0	equ	0xFEE
 13455                           wreg	equ	0xFE8
 13456                           indf1	equ	0xFE7
 13457                           postdec1	equ	0xFE5
 13458                           fsr1h	equ	0xFE2
 13459                           fsr1l	equ	0xFE1
 13460                           indf2	equ	0xFDF
 13461                           postinc2	equ	0xFDE
 13462                           postdec2	equ	0xFDD
 13463                           plusw2	equ	0xFDB
 13464                           fsr2h	equ	0xFDA
 13465                           fsr2l	equ	0xFD9
 13466                           status	equ	0xFD8
 13467                           
 13468 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13469 ;; Defined at:
 13470 ;;		line 2714 in file "../main.c"
 13471 ;; Parameters:    Size  Location     Type
 13472 ;;		None
 13473 ;; Auto vars:     Size  Location     Type
 13474 ;;		None
 13475 ;; Return value:  Size  Location     Type
 13476 ;;                  1    wreg      unsigned char 
 13477 ;; Registers used:
 13478 ;;		wreg
 13479 ;; Tracked objects:
 13480 ;;		On entry : F/0
 13481 ;;		On exit  : F/0
 13482 ;;		Unchanged: F/0
 13483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13484 ;;      Params:         0       0       0       0       0       0       0
 13485 ;;      Locals:         0       0       0       0       0       0       0
 13486 ;;      Temps:          0       0       0       0       0       0       0
 13487 ;;      Totals:         0       0       0       0       0       0       0
 13488 ;;Total ram usage:        0 bytes
 13489 ;; Hardware stack levels used:    1
 13490 ;; Hardware stack levels required when called:    2
 13491 ;; This function calls:
 13492 ;;		Nothing
 13493 ;; This function is called by:
 13494 ;;		_vscp_readStdReg
 13495 ;; This function uses a non-reentrant model
 13496 ;;
 13497                           
 13498                           	psect	text50
 13499  005228                     __ptext50:
 13500                           	opt stack 0
 13501  005228                     _vscp_getRegisterPagesUsed:
 13502                           	opt stack 26
 13503                           
 13504                           ; BSR set to: 0
 13505                           
 13506                           ; BSR set to: 0
 13507                           ;main.c: 2715: return 1;
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;incstack = 0
 13511                           ;incstack = 0
 13512  005228  0C01               	retlw	1
 13513  00522A                     __end_of_vscp_getRegisterPagesUsed:
 13514                           	opt stack 0
 13515                           tblptru	equ	0xFF8
 13516                           tblptrh	equ	0xFF7
 13517                           tblptrl	equ	0xFF6
 13518                           tablat	equ	0xFF5
 13519                           prodh	equ	0xFF4
 13520                           prodl	equ	0xFF3
 13521                           intcon	equ	0xFF2
 13522                           postinc0	equ	0xFEE
 13523                           wreg	equ	0xFE8
 13524                           indf1	equ	0xFE7
 13525                           postdec1	equ	0xFE5
 13526                           fsr1h	equ	0xFE2
 13527                           fsr1l	equ	0xFE1
 13528                           indf2	equ	0xFDF
 13529                           postinc2	equ	0xFDE
 13530                           postdec2	equ	0xFDD
 13531                           plusw2	equ	0xFDB
 13532                           fsr2h	equ	0xFDA
 13533                           fsr2l	equ	0xFD9
 13534                           status	equ	0xFD8
 13535                           
 13536 ;; *************** function _vscp_getBufferSize *****************
 13537 ;; Defined at:
 13538 ;;		line 2667 in file "../main.c"
 13539 ;; Parameters:    Size  Location     Type
 13540 ;;		None
 13541 ;; Auto vars:     Size  Location     Type
 13542 ;;		None
 13543 ;; Return value:  Size  Location     Type
 13544 ;;                  1    wreg      unsigned char 
 13545 ;; Registers used:
 13546 ;;		wreg
 13547 ;; Tracked objects:
 13548 ;;		On entry : F/0
 13549 ;;		On exit  : F/0
 13550 ;;		Unchanged: F/0
 13551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13552 ;;      Params:         0       0       0       0       0       0       0
 13553 ;;      Locals:         0       0       0       0       0       0       0
 13554 ;;      Temps:          0       0       0       0       0       0       0
 13555 ;;      Totals:         0       0       0       0       0       0       0
 13556 ;;Total ram usage:        0 bytes
 13557 ;; Hardware stack levels used:    1
 13558 ;; Hardware stack levels required when called:    2
 13559 ;; This function calls:
 13560 ;;		Nothing
 13561 ;; This function is called by:
 13562 ;;		_vscp_readStdReg
 13563 ;; This function uses a non-reentrant model
 13564 ;;
 13565                           
 13566                           	psect	text51
 13567  00522A                     __ptext51:
 13568                           	opt stack 0
 13569  00522A                     _vscp_getBufferSize:
 13570                           	opt stack 26
 13571                           
 13572                           ; BSR set to: 0
 13573                           
 13574                           ; BSR set to: 0
 13575                           ;main.c: 2668: return 8;
 13576                           
 13577                           ; BSR set to: 0
 13578                           ;incstack = 0
 13579                           ;incstack = 0
 13580  00522A  0C08               	retlw	8
 13581  00522C                     __end_of_vscp_getBufferSize:
 13582                           	opt stack 0
 13583                           tblptru	equ	0xFF8
 13584                           tblptrh	equ	0xFF7
 13585                           tblptrl	equ	0xFF6
 13586                           tablat	equ	0xFF5
 13587                           prodh	equ	0xFF4
 13588                           prodl	equ	0xFF3
 13589                           intcon	equ	0xFF2
 13590                           postinc0	equ	0xFEE
 13591                           wreg	equ	0xFE8
 13592                           indf1	equ	0xFE7
 13593                           postdec1	equ	0xFE5
 13594                           fsr1h	equ	0xFE2
 13595                           fsr1l	equ	0xFE1
 13596                           indf2	equ	0xFDF
 13597                           postinc2	equ	0xFDE
 13598                           postdec2	equ	0xFDD
 13599                           plusw2	equ	0xFDB
 13600                           fsr2h	equ	0xFDA
 13601                           fsr2l	equ	0xFD9
 13602                           status	equ	0xFD8
 13603                           
 13604 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13605 ;; Defined at:
 13606 ;;		line 2658 in file "../main.c"
 13607 ;; Parameters:    Size  Location     Type
 13608 ;;		None
 13609 ;; Auto vars:     Size  Location     Type
 13610 ;;		None
 13611 ;; Return value:  Size  Location     Type
 13612 ;;                  1    wreg      unsigned char 
 13613 ;; Registers used:
 13614 ;;		wreg
 13615 ;; Tracked objects:
 13616 ;;		On entry : F/0
 13617 ;;		On exit  : F/0
 13618 ;;		Unchanged: F/0
 13619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13620 ;;      Params:         0       0       0       0       0       0       0
 13621 ;;      Locals:         0       0       0       0       0       0       0
 13622 ;;      Temps:          0       0       0       0       0       0       0
 13623 ;;      Totals:         0       0       0       0       0       0       0
 13624 ;;Total ram usage:        0 bytes
 13625 ;; Hardware stack levels used:    1
 13626 ;; Hardware stack levels required when called:    2
 13627 ;; This function calls:
 13628 ;;		Nothing
 13629 ;; This function is called by:
 13630 ;;		_vscp_readStdReg
 13631 ;; This function uses a non-reentrant model
 13632 ;;
 13633                           
 13634                           	psect	text52
 13635  00522C                     __ptext52:
 13636                           	opt stack 0
 13637  00522C                     _vscp_getBootLoaderAlgorithm:
 13638                           	opt stack 26
 13639                           
 13640                           ; BSR set to: 0
 13641                           
 13642                           ; BSR set to: 0
 13643                           ;main.c: 2659: return 0x01;
 13644                           
 13645                           ; BSR set to: 0
 13646                           ;incstack = 0
 13647                           ;incstack = 0
 13648  00522C  0C01               	retlw	1
 13649  00522E                     __end_of_vscp_getBootLoaderAlgorithm:
 13650                           	opt stack 0
 13651                           tblptru	equ	0xFF8
 13652                           tblptrh	equ	0xFF7
 13653                           tblptrl	equ	0xFF6
 13654                           tablat	equ	0xFF5
 13655                           prodh	equ	0xFF4
 13656                           prodl	equ	0xFF3
 13657                           intcon	equ	0xFF2
 13658                           postinc0	equ	0xFEE
 13659                           wreg	equ	0xFE8
 13660                           indf1	equ	0xFE7
 13661                           postdec1	equ	0xFE5
 13662                           fsr1h	equ	0xFE2
 13663                           fsr1l	equ	0xFE1
 13664                           indf2	equ	0xFDF
 13665                           postinc2	equ	0xFDE
 13666                           postdec2	equ	0xFDD
 13667                           plusw2	equ	0xFDB
 13668                           fsr2h	equ	0xFDA
 13669                           fsr2l	equ	0xFD9
 13670                           status	equ	0xFD8
 13671                           
 13672 ;; *************** function _vscp_getManufacturerId *****************
 13673 ;; Defined at:
 13674 ;;		line 2638 in file "../main.c"
 13675 ;; Parameters:    Size  Location     Type
 13676 ;;  idx             1    wreg     unsigned char 
 13677 ;; Auto vars:     Size  Location     Type
 13678 ;;  idx             1   25[COMRAM] unsigned char 
 13679 ;; Return value:  Size  Location     Type
 13680 ;;                  1    wreg      unsigned char 
 13681 ;; Registers used:
 13682 ;;		wreg, status,2, status,0, cstack
 13683 ;; Tracked objects:
 13684 ;;		On entry : 0/0
 13685 ;;		On exit  : 0/0
 13686 ;;		Unchanged: 0/0
 13687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13688 ;;      Params:         0       0       0       0       0       0       0
 13689 ;;      Locals:         1       0       0       0       0       0       0
 13690 ;;      Temps:          0       0       0       0       0       0       0
 13691 ;;      Totals:         1       0       0       0       0       0       0
 13692 ;;Total ram usage:        1 bytes
 13693 ;; Hardware stack levels used:    1
 13694 ;; Hardware stack levels required when called:    3
 13695 ;; This function calls:
 13696 ;;		_readEEPROM
 13697 ;; This function is called by:
 13698 ;;		_vscp_readStdReg
 13699 ;;		_vscp_writeStdReg
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           	psect	text53
 13704  005144                     __ptext53:
 13705                           	opt stack 0
 13706  005144                     _vscp_getManufacturerId:
 13707                           	opt stack 25
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;incstack = 0
 13711                           ;incstack = 0
 13712                           ;vscp_getManufacturerId@idx stored from wreg
 13713  005144  CFE8 F01A          	movff	wreg,vscp_getManufacturerId@idx
 13714                           
 13715                           ;main.c: 2639: return readEEPROM(0x09 + idx);
 13716  005148  0E09               	movlw	9
 13717  00514A  241A               	addwf	vscp_getManufacturerId@idx,w,c
 13718  00514C  6E16               	movwf	?_readEEPROM,c
 13719  00514E  6A17               	clrf	?_readEEPROM+1,c
 13720  005150  0E00               	movlw	0
 13721  005152  2217               	addwfc	?_readEEPROM+1,f,c
 13722  005154  EFC0  F028         	goto	_readEEPROM	;wreg free
 13723  005158                     __end_of_vscp_getManufacturerId:
 13724                           	opt stack 0
 13725                           tblptru	equ	0xFF8
 13726                           tblptrh	equ	0xFF7
 13727                           tblptrl	equ	0xFF6
 13728                           tablat	equ	0xFF5
 13729                           prodh	equ	0xFF4
 13730                           prodl	equ	0xFF3
 13731                           intcon	equ	0xFF2
 13732                           postinc0	equ	0xFEE
 13733                           wreg	equ	0xFE8
 13734                           indf1	equ	0xFE7
 13735                           postdec1	equ	0xFE5
 13736                           fsr1h	equ	0xFE2
 13737                           fsr1l	equ	0xFE1
 13738                           indf2	equ	0xFDF
 13739                           postinc2	equ	0xFDE
 13740                           postdec2	equ	0xFDD
 13741                           plusw2	equ	0xFDB
 13742                           fsr2h	equ	0xFDA
 13743                           fsr2l	equ	0xFD9
 13744                           status	equ	0xFD8
 13745                           
 13746 ;; *************** function _vscp_getUserID *****************
 13747 ;; Defined at:
 13748 ;;		line 2618 in file "../main.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;  idx             1    wreg     unsigned char 
 13751 ;; Auto vars:     Size  Location     Type
 13752 ;;  idx             1   25[COMRAM] unsigned char 
 13753 ;; Return value:  Size  Location     Type
 13754 ;;                  1    wreg      unsigned char 
 13755 ;; Registers used:
 13756 ;;		wreg, status,2, status,0, cstack
 13757 ;; Tracked objects:
 13758 ;;		On entry : 0/0
 13759 ;;		On exit  : 0/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13762 ;;      Params:         0       0       0       0       0       0       0
 13763 ;;      Locals:         1       0       0       0       0       0       0
 13764 ;;      Temps:          0       0       0       0       0       0       0
 13765 ;;      Totals:         1       0       0       0       0       0       0
 13766 ;;Total ram usage:        1 bytes
 13767 ;; Hardware stack levels used:    1
 13768 ;; Hardware stack levels required when called:    3
 13769 ;; This function calls:
 13770 ;;		_readEEPROM
 13771 ;; This function is called by:
 13772 ;;		_vscp_readStdReg
 13773 ;;		_vscp_writeStdReg
 13774 ;; This function uses a non-reentrant model
 13775 ;;
 13776                           
 13777                           	psect	text54
 13778  005158                     __ptext54:
 13779                           	opt stack 0
 13780  005158                     _vscp_getUserID:
 13781                           	opt stack 25
 13782                           
 13783                           ;incstack = 0
 13784                           ;incstack = 0
 13785                           ;vscp_getUserID@idx stored from wreg
 13786  005158  CFE8 F01A          	movff	wreg,vscp_getUserID@idx
 13787                           
 13788                           ;main.c: 2619: return readEEPROM(0x04 + idx);
 13789  00515C  0E04               	movlw	4
 13790  00515E  241A               	addwf	vscp_getUserID@idx,w,c
 13791  005160  6E16               	movwf	?_readEEPROM,c
 13792  005162  6A17               	clrf	?_readEEPROM+1,c
 13793  005164  0E00               	movlw	0
 13794  005166  2217               	addwfc	?_readEEPROM+1,f,c
 13795  005168  EFC0  F028         	goto	_readEEPROM	;wreg free
 13796  00516C                     __end_of_vscp_getUserID:
 13797                           	opt stack 0
 13798                           tblptru	equ	0xFF8
 13799                           tblptrh	equ	0xFF7
 13800                           tblptrl	equ	0xFF6
 13801                           tablat	equ	0xFF5
 13802                           prodh	equ	0xFF4
 13803                           prodl	equ	0xFF3
 13804                           intcon	equ	0xFF2
 13805                           postinc0	equ	0xFEE
 13806                           wreg	equ	0xFE8
 13807                           indf1	equ	0xFE7
 13808                           postdec1	equ	0xFE5
 13809                           fsr1h	equ	0xFE2
 13810                           fsr1l	equ	0xFE1
 13811                           indf2	equ	0xFDF
 13812                           postinc2	equ	0xFDE
 13813                           postdec2	equ	0xFDD
 13814                           plusw2	equ	0xFDB
 13815                           fsr2h	equ	0xFDA
 13816                           fsr2l	equ	0xFD9
 13817                           status	equ	0xFD8
 13818                           
 13819 ;; *************** function _vscp_getMDF_URL *****************
 13820 ;; Defined at:
 13821 ;;		line 2609 in file "../main.c"
 13822 ;; Parameters:    Size  Location     Type
 13823 ;;  idx             1    wreg     unsigned char 
 13824 ;; Auto vars:     Size  Location     Type
 13825 ;;  idx             1   14[COMRAM] unsigned char 
 13826 ;; Return value:  Size  Location     Type
 13827 ;;                  1    wreg      unsigned char 
 13828 ;; Registers used:
 13829 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13830 ;; Tracked objects:
 13831 ;;		On entry : F/0
 13832 ;;		On exit  : F/0
 13833 ;;		Unchanged: F/0
 13834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13835 ;;      Params:         0       0       0       0       0       0       0
 13836 ;;      Locals:         1       0       0       0       0       0       0
 13837 ;;      Temps:          1       0       0       0       0       0       0
 13838 ;;      Totals:         2       0       0       0       0       0       0
 13839 ;;Total ram usage:        2 bytes
 13840 ;; Hardware stack levels used:    1
 13841 ;; Hardware stack levels required when called:    2
 13842 ;; This function calls:
 13843 ;;		Nothing
 13844 ;; This function is called by:
 13845 ;;		_vscp_readStdReg
 13846 ;;		_vscp_handleProtocolEvent
 13847 ;; This function uses a non-reentrant model
 13848 ;;
 13849                           
 13850                           	psect	text55
 13851  005114                     __ptext55:
 13852                           	opt stack 0
 13853  005114                     _vscp_getMDF_URL:
 13854                           	opt stack 26
 13855                           
 13856                           ;incstack = 0
 13857                           ;incstack = 0
 13858                           ;vscp_getMDF_URL@idx stored from wreg
 13859  005114  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;main.c: 2610: return vscp_deviceURL[ idx ];
 13863  005118  500F               	movf	vscp_getMDF_URL@idx,w,c
 13864  00511A  0F00               	addlw	low _vscp_deviceURL
 13865  00511C  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13866  00511E  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13867  005122  0E06               	movlw	high __smallconst
 13868  005124  6EF7               	movwf	tblptrh,c
 13869  005126  0008               	tblrd		*
 13870  005128  50F5               	movf	tablat,w,c
 13871                           
 13872                           ; BSR set to: 0
 13873  00512A  0012               	return	
 13874  00512C                     __end_of_vscp_getMDF_URL:
 13875                           	opt stack 0
 13876                           tblptru	equ	0xFF8
 13877                           tblptrh	equ	0xFF7
 13878                           tblptrl	equ	0xFF6
 13879                           tablat	equ	0xFF5
 13880                           prodh	equ	0xFF4
 13881                           prodl	equ	0xFF3
 13882                           intcon	equ	0xFF2
 13883                           postinc0	equ	0xFEE
 13884                           wreg	equ	0xFE8
 13885                           indf1	equ	0xFE7
 13886                           postdec1	equ	0xFE5
 13887                           fsr1h	equ	0xFE2
 13888                           fsr1l	equ	0xFE1
 13889                           indf2	equ	0xFDF
 13890                           postinc2	equ	0xFDE
 13891                           postdec2	equ	0xFDD
 13892                           plusw2	equ	0xFDB
 13893                           fsr2h	equ	0xFDA
 13894                           fsr2l	equ	0xFD9
 13895                           status	equ	0xFD8
 13896                           
 13897 ;; *************** function _vscp_getGUID *****************
 13898 ;; Defined at:
 13899 ;;		line 2586 in file "../main.c"
 13900 ;; Parameters:    Size  Location     Type
 13901 ;;  idx             1    wreg     unsigned char 
 13902 ;; Auto vars:     Size  Location     Type
 13903 ;;  idx             1   25[COMRAM] unsigned char 
 13904 ;; Return value:  Size  Location     Type
 13905 ;;                  1    wreg      unsigned char 
 13906 ;; Registers used:
 13907 ;;		wreg, status,2, status,0, cstack
 13908 ;; Tracked objects:
 13909 ;;		On entry : 0/0
 13910 ;;		On exit  : 0/0
 13911 ;;		Unchanged: 0/0
 13912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13913 ;;      Params:         0       0       0       0       0       0       0
 13914 ;;      Locals:         1       0       0       0       0       0       0
 13915 ;;      Temps:          0       0       0       0       0       0       0
 13916 ;;      Totals:         1       0       0       0       0       0       0
 13917 ;;Total ram usage:        1 bytes
 13918 ;; Hardware stack levels used:    1
 13919 ;; Hardware stack levels required when called:    3
 13920 ;; This function calls:
 13921 ;;		_readEEPROM
 13922 ;; This function is called by:
 13923 ;;		_vscp_readStdReg
 13924 ;;		_vscp_writeStdReg
 13925 ;;		_vscp_handleProtocolEvent
 13926 ;; This function uses a non-reentrant model
 13927 ;;
 13928                           
 13929                           	psect	text56
 13930  00516C                     __ptext56:
 13931                           	opt stack 0
 13932  00516C                     _vscp_getGUID:
 13933                           	opt stack 25
 13934                           
 13935                           ; BSR set to: 0
 13936                           ;incstack = 0
 13937                           ;incstack = 0
 13938                           ;vscp_getGUID@idx stored from wreg
 13939  00516C  CFE8 F01A          	movff	wreg,vscp_getGUID@idx
 13940                           
 13941                           ;main.c: 2587: return readEEPROM(0x11 + idx);
 13942  005170  0E11               	movlw	17
 13943  005172  241A               	addwf	vscp_getGUID@idx,w,c
 13944  005174  6E16               	movwf	?_readEEPROM,c
 13945  005176  6A17               	clrf	?_readEEPROM+1,c
 13946  005178  0E00               	movlw	0
 13947  00517A  2217               	addwfc	?_readEEPROM+1,f,c
 13948  00517C  EFC0  F028         	goto	_readEEPROM	;wreg free
 13949  005180                     __end_of_vscp_getGUID:
 13950                           	opt stack 0
 13951                           tblptru	equ	0xFF8
 13952                           tblptrh	equ	0xFF7
 13953                           tblptrl	equ	0xFF6
 13954                           tablat	equ	0xFF5
 13955                           prodh	equ	0xFF4
 13956                           prodl	equ	0xFF3
 13957                           intcon	equ	0xFF2
 13958                           postinc0	equ	0xFEE
 13959                           wreg	equ	0xFE8
 13960                           indf1	equ	0xFE7
 13961                           postdec1	equ	0xFE5
 13962                           fsr1h	equ	0xFE2
 13963                           fsr1l	equ	0xFE1
 13964                           indf2	equ	0xFDF
 13965                           postinc2	equ	0xFDE
 13966                           postdec2	equ	0xFDD
 13967                           plusw2	equ	0xFDB
 13968                           fsr2h	equ	0xFDA
 13969                           fsr2l	equ	0xFD9
 13970                           status	equ	0xFD8
 13971                           
 13972 ;; *************** function _vscp_getSubMinorVersion *****************
 13973 ;; Defined at:
 13974 ;;		line 2575 in file "../main.c"
 13975 ;; Parameters:    Size  Location     Type
 13976 ;;		None
 13977 ;; Auto vars:     Size  Location     Type
 13978 ;;		None
 13979 ;; Return value:  Size  Location     Type
 13980 ;;                  1    wreg      unsigned char 
 13981 ;; Registers used:
 13982 ;;		wreg
 13983 ;; Tracked objects:
 13984 ;;		On entry : F/0
 13985 ;;		On exit  : F/0
 13986 ;;		Unchanged: F/0
 13987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13988 ;;      Params:         0       0       0       0       0       0       0
 13989 ;;      Locals:         0       0       0       0       0       0       0
 13990 ;;      Temps:          0       0       0       0       0       0       0
 13991 ;;      Totals:         0       0       0       0       0       0       0
 13992 ;;Total ram usage:        0 bytes
 13993 ;; Hardware stack levels used:    1
 13994 ;; Hardware stack levels required when called:    2
 13995 ;; This function calls:
 13996 ;;		Nothing
 13997 ;; This function is called by:
 13998 ;;		_vscp_readStdReg
 13999 ;; This function uses a non-reentrant model
 14000 ;;
 14001                           
 14002                           	psect	text57
 14003  00522E                     __ptext57:
 14004                           	opt stack 0
 14005  00522E                     _vscp_getSubMinorVersion:
 14006                           	opt stack 26
 14007                           
 14008                           ; BSR set to: 0
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;main.c: 2576: return 2;
 14012                           
 14013                           ;incstack = 0
 14014                           ;incstack = 0
 14015  00522E  0C02               	retlw	2
 14016  005230                     __end_of_vscp_getSubMinorVersion:
 14017                           	opt stack 0
 14018                           tblptru	equ	0xFF8
 14019                           tblptrh	equ	0xFF7
 14020                           tblptrl	equ	0xFF6
 14021                           tablat	equ	0xFF5
 14022                           prodh	equ	0xFF4
 14023                           prodl	equ	0xFF3
 14024                           intcon	equ	0xFF2
 14025                           postinc0	equ	0xFEE
 14026                           wreg	equ	0xFE8
 14027                           indf1	equ	0xFE7
 14028                           postdec1	equ	0xFE5
 14029                           fsr1h	equ	0xFE2
 14030                           fsr1l	equ	0xFE1
 14031                           indf2	equ	0xFDF
 14032                           postinc2	equ	0xFDE
 14033                           postdec2	equ	0xFDD
 14034                           plusw2	equ	0xFDB
 14035                           fsr2h	equ	0xFDA
 14036                           fsr2l	equ	0xFD9
 14037                           status	equ	0xFD8
 14038                           
 14039 ;; *************** function _vscp_getMinorVersion *****************
 14040 ;; Defined at:
 14041 ;;		line 2566 in file "../main.c"
 14042 ;; Parameters:    Size  Location     Type
 14043 ;;		None
 14044 ;; Auto vars:     Size  Location     Type
 14045 ;;		None
 14046 ;; Return value:  Size  Location     Type
 14047 ;;                  1    wreg      unsigned char 
 14048 ;; Registers used:
 14049 ;;		wreg
 14050 ;; Tracked objects:
 14051 ;;		On entry : F/0
 14052 ;;		On exit  : F/0
 14053 ;;		Unchanged: F/0
 14054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14055 ;;      Params:         0       0       0       0       0       0       0
 14056 ;;      Locals:         0       0       0       0       0       0       0
 14057 ;;      Temps:          0       0       0       0       0       0       0
 14058 ;;      Totals:         0       0       0       0       0       0       0
 14059 ;;Total ram usage:        0 bytes
 14060 ;; Hardware stack levels used:    1
 14061 ;; Hardware stack levels required when called:    2
 14062 ;; This function calls:
 14063 ;;		Nothing
 14064 ;; This function is called by:
 14065 ;;		_vscp_readStdReg
 14066 ;; This function uses a non-reentrant model
 14067 ;;
 14068                           
 14069                           	psect	text58
 14070  005230                     __ptext58:
 14071                           	opt stack 0
 14072  005230                     _vscp_getMinorVersion:
 14073                           	opt stack 26
 14074                           
 14075                           ; BSR set to: 0
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;main.c: 2567: return 2;
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;incstack = 0
 14082                           ;incstack = 0
 14083  005230  0C02               	retlw	2
 14084  005232                     __end_of_vscp_getMinorVersion:
 14085                           	opt stack 0
 14086                           tblptru	equ	0xFF8
 14087                           tblptrh	equ	0xFF7
 14088                           tblptrl	equ	0xFF6
 14089                           tablat	equ	0xFF5
 14090                           prodh	equ	0xFF4
 14091                           prodl	equ	0xFF3
 14092                           intcon	equ	0xFF2
 14093                           postinc0	equ	0xFEE
 14094                           wreg	equ	0xFE8
 14095                           indf1	equ	0xFE7
 14096                           postdec1	equ	0xFE5
 14097                           fsr1h	equ	0xFE2
 14098                           fsr1l	equ	0xFE1
 14099                           indf2	equ	0xFDF
 14100                           postinc2	equ	0xFDE
 14101                           postdec2	equ	0xFDD
 14102                           plusw2	equ	0xFDB
 14103                           fsr2h	equ	0xFDA
 14104                           fsr2l	equ	0xFD9
 14105                           status	equ	0xFD8
 14106                           
 14107 ;; *************** function _vscp_getMajorVersion *****************
 14108 ;; Defined at:
 14109 ;;		line 2557 in file "../main.c"
 14110 ;; Parameters:    Size  Location     Type
 14111 ;;		None
 14112 ;; Auto vars:     Size  Location     Type
 14113 ;;		None
 14114 ;; Return value:  Size  Location     Type
 14115 ;;                  1    wreg      unsigned char 
 14116 ;; Registers used:
 14117 ;;		wreg
 14118 ;; Tracked objects:
 14119 ;;		On entry : F/0
 14120 ;;		On exit  : F/0
 14121 ;;		Unchanged: F/0
 14122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14123 ;;      Params:         0       0       0       0       0       0       0
 14124 ;;      Locals:         0       0       0       0       0       0       0
 14125 ;;      Temps:          0       0       0       0       0       0       0
 14126 ;;      Totals:         0       0       0       0       0       0       0
 14127 ;;Total ram usage:        0 bytes
 14128 ;; Hardware stack levels used:    1
 14129 ;; Hardware stack levels required when called:    2
 14130 ;; This function calls:
 14131 ;;		Nothing
 14132 ;; This function is called by:
 14133 ;;		_vscp_readStdReg
 14134 ;; This function uses a non-reentrant model
 14135 ;;
 14136                           
 14137                           	psect	text59
 14138  005232                     __ptext59:
 14139                           	opt stack 0
 14140  005232                     _vscp_getMajorVersion:
 14141                           	opt stack 26
 14142                           
 14143                           ; BSR set to: 0
 14144                           
 14145                           ; BSR set to: 0
 14146                           ;main.c: 2558: return 1;
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;incstack = 0
 14150                           ;incstack = 0
 14151  005232  0C01               	retlw	1
 14152  005234                     __end_of_vscp_getMajorVersion:
 14153                           	opt stack 0
 14154                           tblptru	equ	0xFF8
 14155                           tblptrh	equ	0xFF7
 14156                           tblptrl	equ	0xFF6
 14157                           tablat	equ	0xFF5
 14158                           prodh	equ	0xFF4
 14159                           prodl	equ	0xFF3
 14160                           intcon	equ	0xFF2
 14161                           postinc0	equ	0xFEE
 14162                           wreg	equ	0xFE8
 14163                           indf1	equ	0xFE7
 14164                           postdec1	equ	0xFE5
 14165                           fsr1h	equ	0xFE2
 14166                           fsr1l	equ	0xFE1
 14167                           indf2	equ	0xFDF
 14168                           postinc2	equ	0xFDE
 14169                           postdec2	equ	0xFDD
 14170                           plusw2	equ	0xFDB
 14171                           fsr2h	equ	0xFDA
 14172                           fsr2l	equ	0xFD9
 14173                           status	equ	0xFD8
 14174                           
 14175 ;; *************** function _vscp_newNodeOnline *****************
 14176 ;; Defined at:
 14177 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14178 ;; Parameters:    Size  Location     Type
 14179 ;;		None
 14180 ;; Auto vars:     Size  Location     Type
 14181 ;;		None
 14182 ;; Return value:  Size  Location     Type
 14183 ;;		None               void
 14184 ;; Registers used:
 14185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14186 ;; Tracked objects:
 14187 ;;		On entry : F/0
 14188 ;;		On exit  : F/0
 14189 ;;		Unchanged: 0/0
 14190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14191 ;;      Params:         0       0       0       0       0       0       0
 14192 ;;      Locals:         0       0       0       0       0       0       0
 14193 ;;      Temps:          1       0       0       0       0       0       0
 14194 ;;      Totals:         1       0       0       0       0       0       0
 14195 ;;Total ram usage:        1 bytes
 14196 ;; Hardware stack levels used:    1
 14197 ;; Hardware stack levels required when called:    7
 14198 ;; This function calls:
 14199 ;;		_vscp_sendEvent
 14200 ;; This function is called by:
 14201 ;;		_vscp_handleProtocolEvent
 14202 ;; This function uses a non-reentrant model
 14203 ;;
 14204                           
 14205                           	psect	text60
 14206  004EF2                     __ptext60:
 14207                           	opt stack 0
 14208  004EF2                     _vscp_newNodeOnline:
 14209                           	opt stack 22
 14210                           
 14211                           ; BSR set to: 0
 14212                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14213                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14214                           
 14215                           ; BSR set to: 0
 14216                           ;incstack = 0
 14217                           ;incstack = 0
 14218  004EF2  C0BE  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14219  004EF6  0E0F               	movlw	15
 14220  004EF8  1644               	andwf	??_vscp_newNodeOnline,f,c
 14221  004EFA  0444               	decf	??_vscp_newNodeOnline,w,c
 14222  004EFC  E10E               	bnz	l1088
 14223                           
 14224                           ; BSR set to: 0
 14225  004EFE  51BC               	movf	_vscp_nickname& (0+255),w,b
 14226  004F00  EE20  F0C4         	lfsr	2,_vscp_imsg+6
 14227  004F04  62DF               	cpfseq	indf2,c
 14228  004F06  D009               	goto	l1088
 14229                           
 14230                           ; BSR set to: 0
 14231                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14232  004F08  0E80               	movlw	128
 14233  004F0A  6FCC               	movwf	_vscp_omsg& (0+255),b
 14234                           
 14235                           ; BSR set to: 0
 14236                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14237  004F0C  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
 14238                           
 14239                           ; BSR set to: 0
 14240                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14241  004F0E  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 14242  004F10  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 14243                           
 14244                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14245  004F12  0E03               	movlw	3
 14246  004F14  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
 14247                           
 14248                           ; BSR set to: 0
 14249                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14250  004F16  ECB7  F027         	call	_vscp_sendEvent	;wreg free
 14251  004F1A                     l1088:
 14252                           
 14253                           ; BSR set to: 0
 14254  004F1A  0012               	return	
 14255  004F1C                     __end_of_vscp_newNodeOnline:
 14256                           	opt stack 0
 14257                           tblptru	equ	0xFF8
 14258                           tblptrh	equ	0xFF7
 14259                           tblptrl	equ	0xFF6
 14260                           tablat	equ	0xFF5
 14261                           prodh	equ	0xFF4
 14262                           prodl	equ	0xFF3
 14263                           intcon	equ	0xFF2
 14264                           postinc0	equ	0xFEE
 14265                           wreg	equ	0xFE8
 14266                           indf1	equ	0xFE7
 14267                           postdec1	equ	0xFE5
 14268                           fsr1h	equ	0xFE2
 14269                           fsr1l	equ	0xFE1
 14270                           indf2	equ	0xFDF
 14271                           postinc2	equ	0xFDE
 14272                           postdec2	equ	0xFDD
 14273                           plusw2	equ	0xFDB
 14274                           fsr2h	equ	0xFDA
 14275                           fsr2l	equ	0xFD9
 14276                           status	equ	0xFD8
 14277                           
 14278 ;; *************** function _vscp_handleDropNickname *****************
 14279 ;; Defined at:
 14280 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;		None
 14283 ;; Auto vars:     Size  Location     Type
 14284 ;;  bytes           1   25[COMRAM] unsigned char 
 14285 ;; Return value:  Size  Location     Type
 14286 ;;		None               void
 14287 ;; Registers used:
 14288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14289 ;; Tracked objects:
 14290 ;;		On entry : F/0
 14291 ;;		On exit  : E/0
 14292 ;;		Unchanged: 0/0
 14293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14294 ;;      Params:         0       0       0       0       0       0       0
 14295 ;;      Locals:         1       0       0       0       0       0       0
 14296 ;;      Temps:          0       0       0       0       0       0       0
 14297 ;;      Totals:         1       0       0       0       0       0       0
 14298 ;;Total ram usage:        1 bytes
 14299 ;; Hardware stack levels used:    1
 14300 ;; Hardware stack levels required when called:    5
 14301 ;; This function calls:
 14302 ;;		_vscp_init
 14303 ;;		_vscp_writeNicknamePermanent
 14304 ;; This function is called by:
 14305 ;;		_vscp_handleProtocolEvent
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308                           
 14309                           	psect	text61
 14310  004E6C                     __ptext61:
 14311                           	opt stack 0
 14312  004E6C                     _vscp_handleDropNickname:
 14313                           	opt stack 24
 14314                           
 14315                           ; BSR set to: 0
 14316                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14317                           
 14318                           ; BSR set to: 0
 14319                           ;incstack = 0
 14320                           ;incstack = 0
 14321  004E6C  51BE               	movf	_vscp_imsg& (0+255),w,b
 14322  004E6E  0B0F               	andlw	15
 14323  004E70  6E1A               	movwf	vscp_handleDropNickname@bytes,c
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14327  004E72  501A               	movf	vscp_handleDropNickname@bytes,w,c
 14328  004E74  E012               	bz	l1084
 14329                           
 14330                           ; BSR set to: 0
 14331  004E76  51BC               	movf	_vscp_nickname& (0+255),w,b
 14332  004E78  EE20  F0C4         	lfsr	2,_vscp_imsg+6
 14333  004E7C  62DF               	cpfseq	indf2,c
 14334  004E7E  D00D               	goto	l1084
 14335                           
 14336                           ; BSR set to: 0
 14337                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14338  004E80  041A               	decf	vscp_handleDropNickname@bytes,w,c
 14339  004E82  E005               	bz	l1083
 14340                           
 14341                           ; BSR set to: 0
 14342  004E84  0E01               	movlw	1
 14343  004E86  641A               	cpfsgt	vscp_handleDropNickname@bytes,c
 14344  004E88  D008               	goto	l1084
 14345                           
 14346                           ; BSR set to: 0
 14347  004E8A  67C5               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14348  004E8C  D006               	goto	l1084
 14349  004E8E                     l1083:
 14350                           
 14351                           ; BSR set to: 0
 14352                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14353  004E8E  69BC               	setf	_vscp_nickname& (0+255),b
 14354                           
 14355                           ; BSR set to: 0
 14356                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14357  004E90  0EFF               	movlw	255
 14358  004E92  ECDC  F028         	call	_vscp_writeNicknamePermanent
 14359                           
 14360                           ;vscp_firmware.c: 481: vscp_init();
 14361  004E96  EC49  F026         	call	_vscp_init	;wreg free
 14362  004E9A                     l1084:
 14363  004E9A  0012               	return	
 14364  004E9C                     __end_of_vscp_handleDropNickname:
 14365                           	opt stack 0
 14366                           tblptru	equ	0xFF8
 14367                           tblptrh	equ	0xFF7
 14368                           tblptrl	equ	0xFF6
 14369                           tablat	equ	0xFF5
 14370                           prodh	equ	0xFF4
 14371                           prodl	equ	0xFF3
 14372                           intcon	equ	0xFF2
 14373                           postinc0	equ	0xFEE
 14374                           wreg	equ	0xFE8
 14375                           indf1	equ	0xFE7
 14376                           postdec1	equ	0xFE5
 14377                           fsr1h	equ	0xFE2
 14378                           fsr1l	equ	0xFE1
 14379                           indf2	equ	0xFDF
 14380                           postinc2	equ	0xFDE
 14381                           postdec2	equ	0xFDD
 14382                           plusw2	equ	0xFDB
 14383                           fsr2h	equ	0xFDA
 14384                           fsr2l	equ	0xFD9
 14385                           status	equ	0xFD8
 14386                           
 14387 ;; *************** function _vscp_init *****************
 14388 ;; Defined at:
 14389 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14390 ;; Parameters:    Size  Location     Type
 14391 ;;		None
 14392 ;; Auto vars:     Size  Location     Type
 14393 ;;		None
 14394 ;; Return value:  Size  Location     Type
 14395 ;;		None               void
 14396 ;; Registers used:
 14397 ;;		wreg, status,2, cstack
 14398 ;; Tracked objects:
 14399 ;;		On entry : 0/0
 14400 ;;		On exit  : F/1
 14401 ;;		Unchanged: 0/0
 14402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14403 ;;      Params:         0       0       0       0       0       0       0
 14404 ;;      Locals:         0       0       0       0       0       0       0
 14405 ;;      Temps:          0       0       0       0       0       0       0
 14406 ;;      Totals:         0       0       0       0       0       0       0
 14407 ;;Total ram usage:        0 bytes
 14408 ;; Hardware stack levels used:    1
 14409 ;; Hardware stack levels required when called:    4
 14410 ;; This function calls:
 14411 ;;		_vscp_readNicknamePermanent
 14412 ;; This function is called by:
 14413 ;;		_main
 14414 ;;		_vscp_handleDropNickname
 14415 ;;		_vscp_handleProtocolEvent
 14416 ;; This function uses a non-reentrant model
 14417 ;;
 14418                           
 14419                           	psect	text62
 14420  004C92                     __ptext62:
 14421                           	opt stack 0
 14422  004C92                     _vscp_init:
 14423                           	opt stack 24
 14424                           
 14425                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14426                           
 14427                           ;incstack = 0
 14428                           ;incstack = 0
 14429  004C92  0E02               	movlw	2
 14430  004C94  6E50               	movwf	_vscp_initledfunc,c
 14431                           
 14432                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14433  004C96  EC02  F029         	call	_vscp_readNicknamePermanent	;wreg free
 14434  004C9A  0100               	movlb	0	; () banked
 14435  004C9C  6FBC               	movwf	_vscp_nickname& (0+255),b
 14436                           
 14437                           ; BSR set to: 0
 14438                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14439  004C9E  67BC               	tstfsz	_vscp_nickname& (0+255),b
 14440  004CA0  D001               	goto	l1025
 14441                           
 14442                           ; BSR set to: 0
 14443  004CA2  69BC               	setf	_vscp_nickname& (0+255),b
 14444  004CA4                     l1025:
 14445                           
 14446                           ; BSR set to: 0
 14447                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14448  004CA4  6BBE               	clrf	_vscp_imsg& (0+255),b
 14449                           
 14450                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14451  004CA6  6BBF               	clrf	(_vscp_imsg+1)& (0+255),b
 14452                           
 14453                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14454  004CA8  6BC0               	clrf	(_vscp_imsg+2)& (0+255),b
 14455  004CAA  6BC1               	clrf	(_vscp_imsg+3)& (0+255),b
 14456                           
 14457                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14458  004CAC  6BC2               	clrf	(_vscp_imsg+4)& (0+255),b
 14459                           
 14460                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14461  004CAE  6BCC               	clrf	_vscp_omsg& (0+255),b
 14462                           
 14463                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14464  004CB0  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
 14465                           
 14466                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14467  004CB2  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 14468  004CB4  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 14469                           
 14470                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14471  004CB6  6BD0               	clrf	(_vscp_omsg+4)& (0+255),b
 14472                           
 14473                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14474  004CB8  6A4D               	clrf	_vscp_alarmstatus,c
 14475                           
 14476                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14477  004CBA  6A51               	clrf	_vscp_probe_address,c
 14478                           
 14479                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14480  004CBC  6BBD               	clrf	_vscp_node_state& (0+255),b
 14481                           
 14482                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14483  004CBE  0101               	movlb	1	; () banked
 14484  004CC0  6B23               	clrf	_vscp_node_substate& (0+255),b
 14485                           
 14486                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14487  004CC2  6B24               	clrf	_vscp_probe_cnt& (0+255),b
 14488                           
 14489                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14490  004CC4  6A46               	clrf	_vscp_page_select,c
 14491  004CC6  6A47               	clrf	_vscp_page_select+1,c
 14492                           
 14493                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14494  004CC8  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 14495  004CCA  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14496                           
 14497                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14498  004CCC  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14499  004CCE  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14500                           
 14501                           ;vscp_firmware.c: 155: vscp_second = 0;
 14502  004CD0  6B25               	clrf	_vscp_second& (0+255),b
 14503                           
 14504                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14505  004CD2  6B22               	clrf	_vscp_minute& (0+255),b
 14506                           
 14507                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14508  004CD4  6B21               	clrf	_vscp_hour& (0+255),b
 14509                           
 14510                           ; BSR set to: 1
 14511  004CD6  0012               	return	
 14512  004CD8                     __end_of_vscp_init:
 14513                           	opt stack 0
 14514                           tblptru	equ	0xFF8
 14515                           tblptrh	equ	0xFF7
 14516                           tblptrl	equ	0xFF6
 14517                           tablat	equ	0xFF5
 14518                           prodh	equ	0xFF4
 14519                           prodl	equ	0xFF3
 14520                           intcon	equ	0xFF2
 14521                           postinc0	equ	0xFEE
 14522                           wreg	equ	0xFE8
 14523                           indf1	equ	0xFE7
 14524                           postdec1	equ	0xFE5
 14525                           fsr1h	equ	0xFE2
 14526                           fsr1l	equ	0xFE1
 14527                           indf2	equ	0xFDF
 14528                           postinc2	equ	0xFDE
 14529                           postdec2	equ	0xFDD
 14530                           plusw2	equ	0xFDB
 14531                           fsr2h	equ	0xFDA
 14532                           fsr2l	equ	0xFD9
 14533                           status	equ	0xFD8
 14534                           
 14535 ;; *************** function _vscp_readNicknamePermanent *****************
 14536 ;; Defined at:
 14537 ;;		line 2758 in file "../main.c"
 14538 ;; Parameters:    Size  Location     Type
 14539 ;;		None
 14540 ;; Auto vars:     Size  Location     Type
 14541 ;;		None
 14542 ;; Return value:  Size  Location     Type
 14543 ;;                  1    wreg      unsigned char 
 14544 ;; Registers used:
 14545 ;;		wreg, status,2, cstack
 14546 ;; Tracked objects:
 14547 ;;		On entry : 0/0
 14548 ;;		On exit  : 0/0
 14549 ;;		Unchanged: 0/0
 14550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14551 ;;      Params:         0       0       0       0       0       0       0
 14552 ;;      Locals:         0       0       0       0       0       0       0
 14553 ;;      Temps:          0       0       0       0       0       0       0
 14554 ;;      Totals:         0       0       0       0       0       0       0
 14555 ;;Total ram usage:        0 bytes
 14556 ;; Hardware stack levels used:    1
 14557 ;; Hardware stack levels required when called:    3
 14558 ;; This function calls:
 14559 ;;		_readEEPROM
 14560 ;; This function is called by:
 14561 ;;		_vscp_init
 14562 ;; This function uses a non-reentrant model
 14563 ;;
 14564                           
 14565                           	psect	text63
 14566  005204                     __ptext63:
 14567                           	opt stack 0
 14568  005204                     _vscp_readNicknamePermanent:
 14569                           	opt stack 24
 14570                           
 14571                           ;main.c: 2759: return readEEPROM( 0x01 );
 14572                           
 14573                           ; BSR set to: 1
 14574                           ;incstack = 0
 14575                           ;incstack = 0
 14576  005204  6A17               	clrf	?_readEEPROM+1,c
 14577  005206  0E01               	movlw	1
 14578  005208  6E16               	movwf	?_readEEPROM,c
 14579  00520A  EFC0  F028         	goto	_readEEPROM	;wreg free
 14580  00520E                     __end_of_vscp_readNicknamePermanent:
 14581                           	opt stack 0
 14582                           tblptru	equ	0xFF8
 14583                           tblptrh	equ	0xFF7
 14584                           tblptrl	equ	0xFF6
 14585                           tablat	equ	0xFF5
 14586                           prodh	equ	0xFF4
 14587                           prodl	equ	0xFF3
 14588                           intcon	equ	0xFF2
 14589                           postinc0	equ	0xFEE
 14590                           wreg	equ	0xFE8
 14591                           indf1	equ	0xFE7
 14592                           postdec1	equ	0xFE5
 14593                           fsr1h	equ	0xFE2
 14594                           fsr1l	equ	0xFE1
 14595                           indf2	equ	0xFDF
 14596                           postinc2	equ	0xFDE
 14597                           postdec2	equ	0xFDD
 14598                           plusw2	equ	0xFDB
 14599                           fsr2h	equ	0xFDA
 14600                           fsr2l	equ	0xFD9
 14601                           status	equ	0xFD8
 14602                           
 14603 ;; *************** function _readEEPROM *****************
 14604 ;; Defined at:
 14605 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 14606 ;; Parameters:    Size  Location     Type
 14607 ;;  address         2   21[COMRAM] unsigned short 
 14608 ;; Auto vars:     Size  Location     Type
 14609 ;;  data            1   24[COMRAM] unsigned char 
 14610 ;; Return value:  Size  Location     Type
 14611 ;;                  1    wreg      unsigned char 
 14612 ;; Registers used:
 14613 ;;		wreg, status,2
 14614 ;; Tracked objects:
 14615 ;;		On entry : 0/0
 14616 ;;		On exit  : 0/0
 14617 ;;		Unchanged: 0/0
 14618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14619 ;;      Params:         2       0       0       0       0       0       0
 14620 ;;      Locals:         2       0       0       0       0       0       0
 14621 ;;      Temps:          0       0       0       0       0       0       0
 14622 ;;      Totals:         4       0       0       0       0       0       0
 14623 ;;Total ram usage:        4 bytes
 14624 ;; Hardware stack levels used:    1
 14625 ;; Hardware stack levels required when called:    2
 14626 ;; This function calls:
 14627 ;;		Nothing
 14628 ;; This function is called by:
 14629 ;;		_doWork
 14630 ;;		_doOneSecondWork
 14631 ;;		_sendTempEvent
 14632 ;;		_getCalibrationValue
 14633 ;;		_writeCoeffs2Ram
 14634 ;;		_handle_sync
 14635 ;;		_vscp_readAppReg
 14636 ;;		_vscp_writeAppReg
 14637 ;;		_vscp_getGUID
 14638 ;;		_vscp_getUserID
 14639 ;;		_vscp_getManufacturerId
 14640 ;;		_vscp_getZone
 14641 ;;		_vscp_getSubzone
 14642 ;;		_vscp_readNicknamePermanent
 14643 ;;		_vscp_getSegmentCRC
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           	psect	text64
 14648  005180                     __ptext64:
 14649                           	opt stack 0
 14650  005180                     _readEEPROM:
 14651                           	opt stack 26
 14652                           
 14653                           ;eeprom.c: 95: uint8_t data;
 14654                           ;eeprom.c: 100: EEADR = address & 0xff;
 14655                           
 14656                           ;incstack = 0
 14657                           ;incstack = 0
 14658  005180  C016  FFA9         	movff	readEEPROM@address,4009	;volatile
 14659                           
 14660                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 14661  005184  9EA6               	bcf	4006,7,c	;volatile
 14662                           
 14663                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 14664  005186  9CA6               	bcf	4006,6,c	;volatile
 14665                           
 14666                           ;eeprom.c: 103: EECON1bits.RD = 1;
 14667  005188  80A6               	bsf	4006,0,c	;volatile
 14668  00518A  F000               	nop		;# 
 14669                           
 14670                           ;eeprom.c: 105: data = EEDATA;
 14671  00518C  CFA8 F019          	movff	4008,readEEPROM@data	;volatile
 14672                           
 14673                           ;eeprom.c: 107: return data;
 14674  005190  5019               	movf	readEEPROM@data,w,c
 14675  005192  0012               	return	
 14676  005194                     __end_of_readEEPROM:
 14677                           	opt stack 0
 14678                           tblptru	equ	0xFF8
 14679                           tblptrh	equ	0xFF7
 14680                           tblptrl	equ	0xFF6
 14681                           tablat	equ	0xFF5
 14682                           prodh	equ	0xFF4
 14683                           prodl	equ	0xFF3
 14684                           intcon	equ	0xFF2
 14685                           postinc0	equ	0xFEE
 14686                           wreg	equ	0xFE8
 14687                           indf1	equ	0xFE7
 14688                           postdec1	equ	0xFE5
 14689                           fsr1h	equ	0xFE2
 14690                           fsr1l	equ	0xFE1
 14691                           indf2	equ	0xFDF
 14692                           postinc2	equ	0xFDE
 14693                           postdec2	equ	0xFDD
 14694                           plusw2	equ	0xFDB
 14695                           fsr2h	equ	0xFDA
 14696                           fsr2l	equ	0xFD9
 14697                           status	equ	0xFD8
 14698                           
 14699 ;; *************** function _vscp_handleSetNickname *****************
 14700 ;; Defined at:
 14701 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14702 ;; Parameters:    Size  Location     Type
 14703 ;;		None
 14704 ;; Auto vars:     Size  Location     Type
 14705 ;;		None
 14706 ;; Return value:  Size  Location     Type
 14707 ;;		None               void
 14708 ;; Registers used:
 14709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14710 ;; Tracked objects:
 14711 ;;		On entry : F/0
 14712 ;;		On exit  : 0/0
 14713 ;;		Unchanged: 0/0
 14714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14715 ;;      Params:         0       0       0       0       0       0       0
 14716 ;;      Locals:         0       0       0       0       0       0       0
 14717 ;;      Temps:          0       0       0       0       0       0       0
 14718 ;;      Totals:         0       0       0       0       0       0       0
 14719 ;;Total ram usage:        0 bytes
 14720 ;; Hardware stack levels used:    1
 14721 ;; Hardware stack levels required when called:    4
 14722 ;; This function calls:
 14723 ;;		_vscp_writeNicknamePermanent
 14724 ;;		_vscp_setSegmentCRC
 14725 ;; This function is called by:
 14726 ;;		_vscp_handleProtocolEvent
 14727 ;; This function uses a non-reentrant model
 14728 ;;
 14729                           
 14730                           	psect	text65
 14731  005006                     __ptext65:
 14732                           	opt stack 0
 14733  005006                     _vscp_handleSetNickname:
 14734                           	opt stack 25
 14735                           
 14736                           ; BSR set to: 0
 14737                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 14738                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14739                           
 14740                           ;incstack = 0
 14741                           ;incstack = 0
 14742  005006  51BE               	movf	_vscp_imsg& (0+255),w,b
 14743  005008  0B0F               	andlw	15
 14744  00500A  0A02               	xorlw	2
 14745  00500C  E10D               	bnz	l1077
 14746                           
 14747                           ; BSR set to: 0
 14748  00500E  51BC               	movf	_vscp_nickname& (0+255),w,b
 14749  005010  EE20  F0C4         	lfsr	2,_vscp_imsg+6
 14750  005014  62DF               	cpfseq	indf2,c
 14751  005016  D008               	goto	l1077
 14752                           
 14753                           ; BSR set to: 0
 14754                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 14755  005018  C0C5  F0BC         	movff	_vscp_imsg+7,_vscp_nickname
 14756                           
 14757                           ; BSR set to: 0
 14758                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 14759  00501C  51BC               	movf	_vscp_nickname& (0+255),w,b
 14760  00501E  ECDC  F028         	call	_vscp_writeNicknamePermanent
 14761                           
 14762                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 14763  005022  0E40               	movlw	64
 14764  005024  ECD3  F028         	call	_vscp_setSegmentCRC
 14765  005028                     l1077:
 14766  005028  0012               	return	
 14767  00502A                     __end_of_vscp_handleSetNickname:
 14768                           	opt stack 0
 14769                           tblptru	equ	0xFF8
 14770                           tblptrh	equ	0xFF7
 14771                           tblptrl	equ	0xFF6
 14772                           tablat	equ	0xFF5
 14773                           prodh	equ	0xFF4
 14774                           prodl	equ	0xFF3
 14775                           intcon	equ	0xFF2
 14776                           postinc0	equ	0xFEE
 14777                           wreg	equ	0xFE8
 14778                           indf1	equ	0xFE7
 14779                           postdec1	equ	0xFE5
 14780                           fsr1h	equ	0xFE2
 14781                           fsr1l	equ	0xFE1
 14782                           indf2	equ	0xFDF
 14783                           postinc2	equ	0xFDE
 14784                           postdec2	equ	0xFDD
 14785                           plusw2	equ	0xFDB
 14786                           fsr2h	equ	0xFDA
 14787                           fsr2l	equ	0xFD9
 14788                           status	equ	0xFD8
 14789                           
 14790 ;; *************** function _vscp_handleHeartbeat *****************
 14791 ;; Defined at:
 14792 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 14793 ;; Parameters:    Size  Location     Type
 14794 ;;		None
 14795 ;; Auto vars:     Size  Location     Type
 14796 ;;		None
 14797 ;; Return value:  Size  Location     Type
 14798 ;;		None               void
 14799 ;; Registers used:
 14800 ;;		wreg, status,2, status,0, cstack
 14801 ;; Tracked objects:
 14802 ;;		On entry : F/0
 14803 ;;		On exit  : 0/0
 14804 ;;		Unchanged: 0/0
 14805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14806 ;;      Params:         0       0       0       0       0       0       0
 14807 ;;      Locals:         0       0       0       0       0       0       0
 14808 ;;      Temps:          0       0       0       0       0       0       0
 14809 ;;      Totals:         0       0       0       0       0       0       0
 14810 ;;Total ram usage:        0 bytes
 14811 ;; Hardware stack levels used:    1
 14812 ;; Hardware stack levels required when called:    4
 14813 ;; This function calls:
 14814 ;;		_vscp_writeNicknamePermanent
 14815 ;;		_vscp_getSegmentCRC
 14816 ;;		_vscp_setSegmentCRC
 14817 ;; This function is called by:
 14818 ;;		_vscp_handleProtocolEvent
 14819 ;; This function uses a non-reentrant model
 14820 ;;
 14821                           
 14822                           	psect	text66
 14823  004D1A                     __ptext66:
 14824                           	opt stack 0
 14825  004D1A                     _vscp_handleHeartbeat:
 14826                           	opt stack 25
 14827                           
 14828                           ; BSR set to: 0
 14829                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 14830                           
 14831                           ;incstack = 0
 14832                           ;incstack = 0
 14833  004D1A  EC07  F029         	call	_vscp_getSegmentCRC	;wreg free
 14834  004D1E  0900               	iorlw	0
 14835  004D20  E116               	bnz	l10744
 14836                           
 14837                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14838                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14839  004D22  0100               	movlb	0	; () banked
 14840  004D24  51BE               	movf	_vscp_imsg& (0+255),w,b
 14841  004D26  0B0F               	andlw	15
 14842  004D28  0A05               	xorlw	5
 14843  004D2A  E115               	bnz	l1073
 14844                           
 14845                           ; BSR set to: 0
 14846  004D2C  EC07  F029         	call	_vscp_getSegmentCRC	;wreg free
 14847  004D30  0100               	movlb	0	; () banked
 14848  004D32  19C4               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14849  004D34  E010               	bz	l1073
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14853  004D36  51C4               	movf	(_vscp_imsg+6)& (0+255),w,b
 14854  004D38  ECD3  F028         	call	_vscp_setSegmentCRC
 14855                           
 14856                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 14857  004D3C  0100               	movlb	0	; () banked
 14858  004D3E  69BC               	setf	_vscp_nickname& (0+255),b
 14859                           
 14860                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 14861  004D40  0EFF               	movlw	255
 14862  004D42  ECDC  F028         	call	_vscp_writeNicknamePermanent
 14863                           
 14864                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 14865  004D46  0E01               	movlw	1
 14866  004D48  0100               	movlb	0	; () banked
 14867  004D4A  6FBD               	movwf	_vscp_node_state& (0+255),b
 14868  004D4C  D004               	goto	l1073
 14869  004D4E                     l10744:
 14870                           
 14871                           ;vscp_firmware.c: 411: else {
 14872                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14873  004D4E  0100               	movlb	0	; () banked
 14874  004D50  51C4               	movf	(_vscp_imsg+6)& (0+255),w,b
 14875  004D52  ECD3  F028         	call	_vscp_setSegmentCRC
 14876  004D56                     l1073:
 14877  004D56  0012               	return	
 14878  004D58                     __end_of_vscp_handleHeartbeat:
 14879                           	opt stack 0
 14880                           tblptru	equ	0xFF8
 14881                           tblptrh	equ	0xFF7
 14882                           tblptrl	equ	0xFF6
 14883                           tablat	equ	0xFF5
 14884                           prodh	equ	0xFF4
 14885                           prodl	equ	0xFF3
 14886                           intcon	equ	0xFF2
 14887                           postinc0	equ	0xFEE
 14888                           wreg	equ	0xFE8
 14889                           indf1	equ	0xFE7
 14890                           postdec1	equ	0xFE5
 14891                           fsr1h	equ	0xFE2
 14892                           fsr1l	equ	0xFE1
 14893                           indf2	equ	0xFDF
 14894                           postinc2	equ	0xFDE
 14895                           postdec2	equ	0xFDD
 14896                           plusw2	equ	0xFDB
 14897                           fsr2h	equ	0xFDA
 14898                           fsr2l	equ	0xFD9
 14899                           status	equ	0xFD8
 14900                           
 14901 ;; *************** function _vscp_goBootloaderMode *****************
 14902 ;; Defined at:
 14903 ;;		line 2741 in file "../main.c"
 14904 ;; Parameters:    Size  Location     Type
 14905 ;;  algorithm       1    wreg     unsigned char 
 14906 ;; Auto vars:     Size  Location     Type
 14907 ;;  algorithm       1   16[COMRAM] unsigned char 
 14908 ;; Return value:  Size  Location     Type
 14909 ;;		None               void
 14910 ;; Registers used:
 14911 ;;		wreg, status,2, status,0, cstack
 14912 ;; Tracked objects:
 14913 ;;		On entry : F/0
 14914 ;;		On exit  : 0/0
 14915 ;;		Unchanged: 0/0
 14916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14917 ;;      Params:         0       0       0       0       0       0       0
 14918 ;;      Locals:         1       0       0       0       0       0       0
 14919 ;;      Temps:          0       0       0       0       0       0       0
 14920 ;;      Totals:         1       0       0       0       0       0       0
 14921 ;;Total ram usage:        1 bytes
 14922 ;; Hardware stack levels used:    1
 14923 ;; Hardware stack levels required when called:    3
 14924 ;; This function calls:
 14925 ;;		_writeEEPROM
 14926 ;; This function is called by:
 14927 ;;		_vscp_handleProtocolEvent
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           	psect	text67
 14932  00512C                     __ptext67:
 14933                           	opt stack 0
 14934  00512C                     _vscp_goBootloaderMode:
 14935                           	opt stack 26
 14936                           
 14937                           ;incstack = 0
 14938                           ;incstack = 0
 14939                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14940  00512C  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;main.c: 2742: if ( 0x01 != algorithm ) return;
 14944  005130  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14945  005132  E107               	bnz	l588
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;main.c: 2746: writeEEPROM(0x00, 0xff);
 14949  005134  6A0F               	clrf	?_writeEEPROM+1,c
 14950  005136  6A0E               	clrf	?_writeEEPROM,c
 14951  005138  0EFF               	movlw	255
 14952  00513A  6810               	setf	?_writeEEPROM+2,c
 14953  00513C  ECDE  F027         	call	_writeEEPROM	;wreg free
 14954  005140  00FF               	reset		;# 
 14955  005142                     l588:
 14956  005142  0012               	return	
 14957  005144                     __end_of_vscp_goBootloaderMode:
 14958                           	opt stack 0
 14959                           tblptru	equ	0xFF8
 14960                           tblptrh	equ	0xFF7
 14961                           tblptrl	equ	0xFF6
 14962                           tablat	equ	0xFF5
 14963                           prodh	equ	0xFF4
 14964                           prodl	equ	0xFF3
 14965                           intcon	equ	0xFF2
 14966                           postinc0	equ	0xFEE
 14967                           wreg	equ	0xFE8
 14968                           indf1	equ	0xFE7
 14969                           postdec1	equ	0xFE5
 14970                           fsr1h	equ	0xFE2
 14971                           fsr1l	equ	0xFE1
 14972                           indf2	equ	0xFDF
 14973                           postinc2	equ	0xFDE
 14974                           postdec2	equ	0xFDD
 14975                           plusw2	equ	0xFDB
 14976                           fsr2h	equ	0xFDA
 14977                           fsr2l	equ	0xFD9
 14978                           status	equ	0xFD8
 14979                           
 14980 ;; *************** function _vscp_getMatrixInfo *****************
 14981 ;; Defined at:
 14982 ;;		line 2676 in file "../main.c"
 14983 ;; Parameters:    Size  Location     Type
 14984 ;;  pData           1    wreg     PTR unsigned char 
 14985 ;;		 -> vscp_omsg(13), 
 14986 ;; Auto vars:     Size  Location     Type
 14987 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14988 ;;		 -> vscp_omsg(13), 
 14989 ;;  i               1   14[COMRAM] unsigned char 
 14990 ;; Return value:  Size  Location     Type
 14991 ;;		None               void
 14992 ;; Registers used:
 14993 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14994 ;; Tracked objects:
 14995 ;;		On entry : F/0
 14996 ;;		On exit  : F/0
 14997 ;;		Unchanged: F/0
 14998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14999 ;;      Params:         0       0       0       0       0       0       0
 15000 ;;      Locals:         2       0       0       0       0       0       0
 15001 ;;      Temps:          0       0       0       0       0       0       0
 15002 ;;      Totals:         2       0       0       0       0       0       0
 15003 ;;Total ram usage:        2 bytes
 15004 ;; Hardware stack levels used:    1
 15005 ;; Hardware stack levels required when called:    2
 15006 ;; This function calls:
 15007 ;;		Nothing
 15008 ;; This function is called by:
 15009 ;;		_vscp_handleProtocolEvent
 15010 ;; This function uses a non-reentrant model
 15011 ;;
 15012                           
 15013                           	psect	text68
 15014  0050CA                     __ptext68:
 15015                           	opt stack 0
 15016  0050CA                     _vscp_getMatrixInfo:
 15017                           	opt stack 27
 15018                           
 15019                           ;incstack = 0
 15020                           ;incstack = 0
 15021                           ;vscp_getMatrixInfo@pData stored from wreg
 15022  0050CA  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;main.c: 2677: uint8_t i;
 15026                           ;main.c: 2681: for (i = 0; i < 8; i++) {
 15027  0050CE  6A0F               	clrf	vscp_getMatrixInfo@i,c
 15028  0050D0                     l7714:
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;main.c: 2682: pData[ i ] = 0;
 15032  0050D0  500E               	movf	vscp_getMatrixInfo@pData,w,c
 15033  0050D2  240F               	addwf	vscp_getMatrixInfo@i,w,c
 15034  0050D4  6ED9               	movwf	fsr2l,c
 15035  0050D6  6ADA               	clrf	fsr2h,c
 15036  0050D8  6ADF               	clrf	indf2,c
 15037                           
 15038                           ; BSR set to: 0
 15039  0050DA  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 15040                           
 15041                           ; BSR set to: 0
 15042  0050DC  0E07               	movlw	7
 15043  0050DE  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 15044  0050E0  D7F7               	goto	l7714
 15045                           
 15046                           ; BSR set to: 0
 15047  0050E2  0C07               	retlw	7
 15048  0050E4                     __end_of_vscp_getMatrixInfo:
 15049                           	opt stack 0
 15050                           tblptru	equ	0xFF8
 15051                           tblptrh	equ	0xFF7
 15052                           tblptrl	equ	0xFF6
 15053                           tablat	equ	0xFF5
 15054                           prodh	equ	0xFF4
 15055                           prodl	equ	0xFF3
 15056                           intcon	equ	0xFF2
 15057                           postinc0	equ	0xFEE
 15058                           wreg	equ	0xFE8
 15059                           indf1	equ	0xFE7
 15060                           postdec1	equ	0xFE5
 15061                           fsr1h	equ	0xFE2
 15062                           fsr1l	equ	0xFE1
 15063                           indf2	equ	0xFDF
 15064                           postinc2	equ	0xFDE
 15065                           postdec2	equ	0xFDD
 15066                           plusw2	equ	0xFDB
 15067                           fsr2h	equ	0xFDA
 15068                           fsr2l	equ	0xFD9
 15069                           status	equ	0xFD8
 15070                           
 15071 ;; *************** function _vscp_handleProbeState *****************
 15072 ;; Defined at:
 15073 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 15074 ;; Parameters:    Size  Location     Type
 15075 ;;		None
 15076 ;; Auto vars:     Size  Location     Type
 15077 ;;		None
 15078 ;; Return value:  Size  Location     Type
 15079 ;;		None               void
 15080 ;; Registers used:
 15081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15082 ;; Tracked objects:
 15083 ;;		On entry : 0/0
 15084 ;;		On exit  : F/0
 15085 ;;		Unchanged: 0/0
 15086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15087 ;;      Params:         0       0       0       0       0       0       0
 15088 ;;      Locals:         0       0       0       0       0       0       0
 15089 ;;      Temps:          0       0       0       0       0       0       0
 15090 ;;      Totals:         0       0       0       0       0       0       0
 15091 ;;Total ram usage:        0 bytes
 15092 ;; Hardware stack levels used:    1
 15093 ;; Hardware stack levels required when called:    8
 15094 ;; This function calls:
 15095 ;;		_vscp_goActiveState
 15096 ;;		_vscp_sendEvent
 15097 ;;		_vscp_writeNicknamePermanent
 15098 ;;		_vscp_setSegmentCRC
 15099 ;; This function is called by:
 15100 ;;		_main
 15101 ;; This function uses a non-reentrant model
 15102 ;;
 15103                           
 15104                           	psect	text69
 15105  003F52                     __ptext69:
 15106                           	opt stack 0
 15107  003F52                     _vscp_handleProbeState:
 15108                           	opt stack 22
 15109                           
 15110                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;incstack = 0
 15114                           ;incstack = 0
 15115  003F52  D05D               	goto	l9268
 15116  003F54                     l9198:
 15117                           
 15118                           ; BSR set to: 1
 15119                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 15120  003F54  2851               	incf	_vscp_probe_address,w,c
 15121  003F56  E013               	bz	l9214
 15122                           
 15123                           ; BSR set to: 1
 15124                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 15125  003F58  0E81               	movlw	129
 15126  003F5A  0100               	movlb	0	; () banked
 15127  003F5C  6FCC               	movwf	_vscp_omsg& (0+255),b
 15128                           
 15129                           ; BSR set to: 0
 15130                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 15131  003F5E  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
 15132                           
 15133                           ; BSR set to: 0
 15134                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 15135  003F60  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 15136  003F62  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 15137                           
 15138                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 15139  003F64  0E02               	movlw	2
 15140  003F66  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
 15141                           
 15142                           ; BSR set to: 0
 15143                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15144  003F68  C051  F0D1         	movff	_vscp_probe_address,_vscp_omsg+5
 15145                           
 15146                           ; BSR set to: 0
 15147                           ;vscp_firmware.c: 216: vscp_sendEvent();
 15148  003F6C  ECB7  F027         	call	_vscp_sendEvent	;wreg free
 15149                           
 15150                           ; BSR set to: 0
 15151                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 15152  003F70  0E01               	movlw	1
 15153  003F72  0101               	movlb	1	; () banked
 15154  003F74  6F23               	movwf	_vscp_node_substate& (0+255),b
 15155  003F76                     l9212:
 15156                           
 15157                           ;vscp_firmware.c: 219: vscp_timer = 0;
 15158  003F76  0101               	movlb	1	; () banked
 15159  003F78  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 15160  003F7A  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15161                           
 15162                           ;vscp_firmware.c: 221: }
 15163  003F7C  D04F               	goto	l1040
 15164  003F7E                     l9214:
 15165                           
 15166                           ; BSR set to: 1
 15167                           ;vscp_firmware.c: 222: else {
 15168                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 15169  003F7E  0E04               	movlw	4
 15170  003F80  0100               	movlb	0	; () banked
 15171  003F82  6FBD               	movwf	_vscp_node_state& (0+255),b
 15172                           
 15173                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 15174  003F84  0E81               	movlw	129
 15175  003F86  6FCC               	movwf	_vscp_omsg& (0+255),b
 15176                           
 15177                           ; BSR set to: 0
 15178                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 15179  003F88  69D1               	setf	(_vscp_omsg+5)& (0+255),b
 15180                           
 15181                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 15182  003F8A  0E07               	movlw	7
 15183  003F8C  6FCD               	movwf	(_vscp_omsg+1)& (0+255),b
 15184                           
 15185                           ; BSR set to: 0
 15186                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 15187  003F8E  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 15188  003F90  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 15189                           
 15190                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 15191  003F92  0E03               	movlw	3
 15192  003F94  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
 15193                           
 15194                           ; BSR set to: 0
 15195                           ;vscp_firmware.c: 235: vscp_sendEvent();
 15196  003F96  ECB7  F027         	call	_vscp_sendEvent	;wreg free
 15197  003F9A  D040               	goto	l1040
 15198  003F9C                     l1041:
 15199                           
 15200                           ; BSR set to: 1
 15201                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 15202  003F9C  0100               	movlb	0	; () banked
 15203  003F9E  AFBE               	btfss	_vscp_imsg& (0+255),7,b
 15204  003FA0  D010               	goto	l9238
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 15208                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 15209  003FA2  51C1               	movf	(_vscp_imsg+3)& (0+255),w,b
 15210  003FA4  11C0               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15211  003FA6  E13A               	bnz	l1040
 15212                           
 15213                           ; BSR set to: 0
 15214  003FA8  51C2               	movf	(_vscp_imsg+4)& (0+255),w,b
 15215  003FAA  0A03               	xorlw	3
 15216  003FAC  E137               	bnz	l1040
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 15220  003FAE  6651               	tstfsz	_vscp_probe_address,c
 15221  003FB0  D003               	goto	l9232
 15222                           
 15223                           ; BSR set to: 0
 15224                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 15225  003FB2  0E02               	movlw	2
 15226  003FB4  6FBD               	movwf	_vscp_node_state& (0+255),b
 15227  003FB6  D7DF               	goto	l9212
 15228  003FB8                     l9232:
 15229                           
 15230                           ; BSR set to: 0
 15231                           ;vscp_firmware.c: 257: else {
 15232                           ;vscp_firmware.c: 260: vscp_probe_address++;
 15233  003FB8  2A51               	incf	_vscp_probe_address,f,c
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 15237  003FBA  0101               	movlb	1	; () banked
 15238  003FBC  6B23               	clrf	_vscp_node_substate& (0+255),b
 15239  003FBE                     l9236:
 15240                           
 15241                           ; BSR set to: 1
 15242                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 15243  003FBE  6B24               	clrf	_vscp_probe_cnt& (0+255),b
 15244  003FC0  D02D               	goto	l1040
 15245  003FC2                     l9238:
 15246                           
 15247                           ; BSR set to: 0
 15248                           ;vscp_firmware.c: 267: else {
 15249                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 15250  003FC2  0EE9               	movlw	233
 15251  003FC4  0101               	movlb	1	; () banked
 15252  003FC6  5D1E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15253  003FC8  0E03               	movlw	3
 15254  003FCA  591F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15255  003FCC  E327               	bnc	l1040
 15256                           
 15257                           ; BSR set to: 1
 15258                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15259  003FCE  2B24               	incf	_vscp_probe_cnt& (0+255),f,b
 15260                           
 15261                           ; BSR set to: 1
 15262                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15263  003FD0  0E02               	movlw	2
 15264  003FD2  6524               	cpfsgt	_vscp_probe_cnt& (0+255),b
 15265  003FD4  D01A               	goto	l1048
 15266                           
 15267                           ; BSR set to: 1
 15268                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15269  003FD6  6651               	tstfsz	_vscp_probe_address,c
 15270  003FD8  D005               	goto	l1049
 15271                           
 15272                           ; BSR set to: 1
 15273                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15274  003FDA  2A51               	incf	_vscp_probe_address,f,c
 15275                           
 15276                           ; BSR set to: 1
 15277                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15278  003FDC  6B23               	clrf	_vscp_node_substate& (0+255),b
 15279                           
 15280                           ; BSR set to: 1
 15281                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15282  003FDE  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 15283  003FE0  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15284  003FE2  D7ED               	goto	l9236
 15285  003FE4                     l1049:
 15286                           
 15287                           ; BSR set to: 1
 15288                           ;vscp_firmware.c: 285: else {
 15289                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15290  003FE4  C051  F0BC         	movff	_vscp_probe_address,_vscp_nickname
 15291                           
 15292                           ; BSR set to: 1
 15293                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15294  003FE8  0E03               	movlw	3
 15295  003FEA  0100               	movlb	0	; () banked
 15296  003FEC  6FBD               	movwf	_vscp_node_state& (0+255),b
 15297                           
 15298                           ; BSR set to: 0
 15299                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15300  003FEE  0101               	movlb	1	; () banked
 15301  003FF0  6B23               	clrf	_vscp_node_substate& (0+255),b
 15302                           
 15303                           ; BSR set to: 1
 15304                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15305  003FF2  0100               	movlb	0	; () banked
 15306  003FF4  51BC               	movf	_vscp_nickname& (0+255),w,b
 15307  003FF6  ECDC  F028         	call	_vscp_writeNicknamePermanent
 15308                           
 15309                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15310  003FFA  0E40               	movlw	64
 15311  003FFC  ECD3  F028         	call	_vscp_setSegmentCRC
 15312                           
 15313                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15314  004000  0101               	movlb	1	; () banked
 15315  004002  6B24               	clrf	_vscp_probe_cnt& (0+255),b
 15316                           
 15317                           ; BSR set to: 1
 15318                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15319  004004  EC49  F028         	call	_vscp_goActiveState	;wreg free
 15320  004008  D009               	goto	l1040
 15321  00400A                     l1048:
 15322                           
 15323                           ; BSR set to: 1
 15324                           ;vscp_firmware.c: 300: else {
 15325                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15326  00400A  6B23               	clrf	_vscp_node_substate& (0+255),b
 15327  00400C  D007               	goto	l1040
 15328  00400E                     l9268:
 15329  00400E  0101               	movlb	1	; () banked
 15330  004010  5123               	movf	_vscp_node_substate& (0+255),w,b
 15331                           
 15332                           ; Switch size 1, requested type "space"
 15333                           ; Number of cases is 3, Range of values is 0 to 2
 15334                           ; switch strategies available:
 15335                           ; Name         Instructions Cycles
 15336                           ; simple_byte           10     6 (average)
 15337                           ;	Chosen strategy is simple_byte
 15338  004012  E0A0               	bz	l9198
 15339  004014  0A01               	xorlw	1	; case 1
 15340  004016  E0C2               	bz	l1041
 15341  004018  0A03               	xorlw	3	; case 2
 15342  00401A  E1F7               	bnz	l1048
 15343  00401C                     l1040:
 15344                           
 15345                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15346  00401C  0100               	movlb	0	; () banked
 15347  00401E  6BBE               	clrf	_vscp_imsg& (0+255),b
 15348                           
 15349                           ; BSR set to: 0
 15350  004020  0012               	return	
 15351  004022                     __end_of_vscp_handleProbeState:
 15352                           	opt stack 0
 15353                           tblptru	equ	0xFF8
 15354                           tblptrh	equ	0xFF7
 15355                           tblptrl	equ	0xFF6
 15356                           tablat	equ	0xFF5
 15357                           prodh	equ	0xFF4
 15358                           prodl	equ	0xFF3
 15359                           intcon	equ	0xFF2
 15360                           postinc0	equ	0xFEE
 15361                           wreg	equ	0xFE8
 15362                           indf1	equ	0xFE7
 15363                           postdec1	equ	0xFE5
 15364                           fsr1h	equ	0xFE2
 15365                           fsr1l	equ	0xFE1
 15366                           indf2	equ	0xFDF
 15367                           postinc2	equ	0xFDE
 15368                           postdec2	equ	0xFDD
 15369                           plusw2	equ	0xFDB
 15370                           fsr2h	equ	0xFDA
 15371                           fsr2l	equ	0xFD9
 15372                           status	equ	0xFD8
 15373                           
 15374 ;; *************** function _vscp_goActiveState *****************
 15375 ;; Defined at:
 15376 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15377 ;; Parameters:    Size  Location     Type
 15378 ;;		None
 15379 ;; Auto vars:     Size  Location     Type
 15380 ;;		None
 15381 ;; Return value:  Size  Location     Type
 15382 ;;		None               void
 15383 ;; Registers used:
 15384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15385 ;; Tracked objects:
 15386 ;;		On entry : 0/0
 15387 ;;		On exit  : F/0
 15388 ;;		Unchanged: 0/0
 15389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15390 ;;      Params:         0       0       0       0       0       0       0
 15391 ;;      Locals:         0       0       0       0       0       0       0
 15392 ;;      Temps:          0       0       0       0       0       0       0
 15393 ;;      Totals:         0       0       0       0       0       0       0
 15394 ;;Total ram usage:        0 bytes
 15395 ;; Hardware stack levels used:    1
 15396 ;; Hardware stack levels required when called:    7
 15397 ;; This function calls:
 15398 ;;		_vscp_sendEvent
 15399 ;; This function is called by:
 15400 ;;		_main
 15401 ;;		_vscp_handleProbeState
 15402 ;; This function uses a non-reentrant model
 15403 ;;
 15404                           
 15405                           	psect	text70
 15406  005092                     __ptext70:
 15407                           	opt stack 0
 15408  005092                     _vscp_goActiveState:
 15409                           	opt stack 22
 15410                           
 15411                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15412                           
 15413                           ; BSR set to: 0
 15414                           ;incstack = 0
 15415                           ;incstack = 0
 15416  005092  0E81               	movlw	129
 15417  005094  0100               	movlb	0	; () banked
 15418  005096  6FCC               	movwf	_vscp_omsg& (0+255),b
 15419                           
 15420                           ; BSR set to: 0
 15421                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15422  005098  6BCD               	clrf	(_vscp_omsg+1)& (0+255),b
 15423                           
 15424                           ; BSR set to: 0
 15425                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15426  00509A  6BCE               	clrf	(_vscp_omsg+2)& (0+255),b
 15427  00509C  6BCF               	clrf	(_vscp_omsg+3)& (0+255),b
 15428                           
 15429                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15430  00509E  0E02               	movlw	2
 15431  0050A0  6FD0               	movwf	(_vscp_omsg+4)& (0+255),b
 15432                           
 15433                           ; BSR set to: 0
 15434                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15435  0050A2  C0BC  F0D1         	movff	_vscp_nickname,_vscp_omsg+5
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15439  0050A6  ECB7  F027         	call	_vscp_sendEvent	;wreg free
 15440                           
 15441                           ; BSR set to: 0
 15442                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15443  0050AA  0E01               	movlw	1
 15444  0050AC  6E50               	movwf	_vscp_initledfunc,c
 15445                           
 15446                           ; BSR set to: 0
 15447  0050AE  0C01               	retlw	1
 15448  0050B0                     __end_of_vscp_goActiveState:
 15449                           	opt stack 0
 15450                           tblptru	equ	0xFF8
 15451                           tblptrh	equ	0xFF7
 15452                           tblptrl	equ	0xFF6
 15453                           tablat	equ	0xFF5
 15454                           prodh	equ	0xFF4
 15455                           prodl	equ	0xFF3
 15456                           intcon	equ	0xFF2
 15457                           postinc0	equ	0xFEE
 15458                           wreg	equ	0xFE8
 15459                           indf1	equ	0xFE7
 15460                           postdec1	equ	0xFE5
 15461                           fsr1h	equ	0xFE2
 15462                           fsr1l	equ	0xFE1
 15463                           indf2	equ	0xFDF
 15464                           postinc2	equ	0xFDE
 15465                           postdec2	equ	0xFDD
 15466                           plusw2	equ	0xFDB
 15467                           fsr2h	equ	0xFDA
 15468                           fsr2l	equ	0xFD9
 15469                           status	equ	0xFD8
 15470                           
 15471 ;; *************** function _vscp_sendEvent *****************
 15472 ;; Defined at:
 15473 ;;		line 1287 in file "../../vscp_firmware/common/vscp_firmware.c"
 15474 ;; Parameters:    Size  Location     Type
 15475 ;;		None
 15476 ;; Auto vars:     Size  Location     Type
 15477 ;;  rv              1   66[COMRAM] unsigned char 
 15478 ;; Return value:  Size  Location     Type
 15479 ;;                  1    wreg      unsigned char 
 15480 ;; Registers used:
 15481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15482 ;; Tracked objects:
 15483 ;;		On entry : F/0
 15484 ;;		On exit  : F/0
 15485 ;;		Unchanged: 0/0
 15486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15487 ;;      Params:         0       0       0       0       0       0       0
 15488 ;;      Locals:         1       0       0       0       0       0       0
 15489 ;;      Temps:          0       0       0       0       0       0       0
 15490 ;;      Totals:         1       0       0       0       0       0       0
 15491 ;;Total ram usage:        1 bytes
 15492 ;; Hardware stack levels used:    1
 15493 ;; Hardware stack levels required when called:    6
 15494 ;; This function calls:
 15495 ;;		_sendVSCPFrame
 15496 ;; This function is called by:
 15497 ;;		_doOneSecondWork
 15498 ;;		_sendTempEvent
 15499 ;;		_vscp_handleProbeState
 15500 ;;		_vscp_goActiveState
 15501 ;;		_vscp_sendHeartBeat
 15502 ;;		_vscp_newNodeOnline
 15503 ;;		_vscp_handleProtocolEvent
 15504 ;; This function uses a non-reentrant model
 15505 ;;
 15506                           
 15507                           	psect	text71
 15508  004F6E                     __ptext71:
 15509                           	opt stack 0
 15510  004F6E                     _vscp_sendEvent:
 15511                           	opt stack 22
 15512                           
 15513                           ; BSR set to: 0
 15514                           ;vscp_firmware.c: 1295: vscp_errorcnt++;
 15515                           
 15516                           ; BSR set to: 0
 15517                           ;incstack = 0
 15518                           ;incstack = 0
 15519  004F6E  C0CE  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15520  004F72  C0CF  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15521  004F76  C0D0  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15522  004F7A  C0BC  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15523  004F7E  C0CD  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15524  004F82  51CC               	movf	_vscp_omsg& (0+255),w,b
 15525  004F84  0B0F               	andlw	15
 15526  004F86  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15527  004F88  0ED1               	movlw	low (_vscp_omsg+5)
 15528  004F8A  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15529  004F8C  EC8A  F021         	call	_sendVSCPFrame	;wreg free
 15530  004F90  6E43               	movwf	vscp_sendEvent@rv,c
 15531                           
 15532                           ; BSR set to: 0
 15533                           ;vscp_firmware.c: 1296: }
 15534                           ;vscp_firmware.c: 1298: return rv;
 15535  004F92  5043               	movf	vscp_sendEvent@rv,w,c
 15536                           
 15537                           ; BSR set to: 0
 15538  004F94  0012               	return	
 15539  004F96                     __end_of_vscp_sendEvent:
 15540                           	opt stack 0
 15541                           tblptru	equ	0xFF8
 15542                           tblptrh	equ	0xFF7
 15543                           tblptrl	equ	0xFF6
 15544                           tablat	equ	0xFF5
 15545                           prodh	equ	0xFF4
 15546                           prodl	equ	0xFF3
 15547                           intcon	equ	0xFF2
 15548                           postinc0	equ	0xFEE
 15549                           wreg	equ	0xFE8
 15550                           indf1	equ	0xFE7
 15551                           postdec1	equ	0xFE5
 15552                           fsr1h	equ	0xFE2
 15553                           fsr1l	equ	0xFE1
 15554                           indf2	equ	0xFDF
 15555                           postinc2	equ	0xFDE
 15556                           postdec2	equ	0xFDD
 15557                           plusw2	equ	0xFDB
 15558                           fsr2h	equ	0xFDA
 15559                           fsr2l	equ	0xFD9
 15560                           status	equ	0xFD8
 15561                           
 15562 ;; *************** function _sendVSCPFrame *****************
 15563 ;; Defined at:
 15564 ;;		line 2847 in file "../main.c"
 15565 ;; Parameters:    Size  Location     Type
 15566 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15567 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15568 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15569 ;;  priority        1    4[BANK0 ] unsigned char 
 15570 ;;  size            1    5[BANK0 ] unsigned char 
 15571 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15572 ;;		 -> vscp_omsg(13), 
 15573 ;; Auto vars:     Size  Location     Type
 15574 ;;  id              4   27[BANK0 ] unsigned long 
 15575 ;; Return value:  Size  Location     Type
 15576 ;;                  1    wreg      unsigned char 
 15577 ;; Registers used:
 15578 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15579 ;; Tracked objects:
 15580 ;;		On entry : F/0
 15581 ;;		On exit  : F/0
 15582 ;;		Unchanged: 0/0
 15583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15584 ;;      Params:         0       7       0       0       0       0       0
 15585 ;;      Locals:         0       4       0       0       0       0       0
 15586 ;;      Temps:          0      20       0       0       0       0       0
 15587 ;;      Totals:         0      31       0       0       0       0       0
 15588 ;;Total ram usage:       31 bytes
 15589 ;; Hardware stack levels used:    1
 15590 ;; Hardware stack levels required when called:    5
 15591 ;; This function calls:
 15592 ;;		_sendCANFrame
 15593 ;; This function is called by:
 15594 ;;		_vscp_sendEvent
 15595 ;; This function uses a non-reentrant model
 15596 ;;
 15597                           
 15598                           	psect	text72
 15599  004314                     __ptext72:
 15600                           	opt stack 0
 15601  004314                     _sendVSCPFrame:
 15602                           	opt stack 22
 15603                           
 15604                           ; BSR set to: 0
 15605                           ;main.c: 2848: uint32_t id = ((uint32_t) priority << 26) |
 15606                           ;main.c: 2849: ((uint32_t) vscpclass << 16) |
 15607                           ;main.c: 2850: ((uint32_t) vscptype << 8) |
 15608                           ;main.c: 2851: nodeid;
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;incstack = 0
 15612                           ;incstack = 0
 15613  004314  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15614  004318  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15615  00431A  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15616  00431C  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15617  00431E  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15618  004322  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15619  004326  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15620  00432A  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15621  00432C  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15622  00432E  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15623  004330  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15624  004332  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15625  004334  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15626  004336  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15627  004338  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15628  00433C  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15629  004340  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15630  004342  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15631  004344  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15632  004348  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15633  00434A  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15634  00434C  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15635  00434E  0E1A               	movlw	26
 15636  004350                     u8855:
 15637  004350  90D8               	bcf	status,0,c
 15638  004352  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15639  004354  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15640  004356  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15641  004358  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15642  00435A  2EE8               	decfsz	wreg,f,c
 15643  00435C  D7F9               	goto	u8855
 15644  00435E  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15645  004360  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15646  004362  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15647  004364  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15648  004366  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15649  004368  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15650  00436A  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15651  00436C  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15652  00436E  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15653  004370  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15654  004372  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15655  004374  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15656  004376  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15657  004378  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15658  00437A  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15659  00437C  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15660  00437E  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15661  004380  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15662  004382  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15663  004384  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15664  004386  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15665  004388  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15666  00438A  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15667  00438C  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15668  00438E  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15669  004390  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15670  004392  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15671  004394  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15672  004396  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15673  004398  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15674  00439A  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15675  00439C  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15676  00439E  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15677                           
 15678                           ; BSR set to: 0
 15679                           ;main.c: 2855: vscp_errorcnt++;
 15680  0043A0  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15681  0043A4  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15682  0043A8  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15683  0043AC  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15684  0043B0  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15685  0043B4  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15686  0043B8  EC25  F026         	call	_sendCANFrame	;wreg free
 15687  0043BC  0900               	iorlw	0
 15688                           
 15689                           ; BSR set to: 0
 15690                           ;main.c: 2856: return 0;
 15691  0043BE  0E00               	movlw	0
 15692  0043C0  A4D8               	btfss	status,2,c
 15693                           
 15694                           ; BSR set to: 0
 15695                           ;main.c: 2857: }
 15696                           ;main.c: 2859: return 1;
 15697  0043C2  0E01               	movlw	1
 15698                           
 15699                           ; BSR set to: 0
 15700  0043C4  0012               	return	
 15701  0043C6                     __end_of_sendVSCPFrame:
 15702                           	opt stack 0
 15703                           tblptru	equ	0xFF8
 15704                           tblptrh	equ	0xFF7
 15705                           tblptrl	equ	0xFF6
 15706                           tablat	equ	0xFF5
 15707                           prodh	equ	0xFF4
 15708                           prodl	equ	0xFF3
 15709                           intcon	equ	0xFF2
 15710                           postinc0	equ	0xFEE
 15711                           wreg	equ	0xFE8
 15712                           indf1	equ	0xFE7
 15713                           postdec1	equ	0xFE5
 15714                           fsr1h	equ	0xFE2
 15715                           fsr1l	equ	0xFE1
 15716                           indf2	equ	0xFDF
 15717                           postinc2	equ	0xFDE
 15718                           postdec2	equ	0xFDD
 15719                           plusw2	equ	0xFDB
 15720                           fsr2h	equ	0xFDA
 15721                           fsr2l	equ	0xFD9
 15722                           status	equ	0xFD8
 15723                           
 15724 ;; *************** function _sendCANFrame *****************
 15725 ;; Defined at:
 15726 ;;		line 2894 in file "../main.c"
 15727 ;; Parameters:    Size  Location     Type
 15728 ;;  id              4   59[COMRAM] unsigned long 
 15729 ;;  dlc             1   63[COMRAM] unsigned char 
 15730 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15731 ;;		 -> vscp_omsg(13), 
 15732 ;; Auto vars:     Size  Location     Type
 15733 ;;  rv              1   65[COMRAM] unsigned char 
 15734 ;; Return value:  Size  Location     Type
 15735 ;;                  1    wreg      unsigned char 
 15736 ;; Registers used:
 15737 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15738 ;; Tracked objects:
 15739 ;;		On entry : F/0
 15740 ;;		On exit  : F/0
 15741 ;;		Unchanged: 0/0
 15742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15743 ;;      Params:         6       0       0       0       0       0       0
 15744 ;;      Locals:         1       0       0       0       0       0       0
 15745 ;;      Temps:          0       0       0       0       0       0       0
 15746 ;;      Totals:         7       0       0       0       0       0       0
 15747 ;;Total ram usage:        7 bytes
 15748 ;; Hardware stack levels used:    1
 15749 ;; Hardware stack levels required when called:    4
 15750 ;; This function calls:
 15751 ;;		_ECANSendMessage
 15752 ;; This function is called by:
 15753 ;;		_sendVSCPFrame
 15754 ;; This function uses a non-reentrant model
 15755 ;;
 15756                           
 15757                           	psect	text73
 15758  004C4A                     __ptext73:
 15759                           	opt stack 0
 15760  004C4A                     _sendCANFrame:
 15761                           	opt stack 22
 15762                           
 15763                           ; BSR set to: 0
 15764                           ;main.c: 2895: uint8_t rv = 0;
 15765                           
 15766                           ; BSR set to: 0
 15767                           ;incstack = 0
 15768                           ;incstack = 0
 15769  004C4A  6A42               	clrf	sendCANFrame@rv,c
 15770                           
 15771                           ;main.c: 2897: sendTimer = 0;
 15772  004C4C  0101               	movlb	1	; () banked
 15773  004C4E  6B1A               	clrf	_sendTimer& (0+255),b	;volatile
 15774  004C50  6B1B               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 15775                           
 15776                           ;main.c: 2898: while ( sendTimer < 1000 ) {
 15777  004C52  D015               	goto	l10616
 15778  004C54                     l10612:
 15779                           
 15780                           ; BSR set to: 1
 15781                           ;main.c: 2899: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15782  004C54  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15783  004C58  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15784  004C5C  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15785  004C60  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15786  004C64  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15787  004C68  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15788  004C6C  0E20               	movlw	32
 15789  004C6E  6E1E               	movwf	?_ECANSendMessage+6,c
 15790  004C70  EC1D  F01B         	call	_ECANSendMessage	;wreg free
 15791  004C74  0900               	iorlw	0
 15792  004C76  E003               	bz	l10616
 15793                           
 15794                           ;main.c: 2900: rv = 1;
 15795  004C78  0E01               	movlw	1
 15796  004C7A  6E42               	movwf	sendCANFrame@rv,c
 15797                           
 15798                           ;main.c: 2901: break;
 15799  004C7C  D006               	goto	l629
 15800  004C7E                     l10616:
 15801  004C7E  0EE8               	movlw	232
 15802  004C80  0101               	movlb	1	; () banked
 15803  004C82  5D1A               	subwf	_sendTimer& (0+255),w,b	;volatile
 15804  004C84  0E03               	movlw	3
 15805  004C86  591B               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 15806  004C88  E3E5               	bnc	l10612
 15807  004C8A                     l629:
 15808                           
 15809                           ;main.c: 2902: }
 15810                           ;main.c: 2903: }
 15811                           ;main.c: 2905: vscp_omsg.flags = 0;
 15812  004C8A  0100               	movlb	0	; () banked
 15813  004C8C  6BCC               	clrf	_vscp_omsg& (0+255),b
 15814                           
 15815                           ; BSR set to: 0
 15816                           ;main.c: 2907: return rv;
 15817  004C8E  5042               	movf	sendCANFrame@rv,w,c
 15818                           
 15819                           ; BSR set to: 0
 15820  004C90  0012               	return	
 15821  004C92                     __end_of_sendCANFrame:
 15822                           	opt stack 0
 15823                           tblptru	equ	0xFF8
 15824                           tblptrh	equ	0xFF7
 15825                           tblptrl	equ	0xFF6
 15826                           tablat	equ	0xFF5
 15827                           prodh	equ	0xFF4
 15828                           prodl	equ	0xFF3
 15829                           intcon	equ	0xFF2
 15830                           postinc0	equ	0xFEE
 15831                           wreg	equ	0xFE8
 15832                           indf1	equ	0xFE7
 15833                           postdec1	equ	0xFE5
 15834                           fsr1h	equ	0xFE2
 15835                           fsr1l	equ	0xFE1
 15836                           indf2	equ	0xFDF
 15837                           postinc2	equ	0xFDE
 15838                           postdec2	equ	0xFDD
 15839                           plusw2	equ	0xFDB
 15840                           fsr2h	equ	0xFDA
 15841                           fsr2l	equ	0xFD9
 15842                           status	equ	0xFD8
 15843                           
 15844 ;; *************** function _ECANSendMessage *****************
 15845 ;; Defined at:
 15846 ;;		line 617 in file "../ECAN.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;  id              4   23[COMRAM] unsigned long 
 15849 ;;  data            1   27[COMRAM] PTR unsigned char 
 15850 ;;		 -> vscp_omsg(13), 
 15851 ;;  dataLen         1   28[COMRAM] unsigned char 
 15852 ;;  msgFlags        1   29[COMRAM] enum E16306
 15853 ;; Auto vars:     Size  Location     Type
 15854 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15855 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15856 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15857 ;;		 -> B0CON(1), 
 15858 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15859 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15860 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15861 ;;		 -> B0CON(1), 
 15862 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15863 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15864 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15865 ;;		 -> B0CON(1), 
 15866 ;;  i               1   56[COMRAM] unsigned char 
 15867 ;;  temp            1   55[COMRAM] unsigned char 
 15868 ;;  tempBSEL0       1   52[COMRAM] struct .
 15869 ;;  j               1   51[COMRAM] unsigned char 
 15870 ;;  buffers         1   50[COMRAM] unsigned char 
 15871 ;;  mode            1   49[COMRAM] unsigned char 
 15872 ;; Return value:  Size  Location     Type
 15873 ;;                  1    wreg      enum E15660
 15874 ;; Registers used:
 15875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15876 ;; Tracked objects:
 15877 ;;		On entry : E/1
 15878 ;;		On exit  : 3/1
 15879 ;;		Unchanged: 0/0
 15880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15881 ;;      Params:         7       0       0       0       0       0       0
 15882 ;;      Locals:        28       0       0       0       0       0       0
 15883 ;;      Temps:          1       0       0       0       0       0       0
 15884 ;;      Totals:        36       0       0       0       0       0       0
 15885 ;;Total ram usage:       36 bytes
 15886 ;; Hardware stack levels used:    1
 15887 ;; Hardware stack levels required when called:    3
 15888 ;; This function calls:
 15889 ;;		__CANIDToRegs
 15890 ;; This function is called by:
 15891 ;;		_sendCANFrame
 15892 ;; This function uses a non-reentrant model
 15893 ;;
 15894                           
 15895                           	psect	text74
 15896  00363A                     __ptext74:
 15897                           	opt stack 0
 15898  00363A                     _ECANSendMessage:
 15899                           	opt stack 22
 15900                           
 15901                           ;ECAN.c: 619: BYTE mode;
 15902                           ;ECAN.c: 620: BYTE buffers;
 15903                           ;ECAN.c: 628: BYTE i,j;
 15904                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15905                           ;ECAN.c: 630: BYTE* pb[9];
 15906                           ;ECAN.c: 631: BYTE temp;
 15907                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15908                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15909                           
 15910                           ; BSR set to: 0
 15911                           ;incstack = 0
 15912                           ;incstack = 0
 15913  00363A  0E0F               	movlw	15	;volatile
 15914  00363C  6E21               	movwf	ECANSendMessage@pb+1,c
 15915  00363E  0E40               	movlw	64	;volatile
 15916  003640  6E20               	movwf	ECANSendMessage@pb,c
 15917                           
 15918                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15919  003642  0E0F               	movlw	15	;volatile
 15920  003644  6E23               	movwf	ECANSendMessage@pb+3,c
 15921  003646  0E30               	movlw	48	;volatile
 15922  003648  6E22               	movwf	ECANSendMessage@pb+2,c
 15923                           
 15924                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15925  00364A  0E0F               	movlw	15	;volatile
 15926  00364C  6E25               	movwf	ECANSendMessage@pb+5,c
 15927  00364E  0E20               	movlw	32	;volatile
 15928  003650  6E24               	movwf	ECANSendMessage@pb+4,c
 15929                           
 15930                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15931  003652  0E0E               	movlw	14	;volatile
 15932  003654  6E27               	movwf	ECANSendMessage@pb+7,c
 15933  003656  0E20               	movlw	32	;volatile
 15934  003658  6E26               	movwf	ECANSendMessage@pb+6,c
 15935                           
 15936                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15937  00365A  0E0E               	movlw	14	;volatile
 15938  00365C  6E29               	movwf	ECANSendMessage@pb+9,c
 15939  00365E  0E30               	movlw	48	;volatile
 15940  003660  6E28               	movwf	ECANSendMessage@pb+8,c
 15941                           
 15942                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15943  003662  0E0E               	movlw	14	;volatile
 15944  003664  6E2B               	movwf	ECANSendMessage@pb+11,c
 15945  003666  0E40               	movlw	64	;volatile
 15946  003668  6E2A               	movwf	ECANSendMessage@pb+10,c
 15947                           
 15948                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15949  00366A  0E0E               	movlw	14	;volatile
 15950  00366C  6E2D               	movwf	ECANSendMessage@pb+13,c
 15951  00366E  0E50               	movlw	80	;volatile
 15952  003670  6E2C               	movwf	ECANSendMessage@pb+12,c
 15953                           
 15954                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15955  003672  0E0E               	movlw	14	;volatile
 15956  003674  6E2F               	movwf	ECANSendMessage@pb+15,c
 15957  003676  0E60               	movlw	96	;volatile
 15958  003678  6E2E               	movwf	ECANSendMessage@pb+14,c
 15959                           
 15960                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15961  00367A  0E0E               	movlw	14	;volatile
 15962  00367C  6E31               	movwf	ECANSendMessage@pb+17,c
 15963  00367E  0E70               	movlw	112	;volatile
 15964  003680  6E30               	movwf	ECANSendMessage@pb+16,c
 15965                           
 15966                           ; BSR set to: 14
 15967                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15968  003682  5077               	movf	3959,w,c	;volatile
 15969  003684  0BC0               	andlw	192
 15970  003686  6E32               	movwf	ECANSendMessage@mode,c
 15971                           
 15972                           ; BSR set to: 14
 15973                           ;ECAN.c: 660: if ( mode == 0x00 )
 15974  003688  6632               	tstfsz	ECANSendMessage@mode,c
 15975  00368A  D002               	goto	l10630
 15976                           
 15977                           ; BSR set to: 14
 15978                           ;ECAN.c: 661: buffers = 2;
 15979  00368C  0E02               	movlw	2
 15980  00368E  D001               	goto	L33
 15981  003690                     l10630:
 15982                           
 15983                           ; BSR set to: 14
 15984                           ;ECAN.c: 662: else
 15985                           ;ECAN.c: 663: buffers = 8;
 15986  003690  0E08               	movlw	8
 15987  003692                     L33:
 15988  003692  6E33               	movwf	ECANSendMessage@buffers,c
 15989                           
 15990                           ; BSR set to: 14
 15991                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15992  003694  010D               	movlb	13	; () banked
 15993  003696  90D8               	bcf	status,0,c
 15994  003698  31F8               	rrcf	248,w,b	;volatile
 15995  00369A  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15996                           
 15997                           ; BSR set to: 13
 15998                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15999  00369C  6A39               	clrf	ECANSendMessage@i,c
 16000  00369E  D07B               	goto	l10690
 16001  0036A0                     l10636:
 16002                           
 16003                           ;ECAN.c: 688: {
 16004                           ;ECAN.c: 693: ptr = pb[i];
 16005  0036A0  5039               	movf	ECANSendMessage@i,w,c
 16006  0036A2  0D02               	mullw	2
 16007  0036A4  50F3               	movf	prodl,w,c
 16008  0036A6  0F20               	addlw	low ECANSendMessage@pb
 16009  0036A8  6ED9               	movwf	fsr2l,c
 16010  0036AA  6ADA               	clrf	fsr2h,c
 16011  0036AC  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 16012  0036B0  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 16013                           
 16014                           ;ECAN.c: 694: tempPtr = ptr;
 16015  0036B4  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16016  0036B8  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16017                           
 16018                           ;ECAN.c: 702: if ( i > 2 )
 16019  0036BC  0E02               	movlw	2
 16020  0036BE  6439               	cpfsgt	ECANSendMessage@i,c
 16021  0036C0  D004               	goto	l10648
 16022                           
 16023                           ;ECAN.c: 703: {
 16024                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16025  0036C2  90D8               	bcf	status,0,c
 16026  0036C4  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 16027                           
 16028                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16029  0036C6  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 16030  0036C8  D065               	goto	l10688
 16031  0036CA                     l10648:
 16032                           
 16033                           ;ECAN.c: 714: }
 16034                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16035  0036CA  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16036  0036CE  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16037  0036D2  50DF               	movf	indf2,w,c
 16038  0036D4  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 16039  0036D6  B61F               	btfsc	??_ECANSendMessage,3,c
 16040  0036D8  D05D               	goto	l10688
 16041                           
 16042                           ;ECAN.c: 721: {
 16043                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16044  0036DA  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16045  0036DE  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16046  0036E2  0EFC               	movlw	252
 16047  0036E4  16DF               	andwf	indf2,f,c
 16048                           
 16049                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16050  0036E6  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16051  0036EA  0E03               	movlw	3
 16052  0036EC  161F               	andwf	??_ECANSendMessage,f,c
 16053  0036EE  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16054  0036F2  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16055  0036F6  501F               	movf	??_ECANSendMessage,w,c
 16056  0036F8  12DF               	iorwf	indf2,f,c
 16057                           
 16058                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16059  0036FA  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 16060  0036FC  D004               	goto	l817
 16061                           
 16062                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16063  0036FE  501D               	movf	ECANSendMessage@dataLen,w,c
 16064  003700  0940               	iorlw	64
 16065  003702  6E38               	movwf	ECANSendMessage@temp,c
 16066  003704  D002               	goto	l10658
 16067  003706                     l817:
 16068                           
 16069                           ;ECAN.c: 729: else
 16070                           ;ECAN.c: 730: temp = dataLen;
 16071  003706  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16072  00370A                     l10658:
 16073                           
 16074                           ;ECAN.c: 732: *(ptr+5) = temp;
 16075  00370A  EE20 F005          	lfsr	2,5
 16076  00370E  503A               	movf	ECANSendMessage@ptr,w,c
 16077  003710  26D9               	addwf	fsr2l,f,c
 16078  003712  503B               	movf	ECANSendMessage@ptr+1,w,c
 16079  003714  22DA               	addwfc	fsr2h,f,c
 16080  003716  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 16081                           
 16082                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16083  00371A  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 16084  00371C  D003               	goto	l819
 16085                           
 16086                           ;ECAN.c: 736: temp = 1;
 16087  00371E  0E01               	movlw	1
 16088  003720  6E38               	movwf	ECANSendMessage@temp,c
 16089  003722  D001               	goto	l10664
 16090  003724                     l819:
 16091                           
 16092                           ;ECAN.c: 738: else
 16093                           ;ECAN.c: 739: temp = 0;
 16094  003724  6A38               	clrf	ECANSendMessage@temp,c
 16095  003726                     l10664:
 16096                           
 16097                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16098  003726  283A               	incf	ECANSendMessage@ptr,w,c
 16099  003728  6E0E               	movwf	?__CANIDToRegs,c
 16100  00372A  0E00               	movlw	0
 16101  00372C  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 16102  00372E  6E0F               	movwf	?__CANIDToRegs+1,c
 16103  003730  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16104  003734  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16105  003738  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16106  00373C  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16107  003740  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16108  003744  ECA1  F01D         	call	__CANIDToRegs	;wreg free
 16109                           
 16110                           ;ECAN.c: 745: ptr += 6;
 16111  003748  0E06               	movlw	6
 16112  00374A  263A               	addwf	ECANSendMessage@ptr,f,c
 16113  00374C  0E00               	movlw	0
 16114  00374E  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 16115                           
 16116                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16117  003750  6A34               	clrf	ECANSendMessage@j,c
 16118  003752  D00D               	goto	l10678
 16119  003754                     l10670:
 16120                           
 16121                           ;ECAN.c: 748: *ptr++ = *data++;
 16122  003754  501C               	movf	ECANSendMessage@data,w,c
 16123  003756  6ED9               	movwf	fsr2l,c
 16124  003758  6ADA               	clrf	fsr2h,c
 16125  00375A  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16126  00375E  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16127  003762  CFDF FFE7          	movff	indf2,indf1
 16128  003766  2A1C               	incf	ECANSendMessage@data,f,c
 16129  003768  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 16130  00376A  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 16131  00376C  2A34               	incf	ECANSendMessage@j,f,c
 16132  00376E                     l10678:
 16133  00376E  501D               	movf	ECANSendMessage@dataLen,w,c
 16134  003770  5C34               	subwf	ECANSendMessage@j,w,c
 16135  003772  E3F0               	bnc	l10670
 16136                           
 16137                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16138  003774  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16139  003778  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16140  00377C  50DF               	movf	indf2,w,c
 16141  00377E  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 16142  003780  B41F               	btfsc	??_ECANSendMessage,2,c
 16143  003782  D006               	goto	l10684
 16144                           
 16145                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16146  003784  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16147  003788  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16148  00378C  0E00               	movlw	0
 16149  00378E  86DB               	bsf	plusw2,3,c
 16150  003790                     l10684:
 16151                           
 16152                           ;ECAN.c: 755: return TRUE;
 16153  003790  0E01               	movlw	1
 16154  003792  D005               	goto	l825
 16155  003794                     l10688:
 16156  003794  2A39               	incf	ECANSendMessage@i,f,c
 16157  003796                     l10690:
 16158  003796  5033               	movf	ECANSendMessage@buffers,w,c
 16159  003798  5C39               	subwf	ECANSendMessage@i,w,c
 16160  00379A  E382               	bnc	l10636
 16161                           
 16162                           ;ECAN.c: 756: }
 16163                           ;ECAN.c: 757: }
 16164                           ;ECAN.c: 760: return FALSE;
 16165  00379C  0E00               	movlw	0
 16166  00379E                     l825:
 16167  00379E  0012               	return	
 16168  0037A0                     __end_of_ECANSendMessage:
 16169                           	opt stack 0
 16170                           tblptru	equ	0xFF8
 16171                           tblptrh	equ	0xFF7
 16172                           tblptrl	equ	0xFF6
 16173                           tablat	equ	0xFF5
 16174                           prodh	equ	0xFF4
 16175                           prodl	equ	0xFF3
 16176                           intcon	equ	0xFF2
 16177                           postinc0	equ	0xFEE
 16178                           wreg	equ	0xFE8
 16179                           indf1	equ	0xFE7
 16180                           postdec1	equ	0xFE5
 16181                           fsr1h	equ	0xFE2
 16182                           fsr1l	equ	0xFE1
 16183                           indf2	equ	0xFDF
 16184                           postinc2	equ	0xFDE
 16185                           postdec2	equ	0xFDD
 16186                           plusw2	equ	0xFDB
 16187                           fsr2h	equ	0xFDA
 16188                           fsr2l	equ	0xFD9
 16189                           status	equ	0xFD8
 16190                           
 16191 ;; *************** function __CANIDToRegs *****************
 16192 ;; Defined at:
 16193 ;;		line 1099 in file "../ECAN.c"
 16194 ;; Parameters:    Size  Location     Type
 16195 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16196 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16197 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16198 ;;		 -> B0CON(1), 
 16199 ;;  val             4   15[COMRAM] unsigned long 
 16200 ;;  type            1   19[COMRAM] unsigned char 
 16201 ;; Auto vars:     Size  Location     Type
 16202 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 16203 ;;		 -> _CANIDToRegs@val(4), 
 16204 ;; Return value:  Size  Location     Type
 16205 ;;		None               void
 16206 ;; Registers used:
 16207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16208 ;; Tracked objects:
 16209 ;;		On entry : 3/D
 16210 ;;		On exit  : 3/1
 16211 ;;		Unchanged: 2/0
 16212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16213 ;;      Params:         7       0       0       0       0       0       0
 16214 ;;      Locals:         1       0       0       0       0       0       0
 16215 ;;      Temps:          2       0       0       0       0       0       0
 16216 ;;      Totals:        10       0       0       0       0       0       0
 16217 ;;Total ram usage:       10 bytes
 16218 ;; Hardware stack levels used:    1
 16219 ;; Hardware stack levels required when called:    2
 16220 ;; This function calls:
 16221 ;;		Nothing
 16222 ;; This function is called by:
 16223 ;;		_ECANSendMessage
 16224 ;; This function uses a non-reentrant model
 16225 ;;
 16226                           
 16227                           	psect	text75
 16228  003B42                     __ptext75:
 16229                           	opt stack 0
 16230  003B42                     __CANIDToRegs:
 16231                           	opt stack 22
 16232                           
 16233                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16234                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16235                           
 16236                           ;incstack = 0
 16237                           ;incstack = 0
 16238  003B42  0E10               	movlw	low __CANIDToRegs@val
 16239  003B44  6E17               	movwf	__CANIDToRegs@Value,c
 16240                           
 16241                           ;ECAN.c: 1104: if ( type == 0 )
 16242  003B46  6614               	tstfsz	__CANIDToRegs@type,c
 16243  003B48  D022               	goto	l10706
 16244                           
 16245                           ;ECAN.c: 1105: {
 16246                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16247  003B4A  5017               	movf	__CANIDToRegs@Value,w,c
 16248  003B4C  6ED9               	movwf	fsr2l,c
 16249  003B4E  6ADA               	clrf	fsr2h,c
 16250  003B50  50DF               	movf	indf2,w,c
 16251  003B52  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16252  003B54  90D8               	bcf	status,0,c
 16253  003B56  3215               	rrcf	??__CANIDToRegs,f,c
 16254  003B58  90D8               	bcf	status,0,c
 16255  003B5A  3215               	rrcf	??__CANIDToRegs,f,c
 16256  003B5C  90D8               	bcf	status,0,c
 16257  003B5E  3015               	rrcf	??__CANIDToRegs,w,c
 16258                           
 16259                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16260  003B60  D862               	call	PL30	;call to abstracted procedure
 16261  003B62  2AD9               	incf	fsr2l,f,c
 16262  003B64  6ADA               	clrf	fsr2h,c
 16263  003B66  D872               	call	PL82	;call to abstracted procedure
 16264  003B68                     u8995:
 16265  003B68  90D8               	bcf	status,0,c
 16266  003B6A  3615               	rlcf	??__CANIDToRegs,f,c
 16267  003B6C  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16268  003B6E  D7FC               	goto	u8995
 16269  003B70  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16270                           
 16271                           ;ECAN.c: 1109: ptr++;
 16272                           
 16273                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16274  003B74  D846               	call	PL18	;call to abstracted procedure
 16275  003B76  D86A               	call	PL82	;call to abstracted procedure
 16276  003B78                     u9005:
 16277  003B78  90D8               	bcf	status,0,c
 16278  003B7A  3615               	rlcf	??__CANIDToRegs,f,c
 16279  003B7C  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16280  003B7E  D7FC               	goto	u9005
 16281  003B80  5015               	movf	??__CANIDToRegs,w,c
 16282  003B82  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16283  003B86  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16284  003B8A  6EDF               	movwf	indf2,c
 16285                           
 16286                           ;ECAN.c: 1111: }
 16287  003B8C  D039               	goto	l879
 16288  003B8E                     l10706:
 16289                           
 16290                           ;ECAN.c: 1112: else
 16291                           ;ECAN.c: 1113: {
 16292                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16293  003B8E  5017               	movf	__CANIDToRegs@Value,w,c
 16294  003B90  D842               	call	PL26	;call to abstracted procedure
 16295  003B92  0E05               	movlw	5
 16296  003B94  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16297  003B96                     u9015:
 16298  003B96  90D8               	bcf	status,0,c
 16299  003B98  3215               	rrcf	??__CANIDToRegs,f,c
 16300  003B9A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16301  003B9C  D7FC               	goto	u9015
 16302  003B9E  5015               	movf	??__CANIDToRegs,w,c
 16303                           
 16304                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16305  003BA0  D842               	call	PL30	;call to abstracted procedure
 16306  003BA2  0E03               	movlw	3
 16307  003BA4  D849               	call	PL44	;call to abstracted procedure
 16308  003BA6  3615               	rlcf	??__CANIDToRegs,f,c
 16309  003BA8  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16310                           
 16311                           ;ECAN.c: 1117: ptr++;
 16312                           
 16313                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16314  003BAC  D82A               	call	PL18	;call to abstracted procedure
 16315  003BAE  0E02               	movlw	2
 16316  003BB0  D843               	call	PL44	;call to abstracted procedure
 16317  003BB2  3415               	rlcf	??__CANIDToRegs,w,c
 16318  003BB4  0BE0               	andlw	224
 16319  003BB6  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16320  003BBA  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16321  003BBE  6EDF               	movwf	indf2,c
 16322                           
 16323                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16324  003BC0  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16325  003BC4  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16326  003BC8  0E00               	movlw	0
 16327  003BCA  86DB               	bsf	plusw2,3,c
 16328                           
 16329                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16330  003BCC  5017               	movf	__CANIDToRegs@Value,w,c
 16331  003BCE  D823               	call	PL26	;call to abstracted procedure
 16332  003BD0  0E03               	movlw	3
 16333  003BD2  1615               	andwf	??__CANIDToRegs,f,c
 16334  003BD4  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16335                           
 16336                           ;ECAN.c: 1122: ptr++;
 16337                           
 16338                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16339  003BD8  D814               	call	PL18	;call to abstracted procedure
 16340  003BDA  2AD9               	incf	fsr2l,f,c
 16341  003BDC  6ADA               	clrf	fsr2h,c
 16342  003BDE  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16343  003BE2  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16344  003BE6  CFDF FFE7          	movff	indf2,indf1
 16345                           
 16346                           ;ECAN.c: 1124: ptr++;
 16347  003BEA  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16348  003BEC  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16349                           
 16350                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16351  003BEE  5017               	movf	__CANIDToRegs@Value,w,c
 16352  003BF0  6ED9               	movwf	fsr2l,c
 16353  003BF2  6ADA               	clrf	fsr2h,c
 16354  003BF4  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16355  003BF8  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16356  003BFC  CFDF FFE7          	movff	indf2,indf1
 16357  003C00                     l879:
 16358  003C00  0012               	return	
 16359  003C02                     __end_of__CANIDToRegs:
 16360                           	opt stack 0
 16361  003C02                     PL18:
 16362                           	opt stack 22
 16363  003C02  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16364  003C06  5015               	movf	??__CANIDToRegs,w,c
 16365  003C08  12DF               	iorwf	indf2,f,c
 16366  003C0A  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16367  003C0C  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16368  003C0E  5017               	movf	__CANIDToRegs@Value,w,c
 16369  003C10  6ED9               	movwf	fsr2l,c
 16370  003C12  6ADA               	clrf	fsr2h,c
 16371  003C14  0012               	return	
 16372  003C16                     __end_ofPL18:
 16373                           	opt stack 0
 16374  003C16                     PL26:
 16375                           	opt stack 22
 16376  003C16  6ED9               	movwf	fsr2l,c
 16377  003C18  6ADA               	clrf	fsr2h,c
 16378  003C1A  0E02               	movlw	2
 16379  003C1C  26D9               	addwf	fsr2l,f,c
 16380  003C1E  6ADA               	clrf	fsr2h,c
 16381  003C20  50DF               	movf	indf2,w,c
 16382  003C22  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16383  003C24  0012               	return	
 16384  003C26                     __end_ofPL26:
 16385                           	opt stack 0
 16386  003C26                     PL30:
 16387                           	opt stack 22
 16388  003C26  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16389  003C2A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16390  003C2E  6EDF               	movwf	indf2,c
 16391  003C30  5017               	movf	__CANIDToRegs@Value,w,c
 16392  003C32  6ED9               	movwf	fsr2l,c
 16393  003C34  6ADA               	clrf	fsr2h,c
 16394  003C36  0012               	return	
 16395  003C38                     __end_ofPL30:
 16396                           	opt stack 0
 16397  003C38                     PL44:
 16398                           	opt stack 22
 16399  003C38  26D9               	addwf	fsr2l,f,c
 16400  003C3A  6ADA               	clrf	fsr2h,c
 16401  003C3C  50DF               	movf	indf2,w,c
 16402  003C3E  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16403  003C40  90D8               	bcf	status,0,c
 16404  003C42  3615               	rlcf	??__CANIDToRegs,f,c
 16405  003C44  90D8               	bcf	status,0,c
 16406  003C46  3615               	rlcf	??__CANIDToRegs,f,c
 16407  003C48  90D8               	bcf	status,0,c
 16408  003C4A  0012               	return	
 16409  003C4C                     __end_ofPL44:
 16410                           	opt stack 0
 16411  003C4C                     PL82:
 16412                           	opt stack 22
 16413  003C4C  50DF               	movf	indf2,w,c
 16414  003C4E  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16415  003C50  0E05               	movlw	5
 16416  003C52  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16417  003C54  0C05               	retlw	5
 16418  003C56                     __end_ofPL82:
 16419                           	opt stack 0
 16420                           tblptru	equ	0xFF8
 16421                           tblptrh	equ	0xFF7
 16422                           tblptrl	equ	0xFF6
 16423                           tablat	equ	0xFF5
 16424                           prodh	equ	0xFF4
 16425                           prodl	equ	0xFF3
 16426                           intcon	equ	0xFF2
 16427                           postinc0	equ	0xFEE
 16428                           wreg	equ	0xFE8
 16429                           indf1	equ	0xFE7
 16430                           postdec1	equ	0xFE5
 16431                           fsr1h	equ	0xFE2
 16432                           fsr1l	equ	0xFE1
 16433                           indf2	equ	0xFDF
 16434                           postinc2	equ	0xFDE
 16435                           postdec2	equ	0xFDD
 16436                           plusw2	equ	0xFDB
 16437                           fsr2h	equ	0xFDA
 16438                           fsr2l	equ	0xFD9
 16439                           status	equ	0xFD8
 16440                           
 16441 ;; *************** function _vscp_getEvent *****************
 16442 ;; Defined at:
 16443 ;;		line 1306 in file "../../vscp_firmware/common/vscp_firmware.c"
 16444 ;; Parameters:    Size  Location     Type
 16445 ;;		None
 16446 ;; Auto vars:     Size  Location     Type
 16447 ;;  rv              1   49[COMRAM] unsigned char 
 16448 ;; Return value:  Size  Location     Type
 16449 ;;                  1    wreg      unsigned char 
 16450 ;; Registers used:
 16451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16452 ;; Tracked objects:
 16453 ;;		On entry : F/0
 16454 ;;		On exit  : 0/0
 16455 ;;		Unchanged: 0/0
 16456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16457 ;;      Params:         0       0       0       0       0       0       0
 16458 ;;      Locals:         1       0       0       0       0       0       0
 16459 ;;      Temps:          0       0       0       0       0       0       0
 16460 ;;      Totals:         1       0       0       0       0       0       0
 16461 ;;Total ram usage:        1 bytes
 16462 ;; Hardware stack levels used:    1
 16463 ;; Hardware stack levels required when called:    6
 16464 ;; This function calls:
 16465 ;;		_getVSCPFrame
 16466 ;; This function is called by:
 16467 ;;		_main
 16468 ;; This function uses a non-reentrant model
 16469 ;;
 16470                           
 16471                           	psect	text76
 16472  004F1C                     __ptext76:
 16473                           	opt stack 0
 16474  004F1C                     _vscp_getEvent:
 16475                           	opt stack 24
 16476                           
 16477                           ; BSR set to: 0
 16478                           ;vscp_firmware.c: 1307: int8_t rv;
 16479                           ;vscp_firmware.c: 1313: if (vscp_imsg.flags & 0x80) return !0;
 16480                           
 16481                           ;incstack = 0
 16482                           ;incstack = 0
 16483  004F1C  BFBE               	btfsc	_vscp_imsg& (0+255),7,b
 16484  004F1E  D012               	goto	l1274
 16485                           
 16486                           ; BSR set to: 0
 16487                           ;vscp_firmware.c: 1316: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16488                           ;vscp_firmware.c: 1317: &vscp_imsg.vscp_type,
 16489                           ;vscp_firmware.c: 1318: &vscp_imsg.oaddr,
 16490                           ;vscp_firmware.c: 1319: &vscp_imsg.priority,
 16491                           ;vscp_firmware.c: 1320: &vscp_imsg.flags,
 16492                           ;vscp_firmware.c: 1321: vscp_imsg.data ) ) ) {
 16493  004F20  0EC2               	movlw	low (_vscp_imsg+4)
 16494  004F22  6E24               	movwf	?_getVSCPFrame,c
 16495  004F24  0EC3               	movlw	low (_vscp_imsg+5)
 16496  004F26  6E25               	movwf	?_getVSCPFrame+1,c
 16497  004F28  0EBF               	movlw	low (_vscp_imsg+1)
 16498  004F2A  6E26               	movwf	?_getVSCPFrame+2,c
 16499  004F2C  0EBE               	movlw	low _vscp_imsg
 16500  004F2E  6E27               	movwf	?_getVSCPFrame+3,c
 16501  004F30  0EC4               	movlw	low (_vscp_imsg+6)
 16502  004F32  6E28               	movwf	?_getVSCPFrame+4,c
 16503  004F34  0EC0               	movlw	(_vscp_imsg+2)& (0+255)
 16504  004F36  EC0A  F024         	call	_getVSCPFrame
 16505  004F3A  6E32               	movwf	vscp_getEvent@rv,c
 16506  004F3C  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16507  004F3E  E002               	bz	l1274
 16508                           
 16509                           ;vscp_firmware.c: 1323: vscp_imsg.flags |= 0x80;
 16510  004F40  0100               	movlb	0	; () banked
 16511  004F42  8FBE               	bsf	_vscp_imsg& (0+255),7,b
 16512  004F44                     l1274:
 16513  004F44  0012               	return	
 16514  004F46                     __end_of_vscp_getEvent:
 16515                           	opt stack 0
 16516                           tblptru	equ	0xFF8
 16517                           tblptrh	equ	0xFF7
 16518                           tblptrl	equ	0xFF6
 16519                           tablat	equ	0xFF5
 16520                           prodh	equ	0xFF4
 16521                           prodl	equ	0xFF3
 16522                           intcon	equ	0xFF2
 16523                           postinc0	equ	0xFEE
 16524                           wreg	equ	0xFE8
 16525                           indf1	equ	0xFE7
 16526                           postdec1	equ	0xFE5
 16527                           fsr1h	equ	0xFE2
 16528                           fsr1l	equ	0xFE1
 16529                           indf2	equ	0xFDF
 16530                           postinc2	equ	0xFDE
 16531                           postdec2	equ	0xFDD
 16532                           plusw2	equ	0xFDB
 16533                           fsr2h	equ	0xFDA
 16534                           fsr2l	equ	0xFD9
 16535                           status	equ	0xFD8
 16536                           
 16537 ;; *************** function _getVSCPFrame *****************
 16538 ;; Defined at:
 16539 ;;		line 2873 in file "../main.c"
 16540 ;; Parameters:    Size  Location     Type
 16541 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16542 ;;		 -> vscp_imsg(14), 
 16543 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16544 ;;		 -> vscp_imsg(14), 
 16545 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16546 ;;		 -> vscp_imsg(14), 
 16547 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16548 ;;		 -> vscp_imsg(14), 
 16549 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16550 ;;		 -> vscp_imsg(14), 
 16551 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16552 ;;		 -> vscp_imsg(14), 
 16553 ;; Auto vars:     Size  Location     Type
 16554 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16555 ;;		 -> vscp_imsg(14), 
 16556 ;;  id              4   45[COMRAM] unsigned long 
 16557 ;; Return value:  Size  Location     Type
 16558 ;;                  1    wreg      unsigned char 
 16559 ;; Registers used:
 16560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16561 ;; Tracked objects:
 16562 ;;		On entry : F/0
 16563 ;;		On exit  : 0/0
 16564 ;;		Unchanged: 0/0
 16565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16566 ;;      Params:         5       0       0       0       0       0       0
 16567 ;;      Locals:         5       0       0       0       0       0       0
 16568 ;;      Temps:          4       0       0       0       0       0       0
 16569 ;;      Totals:        14       0       0       0       0       0       0
 16570 ;;Total ram usage:       14 bytes
 16571 ;; Hardware stack levels used:    1
 16572 ;; Hardware stack levels required when called:    5
 16573 ;; This function calls:
 16574 ;;		_getCANFrame
 16575 ;; This function is called by:
 16576 ;;		_vscp_getEvent
 16577 ;; This function uses a non-reentrant model
 16578 ;;
 16579                           
 16580                           	psect	text77
 16581  004814                     __ptext77:
 16582                           	opt stack 0
 16583  004814                     _getVSCPFrame:
 16584                           	opt stack 24
 16585                           
 16586                           ;incstack = 0
 16587                           ;incstack = 0
 16588                           ;getVSCPFrame@pvscpclass stored from wreg
 16589  004814  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16590                           
 16591                           ; BSR set to: 0
 16592                           ;main.c: 2874: uint32_t id;
 16593                           ;main.c: 2876: if (!getCANFrame(&id, pSize, pData)) {
 16594  004818  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16595  00481C  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16596  004820  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16597  004822  EC4E  F027         	call	_getCANFrame
 16598  004826  0900               	iorlw	0
 16599  004828  E102               	bnz	l7790
 16600                           
 16601                           ;main.c: 2877: return 0;
 16602  00482A  0E00               	movlw	0
 16603  00482C  D02E               	goto	l623
 16604  00482E                     l7790:
 16605                           
 16606                           ;main.c: 2878: }
 16607                           ;main.c: 2880: *pNodeId = id & 0x0ff;
 16608  00482E  5025               	movf	getVSCPFrame@pNodeId,w,c
 16609  004830  6ED9               	movwf	fsr2l,c
 16610  004832  6ADA               	clrf	fsr2h,c
 16611  004834  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16612                           
 16613                           ;main.c: 2881: *pvscptype = (id >> 8) & 0xff;
 16614  004838  5024               	movf	getVSCPFrame@pvscptype,w,c
 16615  00483A  6ED9               	movwf	fsr2l,c
 16616  00483C  6ADA               	clrf	fsr2h,c
 16617  00483E  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16618                           
 16619                           ;main.c: 2882: *pvscpclass = (id >> 16) & 0x1ff;
 16620  004842  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16621  004844  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16622  004846  0E01               	movlw	1
 16623  004848  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16624  00484A  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16625  00484C  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16626  00484E  6ED9               	movwf	fsr2l,c
 16627  004850  6ADA               	clrf	fsr2h,c
 16628  004852  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16629  004856  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16630                           
 16631                           ;main.c: 2883: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16632  00485A  5026               	movf	getVSCPFrame@pPriority,w,c
 16633  00485C  6ED9               	movwf	fsr2l,c
 16634  00485E  6ADA               	clrf	fsr2h,c
 16635  004860  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16636  004864  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16637  004868  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16638  00486C  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16639  004870  0E1B               	movlw	27
 16640  004872  D005               	goto	u5370
 16641  004874                     u5375:
 16642  004874  90D8               	bcf	status,0,c
 16643  004876  322C               	rrcf	??_getVSCPFrame+3,f,c
 16644  004878  322B               	rrcf	??_getVSCPFrame+2,f,c
 16645  00487A  322A               	rrcf	??_getVSCPFrame+1,f,c
 16646  00487C  3229               	rrcf	??_getVSCPFrame,f,c
 16647  00487E                     u5370:
 16648  00487E  2EE8               	decfsz	wreg,f,c
 16649  004880  D7F9               	goto	u5375
 16650  004882  5029               	movf	??_getVSCPFrame,w,c
 16651  004884  0B07               	andlw	7
 16652  004886  6EDF               	movwf	indf2,c
 16653                           
 16654                           ;main.c: 2885: return 1;
 16655  004888  0E01               	movlw	1
 16656  00488A                     l623:
 16657  00488A  0012               	return	
 16658  00488C                     __end_of_getVSCPFrame:
 16659                           	opt stack 0
 16660                           tblptru	equ	0xFF8
 16661                           tblptrh	equ	0xFF7
 16662                           tblptrl	equ	0xFF6
 16663                           tablat	equ	0xFF5
 16664                           prodh	equ	0xFF4
 16665                           prodl	equ	0xFF3
 16666                           intcon	equ	0xFF2
 16667                           postinc0	equ	0xFEE
 16668                           wreg	equ	0xFE8
 16669                           indf1	equ	0xFE7
 16670                           postdec1	equ	0xFE5
 16671                           fsr1h	equ	0xFE2
 16672                           fsr1l	equ	0xFE1
 16673                           indf2	equ	0xFDF
 16674                           postinc2	equ	0xFDE
 16675                           postdec2	equ	0xFDD
 16676                           plusw2	equ	0xFDB
 16677                           fsr2h	equ	0xFDA
 16678                           fsr2l	equ	0xFD9
 16679                           status	equ	0xFD8
 16680                           
 16681 ;; *************** function _getCANFrame *****************
 16682 ;; Defined at:
 16683 ;;		line 2915 in file "../main.c"
 16684 ;; Parameters:    Size  Location     Type
 16685 ;;  pid             1    wreg     PTR unsigned long 
 16686 ;;		 -> getVSCPFrame@id(4), 
 16687 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16688 ;;		 -> vscp_imsg(14), 
 16689 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16690 ;;		 -> vscp_imsg(14), 
 16691 ;; Auto vars:     Size  Location     Type
 16692 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16693 ;;		 -> getVSCPFrame@id(4), 
 16694 ;;  flags           1   34[COMRAM] enum E16409
 16695 ;; Return value:  Size  Location     Type
 16696 ;;                  1    wreg      unsigned char 
 16697 ;; Registers used:
 16698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16699 ;; Tracked objects:
 16700 ;;		On entry : F/0
 16701 ;;		On exit  : 0/0
 16702 ;;		Unchanged: 0/0
 16703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16704 ;;      Params:         2       0       0       0       0       0       0
 16705 ;;      Locals:         2       0       0       0       0       0       0
 16706 ;;      Temps:          0       0       0       0       0       0       0
 16707 ;;      Totals:         4       0       0       0       0       0       0
 16708 ;;Total ram usage:        4 bytes
 16709 ;; Hardware stack levels used:    1
 16710 ;; Hardware stack levels required when called:    4
 16711 ;; This function calls:
 16712 ;;		_ECANReceiveMessage
 16713 ;; This function is called by:
 16714 ;;		_getVSCPFrame
 16715 ;; This function uses a non-reentrant model
 16716 ;;
 16717                           
 16718                           	psect	text78
 16719  004E9C                     __ptext78:
 16720                           	opt stack 0
 16721  004E9C                     _getCANFrame:
 16722                           	opt stack 24
 16723                           
 16724                           ;incstack = 0
 16725                           ;incstack = 0
 16726                           ;getCANFrame@pid stored from wreg
 16727  004E9C  CFE8 F022          	movff	wreg,getCANFrame@pid
 16728                           
 16729                           ; BSR set to: 0
 16730                           ;main.c: 2916: ECAN_RX_MSG_FLAGS flags;
 16731                           ;main.c: 2920: if (vscp_imsg.flags & 0x80) return 0;
 16732  004EA0  AFBE               	btfss	_vscp_imsg& (0+255),7,b
 16733  004EA2  D002               	goto	l7806
 16734  004EA4                     l7802:
 16735  004EA4  0E00               	movlw	0
 16736  004EA6  D00F               	goto	l634
 16737  004EA8                     l7806:
 16738                           
 16739                           ; BSR set to: 0
 16740                           ;main.c: 2922: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16741  004EA8  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16742  004EAC  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16743  004EB0  0E23               	movlw	low getCANFrame@flags
 16744  004EB2  6E17               	movwf	?_ECANReceiveMessage+2,c
 16745  004EB4  5022               	movf	getCANFrame@pid,w,c
 16746  004EB6  EC52  F018         	call	_ECANReceiveMessage
 16747  004EBA  0900               	iorlw	0
 16748  004EBC  E0F3               	bz	l7802
 16749                           
 16750                           ;main.c: 2924: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16751  004EBE  AC23               	btfss	getCANFrame@flags,6,c
 16752                           
 16753                           ;main.c: 2927: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16754  004EC0  AA23               	btfss	getCANFrame@flags,5,c
 16755  004EC2  D7F0               	goto	l7802
 16756                           
 16757                           ;main.c: 2929: return 1;
 16758  004EC4  0E01               	movlw	1
 16759  004EC6                     l634:
 16760  004EC6  0012               	return	
 16761  004EC8                     __end_of_getCANFrame:
 16762                           	opt stack 0
 16763                           tblptru	equ	0xFF8
 16764                           tblptrh	equ	0xFF7
 16765                           tblptrl	equ	0xFF6
 16766                           tablat	equ	0xFF5
 16767                           prodh	equ	0xFF4
 16768                           prodl	equ	0xFF3
 16769                           intcon	equ	0xFF2
 16770                           postinc0	equ	0xFEE
 16771                           wreg	equ	0xFE8
 16772                           indf1	equ	0xFE7
 16773                           postdec1	equ	0xFE5
 16774                           fsr1h	equ	0xFE2
 16775                           fsr1l	equ	0xFE1
 16776                           indf2	equ	0xFDF
 16777                           postinc2	equ	0xFDE
 16778                           postdec2	equ	0xFDD
 16779                           plusw2	equ	0xFDB
 16780                           fsr2h	equ	0xFDA
 16781                           fsr2l	equ	0xFD9
 16782                           status	equ	0xFD8
 16783                           
 16784 ;; *************** function _ECANReceiveMessage *****************
 16785 ;; Defined at:
 16786 ;;		line 803 in file "../ECAN.c"
 16787 ;; Parameters:    Size  Location     Type
 16788 ;;  id              1    wreg     PTR unsigned long 
 16789 ;;		 -> getVSCPFrame@id(4), 
 16790 ;;  data            1   20[COMRAM] PTR unsigned char 
 16791 ;;		 -> vscp_imsg(14), 
 16792 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16793 ;;		 -> vscp_imsg(14), 
 16794 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 16795 ;;		 -> getCANFrame@flags(1), 
 16796 ;; Auto vars:     Size  Location     Type
 16797 ;;  id              1   25[COMRAM] PTR unsigned long 
 16798 ;;		 -> getVSCPFrame@id(4), 
 16799 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16800 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16801 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16802 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16803 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16804 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16805 ;;  temp            1   28[COMRAM] struct .
 16806 ;;  mode            1   27[COMRAM] unsigned char 
 16807 ;;  i               1   26[COMRAM] unsigned char 
 16808 ;; Return value:  Size  Location     Type
 16809 ;;                  1    wreg      enum E15660
 16810 ;; Registers used:
 16811 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16812 ;; Tracked objects:
 16813 ;;		On entry : F/0
 16814 ;;		On exit  : 0/0
 16815 ;;		Unchanged: 0/0
 16816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16817 ;;      Params:         3       0       0       0       0       0       0
 16818 ;;      Locals:         8       0       0       0       0       0       0
 16819 ;;      Temps:          0       0       0       0       0       0       0
 16820 ;;      Totals:        11       0       0       0       0       0       0
 16821 ;;Total ram usage:       11 bytes
 16822 ;; Hardware stack levels used:    1
 16823 ;; Hardware stack levels required when called:    3
 16824 ;; This function calls:
 16825 ;;		__ECANPointBuffer
 16826 ;;		__RegsToCANID
 16827 ;; This function is called by:
 16828 ;;		_getCANFrame
 16829 ;; This function uses a non-reentrant model
 16830 ;;
 16831                           
 16832                           	psect	text79
 16833  0030A4                     __ptext79:
 16834                           	opt stack 0
 16835  0030A4                     _ECANReceiveMessage:
 16836                           	opt stack 24
 16837                           
 16838                           ;incstack = 0
 16839                           ;incstack = 0
 16840                           ;ECANReceiveMessage@id stored from wreg
 16841  0030A4  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16842                           
 16843                           ; BSR set to: 0
 16844                           ;ECAN.c: 805: BYTE mode;
 16845                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16846                           ;ECAN.c: 809: char i;
 16847                           ;ECAN.c: 810: BYTE_VAL temp;
 16848                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16849  0030A8  0101               	movlb	1	; () banked
 16850  0030AA  6B20               	clrf	__ECANRxFilterHitInfo& (0+255),b
 16851                           
 16852                           ; BSR set to: 1
 16853                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16854  0030AC  5077               	movf	3959,w,c	;volatile
 16855  0030AE  0BC0               	andlw	192
 16856  0030B0  6E1C               	movwf	ECANReceiveMessage@mode,c
 16857                           
 16858                           ; BSR set to: 1
 16859                           ;ECAN.c: 816: if ( mode == 0x00 )
 16860  0030B2  661C               	tstfsz	ECANReceiveMessage@mode,c
 16861  0030B4  D035               	goto	l7938
 16862                           
 16863                           ; BSR set to: 1
 16864                           ;ECAN.c: 822: {
 16865                           ;ECAN.c: 824: if ( RXB0FUL )
 16866  0030B6  AE60               	btfss	3936,7,c	;volatile
 16867  0030B8  D013               	goto	l830
 16868                           
 16869                           ; BSR set to: 1
 16870                           ;ECAN.c: 825: {
 16871                           ;ECAN.c: 827: RXB0IF = 0;
 16872  0030BA  90A4               	bcf	4004,0,c	;volatile
 16873                           
 16874                           ;ECAN.c: 830: if ( RXB0OVFL )
 16875  0030BC  AE74               	btfss	3956,7,c	;volatile
 16876  0030BE  D006               	goto	l7914
 16877                           
 16878                           ; BSR set to: 1
 16879                           ;ECAN.c: 831: {
 16880                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16881  0030C0  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16882  0030C2  6ED9               	movwf	fsr2l,c
 16883  0030C4  6ADA               	clrf	fsr2h,c
 16884  0030C6  0E00               	movlw	0
 16885  0030C8  86DB               	bsf	plusw2,3,c
 16886                           
 16887                           ; BSR set to: 1
 16888                           ;ECAN.c: 833: RXB0OVFL = 0;
 16889  0030CA  9E74               	bcf	3956,7,c	;volatile
 16890  0030CC                     l7914:
 16891                           
 16892                           ; BSR set to: 1
 16893                           ;ECAN.c: 834: }
 16894                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16895  0030CC  A060               	btfss	3936,0,c	;volatile
 16896  0030CE  D002               	bra	u5545
 16897  0030D0  8120               	bsf	__ECANRxFilterHitInfo& (0+255),0,b
 16898  0030D2  D002               	bra	u5547
 16899  0030D4                     u5545:
 16900  0030D4  0101               	movlb	1	; () banked
 16901  0030D6  9120               	bcf	__ECANRxFilterHitInfo& (0+255),0,b
 16902  0030D8                     u5547:
 16903                           
 16904                           ; BSR set to: 1
 16905                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16906  0030D8  0E0F               	movlw	15	;volatile
 16907  0030DA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16908  0030DC  0E60               	movlw	96	;volatile
 16909  0030DE  D01C               	goto	L34
 16910  0030E0                     l830:
 16911                           
 16912                           ; BSR set to: 1
 16913                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16914  0030E0  010F               	movlb	15	; () banked
 16915  0030E2  AF50               	btfss	80,7,b	;volatile
 16916  0030E4  D01B               	goto	l7932
 16917                           
 16918                           ; BSR set to: 15
 16919                           ;ECAN.c: 842: {
 16920                           ;ECAN.c: 844: RXB1IF = 0;
 16921  0030E6  92A4               	bcf	4004,1,c	;volatile
 16922                           
 16923                           ;ECAN.c: 847: if ( RXB1OVFL )
 16924  0030E8  AC74               	btfss	3956,6,c	;volatile
 16925  0030EA  D006               	goto	l7924
 16926                           
 16927                           ; BSR set to: 15
 16928                           ;ECAN.c: 848: {
 16929                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16930  0030EC  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16931  0030EE  6ED9               	movwf	fsr2l,c
 16932  0030F0  6ADA               	clrf	fsr2h,c
 16933  0030F2  0E00               	movlw	0
 16934  0030F4  86DB               	bsf	plusw2,3,c
 16935                           
 16936                           ; BSR set to: 15
 16937                           ;ECAN.c: 850: RXB1OVFL = 0;
 16938  0030F6  9C74               	bcf	3956,6,c	;volatile
 16939  0030F8                     l7924:
 16940                           
 16941                           ; BSR set to: 15
 16942                           ;ECAN.c: 851: }
 16943                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16944  0030F8  5150               	movf	80,w,b	;volatile
 16945  0030FA  0B07               	andlw	7
 16946  0030FC  0101               	movlb	1	; () banked
 16947  0030FE  6F20               	movwf	__ECANRxFilterHitInfo& (0+255),b
 16948                           
 16949                           ; BSR set to: 1
 16950                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16951  003100  0E02               	movlw	2
 16952  003102  6120               	cpfslt	__ECANRxFilterHitInfo& (0+255),b
 16953  003104  D005               	goto	l7930
 16954                           
 16955                           ; BSR set to: 1
 16956                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16957  003106  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16958  003108  6ED9               	movwf	fsr2l,c
 16959  00310A  6ADA               	clrf	fsr2h,c
 16960  00310C  0E00               	movlw	0
 16961  00310E  8EDB               	bsf	plusw2,7,c
 16962  003110                     l7930:
 16963                           
 16964                           ; BSR set to: 1
 16965                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16966  003110  010F               	movlb	15	; () banked
 16967  003112  0E0F               	movlw	15	;volatile
 16968  003114  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16969  003116  0E50               	movlw	80	;volatile
 16970  003118                     L34:
 16971  003118  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16972                           
 16973                           ;ECAN.c: 860: }
 16974  00311A  D066               	goto	l7992
 16975  00311C                     l7932:
 16976                           
 16977                           ;ECAN.c: 861: else
 16978                           ;ECAN.c: 862: return FALSE;
 16979  00311C  0E00               	movlw	0
 16980  00311E  D0C3               	goto	l837
 16981  003120                     l7938:
 16982                           
 16983                           ; BSR set to: 1
 16984                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16985  003120  501C               	movf	ECANReceiveMessage@mode,w,c
 16986  003122  0A40               	xorlw	64
 16987  003124  E146               	bnz	l840
 16988                           
 16989                           ; BSR set to: 1
 16990                           ;ECAN.c: 875: {
 16991                           ;ECAN.c: 876: if ( RXB0FUL )
 16992  003126  AE60               	btfss	3936,7,c	;volatile
 16993  003128  D004               	goto	l841
 16994                           
 16995                           ; BSR set to: 1
 16996                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16997  00312A  0E0F               	movlw	15	;volatile
 16998  00312C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16999  00312E  0E60               	movlw	96	;volatile
 17000  003130  D03E               	goto	L41
 17001  003132                     l841:
 17002                           
 17003                           ; BSR set to: 1
 17004                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 17005  003132  010F               	movlb	15	; () banked
 17006  003134  AF50               	btfss	80,7,b	;volatile
 17007  003136  D004               	goto	l843
 17008                           
 17009                           ; BSR set to: 15
 17010                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 17011  003138  0E0F               	movlw	15	;volatile
 17012  00313A  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17013  00313C  0E50               	movlw	80	;volatile
 17014  00313E  D037               	goto	L41
 17015  003140                     l843:
 17016                           
 17017                           ; BSR set to: 15
 17018                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 17019  003140  010D               	movlb	13
 17020  003142  B5F8               	btfsc	248,2,b	;volatile
 17021  003144  D007               	goto	l845
 17022  003146  010E               	movlb	14
 17023  003148  AF20               	btfss	32,7,b	;volatile
 17024  00314A  D004               	goto	l845
 17025                           
 17026                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 17027  00314C  0E0E               	movlw	14	;volatile
 17028  00314E  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17029  003150  0E20               	movlw	32	;volatile
 17030  003152  D02D               	goto	L41
 17031  003154                     l845:
 17032                           
 17033                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 17034  003154  010D               	movlb	13
 17035  003156  B7F8               	btfsc	248,3,b	;volatile
 17036  003158  D007               	goto	l847
 17037  00315A  010E               	movlb	14
 17038  00315C  AF30               	btfss	48,7,b	;volatile
 17039  00315E  D004               	goto	l847
 17040                           
 17041                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 17042  003160  0E0E               	movlw	14	;volatile
 17043  003162  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17044  003164  0E30               	movlw	48	;volatile
 17045  003166  D023               	goto	L41
 17046  003168                     l847:
 17047                           
 17048                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 17049  003168  010D               	movlb	13
 17050  00316A  B9F8               	btfsc	248,4,b	;volatile
 17051  00316C  D007               	goto	l849
 17052  00316E  010E               	movlb	14
 17053  003170  AF40               	btfss	64,7,b	;volatile
 17054  003172  D004               	goto	l849
 17055                           
 17056                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 17057  003174  0E0E               	movlw	14	;volatile
 17058  003176  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17059  003178  0E40               	movlw	64	;volatile
 17060  00317A  D019               	goto	L41
 17061  00317C                     l849:
 17062                           
 17063                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 17064  00317C  010D               	movlb	13
 17065  00317E  BBF8               	btfsc	248,5,b	;volatile
 17066  003180  D005               	goto	l851
 17067  003182  010E               	movlb	14
 17068  003184  AF50               	btfss	80,7,b	;volatile
 17069  003186  D002               	goto	l851
 17070                           
 17071                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 17072  003188  0E0E               	movlw	14	;volatile
 17073  00318A  D7D7               	goto	L42
 17074  00318C                     l851:
 17075                           
 17076                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 17077  00318C  010D               	movlb	13
 17078  00318E  BDF8               	btfsc	248,6,b	;volatile
 17079  003190  D005               	goto	l853
 17080  003192  010E               	movlb	14
 17081  003194  AF60               	btfss	96,7,b	;volatile
 17082  003196  D002               	goto	l853
 17083                           
 17084                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 17085  003198  0E0E               	movlw	14	;volatile
 17086  00319A  D7C8               	goto	L43
 17087  00319C                     l853:
 17088                           
 17089                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 17090  00319C  010D               	movlb	13
 17091  00319E  BFF8               	btfsc	248,7,b	;volatile
 17092  0031A0  D7BD               	goto	l7932
 17093  0031A2  010E               	movlb	14
 17094  0031A4  AF70               	btfss	112,7,b	;volatile
 17095  0031A6  D7BA               	goto	l7932
 17096                           
 17097                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 17098  0031A8  0E0E               	movlw	14	;volatile
 17099  0031AA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 17100  0031AC  0E70               	movlw	112	;volatile
 17101  0031AE                     L41:
 17102  0031AE  6E1E               	movwf	ECANReceiveMessage@ptr,c
 17103  0031B0  D00A               	goto	l7982
 17104  0031B2                     l840:
 17105                           
 17106                           ; BSR set to: 1
 17107                           ;ECAN.c: 910: else
 17108                           ;ECAN.c: 915: {
 17109                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 17110  0031B2  AE74               	btfss	3956,7,c	;volatile
 17111  0031B4  D7B3               	goto	l7932
 17112                           
 17113                           ; BSR set to: 1
 17114                           ;ECAN.c: 917: {
 17115                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 17116  0031B6  506F               	movf	3951,w,c	;volatile
 17117  0031B8  0B07               	andlw	7
 17118  0031BA  ECBC  F024         	call	__ECANPointBuffer
 17119  0031BE  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 17120  0031C2  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 17121  0031C6                     l7982:
 17122                           
 17123                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 17124  0031C6  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17125  0031CA  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17126  0031CE  50DF               	movf	indf2,w,c
 17127  0031D0  0B1F               	andlw	31
 17128  0031D2  0101               	movlb	1	; () banked
 17129  0031D4  6F20               	movwf	__ECANRxFilterHitInfo& (0+255),b
 17130                           
 17131                           ; BSR set to: 1
 17132                           ;ECAN.c: 932: RXB1IF = 0;
 17133  0031D6  92A4               	bcf	4004,1,c	;volatile
 17134                           
 17135                           ; BSR set to: 1
 17136                           ;ECAN.c: 934: if ( RXB1OVFL )
 17137  0031D8  AC74               	btfss	3956,6,c	;volatile
 17138  0031DA  D006               	goto	l7992
 17139                           
 17140                           ; BSR set to: 1
 17141                           ;ECAN.c: 935: {
 17142                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 17143  0031DC  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17144  0031DE  6ED9               	movwf	fsr2l,c
 17145  0031E0  6ADA               	clrf	fsr2h,c
 17146  0031E2  0E00               	movlw	0
 17147  0031E4  86DB               	bsf	plusw2,3,c
 17148                           
 17149                           ; BSR set to: 1
 17150                           ;ECAN.c: 937: RXB1OVFL = 0;
 17151  0031E6  9C74               	bcf	3956,6,c	;volatile
 17152  0031E8                     l7992:
 17153                           
 17154                           ;ECAN.c: 942: savedPtr = ptr;
 17155  0031E8  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 17156  0031EC  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 17157                           
 17158                           ;ECAN.c: 943: *msgFlags = 0;
 17159  0031F0  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17160  0031F2  6ED9               	movwf	fsr2l,c
 17161  0031F4  6ADA               	clrf	fsr2h,c
 17162  0031F6  6ADF               	clrf	indf2,c
 17163                           
 17164                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17165  0031F8  EE20 F005          	lfsr	2,5
 17166  0031FC  D855               	call	PL68	;call to abstracted procedure
 17167                           
 17168                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17169  0031FE  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17170  003200  6ED9               	movwf	fsr2l,c
 17171  003202  6ADA               	clrf	fsr2h,c
 17172  003204  501D               	movf	ECANReceiveMessage@temp,w,c
 17173  003206  0B0F               	andlw	15
 17174  003208  6EDF               	movwf	indf2,c
 17175                           
 17176                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17177  00320A  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 17178  00320C  D005               	goto	l861
 17179                           
 17180                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17181  00320E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17182  003210  6ED9               	movwf	fsr2l,c
 17183  003212  6ADA               	clrf	fsr2h,c
 17184  003214  0E00               	movlw	0
 17185  003216  8CDB               	bsf	plusw2,6,c
 17186  003218                     l861:
 17187                           
 17188                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17189  003218  EE20 F002          	lfsr	2,2
 17190  00321C  D845               	call	PL68	;call to abstracted procedure
 17191                           
 17192                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17193  00321E  A61D               	btfss	ECANReceiveMessage@temp,3,c
 17194  003220  D008               	goto	l862
 17195                           
 17196                           ;ECAN.c: 956: {
 17197                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17198  003222  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17199  003224  6ED9               	movwf	fsr2l,c
 17200  003226  6ADA               	clrf	fsr2h,c
 17201  003228  0E00               	movlw	0
 17202  00322A  8ADB               	bsf	plusw2,5,c
 17203                           
 17204                           ;ECAN.c: 958: temp.Val = 1;
 17205  00322C  0E01               	movlw	1
 17206  00322E  6E1D               	movwf	ECANReceiveMessage@temp,c
 17207                           
 17208                           ;ECAN.c: 959: }
 17209  003230  D001               	goto	l8010
 17210  003232                     l862:
 17211                           
 17212                           ;ECAN.c: 960: else
 17213                           ;ECAN.c: 961: temp.Val = 0;
 17214  003232  6A1D               	clrf	ECANReceiveMessage@temp,c
 17215  003234                     l8010:
 17216                           
 17217                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17218  003234  281E               	incf	ECANReceiveMessage@ptr,w,c
 17219  003236  6E0E               	movwf	?__RegsToCANID,c
 17220  003238  0E00               	movlw	0
 17221  00323A  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17222  00323C  6E0F               	movwf	?__RegsToCANID+1,c
 17223  00323E  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17224  003242  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17225  003246  EC12  F01D         	call	__RegsToCANID	;wreg free
 17226                           
 17227                           ;ECAN.c: 966: ptr += 6;
 17228  00324A  0E06               	movlw	6
 17229  00324C  261E               	addwf	ECANReceiveMessage@ptr,f,c
 17230  00324E  0E00               	movlw	0
 17231  003250  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17232                           
 17233                           ;ECAN.c: 967: temp.Val = *dataLen;
 17234  003252  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17235  003254  6ED9               	movwf	fsr2l,c
 17236  003256  6ADA               	clrf	fsr2h,c
 17237  003258  50DF               	movf	indf2,w,c
 17238  00325A  6E1D               	movwf	ECANReceiveMessage@temp,c
 17239                           
 17240                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17241  00325C  6A1B               	clrf	ECANReceiveMessage@i,c
 17242  00325E  D00D               	goto	l8026
 17243  003260                     l8018:
 17244                           
 17245                           ;ECAN.c: 969: *data++ = *ptr++;
 17246  003260  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17247  003264  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17248  003268  5015               	movf	ECANReceiveMessage@data,w,c
 17249  00326A  6EE1               	movwf	fsr1l,c
 17250  00326C  6AE2               	clrf	fsr1h,c
 17251  00326E  CFDF FFE7          	movff	indf2,indf1
 17252  003272  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 17253  003274  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 17254  003276  2A15               	incf	ECANReceiveMessage@data,f,c
 17255  003278  2A1B               	incf	ECANReceiveMessage@i,f,c
 17256  00327A                     l8026:
 17257  00327A  501D               	movf	ECANReceiveMessage@temp,w,c
 17258  00327C  5C1B               	subwf	ECANReceiveMessage@i,w,c
 17259  00327E  E3F0               	bnc	l8018
 17260                           
 17261                           ;ECAN.c: 972: if ( IRXIF )
 17262  003280  AEA4               	btfss	4004,7,c	;volatile
 17263  003282  D006               	goto	l8032
 17264                           
 17265                           ;ECAN.c: 973: {
 17266                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17267  003284  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17268  003286  6ED9               	movwf	fsr2l,c
 17269  003288  6ADA               	clrf	fsr2h,c
 17270  00328A  0E00               	movlw	0
 17271  00328C  88DB               	bsf	plusw2,4,c
 17272                           
 17273                           ;ECAN.c: 975: IRXIF = 0;
 17274  00328E  9EA4               	bcf	4004,7,c	;volatile
 17275  003290                     l8032:
 17276                           
 17277                           ;ECAN.c: 976: }
 17278                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17279  003290  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17280  003294  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17281  003298  0E7F               	movlw	127
 17282  00329A  16DF               	andwf	indf2,f,c
 17283                           
 17284                           ;ECAN.c: 983: if ( mode == 0x80 )
 17285  00329C  501C               	movf	ECANReceiveMessage@mode,w,c
 17286  00329E  0A80               	xorlw	128
 17287  0032A0  B4D8               	btfsc	status,2,c
 17288                           
 17289                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17290  0032A2  9E74               	bcf	3956,7,c	;volatile
 17291                           
 17292                           ;ECAN.c: 990: return TRUE;
 17293  0032A4  0E01               	movlw	1
 17294  0032A6                     l837:
 17295  0032A6  0012               	return	
 17296  0032A8                     __end_of_ECANReceiveMessage:
 17297                           	opt stack 0
 17298  0032A8                     PL68:
 17299                           	opt stack 24
 17300  0032A8  501E               	movf	ECANReceiveMessage@ptr,w,c
 17301  0032AA  26D9               	addwf	fsr2l,f,c
 17302  0032AC  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 17303  0032AE  22DA               	addwfc	fsr2h,f,c
 17304  0032B0  50DF               	movf	indf2,w,c
 17305  0032B2  6E1D               	movwf	ECANReceiveMessage@temp,c
 17306  0032B4  0012               	return	
 17307  0032B6                     __end_ofPL68:
 17308                           	opt stack 0
 17309                           tblptru	equ	0xFF8
 17310                           tblptrh	equ	0xFF7
 17311                           tblptrl	equ	0xFF6
 17312                           tablat	equ	0xFF5
 17313                           prodh	equ	0xFF4
 17314                           prodl	equ	0xFF3
 17315                           intcon	equ	0xFF2
 17316                           postinc0	equ	0xFEE
 17317                           wreg	equ	0xFE8
 17318                           indf1	equ	0xFE7
 17319                           postdec1	equ	0xFE5
 17320                           fsr1h	equ	0xFE2
 17321                           fsr1l	equ	0xFE1
 17322                           indf2	equ	0xFDF
 17323                           postinc2	equ	0xFDE
 17324                           postdec2	equ	0xFDD
 17325                           plusw2	equ	0xFDB
 17326                           fsr2h	equ	0xFDA
 17327                           fsr2l	equ	0xFD9
 17328                           status	equ	0xFD8
 17329                           
 17330 ;; *************** function __RegsToCANID *****************
 17331 ;; Defined at:
 17332 ;;		line 1156 in file "../ECAN.c"
 17333 ;; Parameters:    Size  Location     Type
 17334 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17335 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17336 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17337 ;;  val             1   15[COMRAM] PTR unsigned long 
 17338 ;;		 -> getVSCPFrame@id(4), 
 17339 ;;  type            1   16[COMRAM] unsigned char 
 17340 ;; Auto vars:     Size  Location     Type
 17341 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17342 ;;		 -> getVSCPFrame@id(4), 
 17343 ;; Return value:  Size  Location     Type
 17344 ;;		None               void
 17345 ;; Registers used:
 17346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17347 ;; Tracked objects:
 17348 ;;		On entry : 1/1
 17349 ;;		On exit  : 1/1
 17350 ;;		Unchanged: 1/0
 17351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17352 ;;      Params:         4       0       0       0       0       0       0
 17353 ;;      Locals:         1       0       0       0       0       0       0
 17354 ;;      Temps:          2       0       0       0       0       0       0
 17355 ;;      Totals:         7       0       0       0       0       0       0
 17356 ;;Total ram usage:        7 bytes
 17357 ;; Hardware stack levels used:    1
 17358 ;; Hardware stack levels required when called:    2
 17359 ;; This function calls:
 17360 ;;		Nothing
 17361 ;; This function is called by:
 17362 ;;		_ECANReceiveMessage
 17363 ;; This function uses a non-reentrant model
 17364 ;;
 17365                           
 17366                           	psect	text80
 17367  003A24                     __ptext80:
 17368                           	opt stack 0
 17369  003A24                     __RegsToCANID:
 17370                           	opt stack 24
 17371                           
 17372                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17373                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17374                           
 17375                           ;incstack = 0
 17376                           ;incstack = 0
 17377  003A24  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17378                           
 17379                           ;ECAN.c: 1161: if ( type == 0 )
 17380  003A28  6611               	tstfsz	__RegsToCANID@type,c
 17381  003A2A  D02B               	goto	l8102
 17382                           
 17383                           ;ECAN.c: 1162: {
 17384                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17385  003A2C  5014               	movf	__RegsToCANID@Value,w,c
 17386  003A2E  6ED9               	movwf	fsr2l,c
 17387  003A30  D862               	call	PL40	;call to abstracted procedure
 17388  003A32  3612               	rlcf	??__RegsToCANID,f,c
 17389  003A34  90D8               	bcf	status,0,c
 17390  003A36  3612               	rlcf	??__RegsToCANID,f,c
 17391  003A38  90D8               	bcf	status,0,c
 17392  003A3A  3412               	rlcf	??__RegsToCANID,w,c
 17393  003A3C  6EDF               	movwf	indf2,c
 17394                           
 17395                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17396  003A3E  5014               	movf	__RegsToCANID@Value,w,c
 17397  003A40  6ED9               	movwf	fsr2l,c
 17398  003A42  6ADA               	clrf	fsr2h,c
 17399  003A44  2AD9               	incf	fsr2l,f,c
 17400  003A46  6ADA               	clrf	fsr2h,c
 17401  003A48  D873               	call	PL52	;call to abstracted procedure
 17402  003A4A                     u5855:
 17403  003A4A  90D8               	bcf	status,0,c
 17404  003A4C  3212               	rrcf	??__RegsToCANID,f,c
 17405  003A4E  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17406  003A50  D7FC               	goto	u5855
 17407  003A52  5012               	movf	??__RegsToCANID,w,c
 17408                           
 17409                           ;ECAN.c: 1166: ptr++;
 17410                           
 17411                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17412  003A54  D859               	call	PL42	;call to abstracted procedure
 17413  003A56  0E05               	movlw	5
 17414  003A58  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17415  003A5A                     u5865:
 17416  003A5A  90D8               	bcf	status,0,c
 17417  003A5C  3212               	rrcf	??__RegsToCANID,f,c
 17418  003A5E  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17419  003A60  D7FC               	goto	u5865
 17420  003A62  5014               	movf	__RegsToCANID@Value,w,c
 17421  003A64  6ED9               	movwf	fsr2l,c
 17422  003A66  6ADA               	clrf	fsr2h,c
 17423  003A68  5012               	movf	??__RegsToCANID,w,c
 17424  003A6A  12DF               	iorwf	indf2,f,c
 17425                           
 17426                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17427  003A6C  D83D               	call	PL22	;call to abstracted procedure
 17428  003A6E  6ADF               	clrf	indf2,c
 17429                           
 17430                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17431  003A70  5014               	movf	__RegsToCANID@Value,w,c
 17432  003A72  6ED9               	movwf	fsr2l,c
 17433  003A74  6ADA               	clrf	fsr2h,c
 17434  003A76  0E03               	movlw	3
 17435  003A78  26D9               	addwf	fsr2l,f,c
 17436  003A7A  6ADA               	clrf	fsr2h,c
 17437  003A7C  0E00               	movlw	0
 17438  003A7E  6EDF               	movwf	indf2,c
 17439                           
 17440                           ;ECAN.c: 1170: }
 17441  003A80  D032               	goto	l884
 17442  003A82                     l8102:
 17443                           
 17444                           ;ECAN.c: 1171: else
 17445                           ;ECAN.c: 1172: {
 17446                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17447  003A82  D832               	call	PL22	;call to abstracted procedure
 17448  003A84  D855               	call	PL52	;call to abstracted procedure
 17449  003A86                     u5875:
 17450  003A86  90D8               	bcf	status,0,c
 17451  003A88  3612               	rlcf	??__RegsToCANID,f,c
 17452  003A8A  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17453  003A8C  D7FC               	goto	u5875
 17454  003A8E  5012               	movf	??__RegsToCANID,w,c
 17455  003A90  6EDF               	movwf	indf2,c
 17456                           
 17457                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17458  003A92  5014               	movf	__RegsToCANID@Value,w,c
 17459  003A94  6ED9               	movwf	fsr2l,c
 17460  003A96  6ADA               	clrf	fsr2h,c
 17461  003A98  0E03               	movlw	3
 17462  003A9A  26D9               	addwf	fsr2l,f,c
 17463  003A9C  D82C               	call	PL40	;call to abstracted procedure
 17464  003A9E  3212               	rrcf	??__RegsToCANID,f,c
 17465  003AA0  90D8               	bcf	status,0,c
 17466  003AA2  3212               	rrcf	??__RegsToCANID,f,c
 17467  003AA4  90D8               	bcf	status,0,c
 17468  003AA6  3012               	rrcf	??__RegsToCANID,w,c
 17469                           
 17470                           ;ECAN.c: 1176: ptr++;
 17471                           
 17472                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17473  003AA8  D82F               	call	PL42	;call to abstracted procedure
 17474  003AAA  0E03               	movlw	3
 17475  003AAC  1612               	andwf	??__RegsToCANID,f,c
 17476  003AAE  D81C               	call	PL22	;call to abstracted procedure
 17477  003AB0  5012               	movf	??__RegsToCANID,w,c
 17478  003AB2  12DF               	iorwf	indf2,f,c
 17479                           
 17480                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17481  003AB4  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17482  003AB8  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17483  003ABC  50DF               	movf	indf2,w,c
 17484  003ABE  6E12               	movwf	??__RegsToCANID& (0+255),c
 17485  003AC0  90D8               	bcf	status,0,c
 17486  003AC2  3212               	rrcf	??__RegsToCANID,f,c
 17487  003AC4  90D8               	bcf	status,0,c
 17488  003AC6  3212               	rrcf	??__RegsToCANID,f,c
 17489  003AC8  90D8               	bcf	status,0,c
 17490  003ACA  3212               	rrcf	??__RegsToCANID,f,c
 17491  003ACC  0E1C               	movlw	28
 17492  003ACE  1612               	andwf	??__RegsToCANID,f,c
 17493  003AD0  D80B               	call	PL22	;call to abstracted procedure
 17494  003AD2  5012               	movf	??__RegsToCANID,w,c
 17495  003AD4  12DF               	iorwf	indf2,f,c
 17496                           
 17497                           ;ECAN.c: 1180: ptr++;
 17498                           
 17499                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17500  003AD6  D822               	call	PL48	;call to abstracted procedure
 17501  003AD8  2AE1               	incf	fsr1l,f,c
 17502  003ADA  6AE2               	clrf	fsr1h,c
 17503  003ADC  CFDF FFE7          	movff	indf2,indf1
 17504                           
 17505                           ;ECAN.c: 1182: ptr++;
 17506                           
 17507                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17508  003AE0  D81D               	call	PL48	;call to abstracted procedure
 17509  003AE2  CFDF FFE7          	movff	indf2,indf1
 17510  003AE6                     l884:
 17511  003AE6  0012               	return	
 17512  003AE8                     __end_of__RegsToCANID:
 17513                           	opt stack 0
 17514  003AE8                     PL22:
 17515                           	opt stack 24
 17516  003AE8  5014               	movf	__RegsToCANID@Value,w,c
 17517  003AEA  6ED9               	movwf	fsr2l,c
 17518  003AEC  6ADA               	clrf	fsr2h,c
 17519  003AEE  0E02               	movlw	2
 17520  003AF0  26D9               	addwf	fsr2l,f,c
 17521  003AF2  6ADA               	clrf	fsr2h,c
 17522  003AF4  0012               	return	
 17523  003AF6                     __end_ofPL22:
 17524                           	opt stack 0
 17525  003AF6                     PL40:
 17526                           	opt stack 24
 17527  003AF6  6ADA               	clrf	fsr2h,c
 17528  003AF8  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17529  003AFC  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17530  003B00  50E7               	movf	indf1,w,c
 17531  003B02  6E12               	movwf	??__RegsToCANID& (0+255),c
 17532  003B04  90D8               	bcf	status,0,c
 17533  003B06  0012               	return	
 17534  003B08                     __end_ofPL40:
 17535                           	opt stack 0
 17536  003B08                     PL42:
 17537                           	opt stack 24
 17538  003B08  6EDF               	movwf	indf2,c
 17539  003B0A  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17540  003B0C  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17541  003B0E  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17542  003B12  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17543  003B16  50DF               	movf	indf2,w,c
 17544  003B18  6E12               	movwf	??__RegsToCANID& (0+255),c
 17545  003B1A  0012               	return	
 17546  003B1C                     __end_ofPL42:
 17547                           	opt stack 0
 17548  003B1C                     PL48:
 17549                           	opt stack 24
 17550  003B1C  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17551  003B1E  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17552  003B20  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17553  003B24  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17554  003B28  5014               	movf	__RegsToCANID@Value,w,c
 17555  003B2A  6EE1               	movwf	fsr1l,c
 17556  003B2C  6AE2               	clrf	fsr1h,c
 17557  003B2E  0012               	return	
 17558  003B30                     __end_ofPL48:
 17559                           	opt stack 0
 17560  003B30                     PL52:
 17561                           	opt stack 24
 17562  003B30  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17563  003B34  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17564  003B38  50E7               	movf	indf1,w,c
 17565  003B3A  6E12               	movwf	??__RegsToCANID& (0+255),c
 17566  003B3C  0E05               	movlw	5
 17567  003B3E  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17568  003B40  0C05               	retlw	5
 17569  003B42                     __end_ofPL52:
 17570                           	opt stack 0
 17571                           tblptru	equ	0xFF8
 17572                           tblptrh	equ	0xFF7
 17573                           tblptrl	equ	0xFF6
 17574                           tablat	equ	0xFF5
 17575                           prodh	equ	0xFF4
 17576                           prodl	equ	0xFF3
 17577                           intcon	equ	0xFF2
 17578                           postinc0	equ	0xFEE
 17579                           wreg	equ	0xFE8
 17580                           indf1	equ	0xFE7
 17581                           postdec1	equ	0xFE5
 17582                           fsr1h	equ	0xFE2
 17583                           fsr1l	equ	0xFE1
 17584                           indf2	equ	0xFDF
 17585                           postinc2	equ	0xFDE
 17586                           postdec2	equ	0xFDD
 17587                           plusw2	equ	0xFDB
 17588                           fsr2h	equ	0xFDA
 17589                           fsr2l	equ	0xFD9
 17590                           status	equ	0xFD8
 17591                           
 17592 ;; *************** function __ECANPointBuffer *****************
 17593 ;; Defined at:
 17594 ;;		line 1207 in file "../ECAN.c"
 17595 ;; Parameters:    Size  Location     Type
 17596 ;;  b               1    wreg     unsigned char 
 17597 ;; Auto vars:     Size  Location     Type
 17598 ;;  b               1   16[COMRAM] unsigned char 
 17599 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17600 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17601 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17602 ;; Return value:  Size  Location     Type
 17603 ;;                  2   13[COMRAM] PTR unsigned char 
 17604 ;; Registers used:
 17605 ;;		wreg, status,2, status,0
 17606 ;; Tracked objects:
 17607 ;;		On entry : F/1
 17608 ;;		On exit  : 0/0
 17609 ;;		Unchanged: 0/0
 17610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17611 ;;      Params:         3       0       0       0       0       0       0
 17612 ;;      Locals:         3       0       0       0       0       0       0
 17613 ;;      Temps:          0       0       0       0       0       0       0
 17614 ;;      Totals:         6       0       0       0       0       0       0
 17615 ;;Total ram usage:        6 bytes
 17616 ;; Hardware stack levels used:    1
 17617 ;; Hardware stack levels required when called:    2
 17618 ;; This function calls:
 17619 ;;		Nothing
 17620 ;; This function is called by:
 17621 ;;		_ECANReceiveMessage
 17622 ;; This function uses a non-reentrant model
 17623 ;;
 17624                           
 17625                           	psect	text81
 17626  004978                     __ptext81:
 17627                           	opt stack 0
 17628  004978                     __ECANPointBuffer:
 17629                           	opt stack 24
 17630                           
 17631                           ;incstack = 0
 17632                           ;incstack = 0
 17633                           ;__ECANPointBuffer@b stored from wreg
 17634  004978  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17635                           
 17636                           ; BSR set to: 1
 17637                           ;ECAN.c: 1208: BYTE* pt;
 17638                           ;ECAN.c: 1210: switch(b)
 17639  00497C  D024               	goto	l8088
 17640  00497E                     l8070:
 17641                           
 17642                           ; BSR set to: 1
 17643                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17644  00497E  0E0F               	movlw	15	;volatile
 17645  004980  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17646  004982  0E60               	movlw	96	;volatile
 17647  004984  D01E               	goto	L50
 17648  004986                     l8072:
 17649                           
 17650                           ; BSR set to: 1
 17651                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17652  004986  010F               	movlb	15	; () banked
 17653  004988  0E0F               	movlw	15	;volatile
 17654  00498A  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17655  00498C  0E50               	movlw	80	;volatile
 17656  00498E  D019               	goto	L50
 17657  004990                     l8074:
 17658                           
 17659                           ; BSR set to: 1
 17660                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17661  004990  010E               	movlb	14	; () banked
 17662  004992  0E0E               	movlw	14	;volatile
 17663  004994  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17664  004996  0E20               	movlw	32	;volatile
 17665  004998  D014               	goto	L50
 17666  00499A                     l8076:
 17667                           
 17668                           ; BSR set to: 1
 17669                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17670  00499A  010E               	movlb	14	; () banked
 17671  00499C  0E0E               	movlw	14	;volatile
 17672  00499E  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17673  0049A0  0E30               	movlw	48	;volatile
 17674  0049A2  D00F               	goto	L50
 17675  0049A4                     l8078:
 17676                           
 17677                           ; BSR set to: 1
 17678                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17679  0049A4  010E               	movlb	14	; () banked
 17680  0049A6  0E0E               	movlw	14	;volatile
 17681  0049A8  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17682  0049AA  0E40               	movlw	64	;volatile
 17683  0049AC  D00A               	goto	L50
 17684  0049AE                     l8080:
 17685                           
 17686                           ; BSR set to: 1
 17687                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17688  0049AE  010E               	movlb	14	; () banked
 17689  0049B0  0E0E               	movlw	14	;volatile
 17690  0049B2  D7EB               	goto	L51
 17691  0049B4                     l8082:
 17692                           
 17693                           ; BSR set to: 1
 17694                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17695  0049B4  010E               	movlb	14	; () banked
 17696  0049B6  0E0E               	movlw	14	;volatile
 17697  0049B8  D7E3               	goto	L52
 17698  0049BA                     l8084:
 17699                           
 17700                           ; BSR set to: 1
 17701                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17702  0049BA  010E               	movlb	14	; () banked
 17703  0049BC  0E0E               	movlw	14	;volatile
 17704  0049BE  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17705  0049C0  0E70               	movlw	112	;volatile
 17706  0049C2                     L50:
 17707  0049C2  6E12               	movwf	__ECANPointBuffer@pt,c
 17708                           
 17709                           ;ECAN.c: 1235: break;
 17710  0049C4  D00F               	goto	l889
 17711  0049C6                     l8088:
 17712                           
 17713                           ; BSR set to: 1
 17714  0049C6  5011               	movf	__ECANPointBuffer@b,w,c
 17715                           
 17716                           ; Switch size 1, requested type "space"
 17717                           ; Number of cases is 7, Range of values is 0 to 6
 17718                           ; switch strategies available:
 17719                           ; Name         Instructions Cycles
 17720                           ; simple_byte           22    12 (average)
 17721                           ;	Chosen strategy is simple_byte
 17722  0049C8  E0DA               	bz	l8070
 17723  0049CA  0A01               	xorlw	1	; case 1
 17724  0049CC  E0DC               	bz	l8072
 17725  0049CE  0A03               	xorlw	3	; case 2
 17726  0049D0  E0DF               	bz	l8074
 17727  0049D2  0A01               	xorlw	1	; case 3
 17728  0049D4  E0E2               	bz	l8076
 17729  0049D6  0A07               	xorlw	7	; case 4
 17730  0049D8  E0E5               	bz	l8078
 17731  0049DA  0A01               	xorlw	1	; case 5
 17732  0049DC  E0E8               	bz	l8080
 17733  0049DE  0A03               	xorlw	3	; case 6
 17734  0049E0  E0E9               	bz	l8082
 17735  0049E2  D7EB               	goto	l8084
 17736  0049E4                     l889:
 17737                           
 17738                           ;ECAN.c: 1237: return (pt);
 17739  0049E4  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17740  0049E8  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17741  0049EC  0012               	return	
 17742  0049EE                     __end_of__ECANPointBuffer:
 17743                           	opt stack 0
 17744                           tblptru	equ	0xFF8
 17745                           tblptrh	equ	0xFF7
 17746                           tblptrl	equ	0xFF6
 17747                           tablat	equ	0xFF5
 17748                           prodh	equ	0xFF4
 17749                           prodl	equ	0xFF3
 17750                           intcon	equ	0xFF2
 17751                           postinc0	equ	0xFEE
 17752                           wreg	equ	0xFE8
 17753                           indf1	equ	0xFE7
 17754                           postdec1	equ	0xFE5
 17755                           fsr1h	equ	0xFE2
 17756                           fsr1l	equ	0xFE1
 17757                           indf2	equ	0xFDF
 17758                           postinc2	equ	0xFDE
 17759                           postdec2	equ	0xFDD
 17760                           plusw2	equ	0xFDB
 17761                           fsr2h	equ	0xFDA
 17762                           fsr2l	equ	0xFD9
 17763                           status	equ	0xFD8
 17764                           
 17765 ;; *************** function _vscp_check_pstorage *****************
 17766 ;; Defined at:
 17767 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 17768 ;; Parameters:    Size  Location     Type
 17769 ;;		None
 17770 ;; Auto vars:     Size  Location     Type
 17771 ;;		None
 17772 ;; Return value:  Size  Location     Type
 17773 ;;                  1    wreg      unsigned char 
 17774 ;; Registers used:
 17775 ;;		wreg, status,2, status,0, cstack
 17776 ;; Tracked objects:
 17777 ;;		On entry : 0/0
 17778 ;;		On exit  : 0/0
 17779 ;;		Unchanged: 0/0
 17780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17781 ;;      Params:         0       0       0       0       0       0       0
 17782 ;;      Locals:         0       0       0       0       0       0       0
 17783 ;;      Temps:          0       0       0       0       0       0       0
 17784 ;;      Totals:         0       0       0       0       0       0       0
 17785 ;;Total ram usage:        0 bytes
 17786 ;; Hardware stack levels used:    1
 17787 ;; Hardware stack levels required when called:    4
 17788 ;; This function calls:
 17789 ;;		_vscp_writeNicknamePermanent
 17790 ;;		_vscp_getSegmentCRC
 17791 ;;		_vscp_setSegmentCRC
 17792 ;;		_vscp_setControlByte
 17793 ;; This function is called by:
 17794 ;;		_main
 17795 ;; This function uses a non-reentrant model
 17796 ;;
 17797                           
 17798                           	psect	text82
 17799  00502A                     __ptext82:
 17800                           	opt stack 0
 17801  00502A                     _vscp_check_pstorage:
 17802                           	opt stack 26
 17803                           
 17804                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17805                           
 17806                           ;incstack = 0
 17807                           ;incstack = 0
 17808  00502A  EC07  F029         	call	_vscp_getSegmentCRC	;wreg free
 17809  00502E  0BC0               	andlw	192
 17810  005030  0A40               	xorlw	64
 17811  005032  E102               	bnz	l9170
 17812                           
 17813                           ;vscp_firmware.c: 172: return !0;
 17814  005034  0E01               	movlw	1
 17815  005036  D00A               	goto	l1030
 17816  005038                     l9170:
 17817                           
 17818                           ;vscp_firmware.c: 173: }
 17819                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 17820  005038  0EFF               	movlw	255
 17821  00503A  ECDC  F028         	call	_vscp_writeNicknamePermanent
 17822                           
 17823                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 17824  00503E  0E00               	movlw	0
 17825  005040  ECD3  F028         	call	_vscp_setSegmentCRC
 17826                           
 17827                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 17828  005044  0EA0               	movlw	160
 17829  005046  ECCA  F028         	call	_vscp_setControlByte
 17830                           
 17831                           ;vscp_firmware.c: 185: return 0;
 17832  00504A  0E00               	movlw	0
 17833  00504C                     l1030:
 17834  00504C  0012               	return	
 17835  00504E                     __end_of_vscp_check_pstorage:
 17836                           	opt stack 0
 17837                           tblptru	equ	0xFF8
 17838                           tblptrh	equ	0xFF7
 17839                           tblptrl	equ	0xFF6
 17840                           tablat	equ	0xFF5
 17841                           prodh	equ	0xFF4
 17842                           prodl	equ	0xFF3
 17843                           intcon	equ	0xFF2
 17844                           postinc0	equ	0xFEE
 17845                           wreg	equ	0xFE8
 17846                           indf1	equ	0xFE7
 17847                           postdec1	equ	0xFE5
 17848                           fsr1h	equ	0xFE2
 17849                           fsr1l	equ	0xFE1
 17850                           indf2	equ	0xFDF
 17851                           postinc2	equ	0xFDE
 17852                           postdec2	equ	0xFDD
 17853                           plusw2	equ	0xFDB
 17854                           fsr2h	equ	0xFDA
 17855                           fsr2l	equ	0xFD9
 17856                           status	equ	0xFD8
 17857                           
 17858 ;; *************** function _vscp_setControlByte *****************
 17859 ;; Defined at:
 17860 ;;		line 2794 in file "../main.c"
 17861 ;; Parameters:    Size  Location     Type
 17862 ;;  ctrl            1    wreg     unsigned char 
 17863 ;; Auto vars:     Size  Location     Type
 17864 ;;  ctrl            1   16[COMRAM] unsigned char 
 17865 ;; Return value:  Size  Location     Type
 17866 ;;		None               void
 17867 ;; Registers used:
 17868 ;;		wreg, status,2, cstack
 17869 ;; Tracked objects:
 17870 ;;		On entry : 0/0
 17871 ;;		On exit  : 0/0
 17872 ;;		Unchanged: 0/0
 17873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17874 ;;      Params:         0       0       0       0       0       0       0
 17875 ;;      Locals:         1       0       0       0       0       0       0
 17876 ;;      Temps:          0       0       0       0       0       0       0
 17877 ;;      Totals:         1       0       0       0       0       0       0
 17878 ;;Total ram usage:        1 bytes
 17879 ;; Hardware stack levels used:    1
 17880 ;; Hardware stack levels required when called:    3
 17881 ;; This function calls:
 17882 ;;		_writeEEPROM
 17883 ;; This function is called by:
 17884 ;;		_vscp_check_pstorage
 17885 ;; This function uses a non-reentrant model
 17886 ;;
 17887                           
 17888                           	psect	text83
 17889  005194                     __ptext83:
 17890                           	opt stack 0
 17891  005194                     _vscp_setControlByte:
 17892                           	opt stack 26
 17893                           
 17894                           ;incstack = 0
 17895                           ;incstack = 0
 17896                           ;vscp_setControlByte@ctrl stored from wreg
 17897  005194  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17898                           
 17899                           ;main.c: 2795: writeEEPROM(0x03, ctrl);
 17900  005198  6A0F               	clrf	?_writeEEPROM+1,c
 17901  00519A  0E03               	movlw	3
 17902  00519C  6E0E               	movwf	?_writeEEPROM,c
 17903  00519E  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17904  0051A2  EFDE  F027         	goto	_writeEEPROM	;wreg free
 17905  0051A6                     __end_of_vscp_setControlByte:
 17906                           	opt stack 0
 17907                           tblptru	equ	0xFF8
 17908                           tblptrh	equ	0xFF7
 17909                           tblptrl	equ	0xFF6
 17910                           tablat	equ	0xFF5
 17911                           prodh	equ	0xFF4
 17912                           prodl	equ	0xFF3
 17913                           intcon	equ	0xFF2
 17914                           postinc0	equ	0xFEE
 17915                           wreg	equ	0xFE8
 17916                           indf1	equ	0xFE7
 17917                           postdec1	equ	0xFE5
 17918                           fsr1h	equ	0xFE2
 17919                           fsr1l	equ	0xFE1
 17920                           indf2	equ	0xFDF
 17921                           postinc2	equ	0xFDE
 17922                           postdec2	equ	0xFDD
 17923                           plusw2	equ	0xFDB
 17924                           fsr2h	equ	0xFDA
 17925                           fsr2l	equ	0xFD9
 17926                           status	equ	0xFD8
 17927                           
 17928 ;; *************** function _vscp_setSegmentCRC *****************
 17929 ;; Defined at:
 17930 ;;		line 2785 in file "../main.c"
 17931 ;; Parameters:    Size  Location     Type
 17932 ;;  crc             1    wreg     unsigned char 
 17933 ;; Auto vars:     Size  Location     Type
 17934 ;;  crc             1   16[COMRAM] unsigned char 
 17935 ;; Return value:  Size  Location     Type
 17936 ;;		None               void
 17937 ;; Registers used:
 17938 ;;		wreg, status,2, cstack
 17939 ;; Tracked objects:
 17940 ;;		On entry : 0/0
 17941 ;;		On exit  : 0/0
 17942 ;;		Unchanged: 0/0
 17943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17944 ;;      Params:         0       0       0       0       0       0       0
 17945 ;;      Locals:         1       0       0       0       0       0       0
 17946 ;;      Temps:          0       0       0       0       0       0       0
 17947 ;;      Totals:         1       0       0       0       0       0       0
 17948 ;;Total ram usage:        1 bytes
 17949 ;; Hardware stack levels used:    1
 17950 ;; Hardware stack levels required when called:    3
 17951 ;; This function calls:
 17952 ;;		_writeEEPROM
 17953 ;; This function is called by:
 17954 ;;		_vscp_check_pstorage
 17955 ;;		_vscp_handleProbeState
 17956 ;;		_vscp_handleHeartbeat
 17957 ;;		_vscp_handleSetNickname
 17958 ;; This function uses a non-reentrant model
 17959 ;;
 17960                           
 17961                           	psect	text84
 17962  0051A6                     __ptext84:
 17963                           	opt stack 0
 17964  0051A6                     _vscp_setSegmentCRC:
 17965                           	opt stack 25
 17966                           
 17967                           ;incstack = 0
 17968                           ;incstack = 0
 17969                           ;vscp_setSegmentCRC@crc stored from wreg
 17970  0051A6  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17971                           
 17972                           ;main.c: 2786: writeEEPROM(0x02, crc);
 17973  0051AA  6A0F               	clrf	?_writeEEPROM+1,c
 17974  0051AC  0E02               	movlw	2
 17975  0051AE  6E0E               	movwf	?_writeEEPROM,c
 17976  0051B0  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17977  0051B4  EFDE  F027         	goto	_writeEEPROM	;wreg free
 17978  0051B8                     __end_of_vscp_setSegmentCRC:
 17979                           	opt stack 0
 17980                           tblptru	equ	0xFF8
 17981                           tblptrh	equ	0xFF7
 17982                           tblptrl	equ	0xFF6
 17983                           tablat	equ	0xFF5
 17984                           prodh	equ	0xFF4
 17985                           prodl	equ	0xFF3
 17986                           intcon	equ	0xFF2
 17987                           postinc0	equ	0xFEE
 17988                           wreg	equ	0xFE8
 17989                           indf1	equ	0xFE7
 17990                           postdec1	equ	0xFE5
 17991                           fsr1h	equ	0xFE2
 17992                           fsr1l	equ	0xFE1
 17993                           indf2	equ	0xFDF
 17994                           postinc2	equ	0xFDE
 17995                           postdec2	equ	0xFDD
 17996                           plusw2	equ	0xFDB
 17997                           fsr2h	equ	0xFDA
 17998                           fsr2l	equ	0xFD9
 17999                           status	equ	0xFD8
 18000                           
 18001 ;; *************** function _vscp_getSegmentCRC *****************
 18002 ;; Defined at:
 18003 ;;		line 2776 in file "../main.c"
 18004 ;; Parameters:    Size  Location     Type
 18005 ;;		None
 18006 ;; Auto vars:     Size  Location     Type
 18007 ;;		None
 18008 ;; Return value:  Size  Location     Type
 18009 ;;                  1    wreg      unsigned char 
 18010 ;; Registers used:
 18011 ;;		wreg, status,2, cstack
 18012 ;; Tracked objects:
 18013 ;;		On entry : 0/0
 18014 ;;		On exit  : 0/0
 18015 ;;		Unchanged: 0/0
 18016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18017 ;;      Params:         0       0       0       0       0       0       0
 18018 ;;      Locals:         0       0       0       0       0       0       0
 18019 ;;      Temps:          0       0       0       0       0       0       0
 18020 ;;      Totals:         0       0       0       0       0       0       0
 18021 ;;Total ram usage:        0 bytes
 18022 ;; Hardware stack levels used:    1
 18023 ;; Hardware stack levels required when called:    3
 18024 ;; This function calls:
 18025 ;;		_readEEPROM
 18026 ;; This function is called by:
 18027 ;;		_vscp_check_pstorage
 18028 ;;		_vscp_handleHeartbeat
 18029 ;; This function uses a non-reentrant model
 18030 ;;
 18031                           
 18032                           	psect	text85
 18033  00520E                     __ptext85:
 18034                           	opt stack 0
 18035  00520E                     _vscp_getSegmentCRC:
 18036                           	opt stack 25
 18037                           
 18038                           ;main.c: 2777: return readEEPROM(0x02);
 18039                           
 18040                           ;incstack = 0
 18041                           ;incstack = 0
 18042  00520E  6A17               	clrf	?_readEEPROM+1,c
 18043  005210  0E02               	movlw	2
 18044  005212  6E16               	movwf	?_readEEPROM,c
 18045  005214  EFC0  F028         	goto	_readEEPROM	;wreg free
 18046  005218                     __end_of_vscp_getSegmentCRC:
 18047                           	opt stack 0
 18048                           tblptru	equ	0xFF8
 18049                           tblptrh	equ	0xFF7
 18050                           tblptrl	equ	0xFF6
 18051                           tablat	equ	0xFF5
 18052                           prodh	equ	0xFF4
 18053                           prodl	equ	0xFF3
 18054                           intcon	equ	0xFF2
 18055                           postinc0	equ	0xFEE
 18056                           wreg	equ	0xFE8
 18057                           indf1	equ	0xFE7
 18058                           postdec1	equ	0xFE5
 18059                           fsr1h	equ	0xFE2
 18060                           fsr1l	equ	0xFE1
 18061                           indf2	equ	0xFDF
 18062                           postinc2	equ	0xFDE
 18063                           postdec2	equ	0xFDD
 18064                           plusw2	equ	0xFDB
 18065                           fsr2h	equ	0xFDA
 18066                           fsr2l	equ	0xFD9
 18067                           status	equ	0xFD8
 18068                           
 18069 ;; *************** function _vscp_writeNicknamePermanent *****************
 18070 ;; Defined at:
 18071 ;;		line 2767 in file "../main.c"
 18072 ;; Parameters:    Size  Location     Type
 18073 ;;  nickname        1    wreg     unsigned char 
 18074 ;; Auto vars:     Size  Location     Type
 18075 ;;  nickname        1   16[COMRAM] unsigned char 
 18076 ;; Return value:  Size  Location     Type
 18077 ;;		None               void
 18078 ;; Registers used:
 18079 ;;		wreg, status,2, cstack
 18080 ;; Tracked objects:
 18081 ;;		On entry : 0/0
 18082 ;;		On exit  : 0/0
 18083 ;;		Unchanged: 0/0
 18084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18085 ;;      Params:         0       0       0       0       0       0       0
 18086 ;;      Locals:         1       0       0       0       0       0       0
 18087 ;;      Temps:          0       0       0       0       0       0       0
 18088 ;;      Totals:         1       0       0       0       0       0       0
 18089 ;;Total ram usage:        1 bytes
 18090 ;; Hardware stack levels used:    1
 18091 ;; Hardware stack levels required when called:    3
 18092 ;; This function calls:
 18093 ;;		_writeEEPROM
 18094 ;; This function is called by:
 18095 ;;		_vscp_check_pstorage
 18096 ;;		_vscp_handleProbeState
 18097 ;;		_vscp_handleHeartbeat
 18098 ;;		_vscp_handleSetNickname
 18099 ;;		_vscp_handleDropNickname
 18100 ;; This function uses a non-reentrant model
 18101 ;;
 18102                           
 18103                           	psect	text86
 18104  0051B8                     __ptext86:
 18105                           	opt stack 0
 18106  0051B8                     _vscp_writeNicknamePermanent:
 18107                           	opt stack 25
 18108                           
 18109                           ;incstack = 0
 18110                           ;incstack = 0
 18111                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18112  0051B8  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18113                           
 18114                           ;main.c: 2768: writeEEPROM( 0x01, nickname );
 18115  0051BC  6A0F               	clrf	?_writeEEPROM+1,c
 18116  0051BE  0E01               	movlw	1
 18117  0051C0  6E0E               	movwf	?_writeEEPROM,c
 18118  0051C2  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 18119  0051C6  EFDE  F027         	goto	_writeEEPROM	;wreg free
 18120  0051CA                     __end_of_vscp_writeNicknamePermanent:
 18121                           	opt stack 0
 18122                           tblptru	equ	0xFF8
 18123                           tblptrh	equ	0xFF7
 18124                           tblptrl	equ	0xFF6
 18125                           tablat	equ	0xFF5
 18126                           prodh	equ	0xFF4
 18127                           prodl	equ	0xFF3
 18128                           intcon	equ	0xFF2
 18129                           postinc0	equ	0xFEE
 18130                           wreg	equ	0xFE8
 18131                           indf1	equ	0xFE7
 18132                           postdec1	equ	0xFE5
 18133                           fsr1h	equ	0xFE2
 18134                           fsr1l	equ	0xFE1
 18135                           indf2	equ	0xFDF
 18136                           postinc2	equ	0xFDE
 18137                           postdec2	equ	0xFDD
 18138                           plusw2	equ	0xFDB
 18139                           fsr2h	equ	0xFDA
 18140                           fsr2l	equ	0xFD9
 18141                           status	equ	0xFD8
 18142                           
 18143 ;; *************** function _writeEEPROM *****************
 18144 ;; Defined at:
 18145 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 18146 ;; Parameters:    Size  Location     Type
 18147 ;;  address         2   13[COMRAM] unsigned short 
 18148 ;;  data            1   15[COMRAM] unsigned char 
 18149 ;; Auto vars:     Size  Location     Type
 18150 ;;		None
 18151 ;; Return value:  Size  Location     Type
 18152 ;;		None               void
 18153 ;; Registers used:
 18154 ;;		wreg, status,2
 18155 ;; Tracked objects:
 18156 ;;		On entry : 0/0
 18157 ;;		On exit  : 0/0
 18158 ;;		Unchanged: 0/0
 18159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18160 ;;      Params:         3       0       0       0       0       0       0
 18161 ;;      Locals:         0       0       0       0       0       0       0
 18162 ;;      Temps:          0       0       0       0       0       0       0
 18163 ;;      Totals:         3       0       0       0       0       0       0
 18164 ;;Total ram usage:        3 bytes
 18165 ;; Hardware stack levels used:    1
 18166 ;; Hardware stack levels required when called:    2
 18167 ;; This function calls:
 18168 ;;		Nothing
 18169 ;; This function is called by:
 18170 ;;		_main
 18171 ;;		_doOneSecondWork
 18172 ;;		_init_app_eeprom
 18173 ;;		_vscp_writeAppReg
 18174 ;;		_vscp_setGUID
 18175 ;;		_vscp_setUserID
 18176 ;;		_vscp_setManufacturerId
 18177 ;;		_vscp_goBootloaderMode
 18178 ;;		_vscp_writeNicknamePermanent
 18179 ;;		_vscp_setSegmentCRC
 18180 ;;		_vscp_setControlByte
 18181 ;; This function uses a non-reentrant model
 18182 ;;
 18183                           
 18184                           	psect	text87
 18185  004FBC                     __ptext87:
 18186                           	opt stack 0
 18187  004FBC                     _writeEEPROM:
 18188                           	opt stack 27
 18189                           
 18190                           ;eeprom.c: 30: EEADR = address & 0xff;
 18191                           
 18192                           ;incstack = 0
 18193                           ;incstack = 0
 18194  004FBC  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 18195                           
 18196                           ;eeprom.c: 31: EEDATA = data;
 18197  004FC0  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18198                           
 18199                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 18200  004FC4  9EA6               	bcf	4006,7,c	;volatile
 18201                           
 18202                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 18203  004FC6  9CA6               	bcf	4006,6,c	;volatile
 18204                           
 18205                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 18206  004FC8  84A6               	bsf	4006,2,c	;volatile
 18207                           
 18208                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 18209  004FCA  9EF2               	bcf	intcon,7,c	;volatile
 18210                           
 18211                           ;eeprom.c: 38: EECON2 = 0x55;
 18212  004FCC  0E55               	movlw	85
 18213  004FCE  6EA7               	movwf	4007,c	;volatile
 18214                           
 18215                           ;eeprom.c: 39: EECON2 = 0xaa;
 18216  004FD0  0EAA               	movlw	170
 18217  004FD2  6EA7               	movwf	4007,c	;volatile
 18218                           
 18219                           ;eeprom.c: 40: EECON1bits.WR = 1;
 18220  004FD4  82A6               	bsf	4006,1,c	;volatile
 18221                           
 18222                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 18223  004FD6  8EF2               	bsf	intcon,7,c	;volatile
 18224  004FD8                     l912:
 18225  004FD8  A8A1               	btfss	4001,4,c	;volatile
 18226  004FDA  D7FE               	goto	l912
 18227                           
 18228                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 18229  004FDC  98A1               	bcf	4001,4,c	;volatile
 18230                           
 18231                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 18232  004FDE  94A6               	bcf	4006,2,c	;volatile
 18233  004FE0  0012               	return	
 18234  004FE2                     __end_of_writeEEPROM:
 18235                           	opt stack 0
 18236                           tblptru	equ	0xFF8
 18237                           tblptrh	equ	0xFF7
 18238                           tblptrl	equ	0xFF6
 18239                           tablat	equ	0xFF5
 18240                           prodh	equ	0xFF4
 18241                           prodl	equ	0xFF3
 18242                           intcon	equ	0xFF2
 18243                           postinc0	equ	0xFEE
 18244                           wreg	equ	0xFE8
 18245                           indf1	equ	0xFE7
 18246                           postdec1	equ	0xFE5
 18247                           fsr1h	equ	0xFE2
 18248                           fsr1l	equ	0xFE1
 18249                           indf2	equ	0xFDF
 18250                           postinc2	equ	0xFDE
 18251                           postdec2	equ	0xFDD
 18252                           plusw2	equ	0xFDB
 18253                           fsr2h	equ	0xFDA
 18254                           fsr2l	equ	0xFD9
 18255                           status	equ	0xFD8
 18256                           
 18257 ;; *************** function ___awtofl *****************
 18258 ;; Defined at:
 18259 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 18260 ;; Parameters:    Size  Location     Type
 18261 ;;  c               2   23[COMRAM] int 
 18262 ;; Auto vars:     Size  Location     Type
 18263 ;;  f1              4    0        int 
 18264 ;;  sign            1   28[COMRAM] unsigned char 
 18265 ;; Return value:  Size  Location     Type
 18266 ;;                  4   23[COMRAM] unsigned char 
 18267 ;; Registers used:
 18268 ;;		wreg, status,2, status,0, cstack
 18269 ;; Tracked objects:
 18270 ;;		On entry : F/0
 18271 ;;		On exit  : 0/0
 18272 ;;		Unchanged: 0/0
 18273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18274 ;;      Params:         4       0       0       0       0       0       0
 18275 ;;      Locals:         2       0       0       0       0       0       0
 18276 ;;      Temps:          0       0       0       0       0       0       0
 18277 ;;      Totals:         6       0       0       0       0       0       0
 18278 ;;Total ram usage:        6 bytes
 18279 ;; Hardware stack levels used:    1
 18280 ;; Hardware stack levels required when called:    3
 18281 ;; This function calls:
 18282 ;;		___flpack
 18283 ;; This function is called by:
 18284 ;;		_setEventData
 18285 ;;		_exp
 18286 ;;		_log
 18287 ;; This function uses a non-reentrant model
 18288 ;;
 18289                           
 18290                           	psect	text88
 18291  004DCC                     __ptext88:
 18292                           	opt stack 0
 18293  004DCC                     ___awtofl:
 18294                           	opt stack 25
 18295                           
 18296                           ; BSR set to: 0
 18297                           
 18298                           ;incstack = 0
 18299                           ;incstack = 0
 18300  004DCC  6A1D               	clrf	___awtofl@sign,c
 18301  004DCE  AE19               	btfss	___awtofl@c+1,7,c
 18302  004DD0  D005               	goto	l11216
 18303                           
 18304                           ; BSR set to: 0
 18305  004DD2  6C18               	negf	___awtofl@c,c
 18306  004DD4  1E19               	comf	___awtofl@c+1,f,c
 18307  004DD6  B0D8               	btfsc	status,0,c
 18308  004DD8  2A19               	incf	___awtofl@c+1,f,c
 18309  004DDA  2A1D               	incf	___awtofl@sign,f,c
 18310  004DDC                     l11216:
 18311                           
 18312                           ; BSR set to: 0
 18313  004DDC  C018  F00E         	movff	___awtofl@c,?___flpack
 18314  004DE0  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 18315  004DE4  6A10               	clrf	?___flpack+2,c
 18316  004DE6  6A11               	clrf	?___flpack+3,c
 18317  004DE8  0E96               	movlw	150
 18318  004DEA  6E12               	movwf	?___flpack+4,c
 18319  004DEC  C01D  F013         	movff	___awtofl@sign,?___flpack+5
 18320  004DF0  ECD2  F020         	call	___flpack	;wreg free
 18321  004DF4  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 18322  004DF8  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 18323  004DFC  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 18324  004E00  C00E  F018         	movff	?___flpack,?___awtofl
 18325  004E04  0012               	return	
 18326  004E06                     __end_of___awtofl:
 18327                           	opt stack 0
 18328                           tblptru	equ	0xFF8
 18329                           tblptrh	equ	0xFF7
 18330                           tblptrl	equ	0xFF6
 18331                           tablat	equ	0xFF5
 18332                           prodh	equ	0xFF4
 18333                           prodl	equ	0xFF3
 18334                           intcon	equ	0xFF2
 18335                           postinc0	equ	0xFEE
 18336                           wreg	equ	0xFE8
 18337                           indf1	equ	0xFE7
 18338                           postdec1	equ	0xFE5
 18339                           fsr1h	equ	0xFE2
 18340                           fsr1l	equ	0xFE1
 18341                           indf2	equ	0xFDF
 18342                           postinc2	equ	0xFDE
 18343                           postdec2	equ	0xFDD
 18344                           plusw2	equ	0xFDB
 18345                           fsr2h	equ	0xFDA
 18346                           fsr2l	equ	0xFD9
 18347                           status	equ	0xFD8
 18348                           
 18349 ;; *************** function ___flmul *****************
 18350 ;; Defined at:
 18351 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 18352 ;; Parameters:    Size  Location     Type
 18353 ;;  f1              4    8[BANK0 ] unsigned char 
 18354 ;;  f2              4   12[BANK0 ] unsigned char 
 18355 ;; Auto vars:     Size  Location     Type
 18356 ;;  f3_as_produc    4   24[BANK0 ] unsigned long 
 18357 ;;  sign            1   29[BANK0 ] unsigned char 
 18358 ;;  cntr            1   28[BANK0 ] unsigned char 
 18359 ;;  exp             1   23[BANK0 ] unsigned char 
 18360 ;; Return value:  Size  Location     Type
 18361 ;;                  4    8[BANK0 ] unsigned char 
 18362 ;; Registers used:
 18363 ;;		wreg, status,2, status,0, cstack
 18364 ;; Tracked objects:
 18365 ;;		On entry : 0/0
 18366 ;;		On exit  : 0/0
 18367 ;;		Unchanged: 0/0
 18368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18369 ;;      Params:         0       8       0       0       0       0       0
 18370 ;;      Locals:         0      14       0       0       0       0       0
 18371 ;;      Temps:          0       0       0       0       0       0       0
 18372 ;;      Totals:         0      22       0       0       0       0       0
 18373 ;;Total ram usage:       22 bytes
 18374 ;; Hardware stack levels used:    1
 18375 ;; Hardware stack levels required when called:    3
 18376 ;; This function calls:
 18377 ;;		___flpack
 18378 ;; This function is called by:
 18379 ;;		_doWork
 18380 ;;		_Celsius2Fahrenheit
 18381 ;;		___asflmul
 18382 ;;		_log
 18383 ;;		_eval_poly
 18384 ;; This function uses a non-reentrant model
 18385 ;;
 18386                           
 18387                           	psect	text89
 18388  004022                     __ptext89:
 18389                           	opt stack 0
 18390  004022                     ___flmul:
 18391                           	opt stack 26
 18392                           
 18393                           ;incstack = 0
 18394                           ;incstack = 0
 18395  004022  0100               	movlb	0	; () banked
 18396  004024  356A               	rlcf	(___flmul@f1+2)& (0+255),w,b
 18397  004026  356B               	rlcf	(___flmul@f1+3)& (0+255),w,b
 18398  004028  6F77               	movwf	___flmul@exp& (0+255),b
 18399  00402A  6777               	tstfsz	___flmul@exp& (0+255),b
 18400  00402C  D001               	goto	l11160
 18401  00402E  D006               	goto	u9920
 18402  004030                     l11160:
 18403                           
 18404                           ; BSR set to: 0
 18405  004030  0100               	movlb	0	; () banked
 18406  004032  356E               	rlcf	(___flmul@f2+2)& (0+255),w,b
 18407  004034  356F               	rlcf	(___flmul@f2+3)& (0+255),w,b
 18408  004036  6F7D               	movwf	___flmul@sign& (0+255),b
 18409  004038  677D               	tstfsz	___flmul@sign& (0+255),b
 18410  00403A  D005               	goto	l11164
 18411  00403C                     u9920:
 18412                           
 18413                           ; BSR set to: 0
 18414  00403C  6B68               	clrf	?___flmul& (0+255),b
 18415  00403E  6B69               	clrf	(?___flmul+1)& (0+255),b
 18416  004040  6B6A               	clrf	(?___flmul+2)& (0+255),b
 18417  004042  6B6B               	clrf	(?___flmul+3)& (0+255),b
 18418  004044  D041               	goto	l1616
 18419  004046                     l11164:
 18420                           
 18421                           ; BSR set to: 0
 18422  004046  517D               	movf	___flmul@sign& (0+255),w,b
 18423  004048  0F7B               	addlw	123
 18424  00404A  2777               	addwf	___flmul@exp& (0+255),f,b
 18425                           
 18426                           ; BSR set to: 0
 18427  00404C  C06B  F07D         	movff	___flmul@f1+3,___flmul@sign
 18428  004050  0100               	movlb	0	; () banked
 18429  004052  516F               	movf	(___flmul@f2+3)& (0+255),w,b
 18430  004054  1B7D               	xorwf	___flmul@sign& (0+255),f,b
 18431  004056  0E80               	movlw	128
 18432  004058  177D               	andwf	___flmul@sign& (0+255),f,b
 18433                           
 18434                           ; BSR set to: 0
 18435  00405A  8F6A               	bsf	(___flmul@f1+2)& (0+255),7,b
 18436                           
 18437                           ; BSR set to: 0
 18438  00405C  8F6E               	bsf	(___flmul@f2+2)& (0+255),7,b
 18439  00405E  6B6F               	clrf	(___flmul@f2+3)& (0+255),b
 18440                           
 18441                           ; BSR set to: 0
 18442  004060  6B78               	clrf	___flmul@f3_as_product& (0+255),b
 18443  004062  6B79               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 18444  004064  6B7A               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 18445  004066  6B7B               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 18446                           
 18447                           ; BSR set to: 0
 18448  004068  0E07               	movlw	7
 18449  00406A  6F7C               	movwf	___flmul@cntr& (0+255),b
 18450  00406C                     l11176:
 18451                           
 18452                           ; BSR set to: 0
 18453  00406C  A168               	btfss	___flmul@f1& (0+255),0,b
 18454  00406E  D002               	goto	l11180
 18455                           
 18456                           ; BSR set to: 0
 18457  004070  516C               	movf	___flmul@f2& (0+255),w,b
 18458  004072  D82B               	call	PL66	;call to abstracted procedure
 18459  004074                     l11180:
 18460                           
 18461                           ; BSR set to: 0
 18462                           
 18463                           ; BSR set to: 0
 18464  004074  D832               	call	PL74	;call to abstracted procedure
 18465  004076  376C               	rlcf	___flmul@f2& (0+255),f,b
 18466  004078  376D               	rlcf	(___flmul@f2+1)& (0+255),f,b
 18467  00407A  376E               	rlcf	(___flmul@f2+2)& (0+255),f,b
 18468  00407C  376F               	rlcf	(___flmul@f2+3)& (0+255),f,b
 18469                           
 18470                           ; BSR set to: 0
 18471  00407E  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
 18472  004080  D7F5               	goto	l11176
 18473                           
 18474                           ; BSR set to: 0
 18475  004082  0E11               	movlw	17
 18476  004084  6F7C               	movwf	___flmul@cntr& (0+255),b
 18477  004086                     l11188:
 18478                           
 18479                           ; BSR set to: 0
 18480  004086  A168               	btfss	___flmul@f1& (0+255),0,b
 18481  004088  D002               	goto	l11192
 18482                           
 18483                           ; BSR set to: 0
 18484  00408A  516C               	movf	___flmul@f2& (0+255),w,b
 18485  00408C  D81E               	call	PL66	;call to abstracted procedure
 18486  00408E                     l11192:
 18487                           
 18488                           ; BSR set to: 0
 18489                           
 18490                           ; BSR set to: 0
 18491  00408E  D825               	call	PL74	;call to abstracted procedure
 18492  004090  337B               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 18493  004092  337A               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 18494  004094  3379               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 18495  004096  3378               	rrcf	___flmul@f3_as_product& (0+255),f,b
 18496                           
 18497                           ; BSR set to: 0
 18498  004098  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
 18499  00409A  D7F5               	goto	l11188
 18500                           
 18501                           ; BSR set to: 0
 18502  00409C  C078  F00E         	movff	___flmul@f3_as_product,?___flpack
 18503  0040A0  C079  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 18504  0040A4  C07A  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 18505  0040A8  C07B  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 18506  0040AC  C077  F012         	movff	___flmul@exp,?___flpack+4
 18507  0040B0  C07D  F013         	movff	___flmul@sign,?___flpack+5
 18508  0040B4  ECD2  F020         	call	___flpack	;wreg free
 18509  0040B8  C011  F06B         	movff	?___flpack+3,?___flmul+3
 18510  0040BC  C010  F06A         	movff	?___flpack+2,?___flmul+2
 18511  0040C0  C00F  F069         	movff	?___flpack+1,?___flmul+1
 18512  0040C4  C00E  F068         	movff	?___flpack,?___flmul
 18513  0040C8                     l1616:
 18514  0040C8  0012               	return	
 18515  0040CA                     __end_of___flmul:
 18516                           	opt stack 0
 18517  0040CA                     PL66:
 18518                           	opt stack 26
 18519  0040CA  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
 18520  0040CC  516D               	movf	(___flmul@f2+1)& (0+255),w,b
 18521  0040CE  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 18522  0040D0  516E               	movf	(___flmul@f2+2)& (0+255),w,b
 18523  0040D2  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 18524  0040D4  516F               	movf	(___flmul@f2+3)& (0+255),w,b
 18525  0040D6  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 18526  0040D8  0012               	return	
 18527  0040DA                     __end_ofPL66:
 18528                           	opt stack 0
 18529  0040DA                     PL74:
 18530                           	opt stack 26
 18531  0040DA  90D8               	bcf	status,0,c
 18532  0040DC  336B               	rrcf	(___flmul@f1+3)& (0+255),f,b
 18533  0040DE  336A               	rrcf	(___flmul@f1+2)& (0+255),f,b
 18534  0040E0  3369               	rrcf	(___flmul@f1+1)& (0+255),f,b
 18535  0040E2  3368               	rrcf	___flmul@f1& (0+255),f,b
 18536  0040E4  90D8               	bcf	status,0,c
 18537  0040E6  0012               	return	
 18538  0040E8                     __end_ofPL74:
 18539                           	opt stack 0
 18540                           tblptru	equ	0xFF8
 18541                           tblptrh	equ	0xFF7
 18542                           tblptrl	equ	0xFF6
 18543                           tablat	equ	0xFF5
 18544                           prodh	equ	0xFF4
 18545                           prodl	equ	0xFF3
 18546                           intcon	equ	0xFF2
 18547                           postinc0	equ	0xFEE
 18548                           wreg	equ	0xFE8
 18549                           indf1	equ	0xFE7
 18550                           postdec1	equ	0xFE5
 18551                           fsr1h	equ	0xFE2
 18552                           fsr1l	equ	0xFE1
 18553                           indf2	equ	0xFDF
 18554                           postinc2	equ	0xFDE
 18555                           postdec2	equ	0xFDD
 18556                           plusw2	equ	0xFDB
 18557                           fsr2h	equ	0xFDA
 18558                           fsr2l	equ	0xFD9
 18559                           status	equ	0xFD8
 18560                           
 18561 ;; *************** function ___flpack *****************
 18562 ;; Defined at:
 18563 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 18564 ;; Parameters:    Size  Location     Type
 18565 ;;  arg             4   13[COMRAM] unsigned long 
 18566 ;;  exp             1   17[COMRAM] unsigned char 
 18567 ;;  sign            1   18[COMRAM] unsigned char 
 18568 ;; Auto vars:     Size  Location     Type
 18569 ;;		None
 18570 ;; Return value:  Size  Location     Type
 18571 ;;                  4   13[COMRAM] unsigned char 
 18572 ;; Registers used:
 18573 ;;		wreg, status,2, status,0
 18574 ;; Tracked objects:
 18575 ;;		On entry : 0/0
 18576 ;;		On exit  : 0/0
 18577 ;;		Unchanged: 0/0
 18578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18579 ;;      Params:         6       0       0       0       0       0       0
 18580 ;;      Locals:         0       0       0       0       0       0       0
 18581 ;;      Temps:          4       0       0       0       0       0       0
 18582 ;;      Totals:        10       0       0       0       0       0       0
 18583 ;;Total ram usage:       10 bytes
 18584 ;; Hardware stack levels used:    1
 18585 ;; Hardware stack levels required when called:    2
 18586 ;; This function calls:
 18587 ;;		Nothing
 18588 ;; This function is called by:
 18589 ;;		___altofl
 18590 ;;		___awtofl
 18591 ;;		___fladd
 18592 ;;		___fldiv
 18593 ;;		___flmul
 18594 ;;		___lwtofl
 18595 ;; This function uses a non-reentrant model
 18596 ;;
 18597                           
 18598                           	psect	text90
 18599  0041A4                     __ptext90:
 18600                           	opt stack 0
 18601  0041A4                     ___flpack:
 18602                           	opt stack 26
 18603                           
 18604                           ;incstack = 0
 18605                           ;incstack = 0
 18606  0041A4  5012               	movf	___flpack@exp,w,c
 18607  0041A6  E005               	bz	l1531
 18608  0041A8  5011               	movf	___flpack@arg+3,w,c
 18609  0041AA  100E               	iorwf	___flpack@arg,w,c
 18610  0041AC  100F               	iorwf	___flpack@arg+1,w,c
 18611  0041AE  1010               	iorwf	___flpack@arg+2,w,c
 18612  0041B0  E107               	bnz	l10966
 18613  0041B2                     l1531:
 18614  0041B2  6A0E               	clrf	?___flpack,c
 18615  0041B4  6A0F               	clrf	?___flpack+1,c
 18616  0041B6  6A10               	clrf	?___flpack+2,c
 18617  0041B8  6A11               	clrf	?___flpack+3,c
 18618  0041BA  D04B               	goto	l1532
 18619  0041BC                     l10964:
 18620  0041BC  2A12               	incf	___flpack@exp,f,c
 18621  0041BE  D84A               	call	PL86	;call to abstracted procedure
 18622  0041C0                     l10966:
 18623  0041C0  6A14               	clrf	??___flpack& (0+255),c
 18624  0041C2  6A15               	clrf	(??___flpack+1)& (0+255),c
 18625  0041C4  6A16               	clrf	(??___flpack+2)& (0+255),c
 18626  0041C6  0EFE               	movlw	254
 18627  0041C8  1411               	andwf	___flpack@arg+3,w,c
 18628  0041CA  6E17               	movwf	(??___flpack+3)& (0+255),c
 18629  0041CC  5017               	movf	??___flpack+3,w,c
 18630  0041CE  1014               	iorwf	??___flpack,w,c
 18631  0041D0  1015               	iorwf	??___flpack+1,w,c
 18632  0041D2  1016               	iorwf	??___flpack+2,w,c
 18633  0041D4  E008               	bz	l1536
 18634  0041D6  D7F2               	goto	l10964
 18635  0041D8                     l10968:
 18636  0041D8  2A12               	incf	___flpack@exp,f,c
 18637  0041DA  2A0E               	incf	___flpack@arg,f,c
 18638  0041DC  0E00               	movlw	0
 18639  0041DE  220F               	addwfc	___flpack@arg+1,f,c
 18640  0041E0  2210               	addwfc	___flpack@arg+2,f,c
 18641  0041E2  2211               	addwfc	___flpack@arg+3,f,c
 18642  0041E4  D837               	call	PL86	;call to abstracted procedure
 18643  0041E6                     l1536:
 18644  0041E6  6A14               	clrf	??___flpack& (0+255),c
 18645  0041E8  6A15               	clrf	(??___flpack+1)& (0+255),c
 18646  0041EA  6A16               	clrf	(??___flpack+2)& (0+255),c
 18647  0041EC  5011               	movf	___flpack@arg+3,w,c
 18648  0041EE  6E17               	movwf	(??___flpack+3)& (0+255),c
 18649  0041F0  5017               	movf	??___flpack+3,w,c
 18650  0041F2  1014               	iorwf	??___flpack,w,c
 18651  0041F4  1015               	iorwf	??___flpack+1,w,c
 18652  0041F6  1016               	iorwf	??___flpack+2,w,c
 18653  0041F8  E007               	bz	l10976
 18654  0041FA  D7EE               	goto	l10968
 18655  0041FC                     l10974:
 18656  0041FC  0612               	decf	___flpack@exp,f,c
 18657  0041FE  90D8               	bcf	status,0,c
 18658  004200  360E               	rlcf	___flpack@arg,f,c
 18659  004202  360F               	rlcf	___flpack@arg+1,f,c
 18660  004204  3610               	rlcf	___flpack@arg+2,f,c
 18661  004206  3611               	rlcf	___flpack@arg+3,f,c
 18662  004208                     l10976:
 18663  004208  AE10               	btfss	___flpack@arg+2,7,c
 18664  00420A  D7F8               	goto	l10974
 18665  00420C  B012               	btfsc	___flpack@exp,0,c
 18666  00420E  D002               	goto	l1542
 18667  004210  0E7F               	movlw	127
 18668  004212  1610               	andwf	___flpack@arg+2,f,c
 18669  004214                     l1542:
 18670  004214  90D8               	bcf	status,0,c
 18671  004216  3212               	rrcf	___flpack@exp,f,c
 18672  004218  C012  F014         	movff	___flpack@exp,??___flpack
 18673  00421C  6A15               	clrf	(??___flpack+1)& (0+255),c
 18674  00421E  6A16               	clrf	(??___flpack+2)& (0+255),c
 18675  004220  6A17               	clrf	(??___flpack+3)& (0+255),c
 18676  004222  C014  F017         	movff	??___flpack,??___flpack+3
 18677  004226  6A16               	clrf	??___flpack+2,c
 18678  004228  6A15               	clrf	??___flpack+1,c
 18679  00422A  6A14               	clrf	??___flpack,c
 18680  00422C  5014               	movf	??___flpack,w,c
 18681  00422E  120E               	iorwf	___flpack@arg,f,c
 18682  004230  5015               	movf	??___flpack+1,w,c
 18683  004232  120F               	iorwf	___flpack@arg+1,f,c
 18684  004234  5016               	movf	??___flpack+2,w,c
 18685  004236  1210               	iorwf	___flpack@arg+2,f,c
 18686  004238  5017               	movf	??___flpack+3,w,c
 18687  00423A  1211               	iorwf	___flpack@arg+3,f,c
 18688  00423C  5013               	movf	___flpack@sign,w,c
 18689  00423E  A4D8               	btfss	status,2,c
 18690  004240  8E11               	bsf	___flpack@arg+3,7,c
 18691  004242  C00E  F00E         	movff	___flpack@arg,?___flpack
 18692  004246  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 18693  00424A  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 18694  00424E  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 18695  004252                     l1532:
 18696  004252  0012               	return	
 18697  004254                     __end_of___flpack:
 18698                           	opt stack 0
 18699  004254                     PL86:
 18700                           	opt stack 26
 18701  004254  90D8               	bcf	status,0,c
 18702  004256  3211               	rrcf	___flpack@arg+3,f,c
 18703  004258  3210               	rrcf	___flpack@arg+2,f,c
 18704  00425A  320F               	rrcf	___flpack@arg+1,f,c
 18705  00425C  320E               	rrcf	___flpack@arg,f,c
 18706  00425E  0012               	return	
 18707  004260                     __end_ofPL86:
 18708                           	opt stack 0
 18709                           tblptru	equ	0xFF8
 18710                           tblptrh	equ	0xFF7
 18711                           tblptrl	equ	0xFF6
 18712                           tablat	equ	0xFF5
 18713                           prodh	equ	0xFF4
 18714                           prodl	equ	0xFF3
 18715                           intcon	equ	0xFF2
 18716                           postinc0	equ	0xFEE
 18717                           wreg	equ	0xFE8
 18718                           indf1	equ	0xFE7
 18719                           postdec1	equ	0xFE5
 18720                           fsr1h	equ	0xFE2
 18721                           fsr1l	equ	0xFE1
 18722                           indf2	equ	0xFDF
 18723                           postinc2	equ	0xFDE
 18724                           postdec2	equ	0xFDD
 18725                           plusw2	equ	0xFDB
 18726                           fsr2h	equ	0xFDA
 18727                           fsr2l	equ	0xFD9
 18728                           status	equ	0xFD8
 18729                           
 18730 ;; *************** function _vscp_readAppReg *****************
 18731 ;; Defined at:
 18732 ;;		line 1271 in file "../main.c"
 18733 ;; Parameters:    Size  Location     Type
 18734 ;;  reg             1    wreg     unsigned char 
 18735 ;; Auto vars:     Size  Location     Type
 18736 ;;  reg             1   26[COMRAM] unsigned char 
 18737 ;;  pos             1   25[COMRAM] unsigned char 
 18738 ;;  rv              1   27[COMRAM] unsigned char 
 18739 ;; Return value:  Size  Location     Type
 18740 ;;                  1    wreg      unsigned char 
 18741 ;; Registers used:
 18742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18743 ;; Tracked objects:
 18744 ;;		On entry : F/0
 18745 ;;		On exit  : 0/0
 18746 ;;		Unchanged: 0/0
 18747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18748 ;;      Params:         0       0       0       0       0       0       0
 18749 ;;      Locals:         3       0       0       0       0       0       0
 18750 ;;      Temps:          0       0       0       0       0       0       0
 18751 ;;      Totals:         3       0       0       0       0       0       0
 18752 ;;Total ram usage:        3 bytes
 18753 ;; Hardware stack levels used:    1
 18754 ;; Hardware stack levels required when called:    3
 18755 ;; This function calls:
 18756 ;;		_readEEPROM
 18757 ;; This function is called by:
 18758 ;;		_vscp_readRegister
 18759 ;;		_vscp_handleProtocolEvent
 18760 ;; This function uses a non-reentrant model
 18761 ;;
 18762                           
 18763                           	psect	text91
 18764  001368                     __ptext91:
 18765                           	opt stack 0
 18766  001368                     _vscp_readAppReg:
 18767                           	opt stack 25
 18768                           
 18769                           ;incstack = 0
 18770                           ;incstack = 0
 18771                           ;vscp_readAppReg@reg stored from wreg
 18772  001368  CFE8 F01B          	movff	wreg,vscp_readAppReg@reg
 18773                           
 18774                           ; BSR set to: 0
 18775                           ;main.c: 1272: uint8_t rv;
 18776                           ;main.c: 1277: if (0 == vscp_page_select) {
 18777  00136C  5047               	movf	_vscp_page_select+1,w,c
 18778  00136E  1046               	iorwf	_vscp_page_select,w,c
 18779  001370  E101 D25B          	bz	l10318
 18780  001374  D39F               	goto	l10320
 18781  001376                     l10116:
 18782                           
 18783                           ; BSR set to: 0
 18784                           ;main.c: 1283: rv = readEEPROM( 0x41 );
 18785  001376  6A17               	clrf	?_readEEPROM+1,c
 18786  001378  0E41               	movlw	65
 18787  00137A  6E16               	movwf	?_readEEPROM,c
 18788  00137C  ECC0  F028         	call	_readEEPROM	;wreg free
 18789  001380  D3C6               	goto	L53
 18790  001382                     l10118:
 18791                           
 18792                           ; BSR set to: 0
 18793                           ;main.c: 1288: rv = readEEPROM( 0x42 );
 18794  001382  6A17               	clrf	?_readEEPROM+1,c
 18795  001384  0E42               	movlw	66
 18796  001386  6E16               	movwf	?_readEEPROM,c
 18797  001388  ECC0  F028         	call	_readEEPROM	;wreg free
 18798  00138C  D3C0               	goto	L53
 18799  00138E                     l10120:
 18800                           
 18801                           ; BSR set to: 0
 18802                           ;main.c: 1293: rv = readEEPROM( 0x43 );
 18803  00138E  6A17               	clrf	?_readEEPROM+1,c
 18804  001390  0E43               	movlw	67
 18805  001392  6E16               	movwf	?_readEEPROM,c
 18806  001394  ECC0  F028         	call	_readEEPROM	;wreg free
 18807  001398  D3BA               	goto	L53
 18808  00139A                     l10122:
 18809                           
 18810                           ; BSR set to: 0
 18811                           ;main.c: 1298: rv = readEEPROM (0x44 );
 18812  00139A  6A17               	clrf	?_readEEPROM+1,c
 18813  00139C  0E44               	movlw	68
 18814  00139E  6E16               	movwf	?_readEEPROM,c
 18815  0013A0  ECC0  F028         	call	_readEEPROM	;wreg free
 18816  0013A4  D3B4               	goto	L53
 18817  0013A6                     l10124:
 18818                           
 18819                           ; BSR set to: 0
 18820                           ;main.c: 1303: rv = readEEPROM( 0x45 );
 18821  0013A6  6A17               	clrf	?_readEEPROM+1,c
 18822  0013A8  0E45               	movlw	69
 18823  0013AA  6E16               	movwf	?_readEEPROM,c
 18824  0013AC  ECC0  F028         	call	_readEEPROM	;wreg free
 18825  0013B0  D3AE               	goto	L53
 18826  0013B2                     l10126:
 18827                           
 18828                           ; BSR set to: 0
 18829                           ;main.c: 1308: rv = readEEPROM( 0x46 );
 18830  0013B2  6A17               	clrf	?_readEEPROM+1,c
 18831  0013B4  0E46               	movlw	70
 18832  0013B6  6E16               	movwf	?_readEEPROM,c
 18833  0013B8  ECC0  F028         	call	_readEEPROM	;wreg free
 18834  0013BC  D3A8               	goto	L53
 18835  0013BE                     l10128:
 18836                           
 18837                           ; BSR set to: 0
 18838                           ;main.c: 1313: rv = readEEPROM( 0x47 );
 18839  0013BE  6A17               	clrf	?_readEEPROM+1,c
 18840  0013C0  0E47               	movlw	71
 18841  0013C2  6E16               	movwf	?_readEEPROM,c
 18842  0013C4  ECC0  F028         	call	_readEEPROM	;wreg free
 18843  0013C8  D3A2               	goto	L53
 18844  0013CA                     l10130:
 18845                           
 18846                           ; BSR set to: 0
 18847                           ;main.c: 1318: rv = readEEPROM( 0x48 );
 18848  0013CA  6A17               	clrf	?_readEEPROM+1,c
 18849  0013CC  0E48               	movlw	72
 18850  0013CE  6E16               	movwf	?_readEEPROM,c
 18851  0013D0  ECC0  F028         	call	_readEEPROM	;wreg free
 18852  0013D4  D39C               	goto	L53
 18853  0013D6                     l10132:
 18854                           
 18855                           ; BSR set to: 0
 18856                           ;main.c: 1323: rv = ((current_temp[0] & 0xff00) >> 8);
 18857  0013D6  0101               	movlb	1	; () banked
 18858  0013D8  5101               	movf	(_current_temp+1)& (0+255),w,b
 18859  0013DA  D399               	goto	L53
 18860  0013DC                     l309:
 18861                           
 18862                           ; BSR set to: 0
 18863                           ;main.c: 1328: rv = (current_temp[0] & 0x00ff);
 18864  0013DC  C100  F01C         	movff	_current_temp,vscp_readAppReg@rv
 18865                           
 18866                           ;main.c: 1329: break;
 18867  0013E0  D397               	goto	l10342
 18868  0013E2                     l10134:
 18869                           
 18870                           ; BSR set to: 0
 18871                           ;main.c: 1333: rv = ((current_temp[1] & 0xff00) >> 8);
 18872  0013E2  0101               	movlb	1	; () banked
 18873  0013E4  5103               	movf	(_current_temp+3)& (0+255),w,b
 18874  0013E6  D393               	goto	L53
 18875  0013E8                     l311:
 18876                           
 18877                           ; BSR set to: 0
 18878                           ;main.c: 1338: rv = (current_temp[1] & 0x00ff);
 18879  0013E8  C102  F01C         	movff	_current_temp+2,vscp_readAppReg@rv
 18880                           
 18881                           ;main.c: 1339: break;
 18882  0013EC  D391               	goto	l10342
 18883  0013EE                     l10136:
 18884                           
 18885                           ; BSR set to: 0
 18886                           ;main.c: 1343: rv = ((current_temp[2] & 0xff00) >> 8);
 18887  0013EE  0101               	movlb	1	; () banked
 18888  0013F0  5105               	movf	(_current_temp+5)& (0+255),w,b
 18889  0013F2  D38D               	goto	L53
 18890  0013F4                     l313:
 18891                           
 18892                           ; BSR set to: 0
 18893                           ;main.c: 1348: rv = (current_temp[2] & 0x00ff);
 18894  0013F4  C104  F01C         	movff	_current_temp+4,vscp_readAppReg@rv
 18895                           
 18896                           ;main.c: 1349: break;
 18897  0013F8  D38B               	goto	l10342
 18898  0013FA                     l10138:
 18899                           
 18900                           ; BSR set to: 0
 18901                           ;main.c: 1353: rv = ((current_temp[3] & 0xff00) >> 8);
 18902  0013FA  0101               	movlb	1	; () banked
 18903  0013FC  5107               	movf	(_current_temp+7)& (0+255),w,b
 18904  0013FE  D387               	goto	L53
 18905  001400                     l315:
 18906                           
 18907                           ; BSR set to: 0
 18908                           ;main.c: 1358: rv = (current_temp[3] & 0x00ff);
 18909  001400  C106  F01C         	movff	_current_temp+6,vscp_readAppReg@rv
 18910                           
 18911                           ;main.c: 1359: break;
 18912  001404  D385               	goto	l10342
 18913  001406                     l10140:
 18914                           
 18915                           ; BSR set to: 0
 18916                           ;main.c: 1363: rv = ((current_temp[4] & 0xff00) >> 8);
 18917  001406  0101               	movlb	1	; () banked
 18918  001408  5109               	movf	(_current_temp+9)& (0+255),w,b
 18919  00140A  D381               	goto	L53
 18920  00140C                     l317:
 18921                           
 18922                           ; BSR set to: 0
 18923                           ;main.c: 1368: rv = (current_temp[4] & 0x00ff);
 18924  00140C  C108  F01C         	movff	_current_temp+8,vscp_readAppReg@rv
 18925                           
 18926                           ;main.c: 1369: break;
 18927  001410  D37F               	goto	l10342
 18928  001412                     l10142:
 18929                           
 18930                           ; BSR set to: 0
 18931                           ;main.c: 1373: rv = ((current_temp[5] & 0xff00) >> 8);
 18932  001412  0101               	movlb	1	; () banked
 18933  001414  510B               	movf	(_current_temp+11)& (0+255),w,b
 18934  001416  D37B               	goto	L53
 18935  001418                     l319:
 18936                           
 18937                           ; BSR set to: 0
 18938                           ;main.c: 1378: rv = (current_temp[5] & 0x00ff);
 18939  001418  C10A  F01C         	movff	_current_temp+10,vscp_readAppReg@rv
 18940                           
 18941                           ;main.c: 1379: break;
 18942  00141C  D379               	goto	l10342
 18943  00141E                     l10144:
 18944                           
 18945                           ; BSR set to: 0
 18946                           ;main.c: 1383: rv = readEEPROM(0x49);
 18947  00141E  6A17               	clrf	?_readEEPROM+1,c
 18948  001420  0E49               	movlw	73
 18949  001422  6E16               	movwf	?_readEEPROM,c
 18950  001424  ECC0  F028         	call	_readEEPROM	;wreg free
 18951  001428  D372               	goto	L53
 18952  00142A                     l10146:
 18953                           
 18954                           ; BSR set to: 0
 18955                           ;main.c: 1388: rv = readEEPROM(0x4A);
 18956  00142A  6A17               	clrf	?_readEEPROM+1,c
 18957  00142C  0E4A               	movlw	74
 18958  00142E  6E16               	movwf	?_readEEPROM,c
 18959  001430  ECC0  F028         	call	_readEEPROM	;wreg free
 18960  001434  D36C               	goto	L53
 18961  001436                     l10148:
 18962                           
 18963                           ; BSR set to: 0
 18964                           ;main.c: 1393: rv = readEEPROM(0x4B);
 18965  001436  6A17               	clrf	?_readEEPROM+1,c
 18966  001438  0E4B               	movlw	75
 18967  00143A  6E16               	movwf	?_readEEPROM,c
 18968  00143C  ECC0  F028         	call	_readEEPROM	;wreg free
 18969  001440  D366               	goto	L53
 18970  001442                     l10150:
 18971                           
 18972                           ; BSR set to: 0
 18973                           ;main.c: 1398: rv = readEEPROM(0x4C);
 18974  001442  6A17               	clrf	?_readEEPROM+1,c
 18975  001444  0E4C               	movlw	76
 18976  001446  6E16               	movwf	?_readEEPROM,c
 18977  001448  ECC0  F028         	call	_readEEPROM	;wreg free
 18978  00144C  D360               	goto	L53
 18979  00144E                     l10152:
 18980                           
 18981                           ; BSR set to: 0
 18982                           ;main.c: 1403: rv = readEEPROM(0x4D);
 18983  00144E  6A17               	clrf	?_readEEPROM+1,c
 18984  001450  0E4D               	movlw	77
 18985  001452  6E16               	movwf	?_readEEPROM,c
 18986  001454  ECC0  F028         	call	_readEEPROM	;wreg free
 18987  001458  D35A               	goto	L53
 18988  00145A                     l10154:
 18989                           
 18990                           ; BSR set to: 0
 18991                           ;main.c: 1408: rv = readEEPROM(0x4E);
 18992  00145A  6A17               	clrf	?_readEEPROM+1,c
 18993  00145C  0E4E               	movlw	78
 18994  00145E  6E16               	movwf	?_readEEPROM,c
 18995  001460  ECC0  F028         	call	_readEEPROM	;wreg free
 18996  001464  D354               	goto	L53
 18997  001466                     l10156:
 18998                           
 18999                           ; BSR set to: 0
 19000                           ;main.c: 1415: rv = readEEPROM(0x4F);
 19001  001466  6A17               	clrf	?_readEEPROM+1,c
 19002  001468  0E4F               	movlw	79
 19003  00146A  6E16               	movwf	?_readEEPROM,c
 19004  00146C  ECC0  F028         	call	_readEEPROM	;wreg free
 19005  001470  D34E               	goto	L53
 19006  001472                     l10158:
 19007                           
 19008                           ; BSR set to: 0
 19009                           ;main.c: 1420: rv = readEEPROM(0x50);
 19010  001472  6A17               	clrf	?_readEEPROM+1,c
 19011  001474  0E50               	movlw	80
 19012  001476  6E16               	movwf	?_readEEPROM,c
 19013  001478  ECC0  F028         	call	_readEEPROM	;wreg free
 19014  00147C  D348               	goto	L53
 19015  00147E                     l10160:
 19016                           
 19017                           ; BSR set to: 0
 19018                           ;main.c: 1425: rv = readEEPROM(0x51);
 19019  00147E  6A17               	clrf	?_readEEPROM+1,c
 19020  001480  0E51               	movlw	81
 19021  001482  6E16               	movwf	?_readEEPROM,c
 19022  001484  ECC0  F028         	call	_readEEPROM	;wreg free
 19023  001488  D342               	goto	L53
 19024  00148A                     l10162:
 19025                           
 19026                           ; BSR set to: 0
 19027                           ;main.c: 1430: rv = readEEPROM(0x52);
 19028  00148A  6A17               	clrf	?_readEEPROM+1,c
 19029  00148C  0E52               	movlw	82
 19030  00148E  6E16               	movwf	?_readEEPROM,c
 19031  001490  ECC0  F028         	call	_readEEPROM	;wreg free
 19032  001494  D33C               	goto	L53
 19033  001496                     l10164:
 19034                           
 19035                           ; BSR set to: 0
 19036                           ;main.c: 1435: rv = readEEPROM(0x53);
 19037  001496  6A17               	clrf	?_readEEPROM+1,c
 19038  001498  0E53               	movlw	83
 19039  00149A  6E16               	movwf	?_readEEPROM,c
 19040  00149C  ECC0  F028         	call	_readEEPROM	;wreg free
 19041  0014A0  D336               	goto	L53
 19042  0014A2                     l10166:
 19043                           
 19044                           ; BSR set to: 0
 19045                           ;main.c: 1440: rv = readEEPROM(0x54);
 19046  0014A2  6A17               	clrf	?_readEEPROM+1,c
 19047  0014A4  0E54               	movlw	84
 19048  0014A6  6E16               	movwf	?_readEEPROM,c
 19049  0014A8  ECC0  F028         	call	_readEEPROM	;wreg free
 19050  0014AC  D330               	goto	L53
 19051  0014AE                     l10168:
 19052                           
 19053                           ; BSR set to: 0
 19054                           ;main.c: 1445: rv = readEEPROM(0x55);
 19055  0014AE  6A17               	clrf	?_readEEPROM+1,c
 19056  0014B0  0E55               	movlw	85
 19057  0014B2  6E16               	movwf	?_readEEPROM,c
 19058  0014B4  ECC0  F028         	call	_readEEPROM	;wreg free
 19059  0014B8  D32A               	goto	L53
 19060  0014BA                     l10170:
 19061                           
 19062                           ; BSR set to: 0
 19063                           ;main.c: 1450: rv = readEEPROM(0x56);
 19064  0014BA  6A17               	clrf	?_readEEPROM+1,c
 19065  0014BC  0E56               	movlw	86
 19066  0014BE  6E16               	movwf	?_readEEPROM,c
 19067  0014C0  ECC0  F028         	call	_readEEPROM	;wreg free
 19068  0014C4  D324               	goto	L53
 19069  0014C6                     l10172:
 19070                           
 19071                           ; BSR set to: 0
 19072                           ;main.c: 1455: rv = readEEPROM(0x57);
 19073  0014C6  6A17               	clrf	?_readEEPROM+1,c
 19074  0014C8  0E57               	movlw	87
 19075  0014CA  6E16               	movwf	?_readEEPROM,c
 19076  0014CC  ECC0  F028         	call	_readEEPROM	;wreg free
 19077  0014D0  D31E               	goto	L53
 19078  0014D2                     l10174:
 19079                           
 19080                           ; BSR set to: 0
 19081                           ;main.c: 1460: rv = readEEPROM(0x58);
 19082  0014D2  6A17               	clrf	?_readEEPROM+1,c
 19083  0014D4  0E58               	movlw	88
 19084  0014D6  6E16               	movwf	?_readEEPROM,c
 19085  0014D8  ECC0  F028         	call	_readEEPROM	;wreg free
 19086  0014DC  D318               	goto	L53
 19087  0014DE                     l10176:
 19088                           
 19089                           ; BSR set to: 0
 19090                           ;main.c: 1465: rv = readEEPROM(0x59);
 19091  0014DE  6A17               	clrf	?_readEEPROM+1,c
 19092  0014E0  0E59               	movlw	89
 19093  0014E2  6E16               	movwf	?_readEEPROM,c
 19094  0014E4  ECC0  F028         	call	_readEEPROM	;wreg free
 19095  0014E8  D312               	goto	L53
 19096  0014EA                     l10178:
 19097                           
 19098                           ; BSR set to: 0
 19099                           ;main.c: 1470: rv = readEEPROM(0x5A);
 19100  0014EA  6A17               	clrf	?_readEEPROM+1,c
 19101  0014EC  0E5A               	movlw	90
 19102  0014EE  6E16               	movwf	?_readEEPROM,c
 19103  0014F0  ECC0  F028         	call	_readEEPROM	;wreg free
 19104  0014F4  D30C               	goto	L53
 19105  0014F6                     l10180:
 19106                           
 19107                           ; BSR set to: 0
 19108                           ;main.c: 1479: rv = readEEPROM(0x5B);
 19109  0014F6  6A17               	clrf	?_readEEPROM+1,c
 19110  0014F8  0E5B               	movlw	91
 19111  0014FA  6E16               	movwf	?_readEEPROM,c
 19112  0014FC  ECC0  F028         	call	_readEEPROM	;wreg free
 19113  001500  D306               	goto	L53
 19114  001502                     l10182:
 19115                           
 19116                           ; BSR set to: 0
 19117                           ;main.c: 1484: rv = readEEPROM(0x5C);
 19118  001502  6A17               	clrf	?_readEEPROM+1,c
 19119  001504  0E5C               	movlw	92
 19120  001506  6E16               	movwf	?_readEEPROM,c
 19121  001508  ECC0  F028         	call	_readEEPROM	;wreg free
 19122  00150C  D300               	goto	L53
 19123  00150E                     l10184:
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;main.c: 1489: rv = readEEPROM(0x5D);
 19127  00150E  6A17               	clrf	?_readEEPROM+1,c
 19128  001510  0E5D               	movlw	93
 19129  001512  6E16               	movwf	?_readEEPROM,c
 19130  001514  ECC0  F028         	call	_readEEPROM	;wreg free
 19131  001518  D2FA               	goto	L53
 19132  00151A                     l10186:
 19133                           
 19134                           ; BSR set to: 0
 19135                           ;main.c: 1494: rv = readEEPROM(0x5E);
 19136  00151A  6A17               	clrf	?_readEEPROM+1,c
 19137  00151C  0E5E               	movlw	94
 19138  00151E  6E16               	movwf	?_readEEPROM,c
 19139  001520  ECC0  F028         	call	_readEEPROM	;wreg free
 19140  001524  D2F4               	goto	L53
 19141  001526                     l10188:
 19142                           
 19143                           ; BSR set to: 0
 19144                           ;main.c: 1499: rv = readEEPROM(0x5F);
 19145  001526  6A17               	clrf	?_readEEPROM+1,c
 19146  001528  0E5F               	movlw	95
 19147  00152A  6E16               	movwf	?_readEEPROM,c
 19148  00152C  ECC0  F028         	call	_readEEPROM	;wreg free
 19149  001530  D2EE               	goto	L53
 19150  001532                     l10190:
 19151                           
 19152                           ; BSR set to: 0
 19153                           ;main.c: 1504: rv = readEEPROM(0x60);
 19154  001532  6A17               	clrf	?_readEEPROM+1,c
 19155  001534  0E60               	movlw	96
 19156  001536  6E16               	movwf	?_readEEPROM,c
 19157  001538  ECC0  F028         	call	_readEEPROM	;wreg free
 19158  00153C  D2E8               	goto	L53
 19159  00153E                     l10192:
 19160                           
 19161                           ; BSR set to: 0
 19162                           ;main.c: 1509: rv = readEEPROM(0x61);
 19163  00153E  6A17               	clrf	?_readEEPROM+1,c
 19164  001540  0E61               	movlw	97
 19165  001542  6E16               	movwf	?_readEEPROM,c
 19166  001544  ECC0  F028         	call	_readEEPROM	;wreg free
 19167  001548  D2E2               	goto	L53
 19168  00154A                     l10194:
 19169                           
 19170                           ; BSR set to: 0
 19171                           ;main.c: 1514: rv = readEEPROM(0x62);
 19172  00154A  6A17               	clrf	?_readEEPROM+1,c
 19173  00154C  0E62               	movlw	98
 19174  00154E  6E16               	movwf	?_readEEPROM,c
 19175  001550  ECC0  F028         	call	_readEEPROM	;wreg free
 19176  001554  D2DC               	goto	L53
 19177  001556                     l10196:
 19178                           
 19179                           ; BSR set to: 0
 19180                           ;main.c: 1519: rv = readEEPROM(0x63);
 19181  001556  6A17               	clrf	?_readEEPROM+1,c
 19182  001558  0E63               	movlw	99
 19183  00155A  6E16               	movwf	?_readEEPROM,c
 19184  00155C  ECC0  F028         	call	_readEEPROM	;wreg free
 19185  001560  D2D6               	goto	L53
 19186  001562                     l10198:
 19187                           
 19188                           ; BSR set to: 0
 19189                           ;main.c: 1524: rv = readEEPROM(0x64);
 19190  001562  6A17               	clrf	?_readEEPROM+1,c
 19191  001564  0E64               	movlw	100
 19192  001566  6E16               	movwf	?_readEEPROM,c
 19193  001568  ECC0  F028         	call	_readEEPROM	;wreg free
 19194  00156C  D2D0               	goto	L53
 19195  00156E                     l10200:
 19196                           
 19197                           ; BSR set to: 0
 19198                           ;main.c: 1529: rv = readEEPROM(0x65);
 19199  00156E  6A17               	clrf	?_readEEPROM+1,c
 19200  001570  0E65               	movlw	101
 19201  001572  6E16               	movwf	?_readEEPROM,c
 19202  001574  ECC0  F028         	call	_readEEPROM	;wreg free
 19203  001578  D2CA               	goto	L53
 19204  00157A                     l10202:
 19205                           
 19206                           ; BSR set to: 0
 19207                           ;main.c: 1534: rv = readEEPROM(0x66);
 19208  00157A  6A17               	clrf	?_readEEPROM+1,c
 19209  00157C  0E66               	movlw	102
 19210  00157E  6E16               	movwf	?_readEEPROM,c
 19211  001580  ECC0  F028         	call	_readEEPROM	;wreg free
 19212  001584  D2C4               	goto	L53
 19213  001586                     l10204:
 19214                           
 19215                           ; BSR set to: 0
 19216                           ;main.c: 1544: rv = readEEPROM(0x67);
 19217  001586  6A17               	clrf	?_readEEPROM+1,c
 19218  001588  0E67               	movlw	103
 19219  00158A  6E16               	movwf	?_readEEPROM,c
 19220  00158C  ECC0  F028         	call	_readEEPROM	;wreg free
 19221  001590  D2BE               	goto	L53
 19222  001592                     l10206:
 19223                           
 19224                           ; BSR set to: 0
 19225                           ;main.c: 1549: rv = readEEPROM(0x68);
 19226  001592  6A17               	clrf	?_readEEPROM+1,c
 19227  001594  0E68               	movlw	104
 19228  001596  6E16               	movwf	?_readEEPROM,c
 19229  001598  ECC0  F028         	call	_readEEPROM	;wreg free
 19230  00159C  D2B8               	goto	L53
 19231  00159E                     l10208:
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;main.c: 1554: rv = readEEPROM(0x69);
 19235  00159E  6A17               	clrf	?_readEEPROM+1,c
 19236  0015A0  0E69               	movlw	105
 19237  0015A2  6E16               	movwf	?_readEEPROM,c
 19238  0015A4  ECC0  F028         	call	_readEEPROM	;wreg free
 19239  0015A8  D2B2               	goto	L53
 19240  0015AA                     l10210:
 19241                           
 19242                           ; BSR set to: 0
 19243                           ;main.c: 1559: rv = readEEPROM(0x6A);
 19244  0015AA  6A17               	clrf	?_readEEPROM+1,c
 19245  0015AC  0E6A               	movlw	106
 19246  0015AE  6E16               	movwf	?_readEEPROM,c
 19247  0015B0  ECC0  F028         	call	_readEEPROM	;wreg free
 19248  0015B4  D2AC               	goto	L53
 19249  0015B6                     l10212:
 19250                           
 19251                           ; BSR set to: 0
 19252                           ;main.c: 1564: rv = readEEPROM(0x6B);
 19253  0015B6  6A17               	clrf	?_readEEPROM+1,c
 19254  0015B8  0E6B               	movlw	107
 19255  0015BA  6E16               	movwf	?_readEEPROM,c
 19256  0015BC  ECC0  F028         	call	_readEEPROM	;wreg free
 19257  0015C0  D2A6               	goto	L53
 19258  0015C2                     l10214:
 19259                           
 19260                           ; BSR set to: 0
 19261                           ;main.c: 1569: rv = readEEPROM(0x6C);
 19262  0015C2  6A17               	clrf	?_readEEPROM+1,c
 19263  0015C4  0E6C               	movlw	108
 19264  0015C6  6E16               	movwf	?_readEEPROM,c
 19265  0015C8  ECC0  F028         	call	_readEEPROM	;wreg free
 19266  0015CC  D2A0               	goto	L53
 19267  0015CE                     l10216:
 19268                           
 19269                           ; BSR set to: 0
 19270                           ;main.c: 1574: rv = readEEPROM(0x6D);
 19271  0015CE  6A17               	clrf	?_readEEPROM+1,c
 19272  0015D0  0E6D               	movlw	109
 19273  0015D2  6E16               	movwf	?_readEEPROM,c
 19274  0015D4  ECC0  F028         	call	_readEEPROM	;wreg free
 19275  0015D8  D29A               	goto	L53
 19276  0015DA                     l10218:
 19277                           
 19278                           ; BSR set to: 0
 19279                           ;main.c: 1579: rv = readEEPROM(0x6E);
 19280  0015DA  6A17               	clrf	?_readEEPROM+1,c
 19281  0015DC  0E6E               	movlw	110
 19282  0015DE  6E16               	movwf	?_readEEPROM,c
 19283  0015E0  ECC0  F028         	call	_readEEPROM	;wreg free
 19284  0015E4  D294               	goto	L53
 19285  0015E6                     l10220:
 19286                           
 19287                           ; BSR set to: 0
 19288                           ;main.c: 1584: rv = readEEPROM(0x6F);
 19289  0015E6  6A17               	clrf	?_readEEPROM+1,c
 19290  0015E8  0E6F               	movlw	111
 19291  0015EA  6E16               	movwf	?_readEEPROM,c
 19292  0015EC  ECC0  F028         	call	_readEEPROM	;wreg free
 19293  0015F0  D28E               	goto	L53
 19294  0015F2                     l10222:
 19295                           
 19296                           ; BSR set to: 0
 19297                           ;main.c: 1589: rv = readEEPROM(0x70);
 19298  0015F2  6A17               	clrf	?_readEEPROM+1,c
 19299  0015F4  0E70               	movlw	112
 19300  0015F6  6E16               	movwf	?_readEEPROM,c
 19301  0015F8  ECC0  F028         	call	_readEEPROM	;wreg free
 19302  0015FC  D288               	goto	L53
 19303  0015FE                     l10224:
 19304                           
 19305                           ; BSR set to: 0
 19306                           ;main.c: 1594: rv = readEEPROM(0x71);
 19307  0015FE  6A17               	clrf	?_readEEPROM+1,c
 19308  001600  0E71               	movlw	113
 19309  001602  6E16               	movwf	?_readEEPROM,c
 19310  001604  ECC0  F028         	call	_readEEPROM	;wreg free
 19311  001608  D282               	goto	L53
 19312  00160A                     l10226:
 19313                           
 19314                           ; BSR set to: 0
 19315                           ;main.c: 1599: rv = readEEPROM(0x72);
 19316  00160A  6A17               	clrf	?_readEEPROM+1,c
 19317  00160C  0E72               	movlw	114
 19318  00160E  6E16               	movwf	?_readEEPROM,c
 19319  001610  ECC0  F028         	call	_readEEPROM	;wreg free
 19320  001614  D27C               	goto	L53
 19321  001616                     l10228:
 19322                           
 19323                           ; BSR set to: 0
 19324                           ;main.c: 1608: rv = readEEPROM(0x73);
 19325  001616  6A17               	clrf	?_readEEPROM+1,c
 19326  001618  0E73               	movlw	115
 19327  00161A  6E16               	movwf	?_readEEPROM,c
 19328  00161C  ECC0  F028         	call	_readEEPROM	;wreg free
 19329  001620  D276               	goto	L53
 19330  001622                     l10230:
 19331                           
 19332                           ; BSR set to: 0
 19333                           ;main.c: 1613: rv = readEEPROM(0x74);
 19334  001622  6A17               	clrf	?_readEEPROM+1,c
 19335  001624  0E74               	movlw	116
 19336  001626  6E16               	movwf	?_readEEPROM,c
 19337  001628  ECC0  F028         	call	_readEEPROM	;wreg free
 19338  00162C  D270               	goto	L53
 19339  00162E                     l10232:
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;main.c: 1618: rv = readEEPROM(0x75);
 19343  00162E  6A17               	clrf	?_readEEPROM+1,c
 19344  001630  0E75               	movlw	117
 19345  001632  6E16               	movwf	?_readEEPROM,c
 19346  001634  ECC0  F028         	call	_readEEPROM	;wreg free
 19347  001638  D26A               	goto	L53
 19348  00163A                     l10234:
 19349                           
 19350                           ; BSR set to: 0
 19351                           ;main.c: 1623: rv = readEEPROM(0x76);
 19352  00163A  6A17               	clrf	?_readEEPROM+1,c
 19353  00163C  0E76               	movlw	118
 19354  00163E  6E16               	movwf	?_readEEPROM,c
 19355  001640  ECC0  F028         	call	_readEEPROM	;wreg free
 19356  001644  D264               	goto	L53
 19357  001646                     l10236:
 19358                           
 19359                           ; BSR set to: 0
 19360                           ;main.c: 1628: rv = readEEPROM(0x77);
 19361  001646  6A17               	clrf	?_readEEPROM+1,c
 19362  001648  0E77               	movlw	119
 19363  00164A  6E16               	movwf	?_readEEPROM,c
 19364  00164C  ECC0  F028         	call	_readEEPROM	;wreg free
 19365  001650  D25E               	goto	L53
 19366  001652                     l10238:
 19367                           
 19368                           ; BSR set to: 0
 19369                           ;main.c: 1633: rv = readEEPROM(0x78);
 19370  001652  6A17               	clrf	?_readEEPROM+1,c
 19371  001654  0E78               	movlw	120
 19372  001656  6E16               	movwf	?_readEEPROM,c
 19373  001658  ECC0  F028         	call	_readEEPROM	;wreg free
 19374  00165C  D258               	goto	L53
 19375  00165E                     l10240:
 19376                           
 19377                           ; BSR set to: 0
 19378                           ;main.c: 1638: rv = readEEPROM(0x79);
 19379  00165E  6A17               	clrf	?_readEEPROM+1,c
 19380  001660  0E79               	movlw	121
 19381  001662  6E16               	movwf	?_readEEPROM,c
 19382  001664  ECC0  F028         	call	_readEEPROM	;wreg free
 19383  001668  D252               	goto	L53
 19384  00166A                     l10242:
 19385                           
 19386                           ; BSR set to: 0
 19387                           ;main.c: 1643: rv = readEEPROM(0x7A);
 19388  00166A  6A17               	clrf	?_readEEPROM+1,c
 19389  00166C  0E7A               	movlw	122
 19390  00166E  6E16               	movwf	?_readEEPROM,c
 19391  001670  ECC0  F028         	call	_readEEPROM	;wreg free
 19392  001674  D24C               	goto	L53
 19393  001676                     l10244:
 19394                           
 19395                           ; BSR set to: 0
 19396                           ;main.c: 1648: rv = readEEPROM(0x7B);
 19397  001676  6A17               	clrf	?_readEEPROM+1,c
 19398  001678  0E7B               	movlw	123
 19399  00167A  6E16               	movwf	?_readEEPROM,c
 19400  00167C  ECC0  F028         	call	_readEEPROM	;wreg free
 19401  001680  D246               	goto	L53
 19402  001682                     l10246:
 19403                           
 19404                           ; BSR set to: 0
 19405                           ;main.c: 1653: rv = readEEPROM(0x7C);
 19406  001682  6A17               	clrf	?_readEEPROM+1,c
 19407  001684  0E7C               	movlw	124
 19408  001686  6E16               	movwf	?_readEEPROM,c
 19409  001688  ECC0  F028         	call	_readEEPROM	;wreg free
 19410  00168C  D240               	goto	L53
 19411  00168E                     l10248:
 19412                           
 19413                           ; BSR set to: 0
 19414                           ;main.c: 1658: rv = readEEPROM(0x7D);
 19415  00168E  6A17               	clrf	?_readEEPROM+1,c
 19416  001690  0E7D               	movlw	125
 19417  001692  6E16               	movwf	?_readEEPROM,c
 19418  001694  ECC0  F028         	call	_readEEPROM	;wreg free
 19419  001698  D23A               	goto	L53
 19420  00169A                     l10250:
 19421                           
 19422                           ; BSR set to: 0
 19423                           ;main.c: 1663: rv = readEEPROM(0x7E);
 19424  00169A  6A17               	clrf	?_readEEPROM+1,c
 19425  00169C  0E7E               	movlw	126
 19426  00169E  6E16               	movwf	?_readEEPROM,c
 19427  0016A0  ECC0  F028         	call	_readEEPROM	;wreg free
 19428  0016A4  D234               	goto	L53
 19429  0016A6                     l10252:
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;main.c: 1672: rv = readEEPROM(0x7F);
 19433  0016A6  6A17               	clrf	?_readEEPROM+1,c
 19434  0016A8  0E7F               	movlw	127
 19435  0016AA  6E16               	movwf	?_readEEPROM,c
 19436  0016AC  ECC0  F028         	call	_readEEPROM	;wreg free
 19437  0016B0  D22E               	goto	L53
 19438  0016B2                     l10254:
 19439                           
 19440                           ; BSR set to: 0
 19441                           ;main.c: 1677: rv = readEEPROM(0x80);
 19442  0016B2  6A17               	clrf	?_readEEPROM+1,c
 19443  0016B4  0E80               	movlw	128
 19444  0016B6  6E16               	movwf	?_readEEPROM,c
 19445  0016B8  ECC0  F028         	call	_readEEPROM	;wreg free
 19446  0016BC  D228               	goto	L53
 19447  0016BE                     l10256:
 19448                           
 19449                           ; BSR set to: 0
 19450                           ;main.c: 1682: rv = readEEPROM(0x81);
 19451  0016BE  6A17               	clrf	?_readEEPROM+1,c
 19452  0016C0  0E81               	movlw	129
 19453  0016C2  6E16               	movwf	?_readEEPROM,c
 19454  0016C4  ECC0  F028         	call	_readEEPROM	;wreg free
 19455  0016C8  D222               	goto	L53
 19456  0016CA                     l10258:
 19457                           
 19458                           ; BSR set to: 0
 19459                           ;main.c: 1687: rv = readEEPROM(0x82);
 19460  0016CA  6A17               	clrf	?_readEEPROM+1,c
 19461  0016CC  0E82               	movlw	130
 19462  0016CE  6E16               	movwf	?_readEEPROM,c
 19463  0016D0  ECC0  F028         	call	_readEEPROM	;wreg free
 19464  0016D4  D21C               	goto	L53
 19465  0016D6                     l10260:
 19466                           
 19467                           ; BSR set to: 0
 19468                           ;main.c: 1692: rv = readEEPROM(0x83);
 19469  0016D6  6A17               	clrf	?_readEEPROM+1,c
 19470  0016D8  0E83               	movlw	131
 19471  0016DA  6E16               	movwf	?_readEEPROM,c
 19472  0016DC  ECC0  F028         	call	_readEEPROM	;wreg free
 19473  0016E0  D216               	goto	L53
 19474  0016E2                     l10262:
 19475                           
 19476                           ; BSR set to: 0
 19477                           ;main.c: 1697: rv = readEEPROM(0x84);
 19478  0016E2  6A17               	clrf	?_readEEPROM+1,c
 19479  0016E4  0E84               	movlw	132
 19480  0016E6  6E16               	movwf	?_readEEPROM,c
 19481  0016E8  ECC0  F028         	call	_readEEPROM	;wreg free
 19482  0016EC  D210               	goto	L53
 19483  0016EE                     l10264:
 19484                           
 19485                           ; BSR set to: 0
 19486                           ;main.c: 1702: rv = readEEPROM(0x85);
 19487  0016EE  6A17               	clrf	?_readEEPROM+1,c
 19488  0016F0  0E85               	movlw	133
 19489  0016F2  6E16               	movwf	?_readEEPROM,c
 19490  0016F4  ECC0  F028         	call	_readEEPROM	;wreg free
 19491  0016F8  D20A               	goto	L53
 19492  0016FA                     l10266:
 19493                           
 19494                           ; BSR set to: 0
 19495                           ;main.c: 1707: rv = readEEPROM(0x86);
 19496  0016FA  6A17               	clrf	?_readEEPROM+1,c
 19497  0016FC  0E86               	movlw	134
 19498  0016FE  6E16               	movwf	?_readEEPROM,c
 19499  001700  ECC0  F028         	call	_readEEPROM	;wreg free
 19500  001704  D204               	goto	L53
 19501  001706                     l10268:
 19502                           
 19503                           ; BSR set to: 0
 19504                           ;main.c: 1712: rv = readEEPROM(0x87);
 19505  001706  6A17               	clrf	?_readEEPROM+1,c
 19506  001708  0E87               	movlw	135
 19507  00170A  6E16               	movwf	?_readEEPROM,c
 19508  00170C  ECC0  F028         	call	_readEEPROM	;wreg free
 19509  001710  D1FE               	goto	L53
 19510  001712                     l10270:
 19511                           
 19512                           ; BSR set to: 0
 19513                           ;main.c: 1717: rv = readEEPROM(0x88);
 19514  001712  6A17               	clrf	?_readEEPROM+1,c
 19515  001714  0E88               	movlw	136
 19516  001716  6E16               	movwf	?_readEEPROM,c
 19517  001718  ECC0  F028         	call	_readEEPROM	;wreg free
 19518  00171C  D1F8               	goto	L53
 19519  00171E                     l10272:
 19520                           
 19521                           ; BSR set to: 0
 19522                           ;main.c: 1722: rv = readEEPROM(0x89);
 19523  00171E  6A17               	clrf	?_readEEPROM+1,c
 19524  001720  0E89               	movlw	137
 19525  001722  6E16               	movwf	?_readEEPROM,c
 19526  001724  ECC0  F028         	call	_readEEPROM	;wreg free
 19527  001728  D1F2               	goto	L53
 19528  00172A                     l10274:
 19529                           
 19530                           ; BSR set to: 0
 19531                           ;main.c: 1727: rv = readEEPROM(0x8A);
 19532  00172A  6A17               	clrf	?_readEEPROM+1,c
 19533  00172C  0E8A               	movlw	138
 19534  00172E  6E16               	movwf	?_readEEPROM,c
 19535  001730  ECC0  F028         	call	_readEEPROM	;wreg free
 19536  001734  D1EC               	goto	L53
 19537  001736                     l10276:
 19538                           
 19539                           ; BSR set to: 0
 19540                           ;main.c: 1736: rv = readEEPROM(0x8B);
 19541  001736  6A17               	clrf	?_readEEPROM+1,c
 19542  001738  0E8B               	movlw	139
 19543  00173A  6E16               	movwf	?_readEEPROM,c
 19544  00173C  ECC0  F028         	call	_readEEPROM	;wreg free
 19545  001740  D1E6               	goto	L53
 19546  001742                     l10278:
 19547                           
 19548                           ; BSR set to: 0
 19549                           ;main.c: 1741: rv = readEEPROM(0x8C);
 19550  001742  6A17               	clrf	?_readEEPROM+1,c
 19551  001744  0E8C               	movlw	140
 19552  001746  6E16               	movwf	?_readEEPROM,c
 19553  001748  ECC0  F028         	call	_readEEPROM	;wreg free
 19554  00174C  D1E0               	goto	L53
 19555  00174E                     l10280:
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;main.c: 1746: rv = readEEPROM(0x8D);
 19559  00174E  6A17               	clrf	?_readEEPROM+1,c
 19560  001750  0E8D               	movlw	141
 19561  001752  6E16               	movwf	?_readEEPROM,c
 19562  001754  ECC0  F028         	call	_readEEPROM	;wreg free
 19563  001758  D1DA               	goto	L53
 19564  00175A                     l10282:
 19565                           
 19566                           ; BSR set to: 0
 19567                           ;main.c: 1751: rv = readEEPROM(0x8E);
 19568  00175A  6A17               	clrf	?_readEEPROM+1,c
 19569  00175C  0E8E               	movlw	142
 19570  00175E  6E16               	movwf	?_readEEPROM,c
 19571  001760  ECC0  F028         	call	_readEEPROM	;wreg free
 19572  001764  D1D4               	goto	L53
 19573  001766                     l10284:
 19574                           
 19575                           ; BSR set to: 0
 19576                           ;main.c: 1756: rv = readEEPROM(0x8F);
 19577  001766  6A17               	clrf	?_readEEPROM+1,c
 19578  001768  0E8F               	movlw	143
 19579  00176A  6E16               	movwf	?_readEEPROM,c
 19580  00176C  ECC0  F028         	call	_readEEPROM	;wreg free
 19581  001770  D1CE               	goto	L53
 19582  001772                     l10286:
 19583                           
 19584                           ; BSR set to: 0
 19585                           ;main.c: 1761: rv = readEEPROM(0x90);
 19586  001772  6A17               	clrf	?_readEEPROM+1,c
 19587  001774  0E90               	movlw	144
 19588  001776  6E16               	movwf	?_readEEPROM,c
 19589  001778  ECC0  F028         	call	_readEEPROM	;wreg free
 19590  00177C  D1C8               	goto	L53
 19591  00177E                     l10288:
 19592                           
 19593                           ; BSR set to: 0
 19594                           ;main.c: 1766: rv = readEEPROM(0x91);
 19595  00177E  6A17               	clrf	?_readEEPROM+1,c
 19596  001780  0E91               	movlw	145
 19597  001782  6E16               	movwf	?_readEEPROM,c
 19598  001784  ECC0  F028         	call	_readEEPROM	;wreg free
 19599  001788  D1C2               	goto	L53
 19600  00178A                     l10290:
 19601                           
 19602                           ; BSR set to: 0
 19603                           ;main.c: 1771: rv = readEEPROM(0x92);
 19604  00178A  6A17               	clrf	?_readEEPROM+1,c
 19605  00178C  0E92               	movlw	146
 19606  00178E  6E16               	movwf	?_readEEPROM,c
 19607  001790  ECC0  F028         	call	_readEEPROM	;wreg free
 19608  001794  D1BC               	goto	L53
 19609  001796                     l10292:
 19610                           
 19611                           ; BSR set to: 0
 19612                           ;main.c: 1776: rv = readEEPROM(0x93);
 19613  001796  6A17               	clrf	?_readEEPROM+1,c
 19614  001798  0E93               	movlw	147
 19615  00179A  6E16               	movwf	?_readEEPROM,c
 19616  00179C  ECC0  F028         	call	_readEEPROM	;wreg free
 19617  0017A0  D1B6               	goto	L53
 19618  0017A2                     l10294:
 19619                           
 19620                           ; BSR set to: 0
 19621                           ;main.c: 1781: rv = readEEPROM(0x94);
 19622  0017A2  6A17               	clrf	?_readEEPROM+1,c
 19623  0017A4  0E94               	movlw	148
 19624  0017A6  6E16               	movwf	?_readEEPROM,c
 19625  0017A8  ECC0  F028         	call	_readEEPROM	;wreg free
 19626  0017AC  D1B0               	goto	L53
 19627  0017AE                     l10296:
 19628                           
 19629                           ; BSR set to: 0
 19630                           ;main.c: 1786: rv = readEEPROM(0x95);
 19631  0017AE  6A17               	clrf	?_readEEPROM+1,c
 19632  0017B0  0E95               	movlw	149
 19633  0017B2  6E16               	movwf	?_readEEPROM,c
 19634  0017B4  ECC0  F028         	call	_readEEPROM	;wreg free
 19635  0017B8  D1AA               	goto	L53
 19636  0017BA                     l10298:
 19637                           
 19638                           ; BSR set to: 0
 19639                           ;main.c: 1791: rv = readEEPROM(0x96);
 19640  0017BA  6A17               	clrf	?_readEEPROM+1,c
 19641  0017BC  0E96               	movlw	150
 19642  0017BE  6E16               	movwf	?_readEEPROM,c
 19643  0017C0  ECC0  F028         	call	_readEEPROM	;wreg free
 19644  0017C4  D1A4               	goto	L53
 19645  0017C6                     l10300:
 19646                           
 19647                           ; BSR set to: 0
 19648                           ;main.c: 1801: rv = readEEPROM(0x97);
 19649  0017C6  6A17               	clrf	?_readEEPROM+1,c
 19650  0017C8  0E97               	movlw	151
 19651  0017CA  6E16               	movwf	?_readEEPROM,c
 19652  0017CC  ECC0  F028         	call	_readEEPROM	;wreg free
 19653  0017D0  D19E               	goto	L53
 19654  0017D2                     l10302:
 19655                           
 19656                           ; BSR set to: 0
 19657                           ;main.c: 1806: rv = readEEPROM(0x98);
 19658  0017D2  6A17               	clrf	?_readEEPROM+1,c
 19659  0017D4  0E98               	movlw	152
 19660  0017D6  6E16               	movwf	?_readEEPROM,c
 19661  0017D8  ECC0  F028         	call	_readEEPROM	;wreg free
 19662  0017DC  D198               	goto	L53
 19663  0017DE                     l10304:
 19664                           
 19665                           ; BSR set to: 0
 19666                           ;main.c: 1811: rv = readEEPROM(0x99);
 19667  0017DE  6A17               	clrf	?_readEEPROM+1,c
 19668  0017E0  0E99               	movlw	153
 19669  0017E2  6E16               	movwf	?_readEEPROM,c
 19670  0017E4  ECC0  F028         	call	_readEEPROM	;wreg free
 19671  0017E8  D192               	goto	L53
 19672  0017EA                     l10306:
 19673                           
 19674                           ; BSR set to: 0
 19675                           ;main.c: 1816: rv = readEEPROM(0x9A);
 19676  0017EA  6A17               	clrf	?_readEEPROM+1,c
 19677  0017EC  0E9A               	movlw	154
 19678  0017EE  6E16               	movwf	?_readEEPROM,c
 19679  0017F0  ECC0  F028         	call	_readEEPROM	;wreg free
 19680  0017F4  D18C               	goto	L53
 19681  0017F6                     l10308:
 19682                           
 19683                           ; BSR set to: 0
 19684                           ;main.c: 1821: rv = readEEPROM(0x9B);
 19685  0017F6  6A17               	clrf	?_readEEPROM+1,c
 19686  0017F8  0E9B               	movlw	155
 19687  0017FA  6E16               	movwf	?_readEEPROM,c
 19688  0017FC  ECC0  F028         	call	_readEEPROM	;wreg free
 19689  001800  D186               	goto	L53
 19690  001802                     l10310:
 19691                           
 19692                           ; BSR set to: 0
 19693                           ;main.c: 1826: rv = readEEPROM(0x9C);
 19694  001802  6A17               	clrf	?_readEEPROM+1,c
 19695  001804  0E9C               	movlw	156
 19696  001806  6E16               	movwf	?_readEEPROM,c
 19697  001808  ECC0  F028         	call	_readEEPROM	;wreg free
 19698  00180C  D180               	goto	L53
 19699  00180E                     l404:
 19700                           
 19701                           ; BSR set to: 0
 19702                           ;main.c: 1831: rv = 0;
 19703  00180E  6A1C               	clrf	vscp_readAppReg@rv,c
 19704                           
 19705                           ;main.c: 1832: break;
 19706  001810  D17F               	goto	l10342
 19707  001812                     l10312:
 19708                           
 19709                           ; BSR set to: 0
 19710                           ;main.c: 1841: rv = readEEPROM(0xF2);
 19711  001812  6A17               	clrf	?_readEEPROM+1,c
 19712  001814  0EF2               	movlw	242
 19713  001816  6E16               	movwf	?_readEEPROM,c
 19714  001818  ECC0  F028         	call	_readEEPROM	;wreg free
 19715  00181C  D178               	goto	L53
 19716  00181E                     l10314:
 19717                           
 19718                           ; BSR set to: 0
 19719                           ;main.c: 1846: rv = readEEPROM(0xF3);
 19720  00181E  6A17               	clrf	?_readEEPROM+1,c
 19721  001820  0EF3               	movlw	243
 19722  001822  6E16               	movwf	?_readEEPROM,c
 19723  001824  ECC0  F028         	call	_readEEPROM	;wreg free
 19724  001828  D172               	goto	L53
 19725  00182A                     l10318:
 19726                           
 19727                           ; BSR set to: 0
 19728  00182A  501B               	movf	vscp_readAppReg@reg,w,c
 19729                           
 19730                           ; Switch size 1, requested type "space"
 19731                           ; Number of cases is 108, Range of values is 0 to 119
 19732                           ; switch strategies available:
 19733                           ; Name         Instructions Cycles
 19734                           ; simple_byte          325   163 (average)
 19735                           ;	Chosen strategy is simple_byte
 19736  00182C  E101 D5A3          	bz	l10116
 19737  001830  0A01               	xorlw	1	; case 1
 19738  001832  E101 D5A6          	bz	l10118
 19739  001836  0A03               	xorlw	3	; case 2
 19740  001838  E101 D5A9          	bz	l10120
 19741  00183C  0A01               	xorlw	1	; case 3
 19742  00183E  E101 D5AC          	bz	l10122
 19743  001842  0A07               	xorlw	7	; case 4
 19744  001844  E101 D5AF          	bz	l10124
 19745  001848  0A01               	xorlw	1	; case 5
 19746  00184A  E101 D5B2          	bz	l10126
 19747  00184E  0A03               	xorlw	3	; case 6
 19748  001850  E101 D5B5          	bz	l10128
 19749  001854  0A01               	xorlw	1	; case 7
 19750  001856  E101 D5B8          	bz	l10130
 19751  00185A  0A0F               	xorlw	15	; case 8
 19752  00185C  E101 D5BB          	bz	l10132
 19753  001860  0A01               	xorlw	1	; case 9
 19754  001862  E101 D5BB          	bz	l309
 19755  001866  0A03               	xorlw	3	; case 10
 19756  001868  E101 D5BB          	bz	l10134
 19757  00186C  0A01               	xorlw	1	; case 11
 19758  00186E  E101 D5BB          	bz	l311
 19759  001872  0A07               	xorlw	7	; case 12
 19760  001874  E101 D5BB          	bz	l10136
 19761  001878  0A01               	xorlw	1	; case 13
 19762  00187A  E101 D5BB          	bz	l313
 19763  00187E  0A03               	xorlw	3	; case 14
 19764  001880  E101 D5BB          	bz	l10138
 19765  001884  0A01               	xorlw	1	; case 15
 19766  001886  E101 D5BB          	bz	l315
 19767  00188A  0A1F               	xorlw	31	; case 16
 19768  00188C  E101 D5BB          	bz	l10140
 19769  001890  0A01               	xorlw	1	; case 17
 19770  001892  E101 D5BB          	bz	l317
 19771  001896  0A03               	xorlw	3	; case 18
 19772  001898  E101 D5BB          	bz	l10142
 19773  00189C  0A01               	xorlw	1	; case 19
 19774  00189E  E101 D5BB          	bz	l319
 19775  0018A2  0A07               	xorlw	7	; case 20
 19776  0018A4  E101 D5BB          	bz	l10144
 19777  0018A8  0A01               	xorlw	1	; case 21
 19778  0018AA  E101 D5BE          	bz	l10146
 19779  0018AE  0A03               	xorlw	3	; case 22
 19780  0018B0  E101 D5C1          	bz	l10148
 19781  0018B4  0A01               	xorlw	1	; case 23
 19782  0018B6  E101 D5C4          	bz	l10150
 19783  0018BA  0A0F               	xorlw	15	; case 24
 19784  0018BC  E101 D5C7          	bz	l10152
 19785  0018C0  0A01               	xorlw	1	; case 25
 19786  0018C2  E101 D5CA          	bz	l10154
 19787  0018C6  0A3F               	xorlw	63	; case 38
 19788  0018C8  E101 D5CD          	bz	l10156
 19789  0018CC  0A01               	xorlw	1	; case 39
 19790  0018CE  E101 D5D0          	bz	l10158
 19791  0018D2  0A0F               	xorlw	15	; case 40
 19792  0018D4  E101 D5D3          	bz	l10160
 19793  0018D8  0A01               	xorlw	1	; case 41
 19794  0018DA  E101 D5D6          	bz	l10162
 19795  0018DE  0A03               	xorlw	3	; case 42
 19796  0018E0  E101 D5D9          	bz	l10164
 19797  0018E4  0A01               	xorlw	1	; case 43
 19798  0018E6  E101 D5DC          	bz	l10166
 19799  0018EA  0A07               	xorlw	7	; case 44
 19800  0018EC  E101 D5DF          	bz	l10168
 19801  0018F0  0A01               	xorlw	1	; case 45
 19802  0018F2  E101 D5E2          	bz	l10170
 19803  0018F6  0A03               	xorlw	3	; case 46
 19804  0018F8  E101 D5E5          	bz	l10172
 19805  0018FC  0A01               	xorlw	1	; case 47
 19806  0018FE  E101 D5E8          	bz	l10174
 19807  001902  0A1F               	xorlw	31	; case 48
 19808  001904  E101 D5EB          	bz	l10176
 19809  001908  0A01               	xorlw	1	; case 49
 19810  00190A  E101 D5EE          	bz	l10178
 19811  00190E  0A03               	xorlw	3	; case 50
 19812  001910  E101 D5F1          	bz	l10180
 19813  001914  0A01               	xorlw	1	; case 51
 19814  001916  E101 D5F4          	bz	l10182
 19815  00191A  0A07               	xorlw	7	; case 52
 19816  00191C  E101 D5F7          	bz	l10184
 19817  001920  0A01               	xorlw	1	; case 53
 19818  001922  E101 D5FA          	bz	l10186
 19819  001926  0A03               	xorlw	3	; case 54
 19820  001928  E101 D5FD          	bz	l10188
 19821  00192C  0A01               	xorlw	1	; case 55
 19822  00192E  E101 D600          	bz	l10190
 19823  001932  0A0F               	xorlw	15	; case 56
 19824  001934  E101 D603          	bz	l10192
 19825  001938  0A01               	xorlw	1	; case 57
 19826  00193A  E101 D606          	bz	l10194
 19827  00193E  0A03               	xorlw	3	; case 58
 19828  001940  E101 D609          	bz	l10196
 19829  001944  0A01               	xorlw	1	; case 59
 19830  001946  E101 D60C          	bz	l10198
 19831  00194A  0A07               	xorlw	7	; case 60
 19832  00194C  E101 D60F          	bz	l10200
 19833  001950  0A01               	xorlw	1	; case 61
 19834  001952  E101 D612          	bz	l10202
 19835  001956  0A03               	xorlw	3	; case 62
 19836  001958  E101 D615          	bz	l10204
 19837  00195C  0A01               	xorlw	1	; case 63
 19838  00195E  E101 D618          	bz	l10206
 19839  001962  0A7F               	xorlw	127	; case 64
 19840  001964  E101 D61B          	bz	l10208
 19841  001968  0A01               	xorlw	1	; case 65
 19842  00196A  E101 D61E          	bz	l10210
 19843  00196E  0A03               	xorlw	3	; case 66
 19844  001970  E101 D621          	bz	l10212
 19845  001974  0A01               	xorlw	1	; case 67
 19846  001976  E101 D624          	bz	l10214
 19847  00197A  0A07               	xorlw	7	; case 68
 19848  00197C  E101 D627          	bz	l10216
 19849  001980  0A01               	xorlw	1	; case 69
 19850  001982  E101 D62A          	bz	l10218
 19851  001986  0A03               	xorlw	3	; case 70
 19852  001988  E101 D62D          	bz	l10220
 19853  00198C  0A01               	xorlw	1	; case 71
 19854  00198E  E101 D630          	bz	l10222
 19855  001992  0A0F               	xorlw	15	; case 72
 19856  001994  E101 D633          	bz	l10224
 19857  001998  0A01               	xorlw	1	; case 73
 19858  00199A  E101 D636          	bz	l10226
 19859  00199E  0A03               	xorlw	3	; case 74
 19860  0019A0  E101 D639          	bz	l10228
 19861  0019A4  0A01               	xorlw	1	; case 75
 19862  0019A6  E101 D63C          	bz	l10230
 19863  0019AA  0A07               	xorlw	7	; case 76
 19864  0019AC  E101 D63F          	bz	l10232
 19865  0019B0  0A01               	xorlw	1	; case 77
 19866  0019B2  E101 D642          	bz	l10234
 19867  0019B6  0A03               	xorlw	3	; case 78
 19868  0019B8  E101 D645          	bz	l10236
 19869  0019BC  0A01               	xorlw	1	; case 79
 19870  0019BE  E101 D648          	bz	l10238
 19871  0019C2  0A1F               	xorlw	31	; case 80
 19872  0019C4  E101 D64B          	bz	l10240
 19873  0019C8  0A01               	xorlw	1	; case 81
 19874  0019CA  E101 D64E          	bz	l10242
 19875  0019CE  0A03               	xorlw	3	; case 82
 19876  0019D0  E101 D651          	bz	l10244
 19877  0019D4  0A01               	xorlw	1	; case 83
 19878  0019D6  E101 D654          	bz	l10246
 19879  0019DA  0A07               	xorlw	7	; case 84
 19880  0019DC  E101 D657          	bz	l10248
 19881  0019E0  0A01               	xorlw	1	; case 85
 19882  0019E2  E101 D65A          	bz	l10250
 19883  0019E6  0A03               	xorlw	3	; case 86
 19884  0019E8  E101 D65D          	bz	l10252
 19885  0019EC  0A01               	xorlw	1	; case 87
 19886  0019EE  E101 D660          	bz	l10254
 19887  0019F2  0A0F               	xorlw	15	; case 88
 19888  0019F4  E101 D663          	bz	l10256
 19889  0019F8  0A01               	xorlw	1	; case 89
 19890  0019FA  E101 D666          	bz	l10258
 19891  0019FE  0A03               	xorlw	3	; case 90
 19892  001A00  E101 D669          	bz	l10260
 19893  001A04  0A01               	xorlw	1	; case 91
 19894  001A06  E101 D66C          	bz	l10262
 19895  001A0A  0A07               	xorlw	7	; case 92
 19896  001A0C  E101 D66F          	bz	l10264
 19897  001A10  0A01               	xorlw	1	; case 93
 19898  001A12  E101 D672          	bz	l10266
 19899  001A16  0A03               	xorlw	3	; case 94
 19900  001A18  E101 D675          	bz	l10268
 19901  001A1C  0A01               	xorlw	1	; case 95
 19902  001A1E  E101 D678          	bz	l10270
 19903  001A22  0A3F               	xorlw	63	; case 96
 19904  001A24  E101 D67B          	bz	l10272
 19905  001A28  0A01               	xorlw	1	; case 97
 19906  001A2A  E101 D67E          	bz	l10274
 19907  001A2E  0A03               	xorlw	3	; case 98
 19908  001A30  E101 D681          	bz	l10276
 19909  001A34  0A01               	xorlw	1	; case 99
 19910  001A36  E101 D684          	bz	l10278
 19911  001A3A  0A07               	xorlw	7	; case 100
 19912  001A3C  E101 D687          	bz	l10280
 19913  001A40  0A01               	xorlw	1	; case 101
 19914  001A42  E101 D68A          	bz	l10282
 19915  001A46  0A03               	xorlw	3	; case 102
 19916  001A48  E101 D68D          	bz	l10284
 19917  001A4C  0A01               	xorlw	1	; case 103
 19918  001A4E  E101 D690          	bz	l10286
 19919  001A52  0A0F               	xorlw	15	; case 104
 19920  001A54  E101 D693          	bz	l10288
 19921  001A58  0A01               	xorlw	1	; case 105
 19922  001A5A  E101 D696          	bz	l10290
 19923  001A5E  0A03               	xorlw	3	; case 106
 19924  001A60  E101 D699          	bz	l10292
 19925  001A64  0A01               	xorlw	1	; case 107
 19926  001A66  E101 D69C          	bz	l10294
 19927  001A6A  0A07               	xorlw	7	; case 108
 19928  001A6C  E101 D69F          	bz	l10296
 19929  001A70  0A01               	xorlw	1	; case 109
 19930  001A72  E101 D6A2          	bz	l10298
 19931  001A76  0A03               	xorlw	3	; case 110
 19932  001A78  E101 D6A5          	bz	l10300
 19933  001A7C  0A01               	xorlw	1	; case 111
 19934  001A7E  E101 D6A8          	bz	l10302
 19935  001A82  0A1F               	xorlw	31	; case 112
 19936  001A84  E101 D6AB          	bz	l10304
 19937  001A88  0A01               	xorlw	1	; case 113
 19938  001A8A  E101 D6AE          	bz	l10306
 19939  001A8E  0A03               	xorlw	3	; case 114
 19940  001A90  E101 D6B1          	bz	l10308
 19941  001A94  0A01               	xorlw	1	; case 115
 19942  001A96  E101 D6B4          	bz	l10310
 19943  001A9A  0A07               	xorlw	7	; case 116
 19944  001A9C  E101 D6B7          	bz	l404
 19945  001AA0  0A01               	xorlw	1	; case 117
 19946  001AA2  E101 D6B4          	bz	l404
 19947  001AA6  0A03               	xorlw	3	; case 118
 19948  001AA8  E101 D6B3          	bz	l10312
 19949  001AAC  0A01               	xorlw	1	; case 119
 19950  001AAE  E101 D6B6          	bz	l10314
 19951  001AB2  D6AD               	goto	l404
 19952  001AB4                     l10320:
 19953                           
 19954                           ; BSR set to: 0
 19955                           ;main.c: 1854: else if (1 == vscp_page_select) {
 19956  001AB4  0446               	decf	_vscp_page_select,w,c
 19957  001AB6  1047               	iorwf	_vscp_page_select+1,w,c
 19958  001AB8  E12B               	bnz	l10342
 19959                           
 19960                           ; BSR set to: 0
 19961                           ;main.c: 1857: if (reg < 72) {
 19962  001ABA  0E48               	movlw	72
 19963  001ABC  601B               	cpfslt	vscp_readAppReg@reg,c
 19964  001ABE  D009               	goto	l10326
 19965                           
 19966                           ; BSR set to: 0
 19967                           ;main.c: 1858: rv = readEEPROM(0xAA + reg ) ;
 19968  001AC0  0EAA               	movlw	170
 19969  001AC2  241B               	addwf	vscp_readAppReg@reg,w,c
 19970  001AC4  6E16               	movwf	?_readEEPROM,c
 19971  001AC6  6A17               	clrf	?_readEEPROM+1,c
 19972  001AC8  0E00               	movlw	0
 19973  001ACA  2217               	addwfc	?_readEEPROM+1,f,c
 19974  001ACC  ECC0  F028         	call	_readEEPROM	;wreg free
 19975  001AD0  D01E               	goto	L53
 19976  001AD2                     l10326:
 19977                           
 19978                           ; BSR set to: 0
 19979                           ;main.c: 1861: else if (reg < 84) {
 19980  001AD2  0E54               	movlw	84
 19981  001AD4  601B               	cpfslt	vscp_readAppReg@reg,c
 19982  001AD6  D010               	goto	l10338
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;main.c: 1863: uint8_t pos = reg - 72;
 19986  001AD8  501B               	movf	vscp_readAppReg@reg,w,c
 19987  001ADA  0FB8               	addlw	184
 19988  001ADC  6E1A               	movwf	vscp_readAppReg@pos,c
 19989                           
 19990                           ; BSR set to: 0
 19991                           ;main.c: 1864: if ( pos % 2 ) {
 19992  001ADE  A01A               	btfss	vscp_readAppReg@pos,0,c
 19993  001AE0  D002               	goto	l10334
 19994                           
 19995                           ; BSR set to: 0
 19996                           ;main.c: 1865: pos--;
 19997  001AE2  061A               	decf	vscp_readAppReg@pos,f,c
 19998                           
 19999                           ;main.c: 1866: }
 20000  001AE4  D001               	goto	l10336
 20001  001AE6                     l10334:
 20002                           
 20003                           ; BSR set to: 0
 20004                           ;main.c: 1867: else {
 20005                           ;main.c: 1868: pos++;
 20006  001AE6  2A1A               	incf	vscp_readAppReg@pos,f,c
 20007  001AE8                     l10336:
 20008                           
 20009                           ; BSR set to: 0
 20010                           ;main.c: 1869: }
 20011                           ;main.c: 1870: rv = adc[ pos ];
 20012  001AE8  0EA2               	movlw	low _adc
 20013  001AEA  241A               	addwf	vscp_readAppReg@pos,w,c
 20014  001AEC  6ED9               	movwf	fsr2l,c
 20015  001AEE  6ADA               	clrf	fsr2h,c
 20016  001AF0  0E01               	movlw	high _adc
 20017  001AF2  22DA               	addwfc	fsr2h,f,c
 20018  001AF4  50DF               	movf	indf2,w,c
 20019  001AF6  D00B               	goto	L53
 20020  001AF8                     l10338:
 20021                           
 20022                           ; BSR set to: 0
 20023                           ;main.c: 1873: else if (reg < 98) {
 20024  001AF8  0E62               	movlw	98
 20025  001AFA  601B               	cpfslt	vscp_readAppReg@reg,c
 20026  001AFC  D009               	goto	l10342
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;main.c: 1874: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20030  001AFE  0E4A               	movlw	74
 20031  001B00  241B               	addwf	vscp_readAppReg@reg,w,c
 20032  001B02  6E16               	movwf	?_readEEPROM,c
 20033  001B04  6A17               	clrf	?_readEEPROM+1,c
 20034  001B06  0E00               	movlw	0
 20035  001B08  2217               	addwfc	?_readEEPROM+1,f,c
 20036  001B0A  ECC0  F028         	call	_readEEPROM	;wreg free
 20037  001B0E                     L53:
 20038  001B0E  6E1C               	movwf	vscp_readAppReg@rv,c
 20039  001B10                     l10342:
 20040                           
 20041                           ;main.c: 1875: }
 20042                           ;main.c: 1876: }
 20043                           ;main.c: 1878: return rv;
 20044  001B10  501C               	movf	vscp_readAppReg@rv,w,c
 20045  001B12  0012               	return	
 20046  001B14                     __end_of_vscp_readAppReg:
 20047                           	opt stack 0
 20048                           tblptru	equ	0xFF8
 20049                           tblptrh	equ	0xFF7
 20050                           tblptrl	equ	0xFF6
 20051                           tablat	equ	0xFF5
 20052                           prodh	equ	0xFF4
 20053                           prodl	equ	0xFF3
 20054                           intcon	equ	0xFF2
 20055                           postinc0	equ	0xFEE
 20056                           wreg	equ	0xFE8
 20057                           indf1	equ	0xFE7
 20058                           postdec1	equ	0xFE5
 20059                           fsr1h	equ	0xFE2
 20060                           fsr1l	equ	0xFE1
 20061                           indf2	equ	0xFDF
 20062                           postinc2	equ	0xFDE
 20063                           postdec2	equ	0xFDD
 20064                           plusw2	equ	0xFDB
 20065                           fsr2h	equ	0xFDA
 20066                           fsr2l	equ	0xFD9
 20067                           status	equ	0xFD8
 20068                           
 20069 ;; *************** function _interrupt_at_low_vector *****************
 20070 ;; Defined at:
 20071 ;;		line 134 in file "../main.c"
 20072 ;; Parameters:    Size  Location     Type
 20073 ;;		None
 20074 ;; Auto vars:     Size  Location     Type
 20075 ;;		None
 20076 ;; Return value:  Size  Location     Type
 20077 ;;		None               void
 20078 ;; Registers used:
 20079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20080 ;; Tracked objects:
 20081 ;;		On entry : 0/0
 20082 ;;		On exit  : 0/0
 20083 ;;		Unchanged: 0/0
 20084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20085 ;;      Params:         0       0       0       0       0       0       0
 20086 ;;      Locals:         0       0       0       0       0       0       0
 20087 ;;      Temps:          9       0       0       0       0       0       0
 20088 ;;      Totals:         9       0       0       0       0       0       0
 20089 ;;Total ram usage:        9 bytes
 20090 ;; Hardware stack levels used:    1
 20091 ;; Hardware stack levels required when called:    1
 20092 ;; This function calls:
 20093 ;;		_WriteTimer0
 20094 ;;		_ConvertADC
 20095 ;; This function is called by:
 20096 ;;		Interrupt level 1
 20097 ;; This function uses a non-reentrant model
 20098 ;;
 20099                           
 20100                           	psect	intcodelo
 20101  000018                     __pintcodelo:
 20102                           	opt stack 0
 20103  000018                     _interrupt_at_low_vector:
 20104                           	opt stack 22
 20105                           
 20106                           ;incstack = 0
 20107  000018  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 20108  00001C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 20109  000020  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 20110  000024  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 20111  000028  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 20112  00002C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 20113  000030  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 20114  000034                     
 20115                           ;main.c: 136: if (INTCONbits.TMR0IF) {
 20116  000034  A4F2               	btfss	intcon,2,c	;volatile
 20117  000036  D001               	goto	i1u706_21
 20118  000038  D001               	goto	i1u706_20
 20119  00003A                     i1u706_21:
 20120  00003A  D045               	goto	i1l8832
 20121  00003C                     i1u706_20:
 20122  00003C                     
 20123                           ;main.c: 139: WriteTimer0(0xfb1d);
 20124  00003C  0EFB               	movlw	251
 20125  00003E  6E02               	movwf	?_WriteTimer0+1,c
 20126  000040  0E1D               	movlw	29
 20127  000042  6E01               	movwf	?_WriteTimer0,c
 20128  000044  ECE5  F028         	call	_WriteTimer0	;wreg free
 20129  000048                     
 20130                           ;main.c: 141: vscp_timer++;
 20131  000048  0101               	movlb	1	; () banked
 20132  00004A  4B1E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 20133  00004C  2B1F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 20134  00004E                     
 20135                           ; BSR set to: 1
 20136                           ;main.c: 142: vscp_configtimer++;
 20137  00004E  4B1C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 20138  000050  2B1D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 20139  000052                     
 20140                           ; BSR set to: 1
 20141                           ;main.c: 143: measurement_clock++;
 20142  000052  0E01               	movlw	1
 20143  000054  2712               	addwf	_measurement_clock& (0+255),f,b	;volatile
 20144  000056  0E00               	movlw	0
 20145  000058  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 20146  00005A  0E00               	movlw	0
 20147  00005C  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 20148  00005E  0E00               	movlw	0
 20149  000060  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 20150  000062                     
 20151                           ; BSR set to: 1
 20152                           ;main.c: 144: timeout_clock++;
 20153  000062  0E01               	movlw	1
 20154  000064  2716               	addwf	_timeout_clock& (0+255),f,b	;volatile
 20155  000066  0E00               	movlw	0
 20156  000068  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 20157  00006A  0E00               	movlw	0
 20158  00006C  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 20159  00006E  0E00               	movlw	0
 20160  000070  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 20161  000072                     
 20162                           ; BSR set to: 1
 20163                           ;main.c: 145: sendTimer++;
 20164  000072  4B1A               	infsnz	_sendTimer& (0+255),f,b	;volatile
 20165  000074  2B1B               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 20166  000076                     
 20167                           ; BSR set to: 1
 20168                           ;main.c: 148: if (!(PORTC & 0x01)) {
 20169  000076  B082               	btfsc	3970,0,c	;volatile
 20170  000078  D001               	goto	i1u707_21
 20171  00007A  D001               	goto	i1u707_20
 20172  00007C                     i1u707_21:
 20173  00007C  D002               	goto	i1l136
 20174  00007E                     i1u707_20:
 20175  00007E                     
 20176                           ; BSR set to: 1
 20177                           ;main.c: 150: vscp_initbtncnt++;
 20178  00007E  2A4F               	incf	_vscp_initbtncnt,f,c	;volatile
 20179                           
 20180                           ;main.c: 151: }
 20181  000080  D001               	goto	i1l8806
 20182  000082                     i1l136:
 20183                           
 20184                           ; BSR set to: 1
 20185                           ;main.c: 152: else {
 20186                           ;main.c: 153: vscp_initbtncnt = 0;
 20187  000082  6A4F               	clrf	_vscp_initbtncnt,c	;volatile
 20188  000084                     i1l8806:
 20189                           
 20190                           ; BSR set to: 1
 20191                           ;main.c: 154: }
 20192                           ;main.c: 157: vscp_statuscnt++;
 20193  000084  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 20194  000086                     
 20195                           ; BSR set to: 1
 20196                           ;main.c: 158: if ( ( 0x02 ==
 20197                           ;main.c: 159: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 20198  000086  5050               	movf	_vscp_initledfunc,w,c
 20199  000088  0A02               	xorlw	2
 20200  00008A  A4D8               	btfss	status,2,c
 20201  00008C  D001               	goto	i1u708_21
 20202  00008E  D001               	goto	i1u708_20
 20203  000090                     i1u708_21:
 20204  000090  D00E               	goto	i1l8820
 20205  000092                     i1u708_20:
 20206  000092                     
 20207                           ; BSR set to: 1
 20208  000092  0E64               	movlw	100
 20209  000094  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 20210  000096  D001               	goto	i1u709_21
 20211  000098  D001               	goto	i1u709_20
 20212  00009A                     i1u709_21:
 20213  00009A  D009               	goto	i1l8820
 20214  00009C                     i1u709_20:
 20215  00009C                     
 20216                           ; BSR set to: 1
 20217                           ;main.c: 160: if ( PORTC & 0x02 ) {
 20218  00009C  A282               	btfss	3970,1,c	;volatile
 20219  00009E  D001               	goto	i1u710_21
 20220  0000A0  D001               	goto	i1u710_20
 20221  0000A2                     i1u710_21:
 20222  0000A2  D002               	goto	i1l8816
 20223  0000A4                     i1u710_20:
 20224  0000A4                     i1l8814:
 20225                           
 20226                           ; BSR set to: 1
 20227                           ;main.c: 161: PORTC &= ~0x02;
 20228  0000A4  9282               	bcf	3970,1,c	;volatile
 20229                           
 20230                           ;main.c: 162: }
 20231  0000A6  D001               	goto	i1l8818
 20232  0000A8                     i1l8816:
 20233                           
 20234                           ; BSR set to: 1
 20235                           ;main.c: 163: else {
 20236                           ;main.c: 164: PORTC |= 0x02;
 20237  0000A8  8282               	bsf	3970,1,c	;volatile
 20238  0000AA                     i1l8818:
 20239                           
 20240                           ; BSR set to: 1
 20241                           ;main.c: 165: }
 20242                           ;main.c: 166: vscp_statuscnt = 0;
 20243  0000AA  6A52               	clrf	_vscp_statuscnt,c	;volatile
 20244                           
 20245                           ;main.c: 167: }
 20246  0000AC  D00B               	goto	i1l8830
 20247  0000AE                     i1l8820:
 20248                           
 20249                           ; BSR set to: 1
 20250                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 20251  0000AE  0450               	decf	_vscp_initledfunc,w,c
 20252  0000B0  A4D8               	btfss	status,2,c
 20253  0000B2  D001               	goto	i1u711_21
 20254  0000B4  D001               	goto	i1u711_20
 20255  0000B6                     i1u711_21:
 20256  0000B6  D001               	goto	i1l142
 20257  0000B8                     i1u711_20:
 20258  0000B8  D7F7               	goto	i1l8816
 20259  0000BA                     i1l142:
 20260                           
 20261                           ; BSR set to: 1
 20262                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 20263  0000BA  6650               	tstfsz	_vscp_initledfunc,c
 20264  0000BC  D001               	goto	i1u712_21
 20265  0000BE  D001               	goto	i1u712_20
 20266  0000C0                     i1u712_21:
 20267  0000C0  D001               	goto	i1l8830
 20268  0000C2                     i1u712_20:
 20269  0000C2  D7F0               	goto	i1l8814
 20270  0000C4                     i1l8830:
 20271                           
 20272                           ; BSR set to: 1
 20273                           ;main.c: 175: }
 20274                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 20275  0000C4  94F2               	bcf	intcon,2,c	;volatile
 20276  0000C6                     i1l8832:
 20277                           
 20278                           ;main.c: 179: }
 20279                           ;main.c: 182: if ( PIR1bits.ADIF ) {
 20280  0000C6  AC9E               	btfss	3998,6,c	;volatile
 20281  0000C8  D001               	goto	i1u713_21
 20282  0000CA  D001               	goto	i1u713_20
 20283  0000CC                     i1u713_21:
 20284  0000CC  D0DF               	goto	i1l162
 20285  0000CE                     i1u713_20:
 20286  0000CE  D0BE               	goto	i1l8894
 20287  0000D0                     i1l8836:
 20288                           
 20289                           ;main.c: 188: adc[(12 * adc_series_counter) + 0] = ADRESH;
 20290  0000D0  5049               	movf	_adc_series_counter,w,c
 20291  0000D2  0D0C               	mullw	12
 20292  0000D4  0EA2               	movlw	low _adc
 20293  0000D6  24F3               	addwf	prodl,w,c
 20294  0000D8  6ED9               	movwf	fsr2l,c
 20295  0000DA  0E01               	movlw	high _adc
 20296  0000DC  20F4               	addwfc	prodh,w,c
 20297  0000DE  6EDA               	movwf	fsr2h,c
 20298  0000E0  CFC4 FFDF          	movff	4036,indf2	;volatile
 20299                           
 20300                           ;main.c: 189: adc[(12 * adc_series_counter) + 1] = ADRESL;
 20301  0000E4  5049               	movf	_adc_series_counter,w,c
 20302  0000E6  0D0C               	mullw	12
 20303  0000E8  0EA3               	movlw	low (_adc+1)
 20304  0000EA  24F3               	addwf	prodl,w,c
 20305  0000EC  6ED9               	movwf	fsr2l,c
 20306  0000EE  0E01               	movlw	high (_adc+1)
 20307  0000F0  20F4               	addwfc	prodh,w,c
 20308  0000F2  6EDA               	movwf	fsr2h,c
 20309  0000F4  CFC3 FFDF          	movff	4035,indf2	;volatile
 20310  0000F8                     
 20311                           ;main.c: 191: ADCON0 = (2<<2) + 1;
 20312  0000F8  0E09               	movlw	9
 20313  0000FA  6EC2               	movwf	4034,c	;volatile
 20314  0000FC                     
 20315                           ;main.c: 195: if ((80 - 1) == adc_series_counter) {
 20316  0000FC  5049               	movf	_adc_series_counter,w,c
 20317  0000FE  0A4F               	xorlw	79
 20318  000100  A4D8               	btfss	status,2,c
 20319  000102  D001               	goto	i1u714_21
 20320  000104  D001               	goto	i1u714_20
 20321  000106                     i1u714_21:
 20322  000106  D0BF               	goto	i1l8896
 20323  000108                     i1u714_20:
 20324  000108                     
 20325                           ;main.c: 196: adc_conversion_flags |= 1;
 20326  000108  8048               	bsf	_adc_conversion_flags,0,c
 20327  00010A  D0BD               	goto	i1l8896
 20328  00010C                     i1l8844:
 20329                           
 20330                           ;main.c: 202: adc[(12 * adc_series_counter) + 2] = ADRESH;
 20331  00010C  5049               	movf	_adc_series_counter,w,c
 20332  00010E  0D0C               	mullw	12
 20333  000110  0EA4               	movlw	low (_adc+2)
 20334  000112  24F3               	addwf	prodl,w,c
 20335  000114  6ED9               	movwf	fsr2l,c
 20336  000116  0E01               	movlw	high (_adc+2)
 20337  000118  20F4               	addwfc	prodh,w,c
 20338  00011A  6EDA               	movwf	fsr2h,c
 20339  00011C  CFC4 FFDF          	movff	4036,indf2	;volatile
 20340                           
 20341                           ;main.c: 203: adc[(12 * adc_series_counter) + 3] = ADRESL;
 20342  000120  5049               	movf	_adc_series_counter,w,c
 20343  000122  0D0C               	mullw	12
 20344  000124  0EA5               	movlw	low (_adc+3)
 20345  000126  24F3               	addwf	prodl,w,c
 20346  000128  6ED9               	movwf	fsr2l,c
 20347  00012A  0E01               	movlw	high (_adc+3)
 20348  00012C  20F4               	addwfc	prodh,w,c
 20349  00012E  6EDA               	movwf	fsr2h,c
 20350  000130  CFC3 FFDF          	movff	4035,indf2	;volatile
 20351  000134                     
 20352                           ;main.c: 206: ADCON0 = (1<<2) + 1;
 20353  000134  0E05               	movlw	5
 20354  000136  6EC2               	movwf	4034,c	;volatile
 20355  000138                     
 20356                           ;main.c: 210: if ((80 - 1) == adc_series_counter) {
 20357  000138  5049               	movf	_adc_series_counter,w,c
 20358  00013A  0A4F               	xorlw	79
 20359  00013C  A4D8               	btfss	status,2,c
 20360  00013E  D001               	goto	i1u715_21
 20361  000140  D001               	goto	i1u715_20
 20362  000142                     i1u715_21:
 20363  000142  D0A1               	goto	i1l8896
 20364  000144                     i1u715_20:
 20365  000144                     
 20366                           ;main.c: 211: adc_conversion_flags |= 1 << 1;
 20367  000144  8248               	bsf	_adc_conversion_flags,1,c
 20368  000146  D09F               	goto	i1l8896
 20369  000148                     i1l8852:
 20370                           
 20371                           ;main.c: 217: adc[(12 * adc_series_counter) + 4] = ADRESH;
 20372  000148  5049               	movf	_adc_series_counter,w,c
 20373  00014A  0D0C               	mullw	12
 20374  00014C  0EA6               	movlw	low (_adc+4)
 20375  00014E  24F3               	addwf	prodl,w,c
 20376  000150  6ED9               	movwf	fsr2l,c
 20377  000152  0E01               	movlw	high (_adc+4)
 20378  000154  20F4               	addwfc	prodh,w,c
 20379  000156  6EDA               	movwf	fsr2h,c
 20380  000158  CFC4 FFDF          	movff	4036,indf2	;volatile
 20381                           
 20382                           ;main.c: 218: adc[(12 * adc_series_counter) + 5] = ADRESL;
 20383  00015C  5049               	movf	_adc_series_counter,w,c
 20384  00015E  0D0C               	mullw	12
 20385  000160  0EA7               	movlw	low (_adc+5)
 20386  000162  24F3               	addwf	prodl,w,c
 20387  000164  6ED9               	movwf	fsr2l,c
 20388  000166  0E01               	movlw	high (_adc+5)
 20389  000168  20F4               	addwfc	prodh,w,c
 20390  00016A  6EDA               	movwf	fsr2h,c
 20391  00016C  CFC3 FFDF          	movff	4035,indf2	;volatile
 20392  000170                     
 20393                           ;main.c: 221: ADCON0 = (0<<2) + 1;
 20394  000170  0E01               	movlw	1
 20395  000172  6EC2               	movwf	4034,c	;volatile
 20396  000174                     
 20397                           ;main.c: 225: if ((80 - 1) == adc_series_counter) {
 20398  000174  5049               	movf	_adc_series_counter,w,c
 20399  000176  0A4F               	xorlw	79
 20400  000178  A4D8               	btfss	status,2,c
 20401  00017A  D001               	goto	i1u716_21
 20402  00017C  D001               	goto	i1u716_20
 20403  00017E                     i1u716_21:
 20404  00017E  D083               	goto	i1l8896
 20405  000180                     i1u716_20:
 20406  000180                     
 20407                           ;main.c: 226: adc_conversion_flags |= 1 << 2;
 20408  000180  8448               	bsf	_adc_conversion_flags,2,c
 20409  000182  D081               	goto	i1l8896
 20410  000184                     i1l8860:
 20411                           
 20412                           ;main.c: 232: adc[(12 * adc_series_counter) + 6] = ADRESH;
 20413  000184  5049               	movf	_adc_series_counter,w,c
 20414  000186  0D0C               	mullw	12
 20415  000188  0EA8               	movlw	low (_adc+6)
 20416  00018A  24F3               	addwf	prodl,w,c
 20417  00018C  6ED9               	movwf	fsr2l,c
 20418  00018E  0E01               	movlw	high (_adc+6)
 20419  000190  20F4               	addwfc	prodh,w,c
 20420  000192  6EDA               	movwf	fsr2h,c
 20421  000194  CFC4 FFDF          	movff	4036,indf2	;volatile
 20422                           
 20423                           ;main.c: 233: adc[(12 * adc_series_counter) + 7] = ADRESL;
 20424  000198  5049               	movf	_adc_series_counter,w,c
 20425  00019A  0D0C               	mullw	12
 20426  00019C  0EA9               	movlw	low (_adc+7)
 20427  00019E  24F3               	addwf	prodl,w,c
 20428  0001A0  6ED9               	movwf	fsr2l,c
 20429  0001A2  0E01               	movlw	high (_adc+7)
 20430  0001A4  20F4               	addwfc	prodh,w,c
 20431  0001A6  6EDA               	movwf	fsr2h,c
 20432  0001A8  CFC3 FFDF          	movff	4035,indf2	;volatile
 20433  0001AC                     
 20434                           ;main.c: 235: ADCON0 = (9<<2) + 1;
 20435  0001AC  0E25               	movlw	37
 20436  0001AE  6EC2               	movwf	4034,c	;volatile
 20437  0001B0                     
 20438                           ;main.c: 239: if ((80 - 1) == adc_series_counter) {
 20439  0001B0  5049               	movf	_adc_series_counter,w,c
 20440  0001B2  0A4F               	xorlw	79
 20441  0001B4  A4D8               	btfss	status,2,c
 20442  0001B6  D001               	goto	i1u717_21
 20443  0001B8  D001               	goto	i1u717_20
 20444  0001BA                     i1u717_21:
 20445  0001BA  D065               	goto	i1l8896
 20446  0001BC                     i1u717_20:
 20447  0001BC                     
 20448                           ;main.c: 240: adc_conversion_flags |= 1 << 3;
 20449  0001BC  8648               	bsf	_adc_conversion_flags,3,c
 20450  0001BE  D063               	goto	i1l8896
 20451  0001C0                     i1l8868:
 20452                           
 20453                           ;main.c: 246: adc[(12 * adc_series_counter) + 8] = ADRESH;
 20454  0001C0  5049               	movf	_adc_series_counter,w,c
 20455  0001C2  0D0C               	mullw	12
 20456  0001C4  0EAA               	movlw	low (_adc+8)
 20457  0001C6  24F3               	addwf	prodl,w,c
 20458  0001C8  6ED9               	movwf	fsr2l,c
 20459  0001CA  0E01               	movlw	high (_adc+8)
 20460  0001CC  20F4               	addwfc	prodh,w,c
 20461  0001CE  6EDA               	movwf	fsr2h,c
 20462  0001D0  CFC4 FFDF          	movff	4036,indf2	;volatile
 20463                           
 20464                           ;main.c: 247: adc[(12 * adc_series_counter) + 9] = ADRESL;
 20465  0001D4  5049               	movf	_adc_series_counter,w,c
 20466  0001D6  0D0C               	mullw	12
 20467  0001D8  0EAB               	movlw	low (_adc+9)
 20468  0001DA  24F3               	addwf	prodl,w,c
 20469  0001DC  6ED9               	movwf	fsr2l,c
 20470  0001DE  0E01               	movlw	high (_adc+9)
 20471  0001E0  20F4               	addwfc	prodh,w,c
 20472  0001E2  6EDA               	movwf	fsr2h,c
 20473  0001E4  CFC3 FFDF          	movff	4035,indf2	;volatile
 20474  0001E8                     
 20475                           ;main.c: 249: ADCON0 = (8<<2) + 1;
 20476  0001E8  0E21               	movlw	33
 20477  0001EA  6EC2               	movwf	4034,c	;volatile
 20478  0001EC                     
 20479                           ;main.c: 253: if ((80 - 1) == adc_series_counter) {
 20480  0001EC  5049               	movf	_adc_series_counter,w,c
 20481  0001EE  0A4F               	xorlw	79
 20482  0001F0  A4D8               	btfss	status,2,c
 20483  0001F2  D001               	goto	i1u718_21
 20484  0001F4  D001               	goto	i1u718_20
 20485  0001F6                     i1u718_21:
 20486  0001F6  D047               	goto	i1l8896
 20487  0001F8                     i1u718_20:
 20488  0001F8                     
 20489                           ;main.c: 254: adc_conversion_flags |= 1 << 4;
 20490  0001F8  8848               	bsf	_adc_conversion_flags,4,c
 20491  0001FA  D045               	goto	i1l8896
 20492  0001FC                     i1l8876:
 20493                           
 20494                           ;main.c: 260: adc[(12 * adc_series_counter) + 10] = ADRESH;
 20495  0001FC  5049               	movf	_adc_series_counter,w,c
 20496  0001FE  0D0C               	mullw	12
 20497  000200  0EAC               	movlw	low (_adc+10)
 20498  000202  24F3               	addwf	prodl,w,c
 20499  000204  6ED9               	movwf	fsr2l,c
 20500  000206  0E01               	movlw	high (_adc+10)
 20501  000208  20F4               	addwfc	prodh,w,c
 20502  00020A  6EDA               	movwf	fsr2h,c
 20503  00020C  CFC4 FFDF          	movff	4036,indf2	;volatile
 20504                           
 20505                           ;main.c: 261: adc[(12 * adc_series_counter) + 11] = ADRESL;
 20506  000210  5049               	movf	_adc_series_counter,w,c
 20507  000212  0D0C               	mullw	12
 20508  000214  0EAD               	movlw	low (_adc+11)
 20509  000216  24F3               	addwf	prodl,w,c
 20510  000218  6ED9               	movwf	fsr2l,c
 20511  00021A  0E01               	movlw	high (_adc+11)
 20512  00021C  20F4               	addwfc	prodh,w,c
 20513  00021E  6EDA               	movwf	fsr2h,c
 20514  000220  CFC3 FFDF          	movff	4035,indf2	;volatile
 20515  000224                     
 20516                           ;main.c: 263: ADCON0 = (10<<2) + 1;
 20517  000224  0E29               	movlw	41
 20518  000226  6EC2               	movwf	4034,c	;volatile
 20519  000228                     
 20520                           ;main.c: 267: if ((80 - 1) == adc_series_counter) {
 20521  000228  5049               	movf	_adc_series_counter,w,c
 20522  00022A  0A4F               	xorlw	79
 20523  00022C  A4D8               	btfss	status,2,c
 20524  00022E  D001               	goto	i1u719_21
 20525  000230  D001               	goto	i1u719_20
 20526  000232                     i1u719_21:
 20527  000232  D001               	goto	i1l159
 20528  000234                     i1u719_20:
 20529  000234                     
 20530                           ;main.c: 268: adc_conversion_flags |= 1 << 5;
 20531  000234  8A48               	bsf	_adc_conversion_flags,5,c
 20532  000236                     i1l159:
 20533                           
 20534                           ;main.c: 269: }
 20535                           ;main.c: 272: adc_series_counter++;
 20536  000236  2A49               	incf	_adc_series_counter,f,c
 20537  000238                     
 20538                           ;main.c: 273: if (adc_series_counter >= 80) {
 20539  000238  0E4F               	movlw	79
 20540  00023A  6449               	cpfsgt	_adc_series_counter,c
 20541  00023C  D001               	goto	i1u720_21
 20542  00023E  D001               	goto	i1u720_20
 20543  000240                     i1u720_21:
 20544  000240  D022               	goto	i1l8896
 20545  000242                     i1u720_20:
 20546  000242                     i1l8886:
 20547                           
 20548                           ;main.c: 274: adc_series_counter = 0;
 20549  000242  6A49               	clrf	_adc_series_counter,c
 20550  000244  D020               	goto	i1l8896
 20551  000246                     i1l8888:
 20552                           
 20553                           ;main.c: 280: ADCON0 = (10<<2) + 1;
 20554  000246  0E29               	movlw	41
 20555  000248  6EC2               	movwf	4034,c	;volatile
 20556  00024A  D7FB               	goto	i1l8886
 20557  00024C                     i1l8894:
 20558  00024C  50C2               	movf	4034,w,c	;volatile
 20559  00024E  0B3C               	andlw	60
 20560  000250  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 20561  000252  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 20562                           
 20563                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20564                           ; Switch size 1, requested type "space"
 20565                           ; Number of cases is 1, Range of values is 0 to 0
 20566                           ; switch strategies available:
 20567                           ; Name         Instructions Cycles
 20568                           ; simple_byte            4     3 (average)
 20569                           ;	Chosen strategy is simple_byte
 20570  000254  5006               	movf	??_interrupt_at_low_vector+1,w,c
 20571  000256  0A00               	xorlw	0	; case 0
 20572  000258  B4D8               	btfsc	status,2,c
 20573  00025A  D001               	goto	i1l11414
 20574  00025C  D7F4               	goto	i1l8888
 20575  00025E                     i1l11414:
 20576                           
 20577                           ; Switch size 1, requested type "space"
 20578                           ; Number of cases is 6, Range of values is 0 to 40
 20579                           ; switch strategies available:
 20580                           ; Name         Instructions Cycles
 20581                           ; simple_byte           19    10 (average)
 20582                           ;	Chosen strategy is simple_byte
 20583  00025E  5005               	movf	??_interrupt_at_low_vector,w,c
 20584  000260  0A00               	xorlw	0	; case 0
 20585  000262  B4D8               	btfsc	status,2,c
 20586  000264  D78F               	goto	i1l8860
 20587  000266  0A04               	xorlw	4	; case 4
 20588  000268  B4D8               	btfsc	status,2,c
 20589  00026A  D76E               	goto	i1l8852
 20590  00026C  0A0C               	xorlw	12	; case 8
 20591  00026E  B4D8               	btfsc	status,2,c
 20592  000270  D74D               	goto	i1l8844
 20593  000272  0A28               	xorlw	40	; case 32
 20594  000274  B4D8               	btfsc	status,2,c
 20595  000276  D7C2               	goto	i1l8876
 20596  000278  0A04               	xorlw	4	; case 36
 20597  00027A  B4D8               	btfsc	status,2,c
 20598  00027C  D7A1               	goto	i1l8868
 20599  00027E  0A0C               	xorlw	12	; case 40
 20600  000280  B4D8               	btfsc	status,2,c
 20601  000282  D726               	goto	i1l8836
 20602  000284  D7E0               	goto	i1l8888
 20603  000286                     i1l8896:
 20604                           
 20605                           ;main.c: 286: ConvertADC();
 20606  000286  EC12  F029         	call	_ConvertADC	;wreg free
 20607  00028A                     
 20608                           ;main.c: 288: PIR1bits.ADIF = 0;
 20609  00028A  9C9E               	bcf	3998,6,c	;volatile
 20610  00028C                     i1l162:
 20611  00028C  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 20612  000290  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 20613  000294  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 20614  000298  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 20615  00029C  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 20616  0002A0  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 20617  0002A4  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 20618  0002A8  0010               	retfie	
 20619  0002AA                     __end_of_interrupt_at_low_vector:
 20620                           	opt stack 0
 20621                           tblptru	equ	0xFF8
 20622                           tblptrh	equ	0xFF7
 20623                           tblptrl	equ	0xFF6
 20624                           tablat	equ	0xFF5
 20625                           prodh	equ	0xFF4
 20626                           prodl	equ	0xFF3
 20627                           intcon	equ	0xFF2
 20628                           postinc0	equ	0xFEE
 20629                           wreg	equ	0xFE8
 20630                           indf1	equ	0xFE7
 20631                           postdec1	equ	0xFE5
 20632                           fsr1h	equ	0xFE2
 20633                           fsr1l	equ	0xFE1
 20634                           bsr	equ	0xFE0
 20635                           indf2	equ	0xFDF
 20636                           postinc2	equ	0xFDE
 20637                           postdec2	equ	0xFDD
 20638                           plusw2	equ	0xFDB
 20639                           fsr2h	equ	0xFDA
 20640                           fsr2l	equ	0xFD9
 20641                           status	equ	0xFD8
 20642                           
 20643 ;; *************** function _ConvertADC *****************
 20644 ;; Defined at:
 20645 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 20646 ;; Parameters:    Size  Location     Type
 20647 ;;		None
 20648 ;; Auto vars:     Size  Location     Type
 20649 ;;		None
 20650 ;; Return value:  Size  Location     Type
 20651 ;;		None               void
 20652 ;; Registers used:
 20653 ;;		None
 20654 ;; Tracked objects:
 20655 ;;		On entry : 0/0
 20656 ;;		On exit  : 0/0
 20657 ;;		Unchanged: 0/0
 20658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20659 ;;      Params:         0       0       0       0       0       0       0
 20660 ;;      Locals:         0       0       0       0       0       0       0
 20661 ;;      Temps:          0       0       0       0       0       0       0
 20662 ;;      Totals:         0       0       0       0       0       0       0
 20663 ;;Total ram usage:        0 bytes
 20664 ;; Hardware stack levels used:    1
 20665 ;; This function calls:
 20666 ;;		Nothing
 20667 ;; This function is called by:
 20668 ;;		_interrupt_at_low_vector
 20669 ;; This function uses a non-reentrant model
 20670 ;;
 20671                           
 20672                           	psect	text93
 20673  005224                     __ptext93:
 20674                           	opt stack 0
 20675  005224                     _ConvertADC:
 20676                           	opt stack 22
 20677                           
 20678                           ;incstack = 0
 20679                           ;incstack = 0
 20680  005224  82C2               	bsf	4034,1,c	;volatile
 20681  005226  0012               	return	
 20682  005228                     __end_of_ConvertADC:
 20683                           	opt stack 0
 20684                           tblptru	equ	0xFF8
 20685                           tblptrh	equ	0xFF7
 20686                           tblptrl	equ	0xFF6
 20687                           tablat	equ	0xFF5
 20688                           prodh	equ	0xFF4
 20689                           prodl	equ	0xFF3
 20690                           intcon	equ	0xFF2
 20691                           postinc0	equ	0xFEE
 20692                           wreg	equ	0xFE8
 20693                           indf1	equ	0xFE7
 20694                           postdec1	equ	0xFE5
 20695                           fsr1h	equ	0xFE2
 20696                           fsr1l	equ	0xFE1
 20697                           bsr	equ	0xFE0
 20698                           indf2	equ	0xFDF
 20699                           postinc2	equ	0xFDE
 20700                           postdec2	equ	0xFDD
 20701                           plusw2	equ	0xFDB
 20702                           fsr2h	equ	0xFDA
 20703                           fsr2l	equ	0xFD9
 20704                           status	equ	0xFD8
 20705                           
 20706 ;; *************** function _WriteTimer0 *****************
 20707 ;; Defined at:
 20708 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 20709 ;; Parameters:    Size  Location     Type
 20710 ;;  timer0          2    0[COMRAM] unsigned int 
 20711 ;; Auto vars:     Size  Location     Type
 20712 ;;  timer           2    2[COMRAM] struct Timers
 20713 ;; Return value:  Size  Location     Type
 20714 ;;		None               void
 20715 ;; Registers used:
 20716 ;;		None
 20717 ;; Tracked objects:
 20718 ;;		On entry : 0/0
 20719 ;;		On exit  : 0/0
 20720 ;;		Unchanged: 0/0
 20721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20722 ;;      Params:         2       0       0       0       0       0       0
 20723 ;;      Locals:         2       0       0       0       0       0       0
 20724 ;;      Temps:          0       0       0       0       0       0       0
 20725 ;;      Totals:         4       0       0       0       0       0       0
 20726 ;;Total ram usage:        4 bytes
 20727 ;; Hardware stack levels used:    1
 20728 ;; This function calls:
 20729 ;;		Nothing
 20730 ;; This function is called by:
 20731 ;;		_interrupt_at_low_vector
 20732 ;; This function uses a non-reentrant model
 20733 ;;
 20734                           
 20735                           	psect	text94
 20736  0051CA                     __ptext94:
 20737                           	opt stack 0
 20738  0051CA                     _WriteTimer0:
 20739                           	opt stack 22
 20740                           
 20741                           ;incstack = 0
 20742                           ;incstack = 0
 20743  0051CA  C001  F003         	movff	WriteTimer0@timer0,WriteTimer0@timer
 20744  0051CE  C002  F004         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 20745  0051D2  C004  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 20746  0051D6  C003  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 20747  0051DA  0012               	return	
 20748  0051DC                     __end_of_WriteTimer0:
 20749                           	opt stack 0
 20750                           tblptru	equ	0xFF8
 20751                           tblptrh	equ	0xFF7
 20752                           tblptrl	equ	0xFF6
 20753                           tablat	equ	0xFF5
 20754                           prodh	equ	0xFF4
 20755                           prodl	equ	0xFF3
 20756                           intcon	equ	0xFF2
 20757                           postinc0	equ	0xFEE
 20758                           wreg	equ	0xFE8
 20759                           indf1	equ	0xFE7
 20760                           postdec1	equ	0xFE5
 20761                           fsr1h	equ	0xFE2
 20762                           fsr1l	equ	0xFE1
 20763                           bsr	equ	0xFE0
 20764                           indf2	equ	0xFDF
 20765                           postinc2	equ	0xFDE
 20766                           postdec2	equ	0xFDD
 20767                           plusw2	equ	0xFDB
 20768                           fsr2h	equ	0xFDA
 20769                           fsr2l	equ	0xFD9
 20770                           status	equ	0xFD8
 20771                           tblptru	equ	0xFF8
 20772                           tblptrh	equ	0xFF7
 20773                           tblptrl	equ	0xFF6
 20774                           tablat	equ	0xFF5
 20775                           prodh	equ	0xFF4
 20776                           prodl	equ	0xFF3
 20777                           intcon	equ	0xFF2
 20778                           postinc0	equ	0xFEE
 20779                           wreg	equ	0xFE8
 20780                           indf1	equ	0xFE7
 20781                           postdec1	equ	0xFE5
 20782                           fsr1h	equ	0xFE2
 20783                           fsr1l	equ	0xFE1
 20784                           bsr	equ	0xFE0
 20785                           indf2	equ	0xFDF
 20786                           postinc2	equ	0xFDE
 20787                           postdec2	equ	0xFDD
 20788                           plusw2	equ	0xFDB
 20789                           fsr2h	equ	0xFDA
 20790                           fsr2l	equ	0xFD9
 20791                           status	equ	0xFD8
 20792                           
 20793                           	psect	text95
 20794  000000                     __ptext95:
 20795                           	opt stack 0
 20796                           tblptru	equ	0xFF8
 20797                           tblptrh	equ	0xFF7
 20798                           tblptrl	equ	0xFF6
 20799                           tablat	equ	0xFF5
 20800                           prodh	equ	0xFF4
 20801                           prodl	equ	0xFF3
 20802                           intcon	equ	0xFF2
 20803                           postinc0	equ	0xFEE
 20804                           wreg	equ	0xFE8
 20805                           indf1	equ	0xFE7
 20806                           postdec1	equ	0xFE5
 20807                           fsr1h	equ	0xFE2
 20808                           fsr1l	equ	0xFE1
 20809                           bsr	equ	0xFE0
 20810                           indf2	equ	0xFDF
 20811                           postinc2	equ	0xFDE
 20812                           postdec2	equ	0xFDD
 20813                           plusw2	equ	0xFDB
 20814                           fsr2h	equ	0xFDA
 20815                           fsr2l	equ	0xFD9
 20816                           status	equ	0xFD8
 20817                           
 20818                           	psect	rparam
 20819  0000                     tblptru	equ	0xFF8
 20820                           tblptrh	equ	0xFF7
 20821                           tblptrl	equ	0xFF6
 20822                           tablat	equ	0xFF5
 20823                           prodh	equ	0xFF4
 20824                           prodl	equ	0xFF3
 20825                           intcon	equ	0xFF2
 20826                           postinc0	equ	0xFEE
 20827                           wreg	equ	0xFE8
 20828                           indf1	equ	0xFE7
 20829                           postdec1	equ	0xFE5
 20830                           fsr1h	equ	0xFE2
 20831                           fsr1l	equ	0xFE1
 20832                           bsr	equ	0xFE0
 20833                           indf2	equ	0xFDF
 20834                           postinc2	equ	0xFDE
 20835                           postdec2	equ	0xFDD
 20836                           plusw2	equ	0xFDB
 20837                           fsr2h	equ	0xFDA
 20838                           fsr2l	equ	0xFD9
 20839                           status	equ	0xFD8
 20840                           tblptru	equ	0xFF8
 20841                           tblptrh	equ	0xFF7
 20842                           tblptrl	equ	0xFF6
 20843                           tablat	equ	0xFF5
 20844                           prodh	equ	0xFF4
 20845                           prodl	equ	0xFF3
 20846                           intcon	equ	0xFF2
 20847                           postinc0	equ	0xFEE
 20848                           wreg	equ	0xFE8
 20849                           indf1	equ	0xFE7
 20850                           postdec1	equ	0xFE5
 20851                           fsr1h	equ	0xFE2
 20852                           fsr1l	equ	0xFE1
 20853                           bsr	equ	0xFE0
 20854                           indf2	equ	0xFDF
 20855                           postinc2	equ	0xFDE
 20856                           postdec2	equ	0xFDD
 20857                           plusw2	equ	0xFDB
 20858                           fsr2h	equ	0xFDA
 20859                           fsr2l	equ	0xFD9
 20860                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1112
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     92     121
    BANK1           256     52     162
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___fladd	short  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	short  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->_log
    _doWork->___altofl
    ___lwtofl->_readEEPROM
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _ldexp->_eval_poly
    _floor->___altofl
    ___altofl->___fltol
    ___asflsub->___flsub
    ___flsub->___fladd
    ___fldiv->___flsub
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    ___fladd->___awtofl
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeStdReg->_vscp_getGUID
    _vscp_writeStdReg->_vscp_getUserID
    _vscp_writeStdReg->_vscp_getManufacturerId
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _writeCoeffs2Ram->_readEEPROM
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_readNicknamePermanent->_readEEPROM
    _readEEPROM->___wmul
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___asfldiv->___fldiv
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame
    ___flmul->___fldiv

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   84967
                                             91 BANK0      1     1      0
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              66    66      0   29188
                                             77 BANK0     14    14      0
                                              0 BANK1     52    52      0
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             25 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     822
                                              8 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             44 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             38 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             25 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             67 COMRAM     2     2      0
                                             41 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             66 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             41 BANK0      9     3      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             66 COMRAM     1     1      0
                                             30 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             56 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             66 COMRAM     2     2      0
                                             30 BANK0      8     4      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             68 COMRAM     1     1      0
                                             52 BANK0      4     0      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             52 COMRAM     6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             44 COMRAM     8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             66 COMRAM     1     1      0
                                             30 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             52 COMRAM    14    14      0
                                              0 BANK0      8     0      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                     11    11      0   12267
                                             48 BANK0     11    11      0
                        _writeEEPROM
                         _readEEPROM
                      _sendTempEvent
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7768
                                             48 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7542
                                             68 COMRAM     1     1      0
                                             47 BANK0      1     1      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             38 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             30 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             29 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             44 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   24226
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    6122
                                             38 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1581
                                             26 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     134
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0      90
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      0     0      0      44
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4386
                                             34 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeCoeffs2Ram                                      9     9      0     555
                                             25 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     159
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             43 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             26 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             25 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             21 COMRAM     4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      44
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     6     2      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              8 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             25 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0      68
                                              4 COMRAM     9     9      0
                        _WriteTimer0
                         _ConvertADC
 ---------------------------------------------------------------------------------
 (9) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _WriteTimer0                                          4     2      2      68
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
         ___wmul (ARG)
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
         ___wmul (ARG)
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
           ___wmul (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
         ___wmul (ARG)
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
         ___wmul (ARG)
       _writeCoeffs2Ram
         _readEEPROM
           ___wmul (ARG)
         ___wmul
       _vscp_readAppReg (ARG)
         _readEEPROM
           ___wmul (ARG)
     _vscp_getGUID
       _readEEPROM
         ___wmul (ARG)
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
           ___wmul (ARG)
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
           ___wmul (ARG)
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
           ___wmul (ARG)
         _writeCoeffs2Ram
           _readEEPROM
             ___wmul (ARG)
           ___wmul
         _vscp_readAppReg (ARG)
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _handle_sync
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _writeEEPROM
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
         ___wmul (ARG)
     _vscp_getSubzone
       _readEEPROM
         ___wmul (ARG)
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
           ___wmul (ARG)
       _vscp_getSubzone (ARG)
         _readEEPROM
           ___wmul (ARG)
   _doWork
     _readEEPROM
       ___wmul (ARG)
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
                 ___wmul (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
         ___wmul (ARG)
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
           ___wmul (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
             ___wmul (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
         ___wmul (ARG)
       ___flpack (ARG)

 _interrupt_at_low_vector (ROOT)
   _WriteTimer0
   _ConvertADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     34      A2       7       63.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      79       5       75.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16D       3        0.0%
DATA                 0      0     538      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Wed Nov 25 16:57:54 2015

                          ___asfldiv@f1p 0068                            ___altofl@sign 0045  
                           ___fldiv@cntr 0040                  __end_of_vscp_readAppReg 1B14  
                           ___fldiv@sign 0042                    __end_of_sendVSCPFrame 43C6  
                           ___asflmul@mp 0043                             ___asflsub@f2 0037  
                                     PL2 2B00                                       PL4 2B0E  
                                     PL6 2B26                                       PL8 2B42  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 000E  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 0011  
                    ___wmul@multiplicand 0010                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 361A                            ___asflsub@f1p 0035  
                           ___flpack@arg 000E                                      PL10 2B5E  
                                    PL20 2BA4                                      PL12 2B6C  
                                    PL30 3C26                                      PL22 3AE8  
                                    PL14 2B86                                      PL40 3AF6  
                                    PL32 2BCE                                      PL24 2BB4  
                                    PL16 2B94                                      PL50 38E4  
                                    PL42 3B08                                      PL34 2BE6  
                                    PL26 3C16                                      PL18 3C02  
                                    PL60 4E5C                                      PL52 3B30  
                                    PL44 3C38                                      PL36 210C  
                                    PL28 20F4                                      PL70 2C30  
                                    PL62 2C20                                      PL54 2BFC  
                                    PL46 361A                                      PL38 4300  
                                    PL80 2C4C                                      PL72 48F4  
                                    PL64 1358                                      PL56 3092  
                                    PL48 3B1C                                      PL90 2C5A  
                                    PL82 3C4C                                      PL74 40DA  
                                    PL66 40CA                                      PL58 2C0E  
                                    PL92 2C60                                      PL84 362E  
                                    PL76 2120                                      PL68 32A8  
                                    PL86 4254                                      PL78 2C3E  
                                    PL88 212E                             ___flpack@exp 0012  
                         _Celsius2Kelvin 4E06                                      l205 2774  
                                    l311 13E8                                      l313 13F4  
                                    l225 2A0A                                      l315 1400  
                                    l404 180E                                      l317 140C  
                                    l309 13DC                                      l181 3EDC  
                                    l166 3E6C                                      l319 1418  
                                    l175 3EB2                                      l513 0FE4  
                                    l249 4500                       vscp_readStdReg@idx 0028  
                                    l516 1032                                      l623 488A  
                                    l289 47DC                                      l634 4EC6  
                                    l546 5090                                      l629 4C8A  
                                    l830 30E0                                      l912 4FD8  
                                    l840 31B2                                      l841 3132  
                                    l825 379E                                      l817 3706  
                                    l851 318C                                      l843 3140  
                                    l819 3724                                      l588 5142  
                                    l861 3218                                      l853 319C  
                                    l845 3154                                      l837 32A6  
                                    l862 3232                       vscp_readStdReg@reg 002B  
                                    l847 3168                                      l849 317C  
                                    l884 3AE6                                      l879 3C00  
                                    l889 49E4                             __CFG_CPB$OFF 000000  
         __size_of_vscp_handleProbeState 00D0                         setEventData@ival 008D  
                         getVSCPFrame@id 002E            __end_of_vscp_handleProbeState 4022  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                       setEventData@unit 0088                                      _adc 01A2  
                                    _exp 32B6                                      _log 38F6  
                                    fsr2 000FD9                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 007C  
                           ___flmul@sign 007D                             __CFG_LVP$OFF 000000  
                          ___flpack@sign 0013                             ___fltol@exp1 0044  
                           __CFG_WDT$OFF 000000                                     l1101 50C8  
                                   l1030 504C                                     l1040 401C  
                                   l1041 3F9C                                     l1025 4CA4  
                                   l1230 1E5E                                     l1206 1CDA  
                                   l1231 1E72                                     l1048 400A  
                                   l1232 1EAE                                     l1049 3FE4  
                                   l1073 4D56                                     l1241 1EEA  
                                   l1146 506E                                     l1083 4E8E  
                                   l1084 4E9A                                     l1172 3D5A  
                                   l1077 5028                                     l1088 4F1A  
                                   l1097 4A40                                     l1601 4474  
                                   l1274 4F44                                     l1266 20F2  
                                   l1610 4AD8                                     l1531 41B2  
                                   l1532 4252                                     l1542 4214  
                                   l1536 41E6                                     l1616 40C8  
                                   l1560 3364                                     l1609 4ABA  
                                   l1561 348A                                     l1570 38E2  
                                   l1650 3D94                                     l1651 3E5A  
                                   l1573 37EA                                     l1653 3E4A  
                                   l1557 349A                                     l1662 466A  
                                   l1584 387A                                     l1569 37C2  
                                   l1682 45C8                                     l1678 4790  
                                   l1849 3A22                  __end_of_doOneSecondWork 2B00  
                    vscp_readStdReg@code 0020                                     l8010 3234  
                                   l8102 3A82                vscp_getManufacturerId@idx 001A  
                                   l8032 3290                                     l8018 3260  
                                   l8026 327A                                     l7172 4DA0  
                                   ?_exp 00A2                                     ?_log 0089  
                                   l8070 497E                                     l9110 3EA2  
                                   l9102 3E8E                                     l8080 49AE  
                                   l8072 4986                                     l9112 3EA6  
                                   l8082 49B4                                     l8074 4990  
                                   l9122 3EC2                                     l9114 3EAC  
                                   l9106 3E98                                     l8084 49BA  
                                   l8076 499A                                     l9212 3F76  
                                   l9300 1B6E                                     l9132 3EE0  
                                   l8078 49A4                                     l9214 3F7E  
                                   l9302 1B74                                     l9150 3F22  
                                   l9134 3EF8                                     l8088 49C6  
                                   l9232 3FB8                                     l9160 3F42  
                                   l9128 3ED6                                     l9170 5038  
                                   l7802 4EA4                                     l7714 50D0  
                                   l9410 1CFC                                     l9236 3FBE  
                                   l9316 1B7C                                     l9156 3F3A  
                                   l7806 4EA8                                     l9238 3FC2  
                                   l9414 1D0C                                     l9350 1BAE  
                                   l9424 1D6E                                     l9408 1CDE  
                                   l9336 1BA2                                     l9280 1B30  
                                   l7930 3110                                     l7914 30CC  
                                   l7682 507C                                     l9602 1F36  
                                   l9506 1E52                                     l9418 1D24  
                                   l9282 1B36                                     l9274 1B1E  
                                   l7924 30F8                                     l7932 311C  
                                   l9268 400E                                     l9620 1F7A  
                                   l9428 1D84                                     l9444 1DAA  
                                   l9276 1B24                                     l7790 482E  
                                   l9198 3F54                                     l9614 1F62  
                                   l9542 1EA2                                     l9534 1E92  
                                   l9526 1E74                                     l9462 1E00  
                                   l9446 1DAC                                     l9366 1C0A  
                                   l9278 1B2A                                     l9710 47B8  
                                   l9640 1FA4                                     l9552 1EB0  
                                   l9456 1DD0                                     l9448 1DB6  
                                   l9376 1C3E                                     l9720 4808  
                                   l9800 291E                                     l7938 3120  
                                   l9618 1F74                                     l9538 1E9A  
                                   l9490 1E32                                     l9474 1E12  
                                   l9386 1C72                                     l9714 47E8  
                                   l9706 4794                                     l9730 2704  
                                   l8772 4F66                                     l8764 4F50  
                                   l9644 1FBA                                     l9636 1F8A  
                                   l9556 1ECA                                     l9396 1CA6  
                                   l7982 31C6                                     l9670 2042  
                                   l9718 47FC                                     l9830 29F2  
                                   l9806 2956                                     l9902 4A26  
                                   l7992 31E8                                     l9648 1FD6  
                                   l9592 1F14                                     l9808 2970  
                                   l9736 27E6                                     l9666 201A  
                                   l9658 2000                                     l9578 1EEC  
                                   l9762 288C                                     l9746 2822  
                                   l9692 2092                                     l9844 2A46  
                                   l9828 29EC                                     l9764 2892  
                                   l9846 2A60                                     l9790 28FE  
                                   l9774 28B0                                     l9926 2CC8  
                                   l9918 2C9E                                     l9866 2AD8  
                                   l9868 2ADE                                     l9788 28F8  
                                   l9892 4A12                                     l9972 3086  
                                   l9878 2AF6                                     l9898 4A1E  
                                   l9994 3308                                     l9988 32D4  
                                   l9998 3332              __size_of_vscp_getMatrixInfo 001A  
                         sendCANFrame@id 003C                                     u5370 487E  
                                   u5375 4874                                     u5545 30D4  
                                   u5547 30D8                                     u9005 3B78  
                                   u9015 3B96                                     u8304 2966  
                                   u8224 2B1E                                     u8305 2962  
                                   u8225 2B1A                                     u8404 2A56  
                                   u8405 2A52                                     u9310 359E  
                                   u8174 2842                                     u5855 3A4A  
                                   u8175 283E                                     u5865 3A5A  
                                   u5875 3A86                                     u9315 359C  
                                   u9340 35E8                                     u8544 2CB0  
                         sendCANFrame@rv 0042                                     u9345 35E6  
                                   u8545 2CAC                                     u8650 344E  
                                   u8670 390A                                     u8574 307E  
                                   u8575 307A                                     u8855 4350  
                                   u9920 403C                                     u9890 43E0  
                                   u8995 3B68                             __CFG_PWRT$ON 000000  
              vscp_setManufacturerId@idx 0012                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 3E5C  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 00A2                                     log@x 0089  
                  __size_of_vscp_getZone 000A                         _vscp_writeAppReg 066E  
                            _vscp_minute 0122                              _vscp_second 0125  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 02AA            __size_of_vscp_doOneSecondWork 0054  
                      vscp_getUserID@idx 001A                    __size_of_vscp_setGUID 0022  
                       _vscp_writeStdReg 3C56                              _writeEEPROM 4FBC  
              ECANReceiveMessage@dataLen 0016                    getVSCPFrame@pPriority 0026  
                        _sh_coefficients 0126                     __end_of_getVSCPFrame 488C  
                                  ??_exp 0046                                    ??_log 0044  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 4E3A  
                   __size_of_getCANFrame 002C                                    l10100 4676  
                                  l10014 3458                                    l10200 156E  
                                  l10120 138E                                    l11000 411A  
                                  l10210 15AA                                    l10202 157A  
                                  l10130 13CA                                    l10122 139A  
                                  l10026 3914                                    l11010 4142  
                                  l10300 17C6                                    l10220 15E6  
                                  l10212 15B6                                    l10204 1586  
                                  l10140 1406                                    l10132 13D6  
                                  l10124 13A6                                    l10116 1376  
                                  l11100 3898                                    l10310 1802  
                                  l10302 17D2                                    l10230 1622  
                                  l10222 15F2                                    l10214 15C2  
                                  l10206 1592                                    l10150 1442  
                                  l10142 1412                                    l10134 13E2  
                                  l10126 13B2                                    l10118 1382  
                                  l10070 44AC                                    l11006 4132  
                                  l11022 417E                                    l10312 1812  
                                  l10304 17DE                                    l10240 165E  
                                  l10232 162E                                    l10224 15FE  
                                  l10216 15CE                                    l10208 159E  
                                  l10160 147E                                    l10152 144E  
                                  l10144 141E                                    l10136 13EE  
                                  l10128 13BE                                    l10320 1AB4  
                                  l10400 0940                                    l11120 43D4  
                                  l11008 413E                                    l10314 181E  
                                  l10306 17EA                                    l10250 169A  
                                  l10242 166A                                    l10234 163A  
                                  l10226 160A                                    l10218 15DA  
                                  l10170 14BA                                    l10162 148A  
                                  l10154 145A                                    l10146 142A  
                                  l10138 13FA                                    l10410 09CC  
                                  l10402 095C                                    l11050 37D4  
                                  l10074 44E4                                    l11026 4192  
                                  l11018 4170                                    l10308 17F6  
                                  l10260 16D6                                    l10252 16A6  
                                  l10244 1676                                    l10236 1646  
                                  l10228 1616                                    l10180 14F6  
                                  l10172 14C6                                    l10164 1496  
                                  l10156 1466                                    l10148 1436  
                                  l10500 0E7A                                    l10420 0A58  
                                  l10412 09E8                                    l10404 0978  
                                  l11108 38B6                                    l11124 43EC  
                                  l11036 4C1C                                    l10334 1AE6  
                                  l10326 1AD2                                    l10270 1712  
                                  l10262 16E2                                    l10254 16B2  
                                  l10246 1682                                    l10238 1652  
                                  l10190 1532                                    l10182 1502  
                                  l10174 14D2                                    l10166 14A2  
                                  l10158 1472                                    l10342 1B10  
                                  l10318 182A                                    l10094 4670  
                                  l10510 0EFC                                    l10502 0E94  
                                  l10430 0AE4                                    l10422 0A74  
                                  l10414 0A04                                    l10406 0994  
                                  l10350 0684                                    l11230 3D9E  
                                  l10336 1AE8                                    l10280 174E  
                                  l10272 171E                                    l10264 16EE  
                                  l10256 16BE                                    l10248 168E  
                                  l10192 153E                                    l10184 150E  
                                  l10176 14DE                                    l10168 14AE  
                                  l11160 4030                                    l11216 4DDC  
                                  l10520 0F7E                                    l10512 0F16  
                                  l10504 0EAE                                    l10440 0B6E  
                                  l10432 0B00                                    l10424 0A90  
                                  l10416 0A20                                    l10408 09B0  
                                  l10360 0710                                    l10352 06A0  
                                  l11080 383E                                    l11072 3816  
                                  l11056 37FC                                    l11144 443A  
                                  l11136 440C                                    _B0CON 000E20  
                                  l10338 1AF8                                    l10290 178A  
                                  l10282 175A                                    l10274 172A  
                                  l10266 16FA                                    l10258 16CA  
                                  l10194 154A                                    l10186 151A  
                                  l10178 14EA                                    l10530 1018  
                                  l10522 0F98                                    l10514 0F30  
                                  l10506 0EC8                                    l10450 0BF0  
                                  l10442 0B88                                    l10434 0B1C  
                                  l10426 0AAC                                    l10418 0A3C  
                                  l10370 079C                                    l10362 072C  
                                  l10354 06BC                                    l11090 3868  
                                  l11082 3846                                    l11322 45D6  
                                  l11234 3DBA                                    l11242 427C  
                                  l10292 1796                                    l10284 1766  
                                  l10276 1736                                    l10268 1706  
                                  l10196 1556                                    l10188 1526  
                                  l11180 4074                                    l11164 4046  
                                  l10612 4C54                                    l10532 1036  
                                  l10524 0FB2                                    l10516 0F4A  
                                  l10508 0EE2                                    l10460 0C72  
                                  l10452 0C0A                                    l10444 0BA2  
                                  l10436 0B38                                    l10428 0AC8  
                                  l10380 0828                                    l10372 07B8  
                                  l10364 0748                                    l10356 06D8  
                                  l10540 106E                                    l11092 3874  
                                  l11084 384C                                    l11308 4732  
                                  l11324 45E2                                    l11244 42E6  
                                  l10294 17A2                                    l10286 1772  
                                  l10278 1742                                    l10198 1562  
                                  l10630 3690                                    l10550 130E  
                                  l10534 1050                                    l10526 0FCC  
                                  l10518 0F64                                    l10470 0CF4  
                                  l10462 0C8C                                    l10454 0C24  
                                  l10446 0BBC                                    l10438 0B54  
                                  l10390 08B4                                    l10382 0844  
                                  l10374 07D4                                    l10366 0764  
                                  l10358 06F4                                    l10542 12E2  
                                  l11078 3832                                    l11350 4646  
                                  l11342 462E                                    l10296 17AE  
                                  l10288 177E                                    l11192 408E  
                                  l11176 406C                                    l10616 4C7E  
                                  l10560 1324                                    l10536 106A  
                                  l10528 0FFE                                    l10480 0D76  
                                  l10472 0D0E                                    l10464 0CA6  
                                  l10456 0C3E                                    l10448 0BD6  
                                  l10392 08D0                                    l10384 0860  
                                  l10376 07F0                                    l10368 0780  
                                  l11096 3890                                    l11272 4590  
                                  _B1CON 000E30                                    l10298 17BA  
                                  l10706 3B8E                                    l10810 34E6  
                                  l10802 34CE                                    l10562 1334  
                                  l10490 0DF8                                    l10482 0D90  
                                  l10474 0D28                                    l10466 0CC0  
                                  l10458 0C58                                    l10394 08EC  
                                  l10386 087C                                    l10378 080C  
                                  l11282 4AA4                                    l11354 465A  
                                  l11346 4636                                    l11338 461E  
                                  l11258 4566                                    l11188 4086  
                                  l10636 36A0                                    l10492 0E12  
                                  l10484 0DAA                                    l10476 0D42  
                                  l10468 0CDA                                    l10396 0908  
                                  l10388 0898                                    l11348 4642  
                                  l11268 4584                                    l10670 3754  
                                  l10814 34F2                                    l10806 34DA  
                                  l10558 1322                                    l10494 0E2C  
                                  l10486 0DC4                                    l10478 0D5C  
                                  l10398 0924                                    l10566 1354  
                                  l10902 3C80                                    l10664 3726  
                                  l10648 36CA                                    l10744 4D4E  
                                  l10840 3546                                    l10832 3530  
                                  l10824 3518                                    l10496 0E46  
                                  l10488 0DDE                                    l11288 4AD6  
                                  l11296 4FF4                                    _B2CON 000E40  
                                  l10658 370A                                    l10690 3796  
                                  l10818 3502                                    l10498 0E60  
                                  l10922 3CDA                                    l10914 3CBC  
                                  l10684 3790                                    l10844 3552  
                                  l10836 353A                                    l10828 3524  
                                  l10780 50C2                                    l10924 3CDE  
                                  l10908 3CA0                                    l10678 376E  
                                  l10790 34B0                                    l10926 3CF4  
                                  l10688 3794                                    l10848 355E  
                                  _B3CON 000E50                                    l10874 3606  
                                  l10858 35A8                                    l10794 34BA  
                                  l10946 3D3E                                    l10938 3D28  
                                  l10890 5064                                    l10964 41BC  
                                  l10868 35F0                                    l10956 3D5C  
                                  l10974 41FC                                    l10966 41C0  
                                  l10798 34C4                                    l10878 3616  
                                  l10976 4208                                    l10968 41D8  
                                  _B4CON 000E60                                    l10994 4102  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000E70  
             __end_of_vscp_goActiveState 50B0                            ___fltol@sign1 0043  
                        __end_of___aldiv 41A4            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 38E4  
                                  ?_main 0001                   ?_vscp_goBootloaderMode 0001  
                        __end_of___fldiv 4476                          __end_of___flneg 5006  
                                  _EEADR 000FA9                          __end_of___lbmod 4F6E  
                        __end_of___flmul 40CA                          __end_of___flsub 4D92  
                        __end_of___fltol 466C                  _vscp_handleDropNickname 4E6C  
                                  _BSEL0 000DF8                                    u10020 455C  
                                  u10110 4602                                    u10115 45F8  
                                  _T0CON 000FD5                                    i1l142 00BA  
                                  i1l136 0082                                    i1l162 028C  
                                  i1l159 0236                          sendCANFrame@dlc 0040  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                      ??_writeCoeffs2Ram 001A                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 520E  
             _vscp_readNicknamePermanent 5204                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                       setEventData@newval 0089  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                          ___awtofl@sign 001D                           __CFG_EBTR3$OFF 000000  
                  __end_of_sendTempEvent 48F4                             _vscp_getGUID 516C  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                                  _floor 3D60                                    _ldexp 4526  
                           _vscp_getZone 51E6                                    _frexp 470C  
                     vscp_writeAppReg@rv 0026                _vscp_getRegisterPagesUsed 5228  
                 __size_of_vscp_getEvent 002A                                    main@i 00BB  
                             _ConvertADC 5224                             _vscp_setGUID 5070  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 522E  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 4FBC                              exp@exponent 00AA  
                            ldexp@newexp 008D                          __initialization 4CD8  
                            log@exponent 0044                             __end_of_main 3F52  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                        ?_Celsius2Kelvin 002D                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001F                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 0024                   ??_vscp_restoreDefaults 0011  
                                 ??_main 0046            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 001A                 ??_vscp_setManufacturerId 0012  
               _vscp_handleProtocolEvent 1B14                            __activetblptr 000002  
                      __RegsToCANID@type 0011               ECANReceiveMessage@msgFlags 0017  
                       doWork@calVoltage 0172                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_floor 0098  
                                 ?_ldexp 0089                     __size_of_handle_sync 0082  
                                 ?_frexp 000E                         __end_of___altofl 4C4A  
             ECANReceiveMessage@savedPtr 0018                                   _CANCON 000F6F  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                         __end_of___flpack 4254  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                       __end_of___awtofl 4E06                         ?_doOneSecondWork 0001  
                     vscp_writeStdReg@rv 0020                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                                 i1l8800 0072                                   i1l8810 0092  
                                 i1l8802 0076                                   i1l8812 009C  
                                 i1l8820 00AE                                   i1l8804 007E  
                                 i1l8830 00C4                                   i1l8814 00A4  
                                 i1l8806 0084                                   i1l8840 00FC  
                                 i1l8816 00A8                                   i1l8808 0086  
                                 i1l8832 00C6                                   i1l8850 0144  
                                 i1l8842 0108                                   i1l8818 00AA  
                                 i1l8860 0184                                   i1l8852 0148  
                                 i1l8844 010C                                   i1l8836 00D0  
                                 i1l8870 01E8                                   i1l8862 01AC  
                                 i1l8854 0170                                   i1l8846 0134  
                                 i1l8838 00F8                                   i1l8790 003C  
                                 i1l8880 0228                                   i1l8872 01EC  
                                 i1l8864 01B0                                   i1l8856 0174  
                                 i1l8848 0138                                   i1l8792 0048  
                                 i1l8882 0234                                   i1l8874 01F8  
                                 i1l8866 01BC                                   i1l8858 0180  
                                 i1l8794 004E                                   i1l8884 0238  
                                 i1l8876 01FC                                   i1l8868 01C0  
                                 i1l8796 0052                                   i1l8788 0034  
                                 i1l8886 0242                                   i1l8878 0224  
                                 i1l8894 024C                                   i1l8798 0062  
                                 i1l8888 0246                                   i1l8896 0286  
                                 i1l8898 028A                          _init_app_eeprom 2138  
                       __end_of___lwtofl 4EF2                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001C                   ECANReceiveMessage@temp 001D  
                      getVSCPFrame@pData 0028                        getVSCPFrame@pSize 0027  
                     _vscp_newNodeOnline 4EF2                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1162 0088                                   ___flge 4A8E  
                         getCANFrame@pid 0022                                ??___aldiv 0045  
                              ??___fladd 0026                                   ___wmul 4E3A  
                              ??___fldiv 0035                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0043                                ??___flsub 0035  
                              ??___fltol 0082                            _vscp_getEvent 4F1C  
                                 _doWork 2C66                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 001A                      vscp_writeAppReg@reg 0025  
             __end_of_vscp_setSegmentCRC 51B8                      vscp_writeAppReg@val 0023  
                    vscp_writeAppReg@pos 0024                                   clear_0 4CE0  
                                 clear_1 4CF2                                   clear_2 4CFE  
                                 clear_3 4D0A                            ?_sendCANFrame 003C  
           vscp_handleProtocolEvent@byte 0095                                   floor@i 009C  
                                 floor@x 0098                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 00BC                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 0011  
              ??_vscp_getSubMinorVersion 000E     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000E                     ??_vscp_newNodeOnline 0044  
                            ?_ConvertADC 0001                       __size_of___asfladd 004A  
                     __size_of___asfldiv 004C                       __size_of___asflmul 004C  
                             ___fladd@f1 001E                               ___fladd@f2 0022  
                     __size_of___asflsub 004A                               ___flge@ff1 000E  
                             ___flge@ff2 0012                         __end_ofexp@coeff 0648  
                       __end_oflog@coeff 066C                          ___lbmod@divisor 000E  
                             ___altofl@c 0094                               ___fldiv@f1 0060  
                             ___fldiv@f2 0064                               ___fldiv@f3 003C  
                             __accesstop 0060                  __end_of__initialization 4D10  
                        ___lbmod@counter 0010                       _Celsius2Fahrenheit 4902  
                             ___flneg@f1 000E            __size_of_vscp_getMinorVersion 0002  
                             ___flmul@f1 0068                               ___flmul@f2 006C  
                           eval_poly@res 0085                               ___flsub@f1 002D  
                             ___flsub@f2 0031                               ___fltol@f1 007E  
                        writeEEPROM@data 0010                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 504E                               ___awtofl@c 0018  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0028  
                    ?_Celsius2Fahrenheit 007E                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                   ___asflmul@multiplicand 007E  
            __end_of_vscp_check_pstorage 504E                  __size_of_vscp_setUserID 0018  
                          __end_of_floor 3E5C                            __end_of_ldexp 45CA  
                          __end_of_frexp 4792                      ?_vscp_writeRegister 0027  
                             __end_ofPL2 2B0E                               __end_ofPL4 2B26  
                             __end_ofPL6 2B42                               __end_ofPL8 2B5E  
                         ??_sendCANFrame 0042                               ___lwtofl@c 001A  
             __end_of_vscp_getFamilyCode 5204                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 0204             __size_of_getCalibrationValue 0048  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 51FA  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0027  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 1358  
                 getVSCPFrame@pvscpclass 002D                  __end_of_init_app_eeprom 2700  
                   ??_Celsius2Fahrenheit 0043              __end_of_vscp_setControlByte 51A6  
               __end_of_vscp_writeStdReg 3D60                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 008F  
                                ??_frexp 0014                            ?_setEventData 0086  
                   ??_vscp_writeRegister 0028          __end_of_vscp_handleDropNickname 4E9C  
                           _getVSCPFrame 4814                               __pbssBANK0 00BC  
                             __pbssBANK1 0100                       __size_of_eval_poly 00A0  
             __end_of_vscp_getBufferSize 522C                         Celsius2Kelvin@tc 002D  
                  vscp_writeRegister@reg 0028       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 466C  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 5230  
                                ?___wmul 000E                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0120  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0011                                  _B5RXFUL 007387  
                      __end_of___asfladd 4B70                        __end_of___asfldiv 4A8E  
                       WriteTimer0@timer 0003                                ?___altofl 0094  
                      __end_of___asflmul 4B26                                  _ECANCON 000F77  
                      __end_of___asflsub 4BBA                                ?___flpack 000E  
                          ??_WriteTimer0 0003                         doWork@resistance 0194  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                    sendVSCPFrame@priority 0064  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72                                ?___lwtofl 001A  
                    vscp_writeStdReg@reg 0021             __end_of_vscp_doOneSecondWork 4A42  
                                i1l11414 025E                       _adc_series_counter 0049  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0062  
                             _high_alarm 004A          __end_of_interrupt_at_low_vector 02AA  
               vscp_readStdReg@code_1135 0024                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 3F52                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 4978               __end_of_vscp_getMatrixInfo 50E4  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                           ??_setEventData 0045  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                          setEventData@v 0086                       _vscp_goActiveState 5092  
                 __size_of_sendVSCPFrame 00B2             __end_of_vscp_getMajorVersion 5234  
                     __size_of_vscp_init 0046                               _readEEPROM 5180  
                 _vscp_getManufacturerId 5144                   _vscp_setManufacturerId 50E4  
                        _ECANSendMessage 363A                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 0032  
                       ??_Celsius2Kelvin 0031                                  __Lparam 0000  
                     _vscp_node_substate 0123               __end_of_vscp_getSegmentCRC 5218  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
      __end_of_vscp_getRegisterPagesUsed 522A                 __size_of_vscp_getMDF_URL 0018  
                                ___aldiv 40E8                          __size_of___flge 004C  
                                ___fladd 37A0                                  ___fldiv 43C6  
                                ___flneg 4FE2                                  ___lbmod 4F46  
                                ___flmul 4022                                  ___flsub 4D58  
                                ___fltol 45CA                          __size_of___wmul 0022  
                        getCANFrame@pdlc 0020                                _FIFOEMPTY 007BA7  
                        __size_of_doWork 042C                             __psmallconst 0600  
                             ??___altofl 0045                     __end_of_init_app_ram 4DCC  
                             ??___flpack 0014                       _vscp_sendHeartBeat 4F96  
                                __pcinit 4CD8                               ??___awtofl 001C  
                         _vscp_deviceURL 0600                        __end_of_eval_poly 4300  
                                __ramtop 0600                                  __ptext0 3E5C  
                                __ptext1 2C66                                  __ptext2 4EC8  
                                __ptext3 4A42                                  __ptext4 4B26  
                                __ptext5 40E8                                  __ptext6 4BBA  
                                __ptext7 38F6                                  __ptext8 32B6  
                                __ptext9 4FE2                               ??___lwtofl 001E  
                         _vscp_getUserID 5158                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 0044                             __size_of_exp 01E6  
                           __size_of_log 012E                    vscp_writeStdReg@value 001B  
                       ___aldiv@dividend 0086                      ?_vscp_sendHeartBeat 0044  
               ??_vscp_handleSetNickname 0012                                  _seconds 004C  
                                doWork@B 0192                                  doWork@i 01A1  
                                doWork@j 0198                                  doWork@v 018E  
                    __end_of_WriteTimer0 51DC                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 001C                       vscp_getMDF_URL@idx 000F  
          vscp_handleProtocolEvent@bytes 008C                     end_of_initialization 4D10  
                                exp@sign 00AC             __end_of_vscp_handleHeartbeat 4D58  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                __end_of_writeCoeffs2Ram 470C                     __end_of_sendCANFrame 4C92  
                             doWork@Rinf 016E                       doOneSecondWork@tmp 0097  
                             doWork@temp 019D                vscp_handleProtocolEvent@i 0099  
              vscp_handleProtocolEvent@j 009A                vscp_handleProtocolEvent@k 0093  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 4F6E  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 0090                                  postdec1 000FE5  
                                postdec2 000FDD                   __size_of_sendTempEvent 0068  
                         _vscp_setUserID 50FC                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 51CA              _vscp_writeNicknamePermanent 51B8  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 4314  
                 __end_of_vscp_getUserID 516C             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 4CD8  
                         _vscp_probe_cnt 0124                      __end_of_getCANFrame 4EC8  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 0090                 __size_of_vscp_readAppReg 07AC  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001C  
                       writeCoeffs2Ram@i 001F                         writeCoeffs2Ram@j 0021  
                            ___fldiv@exp 0041                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 017E                       _vscp_setSegmentCRC 51A6  
                      readEEPROM@address 0016                             ??_ConvertADC 0001  
             vscp_handleProtocolEvent@cb 0091                  __end_of_ECANSendMessage 37A0  
                      vscp_readStdReg@rv 002A                              ___lbmod@rem 0011  
                            ___flmul@exp 0077                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 3AE8                      _getCalibrationValue 4BBA  
                            ?_readEEPROM 0016                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 4F96                               _vscp_error 5220  
                   _vscp_doOneSecondWork 49EE                               _vscp_timer 011E  
                 __end_of_vscp_setUserID 5114                 __size_of_doOneSecondWork 0400  
                 vscp_sendHeartBeat@zone 0045                     __end_of_setEventData 4526  
                         ?_sendVSCPFrame 0060                           __end_of___flge 4ADA  
                   __size_of_writeEEPROM 0026                           __end_of___wmul 4E5C  
                        ?_vscp_getUserID 0001                           __end_of_doWork 3092  
           __end_of_vscp_getMinorVersion 5232                              _WriteTimer0 51CA  
                   _vscp_getMajorVersion 5232                       __end_of_ConvertADC 5228  
                   ?_getCalibrationValue 001A                     ??_vscp_setSegmentCRC 0011  
                      ??_vscp_getMDF_URL 000E            ??_vscp_getBootLoaderAlgorithm 000E  
                             floor@expon 00A0                              __end_ofPL10 2B6C  
                            __end_ofPL20 2BB4                              __end_ofPL12 2B86  
                      ?_vscp_writeAppReg 0023                              __end_ofPL30 3C38  
                            __end_ofPL22 3AF6                              __end_ofPL14 2B94  
                            __end_ofPL40 3B08                              __end_ofPL32 2BE6  
                            __end_ofPL24 2BCE                              __end_ofPL16 2BA4  
                            __end_ofPL50 38F6                              __end_ofPL42 3B1C  
                            __end_ofPL34 2BFC                              __end_ofPL26 3C26  
                            __end_ofPL18 3C16                              __end_ofPL60 4E6C  
                            __end_ofPL52 3B42                              __end_ofPL44 3C4C  
                            __end_ofPL36 2120                              __end_ofPL28 210C  
                            __end_ofPL70 2C3E                              __end_ofPL62 2C30  
                            __end_ofPL54 2C0E                              __end_ofPL46 362E  
                            __end_ofPL38 4314                              __end_ofPL80 2C5A  
                            __end_ofPL72 4902                              __end_ofPL64 1368  
                            __end_ofPL56 30A4                              __end_ofPL48 3B30  
                            __end_ofPL90 2C60                              __end_ofPL82 3C56  
                            __end_ofPL74 40E8                              __end_ofPL66 40DA  
                            __end_ofPL58 2C20                              __end_ofPL92 2C66  
                            __end_ofPL84 363A                              __end_ofPL76 212E  
                            __end_ofPL68 32B6                              __end_ofPL86 4260  
                            __end_ofPL78 2C4C                              __end_ofPL88 2138  
                    start_initialization 4CD8                               eval_poly@d 0082  
                             eval_poly@n 0083                               eval_poly@x 007E  
                             ldexp@value 0089          __size_of_vscp_handleSetNickname 0024  
                            __end_of_exp 349C                              __end_of_log 3A24  
                     ??_vscp_writeAppReg 0024                            _sendTempEvent 488C  
                      ?_vscp_writeStdReg 001B                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                       ??_vscp_writeStdReg 001C  
                     _vscp_getFamilyCode 51FA                      __end_of_handle_sync 4814  
                doOneSecondWork@setpoint 0098                           ??__CANIDToRegs 0015  
                     _vscp_getFamilyType 51F0                               frexp@value 000E  
                    sendVSCPFrame@nodeid 0063                         ?_writeCoeffs2Ram 0001  
                      _vscp_readRegister 50B0                     Celsius2Fahrenheit@tc 007E  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 0090  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 001E  
                    ?_vscp_getFamilyCode 000E                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 20F4                          ?_vscp_setUserID 0011  
                    ?_vscp_getFamilyType 000E                    __size_of_init_app_ram 003A  
               ?_vscp_handleDropNickname 0001                   getCalibrationValue@cal 001F  
                      ??_vscp_getSubzone 001A                                 ??___flge 0016  
               __end_of__ECANPointBuffer 49EE                        __CANIDToRegs@type 0014  
                            _getCANFrame 4E9C                                 ??___wmul 0012  
                               ??_doWork 00AD                       _vscp_getBufferSize 522A  
            vscp_handleProtocolEvent@len 008D              vscp_handleProtocolEvent@pos 008B  
             __end_of_ECANReceiveMessage 32A8                      ??_vscp_readRegister 002C  
         __size_of_vscp_goBootloaderMode 0018                    ?_vscp_getMajorVersion 0001  
                  ??_getCalibrationValue 001C            __end_of_vscp_goBootloaderMode 5144  
                   _vscp_handleHeartbeat 4D1A                        __size_of___altofl 0048  
                      __size_of___flpack 00B0                                ___asfladd 4B26  
                    ?_vscp_getBufferSize 0001                        __size_of___awtofl 003A  
                    __size_of_readEEPROM 0014                                ___asfldiv 4A42  
                            __pbssBIGRAM 01A2                                ___asflmul 4ADA  
                              ___asflsub 4B70             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 0012                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0046                     ??_vscp_getFamilyType 0012  
                      __size_of___lwtofl 002A                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 0060                            __pcstackBANK1 016E  
                         ?_sendTempEvent 0001                         _vscp_alarmstatus 004D  
            __size_of_Celsius2Fahrenheit 0076                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0048                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 0011                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 001A                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 50CA                             _init_app_ram 4D92  
                   getCalibrationValue@i 0021                              _doWork$2267 0176  
                            _doWork$2268 017A                              _doWork$2269 017E  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 0199  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 001B  
                   ??_vscp_getBufferSize 000E                             _current_temp 0100  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 50CA  
                 _vscp_handleSetNickname 5006                          ??_sendVSCPFrame 0067  
                               ?___aldiv 0086                                 ?___fladd 001E  
                               ?___fldiv 0060                                 ?___flneg 000E  
                               ?___lbmod 000E                                 ?___flmul 0068  
                               ?___flsub 002D                                 ?___fltol 007E  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 001A  
                            __pintcodelo 0018                        ??_doOneSecondWork 0090  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1152 008F  
                vscp_readStdReg@idx_1136 0029               vscp_setManufacturerId@data 0011  
                           _sendCANFrame 4C4A                              __smallconst 0600  
                             ?___asfladd 002D                        WriteTimer0@timer0 0001  
                             ?___asfldiv 0068                               ?___asflmul 007E  
                             ?___asflsub 0035                       _vscp_getSegmentCRC 520E  
                         ??_vscp_getGUID 001A                                _eval_poly 4260  
                            _handle_sync 4792                           ??_vscp_getZone 001A  
         __end_of_vscp_getManufacturerId 5158           __end_of_vscp_setManufacturerId 50FC  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1151 008E  
                         __size_of_floor 00FC                           __size_of_ldexp 00A4  
                         ??_vscp_setGUID 0012                           __size_of_frexp 0086  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 011C                          ___aldiv@divisor 008A  
                        ___aldiv@counter 008E                           ___wmul@product 0014  
                 ??_vscp_doOneSecondWork 007F                   sendVSCPFrame@vscpclass 0060  
                   _vscp_getMinorVersion 5230                                _sendTimer 011A  
                               _PIE1bits 000F9D                                _low_alarm 004B  
                  __size_of_setEventData 00B0                                 i1u710_20 00A4  
                               i1u710_21 00A2                                 i1u711_20 00B8  
                               i1u711_21 00B6                                 i1u720_20 0242  
                               i1u712_20 00C2                                 i1u720_21 0240  
                               i1u712_21 00C0                                 i1u713_20 00CE  
                               i1u713_21 00CC                                 i1u714_20 0108  
                               i1u706_20 003C                                 i1u714_21 0106  
                               i1u706_21 003A                                 i1u715_20 0144  
                               i1u707_20 007E                                 i1u715_21 0142  
                               i1u707_21 007C                                 i1u716_20 0180  
                               i1u708_20 0092                                 i1u716_21 017E  
                               i1u708_21 0090                                 i1u717_20 01BC  
                               i1u709_20 009C                                 i1u717_21 01BA  
                               i1u709_21 009A                                 i1u718_20 01F8  
                               i1u718_21 01F6                                 i1u719_20 0234  
                               i1u719_21 0232                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1                         ECANSendMessage@i 0039  
                       ECANSendMessage@j 0034                    __end_of_vscp_getEvent 4F46  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 0032                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 001A  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 000E  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 0044                       vscp_setUserID@data 0011  
                   __end_of__CANIDToRegs 3C02                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 000E                             __RegsToCANID 3A24  
                     _vscp_probe_address 0051                          ??_sendTempEvent 0045  
            __size_of_vscp_goActiveState 001E                               ?_eval_poly 007E  
                    getVSCPFrame@pNodeId 0025                                _vscp_init 4C92  
                              _vscp_imsg 00BE                                _vscp_hour 0121  
                              _vscp_omsg 00CC                         vscp_setGUID@data 0011  
      __size_of_vscp_handleProtocolEvent 05E0                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001     __size_of_vscp_writeNicknamePermanent 0012  
                       _vscp_page_select 0046                             _setEventData 4476  
             __size_of_vscp_readRegister 001A                        _measurement_clock 0112  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 0018  
               __size_of_init_app_eeprom 05C8             __end_of_vscp_restoreDefaults 5220  
                              frexp@eptr 0012                               _EECON1bits 000FA6  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 010C              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 001A                          _vscp_getMDF_URL 5114  
                               __Lrparam 0000                         __CANIDToRegs@val 0010  
                       __CANIDToRegs@ptr 000E                         __size_of___aldiv 00BC  
                       __size_of___fladd 0144                         __size_of___fldiv 00B0  
                       __size_of___flneg 0024                         _vscp_initledfunc 0050  
                       __size_of___lbmod 0028                         __size_of___flmul 00A8  
                 ??_vscp_handleHeartbeat 001A                         __size_of___flsub 003A  
                       __size_of___fltol 00A2                                 ___altofl 4C02  
                               ___flpack 41A4                         getCANFrame@flags 0023  
                           ?_WriteTimer0 0001                                 ___awtofl 4DCC  
                       getCANFrame@pdata 0021                                 ___lwtofl 4EC8  
                         sendTempEvent@i 008F                  __size_of_Celsius2Kelvin 0034  
                            ??___asfladd 0033                              ??___asfldiv 0043  
                            ??___asflmul 0043                                 _exp$2273 00A6  
                            ??___asflsub 003B                       __end_of_readEEPROM 5194  
                             ?_vscp_init 0001                                 __ptext10 4526  
                               __ptext11 4260                                 __ptext20 43C6  
                               __ptext12 3D60                                 __ptext21 49EE  
                               __ptext13 45CA                                 __ptext30 4902  
                               __ptext22 4F96                                 __ptext14 470C  
                               __ptext31 37A0                                 __ptext23 51DC  
                               __ptext15 4A8E                                 __ptext40 50E4  
                               __ptext32 4E06                                 __ptext24 51E6  
                               __ptext16 4C02                                 __ptext41 50FC  
                               __ptext33 1B14                                 __ptext25 2700  
                               __ptext17 4B70                                 __ptext50 5228  
                               __ptext42 5070                                 __ptext34 4F46  
                               __ptext26 5220                                 __ptext18 4D58  
                               __ptext51 522A                                 __ptext43 066E  
                               __ptext35 504E                                 __ptext27 4792  
                               __ptext19 4ADA                                 __ptext60 4EF2  
                               __ptext52 522C                                 __ptext44 466C  
                               __ptext36 3C56                                 __ptext28 488C  
                               __ptext61 4E6C                                 __ptext53 5144  
                               __ptext45 4E3A                                 __ptext37 5218  
                               __ptext29 4476                                 __ptext70 5092  
                               __ptext62 4C92                                 __ptext54 5158  
                               __ptext46 50B0                                 __ptext38 4D92  
                               __ptext71 4F6E                                 __ptext63 5204  
                               __ptext55 5114                                 __ptext47 349C  
                               __ptext39 2138                                 __ptext80 3A24  
                               __ptext72 4314                                 __ptext64 5180  
                               __ptext56 516C                                 __ptext48 51F0  
                               __ptext81 4978                                 __ptext73 4C4A  
                               __ptext65 5006                                 __ptext57 522E  
                               __ptext49 51FA                                 __ptext90 41A4  
                               __ptext82 502A                                 __ptext74 363A  
                               __ptext66 4D1A                                 __ptext58 5230  
                               __ptext91 1368                                 __ptext83 5194  
                               __ptext75 3B42                                 __ptext67 512C  
                               __ptext59 5232                                 __ptext84 51A6  
                               __ptext76 4F1C                                 __ptext68 50CA  
                               __ptext93 5224                                 __ptext85 520E  
                               __ptext77 4814                                 __ptext69 3F52  
                               __ptext94 51CA                                 __ptext86 51B8  
                               __ptext78 4E9C                                 __ptext95 0000  
                               __ptext87 4FBC                                 __ptext79 30A4  
                               __ptext88 4DCC                                 __ptext89 4022  
         vscp_goBootloaderMode@algorithm 0011                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 51DC                         ??_vscp_setUserID 0012  
                          __size_of_main 00F6                __size_of_vscp_writeAppReg 0CEA  
                    _vscp_check_pstorage 502A                            init_app_ram@i 000E  
         vscp_handleProtocolEvent@i_1150 0094           vscp_handleProtocolEvent@i_1153 0098  
         vscp_handleProtocolEvent@i_1161 0092                         doOneSecondWork@i 009A  
                   __end_of_vscp_getGUID 5180                            ??_writeEEPROM 0011  
              __size_of_vscp_writeStdReg 010A                      ECANSendMessage@data 001C  
               ECANSendMessage@tempBSEL0 0035                             ?_getCANFrame 0020  
                    ECANSendMessage@mode 0032                     __end_of_vscp_getZone 51F0  
                    ECANSendMessage@temp 0038                        ?__ECANPointBuffer 000E  
                      vscp_setUserID@idx 0012                     __end_of_vscp_setGUID 5092  
                     vscp_readAppReg@reg 001B                       vscp_readAppReg@pos 001A  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 008A                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                      _vscp_setControlByte 5194  
                               exp@coeff 0620                    ___flmul@f3_as_product 0078  
                               log@coeff 0648              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 1368                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2                              ??_eval_poly 0043  
           ??_vscp_readNicknamePermanent 001A                      ECANReceiveMessage@i 001B  
                        _vscp_guid_reset 004E                          _vscp_readStdReg 349C  
           vscp_handleDropNickname@bytes 001A               __end_of_vscp_newNodeOnline 4F1C  
                     _ECANReceiveMessage 30A4                           ??_getVSCPFrame 0029  
                        _vscp_initbtncnt 004F                          sendVSCPFrame@id 007B  
                               intlevel1 0000                   ??_vscp_getMinorVersion 000E  
                vscp_getMatrixInfo@pData 000E                  __end_of_vscp_getMDF_URL 512C  
                   ?_vscp_setControlByte 0001                            _timeout_clock 0116  
                    ?_ECANReceiveMessage 0015                  ?_vscp_handleSetNickname 0001  
       __size_of_vscp_getSubMinorVersion 0002                          _vscp_node_state 00BD  
                           handle_sync@i 0092                          _doOneSecondWork 2700  
                           ??_vscp_error 000E                  ECANSendMessage@msgFlags 001E  
                    vscp_getMatrixInfo@i 000F                  vscp_setControlByte@ctrl 0011  
            __end_of_getCalibrationValue 4C02                       ECANSendMessage@ptr 003A  
                      ??_init_app_eeprom 0011                    __size_of__CANIDToRegs 00C0  
                         readEEPROM@data 0019                 __size_of_writeCoeffs2Ram 00A0  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 522E  
            _vscp_getBootLoaderAlgorithm 522C         __size_of_interrupt_at_low_vector 0292  
                 ECANSendMessage@dataLen 001D                      __end_of_writeEEPROM 4FE2  
                    __ECANPointBuffer@pt 0012                     ??_ECANReceiveMessage 0018  
                  ??_vscp_check_pstorage 001A                   ECANSendMessage@buffers 0033  
                  _vscp_goBootloaderMode 512C               __end_of_Celsius2Fahrenheit 4978  
                   _vscp_restoreDefaults 5218              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 001A                  __end_of_vscp_getSubzone 51E6  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 008F                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 5070                       __end_of_vscp_error 5224  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 0048  
         __end_of_vscp_handleSetNickname 502A       vscp_handleProtocolEvent@bytes_1157 0096  
                  ??_vscp_setControlByte 0011                     vscp_readRegister@reg 002C  
                           ___fladd@exp1 002C                             ___fladd@exp2 002B  
                           ___fladd@sign 002A                             __CANIDToRegs 3B42  
      vscp_handleProtocolEvent@page_save 0086                            ___asfladd@f1p 002D  
            __size_of_vscp_getBufferSize 0002                             ___asfladd@f2 002F  
               __size_of_ECANSendMessage 0166                             ___asfldiv@f2 006A  
